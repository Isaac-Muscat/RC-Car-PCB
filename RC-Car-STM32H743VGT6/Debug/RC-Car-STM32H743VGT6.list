
RC-Car-STM32H743VGT6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001738c  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b0  0801762c  0801762c  0001862c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08017adc  08017adc  00018adc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08017ae4  08017ae4  00018ae4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08017ae8  08017ae8  00018ae8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000168  24000000  08017aec  00019000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00027720  24000168  08017c54  00019168  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24027888  08017c54  00019888  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00019168  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002e38d  00000000  00000000  00019196  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000551d  00000000  00000000  00047523  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000021a0  00000000  00000000  0004ca40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001a42  00000000  00000000  0004ebe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003d095  00000000  00000000  00050622  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00030abf  00000000  00000000  0008d6b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00171006  00000000  00000000  000be176  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0022f17c  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000095b4  00000000  00000000  0022f1c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000074  00000000  00000000  00238774  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000168 	.word	0x24000168
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08017614 	.word	0x08017614

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400016c 	.word	0x2400016c
 80002dc:	08017614 	.word	0x08017614

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b988 	b.w	80006b8 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	468e      	mov	lr, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	4688      	mov	r8, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d962      	bls.n	800049c <__udivmoddi4+0xdc>
 80003d6:	fab2 f682 	clz	r6, r2
 80003da:	b14e      	cbz	r6, 80003f0 <__udivmoddi4+0x30>
 80003dc:	f1c6 0320 	rsb	r3, r6, #32
 80003e0:	fa01 f806 	lsl.w	r8, r1, r6
 80003e4:	fa20 f303 	lsr.w	r3, r0, r3
 80003e8:	40b7      	lsls	r7, r6
 80003ea:	ea43 0808 	orr.w	r8, r3, r8
 80003ee:	40b4      	lsls	r4, r6
 80003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f4:	fa1f fc87 	uxth.w	ip, r7
 80003f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003fc:	0c23      	lsrs	r3, r4, #16
 80003fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000402:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000406:	fb01 f20c 	mul.w	r2, r1, ip
 800040a:	429a      	cmp	r2, r3
 800040c:	d909      	bls.n	8000422 <__udivmoddi4+0x62>
 800040e:	18fb      	adds	r3, r7, r3
 8000410:	f101 30ff 	add.w	r0, r1, #4294967295
 8000414:	f080 80ea 	bcs.w	80005ec <__udivmoddi4+0x22c>
 8000418:	429a      	cmp	r2, r3
 800041a:	f240 80e7 	bls.w	80005ec <__udivmoddi4+0x22c>
 800041e:	3902      	subs	r1, #2
 8000420:	443b      	add	r3, r7
 8000422:	1a9a      	subs	r2, r3, r2
 8000424:	b2a3      	uxth	r3, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000432:	fb00 fc0c 	mul.w	ip, r0, ip
 8000436:	459c      	cmp	ip, r3
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x8e>
 800043a:	18fb      	adds	r3, r7, r3
 800043c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000440:	f080 80d6 	bcs.w	80005f0 <__udivmoddi4+0x230>
 8000444:	459c      	cmp	ip, r3
 8000446:	f240 80d3 	bls.w	80005f0 <__udivmoddi4+0x230>
 800044a:	443b      	add	r3, r7
 800044c:	3802      	subs	r0, #2
 800044e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000452:	eba3 030c 	sub.w	r3, r3, ip
 8000456:	2100      	movs	r1, #0
 8000458:	b11d      	cbz	r5, 8000462 <__udivmoddi4+0xa2>
 800045a:	40f3      	lsrs	r3, r6
 800045c:	2200      	movs	r2, #0
 800045e:	e9c5 3200 	strd	r3, r2, [r5]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d905      	bls.n	8000476 <__udivmoddi4+0xb6>
 800046a:	b10d      	cbz	r5, 8000470 <__udivmoddi4+0xb0>
 800046c:	e9c5 0100 	strd	r0, r1, [r5]
 8000470:	2100      	movs	r1, #0
 8000472:	4608      	mov	r0, r1
 8000474:	e7f5      	b.n	8000462 <__udivmoddi4+0xa2>
 8000476:	fab3 f183 	clz	r1, r3
 800047a:	2900      	cmp	r1, #0
 800047c:	d146      	bne.n	800050c <__udivmoddi4+0x14c>
 800047e:	4573      	cmp	r3, lr
 8000480:	d302      	bcc.n	8000488 <__udivmoddi4+0xc8>
 8000482:	4282      	cmp	r2, r0
 8000484:	f200 8105 	bhi.w	8000692 <__udivmoddi4+0x2d2>
 8000488:	1a84      	subs	r4, r0, r2
 800048a:	eb6e 0203 	sbc.w	r2, lr, r3
 800048e:	2001      	movs	r0, #1
 8000490:	4690      	mov	r8, r2
 8000492:	2d00      	cmp	r5, #0
 8000494:	d0e5      	beq.n	8000462 <__udivmoddi4+0xa2>
 8000496:	e9c5 4800 	strd	r4, r8, [r5]
 800049a:	e7e2      	b.n	8000462 <__udivmoddi4+0xa2>
 800049c:	2a00      	cmp	r2, #0
 800049e:	f000 8090 	beq.w	80005c2 <__udivmoddi4+0x202>
 80004a2:	fab2 f682 	clz	r6, r2
 80004a6:	2e00      	cmp	r6, #0
 80004a8:	f040 80a4 	bne.w	80005f4 <__udivmoddi4+0x234>
 80004ac:	1a8a      	subs	r2, r1, r2
 80004ae:	0c03      	lsrs	r3, r0, #16
 80004b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b4:	b280      	uxth	r0, r0
 80004b6:	b2bc      	uxth	r4, r7
 80004b8:	2101      	movs	r1, #1
 80004ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80004be:	fb0e 221c 	mls	r2, lr, ip, r2
 80004c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004c6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ca:	429a      	cmp	r2, r3
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x11e>
 80004ce:	18fb      	adds	r3, r7, r3
 80004d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004d4:	d202      	bcs.n	80004dc <__udivmoddi4+0x11c>
 80004d6:	429a      	cmp	r2, r3
 80004d8:	f200 80e0 	bhi.w	800069c <__udivmoddi4+0x2dc>
 80004dc:	46c4      	mov	ip, r8
 80004de:	1a9b      	subs	r3, r3, r2
 80004e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004ec:	fb02 f404 	mul.w	r4, r2, r4
 80004f0:	429c      	cmp	r4, r3
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x144>
 80004f4:	18fb      	adds	r3, r7, r3
 80004f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x142>
 80004fc:	429c      	cmp	r4, r3
 80004fe:	f200 80ca 	bhi.w	8000696 <__udivmoddi4+0x2d6>
 8000502:	4602      	mov	r2, r0
 8000504:	1b1b      	subs	r3, r3, r4
 8000506:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800050a:	e7a5      	b.n	8000458 <__udivmoddi4+0x98>
 800050c:	f1c1 0620 	rsb	r6, r1, #32
 8000510:	408b      	lsls	r3, r1
 8000512:	fa22 f706 	lsr.w	r7, r2, r6
 8000516:	431f      	orrs	r7, r3
 8000518:	fa0e f401 	lsl.w	r4, lr, r1
 800051c:	fa20 f306 	lsr.w	r3, r0, r6
 8000520:	fa2e fe06 	lsr.w	lr, lr, r6
 8000524:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000528:	4323      	orrs	r3, r4
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	fa1f fc87 	uxth.w	ip, r7
 8000532:	fbbe f0f9 	udiv	r0, lr, r9
 8000536:	0c1c      	lsrs	r4, r3, #16
 8000538:	fb09 ee10 	mls	lr, r9, r0, lr
 800053c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000540:	fb00 fe0c 	mul.w	lr, r0, ip
 8000544:	45a6      	cmp	lr, r4
 8000546:	fa02 f201 	lsl.w	r2, r2, r1
 800054a:	d909      	bls.n	8000560 <__udivmoddi4+0x1a0>
 800054c:	193c      	adds	r4, r7, r4
 800054e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000552:	f080 809c 	bcs.w	800068e <__udivmoddi4+0x2ce>
 8000556:	45a6      	cmp	lr, r4
 8000558:	f240 8099 	bls.w	800068e <__udivmoddi4+0x2ce>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	eba4 040e 	sub.w	r4, r4, lr
 8000564:	fa1f fe83 	uxth.w	lr, r3
 8000568:	fbb4 f3f9 	udiv	r3, r4, r9
 800056c:	fb09 4413 	mls	r4, r9, r3, r4
 8000570:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000574:	fb03 fc0c 	mul.w	ip, r3, ip
 8000578:	45a4      	cmp	ip, r4
 800057a:	d908      	bls.n	800058e <__udivmoddi4+0x1ce>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000582:	f080 8082 	bcs.w	800068a <__udivmoddi4+0x2ca>
 8000586:	45a4      	cmp	ip, r4
 8000588:	d97f      	bls.n	800068a <__udivmoddi4+0x2ca>
 800058a:	3b02      	subs	r3, #2
 800058c:	443c      	add	r4, r7
 800058e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000592:	eba4 040c 	sub.w	r4, r4, ip
 8000596:	fba0 ec02 	umull	lr, ip, r0, r2
 800059a:	4564      	cmp	r4, ip
 800059c:	4673      	mov	r3, lr
 800059e:	46e1      	mov	r9, ip
 80005a0:	d362      	bcc.n	8000668 <__udivmoddi4+0x2a8>
 80005a2:	d05f      	beq.n	8000664 <__udivmoddi4+0x2a4>
 80005a4:	b15d      	cbz	r5, 80005be <__udivmoddi4+0x1fe>
 80005a6:	ebb8 0203 	subs.w	r2, r8, r3
 80005aa:	eb64 0409 	sbc.w	r4, r4, r9
 80005ae:	fa04 f606 	lsl.w	r6, r4, r6
 80005b2:	fa22 f301 	lsr.w	r3, r2, r1
 80005b6:	431e      	orrs	r6, r3
 80005b8:	40cc      	lsrs	r4, r1
 80005ba:	e9c5 6400 	strd	r6, r4, [r5]
 80005be:	2100      	movs	r1, #0
 80005c0:	e74f      	b.n	8000462 <__udivmoddi4+0xa2>
 80005c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005c6:	0c01      	lsrs	r1, r0, #16
 80005c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005cc:	b280      	uxth	r0, r0
 80005ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005d2:	463b      	mov	r3, r7
 80005d4:	4638      	mov	r0, r7
 80005d6:	463c      	mov	r4, r7
 80005d8:	46b8      	mov	r8, r7
 80005da:	46be      	mov	lr, r7
 80005dc:	2620      	movs	r6, #32
 80005de:	fbb1 f1f7 	udiv	r1, r1, r7
 80005e2:	eba2 0208 	sub.w	r2, r2, r8
 80005e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005ea:	e766      	b.n	80004ba <__udivmoddi4+0xfa>
 80005ec:	4601      	mov	r1, r0
 80005ee:	e718      	b.n	8000422 <__udivmoddi4+0x62>
 80005f0:	4610      	mov	r0, r2
 80005f2:	e72c      	b.n	800044e <__udivmoddi4+0x8e>
 80005f4:	f1c6 0220 	rsb	r2, r6, #32
 80005f8:	fa2e f302 	lsr.w	r3, lr, r2
 80005fc:	40b7      	lsls	r7, r6
 80005fe:	40b1      	lsls	r1, r6
 8000600:	fa20 f202 	lsr.w	r2, r0, r2
 8000604:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000608:	430a      	orrs	r2, r1
 800060a:	fbb3 f8fe 	udiv	r8, r3, lr
 800060e:	b2bc      	uxth	r4, r7
 8000610:	fb0e 3318 	mls	r3, lr, r8, r3
 8000614:	0c11      	lsrs	r1, r2, #16
 8000616:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800061a:	fb08 f904 	mul.w	r9, r8, r4
 800061e:	40b0      	lsls	r0, r6
 8000620:	4589      	cmp	r9, r1
 8000622:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000626:	b280      	uxth	r0, r0
 8000628:	d93e      	bls.n	80006a8 <__udivmoddi4+0x2e8>
 800062a:	1879      	adds	r1, r7, r1
 800062c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000630:	d201      	bcs.n	8000636 <__udivmoddi4+0x276>
 8000632:	4589      	cmp	r9, r1
 8000634:	d81f      	bhi.n	8000676 <__udivmoddi4+0x2b6>
 8000636:	eba1 0109 	sub.w	r1, r1, r9
 800063a:	fbb1 f9fe 	udiv	r9, r1, lr
 800063e:	fb09 f804 	mul.w	r8, r9, r4
 8000642:	fb0e 1119 	mls	r1, lr, r9, r1
 8000646:	b292      	uxth	r2, r2
 8000648:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800064c:	4542      	cmp	r2, r8
 800064e:	d229      	bcs.n	80006a4 <__udivmoddi4+0x2e4>
 8000650:	18ba      	adds	r2, r7, r2
 8000652:	f109 31ff 	add.w	r1, r9, #4294967295
 8000656:	d2c4      	bcs.n	80005e2 <__udivmoddi4+0x222>
 8000658:	4542      	cmp	r2, r8
 800065a:	d2c2      	bcs.n	80005e2 <__udivmoddi4+0x222>
 800065c:	f1a9 0102 	sub.w	r1, r9, #2
 8000660:	443a      	add	r2, r7
 8000662:	e7be      	b.n	80005e2 <__udivmoddi4+0x222>
 8000664:	45f0      	cmp	r8, lr
 8000666:	d29d      	bcs.n	80005a4 <__udivmoddi4+0x1e4>
 8000668:	ebbe 0302 	subs.w	r3, lr, r2
 800066c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000670:	3801      	subs	r0, #1
 8000672:	46e1      	mov	r9, ip
 8000674:	e796      	b.n	80005a4 <__udivmoddi4+0x1e4>
 8000676:	eba7 0909 	sub.w	r9, r7, r9
 800067a:	4449      	add	r1, r9
 800067c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000680:	fbb1 f9fe 	udiv	r9, r1, lr
 8000684:	fb09 f804 	mul.w	r8, r9, r4
 8000688:	e7db      	b.n	8000642 <__udivmoddi4+0x282>
 800068a:	4673      	mov	r3, lr
 800068c:	e77f      	b.n	800058e <__udivmoddi4+0x1ce>
 800068e:	4650      	mov	r0, sl
 8000690:	e766      	b.n	8000560 <__udivmoddi4+0x1a0>
 8000692:	4608      	mov	r0, r1
 8000694:	e6fd      	b.n	8000492 <__udivmoddi4+0xd2>
 8000696:	443b      	add	r3, r7
 8000698:	3a02      	subs	r2, #2
 800069a:	e733      	b.n	8000504 <__udivmoddi4+0x144>
 800069c:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a0:	443b      	add	r3, r7
 80006a2:	e71c      	b.n	80004de <__udivmoddi4+0x11e>
 80006a4:	4649      	mov	r1, r9
 80006a6:	e79c      	b.n	80005e2 <__udivmoddi4+0x222>
 80006a8:	eba1 0109 	sub.w	r1, r1, r9
 80006ac:	46c4      	mov	ip, r8
 80006ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b2:	fb09 f804 	mul.w	r8, r9, r4
 80006b6:	e7c4      	b.n	8000642 <__udivmoddi4+0x282>

080006b8 <__aeabi_idiv0>:
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop

080006bc <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80006c0:	f3bf 8f4f 	dsb	sy
}
 80006c4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80006c6:	4b06      	ldr	r3, [pc, #24]	@ (80006e0 <__NVIC_SystemReset+0x24>)
 80006c8:	68db      	ldr	r3, [r3, #12]
 80006ca:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80006ce:	4904      	ldr	r1, [pc, #16]	@ (80006e0 <__NVIC_SystemReset+0x24>)
 80006d0:	4b04      	ldr	r3, [pc, #16]	@ (80006e4 <__NVIC_SystemReset+0x28>)
 80006d2:	4313      	orrs	r3, r2
 80006d4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80006d6:	f3bf 8f4f 	dsb	sy
}
 80006da:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80006dc:	bf00      	nop
 80006de:	e7fd      	b.n	80006dc <__NVIC_SystemReset+0x20>
 80006e0:	e000ed00 	.word	0xe000ed00
 80006e4:	05fa0004 	.word	0x05fa0004

080006e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80006ee:	f001 fa49 	bl	8001b84 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006f2:	f002 f93f 	bl	8002974 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006f6:	f000 f8f1 	bl	80008dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006fa:	f000 fd09 	bl	8001110 <MX_GPIO_Init>
  MX_DMA_Init();
 80006fe:	f000 fcaf 	bl	8001060 <MX_DMA_Init>
  MX_MDMA_Init();
 8000702:	f000 fce5 	bl	80010d0 <MX_MDMA_Init>
  MX_USART1_UART_Init();
 8000706:	f000 fc59 	bl	8000fbc <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 800070a:	f015 fd81 	bl	8016210 <MX_USB_DEVICE_Init>
  MX_DCMI_Init();
 800070e:	f000 f95f 	bl	80009d0 <MX_DCMI_Init>
  MX_I2C2_Init();
 8000712:	f000 f993 	bl	8000a3c <MX_I2C2_Init>
  MX_TIM14_Init();
 8000716:	f000 fc05 	bl	8000f24 <MX_TIM14_Init>
  MX_TIM2_Init();
 800071a:	f000 fac7 	bl	8000cac <MX_TIM2_Init>
  MX_TIM4_Init();
 800071e:	f000 fb9b 	bl	8000e58 <MX_TIM4_Init>
  MX_TIM1_Init();
 8000722:	f000 fa35 	bl	8000b90 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000726:	f000 fb31 	bl	8000d8c <MX_TIM3_Init>
  MX_JPEG_Init();
 800072a:	f000 f9c7 	bl	8000abc <MX_JPEG_Init>
  MX_SPI2_Init();
 800072e:	f000 f9d9 	bl	8000ae4 <MX_SPI2_Init>

	// ------------------------------------------------------------ SETUP USB MESSAGING -- //
	//uint8_t usb_msg[100] = {0};	// Reserve 100 bytes for USB Debug messages

	// ------------------------------------------------------------ SETUP CAMERA INTERFACE -- //
	HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);	// XCLK - Start the camera's core clock
 8000732:	2100      	movs	r1, #0
 8000734:	4859      	ldr	r0, [pc, #356]	@ (800089c <main+0x1b4>)
 8000736:	f00f f821 	bl	800f77c <HAL_TIM_PWM_Start>
	// X 		  COM15 [6] = 1 (Data range [00-FF])
	// X 		  COM15 [5] = 0 (RGB 565)
	// X 		  COM15 [4] = 1 (RGB 565)
	uint8_t cam_regCache;

	cam_regCache = 0b00001000;
 800073a:	2308      	movs	r3, #8
 800073c:	71fb      	strb	r3, [r7, #7]
	while (CAM_SetRegister(0x0C, cam_regCache, 0)) {}
 800073e:	bf00      	nop
 8000740:	79fb      	ldrb	r3, [r7, #7]
 8000742:	2200      	movs	r2, #0
 8000744:	4619      	mov	r1, r3
 8000746:	200c      	movs	r0, #12
 8000748:	f001 f8d0 	bl	80018ec <CAM_SetRegister>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d1f6      	bne.n	8000740 <main+0x58>

	cam_regCache = 0b00010000;
 8000752:	2310      	movs	r3, #16
 8000754:	71fb      	strb	r3, [r7, #7]
	while (CAM_SetRegister(0x12, cam_regCache, 0)) {}
 8000756:	bf00      	nop
 8000758:	79fb      	ldrb	r3, [r7, #7]
 800075a:	2200      	movs	r2, #0
 800075c:	4619      	mov	r1, r3
 800075e:	2012      	movs	r0, #18
 8000760:	f001 f8c4 	bl	80018ec <CAM_SetRegister>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d1f6      	bne.n	8000758 <main+0x70>

	cam_regCache = 0b10000110;
 800076a:	2386      	movs	r3, #134	@ 0x86
 800076c:	71fb      	strb	r3, [r7, #7]
	while (CAM_SetRegister(0x32, cam_regCache, 0)) {}
 800076e:	bf00      	nop
 8000770:	79fb      	ldrb	r3, [r7, #7]
 8000772:	2200      	movs	r2, #0
 8000774:	4619      	mov	r1, r3
 8000776:	2032      	movs	r0, #50	@ 0x32
 8000778:	f001 f8b8 	bl	80018ec <CAM_SetRegister>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d1f6      	bne.n	8000770 <main+0x88>
	//while (CAM_SetRegister(0x40, cam_regCache, 0)) {}

	// ------------------------------------------------------------ SETUP JPEG ENCODING -- //
	// Set the CONFIG
	JPEG_ConfTypeDef* jpeg_config;
	jpeg_config->ColorSpace = JPEG_GRAYSCALE_COLORSPACE;
 8000782:	683b      	ldr	r3, [r7, #0]
 8000784:	2200      	movs	r2, #0
 8000786:	601a      	str	r2, [r3, #0]
	//jpeg_config->ColorSpace = JPEG_YCBCR_COLORSPACE;
	//jpeg_config->ChromaSubsampling = JPEG_422_SUBSAMPLING;
	jpeg_config->ImageWidth = jpeg_mcu_widths[jpeg_quality]*8;
 8000788:	4b45      	ldr	r3, [pc, #276]	@ (80008a0 <main+0x1b8>)
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	461a      	mov	r2, r3
 800078e:	4b45      	ldr	r3, [pc, #276]	@ (80008a4 <main+0x1bc>)
 8000790:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000794:	00db      	lsls	r3, r3, #3
 8000796:	461a      	mov	r2, r3
 8000798:	683b      	ldr	r3, [r7, #0]
 800079a:	60da      	str	r2, [r3, #12]
	jpeg_config->ImageHeight = jpeg_mcu_heights[jpeg_quality]*8;
 800079c:	4b40      	ldr	r3, [pc, #256]	@ (80008a0 <main+0x1b8>)
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	461a      	mov	r2, r3
 80007a2:	4b41      	ldr	r3, [pc, #260]	@ (80008a8 <main+0x1c0>)
 80007a4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80007a8:	00db      	lsls	r3, r3, #3
 80007aa:	461a      	mov	r2, r3
 80007ac:	683b      	ldr	r3, [r7, #0]
 80007ae:	609a      	str	r2, [r3, #8]
	jpeg_config->ImageQuality = JPEG_QUALITY;
 80007b0:	683b      	ldr	r3, [r7, #0]
 80007b2:	2214      	movs	r2, #20
 80007b4:	611a      	str	r2, [r3, #16]
	HAL_JPEG_ConfigEncoding(&hjpeg, jpeg_config);
 80007b6:	6839      	ldr	r1, [r7, #0]
 80007b8:	483c      	ldr	r0, [pc, #240]	@ (80008ac <main+0x1c4>)
 80007ba:	f008 f823 	bl	8008804 <HAL_JPEG_ConfigEncoding>

	// ------------------------------------------------------------ SETUP XBEE -- //
	hxbee.uart_handle = &huart1;
 80007be:	4b3c      	ldr	r3, [pc, #240]	@ (80008b0 <main+0x1c8>)
 80007c0:	4a3c      	ldr	r2, [pc, #240]	@ (80008b4 <main+0x1cc>)
 80007c2:	601a      	str	r2, [r3, #0]
	hxbee.pktRx_max = 2;
 80007c4:	4b3a      	ldr	r3, [pc, #232]	@ (80008b0 <main+0x1c8>)
 80007c6:	2202      	movs	r2, #2
 80007c8:	761a      	strb	r2, [r3, #24]
	hxbee.pktTx_max = 2;
 80007ca:	4b39      	ldr	r3, [pc, #228]	@ (80008b0 <main+0x1c8>)
 80007cc:	2202      	movs	r2, #2
 80007ce:	f883 2020 	strb.w	r2, [r3, #32]

	if (XBEE_Init(&hxbee)) {
 80007d2:	4837      	ldr	r0, [pc, #220]	@ (80008b0 <main+0x1c8>)
 80007d4:	f013 fb39 	bl	8013e4a <XBEE_Init>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d00e      	beq.n	80007fc <main+0x114>
		sprintf(ssd_msg, " Failed to Init XBEE");
 80007de:	4936      	ldr	r1, [pc, #216]	@ (80008b8 <main+0x1d0>)
 80007e0:	4836      	ldr	r0, [pc, #216]	@ (80008bc <main+0x1d4>)
 80007e2:	f016 fb25 	bl	8016e30 <siprintf>
		WriteDebug(ssd_msg, strlen(ssd_msg));
 80007e6:	4835      	ldr	r0, [pc, #212]	@ (80008bc <main+0x1d4>)
 80007e8:	f7ff fd7a 	bl	80002e0 <strlen>
 80007ec:	4603      	mov	r3, r0
 80007ee:	b2db      	uxtb	r3, r3
 80007f0:	4619      	mov	r1, r3
 80007f2:	4832      	ldr	r0, [pc, #200]	@ (80008bc <main+0x1d4>)
 80007f4:	f000 fff1 	bl	80017da <WriteDebug>
		// This state is non-functional, reset
		NVIC_SystemReset();
 80007f8:	f7ff ff60 	bl	80006bc <__NVIC_SystemReset>

	//TODO: Implement all JPEG Callbacks
	//TODO: Try to Interleave CAM/JPEG DMAs using JPEG GetDataCallback

	// SETUP MOTOR
	TIM2->CCR1 = 0;
 80007fc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000800:	2200      	movs	r2, #0
 8000802:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM2->CCR2 = 400;
 8000804:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000808:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800080c:	639a      	str	r2, [r3, #56]	@ 0x38

	TIM4->CCR4 = 0;
 800080e:	4b2c      	ldr	r3, [pc, #176]	@ (80008c0 <main+0x1d8>)
 8000810:	2200      	movs	r2, #0
 8000812:	641a      	str	r2, [r3, #64]	@ 0x40
	TIM4->CCR3 = 400;
 8000814:	4b2a      	ldr	r3, [pc, #168]	@ (80008c0 <main+0x1d8>)
 8000816:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800081a:	63da      	str	r2, [r3, #60]	@ 0x3c
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); // LEFT_PWM_1
 800081c:	2100      	movs	r1, #0
 800081e:	4829      	ldr	r0, [pc, #164]	@ (80008c4 <main+0x1dc>)
 8000820:	f00e ffac 	bl	800f77c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2); // RIGHT_PWM_1
 8000824:	2104      	movs	r1, #4
 8000826:	4827      	ldr	r0, [pc, #156]	@ (80008c4 <main+0x1dc>)
 8000828:	f00e ffa8 	bl	800f77c <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4); // LEFT_PWM_2
 800082c:	210c      	movs	r1, #12
 800082e:	4826      	ldr	r0, [pc, #152]	@ (80008c8 <main+0x1e0>)
 8000830:	f00e ffa4 	bl	800f77c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3); // RIGHT_PWM_2
 8000834:	2108      	movs	r1, #8
 8000836:	4824      	ldr	r0, [pc, #144]	@ (80008c8 <main+0x1e0>)
 8000838:	f00e ffa0 	bl	800f77c <HAL_TIM_PWM_Start>

	// Setup lights
	  TIM1->CCR4 = 1000; // 0 - 2000
 800083c:	4b23      	ldr	r3, [pc, #140]	@ (80008cc <main+0x1e4>)
 800083e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000842:	641a      	str	r2, [r3, #64]	@ 0x40
	  TIM3->CCR4 = 1000;
 8000844:	4b22      	ldr	r3, [pc, #136]	@ (80008d0 <main+0x1e8>)
 8000846:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800084a:	641a      	str	r2, [r3, #64]	@ 0x40
	  TIM3->CCR3 = 1000;
 800084c:	4b20      	ldr	r3, [pc, #128]	@ (80008d0 <main+0x1e8>)
 800084e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000852:	63da      	str	r2, [r3, #60]	@ 0x3c
	  TIM2->CCR4 = 1000;
 8000854:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000858:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800085c:	641a      	str	r2, [r3, #64]	@ 0x40
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4); // LIGHTS_PWM_1
 800085e:	210c      	movs	r1, #12
 8000860:	481c      	ldr	r0, [pc, #112]	@ (80008d4 <main+0x1ec>)
 8000862:	f00e ff8b 	bl	800f77c <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4); // LIGHTS_PWM_2
 8000866:	210c      	movs	r1, #12
 8000868:	481b      	ldr	r0, [pc, #108]	@ (80008d8 <main+0x1f0>)
 800086a:	f00e ff87 	bl	800f77c <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3); // LIGHTS_PWM_3
 800086e:	2108      	movs	r1, #8
 8000870:	4819      	ldr	r0, [pc, #100]	@ (80008d8 <main+0x1f0>)
 8000872:	f00e ff83 	bl	800f77c <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3); // LIGHTS_PWM_4
 8000876:	2108      	movs	r1, #8
 8000878:	4812      	ldr	r0, [pc, #72]	@ (80008c4 <main+0x1dc>)
 800087a:	f00e ff7f 	bl	800f77c <HAL_TIM_PWM_Start>

	// Delay for goofiness
	HAL_Delay(3000);
 800087e:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000882:	f002 f909 	bl	8002a98 <HAL_Delay>
	while (1)
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		SCH_XBeeRX();	// Handle radio recieve
 8000886:	f000 fcfb 	bl	8001280 <SCH_XBeeRX>
		SCH_Camera();	// Take a picture if camera idle
 800088a:	f000 fe4d 	bl	8001528 <SCH_Camera>
		SCH_JPEG();		// Convert JPEG if camera ready to present
 800088e:	f000 fe8b 	bl	80015a8 <SCH_JPEG>
		SCH_XBeeTX();	// Transmit JPEG if JPEG ready
 8000892:	f000 fdaf 	bl	80013f4 <SCH_XBeeTX>
		SCH_XBeeRX();	// Handle radio recieve
 8000896:	bf00      	nop
 8000898:	e7f5      	b.n	8000886 <main+0x19e>
 800089a:	bf00      	nop
 800089c:	24000588 	.word	0x24000588
 80008a0:	24025b24 	.word	0x24025b24
 80008a4:	24000000 	.word	0x24000000
 80008a8:	24000008 	.word	0x24000008
 80008ac:	240002a0 	.word	0x240002a0
 80008b0:	24025b28 	.word	0x24025b28
 80008b4:	240005d4 	.word	0x240005d4
 80008b8:	0801762c 	.word	0x0801762c
 80008bc:	240006e4 	.word	0x240006e4
 80008c0:	40000800 	.word	0x40000800
 80008c4:	240004a4 	.word	0x240004a4
 80008c8:	2400053c 	.word	0x2400053c
 80008cc:	40010000 	.word	0x40010000
 80008d0:	40000400 	.word	0x40000400
 80008d4:	24000458 	.word	0x24000458
 80008d8:	240004f0 	.word	0x240004f0

080008dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b09c      	sub	sp, #112	@ 0x70
 80008e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008e6:	224c      	movs	r2, #76	@ 0x4c
 80008e8:	2100      	movs	r1, #0
 80008ea:	4618      	mov	r0, r3
 80008ec:	f016 fac2 	bl	8016e74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008f0:	1d3b      	adds	r3, r7, #4
 80008f2:	2220      	movs	r2, #32
 80008f4:	2100      	movs	r1, #0
 80008f6:	4618      	mov	r0, r3
 80008f8:	f016 fabc 	bl	8016e74 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80008fc:	2002      	movs	r0, #2
 80008fe:	f00b fef3 	bl	800c6e8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000902:	2300      	movs	r3, #0
 8000904:	603b      	str	r3, [r7, #0]
 8000906:	4b30      	ldr	r3, [pc, #192]	@ (80009c8 <SystemClock_Config+0xec>)
 8000908:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800090a:	4a2f      	ldr	r2, [pc, #188]	@ (80009c8 <SystemClock_Config+0xec>)
 800090c:	f023 0301 	bic.w	r3, r3, #1
 8000910:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000912:	4b2d      	ldr	r3, [pc, #180]	@ (80009c8 <SystemClock_Config+0xec>)
 8000914:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000916:	f003 0301 	and.w	r3, r3, #1
 800091a:	603b      	str	r3, [r7, #0]
 800091c:	4b2b      	ldr	r3, [pc, #172]	@ (80009cc <SystemClock_Config+0xf0>)
 800091e:	699b      	ldr	r3, [r3, #24]
 8000920:	4a2a      	ldr	r2, [pc, #168]	@ (80009cc <SystemClock_Config+0xf0>)
 8000922:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000926:	6193      	str	r3, [r2, #24]
 8000928:	4b28      	ldr	r3, [pc, #160]	@ (80009cc <SystemClock_Config+0xf0>)
 800092a:	699b      	ldr	r3, [r3, #24]
 800092c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000930:	603b      	str	r3, [r7, #0]
 8000932:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000934:	bf00      	nop
 8000936:	4b25      	ldr	r3, [pc, #148]	@ (80009cc <SystemClock_Config+0xf0>)
 8000938:	699b      	ldr	r3, [r3, #24]
 800093a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800093e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000942:	d1f8      	bne.n	8000936 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000944:	2301      	movs	r3, #1
 8000946:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000948:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800094c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800094e:	2302      	movs	r3, #2
 8000950:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000952:	2302      	movs	r3, #2
 8000954:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000956:	2302      	movs	r3, #2
 8000958:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 800095a:	2318      	movs	r3, #24
 800095c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800095e:	2302      	movs	r3, #2
 8000960:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 6;
 8000962:	2306      	movs	r3, #6
 8000964:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000966:	2302      	movs	r3, #2
 8000968:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800096a:	230c      	movs	r3, #12
 800096c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800096e:	2300      	movs	r3, #0
 8000970:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000972:	2300      	movs	r3, #0
 8000974:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000976:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800097a:	4618      	mov	r0, r3
 800097c:	f00b fefe 	bl	800c77c <HAL_RCC_OscConfig>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000986:	f001 f929 	bl	8001bdc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800098a:	233f      	movs	r3, #63	@ 0x3f
 800098c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800098e:	2303      	movs	r3, #3
 8000990:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000992:	2300      	movs	r3, #0
 8000994:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000996:	2300      	movs	r3, #0
 8000998:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800099a:	2340      	movs	r3, #64	@ 0x40
 800099c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800099e:	2340      	movs	r3, #64	@ 0x40
 80009a0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80009a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80009a6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80009a8:	2340      	movs	r3, #64	@ 0x40
 80009aa:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009ac:	1d3b      	adds	r3, r7, #4
 80009ae:	2102      	movs	r1, #2
 80009b0:	4618      	mov	r0, r3
 80009b2:	f00c fb3d 	bl	800d030 <HAL_RCC_ClockConfig>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 80009bc:	f001 f90e 	bl	8001bdc <Error_Handler>
  }
}
 80009c0:	bf00      	nop
 80009c2:	3770      	adds	r7, #112	@ 0x70
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	58000400 	.word	0x58000400
 80009cc:	58024800 	.word	0x58024800

080009d0 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 80009d4:	4b17      	ldr	r3, [pc, #92]	@ (8000a34 <MX_DCMI_Init+0x64>)
 80009d6:	4a18      	ldr	r2, [pc, #96]	@ (8000a38 <MX_DCMI_Init+0x68>)
 80009d8:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 80009da:	4b16      	ldr	r3, [pc, #88]	@ (8000a34 <MX_DCMI_Init+0x64>)
 80009dc:	2200      	movs	r2, #0
 80009de:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 80009e0:	4b14      	ldr	r3, [pc, #80]	@ (8000a34 <MX_DCMI_Init+0x64>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_HIGH;
 80009e6:	4b13      	ldr	r3, [pc, #76]	@ (8000a34 <MX_DCMI_Init+0x64>)
 80009e8:	2280      	movs	r2, #128	@ 0x80
 80009ea:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 80009ec:	4b11      	ldr	r3, [pc, #68]	@ (8000a34 <MX_DCMI_Init+0x64>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 80009f2:	4b10      	ldr	r3, [pc, #64]	@ (8000a34 <MX_DCMI_Init+0x64>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 80009f8:	4b0e      	ldr	r3, [pc, #56]	@ (8000a34 <MX_DCMI_Init+0x64>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 80009fe:	4b0d      	ldr	r3, [pc, #52]	@ (8000a34 <MX_DCMI_Init+0x64>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_OTHER;
 8000a04:	4b0b      	ldr	r3, [pc, #44]	@ (8000a34 <MX_DCMI_Init+0x64>)
 8000a06:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000a0a:	625a      	str	r2, [r3, #36]	@ 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_EVEN;
 8000a0c:	4b09      	ldr	r3, [pc, #36]	@ (8000a34 <MX_DCMI_Init+0x64>)
 8000a0e:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000a12:	629a      	str	r2, [r3, #40]	@ 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8000a14:	4b07      	ldr	r3, [pc, #28]	@ (8000a34 <MX_DCMI_Init+0x64>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8000a1a:	4b06      	ldr	r3, [pc, #24]	@ (8000a34 <MX_DCMI_Init+0x64>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8000a20:	4804      	ldr	r0, [pc, #16]	@ (8000a34 <MX_DCMI_Init+0x64>)
 8000a22:	f002 f9f1 	bl	8002e08 <HAL_DCMI_Init>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <MX_DCMI_Init+0x60>
  {
    Error_Handler();
 8000a2c:	f001 f8d6 	bl	8001bdc <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8000a30:	bf00      	nop
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	24000184 	.word	0x24000184
 8000a38:	48020000 	.word	0x48020000

08000a3c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000a40:	4b1b      	ldr	r3, [pc, #108]	@ (8000ab0 <MX_I2C2_Init+0x74>)
 8000a42:	4a1c      	ldr	r2, [pc, #112]	@ (8000ab4 <MX_I2C2_Init+0x78>)
 8000a44:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00C0EAFF;
 8000a46:	4b1a      	ldr	r3, [pc, #104]	@ (8000ab0 <MX_I2C2_Init+0x74>)
 8000a48:	4a1b      	ldr	r2, [pc, #108]	@ (8000ab8 <MX_I2C2_Init+0x7c>)
 8000a4a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000a4c:	4b18      	ldr	r3, [pc, #96]	@ (8000ab0 <MX_I2C2_Init+0x74>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a52:	4b17      	ldr	r3, [pc, #92]	@ (8000ab0 <MX_I2C2_Init+0x74>)
 8000a54:	2201      	movs	r2, #1
 8000a56:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a58:	4b15      	ldr	r3, [pc, #84]	@ (8000ab0 <MX_I2C2_Init+0x74>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000a5e:	4b14      	ldr	r3, [pc, #80]	@ (8000ab0 <MX_I2C2_Init+0x74>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a64:	4b12      	ldr	r3, [pc, #72]	@ (8000ab0 <MX_I2C2_Init+0x74>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a6a:	4b11      	ldr	r3, [pc, #68]	@ (8000ab0 <MX_I2C2_Init+0x74>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a70:	4b0f      	ldr	r3, [pc, #60]	@ (8000ab0 <MX_I2C2_Init+0x74>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000a76:	480e      	ldr	r0, [pc, #56]	@ (8000ab0 <MX_I2C2_Init+0x74>)
 8000a78:	f006 f976 	bl	8006d68 <HAL_I2C_Init>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000a82:	f001 f8ab 	bl	8001bdc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a86:	2100      	movs	r1, #0
 8000a88:	4809      	ldr	r0, [pc, #36]	@ (8000ab0 <MX_I2C2_Init+0x74>)
 8000a8a:	f007 fda1 	bl	80085d0 <HAL_I2CEx_ConfigAnalogFilter>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000a94:	f001 f8a2 	bl	8001bdc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000a98:	2100      	movs	r1, #0
 8000a9a:	4805      	ldr	r0, [pc, #20]	@ (8000ab0 <MX_I2C2_Init+0x74>)
 8000a9c:	f007 fde3 	bl	8008666 <HAL_I2CEx_ConfigDigitalFilter>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000aa6:	f001 f899 	bl	8001bdc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000aaa:	bf00      	nop
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	2400024c 	.word	0x2400024c
 8000ab4:	40005800 	.word	0x40005800
 8000ab8:	00c0eaff 	.word	0x00c0eaff

08000abc <MX_JPEG_Init>:
  * @brief JPEG Initialization Function
  * @param None
  * @retval None
  */
static void MX_JPEG_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE END JPEG_Init 0 */

  /* USER CODE BEGIN JPEG_Init 1 */

  /* USER CODE END JPEG_Init 1 */
  hjpeg.Instance = JPEG;
 8000ac0:	4b06      	ldr	r3, [pc, #24]	@ (8000adc <MX_JPEG_Init+0x20>)
 8000ac2:	4a07      	ldr	r2, [pc, #28]	@ (8000ae0 <MX_JPEG_Init+0x24>)
 8000ac4:	601a      	str	r2, [r3, #0]
  if (HAL_JPEG_Init(&hjpeg) != HAL_OK)
 8000ac6:	4805      	ldr	r0, [pc, #20]	@ (8000adc <MX_JPEG_Init+0x20>)
 8000ac8:	f007 fe1a 	bl	8008700 <HAL_JPEG_Init>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <MX_JPEG_Init+0x1a>
  {
    Error_Handler();
 8000ad2:	f001 f883 	bl	8001bdc <Error_Handler>
  }
  /* USER CODE BEGIN JPEG_Init 2 */

  /* USER CODE END JPEG_Init 2 */

}
 8000ad6:	bf00      	nop
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	240002a0 	.word	0x240002a0
 8000ae0:	52003000 	.word	0x52003000

08000ae4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000ae8:	4b27      	ldr	r3, [pc, #156]	@ (8000b88 <MX_SPI2_Init+0xa4>)
 8000aea:	4a28      	ldr	r2, [pc, #160]	@ (8000b8c <MX_SPI2_Init+0xa8>)
 8000aec:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000aee:	4b26      	ldr	r3, [pc, #152]	@ (8000b88 <MX_SPI2_Init+0xa4>)
 8000af0:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000af4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000af6:	4b24      	ldr	r3, [pc, #144]	@ (8000b88 <MX_SPI2_Init+0xa4>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000afc:	4b22      	ldr	r3, [pc, #136]	@ (8000b88 <MX_SPI2_Init+0xa4>)
 8000afe:	2203      	movs	r2, #3
 8000b00:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b02:	4b21      	ldr	r3, [pc, #132]	@ (8000b88 <MX_SPI2_Init+0xa4>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b08:	4b1f      	ldr	r3, [pc, #124]	@ (8000b88 <MX_SPI2_Init+0xa4>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000b0e:	4b1e      	ldr	r3, [pc, #120]	@ (8000b88 <MX_SPI2_Init+0xa4>)
 8000b10:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000b14:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b16:	4b1c      	ldr	r3, [pc, #112]	@ (8000b88 <MX_SPI2_Init+0xa4>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b1c:	4b1a      	ldr	r3, [pc, #104]	@ (8000b88 <MX_SPI2_Init+0xa4>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b22:	4b19      	ldr	r3, [pc, #100]	@ (8000b88 <MX_SPI2_Init+0xa4>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b28:	4b17      	ldr	r3, [pc, #92]	@ (8000b88 <MX_SPI2_Init+0xa4>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8000b2e:	4b16      	ldr	r3, [pc, #88]	@ (8000b88 <MX_SPI2_Init+0xa4>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000b34:	4b14      	ldr	r3, [pc, #80]	@ (8000b88 <MX_SPI2_Init+0xa4>)
 8000b36:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b3a:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000b3c:	4b12      	ldr	r3, [pc, #72]	@ (8000b88 <MX_SPI2_Init+0xa4>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000b42:	4b11      	ldr	r3, [pc, #68]	@ (8000b88 <MX_SPI2_Init+0xa4>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000b48:	4b0f      	ldr	r3, [pc, #60]	@ (8000b88 <MX_SPI2_Init+0xa4>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000b4e:	4b0e      	ldr	r3, [pc, #56]	@ (8000b88 <MX_SPI2_Init+0xa4>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000b54:	4b0c      	ldr	r3, [pc, #48]	@ (8000b88 <MX_SPI2_Init+0xa4>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000b5a:	4b0b      	ldr	r3, [pc, #44]	@ (8000b88 <MX_SPI2_Init+0xa4>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000b60:	4b09      	ldr	r3, [pc, #36]	@ (8000b88 <MX_SPI2_Init+0xa4>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000b66:	4b08      	ldr	r3, [pc, #32]	@ (8000b88 <MX_SPI2_Init+0xa4>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000b6c:	4b06      	ldr	r3, [pc, #24]	@ (8000b88 <MX_SPI2_Init+0xa4>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000b72:	4805      	ldr	r0, [pc, #20]	@ (8000b88 <MX_SPI2_Init+0xa4>)
 8000b74:	f00e fc14 	bl	800f3a0 <HAL_SPI_Init>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 8000b7e:	f001 f82d 	bl	8001bdc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000b82:	bf00      	nop
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	240003d0 	.word	0x240003d0
 8000b8c:	40003800 	.word	0x40003800

08000b90 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b096      	sub	sp, #88	@ 0x58
 8000b94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b96:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	601a      	str	r2, [r3, #0]
 8000b9e:	605a      	str	r2, [r3, #4]
 8000ba0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ba2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	601a      	str	r2, [r3, #0]
 8000baa:	605a      	str	r2, [r3, #4]
 8000bac:	609a      	str	r2, [r3, #8]
 8000bae:	60da      	str	r2, [r3, #12]
 8000bb0:	611a      	str	r2, [r3, #16]
 8000bb2:	615a      	str	r2, [r3, #20]
 8000bb4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000bb6:	1d3b      	adds	r3, r7, #4
 8000bb8:	222c      	movs	r2, #44	@ 0x2c
 8000bba:	2100      	movs	r1, #0
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f016 f959 	bl	8016e74 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000bc2:	4b38      	ldr	r3, [pc, #224]	@ (8000ca4 <MX_TIM1_Init+0x114>)
 8000bc4:	4a38      	ldr	r2, [pc, #224]	@ (8000ca8 <MX_TIM1_Init+0x118>)
 8000bc6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000bc8:	4b36      	ldr	r3, [pc, #216]	@ (8000ca4 <MX_TIM1_Init+0x114>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bce:	4b35      	ldr	r3, [pc, #212]	@ (8000ca4 <MX_TIM1_Init+0x114>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000;
 8000bd4:	4b33      	ldr	r3, [pc, #204]	@ (8000ca4 <MX_TIM1_Init+0x114>)
 8000bd6:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000bda:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bdc:	4b31      	ldr	r3, [pc, #196]	@ (8000ca4 <MX_TIM1_Init+0x114>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000be2:	4b30      	ldr	r3, [pc, #192]	@ (8000ca4 <MX_TIM1_Init+0x114>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000be8:	4b2e      	ldr	r3, [pc, #184]	@ (8000ca4 <MX_TIM1_Init+0x114>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000bee:	482d      	ldr	r0, [pc, #180]	@ (8000ca4 <MX_TIM1_Init+0x114>)
 8000bf0:	f00e fd6c 	bl	800f6cc <HAL_TIM_PWM_Init>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000bfa:	f000 ffef 	bl	8001bdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000c02:	2300      	movs	r3, #0
 8000c04:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c06:	2300      	movs	r3, #0
 8000c08:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c0a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000c0e:	4619      	mov	r1, r3
 8000c10:	4824      	ldr	r0, [pc, #144]	@ (8000ca4 <MX_TIM1_Init+0x114>)
 8000c12:	f00f fcab 	bl	801056c <HAL_TIMEx_MasterConfigSynchronization>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000c1c:	f000 ffde 	bl	8001bdc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c20:	2360      	movs	r3, #96	@ 0x60
 8000c22:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8000c24:	2300      	movs	r3, #0
 8000c26:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c30:	2300      	movs	r3, #0
 8000c32:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c34:	2300      	movs	r3, #0
 8000c36:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000c38:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000c3c:	220c      	movs	r2, #12
 8000c3e:	4619      	mov	r1, r3
 8000c40:	4818      	ldr	r0, [pc, #96]	@ (8000ca4 <MX_TIM1_Init+0x114>)
 8000c42:	f00e ffb1 	bl	800fba8 <HAL_TIM_PWM_ConfigChannel>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8000c4c:	f000 ffc6 	bl	8001bdc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000c50:	2300      	movs	r3, #0
 8000c52:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000c54:	2300      	movs	r3, #0
 8000c56:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c60:	2300      	movs	r3, #0
 8000c62:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c64:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c68:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000c72:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000c76:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000c80:	1d3b      	adds	r3, r7, #4
 8000c82:	4619      	mov	r1, r3
 8000c84:	4807      	ldr	r0, [pc, #28]	@ (8000ca4 <MX_TIM1_Init+0x114>)
 8000c86:	f00f fcff 	bl	8010688 <HAL_TIMEx_ConfigBreakDeadTime>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <MX_TIM1_Init+0x104>
  {
    Error_Handler();
 8000c90:	f000 ffa4 	bl	8001bdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000c94:	4803      	ldr	r0, [pc, #12]	@ (8000ca4 <MX_TIM1_Init+0x114>)
 8000c96:	f001 fb3b 	bl	8002310 <HAL_TIM_MspPostInit>

}
 8000c9a:	bf00      	nop
 8000c9c:	3758      	adds	r7, #88	@ 0x58
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	24000458 	.word	0x24000458
 8000ca8:	40010000 	.word	0x40010000

08000cac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b08a      	sub	sp, #40	@ 0x28
 8000cb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cb2:	f107 031c 	add.w	r3, r7, #28
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	601a      	str	r2, [r3, #0]
 8000cba:	605a      	str	r2, [r3, #4]
 8000cbc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cbe:	463b      	mov	r3, r7
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	601a      	str	r2, [r3, #0]
 8000cc4:	605a      	str	r2, [r3, #4]
 8000cc6:	609a      	str	r2, [r3, #8]
 8000cc8:	60da      	str	r2, [r3, #12]
 8000cca:	611a      	str	r2, [r3, #16]
 8000ccc:	615a      	str	r2, [r3, #20]
 8000cce:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000cd0:	4b2d      	ldr	r3, [pc, #180]	@ (8000d88 <MX_TIM2_Init+0xdc>)
 8000cd2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000cd6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000cd8:	4b2b      	ldr	r3, [pc, #172]	@ (8000d88 <MX_TIM2_Init+0xdc>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cde:	4b2a      	ldr	r3, [pc, #168]	@ (8000d88 <MX_TIM2_Init+0xdc>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 8000ce4:	4b28      	ldr	r3, [pc, #160]	@ (8000d88 <MX_TIM2_Init+0xdc>)
 8000ce6:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000cea:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cec:	4b26      	ldr	r3, [pc, #152]	@ (8000d88 <MX_TIM2_Init+0xdc>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cf2:	4b25      	ldr	r3, [pc, #148]	@ (8000d88 <MX_TIM2_Init+0xdc>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000cf8:	4823      	ldr	r0, [pc, #140]	@ (8000d88 <MX_TIM2_Init+0xdc>)
 8000cfa:	f00e fce7 	bl	800f6cc <HAL_TIM_PWM_Init>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d001      	beq.n	8000d08 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000d04:	f000 ff6a 	bl	8001bdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d10:	f107 031c 	add.w	r3, r7, #28
 8000d14:	4619      	mov	r1, r3
 8000d16:	481c      	ldr	r0, [pc, #112]	@ (8000d88 <MX_TIM2_Init+0xdc>)
 8000d18:	f00f fc28 	bl	801056c <HAL_TIMEx_MasterConfigSynchronization>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000d22:	f000 ff5b 	bl	8001bdc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d26:	2360      	movs	r3, #96	@ 0x60
 8000d28:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d32:	2300      	movs	r3, #0
 8000d34:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d36:	463b      	mov	r3, r7
 8000d38:	2200      	movs	r2, #0
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	4812      	ldr	r0, [pc, #72]	@ (8000d88 <MX_TIM2_Init+0xdc>)
 8000d3e:	f00e ff33 	bl	800fba8 <HAL_TIM_PWM_ConfigChannel>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d001      	beq.n	8000d4c <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000d48:	f000 ff48 	bl	8001bdc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d4c:	463b      	mov	r3, r7
 8000d4e:	2204      	movs	r2, #4
 8000d50:	4619      	mov	r1, r3
 8000d52:	480d      	ldr	r0, [pc, #52]	@ (8000d88 <MX_TIM2_Init+0xdc>)
 8000d54:	f00e ff28 	bl	800fba8 <HAL_TIM_PWM_ConfigChannel>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8000d5e:	f000 ff3d 	bl	8001bdc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000d62:	463b      	mov	r3, r7
 8000d64:	2208      	movs	r2, #8
 8000d66:	4619      	mov	r1, r3
 8000d68:	4807      	ldr	r0, [pc, #28]	@ (8000d88 <MX_TIM2_Init+0xdc>)
 8000d6a:	f00e ff1d 	bl	800fba8 <HAL_TIM_PWM_ConfigChannel>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <MX_TIM2_Init+0xcc>
  {
    Error_Handler();
 8000d74:	f000 ff32 	bl	8001bdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000d78:	4803      	ldr	r0, [pc, #12]	@ (8000d88 <MX_TIM2_Init+0xdc>)
 8000d7a:	f001 fac9 	bl	8002310 <HAL_TIM_MspPostInit>

}
 8000d7e:	bf00      	nop
 8000d80:	3728      	adds	r7, #40	@ 0x28
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	240004a4 	.word	0x240004a4

08000d8c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b08a      	sub	sp, #40	@ 0x28
 8000d90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d92:	f107 031c 	add.w	r3, r7, #28
 8000d96:	2200      	movs	r2, #0
 8000d98:	601a      	str	r2, [r3, #0]
 8000d9a:	605a      	str	r2, [r3, #4]
 8000d9c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d9e:	463b      	mov	r3, r7
 8000da0:	2200      	movs	r2, #0
 8000da2:	601a      	str	r2, [r3, #0]
 8000da4:	605a      	str	r2, [r3, #4]
 8000da6:	609a      	str	r2, [r3, #8]
 8000da8:	60da      	str	r2, [r3, #12]
 8000daa:	611a      	str	r2, [r3, #16]
 8000dac:	615a      	str	r2, [r3, #20]
 8000dae:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000db0:	4b27      	ldr	r3, [pc, #156]	@ (8000e50 <MX_TIM3_Init+0xc4>)
 8000db2:	4a28      	ldr	r2, [pc, #160]	@ (8000e54 <MX_TIM3_Init+0xc8>)
 8000db4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000db6:	4b26      	ldr	r3, [pc, #152]	@ (8000e50 <MX_TIM3_Init+0xc4>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dbc:	4b24      	ldr	r3, [pc, #144]	@ (8000e50 <MX_TIM3_Init+0xc4>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000;
 8000dc2:	4b23      	ldr	r3, [pc, #140]	@ (8000e50 <MX_TIM3_Init+0xc4>)
 8000dc4:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000dc8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dca:	4b21      	ldr	r3, [pc, #132]	@ (8000e50 <MX_TIM3_Init+0xc4>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dd0:	4b1f      	ldr	r3, [pc, #124]	@ (8000e50 <MX_TIM3_Init+0xc4>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000dd6:	481e      	ldr	r0, [pc, #120]	@ (8000e50 <MX_TIM3_Init+0xc4>)
 8000dd8:	f00e fc78 	bl	800f6cc <HAL_TIM_PWM_Init>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000de2:	f000 fefb 	bl	8001bdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000de6:	2300      	movs	r3, #0
 8000de8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dea:	2300      	movs	r3, #0
 8000dec:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000dee:	f107 031c 	add.w	r3, r7, #28
 8000df2:	4619      	mov	r1, r3
 8000df4:	4816      	ldr	r0, [pc, #88]	@ (8000e50 <MX_TIM3_Init+0xc4>)
 8000df6:	f00f fbb9 	bl	801056c <HAL_TIMEx_MasterConfigSynchronization>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000e00:	f000 feec 	bl	8001bdc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e04:	2360      	movs	r3, #96	@ 0x60
 8000e06:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e10:	2300      	movs	r3, #0
 8000e12:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000e14:	463b      	mov	r3, r7
 8000e16:	2208      	movs	r2, #8
 8000e18:	4619      	mov	r1, r3
 8000e1a:	480d      	ldr	r0, [pc, #52]	@ (8000e50 <MX_TIM3_Init+0xc4>)
 8000e1c:	f00e fec4 	bl	800fba8 <HAL_TIM_PWM_ConfigChannel>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8000e26:	f000 fed9 	bl	8001bdc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000e2a:	463b      	mov	r3, r7
 8000e2c:	220c      	movs	r2, #12
 8000e2e:	4619      	mov	r1, r3
 8000e30:	4807      	ldr	r0, [pc, #28]	@ (8000e50 <MX_TIM3_Init+0xc4>)
 8000e32:	f00e feb9 	bl	800fba8 <HAL_TIM_PWM_ConfigChannel>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000e3c:	f000 fece 	bl	8001bdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000e40:	4803      	ldr	r0, [pc, #12]	@ (8000e50 <MX_TIM3_Init+0xc4>)
 8000e42:	f001 fa65 	bl	8002310 <HAL_TIM_MspPostInit>

}
 8000e46:	bf00      	nop
 8000e48:	3728      	adds	r7, #40	@ 0x28
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	240004f0 	.word	0x240004f0
 8000e54:	40000400 	.word	0x40000400

08000e58 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b08a      	sub	sp, #40	@ 0x28
 8000e5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e5e:	f107 031c 	add.w	r3, r7, #28
 8000e62:	2200      	movs	r2, #0
 8000e64:	601a      	str	r2, [r3, #0]
 8000e66:	605a      	str	r2, [r3, #4]
 8000e68:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e6a:	463b      	mov	r3, r7
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	601a      	str	r2, [r3, #0]
 8000e70:	605a      	str	r2, [r3, #4]
 8000e72:	609a      	str	r2, [r3, #8]
 8000e74:	60da      	str	r2, [r3, #12]
 8000e76:	611a      	str	r2, [r3, #16]
 8000e78:	615a      	str	r2, [r3, #20]
 8000e7a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000e7c:	4b27      	ldr	r3, [pc, #156]	@ (8000f1c <MX_TIM4_Init+0xc4>)
 8000e7e:	4a28      	ldr	r2, [pc, #160]	@ (8000f20 <MX_TIM4_Init+0xc8>)
 8000e80:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000e82:	4b26      	ldr	r3, [pc, #152]	@ (8000f1c <MX_TIM4_Init+0xc4>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e88:	4b24      	ldr	r3, [pc, #144]	@ (8000f1c <MX_TIM4_Init+0xc4>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2000;
 8000e8e:	4b23      	ldr	r3, [pc, #140]	@ (8000f1c <MX_TIM4_Init+0xc4>)
 8000e90:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000e94:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e96:	4b21      	ldr	r3, [pc, #132]	@ (8000f1c <MX_TIM4_Init+0xc4>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e9c:	4b1f      	ldr	r3, [pc, #124]	@ (8000f1c <MX_TIM4_Init+0xc4>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000ea2:	481e      	ldr	r0, [pc, #120]	@ (8000f1c <MX_TIM4_Init+0xc4>)
 8000ea4:	f00e fc12 	bl	800f6cc <HAL_TIM_PWM_Init>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8000eae:	f000 fe95 	bl	8001bdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000eba:	f107 031c 	add.w	r3, r7, #28
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	4816      	ldr	r0, [pc, #88]	@ (8000f1c <MX_TIM4_Init+0xc4>)
 8000ec2:	f00f fb53 	bl	801056c <HAL_TIMEx_MasterConfigSynchronization>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8000ecc:	f000 fe86 	bl	8001bdc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ed0:	2360      	movs	r3, #96	@ 0x60
 8000ed2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000edc:	2300      	movs	r3, #0
 8000ede:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000ee0:	463b      	mov	r3, r7
 8000ee2:	2208      	movs	r2, #8
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	480d      	ldr	r0, [pc, #52]	@ (8000f1c <MX_TIM4_Init+0xc4>)
 8000ee8:	f00e fe5e 	bl	800fba8 <HAL_TIM_PWM_ConfigChannel>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8000ef2:	f000 fe73 	bl	8001bdc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000ef6:	463b      	mov	r3, r7
 8000ef8:	220c      	movs	r2, #12
 8000efa:	4619      	mov	r1, r3
 8000efc:	4807      	ldr	r0, [pc, #28]	@ (8000f1c <MX_TIM4_Init+0xc4>)
 8000efe:	f00e fe53 	bl	800fba8 <HAL_TIM_PWM_ConfigChannel>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8000f08:	f000 fe68 	bl	8001bdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000f0c:	4803      	ldr	r0, [pc, #12]	@ (8000f1c <MX_TIM4_Init+0xc4>)
 8000f0e:	f001 f9ff 	bl	8002310 <HAL_TIM_MspPostInit>

}
 8000f12:	bf00      	nop
 8000f14:	3728      	adds	r7, #40	@ 0x28
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	2400053c 	.word	0x2400053c
 8000f20:	40000800 	.word	0x40000800

08000f24 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b088      	sub	sp, #32
 8000f28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f2a:	1d3b      	adds	r3, r7, #4
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	601a      	str	r2, [r3, #0]
 8000f30:	605a      	str	r2, [r3, #4]
 8000f32:	609a      	str	r2, [r3, #8]
 8000f34:	60da      	str	r2, [r3, #12]
 8000f36:	611a      	str	r2, [r3, #16]
 8000f38:	615a      	str	r2, [r3, #20]
 8000f3a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000f3c:	4b1d      	ldr	r3, [pc, #116]	@ (8000fb4 <MX_TIM14_Init+0x90>)
 8000f3e:	4a1e      	ldr	r2, [pc, #120]	@ (8000fb8 <MX_TIM14_Init+0x94>)
 8000f40:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 8000f42:	4b1c      	ldr	r3, [pc, #112]	@ (8000fb4 <MX_TIM14_Init+0x90>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f48:	4b1a      	ldr	r3, [pc, #104]	@ (8000fb4 <MX_TIM14_Init+0x90>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 5;
 8000f4e:	4b19      	ldr	r3, [pc, #100]	@ (8000fb4 <MX_TIM14_Init+0x90>)
 8000f50:	2205      	movs	r2, #5
 8000f52:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f54:	4b17      	ldr	r3, [pc, #92]	@ (8000fb4 <MX_TIM14_Init+0x90>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f5a:	4b16      	ldr	r3, [pc, #88]	@ (8000fb4 <MX_TIM14_Init+0x90>)
 8000f5c:	2280      	movs	r2, #128	@ 0x80
 8000f5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000f60:	4814      	ldr	r0, [pc, #80]	@ (8000fb4 <MX_TIM14_Init+0x90>)
 8000f62:	f00e fb5c 	bl	800f61e <HAL_TIM_Base_Init>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <MX_TIM14_Init+0x4c>
  {
    Error_Handler();
 8000f6c:	f000 fe36 	bl	8001bdc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8000f70:	4810      	ldr	r0, [pc, #64]	@ (8000fb4 <MX_TIM14_Init+0x90>)
 8000f72:	f00e fbab 	bl	800f6cc <HAL_TIM_PWM_Init>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <MX_TIM14_Init+0x5c>
  {
    Error_Handler();
 8000f7c:	f000 fe2e 	bl	8001bdc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f80:	2360      	movs	r3, #96	@ 0x60
 8000f82:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 3;
 8000f84:	2303      	movs	r3, #3
 8000f86:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8000f8c:	2304      	movs	r3, #4
 8000f8e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f90:	1d3b      	adds	r3, r7, #4
 8000f92:	2200      	movs	r2, #0
 8000f94:	4619      	mov	r1, r3
 8000f96:	4807      	ldr	r0, [pc, #28]	@ (8000fb4 <MX_TIM14_Init+0x90>)
 8000f98:	f00e fe06 	bl	800fba8 <HAL_TIM_PWM_ConfigChannel>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <MX_TIM14_Init+0x82>
  {
    Error_Handler();
 8000fa2:	f000 fe1b 	bl	8001bdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8000fa6:	4803      	ldr	r0, [pc, #12]	@ (8000fb4 <MX_TIM14_Init+0x90>)
 8000fa8:	f001 f9b2 	bl	8002310 <HAL_TIM_MspPostInit>

}
 8000fac:	bf00      	nop
 8000fae:	3720      	adds	r7, #32
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	24000588 	.word	0x24000588
 8000fb8:	40002000 	.word	0x40002000

08000fbc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000fc0:	4b24      	ldr	r3, [pc, #144]	@ (8001054 <MX_USART1_UART_Init+0x98>)
 8000fc2:	4a25      	ldr	r2, [pc, #148]	@ (8001058 <MX_USART1_UART_Init+0x9c>)
 8000fc4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 111111;
 8000fc6:	4b23      	ldr	r3, [pc, #140]	@ (8001054 <MX_USART1_UART_Init+0x98>)
 8000fc8:	4a24      	ldr	r2, [pc, #144]	@ (800105c <MX_USART1_UART_Init+0xa0>)
 8000fca:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000fcc:	4b21      	ldr	r3, [pc, #132]	@ (8001054 <MX_USART1_UART_Init+0x98>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000fd2:	4b20      	ldr	r3, [pc, #128]	@ (8001054 <MX_USART1_UART_Init+0x98>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000fd8:	4b1e      	ldr	r3, [pc, #120]	@ (8001054 <MX_USART1_UART_Init+0x98>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000fde:	4b1d      	ldr	r3, [pc, #116]	@ (8001054 <MX_USART1_UART_Init+0x98>)
 8000fe0:	220c      	movs	r2, #12
 8000fe2:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fe4:	4b1b      	ldr	r3, [pc, #108]	@ (8001054 <MX_USART1_UART_Init+0x98>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fea:	4b1a      	ldr	r3, [pc, #104]	@ (8001054 <MX_USART1_UART_Init+0x98>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ff0:	4b18      	ldr	r3, [pc, #96]	@ (8001054 <MX_USART1_UART_Init+0x98>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ff6:	4b17      	ldr	r3, [pc, #92]	@ (8001054 <MX_USART1_UART_Init+0x98>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8000ffc:	4b15      	ldr	r3, [pc, #84]	@ (8001054 <MX_USART1_UART_Init+0x98>)
 8000ffe:	2220      	movs	r2, #32
 8001000:	629a      	str	r2, [r3, #40]	@ 0x28
  huart1.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8001002:	4b14      	ldr	r3, [pc, #80]	@ (8001054 <MX_USART1_UART_Init+0x98>)
 8001004:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001008:	641a      	str	r2, [r3, #64]	@ 0x40
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800100a:	4812      	ldr	r0, [pc, #72]	@ (8001054 <MX_USART1_UART_Init+0x98>)
 800100c:	f00f fbd8 	bl	80107c0 <HAL_UART_Init>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <MX_USART1_UART_Init+0x5e>
  {
    Error_Handler();
 8001016:	f000 fde1 	bl	8001bdc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800101a:	2100      	movs	r1, #0
 800101c:	480d      	ldr	r0, [pc, #52]	@ (8001054 <MX_USART1_UART_Init+0x98>)
 800101e:	f011 faf2 	bl	8012606 <HAL_UARTEx_SetTxFifoThreshold>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <MX_USART1_UART_Init+0x70>
  {
    Error_Handler();
 8001028:	f000 fdd8 	bl	8001bdc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800102c:	2100      	movs	r1, #0
 800102e:	4809      	ldr	r0, [pc, #36]	@ (8001054 <MX_USART1_UART_Init+0x98>)
 8001030:	f011 fb27 	bl	8012682 <HAL_UARTEx_SetRxFifoThreshold>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <MX_USART1_UART_Init+0x82>
  {
    Error_Handler();
 800103a:	f000 fdcf 	bl	8001bdc <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart1) != HAL_OK)
 800103e:	4805      	ldr	r0, [pc, #20]	@ (8001054 <MX_USART1_UART_Init+0x98>)
 8001040:	f011 faa6 	bl	8012590 <HAL_UARTEx_EnableFifoMode>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <MX_USART1_UART_Init+0x92>
  {
    Error_Handler();
 800104a:	f000 fdc7 	bl	8001bdc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800104e:	bf00      	nop
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	240005d4 	.word	0x240005d4
 8001058:	40011000 	.word	0x40011000
 800105c:	0001b207 	.word	0x0001b207

08001060 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001066:	4b19      	ldr	r3, [pc, #100]	@ (80010cc <MX_DMA_Init+0x6c>)
 8001068:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800106c:	4a17      	ldr	r2, [pc, #92]	@ (80010cc <MX_DMA_Init+0x6c>)
 800106e:	f043 0301 	orr.w	r3, r3, #1
 8001072:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001076:	4b15      	ldr	r3, [pc, #84]	@ (80010cc <MX_DMA_Init+0x6c>)
 8001078:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800107c:	f003 0301 	and.w	r3, r3, #1
 8001080:	607b      	str	r3, [r7, #4]
 8001082:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001084:	4b11      	ldr	r3, [pc, #68]	@ (80010cc <MX_DMA_Init+0x6c>)
 8001086:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800108a:	4a10      	ldr	r2, [pc, #64]	@ (80010cc <MX_DMA_Init+0x6c>)
 800108c:	f043 0302 	orr.w	r3, r3, #2
 8001090:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001094:	4b0d      	ldr	r3, [pc, #52]	@ (80010cc <MX_DMA_Init+0x6c>)
 8001096:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800109a:	f003 0302 	and.w	r3, r3, #2
 800109e:	603b      	str	r3, [r7, #0]
 80010a0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80010a2:	2200      	movs	r2, #0
 80010a4:	2100      	movs	r1, #0
 80010a6:	200b      	movs	r0, #11
 80010a8:	f001 fe01 	bl	8002cae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80010ac:	200b      	movs	r0, #11
 80010ae:	f001 fe18 	bl	8002ce2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80010b2:	2200      	movs	r2, #0
 80010b4:	2100      	movs	r1, #0
 80010b6:	2038      	movs	r0, #56	@ 0x38
 80010b8:	f001 fdf9 	bl	8002cae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80010bc:	2038      	movs	r0, #56	@ 0x38
 80010be:	f001 fe10 	bl	8002ce2 <HAL_NVIC_EnableIRQ>

}
 80010c2:	bf00      	nop
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	58024400 	.word	0x58024400

080010d0 <MX_MDMA_Init>:

/**
  * Enable MDMA controller clock
  */
static void MX_MDMA_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0

  /* MDMA controller clock enable */
  __HAL_RCC_MDMA_CLK_ENABLE();
 80010d6:	4b0d      	ldr	r3, [pc, #52]	@ (800110c <MX_MDMA_Init+0x3c>)
 80010d8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80010dc:	4a0b      	ldr	r2, [pc, #44]	@ (800110c <MX_MDMA_Init+0x3c>)
 80010de:	f043 0301 	orr.w	r3, r3, #1
 80010e2:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 80010e6:	4b09      	ldr	r3, [pc, #36]	@ (800110c <MX_MDMA_Init+0x3c>)
 80010e8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80010ec:	f003 0301 	and.w	r3, r3, #1
 80010f0:	607b      	str	r3, [r7, #4]
 80010f2:	687b      	ldr	r3, [r7, #4]
  /* Local variables */

  /* MDMA interrupt initialization */
  /* MDMA_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MDMA_IRQn, 0, 0);
 80010f4:	2200      	movs	r2, #0
 80010f6:	2100      	movs	r1, #0
 80010f8:	207a      	movs	r0, #122	@ 0x7a
 80010fa:	f001 fdd8 	bl	8002cae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(MDMA_IRQn);
 80010fe:	207a      	movs	r0, #122	@ 0x7a
 8001100:	f001 fdef 	bl	8002ce2 <HAL_NVIC_EnableIRQ>

}
 8001104:	bf00      	nop
 8001106:	3708      	adds	r7, #8
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	58024400 	.word	0x58024400

08001110 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b08c      	sub	sp, #48	@ 0x30
 8001114:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001116:	f107 031c 	add.w	r3, r7, #28
 800111a:	2200      	movs	r2, #0
 800111c:	601a      	str	r2, [r3, #0]
 800111e:	605a      	str	r2, [r3, #4]
 8001120:	609a      	str	r2, [r3, #8]
 8001122:	60da      	str	r2, [r3, #12]
 8001124:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001126:	4b52      	ldr	r3, [pc, #328]	@ (8001270 <MX_GPIO_Init+0x160>)
 8001128:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800112c:	4a50      	ldr	r2, [pc, #320]	@ (8001270 <MX_GPIO_Init+0x160>)
 800112e:	f043 0310 	orr.w	r3, r3, #16
 8001132:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001136:	4b4e      	ldr	r3, [pc, #312]	@ (8001270 <MX_GPIO_Init+0x160>)
 8001138:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800113c:	f003 0310 	and.w	r3, r3, #16
 8001140:	61bb      	str	r3, [r7, #24]
 8001142:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001144:	4b4a      	ldr	r3, [pc, #296]	@ (8001270 <MX_GPIO_Init+0x160>)
 8001146:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800114a:	4a49      	ldr	r2, [pc, #292]	@ (8001270 <MX_GPIO_Init+0x160>)
 800114c:	f043 0304 	orr.w	r3, r3, #4
 8001150:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001154:	4b46      	ldr	r3, [pc, #280]	@ (8001270 <MX_GPIO_Init+0x160>)
 8001156:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800115a:	f003 0304 	and.w	r3, r3, #4
 800115e:	617b      	str	r3, [r7, #20]
 8001160:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001162:	4b43      	ldr	r3, [pc, #268]	@ (8001270 <MX_GPIO_Init+0x160>)
 8001164:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001168:	4a41      	ldr	r2, [pc, #260]	@ (8001270 <MX_GPIO_Init+0x160>)
 800116a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800116e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001172:	4b3f      	ldr	r3, [pc, #252]	@ (8001270 <MX_GPIO_Init+0x160>)
 8001174:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001178:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800117c:	613b      	str	r3, [r7, #16]
 800117e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001180:	4b3b      	ldr	r3, [pc, #236]	@ (8001270 <MX_GPIO_Init+0x160>)
 8001182:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001186:	4a3a      	ldr	r2, [pc, #232]	@ (8001270 <MX_GPIO_Init+0x160>)
 8001188:	f043 0301 	orr.w	r3, r3, #1
 800118c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001190:	4b37      	ldr	r3, [pc, #220]	@ (8001270 <MX_GPIO_Init+0x160>)
 8001192:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001196:	f003 0301 	and.w	r3, r3, #1
 800119a:	60fb      	str	r3, [r7, #12]
 800119c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800119e:	4b34      	ldr	r3, [pc, #208]	@ (8001270 <MX_GPIO_Init+0x160>)
 80011a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011a4:	4a32      	ldr	r2, [pc, #200]	@ (8001270 <MX_GPIO_Init+0x160>)
 80011a6:	f043 0302 	orr.w	r3, r3, #2
 80011aa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011ae:	4b30      	ldr	r3, [pc, #192]	@ (8001270 <MX_GPIO_Init+0x160>)
 80011b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011b4:	f003 0302 	and.w	r3, r3, #2
 80011b8:	60bb      	str	r3, [r7, #8]
 80011ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011bc:	4b2c      	ldr	r3, [pc, #176]	@ (8001270 <MX_GPIO_Init+0x160>)
 80011be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011c2:	4a2b      	ldr	r2, [pc, #172]	@ (8001270 <MX_GPIO_Init+0x160>)
 80011c4:	f043 0308 	orr.w	r3, r3, #8
 80011c8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011cc:	4b28      	ldr	r3, [pc, #160]	@ (8001270 <MX_GPIO_Init+0x160>)
 80011ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011d2:	f003 0308 	and.w	r3, r3, #8
 80011d6:	607b      	str	r3, [r7, #4]
 80011d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80011da:	2200      	movs	r2, #0
 80011dc:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 80011e0:	4824      	ldr	r0, [pc, #144]	@ (8001274 <MX_GPIO_Init+0x164>)
 80011e2:	f005 fda7 	bl	8006d34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 80011e6:	2201      	movs	r2, #1
 80011e8:	2108      	movs	r1, #8
 80011ea:	4823      	ldr	r0, [pc, #140]	@ (8001278 <MX_GPIO_Init+0x168>)
 80011ec:	f005 fda2 	bl	8006d34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);
 80011f0:	2200      	movs	r2, #0
 80011f2:	2101      	movs	r1, #1
 80011f4:	4821      	ldr	r0, [pc, #132]	@ (800127c <MX_GPIO_Init+0x16c>)
 80011f6:	f005 fd9d 	bl	8006d34 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80011fa:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80011fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001200:	2301      	movs	r3, #1
 8001202:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001204:	2300      	movs	r3, #0
 8001206:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001208:	2300      	movs	r3, #0
 800120a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800120c:	f107 031c 	add.w	r3, r7, #28
 8001210:	4619      	mov	r1, r3
 8001212:	4818      	ldr	r0, [pc, #96]	@ (8001274 <MX_GPIO_Init+0x164>)
 8001214:	f005 fbde 	bl	80069d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001218:	2301      	movs	r3, #1
 800121a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800121c:	2300      	movs	r3, #0
 800121e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001220:	2300      	movs	r3, #0
 8001222:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001224:	f107 031c 	add.w	r3, r7, #28
 8001228:	4619      	mov	r1, r3
 800122a:	4812      	ldr	r0, [pc, #72]	@ (8001274 <MX_GPIO_Init+0x164>)
 800122c:	f005 fbd2 	bl	80069d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001230:	2308      	movs	r3, #8
 8001232:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001234:	2301      	movs	r3, #1
 8001236:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001238:	2300      	movs	r3, #0
 800123a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800123c:	2300      	movs	r3, #0
 800123e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001240:	f107 031c 	add.w	r3, r7, #28
 8001244:	4619      	mov	r1, r3
 8001246:	480c      	ldr	r0, [pc, #48]	@ (8001278 <MX_GPIO_Init+0x168>)
 8001248:	f005 fbc4 	bl	80069d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800124c:	2301      	movs	r3, #1
 800124e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001250:	2301      	movs	r3, #1
 8001252:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001254:	2300      	movs	r3, #0
 8001256:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001258:	2300      	movs	r3, #0
 800125a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800125c:	f107 031c 	add.w	r3, r7, #28
 8001260:	4619      	mov	r1, r3
 8001262:	4806      	ldr	r0, [pc, #24]	@ (800127c <MX_GPIO_Init+0x16c>)
 8001264:	f005 fbb6 	bl	80069d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001268:	bf00      	nop
 800126a:	3730      	adds	r7, #48	@ 0x30
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	58024400 	.word	0x58024400
 8001274:	58020800 	.word	0x58020800
 8001278:	58020000 	.word	0x58020000
 800127c:	58020c00 	.word	0x58020c00

08001280 <SCH_XBeeRX>:

/* USER CODE BEGIN 4 */

// ------------------------------------------------------------ SCHEDULING FUNCTIONS -- //
void SCH_XBeeRX() {
 8001280:	b580      	push	{r7, lr}
 8001282:	b084      	sub	sp, #16
 8001284:	af00      	add	r7, sp, #0
	uint8_t *packet;
	uint16_t byte_num;
	if (XBEE_RXPacket(&hxbee, &packet, &byte_num)) {
 8001286:	1cba      	adds	r2, r7, #2
 8001288:	1d3b      	adds	r3, r7, #4
 800128a:	4619      	mov	r1, r3
 800128c:	484f      	ldr	r0, [pc, #316]	@ (80013cc <SCH_XBeeRX+0x14c>)
 800128e:	f012 fe2f 	bl	8013ef0 <XBEE_RXPacket>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	f040 8095 	bne.w	80013c4 <SCH_XBeeRX+0x144>
		return;
	}

	// Parse the packet
	if (byte_num == 0xFFFF) {
 800129a:	887b      	ldrh	r3, [r7, #2]
 800129c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80012a0:	4293      	cmp	r3, r2
 80012a2:	f040 8090 	bne.w	80013c6 <SCH_XBeeRX+0x146>
		// Configuration Packet

		if (packet[1] != jpeg_quality) {
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	3301      	adds	r3, #1
 80012aa:	781a      	ldrb	r2, [r3, #0]
 80012ac:	4b48      	ldr	r3, [pc, #288]	@ (80013d0 <SCH_XBeeRX+0x150>)
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	429a      	cmp	r2, r3
 80012b2:	d027      	beq.n	8001304 <SCH_XBeeRX+0x84>
			// JPEG QUALITY CHANGED
			jpeg_quality = packet[1];
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	785a      	ldrb	r2, [r3, #1]
 80012b8:	4b45      	ldr	r3, [pc, #276]	@ (80013d0 <SCH_XBeeRX+0x150>)
 80012ba:	701a      	strb	r2, [r3, #0]
			// Reconfigure the JPEG HW
			JPEG_ConfTypeDef* jpeg_config;
			jpeg_config->ColorSpace = JPEG_GRAYSCALE_COLORSPACE;
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	2200      	movs	r2, #0
 80012c0:	601a      	str	r2, [r3, #0]
			jpeg_config->ImageWidth = jpeg_mcu_widths[jpeg_quality]*8;
 80012c2:	4b43      	ldr	r3, [pc, #268]	@ (80013d0 <SCH_XBeeRX+0x150>)
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	461a      	mov	r2, r3
 80012c8:	4b42      	ldr	r3, [pc, #264]	@ (80013d4 <SCH_XBeeRX+0x154>)
 80012ca:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80012ce:	00db      	lsls	r3, r3, #3
 80012d0:	461a      	mov	r2, r3
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	60da      	str	r2, [r3, #12]
			jpeg_config->ImageHeight = jpeg_mcu_heights[jpeg_quality]*8;
 80012d6:	4b3e      	ldr	r3, [pc, #248]	@ (80013d0 <SCH_XBeeRX+0x150>)
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	461a      	mov	r2, r3
 80012dc:	4b3e      	ldr	r3, [pc, #248]	@ (80013d8 <SCH_XBeeRX+0x158>)
 80012de:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80012e2:	00db      	lsls	r3, r3, #3
 80012e4:	461a      	mov	r2, r3
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	609a      	str	r2, [r3, #8]
			jpeg_config->ImageQuality = JPEG_QUALITY;
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	2214      	movs	r2, #20
 80012ee:	611a      	str	r2, [r3, #16]
			HAL_JPEG_ConfigEncoding(&hjpeg, jpeg_config);
 80012f0:	68f9      	ldr	r1, [r7, #12]
 80012f2:	483a      	ldr	r0, [pc, #232]	@ (80013dc <SCH_XBeeRX+0x15c>)
 80012f4:	f007 fa86 	bl	8008804 <HAL_JPEG_ConfigEncoding>

			jpeg_state = 0;	// Invalidate current JPEG
 80012f8:	4b39      	ldr	r3, [pc, #228]	@ (80013e0 <SCH_XBeeRX+0x160>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	701a      	strb	r2, [r3, #0]
			tx_state = 2;	// Flag a header re-transmit
 80012fe:	4b39      	ldr	r3, [pc, #228]	@ (80013e4 <SCH_XBeeRX+0x164>)
 8001300:	2202      	movs	r2, #2
 8001302:	701a      	strb	r2, [r3, #0]
		}

		// LIGHTS (0-2000)
		TIM1->CCR4 = packet[3]*500; // L1
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	3303      	adds	r3, #3
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	461a      	mov	r2, r3
 800130c:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001310:	fb03 f202 	mul.w	r2, r3, r2
 8001314:	4b34      	ldr	r3, [pc, #208]	@ (80013e8 <SCH_XBeeRX+0x168>)
 8001316:	641a      	str	r2, [r3, #64]	@ 0x40
		TIM3->CCR4 = packet[4]*500; // L2
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	3304      	adds	r3, #4
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	461a      	mov	r2, r3
 8001320:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001324:	fb03 f202 	mul.w	r2, r3, r2
 8001328:	4b30      	ldr	r3, [pc, #192]	@ (80013ec <SCH_XBeeRX+0x16c>)
 800132a:	641a      	str	r2, [r3, #64]	@ 0x40
		TIM3->CCR3 = packet[5]*500; // L3
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	3305      	adds	r3, #5
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	461a      	mov	r2, r3
 8001334:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001338:	fb03 f202 	mul.w	r2, r3, r2
 800133c:	4b2b      	ldr	r3, [pc, #172]	@ (80013ec <SCH_XBeeRX+0x16c>)
 800133e:	63da      	str	r2, [r3, #60]	@ 0x3c
		TIM2->CCR4 = packet[6]*500; // L4
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	3306      	adds	r3, #6
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	461a      	mov	r2, r3
 8001348:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800134c:	fb03 f202 	mul.w	r2, r3, r2
 8001350:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001354:	641a      	str	r2, [r3, #64]	@ 0x40

		// TANK CONTROL (THIS IS EXTREMELY IMPORTANT)
		uint8_t motor1_dir = packet[0x09];	// DIR_LEFT
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	7a5b      	ldrb	r3, [r3, #9]
 800135a:	72fb      	strb	r3, [r7, #11]
		uint8_t motor2_dir = packet[0x0A];	// DIR_RIGHT
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	7a9b      	ldrb	r3, [r3, #10]
 8001360:	72bb      	strb	r3, [r7, #10]

		// Use the direction to selectively disable one of the two BTNs
		if (motor1_dir) {
 8001362:	7afb      	ldrb	r3, [r7, #11]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d00b      	beq.n	8001380 <SCH_XBeeRX+0x100>
			TIM2->CCR1 = 0;
 8001368:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800136c:	2200      	movs	r2, #0
 800136e:	635a      	str	r2, [r3, #52]	@ 0x34
			TIM2->CCR2 = packet[0x07]*4;	// MAG_LEFT
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	3307      	adds	r3, #7
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	009a      	lsls	r2, r3, #2
 8001378:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800137c:	639a      	str	r2, [r3, #56]	@ 0x38
 800137e:	e00a      	b.n	8001396 <SCH_XBeeRX+0x116>
		} else {
			TIM2->CCR1 = packet[0x07]*4;	// MAG_LEFT
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	3307      	adds	r3, #7
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	009a      	lsls	r2, r3, #2
 8001388:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800138c:	635a      	str	r2, [r3, #52]	@ 0x34
			TIM2->CCR2 = 0;
 800138e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001392:	2200      	movs	r2, #0
 8001394:	639a      	str	r2, [r3, #56]	@ 0x38
		}

		// Use the direction to selectively disable one of the two BTNs
		if (motor2_dir) {
 8001396:	7abb      	ldrb	r3, [r7, #10]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d009      	beq.n	80013b0 <SCH_XBeeRX+0x130>
			TIM4->CCR4 = 0;
 800139c:	4b14      	ldr	r3, [pc, #80]	@ (80013f0 <SCH_XBeeRX+0x170>)
 800139e:	2200      	movs	r2, #0
 80013a0:	641a      	str	r2, [r3, #64]	@ 0x40
			TIM4->CCR3 = packet[0x08]*4;	// MAG_RIGHT
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	3308      	adds	r3, #8
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	009a      	lsls	r2, r3, #2
 80013aa:	4b11      	ldr	r3, [pc, #68]	@ (80013f0 <SCH_XBeeRX+0x170>)
 80013ac:	63da      	str	r2, [r3, #60]	@ 0x3c
 80013ae:	e00a      	b.n	80013c6 <SCH_XBeeRX+0x146>
		} else {
			TIM4->CCR4 = packet[0x08]*4;	// MAG_RIGHT
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	3308      	adds	r3, #8
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	009a      	lsls	r2, r3, #2
 80013b8:	4b0d      	ldr	r3, [pc, #52]	@ (80013f0 <SCH_XBeeRX+0x170>)
 80013ba:	641a      	str	r2, [r3, #64]	@ 0x40
			TIM4->CCR3 = 0;
 80013bc:	4b0c      	ldr	r3, [pc, #48]	@ (80013f0 <SCH_XBeeRX+0x170>)
 80013be:	2200      	movs	r2, #0
 80013c0:	63da      	str	r2, [r3, #60]	@ 0x3c
 80013c2:	e000      	b.n	80013c6 <SCH_XBeeRX+0x146>
		return;
 80013c4:	bf00      	nop
		}
	}
}
 80013c6:	3710      	adds	r7, #16
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	24025b28 	.word	0x24025b28
 80013d0:	24025b24 	.word	0x24025b24
 80013d4:	24000000 	.word	0x24000000
 80013d8:	24000008 	.word	0x24000008
 80013dc:	240002a0 	.word	0x240002a0
 80013e0:	24025b1e 	.word	0x24025b1e
 80013e4:	24025b4e 	.word	0x24025b4e
 80013e8:	40010000 	.word	0x40010000
 80013ec:	40000400 	.word	0x40000400
 80013f0:	40000800 	.word	0x40000800

080013f4 <SCH_XBeeTX>:

void SCH_XBeeTX() {
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0

	// Early exit if the JPEG isn't ready, nothing to transmit
	if (jpeg_state != 2)
 80013fa:	4b44      	ldr	r3, [pc, #272]	@ (800150c <SCH_XBeeTX+0x118>)
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	b2db      	uxtb	r3, r3
 8001400:	2b02      	cmp	r3, #2
 8001402:	d17a      	bne.n	80014fa <SCH_XBeeTX+0x106>
		return;

	// Get delta time, there has to be a delay for the TX to work properly
	uint32_t delta_t = DeltaTime(sch_tim_tx);
 8001404:	4b42      	ldr	r3, [pc, #264]	@ (8001510 <SCH_XBeeTX+0x11c>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4618      	mov	r0, r3
 800140a:	f000 f9cf 	bl	80017ac <DeltaTime>
 800140e:	6078      	str	r0, [r7, #4]
	if (delta_t < SCH_MS_TX) return;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2b01      	cmp	r3, #1
 8001414:	d973      	bls.n	80014fe <SCH_XBeeTX+0x10a>

	if (tx_state == 0)
 8001416:	4b3f      	ldr	r3, [pc, #252]	@ (8001514 <SCH_XBeeTX+0x120>)
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	b2db      	uxtb	r3, r3
 800141c:	2b00      	cmp	r3, #0
 800141e:	d102      	bne.n	8001426 <SCH_XBeeTX+0x32>
		tx_state = 1;	// If Idle, Flag as transmitting IMAGE
 8001420:	4b3c      	ldr	r3, [pc, #240]	@ (8001514 <SCH_XBeeTX+0x120>)
 8001422:	2201      	movs	r2, #1
 8001424:	701a      	strb	r2, [r3, #0]

	if (tx_state == 1) {
 8001426:	4b3b      	ldr	r3, [pc, #236]	@ (8001514 <SCH_XBeeTX+0x120>)
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	b2db      	uxtb	r3, r3
 800142c:	2b01      	cmp	r3, #1
 800142e:	d112      	bne.n	8001456 <SCH_XBeeTX+0x62>
		// Send an IMAGE packet
		// Image packet numbers:  0000, 0001, 0002, ...
		if (XBEE_TXPacket(&hxbee, jpeg_out + tx_byte*UART_TXSIZE + JPEG_HEADERSIZE, tx_byte)) {
 8001430:	4b39      	ldr	r3, [pc, #228]	@ (8001518 <SCH_XBeeTX+0x124>)
 8001432:	881b      	ldrh	r3, [r3, #0]
 8001434:	b29b      	uxth	r3, r3
 8001436:	019b      	lsls	r3, r3, #6
 8001438:	f203 230e 	addw	r3, r3, #526	@ 0x20e
 800143c:	4a37      	ldr	r2, [pc, #220]	@ (800151c <SCH_XBeeTX+0x128>)
 800143e:	4413      	add	r3, r2
 8001440:	4a35      	ldr	r2, [pc, #212]	@ (8001518 <SCH_XBeeTX+0x124>)
 8001442:	8812      	ldrh	r2, [r2, #0]
 8001444:	b292      	uxth	r2, r2
 8001446:	4619      	mov	r1, r3
 8001448:	4835      	ldr	r0, [pc, #212]	@ (8001520 <SCH_XBeeTX+0x12c>)
 800144a:	f012 fdc1 	bl	8013fd0 <XBEE_TXPacket>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d01a      	beq.n	800148a <SCH_XBeeTX+0x96>
			return;
 8001454:	e056      	b.n	8001504 <SCH_XBeeTX+0x110>
		}
	} else if (tx_state == 2) {
 8001456:	4b2f      	ldr	r3, [pc, #188]	@ (8001514 <SCH_XBeeTX+0x120>)
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	b2db      	uxtb	r3, r3
 800145c:	2b02      	cmp	r3, #2
 800145e:	d114      	bne.n	800148a <SCH_XBeeTX+0x96>
		// Send a HEADER packet
		// Header packet numbers: FFFE, FFFD, FFFC, ...
		if (XBEE_TXPacket(&hxbee, jpeg_out + tx_byte*UART_TXSIZE, 0xFFFF - (tx_byte+1))) {
 8001460:	4b2d      	ldr	r3, [pc, #180]	@ (8001518 <SCH_XBeeTX+0x124>)
 8001462:	881b      	ldrh	r3, [r3, #0]
 8001464:	b29b      	uxth	r3, r3
 8001466:	019b      	lsls	r3, r3, #6
 8001468:	461a      	mov	r2, r3
 800146a:	4b2c      	ldr	r3, [pc, #176]	@ (800151c <SCH_XBeeTX+0x128>)
 800146c:	18d1      	adds	r1, r2, r3
 800146e:	4b2a      	ldr	r3, [pc, #168]	@ (8001518 <SCH_XBeeTX+0x124>)
 8001470:	881b      	ldrh	r3, [r3, #0]
 8001472:	b29a      	uxth	r2, r3
 8001474:	f06f 0301 	mvn.w	r3, #1
 8001478:	1a9b      	subs	r3, r3, r2
 800147a:	b29b      	uxth	r3, r3
 800147c:	461a      	mov	r2, r3
 800147e:	4828      	ldr	r0, [pc, #160]	@ (8001520 <SCH_XBeeTX+0x12c>)
 8001480:	f012 fda6 	bl	8013fd0 <XBEE_TXPacket>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d13b      	bne.n	8001502 <SCH_XBeeTX+0x10e>
			return;
		}
	}

	// Update the timer for the next DT period
	sch_tim_tx = HAL_GetTick();
 800148a:	f001 faf9 	bl	8002a80 <HAL_GetTick>
 800148e:	4603      	mov	r3, r0
 8001490:	4a1f      	ldr	r2, [pc, #124]	@ (8001510 <SCH_XBeeTX+0x11c>)
 8001492:	6013      	str	r3, [r2, #0]
	tx_byte++;
 8001494:	4b20      	ldr	r3, [pc, #128]	@ (8001518 <SCH_XBeeTX+0x124>)
 8001496:	881b      	ldrh	r3, [r3, #0]
 8001498:	b29b      	uxth	r3, r3
 800149a:	3301      	adds	r3, #1
 800149c:	b29a      	uxth	r2, r3
 800149e:	4b1e      	ldr	r3, [pc, #120]	@ (8001518 <SCH_XBeeTX+0x124>)
 80014a0:	801a      	strh	r2, [r3, #0]

	// IMAGE Transmission complete
	if (tx_state == 1 && tx_byte > (jpeg_size - JPEG_HEADERSIZE) / UART_TXSIZE + 1) {
 80014a2:	4b1c      	ldr	r3, [pc, #112]	@ (8001514 <SCH_XBeeTX+0x120>)
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	b2db      	uxtb	r3, r3
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d115      	bne.n	80014d8 <SCH_XBeeTX+0xe4>
 80014ac:	4b1a      	ldr	r3, [pc, #104]	@ (8001518 <SCH_XBeeTX+0x124>)
 80014ae:	881b      	ldrh	r3, [r3, #0]
 80014b0:	b29b      	uxth	r3, r3
 80014b2:	461a      	mov	r2, r3
 80014b4:	4b1b      	ldr	r3, [pc, #108]	@ (8001524 <SCH_XBeeTX+0x130>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f2a3 230e 	subw	r3, r3, #526	@ 0x20e
 80014bc:	099b      	lsrs	r3, r3, #6
 80014be:	3301      	adds	r3, #1
 80014c0:	429a      	cmp	r2, r3
 80014c2:	d909      	bls.n	80014d8 <SCH_XBeeTX+0xe4>
		tx_state = 0;	// Flag the radio as idle
 80014c4:	4b13      	ldr	r3, [pc, #76]	@ (8001514 <SCH_XBeeTX+0x120>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	701a      	strb	r2, [r3, #0]
		tx_byte = 0;	// Reset the packet counter to 0
 80014ca:	4b13      	ldr	r3, [pc, #76]	@ (8001518 <SCH_XBeeTX+0x124>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	801a      	strh	r2, [r3, #0]
		jpeg_state = 0;	// Flag the JPEG as idle
 80014d0:	4b0e      	ldr	r3, [pc, #56]	@ (800150c <SCH_XBeeTX+0x118>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	701a      	strb	r2, [r3, #0]
		return;
 80014d6:	e015      	b.n	8001504 <SCH_XBeeTX+0x110>
	}

	// HEADER Transmission complete
	if (tx_state == 2 && tx_byte > JPEG_HEADERSIZE / UART_TXSIZE + 1) {
 80014d8:	4b0e      	ldr	r3, [pc, #56]	@ (8001514 <SCH_XBeeTX+0x120>)
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	2b02      	cmp	r3, #2
 80014e0:	d110      	bne.n	8001504 <SCH_XBeeTX+0x110>
 80014e2:	4b0d      	ldr	r3, [pc, #52]	@ (8001518 <SCH_XBeeTX+0x124>)
 80014e4:	881b      	ldrh	r3, [r3, #0]
 80014e6:	b29b      	uxth	r3, r3
 80014e8:	2b09      	cmp	r3, #9
 80014ea:	d90b      	bls.n	8001504 <SCH_XBeeTX+0x110>
		tx_state = 0;	// Flag the radio as idle
 80014ec:	4b09      	ldr	r3, [pc, #36]	@ (8001514 <SCH_XBeeTX+0x120>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	701a      	strb	r2, [r3, #0]
		tx_byte = 0;	// Reset the packet counter to 0
 80014f2:	4b09      	ldr	r3, [pc, #36]	@ (8001518 <SCH_XBeeTX+0x124>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	801a      	strh	r2, [r3, #0]
		return;
 80014f8:	e004      	b.n	8001504 <SCH_XBeeTX+0x110>
		return;
 80014fa:	bf00      	nop
 80014fc:	e002      	b.n	8001504 <SCH_XBeeTX+0x110>
	if (delta_t < SCH_MS_TX) return;
 80014fe:	bf00      	nop
 8001500:	e000      	b.n	8001504 <SCH_XBeeTX+0x110>
			return;
 8001502:	bf00      	nop

//	for (uint16_t i = 0; i < ((jpeg_size - JPEG_HEADERSIZE) / UART_TXSIZE) + 1; i++) {
//		XBEE_TXPacket(&hxbee, jpeg_out + i*UART_TXSIZE + JPEG_HEADERSIZE, i);
//		HAL_Delay(5);
//	}
}
 8001504:	3708      	adds	r7, #8
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	24025b1e 	.word	0x24025b1e
 8001510:	240006e0 	.word	0x240006e0
 8001514:	24025b4e 	.word	0x24025b4e
 8001518:	24025b4c 	.word	0x24025b4c
 800151c:	24013158 	.word	0x24013158
 8001520:	24025b28 	.word	0x24025b28
 8001524:	24025b20 	.word	0x24025b20

08001528 <SCH_Camera>:

void SCH_Camera() {
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
	if (camera_state != 0) return;	// Exit if the camera is capturing, queued, or has un-encoded data
 800152e:	4b18      	ldr	r3, [pc, #96]	@ (8001590 <SCH_Camera+0x68>)
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	b2db      	uxtb	r3, r3
 8001534:	2b00      	cmp	r3, #0
 8001536:	d124      	bne.n	8001582 <SCH_Camera+0x5a>
	if (jpeg_state != 0) return;	// Exit if the JPEG is processing (camera DMA can corrupt the working buffer of JPEG)
 8001538:	4b16      	ldr	r3, [pc, #88]	@ (8001594 <SCH_Camera+0x6c>)
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	b2db      	uxtb	r3, r3
 800153e:	2b00      	cmp	r3, #0
 8001540:	d121      	bne.n	8001586 <SCH_Camera+0x5e>

	// Take a snapshot
	uint8_t ovStat = HAL_DCMI_Start_DMA(&hdcmi, DCMI_MODE_SNAPSHOT, camera_mem, CAM_GRAYSIZE / 4);
 8001542:	4a15      	ldr	r2, [pc, #84]	@ (8001598 <SCH_Camera+0x70>)
 8001544:	f644 2371 	movw	r3, #19057	@ 0x4a71
 8001548:	2102      	movs	r1, #2
 800154a:	4814      	ldr	r0, [pc, #80]	@ (800159c <SCH_Camera+0x74>)
 800154c:	f001 fcd6 	bl	8002efc <HAL_DCMI_Start_DMA>
 8001550:	4603      	mov	r3, r0
 8001552:	71fb      	strb	r3, [r7, #7]
	if (ovStat) {
 8001554:	79fb      	ldrb	r3, [r7, #7]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d00f      	beq.n	800157a <SCH_Camera+0x52>
		sprintf(ssd_msg, "DCMI/DMA ERROR - Code 0x%X\r\n", ovStat);
 800155a:	79fb      	ldrb	r3, [r7, #7]
 800155c:	461a      	mov	r2, r3
 800155e:	4910      	ldr	r1, [pc, #64]	@ (80015a0 <SCH_Camera+0x78>)
 8001560:	4810      	ldr	r0, [pc, #64]	@ (80015a4 <SCH_Camera+0x7c>)
 8001562:	f015 fc65 	bl	8016e30 <siprintf>
		WriteDebug(ssd_msg, strlen(ssd_msg));
 8001566:	480f      	ldr	r0, [pc, #60]	@ (80015a4 <SCH_Camera+0x7c>)
 8001568:	f7fe feba 	bl	80002e0 <strlen>
 800156c:	4603      	mov	r3, r0
 800156e:	b2db      	uxtb	r3, r3
 8001570:	4619      	mov	r1, r3
 8001572:	480c      	ldr	r0, [pc, #48]	@ (80015a4 <SCH_Camera+0x7c>)
 8001574:	f000 f931 	bl	80017da <WriteDebug>
		return;
 8001578:	e006      	b.n	8001588 <SCH_Camera+0x60>
	}

	camera_state = 1;	// Flag Camera as DMA Queued
 800157a:	4b05      	ldr	r3, [pc, #20]	@ (8001590 <SCH_Camera+0x68>)
 800157c:	2201      	movs	r2, #1
 800157e:	701a      	strb	r2, [r3, #0]
 8001580:	e002      	b.n	8001588 <SCH_Camera+0x60>
	if (camera_state != 0) return;	// Exit if the camera is capturing, queued, or has un-encoded data
 8001582:	bf00      	nop
 8001584:	e000      	b.n	8001588 <SCH_Camera+0x60>
	if (jpeg_state != 0) return;	// Exit if the JPEG is processing (camera DMA can corrupt the working buffer of JPEG)
 8001586:	bf00      	nop
}
 8001588:	3708      	adds	r7, #8
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	24013112 	.word	0x24013112
 8001594:	24025b1e 	.word	0x24025b1e
 8001598:	2400074c 	.word	0x2400074c
 800159c:	24000184 	.word	0x24000184
 80015a0:	08017644 	.word	0x08017644
 80015a4:	240006e4 	.word	0x240006e4

080015a8 <SCH_JPEG>:

void SCH_JPEG() {
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af02      	add	r7, sp, #8

	if (jpeg_state != 0) return;	// Exit if the JPEG is already processing
 80015ae:	4b16      	ldr	r3, [pc, #88]	@ (8001608 <SCH_JPEG+0x60>)
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	b2db      	uxtb	r3, r3
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d120      	bne.n	80015fa <SCH_JPEG+0x52>
	if (camera_state != 3) return;	// Exit if the camera does not have a new image to present
 80015b8:	4b14      	ldr	r3, [pc, #80]	@ (800160c <SCH_JPEG+0x64>)
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	2b03      	cmp	r3, #3
 80015c0:	d11d      	bne.n	80015fe <SCH_JPEG+0x56>
	if (tx_state == 1) return;		// Exit if the radio is transmitting
 80015c2:	4b13      	ldr	r3, [pc, #76]	@ (8001610 <SCH_JPEG+0x68>)
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d01a      	beq.n	8001602 <SCH_JPEG+0x5a>

	camera_state = 0;	// flag the camera as idle, it won't start again until the JPEG is done
 80015cc:	4b0f      	ldr	r3, [pc, #60]	@ (800160c <SCH_JPEG+0x64>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	701a      	strb	r2, [r3, #0]
	jpeg_state = 1;		// flag JPG as encoding
 80015d2:	4b0d      	ldr	r3, [pc, #52]	@ (8001608 <SCH_JPEG+0x60>)
 80015d4:	2201      	movs	r2, #1
 80015d6:	701a      	strb	r2, [r3, #0]

	jpeg_block = 0;		// Reset the JEPG block idx
 80015d8:	4b0e      	ldr	r3, [pc, #56]	@ (8001614 <SCH_JPEG+0x6c>)
 80015da:	2200      	movs	r2, #0
 80015dc:	601a      	str	r2, [r3, #0]
	jpeg_size = 0;		// Reset the JPEG size counter
 80015de:	4b0e      	ldr	r3, [pc, #56]	@ (8001618 <SCH_JPEG+0x70>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	601a      	str	r2, [r3, #0]

	GenerateJPEGMCUBlock();
 80015e4:	f000 fa28 	bl	8001a38 <GenerateJPEGMCUBlock>
	HAL_JPEG_Encode_DMA(&hjpeg, jpeg_mcu, 64, jpeg_out, JPEG_OUTBUF_SIZE);
 80015e8:	2340      	movs	r3, #64	@ 0x40
 80015ea:	9300      	str	r3, [sp, #0]
 80015ec:	4b0b      	ldr	r3, [pc, #44]	@ (800161c <SCH_JPEG+0x74>)
 80015ee:	2240      	movs	r2, #64	@ 0x40
 80015f0:	490b      	ldr	r1, [pc, #44]	@ (8001620 <SCH_JPEG+0x78>)
 80015f2:	480c      	ldr	r0, [pc, #48]	@ (8001624 <SCH_JPEG+0x7c>)
 80015f4:	f007 fb3e 	bl	8008c74 <HAL_JPEG_Encode_DMA>
 80015f8:	e004      	b.n	8001604 <SCH_JPEG+0x5c>
	if (jpeg_state != 0) return;	// Exit if the JPEG is already processing
 80015fa:	bf00      	nop
 80015fc:	e002      	b.n	8001604 <SCH_JPEG+0x5c>
	if (camera_state != 3) return;	// Exit if the camera does not have a new image to present
 80015fe:	bf00      	nop
 8001600:	e000      	b.n	8001604 <SCH_JPEG+0x5c>
	if (tx_state == 1) return;		// Exit if the radio is transmitting
 8001602:	bf00      	nop
}
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	24025b1e 	.word	0x24025b1e
 800160c:	24013112 	.word	0x24013112
 8001610:	24025b4e 	.word	0x24025b4e
 8001614:	24013154 	.word	0x24013154
 8001618:	24025b20 	.word	0x24025b20
 800161c:	24013158 	.word	0x24013158
 8001620:	24013114 	.word	0x24013114
 8001624:	240002a0 	.word	0x240002a0

08001628 <HAL_DCMI_VsyncEventCallback>:

// ------------------------------------------------------------ OVERRIDE CALLBACKS -- //
// Frame captured event, called when the DMA buffer is full of new frame data
void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi) {
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
	if (!camera_state) return;	// Do nothing if the camera is IDLE
 8001630:	4b0e      	ldr	r3, [pc, #56]	@ (800166c <HAL_DCMI_VsyncEventCallback+0x44>)
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	b2db      	uxtb	r3, r3
 8001636:	2b00      	cmp	r3, #0
 8001638:	d014      	beq.n	8001664 <HAL_DCMI_VsyncEventCallback+0x3c>

	if (camera_state == 1) {	// Transition flag to CAPTURING
 800163a:	4b0c      	ldr	r3, [pc, #48]	@ (800166c <HAL_DCMI_VsyncEventCallback+0x44>)
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	b2db      	uxtb	r3, r3
 8001640:	2b01      	cmp	r3, #1
 8001642:	d103      	bne.n	800164c <HAL_DCMI_VsyncEventCallback+0x24>
		camera_state = 2;
 8001644:	4b09      	ldr	r3, [pc, #36]	@ (800166c <HAL_DCMI_VsyncEventCallback+0x44>)
 8001646:	2202      	movs	r2, #2
 8001648:	701a      	strb	r2, [r3, #0]
		return;
 800164a:	e00c      	b.n	8001666 <HAL_DCMI_VsyncEventCallback+0x3e>
	}

	if (camera_state == 2) {	// Transition flag to READY
 800164c:	4b07      	ldr	r3, [pc, #28]	@ (800166c <HAL_DCMI_VsyncEventCallback+0x44>)
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	b2db      	uxtb	r3, r3
 8001652:	2b02      	cmp	r3, #2
 8001654:	d107      	bne.n	8001666 <HAL_DCMI_VsyncEventCallback+0x3e>
		HAL_DCMI_Stop(hdcmi);
 8001656:	6878      	ldr	r0, [r7, #4]
 8001658:	f001 fd12 	bl	8003080 <HAL_DCMI_Stop>
		camera_state = 3;
 800165c:	4b03      	ldr	r3, [pc, #12]	@ (800166c <HAL_DCMI_VsyncEventCallback+0x44>)
 800165e:	2203      	movs	r2, #3
 8001660:	701a      	strb	r2, [r3, #0]
		return;
 8001662:	e000      	b.n	8001666 <HAL_DCMI_VsyncEventCallback+0x3e>
	if (!camera_state) return;	// Do nothing if the camera is IDLE
 8001664:	bf00      	nop
	}
}
 8001666:	3708      	adds	r7, #8
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	24013112 	.word	0x24013112

08001670 <HAL_UART_RxCpltCallback>:

// ------------------------------------------------------------ OVERRIDE UART DMA CALLBACKS -- //
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
	XBEE_RX_DMACallback(&hxbee);
 8001678:	4803      	ldr	r0, [pc, #12]	@ (8001688 <HAL_UART_RxCpltCallback+0x18>)
 800167a:	f012 fd13 	bl	80140a4 <XBEE_RX_DMACallback>
}
 800167e:	bf00      	nop
 8001680:	3708      	adds	r7, #8
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	24025b28 	.word	0x24025b28

0800168c <HAL_JPEG_GetDataCallback>:

// JPEG hardware is requesting the next MCU block
void HAL_JPEG_GetDataCallback(JPEG_HandleTypeDef *hjpeg, uint32_t NbDecodedData) {
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
 8001694:	6039      	str	r1, [r7, #0]

	// Restock the input buffer with new MCU
	if (GenerateJPEGMCUBlock()) {
 8001696:	f000 f9cf 	bl	8001a38 <GenerateJPEGMCUBlock>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d013      	beq.n	80016c8 <HAL_JPEG_GetDataCallback+0x3c>
		// ERROR while generating MCU, probable memory leak - recover JPEG peripheral by restarting
		jpeg_state = 0;	// Flag JPEG as idle
 80016a0:	4b0e      	ldr	r3, [pc, #56]	@ (80016dc <HAL_JPEG_GetDataCallback+0x50>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	701a      	strb	r2, [r3, #0]
		jpeg_block = 0;	// Reset the JPEG block IDX
 80016a6:	4b0e      	ldr	r3, [pc, #56]	@ (80016e0 <HAL_JPEG_GetDataCallback+0x54>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	601a      	str	r2, [r3, #0]

		sprintf(ssd_msg, "JPEG OVERRUN\n");
 80016ac:	490d      	ldr	r1, [pc, #52]	@ (80016e4 <HAL_JPEG_GetDataCallback+0x58>)
 80016ae:	480e      	ldr	r0, [pc, #56]	@ (80016e8 <HAL_JPEG_GetDataCallback+0x5c>)
 80016b0:	f015 fbbe 	bl	8016e30 <siprintf>
		WriteDebug(ssd_msg, strlen(ssd_msg));
 80016b4:	480c      	ldr	r0, [pc, #48]	@ (80016e8 <HAL_JPEG_GetDataCallback+0x5c>)
 80016b6:	f7fe fe13 	bl	80002e0 <strlen>
 80016ba:	4603      	mov	r3, r0
 80016bc:	b2db      	uxtb	r3, r3
 80016be:	4619      	mov	r1, r3
 80016c0:	4809      	ldr	r0, [pc, #36]	@ (80016e8 <HAL_JPEG_GetDataCallback+0x5c>)
 80016c2:	f000 f88a 	bl	80017da <WriteDebug>
	}
	else {
		// Configure the buffer to be the same as before, it's contents have changed
		HAL_JPEG_ConfigInputBuffer(hjpeg, jpeg_mcu, 64);
	}
}
 80016c6:	e004      	b.n	80016d2 <HAL_JPEG_GetDataCallback+0x46>
		HAL_JPEG_ConfigInputBuffer(hjpeg, jpeg_mcu, 64);
 80016c8:	2240      	movs	r2, #64	@ 0x40
 80016ca:	4908      	ldr	r1, [pc, #32]	@ (80016ec <HAL_JPEG_GetDataCallback+0x60>)
 80016cc:	6878      	ldr	r0, [r7, #4]
 80016ce:	f007 fb99 	bl	8008e04 <HAL_JPEG_ConfigInputBuffer>
}
 80016d2:	bf00      	nop
 80016d4:	3708      	adds	r7, #8
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	24025b1e 	.word	0x24025b1e
 80016e0:	24013154 	.word	0x24013154
 80016e4:	08017664 	.word	0x08017664
 80016e8:	240006e4 	.word	0x240006e4
 80016ec:	24013114 	.word	0x24013114

080016f0 <HAL_JPEG_DataReadyCallback>:

// JPEG hardware is requesting a larger output buffer.
// This is done to manage JPEG output size, give it a buffer only as large as required
void HAL_JPEG_DataReadyCallback(JPEG_HandleTypeDef *hjpeg, uint8_t *pDataOut, uint32_t OutDataLength) {
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b084      	sub	sp, #16
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	60f8      	str	r0, [r7, #12]
 80016f8:	60b9      	str	r1, [r7, #8]
 80016fa:	607a      	str	r2, [r7, #4]
	// Setup new output buffer location (part of contiguous super-buffer)
	jpeg_size += JPEG_OUTBUF_SIZE;
 80016fc:	4b08      	ldr	r3, [pc, #32]	@ (8001720 <HAL_JPEG_DataReadyCallback+0x30>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	3340      	adds	r3, #64	@ 0x40
 8001702:	4a07      	ldr	r2, [pc, #28]	@ (8001720 <HAL_JPEG_DataReadyCallback+0x30>)
 8001704:	6013      	str	r3, [r2, #0]
	HAL_JPEG_ConfigOutputBuffer(hjpeg, jpeg_out + jpeg_size, JPEG_OUTBUF_SIZE);
 8001706:	4b06      	ldr	r3, [pc, #24]	@ (8001720 <HAL_JPEG_DataReadyCallback+0x30>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a06      	ldr	r2, [pc, #24]	@ (8001724 <HAL_JPEG_DataReadyCallback+0x34>)
 800170c:	4413      	add	r3, r2
 800170e:	2240      	movs	r2, #64	@ 0x40
 8001710:	4619      	mov	r1, r3
 8001712:	68f8      	ldr	r0, [r7, #12]
 8001714:	f007 fb88 	bl	8008e28 <HAL_JPEG_ConfigOutputBuffer>
}
 8001718:	bf00      	nop
 800171a:	3710      	adds	r7, #16
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	24025b20 	.word	0x24025b20
 8001724:	24013158 	.word	0x24013158

08001728 <HAL_JPEG_EncodeCpltCallback>:

// JPEG hardware has completed the current image
void HAL_JPEG_EncodeCpltCallback(JPEG_HandleTypeDef *hjpeg) {
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
	jpeg_state = 2;	// Flag JPEG as ready
 8001730:	4b0b      	ldr	r3, [pc, #44]	@ (8001760 <HAL_JPEG_EncodeCpltCallback+0x38>)
 8001732:	2202      	movs	r2, #2
 8001734:	701a      	strb	r2, [r3, #0]
	jpeg_block = 0;	// Reset the JPEG block IDX
 8001736:	4b0b      	ldr	r3, [pc, #44]	@ (8001764 <HAL_JPEG_EncodeCpltCallback+0x3c>)
 8001738:	2200      	movs	r2, #0
 800173a:	601a      	str	r2, [r3, #0]
	sprintf(ssd_msg, "JPEG DONE\n");
 800173c:	490a      	ldr	r1, [pc, #40]	@ (8001768 <HAL_JPEG_EncodeCpltCallback+0x40>)
 800173e:	480b      	ldr	r0, [pc, #44]	@ (800176c <HAL_JPEG_EncodeCpltCallback+0x44>)
 8001740:	f015 fb76 	bl	8016e30 <siprintf>
	WriteDebug(ssd_msg, strlen(ssd_msg));
 8001744:	4809      	ldr	r0, [pc, #36]	@ (800176c <HAL_JPEG_EncodeCpltCallback+0x44>)
 8001746:	f7fe fdcb 	bl	80002e0 <strlen>
 800174a:	4603      	mov	r3, r0
 800174c:	b2db      	uxtb	r3, r3
 800174e:	4619      	mov	r1, r3
 8001750:	4806      	ldr	r0, [pc, #24]	@ (800176c <HAL_JPEG_EncodeCpltCallback+0x44>)
 8001752:	f000 f842 	bl	80017da <WriteDebug>
}
 8001756:	bf00      	nop
 8001758:	3708      	adds	r7, #8
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	24025b1e 	.word	0x24025b1e
 8001764:	24013154 	.word	0x24013154
 8001768:	08017674 	.word	0x08017674
 800176c:	240006e4 	.word	0x240006e4

08001770 <HAL_JPEG_ErrorCallback>:

// JPEG hardware encountered an error
void HAL_JPEG_ErrorCallback (JPEG_HandleTypeDef * hjpeg) {
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
	sprintf(ssd_msg, " JPEG ERROR");
 8001778:	4909      	ldr	r1, [pc, #36]	@ (80017a0 <HAL_JPEG_ErrorCallback+0x30>)
 800177a:	480a      	ldr	r0, [pc, #40]	@ (80017a4 <HAL_JPEG_ErrorCallback+0x34>)
 800177c:	f015 fb58 	bl	8016e30 <siprintf>
	WriteDebug(ssd_msg, strlen(ssd_msg));
 8001780:	4808      	ldr	r0, [pc, #32]	@ (80017a4 <HAL_JPEG_ErrorCallback+0x34>)
 8001782:	f7fe fdad 	bl	80002e0 <strlen>
 8001786:	4603      	mov	r3, r0
 8001788:	b2db      	uxtb	r3, r3
 800178a:	4619      	mov	r1, r3
 800178c:	4805      	ldr	r0, [pc, #20]	@ (80017a4 <HAL_JPEG_ErrorCallback+0x34>)
 800178e:	f000 f824 	bl	80017da <WriteDebug>
	//HAL_JPEG_Abort(&hjpeg);
	jpeg_state = 0;	// Flag JPEG as idle
 8001792:	4b05      	ldr	r3, [pc, #20]	@ (80017a8 <HAL_JPEG_ErrorCallback+0x38>)
 8001794:	2200      	movs	r2, #0
 8001796:	701a      	strb	r2, [r3, #0]
}
 8001798:	bf00      	nop
 800179a:	3708      	adds	r7, #8
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	08017680 	.word	0x08017680
 80017a4:	240006e4 	.word	0x240006e4
 80017a8:	24025b1e 	.word	0x24025b1e

080017ac <DeltaTime>:

// ------------------------------------------------------------ UTILITY FUNCTIONS -- //
uint32_t DeltaTime(uint32_t start_t) {
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b084      	sub	sp, #16
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
	uint32_t now_t = HAL_GetTick();
 80017b4:	f001 f964 	bl	8002a80 <HAL_GetTick>
 80017b8:	60f8      	str	r0, [r7, #12]
	if (now_t < start_t) {
 80017ba:	68fa      	ldr	r2, [r7, #12]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	429a      	cmp	r2, r3
 80017c0:	d204      	bcs.n	80017cc <DeltaTime+0x20>
		// Overflow has occurred
		return (0xFFFFFFFF - start_t) + now_t;
 80017c2:	68fa      	ldr	r2, [r7, #12]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	1ad3      	subs	r3, r2, r3
 80017c8:	3b01      	subs	r3, #1
 80017ca:	e002      	b.n	80017d2 <DeltaTime+0x26>
	}

	return now_t - start_t;
 80017cc:	68fa      	ldr	r2, [r7, #12]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	1ad3      	subs	r3, r2, r3
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3710      	adds	r7, #16
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}

080017da <WriteDebug>:

// Transmit wrapper, this is for continuity across Controller project which debugs by printing to OLEDs
void WriteDebug(uint8_t *str_ptr, uint8_t str_len) {
 80017da:	b580      	push	{r7, lr}
 80017dc:	b082      	sub	sp, #8
 80017de:	af00      	add	r7, sp, #0
 80017e0:	6078      	str	r0, [r7, #4]
 80017e2:	460b      	mov	r3, r1
 80017e4:	70fb      	strb	r3, [r7, #3]
	CDC_Transmit_FS(str_ptr, str_len);
 80017e6:	78fb      	ldrb	r3, [r7, #3]
 80017e8:	4619      	mov	r1, r3
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f014 fdea 	bl	80163c4 <CDC_Transmit_FS>
}
 80017f0:	bf00      	nop
 80017f2:	3708      	adds	r7, #8
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}

080017f8 <CAM_GetRegister>:

HAL_StatusTypeDef CAM_GetRegister(uint8_t addr, uint8_t* pData, uint8_t haltOnError) {
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b09e      	sub	sp, #120	@ 0x78
 80017fc:	af02      	add	r7, sp, #8
 80017fe:	4603      	mov	r3, r0
 8001800:	6039      	str	r1, [r7, #0]
 8001802:	71fb      	strb	r3, [r7, #7]
 8001804:	4613      	mov	r3, r2
 8001806:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef ov_result;
	uint8_t usb_msg[100] = {0};
 8001808:	f107 0308 	add.w	r3, r7, #8
 800180c:	2264      	movs	r2, #100	@ 0x64
 800180e:	2100      	movs	r1, #0
 8001810:	4618      	mov	r0, r3
 8001812:	f015 fb2f 	bl	8016e74 <memset>

	ov_result = HAL_I2C_Master_Transmit(&hi2c2, OV7670_ADDR_READ, &addr, 1, 100);
 8001816:	1dfa      	adds	r2, r7, #7
 8001818:	2364      	movs	r3, #100	@ 0x64
 800181a:	9300      	str	r3, [sp, #0]
 800181c:	2301      	movs	r3, #1
 800181e:	2143      	movs	r1, #67	@ 0x43
 8001820:	482f      	ldr	r0, [pc, #188]	@ (80018e0 <CAM_GetRegister+0xe8>)
 8001822:	f005 fb3d 	bl	8006ea0 <HAL_I2C_Master_Transmit>
 8001826:	4603      	mov	r3, r0
 8001828:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	if (ov_result) {
 800182c:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001830:	2b00      	cmp	r3, #0
 8001832:	d020      	beq.n	8001876 <CAM_GetRegister+0x7e>
		if (haltOnError) {
 8001834:	79bb      	ldrb	r3, [r7, #6]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d01a      	beq.n	8001870 <CAM_GetRegister+0x78>
			sprintf(usb_msg, "TX ERROR: Cannot read camera register 0x%X - Code 0x%X\r\n", addr, ov_result);
 800183a:	79fb      	ldrb	r3, [r7, #7]
 800183c:	461a      	mov	r2, r3
 800183e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001842:	f107 0008 	add.w	r0, r7, #8
 8001846:	4927      	ldr	r1, [pc, #156]	@ (80018e4 <CAM_GetRegister+0xec>)
 8001848:	f015 faf2 	bl	8016e30 <siprintf>
			while (1) {
				CDC_Transmit_FS(usb_msg, strlen(usb_msg));
 800184c:	f107 0308 	add.w	r3, r7, #8
 8001850:	4618      	mov	r0, r3
 8001852:	f7fe fd45 	bl	80002e0 <strlen>
 8001856:	4602      	mov	r2, r0
 8001858:	f107 0308 	add.w	r3, r7, #8
 800185c:	4611      	mov	r1, r2
 800185e:	4618      	mov	r0, r3
 8001860:	f014 fdb0 	bl	80163c4 <CDC_Transmit_FS>
				HAL_Delay(1000);
 8001864:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001868:	f001 f916 	bl	8002a98 <HAL_Delay>
			while (1) {
 800186c:	bf00      	nop
 800186e:	e7ed      	b.n	800184c <CAM_GetRegister+0x54>
			}
		}
		return ov_result;
 8001870:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001874:	e030      	b.n	80018d8 <CAM_GetRegister+0xe0>
	}


	ov_result = HAL_I2C_Master_Receive(&hi2c2, OV7670_ADDR_READ, pData, 1, 100);
 8001876:	2364      	movs	r3, #100	@ 0x64
 8001878:	9300      	str	r3, [sp, #0]
 800187a:	2301      	movs	r3, #1
 800187c:	683a      	ldr	r2, [r7, #0]
 800187e:	2143      	movs	r1, #67	@ 0x43
 8001880:	4817      	ldr	r0, [pc, #92]	@ (80018e0 <CAM_GetRegister+0xe8>)
 8001882:	f005 fc25 	bl	80070d0 <HAL_I2C_Master_Receive>
 8001886:	4603      	mov	r3, r0
 8001888:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	if (ov_result) {
 800188c:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001890:	2b00      	cmp	r3, #0
 8001892:	d020      	beq.n	80018d6 <CAM_GetRegister+0xde>
		if (haltOnError) {
 8001894:	79bb      	ldrb	r3, [r7, #6]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d01a      	beq.n	80018d0 <CAM_GetRegister+0xd8>
			sprintf(usb_msg, "RX ERROR: Cannot read camera register 0x%X - Code 0x%X\r\n", addr, ov_result);
 800189a:	79fb      	ldrb	r3, [r7, #7]
 800189c:	461a      	mov	r2, r3
 800189e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80018a2:	f107 0008 	add.w	r0, r7, #8
 80018a6:	4910      	ldr	r1, [pc, #64]	@ (80018e8 <CAM_GetRegister+0xf0>)
 80018a8:	f015 fac2 	bl	8016e30 <siprintf>
			while (1) {
				CDC_Transmit_FS(usb_msg, strlen(usb_msg));
 80018ac:	f107 0308 	add.w	r3, r7, #8
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7fe fd15 	bl	80002e0 <strlen>
 80018b6:	4602      	mov	r2, r0
 80018b8:	f107 0308 	add.w	r3, r7, #8
 80018bc:	4611      	mov	r1, r2
 80018be:	4618      	mov	r0, r3
 80018c0:	f014 fd80 	bl	80163c4 <CDC_Transmit_FS>
				HAL_Delay(1000);
 80018c4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80018c8:	f001 f8e6 	bl	8002a98 <HAL_Delay>
			while (1) {
 80018cc:	bf00      	nop
 80018ce:	e7ed      	b.n	80018ac <CAM_GetRegister+0xb4>
			}
		}
		return ov_result;
 80018d0:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80018d4:	e000      	b.n	80018d8 <CAM_GetRegister+0xe0>
	}


	return HAL_OK;
 80018d6:	2300      	movs	r3, #0
}
 80018d8:	4618      	mov	r0, r3
 80018da:	3770      	adds	r7, #112	@ 0x70
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	2400024c 	.word	0x2400024c
 80018e4:	0801768c 	.word	0x0801768c
 80018e8:	080176c8 	.word	0x080176c8

080018ec <CAM_SetRegister>:

HAL_StatusTypeDef CAM_SetRegister(uint8_t addr, uint8_t data, uint8_t haltOnError) {
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b0a0      	sub	sp, #128	@ 0x80
 80018f0:	af02      	add	r7, sp, #8
 80018f2:	4603      	mov	r3, r0
 80018f4:	71fb      	strb	r3, [r7, #7]
 80018f6:	460b      	mov	r3, r1
 80018f8:	71bb      	strb	r3, [r7, #6]
 80018fa:	4613      	mov	r3, r2
 80018fc:	717b      	strb	r3, [r7, #5]
	HAL_StatusTypeDef ov_result;
	uint8_t usb_msg[100] = {0};
 80018fe:	f107 0310 	add.w	r3, r7, #16
 8001902:	2264      	movs	r2, #100	@ 0x64
 8001904:	2100      	movs	r1, #0
 8001906:	4618      	mov	r0, r3
 8001908:	f015 fab4 	bl	8016e74 <memset>

	uint8_t reg_set[2] = {addr, data};
 800190c:	79fb      	ldrb	r3, [r7, #7]
 800190e:	733b      	strb	r3, [r7, #12]
 8001910:	79bb      	ldrb	r3, [r7, #6]
 8001912:	737b      	strb	r3, [r7, #13]

	ov_result = HAL_I2C_Master_Transmit(&hi2c2, OV7670_ADDR_WRITE, reg_set, 2, 100);
 8001914:	f107 020c 	add.w	r2, r7, #12
 8001918:	2364      	movs	r3, #100	@ 0x64
 800191a:	9300      	str	r3, [sp, #0]
 800191c:	2302      	movs	r3, #2
 800191e:	2142      	movs	r1, #66	@ 0x42
 8001920:	4841      	ldr	r0, [pc, #260]	@ (8001a28 <CAM_SetRegister+0x13c>)
 8001922:	f005 fabd 	bl	8006ea0 <HAL_I2C_Master_Transmit>
 8001926:	4603      	mov	r3, r0
 8001928:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
	if (ov_result) {
 800192c:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8001930:	2b00      	cmp	r3, #0
 8001932:	d01f      	beq.n	8001974 <CAM_SetRegister+0x88>
		if (haltOnError) {
 8001934:	797b      	ldrb	r3, [r7, #5]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d019      	beq.n	800196e <CAM_SetRegister+0x82>
			sprintf(usb_msg, "TX ERROR: Cannot write camera register 0x%X - Code 0x%X\r\n", addr, ov_result);
 800193a:	79fa      	ldrb	r2, [r7, #7]
 800193c:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8001940:	f107 0010 	add.w	r0, r7, #16
 8001944:	4939      	ldr	r1, [pc, #228]	@ (8001a2c <CAM_SetRegister+0x140>)
 8001946:	f015 fa73 	bl	8016e30 <siprintf>
			while (1) {
				CDC_Transmit_FS(usb_msg, strlen(usb_msg));
 800194a:	f107 0310 	add.w	r3, r7, #16
 800194e:	4618      	mov	r0, r3
 8001950:	f7fe fcc6 	bl	80002e0 <strlen>
 8001954:	4602      	mov	r2, r0
 8001956:	f107 0310 	add.w	r3, r7, #16
 800195a:	4611      	mov	r1, r2
 800195c:	4618      	mov	r0, r3
 800195e:	f014 fd31 	bl	80163c4 <CDC_Transmit_FS>
				HAL_Delay(1000);
 8001962:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001966:	f001 f897 	bl	8002a98 <HAL_Delay>
			while (1) {
 800196a:	bf00      	nop
 800196c:	e7ed      	b.n	800194a <CAM_SetRegister+0x5e>
			}
		}
		return ov_result;
 800196e:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8001972:	e054      	b.n	8001a1e <CAM_SetRegister+0x132>
	}

	// Confirm write
	uint8_t reg_get = 0x00;
 8001974:	2300      	movs	r3, #0
 8001976:	72fb      	strb	r3, [r7, #11]
	ov_result = CAM_GetRegister(addr, &reg_get, 1);
 8001978:	f107 010b 	add.w	r1, r7, #11
 800197c:	79fb      	ldrb	r3, [r7, #7]
 800197e:	2201      	movs	r2, #1
 8001980:	4618      	mov	r0, r3
 8001982:	f7ff ff39 	bl	80017f8 <CAM_GetRegister>
 8001986:	4603      	mov	r3, r0
 8001988:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
	if (ov_result) {
 800198c:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8001990:	2b00      	cmp	r3, #0
 8001992:	d01f      	beq.n	80019d4 <CAM_SetRegister+0xe8>
		if (haltOnError) {
 8001994:	797b      	ldrb	r3, [r7, #5]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d019      	beq.n	80019ce <CAM_SetRegister+0xe2>
			sprintf(usb_msg, "CF ERROR: Cannot confirm camera register 0x%X - Code 0x%X\r\n", addr, ov_result);
 800199a:	79fa      	ldrb	r2, [r7, #7]
 800199c:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80019a0:	f107 0010 	add.w	r0, r7, #16
 80019a4:	4922      	ldr	r1, [pc, #136]	@ (8001a30 <CAM_SetRegister+0x144>)
 80019a6:	f015 fa43 	bl	8016e30 <siprintf>
			while (1) {
				CDC_Transmit_FS(usb_msg, strlen(usb_msg));
 80019aa:	f107 0310 	add.w	r3, r7, #16
 80019ae:	4618      	mov	r0, r3
 80019b0:	f7fe fc96 	bl	80002e0 <strlen>
 80019b4:	4602      	mov	r2, r0
 80019b6:	f107 0310 	add.w	r3, r7, #16
 80019ba:	4611      	mov	r1, r2
 80019bc:	4618      	mov	r0, r3
 80019be:	f014 fd01 	bl	80163c4 <CDC_Transmit_FS>
				HAL_Delay(1000);
 80019c2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80019c6:	f001 f867 	bl	8002a98 <HAL_Delay>
			while (1) {
 80019ca:	bf00      	nop
 80019cc:	e7ed      	b.n	80019aa <CAM_SetRegister+0xbe>
			}
		}
		else {
			return ov_result;
 80019ce:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80019d2:	e024      	b.n	8001a1e <CAM_SetRegister+0x132>
		}
	}

	if (reg_get != data) {
 80019d4:	7afb      	ldrb	r3, [r7, #11]
 80019d6:	79ba      	ldrb	r2, [r7, #6]
 80019d8:	429a      	cmp	r2, r3
 80019da:	d01f      	beq.n	8001a1c <CAM_SetRegister+0x130>
		// Error, bad write
		if (haltOnError) {
 80019dc:	797b      	ldrb	r3, [r7, #5]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d01a      	beq.n	8001a18 <CAM_SetRegister+0x12c>
			sprintf(usb_msg, "CF ERROR: Bad write to register 0x%X - EXPECTED 0x%X, GOT 0x%X\r\n", addr, data, reg_get);
 80019e2:	79fa      	ldrb	r2, [r7, #7]
 80019e4:	79bb      	ldrb	r3, [r7, #6]
 80019e6:	7af9      	ldrb	r1, [r7, #11]
 80019e8:	f107 0010 	add.w	r0, r7, #16
 80019ec:	9100      	str	r1, [sp, #0]
 80019ee:	4911      	ldr	r1, [pc, #68]	@ (8001a34 <CAM_SetRegister+0x148>)
 80019f0:	f015 fa1e 	bl	8016e30 <siprintf>
			while (1) {
				CDC_Transmit_FS(usb_msg, strlen(usb_msg));
 80019f4:	f107 0310 	add.w	r3, r7, #16
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7fe fc71 	bl	80002e0 <strlen>
 80019fe:	4602      	mov	r2, r0
 8001a00:	f107 0310 	add.w	r3, r7, #16
 8001a04:	4611      	mov	r1, r2
 8001a06:	4618      	mov	r0, r3
 8001a08:	f014 fcdc 	bl	80163c4 <CDC_Transmit_FS>
				HAL_Delay(1000);
 8001a0c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001a10:	f001 f842 	bl	8002a98 <HAL_Delay>
			while (1) {
 8001a14:	bf00      	nop
 8001a16:	e7ed      	b.n	80019f4 <CAM_SetRegister+0x108>
			}
		}
		return HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e000      	b.n	8001a1e <CAM_SetRegister+0x132>
	}

	return HAL_OK;
 8001a1c:	2300      	movs	r3, #0
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3778      	adds	r7, #120	@ 0x78
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	2400024c 	.word	0x2400024c
 8001a2c:	08017704 	.word	0x08017704
 8001a30:	08017740 	.word	0x08017740
 8001a34:	0801777c 	.word	0x0801777c

08001a38 <GenerateJPEGMCUBlock>:

// GENERATE JPEG MCU BLOCK
uint8_t GenerateJPEGMCUBlock() {
 8001a38:	b480      	push	{r7}
 8001a3a:	b087      	sub	sp, #28
 8001a3c:	af00      	add	r7, sp, #0
	// Don't go over the bounds of the specified MCU area
	if (jpeg_block > jpeg_mcu_widths[jpeg_quality]*jpeg_mcu_heights[jpeg_quality]) { return 1; }
 8001a3e:	4b4a      	ldr	r3, [pc, #296]	@ (8001b68 <GenerateJPEGMCUBlock+0x130>)
 8001a40:	781b      	ldrb	r3, [r3, #0]
 8001a42:	461a      	mov	r2, r3
 8001a44:	4b49      	ldr	r3, [pc, #292]	@ (8001b6c <GenerateJPEGMCUBlock+0x134>)
 8001a46:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	4b46      	ldr	r3, [pc, #280]	@ (8001b68 <GenerateJPEGMCUBlock+0x130>)
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	4619      	mov	r1, r3
 8001a52:	4b47      	ldr	r3, [pc, #284]	@ (8001b70 <GenerateJPEGMCUBlock+0x138>)
 8001a54:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8001a58:	fb02 f303 	mul.w	r3, r2, r3
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	4b45      	ldr	r3, [pc, #276]	@ (8001b74 <GenerateJPEGMCUBlock+0x13c>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	429a      	cmp	r2, r3
 8001a64:	d201      	bcs.n	8001a6a <GenerateJPEGMCUBlock+0x32>
 8001a66:	2301      	movs	r3, #1
 8001a68:	e077      	b.n	8001b5a <GenerateJPEGMCUBlock+0x122>

	int xStart = (jpeg_block % jpeg_mcu_widths[jpeg_quality]) * 8;
 8001a6a:	4b42      	ldr	r3, [pc, #264]	@ (8001b74 <GenerateJPEGMCUBlock+0x13c>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a3e      	ldr	r2, [pc, #248]	@ (8001b68 <GenerateJPEGMCUBlock+0x130>)
 8001a70:	7812      	ldrb	r2, [r2, #0]
 8001a72:	4611      	mov	r1, r2
 8001a74:	4a3d      	ldr	r2, [pc, #244]	@ (8001b6c <GenerateJPEGMCUBlock+0x134>)
 8001a76:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8001a7a:	fbb3 f1f2 	udiv	r1, r3, r2
 8001a7e:	fb01 f202 	mul.w	r2, r1, r2
 8001a82:	1a9b      	subs	r3, r3, r2
 8001a84:	00db      	lsls	r3, r3, #3
 8001a86:	60bb      	str	r3, [r7, #8]
	int yStart = (jpeg_block / jpeg_mcu_widths[jpeg_quality]) * 8;
 8001a88:	4b3a      	ldr	r3, [pc, #232]	@ (8001b74 <GenerateJPEGMCUBlock+0x13c>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a36      	ldr	r2, [pc, #216]	@ (8001b68 <GenerateJPEGMCUBlock+0x130>)
 8001a8e:	7812      	ldrb	r2, [r2, #0]
 8001a90:	4611      	mov	r1, r2
 8001a92:	4a36      	ldr	r2, [pc, #216]	@ (8001b6c <GenerateJPEGMCUBlock+0x134>)
 8001a94:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8001a98:	fbb3 f3f2 	udiv	r3, r3, r2
 8001a9c:	00db      	lsls	r3, r3, #3
 8001a9e:	607b      	str	r3, [r7, #4]
	int i = 0;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	617b      	str	r3, [r7, #20]
	for (int y = yStart; y < yStart + 8; y++) {
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	613b      	str	r3, [r7, #16]
 8001aa8:	e04c      	b.n	8001b44 <GenerateJPEGMCUBlock+0x10c>
		for (int x = xStart; x < xStart + 8; x++) {
 8001aaa:	68bb      	ldr	r3, [r7, #8]
 8001aac:	60fb      	str	r3, [r7, #12]
 8001aae:	e041      	b.n	8001b34 <GenerateJPEGMCUBlock+0xfc>
			// Pad to 8x8
			if (x*jpeg_scaleFactors[jpeg_quality] >= CAM_WIDTH || y*jpeg_scaleFactors[jpeg_quality] >= CAM_HEIGHT) {
 8001ab0:	4b2d      	ldr	r3, [pc, #180]	@ (8001b68 <GenerateJPEGMCUBlock+0x130>)
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	461a      	mov	r2, r3
 8001ab6:	4b30      	ldr	r3, [pc, #192]	@ (8001b78 <GenerateJPEGMCUBlock+0x140>)
 8001ab8:	5c9b      	ldrb	r3, [r3, r2]
 8001aba:	461a      	mov	r2, r3
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	fb02 f303 	mul.w	r3, r2, r3
 8001ac2:	f5b3 7f9d 	cmp.w	r3, #314	@ 0x13a
 8001ac6:	dc0a      	bgt.n	8001ade <GenerateJPEGMCUBlock+0xa6>
 8001ac8:	4b27      	ldr	r3, [pc, #156]	@ (8001b68 <GenerateJPEGMCUBlock+0x130>)
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	461a      	mov	r2, r3
 8001ace:	4b2a      	ldr	r3, [pc, #168]	@ (8001b78 <GenerateJPEGMCUBlock+0x140>)
 8001ad0:	5c9b      	ldrb	r3, [r3, r2]
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	fb02 f303 	mul.w	r3, r2, r3
 8001ada:	2bf1      	cmp	r3, #241	@ 0xf1
 8001adc:	dd05      	ble.n	8001aea <GenerateJPEGMCUBlock+0xb2>
				jpeg_mcu[i] = 0x00;
 8001ade:	4a27      	ldr	r2, [pc, #156]	@ (8001b7c <GenerateJPEGMCUBlock+0x144>)
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	4413      	add	r3, r2
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	701a      	strb	r2, [r3, #0]
 8001ae8:	e01e      	b.n	8001b28 <GenerateJPEGMCUBlock+0xf0>
			} else {
				jpeg_mcu[i] = camera_mem[x*jpeg_scaleFactors[jpeg_quality] + y*jpeg_scaleFactors[jpeg_quality] * CAM_WIDTH];
 8001aea:	4b1f      	ldr	r3, [pc, #124]	@ (8001b68 <GenerateJPEGMCUBlock+0x130>)
 8001aec:	781b      	ldrb	r3, [r3, #0]
 8001aee:	461a      	mov	r2, r3
 8001af0:	4b21      	ldr	r3, [pc, #132]	@ (8001b78 <GenerateJPEGMCUBlock+0x140>)
 8001af2:	5c9b      	ldrb	r3, [r3, r2]
 8001af4:	461a      	mov	r2, r3
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	fb03 f102 	mul.w	r1, r3, r2
 8001afc:	4b1a      	ldr	r3, [pc, #104]	@ (8001b68 <GenerateJPEGMCUBlock+0x130>)
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	461a      	mov	r2, r3
 8001b02:	4b1d      	ldr	r3, [pc, #116]	@ (8001b78 <GenerateJPEGMCUBlock+0x140>)
 8001b04:	5c9b      	ldrb	r3, [r3, r2]
 8001b06:	461a      	mov	r2, r3
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	fb03 f202 	mul.w	r2, r3, r2
 8001b0e:	4613      	mov	r3, r2
 8001b10:	009b      	lsls	r3, r3, #2
 8001b12:	4413      	add	r3, r2
 8001b14:	019a      	lsls	r2, r3, #6
 8001b16:	1ad3      	subs	r3, r2, r3
 8001b18:	440b      	add	r3, r1
 8001b1a:	4a19      	ldr	r2, [pc, #100]	@ (8001b80 <GenerateJPEGMCUBlock+0x148>)
 8001b1c:	5cd1      	ldrb	r1, [r2, r3]
 8001b1e:	4a17      	ldr	r2, [pc, #92]	@ (8001b7c <GenerateJPEGMCUBlock+0x144>)
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	4413      	add	r3, r2
 8001b24:	460a      	mov	r2, r1
 8001b26:	701a      	strb	r2, [r3, #0]
			}
			i++;
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	617b      	str	r3, [r7, #20]
		for (int x = xStart; x < xStart + 8; x++) {
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	3301      	adds	r3, #1
 8001b32:	60fb      	str	r3, [r7, #12]
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	3307      	adds	r3, #7
 8001b38:	68fa      	ldr	r2, [r7, #12]
 8001b3a:	429a      	cmp	r2, r3
 8001b3c:	ddb8      	ble.n	8001ab0 <GenerateJPEGMCUBlock+0x78>
	for (int y = yStart; y < yStart + 8; y++) {
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	3301      	adds	r3, #1
 8001b42:	613b      	str	r3, [r7, #16]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	3307      	adds	r3, #7
 8001b48:	693a      	ldr	r2, [r7, #16]
 8001b4a:	429a      	cmp	r2, r3
 8001b4c:	ddad      	ble.n	8001aaa <GenerateJPEGMCUBlock+0x72>
		}
	}
	jpeg_block++;
 8001b4e:	4b09      	ldr	r3, [pc, #36]	@ (8001b74 <GenerateJPEGMCUBlock+0x13c>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	3301      	adds	r3, #1
 8001b54:	4a07      	ldr	r2, [pc, #28]	@ (8001b74 <GenerateJPEGMCUBlock+0x13c>)
 8001b56:	6013      	str	r3, [r2, #0]
	return 0;
 8001b58:	2300      	movs	r3, #0
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	371c      	adds	r7, #28
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	24025b24 	.word	0x24025b24
 8001b6c:	24000000 	.word	0x24000000
 8001b70:	24000008 	.word	0x24000008
 8001b74:	24013154 	.word	0x24013154
 8001b78:	24000010 	.word	0x24000010
 8001b7c:	24013114 	.word	0x24013114
 8001b80:	2400074c 	.word	0x2400074c

08001b84 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001b8a:	463b      	mov	r3, r7
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	601a      	str	r2, [r3, #0]
 8001b90:	605a      	str	r2, [r3, #4]
 8001b92:	609a      	str	r2, [r3, #8]
 8001b94:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001b96:	f001 f8bf 	bl	8002d18 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001ba6:	231f      	movs	r3, #31
 8001ba8:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8001baa:	2387      	movs	r3, #135	@ 0x87
 8001bac:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001bc6:	463b      	mov	r3, r7
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f001 f8dd 	bl	8002d88 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001bce:	2004      	movs	r0, #4
 8001bd0:	f001 f8ba 	bl	8002d48 <HAL_MPU_Enable>

}
 8001bd4:	bf00      	nop
 8001bd6:	3710      	adds	r7, #16
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}

08001bdc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001be0:	b672      	cpsid	i
}
 8001be2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001be4:	bf00      	nop
 8001be6:	e7fd      	b.n	8001be4 <Error_Handler+0x8>

08001be8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bee:	4b0a      	ldr	r3, [pc, #40]	@ (8001c18 <HAL_MspInit+0x30>)
 8001bf0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001bf4:	4a08      	ldr	r2, [pc, #32]	@ (8001c18 <HAL_MspInit+0x30>)
 8001bf6:	f043 0302 	orr.w	r3, r3, #2
 8001bfa:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001bfe:	4b06      	ldr	r3, [pc, #24]	@ (8001c18 <HAL_MspInit+0x30>)
 8001c00:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001c04:	f003 0302 	and.w	r3, r3, #2
 8001c08:	607b      	str	r3, [r7, #4]
 8001c0a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c0c:	bf00      	nop
 8001c0e:	370c      	adds	r7, #12
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr
 8001c18:	58024400 	.word	0x58024400

08001c1c <HAL_DCMI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdcmi: DCMI handle pointer
  * @retval None
  */
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b08e      	sub	sp, #56	@ 0x38
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c24:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c28:	2200      	movs	r2, #0
 8001c2a:	601a      	str	r2, [r3, #0]
 8001c2c:	605a      	str	r2, [r3, #4]
 8001c2e:	609a      	str	r2, [r3, #8]
 8001c30:	60da      	str	r2, [r3, #12]
 8001c32:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a79      	ldr	r2, [pc, #484]	@ (8001e20 <HAL_DCMI_MspInit+0x204>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	f040 80ec 	bne.w	8001e18 <HAL_DCMI_MspInit+0x1fc>
  {
    /* USER CODE BEGIN DCMI_MspInit 0 */

    /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8001c40:	4b78      	ldr	r3, [pc, #480]	@ (8001e24 <HAL_DCMI_MspInit+0x208>)
 8001c42:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8001c46:	4a77      	ldr	r2, [pc, #476]	@ (8001e24 <HAL_DCMI_MspInit+0x208>)
 8001c48:	f043 0301 	orr.w	r3, r3, #1
 8001c4c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8001c50:	4b74      	ldr	r3, [pc, #464]	@ (8001e24 <HAL_DCMI_MspInit+0x208>)
 8001c52:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8001c56:	f003 0301 	and.w	r3, r3, #1
 8001c5a:	623b      	str	r3, [r7, #32]
 8001c5c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c5e:	4b71      	ldr	r3, [pc, #452]	@ (8001e24 <HAL_DCMI_MspInit+0x208>)
 8001c60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c64:	4a6f      	ldr	r2, [pc, #444]	@ (8001e24 <HAL_DCMI_MspInit+0x208>)
 8001c66:	f043 0310 	orr.w	r3, r3, #16
 8001c6a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001c6e:	4b6d      	ldr	r3, [pc, #436]	@ (8001e24 <HAL_DCMI_MspInit+0x208>)
 8001c70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c74:	f003 0310 	and.w	r3, r3, #16
 8001c78:	61fb      	str	r3, [r7, #28]
 8001c7a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c7c:	4b69      	ldr	r3, [pc, #420]	@ (8001e24 <HAL_DCMI_MspInit+0x208>)
 8001c7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c82:	4a68      	ldr	r2, [pc, #416]	@ (8001e24 <HAL_DCMI_MspInit+0x208>)
 8001c84:	f043 0301 	orr.w	r3, r3, #1
 8001c88:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001c8c:	4b65      	ldr	r3, [pc, #404]	@ (8001e24 <HAL_DCMI_MspInit+0x208>)
 8001c8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c92:	f003 0301 	and.w	r3, r3, #1
 8001c96:	61bb      	str	r3, [r7, #24]
 8001c98:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c9a:	4b62      	ldr	r3, [pc, #392]	@ (8001e24 <HAL_DCMI_MspInit+0x208>)
 8001c9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ca0:	4a60      	ldr	r2, [pc, #384]	@ (8001e24 <HAL_DCMI_MspInit+0x208>)
 8001ca2:	f043 0304 	orr.w	r3, r3, #4
 8001ca6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001caa:	4b5e      	ldr	r3, [pc, #376]	@ (8001e24 <HAL_DCMI_MspInit+0x208>)
 8001cac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cb0:	f003 0304 	and.w	r3, r3, #4
 8001cb4:	617b      	str	r3, [r7, #20]
 8001cb6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cb8:	4b5a      	ldr	r3, [pc, #360]	@ (8001e24 <HAL_DCMI_MspInit+0x208>)
 8001cba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cbe:	4a59      	ldr	r2, [pc, #356]	@ (8001e24 <HAL_DCMI_MspInit+0x208>)
 8001cc0:	f043 0308 	orr.w	r3, r3, #8
 8001cc4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001cc8:	4b56      	ldr	r3, [pc, #344]	@ (8001e24 <HAL_DCMI_MspInit+0x208>)
 8001cca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cce:	f003 0308 	and.w	r3, r3, #8
 8001cd2:	613b      	str	r3, [r7, #16]
 8001cd4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cd6:	4b53      	ldr	r3, [pc, #332]	@ (8001e24 <HAL_DCMI_MspInit+0x208>)
 8001cd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cdc:	4a51      	ldr	r2, [pc, #324]	@ (8001e24 <HAL_DCMI_MspInit+0x208>)
 8001cde:	f043 0302 	orr.w	r3, r3, #2
 8001ce2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ce6:	4b4f      	ldr	r3, [pc, #316]	@ (8001e24 <HAL_DCMI_MspInit+0x208>)
 8001ce8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cec:	f003 0302 	and.w	r3, r3, #2
 8001cf0:	60fb      	str	r3, [r7, #12]
 8001cf2:	68fb      	ldr	r3, [r7, #12]
    PD3     ------> DCMI_D5
    PB7     ------> DCMI_VSYNC
    PE0     ------> DCMI_D2
    PE1     ------> DCMI_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_0
 8001cf4:	2373      	movs	r3, #115	@ 0x73
 8001cf6:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cf8:	2302      	movs	r3, #2
 8001cfa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d00:	2300      	movs	r3, #0
 8001d02:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001d04:	230d      	movs	r3, #13
 8001d06:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d08:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	4846      	ldr	r0, [pc, #280]	@ (8001e28 <HAL_DCMI_MspInit+0x20c>)
 8001d10:	f004 fe60 	bl	80069d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001d14:	2350      	movs	r3, #80	@ 0x50
 8001d16:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d18:	2302      	movs	r3, #2
 8001d1a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d20:	2300      	movs	r3, #0
 8001d22:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001d24:	230d      	movs	r3, #13
 8001d26:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d28:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	483f      	ldr	r0, [pc, #252]	@ (8001e2c <HAL_DCMI_MspInit+0x210>)
 8001d30:	f004 fe50 	bl	80069d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d34:	23c0      	movs	r3, #192	@ 0xc0
 8001d36:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d38:	2302      	movs	r3, #2
 8001d3a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d40:	2300      	movs	r3, #0
 8001d42:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001d44:	230d      	movs	r3, #13
 8001d46:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d48:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	4838      	ldr	r0, [pc, #224]	@ (8001e30 <HAL_DCMI_MspInit+0x214>)
 8001d50:	f004 fe40 	bl	80069d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001d54:	2308      	movs	r3, #8
 8001d56:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d58:	2302      	movs	r3, #2
 8001d5a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d60:	2300      	movs	r3, #0
 8001d62:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001d64:	230d      	movs	r3, #13
 8001d66:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d68:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	4831      	ldr	r0, [pc, #196]	@ (8001e34 <HAL_DCMI_MspInit+0x218>)
 8001d70:	f004 fe30 	bl	80069d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001d74:	2380      	movs	r3, #128	@ 0x80
 8001d76:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d78:	2302      	movs	r3, #2
 8001d7a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d80:	2300      	movs	r3, #0
 8001d82:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001d84:	230d      	movs	r3, #13
 8001d86:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d88:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	482a      	ldr	r0, [pc, #168]	@ (8001e38 <HAL_DCMI_MspInit+0x21c>)
 8001d90:	f004 fe20 	bl	80069d4 <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA1_Stream0;
 8001d94:	4b29      	ldr	r3, [pc, #164]	@ (8001e3c <HAL_DCMI_MspInit+0x220>)
 8001d96:	4a2a      	ldr	r2, [pc, #168]	@ (8001e40 <HAL_DCMI_MspInit+0x224>)
 8001d98:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Request = DMA_REQUEST_DCMI;
 8001d9a:	4b28      	ldr	r3, [pc, #160]	@ (8001e3c <HAL_DCMI_MspInit+0x220>)
 8001d9c:	224b      	movs	r2, #75	@ 0x4b
 8001d9e:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001da0:	4b26      	ldr	r3, [pc, #152]	@ (8001e3c <HAL_DCMI_MspInit+0x220>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 8001da6:	4b25      	ldr	r3, [pc, #148]	@ (8001e3c <HAL_DCMI_MspInit+0x220>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 8001dac:	4b23      	ldr	r3, [pc, #140]	@ (8001e3c <HAL_DCMI_MspInit+0x220>)
 8001dae:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001db2:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001db4:	4b21      	ldr	r3, [pc, #132]	@ (8001e3c <HAL_DCMI_MspInit+0x220>)
 8001db6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001dba:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001dbc:	4b1f      	ldr	r3, [pc, #124]	@ (8001e3c <HAL_DCMI_MspInit+0x220>)
 8001dbe:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001dc2:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_CIRCULAR;
 8001dc4:	4b1d      	ldr	r3, [pc, #116]	@ (8001e3c <HAL_DCMI_MspInit+0x220>)
 8001dc6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001dca:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_HIGH;
 8001dcc:	4b1b      	ldr	r3, [pc, #108]	@ (8001e3c <HAL_DCMI_MspInit+0x220>)
 8001dce:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001dd2:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001dd4:	4b19      	ldr	r3, [pc, #100]	@ (8001e3c <HAL_DCMI_MspInit+0x220>)
 8001dd6:	2204      	movs	r2, #4
 8001dd8:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_dcmi.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001dda:	4b18      	ldr	r3, [pc, #96]	@ (8001e3c <HAL_DCMI_MspInit+0x220>)
 8001ddc:	2203      	movs	r2, #3
 8001dde:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_dcmi.Init.MemBurst = DMA_MBURST_SINGLE;
 8001de0:	4b16      	ldr	r3, [pc, #88]	@ (8001e3c <HAL_DCMI_MspInit+0x220>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_dcmi.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001de6:	4b15      	ldr	r3, [pc, #84]	@ (8001e3c <HAL_DCMI_MspInit+0x220>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 8001dec:	4813      	ldr	r0, [pc, #76]	@ (8001e3c <HAL_DCMI_MspInit+0x220>)
 8001dee:	f001 faf7 	bl	80033e0 <HAL_DMA_Init>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d001      	beq.n	8001dfc <HAL_DCMI_MspInit+0x1e0>
    {
      Error_Handler();
 8001df8:	f7ff fef0 	bl	8001bdc <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	4a0f      	ldr	r2, [pc, #60]	@ (8001e3c <HAL_DCMI_MspInit+0x220>)
 8001e00:	649a      	str	r2, [r3, #72]	@ 0x48
 8001e02:	4a0e      	ldr	r2, [pc, #56]	@ (8001e3c <HAL_DCMI_MspInit+0x220>)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6393      	str	r3, [r2, #56]	@ 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 0, 0);
 8001e08:	2200      	movs	r2, #0
 8001e0a:	2100      	movs	r1, #0
 8001e0c:	204e      	movs	r0, #78	@ 0x4e
 8001e0e:	f000 ff4e 	bl	8002cae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 8001e12:	204e      	movs	r0, #78	@ 0x4e
 8001e14:	f000 ff65 	bl	8002ce2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END DCMI_MspInit 1 */

  }

}
 8001e18:	bf00      	nop
 8001e1a:	3738      	adds	r7, #56	@ 0x38
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	48020000 	.word	0x48020000
 8001e24:	58024400 	.word	0x58024400
 8001e28:	58021000 	.word	0x58021000
 8001e2c:	58020000 	.word	0x58020000
 8001e30:	58020800 	.word	0x58020800
 8001e34:	58020c00 	.word	0x58020c00
 8001e38:	58020400 	.word	0x58020400
 8001e3c:	240001d4 	.word	0x240001d4
 8001e40:	40020010 	.word	0x40020010

08001e44 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b0ba      	sub	sp, #232	@ 0xe8
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e4c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001e50:	2200      	movs	r2, #0
 8001e52:	601a      	str	r2, [r3, #0]
 8001e54:	605a      	str	r2, [r3, #4]
 8001e56:	609a      	str	r2, [r3, #8]
 8001e58:	60da      	str	r2, [r3, #12]
 8001e5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e5c:	f107 0310 	add.w	r3, r7, #16
 8001e60:	22c0      	movs	r2, #192	@ 0xc0
 8001e62:	2100      	movs	r1, #0
 8001e64:	4618      	mov	r0, r3
 8001e66:	f015 f805 	bl	8016e74 <memset>
  if(hi2c->Instance==I2C2)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a38      	ldr	r2, [pc, #224]	@ (8001f50 <HAL_I2C_MspInit+0x10c>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d169      	bne.n	8001f48 <HAL_I2C_MspInit+0x104>

    /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001e74:	f04f 0208 	mov.w	r2, #8
 8001e78:	f04f 0300 	mov.w	r3, #0
 8001e7c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 2;
 8001e80:	2302      	movs	r3, #2
 8001e82:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 12;
 8001e84:	230c      	movs	r3, #12
 8001e86:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8001e88:	2302      	movs	r3, #2
 8001e8a:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8001e8c:	2302      	movs	r3, #2
 8001e8e:	647b      	str	r3, [r7, #68]	@ 0x44
    PeriphClkInitStruct.PLL3.PLL3R = 3;
 8001e90:	2303      	movs	r3, #3
 8001e92:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8001e94:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001e98:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8001e9a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001e9e:	653b      	str	r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_PLL3;
 8001ea4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ea8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001eac:	f107 0310 	add.w	r3, r7, #16
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f00b fc49 	bl	800d748 <HAL_RCCEx_PeriphCLKConfig>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d001      	beq.n	8001ec0 <HAL_I2C_MspInit+0x7c>
    {
      Error_Handler();
 8001ebc:	f7ff fe8e 	bl	8001bdc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ec0:	4b24      	ldr	r3, [pc, #144]	@ (8001f54 <HAL_I2C_MspInit+0x110>)
 8001ec2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ec6:	4a23      	ldr	r2, [pc, #140]	@ (8001f54 <HAL_I2C_MspInit+0x110>)
 8001ec8:	f043 0302 	orr.w	r3, r3, #2
 8001ecc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ed0:	4b20      	ldr	r3, [pc, #128]	@ (8001f54 <HAL_I2C_MspInit+0x110>)
 8001ed2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ed6:	f003 0302 	and.w	r3, r3, #2
 8001eda:	60fb      	str	r3, [r7, #12]
 8001edc:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001ede:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001ee2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ee6:	2312      	movs	r3, #18
 8001ee8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001eec:	2301      	movs	r3, #1
 8001eee:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001ef8:	2304      	movs	r3, #4
 8001efa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001efe:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001f02:	4619      	mov	r1, r3
 8001f04:	4814      	ldr	r0, [pc, #80]	@ (8001f58 <HAL_I2C_MspInit+0x114>)
 8001f06:	f004 fd65 	bl	80069d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001f0a:	4b12      	ldr	r3, [pc, #72]	@ (8001f54 <HAL_I2C_MspInit+0x110>)
 8001f0c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001f10:	4a10      	ldr	r2, [pc, #64]	@ (8001f54 <HAL_I2C_MspInit+0x110>)
 8001f12:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001f16:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001f1a:	4b0e      	ldr	r3, [pc, #56]	@ (8001f54 <HAL_I2C_MspInit+0x110>)
 8001f1c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001f20:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f24:	60bb      	str	r3, [r7, #8]
 8001f26:	68bb      	ldr	r3, [r7, #8]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8001f28:	2200      	movs	r2, #0
 8001f2a:	2100      	movs	r1, #0
 8001f2c:	2021      	movs	r0, #33	@ 0x21
 8001f2e:	f000 febe 	bl	8002cae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001f32:	2021      	movs	r0, #33	@ 0x21
 8001f34:	f000 fed5 	bl	8002ce2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8001f38:	2200      	movs	r2, #0
 8001f3a:	2100      	movs	r1, #0
 8001f3c:	2022      	movs	r0, #34	@ 0x22
 8001f3e:	f000 feb6 	bl	8002cae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8001f42:	2022      	movs	r0, #34	@ 0x22
 8001f44:	f000 fecd 	bl	8002ce2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 8001f48:	bf00      	nop
 8001f4a:	37e8      	adds	r7, #232	@ 0xe8
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	40005800 	.word	0x40005800
 8001f54:	58024400 	.word	0x58024400
 8001f58:	58020400 	.word	0x58020400

08001f5c <HAL_JPEG_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hjpeg: JPEG handle pointer
  * @retval None
  */
void HAL_JPEG_MspInit(JPEG_HandleTypeDef* hjpeg)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b084      	sub	sp, #16
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  if(hjpeg->Instance==JPEG)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a55      	ldr	r2, [pc, #340]	@ (80020c0 <HAL_JPEG_MspInit+0x164>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	f040 80a3 	bne.w	80020b6 <HAL_JPEG_MspInit+0x15a>
  {
    /* USER CODE BEGIN JPEG_MspInit 0 */

    /* USER CODE END JPEG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_JPEG_CLK_ENABLE();
 8001f70:	4b54      	ldr	r3, [pc, #336]	@ (80020c4 <HAL_JPEG_MspInit+0x168>)
 8001f72:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001f76:	4a53      	ldr	r2, [pc, #332]	@ (80020c4 <HAL_JPEG_MspInit+0x168>)
 8001f78:	f043 0320 	orr.w	r3, r3, #32
 8001f7c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8001f80:	4b50      	ldr	r3, [pc, #320]	@ (80020c4 <HAL_JPEG_MspInit+0x168>)
 8001f82:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001f86:	f003 0320 	and.w	r3, r3, #32
 8001f8a:	60fb      	str	r3, [r7, #12]
 8001f8c:	68fb      	ldr	r3, [r7, #12]

    /* JPEG MDMA Init */
    /* JPEG_INFIFO_TH Init */
    hmdma_jpeg_infifo_th.Instance = MDMA_Channel0;
 8001f8e:	4b4e      	ldr	r3, [pc, #312]	@ (80020c8 <HAL_JPEG_MspInit+0x16c>)
 8001f90:	4a4e      	ldr	r2, [pc, #312]	@ (80020cc <HAL_JPEG_MspInit+0x170>)
 8001f92:	601a      	str	r2, [r3, #0]
    hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
 8001f94:	4b4c      	ldr	r3, [pc, #304]	@ (80020c8 <HAL_JPEG_MspInit+0x16c>)
 8001f96:	2211      	movs	r2, #17
 8001f98:	605a      	str	r2, [r3, #4]
    hmdma_jpeg_infifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
 8001f9a:	4b4b      	ldr	r3, [pc, #300]	@ (80020c8 <HAL_JPEG_MspInit+0x16c>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	609a      	str	r2, [r3, #8]
    hmdma_jpeg_infifo_th.Init.Priority = MDMA_PRIORITY_MEDIUM;
 8001fa0:	4b49      	ldr	r3, [pc, #292]	@ (80020c8 <HAL_JPEG_MspInit+0x16c>)
 8001fa2:	2240      	movs	r2, #64	@ 0x40
 8001fa4:	60da      	str	r2, [r3, #12]
    hmdma_jpeg_infifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8001fa6:	4b48      	ldr	r3, [pc, #288]	@ (80020c8 <HAL_JPEG_MspInit+0x16c>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	611a      	str	r2, [r3, #16]
    hmdma_jpeg_infifo_th.Init.SourceInc = MDMA_SRC_INC_BYTE;
 8001fac:	4b46      	ldr	r3, [pc, #280]	@ (80020c8 <HAL_JPEG_MspInit+0x16c>)
 8001fae:	2202      	movs	r2, #2
 8001fb0:	615a      	str	r2, [r3, #20]
    hmdma_jpeg_infifo_th.Init.DestinationInc = MDMA_DEST_INC_DISABLE;
 8001fb2:	4b45      	ldr	r3, [pc, #276]	@ (80020c8 <HAL_JPEG_MspInit+0x16c>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	619a      	str	r2, [r3, #24]
    hmdma_jpeg_infifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_BYTE;
 8001fb8:	4b43      	ldr	r3, [pc, #268]	@ (80020c8 <HAL_JPEG_MspInit+0x16c>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	61da      	str	r2, [r3, #28]
    hmdma_jpeg_infifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
 8001fbe:	4b42      	ldr	r3, [pc, #264]	@ (80020c8 <HAL_JPEG_MspInit+0x16c>)
 8001fc0:	2280      	movs	r2, #128	@ 0x80
 8001fc2:	621a      	str	r2, [r3, #32]
    hmdma_jpeg_infifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8001fc4:	4b40      	ldr	r3, [pc, #256]	@ (80020c8 <HAL_JPEG_MspInit+0x16c>)
 8001fc6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001fca:	625a      	str	r2, [r3, #36]	@ 0x24
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
 8001fcc:	4b3e      	ldr	r3, [pc, #248]	@ (80020c8 <HAL_JPEG_MspInit+0x16c>)
 8001fce:	2220      	movs	r2, #32
 8001fd0:	629a      	str	r2, [r3, #40]	@ 0x28
    hmdma_jpeg_infifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 8001fd2:	4b3d      	ldr	r3, [pc, #244]	@ (80020c8 <HAL_JPEG_MspInit+0x16c>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hmdma_jpeg_infifo_th.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 8001fd8:	4b3b      	ldr	r3, [pc, #236]	@ (80020c8 <HAL_JPEG_MspInit+0x16c>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	631a      	str	r2, [r3, #48]	@ 0x30
    hmdma_jpeg_infifo_th.Init.SourceBlockAddressOffset = 0;
 8001fde:	4b3a      	ldr	r3, [pc, #232]	@ (80020c8 <HAL_JPEG_MspInit+0x16c>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	635a      	str	r2, [r3, #52]	@ 0x34
    hmdma_jpeg_infifo_th.Init.DestBlockAddressOffset = 0;
 8001fe4:	4b38      	ldr	r3, [pc, #224]	@ (80020c8 <HAL_JPEG_MspInit+0x16c>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	639a      	str	r2, [r3, #56]	@ 0x38
    if (HAL_MDMA_Init(&hmdma_jpeg_infifo_th) != HAL_OK)
 8001fea:	4837      	ldr	r0, [pc, #220]	@ (80020c8 <HAL_JPEG_MspInit+0x16c>)
 8001fec:	f008 fd3a 	bl	800aa64 <HAL_MDMA_Init>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d001      	beq.n	8001ffa <HAL_JPEG_MspInit+0x9e>
    {
      Error_Handler();
 8001ff6:	f7ff fdf1 	bl	8001bdc <Error_Handler>
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_infifo_th, 0, 0) != HAL_OK)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	2100      	movs	r1, #0
 8001ffe:	4832      	ldr	r0, [pc, #200]	@ (80020c8 <HAL_JPEG_MspInit+0x16c>)
 8002000:	f008 fd7c 	bl	800aafc <HAL_MDMA_ConfigPostRequestMask>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d001      	beq.n	800200e <HAL_JPEG_MspInit+0xb2>
    {
      Error_Handler();
 800200a:	f7ff fde7 	bl	8001bdc <Error_Handler>
    }

    __HAL_LINKDMA(hjpeg,hdmain,hmdma_jpeg_infifo_th);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4a2d      	ldr	r2, [pc, #180]	@ (80020c8 <HAL_JPEG_MspInit+0x16c>)
 8002012:	631a      	str	r2, [r3, #48]	@ 0x30
 8002014:	4a2c      	ldr	r2, [pc, #176]	@ (80020c8 <HAL_JPEG_MspInit+0x16c>)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6413      	str	r3, [r2, #64]	@ 0x40

    /* JPEG_OUTFIFO_NE Init */
    hmdma_jpeg_outfifo_ne.Instance = MDMA_Channel1;
 800201a:	4b2d      	ldr	r3, [pc, #180]	@ (80020d0 <HAL_JPEG_MspInit+0x174>)
 800201c:	4a2d      	ldr	r2, [pc, #180]	@ (80020d4 <HAL_JPEG_MspInit+0x178>)
 800201e:	601a      	str	r2, [r3, #0]
    hmdma_jpeg_outfifo_ne.Init.Request = MDMA_REQUEST_JPEG_OUTFIFO_NE;
 8002020:	4b2b      	ldr	r3, [pc, #172]	@ (80020d0 <HAL_JPEG_MspInit+0x174>)
 8002022:	2214      	movs	r2, #20
 8002024:	605a      	str	r2, [r3, #4]
    hmdma_jpeg_outfifo_ne.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
 8002026:	4b2a      	ldr	r3, [pc, #168]	@ (80020d0 <HAL_JPEG_MspInit+0x174>)
 8002028:	2200      	movs	r2, #0
 800202a:	609a      	str	r2, [r3, #8]
    hmdma_jpeg_outfifo_ne.Init.Priority = MDMA_PRIORITY_MEDIUM;
 800202c:	4b28      	ldr	r3, [pc, #160]	@ (80020d0 <HAL_JPEG_MspInit+0x174>)
 800202e:	2240      	movs	r2, #64	@ 0x40
 8002030:	60da      	str	r2, [r3, #12]
    hmdma_jpeg_outfifo_ne.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8002032:	4b27      	ldr	r3, [pc, #156]	@ (80020d0 <HAL_JPEG_MspInit+0x174>)
 8002034:	2200      	movs	r2, #0
 8002036:	611a      	str	r2, [r3, #16]
    hmdma_jpeg_outfifo_ne.Init.SourceInc = MDMA_SRC_INC_DISABLE;
 8002038:	4b25      	ldr	r3, [pc, #148]	@ (80020d0 <HAL_JPEG_MspInit+0x174>)
 800203a:	2200      	movs	r2, #0
 800203c:	615a      	str	r2, [r3, #20]
    hmdma_jpeg_outfifo_ne.Init.DestinationInc = MDMA_DEST_INC_BYTE;
 800203e:	4b24      	ldr	r3, [pc, #144]	@ (80020d0 <HAL_JPEG_MspInit+0x174>)
 8002040:	2208      	movs	r2, #8
 8002042:	619a      	str	r2, [r3, #24]
    hmdma_jpeg_outfifo_ne.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 8002044:	4b22      	ldr	r3, [pc, #136]	@ (80020d0 <HAL_JPEG_MspInit+0x174>)
 8002046:	2220      	movs	r2, #32
 8002048:	61da      	str	r2, [r3, #28]
    hmdma_jpeg_outfifo_ne.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
 800204a:	4b21      	ldr	r3, [pc, #132]	@ (80020d0 <HAL_JPEG_MspInit+0x174>)
 800204c:	2200      	movs	r2, #0
 800204e:	621a      	str	r2, [r3, #32]
    hmdma_jpeg_outfifo_ne.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8002050:	4b1f      	ldr	r3, [pc, #124]	@ (80020d0 <HAL_JPEG_MspInit+0x174>)
 8002052:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002056:	625a      	str	r2, [r3, #36]	@ 0x24
    hmdma_jpeg_outfifo_ne.Init.BufferTransferLength = 4;
 8002058:	4b1d      	ldr	r3, [pc, #116]	@ (80020d0 <HAL_JPEG_MspInit+0x174>)
 800205a:	2204      	movs	r2, #4
 800205c:	629a      	str	r2, [r3, #40]	@ 0x28
    hmdma_jpeg_outfifo_ne.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 800205e:	4b1c      	ldr	r3, [pc, #112]	@ (80020d0 <HAL_JPEG_MspInit+0x174>)
 8002060:	2200      	movs	r2, #0
 8002062:	62da      	str	r2, [r3, #44]	@ 0x2c
    hmdma_jpeg_outfifo_ne.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 8002064:	4b1a      	ldr	r3, [pc, #104]	@ (80020d0 <HAL_JPEG_MspInit+0x174>)
 8002066:	2200      	movs	r2, #0
 8002068:	631a      	str	r2, [r3, #48]	@ 0x30
    hmdma_jpeg_outfifo_ne.Init.SourceBlockAddressOffset = 0;
 800206a:	4b19      	ldr	r3, [pc, #100]	@ (80020d0 <HAL_JPEG_MspInit+0x174>)
 800206c:	2200      	movs	r2, #0
 800206e:	635a      	str	r2, [r3, #52]	@ 0x34
    hmdma_jpeg_outfifo_ne.Init.DestBlockAddressOffset = 0;
 8002070:	4b17      	ldr	r3, [pc, #92]	@ (80020d0 <HAL_JPEG_MspInit+0x174>)
 8002072:	2200      	movs	r2, #0
 8002074:	639a      	str	r2, [r3, #56]	@ 0x38
    if (HAL_MDMA_Init(&hmdma_jpeg_outfifo_ne) != HAL_OK)
 8002076:	4816      	ldr	r0, [pc, #88]	@ (80020d0 <HAL_JPEG_MspInit+0x174>)
 8002078:	f008 fcf4 	bl	800aa64 <HAL_MDMA_Init>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d001      	beq.n	8002086 <HAL_JPEG_MspInit+0x12a>
    {
      Error_Handler();
 8002082:	f7ff fdab 	bl	8001bdc <Error_Handler>
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_outfifo_ne, 0, 0) != HAL_OK)
 8002086:	2200      	movs	r2, #0
 8002088:	2100      	movs	r1, #0
 800208a:	4811      	ldr	r0, [pc, #68]	@ (80020d0 <HAL_JPEG_MspInit+0x174>)
 800208c:	f008 fd36 	bl	800aafc <HAL_MDMA_ConfigPostRequestMask>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d001      	beq.n	800209a <HAL_JPEG_MspInit+0x13e>
    {
      Error_Handler();
 8002096:	f7ff fda1 	bl	8001bdc <Error_Handler>
    }

    __HAL_LINKDMA(hjpeg,hdmaout,hmdma_jpeg_outfifo_ne);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4a0c      	ldr	r2, [pc, #48]	@ (80020d0 <HAL_JPEG_MspInit+0x174>)
 800209e:	635a      	str	r2, [r3, #52]	@ 0x34
 80020a0:	4a0b      	ldr	r2, [pc, #44]	@ (80020d0 <HAL_JPEG_MspInit+0x174>)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6413      	str	r3, [r2, #64]	@ 0x40

    /* JPEG interrupt Init */
    HAL_NVIC_SetPriority(JPEG_IRQn, 0, 0);
 80020a6:	2200      	movs	r2, #0
 80020a8:	2100      	movs	r1, #0
 80020aa:	2079      	movs	r0, #121	@ 0x79
 80020ac:	f000 fdff 	bl	8002cae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(JPEG_IRQn);
 80020b0:	2079      	movs	r0, #121	@ 0x79
 80020b2:	f000 fe16 	bl	8002ce2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END JPEG_MspInit 1 */

  }

}
 80020b6:	bf00      	nop
 80020b8:	3710      	adds	r7, #16
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	52003000 	.word	0x52003000
 80020c4:	58024400 	.word	0x58024400
 80020c8:	240002f8 	.word	0x240002f8
 80020cc:	52000040 	.word	0x52000040
 80020d0:	24000364 	.word	0x24000364
 80020d4:	52000080 	.word	0x52000080

080020d8 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b0bc      	sub	sp, #240	@ 0xf0
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020e0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80020e4:	2200      	movs	r2, #0
 80020e6:	601a      	str	r2, [r3, #0]
 80020e8:	605a      	str	r2, [r3, #4]
 80020ea:	609a      	str	r2, [r3, #8]
 80020ec:	60da      	str	r2, [r3, #12]
 80020ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80020f0:	f107 0318 	add.w	r3, r7, #24
 80020f4:	22c0      	movs	r2, #192	@ 0xc0
 80020f6:	2100      	movs	r1, #0
 80020f8:	4618      	mov	r0, r3
 80020fa:	f014 febb 	bl	8016e74 <memset>
  if(hspi->Instance==SPI2)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a38      	ldr	r2, [pc, #224]	@ (80021e4 <HAL_SPI_MspInit+0x10c>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d169      	bne.n	80021dc <HAL_SPI_MspInit+0x104>

    /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8002108:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800210c:	f04f 0300 	mov.w	r3, #0
 8002110:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002114:	2300      	movs	r3, #0
 8002116:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002118:	f107 0318 	add.w	r3, r7, #24
 800211c:	4618      	mov	r0, r3
 800211e:	f00b fb13 	bl	800d748 <HAL_RCCEx_PeriphCLKConfig>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d001      	beq.n	800212c <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8002128:	f7ff fd58 	bl	8001bdc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800212c:	4b2e      	ldr	r3, [pc, #184]	@ (80021e8 <HAL_SPI_MspInit+0x110>)
 800212e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002132:	4a2d      	ldr	r2, [pc, #180]	@ (80021e8 <HAL_SPI_MspInit+0x110>)
 8002134:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002138:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800213c:	4b2a      	ldr	r3, [pc, #168]	@ (80021e8 <HAL_SPI_MspInit+0x110>)
 800213e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002142:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002146:	617b      	str	r3, [r7, #20]
 8002148:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800214a:	4b27      	ldr	r3, [pc, #156]	@ (80021e8 <HAL_SPI_MspInit+0x110>)
 800214c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002150:	4a25      	ldr	r2, [pc, #148]	@ (80021e8 <HAL_SPI_MspInit+0x110>)
 8002152:	f043 0304 	orr.w	r3, r3, #4
 8002156:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800215a:	4b23      	ldr	r3, [pc, #140]	@ (80021e8 <HAL_SPI_MspInit+0x110>)
 800215c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002160:	f003 0304 	and.w	r3, r3, #4
 8002164:	613b      	str	r3, [r7, #16]
 8002166:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002168:	4b1f      	ldr	r3, [pc, #124]	@ (80021e8 <HAL_SPI_MspInit+0x110>)
 800216a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800216e:	4a1e      	ldr	r2, [pc, #120]	@ (80021e8 <HAL_SPI_MspInit+0x110>)
 8002170:	f043 0302 	orr.w	r3, r3, #2
 8002174:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002178:	4b1b      	ldr	r3, [pc, #108]	@ (80021e8 <HAL_SPI_MspInit+0x110>)
 800217a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800217e:	f003 0302 	and.w	r3, r3, #2
 8002182:	60fb      	str	r3, [r7, #12]
 8002184:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PC2_C     ------> SPI2_MISO
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8002186:	2306      	movs	r3, #6
 8002188:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800218c:	2302      	movs	r3, #2
 800218e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002192:	2300      	movs	r3, #0
 8002194:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002198:	2300      	movs	r3, #0
 800219a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800219e:	2305      	movs	r3, #5
 80021a0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021a4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80021a8:	4619      	mov	r1, r3
 80021aa:	4810      	ldr	r0, [pc, #64]	@ (80021ec <HAL_SPI_MspInit+0x114>)
 80021ac:	f004 fc12 	bl	80069d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80021b0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80021b4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021b8:	2302      	movs	r3, #2
 80021ba:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021be:	2300      	movs	r3, #0
 80021c0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021c4:	2300      	movs	r3, #0
 80021c6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80021ca:	2305      	movs	r3, #5
 80021cc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021d0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80021d4:	4619      	mov	r1, r3
 80021d6:	4806      	ldr	r0, [pc, #24]	@ (80021f0 <HAL_SPI_MspInit+0x118>)
 80021d8:	f004 fbfc 	bl	80069d4 <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 80021dc:	bf00      	nop
 80021de:	37f0      	adds	r7, #240	@ 0xf0
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	40003800 	.word	0x40003800
 80021e8:	58024400 	.word	0x58024400
 80021ec:	58020800 	.word	0x58020800
 80021f0:	58020400 	.word	0x58020400

080021f4 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b087      	sub	sp, #28
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a2b      	ldr	r2, [pc, #172]	@ (80022b0 <HAL_TIM_PWM_MspInit+0xbc>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d10f      	bne.n	8002226 <HAL_TIM_PWM_MspInit+0x32>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002206:	4b2b      	ldr	r3, [pc, #172]	@ (80022b4 <HAL_TIM_PWM_MspInit+0xc0>)
 8002208:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800220c:	4a29      	ldr	r2, [pc, #164]	@ (80022b4 <HAL_TIM_PWM_MspInit+0xc0>)
 800220e:	f043 0301 	orr.w	r3, r3, #1
 8002212:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002216:	4b27      	ldr	r3, [pc, #156]	@ (80022b4 <HAL_TIM_PWM_MspInit+0xc0>)
 8002218:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800221c:	f003 0301 	and.w	r3, r3, #1
 8002220:	617b      	str	r3, [r7, #20]
 8002222:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002224:	e03d      	b.n	80022a2 <HAL_TIM_PWM_MspInit+0xae>
  else if(htim_pwm->Instance==TIM2)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800222e:	d10f      	bne.n	8002250 <HAL_TIM_PWM_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002230:	4b20      	ldr	r3, [pc, #128]	@ (80022b4 <HAL_TIM_PWM_MspInit+0xc0>)
 8002232:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002236:	4a1f      	ldr	r2, [pc, #124]	@ (80022b4 <HAL_TIM_PWM_MspInit+0xc0>)
 8002238:	f043 0301 	orr.w	r3, r3, #1
 800223c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002240:	4b1c      	ldr	r3, [pc, #112]	@ (80022b4 <HAL_TIM_PWM_MspInit+0xc0>)
 8002242:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002246:	f003 0301 	and.w	r3, r3, #1
 800224a:	613b      	str	r3, [r7, #16]
 800224c:	693b      	ldr	r3, [r7, #16]
}
 800224e:	e028      	b.n	80022a2 <HAL_TIM_PWM_MspInit+0xae>
  else if(htim_pwm->Instance==TIM3)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a18      	ldr	r2, [pc, #96]	@ (80022b8 <HAL_TIM_PWM_MspInit+0xc4>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d10f      	bne.n	800227a <HAL_TIM_PWM_MspInit+0x86>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800225a:	4b16      	ldr	r3, [pc, #88]	@ (80022b4 <HAL_TIM_PWM_MspInit+0xc0>)
 800225c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002260:	4a14      	ldr	r2, [pc, #80]	@ (80022b4 <HAL_TIM_PWM_MspInit+0xc0>)
 8002262:	f043 0302 	orr.w	r3, r3, #2
 8002266:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800226a:	4b12      	ldr	r3, [pc, #72]	@ (80022b4 <HAL_TIM_PWM_MspInit+0xc0>)
 800226c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002270:	f003 0302 	and.w	r3, r3, #2
 8002274:	60fb      	str	r3, [r7, #12]
 8002276:	68fb      	ldr	r3, [r7, #12]
}
 8002278:	e013      	b.n	80022a2 <HAL_TIM_PWM_MspInit+0xae>
  else if(htim_pwm->Instance==TIM4)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a0f      	ldr	r2, [pc, #60]	@ (80022bc <HAL_TIM_PWM_MspInit+0xc8>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d10e      	bne.n	80022a2 <HAL_TIM_PWM_MspInit+0xae>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002284:	4b0b      	ldr	r3, [pc, #44]	@ (80022b4 <HAL_TIM_PWM_MspInit+0xc0>)
 8002286:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800228a:	4a0a      	ldr	r2, [pc, #40]	@ (80022b4 <HAL_TIM_PWM_MspInit+0xc0>)
 800228c:	f043 0304 	orr.w	r3, r3, #4
 8002290:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002294:	4b07      	ldr	r3, [pc, #28]	@ (80022b4 <HAL_TIM_PWM_MspInit+0xc0>)
 8002296:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800229a:	f003 0304 	and.w	r3, r3, #4
 800229e:	60bb      	str	r3, [r7, #8]
 80022a0:	68bb      	ldr	r3, [r7, #8]
}
 80022a2:	bf00      	nop
 80022a4:	371c      	adds	r7, #28
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr
 80022ae:	bf00      	nop
 80022b0:	40010000 	.word	0x40010000
 80022b4:	58024400 	.word	0x58024400
 80022b8:	40000400 	.word	0x40000400
 80022bc:	40000800 	.word	0x40000800

080022c0 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b084      	sub	sp, #16
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a0e      	ldr	r2, [pc, #56]	@ (8002308 <HAL_TIM_Base_MspInit+0x48>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d116      	bne.n	8002300 <HAL_TIM_Base_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM14_MspInit 0 */

    /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 80022d2:	4b0e      	ldr	r3, [pc, #56]	@ (800230c <HAL_TIM_Base_MspInit+0x4c>)
 80022d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80022d8:	4a0c      	ldr	r2, [pc, #48]	@ (800230c <HAL_TIM_Base_MspInit+0x4c>)
 80022da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022de:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80022e2:	4b0a      	ldr	r3, [pc, #40]	@ (800230c <HAL_TIM_Base_MspInit+0x4c>)
 80022e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80022e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022ec:	60fb      	str	r3, [r7, #12]
 80022ee:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 80022f0:	2200      	movs	r2, #0
 80022f2:	2100      	movs	r1, #0
 80022f4:	202d      	movs	r0, #45	@ 0x2d
 80022f6:	f000 fcda 	bl	8002cae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80022fa:	202d      	movs	r0, #45	@ 0x2d
 80022fc:	f000 fcf1 	bl	8002ce2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM14_MspInit 1 */

  }

}
 8002300:	bf00      	nop
 8002302:	3710      	adds	r7, #16
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}
 8002308:	40002000 	.word	0x40002000
 800230c:	58024400 	.word	0x58024400

08002310 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b08c      	sub	sp, #48	@ 0x30
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002318:	f107 031c 	add.w	r3, r7, #28
 800231c:	2200      	movs	r2, #0
 800231e:	601a      	str	r2, [r3, #0]
 8002320:	605a      	str	r2, [r3, #4]
 8002322:	609a      	str	r2, [r3, #8]
 8002324:	60da      	str	r2, [r3, #12]
 8002326:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a5d      	ldr	r2, [pc, #372]	@ (80024a4 <HAL_TIM_MspPostInit+0x194>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d120      	bne.n	8002374 <HAL_TIM_MspPostInit+0x64>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002332:	4b5d      	ldr	r3, [pc, #372]	@ (80024a8 <HAL_TIM_MspPostInit+0x198>)
 8002334:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002338:	4a5b      	ldr	r2, [pc, #364]	@ (80024a8 <HAL_TIM_MspPostInit+0x198>)
 800233a:	f043 0310 	orr.w	r3, r3, #16
 800233e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002342:	4b59      	ldr	r3, [pc, #356]	@ (80024a8 <HAL_TIM_MspPostInit+0x198>)
 8002344:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002348:	f003 0310 	and.w	r3, r3, #16
 800234c:	61bb      	str	r3, [r7, #24]
 800234e:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002350:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002354:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002356:	2302      	movs	r3, #2
 8002358:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800235a:	2300      	movs	r3, #0
 800235c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800235e:	2300      	movs	r3, #0
 8002360:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002362:	2301      	movs	r3, #1
 8002364:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002366:	f107 031c 	add.w	r3, r7, #28
 800236a:	4619      	mov	r1, r3
 800236c:	484f      	ldr	r0, [pc, #316]	@ (80024ac <HAL_TIM_MspPostInit+0x19c>)
 800236e:	f004 fb31 	bl	80069d4 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM14_MspPostInit 1 */

    /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8002372:	e093      	b.n	800249c <HAL_TIM_MspPostInit+0x18c>
  else if(htim->Instance==TIM2)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800237c:	d11f      	bne.n	80023be <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800237e:	4b4a      	ldr	r3, [pc, #296]	@ (80024a8 <HAL_TIM_MspPostInit+0x198>)
 8002380:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002384:	4a48      	ldr	r2, [pc, #288]	@ (80024a8 <HAL_TIM_MspPostInit+0x198>)
 8002386:	f043 0301 	orr.w	r3, r3, #1
 800238a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800238e:	4b46      	ldr	r3, [pc, #280]	@ (80024a8 <HAL_TIM_MspPostInit+0x198>)
 8002390:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002394:	f003 0301 	and.w	r3, r3, #1
 8002398:	617b      	str	r3, [r7, #20]
 800239a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800239c:	2307      	movs	r3, #7
 800239e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023a0:	2302      	movs	r3, #2
 80023a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a4:	2300      	movs	r3, #0
 80023a6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023a8:	2300      	movs	r3, #0
 80023aa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80023ac:	2301      	movs	r3, #1
 80023ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023b0:	f107 031c 	add.w	r3, r7, #28
 80023b4:	4619      	mov	r1, r3
 80023b6:	483e      	ldr	r0, [pc, #248]	@ (80024b0 <HAL_TIM_MspPostInit+0x1a0>)
 80023b8:	f004 fb0c 	bl	80069d4 <HAL_GPIO_Init>
}
 80023bc:	e06e      	b.n	800249c <HAL_TIM_MspPostInit+0x18c>
  else if(htim->Instance==TIM3)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a3c      	ldr	r2, [pc, #240]	@ (80024b4 <HAL_TIM_MspPostInit+0x1a4>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d11f      	bne.n	8002408 <HAL_TIM_MspPostInit+0xf8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023c8:	4b37      	ldr	r3, [pc, #220]	@ (80024a8 <HAL_TIM_MspPostInit+0x198>)
 80023ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023ce:	4a36      	ldr	r2, [pc, #216]	@ (80024a8 <HAL_TIM_MspPostInit+0x198>)
 80023d0:	f043 0302 	orr.w	r3, r3, #2
 80023d4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80023d8:	4b33      	ldr	r3, [pc, #204]	@ (80024a8 <HAL_TIM_MspPostInit+0x198>)
 80023da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023de:	f003 0302 	and.w	r3, r3, #2
 80023e2:	613b      	str	r3, [r7, #16]
 80023e4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80023e6:	2303      	movs	r3, #3
 80023e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ea:	2302      	movs	r3, #2
 80023ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ee:	2300      	movs	r3, #0
 80023f0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023f2:	2300      	movs	r3, #0
 80023f4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80023f6:	2302      	movs	r3, #2
 80023f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023fa:	f107 031c 	add.w	r3, r7, #28
 80023fe:	4619      	mov	r1, r3
 8002400:	482d      	ldr	r0, [pc, #180]	@ (80024b8 <HAL_TIM_MspPostInit+0x1a8>)
 8002402:	f004 fae7 	bl	80069d4 <HAL_GPIO_Init>
}
 8002406:	e049      	b.n	800249c <HAL_TIM_MspPostInit+0x18c>
  else if(htim->Instance==TIM4)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a2b      	ldr	r2, [pc, #172]	@ (80024bc <HAL_TIM_MspPostInit+0x1ac>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d120      	bne.n	8002454 <HAL_TIM_MspPostInit+0x144>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002412:	4b25      	ldr	r3, [pc, #148]	@ (80024a8 <HAL_TIM_MspPostInit+0x198>)
 8002414:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002418:	4a23      	ldr	r2, [pc, #140]	@ (80024a8 <HAL_TIM_MspPostInit+0x198>)
 800241a:	f043 0302 	orr.w	r3, r3, #2
 800241e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002422:	4b21      	ldr	r3, [pc, #132]	@ (80024a8 <HAL_TIM_MspPostInit+0x198>)
 8002424:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002428:	f003 0302 	and.w	r3, r3, #2
 800242c:	60fb      	str	r3, [r7, #12]
 800242e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002430:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002434:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002436:	2302      	movs	r3, #2
 8002438:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800243a:	2300      	movs	r3, #0
 800243c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800243e:	2300      	movs	r3, #0
 8002440:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002442:	2302      	movs	r3, #2
 8002444:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002446:	f107 031c 	add.w	r3, r7, #28
 800244a:	4619      	mov	r1, r3
 800244c:	481a      	ldr	r0, [pc, #104]	@ (80024b8 <HAL_TIM_MspPostInit+0x1a8>)
 800244e:	f004 fac1 	bl	80069d4 <HAL_GPIO_Init>
}
 8002452:	e023      	b.n	800249c <HAL_TIM_MspPostInit+0x18c>
  else if(htim->Instance==TIM14)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a19      	ldr	r2, [pc, #100]	@ (80024c0 <HAL_TIM_MspPostInit+0x1b0>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d11e      	bne.n	800249c <HAL_TIM_MspPostInit+0x18c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800245e:	4b12      	ldr	r3, [pc, #72]	@ (80024a8 <HAL_TIM_MspPostInit+0x198>)
 8002460:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002464:	4a10      	ldr	r2, [pc, #64]	@ (80024a8 <HAL_TIM_MspPostInit+0x198>)
 8002466:	f043 0301 	orr.w	r3, r3, #1
 800246a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800246e:	4b0e      	ldr	r3, [pc, #56]	@ (80024a8 <HAL_TIM_MspPostInit+0x198>)
 8002470:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002474:	f003 0301 	and.w	r3, r3, #1
 8002478:	60bb      	str	r3, [r7, #8]
 800247a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800247c:	2380      	movs	r3, #128	@ 0x80
 800247e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002480:	2302      	movs	r3, #2
 8002482:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002484:	2300      	movs	r3, #0
 8002486:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002488:	2300      	movs	r3, #0
 800248a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 800248c:	2309      	movs	r3, #9
 800248e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002490:	f107 031c 	add.w	r3, r7, #28
 8002494:	4619      	mov	r1, r3
 8002496:	4806      	ldr	r0, [pc, #24]	@ (80024b0 <HAL_TIM_MspPostInit+0x1a0>)
 8002498:	f004 fa9c 	bl	80069d4 <HAL_GPIO_Init>
}
 800249c:	bf00      	nop
 800249e:	3730      	adds	r7, #48	@ 0x30
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	40010000 	.word	0x40010000
 80024a8:	58024400 	.word	0x58024400
 80024ac:	58021000 	.word	0x58021000
 80024b0:	58020000 	.word	0x58020000
 80024b4:	40000400 	.word	0x40000400
 80024b8:	58020400 	.word	0x58020400
 80024bc:	40000800 	.word	0x40000800
 80024c0:	40002000 	.word	0x40002000

080024c4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b0ba      	sub	sp, #232	@ 0xe8
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024cc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80024d0:	2200      	movs	r2, #0
 80024d2:	601a      	str	r2, [r3, #0]
 80024d4:	605a      	str	r2, [r3, #4]
 80024d6:	609a      	str	r2, [r3, #8]
 80024d8:	60da      	str	r2, [r3, #12]
 80024da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80024dc:	f107 0310 	add.w	r3, r7, #16
 80024e0:	22c0      	movs	r2, #192	@ 0xc0
 80024e2:	2100      	movs	r1, #0
 80024e4:	4618      	mov	r0, r3
 80024e6:	f014 fcc5 	bl	8016e74 <memset>
  if(huart->Instance==USART1)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a43      	ldr	r2, [pc, #268]	@ (80025fc <HAL_UART_MspInit+0x138>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d17e      	bne.n	80025f2 <HAL_UART_MspInit+0x12e>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80024f4:	f04f 0201 	mov.w	r2, #1
 80024f8:	f04f 0300 	mov.w	r3, #0
 80024fc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8002500:	2300      	movs	r3, #0
 8002502:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002506:	f107 0310 	add.w	r3, r7, #16
 800250a:	4618      	mov	r0, r3
 800250c:	f00b f91c 	bl	800d748 <HAL_RCCEx_PeriphCLKConfig>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d001      	beq.n	800251a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002516:	f7ff fb61 	bl	8001bdc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800251a:	4b39      	ldr	r3, [pc, #228]	@ (8002600 <HAL_UART_MspInit+0x13c>)
 800251c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002520:	4a37      	ldr	r2, [pc, #220]	@ (8002600 <HAL_UART_MspInit+0x13c>)
 8002522:	f043 0310 	orr.w	r3, r3, #16
 8002526:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800252a:	4b35      	ldr	r3, [pc, #212]	@ (8002600 <HAL_UART_MspInit+0x13c>)
 800252c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002530:	f003 0310 	and.w	r3, r3, #16
 8002534:	60fb      	str	r3, [r7, #12]
 8002536:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002538:	4b31      	ldr	r3, [pc, #196]	@ (8002600 <HAL_UART_MspInit+0x13c>)
 800253a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800253e:	4a30      	ldr	r2, [pc, #192]	@ (8002600 <HAL_UART_MspInit+0x13c>)
 8002540:	f043 0302 	orr.w	r3, r3, #2
 8002544:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002548:	4b2d      	ldr	r3, [pc, #180]	@ (8002600 <HAL_UART_MspInit+0x13c>)
 800254a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800254e:	f003 0302 	and.w	r3, r3, #2
 8002552:	60bb      	str	r3, [r7, #8]
 8002554:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002556:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800255a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800255e:	2302      	movs	r3, #2
 8002560:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002564:	2300      	movs	r3, #0
 8002566:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800256a:	2300      	movs	r3, #0
 800256c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8002570:	2304      	movs	r3, #4
 8002572:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002576:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800257a:	4619      	mov	r1, r3
 800257c:	4821      	ldr	r0, [pc, #132]	@ (8002604 <HAL_UART_MspInit+0x140>)
 800257e:	f004 fa29 	bl	80069d4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream0;
 8002582:	4b21      	ldr	r3, [pc, #132]	@ (8002608 <HAL_UART_MspInit+0x144>)
 8002584:	4a21      	ldr	r2, [pc, #132]	@ (800260c <HAL_UART_MspInit+0x148>)
 8002586:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8002588:	4b1f      	ldr	r3, [pc, #124]	@ (8002608 <HAL_UART_MspInit+0x144>)
 800258a:	2229      	movs	r2, #41	@ 0x29
 800258c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800258e:	4b1e      	ldr	r3, [pc, #120]	@ (8002608 <HAL_UART_MspInit+0x144>)
 8002590:	2200      	movs	r2, #0
 8002592:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002594:	4b1c      	ldr	r3, [pc, #112]	@ (8002608 <HAL_UART_MspInit+0x144>)
 8002596:	2200      	movs	r2, #0
 8002598:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800259a:	4b1b      	ldr	r3, [pc, #108]	@ (8002608 <HAL_UART_MspInit+0x144>)
 800259c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80025a0:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80025a2:	4b19      	ldr	r3, [pc, #100]	@ (8002608 <HAL_UART_MspInit+0x144>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80025a8:	4b17      	ldr	r3, [pc, #92]	@ (8002608 <HAL_UART_MspInit+0x144>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80025ae:	4b16      	ldr	r3, [pc, #88]	@ (8002608 <HAL_UART_MspInit+0x144>)
 80025b0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80025b4:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80025b6:	4b14      	ldr	r3, [pc, #80]	@ (8002608 <HAL_UART_MspInit+0x144>)
 80025b8:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80025bc:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80025be:	4b12      	ldr	r3, [pc, #72]	@ (8002608 <HAL_UART_MspInit+0x144>)
 80025c0:	2200      	movs	r2, #0
 80025c2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80025c4:	4810      	ldr	r0, [pc, #64]	@ (8002608 <HAL_UART_MspInit+0x144>)
 80025c6:	f000 ff0b 	bl	80033e0 <HAL_DMA_Init>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d001      	beq.n	80025d4 <HAL_UART_MspInit+0x110>
    {
      Error_Handler();
 80025d0:	f7ff fb04 	bl	8001bdc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	4a0c      	ldr	r2, [pc, #48]	@ (8002608 <HAL_UART_MspInit+0x144>)
 80025d8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80025dc:	4a0a      	ldr	r2, [pc, #40]	@ (8002608 <HAL_UART_MspInit+0x144>)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80025e2:	2200      	movs	r2, #0
 80025e4:	2100      	movs	r1, #0
 80025e6:	2025      	movs	r0, #37	@ 0x25
 80025e8:	f000 fb61 	bl	8002cae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80025ec:	2025      	movs	r0, #37	@ 0x25
 80025ee:	f000 fb78 	bl	8002ce2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 80025f2:	bf00      	nop
 80025f4:	37e8      	adds	r7, #232	@ 0xe8
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	40011000 	.word	0x40011000
 8002600:	58024400 	.word	0x58024400
 8002604:	58020400 	.word	0x58020400
 8002608:	24000668 	.word	0x24000668
 800260c:	40020410 	.word	0x40020410

08002610 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002610:	b480      	push	{r7}
 8002612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002614:	bf00      	nop
 8002616:	e7fd      	b.n	8002614 <NMI_Handler+0x4>

08002618 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002618:	b480      	push	{r7}
 800261a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800261c:	bf00      	nop
 800261e:	e7fd      	b.n	800261c <HardFault_Handler+0x4>

08002620 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002620:	b480      	push	{r7}
 8002622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002624:	bf00      	nop
 8002626:	e7fd      	b.n	8002624 <MemManage_Handler+0x4>

08002628 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002628:	b480      	push	{r7}
 800262a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800262c:	bf00      	nop
 800262e:	e7fd      	b.n	800262c <BusFault_Handler+0x4>

08002630 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002630:	b480      	push	{r7}
 8002632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002634:	bf00      	nop
 8002636:	e7fd      	b.n	8002634 <UsageFault_Handler+0x4>

08002638 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002638:	b480      	push	{r7}
 800263a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800263c:	bf00      	nop
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr

08002646 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002646:	b480      	push	{r7}
 8002648:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800264a:	bf00      	nop
 800264c:	46bd      	mov	sp, r7
 800264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002652:	4770      	bx	lr

08002654 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002654:	b480      	push	{r7}
 8002656:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002658:	bf00      	nop
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr

08002662 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002662:	b580      	push	{r7, lr}
 8002664:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002666:	f000 f9f7 	bl	8002a58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800266a:	bf00      	nop
 800266c:	bd80      	pop	{r7, pc}
	...

08002670 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 8002674:	4802      	ldr	r0, [pc, #8]	@ (8002680 <DMA1_Stream0_IRQHandler+0x10>)
 8002676:	f002 f9dd 	bl	8004a34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800267a:	bf00      	nop
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	240001d4 	.word	0x240001d4

08002684 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8002688:	4802      	ldr	r0, [pc, #8]	@ (8002694 <I2C2_EV_IRQHandler+0x10>)
 800268a:	f004 fe17 	bl	80072bc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 800268e:	bf00      	nop
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	2400024c 	.word	0x2400024c

08002698 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 800269c:	4802      	ldr	r0, [pc, #8]	@ (80026a8 <I2C2_ER_IRQHandler+0x10>)
 800269e:	f004 fe27 	bl	80072f0 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 80026a2:	bf00      	nop
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	2400024c 	.word	0x2400024c

080026ac <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80026b0:	4802      	ldr	r0, [pc, #8]	@ (80026bc <USART1_IRQHandler+0x10>)
 80026b2:	f00e f9af 	bl	8010a14 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80026b6:	bf00      	nop
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	240005d4 	.word	0x240005d4

080026c0 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80026c4:	4802      	ldr	r0, [pc, #8]	@ (80026d0 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 80026c6:	f00d f967 	bl	800f998 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 80026ca:	bf00      	nop
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	24000588 	.word	0x24000588

080026d4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80026d8:	4802      	ldr	r0, [pc, #8]	@ (80026e4 <DMA2_Stream0_IRQHandler+0x10>)
 80026da:	f002 f9ab 	bl	8004a34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80026de:	bf00      	nop
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	24000668 	.word	0x24000668

080026e8 <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 80026ec:	4802      	ldr	r0, [pc, #8]	@ (80026f8 <DCMI_IRQHandler+0x10>)
 80026ee:	f000 fd27 	bl	8003140 <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  /* USER CODE END DCMI_IRQn 1 */
}
 80026f2:	bf00      	nop
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	24000184 	.word	0x24000184

080026fc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002700:	4802      	ldr	r0, [pc, #8]	@ (800270c <OTG_FS_IRQHandler+0x10>)
 8002702:	f008 fe92 	bl	800b42a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002706:	bf00      	nop
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	2402703c 	.word	0x2402703c

08002710 <JPEG_IRQHandler>:

/**
  * @brief This function handles JPEG global interrupt.
  */
void JPEG_IRQHandler(void)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN JPEG_IRQn 0 */

  /* USER CODE END JPEG_IRQn 0 */
  HAL_JPEG_IRQHandler(&hjpeg);
 8002714:	4802      	ldr	r0, [pc, #8]	@ (8002720 <JPEG_IRQHandler+0x10>)
 8002716:	f006 fbae 	bl	8008e76 <HAL_JPEG_IRQHandler>
  /* USER CODE BEGIN JPEG_IRQn 1 */

  /* USER CODE END JPEG_IRQn 1 */
}
 800271a:	bf00      	nop
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	240002a0 	.word	0x240002a0

08002724 <MDMA_IRQHandler>:

/**
  * @brief This function handles MDMA global interrupt.
  */
void MDMA_IRQHandler(void)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MDMA_IRQn 0 */

  /* USER CODE END MDMA_IRQn 0 */
  HAL_MDMA_IRQHandler(&hmdma_jpeg_infifo_th);
 8002728:	4803      	ldr	r0, [pc, #12]	@ (8002738 <MDMA_IRQHandler+0x14>)
 800272a:	f008 fae1 	bl	800acf0 <HAL_MDMA_IRQHandler>
  HAL_MDMA_IRQHandler(&hmdma_jpeg_outfifo_ne);
 800272e:	4803      	ldr	r0, [pc, #12]	@ (800273c <MDMA_IRQHandler+0x18>)
 8002730:	f008 fade 	bl	800acf0 <HAL_MDMA_IRQHandler>
  /* USER CODE BEGIN MDMA_IRQn 1 */

  /* USER CODE END MDMA_IRQn 1 */
}
 8002734:	bf00      	nop
 8002736:	bd80      	pop	{r7, pc}
 8002738:	240002f8 	.word	0x240002f8
 800273c:	24000364 	.word	0x24000364

08002740 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b086      	sub	sp, #24
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002748:	4a14      	ldr	r2, [pc, #80]	@ (800279c <_sbrk+0x5c>)
 800274a:	4b15      	ldr	r3, [pc, #84]	@ (80027a0 <_sbrk+0x60>)
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002754:	4b13      	ldr	r3, [pc, #76]	@ (80027a4 <_sbrk+0x64>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d102      	bne.n	8002762 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800275c:	4b11      	ldr	r3, [pc, #68]	@ (80027a4 <_sbrk+0x64>)
 800275e:	4a12      	ldr	r2, [pc, #72]	@ (80027a8 <_sbrk+0x68>)
 8002760:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002762:	4b10      	ldr	r3, [pc, #64]	@ (80027a4 <_sbrk+0x64>)
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	4413      	add	r3, r2
 800276a:	693a      	ldr	r2, [r7, #16]
 800276c:	429a      	cmp	r2, r3
 800276e:	d207      	bcs.n	8002780 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002770:	f014 fb98 	bl	8016ea4 <__errno>
 8002774:	4603      	mov	r3, r0
 8002776:	220c      	movs	r2, #12
 8002778:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800277a:	f04f 33ff 	mov.w	r3, #4294967295
 800277e:	e009      	b.n	8002794 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002780:	4b08      	ldr	r3, [pc, #32]	@ (80027a4 <_sbrk+0x64>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002786:	4b07      	ldr	r3, [pc, #28]	@ (80027a4 <_sbrk+0x64>)
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4413      	add	r3, r2
 800278e:	4a05      	ldr	r2, [pc, #20]	@ (80027a4 <_sbrk+0x64>)
 8002790:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002792:	68fb      	ldr	r3, [r7, #12]
}
 8002794:	4618      	mov	r0, r3
 8002796:	3718      	adds	r7, #24
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}
 800279c:	24080000 	.word	0x24080000
 80027a0:	00000400 	.word	0x00000400
 80027a4:	24025b50 	.word	0x24025b50
 80027a8:	24027888 	.word	0x24027888

080027ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80027ac:	b480      	push	{r7}
 80027ae:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80027b0:	4b43      	ldr	r3, [pc, #268]	@ (80028c0 <SystemInit+0x114>)
 80027b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027b6:	4a42      	ldr	r2, [pc, #264]	@ (80028c0 <SystemInit+0x114>)
 80027b8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80027bc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80027c0:	4b40      	ldr	r3, [pc, #256]	@ (80028c4 <SystemInit+0x118>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 030f 	and.w	r3, r3, #15
 80027c8:	2b06      	cmp	r3, #6
 80027ca:	d807      	bhi.n	80027dc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80027cc:	4b3d      	ldr	r3, [pc, #244]	@ (80028c4 <SystemInit+0x118>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f023 030f 	bic.w	r3, r3, #15
 80027d4:	4a3b      	ldr	r2, [pc, #236]	@ (80028c4 <SystemInit+0x118>)
 80027d6:	f043 0307 	orr.w	r3, r3, #7
 80027da:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80027dc:	4b3a      	ldr	r3, [pc, #232]	@ (80028c8 <SystemInit+0x11c>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a39      	ldr	r2, [pc, #228]	@ (80028c8 <SystemInit+0x11c>)
 80027e2:	f043 0301 	orr.w	r3, r3, #1
 80027e6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80027e8:	4b37      	ldr	r3, [pc, #220]	@ (80028c8 <SystemInit+0x11c>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80027ee:	4b36      	ldr	r3, [pc, #216]	@ (80028c8 <SystemInit+0x11c>)
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	4935      	ldr	r1, [pc, #212]	@ (80028c8 <SystemInit+0x11c>)
 80027f4:	4b35      	ldr	r3, [pc, #212]	@ (80028cc <SystemInit+0x120>)
 80027f6:	4013      	ands	r3, r2
 80027f8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80027fa:	4b32      	ldr	r3, [pc, #200]	@ (80028c4 <SystemInit+0x118>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0308 	and.w	r3, r3, #8
 8002802:	2b00      	cmp	r3, #0
 8002804:	d007      	beq.n	8002816 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002806:	4b2f      	ldr	r3, [pc, #188]	@ (80028c4 <SystemInit+0x118>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f023 030f 	bic.w	r3, r3, #15
 800280e:	4a2d      	ldr	r2, [pc, #180]	@ (80028c4 <SystemInit+0x118>)
 8002810:	f043 0307 	orr.w	r3, r3, #7
 8002814:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002816:	4b2c      	ldr	r3, [pc, #176]	@ (80028c8 <SystemInit+0x11c>)
 8002818:	2200      	movs	r2, #0
 800281a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800281c:	4b2a      	ldr	r3, [pc, #168]	@ (80028c8 <SystemInit+0x11c>)
 800281e:	2200      	movs	r2, #0
 8002820:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002822:	4b29      	ldr	r3, [pc, #164]	@ (80028c8 <SystemInit+0x11c>)
 8002824:	2200      	movs	r2, #0
 8002826:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002828:	4b27      	ldr	r3, [pc, #156]	@ (80028c8 <SystemInit+0x11c>)
 800282a:	4a29      	ldr	r2, [pc, #164]	@ (80028d0 <SystemInit+0x124>)
 800282c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800282e:	4b26      	ldr	r3, [pc, #152]	@ (80028c8 <SystemInit+0x11c>)
 8002830:	4a28      	ldr	r2, [pc, #160]	@ (80028d4 <SystemInit+0x128>)
 8002832:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002834:	4b24      	ldr	r3, [pc, #144]	@ (80028c8 <SystemInit+0x11c>)
 8002836:	4a28      	ldr	r2, [pc, #160]	@ (80028d8 <SystemInit+0x12c>)
 8002838:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800283a:	4b23      	ldr	r3, [pc, #140]	@ (80028c8 <SystemInit+0x11c>)
 800283c:	2200      	movs	r2, #0
 800283e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002840:	4b21      	ldr	r3, [pc, #132]	@ (80028c8 <SystemInit+0x11c>)
 8002842:	4a25      	ldr	r2, [pc, #148]	@ (80028d8 <SystemInit+0x12c>)
 8002844:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002846:	4b20      	ldr	r3, [pc, #128]	@ (80028c8 <SystemInit+0x11c>)
 8002848:	2200      	movs	r2, #0
 800284a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800284c:	4b1e      	ldr	r3, [pc, #120]	@ (80028c8 <SystemInit+0x11c>)
 800284e:	4a22      	ldr	r2, [pc, #136]	@ (80028d8 <SystemInit+0x12c>)
 8002850:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002852:	4b1d      	ldr	r3, [pc, #116]	@ (80028c8 <SystemInit+0x11c>)
 8002854:	2200      	movs	r2, #0
 8002856:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002858:	4b1b      	ldr	r3, [pc, #108]	@ (80028c8 <SystemInit+0x11c>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a1a      	ldr	r2, [pc, #104]	@ (80028c8 <SystemInit+0x11c>)
 800285e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002862:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002864:	4b18      	ldr	r3, [pc, #96]	@ (80028c8 <SystemInit+0x11c>)
 8002866:	2200      	movs	r2, #0
 8002868:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800286a:	4b1c      	ldr	r3, [pc, #112]	@ (80028dc <SystemInit+0x130>)
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	4b1c      	ldr	r3, [pc, #112]	@ (80028e0 <SystemInit+0x134>)
 8002870:	4013      	ands	r3, r2
 8002872:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002876:	d202      	bcs.n	800287e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002878:	4b1a      	ldr	r3, [pc, #104]	@ (80028e4 <SystemInit+0x138>)
 800287a:	2201      	movs	r2, #1
 800287c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 800287e:	4b12      	ldr	r3, [pc, #72]	@ (80028c8 <SystemInit+0x11c>)
 8002880:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002884:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002888:	2b00      	cmp	r3, #0
 800288a:	d113      	bne.n	80028b4 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 800288c:	4b0e      	ldr	r3, [pc, #56]	@ (80028c8 <SystemInit+0x11c>)
 800288e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002892:	4a0d      	ldr	r2, [pc, #52]	@ (80028c8 <SystemInit+0x11c>)
 8002894:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002898:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800289c:	4b12      	ldr	r3, [pc, #72]	@ (80028e8 <SystemInit+0x13c>)
 800289e:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80028a2:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80028a4:	4b08      	ldr	r3, [pc, #32]	@ (80028c8 <SystemInit+0x11c>)
 80028a6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80028aa:	4a07      	ldr	r2, [pc, #28]	@ (80028c8 <SystemInit+0x11c>)
 80028ac:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80028b0:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80028b4:	bf00      	nop
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr
 80028be:	bf00      	nop
 80028c0:	e000ed00 	.word	0xe000ed00
 80028c4:	52002000 	.word	0x52002000
 80028c8:	58024400 	.word	0x58024400
 80028cc:	eaf6ed7f 	.word	0xeaf6ed7f
 80028d0:	02020200 	.word	0x02020200
 80028d4:	01ff0000 	.word	0x01ff0000
 80028d8:	01010280 	.word	0x01010280
 80028dc:	5c001000 	.word	0x5c001000
 80028e0:	ffff0000 	.word	0xffff0000
 80028e4:	51008108 	.word	0x51008108
 80028e8:	52004000 	.word	0x52004000

080028ec <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 80028ec:	b480      	push	{r7}
 80028ee:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 80028f0:	4b09      	ldr	r3, [pc, #36]	@ (8002918 <ExitRun0Mode+0x2c>)
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	4a08      	ldr	r2, [pc, #32]	@ (8002918 <ExitRun0Mode+0x2c>)
 80028f6:	f043 0302 	orr.w	r3, r3, #2
 80028fa:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 80028fc:	bf00      	nop
 80028fe:	4b06      	ldr	r3, [pc, #24]	@ (8002918 <ExitRun0Mode+0x2c>)
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002906:	2b00      	cmp	r3, #0
 8002908:	d0f9      	beq.n	80028fe <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 800290a:	bf00      	nop
 800290c:	bf00      	nop
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr
 8002916:	bf00      	nop
 8002918:	58024800 	.word	0x58024800

0800291c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800291c:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8002958 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8002920:	f7ff ffe4 	bl	80028ec <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002924:	f7ff ff42 	bl	80027ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002928:	480c      	ldr	r0, [pc, #48]	@ (800295c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800292a:	490d      	ldr	r1, [pc, #52]	@ (8002960 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800292c:	4a0d      	ldr	r2, [pc, #52]	@ (8002964 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800292e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002930:	e002      	b.n	8002938 <LoopCopyDataInit>

08002932 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002932:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002934:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002936:	3304      	adds	r3, #4

08002938 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002938:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800293a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800293c:	d3f9      	bcc.n	8002932 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800293e:	4a0a      	ldr	r2, [pc, #40]	@ (8002968 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002940:	4c0a      	ldr	r4, [pc, #40]	@ (800296c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002942:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002944:	e001      	b.n	800294a <LoopFillZerobss>

08002946 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002946:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002948:	3204      	adds	r2, #4

0800294a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800294a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800294c:	d3fb      	bcc.n	8002946 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800294e:	f014 faaf 	bl	8016eb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002952:	f7fd fec9 	bl	80006e8 <main>
  bx  lr
 8002956:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002958:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800295c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002960:	24000168 	.word	0x24000168
  ldr r2, =_sidata
 8002964:	08017aec 	.word	0x08017aec
  ldr r2, =_sbss
 8002968:	24000168 	.word	0x24000168
  ldr r4, =_ebss
 800296c:	24027888 	.word	0x24027888

08002970 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002970:	e7fe      	b.n	8002970 <ADC3_IRQHandler>
	...

08002974 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b082      	sub	sp, #8
 8002978:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800297a:	2003      	movs	r0, #3
 800297c:	f000 f98c 	bl	8002c98 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002980:	f00a fd0c 	bl	800d39c <HAL_RCC_GetSysClockFreq>
 8002984:	4602      	mov	r2, r0
 8002986:	4b15      	ldr	r3, [pc, #84]	@ (80029dc <HAL_Init+0x68>)
 8002988:	699b      	ldr	r3, [r3, #24]
 800298a:	0a1b      	lsrs	r3, r3, #8
 800298c:	f003 030f 	and.w	r3, r3, #15
 8002990:	4913      	ldr	r1, [pc, #76]	@ (80029e0 <HAL_Init+0x6c>)
 8002992:	5ccb      	ldrb	r3, [r1, r3]
 8002994:	f003 031f 	and.w	r3, r3, #31
 8002998:	fa22 f303 	lsr.w	r3, r2, r3
 800299c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800299e:	4b0f      	ldr	r3, [pc, #60]	@ (80029dc <HAL_Init+0x68>)
 80029a0:	699b      	ldr	r3, [r3, #24]
 80029a2:	f003 030f 	and.w	r3, r3, #15
 80029a6:	4a0e      	ldr	r2, [pc, #56]	@ (80029e0 <HAL_Init+0x6c>)
 80029a8:	5cd3      	ldrb	r3, [r2, r3]
 80029aa:	f003 031f 	and.w	r3, r3, #31
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	fa22 f303 	lsr.w	r3, r2, r3
 80029b4:	4a0b      	ldr	r2, [pc, #44]	@ (80029e4 <HAL_Init+0x70>)
 80029b6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80029b8:	4a0b      	ldr	r2, [pc, #44]	@ (80029e8 <HAL_Init+0x74>)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80029be:	200f      	movs	r0, #15
 80029c0:	f000 f814 	bl	80029ec <HAL_InitTick>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d001      	beq.n	80029ce <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e002      	b.n	80029d4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80029ce:	f7ff f90b 	bl	8001be8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029d2:	2300      	movs	r3, #0
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3708      	adds	r7, #8
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	58024400 	.word	0x58024400
 80029e0:	08017808 	.word	0x08017808
 80029e4:	24000018 	.word	0x24000018
 80029e8:	24000014 	.word	0x24000014

080029ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b082      	sub	sp, #8
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80029f4:	4b15      	ldr	r3, [pc, #84]	@ (8002a4c <HAL_InitTick+0x60>)
 80029f6:	781b      	ldrb	r3, [r3, #0]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d101      	bne.n	8002a00 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	e021      	b.n	8002a44 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002a00:	4b13      	ldr	r3, [pc, #76]	@ (8002a50 <HAL_InitTick+0x64>)
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	4b11      	ldr	r3, [pc, #68]	@ (8002a4c <HAL_InitTick+0x60>)
 8002a06:	781b      	ldrb	r3, [r3, #0]
 8002a08:	4619      	mov	r1, r3
 8002a0a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002a0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a12:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a16:	4618      	mov	r0, r3
 8002a18:	f000 f971 	bl	8002cfe <HAL_SYSTICK_Config>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d001      	beq.n	8002a26 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e00e      	b.n	8002a44 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2b0f      	cmp	r3, #15
 8002a2a:	d80a      	bhi.n	8002a42 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	6879      	ldr	r1, [r7, #4]
 8002a30:	f04f 30ff 	mov.w	r0, #4294967295
 8002a34:	f000 f93b 	bl	8002cae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a38:	4a06      	ldr	r2, [pc, #24]	@ (8002a54 <HAL_InitTick+0x68>)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	e000      	b.n	8002a44 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	3708      	adds	r7, #8
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}
 8002a4c:	24000020 	.word	0x24000020
 8002a50:	24000014 	.word	0x24000014
 8002a54:	2400001c 	.word	0x2400001c

08002a58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002a5c:	4b06      	ldr	r3, [pc, #24]	@ (8002a78 <HAL_IncTick+0x20>)
 8002a5e:	781b      	ldrb	r3, [r3, #0]
 8002a60:	461a      	mov	r2, r3
 8002a62:	4b06      	ldr	r3, [pc, #24]	@ (8002a7c <HAL_IncTick+0x24>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4413      	add	r3, r2
 8002a68:	4a04      	ldr	r2, [pc, #16]	@ (8002a7c <HAL_IncTick+0x24>)
 8002a6a:	6013      	str	r3, [r2, #0]
}
 8002a6c:	bf00      	nop
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr
 8002a76:	bf00      	nop
 8002a78:	24000020 	.word	0x24000020
 8002a7c:	24025b54 	.word	0x24025b54

08002a80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a80:	b480      	push	{r7}
 8002a82:	af00      	add	r7, sp, #0
  return uwTick;
 8002a84:	4b03      	ldr	r3, [pc, #12]	@ (8002a94 <HAL_GetTick+0x14>)
 8002a86:	681b      	ldr	r3, [r3, #0]
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr
 8002a92:	bf00      	nop
 8002a94:	24025b54 	.word	0x24025b54

08002a98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b084      	sub	sp, #16
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002aa0:	f7ff ffee 	bl	8002a80 <HAL_GetTick>
 8002aa4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ab0:	d005      	beq.n	8002abe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ab2:	4b0a      	ldr	r3, [pc, #40]	@ (8002adc <HAL_Delay+0x44>)
 8002ab4:	781b      	ldrb	r3, [r3, #0]
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	4413      	add	r3, r2
 8002abc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002abe:	bf00      	nop
 8002ac0:	f7ff ffde 	bl	8002a80 <HAL_GetTick>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	68fa      	ldr	r2, [r7, #12]
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d8f7      	bhi.n	8002ac0 <HAL_Delay+0x28>
  {
  }
}
 8002ad0:	bf00      	nop
 8002ad2:	bf00      	nop
 8002ad4:	3710      	adds	r7, #16
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	24000020 	.word	0x24000020

08002ae0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002ae4:	4b03      	ldr	r3, [pc, #12]	@ (8002af4 <HAL_GetREVID+0x14>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	0c1b      	lsrs	r3, r3, #16
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	46bd      	mov	sp, r7
 8002aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af2:	4770      	bx	lr
 8002af4:	5c001000 	.word	0x5c001000

08002af8 <__NVIC_SetPriorityGrouping>:
{
 8002af8:	b480      	push	{r7}
 8002afa:	b085      	sub	sp, #20
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	f003 0307 	and.w	r3, r3, #7
 8002b06:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b08:	4b0b      	ldr	r3, [pc, #44]	@ (8002b38 <__NVIC_SetPriorityGrouping+0x40>)
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b0e:	68ba      	ldr	r2, [r7, #8]
 8002b10:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002b14:	4013      	ands	r3, r2
 8002b16:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002b20:	4b06      	ldr	r3, [pc, #24]	@ (8002b3c <__NVIC_SetPriorityGrouping+0x44>)
 8002b22:	4313      	orrs	r3, r2
 8002b24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b26:	4a04      	ldr	r2, [pc, #16]	@ (8002b38 <__NVIC_SetPriorityGrouping+0x40>)
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	60d3      	str	r3, [r2, #12]
}
 8002b2c:	bf00      	nop
 8002b2e:	3714      	adds	r7, #20
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr
 8002b38:	e000ed00 	.word	0xe000ed00
 8002b3c:	05fa0000 	.word	0x05fa0000

08002b40 <__NVIC_GetPriorityGrouping>:
{
 8002b40:	b480      	push	{r7}
 8002b42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b44:	4b04      	ldr	r3, [pc, #16]	@ (8002b58 <__NVIC_GetPriorityGrouping+0x18>)
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	0a1b      	lsrs	r3, r3, #8
 8002b4a:	f003 0307 	and.w	r3, r3, #7
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	46bd      	mov	sp, r7
 8002b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b56:	4770      	bx	lr
 8002b58:	e000ed00 	.word	0xe000ed00

08002b5c <__NVIC_EnableIRQ>:
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b083      	sub	sp, #12
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	4603      	mov	r3, r0
 8002b64:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002b66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	db0b      	blt.n	8002b86 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b6e:	88fb      	ldrh	r3, [r7, #6]
 8002b70:	f003 021f 	and.w	r2, r3, #31
 8002b74:	4907      	ldr	r1, [pc, #28]	@ (8002b94 <__NVIC_EnableIRQ+0x38>)
 8002b76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b7a:	095b      	lsrs	r3, r3, #5
 8002b7c:	2001      	movs	r0, #1
 8002b7e:	fa00 f202 	lsl.w	r2, r0, r2
 8002b82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002b86:	bf00      	nop
 8002b88:	370c      	adds	r7, #12
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr
 8002b92:	bf00      	nop
 8002b94:	e000e100 	.word	0xe000e100

08002b98 <__NVIC_SetPriority>:
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b083      	sub	sp, #12
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	6039      	str	r1, [r7, #0]
 8002ba2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002ba4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	db0a      	blt.n	8002bc2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	b2da      	uxtb	r2, r3
 8002bb0:	490c      	ldr	r1, [pc, #48]	@ (8002be4 <__NVIC_SetPriority+0x4c>)
 8002bb2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002bb6:	0112      	lsls	r2, r2, #4
 8002bb8:	b2d2      	uxtb	r2, r2
 8002bba:	440b      	add	r3, r1
 8002bbc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002bc0:	e00a      	b.n	8002bd8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	b2da      	uxtb	r2, r3
 8002bc6:	4908      	ldr	r1, [pc, #32]	@ (8002be8 <__NVIC_SetPriority+0x50>)
 8002bc8:	88fb      	ldrh	r3, [r7, #6]
 8002bca:	f003 030f 	and.w	r3, r3, #15
 8002bce:	3b04      	subs	r3, #4
 8002bd0:	0112      	lsls	r2, r2, #4
 8002bd2:	b2d2      	uxtb	r2, r2
 8002bd4:	440b      	add	r3, r1
 8002bd6:	761a      	strb	r2, [r3, #24]
}
 8002bd8:	bf00      	nop
 8002bda:	370c      	adds	r7, #12
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be2:	4770      	bx	lr
 8002be4:	e000e100 	.word	0xe000e100
 8002be8:	e000ed00 	.word	0xe000ed00

08002bec <NVIC_EncodePriority>:
{
 8002bec:	b480      	push	{r7}
 8002bee:	b089      	sub	sp, #36	@ 0x24
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	60f8      	str	r0, [r7, #12]
 8002bf4:	60b9      	str	r1, [r7, #8]
 8002bf6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	f003 0307 	and.w	r3, r3, #7
 8002bfe:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c00:	69fb      	ldr	r3, [r7, #28]
 8002c02:	f1c3 0307 	rsb	r3, r3, #7
 8002c06:	2b04      	cmp	r3, #4
 8002c08:	bf28      	it	cs
 8002c0a:	2304      	movcs	r3, #4
 8002c0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	3304      	adds	r3, #4
 8002c12:	2b06      	cmp	r3, #6
 8002c14:	d902      	bls.n	8002c1c <NVIC_EncodePriority+0x30>
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	3b03      	subs	r3, #3
 8002c1a:	e000      	b.n	8002c1e <NVIC_EncodePriority+0x32>
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c20:	f04f 32ff 	mov.w	r2, #4294967295
 8002c24:	69bb      	ldr	r3, [r7, #24]
 8002c26:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2a:	43da      	mvns	r2, r3
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	401a      	ands	r2, r3
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c34:	f04f 31ff 	mov.w	r1, #4294967295
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c3e:	43d9      	mvns	r1, r3
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c44:	4313      	orrs	r3, r2
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3724      	adds	r7, #36	@ 0x24
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr
	...

08002c54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b082      	sub	sp, #8
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	3b01      	subs	r3, #1
 8002c60:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c64:	d301      	bcc.n	8002c6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c66:	2301      	movs	r3, #1
 8002c68:	e00f      	b.n	8002c8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c6a:	4a0a      	ldr	r2, [pc, #40]	@ (8002c94 <SysTick_Config+0x40>)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	3b01      	subs	r3, #1
 8002c70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c72:	210f      	movs	r1, #15
 8002c74:	f04f 30ff 	mov.w	r0, #4294967295
 8002c78:	f7ff ff8e 	bl	8002b98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c7c:	4b05      	ldr	r3, [pc, #20]	@ (8002c94 <SysTick_Config+0x40>)
 8002c7e:	2200      	movs	r2, #0
 8002c80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c82:	4b04      	ldr	r3, [pc, #16]	@ (8002c94 <SysTick_Config+0x40>)
 8002c84:	2207      	movs	r2, #7
 8002c86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c88:	2300      	movs	r3, #0
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3708      	adds	r7, #8
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	bf00      	nop
 8002c94:	e000e010 	.word	0xe000e010

08002c98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b082      	sub	sp, #8
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ca0:	6878      	ldr	r0, [r7, #4]
 8002ca2:	f7ff ff29 	bl	8002af8 <__NVIC_SetPriorityGrouping>
}
 8002ca6:	bf00      	nop
 8002ca8:	3708      	adds	r7, #8
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}

08002cae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cae:	b580      	push	{r7, lr}
 8002cb0:	b086      	sub	sp, #24
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	60b9      	str	r1, [r7, #8]
 8002cb8:	607a      	str	r2, [r7, #4]
 8002cba:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002cbc:	f7ff ff40 	bl	8002b40 <__NVIC_GetPriorityGrouping>
 8002cc0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	68b9      	ldr	r1, [r7, #8]
 8002cc6:	6978      	ldr	r0, [r7, #20]
 8002cc8:	f7ff ff90 	bl	8002bec <NVIC_EncodePriority>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002cd2:	4611      	mov	r1, r2
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f7ff ff5f 	bl	8002b98 <__NVIC_SetPriority>
}
 8002cda:	bf00      	nop
 8002cdc:	3718      	adds	r7, #24
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}

08002ce2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ce2:	b580      	push	{r7, lr}
 8002ce4:	b082      	sub	sp, #8
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	4603      	mov	r3, r0
 8002cea:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002cec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f7ff ff33 	bl	8002b5c <__NVIC_EnableIRQ>
}
 8002cf6:	bf00      	nop
 8002cf8:	3708      	adds	r7, #8
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}

08002cfe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cfe:	b580      	push	{r7, lr}
 8002d00:	b082      	sub	sp, #8
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	f7ff ffa4 	bl	8002c54 <SysTick_Config>
 8002d0c:	4603      	mov	r3, r0
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3708      	adds	r7, #8
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}
	...

08002d18 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002d1c:	f3bf 8f5f 	dmb	sy
}
 8002d20:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002d22:	4b07      	ldr	r3, [pc, #28]	@ (8002d40 <HAL_MPU_Disable+0x28>)
 8002d24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d26:	4a06      	ldr	r2, [pc, #24]	@ (8002d40 <HAL_MPU_Disable+0x28>)
 8002d28:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d2c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002d2e:	4b05      	ldr	r3, [pc, #20]	@ (8002d44 <HAL_MPU_Disable+0x2c>)
 8002d30:	2200      	movs	r2, #0
 8002d32:	605a      	str	r2, [r3, #4]
}
 8002d34:	bf00      	nop
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr
 8002d3e:	bf00      	nop
 8002d40:	e000ed00 	.word	0xe000ed00
 8002d44:	e000ed90 	.word	0xe000ed90

08002d48 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b083      	sub	sp, #12
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002d50:	4a0b      	ldr	r2, [pc, #44]	@ (8002d80 <HAL_MPU_Enable+0x38>)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	f043 0301 	orr.w	r3, r3, #1
 8002d58:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002d5a:	4b0a      	ldr	r3, [pc, #40]	@ (8002d84 <HAL_MPU_Enable+0x3c>)
 8002d5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d5e:	4a09      	ldr	r2, [pc, #36]	@ (8002d84 <HAL_MPU_Enable+0x3c>)
 8002d60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d64:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002d66:	f3bf 8f4f 	dsb	sy
}
 8002d6a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002d6c:	f3bf 8f6f 	isb	sy
}
 8002d70:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002d72:	bf00      	nop
 8002d74:	370c      	adds	r7, #12
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr
 8002d7e:	bf00      	nop
 8002d80:	e000ed90 	.word	0xe000ed90
 8002d84:	e000ed00 	.word	0xe000ed00

08002d88 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b083      	sub	sp, #12
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	785a      	ldrb	r2, [r3, #1]
 8002d94:	4b1b      	ldr	r3, [pc, #108]	@ (8002e04 <HAL_MPU_ConfigRegion+0x7c>)
 8002d96:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8002d98:	4b1a      	ldr	r3, [pc, #104]	@ (8002e04 <HAL_MPU_ConfigRegion+0x7c>)
 8002d9a:	691b      	ldr	r3, [r3, #16]
 8002d9c:	4a19      	ldr	r2, [pc, #100]	@ (8002e04 <HAL_MPU_ConfigRegion+0x7c>)
 8002d9e:	f023 0301 	bic.w	r3, r3, #1
 8002da2:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8002da4:	4a17      	ldr	r2, [pc, #92]	@ (8002e04 <HAL_MPU_ConfigRegion+0x7c>)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	7b1b      	ldrb	r3, [r3, #12]
 8002db0:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	7adb      	ldrb	r3, [r3, #11]
 8002db6:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002db8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	7a9b      	ldrb	r3, [r3, #10]
 8002dbe:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002dc0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	7b5b      	ldrb	r3, [r3, #13]
 8002dc6:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002dc8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	7b9b      	ldrb	r3, [r3, #14]
 8002dce:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002dd0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	7bdb      	ldrb	r3, [r3, #15]
 8002dd6:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002dd8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	7a5b      	ldrb	r3, [r3, #9]
 8002dde:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002de0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	7a1b      	ldrb	r3, [r3, #8]
 8002de6:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002de8:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002dea:	687a      	ldr	r2, [r7, #4]
 8002dec:	7812      	ldrb	r2, [r2, #0]
 8002dee:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002df0:	4a04      	ldr	r2, [pc, #16]	@ (8002e04 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002df2:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002df4:	6113      	str	r3, [r2, #16]
}
 8002df6:	bf00      	nop
 8002df8:	370c      	adds	r7, #12
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr
 8002e02:	bf00      	nop
 8002e04:	e000ed90 	.word	0xe000ed90

08002e08 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d101      	bne.n	8002e1a <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e069      	b.n	8002eee <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d102      	bne.n	8002e2c <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f7fe fef8 	bl	8001c1c <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2202      	movs	r2, #2
 8002e30:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	699b      	ldr	r3, [r3, #24]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d002      	beq.n	8002e42 <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	625a      	str	r2, [r3, #36]	@ 0x24
  }
  /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	6819      	ldr	r1, [r3, #0]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	4b2a      	ldr	r3, [pc, #168]	@ (8002ef8 <HAL_DCMI_Init+0xf0>)
 8002e4e:	400b      	ands	r3, r1
 8002e50:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	6819      	ldr	r1, [r3, #0]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	685a      	ldr	r2, [r3, #4]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	695b      	ldr	r3, [r3, #20]
 8002e60:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8002e66:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	691b      	ldr	r3, [r3, #16]
 8002e6c:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8002e72:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	699b      	ldr	r3, [r3, #24]
 8002e78:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8002e7e:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e84:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8002e8a:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e90:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8002e96:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	430a      	orrs	r2, r1
 8002e9e:	601a      	str	r2, [r3, #0]

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	2b10      	cmp	r3, #16
 8002ea6:	d112      	bne.n	8002ece <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	7f1b      	ldrb	r3, [r3, #28]
 8002eac:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	7f5b      	ldrb	r3, [r3, #29]
 8002eb2:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8002eb4:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	7f9b      	ldrb	r3, [r3, #30]
 8002eba:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8002ebc:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	7fdb      	ldrb	r3, [r3, #31]
 8002ec4:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8002eca:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8002ecc:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	68da      	ldr	r2, [r3, #12]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f042 021e 	orr.w	r2, r2, #30
 8002edc:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002eec:	2300      	movs	r3, #0
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3708      	adds	r7, #8
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	ffe0f007 	.word	0xffe0f007

08002efc <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef *hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b088      	sub	sp, #32
 8002f00:	af02      	add	r7, sp, #8
 8002f02:	60f8      	str	r0, [r7, #12]
 8002f04:	60b9      	str	r1, [r7, #8]
 8002f06:	607a      	str	r2, [r7, #4]
 8002f08:	603b      	str	r3, [r7, #0]

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d101      	bne.n	8002f18 <HAL_DCMI_Start_DMA+0x1c>
 8002f14:	2302      	movs	r3, #2
 8002f16:	e0ab      	b.n	8003070 <HAL_DCMI_Start_DMA+0x174>
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2202      	movs	r2, #2
 8002f24:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002f36:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f022 0202 	bic.w	r2, r2, #2
 8002f46:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |= (uint32_t)(DCMI_Mode);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	6819      	ldr	r1, [r3, #0]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	68ba      	ldr	r2, [r7, #8]
 8002f54:	430a      	orrs	r2, r1
 8002f56:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f5c:	4a46      	ldr	r2, [pc, #280]	@ (8003078 <HAL_DCMI_Start_DMA+0x17c>)
 8002f5e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f64:	4a45      	ldr	r2, [pc, #276]	@ (800307c <HAL_DCMI_Start_DMA+0x180>)
 8002f66:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Reset transfer counters value */
  hdcmi->XferCount = 0;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2200      	movs	r2, #0
 8002f74:	639a      	str	r2, [r3, #56]	@ 0x38
  hdcmi->XferTransferNumber = 0;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	641a      	str	r2, [r3, #64]	@ 0x40
  hdcmi->XferSize = 0;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdcmi->pBuffPtr = 0;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2200      	movs	r2, #0
 8002f86:	645a      	str	r2, [r3, #68]	@ 0x44

  if (Length <= 0xFFFFU)
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f8e:	d219      	bcs.n	8002fc4 <HAL_DCMI_Start_DMA+0xc8>
  {
    /* Enable the DMA Stream */
    if (HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length) != HAL_OK)
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	3328      	adds	r3, #40	@ 0x28
 8002f9a:	4619      	mov	r1, r3
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	687a      	ldr	r2, [r7, #4]
 8002fa0:	f000 fd7a 	bl	8003a98 <HAL_DMA_Start_IT>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d055      	beq.n	8003056 <HAL_DCMI_Start_DMA+0x15a>
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2240      	movs	r2, #64	@ 0x40
 8002fae:	64da      	str	r2, [r3, #76]	@ 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      /* Return function status */
      return HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e055      	b.n	8003070 <HAL_DCMI_Start_DMA+0x174>
    }
  }
  else /* DCMI_DOUBLE_BUFFER Mode */
  {
    /* Set the DMA memory1 conversion complete callback */
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002fc8:	4a2b      	ldr	r2, [pc, #172]	@ (8003078 <HAL_DCMI_Start_DMA+0x17c>)
 8002fca:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	639a      	str	r2, [r3, #56]	@ 0x38
    hdcmi->XferSize = Length;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	683a      	ldr	r2, [r7, #0]
 8002fd6:	63da      	str	r2, [r3, #60]	@ 0x3c
    hdcmi->pBuffPtr = pData;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Get the number of buffer */
    while (hdcmi->XferSize > 0xFFFFU)
 8002fde:	e009      	b.n	8002ff4 <HAL_DCMI_Start_DMA+0xf8>
    {
      hdcmi->XferSize = (hdcmi->XferSize / 2U);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fe4:	085a      	lsrs	r2, r3, #1
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	63da      	str	r2, [r3, #60]	@ 0x3c
      hdcmi->XferCount = hdcmi->XferCount * 2U;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fee:	005a      	lsls	r2, r3, #1
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	639a      	str	r2, [r3, #56]	@ 0x38
    while (hdcmi->XferSize > 0xFFFFU)
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ff8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ffc:	d2f0      	bcs.n	8002fe0 <HAL_DCMI_Start_DMA+0xe4>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003002:	1e9a      	subs	r2, r3, #2
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	639a      	str	r2, [r3, #56]	@ 0x38
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Update second memory address */
    SecondMemAddress = (uint32_t)(pData + (4U * hdcmi->XferSize));
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	687a      	ldr	r2, [r7, #4]
 8003018:	4413      	add	r3, r2
 800301a:	617b      	str	r3, [r7, #20]

    /* Start DMA multi buffer transfer */
    if (HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize) != HAL_OK)
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	3328      	adds	r3, #40	@ 0x28
 8003026:	4619      	mov	r1, r3
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800302c:	9300      	str	r3, [sp, #0]
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	687a      	ldr	r2, [r7, #4]
 8003032:	f003 f81f 	bl	8006074 <HAL_DMAEx_MultiBufferStart_IT>
 8003036:	4603      	mov	r3, r0
 8003038:	2b00      	cmp	r3, #0
 800303a:	d00c      	beq.n	8003056 <HAL_DCMI_Start_DMA+0x15a>
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2240      	movs	r2, #64	@ 0x40
 8003040:	64da      	str	r2, [r3, #76]	@ 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2201      	movs	r2, #1
 8003046:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2200      	movs	r2, #0
 800304e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      /* Return function status */
      return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e00c      	b.n	8003070 <HAL_DCMI_Start_DMA+0x174>
    }
  }

  /* Enable Capture */
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f042 0201 	orr.w	r2, r2, #1
 8003064:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2200      	movs	r2, #0
 800306a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Return function status */
  return HAL_OK;
 800306e:	2300      	movs	r3, #0
}
 8003070:	4618      	mov	r0, r3
 8003072:	3718      	adds	r7, #24
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}
 8003078:	08003281 	.word	0x08003281
 800307c:	080033a7 	.word	0x080033a7

08003080 <HAL_DCMI_Stop>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Stop(DCMI_HandleTypeDef *hdcmi)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b084      	sub	sp, #16
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 8003088:	4b2b      	ldr	r3, [pc, #172]	@ (8003138 <HAL_DCMI_Stop+0xb8>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a2b      	ldr	r2, [pc, #172]	@ (800313c <HAL_DCMI_Stop+0xbc>)
 800308e:	fba2 2303 	umull	r2, r3, r2, r3
 8003092:	0a5b      	lsrs	r3, r3, #9
 8003094:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003098:	fb02 f303 	mul.w	r3, r2, r3
 800309c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800309e:	2300      	movs	r3, #0
 80030a0:	72fb      	strb	r3, [r7, #11]

  /* Process locked */
  __HAL_LOCK(hdcmi);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d101      	bne.n	80030b0 <HAL_DCMI_Stop+0x30>
 80030ac:	2302      	movs	r3, #2
 80030ae:	e03f      	b.n	8003130 <HAL_DCMI_Stop+0xb0>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2201      	movs	r2, #1
 80030b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2202      	movs	r2, #2
 80030bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Disable Capture */
  hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f022 0201 	bic.w	r2, r2, #1
 80030ce:	601a      	str	r2, [r3, #0]

  /* Check if the DCMI capture effectively disabled */
  do
  {
    count-- ;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	3b01      	subs	r3, #1
 80030d4:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d108      	bne.n	80030ee <HAL_DCMI_Stop+0x6e>
    {
      /* Update error code */
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030e0:	f043 0220 	orr.w	r2, r3, #32
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	64da      	str	r2, [r3, #76]	@ 0x4c

      status = HAL_TIMEOUT;
 80030e8:	2303      	movs	r3, #3
 80030ea:	72fb      	strb	r3, [r7, #11]
      break;
 80030ec:	e006      	b.n	80030fc <HAL_DCMI_Stop+0x7c>
    }
  }
  while ((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 0301 	and.w	r3, r3, #1
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d1e9      	bne.n	80030d0 <HAL_DCMI_Stop+0x50>

  /* Disable the DCMI */
  __HAL_DCMI_DISABLE(hdcmi);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800310a:	601a      	str	r2, [r3, #0]

  /* Disable the DMA */
  (void)HAL_DMA_Abort(hdcmi->DMA_Handle);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003110:	4618      	mov	r0, r3
 8003112:	f000 ff2b 	bl	8003f6c <HAL_DMA_Abort>

  /* Update error code */
  hdcmi->ErrorCode |= HAL_DCMI_ERROR_NONE;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Change DCMI state */
  hdcmi->State = HAL_DCMI_STATE_READY;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2201      	movs	r2, #1
 8003122:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2200      	movs	r2, #0
 800312a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Return function status */
  return status;
 800312e:	7afb      	ldrb	r3, [r7, #11]
}
 8003130:	4618      	mov	r0, r3
 8003132:	3710      	adds	r7, #16
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}
 8003138:	24000014 	.word	0x24000014
 800313c:	10624dd3 	.word	0x10624dd3

08003140 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b084      	sub	sp, #16
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	691b      	ldr	r3, [r3, #16]
 800314e:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if ((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	f003 0304 	and.w	r3, r3, #4
 8003156:	2b00      	cmp	r3, #0
 8003158:	d016      	beq.n	8003188 <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	2204      	movs	r2, #4
 8003160:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003166:	f043 0202 	orr.w	r2, r3, #2
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2204      	movs	r2, #4
 8003172:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800317a:	4a31      	ldr	r2, [pc, #196]	@ (8003240 <HAL_DCMI_IRQHandler+0x100>)
 800317c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003182:	4618      	mov	r0, r3
 8003184:	f001 fa10 	bl	80045a8 <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if ((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	f003 0302 	and.w	r3, r3, #2
 800318e:	2b00      	cmp	r3, #0
 8003190:	d016      	beq.n	80031c0 <HAL_DCMI_IRQHandler+0x80>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	2202      	movs	r2, #2
 8003198:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800319e:	f043 0201 	orr.w	r2, r3, #1
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2204      	movs	r2, #4
 80031aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031b2:	4a23      	ldr	r2, [pc, #140]	@ (8003240 <HAL_DCMI_IRQHandler+0x100>)
 80031b4:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031ba:	4618      	mov	r0, r3
 80031bc:	f001 f9f4 	bl	80045a8 <HAL_DMA_Abort_IT>
  }
  /* Line Interrupt management ************************************************/
  if ((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	f003 0310 	and.w	r3, r3, #16
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d006      	beq.n	80031d8 <HAL_DCMI_IRQHandler+0x98>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	2210      	movs	r2, #16
 80031d0:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else
    HAL_DCMI_LineEventCallback(hdcmi);
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	f000 f840 	bl	8003258 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* VSYNC interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	f003 0308 	and.w	r3, r3, #8
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d006      	beq.n	80031f0 <HAL_DCMI_IRQHandler+0xb0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	2208      	movs	r2, #8
 80031e8:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else
    HAL_DCMI_VsyncEventCallback(hdcmi);
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f7fe fa1c 	bl	8001628 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* FRAME interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	f003 0301 	and.w	r3, r3, #1
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d01d      	beq.n	8003236 <HAL_DCMI_IRQHandler+0xf6>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f003 0302 	and.w	r3, r3, #2
 8003204:	2b02      	cmp	r3, #2
 8003206:	d107      	bne.n	8003218 <HAL_DCMI_IRQHandler+0xd8>
    {
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	68da      	ldr	r2, [r3, #12]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f022 021e 	bic.w	r2, r2, #30
 8003216:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	68da      	ldr	r2, [r3, #12]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f022 0201 	bic.w	r2, r2, #1
 8003226:	60da      	str	r2, [r3, #12]

    /* Clear the End of Frame flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	2201      	movs	r2, #1
 800322e:	615a      	str	r2, [r3, #20]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else
    HAL_DCMI_FrameEventCallback(hdcmi);
 8003230:	6878      	ldr	r0, [r7, #4]
 8003232:	f000 f81b 	bl	800326c <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
}
 8003236:	bf00      	nop
 8003238:	3710      	adds	r7, #16
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	080033a7 	.word	0x080033a7

08003244 <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8003244:	b480      	push	{r7}
 8003246:	b083      	sub	sp, #12
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 800324c:	bf00      	nop
 800324e:	370c      	adds	r7, #12
 8003250:	46bd      	mov	sp, r7
 8003252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003256:	4770      	bx	lr

08003258 <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8003258:	b480      	push	{r7}
 800325a:	b083      	sub	sp, #12
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 8003260:	bf00      	nop
 8003262:	370c      	adds	r7, #12
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr

0800326c <HAL_DCMI_FrameEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 800326c:	b480      	push	{r7}
 800326e:	b083      	sub	sp, #12
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_FrameEventCallback could be implemented in the user file
   */
}
 8003274:	bf00      	nop
 8003276:	370c      	adds	r7, #12
 8003278:	46bd      	mov	sp, r7
 800327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327e:	4770      	bx	lr

08003280 <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b084      	sub	sp, #16
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  uint32_t tmp ;

  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800328c:	60fb      	str	r3, [r7, #12]

  if (hdcmi->XferCount != 0U)
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003292:	2b00      	cmp	r3, #0
 8003294:	d043      	beq.n	800331e <DCMI_DMAXferCplt+0x9e>
  {
    /* Update memory 0 address location */
    tmp = ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR) & DMA_SxCR_CT);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80032a2:	60bb      	str	r3, [r7, #8]
    if (((hdcmi->XferCount % 2U) == 0U) && (tmp != 0U))
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032a8:	f003 0301 	and.w	r3, r3, #1
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d118      	bne.n	80032e2 <DCMI_DMAXferCplt+0x62>
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d015      	beq.n	80032e2 <DCMI_DMAXferCplt+0x62>
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	68db      	ldr	r3, [r3, #12]
 80032be:	60bb      	str	r3, [r7, #8]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY0);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032c8:	00da      	lsls	r2, r3, #3
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	4413      	add	r3, r2
 80032ce:	2200      	movs	r2, #0
 80032d0:	4619      	mov	r1, r3
 80032d2:	f003 fa2d 	bl	8006730 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032da:	1e5a      	subs	r2, r3, #1
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	639a      	str	r2, [r3, #56]	@ 0x38
 80032e0:	e044      	b.n	800336c <DCMI_DMAXferCplt+0xec>
    }
    /* Update memory 1 address location */
    else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d13c      	bne.n	800336c <DCMI_DMAXferCplt+0xec>
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	691b      	ldr	r3, [r3, #16]
 80032fa:	60bb      	str	r3, [r7, #8]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY1);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003304:	00da      	lsls	r2, r3, #3
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	4413      	add	r3, r2
 800330a:	2201      	movs	r2, #1
 800330c:	4619      	mov	r1, r3
 800330e:	f003 fa0f 	bl	8006730 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003316:	1e5a      	subs	r2, r3, #1
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	639a      	str	r2, [r3, #56]	@ 0x38
 800331c:	e026      	b.n	800336c <DCMI_DMAXferCplt+0xec>
    {
      /* Nothing to do */
    }
  }
  /* Update memory 0 address location */
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) != 0U)
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800332a:	2b00      	cmp	r3, #0
 800332c:	d006      	beq.n	800333c <DCMI_DMAXferCplt+0xbc>
  {
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR = hdcmi->pBuffPtr;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	68fa      	ldr	r2, [r7, #12]
 8003336:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003338:	60da      	str	r2, [r3, #12]
 800333a:	e017      	b.n	800336c <DCMI_DMAXferCplt+0xec>
  }
  /* Update memory 1 address location */
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003348:	2b00      	cmp	r3, #0
 800334a:	d10f      	bne.n	800336c <DCMI_DMAXferCplt+0xec>
  {
    tmp = hdcmi->pBuffPtr;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003350:	60bb      	str	r3, [r7, #8]
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR = (tmp + (4U * hdcmi->XferSize));
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003356:	0099      	lsls	r1, r3, #2
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	68ba      	ldr	r2, [r7, #8]
 8003360:	440a      	add	r2, r1
 8003362:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	639a      	str	r2, [r3, #56]	@ 0x38
  {
    /* Nothing to do */
  }

  /* Check if the frame is transferred */
  if (hdcmi->XferCount == hdcmi->XferTransferNumber)
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003374:	429a      	cmp	r2, r3
 8003376:	d112      	bne.n	800339e <DCMI_DMAXferCplt+0x11e>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	68da      	ldr	r2, [r3, #12]
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f042 0201 	orr.w	r2, r2, #1
 8003386:	60da      	str	r2, [r3, #12]

    /* When snapshot mode, set dcmi state to ready */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 0302 	and.w	r3, r3, #2
 8003392:	2b02      	cmp	r3, #2
 8003394:	d103      	bne.n	800339e <DCMI_DMAXferCplt+0x11e>
    {
      hdcmi->State = HAL_DCMI_STATE_READY;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2201      	movs	r2, #1
 800339a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    }
  }
}
 800339e:	bf00      	nop
 80033a0:	3710      	adds	r7, #16
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}

080033a6 <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 80033a6:	b580      	push	{r7, lr}
 80033a8:	b084      	sub	sp, #16
 80033aa:	af00      	add	r7, sp, #0
 80033ac:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033b2:	60fb      	str	r3, [r7, #12]

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033ba:	2b02      	cmp	r3, #2
 80033bc:	d009      	beq.n	80033d2 <DCMI_DMAError+0x2c>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2201      	movs	r2, #1
 80033c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033ca:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 80033d2:	68f8      	ldr	r0, [r7, #12]
 80033d4:	f7ff ff36 	bl	8003244 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
}
 80033d8:	bf00      	nop
 80033da:	3710      	adds	r7, #16
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}

080033e0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b086      	sub	sp, #24
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80033e8:	f7ff fb4a 	bl	8002a80 <HAL_GetTick>
 80033ec:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d101      	bne.n	80033f8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	e316      	b.n	8003a26 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a66      	ldr	r2, [pc, #408]	@ (8003598 <HAL_DMA_Init+0x1b8>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d04a      	beq.n	8003498 <HAL_DMA_Init+0xb8>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a65      	ldr	r2, [pc, #404]	@ (800359c <HAL_DMA_Init+0x1bc>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d045      	beq.n	8003498 <HAL_DMA_Init+0xb8>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a63      	ldr	r2, [pc, #396]	@ (80035a0 <HAL_DMA_Init+0x1c0>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d040      	beq.n	8003498 <HAL_DMA_Init+0xb8>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a62      	ldr	r2, [pc, #392]	@ (80035a4 <HAL_DMA_Init+0x1c4>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d03b      	beq.n	8003498 <HAL_DMA_Init+0xb8>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a60      	ldr	r2, [pc, #384]	@ (80035a8 <HAL_DMA_Init+0x1c8>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d036      	beq.n	8003498 <HAL_DMA_Init+0xb8>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a5f      	ldr	r2, [pc, #380]	@ (80035ac <HAL_DMA_Init+0x1cc>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d031      	beq.n	8003498 <HAL_DMA_Init+0xb8>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a5d      	ldr	r2, [pc, #372]	@ (80035b0 <HAL_DMA_Init+0x1d0>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d02c      	beq.n	8003498 <HAL_DMA_Init+0xb8>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a5c      	ldr	r2, [pc, #368]	@ (80035b4 <HAL_DMA_Init+0x1d4>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d027      	beq.n	8003498 <HAL_DMA_Init+0xb8>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a5a      	ldr	r2, [pc, #360]	@ (80035b8 <HAL_DMA_Init+0x1d8>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d022      	beq.n	8003498 <HAL_DMA_Init+0xb8>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a59      	ldr	r2, [pc, #356]	@ (80035bc <HAL_DMA_Init+0x1dc>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d01d      	beq.n	8003498 <HAL_DMA_Init+0xb8>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a57      	ldr	r2, [pc, #348]	@ (80035c0 <HAL_DMA_Init+0x1e0>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d018      	beq.n	8003498 <HAL_DMA_Init+0xb8>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a56      	ldr	r2, [pc, #344]	@ (80035c4 <HAL_DMA_Init+0x1e4>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d013      	beq.n	8003498 <HAL_DMA_Init+0xb8>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a54      	ldr	r2, [pc, #336]	@ (80035c8 <HAL_DMA_Init+0x1e8>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d00e      	beq.n	8003498 <HAL_DMA_Init+0xb8>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a53      	ldr	r2, [pc, #332]	@ (80035cc <HAL_DMA_Init+0x1ec>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d009      	beq.n	8003498 <HAL_DMA_Init+0xb8>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a51      	ldr	r2, [pc, #324]	@ (80035d0 <HAL_DMA_Init+0x1f0>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d004      	beq.n	8003498 <HAL_DMA_Init+0xb8>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a50      	ldr	r2, [pc, #320]	@ (80035d4 <HAL_DMA_Init+0x1f4>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d101      	bne.n	800349c <HAL_DMA_Init+0xbc>
 8003498:	2301      	movs	r3, #1
 800349a:	e000      	b.n	800349e <HAL_DMA_Init+0xbe>
 800349c:	2300      	movs	r3, #0
 800349e:	2b00      	cmp	r3, #0
 80034a0:	f000 813b 	beq.w	800371a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2202      	movs	r2, #2
 80034a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2200      	movs	r2, #0
 80034b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a37      	ldr	r2, [pc, #220]	@ (8003598 <HAL_DMA_Init+0x1b8>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d04a      	beq.n	8003554 <HAL_DMA_Init+0x174>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a36      	ldr	r2, [pc, #216]	@ (800359c <HAL_DMA_Init+0x1bc>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d045      	beq.n	8003554 <HAL_DMA_Init+0x174>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a34      	ldr	r2, [pc, #208]	@ (80035a0 <HAL_DMA_Init+0x1c0>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d040      	beq.n	8003554 <HAL_DMA_Init+0x174>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a33      	ldr	r2, [pc, #204]	@ (80035a4 <HAL_DMA_Init+0x1c4>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d03b      	beq.n	8003554 <HAL_DMA_Init+0x174>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a31      	ldr	r2, [pc, #196]	@ (80035a8 <HAL_DMA_Init+0x1c8>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d036      	beq.n	8003554 <HAL_DMA_Init+0x174>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a30      	ldr	r2, [pc, #192]	@ (80035ac <HAL_DMA_Init+0x1cc>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d031      	beq.n	8003554 <HAL_DMA_Init+0x174>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a2e      	ldr	r2, [pc, #184]	@ (80035b0 <HAL_DMA_Init+0x1d0>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d02c      	beq.n	8003554 <HAL_DMA_Init+0x174>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a2d      	ldr	r2, [pc, #180]	@ (80035b4 <HAL_DMA_Init+0x1d4>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d027      	beq.n	8003554 <HAL_DMA_Init+0x174>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a2b      	ldr	r2, [pc, #172]	@ (80035b8 <HAL_DMA_Init+0x1d8>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d022      	beq.n	8003554 <HAL_DMA_Init+0x174>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a2a      	ldr	r2, [pc, #168]	@ (80035bc <HAL_DMA_Init+0x1dc>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d01d      	beq.n	8003554 <HAL_DMA_Init+0x174>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a28      	ldr	r2, [pc, #160]	@ (80035c0 <HAL_DMA_Init+0x1e0>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d018      	beq.n	8003554 <HAL_DMA_Init+0x174>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a27      	ldr	r2, [pc, #156]	@ (80035c4 <HAL_DMA_Init+0x1e4>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d013      	beq.n	8003554 <HAL_DMA_Init+0x174>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a25      	ldr	r2, [pc, #148]	@ (80035c8 <HAL_DMA_Init+0x1e8>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d00e      	beq.n	8003554 <HAL_DMA_Init+0x174>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a24      	ldr	r2, [pc, #144]	@ (80035cc <HAL_DMA_Init+0x1ec>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d009      	beq.n	8003554 <HAL_DMA_Init+0x174>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a22      	ldr	r2, [pc, #136]	@ (80035d0 <HAL_DMA_Init+0x1f0>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d004      	beq.n	8003554 <HAL_DMA_Init+0x174>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a21      	ldr	r2, [pc, #132]	@ (80035d4 <HAL_DMA_Init+0x1f4>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d108      	bne.n	8003566 <HAL_DMA_Init+0x186>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f022 0201 	bic.w	r2, r2, #1
 8003562:	601a      	str	r2, [r3, #0]
 8003564:	e007      	b.n	8003576 <HAL_DMA_Init+0x196>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f022 0201 	bic.w	r2, r2, #1
 8003574:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003576:	e02f      	b.n	80035d8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003578:	f7ff fa82 	bl	8002a80 <HAL_GetTick>
 800357c:	4602      	mov	r2, r0
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	1ad3      	subs	r3, r2, r3
 8003582:	2b05      	cmp	r3, #5
 8003584:	d928      	bls.n	80035d8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2220      	movs	r2, #32
 800358a:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2203      	movs	r2, #3
 8003590:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	e246      	b.n	8003a26 <HAL_DMA_Init+0x646>
 8003598:	40020010 	.word	0x40020010
 800359c:	40020028 	.word	0x40020028
 80035a0:	40020040 	.word	0x40020040
 80035a4:	40020058 	.word	0x40020058
 80035a8:	40020070 	.word	0x40020070
 80035ac:	40020088 	.word	0x40020088
 80035b0:	400200a0 	.word	0x400200a0
 80035b4:	400200b8 	.word	0x400200b8
 80035b8:	40020410 	.word	0x40020410
 80035bc:	40020428 	.word	0x40020428
 80035c0:	40020440 	.word	0x40020440
 80035c4:	40020458 	.word	0x40020458
 80035c8:	40020470 	.word	0x40020470
 80035cc:	40020488 	.word	0x40020488
 80035d0:	400204a0 	.word	0x400204a0
 80035d4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 0301 	and.w	r3, r3, #1
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d1c8      	bne.n	8003578 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80035ee:	697a      	ldr	r2, [r7, #20]
 80035f0:	4b83      	ldr	r3, [pc, #524]	@ (8003800 <HAL_DMA_Init+0x420>)
 80035f2:	4013      	ands	r3, r2
 80035f4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80035fe:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	691b      	ldr	r3, [r3, #16]
 8003604:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800360a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	699b      	ldr	r3, [r3, #24]
 8003610:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003616:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6a1b      	ldr	r3, [r3, #32]
 800361c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800361e:	697a      	ldr	r2, [r7, #20]
 8003620:	4313      	orrs	r3, r2
 8003622:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003628:	2b04      	cmp	r3, #4
 800362a:	d107      	bne.n	800363c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003634:	4313      	orrs	r3, r2
 8003636:	697a      	ldr	r2, [r7, #20]
 8003638:	4313      	orrs	r3, r2
 800363a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800363c:	4b71      	ldr	r3, [pc, #452]	@ (8003804 <HAL_DMA_Init+0x424>)
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	4b71      	ldr	r3, [pc, #452]	@ (8003808 <HAL_DMA_Init+0x428>)
 8003642:	4013      	ands	r3, r2
 8003644:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003648:	d328      	bcc.n	800369c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	2b28      	cmp	r3, #40	@ 0x28
 8003650:	d903      	bls.n	800365a <HAL_DMA_Init+0x27a>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	2b2e      	cmp	r3, #46	@ 0x2e
 8003658:	d917      	bls.n	800368a <HAL_DMA_Init+0x2aa>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	2b3e      	cmp	r3, #62	@ 0x3e
 8003660:	d903      	bls.n	800366a <HAL_DMA_Init+0x28a>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	2b42      	cmp	r3, #66	@ 0x42
 8003668:	d90f      	bls.n	800368a <HAL_DMA_Init+0x2aa>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	2b46      	cmp	r3, #70	@ 0x46
 8003670:	d903      	bls.n	800367a <HAL_DMA_Init+0x29a>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	2b48      	cmp	r3, #72	@ 0x48
 8003678:	d907      	bls.n	800368a <HAL_DMA_Init+0x2aa>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	2b4e      	cmp	r3, #78	@ 0x4e
 8003680:	d905      	bls.n	800368e <HAL_DMA_Init+0x2ae>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	2b52      	cmp	r3, #82	@ 0x52
 8003688:	d801      	bhi.n	800368e <HAL_DMA_Init+0x2ae>
 800368a:	2301      	movs	r3, #1
 800368c:	e000      	b.n	8003690 <HAL_DMA_Init+0x2b0>
 800368e:	2300      	movs	r3, #0
 8003690:	2b00      	cmp	r3, #0
 8003692:	d003      	beq.n	800369c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800369a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	697a      	ldr	r2, [r7, #20]
 80036a2:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	695b      	ldr	r3, [r3, #20]
 80036aa:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	f023 0307 	bic.w	r3, r3, #7
 80036b2:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036b8:	697a      	ldr	r2, [r7, #20]
 80036ba:	4313      	orrs	r3, r2
 80036bc:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036c2:	2b04      	cmp	r3, #4
 80036c4:	d117      	bne.n	80036f6 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036ca:	697a      	ldr	r2, [r7, #20]
 80036cc:	4313      	orrs	r3, r2
 80036ce:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d00e      	beq.n	80036f6 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80036d8:	6878      	ldr	r0, [r7, #4]
 80036da:	f002 fb41 	bl	8005d60 <DMA_CheckFifoParam>
 80036de:	4603      	mov	r3, r0
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d008      	beq.n	80036f6 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2240      	movs	r2, #64	@ 0x40
 80036e8:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2201      	movs	r2, #1
 80036ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	e197      	b.n	8003a26 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	697a      	ldr	r2, [r7, #20]
 80036fc:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f002 fa7c 	bl	8005bfc <DMA_CalcBaseAndBitshift>
 8003704:	4603      	mov	r3, r0
 8003706:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800370c:	f003 031f 	and.w	r3, r3, #31
 8003710:	223f      	movs	r2, #63	@ 0x3f
 8003712:	409a      	lsls	r2, r3
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	609a      	str	r2, [r3, #8]
 8003718:	e0cd      	b.n	80038b6 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a3b      	ldr	r2, [pc, #236]	@ (800380c <HAL_DMA_Init+0x42c>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d022      	beq.n	800376a <HAL_DMA_Init+0x38a>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a39      	ldr	r2, [pc, #228]	@ (8003810 <HAL_DMA_Init+0x430>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d01d      	beq.n	800376a <HAL_DMA_Init+0x38a>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a38      	ldr	r2, [pc, #224]	@ (8003814 <HAL_DMA_Init+0x434>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d018      	beq.n	800376a <HAL_DMA_Init+0x38a>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a36      	ldr	r2, [pc, #216]	@ (8003818 <HAL_DMA_Init+0x438>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d013      	beq.n	800376a <HAL_DMA_Init+0x38a>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a35      	ldr	r2, [pc, #212]	@ (800381c <HAL_DMA_Init+0x43c>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d00e      	beq.n	800376a <HAL_DMA_Init+0x38a>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a33      	ldr	r2, [pc, #204]	@ (8003820 <HAL_DMA_Init+0x440>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d009      	beq.n	800376a <HAL_DMA_Init+0x38a>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a32      	ldr	r2, [pc, #200]	@ (8003824 <HAL_DMA_Init+0x444>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d004      	beq.n	800376a <HAL_DMA_Init+0x38a>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a30      	ldr	r2, [pc, #192]	@ (8003828 <HAL_DMA_Init+0x448>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d101      	bne.n	800376e <HAL_DMA_Init+0x38e>
 800376a:	2301      	movs	r3, #1
 800376c:	e000      	b.n	8003770 <HAL_DMA_Init+0x390>
 800376e:	2300      	movs	r3, #0
 8003770:	2b00      	cmp	r3, #0
 8003772:	f000 8097 	beq.w	80038a4 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a24      	ldr	r2, [pc, #144]	@ (800380c <HAL_DMA_Init+0x42c>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d021      	beq.n	80037c4 <HAL_DMA_Init+0x3e4>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a22      	ldr	r2, [pc, #136]	@ (8003810 <HAL_DMA_Init+0x430>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d01c      	beq.n	80037c4 <HAL_DMA_Init+0x3e4>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a21      	ldr	r2, [pc, #132]	@ (8003814 <HAL_DMA_Init+0x434>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d017      	beq.n	80037c4 <HAL_DMA_Init+0x3e4>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a1f      	ldr	r2, [pc, #124]	@ (8003818 <HAL_DMA_Init+0x438>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d012      	beq.n	80037c4 <HAL_DMA_Init+0x3e4>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a1e      	ldr	r2, [pc, #120]	@ (800381c <HAL_DMA_Init+0x43c>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d00d      	beq.n	80037c4 <HAL_DMA_Init+0x3e4>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a1c      	ldr	r2, [pc, #112]	@ (8003820 <HAL_DMA_Init+0x440>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d008      	beq.n	80037c4 <HAL_DMA_Init+0x3e4>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a1b      	ldr	r2, [pc, #108]	@ (8003824 <HAL_DMA_Init+0x444>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d003      	beq.n	80037c4 <HAL_DMA_Init+0x3e4>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a19      	ldr	r2, [pc, #100]	@ (8003828 <HAL_DMA_Init+0x448>)
 80037c2:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2202      	movs	r2, #2
 80037c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2200      	movs	r2, #0
 80037d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80037dc:	697a      	ldr	r2, [r7, #20]
 80037de:	4b13      	ldr	r3, [pc, #76]	@ (800382c <HAL_DMA_Init+0x44c>)
 80037e0:	4013      	ands	r3, r2
 80037e2:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	2b40      	cmp	r3, #64	@ 0x40
 80037ea:	d021      	beq.n	8003830 <HAL_DMA_Init+0x450>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	2b80      	cmp	r3, #128	@ 0x80
 80037f2:	d102      	bne.n	80037fa <HAL_DMA_Init+0x41a>
 80037f4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80037f8:	e01b      	b.n	8003832 <HAL_DMA_Init+0x452>
 80037fa:	2300      	movs	r3, #0
 80037fc:	e019      	b.n	8003832 <HAL_DMA_Init+0x452>
 80037fe:	bf00      	nop
 8003800:	fe10803f 	.word	0xfe10803f
 8003804:	5c001000 	.word	0x5c001000
 8003808:	ffff0000 	.word	0xffff0000
 800380c:	58025408 	.word	0x58025408
 8003810:	5802541c 	.word	0x5802541c
 8003814:	58025430 	.word	0x58025430
 8003818:	58025444 	.word	0x58025444
 800381c:	58025458 	.word	0x58025458
 8003820:	5802546c 	.word	0x5802546c
 8003824:	58025480 	.word	0x58025480
 8003828:	58025494 	.word	0x58025494
 800382c:	fffe000f 	.word	0xfffe000f
 8003830:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003832:	687a      	ldr	r2, [r7, #4]
 8003834:	68d2      	ldr	r2, [r2, #12]
 8003836:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003838:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	691b      	ldr	r3, [r3, #16]
 800383e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003840:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	695b      	ldr	r3, [r3, #20]
 8003846:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003848:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	699b      	ldr	r3, [r3, #24]
 800384e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003850:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	69db      	ldr	r3, [r3, #28]
 8003856:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003858:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6a1b      	ldr	r3, [r3, #32]
 800385e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003860:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003862:	697a      	ldr	r2, [r7, #20]
 8003864:	4313      	orrs	r3, r2
 8003866:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	697a      	ldr	r2, [r7, #20]
 800386e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	461a      	mov	r2, r3
 8003876:	4b6e      	ldr	r3, [pc, #440]	@ (8003a30 <HAL_DMA_Init+0x650>)
 8003878:	4413      	add	r3, r2
 800387a:	4a6e      	ldr	r2, [pc, #440]	@ (8003a34 <HAL_DMA_Init+0x654>)
 800387c:	fba2 2303 	umull	r2, r3, r2, r3
 8003880:	091b      	lsrs	r3, r3, #4
 8003882:	009a      	lsls	r2, r3, #2
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	f002 f9b7 	bl	8005bfc <DMA_CalcBaseAndBitshift>
 800388e:	4603      	mov	r3, r0
 8003890:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003896:	f003 031f 	and.w	r3, r3, #31
 800389a:	2201      	movs	r2, #1
 800389c:	409a      	lsls	r2, r3
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	605a      	str	r2, [r3, #4]
 80038a2:	e008      	b.n	80038b6 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2240      	movs	r2, #64	@ 0x40
 80038a8:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2203      	movs	r2, #3
 80038ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e0b7      	b.n	8003a26 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a5f      	ldr	r2, [pc, #380]	@ (8003a38 <HAL_DMA_Init+0x658>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d072      	beq.n	80039a6 <HAL_DMA_Init+0x5c6>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a5d      	ldr	r2, [pc, #372]	@ (8003a3c <HAL_DMA_Init+0x65c>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d06d      	beq.n	80039a6 <HAL_DMA_Init+0x5c6>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a5c      	ldr	r2, [pc, #368]	@ (8003a40 <HAL_DMA_Init+0x660>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d068      	beq.n	80039a6 <HAL_DMA_Init+0x5c6>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a5a      	ldr	r2, [pc, #360]	@ (8003a44 <HAL_DMA_Init+0x664>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d063      	beq.n	80039a6 <HAL_DMA_Init+0x5c6>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a59      	ldr	r2, [pc, #356]	@ (8003a48 <HAL_DMA_Init+0x668>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d05e      	beq.n	80039a6 <HAL_DMA_Init+0x5c6>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a57      	ldr	r2, [pc, #348]	@ (8003a4c <HAL_DMA_Init+0x66c>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d059      	beq.n	80039a6 <HAL_DMA_Init+0x5c6>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a56      	ldr	r2, [pc, #344]	@ (8003a50 <HAL_DMA_Init+0x670>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d054      	beq.n	80039a6 <HAL_DMA_Init+0x5c6>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a54      	ldr	r2, [pc, #336]	@ (8003a54 <HAL_DMA_Init+0x674>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d04f      	beq.n	80039a6 <HAL_DMA_Init+0x5c6>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a53      	ldr	r2, [pc, #332]	@ (8003a58 <HAL_DMA_Init+0x678>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d04a      	beq.n	80039a6 <HAL_DMA_Init+0x5c6>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a51      	ldr	r2, [pc, #324]	@ (8003a5c <HAL_DMA_Init+0x67c>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d045      	beq.n	80039a6 <HAL_DMA_Init+0x5c6>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a50      	ldr	r2, [pc, #320]	@ (8003a60 <HAL_DMA_Init+0x680>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d040      	beq.n	80039a6 <HAL_DMA_Init+0x5c6>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a4e      	ldr	r2, [pc, #312]	@ (8003a64 <HAL_DMA_Init+0x684>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d03b      	beq.n	80039a6 <HAL_DMA_Init+0x5c6>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a4d      	ldr	r2, [pc, #308]	@ (8003a68 <HAL_DMA_Init+0x688>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d036      	beq.n	80039a6 <HAL_DMA_Init+0x5c6>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a4b      	ldr	r2, [pc, #300]	@ (8003a6c <HAL_DMA_Init+0x68c>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d031      	beq.n	80039a6 <HAL_DMA_Init+0x5c6>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a4a      	ldr	r2, [pc, #296]	@ (8003a70 <HAL_DMA_Init+0x690>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d02c      	beq.n	80039a6 <HAL_DMA_Init+0x5c6>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a48      	ldr	r2, [pc, #288]	@ (8003a74 <HAL_DMA_Init+0x694>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d027      	beq.n	80039a6 <HAL_DMA_Init+0x5c6>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a47      	ldr	r2, [pc, #284]	@ (8003a78 <HAL_DMA_Init+0x698>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d022      	beq.n	80039a6 <HAL_DMA_Init+0x5c6>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a45      	ldr	r2, [pc, #276]	@ (8003a7c <HAL_DMA_Init+0x69c>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d01d      	beq.n	80039a6 <HAL_DMA_Init+0x5c6>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a44      	ldr	r2, [pc, #272]	@ (8003a80 <HAL_DMA_Init+0x6a0>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d018      	beq.n	80039a6 <HAL_DMA_Init+0x5c6>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a42      	ldr	r2, [pc, #264]	@ (8003a84 <HAL_DMA_Init+0x6a4>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d013      	beq.n	80039a6 <HAL_DMA_Init+0x5c6>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a41      	ldr	r2, [pc, #260]	@ (8003a88 <HAL_DMA_Init+0x6a8>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d00e      	beq.n	80039a6 <HAL_DMA_Init+0x5c6>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a3f      	ldr	r2, [pc, #252]	@ (8003a8c <HAL_DMA_Init+0x6ac>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d009      	beq.n	80039a6 <HAL_DMA_Init+0x5c6>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a3e      	ldr	r2, [pc, #248]	@ (8003a90 <HAL_DMA_Init+0x6b0>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d004      	beq.n	80039a6 <HAL_DMA_Init+0x5c6>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a3c      	ldr	r2, [pc, #240]	@ (8003a94 <HAL_DMA_Init+0x6b4>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d101      	bne.n	80039aa <HAL_DMA_Init+0x5ca>
 80039a6:	2301      	movs	r3, #1
 80039a8:	e000      	b.n	80039ac <HAL_DMA_Init+0x5cc>
 80039aa:	2300      	movs	r3, #0
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d032      	beq.n	8003a16 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80039b0:	6878      	ldr	r0, [r7, #4]
 80039b2:	f002 fa51 	bl	8005e58 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	2b80      	cmp	r3, #128	@ 0x80
 80039bc:	d102      	bne.n	80039c4 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2200      	movs	r2, #0
 80039c2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	685a      	ldr	r2, [r3, #4]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039cc:	b2d2      	uxtb	r2, r2
 80039ce:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80039d4:	687a      	ldr	r2, [r7, #4]
 80039d6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80039d8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d010      	beq.n	8003a04 <HAL_DMA_Init+0x624>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	2b08      	cmp	r3, #8
 80039e8:	d80c      	bhi.n	8003a04 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f002 face 	bl	8005f8c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80039f4:	2200      	movs	r2, #0
 80039f6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039fc:	687a      	ldr	r2, [r7, #4]
 80039fe:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003a00:	605a      	str	r2, [r3, #4]
 8003a02:	e008      	b.n	8003a16 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2200      	movs	r2, #0
 8003a08:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2200      	movs	r2, #0
 8003a14:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2201      	movs	r2, #1
 8003a20:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003a24:	2300      	movs	r3, #0
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	3718      	adds	r7, #24
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}
 8003a2e:	bf00      	nop
 8003a30:	a7fdabf8 	.word	0xa7fdabf8
 8003a34:	cccccccd 	.word	0xcccccccd
 8003a38:	40020010 	.word	0x40020010
 8003a3c:	40020028 	.word	0x40020028
 8003a40:	40020040 	.word	0x40020040
 8003a44:	40020058 	.word	0x40020058
 8003a48:	40020070 	.word	0x40020070
 8003a4c:	40020088 	.word	0x40020088
 8003a50:	400200a0 	.word	0x400200a0
 8003a54:	400200b8 	.word	0x400200b8
 8003a58:	40020410 	.word	0x40020410
 8003a5c:	40020428 	.word	0x40020428
 8003a60:	40020440 	.word	0x40020440
 8003a64:	40020458 	.word	0x40020458
 8003a68:	40020470 	.word	0x40020470
 8003a6c:	40020488 	.word	0x40020488
 8003a70:	400204a0 	.word	0x400204a0
 8003a74:	400204b8 	.word	0x400204b8
 8003a78:	58025408 	.word	0x58025408
 8003a7c:	5802541c 	.word	0x5802541c
 8003a80:	58025430 	.word	0x58025430
 8003a84:	58025444 	.word	0x58025444
 8003a88:	58025458 	.word	0x58025458
 8003a8c:	5802546c 	.word	0x5802546c
 8003a90:	58025480 	.word	0x58025480
 8003a94:	58025494 	.word	0x58025494

08003a98 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b086      	sub	sp, #24
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	60f8      	str	r0, [r7, #12]
 8003aa0:	60b9      	str	r1, [r7, #8]
 8003aa2:	607a      	str	r2, [r7, #4]
 8003aa4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d101      	bne.n	8003ab4 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	e226      	b.n	8003f02 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d101      	bne.n	8003ac2 <HAL_DMA_Start_IT+0x2a>
 8003abe:	2302      	movs	r3, #2
 8003ac0:	e21f      	b.n	8003f02 <HAL_DMA_Start_IT+0x46a>
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	f040 820a 	bne.w	8003eec <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2202      	movs	r2, #2
 8003adc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a68      	ldr	r2, [pc, #416]	@ (8003c8c <HAL_DMA_Start_IT+0x1f4>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d04a      	beq.n	8003b86 <HAL_DMA_Start_IT+0xee>
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a66      	ldr	r2, [pc, #408]	@ (8003c90 <HAL_DMA_Start_IT+0x1f8>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d045      	beq.n	8003b86 <HAL_DMA_Start_IT+0xee>
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a65      	ldr	r2, [pc, #404]	@ (8003c94 <HAL_DMA_Start_IT+0x1fc>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d040      	beq.n	8003b86 <HAL_DMA_Start_IT+0xee>
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a63      	ldr	r2, [pc, #396]	@ (8003c98 <HAL_DMA_Start_IT+0x200>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d03b      	beq.n	8003b86 <HAL_DMA_Start_IT+0xee>
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a62      	ldr	r2, [pc, #392]	@ (8003c9c <HAL_DMA_Start_IT+0x204>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d036      	beq.n	8003b86 <HAL_DMA_Start_IT+0xee>
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a60      	ldr	r2, [pc, #384]	@ (8003ca0 <HAL_DMA_Start_IT+0x208>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d031      	beq.n	8003b86 <HAL_DMA_Start_IT+0xee>
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a5f      	ldr	r2, [pc, #380]	@ (8003ca4 <HAL_DMA_Start_IT+0x20c>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d02c      	beq.n	8003b86 <HAL_DMA_Start_IT+0xee>
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a5d      	ldr	r2, [pc, #372]	@ (8003ca8 <HAL_DMA_Start_IT+0x210>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d027      	beq.n	8003b86 <HAL_DMA_Start_IT+0xee>
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a5c      	ldr	r2, [pc, #368]	@ (8003cac <HAL_DMA_Start_IT+0x214>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d022      	beq.n	8003b86 <HAL_DMA_Start_IT+0xee>
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a5a      	ldr	r2, [pc, #360]	@ (8003cb0 <HAL_DMA_Start_IT+0x218>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d01d      	beq.n	8003b86 <HAL_DMA_Start_IT+0xee>
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a59      	ldr	r2, [pc, #356]	@ (8003cb4 <HAL_DMA_Start_IT+0x21c>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d018      	beq.n	8003b86 <HAL_DMA_Start_IT+0xee>
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a57      	ldr	r2, [pc, #348]	@ (8003cb8 <HAL_DMA_Start_IT+0x220>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d013      	beq.n	8003b86 <HAL_DMA_Start_IT+0xee>
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a56      	ldr	r2, [pc, #344]	@ (8003cbc <HAL_DMA_Start_IT+0x224>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d00e      	beq.n	8003b86 <HAL_DMA_Start_IT+0xee>
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a54      	ldr	r2, [pc, #336]	@ (8003cc0 <HAL_DMA_Start_IT+0x228>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d009      	beq.n	8003b86 <HAL_DMA_Start_IT+0xee>
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a53      	ldr	r2, [pc, #332]	@ (8003cc4 <HAL_DMA_Start_IT+0x22c>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d004      	beq.n	8003b86 <HAL_DMA_Start_IT+0xee>
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a51      	ldr	r2, [pc, #324]	@ (8003cc8 <HAL_DMA_Start_IT+0x230>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d108      	bne.n	8003b98 <HAL_DMA_Start_IT+0x100>
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	681a      	ldr	r2, [r3, #0]
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f022 0201 	bic.w	r2, r2, #1
 8003b94:	601a      	str	r2, [r3, #0]
 8003b96:	e007      	b.n	8003ba8 <HAL_DMA_Start_IT+0x110>
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	681a      	ldr	r2, [r3, #0]
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f022 0201 	bic.w	r2, r2, #1
 8003ba6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	687a      	ldr	r2, [r7, #4]
 8003bac:	68b9      	ldr	r1, [r7, #8]
 8003bae:	68f8      	ldr	r0, [r7, #12]
 8003bb0:	f001 fe78 	bl	80058a4 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a34      	ldr	r2, [pc, #208]	@ (8003c8c <HAL_DMA_Start_IT+0x1f4>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d04a      	beq.n	8003c54 <HAL_DMA_Start_IT+0x1bc>
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a33      	ldr	r2, [pc, #204]	@ (8003c90 <HAL_DMA_Start_IT+0x1f8>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d045      	beq.n	8003c54 <HAL_DMA_Start_IT+0x1bc>
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a31      	ldr	r2, [pc, #196]	@ (8003c94 <HAL_DMA_Start_IT+0x1fc>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d040      	beq.n	8003c54 <HAL_DMA_Start_IT+0x1bc>
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a30      	ldr	r2, [pc, #192]	@ (8003c98 <HAL_DMA_Start_IT+0x200>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d03b      	beq.n	8003c54 <HAL_DMA_Start_IT+0x1bc>
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a2e      	ldr	r2, [pc, #184]	@ (8003c9c <HAL_DMA_Start_IT+0x204>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d036      	beq.n	8003c54 <HAL_DMA_Start_IT+0x1bc>
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a2d      	ldr	r2, [pc, #180]	@ (8003ca0 <HAL_DMA_Start_IT+0x208>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d031      	beq.n	8003c54 <HAL_DMA_Start_IT+0x1bc>
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a2b      	ldr	r2, [pc, #172]	@ (8003ca4 <HAL_DMA_Start_IT+0x20c>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d02c      	beq.n	8003c54 <HAL_DMA_Start_IT+0x1bc>
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a2a      	ldr	r2, [pc, #168]	@ (8003ca8 <HAL_DMA_Start_IT+0x210>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d027      	beq.n	8003c54 <HAL_DMA_Start_IT+0x1bc>
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a28      	ldr	r2, [pc, #160]	@ (8003cac <HAL_DMA_Start_IT+0x214>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d022      	beq.n	8003c54 <HAL_DMA_Start_IT+0x1bc>
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a27      	ldr	r2, [pc, #156]	@ (8003cb0 <HAL_DMA_Start_IT+0x218>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d01d      	beq.n	8003c54 <HAL_DMA_Start_IT+0x1bc>
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a25      	ldr	r2, [pc, #148]	@ (8003cb4 <HAL_DMA_Start_IT+0x21c>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d018      	beq.n	8003c54 <HAL_DMA_Start_IT+0x1bc>
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a24      	ldr	r2, [pc, #144]	@ (8003cb8 <HAL_DMA_Start_IT+0x220>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d013      	beq.n	8003c54 <HAL_DMA_Start_IT+0x1bc>
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a22      	ldr	r2, [pc, #136]	@ (8003cbc <HAL_DMA_Start_IT+0x224>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d00e      	beq.n	8003c54 <HAL_DMA_Start_IT+0x1bc>
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a21      	ldr	r2, [pc, #132]	@ (8003cc0 <HAL_DMA_Start_IT+0x228>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d009      	beq.n	8003c54 <HAL_DMA_Start_IT+0x1bc>
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a1f      	ldr	r2, [pc, #124]	@ (8003cc4 <HAL_DMA_Start_IT+0x22c>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d004      	beq.n	8003c54 <HAL_DMA_Start_IT+0x1bc>
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a1e      	ldr	r2, [pc, #120]	@ (8003cc8 <HAL_DMA_Start_IT+0x230>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d101      	bne.n	8003c58 <HAL_DMA_Start_IT+0x1c0>
 8003c54:	2301      	movs	r3, #1
 8003c56:	e000      	b.n	8003c5a <HAL_DMA_Start_IT+0x1c2>
 8003c58:	2300      	movs	r3, #0
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d036      	beq.n	8003ccc <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f023 021e 	bic.w	r2, r3, #30
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f042 0216 	orr.w	r2, r2, #22
 8003c70:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d03e      	beq.n	8003cf8 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f042 0208 	orr.w	r2, r2, #8
 8003c88:	601a      	str	r2, [r3, #0]
 8003c8a:	e035      	b.n	8003cf8 <HAL_DMA_Start_IT+0x260>
 8003c8c:	40020010 	.word	0x40020010
 8003c90:	40020028 	.word	0x40020028
 8003c94:	40020040 	.word	0x40020040
 8003c98:	40020058 	.word	0x40020058
 8003c9c:	40020070 	.word	0x40020070
 8003ca0:	40020088 	.word	0x40020088
 8003ca4:	400200a0 	.word	0x400200a0
 8003ca8:	400200b8 	.word	0x400200b8
 8003cac:	40020410 	.word	0x40020410
 8003cb0:	40020428 	.word	0x40020428
 8003cb4:	40020440 	.word	0x40020440
 8003cb8:	40020458 	.word	0x40020458
 8003cbc:	40020470 	.word	0x40020470
 8003cc0:	40020488 	.word	0x40020488
 8003cc4:	400204a0 	.word	0x400204a0
 8003cc8:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f023 020e 	bic.w	r2, r3, #14
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f042 020a 	orr.w	r2, r2, #10
 8003cde:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d007      	beq.n	8003cf8 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f042 0204 	orr.w	r2, r2, #4
 8003cf6:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a83      	ldr	r2, [pc, #524]	@ (8003f0c <HAL_DMA_Start_IT+0x474>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d072      	beq.n	8003de8 <HAL_DMA_Start_IT+0x350>
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a82      	ldr	r2, [pc, #520]	@ (8003f10 <HAL_DMA_Start_IT+0x478>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d06d      	beq.n	8003de8 <HAL_DMA_Start_IT+0x350>
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a80      	ldr	r2, [pc, #512]	@ (8003f14 <HAL_DMA_Start_IT+0x47c>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d068      	beq.n	8003de8 <HAL_DMA_Start_IT+0x350>
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a7f      	ldr	r2, [pc, #508]	@ (8003f18 <HAL_DMA_Start_IT+0x480>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d063      	beq.n	8003de8 <HAL_DMA_Start_IT+0x350>
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a7d      	ldr	r2, [pc, #500]	@ (8003f1c <HAL_DMA_Start_IT+0x484>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d05e      	beq.n	8003de8 <HAL_DMA_Start_IT+0x350>
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a7c      	ldr	r2, [pc, #496]	@ (8003f20 <HAL_DMA_Start_IT+0x488>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d059      	beq.n	8003de8 <HAL_DMA_Start_IT+0x350>
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a7a      	ldr	r2, [pc, #488]	@ (8003f24 <HAL_DMA_Start_IT+0x48c>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d054      	beq.n	8003de8 <HAL_DMA_Start_IT+0x350>
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a79      	ldr	r2, [pc, #484]	@ (8003f28 <HAL_DMA_Start_IT+0x490>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d04f      	beq.n	8003de8 <HAL_DMA_Start_IT+0x350>
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a77      	ldr	r2, [pc, #476]	@ (8003f2c <HAL_DMA_Start_IT+0x494>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d04a      	beq.n	8003de8 <HAL_DMA_Start_IT+0x350>
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a76      	ldr	r2, [pc, #472]	@ (8003f30 <HAL_DMA_Start_IT+0x498>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d045      	beq.n	8003de8 <HAL_DMA_Start_IT+0x350>
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a74      	ldr	r2, [pc, #464]	@ (8003f34 <HAL_DMA_Start_IT+0x49c>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d040      	beq.n	8003de8 <HAL_DMA_Start_IT+0x350>
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a73      	ldr	r2, [pc, #460]	@ (8003f38 <HAL_DMA_Start_IT+0x4a0>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d03b      	beq.n	8003de8 <HAL_DMA_Start_IT+0x350>
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a71      	ldr	r2, [pc, #452]	@ (8003f3c <HAL_DMA_Start_IT+0x4a4>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d036      	beq.n	8003de8 <HAL_DMA_Start_IT+0x350>
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a70      	ldr	r2, [pc, #448]	@ (8003f40 <HAL_DMA_Start_IT+0x4a8>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d031      	beq.n	8003de8 <HAL_DMA_Start_IT+0x350>
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a6e      	ldr	r2, [pc, #440]	@ (8003f44 <HAL_DMA_Start_IT+0x4ac>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d02c      	beq.n	8003de8 <HAL_DMA_Start_IT+0x350>
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a6d      	ldr	r2, [pc, #436]	@ (8003f48 <HAL_DMA_Start_IT+0x4b0>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d027      	beq.n	8003de8 <HAL_DMA_Start_IT+0x350>
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a6b      	ldr	r2, [pc, #428]	@ (8003f4c <HAL_DMA_Start_IT+0x4b4>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d022      	beq.n	8003de8 <HAL_DMA_Start_IT+0x350>
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a6a      	ldr	r2, [pc, #424]	@ (8003f50 <HAL_DMA_Start_IT+0x4b8>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d01d      	beq.n	8003de8 <HAL_DMA_Start_IT+0x350>
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a68      	ldr	r2, [pc, #416]	@ (8003f54 <HAL_DMA_Start_IT+0x4bc>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d018      	beq.n	8003de8 <HAL_DMA_Start_IT+0x350>
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a67      	ldr	r2, [pc, #412]	@ (8003f58 <HAL_DMA_Start_IT+0x4c0>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d013      	beq.n	8003de8 <HAL_DMA_Start_IT+0x350>
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a65      	ldr	r2, [pc, #404]	@ (8003f5c <HAL_DMA_Start_IT+0x4c4>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d00e      	beq.n	8003de8 <HAL_DMA_Start_IT+0x350>
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a64      	ldr	r2, [pc, #400]	@ (8003f60 <HAL_DMA_Start_IT+0x4c8>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d009      	beq.n	8003de8 <HAL_DMA_Start_IT+0x350>
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a62      	ldr	r2, [pc, #392]	@ (8003f64 <HAL_DMA_Start_IT+0x4cc>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d004      	beq.n	8003de8 <HAL_DMA_Start_IT+0x350>
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a61      	ldr	r2, [pc, #388]	@ (8003f68 <HAL_DMA_Start_IT+0x4d0>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d101      	bne.n	8003dec <HAL_DMA_Start_IT+0x354>
 8003de8:	2301      	movs	r3, #1
 8003dea:	e000      	b.n	8003dee <HAL_DMA_Start_IT+0x356>
 8003dec:	2300      	movs	r3, #0
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d01a      	beq.n	8003e28 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d007      	beq.n	8003e10 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e0a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003e0e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d007      	beq.n	8003e28 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e1c:	681a      	ldr	r2, [r3, #0]
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e22:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003e26:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a37      	ldr	r2, [pc, #220]	@ (8003f0c <HAL_DMA_Start_IT+0x474>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d04a      	beq.n	8003ec8 <HAL_DMA_Start_IT+0x430>
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a36      	ldr	r2, [pc, #216]	@ (8003f10 <HAL_DMA_Start_IT+0x478>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d045      	beq.n	8003ec8 <HAL_DMA_Start_IT+0x430>
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a34      	ldr	r2, [pc, #208]	@ (8003f14 <HAL_DMA_Start_IT+0x47c>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d040      	beq.n	8003ec8 <HAL_DMA_Start_IT+0x430>
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a33      	ldr	r2, [pc, #204]	@ (8003f18 <HAL_DMA_Start_IT+0x480>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d03b      	beq.n	8003ec8 <HAL_DMA_Start_IT+0x430>
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a31      	ldr	r2, [pc, #196]	@ (8003f1c <HAL_DMA_Start_IT+0x484>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d036      	beq.n	8003ec8 <HAL_DMA_Start_IT+0x430>
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a30      	ldr	r2, [pc, #192]	@ (8003f20 <HAL_DMA_Start_IT+0x488>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d031      	beq.n	8003ec8 <HAL_DMA_Start_IT+0x430>
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a2e      	ldr	r2, [pc, #184]	@ (8003f24 <HAL_DMA_Start_IT+0x48c>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d02c      	beq.n	8003ec8 <HAL_DMA_Start_IT+0x430>
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a2d      	ldr	r2, [pc, #180]	@ (8003f28 <HAL_DMA_Start_IT+0x490>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d027      	beq.n	8003ec8 <HAL_DMA_Start_IT+0x430>
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a2b      	ldr	r2, [pc, #172]	@ (8003f2c <HAL_DMA_Start_IT+0x494>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d022      	beq.n	8003ec8 <HAL_DMA_Start_IT+0x430>
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a2a      	ldr	r2, [pc, #168]	@ (8003f30 <HAL_DMA_Start_IT+0x498>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d01d      	beq.n	8003ec8 <HAL_DMA_Start_IT+0x430>
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a28      	ldr	r2, [pc, #160]	@ (8003f34 <HAL_DMA_Start_IT+0x49c>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d018      	beq.n	8003ec8 <HAL_DMA_Start_IT+0x430>
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a27      	ldr	r2, [pc, #156]	@ (8003f38 <HAL_DMA_Start_IT+0x4a0>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d013      	beq.n	8003ec8 <HAL_DMA_Start_IT+0x430>
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a25      	ldr	r2, [pc, #148]	@ (8003f3c <HAL_DMA_Start_IT+0x4a4>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d00e      	beq.n	8003ec8 <HAL_DMA_Start_IT+0x430>
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a24      	ldr	r2, [pc, #144]	@ (8003f40 <HAL_DMA_Start_IT+0x4a8>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d009      	beq.n	8003ec8 <HAL_DMA_Start_IT+0x430>
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a22      	ldr	r2, [pc, #136]	@ (8003f44 <HAL_DMA_Start_IT+0x4ac>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d004      	beq.n	8003ec8 <HAL_DMA_Start_IT+0x430>
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a21      	ldr	r2, [pc, #132]	@ (8003f48 <HAL_DMA_Start_IT+0x4b0>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d108      	bne.n	8003eda <HAL_DMA_Start_IT+0x442>
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f042 0201 	orr.w	r2, r2, #1
 8003ed6:	601a      	str	r2, [r3, #0]
 8003ed8:	e012      	b.n	8003f00 <HAL_DMA_Start_IT+0x468>
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	681a      	ldr	r2, [r3, #0]
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f042 0201 	orr.w	r2, r2, #1
 8003ee8:	601a      	str	r2, [r3, #0]
 8003eea:	e009      	b.n	8003f00 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003ef2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003f00:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3718      	adds	r7, #24
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}
 8003f0a:	bf00      	nop
 8003f0c:	40020010 	.word	0x40020010
 8003f10:	40020028 	.word	0x40020028
 8003f14:	40020040 	.word	0x40020040
 8003f18:	40020058 	.word	0x40020058
 8003f1c:	40020070 	.word	0x40020070
 8003f20:	40020088 	.word	0x40020088
 8003f24:	400200a0 	.word	0x400200a0
 8003f28:	400200b8 	.word	0x400200b8
 8003f2c:	40020410 	.word	0x40020410
 8003f30:	40020428 	.word	0x40020428
 8003f34:	40020440 	.word	0x40020440
 8003f38:	40020458 	.word	0x40020458
 8003f3c:	40020470 	.word	0x40020470
 8003f40:	40020488 	.word	0x40020488
 8003f44:	400204a0 	.word	0x400204a0
 8003f48:	400204b8 	.word	0x400204b8
 8003f4c:	58025408 	.word	0x58025408
 8003f50:	5802541c 	.word	0x5802541c
 8003f54:	58025430 	.word	0x58025430
 8003f58:	58025444 	.word	0x58025444
 8003f5c:	58025458 	.word	0x58025458
 8003f60:	5802546c 	.word	0x5802546c
 8003f64:	58025480 	.word	0x58025480
 8003f68:	58025494 	.word	0x58025494

08003f6c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b086      	sub	sp, #24
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8003f74:	f7fe fd84 	bl	8002a80 <HAL_GetTick>
 8003f78:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d101      	bne.n	8003f84 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003f80:	2301      	movs	r3, #1
 8003f82:	e2dc      	b.n	800453e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003f8a:	b2db      	uxtb	r3, r3
 8003f8c:	2b02      	cmp	r3, #2
 8003f8e:	d008      	beq.n	8003fa2 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2280      	movs	r2, #128	@ 0x80
 8003f94:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e2cd      	b.n	800453e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a76      	ldr	r2, [pc, #472]	@ (8004180 <HAL_DMA_Abort+0x214>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d04a      	beq.n	8004042 <HAL_DMA_Abort+0xd6>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a74      	ldr	r2, [pc, #464]	@ (8004184 <HAL_DMA_Abort+0x218>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d045      	beq.n	8004042 <HAL_DMA_Abort+0xd6>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a73      	ldr	r2, [pc, #460]	@ (8004188 <HAL_DMA_Abort+0x21c>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d040      	beq.n	8004042 <HAL_DMA_Abort+0xd6>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a71      	ldr	r2, [pc, #452]	@ (800418c <HAL_DMA_Abort+0x220>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d03b      	beq.n	8004042 <HAL_DMA_Abort+0xd6>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a70      	ldr	r2, [pc, #448]	@ (8004190 <HAL_DMA_Abort+0x224>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d036      	beq.n	8004042 <HAL_DMA_Abort+0xd6>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a6e      	ldr	r2, [pc, #440]	@ (8004194 <HAL_DMA_Abort+0x228>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d031      	beq.n	8004042 <HAL_DMA_Abort+0xd6>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a6d      	ldr	r2, [pc, #436]	@ (8004198 <HAL_DMA_Abort+0x22c>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d02c      	beq.n	8004042 <HAL_DMA_Abort+0xd6>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a6b      	ldr	r2, [pc, #428]	@ (800419c <HAL_DMA_Abort+0x230>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d027      	beq.n	8004042 <HAL_DMA_Abort+0xd6>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a6a      	ldr	r2, [pc, #424]	@ (80041a0 <HAL_DMA_Abort+0x234>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d022      	beq.n	8004042 <HAL_DMA_Abort+0xd6>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a68      	ldr	r2, [pc, #416]	@ (80041a4 <HAL_DMA_Abort+0x238>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d01d      	beq.n	8004042 <HAL_DMA_Abort+0xd6>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a67      	ldr	r2, [pc, #412]	@ (80041a8 <HAL_DMA_Abort+0x23c>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d018      	beq.n	8004042 <HAL_DMA_Abort+0xd6>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a65      	ldr	r2, [pc, #404]	@ (80041ac <HAL_DMA_Abort+0x240>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d013      	beq.n	8004042 <HAL_DMA_Abort+0xd6>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a64      	ldr	r2, [pc, #400]	@ (80041b0 <HAL_DMA_Abort+0x244>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d00e      	beq.n	8004042 <HAL_DMA_Abort+0xd6>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a62      	ldr	r2, [pc, #392]	@ (80041b4 <HAL_DMA_Abort+0x248>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d009      	beq.n	8004042 <HAL_DMA_Abort+0xd6>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a61      	ldr	r2, [pc, #388]	@ (80041b8 <HAL_DMA_Abort+0x24c>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d004      	beq.n	8004042 <HAL_DMA_Abort+0xd6>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a5f      	ldr	r2, [pc, #380]	@ (80041bc <HAL_DMA_Abort+0x250>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d101      	bne.n	8004046 <HAL_DMA_Abort+0xda>
 8004042:	2301      	movs	r3, #1
 8004044:	e000      	b.n	8004048 <HAL_DMA_Abort+0xdc>
 8004046:	2300      	movs	r3, #0
 8004048:	2b00      	cmp	r3, #0
 800404a:	d013      	beq.n	8004074 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f022 021e 	bic.w	r2, r2, #30
 800405a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	695a      	ldr	r2, [r3, #20]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800406a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	617b      	str	r3, [r7, #20]
 8004072:	e00a      	b.n	800408a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	681a      	ldr	r2, [r3, #0]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f022 020e 	bic.w	r2, r2, #14
 8004082:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a3c      	ldr	r2, [pc, #240]	@ (8004180 <HAL_DMA_Abort+0x214>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d072      	beq.n	800417a <HAL_DMA_Abort+0x20e>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a3a      	ldr	r2, [pc, #232]	@ (8004184 <HAL_DMA_Abort+0x218>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d06d      	beq.n	800417a <HAL_DMA_Abort+0x20e>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a39      	ldr	r2, [pc, #228]	@ (8004188 <HAL_DMA_Abort+0x21c>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d068      	beq.n	800417a <HAL_DMA_Abort+0x20e>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a37      	ldr	r2, [pc, #220]	@ (800418c <HAL_DMA_Abort+0x220>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d063      	beq.n	800417a <HAL_DMA_Abort+0x20e>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a36      	ldr	r2, [pc, #216]	@ (8004190 <HAL_DMA_Abort+0x224>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d05e      	beq.n	800417a <HAL_DMA_Abort+0x20e>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a34      	ldr	r2, [pc, #208]	@ (8004194 <HAL_DMA_Abort+0x228>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d059      	beq.n	800417a <HAL_DMA_Abort+0x20e>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a33      	ldr	r2, [pc, #204]	@ (8004198 <HAL_DMA_Abort+0x22c>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d054      	beq.n	800417a <HAL_DMA_Abort+0x20e>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a31      	ldr	r2, [pc, #196]	@ (800419c <HAL_DMA_Abort+0x230>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d04f      	beq.n	800417a <HAL_DMA_Abort+0x20e>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a30      	ldr	r2, [pc, #192]	@ (80041a0 <HAL_DMA_Abort+0x234>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d04a      	beq.n	800417a <HAL_DMA_Abort+0x20e>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a2e      	ldr	r2, [pc, #184]	@ (80041a4 <HAL_DMA_Abort+0x238>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d045      	beq.n	800417a <HAL_DMA_Abort+0x20e>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a2d      	ldr	r2, [pc, #180]	@ (80041a8 <HAL_DMA_Abort+0x23c>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d040      	beq.n	800417a <HAL_DMA_Abort+0x20e>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a2b      	ldr	r2, [pc, #172]	@ (80041ac <HAL_DMA_Abort+0x240>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d03b      	beq.n	800417a <HAL_DMA_Abort+0x20e>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a2a      	ldr	r2, [pc, #168]	@ (80041b0 <HAL_DMA_Abort+0x244>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d036      	beq.n	800417a <HAL_DMA_Abort+0x20e>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a28      	ldr	r2, [pc, #160]	@ (80041b4 <HAL_DMA_Abort+0x248>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d031      	beq.n	800417a <HAL_DMA_Abort+0x20e>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a27      	ldr	r2, [pc, #156]	@ (80041b8 <HAL_DMA_Abort+0x24c>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d02c      	beq.n	800417a <HAL_DMA_Abort+0x20e>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a25      	ldr	r2, [pc, #148]	@ (80041bc <HAL_DMA_Abort+0x250>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d027      	beq.n	800417a <HAL_DMA_Abort+0x20e>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a24      	ldr	r2, [pc, #144]	@ (80041c0 <HAL_DMA_Abort+0x254>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d022      	beq.n	800417a <HAL_DMA_Abort+0x20e>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a22      	ldr	r2, [pc, #136]	@ (80041c4 <HAL_DMA_Abort+0x258>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d01d      	beq.n	800417a <HAL_DMA_Abort+0x20e>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a21      	ldr	r2, [pc, #132]	@ (80041c8 <HAL_DMA_Abort+0x25c>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d018      	beq.n	800417a <HAL_DMA_Abort+0x20e>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a1f      	ldr	r2, [pc, #124]	@ (80041cc <HAL_DMA_Abort+0x260>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d013      	beq.n	800417a <HAL_DMA_Abort+0x20e>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a1e      	ldr	r2, [pc, #120]	@ (80041d0 <HAL_DMA_Abort+0x264>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d00e      	beq.n	800417a <HAL_DMA_Abort+0x20e>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a1c      	ldr	r2, [pc, #112]	@ (80041d4 <HAL_DMA_Abort+0x268>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d009      	beq.n	800417a <HAL_DMA_Abort+0x20e>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a1b      	ldr	r2, [pc, #108]	@ (80041d8 <HAL_DMA_Abort+0x26c>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d004      	beq.n	800417a <HAL_DMA_Abort+0x20e>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a19      	ldr	r2, [pc, #100]	@ (80041dc <HAL_DMA_Abort+0x270>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d132      	bne.n	80041e0 <HAL_DMA_Abort+0x274>
 800417a:	2301      	movs	r3, #1
 800417c:	e031      	b.n	80041e2 <HAL_DMA_Abort+0x276>
 800417e:	bf00      	nop
 8004180:	40020010 	.word	0x40020010
 8004184:	40020028 	.word	0x40020028
 8004188:	40020040 	.word	0x40020040
 800418c:	40020058 	.word	0x40020058
 8004190:	40020070 	.word	0x40020070
 8004194:	40020088 	.word	0x40020088
 8004198:	400200a0 	.word	0x400200a0
 800419c:	400200b8 	.word	0x400200b8
 80041a0:	40020410 	.word	0x40020410
 80041a4:	40020428 	.word	0x40020428
 80041a8:	40020440 	.word	0x40020440
 80041ac:	40020458 	.word	0x40020458
 80041b0:	40020470 	.word	0x40020470
 80041b4:	40020488 	.word	0x40020488
 80041b8:	400204a0 	.word	0x400204a0
 80041bc:	400204b8 	.word	0x400204b8
 80041c0:	58025408 	.word	0x58025408
 80041c4:	5802541c 	.word	0x5802541c
 80041c8:	58025430 	.word	0x58025430
 80041cc:	58025444 	.word	0x58025444
 80041d0:	58025458 	.word	0x58025458
 80041d4:	5802546c 	.word	0x5802546c
 80041d8:	58025480 	.word	0x58025480
 80041dc:	58025494 	.word	0x58025494
 80041e0:	2300      	movs	r3, #0
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d007      	beq.n	80041f6 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041f0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80041f4:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a6d      	ldr	r2, [pc, #436]	@ (80043b0 <HAL_DMA_Abort+0x444>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d04a      	beq.n	8004296 <HAL_DMA_Abort+0x32a>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a6b      	ldr	r2, [pc, #428]	@ (80043b4 <HAL_DMA_Abort+0x448>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d045      	beq.n	8004296 <HAL_DMA_Abort+0x32a>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a6a      	ldr	r2, [pc, #424]	@ (80043b8 <HAL_DMA_Abort+0x44c>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d040      	beq.n	8004296 <HAL_DMA_Abort+0x32a>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a68      	ldr	r2, [pc, #416]	@ (80043bc <HAL_DMA_Abort+0x450>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d03b      	beq.n	8004296 <HAL_DMA_Abort+0x32a>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a67      	ldr	r2, [pc, #412]	@ (80043c0 <HAL_DMA_Abort+0x454>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d036      	beq.n	8004296 <HAL_DMA_Abort+0x32a>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a65      	ldr	r2, [pc, #404]	@ (80043c4 <HAL_DMA_Abort+0x458>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d031      	beq.n	8004296 <HAL_DMA_Abort+0x32a>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a64      	ldr	r2, [pc, #400]	@ (80043c8 <HAL_DMA_Abort+0x45c>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d02c      	beq.n	8004296 <HAL_DMA_Abort+0x32a>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a62      	ldr	r2, [pc, #392]	@ (80043cc <HAL_DMA_Abort+0x460>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d027      	beq.n	8004296 <HAL_DMA_Abort+0x32a>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a61      	ldr	r2, [pc, #388]	@ (80043d0 <HAL_DMA_Abort+0x464>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d022      	beq.n	8004296 <HAL_DMA_Abort+0x32a>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a5f      	ldr	r2, [pc, #380]	@ (80043d4 <HAL_DMA_Abort+0x468>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d01d      	beq.n	8004296 <HAL_DMA_Abort+0x32a>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a5e      	ldr	r2, [pc, #376]	@ (80043d8 <HAL_DMA_Abort+0x46c>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d018      	beq.n	8004296 <HAL_DMA_Abort+0x32a>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a5c      	ldr	r2, [pc, #368]	@ (80043dc <HAL_DMA_Abort+0x470>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d013      	beq.n	8004296 <HAL_DMA_Abort+0x32a>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a5b      	ldr	r2, [pc, #364]	@ (80043e0 <HAL_DMA_Abort+0x474>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d00e      	beq.n	8004296 <HAL_DMA_Abort+0x32a>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a59      	ldr	r2, [pc, #356]	@ (80043e4 <HAL_DMA_Abort+0x478>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d009      	beq.n	8004296 <HAL_DMA_Abort+0x32a>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a58      	ldr	r2, [pc, #352]	@ (80043e8 <HAL_DMA_Abort+0x47c>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d004      	beq.n	8004296 <HAL_DMA_Abort+0x32a>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a56      	ldr	r2, [pc, #344]	@ (80043ec <HAL_DMA_Abort+0x480>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d108      	bne.n	80042a8 <HAL_DMA_Abort+0x33c>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	681a      	ldr	r2, [r3, #0]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f022 0201 	bic.w	r2, r2, #1
 80042a4:	601a      	str	r2, [r3, #0]
 80042a6:	e007      	b.n	80042b8 <HAL_DMA_Abort+0x34c>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f022 0201 	bic.w	r2, r2, #1
 80042b6:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80042b8:	e013      	b.n	80042e2 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80042ba:	f7fe fbe1 	bl	8002a80 <HAL_GetTick>
 80042be:	4602      	mov	r2, r0
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	1ad3      	subs	r3, r2, r3
 80042c4:	2b05      	cmp	r3, #5
 80042c6:	d90c      	bls.n	80042e2 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2220      	movs	r2, #32
 80042cc:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2203      	movs	r2, #3
 80042d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2200      	movs	r2, #0
 80042da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	e12d      	b.n	800453e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f003 0301 	and.w	r3, r3, #1
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d1e5      	bne.n	80042ba <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a2f      	ldr	r2, [pc, #188]	@ (80043b0 <HAL_DMA_Abort+0x444>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d04a      	beq.n	800438e <HAL_DMA_Abort+0x422>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a2d      	ldr	r2, [pc, #180]	@ (80043b4 <HAL_DMA_Abort+0x448>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d045      	beq.n	800438e <HAL_DMA_Abort+0x422>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a2c      	ldr	r2, [pc, #176]	@ (80043b8 <HAL_DMA_Abort+0x44c>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d040      	beq.n	800438e <HAL_DMA_Abort+0x422>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a2a      	ldr	r2, [pc, #168]	@ (80043bc <HAL_DMA_Abort+0x450>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d03b      	beq.n	800438e <HAL_DMA_Abort+0x422>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a29      	ldr	r2, [pc, #164]	@ (80043c0 <HAL_DMA_Abort+0x454>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d036      	beq.n	800438e <HAL_DMA_Abort+0x422>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a27      	ldr	r2, [pc, #156]	@ (80043c4 <HAL_DMA_Abort+0x458>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d031      	beq.n	800438e <HAL_DMA_Abort+0x422>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a26      	ldr	r2, [pc, #152]	@ (80043c8 <HAL_DMA_Abort+0x45c>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d02c      	beq.n	800438e <HAL_DMA_Abort+0x422>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a24      	ldr	r2, [pc, #144]	@ (80043cc <HAL_DMA_Abort+0x460>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d027      	beq.n	800438e <HAL_DMA_Abort+0x422>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a23      	ldr	r2, [pc, #140]	@ (80043d0 <HAL_DMA_Abort+0x464>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d022      	beq.n	800438e <HAL_DMA_Abort+0x422>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a21      	ldr	r2, [pc, #132]	@ (80043d4 <HAL_DMA_Abort+0x468>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d01d      	beq.n	800438e <HAL_DMA_Abort+0x422>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a20      	ldr	r2, [pc, #128]	@ (80043d8 <HAL_DMA_Abort+0x46c>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d018      	beq.n	800438e <HAL_DMA_Abort+0x422>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a1e      	ldr	r2, [pc, #120]	@ (80043dc <HAL_DMA_Abort+0x470>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d013      	beq.n	800438e <HAL_DMA_Abort+0x422>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a1d      	ldr	r2, [pc, #116]	@ (80043e0 <HAL_DMA_Abort+0x474>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d00e      	beq.n	800438e <HAL_DMA_Abort+0x422>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a1b      	ldr	r2, [pc, #108]	@ (80043e4 <HAL_DMA_Abort+0x478>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d009      	beq.n	800438e <HAL_DMA_Abort+0x422>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a1a      	ldr	r2, [pc, #104]	@ (80043e8 <HAL_DMA_Abort+0x47c>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d004      	beq.n	800438e <HAL_DMA_Abort+0x422>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a18      	ldr	r2, [pc, #96]	@ (80043ec <HAL_DMA_Abort+0x480>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d101      	bne.n	8004392 <HAL_DMA_Abort+0x426>
 800438e:	2301      	movs	r3, #1
 8004390:	e000      	b.n	8004394 <HAL_DMA_Abort+0x428>
 8004392:	2300      	movs	r3, #0
 8004394:	2b00      	cmp	r3, #0
 8004396:	d02b      	beq.n	80043f0 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800439c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043a2:	f003 031f 	and.w	r3, r3, #31
 80043a6:	223f      	movs	r2, #63	@ 0x3f
 80043a8:	409a      	lsls	r2, r3
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	609a      	str	r2, [r3, #8]
 80043ae:	e02a      	b.n	8004406 <HAL_DMA_Abort+0x49a>
 80043b0:	40020010 	.word	0x40020010
 80043b4:	40020028 	.word	0x40020028
 80043b8:	40020040 	.word	0x40020040
 80043bc:	40020058 	.word	0x40020058
 80043c0:	40020070 	.word	0x40020070
 80043c4:	40020088 	.word	0x40020088
 80043c8:	400200a0 	.word	0x400200a0
 80043cc:	400200b8 	.word	0x400200b8
 80043d0:	40020410 	.word	0x40020410
 80043d4:	40020428 	.word	0x40020428
 80043d8:	40020440 	.word	0x40020440
 80043dc:	40020458 	.word	0x40020458
 80043e0:	40020470 	.word	0x40020470
 80043e4:	40020488 	.word	0x40020488
 80043e8:	400204a0 	.word	0x400204a0
 80043ec:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043f4:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043fa:	f003 031f 	and.w	r3, r3, #31
 80043fe:	2201      	movs	r2, #1
 8004400:	409a      	lsls	r2, r3
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a4f      	ldr	r2, [pc, #316]	@ (8004548 <HAL_DMA_Abort+0x5dc>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d072      	beq.n	80044f6 <HAL_DMA_Abort+0x58a>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a4d      	ldr	r2, [pc, #308]	@ (800454c <HAL_DMA_Abort+0x5e0>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d06d      	beq.n	80044f6 <HAL_DMA_Abort+0x58a>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a4c      	ldr	r2, [pc, #304]	@ (8004550 <HAL_DMA_Abort+0x5e4>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d068      	beq.n	80044f6 <HAL_DMA_Abort+0x58a>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a4a      	ldr	r2, [pc, #296]	@ (8004554 <HAL_DMA_Abort+0x5e8>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d063      	beq.n	80044f6 <HAL_DMA_Abort+0x58a>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a49      	ldr	r2, [pc, #292]	@ (8004558 <HAL_DMA_Abort+0x5ec>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d05e      	beq.n	80044f6 <HAL_DMA_Abort+0x58a>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a47      	ldr	r2, [pc, #284]	@ (800455c <HAL_DMA_Abort+0x5f0>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d059      	beq.n	80044f6 <HAL_DMA_Abort+0x58a>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a46      	ldr	r2, [pc, #280]	@ (8004560 <HAL_DMA_Abort+0x5f4>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d054      	beq.n	80044f6 <HAL_DMA_Abort+0x58a>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a44      	ldr	r2, [pc, #272]	@ (8004564 <HAL_DMA_Abort+0x5f8>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d04f      	beq.n	80044f6 <HAL_DMA_Abort+0x58a>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a43      	ldr	r2, [pc, #268]	@ (8004568 <HAL_DMA_Abort+0x5fc>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d04a      	beq.n	80044f6 <HAL_DMA_Abort+0x58a>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a41      	ldr	r2, [pc, #260]	@ (800456c <HAL_DMA_Abort+0x600>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d045      	beq.n	80044f6 <HAL_DMA_Abort+0x58a>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a40      	ldr	r2, [pc, #256]	@ (8004570 <HAL_DMA_Abort+0x604>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d040      	beq.n	80044f6 <HAL_DMA_Abort+0x58a>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a3e      	ldr	r2, [pc, #248]	@ (8004574 <HAL_DMA_Abort+0x608>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d03b      	beq.n	80044f6 <HAL_DMA_Abort+0x58a>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a3d      	ldr	r2, [pc, #244]	@ (8004578 <HAL_DMA_Abort+0x60c>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d036      	beq.n	80044f6 <HAL_DMA_Abort+0x58a>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a3b      	ldr	r2, [pc, #236]	@ (800457c <HAL_DMA_Abort+0x610>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d031      	beq.n	80044f6 <HAL_DMA_Abort+0x58a>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a3a      	ldr	r2, [pc, #232]	@ (8004580 <HAL_DMA_Abort+0x614>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d02c      	beq.n	80044f6 <HAL_DMA_Abort+0x58a>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a38      	ldr	r2, [pc, #224]	@ (8004584 <HAL_DMA_Abort+0x618>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d027      	beq.n	80044f6 <HAL_DMA_Abort+0x58a>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a37      	ldr	r2, [pc, #220]	@ (8004588 <HAL_DMA_Abort+0x61c>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d022      	beq.n	80044f6 <HAL_DMA_Abort+0x58a>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a35      	ldr	r2, [pc, #212]	@ (800458c <HAL_DMA_Abort+0x620>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d01d      	beq.n	80044f6 <HAL_DMA_Abort+0x58a>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a34      	ldr	r2, [pc, #208]	@ (8004590 <HAL_DMA_Abort+0x624>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d018      	beq.n	80044f6 <HAL_DMA_Abort+0x58a>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a32      	ldr	r2, [pc, #200]	@ (8004594 <HAL_DMA_Abort+0x628>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d013      	beq.n	80044f6 <HAL_DMA_Abort+0x58a>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a31      	ldr	r2, [pc, #196]	@ (8004598 <HAL_DMA_Abort+0x62c>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d00e      	beq.n	80044f6 <HAL_DMA_Abort+0x58a>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a2f      	ldr	r2, [pc, #188]	@ (800459c <HAL_DMA_Abort+0x630>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d009      	beq.n	80044f6 <HAL_DMA_Abort+0x58a>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a2e      	ldr	r2, [pc, #184]	@ (80045a0 <HAL_DMA_Abort+0x634>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d004      	beq.n	80044f6 <HAL_DMA_Abort+0x58a>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a2c      	ldr	r2, [pc, #176]	@ (80045a4 <HAL_DMA_Abort+0x638>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d101      	bne.n	80044fa <HAL_DMA_Abort+0x58e>
 80044f6:	2301      	movs	r3, #1
 80044f8:	e000      	b.n	80044fc <HAL_DMA_Abort+0x590>
 80044fa:	2300      	movs	r3, #0
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d015      	beq.n	800452c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004504:	687a      	ldr	r2, [r7, #4]
 8004506:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004508:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800450e:	2b00      	cmp	r3, #0
 8004510:	d00c      	beq.n	800452c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004516:	681a      	ldr	r2, [r3, #0]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800451c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004520:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004526:	687a      	ldr	r2, [r7, #4]
 8004528:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800452a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2201      	movs	r2, #1
 8004530:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2200      	movs	r2, #0
 8004538:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 800453c:	2300      	movs	r3, #0
}
 800453e:	4618      	mov	r0, r3
 8004540:	3718      	adds	r7, #24
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}
 8004546:	bf00      	nop
 8004548:	40020010 	.word	0x40020010
 800454c:	40020028 	.word	0x40020028
 8004550:	40020040 	.word	0x40020040
 8004554:	40020058 	.word	0x40020058
 8004558:	40020070 	.word	0x40020070
 800455c:	40020088 	.word	0x40020088
 8004560:	400200a0 	.word	0x400200a0
 8004564:	400200b8 	.word	0x400200b8
 8004568:	40020410 	.word	0x40020410
 800456c:	40020428 	.word	0x40020428
 8004570:	40020440 	.word	0x40020440
 8004574:	40020458 	.word	0x40020458
 8004578:	40020470 	.word	0x40020470
 800457c:	40020488 	.word	0x40020488
 8004580:	400204a0 	.word	0x400204a0
 8004584:	400204b8 	.word	0x400204b8
 8004588:	58025408 	.word	0x58025408
 800458c:	5802541c 	.word	0x5802541c
 8004590:	58025430 	.word	0x58025430
 8004594:	58025444 	.word	0x58025444
 8004598:	58025458 	.word	0x58025458
 800459c:	5802546c 	.word	0x5802546c
 80045a0:	58025480 	.word	0x58025480
 80045a4:	58025494 	.word	0x58025494

080045a8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b084      	sub	sp, #16
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d101      	bne.n	80045ba <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	e237      	b.n	8004a2a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80045c0:	b2db      	uxtb	r3, r3
 80045c2:	2b02      	cmp	r3, #2
 80045c4:	d004      	beq.n	80045d0 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2280      	movs	r2, #128	@ 0x80
 80045ca:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80045cc:	2301      	movs	r3, #1
 80045ce:	e22c      	b.n	8004a2a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a5c      	ldr	r2, [pc, #368]	@ (8004748 <HAL_DMA_Abort_IT+0x1a0>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d04a      	beq.n	8004670 <HAL_DMA_Abort_IT+0xc8>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a5b      	ldr	r2, [pc, #364]	@ (800474c <HAL_DMA_Abort_IT+0x1a4>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d045      	beq.n	8004670 <HAL_DMA_Abort_IT+0xc8>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a59      	ldr	r2, [pc, #356]	@ (8004750 <HAL_DMA_Abort_IT+0x1a8>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d040      	beq.n	8004670 <HAL_DMA_Abort_IT+0xc8>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a58      	ldr	r2, [pc, #352]	@ (8004754 <HAL_DMA_Abort_IT+0x1ac>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d03b      	beq.n	8004670 <HAL_DMA_Abort_IT+0xc8>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a56      	ldr	r2, [pc, #344]	@ (8004758 <HAL_DMA_Abort_IT+0x1b0>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d036      	beq.n	8004670 <HAL_DMA_Abort_IT+0xc8>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a55      	ldr	r2, [pc, #340]	@ (800475c <HAL_DMA_Abort_IT+0x1b4>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d031      	beq.n	8004670 <HAL_DMA_Abort_IT+0xc8>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a53      	ldr	r2, [pc, #332]	@ (8004760 <HAL_DMA_Abort_IT+0x1b8>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d02c      	beq.n	8004670 <HAL_DMA_Abort_IT+0xc8>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a52      	ldr	r2, [pc, #328]	@ (8004764 <HAL_DMA_Abort_IT+0x1bc>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d027      	beq.n	8004670 <HAL_DMA_Abort_IT+0xc8>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a50      	ldr	r2, [pc, #320]	@ (8004768 <HAL_DMA_Abort_IT+0x1c0>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d022      	beq.n	8004670 <HAL_DMA_Abort_IT+0xc8>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a4f      	ldr	r2, [pc, #316]	@ (800476c <HAL_DMA_Abort_IT+0x1c4>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d01d      	beq.n	8004670 <HAL_DMA_Abort_IT+0xc8>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a4d      	ldr	r2, [pc, #308]	@ (8004770 <HAL_DMA_Abort_IT+0x1c8>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d018      	beq.n	8004670 <HAL_DMA_Abort_IT+0xc8>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a4c      	ldr	r2, [pc, #304]	@ (8004774 <HAL_DMA_Abort_IT+0x1cc>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d013      	beq.n	8004670 <HAL_DMA_Abort_IT+0xc8>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a4a      	ldr	r2, [pc, #296]	@ (8004778 <HAL_DMA_Abort_IT+0x1d0>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d00e      	beq.n	8004670 <HAL_DMA_Abort_IT+0xc8>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a49      	ldr	r2, [pc, #292]	@ (800477c <HAL_DMA_Abort_IT+0x1d4>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d009      	beq.n	8004670 <HAL_DMA_Abort_IT+0xc8>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a47      	ldr	r2, [pc, #284]	@ (8004780 <HAL_DMA_Abort_IT+0x1d8>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d004      	beq.n	8004670 <HAL_DMA_Abort_IT+0xc8>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a46      	ldr	r2, [pc, #280]	@ (8004784 <HAL_DMA_Abort_IT+0x1dc>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d101      	bne.n	8004674 <HAL_DMA_Abort_IT+0xcc>
 8004670:	2301      	movs	r3, #1
 8004672:	e000      	b.n	8004676 <HAL_DMA_Abort_IT+0xce>
 8004674:	2300      	movs	r3, #0
 8004676:	2b00      	cmp	r3, #0
 8004678:	f000 8086 	beq.w	8004788 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2204      	movs	r2, #4
 8004680:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a2f      	ldr	r2, [pc, #188]	@ (8004748 <HAL_DMA_Abort_IT+0x1a0>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d04a      	beq.n	8004724 <HAL_DMA_Abort_IT+0x17c>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a2e      	ldr	r2, [pc, #184]	@ (800474c <HAL_DMA_Abort_IT+0x1a4>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d045      	beq.n	8004724 <HAL_DMA_Abort_IT+0x17c>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a2c      	ldr	r2, [pc, #176]	@ (8004750 <HAL_DMA_Abort_IT+0x1a8>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d040      	beq.n	8004724 <HAL_DMA_Abort_IT+0x17c>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a2b      	ldr	r2, [pc, #172]	@ (8004754 <HAL_DMA_Abort_IT+0x1ac>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d03b      	beq.n	8004724 <HAL_DMA_Abort_IT+0x17c>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a29      	ldr	r2, [pc, #164]	@ (8004758 <HAL_DMA_Abort_IT+0x1b0>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d036      	beq.n	8004724 <HAL_DMA_Abort_IT+0x17c>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a28      	ldr	r2, [pc, #160]	@ (800475c <HAL_DMA_Abort_IT+0x1b4>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d031      	beq.n	8004724 <HAL_DMA_Abort_IT+0x17c>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a26      	ldr	r2, [pc, #152]	@ (8004760 <HAL_DMA_Abort_IT+0x1b8>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d02c      	beq.n	8004724 <HAL_DMA_Abort_IT+0x17c>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a25      	ldr	r2, [pc, #148]	@ (8004764 <HAL_DMA_Abort_IT+0x1bc>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d027      	beq.n	8004724 <HAL_DMA_Abort_IT+0x17c>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a23      	ldr	r2, [pc, #140]	@ (8004768 <HAL_DMA_Abort_IT+0x1c0>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d022      	beq.n	8004724 <HAL_DMA_Abort_IT+0x17c>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a22      	ldr	r2, [pc, #136]	@ (800476c <HAL_DMA_Abort_IT+0x1c4>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d01d      	beq.n	8004724 <HAL_DMA_Abort_IT+0x17c>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a20      	ldr	r2, [pc, #128]	@ (8004770 <HAL_DMA_Abort_IT+0x1c8>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d018      	beq.n	8004724 <HAL_DMA_Abort_IT+0x17c>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a1f      	ldr	r2, [pc, #124]	@ (8004774 <HAL_DMA_Abort_IT+0x1cc>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d013      	beq.n	8004724 <HAL_DMA_Abort_IT+0x17c>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a1d      	ldr	r2, [pc, #116]	@ (8004778 <HAL_DMA_Abort_IT+0x1d0>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d00e      	beq.n	8004724 <HAL_DMA_Abort_IT+0x17c>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a1c      	ldr	r2, [pc, #112]	@ (800477c <HAL_DMA_Abort_IT+0x1d4>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d009      	beq.n	8004724 <HAL_DMA_Abort_IT+0x17c>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a1a      	ldr	r2, [pc, #104]	@ (8004780 <HAL_DMA_Abort_IT+0x1d8>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d004      	beq.n	8004724 <HAL_DMA_Abort_IT+0x17c>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a19      	ldr	r2, [pc, #100]	@ (8004784 <HAL_DMA_Abort_IT+0x1dc>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d108      	bne.n	8004736 <HAL_DMA_Abort_IT+0x18e>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	681a      	ldr	r2, [r3, #0]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f022 0201 	bic.w	r2, r2, #1
 8004732:	601a      	str	r2, [r3, #0]
 8004734:	e178      	b.n	8004a28 <HAL_DMA_Abort_IT+0x480>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	681a      	ldr	r2, [r3, #0]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f022 0201 	bic.w	r2, r2, #1
 8004744:	601a      	str	r2, [r3, #0]
 8004746:	e16f      	b.n	8004a28 <HAL_DMA_Abort_IT+0x480>
 8004748:	40020010 	.word	0x40020010
 800474c:	40020028 	.word	0x40020028
 8004750:	40020040 	.word	0x40020040
 8004754:	40020058 	.word	0x40020058
 8004758:	40020070 	.word	0x40020070
 800475c:	40020088 	.word	0x40020088
 8004760:	400200a0 	.word	0x400200a0
 8004764:	400200b8 	.word	0x400200b8
 8004768:	40020410 	.word	0x40020410
 800476c:	40020428 	.word	0x40020428
 8004770:	40020440 	.word	0x40020440
 8004774:	40020458 	.word	0x40020458
 8004778:	40020470 	.word	0x40020470
 800477c:	40020488 	.word	0x40020488
 8004780:	400204a0 	.word	0x400204a0
 8004784:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	681a      	ldr	r2, [r3, #0]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f022 020e 	bic.w	r2, r2, #14
 8004796:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a6c      	ldr	r2, [pc, #432]	@ (8004950 <HAL_DMA_Abort_IT+0x3a8>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d04a      	beq.n	8004838 <HAL_DMA_Abort_IT+0x290>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a6b      	ldr	r2, [pc, #428]	@ (8004954 <HAL_DMA_Abort_IT+0x3ac>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d045      	beq.n	8004838 <HAL_DMA_Abort_IT+0x290>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a69      	ldr	r2, [pc, #420]	@ (8004958 <HAL_DMA_Abort_IT+0x3b0>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d040      	beq.n	8004838 <HAL_DMA_Abort_IT+0x290>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a68      	ldr	r2, [pc, #416]	@ (800495c <HAL_DMA_Abort_IT+0x3b4>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d03b      	beq.n	8004838 <HAL_DMA_Abort_IT+0x290>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a66      	ldr	r2, [pc, #408]	@ (8004960 <HAL_DMA_Abort_IT+0x3b8>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d036      	beq.n	8004838 <HAL_DMA_Abort_IT+0x290>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a65      	ldr	r2, [pc, #404]	@ (8004964 <HAL_DMA_Abort_IT+0x3bc>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d031      	beq.n	8004838 <HAL_DMA_Abort_IT+0x290>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a63      	ldr	r2, [pc, #396]	@ (8004968 <HAL_DMA_Abort_IT+0x3c0>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d02c      	beq.n	8004838 <HAL_DMA_Abort_IT+0x290>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a62      	ldr	r2, [pc, #392]	@ (800496c <HAL_DMA_Abort_IT+0x3c4>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d027      	beq.n	8004838 <HAL_DMA_Abort_IT+0x290>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a60      	ldr	r2, [pc, #384]	@ (8004970 <HAL_DMA_Abort_IT+0x3c8>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d022      	beq.n	8004838 <HAL_DMA_Abort_IT+0x290>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a5f      	ldr	r2, [pc, #380]	@ (8004974 <HAL_DMA_Abort_IT+0x3cc>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d01d      	beq.n	8004838 <HAL_DMA_Abort_IT+0x290>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a5d      	ldr	r2, [pc, #372]	@ (8004978 <HAL_DMA_Abort_IT+0x3d0>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d018      	beq.n	8004838 <HAL_DMA_Abort_IT+0x290>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a5c      	ldr	r2, [pc, #368]	@ (800497c <HAL_DMA_Abort_IT+0x3d4>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d013      	beq.n	8004838 <HAL_DMA_Abort_IT+0x290>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a5a      	ldr	r2, [pc, #360]	@ (8004980 <HAL_DMA_Abort_IT+0x3d8>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d00e      	beq.n	8004838 <HAL_DMA_Abort_IT+0x290>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a59      	ldr	r2, [pc, #356]	@ (8004984 <HAL_DMA_Abort_IT+0x3dc>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d009      	beq.n	8004838 <HAL_DMA_Abort_IT+0x290>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a57      	ldr	r2, [pc, #348]	@ (8004988 <HAL_DMA_Abort_IT+0x3e0>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d004      	beq.n	8004838 <HAL_DMA_Abort_IT+0x290>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a56      	ldr	r2, [pc, #344]	@ (800498c <HAL_DMA_Abort_IT+0x3e4>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d108      	bne.n	800484a <HAL_DMA_Abort_IT+0x2a2>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	681a      	ldr	r2, [r3, #0]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f022 0201 	bic.w	r2, r2, #1
 8004846:	601a      	str	r2, [r3, #0]
 8004848:	e007      	b.n	800485a <HAL_DMA_Abort_IT+0x2b2>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f022 0201 	bic.w	r2, r2, #1
 8004858:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a3c      	ldr	r2, [pc, #240]	@ (8004950 <HAL_DMA_Abort_IT+0x3a8>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d072      	beq.n	800494a <HAL_DMA_Abort_IT+0x3a2>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a3a      	ldr	r2, [pc, #232]	@ (8004954 <HAL_DMA_Abort_IT+0x3ac>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d06d      	beq.n	800494a <HAL_DMA_Abort_IT+0x3a2>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a39      	ldr	r2, [pc, #228]	@ (8004958 <HAL_DMA_Abort_IT+0x3b0>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d068      	beq.n	800494a <HAL_DMA_Abort_IT+0x3a2>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a37      	ldr	r2, [pc, #220]	@ (800495c <HAL_DMA_Abort_IT+0x3b4>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d063      	beq.n	800494a <HAL_DMA_Abort_IT+0x3a2>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a36      	ldr	r2, [pc, #216]	@ (8004960 <HAL_DMA_Abort_IT+0x3b8>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d05e      	beq.n	800494a <HAL_DMA_Abort_IT+0x3a2>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a34      	ldr	r2, [pc, #208]	@ (8004964 <HAL_DMA_Abort_IT+0x3bc>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d059      	beq.n	800494a <HAL_DMA_Abort_IT+0x3a2>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a33      	ldr	r2, [pc, #204]	@ (8004968 <HAL_DMA_Abort_IT+0x3c0>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d054      	beq.n	800494a <HAL_DMA_Abort_IT+0x3a2>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a31      	ldr	r2, [pc, #196]	@ (800496c <HAL_DMA_Abort_IT+0x3c4>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d04f      	beq.n	800494a <HAL_DMA_Abort_IT+0x3a2>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a30      	ldr	r2, [pc, #192]	@ (8004970 <HAL_DMA_Abort_IT+0x3c8>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d04a      	beq.n	800494a <HAL_DMA_Abort_IT+0x3a2>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a2e      	ldr	r2, [pc, #184]	@ (8004974 <HAL_DMA_Abort_IT+0x3cc>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d045      	beq.n	800494a <HAL_DMA_Abort_IT+0x3a2>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a2d      	ldr	r2, [pc, #180]	@ (8004978 <HAL_DMA_Abort_IT+0x3d0>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d040      	beq.n	800494a <HAL_DMA_Abort_IT+0x3a2>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a2b      	ldr	r2, [pc, #172]	@ (800497c <HAL_DMA_Abort_IT+0x3d4>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d03b      	beq.n	800494a <HAL_DMA_Abort_IT+0x3a2>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a2a      	ldr	r2, [pc, #168]	@ (8004980 <HAL_DMA_Abort_IT+0x3d8>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d036      	beq.n	800494a <HAL_DMA_Abort_IT+0x3a2>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a28      	ldr	r2, [pc, #160]	@ (8004984 <HAL_DMA_Abort_IT+0x3dc>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d031      	beq.n	800494a <HAL_DMA_Abort_IT+0x3a2>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a27      	ldr	r2, [pc, #156]	@ (8004988 <HAL_DMA_Abort_IT+0x3e0>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d02c      	beq.n	800494a <HAL_DMA_Abort_IT+0x3a2>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a25      	ldr	r2, [pc, #148]	@ (800498c <HAL_DMA_Abort_IT+0x3e4>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d027      	beq.n	800494a <HAL_DMA_Abort_IT+0x3a2>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a24      	ldr	r2, [pc, #144]	@ (8004990 <HAL_DMA_Abort_IT+0x3e8>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d022      	beq.n	800494a <HAL_DMA_Abort_IT+0x3a2>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a22      	ldr	r2, [pc, #136]	@ (8004994 <HAL_DMA_Abort_IT+0x3ec>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d01d      	beq.n	800494a <HAL_DMA_Abort_IT+0x3a2>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a21      	ldr	r2, [pc, #132]	@ (8004998 <HAL_DMA_Abort_IT+0x3f0>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d018      	beq.n	800494a <HAL_DMA_Abort_IT+0x3a2>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a1f      	ldr	r2, [pc, #124]	@ (800499c <HAL_DMA_Abort_IT+0x3f4>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d013      	beq.n	800494a <HAL_DMA_Abort_IT+0x3a2>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a1e      	ldr	r2, [pc, #120]	@ (80049a0 <HAL_DMA_Abort_IT+0x3f8>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d00e      	beq.n	800494a <HAL_DMA_Abort_IT+0x3a2>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a1c      	ldr	r2, [pc, #112]	@ (80049a4 <HAL_DMA_Abort_IT+0x3fc>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d009      	beq.n	800494a <HAL_DMA_Abort_IT+0x3a2>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a1b      	ldr	r2, [pc, #108]	@ (80049a8 <HAL_DMA_Abort_IT+0x400>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d004      	beq.n	800494a <HAL_DMA_Abort_IT+0x3a2>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a19      	ldr	r2, [pc, #100]	@ (80049ac <HAL_DMA_Abort_IT+0x404>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d132      	bne.n	80049b0 <HAL_DMA_Abort_IT+0x408>
 800494a:	2301      	movs	r3, #1
 800494c:	e031      	b.n	80049b2 <HAL_DMA_Abort_IT+0x40a>
 800494e:	bf00      	nop
 8004950:	40020010 	.word	0x40020010
 8004954:	40020028 	.word	0x40020028
 8004958:	40020040 	.word	0x40020040
 800495c:	40020058 	.word	0x40020058
 8004960:	40020070 	.word	0x40020070
 8004964:	40020088 	.word	0x40020088
 8004968:	400200a0 	.word	0x400200a0
 800496c:	400200b8 	.word	0x400200b8
 8004970:	40020410 	.word	0x40020410
 8004974:	40020428 	.word	0x40020428
 8004978:	40020440 	.word	0x40020440
 800497c:	40020458 	.word	0x40020458
 8004980:	40020470 	.word	0x40020470
 8004984:	40020488 	.word	0x40020488
 8004988:	400204a0 	.word	0x400204a0
 800498c:	400204b8 	.word	0x400204b8
 8004990:	58025408 	.word	0x58025408
 8004994:	5802541c 	.word	0x5802541c
 8004998:	58025430 	.word	0x58025430
 800499c:	58025444 	.word	0x58025444
 80049a0:	58025458 	.word	0x58025458
 80049a4:	5802546c 	.word	0x5802546c
 80049a8:	58025480 	.word	0x58025480
 80049ac:	58025494 	.word	0x58025494
 80049b0:	2300      	movs	r3, #0
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d028      	beq.n	8004a08 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049ba:	681a      	ldr	r2, [r3, #0]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049c0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80049c4:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049ca:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049d0:	f003 031f 	and.w	r3, r3, #31
 80049d4:	2201      	movs	r2, #1
 80049d6:	409a      	lsls	r2, r3
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80049e0:	687a      	ldr	r2, [r7, #4]
 80049e2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80049e4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d00c      	beq.n	8004a08 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80049f8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80049fc:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a02:	687a      	ldr	r2, [r7, #4]
 8004a04:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004a06:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2200      	movs	r2, #0
 8004a14:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d003      	beq.n	8004a28 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a24:	6878      	ldr	r0, [r7, #4]
 8004a26:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8004a28:	2300      	movs	r3, #0
}
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	3710      	adds	r7, #16
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}
 8004a32:	bf00      	nop

08004a34 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b08a      	sub	sp, #40	@ 0x28
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004a40:	4b67      	ldr	r3, [pc, #412]	@ (8004be0 <HAL_DMA_IRQHandler+0x1ac>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a67      	ldr	r2, [pc, #412]	@ (8004be4 <HAL_DMA_IRQHandler+0x1b0>)
 8004a46:	fba2 2303 	umull	r2, r3, r2, r3
 8004a4a:	0a9b      	lsrs	r3, r3, #10
 8004a4c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a52:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a58:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8004a5a:	6a3b      	ldr	r3, [r7, #32]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004a60:	69fb      	ldr	r3, [r7, #28]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a5f      	ldr	r2, [pc, #380]	@ (8004be8 <HAL_DMA_IRQHandler+0x1b4>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d04a      	beq.n	8004b06 <HAL_DMA_IRQHandler+0xd2>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a5d      	ldr	r2, [pc, #372]	@ (8004bec <HAL_DMA_IRQHandler+0x1b8>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d045      	beq.n	8004b06 <HAL_DMA_IRQHandler+0xd2>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a5c      	ldr	r2, [pc, #368]	@ (8004bf0 <HAL_DMA_IRQHandler+0x1bc>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d040      	beq.n	8004b06 <HAL_DMA_IRQHandler+0xd2>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a5a      	ldr	r2, [pc, #360]	@ (8004bf4 <HAL_DMA_IRQHandler+0x1c0>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d03b      	beq.n	8004b06 <HAL_DMA_IRQHandler+0xd2>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a59      	ldr	r2, [pc, #356]	@ (8004bf8 <HAL_DMA_IRQHandler+0x1c4>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d036      	beq.n	8004b06 <HAL_DMA_IRQHandler+0xd2>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a57      	ldr	r2, [pc, #348]	@ (8004bfc <HAL_DMA_IRQHandler+0x1c8>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d031      	beq.n	8004b06 <HAL_DMA_IRQHandler+0xd2>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a56      	ldr	r2, [pc, #344]	@ (8004c00 <HAL_DMA_IRQHandler+0x1cc>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d02c      	beq.n	8004b06 <HAL_DMA_IRQHandler+0xd2>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a54      	ldr	r2, [pc, #336]	@ (8004c04 <HAL_DMA_IRQHandler+0x1d0>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d027      	beq.n	8004b06 <HAL_DMA_IRQHandler+0xd2>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a53      	ldr	r2, [pc, #332]	@ (8004c08 <HAL_DMA_IRQHandler+0x1d4>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d022      	beq.n	8004b06 <HAL_DMA_IRQHandler+0xd2>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a51      	ldr	r2, [pc, #324]	@ (8004c0c <HAL_DMA_IRQHandler+0x1d8>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d01d      	beq.n	8004b06 <HAL_DMA_IRQHandler+0xd2>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a50      	ldr	r2, [pc, #320]	@ (8004c10 <HAL_DMA_IRQHandler+0x1dc>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d018      	beq.n	8004b06 <HAL_DMA_IRQHandler+0xd2>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a4e      	ldr	r2, [pc, #312]	@ (8004c14 <HAL_DMA_IRQHandler+0x1e0>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d013      	beq.n	8004b06 <HAL_DMA_IRQHandler+0xd2>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a4d      	ldr	r2, [pc, #308]	@ (8004c18 <HAL_DMA_IRQHandler+0x1e4>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d00e      	beq.n	8004b06 <HAL_DMA_IRQHandler+0xd2>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a4b      	ldr	r2, [pc, #300]	@ (8004c1c <HAL_DMA_IRQHandler+0x1e8>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d009      	beq.n	8004b06 <HAL_DMA_IRQHandler+0xd2>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a4a      	ldr	r2, [pc, #296]	@ (8004c20 <HAL_DMA_IRQHandler+0x1ec>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d004      	beq.n	8004b06 <HAL_DMA_IRQHandler+0xd2>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a48      	ldr	r2, [pc, #288]	@ (8004c24 <HAL_DMA_IRQHandler+0x1f0>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d101      	bne.n	8004b0a <HAL_DMA_IRQHandler+0xd6>
 8004b06:	2301      	movs	r3, #1
 8004b08:	e000      	b.n	8004b0c <HAL_DMA_IRQHandler+0xd8>
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	f000 842b 	beq.w	8005368 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b16:	f003 031f 	and.w	r3, r3, #31
 8004b1a:	2208      	movs	r2, #8
 8004b1c:	409a      	lsls	r2, r3
 8004b1e:	69bb      	ldr	r3, [r7, #24]
 8004b20:	4013      	ands	r3, r2
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	f000 80a2 	beq.w	8004c6c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a2e      	ldr	r2, [pc, #184]	@ (8004be8 <HAL_DMA_IRQHandler+0x1b4>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d04a      	beq.n	8004bc8 <HAL_DMA_IRQHandler+0x194>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a2d      	ldr	r2, [pc, #180]	@ (8004bec <HAL_DMA_IRQHandler+0x1b8>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d045      	beq.n	8004bc8 <HAL_DMA_IRQHandler+0x194>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a2b      	ldr	r2, [pc, #172]	@ (8004bf0 <HAL_DMA_IRQHandler+0x1bc>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d040      	beq.n	8004bc8 <HAL_DMA_IRQHandler+0x194>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a2a      	ldr	r2, [pc, #168]	@ (8004bf4 <HAL_DMA_IRQHandler+0x1c0>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d03b      	beq.n	8004bc8 <HAL_DMA_IRQHandler+0x194>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a28      	ldr	r2, [pc, #160]	@ (8004bf8 <HAL_DMA_IRQHandler+0x1c4>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d036      	beq.n	8004bc8 <HAL_DMA_IRQHandler+0x194>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a27      	ldr	r2, [pc, #156]	@ (8004bfc <HAL_DMA_IRQHandler+0x1c8>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d031      	beq.n	8004bc8 <HAL_DMA_IRQHandler+0x194>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a25      	ldr	r2, [pc, #148]	@ (8004c00 <HAL_DMA_IRQHandler+0x1cc>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d02c      	beq.n	8004bc8 <HAL_DMA_IRQHandler+0x194>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a24      	ldr	r2, [pc, #144]	@ (8004c04 <HAL_DMA_IRQHandler+0x1d0>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d027      	beq.n	8004bc8 <HAL_DMA_IRQHandler+0x194>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a22      	ldr	r2, [pc, #136]	@ (8004c08 <HAL_DMA_IRQHandler+0x1d4>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d022      	beq.n	8004bc8 <HAL_DMA_IRQHandler+0x194>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a21      	ldr	r2, [pc, #132]	@ (8004c0c <HAL_DMA_IRQHandler+0x1d8>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d01d      	beq.n	8004bc8 <HAL_DMA_IRQHandler+0x194>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a1f      	ldr	r2, [pc, #124]	@ (8004c10 <HAL_DMA_IRQHandler+0x1dc>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d018      	beq.n	8004bc8 <HAL_DMA_IRQHandler+0x194>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a1e      	ldr	r2, [pc, #120]	@ (8004c14 <HAL_DMA_IRQHandler+0x1e0>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d013      	beq.n	8004bc8 <HAL_DMA_IRQHandler+0x194>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a1c      	ldr	r2, [pc, #112]	@ (8004c18 <HAL_DMA_IRQHandler+0x1e4>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d00e      	beq.n	8004bc8 <HAL_DMA_IRQHandler+0x194>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a1b      	ldr	r2, [pc, #108]	@ (8004c1c <HAL_DMA_IRQHandler+0x1e8>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d009      	beq.n	8004bc8 <HAL_DMA_IRQHandler+0x194>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a19      	ldr	r2, [pc, #100]	@ (8004c20 <HAL_DMA_IRQHandler+0x1ec>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d004      	beq.n	8004bc8 <HAL_DMA_IRQHandler+0x194>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a18      	ldr	r2, [pc, #96]	@ (8004c24 <HAL_DMA_IRQHandler+0x1f0>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d12f      	bne.n	8004c28 <HAL_DMA_IRQHandler+0x1f4>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f003 0304 	and.w	r3, r3, #4
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	bf14      	ite	ne
 8004bd6:	2301      	movne	r3, #1
 8004bd8:	2300      	moveq	r3, #0
 8004bda:	b2db      	uxtb	r3, r3
 8004bdc:	e02e      	b.n	8004c3c <HAL_DMA_IRQHandler+0x208>
 8004bde:	bf00      	nop
 8004be0:	24000014 	.word	0x24000014
 8004be4:	1b4e81b5 	.word	0x1b4e81b5
 8004be8:	40020010 	.word	0x40020010
 8004bec:	40020028 	.word	0x40020028
 8004bf0:	40020040 	.word	0x40020040
 8004bf4:	40020058 	.word	0x40020058
 8004bf8:	40020070 	.word	0x40020070
 8004bfc:	40020088 	.word	0x40020088
 8004c00:	400200a0 	.word	0x400200a0
 8004c04:	400200b8 	.word	0x400200b8
 8004c08:	40020410 	.word	0x40020410
 8004c0c:	40020428 	.word	0x40020428
 8004c10:	40020440 	.word	0x40020440
 8004c14:	40020458 	.word	0x40020458
 8004c18:	40020470 	.word	0x40020470
 8004c1c:	40020488 	.word	0x40020488
 8004c20:	400204a0 	.word	0x400204a0
 8004c24:	400204b8 	.word	0x400204b8
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f003 0308 	and.w	r3, r3, #8
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	bf14      	ite	ne
 8004c36:	2301      	movne	r3, #1
 8004c38:	2300      	moveq	r3, #0
 8004c3a:	b2db      	uxtb	r3, r3
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d015      	beq.n	8004c6c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	681a      	ldr	r2, [r3, #0]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f022 0204 	bic.w	r2, r2, #4
 8004c4e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c54:	f003 031f 	and.w	r3, r3, #31
 8004c58:	2208      	movs	r2, #8
 8004c5a:	409a      	lsls	r2, r3
 8004c5c:	6a3b      	ldr	r3, [r7, #32]
 8004c5e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c64:	f043 0201 	orr.w	r2, r3, #1
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c70:	f003 031f 	and.w	r3, r3, #31
 8004c74:	69ba      	ldr	r2, [r7, #24]
 8004c76:	fa22 f303 	lsr.w	r3, r2, r3
 8004c7a:	f003 0301 	and.w	r3, r3, #1
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d06e      	beq.n	8004d60 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a69      	ldr	r2, [pc, #420]	@ (8004e2c <HAL_DMA_IRQHandler+0x3f8>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d04a      	beq.n	8004d22 <HAL_DMA_IRQHandler+0x2ee>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a67      	ldr	r2, [pc, #412]	@ (8004e30 <HAL_DMA_IRQHandler+0x3fc>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d045      	beq.n	8004d22 <HAL_DMA_IRQHandler+0x2ee>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a66      	ldr	r2, [pc, #408]	@ (8004e34 <HAL_DMA_IRQHandler+0x400>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d040      	beq.n	8004d22 <HAL_DMA_IRQHandler+0x2ee>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a64      	ldr	r2, [pc, #400]	@ (8004e38 <HAL_DMA_IRQHandler+0x404>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d03b      	beq.n	8004d22 <HAL_DMA_IRQHandler+0x2ee>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a63      	ldr	r2, [pc, #396]	@ (8004e3c <HAL_DMA_IRQHandler+0x408>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d036      	beq.n	8004d22 <HAL_DMA_IRQHandler+0x2ee>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a61      	ldr	r2, [pc, #388]	@ (8004e40 <HAL_DMA_IRQHandler+0x40c>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d031      	beq.n	8004d22 <HAL_DMA_IRQHandler+0x2ee>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a60      	ldr	r2, [pc, #384]	@ (8004e44 <HAL_DMA_IRQHandler+0x410>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d02c      	beq.n	8004d22 <HAL_DMA_IRQHandler+0x2ee>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a5e      	ldr	r2, [pc, #376]	@ (8004e48 <HAL_DMA_IRQHandler+0x414>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d027      	beq.n	8004d22 <HAL_DMA_IRQHandler+0x2ee>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a5d      	ldr	r2, [pc, #372]	@ (8004e4c <HAL_DMA_IRQHandler+0x418>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d022      	beq.n	8004d22 <HAL_DMA_IRQHandler+0x2ee>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a5b      	ldr	r2, [pc, #364]	@ (8004e50 <HAL_DMA_IRQHandler+0x41c>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d01d      	beq.n	8004d22 <HAL_DMA_IRQHandler+0x2ee>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a5a      	ldr	r2, [pc, #360]	@ (8004e54 <HAL_DMA_IRQHandler+0x420>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d018      	beq.n	8004d22 <HAL_DMA_IRQHandler+0x2ee>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a58      	ldr	r2, [pc, #352]	@ (8004e58 <HAL_DMA_IRQHandler+0x424>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d013      	beq.n	8004d22 <HAL_DMA_IRQHandler+0x2ee>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a57      	ldr	r2, [pc, #348]	@ (8004e5c <HAL_DMA_IRQHandler+0x428>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d00e      	beq.n	8004d22 <HAL_DMA_IRQHandler+0x2ee>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a55      	ldr	r2, [pc, #340]	@ (8004e60 <HAL_DMA_IRQHandler+0x42c>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d009      	beq.n	8004d22 <HAL_DMA_IRQHandler+0x2ee>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a54      	ldr	r2, [pc, #336]	@ (8004e64 <HAL_DMA_IRQHandler+0x430>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d004      	beq.n	8004d22 <HAL_DMA_IRQHandler+0x2ee>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a52      	ldr	r2, [pc, #328]	@ (8004e68 <HAL_DMA_IRQHandler+0x434>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d10a      	bne.n	8004d38 <HAL_DMA_IRQHandler+0x304>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	695b      	ldr	r3, [r3, #20]
 8004d28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	bf14      	ite	ne
 8004d30:	2301      	movne	r3, #1
 8004d32:	2300      	moveq	r3, #0
 8004d34:	b2db      	uxtb	r3, r3
 8004d36:	e003      	b.n	8004d40 <HAL_DMA_IRQHandler+0x30c>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	2300      	movs	r3, #0
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d00d      	beq.n	8004d60 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d48:	f003 031f 	and.w	r3, r3, #31
 8004d4c:	2201      	movs	r2, #1
 8004d4e:	409a      	lsls	r2, r3
 8004d50:	6a3b      	ldr	r3, [r7, #32]
 8004d52:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d58:	f043 0202 	orr.w	r2, r3, #2
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d64:	f003 031f 	and.w	r3, r3, #31
 8004d68:	2204      	movs	r2, #4
 8004d6a:	409a      	lsls	r2, r3
 8004d6c:	69bb      	ldr	r3, [r7, #24]
 8004d6e:	4013      	ands	r3, r2
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	f000 808f 	beq.w	8004e94 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a2c      	ldr	r2, [pc, #176]	@ (8004e2c <HAL_DMA_IRQHandler+0x3f8>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d04a      	beq.n	8004e16 <HAL_DMA_IRQHandler+0x3e2>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a2a      	ldr	r2, [pc, #168]	@ (8004e30 <HAL_DMA_IRQHandler+0x3fc>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d045      	beq.n	8004e16 <HAL_DMA_IRQHandler+0x3e2>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a29      	ldr	r2, [pc, #164]	@ (8004e34 <HAL_DMA_IRQHandler+0x400>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d040      	beq.n	8004e16 <HAL_DMA_IRQHandler+0x3e2>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a27      	ldr	r2, [pc, #156]	@ (8004e38 <HAL_DMA_IRQHandler+0x404>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d03b      	beq.n	8004e16 <HAL_DMA_IRQHandler+0x3e2>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a26      	ldr	r2, [pc, #152]	@ (8004e3c <HAL_DMA_IRQHandler+0x408>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d036      	beq.n	8004e16 <HAL_DMA_IRQHandler+0x3e2>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a24      	ldr	r2, [pc, #144]	@ (8004e40 <HAL_DMA_IRQHandler+0x40c>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d031      	beq.n	8004e16 <HAL_DMA_IRQHandler+0x3e2>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a23      	ldr	r2, [pc, #140]	@ (8004e44 <HAL_DMA_IRQHandler+0x410>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d02c      	beq.n	8004e16 <HAL_DMA_IRQHandler+0x3e2>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a21      	ldr	r2, [pc, #132]	@ (8004e48 <HAL_DMA_IRQHandler+0x414>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d027      	beq.n	8004e16 <HAL_DMA_IRQHandler+0x3e2>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a20      	ldr	r2, [pc, #128]	@ (8004e4c <HAL_DMA_IRQHandler+0x418>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d022      	beq.n	8004e16 <HAL_DMA_IRQHandler+0x3e2>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a1e      	ldr	r2, [pc, #120]	@ (8004e50 <HAL_DMA_IRQHandler+0x41c>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d01d      	beq.n	8004e16 <HAL_DMA_IRQHandler+0x3e2>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a1d      	ldr	r2, [pc, #116]	@ (8004e54 <HAL_DMA_IRQHandler+0x420>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d018      	beq.n	8004e16 <HAL_DMA_IRQHandler+0x3e2>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a1b      	ldr	r2, [pc, #108]	@ (8004e58 <HAL_DMA_IRQHandler+0x424>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d013      	beq.n	8004e16 <HAL_DMA_IRQHandler+0x3e2>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a1a      	ldr	r2, [pc, #104]	@ (8004e5c <HAL_DMA_IRQHandler+0x428>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d00e      	beq.n	8004e16 <HAL_DMA_IRQHandler+0x3e2>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a18      	ldr	r2, [pc, #96]	@ (8004e60 <HAL_DMA_IRQHandler+0x42c>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d009      	beq.n	8004e16 <HAL_DMA_IRQHandler+0x3e2>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a17      	ldr	r2, [pc, #92]	@ (8004e64 <HAL_DMA_IRQHandler+0x430>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d004      	beq.n	8004e16 <HAL_DMA_IRQHandler+0x3e2>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a15      	ldr	r2, [pc, #84]	@ (8004e68 <HAL_DMA_IRQHandler+0x434>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d12a      	bne.n	8004e6c <HAL_DMA_IRQHandler+0x438>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f003 0302 	and.w	r3, r3, #2
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	bf14      	ite	ne
 8004e24:	2301      	movne	r3, #1
 8004e26:	2300      	moveq	r3, #0
 8004e28:	b2db      	uxtb	r3, r3
 8004e2a:	e023      	b.n	8004e74 <HAL_DMA_IRQHandler+0x440>
 8004e2c:	40020010 	.word	0x40020010
 8004e30:	40020028 	.word	0x40020028
 8004e34:	40020040 	.word	0x40020040
 8004e38:	40020058 	.word	0x40020058
 8004e3c:	40020070 	.word	0x40020070
 8004e40:	40020088 	.word	0x40020088
 8004e44:	400200a0 	.word	0x400200a0
 8004e48:	400200b8 	.word	0x400200b8
 8004e4c:	40020410 	.word	0x40020410
 8004e50:	40020428 	.word	0x40020428
 8004e54:	40020440 	.word	0x40020440
 8004e58:	40020458 	.word	0x40020458
 8004e5c:	40020470 	.word	0x40020470
 8004e60:	40020488 	.word	0x40020488
 8004e64:	400204a0 	.word	0x400204a0
 8004e68:	400204b8 	.word	0x400204b8
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	2300      	movs	r3, #0
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d00d      	beq.n	8004e94 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e7c:	f003 031f 	and.w	r3, r3, #31
 8004e80:	2204      	movs	r2, #4
 8004e82:	409a      	lsls	r2, r3
 8004e84:	6a3b      	ldr	r3, [r7, #32]
 8004e86:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e8c:	f043 0204 	orr.w	r2, r3, #4
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e98:	f003 031f 	and.w	r3, r3, #31
 8004e9c:	2210      	movs	r2, #16
 8004e9e:	409a      	lsls	r2, r3
 8004ea0:	69bb      	ldr	r3, [r7, #24]
 8004ea2:	4013      	ands	r3, r2
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	f000 80a6 	beq.w	8004ff6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a85      	ldr	r2, [pc, #532]	@ (80050c4 <HAL_DMA_IRQHandler+0x690>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d04a      	beq.n	8004f4a <HAL_DMA_IRQHandler+0x516>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a83      	ldr	r2, [pc, #524]	@ (80050c8 <HAL_DMA_IRQHandler+0x694>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d045      	beq.n	8004f4a <HAL_DMA_IRQHandler+0x516>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a82      	ldr	r2, [pc, #520]	@ (80050cc <HAL_DMA_IRQHandler+0x698>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d040      	beq.n	8004f4a <HAL_DMA_IRQHandler+0x516>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a80      	ldr	r2, [pc, #512]	@ (80050d0 <HAL_DMA_IRQHandler+0x69c>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d03b      	beq.n	8004f4a <HAL_DMA_IRQHandler+0x516>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a7f      	ldr	r2, [pc, #508]	@ (80050d4 <HAL_DMA_IRQHandler+0x6a0>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d036      	beq.n	8004f4a <HAL_DMA_IRQHandler+0x516>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a7d      	ldr	r2, [pc, #500]	@ (80050d8 <HAL_DMA_IRQHandler+0x6a4>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d031      	beq.n	8004f4a <HAL_DMA_IRQHandler+0x516>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a7c      	ldr	r2, [pc, #496]	@ (80050dc <HAL_DMA_IRQHandler+0x6a8>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d02c      	beq.n	8004f4a <HAL_DMA_IRQHandler+0x516>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a7a      	ldr	r2, [pc, #488]	@ (80050e0 <HAL_DMA_IRQHandler+0x6ac>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d027      	beq.n	8004f4a <HAL_DMA_IRQHandler+0x516>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a79      	ldr	r2, [pc, #484]	@ (80050e4 <HAL_DMA_IRQHandler+0x6b0>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d022      	beq.n	8004f4a <HAL_DMA_IRQHandler+0x516>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a77      	ldr	r2, [pc, #476]	@ (80050e8 <HAL_DMA_IRQHandler+0x6b4>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d01d      	beq.n	8004f4a <HAL_DMA_IRQHandler+0x516>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a76      	ldr	r2, [pc, #472]	@ (80050ec <HAL_DMA_IRQHandler+0x6b8>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d018      	beq.n	8004f4a <HAL_DMA_IRQHandler+0x516>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a74      	ldr	r2, [pc, #464]	@ (80050f0 <HAL_DMA_IRQHandler+0x6bc>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d013      	beq.n	8004f4a <HAL_DMA_IRQHandler+0x516>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a73      	ldr	r2, [pc, #460]	@ (80050f4 <HAL_DMA_IRQHandler+0x6c0>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d00e      	beq.n	8004f4a <HAL_DMA_IRQHandler+0x516>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a71      	ldr	r2, [pc, #452]	@ (80050f8 <HAL_DMA_IRQHandler+0x6c4>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d009      	beq.n	8004f4a <HAL_DMA_IRQHandler+0x516>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a70      	ldr	r2, [pc, #448]	@ (80050fc <HAL_DMA_IRQHandler+0x6c8>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d004      	beq.n	8004f4a <HAL_DMA_IRQHandler+0x516>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a6e      	ldr	r2, [pc, #440]	@ (8005100 <HAL_DMA_IRQHandler+0x6cc>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d10a      	bne.n	8004f60 <HAL_DMA_IRQHandler+0x52c>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f003 0308 	and.w	r3, r3, #8
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	bf14      	ite	ne
 8004f58:	2301      	movne	r3, #1
 8004f5a:	2300      	moveq	r3, #0
 8004f5c:	b2db      	uxtb	r3, r3
 8004f5e:	e009      	b.n	8004f74 <HAL_DMA_IRQHandler+0x540>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f003 0304 	and.w	r3, r3, #4
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	bf14      	ite	ne
 8004f6e:	2301      	movne	r3, #1
 8004f70:	2300      	moveq	r3, #0
 8004f72:	b2db      	uxtb	r3, r3
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d03e      	beq.n	8004ff6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f7c:	f003 031f 	and.w	r3, r3, #31
 8004f80:	2210      	movs	r2, #16
 8004f82:	409a      	lsls	r2, r3
 8004f84:	6a3b      	ldr	r3, [r7, #32]
 8004f86:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d018      	beq.n	8004fc8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d108      	bne.n	8004fb6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d024      	beq.n	8004ff6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	4798      	blx	r3
 8004fb4:	e01f      	b.n	8004ff6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d01b      	beq.n	8004ff6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	4798      	blx	r3
 8004fc6:	e016      	b.n	8004ff6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d107      	bne.n	8004fe6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	681a      	ldr	r2, [r3, #0]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f022 0208 	bic.w	r2, r2, #8
 8004fe4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d003      	beq.n	8004ff6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ffa:	f003 031f 	and.w	r3, r3, #31
 8004ffe:	2220      	movs	r2, #32
 8005000:	409a      	lsls	r2, r3
 8005002:	69bb      	ldr	r3, [r7, #24]
 8005004:	4013      	ands	r3, r2
 8005006:	2b00      	cmp	r3, #0
 8005008:	f000 8110 	beq.w	800522c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a2c      	ldr	r2, [pc, #176]	@ (80050c4 <HAL_DMA_IRQHandler+0x690>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d04a      	beq.n	80050ac <HAL_DMA_IRQHandler+0x678>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a2b      	ldr	r2, [pc, #172]	@ (80050c8 <HAL_DMA_IRQHandler+0x694>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d045      	beq.n	80050ac <HAL_DMA_IRQHandler+0x678>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a29      	ldr	r2, [pc, #164]	@ (80050cc <HAL_DMA_IRQHandler+0x698>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d040      	beq.n	80050ac <HAL_DMA_IRQHandler+0x678>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a28      	ldr	r2, [pc, #160]	@ (80050d0 <HAL_DMA_IRQHandler+0x69c>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d03b      	beq.n	80050ac <HAL_DMA_IRQHandler+0x678>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a26      	ldr	r2, [pc, #152]	@ (80050d4 <HAL_DMA_IRQHandler+0x6a0>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d036      	beq.n	80050ac <HAL_DMA_IRQHandler+0x678>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a25      	ldr	r2, [pc, #148]	@ (80050d8 <HAL_DMA_IRQHandler+0x6a4>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d031      	beq.n	80050ac <HAL_DMA_IRQHandler+0x678>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a23      	ldr	r2, [pc, #140]	@ (80050dc <HAL_DMA_IRQHandler+0x6a8>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d02c      	beq.n	80050ac <HAL_DMA_IRQHandler+0x678>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a22      	ldr	r2, [pc, #136]	@ (80050e0 <HAL_DMA_IRQHandler+0x6ac>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d027      	beq.n	80050ac <HAL_DMA_IRQHandler+0x678>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a20      	ldr	r2, [pc, #128]	@ (80050e4 <HAL_DMA_IRQHandler+0x6b0>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d022      	beq.n	80050ac <HAL_DMA_IRQHandler+0x678>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a1f      	ldr	r2, [pc, #124]	@ (80050e8 <HAL_DMA_IRQHandler+0x6b4>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d01d      	beq.n	80050ac <HAL_DMA_IRQHandler+0x678>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a1d      	ldr	r2, [pc, #116]	@ (80050ec <HAL_DMA_IRQHandler+0x6b8>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d018      	beq.n	80050ac <HAL_DMA_IRQHandler+0x678>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a1c      	ldr	r2, [pc, #112]	@ (80050f0 <HAL_DMA_IRQHandler+0x6bc>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d013      	beq.n	80050ac <HAL_DMA_IRQHandler+0x678>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a1a      	ldr	r2, [pc, #104]	@ (80050f4 <HAL_DMA_IRQHandler+0x6c0>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d00e      	beq.n	80050ac <HAL_DMA_IRQHandler+0x678>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a19      	ldr	r2, [pc, #100]	@ (80050f8 <HAL_DMA_IRQHandler+0x6c4>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d009      	beq.n	80050ac <HAL_DMA_IRQHandler+0x678>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a17      	ldr	r2, [pc, #92]	@ (80050fc <HAL_DMA_IRQHandler+0x6c8>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d004      	beq.n	80050ac <HAL_DMA_IRQHandler+0x678>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a16      	ldr	r2, [pc, #88]	@ (8005100 <HAL_DMA_IRQHandler+0x6cc>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d12b      	bne.n	8005104 <HAL_DMA_IRQHandler+0x6d0>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f003 0310 	and.w	r3, r3, #16
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	bf14      	ite	ne
 80050ba:	2301      	movne	r3, #1
 80050bc:	2300      	moveq	r3, #0
 80050be:	b2db      	uxtb	r3, r3
 80050c0:	e02a      	b.n	8005118 <HAL_DMA_IRQHandler+0x6e4>
 80050c2:	bf00      	nop
 80050c4:	40020010 	.word	0x40020010
 80050c8:	40020028 	.word	0x40020028
 80050cc:	40020040 	.word	0x40020040
 80050d0:	40020058 	.word	0x40020058
 80050d4:	40020070 	.word	0x40020070
 80050d8:	40020088 	.word	0x40020088
 80050dc:	400200a0 	.word	0x400200a0
 80050e0:	400200b8 	.word	0x400200b8
 80050e4:	40020410 	.word	0x40020410
 80050e8:	40020428 	.word	0x40020428
 80050ec:	40020440 	.word	0x40020440
 80050f0:	40020458 	.word	0x40020458
 80050f4:	40020470 	.word	0x40020470
 80050f8:	40020488 	.word	0x40020488
 80050fc:	400204a0 	.word	0x400204a0
 8005100:	400204b8 	.word	0x400204b8
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f003 0302 	and.w	r3, r3, #2
 800510e:	2b00      	cmp	r3, #0
 8005110:	bf14      	ite	ne
 8005112:	2301      	movne	r3, #1
 8005114:	2300      	moveq	r3, #0
 8005116:	b2db      	uxtb	r3, r3
 8005118:	2b00      	cmp	r3, #0
 800511a:	f000 8087 	beq.w	800522c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005122:	f003 031f 	and.w	r3, r3, #31
 8005126:	2220      	movs	r2, #32
 8005128:	409a      	lsls	r2, r3
 800512a:	6a3b      	ldr	r3, [r7, #32]
 800512c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005134:	b2db      	uxtb	r3, r3
 8005136:	2b04      	cmp	r3, #4
 8005138:	d139      	bne.n	80051ae <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	681a      	ldr	r2, [r3, #0]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f022 0216 	bic.w	r2, r2, #22
 8005148:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	695a      	ldr	r2, [r3, #20]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005158:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800515e:	2b00      	cmp	r3, #0
 8005160:	d103      	bne.n	800516a <HAL_DMA_IRQHandler+0x736>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005166:	2b00      	cmp	r3, #0
 8005168:	d007      	beq.n	800517a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	681a      	ldr	r2, [r3, #0]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f022 0208 	bic.w	r2, r2, #8
 8005178:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800517e:	f003 031f 	and.w	r3, r3, #31
 8005182:	223f      	movs	r2, #63	@ 0x3f
 8005184:	409a      	lsls	r2, r3
 8005186:	6a3b      	ldr	r3, [r7, #32]
 8005188:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2201      	movs	r2, #1
 800518e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2200      	movs	r2, #0
 8005196:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800519e:	2b00      	cmp	r3, #0
 80051a0:	f000 834a 	beq.w	8005838 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051a8:	6878      	ldr	r0, [r7, #4]
 80051aa:	4798      	blx	r3
          }
          return;
 80051ac:	e344      	b.n	8005838 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d018      	beq.n	80051ee <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d108      	bne.n	80051dc <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d02c      	beq.n	800522c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	4798      	blx	r3
 80051da:	e027      	b.n	800522c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d023      	beq.n	800522c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051e8:	6878      	ldr	r0, [r7, #4]
 80051ea:	4798      	blx	r3
 80051ec:	e01e      	b.n	800522c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d10f      	bne.n	800521c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	681a      	ldr	r2, [r3, #0]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f022 0210 	bic.w	r2, r2, #16
 800520a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2201      	movs	r2, #1
 8005210:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2200      	movs	r2, #0
 8005218:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005220:	2b00      	cmp	r3, #0
 8005222:	d003      	beq.n	800522c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005228:	6878      	ldr	r0, [r7, #4]
 800522a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005230:	2b00      	cmp	r3, #0
 8005232:	f000 8306 	beq.w	8005842 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800523a:	f003 0301 	and.w	r3, r3, #1
 800523e:	2b00      	cmp	r3, #0
 8005240:	f000 8088 	beq.w	8005354 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2204      	movs	r2, #4
 8005248:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a7a      	ldr	r2, [pc, #488]	@ (800543c <HAL_DMA_IRQHandler+0xa08>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d04a      	beq.n	80052ec <HAL_DMA_IRQHandler+0x8b8>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a79      	ldr	r2, [pc, #484]	@ (8005440 <HAL_DMA_IRQHandler+0xa0c>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d045      	beq.n	80052ec <HAL_DMA_IRQHandler+0x8b8>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a77      	ldr	r2, [pc, #476]	@ (8005444 <HAL_DMA_IRQHandler+0xa10>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d040      	beq.n	80052ec <HAL_DMA_IRQHandler+0x8b8>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a76      	ldr	r2, [pc, #472]	@ (8005448 <HAL_DMA_IRQHandler+0xa14>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d03b      	beq.n	80052ec <HAL_DMA_IRQHandler+0x8b8>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a74      	ldr	r2, [pc, #464]	@ (800544c <HAL_DMA_IRQHandler+0xa18>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d036      	beq.n	80052ec <HAL_DMA_IRQHandler+0x8b8>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a73      	ldr	r2, [pc, #460]	@ (8005450 <HAL_DMA_IRQHandler+0xa1c>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d031      	beq.n	80052ec <HAL_DMA_IRQHandler+0x8b8>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a71      	ldr	r2, [pc, #452]	@ (8005454 <HAL_DMA_IRQHandler+0xa20>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d02c      	beq.n	80052ec <HAL_DMA_IRQHandler+0x8b8>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a70      	ldr	r2, [pc, #448]	@ (8005458 <HAL_DMA_IRQHandler+0xa24>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d027      	beq.n	80052ec <HAL_DMA_IRQHandler+0x8b8>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a6e      	ldr	r2, [pc, #440]	@ (800545c <HAL_DMA_IRQHandler+0xa28>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d022      	beq.n	80052ec <HAL_DMA_IRQHandler+0x8b8>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a6d      	ldr	r2, [pc, #436]	@ (8005460 <HAL_DMA_IRQHandler+0xa2c>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d01d      	beq.n	80052ec <HAL_DMA_IRQHandler+0x8b8>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a6b      	ldr	r2, [pc, #428]	@ (8005464 <HAL_DMA_IRQHandler+0xa30>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d018      	beq.n	80052ec <HAL_DMA_IRQHandler+0x8b8>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a6a      	ldr	r2, [pc, #424]	@ (8005468 <HAL_DMA_IRQHandler+0xa34>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d013      	beq.n	80052ec <HAL_DMA_IRQHandler+0x8b8>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a68      	ldr	r2, [pc, #416]	@ (800546c <HAL_DMA_IRQHandler+0xa38>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d00e      	beq.n	80052ec <HAL_DMA_IRQHandler+0x8b8>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a67      	ldr	r2, [pc, #412]	@ (8005470 <HAL_DMA_IRQHandler+0xa3c>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d009      	beq.n	80052ec <HAL_DMA_IRQHandler+0x8b8>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a65      	ldr	r2, [pc, #404]	@ (8005474 <HAL_DMA_IRQHandler+0xa40>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d004      	beq.n	80052ec <HAL_DMA_IRQHandler+0x8b8>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a64      	ldr	r2, [pc, #400]	@ (8005478 <HAL_DMA_IRQHandler+0xa44>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d108      	bne.n	80052fe <HAL_DMA_IRQHandler+0x8ca>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	681a      	ldr	r2, [r3, #0]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f022 0201 	bic.w	r2, r2, #1
 80052fa:	601a      	str	r2, [r3, #0]
 80052fc:	e007      	b.n	800530e <HAL_DMA_IRQHandler+0x8da>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	681a      	ldr	r2, [r3, #0]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f022 0201 	bic.w	r2, r2, #1
 800530c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	3301      	adds	r3, #1
 8005312:	60fb      	str	r3, [r7, #12]
 8005314:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005316:	429a      	cmp	r2, r3
 8005318:	d307      	bcc.n	800532a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f003 0301 	and.w	r3, r3, #1
 8005324:	2b00      	cmp	r3, #0
 8005326:	d1f2      	bne.n	800530e <HAL_DMA_IRQHandler+0x8da>
 8005328:	e000      	b.n	800532c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800532a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f003 0301 	and.w	r3, r3, #1
 8005336:	2b00      	cmp	r3, #0
 8005338:	d004      	beq.n	8005344 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2203      	movs	r2, #3
 800533e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8005342:	e003      	b.n	800534c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2201      	movs	r2, #1
 8005348:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2200      	movs	r2, #0
 8005350:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005358:	2b00      	cmp	r3, #0
 800535a:	f000 8272 	beq.w	8005842 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005362:	6878      	ldr	r0, [r7, #4]
 8005364:	4798      	blx	r3
 8005366:	e26c      	b.n	8005842 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a43      	ldr	r2, [pc, #268]	@ (800547c <HAL_DMA_IRQHandler+0xa48>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d022      	beq.n	80053b8 <HAL_DMA_IRQHandler+0x984>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4a42      	ldr	r2, [pc, #264]	@ (8005480 <HAL_DMA_IRQHandler+0xa4c>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d01d      	beq.n	80053b8 <HAL_DMA_IRQHandler+0x984>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a40      	ldr	r2, [pc, #256]	@ (8005484 <HAL_DMA_IRQHandler+0xa50>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d018      	beq.n	80053b8 <HAL_DMA_IRQHandler+0x984>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a3f      	ldr	r2, [pc, #252]	@ (8005488 <HAL_DMA_IRQHandler+0xa54>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d013      	beq.n	80053b8 <HAL_DMA_IRQHandler+0x984>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a3d      	ldr	r2, [pc, #244]	@ (800548c <HAL_DMA_IRQHandler+0xa58>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d00e      	beq.n	80053b8 <HAL_DMA_IRQHandler+0x984>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4a3c      	ldr	r2, [pc, #240]	@ (8005490 <HAL_DMA_IRQHandler+0xa5c>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d009      	beq.n	80053b8 <HAL_DMA_IRQHandler+0x984>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4a3a      	ldr	r2, [pc, #232]	@ (8005494 <HAL_DMA_IRQHandler+0xa60>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d004      	beq.n	80053b8 <HAL_DMA_IRQHandler+0x984>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a39      	ldr	r2, [pc, #228]	@ (8005498 <HAL_DMA_IRQHandler+0xa64>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d101      	bne.n	80053bc <HAL_DMA_IRQHandler+0x988>
 80053b8:	2301      	movs	r3, #1
 80053ba:	e000      	b.n	80053be <HAL_DMA_IRQHandler+0x98a>
 80053bc:	2300      	movs	r3, #0
 80053be:	2b00      	cmp	r3, #0
 80053c0:	f000 823f 	beq.w	8005842 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053d0:	f003 031f 	and.w	r3, r3, #31
 80053d4:	2204      	movs	r2, #4
 80053d6:	409a      	lsls	r2, r3
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	4013      	ands	r3, r2
 80053dc:	2b00      	cmp	r3, #0
 80053de:	f000 80cd 	beq.w	800557c <HAL_DMA_IRQHandler+0xb48>
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	f003 0304 	and.w	r3, r3, #4
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	f000 80c7 	beq.w	800557c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053f2:	f003 031f 	and.w	r3, r3, #31
 80053f6:	2204      	movs	r2, #4
 80053f8:	409a      	lsls	r2, r3
 80053fa:	69fb      	ldr	r3, [r7, #28]
 80053fc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005404:	2b00      	cmp	r3, #0
 8005406:	d049      	beq.n	800549c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005408:	693b      	ldr	r3, [r7, #16]
 800540a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800540e:	2b00      	cmp	r3, #0
 8005410:	d109      	bne.n	8005426 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005416:	2b00      	cmp	r3, #0
 8005418:	f000 8210 	beq.w	800583c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005420:	6878      	ldr	r0, [r7, #4]
 8005422:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005424:	e20a      	b.n	800583c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800542a:	2b00      	cmp	r3, #0
 800542c:	f000 8206 	beq.w	800583c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005438:	e200      	b.n	800583c <HAL_DMA_IRQHandler+0xe08>
 800543a:	bf00      	nop
 800543c:	40020010 	.word	0x40020010
 8005440:	40020028 	.word	0x40020028
 8005444:	40020040 	.word	0x40020040
 8005448:	40020058 	.word	0x40020058
 800544c:	40020070 	.word	0x40020070
 8005450:	40020088 	.word	0x40020088
 8005454:	400200a0 	.word	0x400200a0
 8005458:	400200b8 	.word	0x400200b8
 800545c:	40020410 	.word	0x40020410
 8005460:	40020428 	.word	0x40020428
 8005464:	40020440 	.word	0x40020440
 8005468:	40020458 	.word	0x40020458
 800546c:	40020470 	.word	0x40020470
 8005470:	40020488 	.word	0x40020488
 8005474:	400204a0 	.word	0x400204a0
 8005478:	400204b8 	.word	0x400204b8
 800547c:	58025408 	.word	0x58025408
 8005480:	5802541c 	.word	0x5802541c
 8005484:	58025430 	.word	0x58025430
 8005488:	58025444 	.word	0x58025444
 800548c:	58025458 	.word	0x58025458
 8005490:	5802546c 	.word	0x5802546c
 8005494:	58025480 	.word	0x58025480
 8005498:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800549c:	693b      	ldr	r3, [r7, #16]
 800549e:	f003 0320 	and.w	r3, r3, #32
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d160      	bne.n	8005568 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a7f      	ldr	r2, [pc, #508]	@ (80056a8 <HAL_DMA_IRQHandler+0xc74>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d04a      	beq.n	8005546 <HAL_DMA_IRQHandler+0xb12>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a7d      	ldr	r2, [pc, #500]	@ (80056ac <HAL_DMA_IRQHandler+0xc78>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d045      	beq.n	8005546 <HAL_DMA_IRQHandler+0xb12>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a7c      	ldr	r2, [pc, #496]	@ (80056b0 <HAL_DMA_IRQHandler+0xc7c>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d040      	beq.n	8005546 <HAL_DMA_IRQHandler+0xb12>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a7a      	ldr	r2, [pc, #488]	@ (80056b4 <HAL_DMA_IRQHandler+0xc80>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d03b      	beq.n	8005546 <HAL_DMA_IRQHandler+0xb12>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a79      	ldr	r2, [pc, #484]	@ (80056b8 <HAL_DMA_IRQHandler+0xc84>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d036      	beq.n	8005546 <HAL_DMA_IRQHandler+0xb12>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a77      	ldr	r2, [pc, #476]	@ (80056bc <HAL_DMA_IRQHandler+0xc88>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d031      	beq.n	8005546 <HAL_DMA_IRQHandler+0xb12>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a76      	ldr	r2, [pc, #472]	@ (80056c0 <HAL_DMA_IRQHandler+0xc8c>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d02c      	beq.n	8005546 <HAL_DMA_IRQHandler+0xb12>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a74      	ldr	r2, [pc, #464]	@ (80056c4 <HAL_DMA_IRQHandler+0xc90>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d027      	beq.n	8005546 <HAL_DMA_IRQHandler+0xb12>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a73      	ldr	r2, [pc, #460]	@ (80056c8 <HAL_DMA_IRQHandler+0xc94>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d022      	beq.n	8005546 <HAL_DMA_IRQHandler+0xb12>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a71      	ldr	r2, [pc, #452]	@ (80056cc <HAL_DMA_IRQHandler+0xc98>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d01d      	beq.n	8005546 <HAL_DMA_IRQHandler+0xb12>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a70      	ldr	r2, [pc, #448]	@ (80056d0 <HAL_DMA_IRQHandler+0xc9c>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d018      	beq.n	8005546 <HAL_DMA_IRQHandler+0xb12>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a6e      	ldr	r2, [pc, #440]	@ (80056d4 <HAL_DMA_IRQHandler+0xca0>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d013      	beq.n	8005546 <HAL_DMA_IRQHandler+0xb12>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4a6d      	ldr	r2, [pc, #436]	@ (80056d8 <HAL_DMA_IRQHandler+0xca4>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d00e      	beq.n	8005546 <HAL_DMA_IRQHandler+0xb12>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a6b      	ldr	r2, [pc, #428]	@ (80056dc <HAL_DMA_IRQHandler+0xca8>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d009      	beq.n	8005546 <HAL_DMA_IRQHandler+0xb12>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a6a      	ldr	r2, [pc, #424]	@ (80056e0 <HAL_DMA_IRQHandler+0xcac>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d004      	beq.n	8005546 <HAL_DMA_IRQHandler+0xb12>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a68      	ldr	r2, [pc, #416]	@ (80056e4 <HAL_DMA_IRQHandler+0xcb0>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d108      	bne.n	8005558 <HAL_DMA_IRQHandler+0xb24>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	681a      	ldr	r2, [r3, #0]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f022 0208 	bic.w	r2, r2, #8
 8005554:	601a      	str	r2, [r3, #0]
 8005556:	e007      	b.n	8005568 <HAL_DMA_IRQHandler+0xb34>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	681a      	ldr	r2, [r3, #0]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f022 0204 	bic.w	r2, r2, #4
 8005566:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800556c:	2b00      	cmp	r3, #0
 800556e:	f000 8165 	beq.w	800583c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005576:	6878      	ldr	r0, [r7, #4]
 8005578:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800557a:	e15f      	b.n	800583c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005580:	f003 031f 	and.w	r3, r3, #31
 8005584:	2202      	movs	r2, #2
 8005586:	409a      	lsls	r2, r3
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	4013      	ands	r3, r2
 800558c:	2b00      	cmp	r3, #0
 800558e:	f000 80c5 	beq.w	800571c <HAL_DMA_IRQHandler+0xce8>
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	f003 0302 	and.w	r3, r3, #2
 8005598:	2b00      	cmp	r3, #0
 800559a:	f000 80bf 	beq.w	800571c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055a2:	f003 031f 	and.w	r3, r3, #31
 80055a6:	2202      	movs	r2, #2
 80055a8:	409a      	lsls	r2, r3
 80055aa:	69fb      	ldr	r3, [r7, #28]
 80055ac:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d018      	beq.n	80055ea <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80055b8:	693b      	ldr	r3, [r7, #16]
 80055ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d109      	bne.n	80055d6 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	f000 813a 	beq.w	8005840 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055d0:	6878      	ldr	r0, [r7, #4]
 80055d2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80055d4:	e134      	b.n	8005840 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055da:	2b00      	cmp	r3, #0
 80055dc:	f000 8130 	beq.w	8005840 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055e4:	6878      	ldr	r0, [r7, #4]
 80055e6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80055e8:	e12a      	b.n	8005840 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	f003 0320 	and.w	r3, r3, #32
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	f040 8089 	bne.w	8005708 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4a2b      	ldr	r2, [pc, #172]	@ (80056a8 <HAL_DMA_IRQHandler+0xc74>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d04a      	beq.n	8005696 <HAL_DMA_IRQHandler+0xc62>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a29      	ldr	r2, [pc, #164]	@ (80056ac <HAL_DMA_IRQHandler+0xc78>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d045      	beq.n	8005696 <HAL_DMA_IRQHandler+0xc62>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a28      	ldr	r2, [pc, #160]	@ (80056b0 <HAL_DMA_IRQHandler+0xc7c>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d040      	beq.n	8005696 <HAL_DMA_IRQHandler+0xc62>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a26      	ldr	r2, [pc, #152]	@ (80056b4 <HAL_DMA_IRQHandler+0xc80>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d03b      	beq.n	8005696 <HAL_DMA_IRQHandler+0xc62>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a25      	ldr	r2, [pc, #148]	@ (80056b8 <HAL_DMA_IRQHandler+0xc84>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d036      	beq.n	8005696 <HAL_DMA_IRQHandler+0xc62>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a23      	ldr	r2, [pc, #140]	@ (80056bc <HAL_DMA_IRQHandler+0xc88>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d031      	beq.n	8005696 <HAL_DMA_IRQHandler+0xc62>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4a22      	ldr	r2, [pc, #136]	@ (80056c0 <HAL_DMA_IRQHandler+0xc8c>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d02c      	beq.n	8005696 <HAL_DMA_IRQHandler+0xc62>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4a20      	ldr	r2, [pc, #128]	@ (80056c4 <HAL_DMA_IRQHandler+0xc90>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d027      	beq.n	8005696 <HAL_DMA_IRQHandler+0xc62>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a1f      	ldr	r2, [pc, #124]	@ (80056c8 <HAL_DMA_IRQHandler+0xc94>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d022      	beq.n	8005696 <HAL_DMA_IRQHandler+0xc62>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a1d      	ldr	r2, [pc, #116]	@ (80056cc <HAL_DMA_IRQHandler+0xc98>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d01d      	beq.n	8005696 <HAL_DMA_IRQHandler+0xc62>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4a1c      	ldr	r2, [pc, #112]	@ (80056d0 <HAL_DMA_IRQHandler+0xc9c>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d018      	beq.n	8005696 <HAL_DMA_IRQHandler+0xc62>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a1a      	ldr	r2, [pc, #104]	@ (80056d4 <HAL_DMA_IRQHandler+0xca0>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d013      	beq.n	8005696 <HAL_DMA_IRQHandler+0xc62>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4a19      	ldr	r2, [pc, #100]	@ (80056d8 <HAL_DMA_IRQHandler+0xca4>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d00e      	beq.n	8005696 <HAL_DMA_IRQHandler+0xc62>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4a17      	ldr	r2, [pc, #92]	@ (80056dc <HAL_DMA_IRQHandler+0xca8>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d009      	beq.n	8005696 <HAL_DMA_IRQHandler+0xc62>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4a16      	ldr	r2, [pc, #88]	@ (80056e0 <HAL_DMA_IRQHandler+0xcac>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d004      	beq.n	8005696 <HAL_DMA_IRQHandler+0xc62>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a14      	ldr	r2, [pc, #80]	@ (80056e4 <HAL_DMA_IRQHandler+0xcb0>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d128      	bne.n	80056e8 <HAL_DMA_IRQHandler+0xcb4>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	681a      	ldr	r2, [r3, #0]
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f022 0214 	bic.w	r2, r2, #20
 80056a4:	601a      	str	r2, [r3, #0]
 80056a6:	e027      	b.n	80056f8 <HAL_DMA_IRQHandler+0xcc4>
 80056a8:	40020010 	.word	0x40020010
 80056ac:	40020028 	.word	0x40020028
 80056b0:	40020040 	.word	0x40020040
 80056b4:	40020058 	.word	0x40020058
 80056b8:	40020070 	.word	0x40020070
 80056bc:	40020088 	.word	0x40020088
 80056c0:	400200a0 	.word	0x400200a0
 80056c4:	400200b8 	.word	0x400200b8
 80056c8:	40020410 	.word	0x40020410
 80056cc:	40020428 	.word	0x40020428
 80056d0:	40020440 	.word	0x40020440
 80056d4:	40020458 	.word	0x40020458
 80056d8:	40020470 	.word	0x40020470
 80056dc:	40020488 	.word	0x40020488
 80056e0:	400204a0 	.word	0x400204a0
 80056e4:	400204b8 	.word	0x400204b8
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	681a      	ldr	r2, [r3, #0]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f022 020a 	bic.w	r2, r2, #10
 80056f6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2201      	movs	r2, #1
 80056fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2200      	movs	r2, #0
 8005704:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800570c:	2b00      	cmp	r3, #0
 800570e:	f000 8097 	beq.w	8005840 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800571a:	e091      	b.n	8005840 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005720:	f003 031f 	and.w	r3, r3, #31
 8005724:	2208      	movs	r2, #8
 8005726:	409a      	lsls	r2, r3
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	4013      	ands	r3, r2
 800572c:	2b00      	cmp	r3, #0
 800572e:	f000 8088 	beq.w	8005842 <HAL_DMA_IRQHandler+0xe0e>
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	f003 0308 	and.w	r3, r3, #8
 8005738:	2b00      	cmp	r3, #0
 800573a:	f000 8082 	beq.w	8005842 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a41      	ldr	r2, [pc, #260]	@ (8005848 <HAL_DMA_IRQHandler+0xe14>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d04a      	beq.n	80057de <HAL_DMA_IRQHandler+0xdaa>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a3f      	ldr	r2, [pc, #252]	@ (800584c <HAL_DMA_IRQHandler+0xe18>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d045      	beq.n	80057de <HAL_DMA_IRQHandler+0xdaa>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a3e      	ldr	r2, [pc, #248]	@ (8005850 <HAL_DMA_IRQHandler+0xe1c>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d040      	beq.n	80057de <HAL_DMA_IRQHandler+0xdaa>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a3c      	ldr	r2, [pc, #240]	@ (8005854 <HAL_DMA_IRQHandler+0xe20>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d03b      	beq.n	80057de <HAL_DMA_IRQHandler+0xdaa>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a3b      	ldr	r2, [pc, #236]	@ (8005858 <HAL_DMA_IRQHandler+0xe24>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d036      	beq.n	80057de <HAL_DMA_IRQHandler+0xdaa>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a39      	ldr	r2, [pc, #228]	@ (800585c <HAL_DMA_IRQHandler+0xe28>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d031      	beq.n	80057de <HAL_DMA_IRQHandler+0xdaa>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4a38      	ldr	r2, [pc, #224]	@ (8005860 <HAL_DMA_IRQHandler+0xe2c>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d02c      	beq.n	80057de <HAL_DMA_IRQHandler+0xdaa>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4a36      	ldr	r2, [pc, #216]	@ (8005864 <HAL_DMA_IRQHandler+0xe30>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d027      	beq.n	80057de <HAL_DMA_IRQHandler+0xdaa>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4a35      	ldr	r2, [pc, #212]	@ (8005868 <HAL_DMA_IRQHandler+0xe34>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d022      	beq.n	80057de <HAL_DMA_IRQHandler+0xdaa>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a33      	ldr	r2, [pc, #204]	@ (800586c <HAL_DMA_IRQHandler+0xe38>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d01d      	beq.n	80057de <HAL_DMA_IRQHandler+0xdaa>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4a32      	ldr	r2, [pc, #200]	@ (8005870 <HAL_DMA_IRQHandler+0xe3c>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d018      	beq.n	80057de <HAL_DMA_IRQHandler+0xdaa>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a30      	ldr	r2, [pc, #192]	@ (8005874 <HAL_DMA_IRQHandler+0xe40>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d013      	beq.n	80057de <HAL_DMA_IRQHandler+0xdaa>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4a2f      	ldr	r2, [pc, #188]	@ (8005878 <HAL_DMA_IRQHandler+0xe44>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d00e      	beq.n	80057de <HAL_DMA_IRQHandler+0xdaa>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a2d      	ldr	r2, [pc, #180]	@ (800587c <HAL_DMA_IRQHandler+0xe48>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d009      	beq.n	80057de <HAL_DMA_IRQHandler+0xdaa>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a2c      	ldr	r2, [pc, #176]	@ (8005880 <HAL_DMA_IRQHandler+0xe4c>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d004      	beq.n	80057de <HAL_DMA_IRQHandler+0xdaa>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4a2a      	ldr	r2, [pc, #168]	@ (8005884 <HAL_DMA_IRQHandler+0xe50>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d108      	bne.n	80057f0 <HAL_DMA_IRQHandler+0xdbc>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	681a      	ldr	r2, [r3, #0]
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f022 021c 	bic.w	r2, r2, #28
 80057ec:	601a      	str	r2, [r3, #0]
 80057ee:	e007      	b.n	8005800 <HAL_DMA_IRQHandler+0xdcc>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	681a      	ldr	r2, [r3, #0]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f022 020e 	bic.w	r2, r2, #14
 80057fe:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005804:	f003 031f 	and.w	r3, r3, #31
 8005808:	2201      	movs	r2, #1
 800580a:	409a      	lsls	r2, r3
 800580c:	69fb      	ldr	r3, [r7, #28]
 800580e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2201      	movs	r2, #1
 8005814:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2201      	movs	r2, #1
 800581a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2200      	movs	r2, #0
 8005822:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800582a:	2b00      	cmp	r3, #0
 800582c:	d009      	beq.n	8005842 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	4798      	blx	r3
 8005836:	e004      	b.n	8005842 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005838:	bf00      	nop
 800583a:	e002      	b.n	8005842 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800583c:	bf00      	nop
 800583e:	e000      	b.n	8005842 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005840:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005842:	3728      	adds	r7, #40	@ 0x28
 8005844:	46bd      	mov	sp, r7
 8005846:	bd80      	pop	{r7, pc}
 8005848:	40020010 	.word	0x40020010
 800584c:	40020028 	.word	0x40020028
 8005850:	40020040 	.word	0x40020040
 8005854:	40020058 	.word	0x40020058
 8005858:	40020070 	.word	0x40020070
 800585c:	40020088 	.word	0x40020088
 8005860:	400200a0 	.word	0x400200a0
 8005864:	400200b8 	.word	0x400200b8
 8005868:	40020410 	.word	0x40020410
 800586c:	40020428 	.word	0x40020428
 8005870:	40020440 	.word	0x40020440
 8005874:	40020458 	.word	0x40020458
 8005878:	40020470 	.word	0x40020470
 800587c:	40020488 	.word	0x40020488
 8005880:	400204a0 	.word	0x400204a0
 8005884:	400204b8 	.word	0x400204b8

08005888 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(const DMA_HandleTypeDef *hdma)
{
 8005888:	b480      	push	{r7}
 800588a:	b083      	sub	sp, #12
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005896:	b2db      	uxtb	r3, r3
}
 8005898:	4618      	mov	r0, r3
 800589a:	370c      	adds	r7, #12
 800589c:	46bd      	mov	sp, r7
 800589e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a2:	4770      	bx	lr

080058a4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80058a4:	b480      	push	{r7}
 80058a6:	b087      	sub	sp, #28
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	60f8      	str	r0, [r7, #12]
 80058ac:	60b9      	str	r1, [r7, #8]
 80058ae:	607a      	str	r2, [r7, #4]
 80058b0:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058b6:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058bc:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4a7f      	ldr	r2, [pc, #508]	@ (8005ac0 <DMA_SetConfig+0x21c>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d072      	beq.n	80059ae <DMA_SetConfig+0x10a>
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4a7d      	ldr	r2, [pc, #500]	@ (8005ac4 <DMA_SetConfig+0x220>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d06d      	beq.n	80059ae <DMA_SetConfig+0x10a>
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4a7c      	ldr	r2, [pc, #496]	@ (8005ac8 <DMA_SetConfig+0x224>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d068      	beq.n	80059ae <DMA_SetConfig+0x10a>
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a7a      	ldr	r2, [pc, #488]	@ (8005acc <DMA_SetConfig+0x228>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d063      	beq.n	80059ae <DMA_SetConfig+0x10a>
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4a79      	ldr	r2, [pc, #484]	@ (8005ad0 <DMA_SetConfig+0x22c>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d05e      	beq.n	80059ae <DMA_SetConfig+0x10a>
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a77      	ldr	r2, [pc, #476]	@ (8005ad4 <DMA_SetConfig+0x230>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d059      	beq.n	80059ae <DMA_SetConfig+0x10a>
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4a76      	ldr	r2, [pc, #472]	@ (8005ad8 <DMA_SetConfig+0x234>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d054      	beq.n	80059ae <DMA_SetConfig+0x10a>
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a74      	ldr	r2, [pc, #464]	@ (8005adc <DMA_SetConfig+0x238>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d04f      	beq.n	80059ae <DMA_SetConfig+0x10a>
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	4a73      	ldr	r2, [pc, #460]	@ (8005ae0 <DMA_SetConfig+0x23c>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d04a      	beq.n	80059ae <DMA_SetConfig+0x10a>
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a71      	ldr	r2, [pc, #452]	@ (8005ae4 <DMA_SetConfig+0x240>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d045      	beq.n	80059ae <DMA_SetConfig+0x10a>
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4a70      	ldr	r2, [pc, #448]	@ (8005ae8 <DMA_SetConfig+0x244>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d040      	beq.n	80059ae <DMA_SetConfig+0x10a>
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a6e      	ldr	r2, [pc, #440]	@ (8005aec <DMA_SetConfig+0x248>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d03b      	beq.n	80059ae <DMA_SetConfig+0x10a>
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4a6d      	ldr	r2, [pc, #436]	@ (8005af0 <DMA_SetConfig+0x24c>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d036      	beq.n	80059ae <DMA_SetConfig+0x10a>
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4a6b      	ldr	r2, [pc, #428]	@ (8005af4 <DMA_SetConfig+0x250>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d031      	beq.n	80059ae <DMA_SetConfig+0x10a>
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4a6a      	ldr	r2, [pc, #424]	@ (8005af8 <DMA_SetConfig+0x254>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d02c      	beq.n	80059ae <DMA_SetConfig+0x10a>
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a68      	ldr	r2, [pc, #416]	@ (8005afc <DMA_SetConfig+0x258>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d027      	beq.n	80059ae <DMA_SetConfig+0x10a>
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a67      	ldr	r2, [pc, #412]	@ (8005b00 <DMA_SetConfig+0x25c>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d022      	beq.n	80059ae <DMA_SetConfig+0x10a>
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a65      	ldr	r2, [pc, #404]	@ (8005b04 <DMA_SetConfig+0x260>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d01d      	beq.n	80059ae <DMA_SetConfig+0x10a>
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a64      	ldr	r2, [pc, #400]	@ (8005b08 <DMA_SetConfig+0x264>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d018      	beq.n	80059ae <DMA_SetConfig+0x10a>
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a62      	ldr	r2, [pc, #392]	@ (8005b0c <DMA_SetConfig+0x268>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d013      	beq.n	80059ae <DMA_SetConfig+0x10a>
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a61      	ldr	r2, [pc, #388]	@ (8005b10 <DMA_SetConfig+0x26c>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d00e      	beq.n	80059ae <DMA_SetConfig+0x10a>
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a5f      	ldr	r2, [pc, #380]	@ (8005b14 <DMA_SetConfig+0x270>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d009      	beq.n	80059ae <DMA_SetConfig+0x10a>
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4a5e      	ldr	r2, [pc, #376]	@ (8005b18 <DMA_SetConfig+0x274>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d004      	beq.n	80059ae <DMA_SetConfig+0x10a>
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a5c      	ldr	r2, [pc, #368]	@ (8005b1c <DMA_SetConfig+0x278>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d101      	bne.n	80059b2 <DMA_SetConfig+0x10e>
 80059ae:	2301      	movs	r3, #1
 80059b0:	e000      	b.n	80059b4 <DMA_SetConfig+0x110>
 80059b2:	2300      	movs	r3, #0
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d00d      	beq.n	80059d4 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80059bc:	68fa      	ldr	r2, [r7, #12]
 80059be:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80059c0:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d004      	beq.n	80059d4 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059ce:	68fa      	ldr	r2, [r7, #12]
 80059d0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80059d2:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a39      	ldr	r2, [pc, #228]	@ (8005ac0 <DMA_SetConfig+0x21c>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d04a      	beq.n	8005a74 <DMA_SetConfig+0x1d0>
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a38      	ldr	r2, [pc, #224]	@ (8005ac4 <DMA_SetConfig+0x220>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d045      	beq.n	8005a74 <DMA_SetConfig+0x1d0>
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a36      	ldr	r2, [pc, #216]	@ (8005ac8 <DMA_SetConfig+0x224>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d040      	beq.n	8005a74 <DMA_SetConfig+0x1d0>
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a35      	ldr	r2, [pc, #212]	@ (8005acc <DMA_SetConfig+0x228>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d03b      	beq.n	8005a74 <DMA_SetConfig+0x1d0>
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a33      	ldr	r2, [pc, #204]	@ (8005ad0 <DMA_SetConfig+0x22c>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d036      	beq.n	8005a74 <DMA_SetConfig+0x1d0>
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a32      	ldr	r2, [pc, #200]	@ (8005ad4 <DMA_SetConfig+0x230>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d031      	beq.n	8005a74 <DMA_SetConfig+0x1d0>
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a30      	ldr	r2, [pc, #192]	@ (8005ad8 <DMA_SetConfig+0x234>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d02c      	beq.n	8005a74 <DMA_SetConfig+0x1d0>
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4a2f      	ldr	r2, [pc, #188]	@ (8005adc <DMA_SetConfig+0x238>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d027      	beq.n	8005a74 <DMA_SetConfig+0x1d0>
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4a2d      	ldr	r2, [pc, #180]	@ (8005ae0 <DMA_SetConfig+0x23c>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d022      	beq.n	8005a74 <DMA_SetConfig+0x1d0>
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4a2c      	ldr	r2, [pc, #176]	@ (8005ae4 <DMA_SetConfig+0x240>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d01d      	beq.n	8005a74 <DMA_SetConfig+0x1d0>
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4a2a      	ldr	r2, [pc, #168]	@ (8005ae8 <DMA_SetConfig+0x244>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d018      	beq.n	8005a74 <DMA_SetConfig+0x1d0>
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4a29      	ldr	r2, [pc, #164]	@ (8005aec <DMA_SetConfig+0x248>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d013      	beq.n	8005a74 <DMA_SetConfig+0x1d0>
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4a27      	ldr	r2, [pc, #156]	@ (8005af0 <DMA_SetConfig+0x24c>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d00e      	beq.n	8005a74 <DMA_SetConfig+0x1d0>
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a26      	ldr	r2, [pc, #152]	@ (8005af4 <DMA_SetConfig+0x250>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d009      	beq.n	8005a74 <DMA_SetConfig+0x1d0>
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a24      	ldr	r2, [pc, #144]	@ (8005af8 <DMA_SetConfig+0x254>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d004      	beq.n	8005a74 <DMA_SetConfig+0x1d0>
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4a23      	ldr	r2, [pc, #140]	@ (8005afc <DMA_SetConfig+0x258>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d101      	bne.n	8005a78 <DMA_SetConfig+0x1d4>
 8005a74:	2301      	movs	r3, #1
 8005a76:	e000      	b.n	8005a7a <DMA_SetConfig+0x1d6>
 8005a78:	2300      	movs	r3, #0
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d059      	beq.n	8005b32 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a82:	f003 031f 	and.w	r3, r3, #31
 8005a86:	223f      	movs	r2, #63	@ 0x3f
 8005a88:	409a      	lsls	r2, r3
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	681a      	ldr	r2, [r3, #0]
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005a9c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	683a      	ldr	r2, [r7, #0]
 8005aa4:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	689b      	ldr	r3, [r3, #8]
 8005aaa:	2b40      	cmp	r3, #64	@ 0x40
 8005aac:	d138      	bne.n	8005b20 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	687a      	ldr	r2, [r7, #4]
 8005ab4:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	68ba      	ldr	r2, [r7, #8]
 8005abc:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005abe:	e086      	b.n	8005bce <DMA_SetConfig+0x32a>
 8005ac0:	40020010 	.word	0x40020010
 8005ac4:	40020028 	.word	0x40020028
 8005ac8:	40020040 	.word	0x40020040
 8005acc:	40020058 	.word	0x40020058
 8005ad0:	40020070 	.word	0x40020070
 8005ad4:	40020088 	.word	0x40020088
 8005ad8:	400200a0 	.word	0x400200a0
 8005adc:	400200b8 	.word	0x400200b8
 8005ae0:	40020410 	.word	0x40020410
 8005ae4:	40020428 	.word	0x40020428
 8005ae8:	40020440 	.word	0x40020440
 8005aec:	40020458 	.word	0x40020458
 8005af0:	40020470 	.word	0x40020470
 8005af4:	40020488 	.word	0x40020488
 8005af8:	400204a0 	.word	0x400204a0
 8005afc:	400204b8 	.word	0x400204b8
 8005b00:	58025408 	.word	0x58025408
 8005b04:	5802541c 	.word	0x5802541c
 8005b08:	58025430 	.word	0x58025430
 8005b0c:	58025444 	.word	0x58025444
 8005b10:	58025458 	.word	0x58025458
 8005b14:	5802546c 	.word	0x5802546c
 8005b18:	58025480 	.word	0x58025480
 8005b1c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	68ba      	ldr	r2, [r7, #8]
 8005b26:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	687a      	ldr	r2, [r7, #4]
 8005b2e:	60da      	str	r2, [r3, #12]
}
 8005b30:	e04d      	b.n	8005bce <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4a29      	ldr	r2, [pc, #164]	@ (8005bdc <DMA_SetConfig+0x338>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d022      	beq.n	8005b82 <DMA_SetConfig+0x2de>
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4a27      	ldr	r2, [pc, #156]	@ (8005be0 <DMA_SetConfig+0x33c>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d01d      	beq.n	8005b82 <DMA_SetConfig+0x2de>
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4a26      	ldr	r2, [pc, #152]	@ (8005be4 <DMA_SetConfig+0x340>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d018      	beq.n	8005b82 <DMA_SetConfig+0x2de>
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a24      	ldr	r2, [pc, #144]	@ (8005be8 <DMA_SetConfig+0x344>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d013      	beq.n	8005b82 <DMA_SetConfig+0x2de>
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a23      	ldr	r2, [pc, #140]	@ (8005bec <DMA_SetConfig+0x348>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d00e      	beq.n	8005b82 <DMA_SetConfig+0x2de>
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a21      	ldr	r2, [pc, #132]	@ (8005bf0 <DMA_SetConfig+0x34c>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d009      	beq.n	8005b82 <DMA_SetConfig+0x2de>
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a20      	ldr	r2, [pc, #128]	@ (8005bf4 <DMA_SetConfig+0x350>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d004      	beq.n	8005b82 <DMA_SetConfig+0x2de>
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4a1e      	ldr	r2, [pc, #120]	@ (8005bf8 <DMA_SetConfig+0x354>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d101      	bne.n	8005b86 <DMA_SetConfig+0x2e2>
 8005b82:	2301      	movs	r3, #1
 8005b84:	e000      	b.n	8005b88 <DMA_SetConfig+0x2e4>
 8005b86:	2300      	movs	r3, #0
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d020      	beq.n	8005bce <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b90:	f003 031f 	and.w	r3, r3, #31
 8005b94:	2201      	movs	r2, #1
 8005b96:	409a      	lsls	r2, r3
 8005b98:	693b      	ldr	r3, [r7, #16]
 8005b9a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	683a      	ldr	r2, [r7, #0]
 8005ba2:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	689b      	ldr	r3, [r3, #8]
 8005ba8:	2b40      	cmp	r3, #64	@ 0x40
 8005baa:	d108      	bne.n	8005bbe <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	687a      	ldr	r2, [r7, #4]
 8005bb2:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	68ba      	ldr	r2, [r7, #8]
 8005bba:	60da      	str	r2, [r3, #12]
}
 8005bbc:	e007      	b.n	8005bce <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	68ba      	ldr	r2, [r7, #8]
 8005bc4:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	687a      	ldr	r2, [r7, #4]
 8005bcc:	60da      	str	r2, [r3, #12]
}
 8005bce:	bf00      	nop
 8005bd0:	371c      	adds	r7, #28
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd8:	4770      	bx	lr
 8005bda:	bf00      	nop
 8005bdc:	58025408 	.word	0x58025408
 8005be0:	5802541c 	.word	0x5802541c
 8005be4:	58025430 	.word	0x58025430
 8005be8:	58025444 	.word	0x58025444
 8005bec:	58025458 	.word	0x58025458
 8005bf0:	5802546c 	.word	0x5802546c
 8005bf4:	58025480 	.word	0x58025480
 8005bf8:	58025494 	.word	0x58025494

08005bfc <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	b085      	sub	sp, #20
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a42      	ldr	r2, [pc, #264]	@ (8005d14 <DMA_CalcBaseAndBitshift+0x118>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d04a      	beq.n	8005ca4 <DMA_CalcBaseAndBitshift+0xa8>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a41      	ldr	r2, [pc, #260]	@ (8005d18 <DMA_CalcBaseAndBitshift+0x11c>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d045      	beq.n	8005ca4 <DMA_CalcBaseAndBitshift+0xa8>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a3f      	ldr	r2, [pc, #252]	@ (8005d1c <DMA_CalcBaseAndBitshift+0x120>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d040      	beq.n	8005ca4 <DMA_CalcBaseAndBitshift+0xa8>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a3e      	ldr	r2, [pc, #248]	@ (8005d20 <DMA_CalcBaseAndBitshift+0x124>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d03b      	beq.n	8005ca4 <DMA_CalcBaseAndBitshift+0xa8>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a3c      	ldr	r2, [pc, #240]	@ (8005d24 <DMA_CalcBaseAndBitshift+0x128>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d036      	beq.n	8005ca4 <DMA_CalcBaseAndBitshift+0xa8>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4a3b      	ldr	r2, [pc, #236]	@ (8005d28 <DMA_CalcBaseAndBitshift+0x12c>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d031      	beq.n	8005ca4 <DMA_CalcBaseAndBitshift+0xa8>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4a39      	ldr	r2, [pc, #228]	@ (8005d2c <DMA_CalcBaseAndBitshift+0x130>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d02c      	beq.n	8005ca4 <DMA_CalcBaseAndBitshift+0xa8>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4a38      	ldr	r2, [pc, #224]	@ (8005d30 <DMA_CalcBaseAndBitshift+0x134>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d027      	beq.n	8005ca4 <DMA_CalcBaseAndBitshift+0xa8>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4a36      	ldr	r2, [pc, #216]	@ (8005d34 <DMA_CalcBaseAndBitshift+0x138>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d022      	beq.n	8005ca4 <DMA_CalcBaseAndBitshift+0xa8>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4a35      	ldr	r2, [pc, #212]	@ (8005d38 <DMA_CalcBaseAndBitshift+0x13c>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d01d      	beq.n	8005ca4 <DMA_CalcBaseAndBitshift+0xa8>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a33      	ldr	r2, [pc, #204]	@ (8005d3c <DMA_CalcBaseAndBitshift+0x140>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d018      	beq.n	8005ca4 <DMA_CalcBaseAndBitshift+0xa8>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a32      	ldr	r2, [pc, #200]	@ (8005d40 <DMA_CalcBaseAndBitshift+0x144>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d013      	beq.n	8005ca4 <DMA_CalcBaseAndBitshift+0xa8>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a30      	ldr	r2, [pc, #192]	@ (8005d44 <DMA_CalcBaseAndBitshift+0x148>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d00e      	beq.n	8005ca4 <DMA_CalcBaseAndBitshift+0xa8>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4a2f      	ldr	r2, [pc, #188]	@ (8005d48 <DMA_CalcBaseAndBitshift+0x14c>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d009      	beq.n	8005ca4 <DMA_CalcBaseAndBitshift+0xa8>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a2d      	ldr	r2, [pc, #180]	@ (8005d4c <DMA_CalcBaseAndBitshift+0x150>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d004      	beq.n	8005ca4 <DMA_CalcBaseAndBitshift+0xa8>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a2c      	ldr	r2, [pc, #176]	@ (8005d50 <DMA_CalcBaseAndBitshift+0x154>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d101      	bne.n	8005ca8 <DMA_CalcBaseAndBitshift+0xac>
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	e000      	b.n	8005caa <DMA_CalcBaseAndBitshift+0xae>
 8005ca8:	2300      	movs	r3, #0
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d024      	beq.n	8005cf8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	b2db      	uxtb	r3, r3
 8005cb4:	3b10      	subs	r3, #16
 8005cb6:	4a27      	ldr	r2, [pc, #156]	@ (8005d54 <DMA_CalcBaseAndBitshift+0x158>)
 8005cb8:	fba2 2303 	umull	r2, r3, r2, r3
 8005cbc:	091b      	lsrs	r3, r3, #4
 8005cbe:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	f003 0307 	and.w	r3, r3, #7
 8005cc6:	4a24      	ldr	r2, [pc, #144]	@ (8005d58 <DMA_CalcBaseAndBitshift+0x15c>)
 8005cc8:	5cd3      	ldrb	r3, [r2, r3]
 8005cca:	461a      	mov	r2, r3
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	2b03      	cmp	r3, #3
 8005cd4:	d908      	bls.n	8005ce8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	461a      	mov	r2, r3
 8005cdc:	4b1f      	ldr	r3, [pc, #124]	@ (8005d5c <DMA_CalcBaseAndBitshift+0x160>)
 8005cde:	4013      	ands	r3, r2
 8005ce0:	1d1a      	adds	r2, r3, #4
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	659a      	str	r2, [r3, #88]	@ 0x58
 8005ce6:	e00d      	b.n	8005d04 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	461a      	mov	r2, r3
 8005cee:	4b1b      	ldr	r3, [pc, #108]	@ (8005d5c <DMA_CalcBaseAndBitshift+0x160>)
 8005cf0:	4013      	ands	r3, r2
 8005cf2:	687a      	ldr	r2, [r7, #4]
 8005cf4:	6593      	str	r3, [r2, #88]	@ 0x58
 8005cf6:	e005      	b.n	8005d04 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005d08:	4618      	mov	r0, r3
 8005d0a:	3714      	adds	r7, #20
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d12:	4770      	bx	lr
 8005d14:	40020010 	.word	0x40020010
 8005d18:	40020028 	.word	0x40020028
 8005d1c:	40020040 	.word	0x40020040
 8005d20:	40020058 	.word	0x40020058
 8005d24:	40020070 	.word	0x40020070
 8005d28:	40020088 	.word	0x40020088
 8005d2c:	400200a0 	.word	0x400200a0
 8005d30:	400200b8 	.word	0x400200b8
 8005d34:	40020410 	.word	0x40020410
 8005d38:	40020428 	.word	0x40020428
 8005d3c:	40020440 	.word	0x40020440
 8005d40:	40020458 	.word	0x40020458
 8005d44:	40020470 	.word	0x40020470
 8005d48:	40020488 	.word	0x40020488
 8005d4c:	400204a0 	.word	0x400204a0
 8005d50:	400204b8 	.word	0x400204b8
 8005d54:	aaaaaaab 	.word	0xaaaaaaab
 8005d58:	08017818 	.word	0x08017818
 8005d5c:	fffffc00 	.word	0xfffffc00

08005d60 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b085      	sub	sp, #20
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d68:	2300      	movs	r3, #0
 8005d6a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	699b      	ldr	r3, [r3, #24]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d120      	bne.n	8005db6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d78:	2b03      	cmp	r3, #3
 8005d7a:	d858      	bhi.n	8005e2e <DMA_CheckFifoParam+0xce>
 8005d7c:	a201      	add	r2, pc, #4	@ (adr r2, 8005d84 <DMA_CheckFifoParam+0x24>)
 8005d7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d82:	bf00      	nop
 8005d84:	08005d95 	.word	0x08005d95
 8005d88:	08005da7 	.word	0x08005da7
 8005d8c:	08005d95 	.word	0x08005d95
 8005d90:	08005e2f 	.word	0x08005e2f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d98:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d048      	beq.n	8005e32 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005da0:	2301      	movs	r3, #1
 8005da2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005da4:	e045      	b.n	8005e32 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005daa:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005dae:	d142      	bne.n	8005e36 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005db0:	2301      	movs	r3, #1
 8005db2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005db4:	e03f      	b.n	8005e36 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	699b      	ldr	r3, [r3, #24]
 8005dba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005dbe:	d123      	bne.n	8005e08 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dc4:	2b03      	cmp	r3, #3
 8005dc6:	d838      	bhi.n	8005e3a <DMA_CheckFifoParam+0xda>
 8005dc8:	a201      	add	r2, pc, #4	@ (adr r2, 8005dd0 <DMA_CheckFifoParam+0x70>)
 8005dca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dce:	bf00      	nop
 8005dd0:	08005de1 	.word	0x08005de1
 8005dd4:	08005de7 	.word	0x08005de7
 8005dd8:	08005de1 	.word	0x08005de1
 8005ddc:	08005df9 	.word	0x08005df9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005de0:	2301      	movs	r3, #1
 8005de2:	73fb      	strb	r3, [r7, #15]
        break;
 8005de4:	e030      	b.n	8005e48 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dea:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d025      	beq.n	8005e3e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005df2:	2301      	movs	r3, #1
 8005df4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005df6:	e022      	b.n	8005e3e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dfc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005e00:	d11f      	bne.n	8005e42 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005e02:	2301      	movs	r3, #1
 8005e04:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005e06:	e01c      	b.n	8005e42 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e0c:	2b02      	cmp	r3, #2
 8005e0e:	d902      	bls.n	8005e16 <DMA_CheckFifoParam+0xb6>
 8005e10:	2b03      	cmp	r3, #3
 8005e12:	d003      	beq.n	8005e1c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005e14:	e018      	b.n	8005e48 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8005e16:	2301      	movs	r3, #1
 8005e18:	73fb      	strb	r3, [r7, #15]
        break;
 8005e1a:	e015      	b.n	8005e48 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e20:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d00e      	beq.n	8005e46 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005e28:	2301      	movs	r3, #1
 8005e2a:	73fb      	strb	r3, [r7, #15]
    break;
 8005e2c:	e00b      	b.n	8005e46 <DMA_CheckFifoParam+0xe6>
        break;
 8005e2e:	bf00      	nop
 8005e30:	e00a      	b.n	8005e48 <DMA_CheckFifoParam+0xe8>
        break;
 8005e32:	bf00      	nop
 8005e34:	e008      	b.n	8005e48 <DMA_CheckFifoParam+0xe8>
        break;
 8005e36:	bf00      	nop
 8005e38:	e006      	b.n	8005e48 <DMA_CheckFifoParam+0xe8>
        break;
 8005e3a:	bf00      	nop
 8005e3c:	e004      	b.n	8005e48 <DMA_CheckFifoParam+0xe8>
        break;
 8005e3e:	bf00      	nop
 8005e40:	e002      	b.n	8005e48 <DMA_CheckFifoParam+0xe8>
        break;
 8005e42:	bf00      	nop
 8005e44:	e000      	b.n	8005e48 <DMA_CheckFifoParam+0xe8>
    break;
 8005e46:	bf00      	nop
    }
  }

  return status;
 8005e48:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	3714      	adds	r7, #20
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e54:	4770      	bx	lr
 8005e56:	bf00      	nop

08005e58 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b085      	sub	sp, #20
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a38      	ldr	r2, [pc, #224]	@ (8005f4c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d022      	beq.n	8005eb6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a36      	ldr	r2, [pc, #216]	@ (8005f50 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d01d      	beq.n	8005eb6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4a35      	ldr	r2, [pc, #212]	@ (8005f54 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d018      	beq.n	8005eb6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4a33      	ldr	r2, [pc, #204]	@ (8005f58 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d013      	beq.n	8005eb6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a32      	ldr	r2, [pc, #200]	@ (8005f5c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d00e      	beq.n	8005eb6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4a30      	ldr	r2, [pc, #192]	@ (8005f60 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d009      	beq.n	8005eb6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4a2f      	ldr	r2, [pc, #188]	@ (8005f64 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d004      	beq.n	8005eb6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a2d      	ldr	r2, [pc, #180]	@ (8005f68 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d101      	bne.n	8005eba <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	e000      	b.n	8005ebc <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8005eba:	2300      	movs	r3, #0
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d01a      	beq.n	8005ef6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	b2db      	uxtb	r3, r3
 8005ec6:	3b08      	subs	r3, #8
 8005ec8:	4a28      	ldr	r2, [pc, #160]	@ (8005f6c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8005eca:	fba2 2303 	umull	r2, r3, r2, r3
 8005ece:	091b      	lsrs	r3, r3, #4
 8005ed0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005ed2:	68fa      	ldr	r2, [r7, #12]
 8005ed4:	4b26      	ldr	r3, [pc, #152]	@ (8005f70 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8005ed6:	4413      	add	r3, r2
 8005ed8:	009b      	lsls	r3, r3, #2
 8005eda:	461a      	mov	r2, r3
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	4a24      	ldr	r2, [pc, #144]	@ (8005f74 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005ee4:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	f003 031f 	and.w	r3, r3, #31
 8005eec:	2201      	movs	r2, #1
 8005eee:	409a      	lsls	r2, r3
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005ef4:	e024      	b.n	8005f40 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	b2db      	uxtb	r3, r3
 8005efc:	3b10      	subs	r3, #16
 8005efe:	4a1e      	ldr	r2, [pc, #120]	@ (8005f78 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005f00:	fba2 2303 	umull	r2, r3, r2, r3
 8005f04:	091b      	lsrs	r3, r3, #4
 8005f06:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	4a1c      	ldr	r2, [pc, #112]	@ (8005f7c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d806      	bhi.n	8005f1e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	4a1b      	ldr	r2, [pc, #108]	@ (8005f80 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d902      	bls.n	8005f1e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	3308      	adds	r3, #8
 8005f1c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005f1e:	68fa      	ldr	r2, [r7, #12]
 8005f20:	4b18      	ldr	r3, [pc, #96]	@ (8005f84 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005f22:	4413      	add	r3, r2
 8005f24:	009b      	lsls	r3, r3, #2
 8005f26:	461a      	mov	r2, r3
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	4a16      	ldr	r2, [pc, #88]	@ (8005f88 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005f30:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	f003 031f 	and.w	r3, r3, #31
 8005f38:	2201      	movs	r2, #1
 8005f3a:	409a      	lsls	r2, r3
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005f40:	bf00      	nop
 8005f42:	3714      	adds	r7, #20
 8005f44:	46bd      	mov	sp, r7
 8005f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4a:	4770      	bx	lr
 8005f4c:	58025408 	.word	0x58025408
 8005f50:	5802541c 	.word	0x5802541c
 8005f54:	58025430 	.word	0x58025430
 8005f58:	58025444 	.word	0x58025444
 8005f5c:	58025458 	.word	0x58025458
 8005f60:	5802546c 	.word	0x5802546c
 8005f64:	58025480 	.word	0x58025480
 8005f68:	58025494 	.word	0x58025494
 8005f6c:	cccccccd 	.word	0xcccccccd
 8005f70:	16009600 	.word	0x16009600
 8005f74:	58025880 	.word	0x58025880
 8005f78:	aaaaaaab 	.word	0xaaaaaaab
 8005f7c:	400204b8 	.word	0x400204b8
 8005f80:	4002040f 	.word	0x4002040f
 8005f84:	10008200 	.word	0x10008200
 8005f88:	40020880 	.word	0x40020880

08005f8c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b085      	sub	sp, #20
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	b2db      	uxtb	r3, r3
 8005f9a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d04a      	beq.n	8006038 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	2b08      	cmp	r3, #8
 8005fa6:	d847      	bhi.n	8006038 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a25      	ldr	r2, [pc, #148]	@ (8006044 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d022      	beq.n	8005ff8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a24      	ldr	r2, [pc, #144]	@ (8006048 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d01d      	beq.n	8005ff8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a22      	ldr	r2, [pc, #136]	@ (800604c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d018      	beq.n	8005ff8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a21      	ldr	r2, [pc, #132]	@ (8006050 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d013      	beq.n	8005ff8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a1f      	ldr	r2, [pc, #124]	@ (8006054 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d00e      	beq.n	8005ff8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a1e      	ldr	r2, [pc, #120]	@ (8006058 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d009      	beq.n	8005ff8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a1c      	ldr	r2, [pc, #112]	@ (800605c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d004      	beq.n	8005ff8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4a1b      	ldr	r2, [pc, #108]	@ (8006060 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d101      	bne.n	8005ffc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	e000      	b.n	8005ffe <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d00a      	beq.n	8006018 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8006002:	68fa      	ldr	r2, [r7, #12]
 8006004:	4b17      	ldr	r3, [pc, #92]	@ (8006064 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8006006:	4413      	add	r3, r2
 8006008:	009b      	lsls	r3, r3, #2
 800600a:	461a      	mov	r2, r3
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	4a15      	ldr	r2, [pc, #84]	@ (8006068 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8006014:	671a      	str	r2, [r3, #112]	@ 0x70
 8006016:	e009      	b.n	800602c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006018:	68fa      	ldr	r2, [r7, #12]
 800601a:	4b14      	ldr	r3, [pc, #80]	@ (800606c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800601c:	4413      	add	r3, r2
 800601e:	009b      	lsls	r3, r3, #2
 8006020:	461a      	mov	r2, r3
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	4a11      	ldr	r2, [pc, #68]	@ (8006070 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800602a:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	3b01      	subs	r3, #1
 8006030:	2201      	movs	r2, #1
 8006032:	409a      	lsls	r2, r3
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8006038:	bf00      	nop
 800603a:	3714      	adds	r7, #20
 800603c:	46bd      	mov	sp, r7
 800603e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006042:	4770      	bx	lr
 8006044:	58025408 	.word	0x58025408
 8006048:	5802541c 	.word	0x5802541c
 800604c:	58025430 	.word	0x58025430
 8006050:	58025444 	.word	0x58025444
 8006054:	58025458 	.word	0x58025458
 8006058:	5802546c 	.word	0x5802546c
 800605c:	58025480 	.word	0x58025480
 8006060:	58025494 	.word	0x58025494
 8006064:	1600963f 	.word	0x1600963f
 8006068:	58025940 	.word	0x58025940
 800606c:	1000823f 	.word	0x1000823f
 8006070:	40020940 	.word	0x40020940

08006074 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress: The second memory Buffer address in case of multi buffer Transfer
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b086      	sub	sp, #24
 8006078:	af00      	add	r7, sp, #0
 800607a:	60f8      	str	r0, [r7, #12]
 800607c:	60b9      	str	r1, [r7, #8]
 800607e:	607a      	str	r2, [r7, #4]
 8006080:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006082:	2300      	movs	r3, #0
 8006084:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Memory-to-memory transfer not supported in double buffering mode */
  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	689b      	ldr	r3, [r3, #8]
 800608a:	2b80      	cmp	r3, #128	@ 0x80
 800608c:	d105      	bne.n	800609a <HAL_DMAEx_MultiBufferStart_IT+0x26>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006094:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8006096:	2301      	movs	r3, #1
 8006098:	e315      	b.n	80066c6 <HAL_DMAEx_MultiBufferStart_IT+0x652>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80060a0:	2b01      	cmp	r3, #1
 80060a2:	d101      	bne.n	80060a8 <HAL_DMAEx_MultiBufferStart_IT+0x34>
 80060a4:	2302      	movs	r3, #2
 80060a6:	e30e      	b.n	80066c6 <HAL_DMAEx_MultiBufferStart_IT+0x652>
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	2201      	movs	r2, #1
 80060ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80060b6:	b2db      	uxtb	r3, r3
 80060b8:	2b01      	cmp	r3, #1
 80060ba:	f040 82fd 	bne.w	80066b8 <HAL_DMAEx_MultiBufferStart_IT+0x644>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	2202      	movs	r2, #2
 80060c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	2200      	movs	r2, #0
 80060ca:	655a      	str	r2, [r3, #84]	@ 0x54

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4a82      	ldr	r2, [pc, #520]	@ (80062dc <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d04a      	beq.n	800616c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4a81      	ldr	r2, [pc, #516]	@ (80062e0 <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d045      	beq.n	800616c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4a7f      	ldr	r2, [pc, #508]	@ (80062e4 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d040      	beq.n	800616c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a7e      	ldr	r2, [pc, #504]	@ (80062e8 <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d03b      	beq.n	800616c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4a7c      	ldr	r2, [pc, #496]	@ (80062ec <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d036      	beq.n	800616c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	4a7b      	ldr	r2, [pc, #492]	@ (80062f0 <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d031      	beq.n	800616c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4a79      	ldr	r2, [pc, #484]	@ (80062f4 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d02c      	beq.n	800616c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	4a78      	ldr	r2, [pc, #480]	@ (80062f8 <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d027      	beq.n	800616c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a76      	ldr	r2, [pc, #472]	@ (80062fc <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d022      	beq.n	800616c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4a75      	ldr	r2, [pc, #468]	@ (8006300 <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d01d      	beq.n	800616c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4a73      	ldr	r2, [pc, #460]	@ (8006304 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d018      	beq.n	800616c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4a72      	ldr	r2, [pc, #456]	@ (8006308 <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d013      	beq.n	800616c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4a70      	ldr	r2, [pc, #448]	@ (800630c <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d00e      	beq.n	800616c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4a6f      	ldr	r2, [pc, #444]	@ (8006310 <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d009      	beq.n	800616c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4a6d      	ldr	r2, [pc, #436]	@ (8006314 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d004      	beq.n	800616c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4a6c      	ldr	r2, [pc, #432]	@ (8006318 <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d101      	bne.n	8006170 <HAL_DMAEx_MultiBufferStart_IT+0xfc>
 800616c:	2301      	movs	r3, #1
 800616e:	e000      	b.n	8006172 <HAL_DMAEx_MultiBufferStart_IT+0xfe>
 8006170:	2300      	movs	r3, #0
 8006172:	2b00      	cmp	r3, #0
 8006174:	d018      	beq.n	80061a8 <HAL_DMAEx_MultiBufferStart_IT+0x134>
    {
      /* Enable the Double buffer mode */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR |= DMA_SxCR_DBM;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	681a      	ldr	r2, [r3, #0]
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8006184:	601a      	str	r2, [r3, #0]

      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = SecondMemAddress;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	683a      	ldr	r2, [r7, #0]
 800618c:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 8U));
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006192:	3308      	adds	r3, #8
 8006194:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800619a:	f003 031f 	and.w	r3, r3, #31
 800619e:	223f      	movs	r2, #63	@ 0x3f
 80061a0:	409a      	lsls	r2, r3
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	601a      	str	r2, [r3, #0]
 80061a6:	e018      	b.n	80061da <HAL_DMAEx_MultiBufferStart_IT+0x166>
    }
    else /* BDMA instance(s) */
    {
      /* Enable the Double buffer mode */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR |= (BDMA_CCR_DBM | BDMA_CCR_CIRC);
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	6819      	ldr	r1, [r3, #0]
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681a      	ldr	r2, [r3, #0]
 80061b2:	f248 0320 	movw	r3, #32800	@ 0x8020
 80061b6:	430b      	orrs	r3, r1
 80061b8:	6013      	str	r3, [r2, #0]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = SecondMemAddress;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	683a      	ldr	r2, [r7, #0]
 80061c0:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 4U));
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061c6:	3304      	adds	r3, #4
 80061c8:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061ce:	f003 031f 	and.w	r3, r3, #31
 80061d2:	2201      	movs	r2, #1
 80061d4:	409a      	lsls	r2, r3
 80061d6:	693b      	ldr	r3, [r7, #16]
 80061d8:	601a      	str	r2, [r3, #0]
    }

    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80061da:	6a3b      	ldr	r3, [r7, #32]
 80061dc:	687a      	ldr	r2, [r7, #4]
 80061de:	68b9      	ldr	r1, [r7, #8]
 80061e0:	68f8      	ldr	r0, [r7, #12]
 80061e2:	f000 fb41 	bl	8006868 <DMA_MultiBufferSetConfig>

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4a3c      	ldr	r2, [pc, #240]	@ (80062dc <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d072      	beq.n	80062d6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4a3a      	ldr	r2, [pc, #232]	@ (80062e0 <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d06d      	beq.n	80062d6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4a39      	ldr	r2, [pc, #228]	@ (80062e4 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d068      	beq.n	80062d6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4a37      	ldr	r2, [pc, #220]	@ (80062e8 <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d063      	beq.n	80062d6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4a36      	ldr	r2, [pc, #216]	@ (80062ec <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d05e      	beq.n	80062d6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4a34      	ldr	r2, [pc, #208]	@ (80062f0 <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d059      	beq.n	80062d6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4a33      	ldr	r2, [pc, #204]	@ (80062f4 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d054      	beq.n	80062d6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4a31      	ldr	r2, [pc, #196]	@ (80062f8 <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d04f      	beq.n	80062d6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4a30      	ldr	r2, [pc, #192]	@ (80062fc <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d04a      	beq.n	80062d6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4a2e      	ldr	r2, [pc, #184]	@ (8006300 <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d045      	beq.n	80062d6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a2d      	ldr	r2, [pc, #180]	@ (8006304 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d040      	beq.n	80062d6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4a2b      	ldr	r2, [pc, #172]	@ (8006308 <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d03b      	beq.n	80062d6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4a2a      	ldr	r2, [pc, #168]	@ (800630c <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d036      	beq.n	80062d6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a28      	ldr	r2, [pc, #160]	@ (8006310 <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d031      	beq.n	80062d6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4a27      	ldr	r2, [pc, #156]	@ (8006314 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d02c      	beq.n	80062d6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a25      	ldr	r2, [pc, #148]	@ (8006318 <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d027      	beq.n	80062d6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a24      	ldr	r2, [pc, #144]	@ (800631c <HAL_DMAEx_MultiBufferStart_IT+0x2a8>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d022      	beq.n	80062d6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a22      	ldr	r2, [pc, #136]	@ (8006320 <HAL_DMAEx_MultiBufferStart_IT+0x2ac>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d01d      	beq.n	80062d6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4a21      	ldr	r2, [pc, #132]	@ (8006324 <HAL_DMAEx_MultiBufferStart_IT+0x2b0>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d018      	beq.n	80062d6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	4a1f      	ldr	r2, [pc, #124]	@ (8006328 <HAL_DMAEx_MultiBufferStart_IT+0x2b4>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d013      	beq.n	80062d6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4a1e      	ldr	r2, [pc, #120]	@ (800632c <HAL_DMAEx_MultiBufferStart_IT+0x2b8>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d00e      	beq.n	80062d6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4a1c      	ldr	r2, [pc, #112]	@ (8006330 <HAL_DMAEx_MultiBufferStart_IT+0x2bc>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d009      	beq.n	80062d6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4a1b      	ldr	r2, [pc, #108]	@ (8006334 <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d004      	beq.n	80062d6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4a19      	ldr	r2, [pc, #100]	@ (8006338 <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d132      	bne.n	800633c <HAL_DMAEx_MultiBufferStart_IT+0x2c8>
 80062d6:	2301      	movs	r3, #1
 80062d8:	e031      	b.n	800633e <HAL_DMAEx_MultiBufferStart_IT+0x2ca>
 80062da:	bf00      	nop
 80062dc:	40020010 	.word	0x40020010
 80062e0:	40020028 	.word	0x40020028
 80062e4:	40020040 	.word	0x40020040
 80062e8:	40020058 	.word	0x40020058
 80062ec:	40020070 	.word	0x40020070
 80062f0:	40020088 	.word	0x40020088
 80062f4:	400200a0 	.word	0x400200a0
 80062f8:	400200b8 	.word	0x400200b8
 80062fc:	40020410 	.word	0x40020410
 8006300:	40020428 	.word	0x40020428
 8006304:	40020440 	.word	0x40020440
 8006308:	40020458 	.word	0x40020458
 800630c:	40020470 	.word	0x40020470
 8006310:	40020488 	.word	0x40020488
 8006314:	400204a0 	.word	0x400204a0
 8006318:	400204b8 	.word	0x400204b8
 800631c:	58025408 	.word	0x58025408
 8006320:	5802541c 	.word	0x5802541c
 8006324:	58025430 	.word	0x58025430
 8006328:	58025444 	.word	0x58025444
 800632c:	58025458 	.word	0x58025458
 8006330:	5802546c 	.word	0x5802546c
 8006334:	58025480 	.word	0x58025480
 8006338:	58025494 	.word	0x58025494
 800633c:	2300      	movs	r3, #0
 800633e:	2b00      	cmp	r3, #0
 8006340:	d00d      	beq.n	800635e <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006346:	68fa      	ldr	r2, [r7, #12]
 8006348:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800634a:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006350:	2b00      	cmp	r3, #0
 8006352:	d004      	beq.n	800635e <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
      {
        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006358:	68fa      	ldr	r2, [r7, #12]
 800635a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800635c:	605a      	str	r2, [r3, #4]
      }
    }

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	4a3b      	ldr	r2, [pc, #236]	@ (8006450 <HAL_DMAEx_MultiBufferStart_IT+0x3dc>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d04a      	beq.n	80063fe <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4a39      	ldr	r2, [pc, #228]	@ (8006454 <HAL_DMAEx_MultiBufferStart_IT+0x3e0>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d045      	beq.n	80063fe <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4a38      	ldr	r2, [pc, #224]	@ (8006458 <HAL_DMAEx_MultiBufferStart_IT+0x3e4>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d040      	beq.n	80063fe <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4a36      	ldr	r2, [pc, #216]	@ (800645c <HAL_DMAEx_MultiBufferStart_IT+0x3e8>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d03b      	beq.n	80063fe <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4a35      	ldr	r2, [pc, #212]	@ (8006460 <HAL_DMAEx_MultiBufferStart_IT+0x3ec>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d036      	beq.n	80063fe <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4a33      	ldr	r2, [pc, #204]	@ (8006464 <HAL_DMAEx_MultiBufferStart_IT+0x3f0>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d031      	beq.n	80063fe <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	4a32      	ldr	r2, [pc, #200]	@ (8006468 <HAL_DMAEx_MultiBufferStart_IT+0x3f4>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d02c      	beq.n	80063fe <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4a30      	ldr	r2, [pc, #192]	@ (800646c <HAL_DMAEx_MultiBufferStart_IT+0x3f8>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d027      	beq.n	80063fe <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4a2f      	ldr	r2, [pc, #188]	@ (8006470 <HAL_DMAEx_MultiBufferStart_IT+0x3fc>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d022      	beq.n	80063fe <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4a2d      	ldr	r2, [pc, #180]	@ (8006474 <HAL_DMAEx_MultiBufferStart_IT+0x400>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d01d      	beq.n	80063fe <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4a2c      	ldr	r2, [pc, #176]	@ (8006478 <HAL_DMAEx_MultiBufferStart_IT+0x404>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d018      	beq.n	80063fe <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	4a2a      	ldr	r2, [pc, #168]	@ (800647c <HAL_DMAEx_MultiBufferStart_IT+0x408>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d013      	beq.n	80063fe <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4a29      	ldr	r2, [pc, #164]	@ (8006480 <HAL_DMAEx_MultiBufferStart_IT+0x40c>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d00e      	beq.n	80063fe <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4a27      	ldr	r2, [pc, #156]	@ (8006484 <HAL_DMAEx_MultiBufferStart_IT+0x410>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d009      	beq.n	80063fe <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	4a26      	ldr	r2, [pc, #152]	@ (8006488 <HAL_DMAEx_MultiBufferStart_IT+0x414>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d004      	beq.n	80063fe <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4a24      	ldr	r2, [pc, #144]	@ (800648c <HAL_DMAEx_MultiBufferStart_IT+0x418>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d101      	bne.n	8006402 <HAL_DMAEx_MultiBufferStart_IT+0x38e>
 80063fe:	2301      	movs	r3, #1
 8006400:	e000      	b.n	8006404 <HAL_DMAEx_MultiBufferStart_IT+0x390>
 8006402:	2300      	movs	r3, #0
 8006404:	2b00      	cmp	r3, #0
 8006406:	d043      	beq.n	8006490 <HAL_DMAEx_MultiBufferStart_IT+0x41c>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f023 021e 	bic.w	r2, r3, #30
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f042 0216 	orr.w	r2, r2, #22
 800641a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR |= DMA_IT_FE;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	695a      	ldr	r2, [r3, #20]
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800642a:	615a      	str	r2, [r3, #20]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006430:	2b00      	cmp	r3, #0
 8006432:	d103      	bne.n	800643c <HAL_DMAEx_MultiBufferStart_IT+0x3c8>
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006438:	2b00      	cmp	r3, #0
 800643a:	d043      	beq.n	80064c4 <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	681a      	ldr	r2, [r3, #0]
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f042 0208 	orr.w	r2, r2, #8
 800644a:	601a      	str	r2, [r3, #0]
 800644c:	e03a      	b.n	80064c4 <HAL_DMAEx_MultiBufferStart_IT+0x450>
 800644e:	bf00      	nop
 8006450:	40020010 	.word	0x40020010
 8006454:	40020028 	.word	0x40020028
 8006458:	40020040 	.word	0x40020040
 800645c:	40020058 	.word	0x40020058
 8006460:	40020070 	.word	0x40020070
 8006464:	40020088 	.word	0x40020088
 8006468:	400200a0 	.word	0x400200a0
 800646c:	400200b8 	.word	0x400200b8
 8006470:	40020410 	.word	0x40020410
 8006474:	40020428 	.word	0x40020428
 8006478:	40020440 	.word	0x40020440
 800647c:	40020458 	.word	0x40020458
 8006480:	40020470 	.word	0x40020470
 8006484:	40020488 	.word	0x40020488
 8006488:	400204a0 	.word	0x400204a0
 800648c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA instance(s) */
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f023 020e 	bic.w	r2, r3, #14
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f042 020a 	orr.w	r2, r2, #10
 80064a2:	601a      	str	r2, [r3, #0]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d103      	bne.n	80064b4 <HAL_DMAEx_MultiBufferStart_IT+0x440>
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d007      	beq.n	80064c4 <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	681a      	ldr	r2, [r3, #0]
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f042 0204 	orr.w	r2, r2, #4
 80064c2:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4a81      	ldr	r2, [pc, #516]	@ (80066d0 <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d072      	beq.n	80065b4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4a80      	ldr	r2, [pc, #512]	@ (80066d4 <HAL_DMAEx_MultiBufferStart_IT+0x660>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d06d      	beq.n	80065b4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4a7e      	ldr	r2, [pc, #504]	@ (80066d8 <HAL_DMAEx_MultiBufferStart_IT+0x664>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d068      	beq.n	80065b4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4a7d      	ldr	r2, [pc, #500]	@ (80066dc <HAL_DMAEx_MultiBufferStart_IT+0x668>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d063      	beq.n	80065b4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4a7b      	ldr	r2, [pc, #492]	@ (80066e0 <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d05e      	beq.n	80065b4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a7a      	ldr	r2, [pc, #488]	@ (80066e4 <HAL_DMAEx_MultiBufferStart_IT+0x670>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d059      	beq.n	80065b4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4a78      	ldr	r2, [pc, #480]	@ (80066e8 <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d054      	beq.n	80065b4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4a77      	ldr	r2, [pc, #476]	@ (80066ec <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d04f      	beq.n	80065b4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4a75      	ldr	r2, [pc, #468]	@ (80066f0 <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d04a      	beq.n	80065b4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4a74      	ldr	r2, [pc, #464]	@ (80066f4 <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d045      	beq.n	80065b4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4a72      	ldr	r2, [pc, #456]	@ (80066f8 <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d040      	beq.n	80065b4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4a71      	ldr	r2, [pc, #452]	@ (80066fc <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d03b      	beq.n	80065b4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4a6f      	ldr	r2, [pc, #444]	@ (8006700 <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d036      	beq.n	80065b4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4a6e      	ldr	r2, [pc, #440]	@ (8006704 <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d031      	beq.n	80065b4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4a6c      	ldr	r2, [pc, #432]	@ (8006708 <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d02c      	beq.n	80065b4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4a6b      	ldr	r2, [pc, #428]	@ (800670c <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d027      	beq.n	80065b4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a69      	ldr	r2, [pc, #420]	@ (8006710 <HAL_DMAEx_MultiBufferStart_IT+0x69c>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d022      	beq.n	80065b4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4a68      	ldr	r2, [pc, #416]	@ (8006714 <HAL_DMAEx_MultiBufferStart_IT+0x6a0>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d01d      	beq.n	80065b4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4a66      	ldr	r2, [pc, #408]	@ (8006718 <HAL_DMAEx_MultiBufferStart_IT+0x6a4>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d018      	beq.n	80065b4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4a65      	ldr	r2, [pc, #404]	@ (800671c <HAL_DMAEx_MultiBufferStart_IT+0x6a8>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d013      	beq.n	80065b4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4a63      	ldr	r2, [pc, #396]	@ (8006720 <HAL_DMAEx_MultiBufferStart_IT+0x6ac>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d00e      	beq.n	80065b4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4a62      	ldr	r2, [pc, #392]	@ (8006724 <HAL_DMAEx_MultiBufferStart_IT+0x6b0>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d009      	beq.n	80065b4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a60      	ldr	r2, [pc, #384]	@ (8006728 <HAL_DMAEx_MultiBufferStart_IT+0x6b4>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d004      	beq.n	80065b4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	4a5f      	ldr	r2, [pc, #380]	@ (800672c <HAL_DMAEx_MultiBufferStart_IT+0x6b8>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d101      	bne.n	80065b8 <HAL_DMAEx_MultiBufferStart_IT+0x544>
 80065b4:	2301      	movs	r3, #1
 80065b6:	e000      	b.n	80065ba <HAL_DMAEx_MultiBufferStart_IT+0x546>
 80065b8:	2300      	movs	r3, #0
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d01a      	beq.n	80065f4 <HAL_DMAEx_MultiBufferStart_IT+0x580>
    {
      /* Check if DMAMUX Synchronization is enabled*/
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d007      	beq.n	80065dc <HAL_DMAEx_MultiBufferStart_IT+0x568>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80065d0:	681a      	ldr	r2, [r3, #0]
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80065d6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80065da:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d007      	beq.n	80065f4 <HAL_DMAEx_MultiBufferStart_IT+0x580>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT*/
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80065e8:	681a      	ldr	r2, [r3, #0]
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80065ee:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80065f2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma);
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4a35      	ldr	r2, [pc, #212]	@ (80066d0 <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d04a      	beq.n	8006694 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	4a34      	ldr	r2, [pc, #208]	@ (80066d4 <HAL_DMAEx_MultiBufferStart_IT+0x660>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d045      	beq.n	8006694 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4a32      	ldr	r2, [pc, #200]	@ (80066d8 <HAL_DMAEx_MultiBufferStart_IT+0x664>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d040      	beq.n	8006694 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4a31      	ldr	r2, [pc, #196]	@ (80066dc <HAL_DMAEx_MultiBufferStart_IT+0x668>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d03b      	beq.n	8006694 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4a2f      	ldr	r2, [pc, #188]	@ (80066e0 <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d036      	beq.n	8006694 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4a2e      	ldr	r2, [pc, #184]	@ (80066e4 <HAL_DMAEx_MultiBufferStart_IT+0x670>)
 800662c:	4293      	cmp	r3, r2
 800662e:	d031      	beq.n	8006694 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4a2c      	ldr	r2, [pc, #176]	@ (80066e8 <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d02c      	beq.n	8006694 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4a2b      	ldr	r2, [pc, #172]	@ (80066ec <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d027      	beq.n	8006694 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4a29      	ldr	r2, [pc, #164]	@ (80066f0 <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d022      	beq.n	8006694 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4a28      	ldr	r2, [pc, #160]	@ (80066f4 <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d01d      	beq.n	8006694 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4a26      	ldr	r2, [pc, #152]	@ (80066f8 <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d018      	beq.n	8006694 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4a25      	ldr	r2, [pc, #148]	@ (80066fc <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d013      	beq.n	8006694 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4a23      	ldr	r2, [pc, #140]	@ (8006700 <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d00e      	beq.n	8006694 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4a22      	ldr	r2, [pc, #136]	@ (8006704 <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d009      	beq.n	8006694 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4a20      	ldr	r2, [pc, #128]	@ (8006708 <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d004      	beq.n	8006694 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4a1f      	ldr	r2, [pc, #124]	@ (800670c <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d108      	bne.n	80066a6 <HAL_DMAEx_MultiBufferStart_IT+0x632>
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	681a      	ldr	r2, [r3, #0]
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f042 0201 	orr.w	r2, r2, #1
 80066a2:	601a      	str	r2, [r3, #0]
 80066a4:	e00e      	b.n	80066c4 <HAL_DMAEx_MultiBufferStart_IT+0x650>
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	681a      	ldr	r2, [r3, #0]
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f042 0201 	orr.w	r2, r2, #1
 80066b4:	601a      	str	r2, [r3, #0]
 80066b6:	e005      	b.n	80066c4 <HAL_DMAEx_MultiBufferStart_IT+0x650>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80066be:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return error status */
    status = HAL_ERROR;
 80066c0:	2301      	movs	r3, #1
 80066c2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80066c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80066c6:	4618      	mov	r0, r3
 80066c8:	3718      	adds	r7, #24
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd80      	pop	{r7, pc}
 80066ce:	bf00      	nop
 80066d0:	40020010 	.word	0x40020010
 80066d4:	40020028 	.word	0x40020028
 80066d8:	40020040 	.word	0x40020040
 80066dc:	40020058 	.word	0x40020058
 80066e0:	40020070 	.word	0x40020070
 80066e4:	40020088 	.word	0x40020088
 80066e8:	400200a0 	.word	0x400200a0
 80066ec:	400200b8 	.word	0x400200b8
 80066f0:	40020410 	.word	0x40020410
 80066f4:	40020428 	.word	0x40020428
 80066f8:	40020440 	.word	0x40020440
 80066fc:	40020458 	.word	0x40020458
 8006700:	40020470 	.word	0x40020470
 8006704:	40020488 	.word	0x40020488
 8006708:	400204a0 	.word	0x400204a0
 800670c:	400204b8 	.word	0x400204b8
 8006710:	58025408 	.word	0x58025408
 8006714:	5802541c 	.word	0x5802541c
 8006718:	58025430 	.word	0x58025430
 800671c:	58025444 	.word	0x58025444
 8006720:	58025458 	.word	0x58025458
 8006724:	5802546c 	.word	0x5802546c
 8006728:	58025480 	.word	0x58025480
 800672c:	58025494 	.word	0x58025494

08006730 <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 8006730:	b480      	push	{r7}
 8006732:	b085      	sub	sp, #20
 8006734:	af00      	add	r7, sp, #0
 8006736:	60f8      	str	r0, [r7, #12]
 8006738:	60b9      	str	r1, [r7, #8]
 800673a:	4613      	mov	r3, r2
 800673c:	71fb      	strb	r3, [r7, #7]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	4a39      	ldr	r2, [pc, #228]	@ (8006828 <HAL_DMAEx_ChangeMemory+0xf8>)
 8006744:	4293      	cmp	r3, r2
 8006746:	d04a      	beq.n	80067de <HAL_DMAEx_ChangeMemory+0xae>
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	4a37      	ldr	r2, [pc, #220]	@ (800682c <HAL_DMAEx_ChangeMemory+0xfc>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d045      	beq.n	80067de <HAL_DMAEx_ChangeMemory+0xae>
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	4a36      	ldr	r2, [pc, #216]	@ (8006830 <HAL_DMAEx_ChangeMemory+0x100>)
 8006758:	4293      	cmp	r3, r2
 800675a:	d040      	beq.n	80067de <HAL_DMAEx_ChangeMemory+0xae>
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	4a34      	ldr	r2, [pc, #208]	@ (8006834 <HAL_DMAEx_ChangeMemory+0x104>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d03b      	beq.n	80067de <HAL_DMAEx_ChangeMemory+0xae>
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	4a33      	ldr	r2, [pc, #204]	@ (8006838 <HAL_DMAEx_ChangeMemory+0x108>)
 800676c:	4293      	cmp	r3, r2
 800676e:	d036      	beq.n	80067de <HAL_DMAEx_ChangeMemory+0xae>
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	4a31      	ldr	r2, [pc, #196]	@ (800683c <HAL_DMAEx_ChangeMemory+0x10c>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d031      	beq.n	80067de <HAL_DMAEx_ChangeMemory+0xae>
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	4a30      	ldr	r2, [pc, #192]	@ (8006840 <HAL_DMAEx_ChangeMemory+0x110>)
 8006780:	4293      	cmp	r3, r2
 8006782:	d02c      	beq.n	80067de <HAL_DMAEx_ChangeMemory+0xae>
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	4a2e      	ldr	r2, [pc, #184]	@ (8006844 <HAL_DMAEx_ChangeMemory+0x114>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d027      	beq.n	80067de <HAL_DMAEx_ChangeMemory+0xae>
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	4a2d      	ldr	r2, [pc, #180]	@ (8006848 <HAL_DMAEx_ChangeMemory+0x118>)
 8006794:	4293      	cmp	r3, r2
 8006796:	d022      	beq.n	80067de <HAL_DMAEx_ChangeMemory+0xae>
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	4a2b      	ldr	r2, [pc, #172]	@ (800684c <HAL_DMAEx_ChangeMemory+0x11c>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d01d      	beq.n	80067de <HAL_DMAEx_ChangeMemory+0xae>
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	4a2a      	ldr	r2, [pc, #168]	@ (8006850 <HAL_DMAEx_ChangeMemory+0x120>)
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d018      	beq.n	80067de <HAL_DMAEx_ChangeMemory+0xae>
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4a28      	ldr	r2, [pc, #160]	@ (8006854 <HAL_DMAEx_ChangeMemory+0x124>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d013      	beq.n	80067de <HAL_DMAEx_ChangeMemory+0xae>
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4a27      	ldr	r2, [pc, #156]	@ (8006858 <HAL_DMAEx_ChangeMemory+0x128>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d00e      	beq.n	80067de <HAL_DMAEx_ChangeMemory+0xae>
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4a25      	ldr	r2, [pc, #148]	@ (800685c <HAL_DMAEx_ChangeMemory+0x12c>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d009      	beq.n	80067de <HAL_DMAEx_ChangeMemory+0xae>
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	4a24      	ldr	r2, [pc, #144]	@ (8006860 <HAL_DMAEx_ChangeMemory+0x130>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d004      	beq.n	80067de <HAL_DMAEx_ChangeMemory+0xae>
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	4a22      	ldr	r2, [pc, #136]	@ (8006864 <HAL_DMAEx_ChangeMemory+0x134>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d101      	bne.n	80067e2 <HAL_DMAEx_ChangeMemory+0xb2>
 80067de:	2301      	movs	r3, #1
 80067e0:	e000      	b.n	80067e4 <HAL_DMAEx_ChangeMemory+0xb4>
 80067e2:	2300      	movs	r3, #0
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d00c      	beq.n	8006802 <HAL_DMAEx_ChangeMemory+0xd2>
  {
    if(memory == MEMORY0)
 80067e8:	79fb      	ldrb	r3, [r7, #7]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d104      	bne.n	80067f8 <HAL_DMAEx_ChangeMemory+0xc8>
    {
      /* change the memory0 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = Address;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	68ba      	ldr	r2, [r7, #8]
 80067f4:	60da      	str	r2, [r3, #12]
 80067f6:	e010      	b.n	800681a <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = Address;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	68ba      	ldr	r2, [r7, #8]
 80067fe:	611a      	str	r2, [r3, #16]
 8006800:	e00b      	b.n	800681a <HAL_DMAEx_ChangeMemory+0xea>
    }
  }
  else /* BDMA instance(s) */
  {
    if(memory == MEMORY0)
 8006802:	79fb      	ldrb	r3, [r7, #7]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d104      	bne.n	8006812 <HAL_DMAEx_ChangeMemory+0xe2>
    {
      /* change the memory0 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = Address;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	68ba      	ldr	r2, [r7, #8]
 800680e:	60da      	str	r2, [r3, #12]
 8006810:	e003      	b.n	800681a <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = Address;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	68ba      	ldr	r2, [r7, #8]
 8006818:	611a      	str	r2, [r3, #16]
    }
  }

  return HAL_OK;
 800681a:	2300      	movs	r3, #0
}
 800681c:	4618      	mov	r0, r3
 800681e:	3714      	adds	r7, #20
 8006820:	46bd      	mov	sp, r7
 8006822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006826:	4770      	bx	lr
 8006828:	40020010 	.word	0x40020010
 800682c:	40020028 	.word	0x40020028
 8006830:	40020040 	.word	0x40020040
 8006834:	40020058 	.word	0x40020058
 8006838:	40020070 	.word	0x40020070
 800683c:	40020088 	.word	0x40020088
 8006840:	400200a0 	.word	0x400200a0
 8006844:	400200b8 	.word	0x400200b8
 8006848:	40020410 	.word	0x40020410
 800684c:	40020428 	.word	0x40020428
 8006850:	40020440 	.word	0x40020440
 8006854:	40020458 	.word	0x40020458
 8006858:	40020470 	.word	0x40020470
 800685c:	40020488 	.word	0x40020488
 8006860:	400204a0 	.word	0x400204a0
 8006864:	400204b8 	.word	0x400204b8

08006868 <DMA_MultiBufferSetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006868:	b480      	push	{r7}
 800686a:	b085      	sub	sp, #20
 800686c:	af00      	add	r7, sp, #0
 800686e:	60f8      	str	r0, [r7, #12]
 8006870:	60b9      	str	r1, [r7, #8]
 8006872:	607a      	str	r2, [r7, #4]
 8006874:	603b      	str	r3, [r7, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	4a46      	ldr	r2, [pc, #280]	@ (8006994 <DMA_MultiBufferSetConfig+0x12c>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d04a      	beq.n	8006916 <DMA_MultiBufferSetConfig+0xae>
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	4a44      	ldr	r2, [pc, #272]	@ (8006998 <DMA_MultiBufferSetConfig+0x130>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d045      	beq.n	8006916 <DMA_MultiBufferSetConfig+0xae>
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4a43      	ldr	r2, [pc, #268]	@ (800699c <DMA_MultiBufferSetConfig+0x134>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d040      	beq.n	8006916 <DMA_MultiBufferSetConfig+0xae>
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4a41      	ldr	r2, [pc, #260]	@ (80069a0 <DMA_MultiBufferSetConfig+0x138>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d03b      	beq.n	8006916 <DMA_MultiBufferSetConfig+0xae>
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	4a40      	ldr	r2, [pc, #256]	@ (80069a4 <DMA_MultiBufferSetConfig+0x13c>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d036      	beq.n	8006916 <DMA_MultiBufferSetConfig+0xae>
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4a3e      	ldr	r2, [pc, #248]	@ (80069a8 <DMA_MultiBufferSetConfig+0x140>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d031      	beq.n	8006916 <DMA_MultiBufferSetConfig+0xae>
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4a3d      	ldr	r2, [pc, #244]	@ (80069ac <DMA_MultiBufferSetConfig+0x144>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d02c      	beq.n	8006916 <DMA_MultiBufferSetConfig+0xae>
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4a3b      	ldr	r2, [pc, #236]	@ (80069b0 <DMA_MultiBufferSetConfig+0x148>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d027      	beq.n	8006916 <DMA_MultiBufferSetConfig+0xae>
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4a3a      	ldr	r2, [pc, #232]	@ (80069b4 <DMA_MultiBufferSetConfig+0x14c>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d022      	beq.n	8006916 <DMA_MultiBufferSetConfig+0xae>
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4a38      	ldr	r2, [pc, #224]	@ (80069b8 <DMA_MultiBufferSetConfig+0x150>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d01d      	beq.n	8006916 <DMA_MultiBufferSetConfig+0xae>
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4a37      	ldr	r2, [pc, #220]	@ (80069bc <DMA_MultiBufferSetConfig+0x154>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d018      	beq.n	8006916 <DMA_MultiBufferSetConfig+0xae>
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	4a35      	ldr	r2, [pc, #212]	@ (80069c0 <DMA_MultiBufferSetConfig+0x158>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d013      	beq.n	8006916 <DMA_MultiBufferSetConfig+0xae>
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	4a34      	ldr	r2, [pc, #208]	@ (80069c4 <DMA_MultiBufferSetConfig+0x15c>)
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d00e      	beq.n	8006916 <DMA_MultiBufferSetConfig+0xae>
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4a32      	ldr	r2, [pc, #200]	@ (80069c8 <DMA_MultiBufferSetConfig+0x160>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d009      	beq.n	8006916 <DMA_MultiBufferSetConfig+0xae>
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4a31      	ldr	r2, [pc, #196]	@ (80069cc <DMA_MultiBufferSetConfig+0x164>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d004      	beq.n	8006916 <DMA_MultiBufferSetConfig+0xae>
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	4a2f      	ldr	r2, [pc, #188]	@ (80069d0 <DMA_MultiBufferSetConfig+0x168>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d101      	bne.n	800691a <DMA_MultiBufferSetConfig+0xb2>
 8006916:	2301      	movs	r3, #1
 8006918:	e000      	b.n	800691c <DMA_MultiBufferSetConfig+0xb4>
 800691a:	2300      	movs	r3, #0
 800691c:	2b00      	cmp	r3, #0
 800691e:	d019      	beq.n	8006954 <DMA_MultiBufferSetConfig+0xec>
  {
    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = DataLength;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	683a      	ldr	r2, [r7, #0]
 8006926:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	689b      	ldr	r3, [r3, #8]
 800692c:	2b40      	cmp	r3, #64	@ 0x40
 800692e:	d108      	bne.n	8006942 <DMA_MultiBufferSetConfig+0xda>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = DstAddress;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	687a      	ldr	r2, [r7, #4]
 8006936:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = SrcAddress;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	68ba      	ldr	r2, [r7, #8]
 800693e:	60da      	str	r2, [r3, #12]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
    }
  }
}
 8006940:	e021      	b.n	8006986 <DMA_MultiBufferSetConfig+0x11e>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = SrcAddress;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	68ba      	ldr	r2, [r7, #8]
 8006948:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = DstAddress;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	687a      	ldr	r2, [r7, #4]
 8006950:	60da      	str	r2, [r3, #12]
}
 8006952:	e018      	b.n	8006986 <DMA_MultiBufferSetConfig+0x11e>
    ((BDMA_Channel_TypeDef   *)hdma->Instance)->CNDTR = DataLength;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	683a      	ldr	r2, [r7, #0]
 800695a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	689b      	ldr	r3, [r3, #8]
 8006960:	2b40      	cmp	r3, #64	@ 0x40
 8006962:	d108      	bne.n	8006976 <DMA_MultiBufferSetConfig+0x10e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = DstAddress;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	687a      	ldr	r2, [r7, #4]
 800696a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = SrcAddress;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	68ba      	ldr	r2, [r7, #8]
 8006972:	60da      	str	r2, [r3, #12]
}
 8006974:	e007      	b.n	8006986 <DMA_MultiBufferSetConfig+0x11e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = SrcAddress;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	68ba      	ldr	r2, [r7, #8]
 800697c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	687a      	ldr	r2, [r7, #4]
 8006984:	60da      	str	r2, [r3, #12]
}
 8006986:	bf00      	nop
 8006988:	3714      	adds	r7, #20
 800698a:	46bd      	mov	sp, r7
 800698c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006990:	4770      	bx	lr
 8006992:	bf00      	nop
 8006994:	40020010 	.word	0x40020010
 8006998:	40020028 	.word	0x40020028
 800699c:	40020040 	.word	0x40020040
 80069a0:	40020058 	.word	0x40020058
 80069a4:	40020070 	.word	0x40020070
 80069a8:	40020088 	.word	0x40020088
 80069ac:	400200a0 	.word	0x400200a0
 80069b0:	400200b8 	.word	0x400200b8
 80069b4:	40020410 	.word	0x40020410
 80069b8:	40020428 	.word	0x40020428
 80069bc:	40020440 	.word	0x40020440
 80069c0:	40020458 	.word	0x40020458
 80069c4:	40020470 	.word	0x40020470
 80069c8:	40020488 	.word	0x40020488
 80069cc:	400204a0 	.word	0x400204a0
 80069d0:	400204b8 	.word	0x400204b8

080069d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80069d4:	b480      	push	{r7}
 80069d6:	b089      	sub	sp, #36	@ 0x24
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
 80069dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80069de:	2300      	movs	r3, #0
 80069e0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80069e2:	4b89      	ldr	r3, [pc, #548]	@ (8006c08 <HAL_GPIO_Init+0x234>)
 80069e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80069e6:	e194      	b.n	8006d12 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	681a      	ldr	r2, [r3, #0]
 80069ec:	2101      	movs	r1, #1
 80069ee:	69fb      	ldr	r3, [r7, #28]
 80069f0:	fa01 f303 	lsl.w	r3, r1, r3
 80069f4:	4013      	ands	r3, r2
 80069f6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80069f8:	693b      	ldr	r3, [r7, #16]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	f000 8186 	beq.w	8006d0c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	685b      	ldr	r3, [r3, #4]
 8006a04:	f003 0303 	and.w	r3, r3, #3
 8006a08:	2b01      	cmp	r3, #1
 8006a0a:	d005      	beq.n	8006a18 <HAL_GPIO_Init+0x44>
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	685b      	ldr	r3, [r3, #4]
 8006a10:	f003 0303 	and.w	r3, r3, #3
 8006a14:	2b02      	cmp	r3, #2
 8006a16:	d130      	bne.n	8006a7a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	689b      	ldr	r3, [r3, #8]
 8006a1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006a1e:	69fb      	ldr	r3, [r7, #28]
 8006a20:	005b      	lsls	r3, r3, #1
 8006a22:	2203      	movs	r2, #3
 8006a24:	fa02 f303 	lsl.w	r3, r2, r3
 8006a28:	43db      	mvns	r3, r3
 8006a2a:	69ba      	ldr	r2, [r7, #24]
 8006a2c:	4013      	ands	r3, r2
 8006a2e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	68da      	ldr	r2, [r3, #12]
 8006a34:	69fb      	ldr	r3, [r7, #28]
 8006a36:	005b      	lsls	r3, r3, #1
 8006a38:	fa02 f303 	lsl.w	r3, r2, r3
 8006a3c:	69ba      	ldr	r2, [r7, #24]
 8006a3e:	4313      	orrs	r3, r2
 8006a40:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	69ba      	ldr	r2, [r7, #24]
 8006a46:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	685b      	ldr	r3, [r3, #4]
 8006a4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006a4e:	2201      	movs	r2, #1
 8006a50:	69fb      	ldr	r3, [r7, #28]
 8006a52:	fa02 f303 	lsl.w	r3, r2, r3
 8006a56:	43db      	mvns	r3, r3
 8006a58:	69ba      	ldr	r2, [r7, #24]
 8006a5a:	4013      	ands	r3, r2
 8006a5c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	685b      	ldr	r3, [r3, #4]
 8006a62:	091b      	lsrs	r3, r3, #4
 8006a64:	f003 0201 	and.w	r2, r3, #1
 8006a68:	69fb      	ldr	r3, [r7, #28]
 8006a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8006a6e:	69ba      	ldr	r2, [r7, #24]
 8006a70:	4313      	orrs	r3, r2
 8006a72:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	69ba      	ldr	r2, [r7, #24]
 8006a78:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	685b      	ldr	r3, [r3, #4]
 8006a7e:	f003 0303 	and.w	r3, r3, #3
 8006a82:	2b03      	cmp	r3, #3
 8006a84:	d017      	beq.n	8006ab6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	68db      	ldr	r3, [r3, #12]
 8006a8a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006a8c:	69fb      	ldr	r3, [r7, #28]
 8006a8e:	005b      	lsls	r3, r3, #1
 8006a90:	2203      	movs	r2, #3
 8006a92:	fa02 f303 	lsl.w	r3, r2, r3
 8006a96:	43db      	mvns	r3, r3
 8006a98:	69ba      	ldr	r2, [r7, #24]
 8006a9a:	4013      	ands	r3, r2
 8006a9c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	689a      	ldr	r2, [r3, #8]
 8006aa2:	69fb      	ldr	r3, [r7, #28]
 8006aa4:	005b      	lsls	r3, r3, #1
 8006aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8006aaa:	69ba      	ldr	r2, [r7, #24]
 8006aac:	4313      	orrs	r3, r2
 8006aae:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	69ba      	ldr	r2, [r7, #24]
 8006ab4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	685b      	ldr	r3, [r3, #4]
 8006aba:	f003 0303 	and.w	r3, r3, #3
 8006abe:	2b02      	cmp	r3, #2
 8006ac0:	d123      	bne.n	8006b0a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006ac2:	69fb      	ldr	r3, [r7, #28]
 8006ac4:	08da      	lsrs	r2, r3, #3
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	3208      	adds	r2, #8
 8006aca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ace:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006ad0:	69fb      	ldr	r3, [r7, #28]
 8006ad2:	f003 0307 	and.w	r3, r3, #7
 8006ad6:	009b      	lsls	r3, r3, #2
 8006ad8:	220f      	movs	r2, #15
 8006ada:	fa02 f303 	lsl.w	r3, r2, r3
 8006ade:	43db      	mvns	r3, r3
 8006ae0:	69ba      	ldr	r2, [r7, #24]
 8006ae2:	4013      	ands	r3, r2
 8006ae4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	691a      	ldr	r2, [r3, #16]
 8006aea:	69fb      	ldr	r3, [r7, #28]
 8006aec:	f003 0307 	and.w	r3, r3, #7
 8006af0:	009b      	lsls	r3, r3, #2
 8006af2:	fa02 f303 	lsl.w	r3, r2, r3
 8006af6:	69ba      	ldr	r2, [r7, #24]
 8006af8:	4313      	orrs	r3, r2
 8006afa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006afc:	69fb      	ldr	r3, [r7, #28]
 8006afe:	08da      	lsrs	r2, r3, #3
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	3208      	adds	r2, #8
 8006b04:	69b9      	ldr	r1, [r7, #24]
 8006b06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006b10:	69fb      	ldr	r3, [r7, #28]
 8006b12:	005b      	lsls	r3, r3, #1
 8006b14:	2203      	movs	r2, #3
 8006b16:	fa02 f303 	lsl.w	r3, r2, r3
 8006b1a:	43db      	mvns	r3, r3
 8006b1c:	69ba      	ldr	r2, [r7, #24]
 8006b1e:	4013      	ands	r3, r2
 8006b20:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	685b      	ldr	r3, [r3, #4]
 8006b26:	f003 0203 	and.w	r2, r3, #3
 8006b2a:	69fb      	ldr	r3, [r7, #28]
 8006b2c:	005b      	lsls	r3, r3, #1
 8006b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8006b32:	69ba      	ldr	r2, [r7, #24]
 8006b34:	4313      	orrs	r3, r2
 8006b36:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	69ba      	ldr	r2, [r7, #24]
 8006b3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	685b      	ldr	r3, [r3, #4]
 8006b42:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	f000 80e0 	beq.w	8006d0c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006b4c:	4b2f      	ldr	r3, [pc, #188]	@ (8006c0c <HAL_GPIO_Init+0x238>)
 8006b4e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006b52:	4a2e      	ldr	r2, [pc, #184]	@ (8006c0c <HAL_GPIO_Init+0x238>)
 8006b54:	f043 0302 	orr.w	r3, r3, #2
 8006b58:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8006b5c:	4b2b      	ldr	r3, [pc, #172]	@ (8006c0c <HAL_GPIO_Init+0x238>)
 8006b5e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006b62:	f003 0302 	and.w	r3, r3, #2
 8006b66:	60fb      	str	r3, [r7, #12]
 8006b68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006b6a:	4a29      	ldr	r2, [pc, #164]	@ (8006c10 <HAL_GPIO_Init+0x23c>)
 8006b6c:	69fb      	ldr	r3, [r7, #28]
 8006b6e:	089b      	lsrs	r3, r3, #2
 8006b70:	3302      	adds	r3, #2
 8006b72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006b78:	69fb      	ldr	r3, [r7, #28]
 8006b7a:	f003 0303 	and.w	r3, r3, #3
 8006b7e:	009b      	lsls	r3, r3, #2
 8006b80:	220f      	movs	r2, #15
 8006b82:	fa02 f303 	lsl.w	r3, r2, r3
 8006b86:	43db      	mvns	r3, r3
 8006b88:	69ba      	ldr	r2, [r7, #24]
 8006b8a:	4013      	ands	r3, r2
 8006b8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	4a20      	ldr	r2, [pc, #128]	@ (8006c14 <HAL_GPIO_Init+0x240>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d052      	beq.n	8006c3c <HAL_GPIO_Init+0x268>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	4a1f      	ldr	r2, [pc, #124]	@ (8006c18 <HAL_GPIO_Init+0x244>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d031      	beq.n	8006c02 <HAL_GPIO_Init+0x22e>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	4a1e      	ldr	r2, [pc, #120]	@ (8006c1c <HAL_GPIO_Init+0x248>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d02b      	beq.n	8006bfe <HAL_GPIO_Init+0x22a>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	4a1d      	ldr	r2, [pc, #116]	@ (8006c20 <HAL_GPIO_Init+0x24c>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d025      	beq.n	8006bfa <HAL_GPIO_Init+0x226>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	4a1c      	ldr	r2, [pc, #112]	@ (8006c24 <HAL_GPIO_Init+0x250>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d01f      	beq.n	8006bf6 <HAL_GPIO_Init+0x222>
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	4a1b      	ldr	r2, [pc, #108]	@ (8006c28 <HAL_GPIO_Init+0x254>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d019      	beq.n	8006bf2 <HAL_GPIO_Init+0x21e>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	4a1a      	ldr	r2, [pc, #104]	@ (8006c2c <HAL_GPIO_Init+0x258>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d013      	beq.n	8006bee <HAL_GPIO_Init+0x21a>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	4a19      	ldr	r2, [pc, #100]	@ (8006c30 <HAL_GPIO_Init+0x25c>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d00d      	beq.n	8006bea <HAL_GPIO_Init+0x216>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	4a18      	ldr	r2, [pc, #96]	@ (8006c34 <HAL_GPIO_Init+0x260>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d007      	beq.n	8006be6 <HAL_GPIO_Init+0x212>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	4a17      	ldr	r2, [pc, #92]	@ (8006c38 <HAL_GPIO_Init+0x264>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d101      	bne.n	8006be2 <HAL_GPIO_Init+0x20e>
 8006bde:	2309      	movs	r3, #9
 8006be0:	e02d      	b.n	8006c3e <HAL_GPIO_Init+0x26a>
 8006be2:	230a      	movs	r3, #10
 8006be4:	e02b      	b.n	8006c3e <HAL_GPIO_Init+0x26a>
 8006be6:	2308      	movs	r3, #8
 8006be8:	e029      	b.n	8006c3e <HAL_GPIO_Init+0x26a>
 8006bea:	2307      	movs	r3, #7
 8006bec:	e027      	b.n	8006c3e <HAL_GPIO_Init+0x26a>
 8006bee:	2306      	movs	r3, #6
 8006bf0:	e025      	b.n	8006c3e <HAL_GPIO_Init+0x26a>
 8006bf2:	2305      	movs	r3, #5
 8006bf4:	e023      	b.n	8006c3e <HAL_GPIO_Init+0x26a>
 8006bf6:	2304      	movs	r3, #4
 8006bf8:	e021      	b.n	8006c3e <HAL_GPIO_Init+0x26a>
 8006bfa:	2303      	movs	r3, #3
 8006bfc:	e01f      	b.n	8006c3e <HAL_GPIO_Init+0x26a>
 8006bfe:	2302      	movs	r3, #2
 8006c00:	e01d      	b.n	8006c3e <HAL_GPIO_Init+0x26a>
 8006c02:	2301      	movs	r3, #1
 8006c04:	e01b      	b.n	8006c3e <HAL_GPIO_Init+0x26a>
 8006c06:	bf00      	nop
 8006c08:	58000080 	.word	0x58000080
 8006c0c:	58024400 	.word	0x58024400
 8006c10:	58000400 	.word	0x58000400
 8006c14:	58020000 	.word	0x58020000
 8006c18:	58020400 	.word	0x58020400
 8006c1c:	58020800 	.word	0x58020800
 8006c20:	58020c00 	.word	0x58020c00
 8006c24:	58021000 	.word	0x58021000
 8006c28:	58021400 	.word	0x58021400
 8006c2c:	58021800 	.word	0x58021800
 8006c30:	58021c00 	.word	0x58021c00
 8006c34:	58022000 	.word	0x58022000
 8006c38:	58022400 	.word	0x58022400
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	69fa      	ldr	r2, [r7, #28]
 8006c40:	f002 0203 	and.w	r2, r2, #3
 8006c44:	0092      	lsls	r2, r2, #2
 8006c46:	4093      	lsls	r3, r2
 8006c48:	69ba      	ldr	r2, [r7, #24]
 8006c4a:	4313      	orrs	r3, r2
 8006c4c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006c4e:	4938      	ldr	r1, [pc, #224]	@ (8006d30 <HAL_GPIO_Init+0x35c>)
 8006c50:	69fb      	ldr	r3, [r7, #28]
 8006c52:	089b      	lsrs	r3, r3, #2
 8006c54:	3302      	adds	r3, #2
 8006c56:	69ba      	ldr	r2, [r7, #24]
 8006c58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006c5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006c64:	693b      	ldr	r3, [r7, #16]
 8006c66:	43db      	mvns	r3, r3
 8006c68:	69ba      	ldr	r2, [r7, #24]
 8006c6a:	4013      	ands	r3, r2
 8006c6c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	685b      	ldr	r3, [r3, #4]
 8006c72:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d003      	beq.n	8006c82 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8006c7a:	69ba      	ldr	r2, [r7, #24]
 8006c7c:	693b      	ldr	r3, [r7, #16]
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006c82:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006c86:	69bb      	ldr	r3, [r7, #24]
 8006c88:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006c8a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c8e:	685b      	ldr	r3, [r3, #4]
 8006c90:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006c92:	693b      	ldr	r3, [r7, #16]
 8006c94:	43db      	mvns	r3, r3
 8006c96:	69ba      	ldr	r2, [r7, #24]
 8006c98:	4013      	ands	r3, r2
 8006c9a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	685b      	ldr	r3, [r3, #4]
 8006ca0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d003      	beq.n	8006cb0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006ca8:	69ba      	ldr	r2, [r7, #24]
 8006caa:	693b      	ldr	r3, [r7, #16]
 8006cac:	4313      	orrs	r3, r2
 8006cae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006cb0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006cb4:	69bb      	ldr	r3, [r7, #24]
 8006cb6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006cb8:	697b      	ldr	r3, [r7, #20]
 8006cba:	685b      	ldr	r3, [r3, #4]
 8006cbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006cbe:	693b      	ldr	r3, [r7, #16]
 8006cc0:	43db      	mvns	r3, r3
 8006cc2:	69ba      	ldr	r2, [r7, #24]
 8006cc4:	4013      	ands	r3, r2
 8006cc6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	685b      	ldr	r3, [r3, #4]
 8006ccc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d003      	beq.n	8006cdc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8006cd4:	69ba      	ldr	r2, [r7, #24]
 8006cd6:	693b      	ldr	r3, [r7, #16]
 8006cd8:	4313      	orrs	r3, r2
 8006cda:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006cdc:	697b      	ldr	r3, [r7, #20]
 8006cde:	69ba      	ldr	r2, [r7, #24]
 8006ce0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006ce2:	697b      	ldr	r3, [r7, #20]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006ce8:	693b      	ldr	r3, [r7, #16]
 8006cea:	43db      	mvns	r3, r3
 8006cec:	69ba      	ldr	r2, [r7, #24]
 8006cee:	4013      	ands	r3, r2
 8006cf0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	685b      	ldr	r3, [r3, #4]
 8006cf6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d003      	beq.n	8006d06 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8006cfe:	69ba      	ldr	r2, [r7, #24]
 8006d00:	693b      	ldr	r3, [r7, #16]
 8006d02:	4313      	orrs	r3, r2
 8006d04:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006d06:	697b      	ldr	r3, [r7, #20]
 8006d08:	69ba      	ldr	r2, [r7, #24]
 8006d0a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006d0c:	69fb      	ldr	r3, [r7, #28]
 8006d0e:	3301      	adds	r3, #1
 8006d10:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	681a      	ldr	r2, [r3, #0]
 8006d16:	69fb      	ldr	r3, [r7, #28]
 8006d18:	fa22 f303 	lsr.w	r3, r2, r3
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	f47f ae63 	bne.w	80069e8 <HAL_GPIO_Init+0x14>
  }
}
 8006d22:	bf00      	nop
 8006d24:	bf00      	nop
 8006d26:	3724      	adds	r7, #36	@ 0x24
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2e:	4770      	bx	lr
 8006d30:	58000400 	.word	0x58000400

08006d34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006d34:	b480      	push	{r7}
 8006d36:	b083      	sub	sp, #12
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
 8006d3c:	460b      	mov	r3, r1
 8006d3e:	807b      	strh	r3, [r7, #2]
 8006d40:	4613      	mov	r3, r2
 8006d42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006d44:	787b      	ldrb	r3, [r7, #1]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d003      	beq.n	8006d52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006d4a:	887a      	ldrh	r2, [r7, #2]
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006d50:	e003      	b.n	8006d5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006d52:	887b      	ldrh	r3, [r7, #2]
 8006d54:	041a      	lsls	r2, r3, #16
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	619a      	str	r2, [r3, #24]
}
 8006d5a:	bf00      	nop
 8006d5c:	370c      	adds	r7, #12
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d64:	4770      	bx	lr
	...

08006d68 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b082      	sub	sp, #8
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d101      	bne.n	8006d7a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006d76:	2301      	movs	r3, #1
 8006d78:	e08b      	b.n	8006e92 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006d80:	b2db      	uxtb	r3, r3
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d106      	bne.n	8006d94 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2200      	movs	r2, #0
 8006d8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	f7fb f858 	bl	8001e44 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2224      	movs	r2, #36	@ 0x24
 8006d98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	681a      	ldr	r2, [r3, #0]
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f022 0201 	bic.w	r2, r2, #1
 8006daa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	685a      	ldr	r2, [r3, #4]
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006db8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	689a      	ldr	r2, [r3, #8]
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006dc8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	68db      	ldr	r3, [r3, #12]
 8006dce:	2b01      	cmp	r3, #1
 8006dd0:	d107      	bne.n	8006de2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	689a      	ldr	r2, [r3, #8]
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006dde:	609a      	str	r2, [r3, #8]
 8006de0:	e006      	b.n	8006df0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	689a      	ldr	r2, [r3, #8]
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8006dee:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	68db      	ldr	r3, [r3, #12]
 8006df4:	2b02      	cmp	r3, #2
 8006df6:	d108      	bne.n	8006e0a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	685a      	ldr	r2, [r3, #4]
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006e06:	605a      	str	r2, [r3, #4]
 8006e08:	e007      	b.n	8006e1a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	685a      	ldr	r2, [r3, #4]
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006e18:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	6859      	ldr	r1, [r3, #4]
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681a      	ldr	r2, [r3, #0]
 8006e24:	4b1d      	ldr	r3, [pc, #116]	@ (8006e9c <HAL_I2C_Init+0x134>)
 8006e26:	430b      	orrs	r3, r1
 8006e28:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	68da      	ldr	r2, [r3, #12]
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006e38:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	691a      	ldr	r2, [r3, #16]
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	695b      	ldr	r3, [r3, #20]
 8006e42:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	699b      	ldr	r3, [r3, #24]
 8006e4a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	430a      	orrs	r2, r1
 8006e52:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	69d9      	ldr	r1, [r3, #28]
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	6a1a      	ldr	r2, [r3, #32]
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	430a      	orrs	r2, r1
 8006e62:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	681a      	ldr	r2, [r3, #0]
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f042 0201 	orr.w	r2, r2, #1
 8006e72:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2200      	movs	r2, #0
 8006e78:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2220      	movs	r2, #32
 8006e7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2200      	movs	r2, #0
 8006e86:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8006e90:	2300      	movs	r3, #0
}
 8006e92:	4618      	mov	r0, r3
 8006e94:	3708      	adds	r7, #8
 8006e96:	46bd      	mov	sp, r7
 8006e98:	bd80      	pop	{r7, pc}
 8006e9a:	bf00      	nop
 8006e9c:	02008000 	.word	0x02008000

08006ea0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b088      	sub	sp, #32
 8006ea4:	af02      	add	r7, sp, #8
 8006ea6:	60f8      	str	r0, [r7, #12]
 8006ea8:	607a      	str	r2, [r7, #4]
 8006eaa:	461a      	mov	r2, r3
 8006eac:	460b      	mov	r3, r1
 8006eae:	817b      	strh	r3, [r7, #10]
 8006eb0:	4613      	mov	r3, r2
 8006eb2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006eba:	b2db      	uxtb	r3, r3
 8006ebc:	2b20      	cmp	r3, #32
 8006ebe:	f040 80fd 	bne.w	80070bc <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006ec8:	2b01      	cmp	r3, #1
 8006eca:	d101      	bne.n	8006ed0 <HAL_I2C_Master_Transmit+0x30>
 8006ecc:	2302      	movs	r3, #2
 8006ece:	e0f6      	b.n	80070be <HAL_I2C_Master_Transmit+0x21e>
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	2201      	movs	r2, #1
 8006ed4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006ed8:	f7fb fdd2 	bl	8002a80 <HAL_GetTick>
 8006edc:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006ede:	693b      	ldr	r3, [r7, #16]
 8006ee0:	9300      	str	r3, [sp, #0]
 8006ee2:	2319      	movs	r3, #25
 8006ee4:	2201      	movs	r2, #1
 8006ee6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006eea:	68f8      	ldr	r0, [r7, #12]
 8006eec:	f001 f891 	bl	8008012 <I2C_WaitOnFlagUntilTimeout>
 8006ef0:	4603      	mov	r3, r0
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d001      	beq.n	8006efa <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8006ef6:	2301      	movs	r3, #1
 8006ef8:	e0e1      	b.n	80070be <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	2221      	movs	r2, #33	@ 0x21
 8006efe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	2210      	movs	r2, #16
 8006f06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	687a      	ldr	r2, [r7, #4]
 8006f14:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	893a      	ldrh	r2, [r7, #8]
 8006f1a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	2200      	movs	r2, #0
 8006f20:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f26:	b29b      	uxth	r3, r3
 8006f28:	2bff      	cmp	r3, #255	@ 0xff
 8006f2a:	d906      	bls.n	8006f3a <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	22ff      	movs	r2, #255	@ 0xff
 8006f30:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8006f32:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006f36:	617b      	str	r3, [r7, #20]
 8006f38:	e007      	b.n	8006f4a <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f3e:	b29a      	uxth	r2, r3
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8006f44:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006f48:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d024      	beq.n	8006f9c <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f56:	781a      	ldrb	r2, [r3, #0]
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f62:	1c5a      	adds	r2, r3, #1
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f6c:	b29b      	uxth	r3, r3
 8006f6e:	3b01      	subs	r3, #1
 8006f70:	b29a      	uxth	r2, r3
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f7a:	3b01      	subs	r3, #1
 8006f7c:	b29a      	uxth	r2, r3
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f86:	b2db      	uxtb	r3, r3
 8006f88:	3301      	adds	r3, #1
 8006f8a:	b2da      	uxtb	r2, r3
 8006f8c:	8979      	ldrh	r1, [r7, #10]
 8006f8e:	4b4e      	ldr	r3, [pc, #312]	@ (80070c8 <HAL_I2C_Master_Transmit+0x228>)
 8006f90:	9300      	str	r3, [sp, #0]
 8006f92:	697b      	ldr	r3, [r7, #20]
 8006f94:	68f8      	ldr	r0, [r7, #12]
 8006f96:	f001 fa8b 	bl	80084b0 <I2C_TransferConfig>
 8006f9a:	e066      	b.n	800706a <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006fa0:	b2da      	uxtb	r2, r3
 8006fa2:	8979      	ldrh	r1, [r7, #10]
 8006fa4:	4b48      	ldr	r3, [pc, #288]	@ (80070c8 <HAL_I2C_Master_Transmit+0x228>)
 8006fa6:	9300      	str	r3, [sp, #0]
 8006fa8:	697b      	ldr	r3, [r7, #20]
 8006faa:	68f8      	ldr	r0, [r7, #12]
 8006fac:	f001 fa80 	bl	80084b0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8006fb0:	e05b      	b.n	800706a <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006fb2:	693a      	ldr	r2, [r7, #16]
 8006fb4:	6a39      	ldr	r1, [r7, #32]
 8006fb6:	68f8      	ldr	r0, [r7, #12]
 8006fb8:	f001 f884 	bl	80080c4 <I2C_WaitOnTXISFlagUntilTimeout>
 8006fbc:	4603      	mov	r3, r0
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d001      	beq.n	8006fc6 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	e07b      	b.n	80070be <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fca:	781a      	ldrb	r2, [r3, #0]
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fd6:	1c5a      	adds	r2, r3, #1
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006fe0:	b29b      	uxth	r3, r3
 8006fe2:	3b01      	subs	r3, #1
 8006fe4:	b29a      	uxth	r2, r3
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006fee:	3b01      	subs	r3, #1
 8006ff0:	b29a      	uxth	r2, r3
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ffa:	b29b      	uxth	r3, r3
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d034      	beq.n	800706a <HAL_I2C_Master_Transmit+0x1ca>
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007004:	2b00      	cmp	r3, #0
 8007006:	d130      	bne.n	800706a <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007008:	693b      	ldr	r3, [r7, #16]
 800700a:	9300      	str	r3, [sp, #0]
 800700c:	6a3b      	ldr	r3, [r7, #32]
 800700e:	2200      	movs	r2, #0
 8007010:	2180      	movs	r1, #128	@ 0x80
 8007012:	68f8      	ldr	r0, [r7, #12]
 8007014:	f000 fffd 	bl	8008012 <I2C_WaitOnFlagUntilTimeout>
 8007018:	4603      	mov	r3, r0
 800701a:	2b00      	cmp	r3, #0
 800701c:	d001      	beq.n	8007022 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800701e:	2301      	movs	r3, #1
 8007020:	e04d      	b.n	80070be <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007026:	b29b      	uxth	r3, r3
 8007028:	2bff      	cmp	r3, #255	@ 0xff
 800702a:	d90e      	bls.n	800704a <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	22ff      	movs	r2, #255	@ 0xff
 8007030:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007036:	b2da      	uxtb	r2, r3
 8007038:	8979      	ldrh	r1, [r7, #10]
 800703a:	2300      	movs	r3, #0
 800703c:	9300      	str	r3, [sp, #0]
 800703e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007042:	68f8      	ldr	r0, [r7, #12]
 8007044:	f001 fa34 	bl	80084b0 <I2C_TransferConfig>
 8007048:	e00f      	b.n	800706a <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800704e:	b29a      	uxth	r2, r3
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007058:	b2da      	uxtb	r2, r3
 800705a:	8979      	ldrh	r1, [r7, #10]
 800705c:	2300      	movs	r3, #0
 800705e:	9300      	str	r3, [sp, #0]
 8007060:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007064:	68f8      	ldr	r0, [r7, #12]
 8007066:	f001 fa23 	bl	80084b0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800706e:	b29b      	uxth	r3, r3
 8007070:	2b00      	cmp	r3, #0
 8007072:	d19e      	bne.n	8006fb2 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007074:	693a      	ldr	r2, [r7, #16]
 8007076:	6a39      	ldr	r1, [r7, #32]
 8007078:	68f8      	ldr	r0, [r7, #12]
 800707a:	f001 f86a 	bl	8008152 <I2C_WaitOnSTOPFlagUntilTimeout>
 800707e:	4603      	mov	r3, r0
 8007080:	2b00      	cmp	r3, #0
 8007082:	d001      	beq.n	8007088 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8007084:	2301      	movs	r3, #1
 8007086:	e01a      	b.n	80070be <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	2220      	movs	r2, #32
 800708e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	6859      	ldr	r1, [r3, #4]
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681a      	ldr	r2, [r3, #0]
 800709a:	4b0c      	ldr	r3, [pc, #48]	@ (80070cc <HAL_I2C_Master_Transmit+0x22c>)
 800709c:	400b      	ands	r3, r1
 800709e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	2220      	movs	r2, #32
 80070a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	2200      	movs	r2, #0
 80070ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	2200      	movs	r2, #0
 80070b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80070b8:	2300      	movs	r3, #0
 80070ba:	e000      	b.n	80070be <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80070bc:	2302      	movs	r3, #2
  }
}
 80070be:	4618      	mov	r0, r3
 80070c0:	3718      	adds	r7, #24
 80070c2:	46bd      	mov	sp, r7
 80070c4:	bd80      	pop	{r7, pc}
 80070c6:	bf00      	nop
 80070c8:	80002000 	.word	0x80002000
 80070cc:	fe00e800 	.word	0xfe00e800

080070d0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b088      	sub	sp, #32
 80070d4:	af02      	add	r7, sp, #8
 80070d6:	60f8      	str	r0, [r7, #12]
 80070d8:	607a      	str	r2, [r7, #4]
 80070da:	461a      	mov	r2, r3
 80070dc:	460b      	mov	r3, r1
 80070de:	817b      	strh	r3, [r7, #10]
 80070e0:	4613      	mov	r3, r2
 80070e2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80070ea:	b2db      	uxtb	r3, r3
 80070ec:	2b20      	cmp	r3, #32
 80070ee:	f040 80db 	bne.w	80072a8 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80070f8:	2b01      	cmp	r3, #1
 80070fa:	d101      	bne.n	8007100 <HAL_I2C_Master_Receive+0x30>
 80070fc:	2302      	movs	r3, #2
 80070fe:	e0d4      	b.n	80072aa <HAL_I2C_Master_Receive+0x1da>
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	2201      	movs	r2, #1
 8007104:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007108:	f7fb fcba 	bl	8002a80 <HAL_GetTick>
 800710c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800710e:	697b      	ldr	r3, [r7, #20]
 8007110:	9300      	str	r3, [sp, #0]
 8007112:	2319      	movs	r3, #25
 8007114:	2201      	movs	r2, #1
 8007116:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800711a:	68f8      	ldr	r0, [r7, #12]
 800711c:	f000 ff79 	bl	8008012 <I2C_WaitOnFlagUntilTimeout>
 8007120:	4603      	mov	r3, r0
 8007122:	2b00      	cmp	r3, #0
 8007124:	d001      	beq.n	800712a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8007126:	2301      	movs	r3, #1
 8007128:	e0bf      	b.n	80072aa <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	2222      	movs	r2, #34	@ 0x22
 800712e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	2210      	movs	r2, #16
 8007136:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	2200      	movs	r2, #0
 800713e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	687a      	ldr	r2, [r7, #4]
 8007144:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	893a      	ldrh	r2, [r7, #8]
 800714a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	2200      	movs	r2, #0
 8007150:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007156:	b29b      	uxth	r3, r3
 8007158:	2bff      	cmp	r3, #255	@ 0xff
 800715a:	d90e      	bls.n	800717a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	22ff      	movs	r2, #255	@ 0xff
 8007160:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007166:	b2da      	uxtb	r2, r3
 8007168:	8979      	ldrh	r1, [r7, #10]
 800716a:	4b52      	ldr	r3, [pc, #328]	@ (80072b4 <HAL_I2C_Master_Receive+0x1e4>)
 800716c:	9300      	str	r3, [sp, #0]
 800716e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007172:	68f8      	ldr	r0, [r7, #12]
 8007174:	f001 f99c 	bl	80084b0 <I2C_TransferConfig>
 8007178:	e06d      	b.n	8007256 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800717e:	b29a      	uxth	r2, r3
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007188:	b2da      	uxtb	r2, r3
 800718a:	8979      	ldrh	r1, [r7, #10]
 800718c:	4b49      	ldr	r3, [pc, #292]	@ (80072b4 <HAL_I2C_Master_Receive+0x1e4>)
 800718e:	9300      	str	r3, [sp, #0]
 8007190:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007194:	68f8      	ldr	r0, [r7, #12]
 8007196:	f001 f98b 	bl	80084b0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800719a:	e05c      	b.n	8007256 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800719c:	697a      	ldr	r2, [r7, #20]
 800719e:	6a39      	ldr	r1, [r7, #32]
 80071a0:	68f8      	ldr	r0, [r7, #12]
 80071a2:	f001 f819 	bl	80081d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80071a6:	4603      	mov	r3, r0
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d001      	beq.n	80071b0 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80071ac:	2301      	movs	r3, #1
 80071ae:	e07c      	b.n	80072aa <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071ba:	b2d2      	uxtb	r2, r2
 80071bc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071c2:	1c5a      	adds	r2, r3, #1
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80071cc:	3b01      	subs	r3, #1
 80071ce:	b29a      	uxth	r2, r3
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80071d8:	b29b      	uxth	r3, r3
 80071da:	3b01      	subs	r3, #1
 80071dc:	b29a      	uxth	r2, r3
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80071e6:	b29b      	uxth	r3, r3
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d034      	beq.n	8007256 <HAL_I2C_Master_Receive+0x186>
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d130      	bne.n	8007256 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80071f4:	697b      	ldr	r3, [r7, #20]
 80071f6:	9300      	str	r3, [sp, #0]
 80071f8:	6a3b      	ldr	r3, [r7, #32]
 80071fa:	2200      	movs	r2, #0
 80071fc:	2180      	movs	r1, #128	@ 0x80
 80071fe:	68f8      	ldr	r0, [r7, #12]
 8007200:	f000 ff07 	bl	8008012 <I2C_WaitOnFlagUntilTimeout>
 8007204:	4603      	mov	r3, r0
 8007206:	2b00      	cmp	r3, #0
 8007208:	d001      	beq.n	800720e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800720a:	2301      	movs	r3, #1
 800720c:	e04d      	b.n	80072aa <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007212:	b29b      	uxth	r3, r3
 8007214:	2bff      	cmp	r3, #255	@ 0xff
 8007216:	d90e      	bls.n	8007236 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	22ff      	movs	r2, #255	@ 0xff
 800721c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007222:	b2da      	uxtb	r2, r3
 8007224:	8979      	ldrh	r1, [r7, #10]
 8007226:	2300      	movs	r3, #0
 8007228:	9300      	str	r3, [sp, #0]
 800722a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800722e:	68f8      	ldr	r0, [r7, #12]
 8007230:	f001 f93e 	bl	80084b0 <I2C_TransferConfig>
 8007234:	e00f      	b.n	8007256 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800723a:	b29a      	uxth	r2, r3
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007244:	b2da      	uxtb	r2, r3
 8007246:	8979      	ldrh	r1, [r7, #10]
 8007248:	2300      	movs	r3, #0
 800724a:	9300      	str	r3, [sp, #0]
 800724c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007250:	68f8      	ldr	r0, [r7, #12]
 8007252:	f001 f92d 	bl	80084b0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800725a:	b29b      	uxth	r3, r3
 800725c:	2b00      	cmp	r3, #0
 800725e:	d19d      	bne.n	800719c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007260:	697a      	ldr	r2, [r7, #20]
 8007262:	6a39      	ldr	r1, [r7, #32]
 8007264:	68f8      	ldr	r0, [r7, #12]
 8007266:	f000 ff74 	bl	8008152 <I2C_WaitOnSTOPFlagUntilTimeout>
 800726a:	4603      	mov	r3, r0
 800726c:	2b00      	cmp	r3, #0
 800726e:	d001      	beq.n	8007274 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8007270:	2301      	movs	r3, #1
 8007272:	e01a      	b.n	80072aa <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	2220      	movs	r2, #32
 800727a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	6859      	ldr	r1, [r3, #4]
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	681a      	ldr	r2, [r3, #0]
 8007286:	4b0c      	ldr	r3, [pc, #48]	@ (80072b8 <HAL_I2C_Master_Receive+0x1e8>)
 8007288:	400b      	ands	r3, r1
 800728a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	2220      	movs	r2, #32
 8007290:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	2200      	movs	r2, #0
 8007298:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	2200      	movs	r2, #0
 80072a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80072a4:	2300      	movs	r3, #0
 80072a6:	e000      	b.n	80072aa <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80072a8:	2302      	movs	r3, #2
  }
}
 80072aa:	4618      	mov	r0, r3
 80072ac:	3718      	adds	r7, #24
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bd80      	pop	{r7, pc}
 80072b2:	bf00      	nop
 80072b4:	80002400 	.word	0x80002400
 80072b8:	fe00e800 	.word	0xfe00e800

080072bc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b084      	sub	sp, #16
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	699b      	ldr	r3, [r3, #24]
 80072ca:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d005      	beq.n	80072e8 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80072e0:	68ba      	ldr	r2, [r7, #8]
 80072e2:	68f9      	ldr	r1, [r7, #12]
 80072e4:	6878      	ldr	r0, [r7, #4]
 80072e6:	4798      	blx	r3
  }
}
 80072e8:	bf00      	nop
 80072ea:	3710      	adds	r7, #16
 80072ec:	46bd      	mov	sp, r7
 80072ee:	bd80      	pop	{r7, pc}

080072f0 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b086      	sub	sp, #24
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	699b      	ldr	r3, [r3, #24]
 80072fe:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8007308:	697b      	ldr	r3, [r7, #20]
 800730a:	0a1b      	lsrs	r3, r3, #8
 800730c:	f003 0301 	and.w	r3, r3, #1
 8007310:	2b00      	cmp	r3, #0
 8007312:	d010      	beq.n	8007336 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8007314:	693b      	ldr	r3, [r7, #16]
 8007316:	09db      	lsrs	r3, r3, #7
 8007318:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800731c:	2b00      	cmp	r3, #0
 800731e:	d00a      	beq.n	8007336 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007324:	f043 0201 	orr.w	r2, r3, #1
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007334:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8007336:	697b      	ldr	r3, [r7, #20]
 8007338:	0a9b      	lsrs	r3, r3, #10
 800733a:	f003 0301 	and.w	r3, r3, #1
 800733e:	2b00      	cmp	r3, #0
 8007340:	d010      	beq.n	8007364 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8007342:	693b      	ldr	r3, [r7, #16]
 8007344:	09db      	lsrs	r3, r3, #7
 8007346:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800734a:	2b00      	cmp	r3, #0
 800734c:	d00a      	beq.n	8007364 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007352:	f043 0208 	orr.w	r2, r3, #8
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007362:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8007364:	697b      	ldr	r3, [r7, #20]
 8007366:	0a5b      	lsrs	r3, r3, #9
 8007368:	f003 0301 	and.w	r3, r3, #1
 800736c:	2b00      	cmp	r3, #0
 800736e:	d010      	beq.n	8007392 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8007370:	693b      	ldr	r3, [r7, #16]
 8007372:	09db      	lsrs	r3, r3, #7
 8007374:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8007378:	2b00      	cmp	r3, #0
 800737a:	d00a      	beq.n	8007392 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007380:	f043 0202 	orr.w	r2, r3, #2
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007390:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007396:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	f003 030b 	and.w	r3, r3, #11
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d003      	beq.n	80073aa <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 80073a2:	68f9      	ldr	r1, [r7, #12]
 80073a4:	6878      	ldr	r0, [r7, #4]
 80073a6:	f000 fcdb 	bl	8007d60 <I2C_ITError>
  }
}
 80073aa:	bf00      	nop
 80073ac:	3718      	adds	r7, #24
 80073ae:	46bd      	mov	sp, r7
 80073b0:	bd80      	pop	{r7, pc}

080073b2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80073b2:	b480      	push	{r7}
 80073b4:	b083      	sub	sp, #12
 80073b6:	af00      	add	r7, sp, #0
 80073b8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80073ba:	bf00      	nop
 80073bc:	370c      	adds	r7, #12
 80073be:	46bd      	mov	sp, r7
 80073c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c4:	4770      	bx	lr

080073c6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80073c6:	b480      	push	{r7}
 80073c8:	b083      	sub	sp, #12
 80073ca:	af00      	add	r7, sp, #0
 80073cc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80073ce:	bf00      	nop
 80073d0:	370c      	adds	r7, #12
 80073d2:	46bd      	mov	sp, r7
 80073d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d8:	4770      	bx	lr

080073da <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80073da:	b480      	push	{r7}
 80073dc:	b083      	sub	sp, #12
 80073de:	af00      	add	r7, sp, #0
 80073e0:	6078      	str	r0, [r7, #4]
 80073e2:	460b      	mov	r3, r1
 80073e4:	70fb      	strb	r3, [r7, #3]
 80073e6:	4613      	mov	r3, r2
 80073e8:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80073ea:	bf00      	nop
 80073ec:	370c      	adds	r7, #12
 80073ee:	46bd      	mov	sp, r7
 80073f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f4:	4770      	bx	lr

080073f6 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80073f6:	b480      	push	{r7}
 80073f8:	b083      	sub	sp, #12
 80073fa:	af00      	add	r7, sp, #0
 80073fc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80073fe:	bf00      	nop
 8007400:	370c      	adds	r7, #12
 8007402:	46bd      	mov	sp, r7
 8007404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007408:	4770      	bx	lr

0800740a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800740a:	b480      	push	{r7}
 800740c:	b083      	sub	sp, #12
 800740e:	af00      	add	r7, sp, #0
 8007410:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8007412:	bf00      	nop
 8007414:	370c      	adds	r7, #12
 8007416:	46bd      	mov	sp, r7
 8007418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741c:	4770      	bx	lr

0800741e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800741e:	b480      	push	{r7}
 8007420:	b083      	sub	sp, #12
 8007422:	af00      	add	r7, sp, #0
 8007424:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8007426:	bf00      	nop
 8007428:	370c      	adds	r7, #12
 800742a:	46bd      	mov	sp, r7
 800742c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007430:	4770      	bx	lr

08007432 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8007432:	b580      	push	{r7, lr}
 8007434:	b086      	sub	sp, #24
 8007436:	af00      	add	r7, sp, #0
 8007438:	60f8      	str	r0, [r7, #12]
 800743a:	60b9      	str	r1, [r7, #8]
 800743c:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007442:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800744e:	2b01      	cmp	r3, #1
 8007450:	d101      	bne.n	8007456 <I2C_Slave_ISR_IT+0x24>
 8007452:	2302      	movs	r3, #2
 8007454:	e0ed      	b.n	8007632 <I2C_Slave_ISR_IT+0x200>
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	2201      	movs	r2, #1
 800745a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800745e:	693b      	ldr	r3, [r7, #16]
 8007460:	095b      	lsrs	r3, r3, #5
 8007462:	f003 0301 	and.w	r3, r3, #1
 8007466:	2b00      	cmp	r3, #0
 8007468:	d00a      	beq.n	8007480 <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	095b      	lsrs	r3, r3, #5
 800746e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007472:	2b00      	cmp	r3, #0
 8007474:	d004      	beq.n	8007480 <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8007476:	6939      	ldr	r1, [r7, #16]
 8007478:	68f8      	ldr	r0, [r7, #12]
 800747a:	f000 f9c1 	bl	8007800 <I2C_ITSlaveCplt>
 800747e:	e0d3      	b.n	8007628 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007480:	693b      	ldr	r3, [r7, #16]
 8007482:	091b      	lsrs	r3, r3, #4
 8007484:	f003 0301 	and.w	r3, r3, #1
 8007488:	2b00      	cmp	r3, #0
 800748a:	d04d      	beq.n	8007528 <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	091b      	lsrs	r3, r3, #4
 8007490:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007494:	2b00      	cmp	r3, #0
 8007496:	d047      	beq.n	8007528 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800749c:	b29b      	uxth	r3, r3
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d128      	bne.n	80074f4 <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80074a8:	b2db      	uxtb	r3, r3
 80074aa:	2b28      	cmp	r3, #40	@ 0x28
 80074ac:	d108      	bne.n	80074c0 <I2C_Slave_ISR_IT+0x8e>
 80074ae:	697b      	ldr	r3, [r7, #20]
 80074b0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80074b4:	d104      	bne.n	80074c0 <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80074b6:	6939      	ldr	r1, [r7, #16]
 80074b8:	68f8      	ldr	r0, [r7, #12]
 80074ba:	f000 fbfb 	bl	8007cb4 <I2C_ITListenCplt>
 80074be:	e032      	b.n	8007526 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80074c6:	b2db      	uxtb	r3, r3
 80074c8:	2b29      	cmp	r3, #41	@ 0x29
 80074ca:	d10e      	bne.n	80074ea <I2C_Slave_ISR_IT+0xb8>
 80074cc:	697b      	ldr	r3, [r7, #20]
 80074ce:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80074d2:	d00a      	beq.n	80074ea <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	2210      	movs	r2, #16
 80074da:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80074dc:	68f8      	ldr	r0, [r7, #12]
 80074de:	f000 fd56 	bl	8007f8e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80074e2:	68f8      	ldr	r0, [r7, #12]
 80074e4:	f000 f92d 	bl	8007742 <I2C_ITSlaveSeqCplt>
 80074e8:	e01d      	b.n	8007526 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	2210      	movs	r2, #16
 80074f0:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80074f2:	e096      	b.n	8007622 <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	2210      	movs	r2, #16
 80074fa:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007500:	f043 0204 	orr.w	r2, r3, #4
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8007508:	697b      	ldr	r3, [r7, #20]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d004      	beq.n	8007518 <I2C_Slave_ISR_IT+0xe6>
 800750e:	697b      	ldr	r3, [r7, #20]
 8007510:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007514:	f040 8085 	bne.w	8007622 <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800751c:	4619      	mov	r1, r3
 800751e:	68f8      	ldr	r0, [r7, #12]
 8007520:	f000 fc1e 	bl	8007d60 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8007524:	e07d      	b.n	8007622 <I2C_Slave_ISR_IT+0x1f0>
 8007526:	e07c      	b.n	8007622 <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8007528:	693b      	ldr	r3, [r7, #16]
 800752a:	089b      	lsrs	r3, r3, #2
 800752c:	f003 0301 	and.w	r3, r3, #1
 8007530:	2b00      	cmp	r3, #0
 8007532:	d030      	beq.n	8007596 <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	089b      	lsrs	r3, r3, #2
 8007538:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800753c:	2b00      	cmp	r3, #0
 800753e:	d02a      	beq.n	8007596 <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007544:	b29b      	uxth	r3, r3
 8007546:	2b00      	cmp	r3, #0
 8007548:	d018      	beq.n	800757c <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007554:	b2d2      	uxtb	r2, r2
 8007556:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800755c:	1c5a      	adds	r2, r3, #1
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007566:	3b01      	subs	r3, #1
 8007568:	b29a      	uxth	r2, r3
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007572:	b29b      	uxth	r3, r3
 8007574:	3b01      	subs	r3, #1
 8007576:	b29a      	uxth	r2, r3
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007580:	b29b      	uxth	r3, r3
 8007582:	2b00      	cmp	r3, #0
 8007584:	d14f      	bne.n	8007626 <I2C_Slave_ISR_IT+0x1f4>
 8007586:	697b      	ldr	r3, [r7, #20]
 8007588:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800758c:	d04b      	beq.n	8007626 <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800758e:	68f8      	ldr	r0, [r7, #12]
 8007590:	f000 f8d7 	bl	8007742 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8007594:	e047      	b.n	8007626 <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007596:	693b      	ldr	r3, [r7, #16]
 8007598:	08db      	lsrs	r3, r3, #3
 800759a:	f003 0301 	and.w	r3, r3, #1
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d00a      	beq.n	80075b8 <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	08db      	lsrs	r3, r3, #3
 80075a6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d004      	beq.n	80075b8 <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80075ae:	6939      	ldr	r1, [r7, #16]
 80075b0:	68f8      	ldr	r0, [r7, #12]
 80075b2:	f000 f842 	bl	800763a <I2C_ITAddrCplt>
 80075b6:	e037      	b.n	8007628 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80075b8:	693b      	ldr	r3, [r7, #16]
 80075ba:	085b      	lsrs	r3, r3, #1
 80075bc:	f003 0301 	and.w	r3, r3, #1
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d031      	beq.n	8007628 <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	085b      	lsrs	r3, r3, #1
 80075c8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d02b      	beq.n	8007628 <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80075d4:	b29b      	uxth	r3, r3
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d018      	beq.n	800760c <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075de:	781a      	ldrb	r2, [r3, #0]
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075ea:	1c5a      	adds	r2, r3, #1
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80075f4:	b29b      	uxth	r3, r3
 80075f6:	3b01      	subs	r3, #1
 80075f8:	b29a      	uxth	r2, r3
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007602:	3b01      	subs	r3, #1
 8007604:	b29a      	uxth	r2, r3
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	851a      	strh	r2, [r3, #40]	@ 0x28
 800760a:	e00d      	b.n	8007628 <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800760c:	697b      	ldr	r3, [r7, #20]
 800760e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007612:	d002      	beq.n	800761a <I2C_Slave_ISR_IT+0x1e8>
 8007614:	697b      	ldr	r3, [r7, #20]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d106      	bne.n	8007628 <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800761a:	68f8      	ldr	r0, [r7, #12]
 800761c:	f000 f891 	bl	8007742 <I2C_ITSlaveSeqCplt>
 8007620:	e002      	b.n	8007628 <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 8007622:	bf00      	nop
 8007624:	e000      	b.n	8007628 <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 8007626:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	2200      	movs	r2, #0
 800762c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8007630:	2300      	movs	r3, #0
}
 8007632:	4618      	mov	r0, r3
 8007634:	3718      	adds	r7, #24
 8007636:	46bd      	mov	sp, r7
 8007638:	bd80      	pop	{r7, pc}

0800763a <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800763a:	b580      	push	{r7, lr}
 800763c:	b084      	sub	sp, #16
 800763e:	af00      	add	r7, sp, #0
 8007640:	6078      	str	r0, [r7, #4]
 8007642:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800764a:	b2db      	uxtb	r3, r3
 800764c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007650:	2b28      	cmp	r3, #40	@ 0x28
 8007652:	d16a      	bne.n	800772a <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	699b      	ldr	r3, [r3, #24]
 800765a:	0c1b      	lsrs	r3, r3, #16
 800765c:	b2db      	uxtb	r3, r3
 800765e:	f003 0301 	and.w	r3, r3, #1
 8007662:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	699b      	ldr	r3, [r3, #24]
 800766a:	0c1b      	lsrs	r3, r3, #16
 800766c:	b29b      	uxth	r3, r3
 800766e:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8007672:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	689b      	ldr	r3, [r3, #8]
 800767a:	b29b      	uxth	r3, r3
 800767c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007680:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	68db      	ldr	r3, [r3, #12]
 8007688:	b29b      	uxth	r3, r3
 800768a:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800768e:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	68db      	ldr	r3, [r3, #12]
 8007694:	2b02      	cmp	r3, #2
 8007696:	d138      	bne.n	800770a <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8007698:	897b      	ldrh	r3, [r7, #10]
 800769a:	09db      	lsrs	r3, r3, #7
 800769c:	b29a      	uxth	r2, r3
 800769e:	89bb      	ldrh	r3, [r7, #12]
 80076a0:	4053      	eors	r3, r2
 80076a2:	b29b      	uxth	r3, r3
 80076a4:	f003 0306 	and.w	r3, r3, #6
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d11c      	bne.n	80076e6 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80076ac:	897b      	ldrh	r3, [r7, #10]
 80076ae:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80076b4:	1c5a      	adds	r2, r3, #1
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80076be:	2b02      	cmp	r3, #2
 80076c0:	d13b      	bne.n	800773a <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2200      	movs	r2, #0
 80076c6:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	2208      	movs	r2, #8
 80076ce:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2200      	movs	r2, #0
 80076d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80076d8:	89ba      	ldrh	r2, [r7, #12]
 80076da:	7bfb      	ldrb	r3, [r7, #15]
 80076dc:	4619      	mov	r1, r3
 80076de:	6878      	ldr	r0, [r7, #4]
 80076e0:	f7ff fe7b 	bl	80073da <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80076e4:	e029      	b.n	800773a <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80076e6:	893b      	ldrh	r3, [r7, #8]
 80076e8:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80076ea:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f000 ff10 	bl	8008514 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2200      	movs	r2, #0
 80076f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80076fc:	89ba      	ldrh	r2, [r7, #12]
 80076fe:	7bfb      	ldrb	r3, [r7, #15]
 8007700:	4619      	mov	r1, r3
 8007702:	6878      	ldr	r0, [r7, #4]
 8007704:	f7ff fe69 	bl	80073da <HAL_I2C_AddrCallback>
}
 8007708:	e017      	b.n	800773a <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800770a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800770e:	6878      	ldr	r0, [r7, #4]
 8007710:	f000 ff00 	bl	8008514 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2200      	movs	r2, #0
 8007718:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800771c:	89ba      	ldrh	r2, [r7, #12]
 800771e:	7bfb      	ldrb	r3, [r7, #15]
 8007720:	4619      	mov	r1, r3
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	f7ff fe59 	bl	80073da <HAL_I2C_AddrCallback>
}
 8007728:	e007      	b.n	800773a <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	2208      	movs	r2, #8
 8007730:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2200      	movs	r2, #0
 8007736:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 800773a:	bf00      	nop
 800773c:	3710      	adds	r7, #16
 800773e:	46bd      	mov	sp, r7
 8007740:	bd80      	pop	{r7, pc}

08007742 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8007742:	b580      	push	{r7, lr}
 8007744:	b084      	sub	sp, #16
 8007746:	af00      	add	r7, sp, #0
 8007748:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2200      	movs	r2, #0
 8007756:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	0b9b      	lsrs	r3, r3, #14
 800775e:	f003 0301 	and.w	r3, r3, #1
 8007762:	2b00      	cmp	r3, #0
 8007764:	d008      	beq.n	8007778 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	681a      	ldr	r2, [r3, #0]
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007774:	601a      	str	r2, [r3, #0]
 8007776:	e00d      	b.n	8007794 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	0bdb      	lsrs	r3, r3, #15
 800777c:	f003 0301 	and.w	r3, r3, #1
 8007780:	2b00      	cmp	r3, #0
 8007782:	d007      	beq.n	8007794 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	681a      	ldr	r2, [r3, #0]
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007792:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800779a:	b2db      	uxtb	r3, r3
 800779c:	2b29      	cmp	r3, #41	@ 0x29
 800779e:	d112      	bne.n	80077c6 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2228      	movs	r2, #40	@ 0x28
 80077a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2221      	movs	r2, #33	@ 0x21
 80077ac:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80077ae:	2101      	movs	r1, #1
 80077b0:	6878      	ldr	r0, [r7, #4]
 80077b2:	f000 feaf 	bl	8008514 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2200      	movs	r2, #0
 80077ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	f7ff fdf7 	bl	80073b2 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80077c4:	e017      	b.n	80077f6 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80077cc:	b2db      	uxtb	r3, r3
 80077ce:	2b2a      	cmp	r3, #42	@ 0x2a
 80077d0:	d111      	bne.n	80077f6 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2228      	movs	r2, #40	@ 0x28
 80077d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2222      	movs	r2, #34	@ 0x22
 80077de:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80077e0:	2102      	movs	r1, #2
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	f000 fe96 	bl	8008514 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2200      	movs	r2, #0
 80077ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80077f0:	6878      	ldr	r0, [r7, #4]
 80077f2:	f7ff fde8 	bl	80073c6 <HAL_I2C_SlaveRxCpltCallback>
}
 80077f6:	bf00      	nop
 80077f8:	3710      	adds	r7, #16
 80077fa:	46bd      	mov	sp, r7
 80077fc:	bd80      	pop	{r7, pc}
	...

08007800 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b086      	sub	sp, #24
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
 8007808:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800781a:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007822:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	2220      	movs	r2, #32
 800782a:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800782c:	7afb      	ldrb	r3, [r7, #11]
 800782e:	2b21      	cmp	r3, #33	@ 0x21
 8007830:	d002      	beq.n	8007838 <I2C_ITSlaveCplt+0x38>
 8007832:	7afb      	ldrb	r3, [r7, #11]
 8007834:	2b29      	cmp	r3, #41	@ 0x29
 8007836:	d108      	bne.n	800784a <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8007838:	f248 0101 	movw	r1, #32769	@ 0x8001
 800783c:	6878      	ldr	r0, [r7, #4]
 800783e:	f000 fe69 	bl	8008514 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2221      	movs	r2, #33	@ 0x21
 8007846:	631a      	str	r2, [r3, #48]	@ 0x30
 8007848:	e019      	b.n	800787e <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800784a:	7afb      	ldrb	r3, [r7, #11]
 800784c:	2b22      	cmp	r3, #34	@ 0x22
 800784e:	d002      	beq.n	8007856 <I2C_ITSlaveCplt+0x56>
 8007850:	7afb      	ldrb	r3, [r7, #11]
 8007852:	2b2a      	cmp	r3, #42	@ 0x2a
 8007854:	d108      	bne.n	8007868 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8007856:	f248 0102 	movw	r1, #32770	@ 0x8002
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	f000 fe5a 	bl	8008514 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2222      	movs	r2, #34	@ 0x22
 8007864:	631a      	str	r2, [r3, #48]	@ 0x30
 8007866:	e00a      	b.n	800787e <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8007868:	7afb      	ldrb	r3, [r7, #11]
 800786a:	2b28      	cmp	r3, #40	@ 0x28
 800786c:	d107      	bne.n	800787e <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800786e:	f248 0103 	movw	r1, #32771	@ 0x8003
 8007872:	6878      	ldr	r0, [r7, #4]
 8007874:	f000 fe4e 	bl	8008514 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2200      	movs	r2, #0
 800787c:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	685a      	ldr	r2, [r3, #4]
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800788c:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	6859      	ldr	r1, [r3, #4]
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681a      	ldr	r2, [r3, #0]
 8007898:	4b80      	ldr	r3, [pc, #512]	@ (8007a9c <I2C_ITSlaveCplt+0x29c>)
 800789a:	400b      	ands	r3, r1
 800789c:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800789e:	6878      	ldr	r0, [r7, #4]
 80078a0:	f000 fb75 	bl	8007f8e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80078a4:	693b      	ldr	r3, [r7, #16]
 80078a6:	0b9b      	lsrs	r3, r3, #14
 80078a8:	f003 0301 	and.w	r3, r3, #1
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d07a      	beq.n	80079a6 <I2C_ITSlaveCplt+0x1a6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	681a      	ldr	r2, [r3, #0]
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80078be:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	f000 8112 	beq.w	8007aee <I2C_ITSlaveCplt+0x2ee>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	4a73      	ldr	r2, [pc, #460]	@ (8007aa0 <I2C_ITSlaveCplt+0x2a0>)
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d059      	beq.n	800798a <I2C_ITSlaveCplt+0x18a>
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	4a71      	ldr	r2, [pc, #452]	@ (8007aa4 <I2C_ITSlaveCplt+0x2a4>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d053      	beq.n	800798a <I2C_ITSlaveCplt+0x18a>
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	4a6f      	ldr	r2, [pc, #444]	@ (8007aa8 <I2C_ITSlaveCplt+0x2a8>)
 80078ea:	4293      	cmp	r3, r2
 80078ec:	d04d      	beq.n	800798a <I2C_ITSlaveCplt+0x18a>
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	4a6d      	ldr	r2, [pc, #436]	@ (8007aac <I2C_ITSlaveCplt+0x2ac>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d047      	beq.n	800798a <I2C_ITSlaveCplt+0x18a>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	4a6b      	ldr	r2, [pc, #428]	@ (8007ab0 <I2C_ITSlaveCplt+0x2b0>)
 8007902:	4293      	cmp	r3, r2
 8007904:	d041      	beq.n	800798a <I2C_ITSlaveCplt+0x18a>
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	4a69      	ldr	r2, [pc, #420]	@ (8007ab4 <I2C_ITSlaveCplt+0x2b4>)
 800790e:	4293      	cmp	r3, r2
 8007910:	d03b      	beq.n	800798a <I2C_ITSlaveCplt+0x18a>
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	4a67      	ldr	r2, [pc, #412]	@ (8007ab8 <I2C_ITSlaveCplt+0x2b8>)
 800791a:	4293      	cmp	r3, r2
 800791c:	d035      	beq.n	800798a <I2C_ITSlaveCplt+0x18a>
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	4a65      	ldr	r2, [pc, #404]	@ (8007abc <I2C_ITSlaveCplt+0x2bc>)
 8007926:	4293      	cmp	r3, r2
 8007928:	d02f      	beq.n	800798a <I2C_ITSlaveCplt+0x18a>
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	4a63      	ldr	r2, [pc, #396]	@ (8007ac0 <I2C_ITSlaveCplt+0x2c0>)
 8007932:	4293      	cmp	r3, r2
 8007934:	d029      	beq.n	800798a <I2C_ITSlaveCplt+0x18a>
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	4a61      	ldr	r2, [pc, #388]	@ (8007ac4 <I2C_ITSlaveCplt+0x2c4>)
 800793e:	4293      	cmp	r3, r2
 8007940:	d023      	beq.n	800798a <I2C_ITSlaveCplt+0x18a>
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	4a5f      	ldr	r2, [pc, #380]	@ (8007ac8 <I2C_ITSlaveCplt+0x2c8>)
 800794a:	4293      	cmp	r3, r2
 800794c:	d01d      	beq.n	800798a <I2C_ITSlaveCplt+0x18a>
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	4a5d      	ldr	r2, [pc, #372]	@ (8007acc <I2C_ITSlaveCplt+0x2cc>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d017      	beq.n	800798a <I2C_ITSlaveCplt+0x18a>
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	4a5b      	ldr	r2, [pc, #364]	@ (8007ad0 <I2C_ITSlaveCplt+0x2d0>)
 8007962:	4293      	cmp	r3, r2
 8007964:	d011      	beq.n	800798a <I2C_ITSlaveCplt+0x18a>
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	4a59      	ldr	r2, [pc, #356]	@ (8007ad4 <I2C_ITSlaveCplt+0x2d4>)
 800796e:	4293      	cmp	r3, r2
 8007970:	d00b      	beq.n	800798a <I2C_ITSlaveCplt+0x18a>
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	4a57      	ldr	r2, [pc, #348]	@ (8007ad8 <I2C_ITSlaveCplt+0x2d8>)
 800797a:	4293      	cmp	r3, r2
 800797c:	d005      	beq.n	800798a <I2C_ITSlaveCplt+0x18a>
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	4a55      	ldr	r2, [pc, #340]	@ (8007adc <I2C_ITSlaveCplt+0x2dc>)
 8007986:	4293      	cmp	r3, r2
 8007988:	d105      	bne.n	8007996 <I2C_ITSlaveCplt+0x196>
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	685b      	ldr	r3, [r3, #4]
 8007992:	b29b      	uxth	r3, r3
 8007994:	e004      	b.n	80079a0 <I2C_ITSlaveCplt+0x1a0>
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	685b      	ldr	r3, [r3, #4]
 800799e:	b29b      	uxth	r3, r3
 80079a0:	687a      	ldr	r2, [r7, #4]
 80079a2:	8553      	strh	r3, [r2, #42]	@ 0x2a
 80079a4:	e0a3      	b.n	8007aee <I2C_ITSlaveCplt+0x2ee>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80079a6:	693b      	ldr	r3, [r7, #16]
 80079a8:	0bdb      	lsrs	r3, r3, #15
 80079aa:	f003 0301 	and.w	r3, r3, #1
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	f000 809d 	beq.w	8007aee <I2C_ITSlaveCplt+0x2ee>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	681a      	ldr	r2, [r3, #0]
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80079c2:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	f000 8090 	beq.w	8007aee <I2C_ITSlaveCplt+0x2ee>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	4a32      	ldr	r2, [pc, #200]	@ (8007aa0 <I2C_ITSlaveCplt+0x2a0>)
 80079d6:	4293      	cmp	r3, r2
 80079d8:	d059      	beq.n	8007a8e <I2C_ITSlaveCplt+0x28e>
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	4a30      	ldr	r2, [pc, #192]	@ (8007aa4 <I2C_ITSlaveCplt+0x2a4>)
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d053      	beq.n	8007a8e <I2C_ITSlaveCplt+0x28e>
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	4a2e      	ldr	r2, [pc, #184]	@ (8007aa8 <I2C_ITSlaveCplt+0x2a8>)
 80079ee:	4293      	cmp	r3, r2
 80079f0:	d04d      	beq.n	8007a8e <I2C_ITSlaveCplt+0x28e>
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	4a2c      	ldr	r2, [pc, #176]	@ (8007aac <I2C_ITSlaveCplt+0x2ac>)
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d047      	beq.n	8007a8e <I2C_ITSlaveCplt+0x28e>
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	4a2a      	ldr	r2, [pc, #168]	@ (8007ab0 <I2C_ITSlaveCplt+0x2b0>)
 8007a06:	4293      	cmp	r3, r2
 8007a08:	d041      	beq.n	8007a8e <I2C_ITSlaveCplt+0x28e>
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	4a28      	ldr	r2, [pc, #160]	@ (8007ab4 <I2C_ITSlaveCplt+0x2b4>)
 8007a12:	4293      	cmp	r3, r2
 8007a14:	d03b      	beq.n	8007a8e <I2C_ITSlaveCplt+0x28e>
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	4a26      	ldr	r2, [pc, #152]	@ (8007ab8 <I2C_ITSlaveCplt+0x2b8>)
 8007a1e:	4293      	cmp	r3, r2
 8007a20:	d035      	beq.n	8007a8e <I2C_ITSlaveCplt+0x28e>
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	4a24      	ldr	r2, [pc, #144]	@ (8007abc <I2C_ITSlaveCplt+0x2bc>)
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	d02f      	beq.n	8007a8e <I2C_ITSlaveCplt+0x28e>
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	4a22      	ldr	r2, [pc, #136]	@ (8007ac0 <I2C_ITSlaveCplt+0x2c0>)
 8007a36:	4293      	cmp	r3, r2
 8007a38:	d029      	beq.n	8007a8e <I2C_ITSlaveCplt+0x28e>
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	4a20      	ldr	r2, [pc, #128]	@ (8007ac4 <I2C_ITSlaveCplt+0x2c4>)
 8007a42:	4293      	cmp	r3, r2
 8007a44:	d023      	beq.n	8007a8e <I2C_ITSlaveCplt+0x28e>
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	4a1e      	ldr	r2, [pc, #120]	@ (8007ac8 <I2C_ITSlaveCplt+0x2c8>)
 8007a4e:	4293      	cmp	r3, r2
 8007a50:	d01d      	beq.n	8007a8e <I2C_ITSlaveCplt+0x28e>
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	4a1c      	ldr	r2, [pc, #112]	@ (8007acc <I2C_ITSlaveCplt+0x2cc>)
 8007a5a:	4293      	cmp	r3, r2
 8007a5c:	d017      	beq.n	8007a8e <I2C_ITSlaveCplt+0x28e>
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	4a1a      	ldr	r2, [pc, #104]	@ (8007ad0 <I2C_ITSlaveCplt+0x2d0>)
 8007a66:	4293      	cmp	r3, r2
 8007a68:	d011      	beq.n	8007a8e <I2C_ITSlaveCplt+0x28e>
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	4a18      	ldr	r2, [pc, #96]	@ (8007ad4 <I2C_ITSlaveCplt+0x2d4>)
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d00b      	beq.n	8007a8e <I2C_ITSlaveCplt+0x28e>
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	4a16      	ldr	r2, [pc, #88]	@ (8007ad8 <I2C_ITSlaveCplt+0x2d8>)
 8007a7e:	4293      	cmp	r3, r2
 8007a80:	d005      	beq.n	8007a8e <I2C_ITSlaveCplt+0x28e>
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	4a14      	ldr	r2, [pc, #80]	@ (8007adc <I2C_ITSlaveCplt+0x2dc>)
 8007a8a:	4293      	cmp	r3, r2
 8007a8c:	d128      	bne.n	8007ae0 <I2C_ITSlaveCplt+0x2e0>
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	685b      	ldr	r3, [r3, #4]
 8007a96:	b29b      	uxth	r3, r3
 8007a98:	e027      	b.n	8007aea <I2C_ITSlaveCplt+0x2ea>
 8007a9a:	bf00      	nop
 8007a9c:	fe00e800 	.word	0xfe00e800
 8007aa0:	40020010 	.word	0x40020010
 8007aa4:	40020028 	.word	0x40020028
 8007aa8:	40020040 	.word	0x40020040
 8007aac:	40020058 	.word	0x40020058
 8007ab0:	40020070 	.word	0x40020070
 8007ab4:	40020088 	.word	0x40020088
 8007ab8:	400200a0 	.word	0x400200a0
 8007abc:	400200b8 	.word	0x400200b8
 8007ac0:	40020410 	.word	0x40020410
 8007ac4:	40020428 	.word	0x40020428
 8007ac8:	40020440 	.word	0x40020440
 8007acc:	40020458 	.word	0x40020458
 8007ad0:	40020470 	.word	0x40020470
 8007ad4:	40020488 	.word	0x40020488
 8007ad8:	400204a0 	.word	0x400204a0
 8007adc:	400204b8 	.word	0x400204b8
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	685b      	ldr	r3, [r3, #4]
 8007ae8:	b29b      	uxth	r3, r3
 8007aea:	687a      	ldr	r2, [r7, #4]
 8007aec:	8553      	strh	r3, [r2, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8007aee:	697b      	ldr	r3, [r7, #20]
 8007af0:	089b      	lsrs	r3, r3, #2
 8007af2:	f003 0301 	and.w	r3, r3, #1
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d020      	beq.n	8007b3c <I2C_ITSlaveCplt+0x33c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8007afa:	697b      	ldr	r3, [r7, #20]
 8007afc:	f023 0304 	bic.w	r3, r3, #4
 8007b00:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b0c:	b2d2      	uxtb	r2, r2
 8007b0e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b14:	1c5a      	adds	r2, r3, #1
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d00c      	beq.n	8007b3c <I2C_ITSlaveCplt+0x33c>
    {
      hi2c->XferSize--;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b26:	3b01      	subs	r3, #1
 8007b28:	b29a      	uxth	r2, r3
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b32:	b29b      	uxth	r3, r3
 8007b34:	3b01      	subs	r3, #1
 8007b36:	b29a      	uxth	r2, r3
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b40:	b29b      	uxth	r3, r3
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d005      	beq.n	8007b52 <I2C_ITSlaveCplt+0x352>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b4a:	f043 0204 	orr.w	r2, r3, #4
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007b52:	697b      	ldr	r3, [r7, #20]
 8007b54:	091b      	lsrs	r3, r3, #4
 8007b56:	f003 0301 	and.w	r3, r3, #1
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d04a      	beq.n	8007bf4 <I2C_ITSlaveCplt+0x3f4>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8007b5e:	693b      	ldr	r3, [r7, #16]
 8007b60:	091b      	lsrs	r3, r3, #4
 8007b62:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d044      	beq.n	8007bf4 <I2C_ITSlaveCplt+0x3f4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b6e:	b29b      	uxth	r3, r3
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d128      	bne.n	8007bc6 <I2C_ITSlaveCplt+0x3c6>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007b7a:	b2db      	uxtb	r3, r3
 8007b7c:	2b28      	cmp	r3, #40	@ 0x28
 8007b7e:	d108      	bne.n	8007b92 <I2C_ITSlaveCplt+0x392>
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007b86:	d104      	bne.n	8007b92 <I2C_ITSlaveCplt+0x392>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8007b88:	6979      	ldr	r1, [r7, #20]
 8007b8a:	6878      	ldr	r0, [r7, #4]
 8007b8c:	f000 f892 	bl	8007cb4 <I2C_ITListenCplt>
 8007b90:	e030      	b.n	8007bf4 <I2C_ITSlaveCplt+0x3f4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007b98:	b2db      	uxtb	r3, r3
 8007b9a:	2b29      	cmp	r3, #41	@ 0x29
 8007b9c:	d10e      	bne.n	8007bbc <I2C_ITSlaveCplt+0x3bc>
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007ba4:	d00a      	beq.n	8007bbc <I2C_ITSlaveCplt+0x3bc>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	2210      	movs	r2, #16
 8007bac:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8007bae:	6878      	ldr	r0, [r7, #4]
 8007bb0:	f000 f9ed 	bl	8007f8e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8007bb4:	6878      	ldr	r0, [r7, #4]
 8007bb6:	f7ff fdc4 	bl	8007742 <I2C_ITSlaveSeqCplt>
 8007bba:	e01b      	b.n	8007bf4 <I2C_ITSlaveCplt+0x3f4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	2210      	movs	r2, #16
 8007bc2:	61da      	str	r2, [r3, #28]
 8007bc4:	e016      	b.n	8007bf4 <I2C_ITSlaveCplt+0x3f4>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	2210      	movs	r2, #16
 8007bcc:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007bd2:	f043 0204 	orr.w	r2, r3, #4
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d003      	beq.n	8007be8 <I2C_ITSlaveCplt+0x3e8>
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007be6:	d105      	bne.n	8007bf4 <I2C_ITSlaveCplt+0x3f4>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007bec:	4619      	mov	r1, r3
 8007bee:	6878      	ldr	r0, [r7, #4]
 8007bf0:	f000 f8b6 	bl	8007d60 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2200      	movs	r2, #0
 8007c00:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d010      	beq.n	8007c2c <I2C_ITSlaveCplt+0x42c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c0e:	4619      	mov	r1, r3
 8007c10:	6878      	ldr	r0, [r7, #4]
 8007c12:	f000 f8a5 	bl	8007d60 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007c1c:	b2db      	uxtb	r3, r3
 8007c1e:	2b28      	cmp	r3, #40	@ 0x28
 8007c20:	d141      	bne.n	8007ca6 <I2C_ITSlaveCplt+0x4a6>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8007c22:	6979      	ldr	r1, [r7, #20]
 8007c24:	6878      	ldr	r0, [r7, #4]
 8007c26:	f000 f845 	bl	8007cb4 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007c2a:	e03c      	b.n	8007ca6 <I2C_ITSlaveCplt+0x4a6>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c30:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007c34:	d014      	beq.n	8007c60 <I2C_ITSlaveCplt+0x460>
    I2C_ITSlaveSeqCplt(hi2c);
 8007c36:	6878      	ldr	r0, [r7, #4]
 8007c38:	f7ff fd83 	bl	8007742 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	4a1c      	ldr	r2, [pc, #112]	@ (8007cb0 <I2C_ITSlaveCplt+0x4b0>)
 8007c40:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2220      	movs	r2, #32
 8007c46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2200      	movs	r2, #0
 8007c54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8007c58:	6878      	ldr	r0, [r7, #4]
 8007c5a:	f7ff fbcc 	bl	80073f6 <HAL_I2C_ListenCpltCallback>
}
 8007c5e:	e022      	b.n	8007ca6 <I2C_ITSlaveCplt+0x4a6>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007c66:	b2db      	uxtb	r3, r3
 8007c68:	2b22      	cmp	r3, #34	@ 0x22
 8007c6a:	d10e      	bne.n	8007c8a <I2C_ITSlaveCplt+0x48a>
    hi2c->State = HAL_I2C_STATE_READY;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2220      	movs	r2, #32
 8007c70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2200      	movs	r2, #0
 8007c78:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	f7ff fb9f 	bl	80073c6 <HAL_I2C_SlaveRxCpltCallback>
}
 8007c88:	e00d      	b.n	8007ca6 <I2C_ITSlaveCplt+0x4a6>
    hi2c->State = HAL_I2C_STATE_READY;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2220      	movs	r2, #32
 8007c8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2200      	movs	r2, #0
 8007c96:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007ca0:	6878      	ldr	r0, [r7, #4]
 8007ca2:	f7ff fb86 	bl	80073b2 <HAL_I2C_SlaveTxCpltCallback>
}
 8007ca6:	bf00      	nop
 8007ca8:	3718      	adds	r7, #24
 8007caa:	46bd      	mov	sp, r7
 8007cac:	bd80      	pop	{r7, pc}
 8007cae:	bf00      	nop
 8007cb0:	ffff0000 	.word	0xffff0000

08007cb4 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b082      	sub	sp, #8
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
 8007cbc:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	4a26      	ldr	r2, [pc, #152]	@ (8007d5c <I2C_ITListenCplt+0xa8>)
 8007cc2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	2220      	movs	r2, #32
 8007cce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	2200      	movs	r2, #0
 8007cde:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	089b      	lsrs	r3, r3, #2
 8007ce4:	f003 0301 	and.w	r3, r3, #1
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d022      	beq.n	8007d32 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cf6:	b2d2      	uxtb	r2, r2
 8007cf8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cfe:	1c5a      	adds	r2, r3, #1
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d012      	beq.n	8007d32 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007d10:	3b01      	subs	r3, #1
 8007d12:	b29a      	uxth	r2, r3
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007d1c:	b29b      	uxth	r3, r3
 8007d1e:	3b01      	subs	r3, #1
 8007d20:	b29a      	uxth	r2, r3
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d2a:	f043 0204 	orr.w	r2, r3, #4
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007d32:	f248 0103 	movw	r1, #32771	@ 0x8003
 8007d36:	6878      	ldr	r0, [r7, #4]
 8007d38:	f000 fbec 	bl	8008514 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	2210      	movs	r2, #16
 8007d42:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2200      	movs	r2, #0
 8007d48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	f7ff fb52 	bl	80073f6 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8007d52:	bf00      	nop
 8007d54:	3708      	adds	r7, #8
 8007d56:	46bd      	mov	sp, r7
 8007d58:	bd80      	pop	{r7, pc}
 8007d5a:	bf00      	nop
 8007d5c:	ffff0000 	.word	0xffff0000

08007d60 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b084      	sub	sp, #16
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
 8007d68:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007d70:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2200      	movs	r2, #0
 8007d76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	4a6d      	ldr	r2, [pc, #436]	@ (8007f34 <I2C_ITError+0x1d4>)
 8007d7e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2200      	movs	r2, #0
 8007d84:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	431a      	orrs	r2, r3
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8007d92:	7bfb      	ldrb	r3, [r7, #15]
 8007d94:	2b28      	cmp	r3, #40	@ 0x28
 8007d96:	d005      	beq.n	8007da4 <I2C_ITError+0x44>
 8007d98:	7bfb      	ldrb	r3, [r7, #15]
 8007d9a:	2b29      	cmp	r3, #41	@ 0x29
 8007d9c:	d002      	beq.n	8007da4 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8007d9e:	7bfb      	ldrb	r3, [r7, #15]
 8007da0:	2b2a      	cmp	r3, #42	@ 0x2a
 8007da2:	d10b      	bne.n	8007dbc <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007da4:	2103      	movs	r1, #3
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	f000 fbb4 	bl	8008514 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2228      	movs	r2, #40	@ 0x28
 8007db0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	4a60      	ldr	r2, [pc, #384]	@ (8007f38 <I2C_ITError+0x1d8>)
 8007db8:	635a      	str	r2, [r3, #52]	@ 0x34
 8007dba:	e030      	b.n	8007e1e <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007dbc:	f248 0103 	movw	r1, #32771	@ 0x8003
 8007dc0:	6878      	ldr	r0, [r7, #4]
 8007dc2:	f000 fba7 	bl	8008514 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007dc6:	6878      	ldr	r0, [r7, #4]
 8007dc8:	f000 f8e1 	bl	8007f8e <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007dd2:	b2db      	uxtb	r3, r3
 8007dd4:	2b60      	cmp	r3, #96	@ 0x60
 8007dd6:	d01f      	beq.n	8007e18 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2220      	movs	r2, #32
 8007ddc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	699b      	ldr	r3, [r3, #24]
 8007de6:	f003 0320 	and.w	r3, r3, #32
 8007dea:	2b20      	cmp	r3, #32
 8007dec:	d114      	bne.n	8007e18 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	699b      	ldr	r3, [r3, #24]
 8007df4:	f003 0310 	and.w	r3, r3, #16
 8007df8:	2b10      	cmp	r3, #16
 8007dfa:	d109      	bne.n	8007e10 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	2210      	movs	r2, #16
 8007e02:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e08:	f043 0204 	orr.w	r2, r3, #4
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	2220      	movs	r2, #32
 8007e16:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e22:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d039      	beq.n	8007ea0 <I2C_ITError+0x140>
 8007e2c:	68bb      	ldr	r3, [r7, #8]
 8007e2e:	2b11      	cmp	r3, #17
 8007e30:	d002      	beq.n	8007e38 <I2C_ITError+0xd8>
 8007e32:	68bb      	ldr	r3, [r7, #8]
 8007e34:	2b21      	cmp	r3, #33	@ 0x21
 8007e36:	d133      	bne.n	8007ea0 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007e42:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007e46:	d107      	bne.n	8007e58 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	681a      	ldr	r2, [r3, #0]
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007e56:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	f7fd fd13 	bl	8005888 <HAL_DMA_GetState>
 8007e62:	4603      	mov	r3, r0
 8007e64:	2b01      	cmp	r3, #1
 8007e66:	d017      	beq.n	8007e98 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e6c:	4a33      	ldr	r2, [pc, #204]	@ (8007f3c <I2C_ITError+0x1dc>)
 8007e6e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2200      	movs	r2, #0
 8007e74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	f7fc fb93 	bl	80045a8 <HAL_DMA_Abort_IT>
 8007e82:	4603      	mov	r3, r0
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d04d      	beq.n	8007f24 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e8e:	687a      	ldr	r2, [r7, #4]
 8007e90:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8007e92:	4610      	mov	r0, r2
 8007e94:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007e96:	e045      	b.n	8007f24 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8007e98:	6878      	ldr	r0, [r7, #4]
 8007e9a:	f000 f851 	bl	8007f40 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007e9e:	e041      	b.n	8007f24 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d039      	beq.n	8007f1c <I2C_ITError+0x1bc>
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	2b12      	cmp	r3, #18
 8007eac:	d002      	beq.n	8007eb4 <I2C_ITError+0x154>
 8007eae:	68bb      	ldr	r3, [r7, #8]
 8007eb0:	2b22      	cmp	r3, #34	@ 0x22
 8007eb2:	d133      	bne.n	8007f1c <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007ebe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007ec2:	d107      	bne.n	8007ed4 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	681a      	ldr	r2, [r3, #0]
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007ed2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ed8:	4618      	mov	r0, r3
 8007eda:	f7fd fcd5 	bl	8005888 <HAL_DMA_GetState>
 8007ede:	4603      	mov	r3, r0
 8007ee0:	2b01      	cmp	r3, #1
 8007ee2:	d017      	beq.n	8007f14 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ee8:	4a14      	ldr	r2, [pc, #80]	@ (8007f3c <I2C_ITError+0x1dc>)
 8007eea:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2200      	movs	r2, #0
 8007ef0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ef8:	4618      	mov	r0, r3
 8007efa:	f7fc fb55 	bl	80045a8 <HAL_DMA_Abort_IT>
 8007efe:	4603      	mov	r3, r0
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d011      	beq.n	8007f28 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f0a:	687a      	ldr	r2, [r7, #4]
 8007f0c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007f0e:	4610      	mov	r0, r2
 8007f10:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007f12:	e009      	b.n	8007f28 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8007f14:	6878      	ldr	r0, [r7, #4]
 8007f16:	f000 f813 	bl	8007f40 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007f1a:	e005      	b.n	8007f28 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8007f1c:	6878      	ldr	r0, [r7, #4]
 8007f1e:	f000 f80f 	bl	8007f40 <I2C_TreatErrorCallback>
  }
}
 8007f22:	e002      	b.n	8007f2a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007f24:	bf00      	nop
 8007f26:	e000      	b.n	8007f2a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007f28:	bf00      	nop
}
 8007f2a:	bf00      	nop
 8007f2c:	3710      	adds	r7, #16
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	bd80      	pop	{r7, pc}
 8007f32:	bf00      	nop
 8007f34:	ffff0000 	.word	0xffff0000
 8007f38:	08007433 	.word	0x08007433
 8007f3c:	08007fd7 	.word	0x08007fd7

08007f40 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b082      	sub	sp, #8
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007f4e:	b2db      	uxtb	r3, r3
 8007f50:	2b60      	cmp	r3, #96	@ 0x60
 8007f52:	d10e      	bne.n	8007f72 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2220      	movs	r2, #32
 8007f58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2200      	movs	r2, #0
 8007f60:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	2200      	movs	r2, #0
 8007f66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007f6a:	6878      	ldr	r0, [r7, #4]
 8007f6c:	f7ff fa57 	bl	800741e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007f70:	e009      	b.n	8007f86 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	2200      	movs	r2, #0
 8007f76:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8007f80:	6878      	ldr	r0, [r7, #4]
 8007f82:	f7ff fa42 	bl	800740a <HAL_I2C_ErrorCallback>
}
 8007f86:	bf00      	nop
 8007f88:	3708      	adds	r7, #8
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	bd80      	pop	{r7, pc}

08007f8e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007f8e:	b480      	push	{r7}
 8007f90:	b083      	sub	sp, #12
 8007f92:	af00      	add	r7, sp, #0
 8007f94:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	699b      	ldr	r3, [r3, #24]
 8007f9c:	f003 0302 	and.w	r3, r3, #2
 8007fa0:	2b02      	cmp	r3, #2
 8007fa2:	d103      	bne.n	8007fac <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	2200      	movs	r2, #0
 8007faa:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	699b      	ldr	r3, [r3, #24]
 8007fb2:	f003 0301 	and.w	r3, r3, #1
 8007fb6:	2b01      	cmp	r3, #1
 8007fb8:	d007      	beq.n	8007fca <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	699a      	ldr	r2, [r3, #24]
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f042 0201 	orr.w	r2, r2, #1
 8007fc8:	619a      	str	r2, [r3, #24]
  }
}
 8007fca:	bf00      	nop
 8007fcc:	370c      	adds	r7, #12
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd4:	4770      	bx	lr

08007fd6 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8007fd6:	b580      	push	{r7, lr}
 8007fd8:	b084      	sub	sp, #16
 8007fda:	af00      	add	r7, sp, #0
 8007fdc:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fe2:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d003      	beq.n	8007ff4 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d003      	beq.n	8008004 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008000:	2200      	movs	r2, #0
 8008002:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8008004:	68f8      	ldr	r0, [r7, #12]
 8008006:	f7ff ff9b 	bl	8007f40 <I2C_TreatErrorCallback>
}
 800800a:	bf00      	nop
 800800c:	3710      	adds	r7, #16
 800800e:	46bd      	mov	sp, r7
 8008010:	bd80      	pop	{r7, pc}

08008012 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008012:	b580      	push	{r7, lr}
 8008014:	b084      	sub	sp, #16
 8008016:	af00      	add	r7, sp, #0
 8008018:	60f8      	str	r0, [r7, #12]
 800801a:	60b9      	str	r1, [r7, #8]
 800801c:	603b      	str	r3, [r7, #0]
 800801e:	4613      	mov	r3, r2
 8008020:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008022:	e03b      	b.n	800809c <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008024:	69ba      	ldr	r2, [r7, #24]
 8008026:	6839      	ldr	r1, [r7, #0]
 8008028:	68f8      	ldr	r0, [r7, #12]
 800802a:	f000 f961 	bl	80082f0 <I2C_IsErrorOccurred>
 800802e:	4603      	mov	r3, r0
 8008030:	2b00      	cmp	r3, #0
 8008032:	d001      	beq.n	8008038 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8008034:	2301      	movs	r3, #1
 8008036:	e041      	b.n	80080bc <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800803e:	d02d      	beq.n	800809c <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008040:	f7fa fd1e 	bl	8002a80 <HAL_GetTick>
 8008044:	4602      	mov	r2, r0
 8008046:	69bb      	ldr	r3, [r7, #24]
 8008048:	1ad3      	subs	r3, r2, r3
 800804a:	683a      	ldr	r2, [r7, #0]
 800804c:	429a      	cmp	r2, r3
 800804e:	d302      	bcc.n	8008056 <I2C_WaitOnFlagUntilTimeout+0x44>
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d122      	bne.n	800809c <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	699a      	ldr	r2, [r3, #24]
 800805c:	68bb      	ldr	r3, [r7, #8]
 800805e:	4013      	ands	r3, r2
 8008060:	68ba      	ldr	r2, [r7, #8]
 8008062:	429a      	cmp	r2, r3
 8008064:	bf0c      	ite	eq
 8008066:	2301      	moveq	r3, #1
 8008068:	2300      	movne	r3, #0
 800806a:	b2db      	uxtb	r3, r3
 800806c:	461a      	mov	r2, r3
 800806e:	79fb      	ldrb	r3, [r7, #7]
 8008070:	429a      	cmp	r2, r3
 8008072:	d113      	bne.n	800809c <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008078:	f043 0220 	orr.w	r2, r3, #32
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	2220      	movs	r2, #32
 8008084:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	2200      	movs	r2, #0
 800808c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	2200      	movs	r2, #0
 8008094:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8008098:	2301      	movs	r3, #1
 800809a:	e00f      	b.n	80080bc <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	699a      	ldr	r2, [r3, #24]
 80080a2:	68bb      	ldr	r3, [r7, #8]
 80080a4:	4013      	ands	r3, r2
 80080a6:	68ba      	ldr	r2, [r7, #8]
 80080a8:	429a      	cmp	r2, r3
 80080aa:	bf0c      	ite	eq
 80080ac:	2301      	moveq	r3, #1
 80080ae:	2300      	movne	r3, #0
 80080b0:	b2db      	uxtb	r3, r3
 80080b2:	461a      	mov	r2, r3
 80080b4:	79fb      	ldrb	r3, [r7, #7]
 80080b6:	429a      	cmp	r2, r3
 80080b8:	d0b4      	beq.n	8008024 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80080ba:	2300      	movs	r3, #0
}
 80080bc:	4618      	mov	r0, r3
 80080be:	3710      	adds	r7, #16
 80080c0:	46bd      	mov	sp, r7
 80080c2:	bd80      	pop	{r7, pc}

080080c4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b084      	sub	sp, #16
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	60f8      	str	r0, [r7, #12]
 80080cc:	60b9      	str	r1, [r7, #8]
 80080ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80080d0:	e033      	b.n	800813a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80080d2:	687a      	ldr	r2, [r7, #4]
 80080d4:	68b9      	ldr	r1, [r7, #8]
 80080d6:	68f8      	ldr	r0, [r7, #12]
 80080d8:	f000 f90a 	bl	80082f0 <I2C_IsErrorOccurred>
 80080dc:	4603      	mov	r3, r0
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d001      	beq.n	80080e6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80080e2:	2301      	movs	r3, #1
 80080e4:	e031      	b.n	800814a <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80080e6:	68bb      	ldr	r3, [r7, #8]
 80080e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080ec:	d025      	beq.n	800813a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80080ee:	f7fa fcc7 	bl	8002a80 <HAL_GetTick>
 80080f2:	4602      	mov	r2, r0
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	1ad3      	subs	r3, r2, r3
 80080f8:	68ba      	ldr	r2, [r7, #8]
 80080fa:	429a      	cmp	r2, r3
 80080fc:	d302      	bcc.n	8008104 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80080fe:	68bb      	ldr	r3, [r7, #8]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d11a      	bne.n	800813a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	699b      	ldr	r3, [r3, #24]
 800810a:	f003 0302 	and.w	r3, r3, #2
 800810e:	2b02      	cmp	r3, #2
 8008110:	d013      	beq.n	800813a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008116:	f043 0220 	orr.w	r2, r3, #32
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	2220      	movs	r2, #32
 8008122:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	2200      	movs	r2, #0
 800812a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	2200      	movs	r2, #0
 8008132:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8008136:	2301      	movs	r3, #1
 8008138:	e007      	b.n	800814a <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	699b      	ldr	r3, [r3, #24]
 8008140:	f003 0302 	and.w	r3, r3, #2
 8008144:	2b02      	cmp	r3, #2
 8008146:	d1c4      	bne.n	80080d2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8008148:	2300      	movs	r3, #0
}
 800814a:	4618      	mov	r0, r3
 800814c:	3710      	adds	r7, #16
 800814e:	46bd      	mov	sp, r7
 8008150:	bd80      	pop	{r7, pc}

08008152 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008152:	b580      	push	{r7, lr}
 8008154:	b084      	sub	sp, #16
 8008156:	af00      	add	r7, sp, #0
 8008158:	60f8      	str	r0, [r7, #12]
 800815a:	60b9      	str	r1, [r7, #8]
 800815c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800815e:	e02f      	b.n	80081c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008160:	687a      	ldr	r2, [r7, #4]
 8008162:	68b9      	ldr	r1, [r7, #8]
 8008164:	68f8      	ldr	r0, [r7, #12]
 8008166:	f000 f8c3 	bl	80082f0 <I2C_IsErrorOccurred>
 800816a:	4603      	mov	r3, r0
 800816c:	2b00      	cmp	r3, #0
 800816e:	d001      	beq.n	8008174 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008170:	2301      	movs	r3, #1
 8008172:	e02d      	b.n	80081d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008174:	f7fa fc84 	bl	8002a80 <HAL_GetTick>
 8008178:	4602      	mov	r2, r0
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	1ad3      	subs	r3, r2, r3
 800817e:	68ba      	ldr	r2, [r7, #8]
 8008180:	429a      	cmp	r2, r3
 8008182:	d302      	bcc.n	800818a <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8008184:	68bb      	ldr	r3, [r7, #8]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d11a      	bne.n	80081c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	699b      	ldr	r3, [r3, #24]
 8008190:	f003 0320 	and.w	r3, r3, #32
 8008194:	2b20      	cmp	r3, #32
 8008196:	d013      	beq.n	80081c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800819c:	f043 0220 	orr.w	r2, r3, #32
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	2220      	movs	r2, #32
 80081a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	2200      	movs	r2, #0
 80081b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	2200      	movs	r2, #0
 80081b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80081bc:	2301      	movs	r3, #1
 80081be:	e007      	b.n	80081d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	699b      	ldr	r3, [r3, #24]
 80081c6:	f003 0320 	and.w	r3, r3, #32
 80081ca:	2b20      	cmp	r3, #32
 80081cc:	d1c8      	bne.n	8008160 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80081ce:	2300      	movs	r3, #0
}
 80081d0:	4618      	mov	r0, r3
 80081d2:	3710      	adds	r7, #16
 80081d4:	46bd      	mov	sp, r7
 80081d6:	bd80      	pop	{r7, pc}

080081d8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b086      	sub	sp, #24
 80081dc:	af00      	add	r7, sp, #0
 80081de:	60f8      	str	r0, [r7, #12]
 80081e0:	60b9      	str	r1, [r7, #8]
 80081e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80081e4:	2300      	movs	r3, #0
 80081e6:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80081e8:	e071      	b.n	80082ce <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80081ea:	687a      	ldr	r2, [r7, #4]
 80081ec:	68b9      	ldr	r1, [r7, #8]
 80081ee:	68f8      	ldr	r0, [r7, #12]
 80081f0:	f000 f87e 	bl	80082f0 <I2C_IsErrorOccurred>
 80081f4:	4603      	mov	r3, r0
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d001      	beq.n	80081fe <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 80081fa:	2301      	movs	r3, #1
 80081fc:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	699b      	ldr	r3, [r3, #24]
 8008204:	f003 0320 	and.w	r3, r3, #32
 8008208:	2b20      	cmp	r3, #32
 800820a:	d13b      	bne.n	8008284 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 800820c:	7dfb      	ldrb	r3, [r7, #23]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d138      	bne.n	8008284 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	699b      	ldr	r3, [r3, #24]
 8008218:	f003 0304 	and.w	r3, r3, #4
 800821c:	2b04      	cmp	r3, #4
 800821e:	d105      	bne.n	800822c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008224:	2b00      	cmp	r3, #0
 8008226:	d001      	beq.n	800822c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8008228:	2300      	movs	r3, #0
 800822a:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	699b      	ldr	r3, [r3, #24]
 8008232:	f003 0310 	and.w	r3, r3, #16
 8008236:	2b10      	cmp	r3, #16
 8008238:	d121      	bne.n	800827e <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	2210      	movs	r2, #16
 8008240:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	2204      	movs	r2, #4
 8008246:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	2220      	movs	r2, #32
 800824e:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	6859      	ldr	r1, [r3, #4]
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	681a      	ldr	r2, [r3, #0]
 800825a:	4b24      	ldr	r3, [pc, #144]	@ (80082ec <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 800825c:	400b      	ands	r3, r1
 800825e:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	2220      	movs	r2, #32
 8008264:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	2200      	movs	r2, #0
 800826c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	2200      	movs	r2, #0
 8008274:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8008278:	2301      	movs	r3, #1
 800827a:	75fb      	strb	r3, [r7, #23]
 800827c:	e002      	b.n	8008284 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	2200      	movs	r2, #0
 8008282:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8008284:	f7fa fbfc 	bl	8002a80 <HAL_GetTick>
 8008288:	4602      	mov	r2, r0
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	1ad3      	subs	r3, r2, r3
 800828e:	68ba      	ldr	r2, [r7, #8]
 8008290:	429a      	cmp	r2, r3
 8008292:	d302      	bcc.n	800829a <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8008294:	68bb      	ldr	r3, [r7, #8]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d119      	bne.n	80082ce <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 800829a:	7dfb      	ldrb	r3, [r7, #23]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d116      	bne.n	80082ce <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	699b      	ldr	r3, [r3, #24]
 80082a6:	f003 0304 	and.w	r3, r3, #4
 80082aa:	2b04      	cmp	r3, #4
 80082ac:	d00f      	beq.n	80082ce <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80082b2:	f043 0220 	orr.w	r2, r3, #32
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	2220      	movs	r2, #32
 80082be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	2200      	movs	r2, #0
 80082c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 80082ca:	2301      	movs	r3, #1
 80082cc:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	699b      	ldr	r3, [r3, #24]
 80082d4:	f003 0304 	and.w	r3, r3, #4
 80082d8:	2b04      	cmp	r3, #4
 80082da:	d002      	beq.n	80082e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 80082dc:	7dfb      	ldrb	r3, [r7, #23]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d083      	beq.n	80081ea <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 80082e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80082e4:	4618      	mov	r0, r3
 80082e6:	3718      	adds	r7, #24
 80082e8:	46bd      	mov	sp, r7
 80082ea:	bd80      	pop	{r7, pc}
 80082ec:	fe00e800 	.word	0xfe00e800

080082f0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b08a      	sub	sp, #40	@ 0x28
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	60f8      	str	r0, [r7, #12]
 80082f8:	60b9      	str	r1, [r7, #8]
 80082fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80082fc:	2300      	movs	r3, #0
 80082fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	699b      	ldr	r3, [r3, #24]
 8008308:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800830a:	2300      	movs	r3, #0
 800830c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8008312:	69bb      	ldr	r3, [r7, #24]
 8008314:	f003 0310 	and.w	r3, r3, #16
 8008318:	2b00      	cmp	r3, #0
 800831a:	d068      	beq.n	80083ee <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	2210      	movs	r2, #16
 8008322:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008324:	e049      	b.n	80083ba <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8008326:	68bb      	ldr	r3, [r7, #8]
 8008328:	f1b3 3fff 	cmp.w	r3, #4294967295
 800832c:	d045      	beq.n	80083ba <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800832e:	f7fa fba7 	bl	8002a80 <HAL_GetTick>
 8008332:	4602      	mov	r2, r0
 8008334:	69fb      	ldr	r3, [r7, #28]
 8008336:	1ad3      	subs	r3, r2, r3
 8008338:	68ba      	ldr	r2, [r7, #8]
 800833a:	429a      	cmp	r2, r3
 800833c:	d302      	bcc.n	8008344 <I2C_IsErrorOccurred+0x54>
 800833e:	68bb      	ldr	r3, [r7, #8]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d13a      	bne.n	80083ba <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	685b      	ldr	r3, [r3, #4]
 800834a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800834e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008356:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	699b      	ldr	r3, [r3, #24]
 800835e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008362:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008366:	d121      	bne.n	80083ac <I2C_IsErrorOccurred+0xbc>
 8008368:	697b      	ldr	r3, [r7, #20]
 800836a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800836e:	d01d      	beq.n	80083ac <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8008370:	7cfb      	ldrb	r3, [r7, #19]
 8008372:	2b20      	cmp	r3, #32
 8008374:	d01a      	beq.n	80083ac <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	685a      	ldr	r2, [r3, #4]
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008384:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8008386:	f7fa fb7b 	bl	8002a80 <HAL_GetTick>
 800838a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800838c:	e00e      	b.n	80083ac <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800838e:	f7fa fb77 	bl	8002a80 <HAL_GetTick>
 8008392:	4602      	mov	r2, r0
 8008394:	69fb      	ldr	r3, [r7, #28]
 8008396:	1ad3      	subs	r3, r2, r3
 8008398:	2b19      	cmp	r3, #25
 800839a:	d907      	bls.n	80083ac <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800839c:	6a3b      	ldr	r3, [r7, #32]
 800839e:	f043 0320 	orr.w	r3, r3, #32
 80083a2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80083a4:	2301      	movs	r3, #1
 80083a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80083aa:	e006      	b.n	80083ba <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	699b      	ldr	r3, [r3, #24]
 80083b2:	f003 0320 	and.w	r3, r3, #32
 80083b6:	2b20      	cmp	r3, #32
 80083b8:	d1e9      	bne.n	800838e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	699b      	ldr	r3, [r3, #24]
 80083c0:	f003 0320 	and.w	r3, r3, #32
 80083c4:	2b20      	cmp	r3, #32
 80083c6:	d003      	beq.n	80083d0 <I2C_IsErrorOccurred+0xe0>
 80083c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d0aa      	beq.n	8008326 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80083d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d103      	bne.n	80083e0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	2220      	movs	r2, #32
 80083de:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80083e0:	6a3b      	ldr	r3, [r7, #32]
 80083e2:	f043 0304 	orr.w	r3, r3, #4
 80083e6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80083e8:	2301      	movs	r3, #1
 80083ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	699b      	ldr	r3, [r3, #24]
 80083f4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80083f6:	69bb      	ldr	r3, [r7, #24]
 80083f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d00b      	beq.n	8008418 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8008400:	6a3b      	ldr	r3, [r7, #32]
 8008402:	f043 0301 	orr.w	r3, r3, #1
 8008406:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008410:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008412:	2301      	movs	r3, #1
 8008414:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8008418:	69bb      	ldr	r3, [r7, #24]
 800841a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800841e:	2b00      	cmp	r3, #0
 8008420:	d00b      	beq.n	800843a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8008422:	6a3b      	ldr	r3, [r7, #32]
 8008424:	f043 0308 	orr.w	r3, r3, #8
 8008428:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008432:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008434:	2301      	movs	r3, #1
 8008436:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800843a:	69bb      	ldr	r3, [r7, #24]
 800843c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008440:	2b00      	cmp	r3, #0
 8008442:	d00b      	beq.n	800845c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8008444:	6a3b      	ldr	r3, [r7, #32]
 8008446:	f043 0302 	orr.w	r3, r3, #2
 800844a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008454:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008456:	2301      	movs	r3, #1
 8008458:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800845c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008460:	2b00      	cmp	r3, #0
 8008462:	d01c      	beq.n	800849e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008464:	68f8      	ldr	r0, [r7, #12]
 8008466:	f7ff fd92 	bl	8007f8e <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	6859      	ldr	r1, [r3, #4]
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	681a      	ldr	r2, [r3, #0]
 8008474:	4b0d      	ldr	r3, [pc, #52]	@ (80084ac <I2C_IsErrorOccurred+0x1bc>)
 8008476:	400b      	ands	r3, r1
 8008478:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800847e:	6a3b      	ldr	r3, [r7, #32]
 8008480:	431a      	orrs	r2, r3
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	2220      	movs	r2, #32
 800848a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	2200      	movs	r2, #0
 8008492:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	2200      	movs	r2, #0
 800849a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800849e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80084a2:	4618      	mov	r0, r3
 80084a4:	3728      	adds	r7, #40	@ 0x28
 80084a6:	46bd      	mov	sp, r7
 80084a8:	bd80      	pop	{r7, pc}
 80084aa:	bf00      	nop
 80084ac:	fe00e800 	.word	0xfe00e800

080084b0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80084b0:	b480      	push	{r7}
 80084b2:	b087      	sub	sp, #28
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	60f8      	str	r0, [r7, #12]
 80084b8:	607b      	str	r3, [r7, #4]
 80084ba:	460b      	mov	r3, r1
 80084bc:	817b      	strh	r3, [r7, #10]
 80084be:	4613      	mov	r3, r2
 80084c0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80084c2:	897b      	ldrh	r3, [r7, #10]
 80084c4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80084c8:	7a7b      	ldrb	r3, [r7, #9]
 80084ca:	041b      	lsls	r3, r3, #16
 80084cc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80084d0:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80084d6:	6a3b      	ldr	r3, [r7, #32]
 80084d8:	4313      	orrs	r3, r2
 80084da:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80084de:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	685a      	ldr	r2, [r3, #4]
 80084e6:	6a3b      	ldr	r3, [r7, #32]
 80084e8:	0d5b      	lsrs	r3, r3, #21
 80084ea:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80084ee:	4b08      	ldr	r3, [pc, #32]	@ (8008510 <I2C_TransferConfig+0x60>)
 80084f0:	430b      	orrs	r3, r1
 80084f2:	43db      	mvns	r3, r3
 80084f4:	ea02 0103 	and.w	r1, r2, r3
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	697a      	ldr	r2, [r7, #20]
 80084fe:	430a      	orrs	r2, r1
 8008500:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8008502:	bf00      	nop
 8008504:	371c      	adds	r7, #28
 8008506:	46bd      	mov	sp, r7
 8008508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850c:	4770      	bx	lr
 800850e:	bf00      	nop
 8008510:	03ff63ff 	.word	0x03ff63ff

08008514 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8008514:	b480      	push	{r7}
 8008516:	b085      	sub	sp, #20
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
 800851c:	460b      	mov	r3, r1
 800851e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8008520:	2300      	movs	r3, #0
 8008522:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8008524:	887b      	ldrh	r3, [r7, #2]
 8008526:	f003 0301 	and.w	r3, r3, #1
 800852a:	2b00      	cmp	r3, #0
 800852c:	d00f      	beq.n	800854e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8008534:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800853c:	b2db      	uxtb	r3, r3
 800853e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8008542:	2b28      	cmp	r3, #40	@ 0x28
 8008544:	d003      	beq.n	800854e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800854c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800854e:	887b      	ldrh	r3, [r7, #2]
 8008550:	f003 0302 	and.w	r3, r3, #2
 8008554:	2b00      	cmp	r3, #0
 8008556:	d00f      	beq.n	8008578 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 800855e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008566:	b2db      	uxtb	r3, r3
 8008568:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800856c:	2b28      	cmp	r3, #40	@ 0x28
 800856e:	d003      	beq.n	8008578 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8008576:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8008578:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800857c:	2b00      	cmp	r3, #0
 800857e:	da03      	bge.n	8008588 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8008586:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8008588:	887b      	ldrh	r3, [r7, #2]
 800858a:	2b10      	cmp	r3, #16
 800858c:	d103      	bne.n	8008596 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8008594:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8008596:	887b      	ldrh	r3, [r7, #2]
 8008598:	2b20      	cmp	r3, #32
 800859a:	d103      	bne.n	80085a4 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	f043 0320 	orr.w	r3, r3, #32
 80085a2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80085a4:	887b      	ldrh	r3, [r7, #2]
 80085a6:	2b40      	cmp	r3, #64	@ 0x40
 80085a8:	d103      	bne.n	80085b2 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80085b0:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	6819      	ldr	r1, [r3, #0]
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	43da      	mvns	r2, r3
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	400a      	ands	r2, r1
 80085c2:	601a      	str	r2, [r3, #0]
}
 80085c4:	bf00      	nop
 80085c6:	3714      	adds	r7, #20
 80085c8:	46bd      	mov	sp, r7
 80085ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ce:	4770      	bx	lr

080085d0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80085d0:	b480      	push	{r7}
 80085d2:	b083      	sub	sp, #12
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
 80085d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80085e0:	b2db      	uxtb	r3, r3
 80085e2:	2b20      	cmp	r3, #32
 80085e4:	d138      	bne.n	8008658 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80085ec:	2b01      	cmp	r3, #1
 80085ee:	d101      	bne.n	80085f4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80085f0:	2302      	movs	r3, #2
 80085f2:	e032      	b.n	800865a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	2201      	movs	r2, #1
 80085f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2224      	movs	r2, #36	@ 0x24
 8008600:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	681a      	ldr	r2, [r3, #0]
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	f022 0201 	bic.w	r2, r2, #1
 8008612:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	681a      	ldr	r2, [r3, #0]
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008622:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	6819      	ldr	r1, [r3, #0]
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	683a      	ldr	r2, [r7, #0]
 8008630:	430a      	orrs	r2, r1
 8008632:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	681a      	ldr	r2, [r3, #0]
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	f042 0201 	orr.w	r2, r2, #1
 8008642:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2220      	movs	r2, #32
 8008648:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2200      	movs	r2, #0
 8008650:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008654:	2300      	movs	r3, #0
 8008656:	e000      	b.n	800865a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008658:	2302      	movs	r3, #2
  }
}
 800865a:	4618      	mov	r0, r3
 800865c:	370c      	adds	r7, #12
 800865e:	46bd      	mov	sp, r7
 8008660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008664:	4770      	bx	lr

08008666 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008666:	b480      	push	{r7}
 8008668:	b085      	sub	sp, #20
 800866a:	af00      	add	r7, sp, #0
 800866c:	6078      	str	r0, [r7, #4]
 800866e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008676:	b2db      	uxtb	r3, r3
 8008678:	2b20      	cmp	r3, #32
 800867a:	d139      	bne.n	80086f0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008682:	2b01      	cmp	r3, #1
 8008684:	d101      	bne.n	800868a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008686:	2302      	movs	r3, #2
 8008688:	e033      	b.n	80086f2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	2201      	movs	r2, #1
 800868e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	2224      	movs	r2, #36	@ 0x24
 8008696:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	681a      	ldr	r2, [r3, #0]
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	f022 0201 	bic.w	r2, r2, #1
 80086a8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80086b8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80086ba:	683b      	ldr	r3, [r7, #0]
 80086bc:	021b      	lsls	r3, r3, #8
 80086be:	68fa      	ldr	r2, [r7, #12]
 80086c0:	4313      	orrs	r3, r2
 80086c2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	68fa      	ldr	r2, [r7, #12]
 80086ca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	681a      	ldr	r2, [r3, #0]
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	f042 0201 	orr.w	r2, r2, #1
 80086da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2220      	movs	r2, #32
 80086e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2200      	movs	r2, #0
 80086e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80086ec:	2300      	movs	r3, #0
 80086ee:	e000      	b.n	80086f2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80086f0:	2302      	movs	r3, #2
  }
}
 80086f2:	4618      	mov	r0, r3
 80086f4:	3714      	adds	r7, #20
 80086f6:	46bd      	mov	sp, r7
 80086f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fc:	4770      	bx	lr
	...

08008700 <HAL_JPEG_Init>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_Init(JPEG_HandleTypeDef *hjpeg)
{
 8008700:	b580      	push	{r7, lr}
 8008702:	b082      	sub	sp, #8
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
    99,  99,  99,  99,  99,  99,  99,  99,
    99,  99,  99,  99,  99,  99,  99,  99
  };

  /* Check the JPEG handle allocation */
  if (hjpeg == NULL)
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d101      	bne.n	8008712 <HAL_JPEG_Init+0x12>
  {
    return HAL_ERROR;
 800870e:	2301      	movs	r3, #1
 8008710:	e070      	b.n	80087f4 <HAL_JPEG_Init+0xf4>

    /* Init the low level hardware */
    hjpeg->MspInitCallback(hjpeg);
  }
#else
  if (hjpeg->State == HAL_JPEG_STATE_RESET)
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8008718:	b2db      	uxtb	r3, r3
 800871a:	2b00      	cmp	r3, #0
 800871c:	d106      	bne.n	800872c <HAL_JPEG_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hjpeg->Lock = HAL_UNLOCKED;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	2200      	movs	r2, #0
 8008722:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_JPEG_MspInit(hjpeg);
 8008726:	6878      	ldr	r0, [r7, #4]
 8008728:	f7f9 fc18 	bl	8001f5c <HAL_JPEG_MspInit>
  }
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_BUSY;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2202      	movs	r2, #2
 8008730:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Start the JPEG Core*/
  __HAL_JPEG_ENABLE(hjpeg);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	f042 0201 	orr.w	r2, r2, #1
 8008742:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Stop the JPEG encoding/decoding process*/
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	681a      	ldr	r2, [r3, #0]
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	f022 0201 	bic.w	r2, r2, #1
 8008752:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8008762:	631a      	str	r2, [r3, #48]	@ 0x30


  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008772:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008782:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8008792:	639a      	str	r2, [r3, #56]	@ 0x38

  /* init default quantization tables*/
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	4a19      	ldr	r2, [pc, #100]	@ (80087fc <HAL_JPEG_Init+0xfc>)
 8008798:	63da      	str	r2, [r3, #60]	@ 0x3c
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	4a18      	ldr	r2, [pc, #96]	@ (8008800 <HAL_JPEG_Init+0x100>)
 800879e:	641a      	str	r2, [r3, #64]	@ 0x40
  hjpeg->QuantTable2 = NULL;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2200      	movs	r2, #0
 80087a4:	645a      	str	r2, [r3, #68]	@ 0x44
  hjpeg->QuantTable3 = NULL;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	2200      	movs	r2, #0
 80087aa:	649a      	str	r2, [r3, #72]	@ 0x48

  /* init the default Huffman tables*/
  if (JPEG_Set_HuffEnc_Mem(hjpeg) != HAL_OK)
 80087ac:	6878      	ldr	r0, [r7, #4]
 80087ae:	f000 fe97 	bl	80094e0 <JPEG_Set_HuffEnc_Mem>
 80087b2:	4603      	mov	r3, r0
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d004      	beq.n	80087c2 <HAL_JPEG_Init+0xc2>
  {
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2201      	movs	r2, #1
 80087bc:	651a      	str	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 80087be:	2301      	movs	r3, #1
 80087c0:	e018      	b.n	80087f4 <HAL_JPEG_Init+0xf4>
  }

  /* Enable header processing*/
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	685a      	ldr	r2, [r3, #4]
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80087d0:	605a      	str	r2, [r3, #4]

  /* Reset JpegInCount and JpegOutCount */
  hjpeg->JpegInCount = 0;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	2200      	movs	r2, #0
 80087d6:	621a      	str	r2, [r3, #32]
  hjpeg->JpegOutCount = 0;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2200      	movs	r2, #0
 80087dc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_READY;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	2201      	movs	r2, #1
 80087e2:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Reset the JPEG ErrorCode */
  hjpeg->ErrorCode = HAL_JPEG_ERROR_NONE;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	2200      	movs	r2, #0
 80087ea:	651a      	str	r2, [r3, #80]	@ 0x50

  /*Clear the context filelds*/
  hjpeg->Context = 0;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2200      	movs	r2, #0
 80087f0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return HAL_OK;
 80087f2:	2300      	movs	r3, #0
}
 80087f4:	4618      	mov	r0, r3
 80087f6:	3708      	adds	r7, #8
 80087f8:	46bd      	mov	sp, r7
 80087fa:	bd80      	pop	{r7, pc}
 80087fc:	08017a00 	.word	0x08017a00
 8008800:	08017a40 	.word	0x08017a40

08008804 <HAL_JPEG_ConfigEncoding>:
  * @param  pConf pointer to a JPEG_ConfTypeDef structure that contains
  *         the encoding configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_ConfigEncoding(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pConf)
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b088      	sub	sp, #32
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
 800880c:	6039      	str	r1, [r7, #0]
  uint32_t vfactor;
  uint32_t hMCU;
  uint32_t vMCU;

  /* Check the JPEG handle allocation */
  if ((hjpeg == NULL) || (pConf == NULL))
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d002      	beq.n	800881a <HAL_JPEG_ConfigEncoding+0x16>
 8008814:	683b      	ldr	r3, [r7, #0]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d101      	bne.n	800881e <HAL_JPEG_ConfigEncoding+0x1a>
  {
    return HAL_ERROR;
 800881a:	2301      	movs	r3, #1
 800881c:	e191      	b.n	8008b42 <HAL_JPEG_ConfigEncoding+0x33e>
    assert_param(IS_JPEG_COLORSPACE(pConf->ColorSpace));
    assert_param(IS_JPEG_CHROMASUBSAMPLING(pConf->ChromaSubsampling));
    assert_param(IS_JPEG_IMAGE_QUALITY(pConf->ImageQuality));

    /* Process Locked */
    __HAL_LOCK(hjpeg);
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8008824:	2b01      	cmp	r3, #1
 8008826:	d101      	bne.n	800882c <HAL_JPEG_ConfigEncoding+0x28>
 8008828:	2302      	movs	r3, #2
 800882a:	e18a      	b.n	8008b42 <HAL_JPEG_ConfigEncoding+0x33e>
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	2201      	movs	r2, #1
 8008830:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    if (hjpeg->State == HAL_JPEG_STATE_READY)
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800883a:	b2db      	uxtb	r3, r3
 800883c:	2b01      	cmp	r3, #1
 800883e:	f040 817b 	bne.w	8008b38 <HAL_JPEG_ConfigEncoding+0x334>
    {
      hjpeg->State = HAL_JPEG_STATE_BUSY;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2202      	movs	r2, #2
 8008846:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

      hjpeg->Conf.ColorSpace          =  pConf->ColorSpace;
 800884a:	683b      	ldr	r3, [r7, #0]
 800884c:	681a      	ldr	r2, [r3, #0]
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	605a      	str	r2, [r3, #4]
      hjpeg->Conf.ChromaSubsampling   =  pConf->ChromaSubsampling;
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	685a      	ldr	r2, [r3, #4]
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	609a      	str	r2, [r3, #8]
      hjpeg->Conf.ImageHeight         =  pConf->ImageHeight;
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	689a      	ldr	r2, [r3, #8]
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	60da      	str	r2, [r3, #12]
      hjpeg->Conf.ImageWidth          =  pConf->ImageWidth;
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	68da      	ldr	r2, [r3, #12]
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	611a      	str	r2, [r3, #16]
      hjpeg->Conf.ImageQuality        =  pConf->ImageQuality;
 800886a:	683b      	ldr	r3, [r7, #0]
 800886c:	691a      	ldr	r2, [r3, #16]
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	615a      	str	r2, [r3, #20]

      /* Reset the Color Space : by default only one quantization table is used*/
      hjpeg->Instance->CONFR1 &= ~JPEG_CONFR1_COLORSPACE;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	685a      	ldr	r2, [r3, #4]
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	f022 0230 	bic.w	r2, r2, #48	@ 0x30
 8008880:	605a      	str	r2, [r3, #4]

      /* Set Number of color components*/
      if (hjpeg->Conf.ColorSpace == JPEG_GRAYSCALE_COLORSPACE)
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	685b      	ldr	r3, [r3, #4]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d110      	bne.n	80088ac <HAL_JPEG_ConfigEncoding+0xa8>
      {
        /*Gray Scale is only one component 8x8 blocks i.e 4:4:4*/
        hjpeg->Conf.ChromaSubsampling = JPEG_444_SUBSAMPLING;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	2200      	movs	r2, #0
 800888e:	609a      	str	r2, [r3, #8]

        JPEG_SetColorGrayScale(hjpeg);
 8008890:	6878      	ldr	r0, [r7, #4]
 8008892:	f001 f991 	bl	8009bb8 <JPEG_SetColorGrayScale>
        /* Set quantization table 0*/
        error = JPEG_Set_Quantization_Mem(hjpeg, hjpeg->QuantTable0, (hjpeg->Instance->QMEM0));
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	3350      	adds	r3, #80	@ 0x50
 80088a0:	461a      	mov	r2, r3
 80088a2:	6878      	ldr	r0, [r7, #4]
 80088a4:	f001 f89e 	bl	80099e4 <JPEG_Set_Quantization_Mem>
 80088a8:	61f8      	str	r0, [r7, #28]
 80088aa:	e0c5      	b.n	8008a38 <HAL_JPEG_ConfigEncoding+0x234>
      }
      else if (hjpeg->Conf.ColorSpace == JPEG_YCBCR_COLORSPACE)
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	685b      	ldr	r3, [r3, #4]
 80088b0:	2b10      	cmp	r3, #16
 80088b2:	d166      	bne.n	8008982 <HAL_JPEG_ConfigEncoding+0x17e>
      {
        /*
           Set the Color Space for YCbCr : 2 quantization tables are used
           one for Luminance(Y) and one for both Chrominances (Cb & Cr)
          */
        hjpeg->Instance->CONFR1 |= JPEG_CONFR1_COLORSPACE_0;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	685a      	ldr	r2, [r3, #4]
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	f042 0210 	orr.w	r2, r2, #16
 80088c2:	605a      	str	r2, [r3, #4]

        JPEG_SetColorYCBCR(hjpeg);
 80088c4:	6878      	ldr	r0, [r7, #4]
 80088c6:	f001 f8ff 	bl	8009ac8 <JPEG_SetColorYCBCR>

        /* Set quantization table 0*/
        error  = JPEG_Set_Quantization_Mem(hjpeg, hjpeg->QuantTable0, (hjpeg->Instance->QMEM0));
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	3350      	adds	r3, #80	@ 0x50
 80088d4:	461a      	mov	r2, r3
 80088d6:	6878      	ldr	r0, [r7, #4]
 80088d8:	f001 f884 	bl	80099e4 <JPEG_Set_Quantization_Mem>
 80088dc:	61f8      	str	r0, [r7, #28]
        /*By default quantization table 0 for component 0 and quantization table 1 for both components 1 and 2*/
        error |= JPEG_Set_Quantization_Mem(hjpeg, hjpeg->QuantTable1, (hjpeg->Instance->QMEM1));
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	3390      	adds	r3, #144	@ 0x90
 80088e8:	461a      	mov	r2, r3
 80088ea:	6878      	ldr	r0, [r7, #4]
 80088ec:	f001 f87a 	bl	80099e4 <JPEG_Set_Quantization_Mem>
 80088f0:	4602      	mov	r2, r0
 80088f2:	69fb      	ldr	r3, [r7, #28]
 80088f4:	4313      	orrs	r3, r2
 80088f6:	61fb      	str	r3, [r7, #28]

        if ((hjpeg->Context & JPEG_CONTEXT_CUSTOM_TABLES) != 0UL)
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80088fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008900:	2b00      	cmp	r3, #0
 8008902:	f000 8099 	beq.w	8008a38 <HAL_JPEG_ConfigEncoding+0x234>
        {
          /*Use user customized quantization tables , 1 table per component*/
          /* use 3 quantization tables , one for each component*/
          hjpeg->Instance->CONFR1 &= (~JPEG_CONFR1_COLORSPACE);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	685a      	ldr	r2, [r3, #4]
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	f022 0230 	bic.w	r2, r2, #48	@ 0x30
 8008914:	605a      	str	r2, [r3, #4]
          hjpeg->Instance->CONFR1 |= JPEG_CONFR1_COLORSPACE_1;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	685a      	ldr	r2, [r3, #4]
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	f042 0220 	orr.w	r2, r2, #32
 8008924:	605a      	str	r2, [r3, #4]

          error |= JPEG_Set_Quantization_Mem(hjpeg, hjpeg->QuantTable2, (hjpeg->Instance->QMEM2));
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	33d0      	adds	r3, #208	@ 0xd0
 8008930:	461a      	mov	r2, r3
 8008932:	6878      	ldr	r0, [r7, #4]
 8008934:	f001 f856 	bl	80099e4 <JPEG_Set_Quantization_Mem>
 8008938:	4602      	mov	r2, r0
 800893a:	69fb      	ldr	r3, [r7, #28]
 800893c:	4313      	orrs	r3, r2
 800893e:	61fb      	str	r3, [r7, #28]

          /*Use Quantization 1 table for component 1*/
          hjpeg->Instance->CONFR5 &= (~JPEG_CONFR5_QT);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	695a      	ldr	r2, [r3, #20]
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	f022 020c 	bic.w	r2, r2, #12
 800894e:	615a      	str	r2, [r3, #20]
          hjpeg->Instance->CONFR5 |=  JPEG_CONFR5_QT_0;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	695a      	ldr	r2, [r3, #20]
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	f042 0204 	orr.w	r2, r2, #4
 800895e:	615a      	str	r2, [r3, #20]

          /*Use Quantization 2 table for component 2*/
          hjpeg->Instance->CONFR6 &= (~JPEG_CONFR6_QT);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	699a      	ldr	r2, [r3, #24]
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	f022 020c 	bic.w	r2, r2, #12
 800896e:	619a      	str	r2, [r3, #24]
          hjpeg->Instance->CONFR6 |=  JPEG_CONFR6_QT_1;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	699a      	ldr	r2, [r3, #24]
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	f042 0208 	orr.w	r2, r2, #8
 800897e:	619a      	str	r2, [r3, #24]
 8008980:	e05a      	b.n	8008a38 <HAL_JPEG_ConfigEncoding+0x234>
        }
      }
      else /* ColorSpace == JPEG_CMYK_COLORSPACE */
      {
        JPEG_SetColorCMYK(hjpeg);
 8008982:	6878      	ldr	r0, [r7, #4]
 8008984:	f001 f936 	bl	8009bf4 <JPEG_SetColorCMYK>

        /* Set quantization table 0*/
        error  = JPEG_Set_Quantization_Mem(hjpeg, hjpeg->QuantTable0, (hjpeg->Instance->QMEM0));
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	3350      	adds	r3, #80	@ 0x50
 8008992:	461a      	mov	r2, r3
 8008994:	6878      	ldr	r0, [r7, #4]
 8008996:	f001 f825 	bl	80099e4 <JPEG_Set_Quantization_Mem>
 800899a:	61f8      	str	r0, [r7, #28]
        /*By default quantization table 0 for All components*/

        if ((hjpeg->Context & JPEG_CONTEXT_CUSTOM_TABLES) != 0UL)
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80089a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d047      	beq.n	8008a38 <HAL_JPEG_ConfigEncoding+0x234>
        {
          /*Use user customized quantization tables , 1 table per component*/
          /* use 4 quantization tables , one for each component*/
          hjpeg->Instance->CONFR1 |= JPEG_CONFR1_COLORSPACE;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	685a      	ldr	r2, [r3, #4]
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	f042 0230 	orr.w	r2, r2, #48	@ 0x30
 80089b6:	605a      	str	r2, [r3, #4]

          error |= JPEG_Set_Quantization_Mem(hjpeg, hjpeg->QuantTable1, (hjpeg->Instance->QMEM1));
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	3390      	adds	r3, #144	@ 0x90
 80089c2:	461a      	mov	r2, r3
 80089c4:	6878      	ldr	r0, [r7, #4]
 80089c6:	f001 f80d 	bl	80099e4 <JPEG_Set_Quantization_Mem>
 80089ca:	4602      	mov	r2, r0
 80089cc:	69fb      	ldr	r3, [r7, #28]
 80089ce:	4313      	orrs	r3, r2
 80089d0:	61fb      	str	r3, [r7, #28]
          error |= JPEG_Set_Quantization_Mem(hjpeg, hjpeg->QuantTable2, (hjpeg->Instance->QMEM2));
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	33d0      	adds	r3, #208	@ 0xd0
 80089dc:	461a      	mov	r2, r3
 80089de:	6878      	ldr	r0, [r7, #4]
 80089e0:	f001 f800 	bl	80099e4 <JPEG_Set_Quantization_Mem>
 80089e4:	4602      	mov	r2, r0
 80089e6:	69fb      	ldr	r3, [r7, #28]
 80089e8:	4313      	orrs	r3, r2
 80089ea:	61fb      	str	r3, [r7, #28]
          error |= JPEG_Set_Quantization_Mem(hjpeg, hjpeg->QuantTable3, (hjpeg->Instance->QMEM3));
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 80089f8:	461a      	mov	r2, r3
 80089fa:	6878      	ldr	r0, [r7, #4]
 80089fc:	f000 fff2 	bl	80099e4 <JPEG_Set_Quantization_Mem>
 8008a00:	4602      	mov	r2, r0
 8008a02:	69fb      	ldr	r3, [r7, #28]
 8008a04:	4313      	orrs	r3, r2
 8008a06:	61fb      	str	r3, [r7, #28]

          /*Use Quantization 1 table for component 1*/
          hjpeg->Instance->CONFR5 |=  JPEG_CONFR5_QT_0;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	695a      	ldr	r2, [r3, #20]
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	f042 0204 	orr.w	r2, r2, #4
 8008a16:	615a      	str	r2, [r3, #20]

          /*Use Quantization 2 table for component 2*/
          hjpeg->Instance->CONFR6 |=  JPEG_CONFR6_QT_1;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	699a      	ldr	r2, [r3, #24]
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	f042 0208 	orr.w	r2, r2, #8
 8008a26:	619a      	str	r2, [r3, #24]

          /*Use Quantization 3 table for component 3*/
          hjpeg->Instance->CONFR7 |=  JPEG_CONFR7_QT;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	69da      	ldr	r2, [r3, #28]
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	f042 020c 	orr.w	r2, r2, #12
 8008a36:	61da      	str	r2, [r3, #28]
        }
      }

      if (error != 0UL)
 8008a38:	69fb      	ldr	r3, [r7, #28]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d00c      	beq.n	8008a58 <HAL_JPEG_ConfigEncoding+0x254>
      {
        hjpeg->ErrorCode = HAL_JPEG_ERROR_QUANT_TABLE;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	2202      	movs	r2, #2
 8008a42:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Process Unlocked */
        __HAL_UNLOCK(hjpeg);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2200      	movs	r2, #0
 8008a48:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Set the JPEG State to ready */
        hjpeg->State = HAL_JPEG_STATE_READY;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2201      	movs	r2, #1
 8008a50:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

        return  HAL_ERROR;
 8008a54:	2301      	movs	r3, #1
 8008a56:	e074      	b.n	8008b42 <HAL_JPEG_ConfigEncoding+0x33e>
      }
      /* Set the image size*/
      /* set the number of lines*/
      MODIFY_REG(hjpeg->Instance->CONFR1, JPEG_CONFR1_YSIZE, ((hjpeg->Conf.ImageHeight & 0x0000FFFFUL) << 16));
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	685b      	ldr	r3, [r3, #4]
 8008a5e:	b299      	uxth	r1, r3
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	68db      	ldr	r3, [r3, #12]
 8008a64:	041a      	lsls	r2, r3, #16
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	430a      	orrs	r2, r1
 8008a6c:	605a      	str	r2, [r3, #4]
      /* set the number of pixels per line*/
      MODIFY_REG(hjpeg->Instance->CONFR3, JPEG_CONFR3_XSIZE, ((hjpeg->Conf.ImageWidth & 0x0000FFFFUL) << 16));
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	68db      	ldr	r3, [r3, #12]
 8008a74:	b299      	uxth	r1, r3
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	691b      	ldr	r3, [r3, #16]
 8008a7a:	041a      	lsls	r2, r3, #16
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	430a      	orrs	r2, r1
 8008a82:	60da      	str	r2, [r3, #12]


      if (hjpeg->Conf.ChromaSubsampling == JPEG_420_SUBSAMPLING) /* 4:2:0*/
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	689b      	ldr	r3, [r3, #8]
 8008a88:	2b01      	cmp	r3, #1
 8008a8a:	d104      	bne.n	8008a96 <HAL_JPEG_ConfigEncoding+0x292>
      {
        hfactor = 16;
 8008a8c:	2310      	movs	r3, #16
 8008a8e:	61bb      	str	r3, [r7, #24]
        vfactor = 16;
 8008a90:	2310      	movs	r3, #16
 8008a92:	617b      	str	r3, [r7, #20]
 8008a94:	e00c      	b.n	8008ab0 <HAL_JPEG_ConfigEncoding+0x2ac>
      }
      else if (hjpeg->Conf.ChromaSubsampling == JPEG_422_SUBSAMPLING) /* 4:2:2*/
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	689b      	ldr	r3, [r3, #8]
 8008a9a:	2b02      	cmp	r3, #2
 8008a9c:	d104      	bne.n	8008aa8 <HAL_JPEG_ConfigEncoding+0x2a4>
      {
        hfactor = 16;
 8008a9e:	2310      	movs	r3, #16
 8008aa0:	61bb      	str	r3, [r7, #24]
        vfactor = 8;
 8008aa2:	2308      	movs	r3, #8
 8008aa4:	617b      	str	r3, [r7, #20]
 8008aa6:	e003      	b.n	8008ab0 <HAL_JPEG_ConfigEncoding+0x2ac>
      }
      else /* Default is 8x8 MCU,  4:4:4*/
      {
        hfactor = 8;
 8008aa8:	2308      	movs	r3, #8
 8008aaa:	61bb      	str	r3, [r7, #24]
        vfactor = 8;
 8008aac:	2308      	movs	r3, #8
 8008aae:	617b      	str	r3, [r7, #20]
      }

      hMCU = (hjpeg->Conf.ImageWidth / hfactor);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	691a      	ldr	r2, [r3, #16]
 8008ab4:	69bb      	ldr	r3, [r7, #24]
 8008ab6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008aba:	613b      	str	r3, [r7, #16]
      if ((hjpeg->Conf.ImageWidth % hfactor) != 0UL)
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	691b      	ldr	r3, [r3, #16]
 8008ac0:	69ba      	ldr	r2, [r7, #24]
 8008ac2:	fbb3 f2f2 	udiv	r2, r3, r2
 8008ac6:	69b9      	ldr	r1, [r7, #24]
 8008ac8:	fb01 f202 	mul.w	r2, r1, r2
 8008acc:	1a9b      	subs	r3, r3, r2
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d002      	beq.n	8008ad8 <HAL_JPEG_ConfigEncoding+0x2d4>
      {
        hMCU++; /*+1 for horizontal incomplete MCU */
 8008ad2:	693b      	ldr	r3, [r7, #16]
 8008ad4:	3301      	adds	r3, #1
 8008ad6:	613b      	str	r3, [r7, #16]
      }

      vMCU = (hjpeg->Conf.ImageHeight / vfactor);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	68da      	ldr	r2, [r3, #12]
 8008adc:	697b      	ldr	r3, [r7, #20]
 8008ade:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ae2:	60fb      	str	r3, [r7, #12]
      if ((hjpeg->Conf.ImageHeight % vfactor) != 0UL)
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	68db      	ldr	r3, [r3, #12]
 8008ae8:	697a      	ldr	r2, [r7, #20]
 8008aea:	fbb3 f2f2 	udiv	r2, r3, r2
 8008aee:	6979      	ldr	r1, [r7, #20]
 8008af0:	fb01 f202 	mul.w	r2, r1, r2
 8008af4:	1a9b      	subs	r3, r3, r2
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d002      	beq.n	8008b00 <HAL_JPEG_ConfigEncoding+0x2fc>
      {
        vMCU++; /*+1 for vertical incomplete MCU */
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	3301      	adds	r3, #1
 8008afe:	60fb      	str	r3, [r7, #12]
      }

      numberMCU = (hMCU * vMCU) - 1UL; /* Bit Field JPEG_CONFR2_NMCU shall be set to NB_MCU - 1*/
 8008b00:	693b      	ldr	r3, [r7, #16]
 8008b02:	68fa      	ldr	r2, [r7, #12]
 8008b04:	fb02 f303 	mul.w	r3, r2, r3
 8008b08:	3b01      	subs	r3, #1
 8008b0a:	60bb      	str	r3, [r7, #8]
      /* Set the number of MCU*/
      hjpeg->Instance->CONFR2 = (numberMCU & JPEG_CONFR2_NMCU);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	68ba      	ldr	r2, [r7, #8]
 8008b12:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8008b16:	609a      	str	r2, [r3, #8]

      hjpeg->Context |= JPEG_CONTEXT_CONF_ENCODING;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b1c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hjpeg);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2200      	movs	r2, #0
 8008b28:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Set the JPEG State to ready */
      hjpeg->State = HAL_JPEG_STATE_READY;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	2201      	movs	r2, #1
 8008b30:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

      /* Return function status */
      return HAL_OK;
 8008b34:	2300      	movs	r3, #0
 8008b36:	e004      	b.n	8008b42 <HAL_JPEG_ConfigEncoding+0x33e>
    }
    else
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hjpeg);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Return function status */
      return HAL_BUSY;
 8008b40:	2302      	movs	r3, #2
    }
  }
}
 8008b42:	4618      	mov	r0, r3
 8008b44:	3720      	adds	r7, #32
 8008b46:	46bd      	mov	sp, r7
 8008b48:	bd80      	pop	{r7, pc}

08008b4a <HAL_JPEG_GetInfo>:
  * @param  pInfo pointer to a JPEG_ConfTypeDef structure that contains
  *         The JPEG decoded header information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_GetInfo(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
{
 8008b4a:	b580      	push	{r7, lr}
 8008b4c:	b086      	sub	sp, #24
 8008b4e:	af00      	add	r7, sp, #0
 8008b50:	6078      	str	r0, [r7, #4]
 8008b52:	6039      	str	r1, [r7, #0]
  uint32_t yblockNb;
  uint32_t cBblockNb;
  uint32_t cRblockNb;

  /* Check the JPEG handle allocation */
  if ((hjpeg == NULL) || (pInfo == NULL))
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d002      	beq.n	8008b60 <HAL_JPEG_GetInfo+0x16>
 8008b5a:	683b      	ldr	r3, [r7, #0]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d101      	bne.n	8008b64 <HAL_JPEG_GetInfo+0x1a>
  {
    return HAL_ERROR;
 8008b60:	2301      	movs	r3, #1
 8008b62:	e083      	b.n	8008c6c <HAL_JPEG_GetInfo+0x122>
  }

  /*Read the conf parameters */
  if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF_1)
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	685b      	ldr	r3, [r3, #4]
 8008b6a:	f003 0303 	and.w	r3, r3, #3
 8008b6e:	2b02      	cmp	r3, #2
 8008b70:	d103      	bne.n	8008b7a <HAL_JPEG_GetInfo+0x30>
  {
    pInfo->ColorSpace = JPEG_YCBCR_COLORSPACE;
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	2210      	movs	r2, #16
 8008b76:	601a      	str	r2, [r3, #0]
 8008b78:	e017      	b.n	8008baa <HAL_JPEG_GetInfo+0x60>
  }
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == 0UL)
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	685b      	ldr	r3, [r3, #4]
 8008b80:	f003 0303 	and.w	r3, r3, #3
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d103      	bne.n	8008b90 <HAL_JPEG_GetInfo+0x46>
  {
    pInfo->ColorSpace = JPEG_GRAYSCALE_COLORSPACE;
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	601a      	str	r2, [r3, #0]
 8008b8e:	e00c      	b.n	8008baa <HAL_JPEG_GetInfo+0x60>
  }
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF)
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	685b      	ldr	r3, [r3, #4]
 8008b96:	f003 0303 	and.w	r3, r3, #3
 8008b9a:	2b03      	cmp	r3, #3
 8008b9c:	d103      	bne.n	8008ba6 <HAL_JPEG_GetInfo+0x5c>
  {
    pInfo->ColorSpace = JPEG_CMYK_COLORSPACE;
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	2230      	movs	r2, #48	@ 0x30
 8008ba2:	601a      	str	r2, [r3, #0]
 8008ba4:	e001      	b.n	8008baa <HAL_JPEG_GetInfo+0x60>
  }
  else
  {
    return HAL_ERROR;
 8008ba6:	2301      	movs	r3, #1
 8008ba8:	e060      	b.n	8008c6c <HAL_JPEG_GetInfo+0x122>
  }

  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	685b      	ldr	r3, [r3, #4]
 8008bb0:	0c1b      	lsrs	r3, r3, #16
 8008bb2:	b29a      	uxth	r2, r3
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	609a      	str	r2, [r3, #8]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	68db      	ldr	r3, [r3, #12]
 8008bbe:	0c1b      	lsrs	r3, r3, #16
 8008bc0:	b29a      	uxth	r2, r3
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	60da      	str	r2, [r3, #12]

  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	2b10      	cmp	r3, #16
 8008bcc:	d003      	beq.n	8008bd6 <HAL_JPEG_GetInfo+0x8c>
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	2b30      	cmp	r3, #48	@ 0x30
 8008bd4:	d140      	bne.n	8008c58 <HAL_JPEG_GetInfo+0x10e>
  {
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	691b      	ldr	r3, [r3, #16]
 8008bdc:	091b      	lsrs	r3, r3, #4
 8008bde:	f003 030f 	and.w	r3, r3, #15
 8008be2:	617b      	str	r3, [r7, #20]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	695b      	ldr	r3, [r3, #20]
 8008bea:	091b      	lsrs	r3, r3, #4
 8008bec:	f003 030f 	and.w	r3, r3, #15
 8008bf0:	613b      	str	r3, [r7, #16]
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	699b      	ldr	r3, [r3, #24]
 8008bf8:	091b      	lsrs	r3, r3, #4
 8008bfa:	f003 030f 	and.w	r3, r3, #15
 8008bfe:	60fb      	str	r3, [r7, #12]

    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8008c00:	697b      	ldr	r3, [r7, #20]
 8008c02:	2b01      	cmp	r3, #1
 8008c04:	d109      	bne.n	8008c1a <HAL_JPEG_GetInfo+0xd0>
 8008c06:	693b      	ldr	r3, [r7, #16]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d106      	bne.n	8008c1a <HAL_JPEG_GetInfo+0xd0>
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d103      	bne.n	8008c1a <HAL_JPEG_GetInfo+0xd0>
    {
      pInfo->ChromaSubsampling = JPEG_422_SUBSAMPLING; /*16x8 block*/
 8008c12:	683b      	ldr	r3, [r7, #0]
 8008c14:	2202      	movs	r2, #2
 8008c16:	605a      	str	r2, [r3, #4]
 8008c18:	e01d      	b.n	8008c56 <HAL_JPEG_GetInfo+0x10c>
    }
    else if ((yblockNb == 0UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8008c1a:	697b      	ldr	r3, [r7, #20]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d109      	bne.n	8008c34 <HAL_JPEG_GetInfo+0xea>
 8008c20:	693b      	ldr	r3, [r7, #16]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d106      	bne.n	8008c34 <HAL_JPEG_GetInfo+0xea>
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d103      	bne.n	8008c34 <HAL_JPEG_GetInfo+0xea>
    {
      pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	2200      	movs	r2, #0
 8008c30:	605a      	str	r2, [r3, #4]
 8008c32:	e010      	b.n	8008c56 <HAL_JPEG_GetInfo+0x10c>
    }
    else if ((yblockNb == 3UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8008c34:	697b      	ldr	r3, [r7, #20]
 8008c36:	2b03      	cmp	r3, #3
 8008c38:	d109      	bne.n	8008c4e <HAL_JPEG_GetInfo+0x104>
 8008c3a:	693b      	ldr	r3, [r7, #16]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d106      	bne.n	8008c4e <HAL_JPEG_GetInfo+0x104>
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d103      	bne.n	8008c4e <HAL_JPEG_GetInfo+0x104>
    {
      pInfo->ChromaSubsampling = JPEG_420_SUBSAMPLING;
 8008c46:	683b      	ldr	r3, [r7, #0]
 8008c48:	2201      	movs	r2, #1
 8008c4a:	605a      	str	r2, [r3, #4]
 8008c4c:	e003      	b.n	8008c56 <HAL_JPEG_GetInfo+0x10c>
    }
    else /*Default is 4:4:4*/
    {
      pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 8008c4e:	683b      	ldr	r3, [r7, #0]
 8008c50:	2200      	movs	r2, #0
 8008c52:	605a      	str	r2, [r3, #4]
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8008c54:	e003      	b.n	8008c5e <HAL_JPEG_GetInfo+0x114>
 8008c56:	e002      	b.n	8008c5e <HAL_JPEG_GetInfo+0x114>
    }
  }
  else
  {
    pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 8008c58:	683b      	ldr	r3, [r7, #0]
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	605a      	str	r2, [r3, #4]
  }

  pInfo->ImageQuality = JPEG_GetQuality(hjpeg);
 8008c5e:	6878      	ldr	r0, [r7, #4]
 8008c60:	f001 fea2 	bl	800a9a8 <JPEG_GetQuality>
 8008c64:	4602      	mov	r2, r0
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	611a      	str	r2, [r3, #16]

  /* Return function status */
  return HAL_OK;
 8008c6a:	2300      	movs	r3, #0
}
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	3718      	adds	r7, #24
 8008c70:	46bd      	mov	sp, r7
 8008c72:	bd80      	pop	{r7, pc}

08008c74 <HAL_JPEG_Encode_DMA>:
  * @param  OutDataLength size in bytes of the Output buffer
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_JPEG_Encode_DMA(JPEG_HandleTypeDef *hjpeg, uint8_t *pDataInMCU, uint32_t InDataLength,
                                       uint8_t *pDataOut, uint32_t OutDataLength)
{
 8008c74:	b580      	push	{r7, lr}
 8008c76:	b084      	sub	sp, #16
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	60f8      	str	r0, [r7, #12]
 8008c7c:	60b9      	str	r1, [r7, #8]
 8008c7e:	607a      	str	r2, [r7, #4]
 8008c80:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param((InDataLength >= 4UL));
  assert_param((OutDataLength >= 4UL));

  /* Check In/out buffer allocation and size */
  if ((hjpeg == NULL) || (pDataInMCU == NULL) || (pDataOut == NULL))
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d005      	beq.n	8008c94 <HAL_JPEG_Encode_DMA+0x20>
 8008c88:	68bb      	ldr	r3, [r7, #8]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d002      	beq.n	8008c94 <HAL_JPEG_Encode_DMA+0x20>
 8008c8e:	683b      	ldr	r3, [r7, #0]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d101      	bne.n	8008c98 <HAL_JPEG_Encode_DMA+0x24>
  {
    return HAL_ERROR;
 8008c94:	2301      	movs	r3, #1
 8008c96:	e059      	b.n	8008d4c <HAL_JPEG_Encode_DMA+0xd8>
  }

  /* Process Locked */
  __HAL_LOCK(hjpeg);
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8008c9e:	2b01      	cmp	r3, #1
 8008ca0:	d101      	bne.n	8008ca6 <HAL_JPEG_Encode_DMA+0x32>
 8008ca2:	2302      	movs	r3, #2
 8008ca4:	e052      	b.n	8008d4c <HAL_JPEG_Encode_DMA+0xd8>
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	2201      	movs	r2, #1
 8008caa:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  if (hjpeg->State != HAL_JPEG_STATE_READY)
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8008cb4:	b2db      	uxtb	r3, r3
 8008cb6:	2b01      	cmp	r3, #1
 8008cb8:	d005      	beq.n	8008cc6 <HAL_JPEG_Encode_DMA+0x52>
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_BUSY;
 8008cc2:	2302      	movs	r3, #2
 8008cc4:	e042      	b.n	8008d4c <HAL_JPEG_Encode_DMA+0xd8>
  }
  else
  {
    if ((hjpeg->Context & JPEG_CONTEXT_CONF_ENCODING) == JPEG_CONTEXT_CONF_ENCODING)
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008cca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008cce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008cd2:	d134      	bne.n	8008d3e <HAL_JPEG_Encode_DMA+0xca>
    {
      /*Change JPEG state*/
      hjpeg->State = HAL_JPEG_STATE_BUSY_ENCODING;
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	2203      	movs	r2, #3
 8008cd8:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

      /*Set the Context to Encode with DMA*/
      hjpeg->Context &= ~(JPEG_CONTEXT_OPERATION_MASK | JPEG_CONTEXT_METHOD_MASK);
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ce0:	f023 020f 	bic.w	r2, r3, #15
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	655a      	str	r2, [r3, #84]	@ 0x54
      hjpeg->Context |= (JPEG_CONTEXT_ENCODE | JPEG_CONTEXT_DMA);
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008cec:	f043 020d 	orr.w	r2, r3, #13
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	655a      	str	r2, [r3, #84]	@ 0x54

      /*Store In/out buffers pointers and size*/
      hjpeg->pJpegInBuffPtr = pDataInMCU;
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	68ba      	ldr	r2, [r7, #8]
 8008cf8:	619a      	str	r2, [r3, #24]
      hjpeg->pJpegOutBuffPtr = pDataOut;
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	683a      	ldr	r2, [r7, #0]
 8008cfe:	61da      	str	r2, [r3, #28]
      hjpeg->InDataLength = InDataLength;
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	687a      	ldr	r2, [r7, #4]
 8008d04:	629a      	str	r2, [r3, #40]	@ 0x28
      hjpeg->OutDataLength = OutDataLength;
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	69ba      	ldr	r2, [r7, #24]
 8008d0a:	62da      	str	r2, [r3, #44]	@ 0x2c

      /*Reset In/out data counter */
      hjpeg->JpegInCount = 0;
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	2200      	movs	r2, #0
 8008d10:	621a      	str	r2, [r3, #32]
      hjpeg->JpegOutCount = 0;
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	2200      	movs	r2, #0
 8008d16:	625a      	str	r2, [r3, #36]	@ 0x24

      /*Init decoding process*/
      JPEG_Init_Process(hjpeg);
 8008d18:	68f8      	ldr	r0, [r7, #12]
 8008d1a:	f000 ffd5 	bl	8009cc8 <JPEG_Init_Process>

      /* JPEG encoding process using DMA */
      if (JPEG_DMA_StartProcess(hjpeg) != HAL_OK)
 8008d1e:	68f8      	ldr	r0, [r7, #12]
 8008d20:	f001 faf6 	bl	800a310 <JPEG_DMA_StartProcess>
 8008d24:	4603      	mov	r3, r0
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d00f      	beq.n	8008d4a <HAL_JPEG_Encode_DMA+0xd6>
      {
        /* Update State */
        hjpeg->State = HAL_JPEG_STATE_ERROR;
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	2206      	movs	r2, #6
 8008d2e:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
        /* Process Unlocked */
        __HAL_UNLOCK(hjpeg);
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	2200      	movs	r2, #0
 8008d36:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 8008d3a:	2301      	movs	r3, #1
 8008d3c:	e006      	b.n	8008d4c <HAL_JPEG_Encode_DMA+0xd8>

    }
    else
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hjpeg);
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	2200      	movs	r2, #0
 8008d42:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      return HAL_ERROR;
 8008d46:	2301      	movs	r3, #1
 8008d48:	e000      	b.n	8008d4c <HAL_JPEG_Encode_DMA+0xd8>
    }
  }
  /* Return function status */
  return HAL_OK;
 8008d4a:	2300      	movs	r3, #0
}
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	3710      	adds	r7, #16
 8008d50:	46bd      	mov	sp, r7
 8008d52:	bd80      	pop	{r7, pc}

08008d54 <HAL_JPEG_Pause>:
  *                           JPEG_PAUSE_RESUME_OUTPUT: Pause Output processing
  *                           JPEG_PAUSE_RESUME_INPUT_OUTPUT: Pause Input and Output processing
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_JPEG_Pause(JPEG_HandleTypeDef *hjpeg, uint32_t XferSelection)
{
 8008d54:	b480      	push	{r7}
 8008d56:	b085      	sub	sp, #20
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
 8008d5c:	6039      	str	r1, [r7, #0]
  uint32_t mask = 0;
 8008d5e:	2300      	movs	r3, #0
 8008d60:	60fb      	str	r3, [r7, #12]

  assert_param(IS_JPEG_PAUSE_RESUME_STATE(XferSelection));

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d66:	f003 030c 	and.w	r3, r3, #12
 8008d6a:	2b0c      	cmp	r3, #12
 8008d6c:	d116      	bne.n	8008d9c <HAL_JPEG_Pause+0x48>
  {
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	f003 0301 	and.w	r3, r3, #1
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d005      	beq.n	8008d84 <HAL_JPEG_Pause+0x30>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d7c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 8008d84:	683b      	ldr	r3, [r7, #0]
 8008d86:	f003 0302 	and.w	r3, r3, #2
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d033      	beq.n	8008df6 <HAL_JPEG_Pause+0xa2>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d92:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	655a      	str	r2, [r3, #84]	@ 0x54
 8008d9a:	e02c      	b.n	8008df6 <HAL_JPEG_Pause+0xa2>
    }

  }
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008da0:	f003 030c 	and.w	r3, r3, #12
 8008da4:	2b08      	cmp	r3, #8
 8008da6:	d126      	bne.n	8008df6 <HAL_JPEG_Pause+0xa2>
  {

    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 8008da8:	683b      	ldr	r3, [r7, #0]
 8008daa:	f003 0301 	and.w	r3, r3, #1
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d009      	beq.n	8008dc6 <HAL_JPEG_Pause+0x72>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008db6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	655a      	str	r2, [r3, #84]	@ 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	f043 0306 	orr.w	r3, r3, #6
 8008dc4:	60fb      	str	r3, [r7, #12]
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 8008dc6:	683b      	ldr	r3, [r7, #0]
 8008dc8:	f003 0302 	and.w	r3, r3, #2
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d009      	beq.n	8008de4 <HAL_JPEG_Pause+0x90>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008dd4:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	655a      	str	r2, [r3, #84]	@ 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
 8008de2:	60fb      	str	r3, [r7, #12]
    }
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	43da      	mvns	r2, r3
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	400a      	ands	r2, r1
 8008df4:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Nothing to do */
  }

  /* Return function status */
  return HAL_OK;
 8008df6:	2300      	movs	r3, #0
}
 8008df8:	4618      	mov	r0, r3
 8008dfa:	3714      	adds	r7, #20
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e02:	4770      	bx	lr

08008e04 <HAL_JPEG_ConfigInputBuffer>:
  * @param  pNewInputBuffer Pointer to the new input data buffer
  * @param  InDataLength Size in bytes of the new Input data buffer
  * @retval HAL status
  */
void HAL_JPEG_ConfigInputBuffer(JPEG_HandleTypeDef *hjpeg, uint8_t *pNewInputBuffer, uint32_t InDataLength)
{
 8008e04:	b480      	push	{r7}
 8008e06:	b085      	sub	sp, #20
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	60f8      	str	r0, [r7, #12]
 8008e0c:	60b9      	str	r1, [r7, #8]
 8008e0e:	607a      	str	r2, [r7, #4]
  hjpeg->pJpegInBuffPtr =  pNewInputBuffer;
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	68ba      	ldr	r2, [r7, #8]
 8008e14:	619a      	str	r2, [r3, #24]
  hjpeg->InDataLength = InDataLength;
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	687a      	ldr	r2, [r7, #4]
 8008e1a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8008e1c:	bf00      	nop
 8008e1e:	3714      	adds	r7, #20
 8008e20:	46bd      	mov	sp, r7
 8008e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e26:	4770      	bx	lr

08008e28 <HAL_JPEG_ConfigOutputBuffer>:
  * @param  pNewOutputBuffer Pointer to the new output data buffer
  * @param  OutDataLength Size in bytes of the new Output data buffer
  * @retval HAL status
  */
void HAL_JPEG_ConfigOutputBuffer(JPEG_HandleTypeDef *hjpeg, uint8_t *pNewOutputBuffer, uint32_t OutDataLength)
{
 8008e28:	b480      	push	{r7}
 8008e2a:	b085      	sub	sp, #20
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	60f8      	str	r0, [r7, #12]
 8008e30:	60b9      	str	r1, [r7, #8]
 8008e32:	607a      	str	r2, [r7, #4]
  hjpeg->pJpegOutBuffPtr = pNewOutputBuffer;
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	68ba      	ldr	r2, [r7, #8]
 8008e38:	61da      	str	r2, [r3, #28]
  hjpeg->OutDataLength = OutDataLength;
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	687a      	ldr	r2, [r7, #4]
 8008e3e:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8008e40:	bf00      	nop
 8008e42:	3714      	adds	r7, #20
 8008e44:	46bd      	mov	sp, r7
 8008e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4a:	4770      	bx	lr

08008e4c <HAL_JPEG_InfoReadyCallback>:
  * @param  pInfo pointer to a JPEG_ConfTypeDef structure that contains
  *         The JPEG decoded header information
  * @retval None
  */
__weak void HAL_JPEG_InfoReadyCallback(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
{
 8008e4c:	b480      	push	{r7}
 8008e4e:	b083      	sub	sp, #12
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
 8008e54:	6039      	str	r1, [r7, #0]
  UNUSED(pInfo);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_JPEG_HeaderParsingCpltCallback could be implemented in the user file
   */
}
 8008e56:	bf00      	nop
 8008e58:	370c      	adds	r7, #12
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e60:	4770      	bx	lr

08008e62 <HAL_JPEG_DecodeCpltCallback>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
__weak void HAL_JPEG_DecodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
{
 8008e62:	b480      	push	{r7}
 8008e64:	b083      	sub	sp, #12
 8008e66:	af00      	add	r7, sp, #0
 8008e68:	6078      	str	r0, [r7, #4]
  UNUSED(hjpeg);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_JPEG_EncodeCpltCallback could be implemented in the user file
   */
}
 8008e6a:	bf00      	nop
 8008e6c:	370c      	adds	r7, #12
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e74:	4770      	bx	lr

08008e76 <HAL_JPEG_IRQHandler>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
void HAL_JPEG_IRQHandler(JPEG_HandleTypeDef *hjpeg)
{
 8008e76:	b580      	push	{r7, lr}
 8008e78:	b082      	sub	sp, #8
 8008e7a:	af00      	add	r7, sp, #0
 8008e7c:	6078      	str	r0, [r7, #4]
  switch (hjpeg->State)
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8008e84:	b2db      	uxtb	r3, r3
 8008e86:	3b03      	subs	r3, #3
 8008e88:	2b01      	cmp	r3, #1
 8008e8a:	d813      	bhi.n	8008eb4 <HAL_JPEG_IRQHandler+0x3e>
  {
    case HAL_JPEG_STATE_BUSY_ENCODING:
    case HAL_JPEG_STATE_BUSY_DECODING:
      /* continue JPEG data encoding/Decoding*/
      /* JPEG data processing : In/Out FIFO transfer*/
      if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e90:	f003 030c 	and.w	r3, r3, #12
 8008e94:	2b08      	cmp	r3, #8
 8008e96:	d103      	bne.n	8008ea0 <HAL_JPEG_IRQHandler+0x2a>
      {
        (void) JPEG_Process(hjpeg);
 8008e98:	6878      	ldr	r0, [r7, #4]
 8008e9a:	f000 ff89 	bl	8009db0 <JPEG_Process>
      }
      else
      {
        /* Nothing to do */
      }
      break;
 8008e9e:	e00b      	b.n	8008eb8 <HAL_JPEG_IRQHandler+0x42>
      else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ea4:	f003 030c 	and.w	r3, r3, #12
 8008ea8:	2b0c      	cmp	r3, #12
 8008eaa:	d105      	bne.n	8008eb8 <HAL_JPEG_IRQHandler+0x42>
        JPEG_DMA_ContinueProcess(hjpeg);
 8008eac:	6878      	ldr	r0, [r7, #4]
 8008eae:	f001 fac9 	bl	800a444 <JPEG_DMA_ContinueProcess>
      break;
 8008eb2:	e001      	b.n	8008eb8 <HAL_JPEG_IRQHandler+0x42>

    default:
      break;
 8008eb4:	bf00      	nop
 8008eb6:	e000      	b.n	8008eba <HAL_JPEG_IRQHandler+0x44>
      break;
 8008eb8:	bf00      	nop
  }
}
 8008eba:	bf00      	nop
 8008ebc:	3708      	adds	r7, #8
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	bd80      	pop	{r7, pc}

08008ec2 <JPEG_Bits_To_SizeCodes>:
  * @param  Huffcode pointer to codes table
  * @param  LastK pointer to last Coeff (table dimension)
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Bits_To_SizeCodes(uint8_t *Bits, uint8_t *Huffsize, uint32_t *Huffcode, uint32_t *LastK)
{
 8008ec2:	b480      	push	{r7}
 8008ec4:	b08b      	sub	sp, #44	@ 0x2c
 8008ec6:	af00      	add	r7, sp, #0
 8008ec8:	60f8      	str	r0, [r7, #12]
 8008eca:	60b9      	str	r1, [r7, #8]
 8008ecc:	607a      	str	r2, [r7, #4]
 8008ece:	603b      	str	r3, [r7, #0]
  uint32_t l;
  uint32_t code;
  uint32_t si;

  /* Figure C.1: Generation of table of Huffman code sizes */
  p = 0;
 8008ed0:	2300      	movs	r3, #0
 8008ed2:	623b      	str	r3, [r7, #32]
  for (l = 0; l < 16UL; l++)
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	61fb      	str	r3, [r7, #28]
 8008ed8:	e020      	b.n	8008f1c <JPEG_Bits_To_SizeCodes+0x5a>
  {
    i = (uint32_t)Bits[l];
 8008eda:	68fa      	ldr	r2, [r7, #12]
 8008edc:	69fb      	ldr	r3, [r7, #28]
 8008ede:	4413      	add	r3, r2
 8008ee0:	781b      	ldrb	r3, [r3, #0]
 8008ee2:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((p + i) > 256UL)
 8008ee4:	6a3a      	ldr	r2, [r7, #32]
 8008ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ee8:	4413      	add	r3, r2
 8008eea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008eee:	d90f      	bls.n	8008f10 <JPEG_Bits_To_SizeCodes+0x4e>
    {
      /* check for table overflow */
      return HAL_ERROR;
 8008ef0:	2301      	movs	r3, #1
 8008ef2:	e055      	b.n	8008fa0 <JPEG_Bits_To_SizeCodes+0xde>
    }
    while (i != 0UL)
    {
      Huffsize[p] = (uint8_t) l + 1U;
 8008ef4:	69fb      	ldr	r3, [r7, #28]
 8008ef6:	b2da      	uxtb	r2, r3
 8008ef8:	68b9      	ldr	r1, [r7, #8]
 8008efa:	6a3b      	ldr	r3, [r7, #32]
 8008efc:	440b      	add	r3, r1
 8008efe:	3201      	adds	r2, #1
 8008f00:	b2d2      	uxtb	r2, r2
 8008f02:	701a      	strb	r2, [r3, #0]
      p++;
 8008f04:	6a3b      	ldr	r3, [r7, #32]
 8008f06:	3301      	adds	r3, #1
 8008f08:	623b      	str	r3, [r7, #32]
      i--;
 8008f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f0c:	3b01      	subs	r3, #1
 8008f0e:	627b      	str	r3, [r7, #36]	@ 0x24
    while (i != 0UL)
 8008f10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d1ee      	bne.n	8008ef4 <JPEG_Bits_To_SizeCodes+0x32>
  for (l = 0; l < 16UL; l++)
 8008f16:	69fb      	ldr	r3, [r7, #28]
 8008f18:	3301      	adds	r3, #1
 8008f1a:	61fb      	str	r3, [r7, #28]
 8008f1c:	69fb      	ldr	r3, [r7, #28]
 8008f1e:	2b0f      	cmp	r3, #15
 8008f20:	d9db      	bls.n	8008eda <JPEG_Bits_To_SizeCodes+0x18>
    }
  }
  Huffsize[p] = 0;
 8008f22:	68ba      	ldr	r2, [r7, #8]
 8008f24:	6a3b      	ldr	r3, [r7, #32]
 8008f26:	4413      	add	r3, r2
 8008f28:	2200      	movs	r2, #0
 8008f2a:	701a      	strb	r2, [r3, #0]
  *LastK = p;
 8008f2c:	683b      	ldr	r3, [r7, #0]
 8008f2e:	6a3a      	ldr	r2, [r7, #32]
 8008f30:	601a      	str	r2, [r3, #0]

  /* Figure C.2: Generation of table of Huffman codes */
  code = 0;
 8008f32:	2300      	movs	r3, #0
 8008f34:	61bb      	str	r3, [r7, #24]
  si = Huffsize[0];
 8008f36:	68bb      	ldr	r3, [r7, #8]
 8008f38:	781b      	ldrb	r3, [r3, #0]
 8008f3a:	617b      	str	r3, [r7, #20]
  p = 0;
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	623b      	str	r3, [r7, #32]
  while (Huffsize[p] != 0U)
 8008f40:	e027      	b.n	8008f92 <JPEG_Bits_To_SizeCodes+0xd0>
  {
    while (((uint32_t) Huffsize[p]) == si)
    {
      Huffcode[p] = code;
 8008f42:	6a3b      	ldr	r3, [r7, #32]
 8008f44:	009b      	lsls	r3, r3, #2
 8008f46:	687a      	ldr	r2, [r7, #4]
 8008f48:	4413      	add	r3, r2
 8008f4a:	69ba      	ldr	r2, [r7, #24]
 8008f4c:	601a      	str	r2, [r3, #0]
      p++;
 8008f4e:	6a3b      	ldr	r3, [r7, #32]
 8008f50:	3301      	adds	r3, #1
 8008f52:	623b      	str	r3, [r7, #32]
      code++;
 8008f54:	69bb      	ldr	r3, [r7, #24]
 8008f56:	3301      	adds	r3, #1
 8008f58:	61bb      	str	r3, [r7, #24]
    while (((uint32_t) Huffsize[p]) == si)
 8008f5a:	68ba      	ldr	r2, [r7, #8]
 8008f5c:	6a3b      	ldr	r3, [r7, #32]
 8008f5e:	4413      	add	r3, r2
 8008f60:	781b      	ldrb	r3, [r3, #0]
 8008f62:	461a      	mov	r2, r3
 8008f64:	697b      	ldr	r3, [r7, #20]
 8008f66:	4293      	cmp	r3, r2
 8008f68:	d0eb      	beq.n	8008f42 <JPEG_Bits_To_SizeCodes+0x80>
    }
    /* code must fit in "size" bits (si), no code is allowed to be all ones*/
    if(si > 31UL)
 8008f6a:	697b      	ldr	r3, [r7, #20]
 8008f6c:	2b1f      	cmp	r3, #31
 8008f6e:	d901      	bls.n	8008f74 <JPEG_Bits_To_SizeCodes+0xb2>
    {
      return HAL_ERROR;
 8008f70:	2301      	movs	r3, #1
 8008f72:	e015      	b.n	8008fa0 <JPEG_Bits_To_SizeCodes+0xde>
    }
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 8008f74:	2201      	movs	r2, #1
 8008f76:	697b      	ldr	r3, [r7, #20]
 8008f78:	fa02 f303 	lsl.w	r3, r2, r3
 8008f7c:	69ba      	ldr	r2, [r7, #24]
 8008f7e:	429a      	cmp	r2, r3
 8008f80:	d301      	bcc.n	8008f86 <JPEG_Bits_To_SizeCodes+0xc4>
    {
      return HAL_ERROR;
 8008f82:	2301      	movs	r3, #1
 8008f84:	e00c      	b.n	8008fa0 <JPEG_Bits_To_SizeCodes+0xde>
    }
    code <<= 1;
 8008f86:	69bb      	ldr	r3, [r7, #24]
 8008f88:	005b      	lsls	r3, r3, #1
 8008f8a:	61bb      	str	r3, [r7, #24]
    si++;
 8008f8c:	697b      	ldr	r3, [r7, #20]
 8008f8e:	3301      	adds	r3, #1
 8008f90:	617b      	str	r3, [r7, #20]
  while (Huffsize[p] != 0U)
 8008f92:	68ba      	ldr	r2, [r7, #8]
 8008f94:	6a3b      	ldr	r3, [r7, #32]
 8008f96:	4413      	add	r3, r2
 8008f98:	781b      	ldrb	r3, [r3, #0]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d1dd      	bne.n	8008f5a <JPEG_Bits_To_SizeCodes+0x98>
  }
  /* Return function status */
  return HAL_OK;
 8008f9e:	2300      	movs	r3, #0
}
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	372c      	adds	r7, #44	@ 0x2c
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008faa:	4770      	bx	lr

08008fac <JPEG_ACHuff_BitsVals_To_SizeCodes>:
  * @param  AC_SizeCodesTable pointer to AC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_ACHuff_BitsVals_To_SizeCodes(JPEG_ACHuffTableTypeDef *AC_BitsValsTable,
                                                           JPEG_AC_HuffCodeTableTypeDef *AC_SizeCodesTable)
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	f5ad 6da5 	sub.w	sp, sp, #1320	@ 0x528
 8008fb2:	af00      	add	r7, sp, #0
 8008fb4:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8008fb8:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 8008fbc:	6018      	str	r0, [r3, #0]
 8008fbe:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8008fc2:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 8008fc6:	6019      	str	r1, [r3, #0]
  uint32_t huffcode[257];
  uint32_t k;
  uint32_t l, lsb, msb;
  uint32_t lastK;

  error = JPEG_Bits_To_SizeCodes(AC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 8008fc8:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8008fcc:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 8008fd0:	6818      	ldr	r0, [r3, #0]
 8008fd2:	f107 0308 	add.w	r3, r7, #8
 8008fd6:	f107 020c 	add.w	r2, r7, #12
 8008fda:	f507 6182 	add.w	r1, r7, #1040	@ 0x410
 8008fde:	f7ff ff70 	bl	8008ec2 <JPEG_Bits_To_SizeCodes>
 8008fe2:	4603      	mov	r3, r0
 8008fe4:	f887 351f 	strb.w	r3, [r7, #1311]	@ 0x51f
  if (error != HAL_OK)
 8008fe8:	f897 351f 	ldrb.w	r3, [r7, #1311]	@ 0x51f
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d002      	beq.n	8008ff6 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x4a>
  {
    return  error;
 8008ff0:	f897 351f 	ldrb.w	r3, [r7, #1311]	@ 0x51f
 8008ff4:	e075      	b.n	80090e2 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x136>
  }

  /* Figure C.3: Ordering procedure for encoding procedure code tables */
  k = 0;
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	f8c7 3524 	str.w	r3, [r7, #1316]	@ 0x524

  while (k < lastK)
 8008ffc:	e067      	b.n	80090ce <JPEG_ACHuff_BitsVals_To_SizeCodes+0x122>
  {
    l = AC_BitsValsTable->HuffVal[k];
 8008ffe:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8009002:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 8009006:	681a      	ldr	r2, [r3, #0]
 8009008:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 800900c:	4413      	add	r3, r2
 800900e:	3310      	adds	r3, #16
 8009010:	781b      	ldrb	r3, [r3, #0]
 8009012:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
    if (l == 0UL)
 8009016:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 800901a:	2b00      	cmp	r3, #0
 800901c:	d103      	bne.n	8009026 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x7a>
    {
      l = 160; /*l = 0x00 EOB code*/
 800901e:	23a0      	movs	r3, #160	@ 0xa0
 8009020:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
 8009024:	e021      	b.n	800906a <JPEG_ACHuff_BitsVals_To_SizeCodes+0xbe>
    }
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
 8009026:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 800902a:	2bf0      	cmp	r3, #240	@ 0xf0
 800902c:	d103      	bne.n	8009036 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x8a>
    {
      l = 161;
 800902e:	23a1      	movs	r3, #161	@ 0xa1
 8009030:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
 8009034:	e019      	b.n	800906a <JPEG_ACHuff_BitsVals_To_SizeCodes+0xbe>
    }
    else
    {
      msb = (l & 0xF0UL) >> 4;
 8009036:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 800903a:	091b      	lsrs	r3, r3, #4
 800903c:	f003 030f 	and.w	r3, r3, #15
 8009040:	f8c7 3518 	str.w	r3, [r7, #1304]	@ 0x518
      lsb = (l & 0x0FUL);
 8009044:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8009048:	f003 030f 	and.w	r3, r3, #15
 800904c:	f8c7 3514 	str.w	r3, [r7, #1300]	@ 0x514
      l = (msb * 10UL) + lsb - 1UL;
 8009050:	f8d7 2518 	ldr.w	r2, [r7, #1304]	@ 0x518
 8009054:	4613      	mov	r3, r2
 8009056:	009b      	lsls	r3, r3, #2
 8009058:	4413      	add	r3, r2
 800905a:	005b      	lsls	r3, r3, #1
 800905c:	461a      	mov	r2, r3
 800905e:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 8009062:	4413      	add	r3, r2
 8009064:	3b01      	subs	r3, #1
 8009066:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
    }
    if (l >= JPEG_AC_HUFF_TABLE_SIZE)
 800906a:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 800906e:	2ba1      	cmp	r3, #161	@ 0xa1
 8009070:	d901      	bls.n	8009076 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xca>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 8009072:	2301      	movs	r3, #1
 8009074:	e035      	b.n	80090e2 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x136>
    }
    else
    {
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8009076:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 800907a:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 800907e:	f8d7 2524 	ldr.w	r2, [r7, #1316]	@ 0x524
 8009082:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009086:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 800908a:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 800908e:	6819      	ldr	r1, [r3, #0]
 8009090:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8009094:	3328      	adds	r3, #40	@ 0x28
 8009096:	009b      	lsls	r3, r3, #2
 8009098:	440b      	add	r3, r1
 800909a:	605a      	str	r2, [r3, #4]
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 800909c:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 80090a0:	f5a3 728c 	sub.w	r2, r3, #280	@ 0x118
 80090a4:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 80090a8:	4413      	add	r3, r2
 80090aa:	781b      	ldrb	r3, [r3, #0]
 80090ac:	3b01      	subs	r3, #1
 80090ae:	b2d9      	uxtb	r1, r3
 80090b0:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 80090b4:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 80090b8:	681a      	ldr	r2, [r3, #0]
 80090ba:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 80090be:	4413      	add	r3, r2
 80090c0:	460a      	mov	r2, r1
 80090c2:	701a      	strb	r2, [r3, #0]
      k++;
 80090c4:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 80090c8:	3301      	adds	r3, #1
 80090ca:	f8c7 3524 	str.w	r3, [r7, #1316]	@ 0x524
  while (k < lastK)
 80090ce:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 80090d2:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	f8d7 2524 	ldr.w	r2, [r7, #1316]	@ 0x524
 80090dc:	429a      	cmp	r2, r3
 80090de:	d38e      	bcc.n	8008ffe <JPEG_ACHuff_BitsVals_To_SizeCodes+0x52>
    }
  }

  /* Return function status */
  return HAL_OK;
 80090e0:	2300      	movs	r3, #0
}
 80090e2:	4618      	mov	r0, r3
 80090e4:	f507 67a5 	add.w	r7, r7, #1320	@ 0x528
 80090e8:	46bd      	mov	sp, r7
 80090ea:	bd80      	pop	{r7, pc}

080090ec <JPEG_DCHuff_BitsVals_To_SizeCodes>:
  * @param  DC_SizeCodesTable pointer to DC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_DCHuff_BitsVals_To_SizeCodes(JPEG_DCHuffTableTypeDef *DC_BitsValsTable,
                                                           JPEG_DC_HuffCodeTableTypeDef *DC_SizeCodesTable)
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	f5ad 6da4 	sub.w	sp, sp, #1312	@ 0x520
 80090f2:	af00      	add	r7, sp, #0
 80090f4:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 80090f8:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 80090fc:	6018      	str	r0, [r3, #0]
 80090fe:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8009102:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 8009106:	6019      	str	r1, [r3, #0]
  uint32_t k;
  uint32_t l;
  uint32_t lastK;
  uint8_t huffsize[257];
  uint32_t huffcode[257];
  error = JPEG_Bits_To_SizeCodes(DC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 8009108:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 800910c:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 8009110:	6818      	ldr	r0, [r3, #0]
 8009112:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8009116:	f107 0208 	add.w	r2, r7, #8
 800911a:	f207 410c 	addw	r1, r7, #1036	@ 0x40c
 800911e:	f7ff fed0 	bl	8008ec2 <JPEG_Bits_To_SizeCodes>
 8009122:	4603      	mov	r3, r0
 8009124:	f887 351b 	strb.w	r3, [r7, #1307]	@ 0x51b
  if (error != HAL_OK)
 8009128:	f897 351b 	ldrb.w	r3, [r7, #1307]	@ 0x51b
 800912c:	2b00      	cmp	r3, #0
 800912e:	d002      	beq.n	8009136 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4a>
  {
    return  error;
 8009130:	f897 351b 	ldrb.w	r3, [r7, #1307]	@ 0x51b
 8009134:	e048      	b.n	80091c8 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xdc>
  }
  /* Figure C.3: ordering procedure for encoding procedure code tables */
  k = 0;
 8009136:	2300      	movs	r3, #0
 8009138:	f8c7 351c 	str.w	r3, [r7, #1308]	@ 0x51c

  while (k < lastK)
 800913c:	e03d      	b.n	80091ba <JPEG_DCHuff_BitsVals_To_SizeCodes+0xce>
  {
    l = DC_BitsValsTable->HuffVal[k];
 800913e:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8009142:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 8009146:	681a      	ldr	r2, [r3, #0]
 8009148:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 800914c:	4413      	add	r3, r2
 800914e:	3310      	adds	r3, #16
 8009150:	781b      	ldrb	r3, [r3, #0]
 8009152:	f8c7 3514 	str.w	r3, [r7, #1300]	@ 0x514
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
 8009156:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 800915a:	2b0b      	cmp	r3, #11
 800915c:	d901      	bls.n	8009162 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x76>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 800915e:	2301      	movs	r3, #1
 8009160:	e032      	b.n	80091c8 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xdc>
    }
    else
    {
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8009162:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8009166:	f5a3 63a3 	sub.w	r3, r3, #1304	@ 0x518
 800916a:	f8d7 251c 	ldr.w	r2, [r7, #1308]	@ 0x51c
 800916e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009172:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8009176:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 800917a:	6819      	ldr	r1, [r3, #0]
 800917c:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 8009180:	3302      	adds	r3, #2
 8009182:	009b      	lsls	r3, r3, #2
 8009184:	440b      	add	r3, r1
 8009186:	605a      	str	r2, [r3, #4]
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 8009188:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 800918c:	f5a3 728a 	sub.w	r2, r3, #276	@ 0x114
 8009190:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 8009194:	4413      	add	r3, r2
 8009196:	781b      	ldrb	r3, [r3, #0]
 8009198:	3b01      	subs	r3, #1
 800919a:	b2d9      	uxtb	r1, r3
 800919c:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 80091a0:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 80091a4:	681a      	ldr	r2, [r3, #0]
 80091a6:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 80091aa:	4413      	add	r3, r2
 80091ac:	460a      	mov	r2, r1
 80091ae:	701a      	strb	r2, [r3, #0]
      k++;
 80091b0:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 80091b4:	3301      	adds	r3, #1
 80091b6:	f8c7 351c 	str.w	r3, [r7, #1308]	@ 0x51c
  while (k < lastK)
 80091ba:	f8d7 3510 	ldr.w	r3, [r7, #1296]	@ 0x510
 80091be:	f8d7 251c 	ldr.w	r2, [r7, #1308]	@ 0x51c
 80091c2:	429a      	cmp	r2, r3
 80091c4:	d3bb      	bcc.n	800913e <JPEG_DCHuff_BitsVals_To_SizeCodes+0x52>
    }
  }

  /* Return function status */
  return HAL_OK;
 80091c6:	2300      	movs	r3, #0
}
 80091c8:	4618      	mov	r0, r3
 80091ca:	f507 67a4 	add.w	r7, r7, #1312	@ 0x520
 80091ce:	46bd      	mov	sp, r7
 80091d0:	bd80      	pop	{r7, pc}

080091d2 <JPEG_Set_HuffDC_Mem>:
  * @param  DCTableAddress Encoder DC huffman table address it could be HUFFENC_DC0 or HUFFENC_DC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffDC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_DCHuffTableTypeDef *HuffTableDC,
                                             const __IO uint32_t *DCTableAddress)
{
 80091d2:	b580      	push	{r7, lr}
 80091d4:	b09a      	sub	sp, #104	@ 0x68
 80091d6:	af00      	add	r7, sp, #0
 80091d8:	60f8      	str	r0, [r7, #12]
 80091da:	60b9      	str	r1, [r7, #8]
 80091dc:	607a      	str	r2, [r7, #4]
  uint32_t i;
  uint32_t lsb;
  uint32_t msb;
  __IO uint32_t *address, *addressDef;

  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
 80091e6:	687a      	ldr	r2, [r7, #4]
 80091e8:	429a      	cmp	r2, r3
 80091ea:	d106      	bne.n	80091fa <JPEG_Set_HuffDC_Mem+0x28>
  {
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
 80091f4:	3318      	adds	r3, #24
 80091f6:	663b      	str	r3, [r7, #96]	@ 0x60
 80091f8:	e00f      	b.n	800921a <JPEG_Set_HuffDC_Mem+0x48>
  }
  else if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC1))
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
 8009202:	687a      	ldr	r2, [r7, #4]
 8009204:	429a      	cmp	r2, r3
 8009206:	d106      	bne.n	8009216 <JPEG_Set_HuffDC_Mem+0x44>
  {
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
 8009210:	3318      	adds	r3, #24
 8009212:	663b      	str	r3, [r7, #96]	@ 0x60
 8009214:	e001      	b.n	800921a <JPEG_Set_HuffDC_Mem+0x48>
  }
  else
  {
    return HAL_ERROR;
 8009216:	2301      	movs	r3, #1
 8009218:	e059      	b.n	80092ce <JPEG_Set_HuffDC_Mem+0xfc>
  }

  if (HuffTableDC != NULL)
 800921a:	68bb      	ldr	r3, [r7, #8]
 800921c:	2b00      	cmp	r3, #0
 800921e:	d055      	beq.n	80092cc <JPEG_Set_HuffDC_Mem+0xfa>
  {
    error = JPEG_DCHuff_BitsVals_To_SizeCodes(HuffTableDC, &dcSizeCodesTable);
 8009220:	f107 0314 	add.w	r3, r7, #20
 8009224:	4619      	mov	r1, r3
 8009226:	68b8      	ldr	r0, [r7, #8]
 8009228:	f7ff ff60 	bl	80090ec <JPEG_DCHuff_BitsVals_To_SizeCodes>
 800922c:	4603      	mov	r3, r0
 800922e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    if (error != HAL_OK)
 8009232:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009236:	2b00      	cmp	r3, #0
 8009238:	d002      	beq.n	8009240 <JPEG_Set_HuffDC_Mem+0x6e>
    {
      return  error;
 800923a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800923e:	e046      	b.n	80092ce <JPEG_Set_HuffDC_Mem+0xfc>
    }
    addressDef = address;
 8009240:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009242:	65bb      	str	r3, [r7, #88]	@ 0x58
    *addressDef = 0x0FFF0FFF;
 8009244:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009246:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 800924a:	601a      	str	r2, [r3, #0]
    addressDef++;
 800924c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800924e:	3304      	adds	r3, #4
 8009250:	65bb      	str	r3, [r7, #88]	@ 0x58
    *addressDef = 0x0FFF0FFF;
 8009252:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009254:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 8009258:	601a      	str	r2, [r3, #0]

    i = JPEG_DC_HUFF_TABLE_SIZE;
 800925a:	230c      	movs	r3, #12
 800925c:	667b      	str	r3, [r7, #100]	@ 0x64
    while (i > 1UL)
 800925e:	e032      	b.n	80092c6 <JPEG_Set_HuffDC_Mem+0xf4>
    {
      i--;
 8009260:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009262:	3b01      	subs	r3, #1
 8009264:	667b      	str	r3, [r7, #100]	@ 0x64
      address --;
 8009266:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009268:	3b04      	subs	r3, #4
 800926a:	663b      	str	r3, [r7, #96]	@ 0x60
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800926c:	f107 0214 	add.w	r2, r7, #20
 8009270:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009272:	4413      	add	r3, r2
 8009274:	781b      	ldrb	r3, [r3, #0]
 8009276:	021b      	lsls	r3, r3, #8
 8009278:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 800927c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800927e:	3302      	adds	r3, #2
 8009280:	009b      	lsls	r3, r3, #2
 8009282:	3368      	adds	r3, #104	@ 0x68
 8009284:	443b      	add	r3, r7
 8009286:	f853 3c50 	ldr.w	r3, [r3, #-80]
 800928a:	b2db      	uxtb	r3, r3
 800928c:	4313      	orrs	r3, r2
 800928e:	657b      	str	r3, [r7, #84]	@ 0x54
                                                                                   0xFFUL);
      i--;
 8009290:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009292:	3b01      	subs	r3, #1
 8009294:	667b      	str	r3, [r7, #100]	@ 0x64
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8009296:	f107 0214 	add.w	r2, r7, #20
 800929a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800929c:	4413      	add	r3, r2
 800929e:	781b      	ldrb	r3, [r3, #0]
 80092a0:	021b      	lsls	r3, r3, #8
 80092a2:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 80092a6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80092a8:	3302      	adds	r3, #2
 80092aa:	009b      	lsls	r3, r3, #2
 80092ac:	3368      	adds	r3, #104	@ 0x68
 80092ae:	443b      	add	r3, r7
 80092b0:	f853 3c50 	ldr.w	r3, [r3, #-80]
 80092b4:	b2db      	uxtb	r3, r3
 80092b6:	4313      	orrs	r3, r2
 80092b8:	653b      	str	r3, [r7, #80]	@ 0x50
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 80092ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80092bc:	041a      	lsls	r2, r3, #16
 80092be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80092c0:	431a      	orrs	r2, r3
 80092c2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80092c4:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 80092c6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80092c8:	2b01      	cmp	r3, #1
 80092ca:	d8c9      	bhi.n	8009260 <JPEG_Set_HuffDC_Mem+0x8e>
    }
  }

  /* Return function status */
  return HAL_OK;
 80092cc:	2300      	movs	r3, #0
}
 80092ce:	4618      	mov	r0, r3
 80092d0:	3768      	adds	r7, #104	@ 0x68
 80092d2:	46bd      	mov	sp, r7
 80092d4:	bd80      	pop	{r7, pc}
	...

080092d8 <JPEG_Set_HuffAC_Mem>:
  * @param  ACTableAddress Encoder AC huffman table address it could be HUFFENC_AC0 or HUFFENC_AC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffAC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_ACHuffTableTypeDef *HuffTableAC,
                                             const __IO uint32_t *ACTableAddress)
{
 80092d8:	b580      	push	{r7, lr}
 80092da:	f5ad 7d56 	sub.w	sp, sp, #856	@ 0x358
 80092de:	af00      	add	r7, sp, #0
 80092e0:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 80092e4:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 80092e8:	6018      	str	r0, [r3, #0]
 80092ea:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 80092ee:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 80092f2:	6019      	str	r1, [r3, #0]
 80092f4:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 80092f8:	f5a3 7355 	sub.w	r3, r3, #852	@ 0x354
 80092fc:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef error;
  JPEG_AC_HuffCodeTableTypeDef acSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 80092fe:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8009302:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800930e:	f507 7256 	add.w	r2, r7, #856	@ 0x358
 8009312:	f5a2 7255 	sub.w	r2, r2, #852	@ 0x354
 8009316:	6812      	ldr	r2, [r2, #0]
 8009318:	429a      	cmp	r2, r3
 800931a:	d10c      	bne.n	8009336 <JPEG_Set_HuffAC_Mem+0x5e>
  {
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 800931c:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8009320:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800932c:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8009330:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
 8009334:	e01d      	b.n	8009372 <JPEG_Set_HuffAC_Mem+0x9a>
  }
  else if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC1))
 8009336:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800933a:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
 8009346:	f507 7256 	add.w	r2, r7, #856	@ 0x358
 800934a:	f5a2 7255 	sub.w	r2, r2, #852	@ 0x354
 800934e:	6812      	ldr	r2, [r2, #0]
 8009350:	429a      	cmp	r2, r3
 8009352:	d10c      	bne.n	800936e <JPEG_Set_HuffAC_Mem+0x96>
  {
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 8009354:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8009358:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
 8009364:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8009368:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
 800936c:	e001      	b.n	8009372 <JPEG_Set_HuffAC_Mem+0x9a>
  }
  else
  {
    return HAL_ERROR;
 800936e:	2301      	movs	r3, #1
 8009370:	e0a8      	b.n	80094c4 <JPEG_Set_HuffAC_Mem+0x1ec>
  }

  if (HuffTableAC != NULL)
 8009372:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8009376:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	2b00      	cmp	r3, #0
 800937e:	f000 80a0 	beq.w	80094c2 <JPEG_Set_HuffAC_Mem+0x1ea>
  {
    error = JPEG_ACHuff_BitsVals_To_SizeCodes(HuffTableAC, &acSizeCodesTable);
 8009382:	f107 0214 	add.w	r2, r7, #20
 8009386:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800938a:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 800938e:	4611      	mov	r1, r2
 8009390:	6818      	ldr	r0, [r3, #0]
 8009392:	f7ff fe0b 	bl	8008fac <JPEG_ACHuff_BitsVals_To_SizeCodes>
 8009396:	4603      	mov	r3, r0
 8009398:	f887 334b 	strb.w	r3, [r7, #843]	@ 0x34b
    if (error != HAL_OK)
 800939c:	f897 334b 	ldrb.w	r3, [r7, #843]	@ 0x34b
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d002      	beq.n	80093aa <JPEG_Set_HuffAC_Mem+0xd2>
    {
      return  error;
 80093a4:	f897 334b 	ldrb.w	r3, [r7, #843]	@ 0x34b
 80093a8:	e08c      	b.n	80094c4 <JPEG_Set_HuffAC_Mem+0x1ec>
    }
    /* Default values settings: 162:167 FFFh , 168:175 FD0h_FD7h */
    /* Locations 162:175 of each AC table contain information used internally by the core */

    addressDef = address;
 80093aa:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 80093ae:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    for (i = 0; i < 3UL; i++)
 80093b2:	2300      	movs	r3, #0
 80093b4:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
 80093b8:	e00e      	b.n	80093d8 <JPEG_Set_HuffAC_Mem+0x100>
    {
      *addressDef = 0x0FFF0FFF;
 80093ba:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 80093be:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 80093c2:	601a      	str	r2, [r3, #0]
      addressDef++;
 80093c4:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 80093c8:	3304      	adds	r3, #4
 80093ca:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    for (i = 0; i < 3UL; i++)
 80093ce:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 80093d2:	3301      	adds	r3, #1
 80093d4:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
 80093d8:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 80093dc:	2b02      	cmp	r3, #2
 80093de:	d9ec      	bls.n	80093ba <JPEG_Set_HuffAC_Mem+0xe2>
    }
    *addressDef = 0x0FD10FD0;
 80093e0:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 80093e4:	4a3a      	ldr	r2, [pc, #232]	@ (80094d0 <JPEG_Set_HuffAC_Mem+0x1f8>)
 80093e6:	601a      	str	r2, [r3, #0]
    addressDef++;
 80093e8:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 80093ec:	3304      	adds	r3, #4
 80093ee:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD30FD2;
 80093f2:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 80093f6:	4a37      	ldr	r2, [pc, #220]	@ (80094d4 <JPEG_Set_HuffAC_Mem+0x1fc>)
 80093f8:	601a      	str	r2, [r3, #0]
    addressDef++;
 80093fa:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 80093fe:	3304      	adds	r3, #4
 8009400:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD50FD4;
 8009404:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8009408:	4a33      	ldr	r2, [pc, #204]	@ (80094d8 <JPEG_Set_HuffAC_Mem+0x200>)
 800940a:	601a      	str	r2, [r3, #0]
    addressDef++;
 800940c:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8009410:	3304      	adds	r3, #4
 8009412:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD70FD6;
 8009416:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 800941a:	4a30      	ldr	r2, [pc, #192]	@ (80094dc <JPEG_Set_HuffAC_Mem+0x204>)
 800941c:	601a      	str	r2, [r3, #0]
    /* end of Locations 162:175  */


    i = JPEG_AC_HUFF_TABLE_SIZE;
 800941e:	23a2      	movs	r3, #162	@ 0xa2
 8009420:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
    while (i > 1UL)
 8009424:	e049      	b.n	80094ba <JPEG_Set_HuffAC_Mem+0x1e2>
    {
      i--;
 8009426:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 800942a:	3b01      	subs	r3, #1
 800942c:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
      address--;
 8009430:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 8009434:	3b04      	subs	r3, #4
 8009436:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800943a:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800943e:	f5a3 7251 	sub.w	r2, r3, #836	@ 0x344
 8009442:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8009446:	4413      	add	r3, r2
 8009448:	781b      	ldrb	r3, [r3, #0]
 800944a:	021b      	lsls	r3, r3, #8
 800944c:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8009450:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8009454:	f5a3 7151 	sub.w	r1, r3, #836	@ 0x344
 8009458:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 800945c:	3328      	adds	r3, #40	@ 0x28
 800945e:	009b      	lsls	r3, r3, #2
 8009460:	440b      	add	r3, r1
 8009462:	685b      	ldr	r3, [r3, #4]
 8009464:	b2db      	uxtb	r3, r3
 8009466:	4313      	orrs	r3, r2
 8009468:	f8c7 3344 	str.w	r3, [r7, #836]	@ 0x344
                                                                                   0xFFUL);
      i--;
 800946c:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8009470:	3b01      	subs	r3, #1
 8009472:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8009476:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800947a:	f5a3 7251 	sub.w	r2, r3, #836	@ 0x344
 800947e:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8009482:	4413      	add	r3, r2
 8009484:	781b      	ldrb	r3, [r3, #0]
 8009486:	021b      	lsls	r3, r3, #8
 8009488:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 800948c:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8009490:	f5a3 7151 	sub.w	r1, r3, #836	@ 0x344
 8009494:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8009498:	3328      	adds	r3, #40	@ 0x28
 800949a:	009b      	lsls	r3, r3, #2
 800949c:	440b      	add	r3, r1
 800949e:	685b      	ldr	r3, [r3, #4]
 80094a0:	b2db      	uxtb	r3, r3
 80094a2:	4313      	orrs	r3, r2
 80094a4:	f8c7 3340 	str.w	r3, [r7, #832]	@ 0x340
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 80094a8:	f8d7 3344 	ldr.w	r3, [r7, #836]	@ 0x344
 80094ac:	041a      	lsls	r2, r3, #16
 80094ae:	f8d7 3340 	ldr.w	r3, [r7, #832]	@ 0x340
 80094b2:	431a      	orrs	r2, r3
 80094b4:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 80094b8:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 80094ba:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 80094be:	2b01      	cmp	r3, #1
 80094c0:	d8b1      	bhi.n	8009426 <JPEG_Set_HuffAC_Mem+0x14e>
    }
  }

  /* Return function status */
  return HAL_OK;
 80094c2:	2300      	movs	r3, #0
}
 80094c4:	4618      	mov	r0, r3
 80094c6:	f507 7756 	add.w	r7, r7, #856	@ 0x358
 80094ca:	46bd      	mov	sp, r7
 80094cc:	bd80      	pop	{r7, pc}
 80094ce:	bf00      	nop
 80094d0:	0fd10fd0 	.word	0x0fd10fd0
 80094d4:	0fd30fd2 	.word	0x0fd30fd2
 80094d8:	0fd50fd4 	.word	0x0fd50fd4
 80094dc:	0fd70fd6 	.word	0x0fd70fd6

080094e0 <JPEG_Set_HuffEnc_Mem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static HAL_StatusTypeDef JPEG_Set_HuffEnc_Mem(JPEG_HandleTypeDef *hjpeg)
{
 80094e0:	b580      	push	{r7, lr}
 80094e2:	b084      	sub	sp, #16
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef error;

  JPEG_Set_Huff_DHTMem(hjpeg);
 80094e8:	6878      	ldr	r0, [r7, #4]
 80094ea:	f000 f84d 	bl	8009588 <JPEG_Set_Huff_DHTMem>
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC0));
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
 80094f6:	461a      	mov	r2, r3
 80094f8:	491f      	ldr	r1, [pc, #124]	@ (8009578 <JPEG_Set_HuffEnc_Mem+0x98>)
 80094fa:	6878      	ldr	r0, [r7, #4]
 80094fc:	f7ff feec 	bl	80092d8 <JPEG_Set_HuffAC_Mem>
 8009500:	4603      	mov	r3, r0
 8009502:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8009504:	7bfb      	ldrb	r3, [r7, #15]
 8009506:	2b00      	cmp	r3, #0
 8009508:	d001      	beq.n	800950e <JPEG_Set_HuffEnc_Mem+0x2e>
  {
    return  error;
 800950a:	7bfb      	ldrb	r3, [r7, #15]
 800950c:	e030      	b.n	8009570 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC1));
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
 8009516:	461a      	mov	r2, r3
 8009518:	4918      	ldr	r1, [pc, #96]	@ (800957c <JPEG_Set_HuffEnc_Mem+0x9c>)
 800951a:	6878      	ldr	r0, [r7, #4]
 800951c:	f7ff fedc 	bl	80092d8 <JPEG_Set_HuffAC_Mem>
 8009520:	4603      	mov	r3, r0
 8009522:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8009524:	7bfb      	ldrb	r3, [r7, #15]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d001      	beq.n	800952e <JPEG_Set_HuffEnc_Mem+0x4e>
  {
    return  error;
 800952a:	7bfb      	ldrb	r3, [r7, #15]
 800952c:	e020      	b.n	8009570 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC0);
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
 8009536:	461a      	mov	r2, r3
 8009538:	4911      	ldr	r1, [pc, #68]	@ (8009580 <JPEG_Set_HuffEnc_Mem+0xa0>)
 800953a:	6878      	ldr	r0, [r7, #4]
 800953c:	f7ff fe49 	bl	80091d2 <JPEG_Set_HuffDC_Mem>
 8009540:	4603      	mov	r3, r0
 8009542:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8009544:	7bfb      	ldrb	r3, [r7, #15]
 8009546:	2b00      	cmp	r3, #0
 8009548:	d001      	beq.n	800954e <JPEG_Set_HuffEnc_Mem+0x6e>
  {
    return  error;
 800954a:	7bfb      	ldrb	r3, [r7, #15]
 800954c:	e010      	b.n	8009570 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC1);
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
 8009556:	461a      	mov	r2, r3
 8009558:	490a      	ldr	r1, [pc, #40]	@ (8009584 <JPEG_Set_HuffEnc_Mem+0xa4>)
 800955a:	6878      	ldr	r0, [r7, #4]
 800955c:	f7ff fe39 	bl	80091d2 <JPEG_Set_HuffDC_Mem>
 8009560:	4603      	mov	r3, r0
 8009562:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8009564:	7bfb      	ldrb	r3, [r7, #15]
 8009566:	2b00      	cmp	r3, #0
 8009568:	d001      	beq.n	800956e <JPEG_Set_HuffEnc_Mem+0x8e>
  {
    return  error;
 800956a:	7bfb      	ldrb	r3, [r7, #15]
 800956c:	e000      	b.n	8009570 <JPEG_Set_HuffEnc_Mem+0x90>
  }
  /* Return function status */
  return HAL_OK;
 800956e:	2300      	movs	r3, #0
}
 8009570:	4618      	mov	r0, r3
 8009572:	3710      	adds	r7, #16
 8009574:	46bd      	mov	sp, r7
 8009576:	bd80      	pop	{r7, pc}
 8009578:	08017858 	.word	0x08017858
 800957c:	0801790c 	.word	0x0801790c
 8009580:	08017820 	.word	0x08017820
 8009584:	0801783c 	.word	0x0801783c

08009588 <JPEG_Set_Huff_DHTMem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_Set_Huff_DHTMem(JPEG_HandleTypeDef *hjpeg)
{
 8009588:	b480      	push	{r7}
 800958a:	b08b      	sub	sp, #44	@ 0x2c
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]
  JPEG_ACHuffTableTypeDef *HuffTableAC0 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable;
 8009590:	4b80      	ldr	r3, [pc, #512]	@ (8009794 <JPEG_Set_Huff_DHTMem+0x20c>)
 8009592:	61fb      	str	r3, [r7, #28]
  JPEG_ACHuffTableTypeDef *HuffTableAC1 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable;
 8009594:	4b80      	ldr	r3, [pc, #512]	@ (8009798 <JPEG_Set_Huff_DHTMem+0x210>)
 8009596:	61bb      	str	r3, [r7, #24]
  JPEG_DCHuffTableTypeDef *HuffTableDC0 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable;
 8009598:	4b80      	ldr	r3, [pc, #512]	@ (800979c <JPEG_Set_Huff_DHTMem+0x214>)
 800959a:	617b      	str	r3, [r7, #20]
  JPEG_DCHuffTableTypeDef *HuffTableDC1 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable;
 800959c:	4b80      	ldr	r3, [pc, #512]	@ (80097a0 <JPEG_Set_Huff_DHTMem+0x218>)
 800959e:	613b      	str	r3, [r7, #16]
  uint32_t value, index;
  __IO uint32_t *address;

  /* DC0 Huffman Table : BITS*/
  /* DC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address to DHTMEM + 3*/
  address = (hjpeg->Instance->DHTMEM + 3);
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 80095a8:	330c      	adds	r3, #12
 80095aa:	623b      	str	r3, [r7, #32]
  index = 16;
 80095ac:	2310      	movs	r3, #16
 80095ae:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 80095b0:	e01d      	b.n	80095ee <JPEG_Set_Huff_DHTMem+0x66>
  {

    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 80095b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095b4:	3b01      	subs	r3, #1
 80095b6:	697a      	ldr	r2, [r7, #20]
 80095b8:	5cd3      	ldrb	r3, [r2, r3]
 80095ba:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 80095bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095be:	3b02      	subs	r3, #2
 80095c0:	6979      	ldr	r1, [r7, #20]
 80095c2:	5ccb      	ldrb	r3, [r1, r3]
 80095c4:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 80095c6:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 80095c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095ca:	3b03      	subs	r3, #3
 80095cc:	6979      	ldr	r1, [r7, #20]
 80095ce:	5ccb      	ldrb	r3, [r1, r3]
 80095d0:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 80095d2:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->Bits[index - 4UL] & 0xFFUL);
 80095d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80095d6:	3a04      	subs	r2, #4
 80095d8:	6979      	ldr	r1, [r7, #20]
 80095da:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 80095dc:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 80095de:	6a3b      	ldr	r3, [r7, #32]
 80095e0:	601a      	str	r2, [r3, #0]
    address--;
 80095e2:	6a3b      	ldr	r3, [r7, #32]
 80095e4:	3b04      	subs	r3, #4
 80095e6:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 80095e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095ea:	3b04      	subs	r3, #4
 80095ec:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 80095ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095f0:	2b03      	cmp	r3, #3
 80095f2:	d8de      	bhi.n	80095b2 <JPEG_Set_Huff_DHTMem+0x2a>

  }
  /* DC0 Huffman Table : Val*/
  /* DC0 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +4 to DHTMEM + 6 */
  address = (hjpeg->Instance->DHTMEM + 6);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 80095fc:	3318      	adds	r3, #24
 80095fe:	623b      	str	r3, [r7, #32]
  index = 12;
 8009600:	230c      	movs	r3, #12
 8009602:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8009604:	e021      	b.n	800964a <JPEG_Set_Huff_DHTMem+0xc2>
  {
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8009606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009608:	3b01      	subs	r3, #1
 800960a:	697a      	ldr	r2, [r7, #20]
 800960c:	4413      	add	r3, r2
 800960e:	7c1b      	ldrb	r3, [r3, #16]
 8009610:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8009612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009614:	3b02      	subs	r3, #2
 8009616:	6979      	ldr	r1, [r7, #20]
 8009618:	440b      	add	r3, r1
 800961a:	7c1b      	ldrb	r3, [r3, #16]
 800961c:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800961e:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8009620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009622:	3b03      	subs	r3, #3
 8009624:	6979      	ldr	r1, [r7, #20]
 8009626:	440b      	add	r3, r1
 8009628:	7c1b      	ldrb	r3, [r3, #16]
 800962a:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800962c:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->HuffVal[index - 4UL] & 0xFFUL);
 800962e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009630:	3a04      	subs	r2, #4
 8009632:	6979      	ldr	r1, [r7, #20]
 8009634:	440a      	add	r2, r1
 8009636:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8009638:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800963a:	6a3b      	ldr	r3, [r7, #32]
 800963c:	601a      	str	r2, [r3, #0]
    address--;
 800963e:	6a3b      	ldr	r3, [r7, #32]
 8009640:	3b04      	subs	r3, #4
 8009642:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8009644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009646:	3b04      	subs	r3, #4
 8009648:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800964a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800964c:	2b03      	cmp	r3, #3
 800964e:	d8da      	bhi.n	8009606 <JPEG_Set_Huff_DHTMem+0x7e>
  }

  /* AC0 Huffman Table : BITS*/
  /* AC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 7 to DHTMEM + 10*/
  address = (hjpeg->Instance->DHTMEM + 10UL);
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8009658:	3328      	adds	r3, #40	@ 0x28
 800965a:	623b      	str	r3, [r7, #32]
  index = 16;
 800965c:	2310      	movs	r3, #16
 800965e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8009660:	e01d      	b.n	800969e <JPEG_Set_Huff_DHTMem+0x116>
  {

    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8009662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009664:	3b01      	subs	r3, #1
 8009666:	69fa      	ldr	r2, [r7, #28]
 8009668:	5cd3      	ldrb	r3, [r2, r3]
 800966a:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800966c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800966e:	3b02      	subs	r3, #2
 8009670:	69f9      	ldr	r1, [r7, #28]
 8009672:	5ccb      	ldrb	r3, [r1, r3]
 8009674:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8009676:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8009678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800967a:	3b03      	subs	r3, #3
 800967c:	69f9      	ldr	r1, [r7, #28]
 800967e:	5ccb      	ldrb	r3, [r1, r3]
 8009680:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8009682:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->Bits[index - 4UL] & 0xFFUL);
 8009684:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009686:	3a04      	subs	r2, #4
 8009688:	69f9      	ldr	r1, [r7, #28]
 800968a:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 800968c:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800968e:	6a3b      	ldr	r3, [r7, #32]
 8009690:	601a      	str	r2, [r3, #0]
    address--;
 8009692:	6a3b      	ldr	r3, [r7, #32]
 8009694:	3b04      	subs	r3, #4
 8009696:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8009698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800969a:	3b04      	subs	r3, #4
 800969c:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800969e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096a0:	2b03      	cmp	r3, #3
 80096a2:	d8de      	bhi.n	8009662 <JPEG_Set_Huff_DHTMem+0xda>

  }
  /* AC0 Huffman Table : Val*/
  /* AC0 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 11 to DHTMEM + 51 */
  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 51) belong to AC0 VALS table */
  address = (hjpeg->Instance->DHTMEM + 51);
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 80096ac:	33cc      	adds	r3, #204	@ 0xcc
 80096ae:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 80096b0:	6a3b      	ldr	r3, [r7, #32]
 80096b2:	681a      	ldr	r2, [r3, #0]
 80096b4:	4b3b      	ldr	r3, [pc, #236]	@ (80097a4 <JPEG_Set_Huff_DHTMem+0x21c>)
 80096b6:	4013      	ands	r3, r2
 80096b8:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
 80096ba:	69fb      	ldr	r3, [r7, #28]
 80096bc:	f893 30b1 	ldrb.w	r3, [r3, #177]	@ 0xb1
 80096c0:	021a      	lsls	r2, r3, #8
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	4313      	orrs	r3, r2
 80096c6:	69fa      	ldr	r2, [r7, #28]
 80096c8:	f892 20b0 	ldrb.w	r2, [r2, #176]	@ 0xb0
 80096cc:	4313      	orrs	r3, r2
 80096ce:	60fb      	str	r3, [r7, #12]
  *address = value;
 80096d0:	6a3b      	ldr	r3, [r7, #32]
 80096d2:	68fa      	ldr	r2, [r7, #12]
 80096d4:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC0 huffman values */
  address--; /* address = hjpeg->Instance->DHTMEM + 50*/
 80096d6:	6a3b      	ldr	r3, [r7, #32]
 80096d8:	3b04      	subs	r3, #4
 80096da:	623b      	str	r3, [r7, #32]
  index = 160;
 80096dc:	23a0      	movs	r3, #160	@ 0xa0
 80096de:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 80096e0:	e021      	b.n	8009726 <JPEG_Set_Huff_DHTMem+0x19e>
  {
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 80096e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096e4:	3b01      	subs	r3, #1
 80096e6:	69fa      	ldr	r2, [r7, #28]
 80096e8:	4413      	add	r3, r2
 80096ea:	7c1b      	ldrb	r3, [r3, #16]
 80096ec:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 80096ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096f0:	3b02      	subs	r3, #2
 80096f2:	69f9      	ldr	r1, [r7, #28]
 80096f4:	440b      	add	r3, r1
 80096f6:	7c1b      	ldrb	r3, [r3, #16]
 80096f8:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 80096fa:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 80096fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096fe:	3b03      	subs	r3, #3
 8009700:	69f9      	ldr	r1, [r7, #28]
 8009702:	440b      	add	r3, r1
 8009704:	7c1b      	ldrb	r3, [r3, #16]
 8009706:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8009708:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->HuffVal[index - 4UL] & 0xFFUL);
 800970a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800970c:	3a04      	subs	r2, #4
 800970e:	69f9      	ldr	r1, [r7, #28]
 8009710:	440a      	add	r2, r1
 8009712:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8009714:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8009716:	6a3b      	ldr	r3, [r7, #32]
 8009718:	601a      	str	r2, [r3, #0]
    address--;
 800971a:	6a3b      	ldr	r3, [r7, #32]
 800971c:	3b04      	subs	r3, #4
 800971e:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8009720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009722:	3b04      	subs	r3, #4
 8009724:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8009726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009728:	2b03      	cmp	r3, #3
 800972a:	d8da      	bhi.n	80096e2 <JPEG_Set_Huff_DHTMem+0x15a>
  }

  /* DC1 Huffman Table : BITS*/
  /* DC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM + 51 base address to DHTMEM + 55*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 51) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 51);
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8009734:	33cc      	adds	r3, #204	@ 0xcc
 8009736:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 8009738:	6a3b      	ldr	r3, [r7, #32]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	b29b      	uxth	r3, r3
 800973e:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->Bits[0] & 0xFFUL) << 16);
 8009740:	693b      	ldr	r3, [r7, #16]
 8009742:	785b      	ldrb	r3, [r3, #1]
 8009744:	061a      	lsls	r2, r3, #24
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	431a      	orrs	r2, r3
 800974a:	693b      	ldr	r3, [r7, #16]
 800974c:	781b      	ldrb	r3, [r3, #0]
 800974e:	041b      	lsls	r3, r3, #16
 8009750:	4313      	orrs	r3, r2
 8009752:	60fb      	str	r3, [r7, #12]
  *address = value;
 8009754:	6a3b      	ldr	r3, [r7, #32]
 8009756:	68fa      	ldr	r2, [r7, #12]
 8009758:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 55) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 55);
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8009762:	33dc      	adds	r3, #220	@ 0xdc
 8009764:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 8009766:	6a3b      	ldr	r3, [r7, #32]
 8009768:	681a      	ldr	r2, [r3, #0]
 800976a:	4b0e      	ldr	r3, [pc, #56]	@ (80097a4 <JPEG_Set_Huff_DHTMem+0x21c>)
 800976c:	4013      	ands	r3, r2
 800976e:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->Bits[14] & 0xFFUL);
 8009770:	693b      	ldr	r3, [r7, #16]
 8009772:	7bdb      	ldrb	r3, [r3, #15]
 8009774:	021a      	lsls	r2, r3, #8
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	4313      	orrs	r3, r2
 800977a:	693a      	ldr	r2, [r7, #16]
 800977c:	7b92      	ldrb	r2, [r2, #14]
 800977e:	4313      	orrs	r3, r2
 8009780:	60fb      	str	r3, [r7, #12]
  *address = value;
 8009782:	6a3b      	ldr	r3, [r7, #32]
 8009784:	68fa      	ldr	r2, [r7, #12]
 8009786:	601a      	str	r2, [r3, #0]

  /*continue setting 12 DC1 huffman Bits from DHTMEM + 54 down to DHTMEM + 52*/
  address--;
 8009788:	6a3b      	ldr	r3, [r7, #32]
 800978a:	3b04      	subs	r3, #4
 800978c:	623b      	str	r3, [r7, #32]
  index = 12;
 800978e:	230c      	movs	r3, #12
 8009790:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8009792:	e027      	b.n	80097e4 <JPEG_Set_Huff_DHTMem+0x25c>
 8009794:	08017858 	.word	0x08017858
 8009798:	0801790c 	.word	0x0801790c
 800979c:	08017820 	.word	0x08017820
 80097a0:	0801783c 	.word	0x0801783c
 80097a4:	ffff0000 	.word	0xffff0000
  {

    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 80097a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097aa:	3301      	adds	r3, #1
 80097ac:	693a      	ldr	r2, [r7, #16]
 80097ae:	5cd3      	ldrb	r3, [r2, r3]
 80097b0:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 80097b2:	6939      	ldr	r1, [r7, #16]
 80097b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097b6:	440b      	add	r3, r1
 80097b8:	781b      	ldrb	r3, [r3, #0]
 80097ba:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 80097bc:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 80097be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097c0:	3b01      	subs	r3, #1
 80097c2:	6939      	ldr	r1, [r7, #16]
 80097c4:	5ccb      	ldrb	r3, [r1, r3]
 80097c6:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 80097c8:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->Bits[index - 2UL] & 0xFFUL);
 80097ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80097cc:	3a02      	subs	r2, #2
 80097ce:	6939      	ldr	r1, [r7, #16]
 80097d0:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 80097d2:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 80097d4:	6a3b      	ldr	r3, [r7, #32]
 80097d6:	601a      	str	r2, [r3, #0]
    address--;
 80097d8:	6a3b      	ldr	r3, [r7, #32]
 80097da:	3b04      	subs	r3, #4
 80097dc:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 80097de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097e0:	3b04      	subs	r3, #4
 80097e2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 80097e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097e6:	2b03      	cmp	r3, #3
 80097e8:	d8de      	bhi.n	80097a8 <JPEG_Set_Huff_DHTMem+0x220>

  }
  /* DC1 Huffman Table : Val*/
  /* DC1 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +55 to DHTMEM + 58 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 55) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 55);
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 80097f2:	33dc      	adds	r3, #220	@ 0xdc
 80097f4:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 80097f6:	6a3b      	ldr	r3, [r7, #32]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	b29b      	uxth	r3, r3
 80097fc:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->HuffVal[0] & 0xFFUL) <<
 80097fe:	693b      	ldr	r3, [r7, #16]
 8009800:	7c5b      	ldrb	r3, [r3, #17]
 8009802:	061a      	lsls	r2, r3, #24
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	431a      	orrs	r2, r3
 8009808:	693b      	ldr	r3, [r7, #16]
 800980a:	7c1b      	ldrb	r3, [r3, #16]
 800980c:	041b      	lsls	r3, r3, #16
 800980e:	4313      	orrs	r3, r2
 8009810:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 8009812:	6a3b      	ldr	r3, [r7, #32]
 8009814:	68fa      	ldr	r2, [r7, #12]
 8009816:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 58) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 58);
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8009820:	33e8      	adds	r3, #232	@ 0xe8
 8009822:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000UL;
 8009824:	6a3b      	ldr	r3, [r7, #32]
 8009826:	681a      	ldr	r2, [r3, #0]
 8009828:	4b6d      	ldr	r3, [pc, #436]	@ (80099e0 <JPEG_Set_Huff_DHTMem+0x458>)
 800982a:	4013      	ands	r3, r2
 800982c:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
 800982e:	693b      	ldr	r3, [r7, #16]
 8009830:	7edb      	ldrb	r3, [r3, #27]
 8009832:	021a      	lsls	r2, r3, #8
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	4313      	orrs	r3, r2
 8009838:	693a      	ldr	r2, [r7, #16]
 800983a:	7e92      	ldrb	r2, [r2, #26]
 800983c:	4313      	orrs	r3, r2
 800983e:	60fb      	str	r3, [r7, #12]
  *address = value;
 8009840:	6a3b      	ldr	r3, [r7, #32]
 8009842:	68fa      	ldr	r2, [r7, #12]
 8009844:	601a      	str	r2, [r3, #0]

  /*continue setting 8 DC1 huffman val from DHTMEM + 57 down to DHTMEM + 56*/
  address--;
 8009846:	6a3b      	ldr	r3, [r7, #32]
 8009848:	3b04      	subs	r3, #4
 800984a:	623b      	str	r3, [r7, #32]
  index = 8;
 800984c:	2308      	movs	r3, #8
 800984e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8009850:	e021      	b.n	8009896 <JPEG_Set_Huff_DHTMem+0x30e>
  {
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8009852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009854:	3301      	adds	r3, #1
 8009856:	693a      	ldr	r2, [r7, #16]
 8009858:	4413      	add	r3, r2
 800985a:	7c1b      	ldrb	r3, [r3, #16]
 800985c:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 800985e:	6939      	ldr	r1, [r7, #16]
 8009860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009862:	440b      	add	r3, r1
 8009864:	3310      	adds	r3, #16
 8009866:	781b      	ldrb	r3, [r3, #0]
 8009868:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800986a:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800986c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800986e:	3b01      	subs	r3, #1
 8009870:	6939      	ldr	r1, [r7, #16]
 8009872:	440b      	add	r3, r1
 8009874:	7c1b      	ldrb	r3, [r3, #16]
 8009876:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 8009878:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->HuffVal[index - 2UL] & 0xFFUL);
 800987a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800987c:	3a02      	subs	r2, #2
 800987e:	6939      	ldr	r1, [r7, #16]
 8009880:	440a      	add	r2, r1
 8009882:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8009884:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8009886:	6a3b      	ldr	r3, [r7, #32]
 8009888:	601a      	str	r2, [r3, #0]
    address--;
 800988a:	6a3b      	ldr	r3, [r7, #32]
 800988c:	3b04      	subs	r3, #4
 800988e:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8009890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009892:	3b04      	subs	r3, #4
 8009894:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8009896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009898:	2b03      	cmp	r3, #3
 800989a:	d8da      	bhi.n	8009852 <JPEG_Set_Huff_DHTMem+0x2ca>
  }

  /* AC1 Huffman Table : BITS*/
  /* AC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 58 to DHTMEM + 62*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 58) belong to AC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 58);
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 80098a4:	33e8      	adds	r3, #232	@ 0xe8
 80098a6:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 80098a8:	6a3b      	ldr	r3, [r7, #32]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	b29b      	uxth	r3, r3
 80098ae:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->Bits[0] & 0xFFUL) << 16);
 80098b0:	69bb      	ldr	r3, [r7, #24]
 80098b2:	785b      	ldrb	r3, [r3, #1]
 80098b4:	061a      	lsls	r2, r3, #24
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	431a      	orrs	r2, r3
 80098ba:	69bb      	ldr	r3, [r7, #24]
 80098bc:	781b      	ldrb	r3, [r3, #0]
 80098be:	041b      	lsls	r3, r3, #16
 80098c0:	4313      	orrs	r3, r2
 80098c2:	60fb      	str	r3, [r7, #12]
  *address = value;
 80098c4:	6a3b      	ldr	r3, [r7, #32]
 80098c6:	68fa      	ldr	r2, [r7, #12]
 80098c8:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 62) belong to Bits Val table */
  address = (hjpeg->Instance->DHTMEM + 62);
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 80098d2:	33f8      	adds	r3, #248	@ 0xf8
 80098d4:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 80098d6:	6a3b      	ldr	r3, [r7, #32]
 80098d8:	681a      	ldr	r2, [r3, #0]
 80098da:	4b41      	ldr	r3, [pc, #260]	@ (80099e0 <JPEG_Set_Huff_DHTMem+0x458>)
 80098dc:	4013      	ands	r3, r2
 80098de:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
 80098e0:	69bb      	ldr	r3, [r7, #24]
 80098e2:	7bdb      	ldrb	r3, [r3, #15]
 80098e4:	021a      	lsls	r2, r3, #8
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	4313      	orrs	r3, r2
 80098ea:	69ba      	ldr	r2, [r7, #24]
 80098ec:	7b92      	ldrb	r2, [r2, #14]
 80098ee:	4313      	orrs	r3, r2
 80098f0:	60fb      	str	r3, [r7, #12]
  *address = value;
 80098f2:	6a3b      	ldr	r3, [r7, #32]
 80098f4:	68fa      	ldr	r2, [r7, #12]
 80098f6:	601a      	str	r2, [r3, #0]

  /*continue setting 12 AC1 huffman Bits from DHTMEM + 61 down to DHTMEM + 59*/
  address--;
 80098f8:	6a3b      	ldr	r3, [r7, #32]
 80098fa:	3b04      	subs	r3, #4
 80098fc:	623b      	str	r3, [r7, #32]
  index = 12;
 80098fe:	230c      	movs	r3, #12
 8009900:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8009902:	e01d      	b.n	8009940 <JPEG_Set_Huff_DHTMem+0x3b8>
  {

    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8009904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009906:	3301      	adds	r3, #1
 8009908:	69ba      	ldr	r2, [r7, #24]
 800990a:	5cd3      	ldrb	r3, [r2, r3]
 800990c:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 800990e:	69b9      	ldr	r1, [r7, #24]
 8009910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009912:	440b      	add	r3, r1
 8009914:	781b      	ldrb	r3, [r3, #0]
 8009916:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8009918:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 800991a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800991c:	3b01      	subs	r3, #1
 800991e:	69b9      	ldr	r1, [r7, #24]
 8009920:	5ccb      	ldrb	r3, [r1, r3]
 8009922:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 8009924:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->Bits[index - 2UL] & 0xFFUL);
 8009926:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009928:	3a02      	subs	r2, #2
 800992a:	69b9      	ldr	r1, [r7, #24]
 800992c:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 800992e:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8009930:	6a3b      	ldr	r3, [r7, #32]
 8009932:	601a      	str	r2, [r3, #0]
    address--;
 8009934:	6a3b      	ldr	r3, [r7, #32]
 8009936:	3b04      	subs	r3, #4
 8009938:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800993a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800993c:	3b04      	subs	r3, #4
 800993e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8009940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009942:	2b03      	cmp	r3, #3
 8009944:	d8de      	bhi.n	8009904 <JPEG_Set_Huff_DHTMem+0x37c>

  }
  /* AC1 Huffman Table : Val*/
  /* AC1 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 62 to DHTMEM + 102 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 62) belong to AC1 VALS table */
  address = (hjpeg->Instance->DHTMEM + 62);
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800994e:	33f8      	adds	r3, #248	@ 0xf8
 8009950:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 8009952:	6a3b      	ldr	r3, [r7, #32]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	b29b      	uxth	r3, r3
 8009958:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
 800995a:	69bb      	ldr	r3, [r7, #24]
 800995c:	7c5b      	ldrb	r3, [r3, #17]
 800995e:	061a      	lsls	r2, r3, #24
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	431a      	orrs	r2, r3
 8009964:	69bb      	ldr	r3, [r7, #24]
 8009966:	7c1b      	ldrb	r3, [r3, #16]
 8009968:	041b      	lsls	r3, r3, #16
 800996a:	4313      	orrs	r3, r2
 800996c:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 800996e:	6a3b      	ldr	r3, [r7, #32]
 8009970:	68fa      	ldr	r2, [r7, #12]
 8009972:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC1 huffman values from DHTMEM + 63 to DHTMEM+102 */
  address = (hjpeg->Instance->DHTMEM + 102);
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800997c:	f503 73cc 	add.w	r3, r3, #408	@ 0x198
 8009980:	623b      	str	r3, [r7, #32]
  index = 160;
 8009982:	23a0      	movs	r3, #160	@ 0xa0
 8009984:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8009986:	e021      	b.n	80099cc <JPEG_Set_Huff_DHTMem+0x444>
  {
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8009988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800998a:	3301      	adds	r3, #1
 800998c:	69ba      	ldr	r2, [r7, #24]
 800998e:	4413      	add	r3, r2
 8009990:	7c1b      	ldrb	r3, [r3, #16]
 8009992:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 8009994:	69b9      	ldr	r1, [r7, #24]
 8009996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009998:	440b      	add	r3, r1
 800999a:	3310      	adds	r3, #16
 800999c:	781b      	ldrb	r3, [r3, #0]
 800999e:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 80099a0:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 80099a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099a4:	3b01      	subs	r3, #1
 80099a6:	69b9      	ldr	r1, [r7, #24]
 80099a8:	440b      	add	r3, r1
 80099aa:	7c1b      	ldrb	r3, [r3, #16]
 80099ac:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 80099ae:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->HuffVal[index - 2UL] & 0xFFUL);
 80099b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80099b2:	3a02      	subs	r2, #2
 80099b4:	69b9      	ldr	r1, [r7, #24]
 80099b6:	440a      	add	r2, r1
 80099b8:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 80099ba:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 80099bc:	6a3b      	ldr	r3, [r7, #32]
 80099be:	601a      	str	r2, [r3, #0]
    address--;
 80099c0:	6a3b      	ldr	r3, [r7, #32]
 80099c2:	3b04      	subs	r3, #4
 80099c4:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 80099c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099c8:	3b04      	subs	r3, #4
 80099ca:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 80099cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099ce:	2b03      	cmp	r3, #3
 80099d0:	d8da      	bhi.n	8009988 <JPEG_Set_Huff_DHTMem+0x400>
  }

}
 80099d2:	bf00      	nop
 80099d4:	bf00      	nop
 80099d6:	372c      	adds	r7, #44	@ 0x2c
 80099d8:	46bd      	mov	sp, r7
 80099da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099de:	4770      	bx	lr
 80099e0:	ffff0000 	.word	0xffff0000

080099e4 <JPEG_Set_Quantization_Mem>:
  *         it could be QMEM0, QMEM1, QMEM2 or QMEM3
  * @retval 0 if no error, 1 if error
  */
static uint32_t JPEG_Set_Quantization_Mem(JPEG_HandleTypeDef *hjpeg, uint8_t *QTable,
                                                    __IO uint32_t *QTableAddress)
{
 80099e4:	b480      	push	{r7}
 80099e6:	b08b      	sub	sp, #44	@ 0x2c
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	60f8      	str	r0, [r7, #12]
 80099ec:	60b9      	str	r1, [r7, #8]
 80099ee:	607a      	str	r2, [r7, #4]
  uint32_t quantRow;
  uint32_t quantVal;
  uint32_t ScaleFactor;
  __IO uint32_t *tableAddress;

  tableAddress = QTableAddress;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	613b      	str	r3, [r7, #16]

  if ((hjpeg->Conf.ImageQuality >= 50UL) && (hjpeg->Conf.ImageQuality <= 100UL))
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	695b      	ldr	r3, [r3, #20]
 80099f8:	2b31      	cmp	r3, #49	@ 0x31
 80099fa:	d90a      	bls.n	8009a12 <JPEG_Set_Quantization_Mem+0x2e>
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	695b      	ldr	r3, [r3, #20]
 8009a00:	2b64      	cmp	r3, #100	@ 0x64
 8009a02:	d806      	bhi.n	8009a12 <JPEG_Set_Quantization_Mem+0x2e>
  {
    ScaleFactor = 200UL - (hjpeg->Conf.ImageQuality * 2UL);
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	695b      	ldr	r3, [r3, #20]
 8009a08:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 8009a0c:	005b      	lsls	r3, r3, #1
 8009a0e:	617b      	str	r3, [r7, #20]
 8009a10:	e00d      	b.n	8009a2e <JPEG_Set_Quantization_Mem+0x4a>
  }
  else if (hjpeg->Conf.ImageQuality > 0UL)
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	695b      	ldr	r3, [r3, #20]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d007      	beq.n	8009a2a <JPEG_Set_Quantization_Mem+0x46>
  {
    ScaleFactor = ((uint32_t) 5000) / ((uint32_t) hjpeg->Conf.ImageQuality);
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	695b      	ldr	r3, [r3, #20]
 8009a1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009a22:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a26:	617b      	str	r3, [r7, #20]
 8009a28:	e001      	b.n	8009a2e <JPEG_Set_Quantization_Mem+0x4a>
  }
  else
  {
    return 1UL;
 8009a2a:	2301      	movs	r3, #1
 8009a2c:	e041      	b.n	8009ab2 <JPEG_Set_Quantization_Mem+0xce>
  }

  /*Quantization_table = (Standard_quanization_table * ScaleFactor + 50) / 100*/
  i = 0;
 8009a2e:	2300      	movs	r3, #0
 8009a30:	627b      	str	r3, [r7, #36]	@ 0x24
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 8009a32:	e03a      	b.n	8009aaa <JPEG_Set_Quantization_Mem+0xc6>
  {
    quantRow = 0;
 8009a34:	2300      	movs	r3, #0
 8009a36:	61fb      	str	r3, [r7, #28]
    for (j = 0; j < 4UL; j++)
 8009a38:	2300      	movs	r3, #0
 8009a3a:	623b      	str	r3, [r7, #32]
 8009a3c:	e029      	b.n	8009a92 <JPEG_Set_Quantization_Mem+0xae>
    {
      /* Note that the quantization coefficients must be specified in the table in zigzag order */
      quantVal = ((((uint32_t) QTable[JPEG_ZIGZAG_ORDER[i + j]]) * ScaleFactor) + 50UL) / 100UL;
 8009a3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009a40:	6a3b      	ldr	r3, [r7, #32]
 8009a42:	4413      	add	r3, r2
 8009a44:	4a1e      	ldr	r2, [pc, #120]	@ (8009ac0 <JPEG_Set_Quantization_Mem+0xdc>)
 8009a46:	5cd3      	ldrb	r3, [r2, r3]
 8009a48:	461a      	mov	r2, r3
 8009a4a:	68bb      	ldr	r3, [r7, #8]
 8009a4c:	4413      	add	r3, r2
 8009a4e:	781b      	ldrb	r3, [r3, #0]
 8009a50:	461a      	mov	r2, r3
 8009a52:	697b      	ldr	r3, [r7, #20]
 8009a54:	fb02 f303 	mul.w	r3, r2, r3
 8009a58:	3332      	adds	r3, #50	@ 0x32
 8009a5a:	4a1a      	ldr	r2, [pc, #104]	@ (8009ac4 <JPEG_Set_Quantization_Mem+0xe0>)
 8009a5c:	fba2 2303 	umull	r2, r3, r2, r3
 8009a60:	095b      	lsrs	r3, r3, #5
 8009a62:	61bb      	str	r3, [r7, #24]

      if (quantVal == 0UL)
 8009a64:	69bb      	ldr	r3, [r7, #24]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d102      	bne.n	8009a70 <JPEG_Set_Quantization_Mem+0x8c>
      {
        quantVal = 1UL;
 8009a6a:	2301      	movs	r3, #1
 8009a6c:	61bb      	str	r3, [r7, #24]
 8009a6e:	e004      	b.n	8009a7a <JPEG_Set_Quantization_Mem+0x96>
      }
      else if (quantVal > 255UL)
 8009a70:	69bb      	ldr	r3, [r7, #24]
 8009a72:	2bff      	cmp	r3, #255	@ 0xff
 8009a74:	d901      	bls.n	8009a7a <JPEG_Set_Quantization_Mem+0x96>
      {
        quantVal = 255UL;
 8009a76:	23ff      	movs	r3, #255	@ 0xff
 8009a78:	61bb      	str	r3, [r7, #24]
      else
      {
        /* Nothing to do, keep same value of quantVal */
      }

      quantRow |= ((quantVal & 0xFFUL) << (8UL * j));
 8009a7a:	69bb      	ldr	r3, [r7, #24]
 8009a7c:	b2da      	uxtb	r2, r3
 8009a7e:	6a3b      	ldr	r3, [r7, #32]
 8009a80:	00db      	lsls	r3, r3, #3
 8009a82:	fa02 f303 	lsl.w	r3, r2, r3
 8009a86:	69fa      	ldr	r2, [r7, #28]
 8009a88:	4313      	orrs	r3, r2
 8009a8a:	61fb      	str	r3, [r7, #28]
    for (j = 0; j < 4UL; j++)
 8009a8c:	6a3b      	ldr	r3, [r7, #32]
 8009a8e:	3301      	adds	r3, #1
 8009a90:	623b      	str	r3, [r7, #32]
 8009a92:	6a3b      	ldr	r3, [r7, #32]
 8009a94:	2b03      	cmp	r3, #3
 8009a96:	d9d2      	bls.n	8009a3e <JPEG_Set_Quantization_Mem+0x5a>
    }

    i += 4UL;
 8009a98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a9a:	3304      	adds	r3, #4
 8009a9c:	627b      	str	r3, [r7, #36]	@ 0x24
    *tableAddress = quantRow;
 8009a9e:	693b      	ldr	r3, [r7, #16]
 8009aa0:	69fa      	ldr	r2, [r7, #28]
 8009aa2:	601a      	str	r2, [r3, #0]
    tableAddress ++;
 8009aa4:	693b      	ldr	r3, [r7, #16]
 8009aa6:	3304      	adds	r3, #4
 8009aa8:	613b      	str	r3, [r7, #16]
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 8009aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009aac:	2b3c      	cmp	r3, #60	@ 0x3c
 8009aae:	d9c1      	bls.n	8009a34 <JPEG_Set_Quantization_Mem+0x50>
  }

  /* Return function status */
  return 0UL;
 8009ab0:	2300      	movs	r3, #0
}
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	372c      	adds	r7, #44	@ 0x2c
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009abc:	4770      	bx	lr
 8009abe:	bf00      	nop
 8009ac0:	080179c0 	.word	0x080179c0
 8009ac4:	51eb851f 	.word	0x51eb851f

08009ac8 <JPEG_SetColorYCBCR>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_SetColorYCBCR(JPEG_HandleTypeDef *hjpeg)
{
 8009ac8:	b480      	push	{r7}
 8009aca:	b087      	sub	sp, #28
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	6078      	str	r0, [r7, #4]
  uint32_t ySamplingH;
  uint32_t ySamplingV;
  uint32_t yblockNb;

  /*Set Number of color components to 3*/
  hjpeg->Instance->CONFR1 &=  ~JPEG_CONFR1_NF;
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	685a      	ldr	r2, [r3, #4]
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	f022 0203 	bic.w	r2, r2, #3
 8009ade:	605a      	str	r2, [r3, #4]
  hjpeg->Instance->CONFR1 |=  JPEG_CONFR1_NF_1;
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	685a      	ldr	r2, [r3, #4]
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	f042 0202 	orr.w	r2, r2, #2
 8009aee:	605a      	str	r2, [r3, #4]

  /* compute MCU block size and Y, Cb ,Cr sampling factors*/
  if (hjpeg->Conf.ChromaSubsampling == JPEG_420_SUBSAMPLING)
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	689b      	ldr	r3, [r3, #8]
 8009af4:	2b01      	cmp	r3, #1
 8009af6:	d108      	bne.n	8009b0a <JPEG_SetColorYCBCR+0x42>
  {
    ySamplingH  = JPEG_CONFR4_HSF_1;   /* Hs = 2*/
 8009af8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8009afc:	617b      	str	r3, [r7, #20]
    ySamplingV  = JPEG_CONFR4_VSF_1;   /* Vs = 2*/
 8009afe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009b02:	613b      	str	r3, [r7, #16]

    yblockNb  = 0x30; /* 4 blocks of 8x8*/
 8009b04:	2330      	movs	r3, #48	@ 0x30
 8009b06:	60fb      	str	r3, [r7, #12]
 8009b08:	e014      	b.n	8009b34 <JPEG_SetColorYCBCR+0x6c>
  }
  else if (hjpeg->Conf.ChromaSubsampling == JPEG_422_SUBSAMPLING)
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	689b      	ldr	r3, [r3, #8]
 8009b0e:	2b02      	cmp	r3, #2
 8009b10:	d108      	bne.n	8009b24 <JPEG_SetColorYCBCR+0x5c>
  {
    ySamplingH  = JPEG_CONFR4_HSF_1;   /* Hs = 2*/
 8009b12:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8009b16:	617b      	str	r3, [r7, #20]
    ySamplingV  = JPEG_CONFR4_VSF_0;   /* Vs = 1*/
 8009b18:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009b1c:	613b      	str	r3, [r7, #16]

    yblockNb  = 0x10; /* 2 blocks of 8x8*/
 8009b1e:	2310      	movs	r3, #16
 8009b20:	60fb      	str	r3, [r7, #12]
 8009b22:	e007      	b.n	8009b34 <JPEG_SetColorYCBCR+0x6c>
  }
  else /*JPEG_444_SUBSAMPLING and default*/
  {
    ySamplingH  = JPEG_CONFR4_HSF_0;   /* Hs = 1*/
 8009b24:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009b28:	617b      	str	r3, [r7, #20]
    ySamplingV  = JPEG_CONFR4_VSF_0;   /* Vs = 1*/
 8009b2a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009b2e:	613b      	str	r3, [r7, #16]

    yblockNb  = 0; /* 1 block of 8x8*/
 8009b30:	2300      	movs	r3, #0
 8009b32:	60fb      	str	r3, [r7, #12]
  }

  hjpeg->Instance->CONFR1 &= ~(JPEG_CONFR1_NF | JPEG_CONFR1_NS);
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	685a      	ldr	r2, [r3, #4]
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	f022 02c3 	bic.w	r2, r2, #195	@ 0xc3
 8009b42:	605a      	str	r2, [r3, #4]
  hjpeg->Instance->CONFR1 |= (JPEG_CONFR1_NF_1 | JPEG_CONFR1_NS_1);
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	685a      	ldr	r2, [r3, #4]
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	f042 0282 	orr.w	r2, r2, #130	@ 0x82
 8009b52:	605a      	str	r2, [r3, #4]

  /*Reset CONFR4 register*/
  hjpeg->Instance->CONFR4 =  0;
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	2200      	movs	r2, #0
 8009b5a:	611a      	str	r2, [r3, #16]
  /*Set Horizental and Vertical  sampling factor , number of blocks , Quantization table and Huffman AC/DC tables for component 0*/
  hjpeg->Instance->CONFR4 |= (ySamplingH | ySamplingV | (yblockNb & JPEG_CONFR4_NB));
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	6919      	ldr	r1, [r3, #16]
 8009b62:	697a      	ldr	r2, [r7, #20]
 8009b64:	693b      	ldr	r3, [r7, #16]
 8009b66:	431a      	orrs	r2, r3
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009b6e:	431a      	orrs	r2, r3
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	430a      	orrs	r2, r1
 8009b76:	611a      	str	r2, [r3, #16]

  /*Reset CONFR5 register*/
  hjpeg->Instance->CONFR5 =  0;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	2200      	movs	r2, #0
 8009b7e:	615a      	str	r2, [r3, #20]
  /*Set Horizental and Vertical  sampling factor , number of blocks , Quantization table and Huffman AC/DC tables for component 1*/
  hjpeg->Instance->CONFR5 |= (JPEG_CONFR5_HSF_0 | JPEG_CONFR5_VSF_0 | JPEG_CONFR5_QT_0 | JPEG_CONFR5_HA | JPEG_CONFR5_HD);
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	6959      	ldr	r1, [r3, #20]
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681a      	ldr	r2, [r3, #0]
 8009b8a:	f241 1307 	movw	r3, #4359	@ 0x1107
 8009b8e:	430b      	orrs	r3, r1
 8009b90:	6153      	str	r3, [r2, #20]

  /*Reset CONFR6 register*/
  hjpeg->Instance->CONFR6 =  0;
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	2200      	movs	r2, #0
 8009b98:	619a      	str	r2, [r3, #24]
  /*Set Horizental and Vertical  sampling factor and number of blocks for component 2*/
  /* In YCBCR , by default, both chrominance components (component 1 and component 2) use the same Quantization table (table 1) */
  /* In YCBCR , both chrominance components (component 1 and component 2) use the same Huffman tables (table 1) */
  hjpeg->Instance->CONFR6 |= (JPEG_CONFR6_HSF_0 | JPEG_CONFR6_VSF_0 | JPEG_CONFR6_QT_0 | JPEG_CONFR6_HA | JPEG_CONFR6_HD);
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	6999      	ldr	r1, [r3, #24]
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681a      	ldr	r2, [r3, #0]
 8009ba4:	f241 1307 	movw	r3, #4359	@ 0x1107
 8009ba8:	430b      	orrs	r3, r1
 8009baa:	6193      	str	r3, [r2, #24]

}
 8009bac:	bf00      	nop
 8009bae:	371c      	adds	r7, #28
 8009bb0:	46bd      	mov	sp, r7
 8009bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb6:	4770      	bx	lr

08009bb8 <JPEG_SetColorGrayScale>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_SetColorGrayScale(JPEG_HandleTypeDef *hjpeg)
{
 8009bb8:	b480      	push	{r7}
 8009bba:	b083      	sub	sp, #12
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
  /*Set Number of color components to 1*/
  hjpeg->Instance->CONFR1 &= ~(JPEG_CONFR1_NF | JPEG_CONFR1_NS);
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	685a      	ldr	r2, [r3, #4]
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	f022 02c3 	bic.w	r2, r2, #195	@ 0xc3
 8009bce:	605a      	str	r2, [r3, #4]

  /*in GrayScale use 1 single Quantization table (Table 0)*/
  /*in GrayScale use only one couple of AC/DC huffman table (table 0)*/

  /*Reset CONFR4 register*/
  hjpeg->Instance->CONFR4 =  0;
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	2200      	movs	r2, #0
 8009bd6:	611a      	str	r2, [r3, #16]
  /*Set Horizental and Vertical  sampling factor , number of blocks , Quantization table and Huffman AC/DC tables for component 0*/
  hjpeg->Instance->CONFR4 |=  JPEG_CONFR4_HSF_0 | JPEG_CONFR4_VSF_0 ;
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	691a      	ldr	r2, [r3, #16]
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	f442 5288 	orr.w	r2, r2, #4352	@ 0x1100
 8009be6:	611a      	str	r2, [r3, #16]
}
 8009be8:	bf00      	nop
 8009bea:	370c      	adds	r7, #12
 8009bec:	46bd      	mov	sp, r7
 8009bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf2:	4770      	bx	lr

08009bf4 <JPEG_SetColorCMYK>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_SetColorCMYK(JPEG_HandleTypeDef *hjpeg)
{
 8009bf4:	b480      	push	{r7}
 8009bf6:	b087      	sub	sp, #28
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]
  uint32_t ySamplingH;
  uint32_t ySamplingV;
  uint32_t yblockNb;

  /*Set Number of color components to 4*/
  hjpeg->Instance->CONFR1 |= (JPEG_CONFR1_NF | JPEG_CONFR1_NS);
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	685a      	ldr	r2, [r3, #4]
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	f042 02c3 	orr.w	r2, r2, #195	@ 0xc3
 8009c0a:	605a      	str	r2, [r3, #4]

  /* compute MCU block size and Y, Cb ,Cr sampling factors*/
  if (hjpeg->Conf.ChromaSubsampling == JPEG_420_SUBSAMPLING)
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	689b      	ldr	r3, [r3, #8]
 8009c10:	2b01      	cmp	r3, #1
 8009c12:	d108      	bne.n	8009c26 <JPEG_SetColorCMYK+0x32>
  {
    ySamplingH  = JPEG_CONFR4_HSF_1;   /* Hs = 2*/
 8009c14:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8009c18:	617b      	str	r3, [r7, #20]
    ySamplingV  = JPEG_CONFR4_VSF_1;   /* Vs = 2*/
 8009c1a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009c1e:	613b      	str	r3, [r7, #16]

    yblockNb  = 0x30; /* 4 blocks of 8x8*/
 8009c20:	2330      	movs	r3, #48	@ 0x30
 8009c22:	60fb      	str	r3, [r7, #12]
 8009c24:	e014      	b.n	8009c50 <JPEG_SetColorCMYK+0x5c>
  }
  else if (hjpeg->Conf.ChromaSubsampling == JPEG_422_SUBSAMPLING)
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	689b      	ldr	r3, [r3, #8]
 8009c2a:	2b02      	cmp	r3, #2
 8009c2c:	d108      	bne.n	8009c40 <JPEG_SetColorCMYK+0x4c>
  {
    ySamplingH  = JPEG_CONFR4_HSF_1;   /* Hs = 2*/
 8009c2e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8009c32:	617b      	str	r3, [r7, #20]
    ySamplingV  = JPEG_CONFR4_VSF_0;   /* Vs = 1*/
 8009c34:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009c38:	613b      	str	r3, [r7, #16]

    yblockNb  = 0x10; /* 2 blocks of 8x8*/
 8009c3a:	2310      	movs	r3, #16
 8009c3c:	60fb      	str	r3, [r7, #12]
 8009c3e:	e007      	b.n	8009c50 <JPEG_SetColorCMYK+0x5c>
  }
  else /*JPEG_444_SUBSAMPLING and default*/
  {
    ySamplingH  = JPEG_CONFR4_HSF_0;   /* Hs = 1*/
 8009c40:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009c44:	617b      	str	r3, [r7, #20]
    ySamplingV  = JPEG_CONFR4_VSF_0;   /* Vs = 1*/
 8009c46:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009c4a:	613b      	str	r3, [r7, #16]

    yblockNb  = 0; /* 1 block of 8x8*/
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	60fb      	str	r3, [r7, #12]
  }

  /*Reset CONFR4 register*/
  hjpeg->Instance->CONFR4 =  0;
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	2200      	movs	r2, #0
 8009c56:	611a      	str	r2, [r3, #16]
  /*Set Horizental and Vertical  sampling factor , number of blocks , Quantization table and Huffman AC/DC tables for component 0*/
  hjpeg->Instance->CONFR4 |= (ySamplingH | ySamplingV | (yblockNb & JPEG_CONFR4_NB));
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	6919      	ldr	r1, [r3, #16]
 8009c5e:	697a      	ldr	r2, [r7, #20]
 8009c60:	693b      	ldr	r3, [r7, #16]
 8009c62:	431a      	orrs	r2, r3
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009c6a:	431a      	orrs	r2, r3
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	430a      	orrs	r2, r1
 8009c72:	611a      	str	r2, [r3, #16]

  /*Reset CONFR5 register*/
  hjpeg->Instance->CONFR5 =  0;
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	2200      	movs	r2, #0
 8009c7a:	615a      	str	r2, [r3, #20]
  /*Set Horizental and Vertical  sampling factor , number of blocks , Quantization table and Huffman AC/DC tables for component 1*/
  hjpeg->Instance->CONFR5 |= (JPEG_CONFR5_HSF_0 | JPEG_CONFR5_VSF_0);
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	695a      	ldr	r2, [r3, #20]
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	f442 5288 	orr.w	r2, r2, #4352	@ 0x1100
 8009c8a:	615a      	str	r2, [r3, #20]

  /*Reset CONFR6 register*/
  hjpeg->Instance->CONFR6 =  0;
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	2200      	movs	r2, #0
 8009c92:	619a      	str	r2, [r3, #24]
  /*Set Horizental and Vertical  sampling factor , number of blocks , Quantization table and Huffman AC/DC tables for component 2*/
  hjpeg->Instance->CONFR6 |= (JPEG_CONFR6_HSF_0 | JPEG_CONFR6_VSF_0);
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	699a      	ldr	r2, [r3, #24]
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	f442 5288 	orr.w	r2, r2, #4352	@ 0x1100
 8009ca2:	619a      	str	r2, [r3, #24]

  /*Reset CONFR7 register*/
  hjpeg->Instance->CONFR7 =  0;
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	2200      	movs	r2, #0
 8009caa:	61da      	str	r2, [r3, #28]
  /*Set Horizental and Vertical  sampling factor , number of blocks , Quantization table and Huffman AC/DC tables for component 3*/
  hjpeg->Instance->CONFR7 |= (JPEG_CONFR7_HSF_0 | JPEG_CONFR7_VSF_0);
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	69da      	ldr	r2, [r3, #28]
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	f442 5288 	orr.w	r2, r2, #4352	@ 0x1100
 8009cba:	61da      	str	r2, [r3, #28]
}
 8009cbc:	bf00      	nop
 8009cbe:	371c      	adds	r7, #28
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc6:	4770      	bx	lr

08009cc8 <JPEG_Init_Process>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_Init_Process(JPEG_HandleTypeDef *hjpeg)
{
 8009cc8:	b480      	push	{r7}
 8009cca:	b083      	sub	sp, #12
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	6078      	str	r0, [r7, #4]
  /*Reset pause*/
  hjpeg->Context &= (~(JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT));
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009cd4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	655a      	str	r2, [r3, #84]	@ 0x54

  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ce0:	f003 0303 	and.w	r3, r3, #3
 8009ce4:	2b02      	cmp	r3, #2
 8009ce6:	d108      	bne.n	8009cfa <JPEG_Init_Process+0x32>
  {
    /*Set JPEG Codec to Decoding mode */
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	685a      	ldr	r2, [r3, #4]
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	f042 0208 	orr.w	r2, r2, #8
 8009cf6:	605a      	str	r2, [r3, #4]
 8009cf8:	e007      	b.n	8009d0a <JPEG_Init_Process+0x42>
  }
  else /* JPEG_CONTEXT_ENCODE */
  {
    /*Set JPEG Codec to Encoding mode */
    hjpeg->Instance->CONFR1 &= ~JPEG_CONFR1_DE;
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	685a      	ldr	r2, [r3, #4]
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	f022 0208 	bic.w	r2, r2, #8
 8009d08:	605a      	str	r2, [r3, #4]
  }

  /*Stop JPEG processing */
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	681a      	ldr	r2, [r3, #0]
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	f022 0201 	bic.w	r2, r2, #1
 8009d18:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8009d28:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009d38:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009d48:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8009d58:	639a      	str	r2, [r3, #56]	@ 0x38

  /*Start Encoding/Decoding*/
  hjpeg->Instance->CONFR0 |=  JPEG_CONFR0_START;
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	681a      	ldr	r2, [r3, #0]
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	f042 0201 	orr.w	r2, r2, #1
 8009d68:	601a      	str	r2, [r3, #0]

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d6e:	f003 030c 	and.w	r3, r3, #12
 8009d72:	2b08      	cmp	r3, #8
 8009d74:	d108      	bne.n	8009d88 <JPEG_Init_Process+0xc0>
  {
    /*Enable IN/OUT, end of Conversation, and end of header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_IFT | JPEG_IT_IFNF | JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC | JPEG_IT_HPD);
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	f042 026e 	orr.w	r2, r2, #110	@ 0x6e
 8009d84:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  else
  {
    /* Nothing to do */
  }
}
 8009d86:	e00d      	b.n	8009da4 <JPEG_Init_Process+0xdc>
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d8c:	f003 030c 	and.w	r3, r3, #12
 8009d90:	2b0c      	cmp	r3, #12
 8009d92:	d107      	bne.n	8009da4 <JPEG_Init_Process+0xdc>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8009da2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8009da4:	bf00      	nop
 8009da6:	370c      	adds	r7, #12
 8009da8:	46bd      	mov	sp, r7
 8009daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dae:	4770      	bx	lr

08009db0 <JPEG_Process>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if the process has ends else JPEG_PROCESS_ONGOING
  */
static uint32_t JPEG_Process(JPEG_HandleTypeDef *hjpeg)
{
 8009db0:	b580      	push	{r7, lr}
 8009db2:	b084      	sub	sp, #16
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;

  /*End of header processing flag */
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009dbc:	f003 0303 	and.w	r3, r3, #3
 8009dc0:	2b02      	cmp	r3, #2
 8009dc2:	d125      	bne.n	8009e10 <JPEG_Process+0x60>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009dca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d01e      	beq.n	8009e10 <JPEG_Process+0x60>
    {
      /*Call Header parsing complete callback */
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	3304      	adds	r3, #4
 8009dd6:	4619      	mov	r1, r3
 8009dd8:	6878      	ldr	r0, [r7, #4]
 8009dda:	f7fe feb6 	bl	8008b4a <HAL_JPEG_GetInfo>
      /* Reset the ImageQuality */
      hjpeg->Conf.ImageQuality = 0;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	2200      	movs	r2, #0
 8009de2:	615a      	str	r2, [r3, #20]

      /*Call Info Ready callback */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->InfoReadyCallback(hjpeg, &hjpeg->Conf);
#else
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	3304      	adds	r3, #4
 8009de8:	4619      	mov	r1, r3
 8009dea:	6878      	ldr	r0, [r7, #4]
 8009dec:	f7ff f82e 	bl	8008e4c <HAL_JPEG_InfoReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009dfe:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Clear header processing done flag */
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009e0e:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  /*Input FIFO status handling*/
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL)
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e14:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d116      	bne.n	8009e4a <JPEG_Process+0x9a>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFTF) != 0UL)
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009e22:	f003 0302 	and.w	r3, r3, #2
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d004      	beq.n	8009e34 <JPEG_Process+0x84>
    {
      /*Input FIFO threshold flag */
      /*JPEG_FIFO_TH_SIZE words can be written in */
      JPEG_ReadInputData(hjpeg, JPEG_FIFO_TH_SIZE);
 8009e2a:	2108      	movs	r1, #8
 8009e2c:	6878      	ldr	r0, [r7, #4]
 8009e2e:	f000 f988 	bl	800a142 <JPEG_ReadInputData>
 8009e32:	e00a      	b.n	8009e4a <JPEG_Process+0x9a>
    }
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFNFF) != 0UL)
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009e3a:	f003 0304 	and.w	r3, r3, #4
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d003      	beq.n	8009e4a <JPEG_Process+0x9a>
    {
      /*Input FIFO Not Full flag */
      /*32-bit value can be written in */
      JPEG_ReadInputData(hjpeg, 1);
 8009e42:	2101      	movs	r1, #1
 8009e44:	6878      	ldr	r0, [r7, #4]
 8009e46:	f000 f97c 	bl	800a142 <JPEG_ReadInputData>
    }
  }


  /*Output FIFO flag handling*/
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e4e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d116      	bne.n	8009e84 <JPEG_Process+0xd4>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFTF) != 0UL)
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009e5c:	f003 0308 	and.w	r3, r3, #8
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d004      	beq.n	8009e6e <JPEG_Process+0xbe>
    {
      /*Output FIFO threshold flag */
      /*JPEG_FIFO_TH_SIZE words can be read out */
      JPEG_StoreOutputData(hjpeg, JPEG_FIFO_TH_SIZE);
 8009e64:	2108      	movs	r1, #8
 8009e66:	6878      	ldr	r0, [r7, #4]
 8009e68:	f000 f864 	bl	8009f34 <JPEG_StoreOutputData>
 8009e6c:	e00a      	b.n	8009e84 <JPEG_Process+0xd4>
    }
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009e74:	f003 0310 	and.w	r3, r3, #16
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d003      	beq.n	8009e84 <JPEG_Process+0xd4>
    {
      /*Output FIFO Not Empty flag */
      /*32-bit value can be read out */
      JPEG_StoreOutputData(hjpeg, 1);
 8009e7c:	2101      	movs	r1, #1
 8009e7e:	6878      	ldr	r0, [r7, #4]
 8009e80:	f000 f858 	bl	8009f34 <JPEG_StoreOutputData>
      /* Nothing to do */
    }
  }

  /*End of Conversion handling :i.e EOC flag is high and OFTF low and OFNEF low*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009e8a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009e8e:	2b20      	cmp	r3, #32
 8009e90:	d14b      	bne.n	8009f2a <JPEG_Process+0x17a>
  {
    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	681a      	ldr	r2, [r3, #0]
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	f022 0201 	bic.w	r2, r2, #1
 8009ea0:	601a      	str	r2, [r3, #0]

    if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ea6:	f003 030c 	and.w	r3, r3, #12
 8009eaa:	2b08      	cmp	r3, #8
 8009eac:	d107      	bne.n	8009ebe <JPEG_Process+0x10e>
    {
      /* Disable All Interrupts */
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8009ebc:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Clear all flags */
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8009ecc:	639a      	str	r2, [r3, #56]	@ 0x38

    /*Call End of conversion callback */
    if (hjpeg->JpegOutCount > 0UL)
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d00a      	beq.n	8009eec <JPEG_Process+0x13c>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	69d9      	ldr	r1, [r3, #28]
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ede:	461a      	mov	r2, r3
 8009ee0:	6878      	ldr	r0, [r7, #4]
 8009ee2:	f7f7 fc05 	bl	80016f0 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	2200      	movs	r2, #0
 8009eea:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /*Reset Context Operation*/
    tmpContext = hjpeg->Context;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ef0:	60fb      	str	r3, [r7, #12]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ef6:	f403 4282 	and.w	r2, r3, #16640	@ 0x4100
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	2200      	movs	r2, #0
 8009f02:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	2201      	movs	r2, #1
 8009f0a:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	f003 0303 	and.w	r3, r3, #3
 8009f14:	2b02      	cmp	r3, #2
 8009f16:	d103      	bne.n	8009f20 <JPEG_Process+0x170>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8009f18:	6878      	ldr	r0, [r7, #4]
 8009f1a:	f7fe ffa2 	bl	8008e62 <HAL_JPEG_DecodeCpltCallback>
 8009f1e:	e002      	b.n	8009f26 <JPEG_Process+0x176>
    else /* JPEG_CONTEXT_ENCODE */
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->EncodeCpltCallback(hjpeg);
#else
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 8009f20:	6878      	ldr	r0, [r7, #4]
 8009f22:	f7f7 fc01 	bl	8001728 <HAL_JPEG_EncodeCpltCallback>
#endif
    }

    return JPEG_PROCESS_DONE;
 8009f26:	2301      	movs	r3, #1
 8009f28:	e000      	b.n	8009f2c <JPEG_Process+0x17c>
  }


  return JPEG_PROCESS_ONGOING;
 8009f2a:	2300      	movs	r3, #0
}
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	3710      	adds	r7, #16
 8009f30:	46bd      	mov	sp, r7
 8009f32:	bd80      	pop	{r7, pc}

08009f34 <JPEG_StoreOutputData>:
  *         the configuration information for JPEG module
  * @param  nbOutputWords Number of output words (of 32 bits) ready from the JPEG peripheral
  * @retval None
  */
static void JPEG_StoreOutputData(JPEG_HandleTypeDef *hjpeg, uint32_t nbOutputWords)
{
 8009f34:	b580      	push	{r7, lr}
 8009f36:	b086      	sub	sp, #24
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	6078      	str	r0, [r7, #4]
 8009f3c:	6039      	str	r1, [r7, #0]
  uint32_t index;
  uint32_t nb_words;
  uint32_t nb_bytes;
  uint32_t dataword;

  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8009f46:	683b      	ldr	r3, [r7, #0]
 8009f48:	009b      	lsls	r3, r3, #2
 8009f4a:	440b      	add	r3, r1
 8009f4c:	429a      	cmp	r2, r3
 8009f4e:	d34b      	bcc.n	8009fe8 <JPEG_StoreOutputData+0xb4>
  {
    for (index = 0; index < nbOutputWords; index++)
 8009f50:	2300      	movs	r3, #0
 8009f52:	617b      	str	r3, [r7, #20]
 8009f54:	e031      	b.n	8009fba <JPEG_StoreOutputData+0x86>
    {
      /*Transfer 32 bits from the JPEG output FIFO*/
      dataword = hjpeg->Instance->DOR;
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009f5c:	60bb      	str	r3, [r7, #8]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	69da      	ldr	r2, [r3, #28]
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f66:	4413      	add	r3, r2
 8009f68:	68ba      	ldr	r2, [r7, #8]
 8009f6a:	b2d2      	uxtb	r2, r2
 8009f6c:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 8009f6e:	68bb      	ldr	r3, [r7, #8]
 8009f70:	0a19      	lsrs	r1, r3, #8
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	69da      	ldr	r2, [r3, #28]
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f7a:	3301      	adds	r3, #1
 8009f7c:	4413      	add	r3, r2
 8009f7e:	b2ca      	uxtb	r2, r1
 8009f80:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8009f82:	68bb      	ldr	r3, [r7, #8]
 8009f84:	0c19      	lsrs	r1, r3, #16
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	69da      	ldr	r2, [r3, #28]
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f8e:	3302      	adds	r3, #2
 8009f90:	4413      	add	r3, r2
 8009f92:	b2ca      	uxtb	r2, r1
 8009f94:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8009f96:	68bb      	ldr	r3, [r7, #8]
 8009f98:	0e19      	lsrs	r1, r3, #24
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	69da      	ldr	r2, [r3, #28]
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fa2:	3303      	adds	r3, #3
 8009fa4:	4413      	add	r3, r2
 8009fa6:	b2ca      	uxtb	r2, r1
 8009fa8:	701a      	strb	r2, [r3, #0]
      hjpeg->JpegOutCount += 4UL;
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fae:	1d1a      	adds	r2, r3, #4
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	625a      	str	r2, [r3, #36]	@ 0x24
    for (index = 0; index < nbOutputWords; index++)
 8009fb4:	697b      	ldr	r3, [r7, #20]
 8009fb6:	3301      	adds	r3, #1
 8009fb8:	617b      	str	r3, [r7, #20]
 8009fba:	697a      	ldr	r2, [r7, #20]
 8009fbc:	683b      	ldr	r3, [r7, #0]
 8009fbe:	429a      	cmp	r2, r3
 8009fc0:	d3c9      	bcc.n	8009f56 <JPEG_StoreOutputData+0x22>
    }
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fca:	429a      	cmp	r2, r3
 8009fcc:	f040 80b5 	bne.w	800a13a <JPEG_StoreOutputData+0x206>
    {
      /*Output Buffer is full, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	69d9      	ldr	r1, [r3, #28]
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fd8:	461a      	mov	r2, r3
 8009fda:	6878      	ldr	r0, [r7, #4]
 8009fdc:	f7f7 fb88 	bl	80016f0 <HAL_JPEG_DataReadyCallback>
#endif /*USE_HAL_JPEG_REGISTER_CALLBACKS*/
      hjpeg->JpegOutCount = 0;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	2200      	movs	r2, #0
 8009fe4:	625a      	str	r2, [r3, #36]	@ 0x24
  }
  else
  {
    /* Nothing to do */
  }
}
 8009fe6:	e0a8      	b.n	800a13a <JPEG_StoreOutputData+0x206>
  else if (hjpeg->OutDataLength > hjpeg->JpegOutCount)
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ff0:	429a      	cmp	r2, r3
 8009ff2:	f240 80a2 	bls.w	800a13a <JPEG_StoreOutputData+0x206>
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ffe:	1ad3      	subs	r3, r2, r3
 800a000:	089b      	lsrs	r3, r3, #2
 800a002:	613b      	str	r3, [r7, #16]
    for (index = 0; index < nb_words; index++)
 800a004:	2300      	movs	r3, #0
 800a006:	617b      	str	r3, [r7, #20]
 800a008:	e031      	b.n	800a06e <JPEG_StoreOutputData+0x13a>
      dataword = hjpeg->Instance->DOR;
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a010:	60bb      	str	r3, [r7, #8]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	69da      	ldr	r2, [r3, #28]
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a01a:	4413      	add	r3, r2
 800a01c:	68ba      	ldr	r2, [r7, #8]
 800a01e:	b2d2      	uxtb	r2, r2
 800a020:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 800a022:	68bb      	ldr	r3, [r7, #8]
 800a024:	0a19      	lsrs	r1, r3, #8
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	69da      	ldr	r2, [r3, #28]
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a02e:	3301      	adds	r3, #1
 800a030:	4413      	add	r3, r2
 800a032:	b2ca      	uxtb	r2, r1
 800a034:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800a036:	68bb      	ldr	r3, [r7, #8]
 800a038:	0c19      	lsrs	r1, r3, #16
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	69da      	ldr	r2, [r3, #28]
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a042:	3302      	adds	r3, #2
 800a044:	4413      	add	r3, r2
 800a046:	b2ca      	uxtb	r2, r1
 800a048:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800a04a:	68bb      	ldr	r3, [r7, #8]
 800a04c:	0e19      	lsrs	r1, r3, #24
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	69da      	ldr	r2, [r3, #28]
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a056:	3303      	adds	r3, #3
 800a058:	4413      	add	r3, r2
 800a05a:	b2ca      	uxtb	r2, r1
 800a05c:	701a      	strb	r2, [r3, #0]
      hjpeg->JpegOutCount += 4UL;
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a062:	1d1a      	adds	r2, r3, #4
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	625a      	str	r2, [r3, #36]	@ 0x24
    for (index = 0; index < nb_words; index++)
 800a068:	697b      	ldr	r3, [r7, #20]
 800a06a:	3301      	adds	r3, #1
 800a06c:	617b      	str	r3, [r7, #20]
 800a06e:	697a      	ldr	r2, [r7, #20]
 800a070:	693b      	ldr	r3, [r7, #16]
 800a072:	429a      	cmp	r2, r3
 800a074:	d3c9      	bcc.n	800a00a <JPEG_StoreOutputData+0xd6>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a07e:	429a      	cmp	r2, r3
 800a080:	d10b      	bne.n	800a09a <JPEG_StoreOutputData+0x166>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	69d9      	ldr	r1, [r3, #28]
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a08a:	461a      	mov	r2, r3
 800a08c:	6878      	ldr	r0, [r7, #4]
 800a08e:	f7f7 fb2f 	bl	80016f0 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	2200      	movs	r2, #0
 800a096:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800a098:	e04f      	b.n	800a13a <JPEG_StoreOutputData+0x206>
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0a2:	1ad3      	subs	r3, r2, r3
 800a0a4:	60fb      	str	r3, [r7, #12]
      dataword = hjpeg->Instance->DOR;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a0ac:	60bb      	str	r3, [r7, #8]
      for (index = 0; index < nb_bytes; index++)
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	617b      	str	r3, [r7, #20]
 800a0b2:	e015      	b.n	800a0e0 <JPEG_StoreOutputData+0x1ac>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 800a0b4:	697b      	ldr	r3, [r7, #20]
 800a0b6:	f003 0303 	and.w	r3, r3, #3
 800a0ba:	00db      	lsls	r3, r3, #3
 800a0bc:	68ba      	ldr	r2, [r7, #8]
 800a0be:	fa22 f103 	lsr.w	r1, r2, r3
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	69da      	ldr	r2, [r3, #28]
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0ca:	4413      	add	r3, r2
 800a0cc:	b2ca      	uxtb	r2, r1
 800a0ce:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount++;
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0d4:	1c5a      	adds	r2, r3, #1
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	625a      	str	r2, [r3, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 800a0da:	697b      	ldr	r3, [r7, #20]
 800a0dc:	3301      	adds	r3, #1
 800a0de:	617b      	str	r3, [r7, #20]
 800a0e0:	697a      	ldr	r2, [r7, #20]
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	429a      	cmp	r2, r3
 800a0e6:	d3e5      	bcc.n	800a0b4 <JPEG_StoreOutputData+0x180>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	69d9      	ldr	r1, [r3, #28]
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0f0:	461a      	mov	r2, r3
 800a0f2:	6878      	ldr	r0, [r7, #4]
 800a0f4:	f7f7 fafc 	bl	80016f0 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	2200      	movs	r2, #0
 800a0fc:	625a      	str	r2, [r3, #36]	@ 0x24
      nb_bytes = 4UL - nb_bytes;
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	f1c3 0304 	rsb	r3, r3, #4
 800a104:	60fb      	str	r3, [r7, #12]
      for (index = nb_bytes; index < 4UL; index++)
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	617b      	str	r3, [r7, #20]
 800a10a:	e013      	b.n	800a134 <JPEG_StoreOutputData+0x200>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 800a10c:	697b      	ldr	r3, [r7, #20]
 800a10e:	00db      	lsls	r3, r3, #3
 800a110:	68ba      	ldr	r2, [r7, #8]
 800a112:	fa22 f103 	lsr.w	r1, r2, r3
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	69da      	ldr	r2, [r3, #28]
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a11e:	4413      	add	r3, r2
 800a120:	b2ca      	uxtb	r2, r1
 800a122:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount++;
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a128:	1c5a      	adds	r2, r3, #1
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	625a      	str	r2, [r3, #36]	@ 0x24
      for (index = nb_bytes; index < 4UL; index++)
 800a12e:	697b      	ldr	r3, [r7, #20]
 800a130:	3301      	adds	r3, #1
 800a132:	617b      	str	r3, [r7, #20]
 800a134:	697b      	ldr	r3, [r7, #20]
 800a136:	2b03      	cmp	r3, #3
 800a138:	d9e8      	bls.n	800a10c <JPEG_StoreOutputData+0x1d8>
}
 800a13a:	bf00      	nop
 800a13c:	3718      	adds	r7, #24
 800a13e:	46bd      	mov	sp, r7
 800a140:	bd80      	pop	{r7, pc}

0800a142 <JPEG_ReadInputData>:
  *         the configuration information for JPEG module
  * @param  nbRequestWords Number of input words (of 32 bits) that the JPE peripheral request
  * @retval None
  */
static void JPEG_ReadInputData(JPEG_HandleTypeDef *hjpeg, uint32_t nbRequestWords)
{
 800a142:	b580      	push	{r7, lr}
 800a144:	b088      	sub	sp, #32
 800a146:	af00      	add	r7, sp, #0
 800a148:	6078      	str	r0, [r7, #4]
 800a14a:	6039      	str	r1, [r7, #0]
  uint32_t nb_bytes = 0;
 800a14c:	2300      	movs	r3, #0
 800a14e:	61fb      	str	r3, [r7, #28]
  uint32_t nb_words;
  uint32_t index;
  uint32_t dataword;
  uint32_t input_count;

  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a154:	2b00      	cmp	r3, #0
 800a156:	d002      	beq.n	800a15e <JPEG_ReadInputData+0x1c>
 800a158:	683b      	ldr	r3, [r7, #0]
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d104      	bne.n	800a168 <JPEG_ReadInputData+0x26>
  {
    /* No more Input data : nothing to do*/
    (void) HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_INPUT);
 800a15e:	2101      	movs	r1, #1
 800a160:	6878      	ldr	r0, [r7, #4]
 800a162:	f7fe fdf7 	bl	8008d54 <HAL_JPEG_Pause>
 800a166:	e028      	b.n	800a1ba <JPEG_ReadInputData+0x78>
  }
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	6a1b      	ldr	r3, [r3, #32]
 800a170:	429a      	cmp	r2, r3
 800a172:	d906      	bls.n	800a182 <JPEG_ReadInputData+0x40>
  {
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	6a1b      	ldr	r3, [r3, #32]
 800a17c:	1ad3      	subs	r3, r2, r3
 800a17e:	61fb      	str	r3, [r7, #28]
 800a180:	e01b      	b.n	800a1ba <JPEG_ReadInputData+0x78>
  }
  else if (hjpeg->InDataLength == hjpeg->JpegInCount)
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	6a1b      	ldr	r3, [r3, #32]
 800a18a:	429a      	cmp	r2, r3
 800a18c:	d115      	bne.n	800a1ba <JPEG_ReadInputData+0x78>
  {
    /*Call HAL_JPEG_GetDataCallback to get new data */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->GetDataCallback(hjpeg, hjpeg->JpegInCount);
#else
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	6a1b      	ldr	r3, [r3, #32]
 800a192:	4619      	mov	r1, r3
 800a194:	6878      	ldr	r0, [r7, #4]
 800a196:	f7f7 fa79 	bl	800168c <HAL_JPEG_GetDataCallback>
#endif /*USE_HAL_JPEG_REGISTER_CALLBACKS*/

    if (hjpeg->InDataLength > 4UL)
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a19e:	2b04      	cmp	r3, #4
 800a1a0:	d905      	bls.n	800a1ae <JPEG_ReadInputData+0x6c>
    {
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1a6:	f023 0203 	bic.w	r2, r3, #3
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	629a      	str	r2, [r3, #40]	@ 0x28
    }
    hjpeg->JpegInCount = 0;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	2200      	movs	r2, #0
 800a1b2:	621a      	str	r2, [r3, #32]
    nb_bytes = hjpeg->InDataLength;
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1b8:	61fb      	str	r3, [r7, #28]
  }
  else
  {
    /* Nothing to do */
  }
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a1be:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	f040 809f 	bne.w	800a306 <JPEG_ReadInputData+0x1c4>
 800a1c8:	69fb      	ldr	r3, [r7, #28]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	f000 809b 	beq.w	800a306 <JPEG_ReadInputData+0x1c4>
  {
    nb_words = nb_bytes / 4UL;
 800a1d0:	69fb      	ldr	r3, [r7, #28]
 800a1d2:	089b      	lsrs	r3, r3, #2
 800a1d4:	613b      	str	r3, [r7, #16]
    if (nb_words >= nbRequestWords)
 800a1d6:	693a      	ldr	r2, [r7, #16]
 800a1d8:	683b      	ldr	r3, [r7, #0]
 800a1da:	429a      	cmp	r2, r3
 800a1dc:	d335      	bcc.n	800a24a <JPEG_ReadInputData+0x108>
    {
      for (index = 0; index < nbRequestWords; index++)
 800a1de:	2300      	movs	r3, #0
 800a1e0:	61bb      	str	r3, [r7, #24]
 800a1e2:	e02d      	b.n	800a240 <JPEG_ReadInputData+0xfe>
      {
        input_count = hjpeg->JpegInCount;
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	6a1b      	ldr	r3, [r3, #32]
 800a1e8:	60fb      	str	r3, [r7, #12]
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	699a      	ldr	r2, [r3, #24]
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	4413      	add	r3, r2
 800a1f2:	781b      	ldrb	r3, [r3, #0]
 800a1f4:	4619      	mov	r1, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	699a      	ldr	r2, [r3, #24]
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	3301      	adds	r3, #1
 800a1fe:	4413      	add	r3, r2
 800a200:	781b      	ldrb	r3, [r3, #0]
 800a202:	021b      	lsls	r3, r3, #8
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800a204:	ea41 0203 	orr.w	r2, r1, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	6999      	ldr	r1, [r3, #24]
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	3302      	adds	r3, #2
 800a210:	440b      	add	r3, r1
 800a212:	781b      	ldrb	r3, [r3, #0]
 800a214:	041b      	lsls	r3, r3, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800a216:	ea42 0103 	orr.w	r1, r2, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	699a      	ldr	r2, [r3, #24]
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	3303      	adds	r3, #3
 800a222:	4413      	add	r3, r2
 800a224:	781b      	ldrb	r3, [r3, #0]
 800a226:	061a      	lsls	r2, r3, #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800a22c:	430a      	orrs	r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800a22e:	641a      	str	r2, [r3, #64]	@ 0x40

        hjpeg->JpegInCount += 4UL;
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	6a1b      	ldr	r3, [r3, #32]
 800a234:	1d1a      	adds	r2, r3, #4
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	621a      	str	r2, [r3, #32]
      for (index = 0; index < nbRequestWords; index++)
 800a23a:	69bb      	ldr	r3, [r7, #24]
 800a23c:	3301      	adds	r3, #1
 800a23e:	61bb      	str	r3, [r7, #24]
 800a240:	69ba      	ldr	r2, [r7, #24]
 800a242:	683b      	ldr	r3, [r7, #0]
 800a244:	429a      	cmp	r2, r3
 800a246:	d3cd      	bcc.n	800a1e4 <JPEG_ReadInputData+0xa2>
        }
        hjpeg->Instance->DIR = dataword;
      }
    }
  }
}
 800a248:	e05d      	b.n	800a306 <JPEG_ReadInputData+0x1c4>
      if (nb_words > 0UL)
 800a24a:	693b      	ldr	r3, [r7, #16]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d035      	beq.n	800a2bc <JPEG_ReadInputData+0x17a>
        for (index = 0; index < nb_words; index++)
 800a250:	2300      	movs	r3, #0
 800a252:	61bb      	str	r3, [r7, #24]
 800a254:	e02d      	b.n	800a2b2 <JPEG_ReadInputData+0x170>
          input_count = hjpeg->JpegInCount;
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	6a1b      	ldr	r3, [r3, #32]
 800a25a:	60fb      	str	r3, [r7, #12]
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	699a      	ldr	r2, [r3, #24]
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	4413      	add	r3, r2
 800a264:	781b      	ldrb	r3, [r3, #0]
 800a266:	4619      	mov	r1, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	699a      	ldr	r2, [r3, #24]
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	3301      	adds	r3, #1
 800a270:	4413      	add	r3, r2
 800a272:	781b      	ldrb	r3, [r3, #0]
 800a274:	021b      	lsls	r3, r3, #8
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800a276:	ea41 0203 	orr.w	r2, r1, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	6999      	ldr	r1, [r3, #24]
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	3302      	adds	r3, #2
 800a282:	440b      	add	r3, r1
 800a284:	781b      	ldrb	r3, [r3, #0]
 800a286:	041b      	lsls	r3, r3, #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800a288:	ea42 0103 	orr.w	r1, r2, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	699a      	ldr	r2, [r3, #24]
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	3303      	adds	r3, #3
 800a294:	4413      	add	r3, r2
 800a296:	781b      	ldrb	r3, [r3, #0]
 800a298:	061a      	lsls	r2, r3, #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	681b      	ldr	r3, [r3, #0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800a29e:	430a      	orrs	r2, r1
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800a2a0:	641a      	str	r2, [r3, #64]	@ 0x40
          hjpeg->JpegInCount += 4UL;
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	6a1b      	ldr	r3, [r3, #32]
 800a2a6:	1d1a      	adds	r2, r3, #4
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	621a      	str	r2, [r3, #32]
        for (index = 0; index < nb_words; index++)
 800a2ac:	69bb      	ldr	r3, [r7, #24]
 800a2ae:	3301      	adds	r3, #1
 800a2b0:	61bb      	str	r3, [r7, #24]
 800a2b2:	69ba      	ldr	r2, [r7, #24]
 800a2b4:	693b      	ldr	r3, [r7, #16]
 800a2b6:	429a      	cmp	r2, r3
 800a2b8:	d3cd      	bcc.n	800a256 <JPEG_ReadInputData+0x114>
}
 800a2ba:	e024      	b.n	800a306 <JPEG_ReadInputData+0x1c4>
        dataword = 0;
 800a2bc:	2300      	movs	r3, #0
 800a2be:	617b      	str	r3, [r7, #20]
        for (index = 0; index < nb_bytes; index++)
 800a2c0:	2300      	movs	r3, #0
 800a2c2:	61bb      	str	r3, [r7, #24]
 800a2c4:	e017      	b.n	800a2f6 <JPEG_ReadInputData+0x1b4>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	699a      	ldr	r2, [r3, #24]
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	6a1b      	ldr	r3, [r3, #32]
 800a2ce:	4413      	add	r3, r2
 800a2d0:	781b      	ldrb	r3, [r3, #0]
 800a2d2:	461a      	mov	r2, r3
 800a2d4:	69bb      	ldr	r3, [r7, #24]
 800a2d6:	f003 0303 	and.w	r3, r3, #3
 800a2da:	00db      	lsls	r3, r3, #3
 800a2dc:	fa02 f303 	lsl.w	r3, r2, r3
 800a2e0:	697a      	ldr	r2, [r7, #20]
 800a2e2:	4313      	orrs	r3, r2
 800a2e4:	617b      	str	r3, [r7, #20]
          hjpeg->JpegInCount++;
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	6a1b      	ldr	r3, [r3, #32]
 800a2ea:	1c5a      	adds	r2, r3, #1
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	621a      	str	r2, [r3, #32]
        for (index = 0; index < nb_bytes; index++)
 800a2f0:	69bb      	ldr	r3, [r7, #24]
 800a2f2:	3301      	adds	r3, #1
 800a2f4:	61bb      	str	r3, [r7, #24]
 800a2f6:	69ba      	ldr	r2, [r7, #24]
 800a2f8:	69fb      	ldr	r3, [r7, #28]
 800a2fa:	429a      	cmp	r2, r3
 800a2fc:	d3e3      	bcc.n	800a2c6 <JPEG_ReadInputData+0x184>
        hjpeg->Instance->DIR = dataword;
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	697a      	ldr	r2, [r7, #20]
 800a304:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800a306:	bf00      	nop
 800a308:	3720      	adds	r7, #32
 800a30a:	46bd      	mov	sp, r7
 800a30c:	bd80      	pop	{r7, pc}
	...

0800a310 <JPEG_DMA_StartProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if process ends else JPEG_PROCESS_ONGOING
  */
static HAL_StatusTypeDef JPEG_DMA_StartProcess(JPEG_HandleTypeDef *hjpeg)
{
 800a310:	b590      	push	{r4, r7, lr}
 800a312:	b087      	sub	sp, #28
 800a314:	af02      	add	r7, sp, #8
 800a316:	6078      	str	r0, [r7, #4]
  /*if the MDMA In is triggred with JPEG In FIFO Threshold flag
      then MDMA In buffer size is 32 bytes
    else (MDMA In is triggred with JPEG In FIFO not full flag)
      then MDMA In buffer size is 4 bytes
    */
  inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a31c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a31e:	60fb      	str	r3, [r7, #12]
  /*if the MDMA Out is triggred with JPEG Out FIFO Threshold flag
      then MDMA out buffer size is 32 bytes
    else (MDMA Out is triggred with JPEG Out FIFO not empty flag)
      then MDMA buffer size is 4 bytes
    */
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a324:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a326:	60bb      	str	r3, [r7, #8]

  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a32c:	68fa      	ldr	r2, [r7, #12]
 800a32e:	429a      	cmp	r2, r3
 800a330:	d804      	bhi.n	800a33c <JPEG_DMA_StartProcess+0x2c>
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a336:	68ba      	ldr	r2, [r7, #8]
 800a338:	429a      	cmp	r2, r3
 800a33a:	d901      	bls.n	800a340 <JPEG_DMA_StartProcess+0x30>
  {
    return HAL_ERROR;
 800a33c:	2301      	movs	r3, #1
 800a33e:	e074      	b.n	800a42a <JPEG_DMA_StartProcess+0x11a>
  }
  /* Set the JPEG MDMA In transfer complete callback */
  hjpeg->hdmain->XferCpltCallback = JPEG_MDMAInCpltCallback;
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a344:	4a3b      	ldr	r2, [pc, #236]	@ (800a434 <JPEG_DMA_StartProcess+0x124>)
 800a346:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Set the MDMA In error callback */
  hjpeg->hdmain->XferErrorCallback = JPEG_MDMAErrorCallback;
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a34c:	4a3a      	ldr	r2, [pc, #232]	@ (800a438 <JPEG_DMA_StartProcess+0x128>)
 800a34e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the JPEG MDMA Out transfer complete callback */
  hjpeg->hdmaout->XferCpltCallback = JPEG_MDMAOutCpltCallback;
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a354:	4a39      	ldr	r2, [pc, #228]	@ (800a43c <JPEG_DMA_StartProcess+0x12c>)
 800a356:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Set the MDMA In error callback */
  hjpeg->hdmaout->XferErrorCallback = JPEG_MDMAErrorCallback;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a35c:	4a36      	ldr	r2, [pc, #216]	@ (800a438 <JPEG_DMA_StartProcess+0x128>)
 800a35e:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Set the MDMA Out Abort callback */
  hjpeg->hdmaout->XferAbortCallback = JPEG_MDMAOutAbortCallback;
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a364:	4a36      	ldr	r2, [pc, #216]	@ (800a440 <JPEG_DMA_StartProcess+0x130>)
 800a366:	659a      	str	r2, [r3, #88]	@ 0x58

  if ((inXfrSize == 0UL) || (outXfrSize == 0UL))
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d002      	beq.n	800a374 <JPEG_DMA_StartProcess+0x64>
 800a36e:	68bb      	ldr	r3, [r7, #8]
 800a370:	2b00      	cmp	r3, #0
 800a372:	d107      	bne.n	800a384 <JPEG_DMA_StartProcess+0x74>
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a378:	f043 0204 	orr.w	r2, r3, #4
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	651a      	str	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800a380:	2301      	movs	r3, #1
 800a382:	e052      	b.n	800a42a <JPEG_DMA_StartProcess+0x11a>
  }
  /*MDMA transfer size (BNDTR) must be a multiple of MDMA buffer size (TLEN)*/
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a38c:	68f9      	ldr	r1, [r7, #12]
 800a38e:	fbb3 f1f1 	udiv	r1, r3, r1
 800a392:	68f8      	ldr	r0, [r7, #12]
 800a394:	fb00 f101 	mul.w	r1, r0, r1
 800a398:	1a5b      	subs	r3, r3, r1
 800a39a:	1ad2      	subs	r2, r2, r3
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	629a      	str	r2, [r3, #40]	@ 0x28

  /*MDMA transfer size (BNDTR) must be a multiple of MDMA buffer size (TLEN)*/
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3a8:	68b9      	ldr	r1, [r7, #8]
 800a3aa:	fbb3 f1f1 	udiv	r1, r3, r1
 800a3ae:	68b8      	ldr	r0, [r7, #8]
 800a3b0:	fb00 f101 	mul.w	r1, r0, r1
 800a3b4:	1a5b      	subs	r3, r3, r1
 800a3b6:	1ad2      	subs	r2, r2, r3
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	62da      	str	r2, [r3, #44]	@ 0x2c


  /* Start MDMA FIFO Out transfer */
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	3344      	adds	r3, #68	@ 0x44
 800a3c6:	4619      	mov	r1, r3
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	69db      	ldr	r3, [r3, #28]
 800a3cc:	461c      	mov	r4, r3
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3d2:	2201      	movs	r2, #1
 800a3d4:	9200      	str	r2, [sp, #0]
 800a3d6:	4622      	mov	r2, r4
 800a3d8:	f000 fbe2 	bl	800aba0 <HAL_MDMA_Start_IT>
 800a3dc:	4603      	mov	r3, r0
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d007      	beq.n	800a3f2 <JPEG_DMA_StartProcess+0xe2>
                        hjpeg->OutDataLength, 1) != HAL_OK)
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a3e6:	f043 0204 	orr.w	r2, r3, #4
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	651a      	str	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800a3ee:	2301      	movs	r3, #1
 800a3f0:	e01b      	b.n	800a42a <JPEG_DMA_StartProcess+0x11a>
  }
  /* Start DMA FIFO In transfer */
  if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	699b      	ldr	r3, [r3, #24]
 800a3fa:	4619      	mov	r1, r3
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	3340      	adds	r3, #64	@ 0x40
 800a402:	461c      	mov	r4, r3
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a408:	2201      	movs	r2, #1
 800a40a:	9200      	str	r2, [sp, #0]
 800a40c:	4622      	mov	r2, r4
 800a40e:	f000 fbc7 	bl	800aba0 <HAL_MDMA_Start_IT>
 800a412:	4603      	mov	r3, r0
 800a414:	2b00      	cmp	r3, #0
 800a416:	d007      	beq.n	800a428 <JPEG_DMA_StartProcess+0x118>
                        hjpeg->InDataLength, 1) != HAL_OK)
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a41c:	f043 0204 	orr.w	r2, r3, #4
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	651a      	str	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800a424:	2301      	movs	r3, #1
 800a426:	e000      	b.n	800a42a <JPEG_DMA_StartProcess+0x11a>
  }

  return HAL_OK;
 800a428:	2300      	movs	r3, #0
}
 800a42a:	4618      	mov	r0, r3
 800a42c:	3714      	adds	r7, #20
 800a42e:	46bd      	mov	sp, r7
 800a430:	bd90      	pop	{r4, r7, pc}
 800a432:	bf00      	nop
 800a434:	0800a743 	.word	0x0800a743
 800a438:	0800a931 	.word	0x0800a931
 800a43c:	0800a86f 	.word	0x0800a86f
 800a440:	0800a981 	.word	0x0800a981

0800a444 <JPEG_DMA_ContinueProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if process ends else JPEG_PROCESS_ONGOING
  */
static void JPEG_DMA_ContinueProcess(JPEG_HandleTypeDef *hjpeg)
{
 800a444:	b580      	push	{r7, lr}
 800a446:	b082      	sub	sp, #8
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]
  /*End of header processing flag rises*/
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a450:	f003 0303 	and.w	r3, r3, #3
 800a454:	2b02      	cmp	r3, #2
 800a456:	d125      	bne.n	800a4a4 <JPEG_DMA_ContinueProcess+0x60>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a45e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a462:	2b00      	cmp	r3, #0
 800a464:	d01e      	beq.n	800a4a4 <JPEG_DMA_ContinueProcess+0x60>
    {
      /*Call Header parsing complete callback */
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	3304      	adds	r3, #4
 800a46a:	4619      	mov	r1, r3
 800a46c:	6878      	ldr	r0, [r7, #4]
 800a46e:	f7fe fb6c 	bl	8008b4a <HAL_JPEG_GetInfo>

      /* Reset the ImageQuality */
      hjpeg->Conf.ImageQuality = 0;
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	2200      	movs	r2, #0
 800a476:	615a      	str	r2, [r3, #20]

      /*Call Info Ready callback */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->InfoReadyCallback(hjpeg, &hjpeg->Conf);
#else
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	3304      	adds	r3, #4
 800a47c:	4619      	mov	r1, r3
 800a47e:	6878      	ldr	r0, [r7, #4]
 800a480:	f7fe fce4 	bl	8008e4c <HAL_JPEG_InfoReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a492:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Clear header processing done flag */
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a4a2:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  /*End of Conversion handling*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) != 0UL)
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a4aa:	f003 0320 	and.w	r3, r3, #32
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d039      	beq.n	800a526 <JPEG_DMA_ContinueProcess+0xe2>
  {

    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a4b6:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	655a      	str	r2, [r3, #84]	@ 0x54

    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	681a      	ldr	r2, [r3, #0]
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	f022 0201 	bic.w	r2, r2, #1
 800a4cc:	601a      	str	r2, [r3, #0]

    __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800a4dc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Clear all flags */
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800a4ec:	639a      	str	r2, [r3, #56]	@ 0x38

    if (hjpeg->hdmain->State == HAL_MDMA_STATE_BUSY)
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a4f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a4f6:	b2db      	uxtb	r3, r3
 800a4f8:	2b02      	cmp	r3, #2
 800a4fa:	d104      	bne.n	800a506 <JPEG_DMA_ContinueProcess+0xc2>
    {
      /* Stop the MDMA In Xfer*/
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmain);
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a500:	4618      	mov	r0, r3
 800a502:	f000 fbce 	bl	800aca2 <HAL_MDMA_Abort_IT>
    }

    if (hjpeg->hdmaout->State == HAL_MDMA_STATE_BUSY)
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a50a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a50e:	b2db      	uxtb	r3, r3
 800a510:	2b02      	cmp	r3, #2
 800a512:	d105      	bne.n	800a520 <JPEG_DMA_ContinueProcess+0xdc>
    {
      /* Stop the MDMA out Xfer*/
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmaout);
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a518:	4618      	mov	r0, r3
 800a51a:	f000 fbc2 	bl	800aca2 <HAL_MDMA_Abort_IT>
      JPEG_DMA_EndProcess(hjpeg);
    }
  }


}
 800a51e:	e002      	b.n	800a526 <JPEG_DMA_ContinueProcess+0xe2>
      JPEG_DMA_EndProcess(hjpeg);
 800a520:	6878      	ldr	r0, [r7, #4]
 800a522:	f000 f804 	bl	800a52e <JPEG_DMA_EndProcess>
}
 800a526:	bf00      	nop
 800a528:	3708      	adds	r7, #8
 800a52a:	46bd      	mov	sp, r7
 800a52c:	bd80      	pop	{r7, pc}

0800a52e <JPEG_DMA_EndProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE
  */
static void JPEG_DMA_EndProcess(JPEG_HandleTypeDef *hjpeg)
{
 800a52e:	b580      	push	{r7, lr}
 800a530:	b084      	sub	sp, #16
 800a532:	af00      	add	r7, sp, #0
 800a534:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;
  hjpeg->JpegOutCount = hjpeg->OutDataLength - (hjpeg->hdmaout->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	695b      	ldr	r3, [r3, #20]
 800a542:	f3c3 0310 	ubfx	r3, r3, #0, #17
 800a546:	1ad2      	subs	r2, r2, r3
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	625a      	str	r2, [r3, #36]	@ 0x24

  /*if Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
  if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a554:	429a      	cmp	r2, r3
 800a556:	d10a      	bne.n	800a56e <JPEG_DMA_EndProcess+0x40>
  {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
    HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	69d9      	ldr	r1, [r3, #28]
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a560:	461a      	mov	r2, r3
 800a562:	6878      	ldr	r0, [r7, #4]
 800a564:	f7f7 f8c4 	bl	80016f0 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

    hjpeg->JpegOutCount = 0;
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	2200      	movs	r2, #0
 800a56c:	625a      	str	r2, [r3, #36]	@ 0x24
  }

  /*Check if remaining data in the output FIFO*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL)
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a574:	f003 0310 	and.w	r3, r3, #16
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d134      	bne.n	800a5e6 <JPEG_DMA_EndProcess+0xb8>
  {
    if (hjpeg->JpegOutCount > 0UL)
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a580:	2b00      	cmp	r3, #0
 800a582:	d00a      	beq.n	800a59a <JPEG_DMA_EndProcess+0x6c>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	69d9      	ldr	r1, [r3, #28]
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a58c:	461a      	mov	r2, r3
 800a58e:	6878      	ldr	r0, [r7, #4]
 800a590:	f7f7 f8ae 	bl	80016f0 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	2200      	movs	r2, #0
 800a598:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	681a      	ldr	r2, [r3, #0]
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	f022 0201 	bic.w	r2, r2, #1
 800a5a8:	601a      	str	r2, [r3, #0]

    tmpContext = hjpeg->Context;
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a5ae:	60fb      	str	r3, [r7, #12]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a5b4:	f403 4282 	and.w	r2, r3, #16640	@ 0x4100
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	2200      	movs	r2, #0
 800a5c0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	2201      	movs	r2, #1
 800a5c8:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	f003 0303 	and.w	r3, r3, #3
 800a5d2:	2b02      	cmp	r3, #2
 800a5d4:	d103      	bne.n	800a5de <JPEG_DMA_EndProcess+0xb0>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800a5d6:	6878      	ldr	r0, [r7, #4]
 800a5d8:	f7fe fc43 	bl	8008e62 <HAL_JPEG_DecodeCpltCallback>
  else
  {
    /* Nothing to do */
  }

}
 800a5dc:	e00c      	b.n	800a5f8 <JPEG_DMA_EndProcess+0xca>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800a5de:	6878      	ldr	r0, [r7, #4]
 800a5e0:	f7f7 f8a2 	bl	8001728 <HAL_JPEG_EncodeCpltCallback>
}
 800a5e4:	e008      	b.n	800a5f8 <JPEG_DMA_EndProcess+0xca>
  else if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a5ea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d102      	bne.n	800a5f8 <JPEG_DMA_EndProcess+0xca>
    JPEG_DMA_PollResidualData(hjpeg);
 800a5f2:	6878      	ldr	r0, [r7, #4]
 800a5f4:	f000 f804 	bl	800a600 <JPEG_DMA_PollResidualData>
}
 800a5f8:	bf00      	nop
 800a5fa:	3710      	adds	r7, #16
 800a5fc:	46bd      	mov	sp, r7
 800a5fe:	bd80      	pop	{r7, pc}

0800a600 <JPEG_DMA_PollResidualData>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None.
  */
static void JPEG_DMA_PollResidualData(JPEG_HandleTypeDef *hjpeg)
{
 800a600:	b580      	push	{r7, lr}
 800a602:	b086      	sub	sp, #24
 800a604:	af00      	add	r7, sp, #0
 800a606:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;
  uint32_t count;
  uint32_t dataOut;

  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 800a608:	2310      	movs	r3, #16
 800a60a:	617b      	str	r3, [r7, #20]
 800a60c:	e04f      	b.n	800a6ae <JPEG_DMA_PollResidualData+0xae>
  {
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a612:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a616:	2b00      	cmp	r3, #0
 800a618:	d146      	bne.n	800a6a8 <JPEG_DMA_PollResidualData+0xa8>
    {
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a620:	f003 0310 	and.w	r3, r3, #16
 800a624:	2b00      	cmp	r3, #0
 800a626:	d03f      	beq.n	800a6a8 <JPEG_DMA_PollResidualData+0xa8>
      {
        dataOut = hjpeg->Instance->DOR;
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a62e:	60fb      	str	r3, [r7, #12]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataOut & 0x000000FFUL);
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	69da      	ldr	r2, [r3, #28]
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a638:	4413      	add	r3, r2
 800a63a:	68fa      	ldr	r2, [r7, #12]
 800a63c:	b2d2      	uxtb	r2, r2
 800a63e:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataOut & 0x0000FF00UL) >> 8);
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	0a19      	lsrs	r1, r3, #8
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	69da      	ldr	r2, [r3, #28]
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a64c:	3301      	adds	r3, #1
 800a64e:	4413      	add	r3, r2
 800a650:	b2ca      	uxtb	r2, r1
 800a652:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	0c19      	lsrs	r1, r3, #16
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	69da      	ldr	r2, [r3, #28]
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a660:	3302      	adds	r3, #2
 800a662:	4413      	add	r3, r2
 800a664:	b2ca      	uxtb	r2, r1
 800a666:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	0e19      	lsrs	r1, r3, #24
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	69da      	ldr	r2, [r3, #28]
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a674:	3303      	adds	r3, #3
 800a676:	4413      	add	r3, r2
 800a678:	b2ca      	uxtb	r2, r1
 800a67a:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount += 4UL;
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a680:	1d1a      	adds	r2, r3, #4
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	625a      	str	r2, [r3, #36]	@ 0x24

        if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a68e:	429a      	cmp	r2, r3
 800a690:	d10a      	bne.n	800a6a8 <JPEG_DMA_PollResidualData+0xa8>
        {
          /*Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
          hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
          HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	69d9      	ldr	r1, [r3, #28]
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a69a:	461a      	mov	r2, r3
 800a69c:	6878      	ldr	r0, [r7, #4]
 800a69e:	f7f7 f827 	bl	80016f0 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

          hjpeg->JpegOutCount = 0;
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	2200      	movs	r2, #0
 800a6a6:	625a      	str	r2, [r3, #36]	@ 0x24
  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 800a6a8:	697b      	ldr	r3, [r7, #20]
 800a6aa:	3b01      	subs	r3, #1
 800a6ac:	617b      	str	r3, [r7, #20]
 800a6ae:	697b      	ldr	r3, [r7, #20]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d1ac      	bne.n	800a60e <JPEG_DMA_PollResidualData+0xe>

      }
    }
  }

  tmpContext = hjpeg->Context;
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a6b8:	613b      	str	r3, [r7, #16]

  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a6c0:	f003 0310 	and.w	r3, r3, #16
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d004      	beq.n	800a6d2 <JPEG_DMA_PollResidualData+0xd2>
 800a6c8:	693b      	ldr	r3, [r7, #16]
 800a6ca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d133      	bne.n	800a73a <JPEG_DMA_PollResidualData+0x13a>
  {
    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	681a      	ldr	r2, [r3, #0]
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	f022 0201 	bic.w	r2, r2, #1
 800a6e0:	601a      	str	r2, [r3, #0]

    if (hjpeg->JpegOutCount > 0UL)
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d00a      	beq.n	800a700 <JPEG_DMA_PollResidualData+0x100>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	69d9      	ldr	r1, [r3, #28]
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6f2:	461a      	mov	r2, r3
 800a6f4:	6878      	ldr	r0, [r7, #4]
 800a6f6:	f7f6 fffb 	bl	80016f0 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	2200      	movs	r2, #0
 800a6fe:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    tmpContext = hjpeg->Context;
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a704:	613b      	str	r3, [r7, #16]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a70a:	f403 4282 	and.w	r2, r3, #16640	@ 0x4100
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	2200      	movs	r2, #0
 800a716:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	2201      	movs	r2, #1
 800a71e:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800a722:	693b      	ldr	r3, [r7, #16]
 800a724:	f003 0303 	and.w	r3, r3, #3
 800a728:	2b02      	cmp	r3, #2
 800a72a:	d103      	bne.n	800a734 <JPEG_DMA_PollResidualData+0x134>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800a72c:	6878      	ldr	r0, [r7, #4]
 800a72e:	f7fe fb98 	bl	8008e62 <HAL_JPEG_DecodeCpltCallback>
#else
      HAL_JPEG_EncodeCpltCallback(hjpeg);
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
    }
  }
}
 800a732:	e002      	b.n	800a73a <JPEG_DMA_PollResidualData+0x13a>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800a734:	6878      	ldr	r0, [r7, #4]
 800a736:	f7f6 fff7 	bl	8001728 <HAL_JPEG_EncodeCpltCallback>
}
 800a73a:	bf00      	nop
 800a73c:	3718      	adds	r7, #24
 800a73e:	46bd      	mov	sp, r7
 800a740:	bd80      	pop	{r7, pc}

0800a742 <JPEG_MDMAInCpltCallback>:
  * @brief  MDMA input transfer complete callback
  * @param  hmdma pointer to a MDMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_MDMAInCpltCallback(MDMA_HandleTypeDef *hmdma)
{
 800a742:	b590      	push	{r4, r7, lr}
 800a744:	b087      	sub	sp, #28
 800a746:	af02      	add	r7, sp, #8
 800a748:	6078      	str	r0, [r7, #4]
  uint32_t inXfrSize;

  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a74e:	60fb      	str	r3, [r7, #12]

  /* Disable The JPEG IT so the MDMA Input Callback can not be interrupted by the JPEG EOC IT or JPEG HPD IT */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800a75e:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Check if context method is DMA and we are not in ending DMA stage */
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) == JPEG_CONTEXT_DMA)
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a764:	f248 030c 	movw	r3, #32780	@ 0x800c
 800a768:	4013      	ands	r3, r2
 800a76a:	2b0c      	cmp	r3, #12
 800a76c:	d17c      	bne.n	800a868 <JPEG_MDMAInCpltCallback+0x126>
    /*if the MDMA In is triggred with JPEG In FIFO Threshold flag
      then MDMA In buffer size is 32 bytes
      else (MDMA In is triggred with JPEG In FIFO not full flag)
      then MDMA In buffer size is 4 bytes
      */
    inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a772:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a774:	60bb      	str	r3, [r7, #8]

    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	695b      	ldr	r3, [r3, #20]
 800a780:	f3c3 0310 	ubfx	r3, r3, #0, #17
 800a784:	1ad2      	subs	r2, r2, r3
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	621a      	str	r2, [r3, #32]

    /*Call HAL_JPEG_GetDataCallback to get new data */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->GetDataCallback(hjpeg, hjpeg->JpegInCount);
#else
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	6a1b      	ldr	r3, [r3, #32]
 800a78e:	4619      	mov	r1, r3
 800a790:	68f8      	ldr	r0, [r7, #12]
 800a792:	f7f6 ff7b 	bl	800168c <HAL_JPEG_GetDataCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */


    if (hjpeg->InDataLength >= inXfrSize)
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a79a:	68ba      	ldr	r2, [r7, #8]
 800a79c:	429a      	cmp	r2, r3
 800a79e:	d81f      	bhi.n	800a7e0 <JPEG_MDMAInCpltCallback+0x9e>
    {
      if (inXfrSize == 0UL)
 800a7a0:	68bb      	ldr	r3, [r7, #8]
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d10d      	bne.n	800a7c2 <JPEG_MDMAInCpltCallback+0x80>
      {
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a7aa:	f043 0204 	orr.w	r2, r3, #4
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	651a      	str	r2, [r3, #80]	@ 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	2206      	movs	r2, #6
 800a7b6:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
        hjpeg->ErrorCallback(hjpeg);
#else
        HAL_JPEG_ErrorCallback(hjpeg);
 800a7ba:	68f8      	ldr	r0, [r7, #12]
 800a7bc:	f7f6 ffd8 	bl	8001770 <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
        return;
 800a7c0:	e052      	b.n	800a868 <JPEG_MDMAInCpltCallback+0x126>
      }
      /*JPEG Input MDMA transfer data number must be multiple of MDMA buffer size
        as the destination is a 32 bits register */
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a7ca:	68b9      	ldr	r1, [r7, #8]
 800a7cc:	fbb3 f1f1 	udiv	r1, r3, r1
 800a7d0:	68b8      	ldr	r0, [r7, #8]
 800a7d2:	fb00 f101 	mul.w	r1, r0, r1
 800a7d6:	1a5b      	subs	r3, r3, r1
 800a7d8:	1ad2      	subs	r2, r2, r3
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	629a      	str	r2, [r3, #40]	@ 0x28
 800a7de:	e010      	b.n	800a802 <JPEG_MDMAInCpltCallback+0xc0>

    }
    else if (hjpeg->InDataLength > 0UL)
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d00c      	beq.n	800a802 <JPEG_MDMAInCpltCallback+0xc0>
    {
      /* Transfer the remaining Data, must be multiple of source data size (byte) and destination data size (word) */
      if ((hjpeg->InDataLength % 4UL) != 0UL)
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a7ec:	f003 0303 	and.w	r3, r3, #3
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d006      	beq.n	800a802 <JPEG_MDMAInCpltCallback+0xc0>
      {
        hjpeg->InDataLength = ((hjpeg->InDataLength / 4UL) + 1UL) * 4UL;
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a7f8:	089b      	lsrs	r3, r3, #2
 800a7fa:	3301      	adds	r3, #1
 800a7fc:	009a      	lsls	r2, r3, #2
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	629a      	str	r2, [r3, #40]	@ 0x28
    else
    {
      /* Nothing to do */
    }

    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a806:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d124      	bne.n	800a858 <JPEG_MDMAInCpltCallback+0x116>
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a812:	2b00      	cmp	r3, #0
 800a814:	d020      	beq.n	800a858 <JPEG_MDMAInCpltCallback+0x116>
    {
      /* Start MDMA FIFO In transfer */
      if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	699b      	ldr	r3, [r3, #24]
 800a81e:	4619      	mov	r1, r3
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	3340      	adds	r3, #64	@ 0x40
 800a826:	461c      	mov	r4, r3
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a82c:	2201      	movs	r2, #1
 800a82e:	9200      	str	r2, [sp, #0]
 800a830:	4622      	mov	r2, r4
 800a832:	f000 f9b5 	bl	800aba0 <HAL_MDMA_Start_IT>
 800a836:	4603      	mov	r3, r0
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d00d      	beq.n	800a858 <JPEG_MDMAInCpltCallback+0x116>
                            hjpeg->InDataLength, 1) != HAL_OK)
      {
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a840:	f043 0204 	orr.w	r2, r3, #4
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	651a      	str	r2, [r3, #80]	@ 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	2206      	movs	r2, #6
 800a84c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
        hjpeg->ErrorCallback(hjpeg);
#else
        HAL_JPEG_ErrorCallback(hjpeg);
 800a850:	68f8      	ldr	r0, [r7, #12]
 800a852:	f7f6 ff8d 	bl	8001770 <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
        return;
 800a856:	e007      	b.n	800a868 <JPEG_MDMAInCpltCallback+0x126>
      }
    }

    /* JPEG Conversion still on going : Enable the JPEG IT */
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800a866:	631a      	str	r2, [r3, #48]	@ 0x30
  }
}
 800a868:	3714      	adds	r7, #20
 800a86a:	46bd      	mov	sp, r7
 800a86c:	bd90      	pop	{r4, r7, pc}

0800a86e <JPEG_MDMAOutCpltCallback>:
  * @brief  MDMA output transfer complete callback
  * @param  hmdma pointer to a MDMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_MDMAOutCpltCallback(MDMA_HandleTypeDef *hmdma)
{
 800a86e:	b590      	push	{r4, r7, lr}
 800a870:	b087      	sub	sp, #28
 800a872:	af02      	add	r7, sp, #8
 800a874:	6078      	str	r0, [r7, #4]
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a87a:	60fb      	str	r3, [r7, #12]


  /* Disable The JPEG IT so the MDMA Output Callback can not be interrupted by the JPEG EOC IT or JPEG HPD IT */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800a88a:	631a      	str	r2, [r3, #48]	@ 0x30

  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) ==
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a890:	f248 030c 	movw	r3, #32780	@ 0x800c
 800a894:	4013      	ands	r3, r2
 800a896:	2b0c      	cmp	r3, #12
 800a898:	d147      	bne.n	800a92a <JPEG_MDMAOutCpltCallback+0xbc>
      JPEG_CONTEXT_DMA) /* Check if context method is DMA and we are not in ending DMA stage */
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) == 0UL)
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a8a0:	f003 0320 	and.w	r3, r3, #32
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d138      	bne.n	800a91a <JPEG_MDMAOutCpltCallback+0xac>
    {
      hjpeg->JpegOutCount = hjpeg->OutDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	695b      	ldr	r3, [r3, #20]
 800a8b2:	f3c3 0310 	ubfx	r3, r3, #0, #17
 800a8b6:	1ad2      	subs	r2, r2, r3
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	625a      	str	r2, [r3, #36]	@ 0x24

      /*Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	69d9      	ldr	r1, [r3, #28]
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8c4:	461a      	mov	r2, r3
 800a8c6:	68f8      	ldr	r0, [r7, #12]
 800a8c8:	f7f6 ff12 	bl	80016f0 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a8d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d120      	bne.n	800a91a <JPEG_MDMAOutCpltCallback+0xac>
      {
        /* Start MDMA FIFO Out transfer */
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	3344      	adds	r3, #68	@ 0x44
 800a8e2:	4619      	mov	r1, r3
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	69db      	ldr	r3, [r3, #28]
 800a8e8:	461c      	mov	r4, r3
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a8ee:	2201      	movs	r2, #1
 800a8f0:	9200      	str	r2, [sp, #0]
 800a8f2:	4622      	mov	r2, r4
 800a8f4:	f000 f954 	bl	800aba0 <HAL_MDMA_Start_IT>
 800a8f8:	4603      	mov	r3, r0
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d00d      	beq.n	800a91a <JPEG_MDMAOutCpltCallback+0xac>
                              hjpeg->OutDataLength, 1) != HAL_OK)
        {
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a902:	f043 0204 	orr.w	r2, r3, #4
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	651a      	str	r2, [r3, #80]	@ 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	2206      	movs	r2, #6
 800a90e:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
          hjpeg->ErrorCallback(hjpeg);
#else
          HAL_JPEG_ErrorCallback(hjpeg);
 800a912:	68f8      	ldr	r0, [r7, #12]
 800a914:	f7f6 ff2c 	bl	8001770 <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
          return;
 800a918:	e007      	b.n	800a92a <JPEG_MDMAOutCpltCallback+0xbc>
        }
      }
    }

    /* JPEG Conversion still on going : Enable the JPEG IT */
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800a928:	631a      	str	r2, [r3, #48]	@ 0x30
  }

}
 800a92a:	3714      	adds	r7, #20
 800a92c:	46bd      	mov	sp, r7
 800a92e:	bd90      	pop	{r4, r7, pc}

0800a930 <JPEG_MDMAErrorCallback>:
  * @brief  MDMA Transfer error callback
  * @param  hmdma pointer to a MDMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_MDMAErrorCallback(MDMA_HandleTypeDef *hmdma)
{
 800a930:	b580      	push	{r7, lr}
 800a932:	b084      	sub	sp, #16
 800a934:	af00      	add	r7, sp, #0
 800a936:	6078      	str	r0, [r7, #4]
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a93c:	60fb      	str	r3, [r7, #12]

  /*Stop Encoding/Decoding*/
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	681a      	ldr	r2, [r3, #0]
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	f022 0201 	bic.w	r2, r2, #1
 800a94c:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800a95c:	631a      	str	r2, [r3, #48]	@ 0x30

  hjpeg->State = HAL_JPEG_STATE_READY;
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	2201      	movs	r2, #1
 800a962:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
  hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a96a:	f043 0204 	orr.w	r2, r3, #4
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	651a      	str	r2, [r3, #80]	@ 0x50

#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
  hjpeg->ErrorCallback(hjpeg);
#else
  HAL_JPEG_ErrorCallback(hjpeg);
 800a972:	68f8      	ldr	r0, [r7, #12]
 800a974:	f7f6 fefc 	bl	8001770 <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
}
 800a978:	bf00      	nop
 800a97a:	3710      	adds	r7, #16
 800a97c:	46bd      	mov	sp, r7
 800a97e:	bd80      	pop	{r7, pc}

0800a980 <JPEG_MDMAOutAbortCallback>:
  * @brief  MDMA output Abort callback
  * @param  hmdma pointer to a MDMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_MDMAOutAbortCallback(MDMA_HandleTypeDef *hmdma)
{
 800a980:	b580      	push	{r7, lr}
 800a982:	b084      	sub	sp, #16
 800a984:	af00      	add	r7, sp, #0
 800a986:	6078      	str	r0, [r7, #4]
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a98c:	60fb      	str	r3, [r7, #12]

  if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a992:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a996:	2b00      	cmp	r3, #0
 800a998:	d002      	beq.n	800a9a0 <JPEG_MDMAOutAbortCallback+0x20>
  {
    JPEG_DMA_EndProcess(hjpeg);
 800a99a:	68f8      	ldr	r0, [r7, #12]
 800a99c:	f7ff fdc7 	bl	800a52e <JPEG_DMA_EndProcess>
  }
}
 800a9a0:	bf00      	nop
 800a9a2:	3710      	adds	r7, #16
 800a9a4:	46bd      	mov	sp, r7
 800a9a6:	bd80      	pop	{r7, pc}

0800a9a8 <JPEG_GetQuality>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG image quality from 1 to 100.
  */
static uint32_t JPEG_GetQuality(JPEG_HandleTypeDef *hjpeg)
{
 800a9a8:	b480      	push	{r7}
 800a9aa:	b08b      	sub	sp, #44	@ 0x2c
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	6078      	str	r0, [r7, #4]
  uint32_t quality = 0;
 800a9b0:	2300      	movs	r3, #0
 800a9b2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t quantRow, quantVal, scale, i, j;
  __IO uint32_t *tableAddress = hjpeg->Instance->QMEM0;
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	3350      	adds	r3, #80	@ 0x50
 800a9ba:	61bb      	str	r3, [r7, #24]

  i = 0;
 800a9bc:	2300      	movs	r3, #0
 800a9be:	623b      	str	r3, [r7, #32]
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 800a9c0:	e042      	b.n	800aa48 <JPEG_GetQuality+0xa0>
  {
    quantRow = *tableAddress;
 800a9c2:	69bb      	ldr	r3, [r7, #24]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	617b      	str	r3, [r7, #20]
    for (j = 0; j < 4UL; j++)
 800a9c8:	2300      	movs	r3, #0
 800a9ca:	61fb      	str	r3, [r7, #28]
 800a9cc:	e033      	b.n	800aa36 <JPEG_GetQuality+0x8e>
    {
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
 800a9ce:	69fb      	ldr	r3, [r7, #28]
 800a9d0:	00db      	lsls	r3, r3, #3
 800a9d2:	697a      	ldr	r2, [r7, #20]
 800a9d4:	fa22 f303 	lsr.w	r3, r2, r3
 800a9d8:	b2db      	uxtb	r3, r3
 800a9da:	613b      	str	r3, [r7, #16]
      if (quantVal == 1UL)
 800a9dc:	693b      	ldr	r3, [r7, #16]
 800a9de:	2b01      	cmp	r3, #1
 800a9e0:	d103      	bne.n	800a9ea <JPEG_GetQuality+0x42>
      {
        /* if Quantization value = 1 then quality is 100%*/
        quality += 100UL;
 800a9e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9e4:	3364      	adds	r3, #100	@ 0x64
 800a9e6:	627b      	str	r3, [r7, #36]	@ 0x24
 800a9e8:	e022      	b.n	800aa30 <JPEG_GetQuality+0x88>
      }
      else
      {
        /* Note that the quantization coefficients must be specified in the table in zigzag order */
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 800a9ea:	693b      	ldr	r3, [r7, #16]
 800a9ec:	2264      	movs	r2, #100	@ 0x64
 800a9ee:	fb02 f303 	mul.w	r3, r2, r3
 800a9f2:	687a      	ldr	r2, [r7, #4]
 800a9f4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800a9f6:	6a38      	ldr	r0, [r7, #32]
 800a9f8:	69f9      	ldr	r1, [r7, #28]
 800a9fa:	4401      	add	r1, r0
 800a9fc:	4818      	ldr	r0, [pc, #96]	@ (800aa60 <JPEG_GetQuality+0xb8>)
 800a9fe:	5c41      	ldrb	r1, [r0, r1]
 800aa00:	440a      	add	r2, r1
 800aa02:	7812      	ldrb	r2, [r2, #0]
 800aa04:	fbb3 f3f2 	udiv	r3, r3, r2
 800aa08:	60fb      	str	r3, [r7, #12]

        if (scale <= 100UL)
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	2b64      	cmp	r3, #100	@ 0x64
 800aa0e:	d807      	bhi.n	800aa20 <JPEG_GetQuality+0x78>
        {
          quality += (200UL - scale) / 2UL;
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	f1c3 03c8 	rsb	r3, r3, #200	@ 0xc8
 800aa16:	085b      	lsrs	r3, r3, #1
 800aa18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aa1a:	4413      	add	r3, r2
 800aa1c:	627b      	str	r3, [r7, #36]	@ 0x24
 800aa1e:	e007      	b.n	800aa30 <JPEG_GetQuality+0x88>
        }
        else
        {
          quality += 5000UL / scale;
 800aa20:	f241 3288 	movw	r2, #5000	@ 0x1388
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aa2c:	4413      	add	r3, r2
 800aa2e:	627b      	str	r3, [r7, #36]	@ 0x24
    for (j = 0; j < 4UL; j++)
 800aa30:	69fb      	ldr	r3, [r7, #28]
 800aa32:	3301      	adds	r3, #1
 800aa34:	61fb      	str	r3, [r7, #28]
 800aa36:	69fb      	ldr	r3, [r7, #28]
 800aa38:	2b03      	cmp	r3, #3
 800aa3a:	d9c8      	bls.n	800a9ce <JPEG_GetQuality+0x26>
        }
      }
    }

    i += 4UL;
 800aa3c:	6a3b      	ldr	r3, [r7, #32]
 800aa3e:	3304      	adds	r3, #4
 800aa40:	623b      	str	r3, [r7, #32]
    tableAddress ++;
 800aa42:	69bb      	ldr	r3, [r7, #24]
 800aa44:	3304      	adds	r3, #4
 800aa46:	61bb      	str	r3, [r7, #24]
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 800aa48:	6a3b      	ldr	r3, [r7, #32]
 800aa4a:	2b3c      	cmp	r3, #60	@ 0x3c
 800aa4c:	d9b9      	bls.n	800a9c2 <JPEG_GetQuality+0x1a>
  }

  return (quality / 64UL);
 800aa4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa50:	099b      	lsrs	r3, r3, #6
}
 800aa52:	4618      	mov	r0, r3
 800aa54:	372c      	adds	r7, #44	@ 0x2c
 800aa56:	46bd      	mov	sp, r7
 800aa58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa5c:	4770      	bx	lr
 800aa5e:	bf00      	nop
 800aa60:	080179c0 	.word	0x080179c0

0800aa64 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 800aa64:	b580      	push	{r7, lr}
 800aa66:	b084      	sub	sp, #16
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800aa6c:	f7f8 f808 	bl	8002a80 <HAL_GetTick>
 800aa70:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d101      	bne.n	800aa7c <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
 800aa78:	2301      	movs	r3, #1
 800aa7a:	e03b      	b.n	800aaf4 <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	2200      	movs	r2, #0
 800aa80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	2202      	movs	r2, #2
 800aa88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	68da      	ldr	r2, [r3, #12]
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	f022 0201 	bic.w	r2, r2, #1
 800aa9a:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800aa9c:	e00f      	b.n	800aabe <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 800aa9e:	f7f7 ffef 	bl	8002a80 <HAL_GetTick>
 800aaa2:	4602      	mov	r2, r0
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	1ad3      	subs	r3, r2, r3
 800aaa8:	2b05      	cmp	r3, #5
 800aaaa:	d908      	bls.n	800aabe <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	2240      	movs	r2, #64	@ 0x40
 800aab0:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	2203      	movs	r2, #3
 800aab6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      return HAL_ERROR;
 800aaba:	2301      	movs	r3, #1
 800aabc:	e01a      	b.n	800aaf4 <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	68db      	ldr	r3, [r3, #12]
 800aac4:	f003 0301 	and.w	r3, r3, #1
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d1e8      	bne.n	800aa9e <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
 800aacc:	6878      	ldr	r0, [r7, #4]
 800aace:	f000 fad3 	bl	800b078 <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	2200      	movs	r2, #0
 800aad6:	65da      	str	r2, [r3, #92]	@ 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	2200      	movs	r2, #0
 800aadc:	661a      	str	r2, [r3, #96]	@ 0x60
  hmdma->LinkedListNodeCounter  = 0;
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	2200      	movs	r2, #0
 800aae2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	2200      	movs	r2, #0
 800aae8:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	2201      	movs	r2, #1
 800aaee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800aaf2:	2300      	movs	r3, #0
}
 800aaf4:	4618      	mov	r0, r3
 800aaf6:	3710      	adds	r7, #16
 800aaf8:	46bd      	mov	sp, r7
 800aafa:	bd80      	pop	{r7, pc}

0800aafc <HAL_MDMA_ConfigPostRequestMask>:
  * @param  MaskData:    specifies the value to be written to MaskAddress after a request is served.
  *                      MaskAddress and MaskData could be used to automatically clear a peripheral flag when the request is served.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_ConfigPostRequestMask(MDMA_HandleTypeDef *hmdma, uint32_t MaskAddress, uint32_t MaskData)
{
 800aafc:	b480      	push	{r7}
 800aafe:	b087      	sub	sp, #28
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	60f8      	str	r0, [r7, #12]
 800ab04:	60b9      	str	r1, [r7, #8]
 800ab06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800ab08:	2300      	movs	r3, #0
 800ab0a:	75fb      	strb	r3, [r7, #23]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d101      	bne.n	800ab16 <HAL_MDMA_ConfigPostRequestMask+0x1a>
  {
    return HAL_ERROR;
 800ab12:	2301      	movs	r3, #1
 800ab14:	e03e      	b.n	800ab94 <HAL_MDMA_ConfigPostRequestMask+0x98>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ab1c:	2b01      	cmp	r3, #1
 800ab1e:	d101      	bne.n	800ab24 <HAL_MDMA_ConfigPostRequestMask+0x28>
 800ab20:	2302      	movs	r3, #2
 800ab22:	e037      	b.n	800ab94 <HAL_MDMA_ConfigPostRequestMask+0x98>
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	2201      	movs	r2, #1
 800ab28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ab32:	b2db      	uxtb	r3, r3
 800ab34:	2b01      	cmp	r3, #1
 800ab36:	d126      	bne.n	800ab86 <HAL_MDMA_ConfigPostRequestMask+0x8a>
  {
    /* if HW request set Post Request MaskAddress and MaskData,  */
    if((hmdma->Instance->CTCR & MDMA_CTCR_SWRM) == 0U)
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	691b      	ldr	r3, [r3, #16]
 800ab3e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d11c      	bne.n	800ab80 <HAL_MDMA_ConfigPostRequestMask+0x84>
    {
      /* Set the HW request clear Mask and Data */
      hmdma->Instance->CMAR = MaskAddress;
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	68ba      	ldr	r2, [r7, #8]
 800ab4c:	631a      	str	r2, [r3, #48]	@ 0x30
      hmdma->Instance->CMDR = MaskData;
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	687a      	ldr	r2, [r7, #4]
 800ab54:	635a      	str	r2, [r3, #52]	@ 0x34
      -If the request is done by SW : BWM could be set to 1 or 0.
      -If the request is done by a peripheral :
         If mask address not set (0) => BWM must be set to 0
         If mask address set (different than 0) => BWM could be set to 1 or 0
      */
      if(MaskAddress == 0U)
 800ab56:	68bb      	ldr	r3, [r7, #8]
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d108      	bne.n	800ab6e <HAL_MDMA_ConfigPostRequestMask+0x72>
      {
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	691a      	ldr	r2, [r3, #16]
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800ab6a:	611a      	str	r2, [r3, #16]
 800ab6c:	e00d      	b.n	800ab8a <HAL_MDMA_ConfigPostRequestMask+0x8e>
      }
      else
      {
        hmdma->Instance->CTCR |=  MDMA_CTCR_BWM;
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	691a      	ldr	r2, [r3, #16]
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800ab7c:	611a      	str	r2, [r3, #16]
 800ab7e:	e004      	b.n	800ab8a <HAL_MDMA_ConfigPostRequestMask+0x8e>
      }
    }
    else
    {
      /* Return error status */
      status =  HAL_ERROR;
 800ab80:	2301      	movs	r3, #1
 800ab82:	75fb      	strb	r3, [r7, #23]
 800ab84:	e001      	b.n	800ab8a <HAL_MDMA_ConfigPostRequestMask+0x8e>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 800ab86:	2301      	movs	r3, #1
 800ab88:	75fb      	strb	r3, [r7, #23]
  }
  /* Release Lock */
  __HAL_UNLOCK(hmdma);
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	2200      	movs	r2, #0
 800ab8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800ab92:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab94:	4618      	mov	r0, r3
 800ab96:	371c      	adds	r7, #28
 800ab98:	46bd      	mov	sp, r7
 800ab9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab9e:	4770      	bx	lr

0800aba0 <HAL_MDMA_Start_IT>:
  * @param  BlockDataLength : The length of a block transfer in bytes
  * @param  BlockCount      : The number of a blocks to be transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Start_IT(MDMA_HandleTypeDef *hmdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t BlockDataLength, uint32_t BlockCount)
{
 800aba0:	b580      	push	{r7, lr}
 800aba2:	b086      	sub	sp, #24
 800aba4:	af02      	add	r7, sp, #8
 800aba6:	60f8      	str	r0, [r7, #12]
 800aba8:	60b9      	str	r1, [r7, #8]
 800abaa:	607a      	str	r2, [r7, #4]
 800abac:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_MDMA_TRANSFER_LENGTH(BlockDataLength));
  assert_param(IS_MDMA_BLOCK_COUNT(BlockCount));

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d101      	bne.n	800abb8 <HAL_MDMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 800abb4:	2301      	movs	r3, #1
 800abb6:	e070      	b.n	800ac9a <HAL_MDMA_Start_IT+0xfa>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800abbe:	2b01      	cmp	r3, #1
 800abc0:	d101      	bne.n	800abc6 <HAL_MDMA_Start_IT+0x26>
 800abc2:	2302      	movs	r3, #2
 800abc4:	e069      	b.n	800ac9a <HAL_MDMA_Start_IT+0xfa>
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	2201      	movs	r2, #1
 800abca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800abd4:	b2db      	uxtb	r3, r3
 800abd6:	2b01      	cmp	r3, #1
 800abd8:	d158      	bne.n	800ac8c <HAL_MDMA_Start_IT+0xec>
  {
    /* Change MDMA peripheral state */
    hmdma->State = HAL_MDMA_STATE_BUSY;
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	2202      	movs	r2, #2
 800abde:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Initialize the error code */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	2200      	movs	r2, #0
 800abe6:	669a      	str	r2, [r3, #104]	@ 0x68

    /* Disable the peripheral */
    __HAL_MDMA_DISABLE(hmdma);
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	68da      	ldr	r2, [r3, #12]
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	f022 0201 	bic.w	r2, r2, #1
 800abf6:	60da      	str	r2, [r3, #12]

    /* Configure the source, destination address and the data length */
    MDMA_SetConfig(hmdma, SrcAddress, DstAddress, BlockDataLength, BlockCount);
 800abf8:	69bb      	ldr	r3, [r7, #24]
 800abfa:	9300      	str	r3, [sp, #0]
 800abfc:	683b      	ldr	r3, [r7, #0]
 800abfe:	687a      	ldr	r2, [r7, #4]
 800ac00:	68b9      	ldr	r1, [r7, #8]
 800ac02:	68f8      	ldr	r0, [r7, #12]
 800ac04:	f000 f9c8 	bl	800af98 <MDMA_SetConfig>

    /* Enable Common interrupts i.e Transfer Error IT and Channel Transfer Complete IT*/
    __HAL_MDMA_ENABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC));
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	68da      	ldr	r2, [r3, #12]
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	f042 0206 	orr.w	r2, r2, #6
 800ac16:	60da      	str	r2, [r3, #12]

    if(hmdma->XferBlockCpltCallback != NULL)
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d007      	beq.n	800ac30 <HAL_MDMA_Start_IT+0x90>
    {
      /* if Block transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BT);
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	68da      	ldr	r2, [r3, #12]
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	f042 0210 	orr.w	r2, r2, #16
 800ac2e:	60da      	str	r2, [r3, #12]
    }

    if(hmdma->XferRepeatBlockCpltCallback != NULL)
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d007      	beq.n	800ac48 <HAL_MDMA_Start_IT+0xa8>
    {
      /* if Repeated Block transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BRT);
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	68da      	ldr	r2, [r3, #12]
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	f042 0208 	orr.w	r2, r2, #8
 800ac46:	60da      	str	r2, [r3, #12]
    }

    if(hmdma->XferBufferCpltCallback != NULL)
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d007      	beq.n	800ac60 <HAL_MDMA_Start_IT+0xc0>
    {
      /* if buffer transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BFTC);
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	68da      	ldr	r2, [r3, #12]
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	f042 0220 	orr.w	r2, r2, #32
 800ac5e:	60da      	str	r2, [r3, #12]
    }

    /* Enable the Peripheral */
    __HAL_MDMA_ENABLE(hmdma);
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	68da      	ldr	r2, [r3, #12]
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	f042 0201 	orr.w	r2, r2, #1
 800ac6e:	60da      	str	r2, [r3, #12]

    if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	685b      	ldr	r3, [r3, #4]
 800ac74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ac78:	d10e      	bne.n	800ac98 <HAL_MDMA_Start_IT+0xf8>
    {
      /* activate If SW request mode*/
      hmdma->Instance->CCR |=  MDMA_CCR_SWRQ;
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	68da      	ldr	r2, [r3, #12]
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800ac88:	60da      	str	r2, [r3, #12]
 800ac8a:	e005      	b.n	800ac98 <HAL_MDMA_Start_IT+0xf8>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hmdma);
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	2200      	movs	r2, #0
 800ac90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Return error status */
    return HAL_BUSY;
 800ac94:	2302      	movs	r3, #2
 800ac96:	e000      	b.n	800ac9a <HAL_MDMA_Start_IT+0xfa>
  }

  return HAL_OK;
 800ac98:	2300      	movs	r3, #0
}
 800ac9a:	4618      	mov	r0, r3
 800ac9c:	3710      	adds	r7, #16
 800ac9e:	46bd      	mov	sp, r7
 800aca0:	bd80      	pop	{r7, pc}

0800aca2 <HAL_MDMA_Abort_IT>:
  * @param  hmdma  : pointer to a MDMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort_IT(MDMA_HandleTypeDef *hmdma)
{
 800aca2:	b480      	push	{r7}
 800aca4:	b083      	sub	sp, #12
 800aca6:	af00      	add	r7, sp, #0
 800aca8:	6078      	str	r0, [r7, #4]
  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	2b00      	cmp	r3, #0
 800acae:	d101      	bne.n	800acb4 <HAL_MDMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800acb0:	2301      	movs	r3, #1
 800acb2:	e017      	b.n	800ace4 <HAL_MDMA_Abort_IT+0x42>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800acba:	b2db      	uxtb	r3, r3
 800acbc:	2b02      	cmp	r3, #2
 800acbe:	d004      	beq.n	800acca <HAL_MDMA_Abort_IT+0x28>
  {
    /* No transfer ongoing */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	2280      	movs	r2, #128	@ 0x80
 800acc4:	669a      	str	r2, [r3, #104]	@ 0x68

    return HAL_ERROR;
 800acc6:	2301      	movs	r3, #1
 800acc8:	e00c      	b.n	800ace4 <HAL_MDMA_Abort_IT+0x42>
  }
  else
  {
    /* Set Abort State  */
    hmdma->State = HAL_MDMA_STATE_ABORT;
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	2204      	movs	r2, #4
 800acce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the stream */
    __HAL_MDMA_DISABLE(hmdma);
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	68da      	ldr	r2, [r3, #12]
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	f022 0201 	bic.w	r2, r2, #1
 800ace0:	60da      	str	r2, [r3, #12]
  }

  return HAL_OK;
 800ace2:	2300      	movs	r3, #0
}
 800ace4:	4618      	mov	r0, r3
 800ace6:	370c      	adds	r7, #12
 800ace8:	46bd      	mov	sp, r7
 800acea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acee:	4770      	bx	lr

0800acf0 <HAL_MDMA_IRQHandler>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval None
  */
void HAL_MDMA_IRQHandler(MDMA_HandleTypeDef *hmdma)
{
 800acf0:	b580      	push	{r7, lr}
 800acf2:	b086      	sub	sp, #24
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 800acf8:	2300      	movs	r3, #0
 800acfa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800acfc:	4b91      	ldr	r3, [pc, #580]	@ (800af44 <HAL_MDMA_IRQHandler+0x254>)
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	4a91      	ldr	r2, [pc, #580]	@ (800af48 <HAL_MDMA_IRQHandler+0x258>)
 800ad02:	fba2 2303 	umull	r2, r3, r2, r3
 800ad06:	0a9b      	lsrs	r3, r3, #10
 800ad08:	617b      	str	r3, [r7, #20]

  uint32_t generalIntFlag, errorFlag;

  /* General Interrupt Flag management ****************************************/
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	461a      	mov	r2, r3
 800ad10:	4b8e      	ldr	r3, [pc, #568]	@ (800af4c <HAL_MDMA_IRQHandler+0x25c>)
 800ad12:	4413      	add	r3, r2
 800ad14:	099b      	lsrs	r3, r3, #6
 800ad16:	f003 031f 	and.w	r3, r3, #31
 800ad1a:	2201      	movs	r2, #1
 800ad1c:	fa02 f303 	lsl.w	r3, r2, r3
 800ad20:	613b      	str	r3, [r7, #16]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 800ad22:	f04f 43a4 	mov.w	r3, #1375731712	@ 0x52000000
 800ad26:	681a      	ldr	r2, [r3, #0]
 800ad28:	693b      	ldr	r3, [r7, #16]
 800ad2a:	4013      	ands	r3, r2
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	f000 812d 	beq.w	800af8c <HAL_MDMA_IRQHandler+0x29c>
  {
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
  }

  /* Transfer Error Interrupt management ***************************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	f003 0301 	and.w	r3, r3, #1
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d054      	beq.n	800adea <HAL_MDMA_IRQHandler+0xfa>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	68db      	ldr	r3, [r3, #12]
 800ad46:	f003 0302 	and.w	r3, r3, #2
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d04d      	beq.n	800adea <HAL_MDMA_IRQHandler+0xfa>
    {
      /* Disable the transfer error interrupt */
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	68da      	ldr	r2, [r3, #12]
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	f022 0202 	bic.w	r2, r2, #2
 800ad5c:	60da      	str	r2, [r3, #12]

      /* Get the transfer error source flag */
      errorFlag = hmdma->Instance->CESR;
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	689b      	ldr	r3, [r3, #8]
 800ad64:	60fb      	str	r3, [r7, #12]

      if((errorFlag & MDMA_CESR_TED) == 0U)
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d106      	bne.n	800ad7e <HAL_MDMA_IRQHandler+0x8e>
      {
        /* Update error code : Read Transfer error  */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ad74:	f043 0201 	orr.w	r2, r3, #1
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	669a      	str	r2, [r3, #104]	@ 0x68
 800ad7c:	e005      	b.n	800ad8a <HAL_MDMA_IRQHandler+0x9a>
      }
      else
      {
        /* Update error code : Write Transfer error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ad82:	f043 0202 	orr.w	r2, r3, #2
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_TEMD) != 0U)
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d005      	beq.n	800ada0 <HAL_MDMA_IRQHandler+0xb0>
      {
        /* Update error code : Error Mask Data */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ad98:	f043 0204 	orr.w	r2, r3, #4
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_TELD) != 0U)
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d005      	beq.n	800adb6 <HAL_MDMA_IRQHandler+0xc6>
      {
        /* Update error code : Error Linked list */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800adae:	f043 0208 	orr.w	r2, r3, #8
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_ASE) != 0U)
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d005      	beq.n	800adcc <HAL_MDMA_IRQHandler+0xdc>
      {
        /* Update error code : Address/Size alignment error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800adc4:	f043 0210 	orr.w	r2, r3, #16
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_BSE) != 0U)
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800add2:	2b00      	cmp	r3, #0
 800add4:	d005      	beq.n	800ade2 <HAL_MDMA_IRQHandler+0xf2>
      {
        /* Update error code : Block Size error error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800adda:	f043 0220 	orr.w	r2, r3, #32
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      /* Clear the transfer error flags */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	2201      	movs	r2, #1
 800ade8:	605a      	str	r2, [r3, #4]
    }
  }

  /* Buffer Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	f003 0310 	and.w	r3, r3, #16
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d012      	beq.n	800ae1e <HAL_MDMA_IRQHandler+0x12e>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	68db      	ldr	r3, [r3, #12]
 800adfe:	f003 0320 	and.w	r3, r3, #32
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d00b      	beq.n	800ae1e <HAL_MDMA_IRQHandler+0x12e>
    {
      /* Clear the buffer transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	2210      	movs	r2, #16
 800ae0c:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBufferCpltCallback != NULL)
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d003      	beq.n	800ae1e <HAL_MDMA_IRQHandler+0x12e>
      {
        /* Buffer transfer callback */
        hmdma->XferBufferCpltCallback(hmdma);
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ae1a:	6878      	ldr	r0, [r7, #4]
 800ae1c:	4798      	blx	r3
      }
    }
  }

  /* Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	f003 0308 	and.w	r3, r3, #8
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d012      	beq.n	800ae52 <HAL_MDMA_IRQHandler+0x162>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	68db      	ldr	r3, [r3, #12]
 800ae32:	f003 0310 	and.w	r3, r3, #16
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d00b      	beq.n	800ae52 <HAL_MDMA_IRQHandler+0x162>
    {
      /* Clear the block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	2208      	movs	r2, #8
 800ae40:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBlockCpltCallback != NULL)
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d003      	beq.n	800ae52 <HAL_MDMA_IRQHandler+0x162>
      {
        /* Block transfer callback */
        hmdma->XferBlockCpltCallback(hmdma);
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ae4e:	6878      	ldr	r0, [r7, #4]
 800ae50:	4798      	blx	r3
      }
    }
  }

  /* Repeated Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	f003 0304 	and.w	r3, r3, #4
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d012      	beq.n	800ae86 <HAL_MDMA_IRQHandler+0x196>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	68db      	ldr	r3, [r3, #12]
 800ae66:	f003 0308 	and.w	r3, r3, #8
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d00b      	beq.n	800ae86 <HAL_MDMA_IRQHandler+0x196>
    {
      /* Clear the repeat block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	2204      	movs	r2, #4
 800ae74:	605a      	str	r2, [r3, #4]

      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d003      	beq.n	800ae86 <HAL_MDMA_IRQHandler+0x196>
      {
        /* Repeated Block transfer callback */
        hmdma->XferRepeatBlockCpltCallback(hmdma);
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ae82:	6878      	ldr	r0, [r7, #4]
 800ae84:	4798      	blx	r3
      }
    }
  }

  /* Channel Transfer Complete Interrupt management ***********************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	f003 0302 	and.w	r3, r3, #2
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d039      	beq.n	800af08 <HAL_MDMA_IRQHandler+0x218>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	68db      	ldr	r3, [r3, #12]
 800ae9a:	f003 0304 	and.w	r3, r3, #4
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d032      	beq.n	800af08 <HAL_MDMA_IRQHandler+0x218>
    {
      /* Disable all the transfer interrupts */
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	68da      	ldr	r2, [r3, #12]
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	f022 023e 	bic.w	r2, r2, #62	@ 0x3e
 800aeb0:	60da      	str	r2, [r3, #12]

      if(HAL_MDMA_STATE_ABORT == hmdma->State)
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800aeb8:	b2db      	uxtb	r3, r3
 800aeba:	2b04      	cmp	r3, #4
 800aebc:	d110      	bne.n	800aee0 <HAL_MDMA_IRQHandler+0x1f0>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hmdma);
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	2200      	movs	r2, #0
 800aec2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Change the DMA state */
        hmdma->State = HAL_MDMA_STATE_READY;
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	2201      	movs	r2, #1
 800aeca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        if(hmdma->XferAbortCallback != NULL)
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d05c      	beq.n	800af90 <HAL_MDMA_IRQHandler+0x2a0>
        {
          hmdma->XferAbortCallback(hmdma);
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aeda:	6878      	ldr	r0, [r7, #4]
 800aedc:	4798      	blx	r3
        }
        return;
 800aede:	e057      	b.n	800af90 <HAL_MDMA_IRQHandler+0x2a0>
      }

      /* Clear the Channel Transfer Complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	2202      	movs	r2, #2
 800aee6:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hmdma);
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	2200      	movs	r2, #0
 800aeec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      /* Change MDMA peripheral state */
      hmdma->State = HAL_MDMA_STATE_READY;
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	2201      	movs	r2, #1
 800aef4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if(hmdma->XferCpltCallback != NULL)
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d003      	beq.n	800af08 <HAL_MDMA_IRQHandler+0x218>
      {
        /* Channel Transfer Complete callback */
        hmdma->XferCpltCallback(hmdma);
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800af04:	6878      	ldr	r0, [r7, #4]
 800af06:	4798      	blx	r3
      }
    }
  }

  /* manage error case */
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d040      	beq.n	800af92 <HAL_MDMA_IRQHandler+0x2a2>
  {
    hmdma->State = HAL_MDMA_STATE_ABORT;
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	2204      	movs	r2, #4
 800af14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the channel */
    __HAL_MDMA_DISABLE(hmdma);
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	68da      	ldr	r2, [r3, #12]
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	f022 0201 	bic.w	r2, r2, #1
 800af26:	60da      	str	r2, [r3, #12]

    do
    {
      if (++count > timeout)
 800af28:	68bb      	ldr	r3, [r7, #8]
 800af2a:	3301      	adds	r3, #1
 800af2c:	60bb      	str	r3, [r7, #8]
 800af2e:	697a      	ldr	r2, [r7, #20]
 800af30:	429a      	cmp	r2, r3
 800af32:	d30d      	bcc.n	800af50 <HAL_MDMA_IRQHandler+0x260>
      {
        break;
      }
    }
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	68db      	ldr	r3, [r3, #12]
 800af3a:	f003 0301 	and.w	r3, r3, #1
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d1f2      	bne.n	800af28 <HAL_MDMA_IRQHandler+0x238>
 800af42:	e006      	b.n	800af52 <HAL_MDMA_IRQHandler+0x262>
 800af44:	24000014 	.word	0x24000014
 800af48:	1b4e81b5 	.word	0x1b4e81b5
 800af4c:	adffffc0 	.word	0xadffffc0
        break;
 800af50:	bf00      	nop

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	2200      	movs	r2, #0
 800af56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	68db      	ldr	r3, [r3, #12]
 800af60:	f003 0301 	and.w	r3, r3, #1
 800af64:	2b00      	cmp	r3, #0
 800af66:	d004      	beq.n	800af72 <HAL_MDMA_IRQHandler+0x282>
    {
      /* Change the MDMA state to error if MDMA disable fails */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	2203      	movs	r2, #3
 800af6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800af70:	e003      	b.n	800af7a <HAL_MDMA_IRQHandler+0x28a>
    }
    else
    {
      /* Change the MDMA state to Ready if MDMA disable success */
      hmdma->State = HAL_MDMA_STATE_READY;
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	2201      	movs	r2, #1
 800af76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    }


    if (hmdma->XferErrorCallback != NULL)
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d007      	beq.n	800af92 <HAL_MDMA_IRQHandler+0x2a2>
    {
      /* Transfer error callback */
      hmdma->XferErrorCallback(hmdma);
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800af86:	6878      	ldr	r0, [r7, #4]
 800af88:	4798      	blx	r3
 800af8a:	e002      	b.n	800af92 <HAL_MDMA_IRQHandler+0x2a2>
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
 800af8c:	bf00      	nop
 800af8e:	e000      	b.n	800af92 <HAL_MDMA_IRQHandler+0x2a2>
        return;
 800af90:	bf00      	nop
    }
  }
}
 800af92:	3718      	adds	r7, #24
 800af94:	46bd      	mov	sp, r7
 800af96:	bd80      	pop	{r7, pc}

0800af98 <MDMA_SetConfig>:
  * @param  BlockDataLength : The length of a block transfer in bytes
  * @param  BlockCount: The number of blocks to be transferred
  * @retval HAL status
  */
static void MDMA_SetConfig(MDMA_HandleTypeDef *hmdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t BlockDataLength, uint32_t BlockCount)
{
 800af98:	b480      	push	{r7}
 800af9a:	b087      	sub	sp, #28
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	60f8      	str	r0, [r7, #12]
 800afa0:	60b9      	str	r1, [r7, #8]
 800afa2:	607a      	str	r2, [r7, #4]
 800afa4:	603b      	str	r3, [r7, #0]
  uint32_t addressMask;

  /* Configure the MDMA Channel data length */
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	695a      	ldr	r2, [r3, #20]
 800afac:	4b31      	ldr	r3, [pc, #196]	@ (800b074 <MDMA_SetConfig+0xdc>)
 800afae:	4013      	ands	r3, r2
 800afb0:	683a      	ldr	r2, [r7, #0]
 800afb2:	f3c2 0110 	ubfx	r1, r2, #0, #17
 800afb6:	68fa      	ldr	r2, [r7, #12]
 800afb8:	6812      	ldr	r2, [r2, #0]
 800afba:	430b      	orrs	r3, r1
 800afbc:	6153      	str	r3, [r2, #20]

  /* Configure the MDMA block repeat count */
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	695b      	ldr	r3, [r3, #20]
 800afc4:	f3c3 0113 	ubfx	r1, r3, #0, #20
 800afc8:	6a3b      	ldr	r3, [r7, #32]
 800afca:	3b01      	subs	r3, #1
 800afcc:	051a      	lsls	r2, r3, #20
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	430a      	orrs	r2, r1
 800afd4:	615a      	str	r2, [r3, #20]

  /* Clear all interrupt flags */
  __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_CISR_BRTIF | MDMA_CISR_BTIF | MDMA_CISR_TCIF);
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	221f      	movs	r2, #31
 800afdc:	605a      	str	r2, [r3, #4]

  /* Configure MDMA Channel destination address */
  hmdma->Instance->CDAR = DstAddress;
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	687a      	ldr	r2, [r7, #4]
 800afe4:	61da      	str	r2, [r3, #28]

  /* Configure MDMA Channel Source address */
  hmdma->Instance->CSAR = SrcAddress;
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	68ba      	ldr	r2, [r7, #8]
 800afec:	619a      	str	r2, [r3, #24]

  addressMask = SrcAddress & 0xFF000000U;
 800afee:	68bb      	ldr	r3, [r7, #8]
 800aff0:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800aff4:	617b      	str	r3, [r7, #20]
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 800aff6:	697b      	ldr	r3, [r7, #20]
 800aff8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800affc:	d002      	beq.n	800b004 <MDMA_SetConfig+0x6c>
 800affe:	697b      	ldr	r3, [r7, #20]
 800b000:	2b00      	cmp	r3, #0
 800b002:	d108      	bne.n	800b016 <MDMA_SetConfig+0x7e>
  {
    /*The AHBSbus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_SBUS;
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800b012:	629a      	str	r2, [r3, #40]	@ 0x28
 800b014:	e007      	b.n	800b026 <MDMA_SetConfig+0x8e>
  }
  else
  {
    /*The AXI bus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800b024:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  addressMask = DstAddress & 0xFF000000U;
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800b02c:	617b      	str	r3, [r7, #20]
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 800b02e:	697b      	ldr	r3, [r7, #20]
 800b030:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b034:	d002      	beq.n	800b03c <MDMA_SetConfig+0xa4>
 800b036:	697b      	ldr	r3, [r7, #20]
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d108      	bne.n	800b04e <MDMA_SetConfig+0xb6>
  {
    /*The AHB bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_DBUS;
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800b04a:	629a      	str	r2, [r3, #40]	@ 0x28
 800b04c:	e007      	b.n	800b05e <MDMA_SetConfig+0xc6>
  }
  else
  {
    /*The AXI bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_DBUS);
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800b05c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Set the linked list register to the first node of the list */
  hmdma->Instance->CLAR = (uint32_t)hmdma->FirstLinkedListNodeAddress;
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800b068:	bf00      	nop
 800b06a:	371c      	adds	r7, #28
 800b06c:	46bd      	mov	sp, r7
 800b06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b072:	4770      	bx	lr
 800b074:	fffe0000 	.word	0xfffe0000

0800b078 <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 800b078:	b480      	push	{r7}
 800b07a:	b085      	sub	sp, #20
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	68d9      	ldr	r1, [r3, #12]
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	691a      	ldr	r2, [r3, #16]
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	430a      	orrs	r2, r1
 800b08e:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	695a      	ldr	r2, [r3, #20]
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	699b      	ldr	r3, [r3, #24]
 800b098:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800b09e:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	6a1b      	ldr	r3, [r3, #32]
 800b0a4:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800b0aa:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0b0:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800b0b6:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0bc:	3b01      	subs	r3, #1
 800b0be:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
 800b0c0:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 800b0cc:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800b0ce:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	685b      	ldr	r3, [r3, #4]
 800b0d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b0d8:	d107      	bne.n	800b0ea <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	691a      	ldr	r2, [r3, #16]
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	f042 4240 	orr.w	r2, r2, #3221225472	@ 0xc0000000
 800b0e8:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	2200      	movs	r2, #0
 800b0f0:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	da11      	bge.n	800b11e <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	695a      	ldr	r2, [r3, #20]
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800b108:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b10e:	425b      	negs	r3, r3
 800b110:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	68fa      	ldr	r2, [r7, #12]
 800b118:	b292      	uxth	r2, r2
 800b11a:	621a      	str	r2, [r3, #32]
 800b11c:	e006      	b.n	800b12c <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b122:	461a      	mov	r2, r3
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	b292      	uxth	r2, r2
 800b12a:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b130:	2b00      	cmp	r3, #0
 800b132:	da15      	bge.n	800b160 <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	695a      	ldr	r2, [r3, #20]
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 800b142:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b148:	425b      	negs	r3, r3
 800b14a:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	6a19      	ldr	r1, [r3, #32]
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	041a      	lsls	r2, r3, #16
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	430a      	orrs	r2, r1
 800b15c:	621a      	str	r2, [r3, #32]
 800b15e:	e009      	b.n	800b174 <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	6a19      	ldr	r1, [r3, #32]
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b16a:	041a      	lsls	r2, r3, #16
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	430a      	orrs	r2, r1
 800b172:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	685b      	ldr	r3, [r3, #4]
 800b178:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b17c:	d006      	beq.n	800b18c <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	685a      	ldr	r2, [r3, #4]
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	b2d2      	uxtb	r2, r2
 800b188:	629a      	str	r2, [r3, #40]	@ 0x28
 800b18a:	e003      	b.n	800b194 <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	2200      	movs	r2, #0
 800b192:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	2200      	movs	r2, #0
 800b19a:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800b19c:	bf00      	nop
 800b19e:	3714      	adds	r7, #20
 800b1a0:	46bd      	mov	sp, r7
 800b1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a6:	4770      	bx	lr

0800b1a8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800b1a8:	b580      	push	{r7, lr}
 800b1aa:	b086      	sub	sp, #24
 800b1ac:	af02      	add	r7, sp, #8
 800b1ae:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d101      	bne.n	800b1ba <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800b1b6:	2301      	movs	r3, #1
 800b1b8:	e0fe      	b.n	800b3b8 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800b1c0:	b2db      	uxtb	r3, r3
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d106      	bne.n	800b1d4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	2200      	movs	r2, #0
 800b1ca:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800b1ce:	6878      	ldr	r0, [r7, #4]
 800b1d0:	f00b fa40 	bl	8016654 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	2203      	movs	r2, #3
 800b1d8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	4618      	mov	r0, r3
 800b1e2:	f007 fc00 	bl	80129e6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	6818      	ldr	r0, [r3, #0]
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	7c1a      	ldrb	r2, [r3, #16]
 800b1ee:	f88d 2000 	strb.w	r2, [sp]
 800b1f2:	3304      	adds	r3, #4
 800b1f4:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b1f6:	f007 fad1 	bl	801279c <USB_CoreInit>
 800b1fa:	4603      	mov	r3, r0
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d005      	beq.n	800b20c <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	2202      	movs	r2, #2
 800b204:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800b208:	2301      	movs	r3, #1
 800b20a:	e0d5      	b.n	800b3b8 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	2100      	movs	r1, #0
 800b212:	4618      	mov	r0, r3
 800b214:	f007 fbf8 	bl	8012a08 <USB_SetCurrentMode>
 800b218:	4603      	mov	r3, r0
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d005      	beq.n	800b22a <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	2202      	movs	r2, #2
 800b222:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800b226:	2301      	movs	r3, #1
 800b228:	e0c6      	b.n	800b3b8 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b22a:	2300      	movs	r3, #0
 800b22c:	73fb      	strb	r3, [r7, #15]
 800b22e:	e04a      	b.n	800b2c6 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800b230:	7bfa      	ldrb	r2, [r7, #15]
 800b232:	6879      	ldr	r1, [r7, #4]
 800b234:	4613      	mov	r3, r2
 800b236:	00db      	lsls	r3, r3, #3
 800b238:	4413      	add	r3, r2
 800b23a:	009b      	lsls	r3, r3, #2
 800b23c:	440b      	add	r3, r1
 800b23e:	3315      	adds	r3, #21
 800b240:	2201      	movs	r2, #1
 800b242:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800b244:	7bfa      	ldrb	r2, [r7, #15]
 800b246:	6879      	ldr	r1, [r7, #4]
 800b248:	4613      	mov	r3, r2
 800b24a:	00db      	lsls	r3, r3, #3
 800b24c:	4413      	add	r3, r2
 800b24e:	009b      	lsls	r3, r3, #2
 800b250:	440b      	add	r3, r1
 800b252:	3314      	adds	r3, #20
 800b254:	7bfa      	ldrb	r2, [r7, #15]
 800b256:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800b258:	7bfa      	ldrb	r2, [r7, #15]
 800b25a:	7bfb      	ldrb	r3, [r7, #15]
 800b25c:	b298      	uxth	r0, r3
 800b25e:	6879      	ldr	r1, [r7, #4]
 800b260:	4613      	mov	r3, r2
 800b262:	00db      	lsls	r3, r3, #3
 800b264:	4413      	add	r3, r2
 800b266:	009b      	lsls	r3, r3, #2
 800b268:	440b      	add	r3, r1
 800b26a:	332e      	adds	r3, #46	@ 0x2e
 800b26c:	4602      	mov	r2, r0
 800b26e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800b270:	7bfa      	ldrb	r2, [r7, #15]
 800b272:	6879      	ldr	r1, [r7, #4]
 800b274:	4613      	mov	r3, r2
 800b276:	00db      	lsls	r3, r3, #3
 800b278:	4413      	add	r3, r2
 800b27a:	009b      	lsls	r3, r3, #2
 800b27c:	440b      	add	r3, r1
 800b27e:	3318      	adds	r3, #24
 800b280:	2200      	movs	r2, #0
 800b282:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800b284:	7bfa      	ldrb	r2, [r7, #15]
 800b286:	6879      	ldr	r1, [r7, #4]
 800b288:	4613      	mov	r3, r2
 800b28a:	00db      	lsls	r3, r3, #3
 800b28c:	4413      	add	r3, r2
 800b28e:	009b      	lsls	r3, r3, #2
 800b290:	440b      	add	r3, r1
 800b292:	331c      	adds	r3, #28
 800b294:	2200      	movs	r2, #0
 800b296:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800b298:	7bfa      	ldrb	r2, [r7, #15]
 800b29a:	6879      	ldr	r1, [r7, #4]
 800b29c:	4613      	mov	r3, r2
 800b29e:	00db      	lsls	r3, r3, #3
 800b2a0:	4413      	add	r3, r2
 800b2a2:	009b      	lsls	r3, r3, #2
 800b2a4:	440b      	add	r3, r1
 800b2a6:	3320      	adds	r3, #32
 800b2a8:	2200      	movs	r2, #0
 800b2aa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800b2ac:	7bfa      	ldrb	r2, [r7, #15]
 800b2ae:	6879      	ldr	r1, [r7, #4]
 800b2b0:	4613      	mov	r3, r2
 800b2b2:	00db      	lsls	r3, r3, #3
 800b2b4:	4413      	add	r3, r2
 800b2b6:	009b      	lsls	r3, r3, #2
 800b2b8:	440b      	add	r3, r1
 800b2ba:	3324      	adds	r3, #36	@ 0x24
 800b2bc:	2200      	movs	r2, #0
 800b2be:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b2c0:	7bfb      	ldrb	r3, [r7, #15]
 800b2c2:	3301      	adds	r3, #1
 800b2c4:	73fb      	strb	r3, [r7, #15]
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	791b      	ldrb	r3, [r3, #4]
 800b2ca:	7bfa      	ldrb	r2, [r7, #15]
 800b2cc:	429a      	cmp	r2, r3
 800b2ce:	d3af      	bcc.n	800b230 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b2d0:	2300      	movs	r3, #0
 800b2d2:	73fb      	strb	r3, [r7, #15]
 800b2d4:	e044      	b.n	800b360 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800b2d6:	7bfa      	ldrb	r2, [r7, #15]
 800b2d8:	6879      	ldr	r1, [r7, #4]
 800b2da:	4613      	mov	r3, r2
 800b2dc:	00db      	lsls	r3, r3, #3
 800b2de:	4413      	add	r3, r2
 800b2e0:	009b      	lsls	r3, r3, #2
 800b2e2:	440b      	add	r3, r1
 800b2e4:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800b2e8:	2200      	movs	r2, #0
 800b2ea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800b2ec:	7bfa      	ldrb	r2, [r7, #15]
 800b2ee:	6879      	ldr	r1, [r7, #4]
 800b2f0:	4613      	mov	r3, r2
 800b2f2:	00db      	lsls	r3, r3, #3
 800b2f4:	4413      	add	r3, r2
 800b2f6:	009b      	lsls	r3, r3, #2
 800b2f8:	440b      	add	r3, r1
 800b2fa:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800b2fe:	7bfa      	ldrb	r2, [r7, #15]
 800b300:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800b302:	7bfa      	ldrb	r2, [r7, #15]
 800b304:	6879      	ldr	r1, [r7, #4]
 800b306:	4613      	mov	r3, r2
 800b308:	00db      	lsls	r3, r3, #3
 800b30a:	4413      	add	r3, r2
 800b30c:	009b      	lsls	r3, r3, #2
 800b30e:	440b      	add	r3, r1
 800b310:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800b314:	2200      	movs	r2, #0
 800b316:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800b318:	7bfa      	ldrb	r2, [r7, #15]
 800b31a:	6879      	ldr	r1, [r7, #4]
 800b31c:	4613      	mov	r3, r2
 800b31e:	00db      	lsls	r3, r3, #3
 800b320:	4413      	add	r3, r2
 800b322:	009b      	lsls	r3, r3, #2
 800b324:	440b      	add	r3, r1
 800b326:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800b32a:	2200      	movs	r2, #0
 800b32c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800b32e:	7bfa      	ldrb	r2, [r7, #15]
 800b330:	6879      	ldr	r1, [r7, #4]
 800b332:	4613      	mov	r3, r2
 800b334:	00db      	lsls	r3, r3, #3
 800b336:	4413      	add	r3, r2
 800b338:	009b      	lsls	r3, r3, #2
 800b33a:	440b      	add	r3, r1
 800b33c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800b340:	2200      	movs	r2, #0
 800b342:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800b344:	7bfa      	ldrb	r2, [r7, #15]
 800b346:	6879      	ldr	r1, [r7, #4]
 800b348:	4613      	mov	r3, r2
 800b34a:	00db      	lsls	r3, r3, #3
 800b34c:	4413      	add	r3, r2
 800b34e:	009b      	lsls	r3, r3, #2
 800b350:	440b      	add	r3, r1
 800b352:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800b356:	2200      	movs	r2, #0
 800b358:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b35a:	7bfb      	ldrb	r3, [r7, #15]
 800b35c:	3301      	adds	r3, #1
 800b35e:	73fb      	strb	r3, [r7, #15]
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	791b      	ldrb	r3, [r3, #4]
 800b364:	7bfa      	ldrb	r2, [r7, #15]
 800b366:	429a      	cmp	r2, r3
 800b368:	d3b5      	bcc.n	800b2d6 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	6818      	ldr	r0, [r3, #0]
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	7c1a      	ldrb	r2, [r3, #16]
 800b372:	f88d 2000 	strb.w	r2, [sp]
 800b376:	3304      	adds	r3, #4
 800b378:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b37a:	f007 fb91 	bl	8012aa0 <USB_DevInit>
 800b37e:	4603      	mov	r3, r0
 800b380:	2b00      	cmp	r3, #0
 800b382:	d005      	beq.n	800b390 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	2202      	movs	r2, #2
 800b388:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800b38c:	2301      	movs	r3, #1
 800b38e:	e013      	b.n	800b3b8 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	2200      	movs	r2, #0
 800b394:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	2201      	movs	r2, #1
 800b39a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	7b1b      	ldrb	r3, [r3, #12]
 800b3a2:	2b01      	cmp	r3, #1
 800b3a4:	d102      	bne.n	800b3ac <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800b3a6:	6878      	ldr	r0, [r7, #4]
 800b3a8:	f001 f96e 	bl	800c688 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	4618      	mov	r0, r3
 800b3b2:	f008 fbd4 	bl	8013b5e <USB_DevDisconnect>

  return HAL_OK;
 800b3b6:	2300      	movs	r3, #0
}
 800b3b8:	4618      	mov	r0, r3
 800b3ba:	3710      	adds	r7, #16
 800b3bc:	46bd      	mov	sp, r7
 800b3be:	bd80      	pop	{r7, pc}

0800b3c0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800b3c0:	b580      	push	{r7, lr}
 800b3c2:	b084      	sub	sp, #16
 800b3c4:	af00      	add	r7, sp, #0
 800b3c6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800b3d4:	2b01      	cmp	r3, #1
 800b3d6:	d101      	bne.n	800b3dc <HAL_PCD_Start+0x1c>
 800b3d8:	2302      	movs	r3, #2
 800b3da:	e022      	b.n	800b422 <HAL_PCD_Start+0x62>
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	2201      	movs	r2, #1
 800b3e0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	68db      	ldr	r3, [r3, #12]
 800b3e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d009      	beq.n	800b404 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800b3f4:	2b01      	cmp	r3, #1
 800b3f6:	d105      	bne.n	800b404 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b3fc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	4618      	mov	r0, r3
 800b40a:	f007 fadb 	bl	80129c4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	4618      	mov	r0, r3
 800b414:	f008 fb82 	bl	8013b1c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	2200      	movs	r2, #0
 800b41c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800b420:	2300      	movs	r3, #0
}
 800b422:	4618      	mov	r0, r3
 800b424:	3710      	adds	r7, #16
 800b426:	46bd      	mov	sp, r7
 800b428:	bd80      	pop	{r7, pc}

0800b42a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800b42a:	b590      	push	{r4, r7, lr}
 800b42c:	b08d      	sub	sp, #52	@ 0x34
 800b42e:	af00      	add	r7, sp, #0
 800b430:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b438:	6a3b      	ldr	r3, [r7, #32]
 800b43a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	4618      	mov	r0, r3
 800b442:	f008 fc40 	bl	8013cc6 <USB_GetMode>
 800b446:	4603      	mov	r3, r0
 800b448:	2b00      	cmp	r3, #0
 800b44a:	f040 84b9 	bne.w	800bdc0 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	4618      	mov	r0, r3
 800b454:	f008 fba4 	bl	8013ba0 <USB_ReadInterrupts>
 800b458:	4603      	mov	r3, r0
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	f000 84af 	beq.w	800bdbe <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800b460:	69fb      	ldr	r3, [r7, #28]
 800b462:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b466:	689b      	ldr	r3, [r3, #8]
 800b468:	0a1b      	lsrs	r3, r3, #8
 800b46a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	4618      	mov	r0, r3
 800b47a:	f008 fb91 	bl	8013ba0 <USB_ReadInterrupts>
 800b47e:	4603      	mov	r3, r0
 800b480:	f003 0302 	and.w	r3, r3, #2
 800b484:	2b02      	cmp	r3, #2
 800b486:	d107      	bne.n	800b498 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	695a      	ldr	r2, [r3, #20]
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	f002 0202 	and.w	r2, r2, #2
 800b496:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	4618      	mov	r0, r3
 800b49e:	f008 fb7f 	bl	8013ba0 <USB_ReadInterrupts>
 800b4a2:	4603      	mov	r3, r0
 800b4a4:	f003 0310 	and.w	r3, r3, #16
 800b4a8:	2b10      	cmp	r3, #16
 800b4aa:	d161      	bne.n	800b570 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	699a      	ldr	r2, [r3, #24]
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	f022 0210 	bic.w	r2, r2, #16
 800b4ba:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800b4bc:	6a3b      	ldr	r3, [r7, #32]
 800b4be:	6a1b      	ldr	r3, [r3, #32]
 800b4c0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800b4c2:	69bb      	ldr	r3, [r7, #24]
 800b4c4:	f003 020f 	and.w	r2, r3, #15
 800b4c8:	4613      	mov	r3, r2
 800b4ca:	00db      	lsls	r3, r3, #3
 800b4cc:	4413      	add	r3, r2
 800b4ce:	009b      	lsls	r3, r3, #2
 800b4d0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800b4d4:	687a      	ldr	r2, [r7, #4]
 800b4d6:	4413      	add	r3, r2
 800b4d8:	3304      	adds	r3, #4
 800b4da:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800b4dc:	69bb      	ldr	r3, [r7, #24]
 800b4de:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800b4e2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b4e6:	d124      	bne.n	800b532 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800b4e8:	69ba      	ldr	r2, [r7, #24]
 800b4ea:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800b4ee:	4013      	ands	r3, r2
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d035      	beq.n	800b560 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800b4f4:	697b      	ldr	r3, [r7, #20]
 800b4f6:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800b4f8:	69bb      	ldr	r3, [r7, #24]
 800b4fa:	091b      	lsrs	r3, r3, #4
 800b4fc:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800b4fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b502:	b29b      	uxth	r3, r3
 800b504:	461a      	mov	r2, r3
 800b506:	6a38      	ldr	r0, [r7, #32]
 800b508:	f008 f9b6 	bl	8013878 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800b50c:	697b      	ldr	r3, [r7, #20]
 800b50e:	68da      	ldr	r2, [r3, #12]
 800b510:	69bb      	ldr	r3, [r7, #24]
 800b512:	091b      	lsrs	r3, r3, #4
 800b514:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b518:	441a      	add	r2, r3
 800b51a:	697b      	ldr	r3, [r7, #20]
 800b51c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800b51e:	697b      	ldr	r3, [r7, #20]
 800b520:	695a      	ldr	r2, [r3, #20]
 800b522:	69bb      	ldr	r3, [r7, #24]
 800b524:	091b      	lsrs	r3, r3, #4
 800b526:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b52a:	441a      	add	r2, r3
 800b52c:	697b      	ldr	r3, [r7, #20]
 800b52e:	615a      	str	r2, [r3, #20]
 800b530:	e016      	b.n	800b560 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800b532:	69bb      	ldr	r3, [r7, #24]
 800b534:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800b538:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800b53c:	d110      	bne.n	800b560 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800b544:	2208      	movs	r2, #8
 800b546:	4619      	mov	r1, r3
 800b548:	6a38      	ldr	r0, [r7, #32]
 800b54a:	f008 f995 	bl	8013878 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800b54e:	697b      	ldr	r3, [r7, #20]
 800b550:	695a      	ldr	r2, [r3, #20]
 800b552:	69bb      	ldr	r3, [r7, #24]
 800b554:	091b      	lsrs	r3, r3, #4
 800b556:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b55a:	441a      	add	r2, r3
 800b55c:	697b      	ldr	r3, [r7, #20]
 800b55e:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	699a      	ldr	r2, [r3, #24]
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	f042 0210 	orr.w	r2, r2, #16
 800b56e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	4618      	mov	r0, r3
 800b576:	f008 fb13 	bl	8013ba0 <USB_ReadInterrupts>
 800b57a:	4603      	mov	r3, r0
 800b57c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800b580:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800b584:	f040 80a7 	bne.w	800b6d6 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800b588:	2300      	movs	r3, #0
 800b58a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	4618      	mov	r0, r3
 800b592:	f008 fb18 	bl	8013bc6 <USB_ReadDevAllOutEpInterrupt>
 800b596:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800b598:	e099      	b.n	800b6ce <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800b59a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b59c:	f003 0301 	and.w	r3, r3, #1
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	f000 808e 	beq.w	800b6c2 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b5ac:	b2d2      	uxtb	r2, r2
 800b5ae:	4611      	mov	r1, r2
 800b5b0:	4618      	mov	r0, r3
 800b5b2:	f008 fb3c 	bl	8013c2e <USB_ReadDevOutEPInterrupt>
 800b5b6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800b5b8:	693b      	ldr	r3, [r7, #16]
 800b5ba:	f003 0301 	and.w	r3, r3, #1
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d00c      	beq.n	800b5dc <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800b5c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5c4:	015a      	lsls	r2, r3, #5
 800b5c6:	69fb      	ldr	r3, [r7, #28]
 800b5c8:	4413      	add	r3, r2
 800b5ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b5ce:	461a      	mov	r2, r3
 800b5d0:	2301      	movs	r3, #1
 800b5d2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800b5d4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b5d6:	6878      	ldr	r0, [r7, #4]
 800b5d8:	f000 fed0 	bl	800c37c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800b5dc:	693b      	ldr	r3, [r7, #16]
 800b5de:	f003 0308 	and.w	r3, r3, #8
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d00c      	beq.n	800b600 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800b5e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5e8:	015a      	lsls	r2, r3, #5
 800b5ea:	69fb      	ldr	r3, [r7, #28]
 800b5ec:	4413      	add	r3, r2
 800b5ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b5f2:	461a      	mov	r2, r3
 800b5f4:	2308      	movs	r3, #8
 800b5f6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800b5f8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b5fa:	6878      	ldr	r0, [r7, #4]
 800b5fc:	f000 ffa6 	bl	800c54c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800b600:	693b      	ldr	r3, [r7, #16]
 800b602:	f003 0310 	and.w	r3, r3, #16
 800b606:	2b00      	cmp	r3, #0
 800b608:	d008      	beq.n	800b61c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800b60a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b60c:	015a      	lsls	r2, r3, #5
 800b60e:	69fb      	ldr	r3, [r7, #28]
 800b610:	4413      	add	r3, r2
 800b612:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b616:	461a      	mov	r2, r3
 800b618:	2310      	movs	r3, #16
 800b61a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800b61c:	693b      	ldr	r3, [r7, #16]
 800b61e:	f003 0302 	and.w	r3, r3, #2
 800b622:	2b00      	cmp	r3, #0
 800b624:	d030      	beq.n	800b688 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800b626:	6a3b      	ldr	r3, [r7, #32]
 800b628:	695b      	ldr	r3, [r3, #20]
 800b62a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b62e:	2b80      	cmp	r3, #128	@ 0x80
 800b630:	d109      	bne.n	800b646 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800b632:	69fb      	ldr	r3, [r7, #28]
 800b634:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b638:	685b      	ldr	r3, [r3, #4]
 800b63a:	69fa      	ldr	r2, [r7, #28]
 800b63c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b640:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800b644:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800b646:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b648:	4613      	mov	r3, r2
 800b64a:	00db      	lsls	r3, r3, #3
 800b64c:	4413      	add	r3, r2
 800b64e:	009b      	lsls	r3, r3, #2
 800b650:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800b654:	687a      	ldr	r2, [r7, #4]
 800b656:	4413      	add	r3, r2
 800b658:	3304      	adds	r3, #4
 800b65a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800b65c:	697b      	ldr	r3, [r7, #20]
 800b65e:	78db      	ldrb	r3, [r3, #3]
 800b660:	2b01      	cmp	r3, #1
 800b662:	d108      	bne.n	800b676 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800b664:	697b      	ldr	r3, [r7, #20]
 800b666:	2200      	movs	r2, #0
 800b668:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800b66a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b66c:	b2db      	uxtb	r3, r3
 800b66e:	4619      	mov	r1, r3
 800b670:	6878      	ldr	r0, [r7, #4]
 800b672:	f00b f915 	bl	80168a0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800b676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b678:	015a      	lsls	r2, r3, #5
 800b67a:	69fb      	ldr	r3, [r7, #28]
 800b67c:	4413      	add	r3, r2
 800b67e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b682:	461a      	mov	r2, r3
 800b684:	2302      	movs	r3, #2
 800b686:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800b688:	693b      	ldr	r3, [r7, #16]
 800b68a:	f003 0320 	and.w	r3, r3, #32
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d008      	beq.n	800b6a4 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800b692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b694:	015a      	lsls	r2, r3, #5
 800b696:	69fb      	ldr	r3, [r7, #28]
 800b698:	4413      	add	r3, r2
 800b69a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b69e:	461a      	mov	r2, r3
 800b6a0:	2320      	movs	r3, #32
 800b6a2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800b6a4:	693b      	ldr	r3, [r7, #16]
 800b6a6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d009      	beq.n	800b6c2 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800b6ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6b0:	015a      	lsls	r2, r3, #5
 800b6b2:	69fb      	ldr	r3, [r7, #28]
 800b6b4:	4413      	add	r3, r2
 800b6b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b6ba:	461a      	mov	r2, r3
 800b6bc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800b6c0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800b6c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6c4:	3301      	adds	r3, #1
 800b6c6:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800b6c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6ca:	085b      	lsrs	r3, r3, #1
 800b6cc:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800b6ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	f47f af62 	bne.w	800b59a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	4618      	mov	r0, r3
 800b6dc:	f008 fa60 	bl	8013ba0 <USB_ReadInterrupts>
 800b6e0:	4603      	mov	r3, r0
 800b6e2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b6e6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b6ea:	f040 80db 	bne.w	800b8a4 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	4618      	mov	r0, r3
 800b6f4:	f008 fa81 	bl	8013bfa <USB_ReadDevAllInEpInterrupt>
 800b6f8:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800b6fa:	2300      	movs	r3, #0
 800b6fc:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800b6fe:	e0cd      	b.n	800b89c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800b700:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b702:	f003 0301 	and.w	r3, r3, #1
 800b706:	2b00      	cmp	r3, #0
 800b708:	f000 80c2 	beq.w	800b890 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b712:	b2d2      	uxtb	r2, r2
 800b714:	4611      	mov	r1, r2
 800b716:	4618      	mov	r0, r3
 800b718:	f008 faa7 	bl	8013c6a <USB_ReadDevInEPInterrupt>
 800b71c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800b71e:	693b      	ldr	r3, [r7, #16]
 800b720:	f003 0301 	and.w	r3, r3, #1
 800b724:	2b00      	cmp	r3, #0
 800b726:	d057      	beq.n	800b7d8 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800b728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b72a:	f003 030f 	and.w	r3, r3, #15
 800b72e:	2201      	movs	r2, #1
 800b730:	fa02 f303 	lsl.w	r3, r2, r3
 800b734:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800b736:	69fb      	ldr	r3, [r7, #28]
 800b738:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b73c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	43db      	mvns	r3, r3
 800b742:	69f9      	ldr	r1, [r7, #28]
 800b744:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b748:	4013      	ands	r3, r2
 800b74a:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800b74c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b74e:	015a      	lsls	r2, r3, #5
 800b750:	69fb      	ldr	r3, [r7, #28]
 800b752:	4413      	add	r3, r2
 800b754:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b758:	461a      	mov	r2, r3
 800b75a:	2301      	movs	r3, #1
 800b75c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	799b      	ldrb	r3, [r3, #6]
 800b762:	2b01      	cmp	r3, #1
 800b764:	d132      	bne.n	800b7cc <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800b766:	6879      	ldr	r1, [r7, #4]
 800b768:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b76a:	4613      	mov	r3, r2
 800b76c:	00db      	lsls	r3, r3, #3
 800b76e:	4413      	add	r3, r2
 800b770:	009b      	lsls	r3, r3, #2
 800b772:	440b      	add	r3, r1
 800b774:	3320      	adds	r3, #32
 800b776:	6819      	ldr	r1, [r3, #0]
 800b778:	6878      	ldr	r0, [r7, #4]
 800b77a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b77c:	4613      	mov	r3, r2
 800b77e:	00db      	lsls	r3, r3, #3
 800b780:	4413      	add	r3, r2
 800b782:	009b      	lsls	r3, r3, #2
 800b784:	4403      	add	r3, r0
 800b786:	331c      	adds	r3, #28
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	4419      	add	r1, r3
 800b78c:	6878      	ldr	r0, [r7, #4]
 800b78e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b790:	4613      	mov	r3, r2
 800b792:	00db      	lsls	r3, r3, #3
 800b794:	4413      	add	r3, r2
 800b796:	009b      	lsls	r3, r3, #2
 800b798:	4403      	add	r3, r0
 800b79a:	3320      	adds	r3, #32
 800b79c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800b79e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d113      	bne.n	800b7cc <HAL_PCD_IRQHandler+0x3a2>
 800b7a4:	6879      	ldr	r1, [r7, #4]
 800b7a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b7a8:	4613      	mov	r3, r2
 800b7aa:	00db      	lsls	r3, r3, #3
 800b7ac:	4413      	add	r3, r2
 800b7ae:	009b      	lsls	r3, r3, #2
 800b7b0:	440b      	add	r3, r1
 800b7b2:	3324      	adds	r3, #36	@ 0x24
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d108      	bne.n	800b7cc <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	6818      	ldr	r0, [r3, #0]
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800b7c4:	461a      	mov	r2, r3
 800b7c6:	2101      	movs	r1, #1
 800b7c8:	f008 fab0 	bl	8013d2c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800b7cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7ce:	b2db      	uxtb	r3, r3
 800b7d0:	4619      	mov	r1, r3
 800b7d2:	6878      	ldr	r0, [r7, #4]
 800b7d4:	f00a ffdf 	bl	8016796 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800b7d8:	693b      	ldr	r3, [r7, #16]
 800b7da:	f003 0308 	and.w	r3, r3, #8
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d008      	beq.n	800b7f4 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800b7e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7e4:	015a      	lsls	r2, r3, #5
 800b7e6:	69fb      	ldr	r3, [r7, #28]
 800b7e8:	4413      	add	r3, r2
 800b7ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b7ee:	461a      	mov	r2, r3
 800b7f0:	2308      	movs	r3, #8
 800b7f2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800b7f4:	693b      	ldr	r3, [r7, #16]
 800b7f6:	f003 0310 	and.w	r3, r3, #16
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d008      	beq.n	800b810 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800b7fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b800:	015a      	lsls	r2, r3, #5
 800b802:	69fb      	ldr	r3, [r7, #28]
 800b804:	4413      	add	r3, r2
 800b806:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b80a:	461a      	mov	r2, r3
 800b80c:	2310      	movs	r3, #16
 800b80e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800b810:	693b      	ldr	r3, [r7, #16]
 800b812:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b816:	2b00      	cmp	r3, #0
 800b818:	d008      	beq.n	800b82c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800b81a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b81c:	015a      	lsls	r2, r3, #5
 800b81e:	69fb      	ldr	r3, [r7, #28]
 800b820:	4413      	add	r3, r2
 800b822:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b826:	461a      	mov	r2, r3
 800b828:	2340      	movs	r3, #64	@ 0x40
 800b82a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800b82c:	693b      	ldr	r3, [r7, #16]
 800b82e:	f003 0302 	and.w	r3, r3, #2
 800b832:	2b00      	cmp	r3, #0
 800b834:	d023      	beq.n	800b87e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800b836:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b838:	6a38      	ldr	r0, [r7, #32]
 800b83a:	f007 fa8f 	bl	8012d5c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800b83e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b840:	4613      	mov	r3, r2
 800b842:	00db      	lsls	r3, r3, #3
 800b844:	4413      	add	r3, r2
 800b846:	009b      	lsls	r3, r3, #2
 800b848:	3310      	adds	r3, #16
 800b84a:	687a      	ldr	r2, [r7, #4]
 800b84c:	4413      	add	r3, r2
 800b84e:	3304      	adds	r3, #4
 800b850:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800b852:	697b      	ldr	r3, [r7, #20]
 800b854:	78db      	ldrb	r3, [r3, #3]
 800b856:	2b01      	cmp	r3, #1
 800b858:	d108      	bne.n	800b86c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800b85a:	697b      	ldr	r3, [r7, #20]
 800b85c:	2200      	movs	r2, #0
 800b85e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800b860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b862:	b2db      	uxtb	r3, r3
 800b864:	4619      	mov	r1, r3
 800b866:	6878      	ldr	r0, [r7, #4]
 800b868:	f00b f82c 	bl	80168c4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800b86c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b86e:	015a      	lsls	r2, r3, #5
 800b870:	69fb      	ldr	r3, [r7, #28]
 800b872:	4413      	add	r3, r2
 800b874:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b878:	461a      	mov	r2, r3
 800b87a:	2302      	movs	r3, #2
 800b87c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800b87e:	693b      	ldr	r3, [r7, #16]
 800b880:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b884:	2b00      	cmp	r3, #0
 800b886:	d003      	beq.n	800b890 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800b888:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b88a:	6878      	ldr	r0, [r7, #4]
 800b88c:	f000 fcea 	bl	800c264 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800b890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b892:	3301      	adds	r3, #1
 800b894:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800b896:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b898:	085b      	lsrs	r3, r3, #1
 800b89a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800b89c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	f47f af2e 	bne.w	800b700 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	4618      	mov	r0, r3
 800b8aa:	f008 f979 	bl	8013ba0 <USB_ReadInterrupts>
 800b8ae:	4603      	mov	r3, r0
 800b8b0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b8b4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b8b8:	d122      	bne.n	800b900 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800b8ba:	69fb      	ldr	r3, [r7, #28]
 800b8bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b8c0:	685b      	ldr	r3, [r3, #4]
 800b8c2:	69fa      	ldr	r2, [r7, #28]
 800b8c4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b8c8:	f023 0301 	bic.w	r3, r3, #1
 800b8cc:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800b8d4:	2b01      	cmp	r3, #1
 800b8d6:	d108      	bne.n	800b8ea <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	2200      	movs	r2, #0
 800b8dc:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800b8e0:	2100      	movs	r1, #0
 800b8e2:	6878      	ldr	r0, [r7, #4]
 800b8e4:	f000 fef4 	bl	800c6d0 <HAL_PCDEx_LPM_Callback>
 800b8e8:	e002      	b.n	800b8f0 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800b8ea:	6878      	ldr	r0, [r7, #4]
 800b8ec:	f00a ffca 	bl	8016884 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	695a      	ldr	r2, [r3, #20]
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800b8fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	4618      	mov	r0, r3
 800b906:	f008 f94b 	bl	8013ba0 <USB_ReadInterrupts>
 800b90a:	4603      	mov	r3, r0
 800b90c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b910:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b914:	d112      	bne.n	800b93c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800b916:	69fb      	ldr	r3, [r7, #28]
 800b918:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b91c:	689b      	ldr	r3, [r3, #8]
 800b91e:	f003 0301 	and.w	r3, r3, #1
 800b922:	2b01      	cmp	r3, #1
 800b924:	d102      	bne.n	800b92c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800b926:	6878      	ldr	r0, [r7, #4]
 800b928:	f00a ff86 	bl	8016838 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	695a      	ldr	r2, [r3, #20]
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800b93a:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	4618      	mov	r0, r3
 800b942:	f008 f92d 	bl	8013ba0 <USB_ReadInterrupts>
 800b946:	4603      	mov	r3, r0
 800b948:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b94c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b950:	d121      	bne.n	800b996 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	695a      	ldr	r2, [r3, #20]
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 800b960:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d111      	bne.n	800b990 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	2201      	movs	r2, #1
 800b970:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b97a:	089b      	lsrs	r3, r3, #2
 800b97c:	f003 020f 	and.w	r2, r3, #15
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800b986:	2101      	movs	r1, #1
 800b988:	6878      	ldr	r0, [r7, #4]
 800b98a:	f000 fea1 	bl	800c6d0 <HAL_PCDEx_LPM_Callback>
 800b98e:	e002      	b.n	800b996 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800b990:	6878      	ldr	r0, [r7, #4]
 800b992:	f00a ff51 	bl	8016838 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	4618      	mov	r0, r3
 800b99c:	f008 f900 	bl	8013ba0 <USB_ReadInterrupts>
 800b9a0:	4603      	mov	r3, r0
 800b9a2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b9a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b9aa:	f040 80b7 	bne.w	800bb1c <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800b9ae:	69fb      	ldr	r3, [r7, #28]
 800b9b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b9b4:	685b      	ldr	r3, [r3, #4]
 800b9b6:	69fa      	ldr	r2, [r7, #28]
 800b9b8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b9bc:	f023 0301 	bic.w	r3, r3, #1
 800b9c0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	2110      	movs	r1, #16
 800b9c8:	4618      	mov	r0, r3
 800b9ca:	f007 f9c7 	bl	8012d5c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b9ce:	2300      	movs	r3, #0
 800b9d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b9d2:	e046      	b.n	800ba62 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800b9d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9d6:	015a      	lsls	r2, r3, #5
 800b9d8:	69fb      	ldr	r3, [r7, #28]
 800b9da:	4413      	add	r3, r2
 800b9dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b9e0:	461a      	mov	r2, r3
 800b9e2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800b9e6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b9e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9ea:	015a      	lsls	r2, r3, #5
 800b9ec:	69fb      	ldr	r3, [r7, #28]
 800b9ee:	4413      	add	r3, r2
 800b9f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b9f8:	0151      	lsls	r1, r2, #5
 800b9fa:	69fa      	ldr	r2, [r7, #28]
 800b9fc:	440a      	add	r2, r1
 800b9fe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ba02:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800ba06:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800ba08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba0a:	015a      	lsls	r2, r3, #5
 800ba0c:	69fb      	ldr	r3, [r7, #28]
 800ba0e:	4413      	add	r3, r2
 800ba10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ba14:	461a      	mov	r2, r3
 800ba16:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800ba1a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800ba1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba1e:	015a      	lsls	r2, r3, #5
 800ba20:	69fb      	ldr	r3, [r7, #28]
 800ba22:	4413      	add	r3, r2
 800ba24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ba2c:	0151      	lsls	r1, r2, #5
 800ba2e:	69fa      	ldr	r2, [r7, #28]
 800ba30:	440a      	add	r2, r1
 800ba32:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ba36:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800ba3a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800ba3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba3e:	015a      	lsls	r2, r3, #5
 800ba40:	69fb      	ldr	r3, [r7, #28]
 800ba42:	4413      	add	r3, r2
 800ba44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ba4c:	0151      	lsls	r1, r2, #5
 800ba4e:	69fa      	ldr	r2, [r7, #28]
 800ba50:	440a      	add	r2, r1
 800ba52:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ba56:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800ba5a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ba5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba5e:	3301      	adds	r3, #1
 800ba60:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	791b      	ldrb	r3, [r3, #4]
 800ba66:	461a      	mov	r2, r3
 800ba68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba6a:	4293      	cmp	r3, r2
 800ba6c:	d3b2      	bcc.n	800b9d4 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800ba6e:	69fb      	ldr	r3, [r7, #28]
 800ba70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ba74:	69db      	ldr	r3, [r3, #28]
 800ba76:	69fa      	ldr	r2, [r7, #28]
 800ba78:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ba7c:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800ba80:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	7bdb      	ldrb	r3, [r3, #15]
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d016      	beq.n	800bab8 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800ba8a:	69fb      	ldr	r3, [r7, #28]
 800ba8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ba90:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ba94:	69fa      	ldr	r2, [r7, #28]
 800ba96:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ba9a:	f043 030b 	orr.w	r3, r3, #11
 800ba9e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800baa2:	69fb      	ldr	r3, [r7, #28]
 800baa4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800baa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800baaa:	69fa      	ldr	r2, [r7, #28]
 800baac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bab0:	f043 030b 	orr.w	r3, r3, #11
 800bab4:	6453      	str	r3, [r2, #68]	@ 0x44
 800bab6:	e015      	b.n	800bae4 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800bab8:	69fb      	ldr	r3, [r7, #28]
 800baba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800babe:	695a      	ldr	r2, [r3, #20]
 800bac0:	69fb      	ldr	r3, [r7, #28]
 800bac2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bac6:	4619      	mov	r1, r3
 800bac8:	f242 032b 	movw	r3, #8235	@ 0x202b
 800bacc:	4313      	orrs	r3, r2
 800bace:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800bad0:	69fb      	ldr	r3, [r7, #28]
 800bad2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bad6:	691b      	ldr	r3, [r3, #16]
 800bad8:	69fa      	ldr	r2, [r7, #28]
 800bada:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bade:	f043 030b 	orr.w	r3, r3, #11
 800bae2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800bae4:	69fb      	ldr	r3, [r7, #28]
 800bae6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	69fa      	ldr	r2, [r7, #28]
 800baee:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800baf2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800baf6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	6818      	ldr	r0, [r3, #0]
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800bb06:	461a      	mov	r2, r3
 800bb08:	f008 f910 	bl	8013d2c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	695a      	ldr	r2, [r3, #20]
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800bb1a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	4618      	mov	r0, r3
 800bb22:	f008 f83d 	bl	8013ba0 <USB_ReadInterrupts>
 800bb26:	4603      	mov	r3, r0
 800bb28:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800bb2c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bb30:	d123      	bne.n	800bb7a <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	4618      	mov	r0, r3
 800bb38:	f008 f8d4 	bl	8013ce4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	4618      	mov	r0, r3
 800bb42:	f007 f984 	bl	8012e4e <USB_GetDevSpeed>
 800bb46:	4603      	mov	r3, r0
 800bb48:	461a      	mov	r2, r3
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	681c      	ldr	r4, [r3, #0]
 800bb52:	f001 fd9d 	bl	800d690 <HAL_RCC_GetHCLKFreq>
 800bb56:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800bb5c:	461a      	mov	r2, r3
 800bb5e:	4620      	mov	r0, r4
 800bb60:	f006 fe8e 	bl	8012880 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800bb64:	6878      	ldr	r0, [r7, #4]
 800bb66:	f00a fe3e 	bl	80167e6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	695a      	ldr	r2, [r3, #20]
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800bb78:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	4618      	mov	r0, r3
 800bb80:	f008 f80e 	bl	8013ba0 <USB_ReadInterrupts>
 800bb84:	4603      	mov	r3, r0
 800bb86:	f003 0308 	and.w	r3, r3, #8
 800bb8a:	2b08      	cmp	r3, #8
 800bb8c:	d10a      	bne.n	800bba4 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800bb8e:	6878      	ldr	r0, [r7, #4]
 800bb90:	f00a fe1b 	bl	80167ca <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	695a      	ldr	r2, [r3, #20]
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	f002 0208 	and.w	r2, r2, #8
 800bba2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	4618      	mov	r0, r3
 800bbaa:	f007 fff9 	bl	8013ba0 <USB_ReadInterrupts>
 800bbae:	4603      	mov	r3, r0
 800bbb0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bbb4:	2b80      	cmp	r3, #128	@ 0x80
 800bbb6:	d123      	bne.n	800bc00 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800bbb8:	6a3b      	ldr	r3, [r7, #32]
 800bbba:	699b      	ldr	r3, [r3, #24]
 800bbbc:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800bbc0:	6a3b      	ldr	r3, [r7, #32]
 800bbc2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800bbc4:	2301      	movs	r3, #1
 800bbc6:	627b      	str	r3, [r7, #36]	@ 0x24
 800bbc8:	e014      	b.n	800bbf4 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800bbca:	6879      	ldr	r1, [r7, #4]
 800bbcc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bbce:	4613      	mov	r3, r2
 800bbd0:	00db      	lsls	r3, r3, #3
 800bbd2:	4413      	add	r3, r2
 800bbd4:	009b      	lsls	r3, r3, #2
 800bbd6:	440b      	add	r3, r1
 800bbd8:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800bbdc:	781b      	ldrb	r3, [r3, #0]
 800bbde:	2b01      	cmp	r3, #1
 800bbe0:	d105      	bne.n	800bbee <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800bbe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbe4:	b2db      	uxtb	r3, r3
 800bbe6:	4619      	mov	r1, r3
 800bbe8:	6878      	ldr	r0, [r7, #4]
 800bbea:	f000 fb0a 	bl	800c202 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800bbee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbf0:	3301      	adds	r3, #1
 800bbf2:	627b      	str	r3, [r7, #36]	@ 0x24
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	791b      	ldrb	r3, [r3, #4]
 800bbf8:	461a      	mov	r2, r3
 800bbfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbfc:	4293      	cmp	r3, r2
 800bbfe:	d3e4      	bcc.n	800bbca <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	4618      	mov	r0, r3
 800bc06:	f007 ffcb 	bl	8013ba0 <USB_ReadInterrupts>
 800bc0a:	4603      	mov	r3, r0
 800bc0c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800bc10:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bc14:	d13c      	bne.n	800bc90 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800bc16:	2301      	movs	r3, #1
 800bc18:	627b      	str	r3, [r7, #36]	@ 0x24
 800bc1a:	e02b      	b.n	800bc74 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800bc1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc1e:	015a      	lsls	r2, r3, #5
 800bc20:	69fb      	ldr	r3, [r7, #28]
 800bc22:	4413      	add	r3, r2
 800bc24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800bc2c:	6879      	ldr	r1, [r7, #4]
 800bc2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bc30:	4613      	mov	r3, r2
 800bc32:	00db      	lsls	r3, r3, #3
 800bc34:	4413      	add	r3, r2
 800bc36:	009b      	lsls	r3, r3, #2
 800bc38:	440b      	add	r3, r1
 800bc3a:	3318      	adds	r3, #24
 800bc3c:	781b      	ldrb	r3, [r3, #0]
 800bc3e:	2b01      	cmp	r3, #1
 800bc40:	d115      	bne.n	800bc6e <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800bc42:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	da12      	bge.n	800bc6e <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800bc48:	6879      	ldr	r1, [r7, #4]
 800bc4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bc4c:	4613      	mov	r3, r2
 800bc4e:	00db      	lsls	r3, r3, #3
 800bc50:	4413      	add	r3, r2
 800bc52:	009b      	lsls	r3, r3, #2
 800bc54:	440b      	add	r3, r1
 800bc56:	3317      	adds	r3, #23
 800bc58:	2201      	movs	r2, #1
 800bc5a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800bc5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc5e:	b2db      	uxtb	r3, r3
 800bc60:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800bc64:	b2db      	uxtb	r3, r3
 800bc66:	4619      	mov	r1, r3
 800bc68:	6878      	ldr	r0, [r7, #4]
 800bc6a:	f000 faca 	bl	800c202 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800bc6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc70:	3301      	adds	r3, #1
 800bc72:	627b      	str	r3, [r7, #36]	@ 0x24
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	791b      	ldrb	r3, [r3, #4]
 800bc78:	461a      	mov	r2, r3
 800bc7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc7c:	4293      	cmp	r3, r2
 800bc7e:	d3cd      	bcc.n	800bc1c <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	695a      	ldr	r2, [r3, #20]
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800bc8e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	4618      	mov	r0, r3
 800bc96:	f007 ff83 	bl	8013ba0 <USB_ReadInterrupts>
 800bc9a:	4603      	mov	r3, r0
 800bc9c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800bca0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800bca4:	d156      	bne.n	800bd54 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800bca6:	2301      	movs	r3, #1
 800bca8:	627b      	str	r3, [r7, #36]	@ 0x24
 800bcaa:	e045      	b.n	800bd38 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800bcac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcae:	015a      	lsls	r2, r3, #5
 800bcb0:	69fb      	ldr	r3, [r7, #28]
 800bcb2:	4413      	add	r3, r2
 800bcb4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800bcbc:	6879      	ldr	r1, [r7, #4]
 800bcbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bcc0:	4613      	mov	r3, r2
 800bcc2:	00db      	lsls	r3, r3, #3
 800bcc4:	4413      	add	r3, r2
 800bcc6:	009b      	lsls	r3, r3, #2
 800bcc8:	440b      	add	r3, r1
 800bcca:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800bcce:	781b      	ldrb	r3, [r3, #0]
 800bcd0:	2b01      	cmp	r3, #1
 800bcd2:	d12e      	bne.n	800bd32 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800bcd4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	da2b      	bge.n	800bd32 <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 800bcda:	69bb      	ldr	r3, [r7, #24]
 800bcdc:	0c1a      	lsrs	r2, r3, #16
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800bce4:	4053      	eors	r3, r2
 800bce6:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d121      	bne.n	800bd32 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800bcee:	6879      	ldr	r1, [r7, #4]
 800bcf0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bcf2:	4613      	mov	r3, r2
 800bcf4:	00db      	lsls	r3, r3, #3
 800bcf6:	4413      	add	r3, r2
 800bcf8:	009b      	lsls	r3, r3, #2
 800bcfa:	440b      	add	r3, r1
 800bcfc:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800bd00:	2201      	movs	r2, #1
 800bd02:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800bd04:	6a3b      	ldr	r3, [r7, #32]
 800bd06:	699b      	ldr	r3, [r3, #24]
 800bd08:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800bd0c:	6a3b      	ldr	r3, [r7, #32]
 800bd0e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800bd10:	6a3b      	ldr	r3, [r7, #32]
 800bd12:	695b      	ldr	r3, [r3, #20]
 800bd14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d10a      	bne.n	800bd32 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800bd1c:	69fb      	ldr	r3, [r7, #28]
 800bd1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bd22:	685b      	ldr	r3, [r3, #4]
 800bd24:	69fa      	ldr	r2, [r7, #28]
 800bd26:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bd2a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800bd2e:	6053      	str	r3, [r2, #4]
            break;
 800bd30:	e008      	b.n	800bd44 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800bd32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd34:	3301      	adds	r3, #1
 800bd36:	627b      	str	r3, [r7, #36]	@ 0x24
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	791b      	ldrb	r3, [r3, #4]
 800bd3c:	461a      	mov	r2, r3
 800bd3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd40:	4293      	cmp	r3, r2
 800bd42:	d3b3      	bcc.n	800bcac <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	695a      	ldr	r2, [r3, #20]
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800bd52:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	4618      	mov	r0, r3
 800bd5a:	f007 ff21 	bl	8013ba0 <USB_ReadInterrupts>
 800bd5e:	4603      	mov	r3, r0
 800bd60:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800bd64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bd68:	d10a      	bne.n	800bd80 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800bd6a:	6878      	ldr	r0, [r7, #4]
 800bd6c:	f00a fdbc 	bl	80168e8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	695a      	ldr	r2, [r3, #20]
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800bd7e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	4618      	mov	r0, r3
 800bd86:	f007 ff0b 	bl	8013ba0 <USB_ReadInterrupts>
 800bd8a:	4603      	mov	r3, r0
 800bd8c:	f003 0304 	and.w	r3, r3, #4
 800bd90:	2b04      	cmp	r3, #4
 800bd92:	d115      	bne.n	800bdc0 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	685b      	ldr	r3, [r3, #4]
 800bd9a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800bd9c:	69bb      	ldr	r3, [r7, #24]
 800bd9e:	f003 0304 	and.w	r3, r3, #4
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d002      	beq.n	800bdac <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800bda6:	6878      	ldr	r0, [r7, #4]
 800bda8:	f00a fdac 	bl	8016904 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	6859      	ldr	r1, [r3, #4]
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	69ba      	ldr	r2, [r7, #24]
 800bdb8:	430a      	orrs	r2, r1
 800bdba:	605a      	str	r2, [r3, #4]
 800bdbc:	e000      	b.n	800bdc0 <HAL_PCD_IRQHandler+0x996>
      return;
 800bdbe:	bf00      	nop
    }
  }
}
 800bdc0:	3734      	adds	r7, #52	@ 0x34
 800bdc2:	46bd      	mov	sp, r7
 800bdc4:	bd90      	pop	{r4, r7, pc}

0800bdc6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800bdc6:	b580      	push	{r7, lr}
 800bdc8:	b082      	sub	sp, #8
 800bdca:	af00      	add	r7, sp, #0
 800bdcc:	6078      	str	r0, [r7, #4]
 800bdce:	460b      	mov	r3, r1
 800bdd0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800bdd8:	2b01      	cmp	r3, #1
 800bdda:	d101      	bne.n	800bde0 <HAL_PCD_SetAddress+0x1a>
 800bddc:	2302      	movs	r3, #2
 800bdde:	e012      	b.n	800be06 <HAL_PCD_SetAddress+0x40>
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	2201      	movs	r2, #1
 800bde4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	78fa      	ldrb	r2, [r7, #3]
 800bdec:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	78fa      	ldrb	r2, [r7, #3]
 800bdf4:	4611      	mov	r1, r2
 800bdf6:	4618      	mov	r0, r3
 800bdf8:	f007 fe6a 	bl	8013ad0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	2200      	movs	r2, #0
 800be00:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800be04:	2300      	movs	r3, #0
}
 800be06:	4618      	mov	r0, r3
 800be08:	3708      	adds	r7, #8
 800be0a:	46bd      	mov	sp, r7
 800be0c:	bd80      	pop	{r7, pc}

0800be0e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800be0e:	b580      	push	{r7, lr}
 800be10:	b084      	sub	sp, #16
 800be12:	af00      	add	r7, sp, #0
 800be14:	6078      	str	r0, [r7, #4]
 800be16:	4608      	mov	r0, r1
 800be18:	4611      	mov	r1, r2
 800be1a:	461a      	mov	r2, r3
 800be1c:	4603      	mov	r3, r0
 800be1e:	70fb      	strb	r3, [r7, #3]
 800be20:	460b      	mov	r3, r1
 800be22:	803b      	strh	r3, [r7, #0]
 800be24:	4613      	mov	r3, r2
 800be26:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800be28:	2300      	movs	r3, #0
 800be2a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800be2c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800be30:	2b00      	cmp	r3, #0
 800be32:	da0f      	bge.n	800be54 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800be34:	78fb      	ldrb	r3, [r7, #3]
 800be36:	f003 020f 	and.w	r2, r3, #15
 800be3a:	4613      	mov	r3, r2
 800be3c:	00db      	lsls	r3, r3, #3
 800be3e:	4413      	add	r3, r2
 800be40:	009b      	lsls	r3, r3, #2
 800be42:	3310      	adds	r3, #16
 800be44:	687a      	ldr	r2, [r7, #4]
 800be46:	4413      	add	r3, r2
 800be48:	3304      	adds	r3, #4
 800be4a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	2201      	movs	r2, #1
 800be50:	705a      	strb	r2, [r3, #1]
 800be52:	e00f      	b.n	800be74 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800be54:	78fb      	ldrb	r3, [r7, #3]
 800be56:	f003 020f 	and.w	r2, r3, #15
 800be5a:	4613      	mov	r3, r2
 800be5c:	00db      	lsls	r3, r3, #3
 800be5e:	4413      	add	r3, r2
 800be60:	009b      	lsls	r3, r3, #2
 800be62:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800be66:	687a      	ldr	r2, [r7, #4]
 800be68:	4413      	add	r3, r2
 800be6a:	3304      	adds	r3, #4
 800be6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	2200      	movs	r2, #0
 800be72:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800be74:	78fb      	ldrb	r3, [r7, #3]
 800be76:	f003 030f 	and.w	r3, r3, #15
 800be7a:	b2da      	uxtb	r2, r3
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800be80:	883b      	ldrh	r3, [r7, #0]
 800be82:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	78ba      	ldrb	r2, [r7, #2]
 800be8e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	785b      	ldrb	r3, [r3, #1]
 800be94:	2b00      	cmp	r3, #0
 800be96:	d004      	beq.n	800bea2 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	781b      	ldrb	r3, [r3, #0]
 800be9c:	461a      	mov	r2, r3
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800bea2:	78bb      	ldrb	r3, [r7, #2]
 800bea4:	2b02      	cmp	r3, #2
 800bea6:	d102      	bne.n	800beae <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	2200      	movs	r2, #0
 800beac:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800beb4:	2b01      	cmp	r3, #1
 800beb6:	d101      	bne.n	800bebc <HAL_PCD_EP_Open+0xae>
 800beb8:	2302      	movs	r3, #2
 800beba:	e00e      	b.n	800beda <HAL_PCD_EP_Open+0xcc>
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	2201      	movs	r2, #1
 800bec0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	68f9      	ldr	r1, [r7, #12]
 800beca:	4618      	mov	r0, r3
 800becc:	f006 ffe4 	bl	8012e98 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	2200      	movs	r2, #0
 800bed4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800bed8:	7afb      	ldrb	r3, [r7, #11]
}
 800beda:	4618      	mov	r0, r3
 800bedc:	3710      	adds	r7, #16
 800bede:	46bd      	mov	sp, r7
 800bee0:	bd80      	pop	{r7, pc}

0800bee2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800bee2:	b580      	push	{r7, lr}
 800bee4:	b084      	sub	sp, #16
 800bee6:	af00      	add	r7, sp, #0
 800bee8:	6078      	str	r0, [r7, #4]
 800beea:	460b      	mov	r3, r1
 800beec:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800beee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	da0f      	bge.n	800bf16 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800bef6:	78fb      	ldrb	r3, [r7, #3]
 800bef8:	f003 020f 	and.w	r2, r3, #15
 800befc:	4613      	mov	r3, r2
 800befe:	00db      	lsls	r3, r3, #3
 800bf00:	4413      	add	r3, r2
 800bf02:	009b      	lsls	r3, r3, #2
 800bf04:	3310      	adds	r3, #16
 800bf06:	687a      	ldr	r2, [r7, #4]
 800bf08:	4413      	add	r3, r2
 800bf0a:	3304      	adds	r3, #4
 800bf0c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	2201      	movs	r2, #1
 800bf12:	705a      	strb	r2, [r3, #1]
 800bf14:	e00f      	b.n	800bf36 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800bf16:	78fb      	ldrb	r3, [r7, #3]
 800bf18:	f003 020f 	and.w	r2, r3, #15
 800bf1c:	4613      	mov	r3, r2
 800bf1e:	00db      	lsls	r3, r3, #3
 800bf20:	4413      	add	r3, r2
 800bf22:	009b      	lsls	r3, r3, #2
 800bf24:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800bf28:	687a      	ldr	r2, [r7, #4]
 800bf2a:	4413      	add	r3, r2
 800bf2c:	3304      	adds	r3, #4
 800bf2e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	2200      	movs	r2, #0
 800bf34:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800bf36:	78fb      	ldrb	r3, [r7, #3]
 800bf38:	f003 030f 	and.w	r3, r3, #15
 800bf3c:	b2da      	uxtb	r2, r3
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800bf48:	2b01      	cmp	r3, #1
 800bf4a:	d101      	bne.n	800bf50 <HAL_PCD_EP_Close+0x6e>
 800bf4c:	2302      	movs	r3, #2
 800bf4e:	e00e      	b.n	800bf6e <HAL_PCD_EP_Close+0x8c>
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	2201      	movs	r2, #1
 800bf54:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	68f9      	ldr	r1, [r7, #12]
 800bf5e:	4618      	mov	r0, r3
 800bf60:	f007 f822 	bl	8012fa8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	2200      	movs	r2, #0
 800bf68:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800bf6c:	2300      	movs	r3, #0
}
 800bf6e:	4618      	mov	r0, r3
 800bf70:	3710      	adds	r7, #16
 800bf72:	46bd      	mov	sp, r7
 800bf74:	bd80      	pop	{r7, pc}

0800bf76 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800bf76:	b580      	push	{r7, lr}
 800bf78:	b086      	sub	sp, #24
 800bf7a:	af00      	add	r7, sp, #0
 800bf7c:	60f8      	str	r0, [r7, #12]
 800bf7e:	607a      	str	r2, [r7, #4]
 800bf80:	603b      	str	r3, [r7, #0]
 800bf82:	460b      	mov	r3, r1
 800bf84:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800bf86:	7afb      	ldrb	r3, [r7, #11]
 800bf88:	f003 020f 	and.w	r2, r3, #15
 800bf8c:	4613      	mov	r3, r2
 800bf8e:	00db      	lsls	r3, r3, #3
 800bf90:	4413      	add	r3, r2
 800bf92:	009b      	lsls	r3, r3, #2
 800bf94:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800bf98:	68fa      	ldr	r2, [r7, #12]
 800bf9a:	4413      	add	r3, r2
 800bf9c:	3304      	adds	r3, #4
 800bf9e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800bfa0:	697b      	ldr	r3, [r7, #20]
 800bfa2:	687a      	ldr	r2, [r7, #4]
 800bfa4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800bfa6:	697b      	ldr	r3, [r7, #20]
 800bfa8:	683a      	ldr	r2, [r7, #0]
 800bfaa:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800bfac:	697b      	ldr	r3, [r7, #20]
 800bfae:	2200      	movs	r2, #0
 800bfb0:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800bfb2:	697b      	ldr	r3, [r7, #20]
 800bfb4:	2200      	movs	r2, #0
 800bfb6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800bfb8:	7afb      	ldrb	r3, [r7, #11]
 800bfba:	f003 030f 	and.w	r3, r3, #15
 800bfbe:	b2da      	uxtb	r2, r3
 800bfc0:	697b      	ldr	r3, [r7, #20]
 800bfc2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	799b      	ldrb	r3, [r3, #6]
 800bfc8:	2b01      	cmp	r3, #1
 800bfca:	d102      	bne.n	800bfd2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800bfcc:	687a      	ldr	r2, [r7, #4]
 800bfce:	697b      	ldr	r3, [r7, #20]
 800bfd0:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	6818      	ldr	r0, [r3, #0]
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	799b      	ldrb	r3, [r3, #6]
 800bfda:	461a      	mov	r2, r3
 800bfdc:	6979      	ldr	r1, [r7, #20]
 800bfde:	f007 f8bf 	bl	8013160 <USB_EPStartXfer>

  return HAL_OK;
 800bfe2:	2300      	movs	r3, #0
}
 800bfe4:	4618      	mov	r0, r3
 800bfe6:	3718      	adds	r7, #24
 800bfe8:	46bd      	mov	sp, r7
 800bfea:	bd80      	pop	{r7, pc}

0800bfec <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800bfec:	b480      	push	{r7}
 800bfee:	b083      	sub	sp, #12
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	6078      	str	r0, [r7, #4]
 800bff4:	460b      	mov	r3, r1
 800bff6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800bff8:	78fb      	ldrb	r3, [r7, #3]
 800bffa:	f003 020f 	and.w	r2, r3, #15
 800bffe:	6879      	ldr	r1, [r7, #4]
 800c000:	4613      	mov	r3, r2
 800c002:	00db      	lsls	r3, r3, #3
 800c004:	4413      	add	r3, r2
 800c006:	009b      	lsls	r3, r3, #2
 800c008:	440b      	add	r3, r1
 800c00a:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800c00e:	681b      	ldr	r3, [r3, #0]
}
 800c010:	4618      	mov	r0, r3
 800c012:	370c      	adds	r7, #12
 800c014:	46bd      	mov	sp, r7
 800c016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c01a:	4770      	bx	lr

0800c01c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800c01c:	b580      	push	{r7, lr}
 800c01e:	b086      	sub	sp, #24
 800c020:	af00      	add	r7, sp, #0
 800c022:	60f8      	str	r0, [r7, #12]
 800c024:	607a      	str	r2, [r7, #4]
 800c026:	603b      	str	r3, [r7, #0]
 800c028:	460b      	mov	r3, r1
 800c02a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c02c:	7afb      	ldrb	r3, [r7, #11]
 800c02e:	f003 020f 	and.w	r2, r3, #15
 800c032:	4613      	mov	r3, r2
 800c034:	00db      	lsls	r3, r3, #3
 800c036:	4413      	add	r3, r2
 800c038:	009b      	lsls	r3, r3, #2
 800c03a:	3310      	adds	r3, #16
 800c03c:	68fa      	ldr	r2, [r7, #12]
 800c03e:	4413      	add	r3, r2
 800c040:	3304      	adds	r3, #4
 800c042:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800c044:	697b      	ldr	r3, [r7, #20]
 800c046:	687a      	ldr	r2, [r7, #4]
 800c048:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800c04a:	697b      	ldr	r3, [r7, #20]
 800c04c:	683a      	ldr	r2, [r7, #0]
 800c04e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800c050:	697b      	ldr	r3, [r7, #20]
 800c052:	2200      	movs	r2, #0
 800c054:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800c056:	697b      	ldr	r3, [r7, #20]
 800c058:	2201      	movs	r2, #1
 800c05a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c05c:	7afb      	ldrb	r3, [r7, #11]
 800c05e:	f003 030f 	and.w	r3, r3, #15
 800c062:	b2da      	uxtb	r2, r3
 800c064:	697b      	ldr	r3, [r7, #20]
 800c066:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	799b      	ldrb	r3, [r3, #6]
 800c06c:	2b01      	cmp	r3, #1
 800c06e:	d102      	bne.n	800c076 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800c070:	687a      	ldr	r2, [r7, #4]
 800c072:	697b      	ldr	r3, [r7, #20]
 800c074:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	6818      	ldr	r0, [r3, #0]
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	799b      	ldrb	r3, [r3, #6]
 800c07e:	461a      	mov	r2, r3
 800c080:	6979      	ldr	r1, [r7, #20]
 800c082:	f007 f86d 	bl	8013160 <USB_EPStartXfer>

  return HAL_OK;
 800c086:	2300      	movs	r3, #0
}
 800c088:	4618      	mov	r0, r3
 800c08a:	3718      	adds	r7, #24
 800c08c:	46bd      	mov	sp, r7
 800c08e:	bd80      	pop	{r7, pc}

0800c090 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800c090:	b580      	push	{r7, lr}
 800c092:	b084      	sub	sp, #16
 800c094:	af00      	add	r7, sp, #0
 800c096:	6078      	str	r0, [r7, #4]
 800c098:	460b      	mov	r3, r1
 800c09a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800c09c:	78fb      	ldrb	r3, [r7, #3]
 800c09e:	f003 030f 	and.w	r3, r3, #15
 800c0a2:	687a      	ldr	r2, [r7, #4]
 800c0a4:	7912      	ldrb	r2, [r2, #4]
 800c0a6:	4293      	cmp	r3, r2
 800c0a8:	d901      	bls.n	800c0ae <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800c0aa:	2301      	movs	r3, #1
 800c0ac:	e04f      	b.n	800c14e <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800c0ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	da0f      	bge.n	800c0d6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c0b6:	78fb      	ldrb	r3, [r7, #3]
 800c0b8:	f003 020f 	and.w	r2, r3, #15
 800c0bc:	4613      	mov	r3, r2
 800c0be:	00db      	lsls	r3, r3, #3
 800c0c0:	4413      	add	r3, r2
 800c0c2:	009b      	lsls	r3, r3, #2
 800c0c4:	3310      	adds	r3, #16
 800c0c6:	687a      	ldr	r2, [r7, #4]
 800c0c8:	4413      	add	r3, r2
 800c0ca:	3304      	adds	r3, #4
 800c0cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	2201      	movs	r2, #1
 800c0d2:	705a      	strb	r2, [r3, #1]
 800c0d4:	e00d      	b.n	800c0f2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800c0d6:	78fa      	ldrb	r2, [r7, #3]
 800c0d8:	4613      	mov	r3, r2
 800c0da:	00db      	lsls	r3, r3, #3
 800c0dc:	4413      	add	r3, r2
 800c0de:	009b      	lsls	r3, r3, #2
 800c0e0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800c0e4:	687a      	ldr	r2, [r7, #4]
 800c0e6:	4413      	add	r3, r2
 800c0e8:	3304      	adds	r3, #4
 800c0ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	2200      	movs	r2, #0
 800c0f0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	2201      	movs	r2, #1
 800c0f6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c0f8:	78fb      	ldrb	r3, [r7, #3]
 800c0fa:	f003 030f 	and.w	r3, r3, #15
 800c0fe:	b2da      	uxtb	r2, r3
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800c10a:	2b01      	cmp	r3, #1
 800c10c:	d101      	bne.n	800c112 <HAL_PCD_EP_SetStall+0x82>
 800c10e:	2302      	movs	r3, #2
 800c110:	e01d      	b.n	800c14e <HAL_PCD_EP_SetStall+0xbe>
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	2201      	movs	r2, #1
 800c116:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	68f9      	ldr	r1, [r7, #12]
 800c120:	4618      	mov	r0, r3
 800c122:	f007 fc01 	bl	8013928 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800c126:	78fb      	ldrb	r3, [r7, #3]
 800c128:	f003 030f 	and.w	r3, r3, #15
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d109      	bne.n	800c144 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	6818      	ldr	r0, [r3, #0]
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	7999      	ldrb	r1, [r3, #6]
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800c13e:	461a      	mov	r2, r3
 800c140:	f007 fdf4 	bl	8013d2c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	2200      	movs	r2, #0
 800c148:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800c14c:	2300      	movs	r3, #0
}
 800c14e:	4618      	mov	r0, r3
 800c150:	3710      	adds	r7, #16
 800c152:	46bd      	mov	sp, r7
 800c154:	bd80      	pop	{r7, pc}

0800c156 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800c156:	b580      	push	{r7, lr}
 800c158:	b084      	sub	sp, #16
 800c15a:	af00      	add	r7, sp, #0
 800c15c:	6078      	str	r0, [r7, #4]
 800c15e:	460b      	mov	r3, r1
 800c160:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800c162:	78fb      	ldrb	r3, [r7, #3]
 800c164:	f003 030f 	and.w	r3, r3, #15
 800c168:	687a      	ldr	r2, [r7, #4]
 800c16a:	7912      	ldrb	r2, [r2, #4]
 800c16c:	4293      	cmp	r3, r2
 800c16e:	d901      	bls.n	800c174 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800c170:	2301      	movs	r3, #1
 800c172:	e042      	b.n	800c1fa <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800c174:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c178:	2b00      	cmp	r3, #0
 800c17a:	da0f      	bge.n	800c19c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c17c:	78fb      	ldrb	r3, [r7, #3]
 800c17e:	f003 020f 	and.w	r2, r3, #15
 800c182:	4613      	mov	r3, r2
 800c184:	00db      	lsls	r3, r3, #3
 800c186:	4413      	add	r3, r2
 800c188:	009b      	lsls	r3, r3, #2
 800c18a:	3310      	adds	r3, #16
 800c18c:	687a      	ldr	r2, [r7, #4]
 800c18e:	4413      	add	r3, r2
 800c190:	3304      	adds	r3, #4
 800c192:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	2201      	movs	r2, #1
 800c198:	705a      	strb	r2, [r3, #1]
 800c19a:	e00f      	b.n	800c1bc <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c19c:	78fb      	ldrb	r3, [r7, #3]
 800c19e:	f003 020f 	and.w	r2, r3, #15
 800c1a2:	4613      	mov	r3, r2
 800c1a4:	00db      	lsls	r3, r3, #3
 800c1a6:	4413      	add	r3, r2
 800c1a8:	009b      	lsls	r3, r3, #2
 800c1aa:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800c1ae:	687a      	ldr	r2, [r7, #4]
 800c1b0:	4413      	add	r3, r2
 800c1b2:	3304      	adds	r3, #4
 800c1b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	2200      	movs	r2, #0
 800c1ba:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	2200      	movs	r2, #0
 800c1c0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c1c2:	78fb      	ldrb	r3, [r7, #3]
 800c1c4:	f003 030f 	and.w	r3, r3, #15
 800c1c8:	b2da      	uxtb	r2, r3
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800c1d4:	2b01      	cmp	r3, #1
 800c1d6:	d101      	bne.n	800c1dc <HAL_PCD_EP_ClrStall+0x86>
 800c1d8:	2302      	movs	r3, #2
 800c1da:	e00e      	b.n	800c1fa <HAL_PCD_EP_ClrStall+0xa4>
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	2201      	movs	r2, #1
 800c1e0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	68f9      	ldr	r1, [r7, #12]
 800c1ea:	4618      	mov	r0, r3
 800c1ec:	f007 fc0a 	bl	8013a04 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	2200      	movs	r2, #0
 800c1f4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800c1f8:	2300      	movs	r3, #0
}
 800c1fa:	4618      	mov	r0, r3
 800c1fc:	3710      	adds	r7, #16
 800c1fe:	46bd      	mov	sp, r7
 800c200:	bd80      	pop	{r7, pc}

0800c202 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800c202:	b580      	push	{r7, lr}
 800c204:	b084      	sub	sp, #16
 800c206:	af00      	add	r7, sp, #0
 800c208:	6078      	str	r0, [r7, #4]
 800c20a:	460b      	mov	r3, r1
 800c20c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800c20e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c212:	2b00      	cmp	r3, #0
 800c214:	da0c      	bge.n	800c230 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c216:	78fb      	ldrb	r3, [r7, #3]
 800c218:	f003 020f 	and.w	r2, r3, #15
 800c21c:	4613      	mov	r3, r2
 800c21e:	00db      	lsls	r3, r3, #3
 800c220:	4413      	add	r3, r2
 800c222:	009b      	lsls	r3, r3, #2
 800c224:	3310      	adds	r3, #16
 800c226:	687a      	ldr	r2, [r7, #4]
 800c228:	4413      	add	r3, r2
 800c22a:	3304      	adds	r3, #4
 800c22c:	60fb      	str	r3, [r7, #12]
 800c22e:	e00c      	b.n	800c24a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c230:	78fb      	ldrb	r3, [r7, #3]
 800c232:	f003 020f 	and.w	r2, r3, #15
 800c236:	4613      	mov	r3, r2
 800c238:	00db      	lsls	r3, r3, #3
 800c23a:	4413      	add	r3, r2
 800c23c:	009b      	lsls	r3, r3, #2
 800c23e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800c242:	687a      	ldr	r2, [r7, #4]
 800c244:	4413      	add	r3, r2
 800c246:	3304      	adds	r3, #4
 800c248:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	68f9      	ldr	r1, [r7, #12]
 800c250:	4618      	mov	r0, r3
 800c252:	f007 fa29 	bl	80136a8 <USB_EPStopXfer>
 800c256:	4603      	mov	r3, r0
 800c258:	72fb      	strb	r3, [r7, #11]

  return ret;
 800c25a:	7afb      	ldrb	r3, [r7, #11]
}
 800c25c:	4618      	mov	r0, r3
 800c25e:	3710      	adds	r7, #16
 800c260:	46bd      	mov	sp, r7
 800c262:	bd80      	pop	{r7, pc}

0800c264 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800c264:	b580      	push	{r7, lr}
 800c266:	b08a      	sub	sp, #40	@ 0x28
 800c268:	af02      	add	r7, sp, #8
 800c26a:	6078      	str	r0, [r7, #4]
 800c26c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c274:	697b      	ldr	r3, [r7, #20]
 800c276:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800c278:	683a      	ldr	r2, [r7, #0]
 800c27a:	4613      	mov	r3, r2
 800c27c:	00db      	lsls	r3, r3, #3
 800c27e:	4413      	add	r3, r2
 800c280:	009b      	lsls	r3, r3, #2
 800c282:	3310      	adds	r3, #16
 800c284:	687a      	ldr	r2, [r7, #4]
 800c286:	4413      	add	r3, r2
 800c288:	3304      	adds	r3, #4
 800c28a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	695a      	ldr	r2, [r3, #20]
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	691b      	ldr	r3, [r3, #16]
 800c294:	429a      	cmp	r2, r3
 800c296:	d901      	bls.n	800c29c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800c298:	2301      	movs	r3, #1
 800c29a:	e06b      	b.n	800c374 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	691a      	ldr	r2, [r3, #16]
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	695b      	ldr	r3, [r3, #20]
 800c2a4:	1ad3      	subs	r3, r2, r3
 800c2a6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	689b      	ldr	r3, [r3, #8]
 800c2ac:	69fa      	ldr	r2, [r7, #28]
 800c2ae:	429a      	cmp	r2, r3
 800c2b0:	d902      	bls.n	800c2b8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	689b      	ldr	r3, [r3, #8]
 800c2b6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800c2b8:	69fb      	ldr	r3, [r7, #28]
 800c2ba:	3303      	adds	r3, #3
 800c2bc:	089b      	lsrs	r3, r3, #2
 800c2be:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800c2c0:	e02a      	b.n	800c318 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	691a      	ldr	r2, [r3, #16]
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	695b      	ldr	r3, [r3, #20]
 800c2ca:	1ad3      	subs	r3, r2, r3
 800c2cc:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	689b      	ldr	r3, [r3, #8]
 800c2d2:	69fa      	ldr	r2, [r7, #28]
 800c2d4:	429a      	cmp	r2, r3
 800c2d6:	d902      	bls.n	800c2de <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	689b      	ldr	r3, [r3, #8]
 800c2dc:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800c2de:	69fb      	ldr	r3, [r7, #28]
 800c2e0:	3303      	adds	r3, #3
 800c2e2:	089b      	lsrs	r3, r3, #2
 800c2e4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	68d9      	ldr	r1, [r3, #12]
 800c2ea:	683b      	ldr	r3, [r7, #0]
 800c2ec:	b2da      	uxtb	r2, r3
 800c2ee:	69fb      	ldr	r3, [r7, #28]
 800c2f0:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800c2f6:	9300      	str	r3, [sp, #0]
 800c2f8:	4603      	mov	r3, r0
 800c2fa:	6978      	ldr	r0, [r7, #20]
 800c2fc:	f007 fa7e 	bl	80137fc <USB_WritePacket>

    ep->xfer_buff  += len;
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	68da      	ldr	r2, [r3, #12]
 800c304:	69fb      	ldr	r3, [r7, #28]
 800c306:	441a      	add	r2, r3
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	695a      	ldr	r2, [r3, #20]
 800c310:	69fb      	ldr	r3, [r7, #28]
 800c312:	441a      	add	r2, r3
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800c318:	683b      	ldr	r3, [r7, #0]
 800c31a:	015a      	lsls	r2, r3, #5
 800c31c:	693b      	ldr	r3, [r7, #16]
 800c31e:	4413      	add	r3, r2
 800c320:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c324:	699b      	ldr	r3, [r3, #24]
 800c326:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800c328:	69ba      	ldr	r2, [r7, #24]
 800c32a:	429a      	cmp	r2, r3
 800c32c:	d809      	bhi.n	800c342 <PCD_WriteEmptyTxFifo+0xde>
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	695a      	ldr	r2, [r3, #20]
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800c336:	429a      	cmp	r2, r3
 800c338:	d203      	bcs.n	800c342 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	691b      	ldr	r3, [r3, #16]
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d1bf      	bne.n	800c2c2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	691a      	ldr	r2, [r3, #16]
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	695b      	ldr	r3, [r3, #20]
 800c34a:	429a      	cmp	r2, r3
 800c34c:	d811      	bhi.n	800c372 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800c34e:	683b      	ldr	r3, [r7, #0]
 800c350:	f003 030f 	and.w	r3, r3, #15
 800c354:	2201      	movs	r2, #1
 800c356:	fa02 f303 	lsl.w	r3, r2, r3
 800c35a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800c35c:	693b      	ldr	r3, [r7, #16]
 800c35e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c362:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c364:	68bb      	ldr	r3, [r7, #8]
 800c366:	43db      	mvns	r3, r3
 800c368:	6939      	ldr	r1, [r7, #16]
 800c36a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c36e:	4013      	ands	r3, r2
 800c370:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800c372:	2300      	movs	r3, #0
}
 800c374:	4618      	mov	r0, r3
 800c376:	3720      	adds	r7, #32
 800c378:	46bd      	mov	sp, r7
 800c37a:	bd80      	pop	{r7, pc}

0800c37c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800c37c:	b580      	push	{r7, lr}
 800c37e:	b088      	sub	sp, #32
 800c380:	af00      	add	r7, sp, #0
 800c382:	6078      	str	r0, [r7, #4]
 800c384:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c38c:	69fb      	ldr	r3, [r7, #28]
 800c38e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800c390:	69fb      	ldr	r3, [r7, #28]
 800c392:	333c      	adds	r3, #60	@ 0x3c
 800c394:	3304      	adds	r3, #4
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800c39a:	683b      	ldr	r3, [r7, #0]
 800c39c:	015a      	lsls	r2, r3, #5
 800c39e:	69bb      	ldr	r3, [r7, #24]
 800c3a0:	4413      	add	r3, r2
 800c3a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c3a6:	689b      	ldr	r3, [r3, #8]
 800c3a8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	799b      	ldrb	r3, [r3, #6]
 800c3ae:	2b01      	cmp	r3, #1
 800c3b0:	d17b      	bne.n	800c4aa <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800c3b2:	693b      	ldr	r3, [r7, #16]
 800c3b4:	f003 0308 	and.w	r3, r3, #8
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d015      	beq.n	800c3e8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c3bc:	697b      	ldr	r3, [r7, #20]
 800c3be:	4a61      	ldr	r2, [pc, #388]	@ (800c544 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800c3c0:	4293      	cmp	r3, r2
 800c3c2:	f240 80b9 	bls.w	800c538 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800c3c6:	693b      	ldr	r3, [r7, #16]
 800c3c8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	f000 80b3 	beq.w	800c538 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800c3d2:	683b      	ldr	r3, [r7, #0]
 800c3d4:	015a      	lsls	r2, r3, #5
 800c3d6:	69bb      	ldr	r3, [r7, #24]
 800c3d8:	4413      	add	r3, r2
 800c3da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c3de:	461a      	mov	r2, r3
 800c3e0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c3e4:	6093      	str	r3, [r2, #8]
 800c3e6:	e0a7      	b.n	800c538 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800c3e8:	693b      	ldr	r3, [r7, #16]
 800c3ea:	f003 0320 	and.w	r3, r3, #32
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d009      	beq.n	800c406 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800c3f2:	683b      	ldr	r3, [r7, #0]
 800c3f4:	015a      	lsls	r2, r3, #5
 800c3f6:	69bb      	ldr	r3, [r7, #24]
 800c3f8:	4413      	add	r3, r2
 800c3fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c3fe:	461a      	mov	r2, r3
 800c400:	2320      	movs	r3, #32
 800c402:	6093      	str	r3, [r2, #8]
 800c404:	e098      	b.n	800c538 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800c406:	693b      	ldr	r3, [r7, #16]
 800c408:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	f040 8093 	bne.w	800c538 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c412:	697b      	ldr	r3, [r7, #20]
 800c414:	4a4b      	ldr	r2, [pc, #300]	@ (800c544 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800c416:	4293      	cmp	r3, r2
 800c418:	d90f      	bls.n	800c43a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800c41a:	693b      	ldr	r3, [r7, #16]
 800c41c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c420:	2b00      	cmp	r3, #0
 800c422:	d00a      	beq.n	800c43a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800c424:	683b      	ldr	r3, [r7, #0]
 800c426:	015a      	lsls	r2, r3, #5
 800c428:	69bb      	ldr	r3, [r7, #24]
 800c42a:	4413      	add	r3, r2
 800c42c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c430:	461a      	mov	r2, r3
 800c432:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c436:	6093      	str	r3, [r2, #8]
 800c438:	e07e      	b.n	800c538 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800c43a:	683a      	ldr	r2, [r7, #0]
 800c43c:	4613      	mov	r3, r2
 800c43e:	00db      	lsls	r3, r3, #3
 800c440:	4413      	add	r3, r2
 800c442:	009b      	lsls	r3, r3, #2
 800c444:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800c448:	687a      	ldr	r2, [r7, #4]
 800c44a:	4413      	add	r3, r2
 800c44c:	3304      	adds	r3, #4
 800c44e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	6a1a      	ldr	r2, [r3, #32]
 800c454:	683b      	ldr	r3, [r7, #0]
 800c456:	0159      	lsls	r1, r3, #5
 800c458:	69bb      	ldr	r3, [r7, #24]
 800c45a:	440b      	add	r3, r1
 800c45c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c460:	691b      	ldr	r3, [r3, #16]
 800c462:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c466:	1ad2      	subs	r2, r2, r3
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800c46c:	683b      	ldr	r3, [r7, #0]
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d114      	bne.n	800c49c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	691b      	ldr	r3, [r3, #16]
 800c476:	2b00      	cmp	r3, #0
 800c478:	d109      	bne.n	800c48e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	6818      	ldr	r0, [r3, #0]
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800c484:	461a      	mov	r2, r3
 800c486:	2101      	movs	r1, #1
 800c488:	f007 fc50 	bl	8013d2c <USB_EP0_OutStart>
 800c48c:	e006      	b.n	800c49c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	68da      	ldr	r2, [r3, #12]
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	695b      	ldr	r3, [r3, #20]
 800c496:	441a      	add	r2, r3
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800c49c:	683b      	ldr	r3, [r7, #0]
 800c49e:	b2db      	uxtb	r3, r3
 800c4a0:	4619      	mov	r1, r3
 800c4a2:	6878      	ldr	r0, [r7, #4]
 800c4a4:	f00a f95c 	bl	8016760 <HAL_PCD_DataOutStageCallback>
 800c4a8:	e046      	b.n	800c538 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800c4aa:	697b      	ldr	r3, [r7, #20]
 800c4ac:	4a26      	ldr	r2, [pc, #152]	@ (800c548 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800c4ae:	4293      	cmp	r3, r2
 800c4b0:	d124      	bne.n	800c4fc <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800c4b2:	693b      	ldr	r3, [r7, #16]
 800c4b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d00a      	beq.n	800c4d2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800c4bc:	683b      	ldr	r3, [r7, #0]
 800c4be:	015a      	lsls	r2, r3, #5
 800c4c0:	69bb      	ldr	r3, [r7, #24]
 800c4c2:	4413      	add	r3, r2
 800c4c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c4c8:	461a      	mov	r2, r3
 800c4ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c4ce:	6093      	str	r3, [r2, #8]
 800c4d0:	e032      	b.n	800c538 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800c4d2:	693b      	ldr	r3, [r7, #16]
 800c4d4:	f003 0320 	and.w	r3, r3, #32
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d008      	beq.n	800c4ee <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800c4dc:	683b      	ldr	r3, [r7, #0]
 800c4de:	015a      	lsls	r2, r3, #5
 800c4e0:	69bb      	ldr	r3, [r7, #24]
 800c4e2:	4413      	add	r3, r2
 800c4e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c4e8:	461a      	mov	r2, r3
 800c4ea:	2320      	movs	r3, #32
 800c4ec:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800c4ee:	683b      	ldr	r3, [r7, #0]
 800c4f0:	b2db      	uxtb	r3, r3
 800c4f2:	4619      	mov	r1, r3
 800c4f4:	6878      	ldr	r0, [r7, #4]
 800c4f6:	f00a f933 	bl	8016760 <HAL_PCD_DataOutStageCallback>
 800c4fa:	e01d      	b.n	800c538 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800c4fc:	683b      	ldr	r3, [r7, #0]
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d114      	bne.n	800c52c <PCD_EP_OutXfrComplete_int+0x1b0>
 800c502:	6879      	ldr	r1, [r7, #4]
 800c504:	683a      	ldr	r2, [r7, #0]
 800c506:	4613      	mov	r3, r2
 800c508:	00db      	lsls	r3, r3, #3
 800c50a:	4413      	add	r3, r2
 800c50c:	009b      	lsls	r3, r3, #2
 800c50e:	440b      	add	r3, r1
 800c510:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	2b00      	cmp	r3, #0
 800c518:	d108      	bne.n	800c52c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	6818      	ldr	r0, [r3, #0]
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800c524:	461a      	mov	r2, r3
 800c526:	2100      	movs	r1, #0
 800c528:	f007 fc00 	bl	8013d2c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800c52c:	683b      	ldr	r3, [r7, #0]
 800c52e:	b2db      	uxtb	r3, r3
 800c530:	4619      	mov	r1, r3
 800c532:	6878      	ldr	r0, [r7, #4]
 800c534:	f00a f914 	bl	8016760 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800c538:	2300      	movs	r3, #0
}
 800c53a:	4618      	mov	r0, r3
 800c53c:	3720      	adds	r7, #32
 800c53e:	46bd      	mov	sp, r7
 800c540:	bd80      	pop	{r7, pc}
 800c542:	bf00      	nop
 800c544:	4f54300a 	.word	0x4f54300a
 800c548:	4f54310a 	.word	0x4f54310a

0800c54c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800c54c:	b580      	push	{r7, lr}
 800c54e:	b086      	sub	sp, #24
 800c550:	af00      	add	r7, sp, #0
 800c552:	6078      	str	r0, [r7, #4]
 800c554:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c55c:	697b      	ldr	r3, [r7, #20]
 800c55e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800c560:	697b      	ldr	r3, [r7, #20]
 800c562:	333c      	adds	r3, #60	@ 0x3c
 800c564:	3304      	adds	r3, #4
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800c56a:	683b      	ldr	r3, [r7, #0]
 800c56c:	015a      	lsls	r2, r3, #5
 800c56e:	693b      	ldr	r3, [r7, #16]
 800c570:	4413      	add	r3, r2
 800c572:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c576:	689b      	ldr	r3, [r3, #8]
 800c578:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	4a15      	ldr	r2, [pc, #84]	@ (800c5d4 <PCD_EP_OutSetupPacket_int+0x88>)
 800c57e:	4293      	cmp	r3, r2
 800c580:	d90e      	bls.n	800c5a0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800c582:	68bb      	ldr	r3, [r7, #8]
 800c584:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d009      	beq.n	800c5a0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800c58c:	683b      	ldr	r3, [r7, #0]
 800c58e:	015a      	lsls	r2, r3, #5
 800c590:	693b      	ldr	r3, [r7, #16]
 800c592:	4413      	add	r3, r2
 800c594:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c598:	461a      	mov	r2, r3
 800c59a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c59e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800c5a0:	6878      	ldr	r0, [r7, #4]
 800c5a2:	f00a f8cb 	bl	801673c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	4a0a      	ldr	r2, [pc, #40]	@ (800c5d4 <PCD_EP_OutSetupPacket_int+0x88>)
 800c5aa:	4293      	cmp	r3, r2
 800c5ac:	d90c      	bls.n	800c5c8 <PCD_EP_OutSetupPacket_int+0x7c>
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	799b      	ldrb	r3, [r3, #6]
 800c5b2:	2b01      	cmp	r3, #1
 800c5b4:	d108      	bne.n	800c5c8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	6818      	ldr	r0, [r3, #0]
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800c5c0:	461a      	mov	r2, r3
 800c5c2:	2101      	movs	r1, #1
 800c5c4:	f007 fbb2 	bl	8013d2c <USB_EP0_OutStart>
  }

  return HAL_OK;
 800c5c8:	2300      	movs	r3, #0
}
 800c5ca:	4618      	mov	r0, r3
 800c5cc:	3718      	adds	r7, #24
 800c5ce:	46bd      	mov	sp, r7
 800c5d0:	bd80      	pop	{r7, pc}
 800c5d2:	bf00      	nop
 800c5d4:	4f54300a 	.word	0x4f54300a

0800c5d8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800c5d8:	b480      	push	{r7}
 800c5da:	b085      	sub	sp, #20
 800c5dc:	af00      	add	r7, sp, #0
 800c5de:	6078      	str	r0, [r7, #4]
 800c5e0:	460b      	mov	r3, r1
 800c5e2:	70fb      	strb	r3, [r7, #3]
 800c5e4:	4613      	mov	r3, r2
 800c5e6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c5ee:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800c5f0:	78fb      	ldrb	r3, [r7, #3]
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d107      	bne.n	800c606 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800c5f6:	883b      	ldrh	r3, [r7, #0]
 800c5f8:	0419      	lsls	r1, r3, #16
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	68ba      	ldr	r2, [r7, #8]
 800c600:	430a      	orrs	r2, r1
 800c602:	629a      	str	r2, [r3, #40]	@ 0x28
 800c604:	e028      	b.n	800c658 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c60c:	0c1b      	lsrs	r3, r3, #16
 800c60e:	68ba      	ldr	r2, [r7, #8]
 800c610:	4413      	add	r3, r2
 800c612:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800c614:	2300      	movs	r3, #0
 800c616:	73fb      	strb	r3, [r7, #15]
 800c618:	e00d      	b.n	800c636 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	681a      	ldr	r2, [r3, #0]
 800c61e:	7bfb      	ldrb	r3, [r7, #15]
 800c620:	3340      	adds	r3, #64	@ 0x40
 800c622:	009b      	lsls	r3, r3, #2
 800c624:	4413      	add	r3, r2
 800c626:	685b      	ldr	r3, [r3, #4]
 800c628:	0c1b      	lsrs	r3, r3, #16
 800c62a:	68ba      	ldr	r2, [r7, #8]
 800c62c:	4413      	add	r3, r2
 800c62e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800c630:	7bfb      	ldrb	r3, [r7, #15]
 800c632:	3301      	adds	r3, #1
 800c634:	73fb      	strb	r3, [r7, #15]
 800c636:	7bfa      	ldrb	r2, [r7, #15]
 800c638:	78fb      	ldrb	r3, [r7, #3]
 800c63a:	3b01      	subs	r3, #1
 800c63c:	429a      	cmp	r2, r3
 800c63e:	d3ec      	bcc.n	800c61a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800c640:	883b      	ldrh	r3, [r7, #0]
 800c642:	0418      	lsls	r0, r3, #16
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	6819      	ldr	r1, [r3, #0]
 800c648:	78fb      	ldrb	r3, [r7, #3]
 800c64a:	3b01      	subs	r3, #1
 800c64c:	68ba      	ldr	r2, [r7, #8]
 800c64e:	4302      	orrs	r2, r0
 800c650:	3340      	adds	r3, #64	@ 0x40
 800c652:	009b      	lsls	r3, r3, #2
 800c654:	440b      	add	r3, r1
 800c656:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800c658:	2300      	movs	r3, #0
}
 800c65a:	4618      	mov	r0, r3
 800c65c:	3714      	adds	r7, #20
 800c65e:	46bd      	mov	sp, r7
 800c660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c664:	4770      	bx	lr

0800c666 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800c666:	b480      	push	{r7}
 800c668:	b083      	sub	sp, #12
 800c66a:	af00      	add	r7, sp, #0
 800c66c:	6078      	str	r0, [r7, #4]
 800c66e:	460b      	mov	r3, r1
 800c670:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	887a      	ldrh	r2, [r7, #2]
 800c678:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800c67a:	2300      	movs	r3, #0
}
 800c67c:	4618      	mov	r0, r3
 800c67e:	370c      	adds	r7, #12
 800c680:	46bd      	mov	sp, r7
 800c682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c686:	4770      	bx	lr

0800c688 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800c688:	b480      	push	{r7}
 800c68a:	b085      	sub	sp, #20
 800c68c:	af00      	add	r7, sp, #0
 800c68e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	2201      	movs	r2, #1
 800c69a:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	2200      	movs	r2, #0
 800c6a2:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	699b      	ldr	r3, [r3, #24]
 800c6aa:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c6b6:	4b05      	ldr	r3, [pc, #20]	@ (800c6cc <HAL_PCDEx_ActivateLPM+0x44>)
 800c6b8:	4313      	orrs	r3, r2
 800c6ba:	68fa      	ldr	r2, [r7, #12]
 800c6bc:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800c6be:	2300      	movs	r3, #0
}
 800c6c0:	4618      	mov	r0, r3
 800c6c2:	3714      	adds	r7, #20
 800c6c4:	46bd      	mov	sp, r7
 800c6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ca:	4770      	bx	lr
 800c6cc:	10000003 	.word	0x10000003

0800c6d0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800c6d0:	b480      	push	{r7}
 800c6d2:	b083      	sub	sp, #12
 800c6d4:	af00      	add	r7, sp, #0
 800c6d6:	6078      	str	r0, [r7, #4]
 800c6d8:	460b      	mov	r3, r1
 800c6da:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800c6dc:	bf00      	nop
 800c6de:	370c      	adds	r7, #12
 800c6e0:	46bd      	mov	sp, r7
 800c6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e6:	4770      	bx	lr

0800c6e8 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800c6e8:	b580      	push	{r7, lr}
 800c6ea:	b084      	sub	sp, #16
 800c6ec:	af00      	add	r7, sp, #0
 800c6ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800c6f0:	4b19      	ldr	r3, [pc, #100]	@ (800c758 <HAL_PWREx_ConfigSupply+0x70>)
 800c6f2:	68db      	ldr	r3, [r3, #12]
 800c6f4:	f003 0304 	and.w	r3, r3, #4
 800c6f8:	2b04      	cmp	r3, #4
 800c6fa:	d00a      	beq.n	800c712 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800c6fc:	4b16      	ldr	r3, [pc, #88]	@ (800c758 <HAL_PWREx_ConfigSupply+0x70>)
 800c6fe:	68db      	ldr	r3, [r3, #12]
 800c700:	f003 0307 	and.w	r3, r3, #7
 800c704:	687a      	ldr	r2, [r7, #4]
 800c706:	429a      	cmp	r2, r3
 800c708:	d001      	beq.n	800c70e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800c70a:	2301      	movs	r3, #1
 800c70c:	e01f      	b.n	800c74e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800c70e:	2300      	movs	r3, #0
 800c710:	e01d      	b.n	800c74e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800c712:	4b11      	ldr	r3, [pc, #68]	@ (800c758 <HAL_PWREx_ConfigSupply+0x70>)
 800c714:	68db      	ldr	r3, [r3, #12]
 800c716:	f023 0207 	bic.w	r2, r3, #7
 800c71a:	490f      	ldr	r1, [pc, #60]	@ (800c758 <HAL_PWREx_ConfigSupply+0x70>)
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	4313      	orrs	r3, r2
 800c720:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800c722:	f7f6 f9ad 	bl	8002a80 <HAL_GetTick>
 800c726:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800c728:	e009      	b.n	800c73e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800c72a:	f7f6 f9a9 	bl	8002a80 <HAL_GetTick>
 800c72e:	4602      	mov	r2, r0
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	1ad3      	subs	r3, r2, r3
 800c734:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800c738:	d901      	bls.n	800c73e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800c73a:	2301      	movs	r3, #1
 800c73c:	e007      	b.n	800c74e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800c73e:	4b06      	ldr	r3, [pc, #24]	@ (800c758 <HAL_PWREx_ConfigSupply+0x70>)
 800c740:	685b      	ldr	r3, [r3, #4]
 800c742:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c746:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c74a:	d1ee      	bne.n	800c72a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800c74c:	2300      	movs	r3, #0
}
 800c74e:	4618      	mov	r0, r3
 800c750:	3710      	adds	r7, #16
 800c752:	46bd      	mov	sp, r7
 800c754:	bd80      	pop	{r7, pc}
 800c756:	bf00      	nop
 800c758:	58024800 	.word	0x58024800

0800c75c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800c75c:	b480      	push	{r7}
 800c75e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800c760:	4b05      	ldr	r3, [pc, #20]	@ (800c778 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800c762:	68db      	ldr	r3, [r3, #12]
 800c764:	4a04      	ldr	r2, [pc, #16]	@ (800c778 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800c766:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c76a:	60d3      	str	r3, [r2, #12]
}
 800c76c:	bf00      	nop
 800c76e:	46bd      	mov	sp, r7
 800c770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c774:	4770      	bx	lr
 800c776:	bf00      	nop
 800c778:	58024800 	.word	0x58024800

0800c77c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c77c:	b580      	push	{r7, lr}
 800c77e:	b08c      	sub	sp, #48	@ 0x30
 800c780:	af00      	add	r7, sp, #0
 800c782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	2b00      	cmp	r3, #0
 800c788:	d102      	bne.n	800c790 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800c78a:	2301      	movs	r3, #1
 800c78c:	f000 bc48 	b.w	800d020 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	f003 0301 	and.w	r3, r3, #1
 800c798:	2b00      	cmp	r3, #0
 800c79a:	f000 8088 	beq.w	800c8ae <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c79e:	4b99      	ldr	r3, [pc, #612]	@ (800ca04 <HAL_RCC_OscConfig+0x288>)
 800c7a0:	691b      	ldr	r3, [r3, #16]
 800c7a2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c7a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800c7a8:	4b96      	ldr	r3, [pc, #600]	@ (800ca04 <HAL_RCC_OscConfig+0x288>)
 800c7aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c7ac:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800c7ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7b0:	2b10      	cmp	r3, #16
 800c7b2:	d007      	beq.n	800c7c4 <HAL_RCC_OscConfig+0x48>
 800c7b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7b6:	2b18      	cmp	r3, #24
 800c7b8:	d111      	bne.n	800c7de <HAL_RCC_OscConfig+0x62>
 800c7ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c7bc:	f003 0303 	and.w	r3, r3, #3
 800c7c0:	2b02      	cmp	r3, #2
 800c7c2:	d10c      	bne.n	800c7de <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c7c4:	4b8f      	ldr	r3, [pc, #572]	@ (800ca04 <HAL_RCC_OscConfig+0x288>)
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d06d      	beq.n	800c8ac <HAL_RCC_OscConfig+0x130>
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	685b      	ldr	r3, [r3, #4]
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d169      	bne.n	800c8ac <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800c7d8:	2301      	movs	r3, #1
 800c7da:	f000 bc21 	b.w	800d020 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	685b      	ldr	r3, [r3, #4]
 800c7e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c7e6:	d106      	bne.n	800c7f6 <HAL_RCC_OscConfig+0x7a>
 800c7e8:	4b86      	ldr	r3, [pc, #536]	@ (800ca04 <HAL_RCC_OscConfig+0x288>)
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	4a85      	ldr	r2, [pc, #532]	@ (800ca04 <HAL_RCC_OscConfig+0x288>)
 800c7ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c7f2:	6013      	str	r3, [r2, #0]
 800c7f4:	e02e      	b.n	800c854 <HAL_RCC_OscConfig+0xd8>
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	685b      	ldr	r3, [r3, #4]
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d10c      	bne.n	800c818 <HAL_RCC_OscConfig+0x9c>
 800c7fe:	4b81      	ldr	r3, [pc, #516]	@ (800ca04 <HAL_RCC_OscConfig+0x288>)
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	4a80      	ldr	r2, [pc, #512]	@ (800ca04 <HAL_RCC_OscConfig+0x288>)
 800c804:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c808:	6013      	str	r3, [r2, #0]
 800c80a:	4b7e      	ldr	r3, [pc, #504]	@ (800ca04 <HAL_RCC_OscConfig+0x288>)
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	4a7d      	ldr	r2, [pc, #500]	@ (800ca04 <HAL_RCC_OscConfig+0x288>)
 800c810:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800c814:	6013      	str	r3, [r2, #0]
 800c816:	e01d      	b.n	800c854 <HAL_RCC_OscConfig+0xd8>
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	685b      	ldr	r3, [r3, #4]
 800c81c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800c820:	d10c      	bne.n	800c83c <HAL_RCC_OscConfig+0xc0>
 800c822:	4b78      	ldr	r3, [pc, #480]	@ (800ca04 <HAL_RCC_OscConfig+0x288>)
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	4a77      	ldr	r2, [pc, #476]	@ (800ca04 <HAL_RCC_OscConfig+0x288>)
 800c828:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800c82c:	6013      	str	r3, [r2, #0]
 800c82e:	4b75      	ldr	r3, [pc, #468]	@ (800ca04 <HAL_RCC_OscConfig+0x288>)
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	4a74      	ldr	r2, [pc, #464]	@ (800ca04 <HAL_RCC_OscConfig+0x288>)
 800c834:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c838:	6013      	str	r3, [r2, #0]
 800c83a:	e00b      	b.n	800c854 <HAL_RCC_OscConfig+0xd8>
 800c83c:	4b71      	ldr	r3, [pc, #452]	@ (800ca04 <HAL_RCC_OscConfig+0x288>)
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	4a70      	ldr	r2, [pc, #448]	@ (800ca04 <HAL_RCC_OscConfig+0x288>)
 800c842:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c846:	6013      	str	r3, [r2, #0]
 800c848:	4b6e      	ldr	r3, [pc, #440]	@ (800ca04 <HAL_RCC_OscConfig+0x288>)
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	4a6d      	ldr	r2, [pc, #436]	@ (800ca04 <HAL_RCC_OscConfig+0x288>)
 800c84e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800c852:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	685b      	ldr	r3, [r3, #4]
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d013      	beq.n	800c884 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c85c:	f7f6 f910 	bl	8002a80 <HAL_GetTick>
 800c860:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800c862:	e008      	b.n	800c876 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c864:	f7f6 f90c 	bl	8002a80 <HAL_GetTick>
 800c868:	4602      	mov	r2, r0
 800c86a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c86c:	1ad3      	subs	r3, r2, r3
 800c86e:	2b64      	cmp	r3, #100	@ 0x64
 800c870:	d901      	bls.n	800c876 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800c872:	2303      	movs	r3, #3
 800c874:	e3d4      	b.n	800d020 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800c876:	4b63      	ldr	r3, [pc, #396]	@ (800ca04 <HAL_RCC_OscConfig+0x288>)
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d0f0      	beq.n	800c864 <HAL_RCC_OscConfig+0xe8>
 800c882:	e014      	b.n	800c8ae <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c884:	f7f6 f8fc 	bl	8002a80 <HAL_GetTick>
 800c888:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800c88a:	e008      	b.n	800c89e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c88c:	f7f6 f8f8 	bl	8002a80 <HAL_GetTick>
 800c890:	4602      	mov	r2, r0
 800c892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c894:	1ad3      	subs	r3, r2, r3
 800c896:	2b64      	cmp	r3, #100	@ 0x64
 800c898:	d901      	bls.n	800c89e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800c89a:	2303      	movs	r3, #3
 800c89c:	e3c0      	b.n	800d020 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800c89e:	4b59      	ldr	r3, [pc, #356]	@ (800ca04 <HAL_RCC_OscConfig+0x288>)
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d1f0      	bne.n	800c88c <HAL_RCC_OscConfig+0x110>
 800c8aa:	e000      	b.n	800c8ae <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c8ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	f003 0302 	and.w	r3, r3, #2
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	f000 80ca 	beq.w	800ca50 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c8bc:	4b51      	ldr	r3, [pc, #324]	@ (800ca04 <HAL_RCC_OscConfig+0x288>)
 800c8be:	691b      	ldr	r3, [r3, #16]
 800c8c0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c8c4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800c8c6:	4b4f      	ldr	r3, [pc, #316]	@ (800ca04 <HAL_RCC_OscConfig+0x288>)
 800c8c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c8ca:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800c8cc:	6a3b      	ldr	r3, [r7, #32]
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d007      	beq.n	800c8e2 <HAL_RCC_OscConfig+0x166>
 800c8d2:	6a3b      	ldr	r3, [r7, #32]
 800c8d4:	2b18      	cmp	r3, #24
 800c8d6:	d156      	bne.n	800c986 <HAL_RCC_OscConfig+0x20a>
 800c8d8:	69fb      	ldr	r3, [r7, #28]
 800c8da:	f003 0303 	and.w	r3, r3, #3
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d151      	bne.n	800c986 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c8e2:	4b48      	ldr	r3, [pc, #288]	@ (800ca04 <HAL_RCC_OscConfig+0x288>)
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	f003 0304 	and.w	r3, r3, #4
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d005      	beq.n	800c8fa <HAL_RCC_OscConfig+0x17e>
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	68db      	ldr	r3, [r3, #12]
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d101      	bne.n	800c8fa <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800c8f6:	2301      	movs	r3, #1
 800c8f8:	e392      	b.n	800d020 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800c8fa:	4b42      	ldr	r3, [pc, #264]	@ (800ca04 <HAL_RCC_OscConfig+0x288>)
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	f023 0219 	bic.w	r2, r3, #25
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	68db      	ldr	r3, [r3, #12]
 800c906:	493f      	ldr	r1, [pc, #252]	@ (800ca04 <HAL_RCC_OscConfig+0x288>)
 800c908:	4313      	orrs	r3, r2
 800c90a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c90c:	f7f6 f8b8 	bl	8002a80 <HAL_GetTick>
 800c910:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800c912:	e008      	b.n	800c926 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c914:	f7f6 f8b4 	bl	8002a80 <HAL_GetTick>
 800c918:	4602      	mov	r2, r0
 800c91a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c91c:	1ad3      	subs	r3, r2, r3
 800c91e:	2b02      	cmp	r3, #2
 800c920:	d901      	bls.n	800c926 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800c922:	2303      	movs	r3, #3
 800c924:	e37c      	b.n	800d020 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800c926:	4b37      	ldr	r3, [pc, #220]	@ (800ca04 <HAL_RCC_OscConfig+0x288>)
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	f003 0304 	and.w	r3, r3, #4
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d0f0      	beq.n	800c914 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c932:	f7f6 f8d5 	bl	8002ae0 <HAL_GetREVID>
 800c936:	4603      	mov	r3, r0
 800c938:	f241 0203 	movw	r2, #4099	@ 0x1003
 800c93c:	4293      	cmp	r3, r2
 800c93e:	d817      	bhi.n	800c970 <HAL_RCC_OscConfig+0x1f4>
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	691b      	ldr	r3, [r3, #16]
 800c944:	2b40      	cmp	r3, #64	@ 0x40
 800c946:	d108      	bne.n	800c95a <HAL_RCC_OscConfig+0x1de>
 800c948:	4b2e      	ldr	r3, [pc, #184]	@ (800ca04 <HAL_RCC_OscConfig+0x288>)
 800c94a:	685b      	ldr	r3, [r3, #4]
 800c94c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800c950:	4a2c      	ldr	r2, [pc, #176]	@ (800ca04 <HAL_RCC_OscConfig+0x288>)
 800c952:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c956:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c958:	e07a      	b.n	800ca50 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c95a:	4b2a      	ldr	r3, [pc, #168]	@ (800ca04 <HAL_RCC_OscConfig+0x288>)
 800c95c:	685b      	ldr	r3, [r3, #4]
 800c95e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	691b      	ldr	r3, [r3, #16]
 800c966:	031b      	lsls	r3, r3, #12
 800c968:	4926      	ldr	r1, [pc, #152]	@ (800ca04 <HAL_RCC_OscConfig+0x288>)
 800c96a:	4313      	orrs	r3, r2
 800c96c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c96e:	e06f      	b.n	800ca50 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c970:	4b24      	ldr	r3, [pc, #144]	@ (800ca04 <HAL_RCC_OscConfig+0x288>)
 800c972:	685b      	ldr	r3, [r3, #4]
 800c974:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	691b      	ldr	r3, [r3, #16]
 800c97c:	061b      	lsls	r3, r3, #24
 800c97e:	4921      	ldr	r1, [pc, #132]	@ (800ca04 <HAL_RCC_OscConfig+0x288>)
 800c980:	4313      	orrs	r3, r2
 800c982:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c984:	e064      	b.n	800ca50 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	68db      	ldr	r3, [r3, #12]
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d047      	beq.n	800ca1e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800c98e:	4b1d      	ldr	r3, [pc, #116]	@ (800ca04 <HAL_RCC_OscConfig+0x288>)
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	f023 0219 	bic.w	r2, r3, #25
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	68db      	ldr	r3, [r3, #12]
 800c99a:	491a      	ldr	r1, [pc, #104]	@ (800ca04 <HAL_RCC_OscConfig+0x288>)
 800c99c:	4313      	orrs	r3, r2
 800c99e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c9a0:	f7f6 f86e 	bl	8002a80 <HAL_GetTick>
 800c9a4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800c9a6:	e008      	b.n	800c9ba <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c9a8:	f7f6 f86a 	bl	8002a80 <HAL_GetTick>
 800c9ac:	4602      	mov	r2, r0
 800c9ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9b0:	1ad3      	subs	r3, r2, r3
 800c9b2:	2b02      	cmp	r3, #2
 800c9b4:	d901      	bls.n	800c9ba <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800c9b6:	2303      	movs	r3, #3
 800c9b8:	e332      	b.n	800d020 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800c9ba:	4b12      	ldr	r3, [pc, #72]	@ (800ca04 <HAL_RCC_OscConfig+0x288>)
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	f003 0304 	and.w	r3, r3, #4
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d0f0      	beq.n	800c9a8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c9c6:	f7f6 f88b 	bl	8002ae0 <HAL_GetREVID>
 800c9ca:	4603      	mov	r3, r0
 800c9cc:	f241 0203 	movw	r2, #4099	@ 0x1003
 800c9d0:	4293      	cmp	r3, r2
 800c9d2:	d819      	bhi.n	800ca08 <HAL_RCC_OscConfig+0x28c>
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	691b      	ldr	r3, [r3, #16]
 800c9d8:	2b40      	cmp	r3, #64	@ 0x40
 800c9da:	d108      	bne.n	800c9ee <HAL_RCC_OscConfig+0x272>
 800c9dc:	4b09      	ldr	r3, [pc, #36]	@ (800ca04 <HAL_RCC_OscConfig+0x288>)
 800c9de:	685b      	ldr	r3, [r3, #4]
 800c9e0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800c9e4:	4a07      	ldr	r2, [pc, #28]	@ (800ca04 <HAL_RCC_OscConfig+0x288>)
 800c9e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c9ea:	6053      	str	r3, [r2, #4]
 800c9ec:	e030      	b.n	800ca50 <HAL_RCC_OscConfig+0x2d4>
 800c9ee:	4b05      	ldr	r3, [pc, #20]	@ (800ca04 <HAL_RCC_OscConfig+0x288>)
 800c9f0:	685b      	ldr	r3, [r3, #4]
 800c9f2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	691b      	ldr	r3, [r3, #16]
 800c9fa:	031b      	lsls	r3, r3, #12
 800c9fc:	4901      	ldr	r1, [pc, #4]	@ (800ca04 <HAL_RCC_OscConfig+0x288>)
 800c9fe:	4313      	orrs	r3, r2
 800ca00:	604b      	str	r3, [r1, #4]
 800ca02:	e025      	b.n	800ca50 <HAL_RCC_OscConfig+0x2d4>
 800ca04:	58024400 	.word	0x58024400
 800ca08:	4b9a      	ldr	r3, [pc, #616]	@ (800cc74 <HAL_RCC_OscConfig+0x4f8>)
 800ca0a:	685b      	ldr	r3, [r3, #4]
 800ca0c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	691b      	ldr	r3, [r3, #16]
 800ca14:	061b      	lsls	r3, r3, #24
 800ca16:	4997      	ldr	r1, [pc, #604]	@ (800cc74 <HAL_RCC_OscConfig+0x4f8>)
 800ca18:	4313      	orrs	r3, r2
 800ca1a:	604b      	str	r3, [r1, #4]
 800ca1c:	e018      	b.n	800ca50 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ca1e:	4b95      	ldr	r3, [pc, #596]	@ (800cc74 <HAL_RCC_OscConfig+0x4f8>)
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	4a94      	ldr	r2, [pc, #592]	@ (800cc74 <HAL_RCC_OscConfig+0x4f8>)
 800ca24:	f023 0301 	bic.w	r3, r3, #1
 800ca28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ca2a:	f7f6 f829 	bl	8002a80 <HAL_GetTick>
 800ca2e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800ca30:	e008      	b.n	800ca44 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ca32:	f7f6 f825 	bl	8002a80 <HAL_GetTick>
 800ca36:	4602      	mov	r2, r0
 800ca38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca3a:	1ad3      	subs	r3, r2, r3
 800ca3c:	2b02      	cmp	r3, #2
 800ca3e:	d901      	bls.n	800ca44 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800ca40:	2303      	movs	r3, #3
 800ca42:	e2ed      	b.n	800d020 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800ca44:	4b8b      	ldr	r3, [pc, #556]	@ (800cc74 <HAL_RCC_OscConfig+0x4f8>)
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	f003 0304 	and.w	r3, r3, #4
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d1f0      	bne.n	800ca32 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	f003 0310 	and.w	r3, r3, #16
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	f000 80a9 	beq.w	800cbb0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ca5e:	4b85      	ldr	r3, [pc, #532]	@ (800cc74 <HAL_RCC_OscConfig+0x4f8>)
 800ca60:	691b      	ldr	r3, [r3, #16]
 800ca62:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ca66:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800ca68:	4b82      	ldr	r3, [pc, #520]	@ (800cc74 <HAL_RCC_OscConfig+0x4f8>)
 800ca6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ca6c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800ca6e:	69bb      	ldr	r3, [r7, #24]
 800ca70:	2b08      	cmp	r3, #8
 800ca72:	d007      	beq.n	800ca84 <HAL_RCC_OscConfig+0x308>
 800ca74:	69bb      	ldr	r3, [r7, #24]
 800ca76:	2b18      	cmp	r3, #24
 800ca78:	d13a      	bne.n	800caf0 <HAL_RCC_OscConfig+0x374>
 800ca7a:	697b      	ldr	r3, [r7, #20]
 800ca7c:	f003 0303 	and.w	r3, r3, #3
 800ca80:	2b01      	cmp	r3, #1
 800ca82:	d135      	bne.n	800caf0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800ca84:	4b7b      	ldr	r3, [pc, #492]	@ (800cc74 <HAL_RCC_OscConfig+0x4f8>)
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d005      	beq.n	800ca9c <HAL_RCC_OscConfig+0x320>
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	69db      	ldr	r3, [r3, #28]
 800ca94:	2b80      	cmp	r3, #128	@ 0x80
 800ca96:	d001      	beq.n	800ca9c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800ca98:	2301      	movs	r3, #1
 800ca9a:	e2c1      	b.n	800d020 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800ca9c:	f7f6 f820 	bl	8002ae0 <HAL_GetREVID>
 800caa0:	4603      	mov	r3, r0
 800caa2:	f241 0203 	movw	r2, #4099	@ 0x1003
 800caa6:	4293      	cmp	r3, r2
 800caa8:	d817      	bhi.n	800cada <HAL_RCC_OscConfig+0x35e>
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	6a1b      	ldr	r3, [r3, #32]
 800caae:	2b20      	cmp	r3, #32
 800cab0:	d108      	bne.n	800cac4 <HAL_RCC_OscConfig+0x348>
 800cab2:	4b70      	ldr	r3, [pc, #448]	@ (800cc74 <HAL_RCC_OscConfig+0x4f8>)
 800cab4:	685b      	ldr	r3, [r3, #4]
 800cab6:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800caba:	4a6e      	ldr	r2, [pc, #440]	@ (800cc74 <HAL_RCC_OscConfig+0x4f8>)
 800cabc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800cac0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800cac2:	e075      	b.n	800cbb0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800cac4:	4b6b      	ldr	r3, [pc, #428]	@ (800cc74 <HAL_RCC_OscConfig+0x4f8>)
 800cac6:	685b      	ldr	r3, [r3, #4]
 800cac8:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	6a1b      	ldr	r3, [r3, #32]
 800cad0:	069b      	lsls	r3, r3, #26
 800cad2:	4968      	ldr	r1, [pc, #416]	@ (800cc74 <HAL_RCC_OscConfig+0x4f8>)
 800cad4:	4313      	orrs	r3, r2
 800cad6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800cad8:	e06a      	b.n	800cbb0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800cada:	4b66      	ldr	r3, [pc, #408]	@ (800cc74 <HAL_RCC_OscConfig+0x4f8>)
 800cadc:	68db      	ldr	r3, [r3, #12]
 800cade:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	6a1b      	ldr	r3, [r3, #32]
 800cae6:	061b      	lsls	r3, r3, #24
 800cae8:	4962      	ldr	r1, [pc, #392]	@ (800cc74 <HAL_RCC_OscConfig+0x4f8>)
 800caea:	4313      	orrs	r3, r2
 800caec:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800caee:	e05f      	b.n	800cbb0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	69db      	ldr	r3, [r3, #28]
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d042      	beq.n	800cb7e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800caf8:	4b5e      	ldr	r3, [pc, #376]	@ (800cc74 <HAL_RCC_OscConfig+0x4f8>)
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	4a5d      	ldr	r2, [pc, #372]	@ (800cc74 <HAL_RCC_OscConfig+0x4f8>)
 800cafe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cb02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cb04:	f7f5 ffbc 	bl	8002a80 <HAL_GetTick>
 800cb08:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800cb0a:	e008      	b.n	800cb1e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800cb0c:	f7f5 ffb8 	bl	8002a80 <HAL_GetTick>
 800cb10:	4602      	mov	r2, r0
 800cb12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb14:	1ad3      	subs	r3, r2, r3
 800cb16:	2b02      	cmp	r3, #2
 800cb18:	d901      	bls.n	800cb1e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800cb1a:	2303      	movs	r3, #3
 800cb1c:	e280      	b.n	800d020 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800cb1e:	4b55      	ldr	r3, [pc, #340]	@ (800cc74 <HAL_RCC_OscConfig+0x4f8>)
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d0f0      	beq.n	800cb0c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800cb2a:	f7f5 ffd9 	bl	8002ae0 <HAL_GetREVID>
 800cb2e:	4603      	mov	r3, r0
 800cb30:	f241 0203 	movw	r2, #4099	@ 0x1003
 800cb34:	4293      	cmp	r3, r2
 800cb36:	d817      	bhi.n	800cb68 <HAL_RCC_OscConfig+0x3ec>
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	6a1b      	ldr	r3, [r3, #32]
 800cb3c:	2b20      	cmp	r3, #32
 800cb3e:	d108      	bne.n	800cb52 <HAL_RCC_OscConfig+0x3d6>
 800cb40:	4b4c      	ldr	r3, [pc, #304]	@ (800cc74 <HAL_RCC_OscConfig+0x4f8>)
 800cb42:	685b      	ldr	r3, [r3, #4]
 800cb44:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800cb48:	4a4a      	ldr	r2, [pc, #296]	@ (800cc74 <HAL_RCC_OscConfig+0x4f8>)
 800cb4a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800cb4e:	6053      	str	r3, [r2, #4]
 800cb50:	e02e      	b.n	800cbb0 <HAL_RCC_OscConfig+0x434>
 800cb52:	4b48      	ldr	r3, [pc, #288]	@ (800cc74 <HAL_RCC_OscConfig+0x4f8>)
 800cb54:	685b      	ldr	r3, [r3, #4]
 800cb56:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	6a1b      	ldr	r3, [r3, #32]
 800cb5e:	069b      	lsls	r3, r3, #26
 800cb60:	4944      	ldr	r1, [pc, #272]	@ (800cc74 <HAL_RCC_OscConfig+0x4f8>)
 800cb62:	4313      	orrs	r3, r2
 800cb64:	604b      	str	r3, [r1, #4]
 800cb66:	e023      	b.n	800cbb0 <HAL_RCC_OscConfig+0x434>
 800cb68:	4b42      	ldr	r3, [pc, #264]	@ (800cc74 <HAL_RCC_OscConfig+0x4f8>)
 800cb6a:	68db      	ldr	r3, [r3, #12]
 800cb6c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	6a1b      	ldr	r3, [r3, #32]
 800cb74:	061b      	lsls	r3, r3, #24
 800cb76:	493f      	ldr	r1, [pc, #252]	@ (800cc74 <HAL_RCC_OscConfig+0x4f8>)
 800cb78:	4313      	orrs	r3, r2
 800cb7a:	60cb      	str	r3, [r1, #12]
 800cb7c:	e018      	b.n	800cbb0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800cb7e:	4b3d      	ldr	r3, [pc, #244]	@ (800cc74 <HAL_RCC_OscConfig+0x4f8>)
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	4a3c      	ldr	r2, [pc, #240]	@ (800cc74 <HAL_RCC_OscConfig+0x4f8>)
 800cb84:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cb88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cb8a:	f7f5 ff79 	bl	8002a80 <HAL_GetTick>
 800cb8e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800cb90:	e008      	b.n	800cba4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800cb92:	f7f5 ff75 	bl	8002a80 <HAL_GetTick>
 800cb96:	4602      	mov	r2, r0
 800cb98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb9a:	1ad3      	subs	r3, r2, r3
 800cb9c:	2b02      	cmp	r3, #2
 800cb9e:	d901      	bls.n	800cba4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800cba0:	2303      	movs	r3, #3
 800cba2:	e23d      	b.n	800d020 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800cba4:	4b33      	ldr	r3, [pc, #204]	@ (800cc74 <HAL_RCC_OscConfig+0x4f8>)
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d1f0      	bne.n	800cb92 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	f003 0308 	and.w	r3, r3, #8
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d036      	beq.n	800cc2a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	695b      	ldr	r3, [r3, #20]
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d019      	beq.n	800cbf8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800cbc4:	4b2b      	ldr	r3, [pc, #172]	@ (800cc74 <HAL_RCC_OscConfig+0x4f8>)
 800cbc6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cbc8:	4a2a      	ldr	r2, [pc, #168]	@ (800cc74 <HAL_RCC_OscConfig+0x4f8>)
 800cbca:	f043 0301 	orr.w	r3, r3, #1
 800cbce:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cbd0:	f7f5 ff56 	bl	8002a80 <HAL_GetTick>
 800cbd4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800cbd6:	e008      	b.n	800cbea <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800cbd8:	f7f5 ff52 	bl	8002a80 <HAL_GetTick>
 800cbdc:	4602      	mov	r2, r0
 800cbde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbe0:	1ad3      	subs	r3, r2, r3
 800cbe2:	2b02      	cmp	r3, #2
 800cbe4:	d901      	bls.n	800cbea <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800cbe6:	2303      	movs	r3, #3
 800cbe8:	e21a      	b.n	800d020 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800cbea:	4b22      	ldr	r3, [pc, #136]	@ (800cc74 <HAL_RCC_OscConfig+0x4f8>)
 800cbec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cbee:	f003 0302 	and.w	r3, r3, #2
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d0f0      	beq.n	800cbd8 <HAL_RCC_OscConfig+0x45c>
 800cbf6:	e018      	b.n	800cc2a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800cbf8:	4b1e      	ldr	r3, [pc, #120]	@ (800cc74 <HAL_RCC_OscConfig+0x4f8>)
 800cbfa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cbfc:	4a1d      	ldr	r2, [pc, #116]	@ (800cc74 <HAL_RCC_OscConfig+0x4f8>)
 800cbfe:	f023 0301 	bic.w	r3, r3, #1
 800cc02:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cc04:	f7f5 ff3c 	bl	8002a80 <HAL_GetTick>
 800cc08:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800cc0a:	e008      	b.n	800cc1e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800cc0c:	f7f5 ff38 	bl	8002a80 <HAL_GetTick>
 800cc10:	4602      	mov	r2, r0
 800cc12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc14:	1ad3      	subs	r3, r2, r3
 800cc16:	2b02      	cmp	r3, #2
 800cc18:	d901      	bls.n	800cc1e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800cc1a:	2303      	movs	r3, #3
 800cc1c:	e200      	b.n	800d020 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800cc1e:	4b15      	ldr	r3, [pc, #84]	@ (800cc74 <HAL_RCC_OscConfig+0x4f8>)
 800cc20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cc22:	f003 0302 	and.w	r3, r3, #2
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d1f0      	bne.n	800cc0c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	f003 0320 	and.w	r3, r3, #32
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d039      	beq.n	800ccaa <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	699b      	ldr	r3, [r3, #24]
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d01c      	beq.n	800cc78 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800cc3e:	4b0d      	ldr	r3, [pc, #52]	@ (800cc74 <HAL_RCC_OscConfig+0x4f8>)
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	4a0c      	ldr	r2, [pc, #48]	@ (800cc74 <HAL_RCC_OscConfig+0x4f8>)
 800cc44:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800cc48:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800cc4a:	f7f5 ff19 	bl	8002a80 <HAL_GetTick>
 800cc4e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800cc50:	e008      	b.n	800cc64 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800cc52:	f7f5 ff15 	bl	8002a80 <HAL_GetTick>
 800cc56:	4602      	mov	r2, r0
 800cc58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc5a:	1ad3      	subs	r3, r2, r3
 800cc5c:	2b02      	cmp	r3, #2
 800cc5e:	d901      	bls.n	800cc64 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800cc60:	2303      	movs	r3, #3
 800cc62:	e1dd      	b.n	800d020 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800cc64:	4b03      	ldr	r3, [pc, #12]	@ (800cc74 <HAL_RCC_OscConfig+0x4f8>)
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d0f0      	beq.n	800cc52 <HAL_RCC_OscConfig+0x4d6>
 800cc70:	e01b      	b.n	800ccaa <HAL_RCC_OscConfig+0x52e>
 800cc72:	bf00      	nop
 800cc74:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800cc78:	4b9b      	ldr	r3, [pc, #620]	@ (800cee8 <HAL_RCC_OscConfig+0x76c>)
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	4a9a      	ldr	r2, [pc, #616]	@ (800cee8 <HAL_RCC_OscConfig+0x76c>)
 800cc7e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800cc82:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800cc84:	f7f5 fefc 	bl	8002a80 <HAL_GetTick>
 800cc88:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800cc8a:	e008      	b.n	800cc9e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800cc8c:	f7f5 fef8 	bl	8002a80 <HAL_GetTick>
 800cc90:	4602      	mov	r2, r0
 800cc92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc94:	1ad3      	subs	r3, r2, r3
 800cc96:	2b02      	cmp	r3, #2
 800cc98:	d901      	bls.n	800cc9e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800cc9a:	2303      	movs	r3, #3
 800cc9c:	e1c0      	b.n	800d020 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800cc9e:	4b92      	ldr	r3, [pc, #584]	@ (800cee8 <HAL_RCC_OscConfig+0x76c>)
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d1f0      	bne.n	800cc8c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	f003 0304 	and.w	r3, r3, #4
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	f000 8081 	beq.w	800cdba <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800ccb8:	4b8c      	ldr	r3, [pc, #560]	@ (800ceec <HAL_RCC_OscConfig+0x770>)
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	4a8b      	ldr	r2, [pc, #556]	@ (800ceec <HAL_RCC_OscConfig+0x770>)
 800ccbe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ccc2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800ccc4:	f7f5 fedc 	bl	8002a80 <HAL_GetTick>
 800ccc8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ccca:	e008      	b.n	800ccde <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800cccc:	f7f5 fed8 	bl	8002a80 <HAL_GetTick>
 800ccd0:	4602      	mov	r2, r0
 800ccd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccd4:	1ad3      	subs	r3, r2, r3
 800ccd6:	2b64      	cmp	r3, #100	@ 0x64
 800ccd8:	d901      	bls.n	800ccde <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800ccda:	2303      	movs	r3, #3
 800ccdc:	e1a0      	b.n	800d020 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ccde:	4b83      	ldr	r3, [pc, #524]	@ (800ceec <HAL_RCC_OscConfig+0x770>)
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d0f0      	beq.n	800cccc <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	689b      	ldr	r3, [r3, #8]
 800ccee:	2b01      	cmp	r3, #1
 800ccf0:	d106      	bne.n	800cd00 <HAL_RCC_OscConfig+0x584>
 800ccf2:	4b7d      	ldr	r3, [pc, #500]	@ (800cee8 <HAL_RCC_OscConfig+0x76c>)
 800ccf4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ccf6:	4a7c      	ldr	r2, [pc, #496]	@ (800cee8 <HAL_RCC_OscConfig+0x76c>)
 800ccf8:	f043 0301 	orr.w	r3, r3, #1
 800ccfc:	6713      	str	r3, [r2, #112]	@ 0x70
 800ccfe:	e02d      	b.n	800cd5c <HAL_RCC_OscConfig+0x5e0>
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	689b      	ldr	r3, [r3, #8]
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d10c      	bne.n	800cd22 <HAL_RCC_OscConfig+0x5a6>
 800cd08:	4b77      	ldr	r3, [pc, #476]	@ (800cee8 <HAL_RCC_OscConfig+0x76c>)
 800cd0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cd0c:	4a76      	ldr	r2, [pc, #472]	@ (800cee8 <HAL_RCC_OscConfig+0x76c>)
 800cd0e:	f023 0301 	bic.w	r3, r3, #1
 800cd12:	6713      	str	r3, [r2, #112]	@ 0x70
 800cd14:	4b74      	ldr	r3, [pc, #464]	@ (800cee8 <HAL_RCC_OscConfig+0x76c>)
 800cd16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cd18:	4a73      	ldr	r2, [pc, #460]	@ (800cee8 <HAL_RCC_OscConfig+0x76c>)
 800cd1a:	f023 0304 	bic.w	r3, r3, #4
 800cd1e:	6713      	str	r3, [r2, #112]	@ 0x70
 800cd20:	e01c      	b.n	800cd5c <HAL_RCC_OscConfig+0x5e0>
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	689b      	ldr	r3, [r3, #8]
 800cd26:	2b05      	cmp	r3, #5
 800cd28:	d10c      	bne.n	800cd44 <HAL_RCC_OscConfig+0x5c8>
 800cd2a:	4b6f      	ldr	r3, [pc, #444]	@ (800cee8 <HAL_RCC_OscConfig+0x76c>)
 800cd2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cd2e:	4a6e      	ldr	r2, [pc, #440]	@ (800cee8 <HAL_RCC_OscConfig+0x76c>)
 800cd30:	f043 0304 	orr.w	r3, r3, #4
 800cd34:	6713      	str	r3, [r2, #112]	@ 0x70
 800cd36:	4b6c      	ldr	r3, [pc, #432]	@ (800cee8 <HAL_RCC_OscConfig+0x76c>)
 800cd38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cd3a:	4a6b      	ldr	r2, [pc, #428]	@ (800cee8 <HAL_RCC_OscConfig+0x76c>)
 800cd3c:	f043 0301 	orr.w	r3, r3, #1
 800cd40:	6713      	str	r3, [r2, #112]	@ 0x70
 800cd42:	e00b      	b.n	800cd5c <HAL_RCC_OscConfig+0x5e0>
 800cd44:	4b68      	ldr	r3, [pc, #416]	@ (800cee8 <HAL_RCC_OscConfig+0x76c>)
 800cd46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cd48:	4a67      	ldr	r2, [pc, #412]	@ (800cee8 <HAL_RCC_OscConfig+0x76c>)
 800cd4a:	f023 0301 	bic.w	r3, r3, #1
 800cd4e:	6713      	str	r3, [r2, #112]	@ 0x70
 800cd50:	4b65      	ldr	r3, [pc, #404]	@ (800cee8 <HAL_RCC_OscConfig+0x76c>)
 800cd52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cd54:	4a64      	ldr	r2, [pc, #400]	@ (800cee8 <HAL_RCC_OscConfig+0x76c>)
 800cd56:	f023 0304 	bic.w	r3, r3, #4
 800cd5a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	689b      	ldr	r3, [r3, #8]
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d015      	beq.n	800cd90 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cd64:	f7f5 fe8c 	bl	8002a80 <HAL_GetTick>
 800cd68:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800cd6a:	e00a      	b.n	800cd82 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cd6c:	f7f5 fe88 	bl	8002a80 <HAL_GetTick>
 800cd70:	4602      	mov	r2, r0
 800cd72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd74:	1ad3      	subs	r3, r2, r3
 800cd76:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cd7a:	4293      	cmp	r3, r2
 800cd7c:	d901      	bls.n	800cd82 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800cd7e:	2303      	movs	r3, #3
 800cd80:	e14e      	b.n	800d020 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800cd82:	4b59      	ldr	r3, [pc, #356]	@ (800cee8 <HAL_RCC_OscConfig+0x76c>)
 800cd84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cd86:	f003 0302 	and.w	r3, r3, #2
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d0ee      	beq.n	800cd6c <HAL_RCC_OscConfig+0x5f0>
 800cd8e:	e014      	b.n	800cdba <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cd90:	f7f5 fe76 	bl	8002a80 <HAL_GetTick>
 800cd94:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800cd96:	e00a      	b.n	800cdae <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cd98:	f7f5 fe72 	bl	8002a80 <HAL_GetTick>
 800cd9c:	4602      	mov	r2, r0
 800cd9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cda0:	1ad3      	subs	r3, r2, r3
 800cda2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cda6:	4293      	cmp	r3, r2
 800cda8:	d901      	bls.n	800cdae <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800cdaa:	2303      	movs	r3, #3
 800cdac:	e138      	b.n	800d020 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800cdae:	4b4e      	ldr	r3, [pc, #312]	@ (800cee8 <HAL_RCC_OscConfig+0x76c>)
 800cdb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cdb2:	f003 0302 	and.w	r3, r3, #2
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d1ee      	bne.n	800cd98 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	f000 812d 	beq.w	800d01e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800cdc4:	4b48      	ldr	r3, [pc, #288]	@ (800cee8 <HAL_RCC_OscConfig+0x76c>)
 800cdc6:	691b      	ldr	r3, [r3, #16]
 800cdc8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800cdcc:	2b18      	cmp	r3, #24
 800cdce:	f000 80bd 	beq.w	800cf4c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cdd6:	2b02      	cmp	r3, #2
 800cdd8:	f040 809e 	bne.w	800cf18 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800cddc:	4b42      	ldr	r3, [pc, #264]	@ (800cee8 <HAL_RCC_OscConfig+0x76c>)
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	4a41      	ldr	r2, [pc, #260]	@ (800cee8 <HAL_RCC_OscConfig+0x76c>)
 800cde2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800cde6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cde8:	f7f5 fe4a 	bl	8002a80 <HAL_GetTick>
 800cdec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800cdee:	e008      	b.n	800ce02 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cdf0:	f7f5 fe46 	bl	8002a80 <HAL_GetTick>
 800cdf4:	4602      	mov	r2, r0
 800cdf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdf8:	1ad3      	subs	r3, r2, r3
 800cdfa:	2b02      	cmp	r3, #2
 800cdfc:	d901      	bls.n	800ce02 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800cdfe:	2303      	movs	r3, #3
 800ce00:	e10e      	b.n	800d020 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ce02:	4b39      	ldr	r3, [pc, #228]	@ (800cee8 <HAL_RCC_OscConfig+0x76c>)
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d1f0      	bne.n	800cdf0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ce0e:	4b36      	ldr	r3, [pc, #216]	@ (800cee8 <HAL_RCC_OscConfig+0x76c>)
 800ce10:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ce12:	4b37      	ldr	r3, [pc, #220]	@ (800cef0 <HAL_RCC_OscConfig+0x774>)
 800ce14:	4013      	ands	r3, r2
 800ce16:	687a      	ldr	r2, [r7, #4]
 800ce18:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800ce1a:	687a      	ldr	r2, [r7, #4]
 800ce1c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800ce1e:	0112      	lsls	r2, r2, #4
 800ce20:	430a      	orrs	r2, r1
 800ce22:	4931      	ldr	r1, [pc, #196]	@ (800cee8 <HAL_RCC_OscConfig+0x76c>)
 800ce24:	4313      	orrs	r3, r2
 800ce26:	628b      	str	r3, [r1, #40]	@ 0x28
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ce2c:	3b01      	subs	r3, #1
 800ce2e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ce36:	3b01      	subs	r3, #1
 800ce38:	025b      	lsls	r3, r3, #9
 800ce3a:	b29b      	uxth	r3, r3
 800ce3c:	431a      	orrs	r2, r3
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ce42:	3b01      	subs	r3, #1
 800ce44:	041b      	lsls	r3, r3, #16
 800ce46:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800ce4a:	431a      	orrs	r2, r3
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ce50:	3b01      	subs	r3, #1
 800ce52:	061b      	lsls	r3, r3, #24
 800ce54:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800ce58:	4923      	ldr	r1, [pc, #140]	@ (800cee8 <HAL_RCC_OscConfig+0x76c>)
 800ce5a:	4313      	orrs	r3, r2
 800ce5c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800ce5e:	4b22      	ldr	r3, [pc, #136]	@ (800cee8 <HAL_RCC_OscConfig+0x76c>)
 800ce60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce62:	4a21      	ldr	r2, [pc, #132]	@ (800cee8 <HAL_RCC_OscConfig+0x76c>)
 800ce64:	f023 0301 	bic.w	r3, r3, #1
 800ce68:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800ce6a:	4b1f      	ldr	r3, [pc, #124]	@ (800cee8 <HAL_RCC_OscConfig+0x76c>)
 800ce6c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ce6e:	4b21      	ldr	r3, [pc, #132]	@ (800cef4 <HAL_RCC_OscConfig+0x778>)
 800ce70:	4013      	ands	r3, r2
 800ce72:	687a      	ldr	r2, [r7, #4]
 800ce74:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800ce76:	00d2      	lsls	r2, r2, #3
 800ce78:	491b      	ldr	r1, [pc, #108]	@ (800cee8 <HAL_RCC_OscConfig+0x76c>)
 800ce7a:	4313      	orrs	r3, r2
 800ce7c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800ce7e:	4b1a      	ldr	r3, [pc, #104]	@ (800cee8 <HAL_RCC_OscConfig+0x76c>)
 800ce80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce82:	f023 020c 	bic.w	r2, r3, #12
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ce8a:	4917      	ldr	r1, [pc, #92]	@ (800cee8 <HAL_RCC_OscConfig+0x76c>)
 800ce8c:	4313      	orrs	r3, r2
 800ce8e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800ce90:	4b15      	ldr	r3, [pc, #84]	@ (800cee8 <HAL_RCC_OscConfig+0x76c>)
 800ce92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce94:	f023 0202 	bic.w	r2, r3, #2
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ce9c:	4912      	ldr	r1, [pc, #72]	@ (800cee8 <HAL_RCC_OscConfig+0x76c>)
 800ce9e:	4313      	orrs	r3, r2
 800cea0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800cea2:	4b11      	ldr	r3, [pc, #68]	@ (800cee8 <HAL_RCC_OscConfig+0x76c>)
 800cea4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cea6:	4a10      	ldr	r2, [pc, #64]	@ (800cee8 <HAL_RCC_OscConfig+0x76c>)
 800cea8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ceac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ceae:	4b0e      	ldr	r3, [pc, #56]	@ (800cee8 <HAL_RCC_OscConfig+0x76c>)
 800ceb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ceb2:	4a0d      	ldr	r2, [pc, #52]	@ (800cee8 <HAL_RCC_OscConfig+0x76c>)
 800ceb4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ceb8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800ceba:	4b0b      	ldr	r3, [pc, #44]	@ (800cee8 <HAL_RCC_OscConfig+0x76c>)
 800cebc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cebe:	4a0a      	ldr	r2, [pc, #40]	@ (800cee8 <HAL_RCC_OscConfig+0x76c>)
 800cec0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800cec4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800cec6:	4b08      	ldr	r3, [pc, #32]	@ (800cee8 <HAL_RCC_OscConfig+0x76c>)
 800cec8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ceca:	4a07      	ldr	r2, [pc, #28]	@ (800cee8 <HAL_RCC_OscConfig+0x76c>)
 800cecc:	f043 0301 	orr.w	r3, r3, #1
 800ced0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ced2:	4b05      	ldr	r3, [pc, #20]	@ (800cee8 <HAL_RCC_OscConfig+0x76c>)
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	4a04      	ldr	r2, [pc, #16]	@ (800cee8 <HAL_RCC_OscConfig+0x76c>)
 800ced8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800cedc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cede:	f7f5 fdcf 	bl	8002a80 <HAL_GetTick>
 800cee2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800cee4:	e011      	b.n	800cf0a <HAL_RCC_OscConfig+0x78e>
 800cee6:	bf00      	nop
 800cee8:	58024400 	.word	0x58024400
 800ceec:	58024800 	.word	0x58024800
 800cef0:	fffffc0c 	.word	0xfffffc0c
 800cef4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cef8:	f7f5 fdc2 	bl	8002a80 <HAL_GetTick>
 800cefc:	4602      	mov	r2, r0
 800cefe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf00:	1ad3      	subs	r3, r2, r3
 800cf02:	2b02      	cmp	r3, #2
 800cf04:	d901      	bls.n	800cf0a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800cf06:	2303      	movs	r3, #3
 800cf08:	e08a      	b.n	800d020 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800cf0a:	4b47      	ldr	r3, [pc, #284]	@ (800d028 <HAL_RCC_OscConfig+0x8ac>)
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d0f0      	beq.n	800cef8 <HAL_RCC_OscConfig+0x77c>
 800cf16:	e082      	b.n	800d01e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800cf18:	4b43      	ldr	r3, [pc, #268]	@ (800d028 <HAL_RCC_OscConfig+0x8ac>)
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	4a42      	ldr	r2, [pc, #264]	@ (800d028 <HAL_RCC_OscConfig+0x8ac>)
 800cf1e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800cf22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cf24:	f7f5 fdac 	bl	8002a80 <HAL_GetTick>
 800cf28:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800cf2a:	e008      	b.n	800cf3e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cf2c:	f7f5 fda8 	bl	8002a80 <HAL_GetTick>
 800cf30:	4602      	mov	r2, r0
 800cf32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf34:	1ad3      	subs	r3, r2, r3
 800cf36:	2b02      	cmp	r3, #2
 800cf38:	d901      	bls.n	800cf3e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800cf3a:	2303      	movs	r3, #3
 800cf3c:	e070      	b.n	800d020 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800cf3e:	4b3a      	ldr	r3, [pc, #232]	@ (800d028 <HAL_RCC_OscConfig+0x8ac>)
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d1f0      	bne.n	800cf2c <HAL_RCC_OscConfig+0x7b0>
 800cf4a:	e068      	b.n	800d01e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800cf4c:	4b36      	ldr	r3, [pc, #216]	@ (800d028 <HAL_RCC_OscConfig+0x8ac>)
 800cf4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cf50:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800cf52:	4b35      	ldr	r3, [pc, #212]	@ (800d028 <HAL_RCC_OscConfig+0x8ac>)
 800cf54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cf56:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf5c:	2b01      	cmp	r3, #1
 800cf5e:	d031      	beq.n	800cfc4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800cf60:	693b      	ldr	r3, [r7, #16]
 800cf62:	f003 0203 	and.w	r2, r3, #3
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800cf6a:	429a      	cmp	r2, r3
 800cf6c:	d12a      	bne.n	800cfc4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800cf6e:	693b      	ldr	r3, [r7, #16]
 800cf70:	091b      	lsrs	r3, r3, #4
 800cf72:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800cf7a:	429a      	cmp	r2, r3
 800cf7c:	d122      	bne.n	800cfc4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cf88:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800cf8a:	429a      	cmp	r2, r3
 800cf8c:	d11a      	bne.n	800cfc4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	0a5b      	lsrs	r3, r3, #9
 800cf92:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cf9a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800cf9c:	429a      	cmp	r2, r3
 800cf9e:	d111      	bne.n	800cfc4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800cfa0:	68fb      	ldr	r3, [r7, #12]
 800cfa2:	0c1b      	lsrs	r3, r3, #16
 800cfa4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cfac:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800cfae:	429a      	cmp	r2, r3
 800cfb0:	d108      	bne.n	800cfc4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	0e1b      	lsrs	r3, r3, #24
 800cfb6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cfbe:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800cfc0:	429a      	cmp	r2, r3
 800cfc2:	d001      	beq.n	800cfc8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800cfc4:	2301      	movs	r3, #1
 800cfc6:	e02b      	b.n	800d020 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800cfc8:	4b17      	ldr	r3, [pc, #92]	@ (800d028 <HAL_RCC_OscConfig+0x8ac>)
 800cfca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cfcc:	08db      	lsrs	r3, r3, #3
 800cfce:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cfd2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cfd8:	693a      	ldr	r2, [r7, #16]
 800cfda:	429a      	cmp	r2, r3
 800cfdc:	d01f      	beq.n	800d01e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800cfde:	4b12      	ldr	r3, [pc, #72]	@ (800d028 <HAL_RCC_OscConfig+0x8ac>)
 800cfe0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cfe2:	4a11      	ldr	r2, [pc, #68]	@ (800d028 <HAL_RCC_OscConfig+0x8ac>)
 800cfe4:	f023 0301 	bic.w	r3, r3, #1
 800cfe8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800cfea:	f7f5 fd49 	bl	8002a80 <HAL_GetTick>
 800cfee:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800cff0:	bf00      	nop
 800cff2:	f7f5 fd45 	bl	8002a80 <HAL_GetTick>
 800cff6:	4602      	mov	r2, r0
 800cff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cffa:	4293      	cmp	r3, r2
 800cffc:	d0f9      	beq.n	800cff2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800cffe:	4b0a      	ldr	r3, [pc, #40]	@ (800d028 <HAL_RCC_OscConfig+0x8ac>)
 800d000:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d002:	4b0a      	ldr	r3, [pc, #40]	@ (800d02c <HAL_RCC_OscConfig+0x8b0>)
 800d004:	4013      	ands	r3, r2
 800d006:	687a      	ldr	r2, [r7, #4]
 800d008:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800d00a:	00d2      	lsls	r2, r2, #3
 800d00c:	4906      	ldr	r1, [pc, #24]	@ (800d028 <HAL_RCC_OscConfig+0x8ac>)
 800d00e:	4313      	orrs	r3, r2
 800d010:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800d012:	4b05      	ldr	r3, [pc, #20]	@ (800d028 <HAL_RCC_OscConfig+0x8ac>)
 800d014:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d016:	4a04      	ldr	r2, [pc, #16]	@ (800d028 <HAL_RCC_OscConfig+0x8ac>)
 800d018:	f043 0301 	orr.w	r3, r3, #1
 800d01c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800d01e:	2300      	movs	r3, #0
}
 800d020:	4618      	mov	r0, r3
 800d022:	3730      	adds	r7, #48	@ 0x30
 800d024:	46bd      	mov	sp, r7
 800d026:	bd80      	pop	{r7, pc}
 800d028:	58024400 	.word	0x58024400
 800d02c:	ffff0007 	.word	0xffff0007

0800d030 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800d030:	b580      	push	{r7, lr}
 800d032:	b086      	sub	sp, #24
 800d034:	af00      	add	r7, sp, #0
 800d036:	6078      	str	r0, [r7, #4]
 800d038:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d101      	bne.n	800d044 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800d040:	2301      	movs	r3, #1
 800d042:	e19c      	b.n	800d37e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800d044:	4b8a      	ldr	r3, [pc, #552]	@ (800d270 <HAL_RCC_ClockConfig+0x240>)
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	f003 030f 	and.w	r3, r3, #15
 800d04c:	683a      	ldr	r2, [r7, #0]
 800d04e:	429a      	cmp	r2, r3
 800d050:	d910      	bls.n	800d074 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d052:	4b87      	ldr	r3, [pc, #540]	@ (800d270 <HAL_RCC_ClockConfig+0x240>)
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	f023 020f 	bic.w	r2, r3, #15
 800d05a:	4985      	ldr	r1, [pc, #532]	@ (800d270 <HAL_RCC_ClockConfig+0x240>)
 800d05c:	683b      	ldr	r3, [r7, #0]
 800d05e:	4313      	orrs	r3, r2
 800d060:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d062:	4b83      	ldr	r3, [pc, #524]	@ (800d270 <HAL_RCC_ClockConfig+0x240>)
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	f003 030f 	and.w	r3, r3, #15
 800d06a:	683a      	ldr	r2, [r7, #0]
 800d06c:	429a      	cmp	r2, r3
 800d06e:	d001      	beq.n	800d074 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800d070:	2301      	movs	r3, #1
 800d072:	e184      	b.n	800d37e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	f003 0304 	and.w	r3, r3, #4
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d010      	beq.n	800d0a2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	691a      	ldr	r2, [r3, #16]
 800d084:	4b7b      	ldr	r3, [pc, #492]	@ (800d274 <HAL_RCC_ClockConfig+0x244>)
 800d086:	699b      	ldr	r3, [r3, #24]
 800d088:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800d08c:	429a      	cmp	r2, r3
 800d08e:	d908      	bls.n	800d0a2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800d090:	4b78      	ldr	r3, [pc, #480]	@ (800d274 <HAL_RCC_ClockConfig+0x244>)
 800d092:	699b      	ldr	r3, [r3, #24]
 800d094:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	691b      	ldr	r3, [r3, #16]
 800d09c:	4975      	ldr	r1, [pc, #468]	@ (800d274 <HAL_RCC_ClockConfig+0x244>)
 800d09e:	4313      	orrs	r3, r2
 800d0a0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	f003 0308 	and.w	r3, r3, #8
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d010      	beq.n	800d0d0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	695a      	ldr	r2, [r3, #20]
 800d0b2:	4b70      	ldr	r3, [pc, #448]	@ (800d274 <HAL_RCC_ClockConfig+0x244>)
 800d0b4:	69db      	ldr	r3, [r3, #28]
 800d0b6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800d0ba:	429a      	cmp	r2, r3
 800d0bc:	d908      	bls.n	800d0d0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800d0be:	4b6d      	ldr	r3, [pc, #436]	@ (800d274 <HAL_RCC_ClockConfig+0x244>)
 800d0c0:	69db      	ldr	r3, [r3, #28]
 800d0c2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	695b      	ldr	r3, [r3, #20]
 800d0ca:	496a      	ldr	r1, [pc, #424]	@ (800d274 <HAL_RCC_ClockConfig+0x244>)
 800d0cc:	4313      	orrs	r3, r2
 800d0ce:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	f003 0310 	and.w	r3, r3, #16
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d010      	beq.n	800d0fe <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	699a      	ldr	r2, [r3, #24]
 800d0e0:	4b64      	ldr	r3, [pc, #400]	@ (800d274 <HAL_RCC_ClockConfig+0x244>)
 800d0e2:	69db      	ldr	r3, [r3, #28]
 800d0e4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800d0e8:	429a      	cmp	r2, r3
 800d0ea:	d908      	bls.n	800d0fe <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800d0ec:	4b61      	ldr	r3, [pc, #388]	@ (800d274 <HAL_RCC_ClockConfig+0x244>)
 800d0ee:	69db      	ldr	r3, [r3, #28]
 800d0f0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	699b      	ldr	r3, [r3, #24]
 800d0f8:	495e      	ldr	r1, [pc, #376]	@ (800d274 <HAL_RCC_ClockConfig+0x244>)
 800d0fa:	4313      	orrs	r3, r2
 800d0fc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	f003 0320 	and.w	r3, r3, #32
 800d106:	2b00      	cmp	r3, #0
 800d108:	d010      	beq.n	800d12c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	69da      	ldr	r2, [r3, #28]
 800d10e:	4b59      	ldr	r3, [pc, #356]	@ (800d274 <HAL_RCC_ClockConfig+0x244>)
 800d110:	6a1b      	ldr	r3, [r3, #32]
 800d112:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800d116:	429a      	cmp	r2, r3
 800d118:	d908      	bls.n	800d12c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800d11a:	4b56      	ldr	r3, [pc, #344]	@ (800d274 <HAL_RCC_ClockConfig+0x244>)
 800d11c:	6a1b      	ldr	r3, [r3, #32]
 800d11e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	69db      	ldr	r3, [r3, #28]
 800d126:	4953      	ldr	r1, [pc, #332]	@ (800d274 <HAL_RCC_ClockConfig+0x244>)
 800d128:	4313      	orrs	r3, r2
 800d12a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	f003 0302 	and.w	r3, r3, #2
 800d134:	2b00      	cmp	r3, #0
 800d136:	d010      	beq.n	800d15a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	68da      	ldr	r2, [r3, #12]
 800d13c:	4b4d      	ldr	r3, [pc, #308]	@ (800d274 <HAL_RCC_ClockConfig+0x244>)
 800d13e:	699b      	ldr	r3, [r3, #24]
 800d140:	f003 030f 	and.w	r3, r3, #15
 800d144:	429a      	cmp	r2, r3
 800d146:	d908      	bls.n	800d15a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d148:	4b4a      	ldr	r3, [pc, #296]	@ (800d274 <HAL_RCC_ClockConfig+0x244>)
 800d14a:	699b      	ldr	r3, [r3, #24]
 800d14c:	f023 020f 	bic.w	r2, r3, #15
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	68db      	ldr	r3, [r3, #12]
 800d154:	4947      	ldr	r1, [pc, #284]	@ (800d274 <HAL_RCC_ClockConfig+0x244>)
 800d156:	4313      	orrs	r3, r2
 800d158:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	f003 0301 	and.w	r3, r3, #1
 800d162:	2b00      	cmp	r3, #0
 800d164:	d055      	beq.n	800d212 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800d166:	4b43      	ldr	r3, [pc, #268]	@ (800d274 <HAL_RCC_ClockConfig+0x244>)
 800d168:	699b      	ldr	r3, [r3, #24]
 800d16a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	689b      	ldr	r3, [r3, #8]
 800d172:	4940      	ldr	r1, [pc, #256]	@ (800d274 <HAL_RCC_ClockConfig+0x244>)
 800d174:	4313      	orrs	r3, r2
 800d176:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	685b      	ldr	r3, [r3, #4]
 800d17c:	2b02      	cmp	r3, #2
 800d17e:	d107      	bne.n	800d190 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800d180:	4b3c      	ldr	r3, [pc, #240]	@ (800d274 <HAL_RCC_ClockConfig+0x244>)
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d121      	bne.n	800d1d0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800d18c:	2301      	movs	r3, #1
 800d18e:	e0f6      	b.n	800d37e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	685b      	ldr	r3, [r3, #4]
 800d194:	2b03      	cmp	r3, #3
 800d196:	d107      	bne.n	800d1a8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800d198:	4b36      	ldr	r3, [pc, #216]	@ (800d274 <HAL_RCC_ClockConfig+0x244>)
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d115      	bne.n	800d1d0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800d1a4:	2301      	movs	r3, #1
 800d1a6:	e0ea      	b.n	800d37e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	685b      	ldr	r3, [r3, #4]
 800d1ac:	2b01      	cmp	r3, #1
 800d1ae:	d107      	bne.n	800d1c0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800d1b0:	4b30      	ldr	r3, [pc, #192]	@ (800d274 <HAL_RCC_ClockConfig+0x244>)
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d109      	bne.n	800d1d0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800d1bc:	2301      	movs	r3, #1
 800d1be:	e0de      	b.n	800d37e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800d1c0:	4b2c      	ldr	r3, [pc, #176]	@ (800d274 <HAL_RCC_ClockConfig+0x244>)
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	f003 0304 	and.w	r3, r3, #4
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d101      	bne.n	800d1d0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800d1cc:	2301      	movs	r3, #1
 800d1ce:	e0d6      	b.n	800d37e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800d1d0:	4b28      	ldr	r3, [pc, #160]	@ (800d274 <HAL_RCC_ClockConfig+0x244>)
 800d1d2:	691b      	ldr	r3, [r3, #16]
 800d1d4:	f023 0207 	bic.w	r2, r3, #7
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	685b      	ldr	r3, [r3, #4]
 800d1dc:	4925      	ldr	r1, [pc, #148]	@ (800d274 <HAL_RCC_ClockConfig+0x244>)
 800d1de:	4313      	orrs	r3, r2
 800d1e0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d1e2:	f7f5 fc4d 	bl	8002a80 <HAL_GetTick>
 800d1e6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d1e8:	e00a      	b.n	800d200 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d1ea:	f7f5 fc49 	bl	8002a80 <HAL_GetTick>
 800d1ee:	4602      	mov	r2, r0
 800d1f0:	697b      	ldr	r3, [r7, #20]
 800d1f2:	1ad3      	subs	r3, r2, r3
 800d1f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d1f8:	4293      	cmp	r3, r2
 800d1fa:	d901      	bls.n	800d200 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800d1fc:	2303      	movs	r3, #3
 800d1fe:	e0be      	b.n	800d37e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d200:	4b1c      	ldr	r3, [pc, #112]	@ (800d274 <HAL_RCC_ClockConfig+0x244>)
 800d202:	691b      	ldr	r3, [r3, #16]
 800d204:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	685b      	ldr	r3, [r3, #4]
 800d20c:	00db      	lsls	r3, r3, #3
 800d20e:	429a      	cmp	r2, r3
 800d210:	d1eb      	bne.n	800d1ea <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	f003 0302 	and.w	r3, r3, #2
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d010      	beq.n	800d240 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	68da      	ldr	r2, [r3, #12]
 800d222:	4b14      	ldr	r3, [pc, #80]	@ (800d274 <HAL_RCC_ClockConfig+0x244>)
 800d224:	699b      	ldr	r3, [r3, #24]
 800d226:	f003 030f 	and.w	r3, r3, #15
 800d22a:	429a      	cmp	r2, r3
 800d22c:	d208      	bcs.n	800d240 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d22e:	4b11      	ldr	r3, [pc, #68]	@ (800d274 <HAL_RCC_ClockConfig+0x244>)
 800d230:	699b      	ldr	r3, [r3, #24]
 800d232:	f023 020f 	bic.w	r2, r3, #15
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	68db      	ldr	r3, [r3, #12]
 800d23a:	490e      	ldr	r1, [pc, #56]	@ (800d274 <HAL_RCC_ClockConfig+0x244>)
 800d23c:	4313      	orrs	r3, r2
 800d23e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800d240:	4b0b      	ldr	r3, [pc, #44]	@ (800d270 <HAL_RCC_ClockConfig+0x240>)
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	f003 030f 	and.w	r3, r3, #15
 800d248:	683a      	ldr	r2, [r7, #0]
 800d24a:	429a      	cmp	r2, r3
 800d24c:	d214      	bcs.n	800d278 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d24e:	4b08      	ldr	r3, [pc, #32]	@ (800d270 <HAL_RCC_ClockConfig+0x240>)
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	f023 020f 	bic.w	r2, r3, #15
 800d256:	4906      	ldr	r1, [pc, #24]	@ (800d270 <HAL_RCC_ClockConfig+0x240>)
 800d258:	683b      	ldr	r3, [r7, #0]
 800d25a:	4313      	orrs	r3, r2
 800d25c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d25e:	4b04      	ldr	r3, [pc, #16]	@ (800d270 <HAL_RCC_ClockConfig+0x240>)
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	f003 030f 	and.w	r3, r3, #15
 800d266:	683a      	ldr	r2, [r7, #0]
 800d268:	429a      	cmp	r2, r3
 800d26a:	d005      	beq.n	800d278 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800d26c:	2301      	movs	r3, #1
 800d26e:	e086      	b.n	800d37e <HAL_RCC_ClockConfig+0x34e>
 800d270:	52002000 	.word	0x52002000
 800d274:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	f003 0304 	and.w	r3, r3, #4
 800d280:	2b00      	cmp	r3, #0
 800d282:	d010      	beq.n	800d2a6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	691a      	ldr	r2, [r3, #16]
 800d288:	4b3f      	ldr	r3, [pc, #252]	@ (800d388 <HAL_RCC_ClockConfig+0x358>)
 800d28a:	699b      	ldr	r3, [r3, #24]
 800d28c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800d290:	429a      	cmp	r2, r3
 800d292:	d208      	bcs.n	800d2a6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800d294:	4b3c      	ldr	r3, [pc, #240]	@ (800d388 <HAL_RCC_ClockConfig+0x358>)
 800d296:	699b      	ldr	r3, [r3, #24]
 800d298:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	691b      	ldr	r3, [r3, #16]
 800d2a0:	4939      	ldr	r1, [pc, #228]	@ (800d388 <HAL_RCC_ClockConfig+0x358>)
 800d2a2:	4313      	orrs	r3, r2
 800d2a4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	f003 0308 	and.w	r3, r3, #8
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d010      	beq.n	800d2d4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	695a      	ldr	r2, [r3, #20]
 800d2b6:	4b34      	ldr	r3, [pc, #208]	@ (800d388 <HAL_RCC_ClockConfig+0x358>)
 800d2b8:	69db      	ldr	r3, [r3, #28]
 800d2ba:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800d2be:	429a      	cmp	r2, r3
 800d2c0:	d208      	bcs.n	800d2d4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800d2c2:	4b31      	ldr	r3, [pc, #196]	@ (800d388 <HAL_RCC_ClockConfig+0x358>)
 800d2c4:	69db      	ldr	r3, [r3, #28]
 800d2c6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	695b      	ldr	r3, [r3, #20]
 800d2ce:	492e      	ldr	r1, [pc, #184]	@ (800d388 <HAL_RCC_ClockConfig+0x358>)
 800d2d0:	4313      	orrs	r3, r2
 800d2d2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	f003 0310 	and.w	r3, r3, #16
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d010      	beq.n	800d302 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	699a      	ldr	r2, [r3, #24]
 800d2e4:	4b28      	ldr	r3, [pc, #160]	@ (800d388 <HAL_RCC_ClockConfig+0x358>)
 800d2e6:	69db      	ldr	r3, [r3, #28]
 800d2e8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800d2ec:	429a      	cmp	r2, r3
 800d2ee:	d208      	bcs.n	800d302 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800d2f0:	4b25      	ldr	r3, [pc, #148]	@ (800d388 <HAL_RCC_ClockConfig+0x358>)
 800d2f2:	69db      	ldr	r3, [r3, #28]
 800d2f4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	699b      	ldr	r3, [r3, #24]
 800d2fc:	4922      	ldr	r1, [pc, #136]	@ (800d388 <HAL_RCC_ClockConfig+0x358>)
 800d2fe:	4313      	orrs	r3, r2
 800d300:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	f003 0320 	and.w	r3, r3, #32
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d010      	beq.n	800d330 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	69da      	ldr	r2, [r3, #28]
 800d312:	4b1d      	ldr	r3, [pc, #116]	@ (800d388 <HAL_RCC_ClockConfig+0x358>)
 800d314:	6a1b      	ldr	r3, [r3, #32]
 800d316:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800d31a:	429a      	cmp	r2, r3
 800d31c:	d208      	bcs.n	800d330 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800d31e:	4b1a      	ldr	r3, [pc, #104]	@ (800d388 <HAL_RCC_ClockConfig+0x358>)
 800d320:	6a1b      	ldr	r3, [r3, #32]
 800d322:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	69db      	ldr	r3, [r3, #28]
 800d32a:	4917      	ldr	r1, [pc, #92]	@ (800d388 <HAL_RCC_ClockConfig+0x358>)
 800d32c:	4313      	orrs	r3, r2
 800d32e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800d330:	f000 f834 	bl	800d39c <HAL_RCC_GetSysClockFreq>
 800d334:	4602      	mov	r2, r0
 800d336:	4b14      	ldr	r3, [pc, #80]	@ (800d388 <HAL_RCC_ClockConfig+0x358>)
 800d338:	699b      	ldr	r3, [r3, #24]
 800d33a:	0a1b      	lsrs	r3, r3, #8
 800d33c:	f003 030f 	and.w	r3, r3, #15
 800d340:	4912      	ldr	r1, [pc, #72]	@ (800d38c <HAL_RCC_ClockConfig+0x35c>)
 800d342:	5ccb      	ldrb	r3, [r1, r3]
 800d344:	f003 031f 	and.w	r3, r3, #31
 800d348:	fa22 f303 	lsr.w	r3, r2, r3
 800d34c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800d34e:	4b0e      	ldr	r3, [pc, #56]	@ (800d388 <HAL_RCC_ClockConfig+0x358>)
 800d350:	699b      	ldr	r3, [r3, #24]
 800d352:	f003 030f 	and.w	r3, r3, #15
 800d356:	4a0d      	ldr	r2, [pc, #52]	@ (800d38c <HAL_RCC_ClockConfig+0x35c>)
 800d358:	5cd3      	ldrb	r3, [r2, r3]
 800d35a:	f003 031f 	and.w	r3, r3, #31
 800d35e:	693a      	ldr	r2, [r7, #16]
 800d360:	fa22 f303 	lsr.w	r3, r2, r3
 800d364:	4a0a      	ldr	r2, [pc, #40]	@ (800d390 <HAL_RCC_ClockConfig+0x360>)
 800d366:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800d368:	4a0a      	ldr	r2, [pc, #40]	@ (800d394 <HAL_RCC_ClockConfig+0x364>)
 800d36a:	693b      	ldr	r3, [r7, #16]
 800d36c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800d36e:	4b0a      	ldr	r3, [pc, #40]	@ (800d398 <HAL_RCC_ClockConfig+0x368>)
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	4618      	mov	r0, r3
 800d374:	f7f5 fb3a 	bl	80029ec <HAL_InitTick>
 800d378:	4603      	mov	r3, r0
 800d37a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800d37c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d37e:	4618      	mov	r0, r3
 800d380:	3718      	adds	r7, #24
 800d382:	46bd      	mov	sp, r7
 800d384:	bd80      	pop	{r7, pc}
 800d386:	bf00      	nop
 800d388:	58024400 	.word	0x58024400
 800d38c:	08017808 	.word	0x08017808
 800d390:	24000018 	.word	0x24000018
 800d394:	24000014 	.word	0x24000014
 800d398:	2400001c 	.word	0x2400001c

0800d39c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800d39c:	b480      	push	{r7}
 800d39e:	b089      	sub	sp, #36	@ 0x24
 800d3a0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800d3a2:	4bb3      	ldr	r3, [pc, #716]	@ (800d670 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d3a4:	691b      	ldr	r3, [r3, #16]
 800d3a6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d3aa:	2b18      	cmp	r3, #24
 800d3ac:	f200 8155 	bhi.w	800d65a <HAL_RCC_GetSysClockFreq+0x2be>
 800d3b0:	a201      	add	r2, pc, #4	@ (adr r2, 800d3b8 <HAL_RCC_GetSysClockFreq+0x1c>)
 800d3b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3b6:	bf00      	nop
 800d3b8:	0800d41d 	.word	0x0800d41d
 800d3bc:	0800d65b 	.word	0x0800d65b
 800d3c0:	0800d65b 	.word	0x0800d65b
 800d3c4:	0800d65b 	.word	0x0800d65b
 800d3c8:	0800d65b 	.word	0x0800d65b
 800d3cc:	0800d65b 	.word	0x0800d65b
 800d3d0:	0800d65b 	.word	0x0800d65b
 800d3d4:	0800d65b 	.word	0x0800d65b
 800d3d8:	0800d443 	.word	0x0800d443
 800d3dc:	0800d65b 	.word	0x0800d65b
 800d3e0:	0800d65b 	.word	0x0800d65b
 800d3e4:	0800d65b 	.word	0x0800d65b
 800d3e8:	0800d65b 	.word	0x0800d65b
 800d3ec:	0800d65b 	.word	0x0800d65b
 800d3f0:	0800d65b 	.word	0x0800d65b
 800d3f4:	0800d65b 	.word	0x0800d65b
 800d3f8:	0800d449 	.word	0x0800d449
 800d3fc:	0800d65b 	.word	0x0800d65b
 800d400:	0800d65b 	.word	0x0800d65b
 800d404:	0800d65b 	.word	0x0800d65b
 800d408:	0800d65b 	.word	0x0800d65b
 800d40c:	0800d65b 	.word	0x0800d65b
 800d410:	0800d65b 	.word	0x0800d65b
 800d414:	0800d65b 	.word	0x0800d65b
 800d418:	0800d44f 	.word	0x0800d44f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d41c:	4b94      	ldr	r3, [pc, #592]	@ (800d670 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	f003 0320 	and.w	r3, r3, #32
 800d424:	2b00      	cmp	r3, #0
 800d426:	d009      	beq.n	800d43c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d428:	4b91      	ldr	r3, [pc, #580]	@ (800d670 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	08db      	lsrs	r3, r3, #3
 800d42e:	f003 0303 	and.w	r3, r3, #3
 800d432:	4a90      	ldr	r2, [pc, #576]	@ (800d674 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800d434:	fa22 f303 	lsr.w	r3, r2, r3
 800d438:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800d43a:	e111      	b.n	800d660 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800d43c:	4b8d      	ldr	r3, [pc, #564]	@ (800d674 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800d43e:	61bb      	str	r3, [r7, #24]
      break;
 800d440:	e10e      	b.n	800d660 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800d442:	4b8d      	ldr	r3, [pc, #564]	@ (800d678 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800d444:	61bb      	str	r3, [r7, #24]
      break;
 800d446:	e10b      	b.n	800d660 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800d448:	4b8c      	ldr	r3, [pc, #560]	@ (800d67c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800d44a:	61bb      	str	r3, [r7, #24]
      break;
 800d44c:	e108      	b.n	800d660 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d44e:	4b88      	ldr	r3, [pc, #544]	@ (800d670 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d450:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d452:	f003 0303 	and.w	r3, r3, #3
 800d456:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800d458:	4b85      	ldr	r3, [pc, #532]	@ (800d670 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d45a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d45c:	091b      	lsrs	r3, r3, #4
 800d45e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d462:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800d464:	4b82      	ldr	r3, [pc, #520]	@ (800d670 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d466:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d468:	f003 0301 	and.w	r3, r3, #1
 800d46c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800d46e:	4b80      	ldr	r3, [pc, #512]	@ (800d670 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d470:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d472:	08db      	lsrs	r3, r3, #3
 800d474:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d478:	68fa      	ldr	r2, [r7, #12]
 800d47a:	fb02 f303 	mul.w	r3, r2, r3
 800d47e:	ee07 3a90 	vmov	s15, r3
 800d482:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d486:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800d48a:	693b      	ldr	r3, [r7, #16]
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	f000 80e1 	beq.w	800d654 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 800d492:	697b      	ldr	r3, [r7, #20]
 800d494:	2b02      	cmp	r3, #2
 800d496:	f000 8083 	beq.w	800d5a0 <HAL_RCC_GetSysClockFreq+0x204>
 800d49a:	697b      	ldr	r3, [r7, #20]
 800d49c:	2b02      	cmp	r3, #2
 800d49e:	f200 80a1 	bhi.w	800d5e4 <HAL_RCC_GetSysClockFreq+0x248>
 800d4a2:	697b      	ldr	r3, [r7, #20]
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d003      	beq.n	800d4b0 <HAL_RCC_GetSysClockFreq+0x114>
 800d4a8:	697b      	ldr	r3, [r7, #20]
 800d4aa:	2b01      	cmp	r3, #1
 800d4ac:	d056      	beq.n	800d55c <HAL_RCC_GetSysClockFreq+0x1c0>
 800d4ae:	e099      	b.n	800d5e4 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d4b0:	4b6f      	ldr	r3, [pc, #444]	@ (800d670 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	f003 0320 	and.w	r3, r3, #32
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d02d      	beq.n	800d518 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d4bc:	4b6c      	ldr	r3, [pc, #432]	@ (800d670 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	08db      	lsrs	r3, r3, #3
 800d4c2:	f003 0303 	and.w	r3, r3, #3
 800d4c6:	4a6b      	ldr	r2, [pc, #428]	@ (800d674 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800d4c8:	fa22 f303 	lsr.w	r3, r2, r3
 800d4cc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	ee07 3a90 	vmov	s15, r3
 800d4d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d4d8:	693b      	ldr	r3, [r7, #16]
 800d4da:	ee07 3a90 	vmov	s15, r3
 800d4de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d4e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d4e6:	4b62      	ldr	r3, [pc, #392]	@ (800d670 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d4e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d4ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d4ee:	ee07 3a90 	vmov	s15, r3
 800d4f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d4f6:	ed97 6a02 	vldr	s12, [r7, #8]
 800d4fa:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800d680 <HAL_RCC_GetSysClockFreq+0x2e4>
 800d4fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d502:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d506:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d50a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d50e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d512:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800d516:	e087      	b.n	800d628 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d518:	693b      	ldr	r3, [r7, #16]
 800d51a:	ee07 3a90 	vmov	s15, r3
 800d51e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d522:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800d684 <HAL_RCC_GetSysClockFreq+0x2e8>
 800d526:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d52a:	4b51      	ldr	r3, [pc, #324]	@ (800d670 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d52c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d52e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d532:	ee07 3a90 	vmov	s15, r3
 800d536:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d53a:	ed97 6a02 	vldr	s12, [r7, #8]
 800d53e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800d680 <HAL_RCC_GetSysClockFreq+0x2e4>
 800d542:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d546:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d54a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d54e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d552:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d556:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800d55a:	e065      	b.n	800d628 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d55c:	693b      	ldr	r3, [r7, #16]
 800d55e:	ee07 3a90 	vmov	s15, r3
 800d562:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d566:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800d688 <HAL_RCC_GetSysClockFreq+0x2ec>
 800d56a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d56e:	4b40      	ldr	r3, [pc, #256]	@ (800d670 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d572:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d576:	ee07 3a90 	vmov	s15, r3
 800d57a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d57e:	ed97 6a02 	vldr	s12, [r7, #8]
 800d582:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800d680 <HAL_RCC_GetSysClockFreq+0x2e4>
 800d586:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d58a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d58e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d592:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d596:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d59a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800d59e:	e043      	b.n	800d628 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d5a0:	693b      	ldr	r3, [r7, #16]
 800d5a2:	ee07 3a90 	vmov	s15, r3
 800d5a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d5aa:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800d68c <HAL_RCC_GetSysClockFreq+0x2f0>
 800d5ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d5b2:	4b2f      	ldr	r3, [pc, #188]	@ (800d670 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d5b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d5b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d5ba:	ee07 3a90 	vmov	s15, r3
 800d5be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d5c2:	ed97 6a02 	vldr	s12, [r7, #8]
 800d5c6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800d680 <HAL_RCC_GetSysClockFreq+0x2e4>
 800d5ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d5ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d5d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d5d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d5da:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d5de:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800d5e2:	e021      	b.n	800d628 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d5e4:	693b      	ldr	r3, [r7, #16]
 800d5e6:	ee07 3a90 	vmov	s15, r3
 800d5ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d5ee:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800d688 <HAL_RCC_GetSysClockFreq+0x2ec>
 800d5f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d5f6:	4b1e      	ldr	r3, [pc, #120]	@ (800d670 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d5f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d5fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d5fe:	ee07 3a90 	vmov	s15, r3
 800d602:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d606:	ed97 6a02 	vldr	s12, [r7, #8]
 800d60a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800d680 <HAL_RCC_GetSysClockFreq+0x2e4>
 800d60e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d612:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d616:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d61a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d61e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d622:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800d626:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800d628:	4b11      	ldr	r3, [pc, #68]	@ (800d670 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d62a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d62c:	0a5b      	lsrs	r3, r3, #9
 800d62e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d632:	3301      	adds	r3, #1
 800d634:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800d636:	683b      	ldr	r3, [r7, #0]
 800d638:	ee07 3a90 	vmov	s15, r3
 800d63c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800d640:	edd7 6a07 	vldr	s13, [r7, #28]
 800d644:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d648:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d64c:	ee17 3a90 	vmov	r3, s15
 800d650:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800d652:	e005      	b.n	800d660 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800d654:	2300      	movs	r3, #0
 800d656:	61bb      	str	r3, [r7, #24]
      break;
 800d658:	e002      	b.n	800d660 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800d65a:	4b07      	ldr	r3, [pc, #28]	@ (800d678 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800d65c:	61bb      	str	r3, [r7, #24]
      break;
 800d65e:	bf00      	nop
  }

  return sysclockfreq;
 800d660:	69bb      	ldr	r3, [r7, #24]
}
 800d662:	4618      	mov	r0, r3
 800d664:	3724      	adds	r7, #36	@ 0x24
 800d666:	46bd      	mov	sp, r7
 800d668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d66c:	4770      	bx	lr
 800d66e:	bf00      	nop
 800d670:	58024400 	.word	0x58024400
 800d674:	03d09000 	.word	0x03d09000
 800d678:	003d0900 	.word	0x003d0900
 800d67c:	017d7840 	.word	0x017d7840
 800d680:	46000000 	.word	0x46000000
 800d684:	4c742400 	.word	0x4c742400
 800d688:	4a742400 	.word	0x4a742400
 800d68c:	4bbebc20 	.word	0x4bbebc20

0800d690 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800d690:	b580      	push	{r7, lr}
 800d692:	b082      	sub	sp, #8
 800d694:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800d696:	f7ff fe81 	bl	800d39c <HAL_RCC_GetSysClockFreq>
 800d69a:	4602      	mov	r2, r0
 800d69c:	4b10      	ldr	r3, [pc, #64]	@ (800d6e0 <HAL_RCC_GetHCLKFreq+0x50>)
 800d69e:	699b      	ldr	r3, [r3, #24]
 800d6a0:	0a1b      	lsrs	r3, r3, #8
 800d6a2:	f003 030f 	and.w	r3, r3, #15
 800d6a6:	490f      	ldr	r1, [pc, #60]	@ (800d6e4 <HAL_RCC_GetHCLKFreq+0x54>)
 800d6a8:	5ccb      	ldrb	r3, [r1, r3]
 800d6aa:	f003 031f 	and.w	r3, r3, #31
 800d6ae:	fa22 f303 	lsr.w	r3, r2, r3
 800d6b2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800d6b4:	4b0a      	ldr	r3, [pc, #40]	@ (800d6e0 <HAL_RCC_GetHCLKFreq+0x50>)
 800d6b6:	699b      	ldr	r3, [r3, #24]
 800d6b8:	f003 030f 	and.w	r3, r3, #15
 800d6bc:	4a09      	ldr	r2, [pc, #36]	@ (800d6e4 <HAL_RCC_GetHCLKFreq+0x54>)
 800d6be:	5cd3      	ldrb	r3, [r2, r3]
 800d6c0:	f003 031f 	and.w	r3, r3, #31
 800d6c4:	687a      	ldr	r2, [r7, #4]
 800d6c6:	fa22 f303 	lsr.w	r3, r2, r3
 800d6ca:	4a07      	ldr	r2, [pc, #28]	@ (800d6e8 <HAL_RCC_GetHCLKFreq+0x58>)
 800d6cc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800d6ce:	4a07      	ldr	r2, [pc, #28]	@ (800d6ec <HAL_RCC_GetHCLKFreq+0x5c>)
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800d6d4:	4b04      	ldr	r3, [pc, #16]	@ (800d6e8 <HAL_RCC_GetHCLKFreq+0x58>)
 800d6d6:	681b      	ldr	r3, [r3, #0]
}
 800d6d8:	4618      	mov	r0, r3
 800d6da:	3708      	adds	r7, #8
 800d6dc:	46bd      	mov	sp, r7
 800d6de:	bd80      	pop	{r7, pc}
 800d6e0:	58024400 	.word	0x58024400
 800d6e4:	08017808 	.word	0x08017808
 800d6e8:	24000018 	.word	0x24000018
 800d6ec:	24000014 	.word	0x24000014

0800d6f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800d6f0:	b580      	push	{r7, lr}
 800d6f2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800d6f4:	f7ff ffcc 	bl	800d690 <HAL_RCC_GetHCLKFreq>
 800d6f8:	4602      	mov	r2, r0
 800d6fa:	4b06      	ldr	r3, [pc, #24]	@ (800d714 <HAL_RCC_GetPCLK1Freq+0x24>)
 800d6fc:	69db      	ldr	r3, [r3, #28]
 800d6fe:	091b      	lsrs	r3, r3, #4
 800d700:	f003 0307 	and.w	r3, r3, #7
 800d704:	4904      	ldr	r1, [pc, #16]	@ (800d718 <HAL_RCC_GetPCLK1Freq+0x28>)
 800d706:	5ccb      	ldrb	r3, [r1, r3]
 800d708:	f003 031f 	and.w	r3, r3, #31
 800d70c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800d710:	4618      	mov	r0, r3
 800d712:	bd80      	pop	{r7, pc}
 800d714:	58024400 	.word	0x58024400
 800d718:	08017808 	.word	0x08017808

0800d71c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800d71c:	b580      	push	{r7, lr}
 800d71e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800d720:	f7ff ffb6 	bl	800d690 <HAL_RCC_GetHCLKFreq>
 800d724:	4602      	mov	r2, r0
 800d726:	4b06      	ldr	r3, [pc, #24]	@ (800d740 <HAL_RCC_GetPCLK2Freq+0x24>)
 800d728:	69db      	ldr	r3, [r3, #28]
 800d72a:	0a1b      	lsrs	r3, r3, #8
 800d72c:	f003 0307 	and.w	r3, r3, #7
 800d730:	4904      	ldr	r1, [pc, #16]	@ (800d744 <HAL_RCC_GetPCLK2Freq+0x28>)
 800d732:	5ccb      	ldrb	r3, [r1, r3]
 800d734:	f003 031f 	and.w	r3, r3, #31
 800d738:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800d73c:	4618      	mov	r0, r3
 800d73e:	bd80      	pop	{r7, pc}
 800d740:	58024400 	.word	0x58024400
 800d744:	08017808 	.word	0x08017808

0800d748 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800d748:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d74c:	b0ca      	sub	sp, #296	@ 0x128
 800d74e:	af00      	add	r7, sp, #0
 800d750:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800d754:	2300      	movs	r3, #0
 800d756:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800d75a:	2300      	movs	r3, #0
 800d75c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800d760:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d764:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d768:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800d76c:	2500      	movs	r5, #0
 800d76e:	ea54 0305 	orrs.w	r3, r4, r5
 800d772:	d049      	beq.n	800d808 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800d774:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d778:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d77a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800d77e:	d02f      	beq.n	800d7e0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800d780:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800d784:	d828      	bhi.n	800d7d8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800d786:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d78a:	d01a      	beq.n	800d7c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800d78c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d790:	d822      	bhi.n	800d7d8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800d792:	2b00      	cmp	r3, #0
 800d794:	d003      	beq.n	800d79e <HAL_RCCEx_PeriphCLKConfig+0x56>
 800d796:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d79a:	d007      	beq.n	800d7ac <HAL_RCCEx_PeriphCLKConfig+0x64>
 800d79c:	e01c      	b.n	800d7d8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d79e:	4bb8      	ldr	r3, [pc, #736]	@ (800da80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d7a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d7a2:	4ab7      	ldr	r2, [pc, #732]	@ (800da80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d7a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d7a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800d7aa:	e01a      	b.n	800d7e2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800d7ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d7b0:	3308      	adds	r3, #8
 800d7b2:	2102      	movs	r1, #2
 800d7b4:	4618      	mov	r0, r3
 800d7b6:	f001 fc8f 	bl	800f0d8 <RCCEx_PLL2_Config>
 800d7ba:	4603      	mov	r3, r0
 800d7bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800d7c0:	e00f      	b.n	800d7e2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d7c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d7c6:	3328      	adds	r3, #40	@ 0x28
 800d7c8:	2102      	movs	r1, #2
 800d7ca:	4618      	mov	r0, r3
 800d7cc:	f001 fd36 	bl	800f23c <RCCEx_PLL3_Config>
 800d7d0:	4603      	mov	r3, r0
 800d7d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800d7d6:	e004      	b.n	800d7e2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d7d8:	2301      	movs	r3, #1
 800d7da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d7de:	e000      	b.n	800d7e2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800d7e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d7e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d10a      	bne.n	800d800 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800d7ea:	4ba5      	ldr	r3, [pc, #660]	@ (800da80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d7ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d7ee:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800d7f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d7f6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d7f8:	4aa1      	ldr	r2, [pc, #644]	@ (800da80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d7fa:	430b      	orrs	r3, r1
 800d7fc:	6513      	str	r3, [r2, #80]	@ 0x50
 800d7fe:	e003      	b.n	800d808 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d800:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d804:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800d808:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d80c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d810:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800d814:	f04f 0900 	mov.w	r9, #0
 800d818:	ea58 0309 	orrs.w	r3, r8, r9
 800d81c:	d047      	beq.n	800d8ae <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800d81e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d822:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d824:	2b04      	cmp	r3, #4
 800d826:	d82a      	bhi.n	800d87e <HAL_RCCEx_PeriphCLKConfig+0x136>
 800d828:	a201      	add	r2, pc, #4	@ (adr r2, 800d830 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800d82a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d82e:	bf00      	nop
 800d830:	0800d845 	.word	0x0800d845
 800d834:	0800d853 	.word	0x0800d853
 800d838:	0800d869 	.word	0x0800d869
 800d83c:	0800d887 	.word	0x0800d887
 800d840:	0800d887 	.word	0x0800d887
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d844:	4b8e      	ldr	r3, [pc, #568]	@ (800da80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d846:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d848:	4a8d      	ldr	r2, [pc, #564]	@ (800da80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d84a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d84e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800d850:	e01a      	b.n	800d888 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d852:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d856:	3308      	adds	r3, #8
 800d858:	2100      	movs	r1, #0
 800d85a:	4618      	mov	r0, r3
 800d85c:	f001 fc3c 	bl	800f0d8 <RCCEx_PLL2_Config>
 800d860:	4603      	mov	r3, r0
 800d862:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800d866:	e00f      	b.n	800d888 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800d868:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d86c:	3328      	adds	r3, #40	@ 0x28
 800d86e:	2100      	movs	r1, #0
 800d870:	4618      	mov	r0, r3
 800d872:	f001 fce3 	bl	800f23c <RCCEx_PLL3_Config>
 800d876:	4603      	mov	r3, r0
 800d878:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800d87c:	e004      	b.n	800d888 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d87e:	2301      	movs	r3, #1
 800d880:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d884:	e000      	b.n	800d888 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800d886:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d888:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d10a      	bne.n	800d8a6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800d890:	4b7b      	ldr	r3, [pc, #492]	@ (800da80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d892:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d894:	f023 0107 	bic.w	r1, r3, #7
 800d898:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d89c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d89e:	4a78      	ldr	r2, [pc, #480]	@ (800da80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d8a0:	430b      	orrs	r3, r1
 800d8a2:	6513      	str	r3, [r2, #80]	@ 0x50
 800d8a4:	e003      	b.n	800d8ae <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d8a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d8aa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800d8ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d8b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8b6:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800d8ba:	f04f 0b00 	mov.w	fp, #0
 800d8be:	ea5a 030b 	orrs.w	r3, sl, fp
 800d8c2:	d04c      	beq.n	800d95e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800d8c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d8c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d8ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d8ce:	d030      	beq.n	800d932 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800d8d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d8d4:	d829      	bhi.n	800d92a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800d8d6:	2bc0      	cmp	r3, #192	@ 0xc0
 800d8d8:	d02d      	beq.n	800d936 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800d8da:	2bc0      	cmp	r3, #192	@ 0xc0
 800d8dc:	d825      	bhi.n	800d92a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800d8de:	2b80      	cmp	r3, #128	@ 0x80
 800d8e0:	d018      	beq.n	800d914 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800d8e2:	2b80      	cmp	r3, #128	@ 0x80
 800d8e4:	d821      	bhi.n	800d92a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d002      	beq.n	800d8f0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800d8ea:	2b40      	cmp	r3, #64	@ 0x40
 800d8ec:	d007      	beq.n	800d8fe <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800d8ee:	e01c      	b.n	800d92a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d8f0:	4b63      	ldr	r3, [pc, #396]	@ (800da80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d8f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d8f4:	4a62      	ldr	r2, [pc, #392]	@ (800da80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d8f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d8fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800d8fc:	e01c      	b.n	800d938 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d8fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d902:	3308      	adds	r3, #8
 800d904:	2100      	movs	r1, #0
 800d906:	4618      	mov	r0, r3
 800d908:	f001 fbe6 	bl	800f0d8 <RCCEx_PLL2_Config>
 800d90c:	4603      	mov	r3, r0
 800d90e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800d912:	e011      	b.n	800d938 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800d914:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d918:	3328      	adds	r3, #40	@ 0x28
 800d91a:	2100      	movs	r1, #0
 800d91c:	4618      	mov	r0, r3
 800d91e:	f001 fc8d 	bl	800f23c <RCCEx_PLL3_Config>
 800d922:	4603      	mov	r3, r0
 800d924:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800d928:	e006      	b.n	800d938 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d92a:	2301      	movs	r3, #1
 800d92c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d930:	e002      	b.n	800d938 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800d932:	bf00      	nop
 800d934:	e000      	b.n	800d938 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800d936:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d938:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d10a      	bne.n	800d956 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800d940:	4b4f      	ldr	r3, [pc, #316]	@ (800da80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d942:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d944:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800d948:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d94c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d94e:	4a4c      	ldr	r2, [pc, #304]	@ (800da80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d950:	430b      	orrs	r3, r1
 800d952:	6513      	str	r3, [r2, #80]	@ 0x50
 800d954:	e003      	b.n	800d95e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d956:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d95a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800d95e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d962:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d966:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800d96a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800d96e:	2300      	movs	r3, #0
 800d970:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800d974:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800d978:	460b      	mov	r3, r1
 800d97a:	4313      	orrs	r3, r2
 800d97c:	d053      	beq.n	800da26 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800d97e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d982:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800d986:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800d98a:	d035      	beq.n	800d9f8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800d98c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800d990:	d82e      	bhi.n	800d9f0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800d992:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800d996:	d031      	beq.n	800d9fc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800d998:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800d99c:	d828      	bhi.n	800d9f0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800d99e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800d9a2:	d01a      	beq.n	800d9da <HAL_RCCEx_PeriphCLKConfig+0x292>
 800d9a4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800d9a8:	d822      	bhi.n	800d9f0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d003      	beq.n	800d9b6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800d9ae:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d9b2:	d007      	beq.n	800d9c4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800d9b4:	e01c      	b.n	800d9f0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d9b6:	4b32      	ldr	r3, [pc, #200]	@ (800da80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d9b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d9ba:	4a31      	ldr	r2, [pc, #196]	@ (800da80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d9bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d9c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800d9c2:	e01c      	b.n	800d9fe <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d9c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d9c8:	3308      	adds	r3, #8
 800d9ca:	2100      	movs	r1, #0
 800d9cc:	4618      	mov	r0, r3
 800d9ce:	f001 fb83 	bl	800f0d8 <RCCEx_PLL2_Config>
 800d9d2:	4603      	mov	r3, r0
 800d9d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800d9d8:	e011      	b.n	800d9fe <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800d9da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d9de:	3328      	adds	r3, #40	@ 0x28
 800d9e0:	2100      	movs	r1, #0
 800d9e2:	4618      	mov	r0, r3
 800d9e4:	f001 fc2a 	bl	800f23c <RCCEx_PLL3_Config>
 800d9e8:	4603      	mov	r3, r0
 800d9ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800d9ee:	e006      	b.n	800d9fe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800d9f0:	2301      	movs	r3, #1
 800d9f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d9f6:	e002      	b.n	800d9fe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800d9f8:	bf00      	nop
 800d9fa:	e000      	b.n	800d9fe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800d9fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d9fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800da02:	2b00      	cmp	r3, #0
 800da04:	d10b      	bne.n	800da1e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800da06:	4b1e      	ldr	r3, [pc, #120]	@ (800da80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800da08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800da0a:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800da0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800da12:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800da16:	4a1a      	ldr	r2, [pc, #104]	@ (800da80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800da18:	430b      	orrs	r3, r1
 800da1a:	6593      	str	r3, [r2, #88]	@ 0x58
 800da1c:	e003      	b.n	800da26 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800da1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800da22:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800da26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800da2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da2e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800da32:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800da36:	2300      	movs	r3, #0
 800da38:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800da3c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800da40:	460b      	mov	r3, r1
 800da42:	4313      	orrs	r3, r2
 800da44:	d056      	beq.n	800daf4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800da46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800da4a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800da4e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800da52:	d038      	beq.n	800dac6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800da54:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800da58:	d831      	bhi.n	800dabe <HAL_RCCEx_PeriphCLKConfig+0x376>
 800da5a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800da5e:	d034      	beq.n	800daca <HAL_RCCEx_PeriphCLKConfig+0x382>
 800da60:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800da64:	d82b      	bhi.n	800dabe <HAL_RCCEx_PeriphCLKConfig+0x376>
 800da66:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800da6a:	d01d      	beq.n	800daa8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800da6c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800da70:	d825      	bhi.n	800dabe <HAL_RCCEx_PeriphCLKConfig+0x376>
 800da72:	2b00      	cmp	r3, #0
 800da74:	d006      	beq.n	800da84 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800da76:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800da7a:	d00a      	beq.n	800da92 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800da7c:	e01f      	b.n	800dabe <HAL_RCCEx_PeriphCLKConfig+0x376>
 800da7e:	bf00      	nop
 800da80:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800da84:	4ba2      	ldr	r3, [pc, #648]	@ (800dd10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800da86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da88:	4aa1      	ldr	r2, [pc, #644]	@ (800dd10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800da8a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800da8e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800da90:	e01c      	b.n	800dacc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800da92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800da96:	3308      	adds	r3, #8
 800da98:	2100      	movs	r1, #0
 800da9a:	4618      	mov	r0, r3
 800da9c:	f001 fb1c 	bl	800f0d8 <RCCEx_PLL2_Config>
 800daa0:	4603      	mov	r3, r0
 800daa2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800daa6:	e011      	b.n	800dacc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800daa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800daac:	3328      	adds	r3, #40	@ 0x28
 800daae:	2100      	movs	r1, #0
 800dab0:	4618      	mov	r0, r3
 800dab2:	f001 fbc3 	bl	800f23c <RCCEx_PLL3_Config>
 800dab6:	4603      	mov	r3, r0
 800dab8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800dabc:	e006      	b.n	800dacc <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800dabe:	2301      	movs	r3, #1
 800dac0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800dac4:	e002      	b.n	800dacc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800dac6:	bf00      	nop
 800dac8:	e000      	b.n	800dacc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800daca:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dacc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d10b      	bne.n	800daec <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800dad4:	4b8e      	ldr	r3, [pc, #568]	@ (800dd10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800dad6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dad8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800dadc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dae0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800dae4:	4a8a      	ldr	r2, [pc, #552]	@ (800dd10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800dae6:	430b      	orrs	r3, r1
 800dae8:	6593      	str	r3, [r2, #88]	@ 0x58
 800daea:	e003      	b.n	800daf4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800daec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800daf0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800daf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800daf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dafc:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800db00:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800db04:	2300      	movs	r3, #0
 800db06:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800db0a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800db0e:	460b      	mov	r3, r1
 800db10:	4313      	orrs	r3, r2
 800db12:	d03a      	beq.n	800db8a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800db14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800db18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800db1a:	2b30      	cmp	r3, #48	@ 0x30
 800db1c:	d01f      	beq.n	800db5e <HAL_RCCEx_PeriphCLKConfig+0x416>
 800db1e:	2b30      	cmp	r3, #48	@ 0x30
 800db20:	d819      	bhi.n	800db56 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800db22:	2b20      	cmp	r3, #32
 800db24:	d00c      	beq.n	800db40 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800db26:	2b20      	cmp	r3, #32
 800db28:	d815      	bhi.n	800db56 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d019      	beq.n	800db62 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800db2e:	2b10      	cmp	r3, #16
 800db30:	d111      	bne.n	800db56 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800db32:	4b77      	ldr	r3, [pc, #476]	@ (800dd10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800db34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db36:	4a76      	ldr	r2, [pc, #472]	@ (800dd10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800db38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800db3c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800db3e:	e011      	b.n	800db64 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800db40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800db44:	3308      	adds	r3, #8
 800db46:	2102      	movs	r1, #2
 800db48:	4618      	mov	r0, r3
 800db4a:	f001 fac5 	bl	800f0d8 <RCCEx_PLL2_Config>
 800db4e:	4603      	mov	r3, r0
 800db50:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800db54:	e006      	b.n	800db64 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800db56:	2301      	movs	r3, #1
 800db58:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800db5c:	e002      	b.n	800db64 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800db5e:	bf00      	nop
 800db60:	e000      	b.n	800db64 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800db62:	bf00      	nop
    }

    if (ret == HAL_OK)
 800db64:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800db68:	2b00      	cmp	r3, #0
 800db6a:	d10a      	bne.n	800db82 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800db6c:	4b68      	ldr	r3, [pc, #416]	@ (800dd10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800db6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800db70:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800db74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800db78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800db7a:	4a65      	ldr	r2, [pc, #404]	@ (800dd10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800db7c:	430b      	orrs	r3, r1
 800db7e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800db80:	e003      	b.n	800db8a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800db82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800db86:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800db8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800db8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db92:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800db96:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800db9a:	2300      	movs	r3, #0
 800db9c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800dba0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800dba4:	460b      	mov	r3, r1
 800dba6:	4313      	orrs	r3, r2
 800dba8:	d051      	beq.n	800dc4e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800dbaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dbae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800dbb0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800dbb4:	d035      	beq.n	800dc22 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800dbb6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800dbba:	d82e      	bhi.n	800dc1a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800dbbc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800dbc0:	d031      	beq.n	800dc26 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800dbc2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800dbc6:	d828      	bhi.n	800dc1a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800dbc8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800dbcc:	d01a      	beq.n	800dc04 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800dbce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800dbd2:	d822      	bhi.n	800dc1a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d003      	beq.n	800dbe0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800dbd8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800dbdc:	d007      	beq.n	800dbee <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800dbde:	e01c      	b.n	800dc1a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800dbe0:	4b4b      	ldr	r3, [pc, #300]	@ (800dd10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800dbe2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dbe4:	4a4a      	ldr	r2, [pc, #296]	@ (800dd10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800dbe6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800dbea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800dbec:	e01c      	b.n	800dc28 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800dbee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dbf2:	3308      	adds	r3, #8
 800dbf4:	2100      	movs	r1, #0
 800dbf6:	4618      	mov	r0, r3
 800dbf8:	f001 fa6e 	bl	800f0d8 <RCCEx_PLL2_Config>
 800dbfc:	4603      	mov	r3, r0
 800dbfe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800dc02:	e011      	b.n	800dc28 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800dc04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dc08:	3328      	adds	r3, #40	@ 0x28
 800dc0a:	2100      	movs	r1, #0
 800dc0c:	4618      	mov	r0, r3
 800dc0e:	f001 fb15 	bl	800f23c <RCCEx_PLL3_Config>
 800dc12:	4603      	mov	r3, r0
 800dc14:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800dc18:	e006      	b.n	800dc28 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800dc1a:	2301      	movs	r3, #1
 800dc1c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800dc20:	e002      	b.n	800dc28 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800dc22:	bf00      	nop
 800dc24:	e000      	b.n	800dc28 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800dc26:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dc28:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d10a      	bne.n	800dc46 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800dc30:	4b37      	ldr	r3, [pc, #220]	@ (800dd10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800dc32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dc34:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800dc38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dc3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800dc3e:	4a34      	ldr	r2, [pc, #208]	@ (800dd10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800dc40:	430b      	orrs	r3, r1
 800dc42:	6513      	str	r3, [r2, #80]	@ 0x50
 800dc44:	e003      	b.n	800dc4e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dc46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800dc4a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800dc4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dc52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc56:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800dc5a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800dc5e:	2300      	movs	r3, #0
 800dc60:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800dc64:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800dc68:	460b      	mov	r3, r1
 800dc6a:	4313      	orrs	r3, r2
 800dc6c:	d056      	beq.n	800dd1c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800dc6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dc72:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800dc74:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800dc78:	d033      	beq.n	800dce2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800dc7a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800dc7e:	d82c      	bhi.n	800dcda <HAL_RCCEx_PeriphCLKConfig+0x592>
 800dc80:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800dc84:	d02f      	beq.n	800dce6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800dc86:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800dc8a:	d826      	bhi.n	800dcda <HAL_RCCEx_PeriphCLKConfig+0x592>
 800dc8c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800dc90:	d02b      	beq.n	800dcea <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800dc92:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800dc96:	d820      	bhi.n	800dcda <HAL_RCCEx_PeriphCLKConfig+0x592>
 800dc98:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800dc9c:	d012      	beq.n	800dcc4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800dc9e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800dca2:	d81a      	bhi.n	800dcda <HAL_RCCEx_PeriphCLKConfig+0x592>
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d022      	beq.n	800dcee <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800dca8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800dcac:	d115      	bne.n	800dcda <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800dcae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dcb2:	3308      	adds	r3, #8
 800dcb4:	2101      	movs	r1, #1
 800dcb6:	4618      	mov	r0, r3
 800dcb8:	f001 fa0e 	bl	800f0d8 <RCCEx_PLL2_Config>
 800dcbc:	4603      	mov	r3, r0
 800dcbe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800dcc2:	e015      	b.n	800dcf0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800dcc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dcc8:	3328      	adds	r3, #40	@ 0x28
 800dcca:	2101      	movs	r1, #1
 800dccc:	4618      	mov	r0, r3
 800dcce:	f001 fab5 	bl	800f23c <RCCEx_PLL3_Config>
 800dcd2:	4603      	mov	r3, r0
 800dcd4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800dcd8:	e00a      	b.n	800dcf0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800dcda:	2301      	movs	r3, #1
 800dcdc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800dce0:	e006      	b.n	800dcf0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800dce2:	bf00      	nop
 800dce4:	e004      	b.n	800dcf0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800dce6:	bf00      	nop
 800dce8:	e002      	b.n	800dcf0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800dcea:	bf00      	nop
 800dcec:	e000      	b.n	800dcf0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800dcee:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dcf0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d10d      	bne.n	800dd14 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800dcf8:	4b05      	ldr	r3, [pc, #20]	@ (800dd10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800dcfa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dcfc:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800dd00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dd04:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800dd06:	4a02      	ldr	r2, [pc, #8]	@ (800dd10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800dd08:	430b      	orrs	r3, r1
 800dd0a:	6513      	str	r3, [r2, #80]	@ 0x50
 800dd0c:	e006      	b.n	800dd1c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800dd0e:	bf00      	nop
 800dd10:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dd14:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800dd18:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800dd1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dd20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd24:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800dd28:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800dd2c:	2300      	movs	r3, #0
 800dd2e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800dd32:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800dd36:	460b      	mov	r3, r1
 800dd38:	4313      	orrs	r3, r2
 800dd3a:	d055      	beq.n	800dde8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800dd3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dd40:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800dd44:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800dd48:	d033      	beq.n	800ddb2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800dd4a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800dd4e:	d82c      	bhi.n	800ddaa <HAL_RCCEx_PeriphCLKConfig+0x662>
 800dd50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dd54:	d02f      	beq.n	800ddb6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800dd56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dd5a:	d826      	bhi.n	800ddaa <HAL_RCCEx_PeriphCLKConfig+0x662>
 800dd5c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800dd60:	d02b      	beq.n	800ddba <HAL_RCCEx_PeriphCLKConfig+0x672>
 800dd62:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800dd66:	d820      	bhi.n	800ddaa <HAL_RCCEx_PeriphCLKConfig+0x662>
 800dd68:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800dd6c:	d012      	beq.n	800dd94 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800dd6e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800dd72:	d81a      	bhi.n	800ddaa <HAL_RCCEx_PeriphCLKConfig+0x662>
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d022      	beq.n	800ddbe <HAL_RCCEx_PeriphCLKConfig+0x676>
 800dd78:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800dd7c:	d115      	bne.n	800ddaa <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800dd7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dd82:	3308      	adds	r3, #8
 800dd84:	2101      	movs	r1, #1
 800dd86:	4618      	mov	r0, r3
 800dd88:	f001 f9a6 	bl	800f0d8 <RCCEx_PLL2_Config>
 800dd8c:	4603      	mov	r3, r0
 800dd8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800dd92:	e015      	b.n	800ddc0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800dd94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dd98:	3328      	adds	r3, #40	@ 0x28
 800dd9a:	2101      	movs	r1, #1
 800dd9c:	4618      	mov	r0, r3
 800dd9e:	f001 fa4d 	bl	800f23c <RCCEx_PLL3_Config>
 800dda2:	4603      	mov	r3, r0
 800dda4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800dda8:	e00a      	b.n	800ddc0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800ddaa:	2301      	movs	r3, #1
 800ddac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800ddb0:	e006      	b.n	800ddc0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800ddb2:	bf00      	nop
 800ddb4:	e004      	b.n	800ddc0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800ddb6:	bf00      	nop
 800ddb8:	e002      	b.n	800ddc0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800ddba:	bf00      	nop
 800ddbc:	e000      	b.n	800ddc0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800ddbe:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ddc0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d10b      	bne.n	800dde0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800ddc8:	4ba3      	ldr	r3, [pc, #652]	@ (800e058 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ddca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ddcc:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800ddd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ddd4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800ddd8:	4a9f      	ldr	r2, [pc, #636]	@ (800e058 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ddda:	430b      	orrs	r3, r1
 800dddc:	6593      	str	r3, [r2, #88]	@ 0x58
 800ddde:	e003      	b.n	800dde8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dde0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800dde4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800dde8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ddec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddf0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800ddf4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800ddf8:	2300      	movs	r3, #0
 800ddfa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800ddfe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800de02:	460b      	mov	r3, r1
 800de04:	4313      	orrs	r3, r2
 800de06:	d037      	beq.n	800de78 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800de08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800de0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800de0e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800de12:	d00e      	beq.n	800de32 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800de14:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800de18:	d816      	bhi.n	800de48 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d018      	beq.n	800de50 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800de1e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800de22:	d111      	bne.n	800de48 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800de24:	4b8c      	ldr	r3, [pc, #560]	@ (800e058 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800de26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de28:	4a8b      	ldr	r2, [pc, #556]	@ (800e058 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800de2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800de2e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800de30:	e00f      	b.n	800de52 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800de32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800de36:	3308      	adds	r3, #8
 800de38:	2101      	movs	r1, #1
 800de3a:	4618      	mov	r0, r3
 800de3c:	f001 f94c 	bl	800f0d8 <RCCEx_PLL2_Config>
 800de40:	4603      	mov	r3, r0
 800de42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800de46:	e004      	b.n	800de52 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800de48:	2301      	movs	r3, #1
 800de4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800de4e:	e000      	b.n	800de52 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800de50:	bf00      	nop
    }

    if (ret == HAL_OK)
 800de52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800de56:	2b00      	cmp	r3, #0
 800de58:	d10a      	bne.n	800de70 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800de5a:	4b7f      	ldr	r3, [pc, #508]	@ (800e058 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800de5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800de5e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800de62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800de66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800de68:	4a7b      	ldr	r2, [pc, #492]	@ (800e058 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800de6a:	430b      	orrs	r3, r1
 800de6c:	6513      	str	r3, [r2, #80]	@ 0x50
 800de6e:	e003      	b.n	800de78 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800de70:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800de74:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800de78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800de7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de80:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800de84:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800de88:	2300      	movs	r3, #0
 800de8a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800de8e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800de92:	460b      	mov	r3, r1
 800de94:	4313      	orrs	r3, r2
 800de96:	d039      	beq.n	800df0c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800de98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800de9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800de9e:	2b03      	cmp	r3, #3
 800dea0:	d81c      	bhi.n	800dedc <HAL_RCCEx_PeriphCLKConfig+0x794>
 800dea2:	a201      	add	r2, pc, #4	@ (adr r2, 800dea8 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800dea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dea8:	0800dee5 	.word	0x0800dee5
 800deac:	0800deb9 	.word	0x0800deb9
 800deb0:	0800dec7 	.word	0x0800dec7
 800deb4:	0800dee5 	.word	0x0800dee5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800deb8:	4b67      	ldr	r3, [pc, #412]	@ (800e058 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800deba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800debc:	4a66      	ldr	r2, [pc, #408]	@ (800e058 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800debe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800dec2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800dec4:	e00f      	b.n	800dee6 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800dec6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800deca:	3308      	adds	r3, #8
 800decc:	2102      	movs	r1, #2
 800dece:	4618      	mov	r0, r3
 800ded0:	f001 f902 	bl	800f0d8 <RCCEx_PLL2_Config>
 800ded4:	4603      	mov	r3, r0
 800ded6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800deda:	e004      	b.n	800dee6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800dedc:	2301      	movs	r3, #1
 800dede:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800dee2:	e000      	b.n	800dee6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800dee4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dee6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800deea:	2b00      	cmp	r3, #0
 800deec:	d10a      	bne.n	800df04 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800deee:	4b5a      	ldr	r3, [pc, #360]	@ (800e058 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800def0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800def2:	f023 0103 	bic.w	r1, r3, #3
 800def6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800defa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800defc:	4a56      	ldr	r2, [pc, #344]	@ (800e058 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800defe:	430b      	orrs	r3, r1
 800df00:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800df02:	e003      	b.n	800df0c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800df04:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800df08:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800df0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800df10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df14:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800df18:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800df1c:	2300      	movs	r3, #0
 800df1e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800df22:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800df26:	460b      	mov	r3, r1
 800df28:	4313      	orrs	r3, r2
 800df2a:	f000 809f 	beq.w	800e06c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800df2e:	4b4b      	ldr	r3, [pc, #300]	@ (800e05c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800df30:	681b      	ldr	r3, [r3, #0]
 800df32:	4a4a      	ldr	r2, [pc, #296]	@ (800e05c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800df34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800df38:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800df3a:	f7f4 fda1 	bl	8002a80 <HAL_GetTick>
 800df3e:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800df42:	e00b      	b.n	800df5c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800df44:	f7f4 fd9c 	bl	8002a80 <HAL_GetTick>
 800df48:	4602      	mov	r2, r0
 800df4a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800df4e:	1ad3      	subs	r3, r2, r3
 800df50:	2b64      	cmp	r3, #100	@ 0x64
 800df52:	d903      	bls.n	800df5c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800df54:	2303      	movs	r3, #3
 800df56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800df5a:	e005      	b.n	800df68 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800df5c:	4b3f      	ldr	r3, [pc, #252]	@ (800e05c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800df5e:	681b      	ldr	r3, [r3, #0]
 800df60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800df64:	2b00      	cmp	r3, #0
 800df66:	d0ed      	beq.n	800df44 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800df68:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d179      	bne.n	800e064 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800df70:	4b39      	ldr	r3, [pc, #228]	@ (800e058 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800df72:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800df74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800df78:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800df7c:	4053      	eors	r3, r2
 800df7e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800df82:	2b00      	cmp	r3, #0
 800df84:	d015      	beq.n	800dfb2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800df86:	4b34      	ldr	r3, [pc, #208]	@ (800e058 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800df88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800df8a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800df8e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800df92:	4b31      	ldr	r3, [pc, #196]	@ (800e058 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800df94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800df96:	4a30      	ldr	r2, [pc, #192]	@ (800e058 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800df98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800df9c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800df9e:	4b2e      	ldr	r3, [pc, #184]	@ (800e058 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800dfa0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800dfa2:	4a2d      	ldr	r2, [pc, #180]	@ (800e058 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800dfa4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800dfa8:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800dfaa:	4a2b      	ldr	r2, [pc, #172]	@ (800e058 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800dfac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800dfb0:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800dfb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dfb6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800dfba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800dfbe:	d118      	bne.n	800dff2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dfc0:	f7f4 fd5e 	bl	8002a80 <HAL_GetTick>
 800dfc4:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800dfc8:	e00d      	b.n	800dfe6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800dfca:	f7f4 fd59 	bl	8002a80 <HAL_GetTick>
 800dfce:	4602      	mov	r2, r0
 800dfd0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800dfd4:	1ad2      	subs	r2, r2, r3
 800dfd6:	f241 3388 	movw	r3, #5000	@ 0x1388
 800dfda:	429a      	cmp	r2, r3
 800dfdc:	d903      	bls.n	800dfe6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800dfde:	2303      	movs	r3, #3
 800dfe0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 800dfe4:	e005      	b.n	800dff2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800dfe6:	4b1c      	ldr	r3, [pc, #112]	@ (800e058 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800dfe8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800dfea:	f003 0302 	and.w	r3, r3, #2
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d0eb      	beq.n	800dfca <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800dff2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d129      	bne.n	800e04e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800dffa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dffe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800e002:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e006:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e00a:	d10e      	bne.n	800e02a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800e00c:	4b12      	ldr	r3, [pc, #72]	@ (800e058 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e00e:	691b      	ldr	r3, [r3, #16]
 800e010:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800e014:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e018:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800e01c:	091a      	lsrs	r2, r3, #4
 800e01e:	4b10      	ldr	r3, [pc, #64]	@ (800e060 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800e020:	4013      	ands	r3, r2
 800e022:	4a0d      	ldr	r2, [pc, #52]	@ (800e058 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e024:	430b      	orrs	r3, r1
 800e026:	6113      	str	r3, [r2, #16]
 800e028:	e005      	b.n	800e036 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800e02a:	4b0b      	ldr	r3, [pc, #44]	@ (800e058 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e02c:	691b      	ldr	r3, [r3, #16]
 800e02e:	4a0a      	ldr	r2, [pc, #40]	@ (800e058 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e030:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800e034:	6113      	str	r3, [r2, #16]
 800e036:	4b08      	ldr	r3, [pc, #32]	@ (800e058 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e038:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800e03a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e03e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800e042:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e046:	4a04      	ldr	r2, [pc, #16]	@ (800e058 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e048:	430b      	orrs	r3, r1
 800e04a:	6713      	str	r3, [r2, #112]	@ 0x70
 800e04c:	e00e      	b.n	800e06c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800e04e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e052:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800e056:	e009      	b.n	800e06c <HAL_RCCEx_PeriphCLKConfig+0x924>
 800e058:	58024400 	.word	0x58024400
 800e05c:	58024800 	.word	0x58024800
 800e060:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e064:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e068:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800e06c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e070:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e074:	f002 0301 	and.w	r3, r2, #1
 800e078:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800e07c:	2300      	movs	r3, #0
 800e07e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800e082:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800e086:	460b      	mov	r3, r1
 800e088:	4313      	orrs	r3, r2
 800e08a:	f000 8089 	beq.w	800e1a0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800e08e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e092:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e094:	2b28      	cmp	r3, #40	@ 0x28
 800e096:	d86b      	bhi.n	800e170 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800e098:	a201      	add	r2, pc, #4	@ (adr r2, 800e0a0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800e09a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e09e:	bf00      	nop
 800e0a0:	0800e179 	.word	0x0800e179
 800e0a4:	0800e171 	.word	0x0800e171
 800e0a8:	0800e171 	.word	0x0800e171
 800e0ac:	0800e171 	.word	0x0800e171
 800e0b0:	0800e171 	.word	0x0800e171
 800e0b4:	0800e171 	.word	0x0800e171
 800e0b8:	0800e171 	.word	0x0800e171
 800e0bc:	0800e171 	.word	0x0800e171
 800e0c0:	0800e145 	.word	0x0800e145
 800e0c4:	0800e171 	.word	0x0800e171
 800e0c8:	0800e171 	.word	0x0800e171
 800e0cc:	0800e171 	.word	0x0800e171
 800e0d0:	0800e171 	.word	0x0800e171
 800e0d4:	0800e171 	.word	0x0800e171
 800e0d8:	0800e171 	.word	0x0800e171
 800e0dc:	0800e171 	.word	0x0800e171
 800e0e0:	0800e15b 	.word	0x0800e15b
 800e0e4:	0800e171 	.word	0x0800e171
 800e0e8:	0800e171 	.word	0x0800e171
 800e0ec:	0800e171 	.word	0x0800e171
 800e0f0:	0800e171 	.word	0x0800e171
 800e0f4:	0800e171 	.word	0x0800e171
 800e0f8:	0800e171 	.word	0x0800e171
 800e0fc:	0800e171 	.word	0x0800e171
 800e100:	0800e179 	.word	0x0800e179
 800e104:	0800e171 	.word	0x0800e171
 800e108:	0800e171 	.word	0x0800e171
 800e10c:	0800e171 	.word	0x0800e171
 800e110:	0800e171 	.word	0x0800e171
 800e114:	0800e171 	.word	0x0800e171
 800e118:	0800e171 	.word	0x0800e171
 800e11c:	0800e171 	.word	0x0800e171
 800e120:	0800e179 	.word	0x0800e179
 800e124:	0800e171 	.word	0x0800e171
 800e128:	0800e171 	.word	0x0800e171
 800e12c:	0800e171 	.word	0x0800e171
 800e130:	0800e171 	.word	0x0800e171
 800e134:	0800e171 	.word	0x0800e171
 800e138:	0800e171 	.word	0x0800e171
 800e13c:	0800e171 	.word	0x0800e171
 800e140:	0800e179 	.word	0x0800e179
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e144:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e148:	3308      	adds	r3, #8
 800e14a:	2101      	movs	r1, #1
 800e14c:	4618      	mov	r0, r3
 800e14e:	f000 ffc3 	bl	800f0d8 <RCCEx_PLL2_Config>
 800e152:	4603      	mov	r3, r0
 800e154:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800e158:	e00f      	b.n	800e17a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e15a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e15e:	3328      	adds	r3, #40	@ 0x28
 800e160:	2101      	movs	r1, #1
 800e162:	4618      	mov	r0, r3
 800e164:	f001 f86a 	bl	800f23c <RCCEx_PLL3_Config>
 800e168:	4603      	mov	r3, r0
 800e16a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800e16e:	e004      	b.n	800e17a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e170:	2301      	movs	r3, #1
 800e172:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e176:	e000      	b.n	800e17a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800e178:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e17a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d10a      	bne.n	800e198 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800e182:	4bbf      	ldr	r3, [pc, #764]	@ (800e480 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e184:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e186:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800e18a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e18e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e190:	4abb      	ldr	r2, [pc, #748]	@ (800e480 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e192:	430b      	orrs	r3, r1
 800e194:	6553      	str	r3, [r2, #84]	@ 0x54
 800e196:	e003      	b.n	800e1a0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e198:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e19c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800e1a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e1a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1a8:	f002 0302 	and.w	r3, r2, #2
 800e1ac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800e1b0:	2300      	movs	r3, #0
 800e1b2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800e1b6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800e1ba:	460b      	mov	r3, r1
 800e1bc:	4313      	orrs	r3, r2
 800e1be:	d041      	beq.n	800e244 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800e1c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e1c4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e1c6:	2b05      	cmp	r3, #5
 800e1c8:	d824      	bhi.n	800e214 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800e1ca:	a201      	add	r2, pc, #4	@ (adr r2, 800e1d0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800e1cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1d0:	0800e21d 	.word	0x0800e21d
 800e1d4:	0800e1e9 	.word	0x0800e1e9
 800e1d8:	0800e1ff 	.word	0x0800e1ff
 800e1dc:	0800e21d 	.word	0x0800e21d
 800e1e0:	0800e21d 	.word	0x0800e21d
 800e1e4:	0800e21d 	.word	0x0800e21d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e1e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e1ec:	3308      	adds	r3, #8
 800e1ee:	2101      	movs	r1, #1
 800e1f0:	4618      	mov	r0, r3
 800e1f2:	f000 ff71 	bl	800f0d8 <RCCEx_PLL2_Config>
 800e1f6:	4603      	mov	r3, r0
 800e1f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800e1fc:	e00f      	b.n	800e21e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e1fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e202:	3328      	adds	r3, #40	@ 0x28
 800e204:	2101      	movs	r1, #1
 800e206:	4618      	mov	r0, r3
 800e208:	f001 f818 	bl	800f23c <RCCEx_PLL3_Config>
 800e20c:	4603      	mov	r3, r0
 800e20e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800e212:	e004      	b.n	800e21e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e214:	2301      	movs	r3, #1
 800e216:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e21a:	e000      	b.n	800e21e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800e21c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e21e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e222:	2b00      	cmp	r3, #0
 800e224:	d10a      	bne.n	800e23c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800e226:	4b96      	ldr	r3, [pc, #600]	@ (800e480 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e228:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e22a:	f023 0107 	bic.w	r1, r3, #7
 800e22e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e232:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e234:	4a92      	ldr	r2, [pc, #584]	@ (800e480 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e236:	430b      	orrs	r3, r1
 800e238:	6553      	str	r3, [r2, #84]	@ 0x54
 800e23a:	e003      	b.n	800e244 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e23c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e240:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800e244:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e24c:	f002 0304 	and.w	r3, r2, #4
 800e250:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800e254:	2300      	movs	r3, #0
 800e256:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800e25a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800e25e:	460b      	mov	r3, r1
 800e260:	4313      	orrs	r3, r2
 800e262:	d044      	beq.n	800e2ee <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800e264:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e268:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e26c:	2b05      	cmp	r3, #5
 800e26e:	d825      	bhi.n	800e2bc <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800e270:	a201      	add	r2, pc, #4	@ (adr r2, 800e278 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800e272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e276:	bf00      	nop
 800e278:	0800e2c5 	.word	0x0800e2c5
 800e27c:	0800e291 	.word	0x0800e291
 800e280:	0800e2a7 	.word	0x0800e2a7
 800e284:	0800e2c5 	.word	0x0800e2c5
 800e288:	0800e2c5 	.word	0x0800e2c5
 800e28c:	0800e2c5 	.word	0x0800e2c5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e290:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e294:	3308      	adds	r3, #8
 800e296:	2101      	movs	r1, #1
 800e298:	4618      	mov	r0, r3
 800e29a:	f000 ff1d 	bl	800f0d8 <RCCEx_PLL2_Config>
 800e29e:	4603      	mov	r3, r0
 800e2a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800e2a4:	e00f      	b.n	800e2c6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e2a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e2aa:	3328      	adds	r3, #40	@ 0x28
 800e2ac:	2101      	movs	r1, #1
 800e2ae:	4618      	mov	r0, r3
 800e2b0:	f000 ffc4 	bl	800f23c <RCCEx_PLL3_Config>
 800e2b4:	4603      	mov	r3, r0
 800e2b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800e2ba:	e004      	b.n	800e2c6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e2bc:	2301      	movs	r3, #1
 800e2be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e2c2:	e000      	b.n	800e2c6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800e2c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e2c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	d10b      	bne.n	800e2e6 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800e2ce:	4b6c      	ldr	r3, [pc, #432]	@ (800e480 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e2d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e2d2:	f023 0107 	bic.w	r1, r3, #7
 800e2d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e2da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e2de:	4a68      	ldr	r2, [pc, #416]	@ (800e480 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e2e0:	430b      	orrs	r3, r1
 800e2e2:	6593      	str	r3, [r2, #88]	@ 0x58
 800e2e4:	e003      	b.n	800e2ee <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e2e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e2ea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800e2ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e2f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2f6:	f002 0320 	and.w	r3, r2, #32
 800e2fa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800e2fe:	2300      	movs	r3, #0
 800e300:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800e304:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800e308:	460b      	mov	r3, r1
 800e30a:	4313      	orrs	r3, r2
 800e30c:	d055      	beq.n	800e3ba <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800e30e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e312:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e316:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800e31a:	d033      	beq.n	800e384 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800e31c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800e320:	d82c      	bhi.n	800e37c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800e322:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e326:	d02f      	beq.n	800e388 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800e328:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e32c:	d826      	bhi.n	800e37c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800e32e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800e332:	d02b      	beq.n	800e38c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800e334:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800e338:	d820      	bhi.n	800e37c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800e33a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e33e:	d012      	beq.n	800e366 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800e340:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e344:	d81a      	bhi.n	800e37c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800e346:	2b00      	cmp	r3, #0
 800e348:	d022      	beq.n	800e390 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800e34a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e34e:	d115      	bne.n	800e37c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e350:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e354:	3308      	adds	r3, #8
 800e356:	2100      	movs	r1, #0
 800e358:	4618      	mov	r0, r3
 800e35a:	f000 febd 	bl	800f0d8 <RCCEx_PLL2_Config>
 800e35e:	4603      	mov	r3, r0
 800e360:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800e364:	e015      	b.n	800e392 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800e366:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e36a:	3328      	adds	r3, #40	@ 0x28
 800e36c:	2102      	movs	r1, #2
 800e36e:	4618      	mov	r0, r3
 800e370:	f000 ff64 	bl	800f23c <RCCEx_PLL3_Config>
 800e374:	4603      	mov	r3, r0
 800e376:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800e37a:	e00a      	b.n	800e392 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e37c:	2301      	movs	r3, #1
 800e37e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e382:	e006      	b.n	800e392 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800e384:	bf00      	nop
 800e386:	e004      	b.n	800e392 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800e388:	bf00      	nop
 800e38a:	e002      	b.n	800e392 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800e38c:	bf00      	nop
 800e38e:	e000      	b.n	800e392 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800e390:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e392:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e396:	2b00      	cmp	r3, #0
 800e398:	d10b      	bne.n	800e3b2 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800e39a:	4b39      	ldr	r3, [pc, #228]	@ (800e480 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e39c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e39e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800e3a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e3a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e3aa:	4a35      	ldr	r2, [pc, #212]	@ (800e480 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e3ac:	430b      	orrs	r3, r1
 800e3ae:	6553      	str	r3, [r2, #84]	@ 0x54
 800e3b0:	e003      	b.n	800e3ba <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e3b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e3b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800e3ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e3be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3c2:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800e3c6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800e3ca:	2300      	movs	r3, #0
 800e3cc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800e3d0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800e3d4:	460b      	mov	r3, r1
 800e3d6:	4313      	orrs	r3, r2
 800e3d8:	d058      	beq.n	800e48c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800e3da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e3de:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800e3e2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800e3e6:	d033      	beq.n	800e450 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800e3e8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800e3ec:	d82c      	bhi.n	800e448 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800e3ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e3f2:	d02f      	beq.n	800e454 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800e3f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e3f8:	d826      	bhi.n	800e448 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800e3fa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800e3fe:	d02b      	beq.n	800e458 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800e400:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800e404:	d820      	bhi.n	800e448 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800e406:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e40a:	d012      	beq.n	800e432 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800e40c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e410:	d81a      	bhi.n	800e448 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800e412:	2b00      	cmp	r3, #0
 800e414:	d022      	beq.n	800e45c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800e416:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e41a:	d115      	bne.n	800e448 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e41c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e420:	3308      	adds	r3, #8
 800e422:	2100      	movs	r1, #0
 800e424:	4618      	mov	r0, r3
 800e426:	f000 fe57 	bl	800f0d8 <RCCEx_PLL2_Config>
 800e42a:	4603      	mov	r3, r0
 800e42c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800e430:	e015      	b.n	800e45e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800e432:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e436:	3328      	adds	r3, #40	@ 0x28
 800e438:	2102      	movs	r1, #2
 800e43a:	4618      	mov	r0, r3
 800e43c:	f000 fefe 	bl	800f23c <RCCEx_PLL3_Config>
 800e440:	4603      	mov	r3, r0
 800e442:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800e446:	e00a      	b.n	800e45e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e448:	2301      	movs	r3, #1
 800e44a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e44e:	e006      	b.n	800e45e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800e450:	bf00      	nop
 800e452:	e004      	b.n	800e45e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800e454:	bf00      	nop
 800e456:	e002      	b.n	800e45e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800e458:	bf00      	nop
 800e45a:	e000      	b.n	800e45e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800e45c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e45e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e462:	2b00      	cmp	r3, #0
 800e464:	d10e      	bne.n	800e484 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800e466:	4b06      	ldr	r3, [pc, #24]	@ (800e480 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e468:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e46a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800e46e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e472:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800e476:	4a02      	ldr	r2, [pc, #8]	@ (800e480 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e478:	430b      	orrs	r3, r1
 800e47a:	6593      	str	r3, [r2, #88]	@ 0x58
 800e47c:	e006      	b.n	800e48c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800e47e:	bf00      	nop
 800e480:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e484:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e488:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800e48c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e490:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e494:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800e498:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800e49c:	2300      	movs	r3, #0
 800e49e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800e4a2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800e4a6:	460b      	mov	r3, r1
 800e4a8:	4313      	orrs	r3, r2
 800e4aa:	d055      	beq.n	800e558 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800e4ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e4b0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800e4b4:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800e4b8:	d033      	beq.n	800e522 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800e4ba:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800e4be:	d82c      	bhi.n	800e51a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800e4c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e4c4:	d02f      	beq.n	800e526 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800e4c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e4ca:	d826      	bhi.n	800e51a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800e4cc:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800e4d0:	d02b      	beq.n	800e52a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800e4d2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800e4d6:	d820      	bhi.n	800e51a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800e4d8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e4dc:	d012      	beq.n	800e504 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800e4de:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e4e2:	d81a      	bhi.n	800e51a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	d022      	beq.n	800e52e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800e4e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e4ec:	d115      	bne.n	800e51a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e4ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e4f2:	3308      	adds	r3, #8
 800e4f4:	2100      	movs	r1, #0
 800e4f6:	4618      	mov	r0, r3
 800e4f8:	f000 fdee 	bl	800f0d8 <RCCEx_PLL2_Config>
 800e4fc:	4603      	mov	r3, r0
 800e4fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800e502:	e015      	b.n	800e530 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800e504:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e508:	3328      	adds	r3, #40	@ 0x28
 800e50a:	2102      	movs	r1, #2
 800e50c:	4618      	mov	r0, r3
 800e50e:	f000 fe95 	bl	800f23c <RCCEx_PLL3_Config>
 800e512:	4603      	mov	r3, r0
 800e514:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800e518:	e00a      	b.n	800e530 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e51a:	2301      	movs	r3, #1
 800e51c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e520:	e006      	b.n	800e530 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800e522:	bf00      	nop
 800e524:	e004      	b.n	800e530 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800e526:	bf00      	nop
 800e528:	e002      	b.n	800e530 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800e52a:	bf00      	nop
 800e52c:	e000      	b.n	800e530 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800e52e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e530:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e534:	2b00      	cmp	r3, #0
 800e536:	d10b      	bne.n	800e550 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800e538:	4ba1      	ldr	r3, [pc, #644]	@ (800e7c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e53a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e53c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800e540:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e544:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800e548:	4a9d      	ldr	r2, [pc, #628]	@ (800e7c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e54a:	430b      	orrs	r3, r1
 800e54c:	6593      	str	r3, [r2, #88]	@ 0x58
 800e54e:	e003      	b.n	800e558 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e550:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e554:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800e558:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e55c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e560:	f002 0308 	and.w	r3, r2, #8
 800e564:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800e568:	2300      	movs	r3, #0
 800e56a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800e56e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800e572:	460b      	mov	r3, r1
 800e574:	4313      	orrs	r3, r2
 800e576:	d01e      	beq.n	800e5b6 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800e578:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e57c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e580:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e584:	d10c      	bne.n	800e5a0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800e586:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e58a:	3328      	adds	r3, #40	@ 0x28
 800e58c:	2102      	movs	r1, #2
 800e58e:	4618      	mov	r0, r3
 800e590:	f000 fe54 	bl	800f23c <RCCEx_PLL3_Config>
 800e594:	4603      	mov	r3, r0
 800e596:	2b00      	cmp	r3, #0
 800e598:	d002      	beq.n	800e5a0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800e59a:	2301      	movs	r3, #1
 800e59c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800e5a0:	4b87      	ldr	r3, [pc, #540]	@ (800e7c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e5a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e5a4:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800e5a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e5ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e5b0:	4a83      	ldr	r2, [pc, #524]	@ (800e7c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e5b2:	430b      	orrs	r3, r1
 800e5b4:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800e5b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e5ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5be:	f002 0310 	and.w	r3, r2, #16
 800e5c2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800e5c6:	2300      	movs	r3, #0
 800e5c8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800e5cc:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800e5d0:	460b      	mov	r3, r1
 800e5d2:	4313      	orrs	r3, r2
 800e5d4:	d01e      	beq.n	800e614 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800e5d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e5da:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800e5de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e5e2:	d10c      	bne.n	800e5fe <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800e5e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e5e8:	3328      	adds	r3, #40	@ 0x28
 800e5ea:	2102      	movs	r1, #2
 800e5ec:	4618      	mov	r0, r3
 800e5ee:	f000 fe25 	bl	800f23c <RCCEx_PLL3_Config>
 800e5f2:	4603      	mov	r3, r0
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d002      	beq.n	800e5fe <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800e5f8:	2301      	movs	r3, #1
 800e5fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800e5fe:	4b70      	ldr	r3, [pc, #448]	@ (800e7c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e600:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e602:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800e606:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e60a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800e60e:	4a6c      	ldr	r2, [pc, #432]	@ (800e7c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e610:	430b      	orrs	r3, r1
 800e612:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800e614:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e61c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800e620:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800e624:	2300      	movs	r3, #0
 800e626:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800e62a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800e62e:	460b      	mov	r3, r1
 800e630:	4313      	orrs	r3, r2
 800e632:	d03e      	beq.n	800e6b2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800e634:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e638:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800e63c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e640:	d022      	beq.n	800e688 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800e642:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e646:	d81b      	bhi.n	800e680 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d003      	beq.n	800e654 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800e64c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e650:	d00b      	beq.n	800e66a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800e652:	e015      	b.n	800e680 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e654:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e658:	3308      	adds	r3, #8
 800e65a:	2100      	movs	r1, #0
 800e65c:	4618      	mov	r0, r3
 800e65e:	f000 fd3b 	bl	800f0d8 <RCCEx_PLL2_Config>
 800e662:	4603      	mov	r3, r0
 800e664:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800e668:	e00f      	b.n	800e68a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800e66a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e66e:	3328      	adds	r3, #40	@ 0x28
 800e670:	2102      	movs	r1, #2
 800e672:	4618      	mov	r0, r3
 800e674:	f000 fde2 	bl	800f23c <RCCEx_PLL3_Config>
 800e678:	4603      	mov	r3, r0
 800e67a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800e67e:	e004      	b.n	800e68a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e680:	2301      	movs	r3, #1
 800e682:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e686:	e000      	b.n	800e68a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800e688:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e68a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e68e:	2b00      	cmp	r3, #0
 800e690:	d10b      	bne.n	800e6aa <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800e692:	4b4b      	ldr	r3, [pc, #300]	@ (800e7c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e694:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e696:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800e69a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e69e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800e6a2:	4a47      	ldr	r2, [pc, #284]	@ (800e7c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e6a4:	430b      	orrs	r3, r1
 800e6a6:	6593      	str	r3, [r2, #88]	@ 0x58
 800e6a8:	e003      	b.n	800e6b2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e6aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e6ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800e6b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e6b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6ba:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800e6be:	67bb      	str	r3, [r7, #120]	@ 0x78
 800e6c0:	2300      	movs	r3, #0
 800e6c2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800e6c4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800e6c8:	460b      	mov	r3, r1
 800e6ca:	4313      	orrs	r3, r2
 800e6cc:	d03b      	beq.n	800e746 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800e6ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e6d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e6d6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800e6da:	d01f      	beq.n	800e71c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800e6dc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800e6e0:	d818      	bhi.n	800e714 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800e6e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e6e6:	d003      	beq.n	800e6f0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800e6e8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800e6ec:	d007      	beq.n	800e6fe <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800e6ee:	e011      	b.n	800e714 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e6f0:	4b33      	ldr	r3, [pc, #204]	@ (800e7c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e6f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e6f4:	4a32      	ldr	r2, [pc, #200]	@ (800e7c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e6f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e6fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800e6fc:	e00f      	b.n	800e71e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e6fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e702:	3328      	adds	r3, #40	@ 0x28
 800e704:	2101      	movs	r1, #1
 800e706:	4618      	mov	r0, r3
 800e708:	f000 fd98 	bl	800f23c <RCCEx_PLL3_Config>
 800e70c:	4603      	mov	r3, r0
 800e70e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800e712:	e004      	b.n	800e71e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e714:	2301      	movs	r3, #1
 800e716:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e71a:	e000      	b.n	800e71e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800e71c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e71e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e722:	2b00      	cmp	r3, #0
 800e724:	d10b      	bne.n	800e73e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800e726:	4b26      	ldr	r3, [pc, #152]	@ (800e7c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e728:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e72a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800e72e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e732:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e736:	4a22      	ldr	r2, [pc, #136]	@ (800e7c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e738:	430b      	orrs	r3, r1
 800e73a:	6553      	str	r3, [r2, #84]	@ 0x54
 800e73c:	e003      	b.n	800e746 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e73e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e742:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800e746:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e74a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e74e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800e752:	673b      	str	r3, [r7, #112]	@ 0x70
 800e754:	2300      	movs	r3, #0
 800e756:	677b      	str	r3, [r7, #116]	@ 0x74
 800e758:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800e75c:	460b      	mov	r3, r1
 800e75e:	4313      	orrs	r3, r2
 800e760:	d034      	beq.n	800e7cc <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800e762:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e766:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e768:	2b00      	cmp	r3, #0
 800e76a:	d003      	beq.n	800e774 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800e76c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e770:	d007      	beq.n	800e782 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800e772:	e011      	b.n	800e798 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e774:	4b12      	ldr	r3, [pc, #72]	@ (800e7c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e776:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e778:	4a11      	ldr	r2, [pc, #68]	@ (800e7c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e77a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e77e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800e780:	e00e      	b.n	800e7a0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800e782:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e786:	3308      	adds	r3, #8
 800e788:	2102      	movs	r1, #2
 800e78a:	4618      	mov	r0, r3
 800e78c:	f000 fca4 	bl	800f0d8 <RCCEx_PLL2_Config>
 800e790:	4603      	mov	r3, r0
 800e792:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800e796:	e003      	b.n	800e7a0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800e798:	2301      	movs	r3, #1
 800e79a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e79e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e7a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	d10d      	bne.n	800e7c4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800e7a8:	4b05      	ldr	r3, [pc, #20]	@ (800e7c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e7aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e7ac:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800e7b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e7b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e7b6:	4a02      	ldr	r2, [pc, #8]	@ (800e7c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e7b8:	430b      	orrs	r3, r1
 800e7ba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800e7bc:	e006      	b.n	800e7cc <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800e7be:	bf00      	nop
 800e7c0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e7c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e7c8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800e7cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e7d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7d4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800e7d8:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e7da:	2300      	movs	r3, #0
 800e7dc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800e7de:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800e7e2:	460b      	mov	r3, r1
 800e7e4:	4313      	orrs	r3, r2
 800e7e6:	d00c      	beq.n	800e802 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800e7e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e7ec:	3328      	adds	r3, #40	@ 0x28
 800e7ee:	2102      	movs	r1, #2
 800e7f0:	4618      	mov	r0, r3
 800e7f2:	f000 fd23 	bl	800f23c <RCCEx_PLL3_Config>
 800e7f6:	4603      	mov	r3, r0
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	d002      	beq.n	800e802 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800e7fc:	2301      	movs	r3, #1
 800e7fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800e802:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e80a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800e80e:	663b      	str	r3, [r7, #96]	@ 0x60
 800e810:	2300      	movs	r3, #0
 800e812:	667b      	str	r3, [r7, #100]	@ 0x64
 800e814:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800e818:	460b      	mov	r3, r1
 800e81a:	4313      	orrs	r3, r2
 800e81c:	d038      	beq.n	800e890 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800e81e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e822:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e826:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e82a:	d018      	beq.n	800e85e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800e82c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e830:	d811      	bhi.n	800e856 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800e832:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e836:	d014      	beq.n	800e862 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800e838:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e83c:	d80b      	bhi.n	800e856 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800e83e:	2b00      	cmp	r3, #0
 800e840:	d011      	beq.n	800e866 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800e842:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e846:	d106      	bne.n	800e856 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e848:	4bc3      	ldr	r3, [pc, #780]	@ (800eb58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e84a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e84c:	4ac2      	ldr	r2, [pc, #776]	@ (800eb58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e84e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e852:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800e854:	e008      	b.n	800e868 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e856:	2301      	movs	r3, #1
 800e858:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e85c:	e004      	b.n	800e868 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800e85e:	bf00      	nop
 800e860:	e002      	b.n	800e868 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800e862:	bf00      	nop
 800e864:	e000      	b.n	800e868 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800e866:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e868:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	d10b      	bne.n	800e888 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800e870:	4bb9      	ldr	r3, [pc, #740]	@ (800eb58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e872:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e874:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800e878:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e87c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e880:	4ab5      	ldr	r2, [pc, #724]	@ (800eb58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e882:	430b      	orrs	r3, r1
 800e884:	6553      	str	r3, [r2, #84]	@ 0x54
 800e886:	e003      	b.n	800e890 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e888:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e88c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800e890:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e894:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e898:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800e89c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e89e:	2300      	movs	r3, #0
 800e8a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e8a2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800e8a6:	460b      	mov	r3, r1
 800e8a8:	4313      	orrs	r3, r2
 800e8aa:	d009      	beq.n	800e8c0 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800e8ac:	4baa      	ldr	r3, [pc, #680]	@ (800eb58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e8ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e8b0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800e8b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e8b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e8ba:	4aa7      	ldr	r2, [pc, #668]	@ (800eb58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e8bc:	430b      	orrs	r3, r1
 800e8be:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800e8c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e8c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8c8:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800e8cc:	653b      	str	r3, [r7, #80]	@ 0x50
 800e8ce:	2300      	movs	r3, #0
 800e8d0:	657b      	str	r3, [r7, #84]	@ 0x54
 800e8d2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800e8d6:	460b      	mov	r3, r1
 800e8d8:	4313      	orrs	r3, r2
 800e8da:	d00a      	beq.n	800e8f2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800e8dc:	4b9e      	ldr	r3, [pc, #632]	@ (800eb58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e8de:	691b      	ldr	r3, [r3, #16]
 800e8e0:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800e8e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e8e8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800e8ec:	4a9a      	ldr	r2, [pc, #616]	@ (800eb58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e8ee:	430b      	orrs	r3, r1
 800e8f0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800e8f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e8f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8fa:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800e8fe:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e900:	2300      	movs	r3, #0
 800e902:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e904:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800e908:	460b      	mov	r3, r1
 800e90a:	4313      	orrs	r3, r2
 800e90c:	d009      	beq.n	800e922 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800e90e:	4b92      	ldr	r3, [pc, #584]	@ (800eb58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e910:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e912:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800e916:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e91a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e91c:	4a8e      	ldr	r2, [pc, #568]	@ (800eb58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e91e:	430b      	orrs	r3, r1
 800e920:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800e922:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e92a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800e92e:	643b      	str	r3, [r7, #64]	@ 0x40
 800e930:	2300      	movs	r3, #0
 800e932:	647b      	str	r3, [r7, #68]	@ 0x44
 800e934:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800e938:	460b      	mov	r3, r1
 800e93a:	4313      	orrs	r3, r2
 800e93c:	d00e      	beq.n	800e95c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800e93e:	4b86      	ldr	r3, [pc, #536]	@ (800eb58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e940:	691b      	ldr	r3, [r3, #16]
 800e942:	4a85      	ldr	r2, [pc, #532]	@ (800eb58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e944:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800e948:	6113      	str	r3, [r2, #16]
 800e94a:	4b83      	ldr	r3, [pc, #524]	@ (800eb58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e94c:	6919      	ldr	r1, [r3, #16]
 800e94e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e952:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800e956:	4a80      	ldr	r2, [pc, #512]	@ (800eb58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e958:	430b      	orrs	r3, r1
 800e95a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800e95c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e960:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e964:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800e968:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e96a:	2300      	movs	r3, #0
 800e96c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e96e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800e972:	460b      	mov	r3, r1
 800e974:	4313      	orrs	r3, r2
 800e976:	d009      	beq.n	800e98c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800e978:	4b77      	ldr	r3, [pc, #476]	@ (800eb58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e97a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e97c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800e980:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e984:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e986:	4a74      	ldr	r2, [pc, #464]	@ (800eb58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e988:	430b      	orrs	r3, r1
 800e98a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800e98c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e990:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e994:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800e998:	633b      	str	r3, [r7, #48]	@ 0x30
 800e99a:	2300      	movs	r3, #0
 800e99c:	637b      	str	r3, [r7, #52]	@ 0x34
 800e99e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800e9a2:	460b      	mov	r3, r1
 800e9a4:	4313      	orrs	r3, r2
 800e9a6:	d00a      	beq.n	800e9be <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800e9a8:	4b6b      	ldr	r3, [pc, #428]	@ (800eb58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e9aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e9ac:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800e9b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e9b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e9b8:	4a67      	ldr	r2, [pc, #412]	@ (800eb58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e9ba:	430b      	orrs	r3, r1
 800e9bc:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800e9be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e9c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9c6:	2100      	movs	r1, #0
 800e9c8:	62b9      	str	r1, [r7, #40]	@ 0x28
 800e9ca:	f003 0301 	and.w	r3, r3, #1
 800e9ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e9d0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800e9d4:	460b      	mov	r3, r1
 800e9d6:	4313      	orrs	r3, r2
 800e9d8:	d011      	beq.n	800e9fe <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e9da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e9de:	3308      	adds	r3, #8
 800e9e0:	2100      	movs	r1, #0
 800e9e2:	4618      	mov	r0, r3
 800e9e4:	f000 fb78 	bl	800f0d8 <RCCEx_PLL2_Config>
 800e9e8:	4603      	mov	r3, r0
 800e9ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800e9ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	d003      	beq.n	800e9fe <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e9f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e9fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800e9fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ea02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea06:	2100      	movs	r1, #0
 800ea08:	6239      	str	r1, [r7, #32]
 800ea0a:	f003 0302 	and.w	r3, r3, #2
 800ea0e:	627b      	str	r3, [r7, #36]	@ 0x24
 800ea10:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800ea14:	460b      	mov	r3, r1
 800ea16:	4313      	orrs	r3, r2
 800ea18:	d011      	beq.n	800ea3e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ea1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ea1e:	3308      	adds	r3, #8
 800ea20:	2101      	movs	r1, #1
 800ea22:	4618      	mov	r0, r3
 800ea24:	f000 fb58 	bl	800f0d8 <RCCEx_PLL2_Config>
 800ea28:	4603      	mov	r3, r0
 800ea2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800ea2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	d003      	beq.n	800ea3e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ea36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ea3a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800ea3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ea42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea46:	2100      	movs	r1, #0
 800ea48:	61b9      	str	r1, [r7, #24]
 800ea4a:	f003 0304 	and.w	r3, r3, #4
 800ea4e:	61fb      	str	r3, [r7, #28]
 800ea50:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800ea54:	460b      	mov	r3, r1
 800ea56:	4313      	orrs	r3, r2
 800ea58:	d011      	beq.n	800ea7e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ea5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ea5e:	3308      	adds	r3, #8
 800ea60:	2102      	movs	r1, #2
 800ea62:	4618      	mov	r0, r3
 800ea64:	f000 fb38 	bl	800f0d8 <RCCEx_PLL2_Config>
 800ea68:	4603      	mov	r3, r0
 800ea6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800ea6e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	d003      	beq.n	800ea7e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ea76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ea7a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800ea7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ea82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea86:	2100      	movs	r1, #0
 800ea88:	6139      	str	r1, [r7, #16]
 800ea8a:	f003 0308 	and.w	r3, r3, #8
 800ea8e:	617b      	str	r3, [r7, #20]
 800ea90:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800ea94:	460b      	mov	r3, r1
 800ea96:	4313      	orrs	r3, r2
 800ea98:	d011      	beq.n	800eabe <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ea9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ea9e:	3328      	adds	r3, #40	@ 0x28
 800eaa0:	2100      	movs	r1, #0
 800eaa2:	4618      	mov	r0, r3
 800eaa4:	f000 fbca 	bl	800f23c <RCCEx_PLL3_Config>
 800eaa8:	4603      	mov	r3, r0
 800eaaa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800eaae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d003      	beq.n	800eabe <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800eab6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800eaba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800eabe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800eac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eac6:	2100      	movs	r1, #0
 800eac8:	60b9      	str	r1, [r7, #8]
 800eaca:	f003 0310 	and.w	r3, r3, #16
 800eace:	60fb      	str	r3, [r7, #12]
 800ead0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800ead4:	460b      	mov	r3, r1
 800ead6:	4313      	orrs	r3, r2
 800ead8:	d011      	beq.n	800eafe <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800eada:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800eade:	3328      	adds	r3, #40	@ 0x28
 800eae0:	2101      	movs	r1, #1
 800eae2:	4618      	mov	r0, r3
 800eae4:	f000 fbaa 	bl	800f23c <RCCEx_PLL3_Config>
 800eae8:	4603      	mov	r3, r0
 800eaea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800eaee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	d003      	beq.n	800eafe <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800eaf6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800eafa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800eafe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800eb02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb06:	2100      	movs	r1, #0
 800eb08:	6039      	str	r1, [r7, #0]
 800eb0a:	f003 0320 	and.w	r3, r3, #32
 800eb0e:	607b      	str	r3, [r7, #4]
 800eb10:	e9d7 1200 	ldrd	r1, r2, [r7]
 800eb14:	460b      	mov	r3, r1
 800eb16:	4313      	orrs	r3, r2
 800eb18:	d011      	beq.n	800eb3e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800eb1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800eb1e:	3328      	adds	r3, #40	@ 0x28
 800eb20:	2102      	movs	r1, #2
 800eb22:	4618      	mov	r0, r3
 800eb24:	f000 fb8a 	bl	800f23c <RCCEx_PLL3_Config>
 800eb28:	4603      	mov	r3, r0
 800eb2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800eb2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800eb32:	2b00      	cmp	r3, #0
 800eb34:	d003      	beq.n	800eb3e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800eb36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800eb3a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800eb3e:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800eb42:	2b00      	cmp	r3, #0
 800eb44:	d101      	bne.n	800eb4a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800eb46:	2300      	movs	r3, #0
 800eb48:	e000      	b.n	800eb4c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800eb4a:	2301      	movs	r3, #1
}
 800eb4c:	4618      	mov	r0, r3
 800eb4e:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800eb52:	46bd      	mov	sp, r7
 800eb54:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800eb58:	58024400 	.word	0x58024400

0800eb5c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800eb5c:	b580      	push	{r7, lr}
 800eb5e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800eb60:	f7fe fd96 	bl	800d690 <HAL_RCC_GetHCLKFreq>
 800eb64:	4602      	mov	r2, r0
 800eb66:	4b06      	ldr	r3, [pc, #24]	@ (800eb80 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800eb68:	6a1b      	ldr	r3, [r3, #32]
 800eb6a:	091b      	lsrs	r3, r3, #4
 800eb6c:	f003 0307 	and.w	r3, r3, #7
 800eb70:	4904      	ldr	r1, [pc, #16]	@ (800eb84 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800eb72:	5ccb      	ldrb	r3, [r1, r3]
 800eb74:	f003 031f 	and.w	r3, r3, #31
 800eb78:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800eb7c:	4618      	mov	r0, r3
 800eb7e:	bd80      	pop	{r7, pc}
 800eb80:	58024400 	.word	0x58024400
 800eb84:	08017808 	.word	0x08017808

0800eb88 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800eb88:	b480      	push	{r7}
 800eb8a:	b089      	sub	sp, #36	@ 0x24
 800eb8c:	af00      	add	r7, sp, #0
 800eb8e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800eb90:	4ba1      	ldr	r3, [pc, #644]	@ (800ee18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800eb92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eb94:	f003 0303 	and.w	r3, r3, #3
 800eb98:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800eb9a:	4b9f      	ldr	r3, [pc, #636]	@ (800ee18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800eb9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eb9e:	0b1b      	lsrs	r3, r3, #12
 800eba0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800eba4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800eba6:	4b9c      	ldr	r3, [pc, #624]	@ (800ee18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800eba8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ebaa:	091b      	lsrs	r3, r3, #4
 800ebac:	f003 0301 	and.w	r3, r3, #1
 800ebb0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800ebb2:	4b99      	ldr	r3, [pc, #612]	@ (800ee18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ebb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ebb6:	08db      	lsrs	r3, r3, #3
 800ebb8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ebbc:	693a      	ldr	r2, [r7, #16]
 800ebbe:	fb02 f303 	mul.w	r3, r2, r3
 800ebc2:	ee07 3a90 	vmov	s15, r3
 800ebc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ebca:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800ebce:	697b      	ldr	r3, [r7, #20]
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	f000 8111 	beq.w	800edf8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800ebd6:	69bb      	ldr	r3, [r7, #24]
 800ebd8:	2b02      	cmp	r3, #2
 800ebda:	f000 8083 	beq.w	800ece4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800ebde:	69bb      	ldr	r3, [r7, #24]
 800ebe0:	2b02      	cmp	r3, #2
 800ebe2:	f200 80a1 	bhi.w	800ed28 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800ebe6:	69bb      	ldr	r3, [r7, #24]
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	d003      	beq.n	800ebf4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800ebec:	69bb      	ldr	r3, [r7, #24]
 800ebee:	2b01      	cmp	r3, #1
 800ebf0:	d056      	beq.n	800eca0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800ebf2:	e099      	b.n	800ed28 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ebf4:	4b88      	ldr	r3, [pc, #544]	@ (800ee18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ebf6:	681b      	ldr	r3, [r3, #0]
 800ebf8:	f003 0320 	and.w	r3, r3, #32
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	d02d      	beq.n	800ec5c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ec00:	4b85      	ldr	r3, [pc, #532]	@ (800ee18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ec02:	681b      	ldr	r3, [r3, #0]
 800ec04:	08db      	lsrs	r3, r3, #3
 800ec06:	f003 0303 	and.w	r3, r3, #3
 800ec0a:	4a84      	ldr	r2, [pc, #528]	@ (800ee1c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800ec0c:	fa22 f303 	lsr.w	r3, r2, r3
 800ec10:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ec12:	68bb      	ldr	r3, [r7, #8]
 800ec14:	ee07 3a90 	vmov	s15, r3
 800ec18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ec1c:	697b      	ldr	r3, [r7, #20]
 800ec1e:	ee07 3a90 	vmov	s15, r3
 800ec22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ec26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ec2a:	4b7b      	ldr	r3, [pc, #492]	@ (800ee18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ec2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ec2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ec32:	ee07 3a90 	vmov	s15, r3
 800ec36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ec3a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ec3e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800ee20 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ec42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ec46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ec4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ec4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ec52:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ec56:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ec5a:	e087      	b.n	800ed6c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ec5c:	697b      	ldr	r3, [r7, #20]
 800ec5e:	ee07 3a90 	vmov	s15, r3
 800ec62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ec66:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800ee24 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800ec6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ec6e:	4b6a      	ldr	r3, [pc, #424]	@ (800ee18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ec70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ec72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ec76:	ee07 3a90 	vmov	s15, r3
 800ec7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ec7e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ec82:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800ee20 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ec86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ec8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ec8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ec92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ec96:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ec9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ec9e:	e065      	b.n	800ed6c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800eca0:	697b      	ldr	r3, [r7, #20]
 800eca2:	ee07 3a90 	vmov	s15, r3
 800eca6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ecaa:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800ee28 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ecae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ecb2:	4b59      	ldr	r3, [pc, #356]	@ (800ee18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ecb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ecb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ecba:	ee07 3a90 	vmov	s15, r3
 800ecbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ecc2:	ed97 6a03 	vldr	s12, [r7, #12]
 800ecc6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800ee20 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ecca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ecce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ecd2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ecd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ecda:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ecde:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ece2:	e043      	b.n	800ed6c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ece4:	697b      	ldr	r3, [r7, #20]
 800ece6:	ee07 3a90 	vmov	s15, r3
 800ecea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ecee:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800ee2c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800ecf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ecf6:	4b48      	ldr	r3, [pc, #288]	@ (800ee18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ecf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ecfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ecfe:	ee07 3a90 	vmov	s15, r3
 800ed02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ed06:	ed97 6a03 	vldr	s12, [r7, #12]
 800ed0a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800ee20 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ed0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ed12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ed16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ed1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ed1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ed22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ed26:	e021      	b.n	800ed6c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ed28:	697b      	ldr	r3, [r7, #20]
 800ed2a:	ee07 3a90 	vmov	s15, r3
 800ed2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ed32:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800ee28 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ed36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ed3a:	4b37      	ldr	r3, [pc, #220]	@ (800ee18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ed3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ed3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ed42:	ee07 3a90 	vmov	s15, r3
 800ed46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ed4a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ed4e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800ee20 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ed52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ed56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ed5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ed5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ed62:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ed66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ed6a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800ed6c:	4b2a      	ldr	r3, [pc, #168]	@ (800ee18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ed6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ed70:	0a5b      	lsrs	r3, r3, #9
 800ed72:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ed76:	ee07 3a90 	vmov	s15, r3
 800ed7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ed7e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ed82:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ed86:	edd7 6a07 	vldr	s13, [r7, #28]
 800ed8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ed8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ed92:	ee17 2a90 	vmov	r2, s15
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800ed9a:	4b1f      	ldr	r3, [pc, #124]	@ (800ee18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ed9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ed9e:	0c1b      	lsrs	r3, r3, #16
 800eda0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800eda4:	ee07 3a90 	vmov	s15, r3
 800eda8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800edac:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800edb0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800edb4:	edd7 6a07 	vldr	s13, [r7, #28]
 800edb8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800edbc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800edc0:	ee17 2a90 	vmov	r2, s15
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800edc8:	4b13      	ldr	r3, [pc, #76]	@ (800ee18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800edca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800edcc:	0e1b      	lsrs	r3, r3, #24
 800edce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800edd2:	ee07 3a90 	vmov	s15, r3
 800edd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800edda:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800edde:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ede2:	edd7 6a07 	vldr	s13, [r7, #28]
 800ede6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800edea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800edee:	ee17 2a90 	vmov	r2, s15
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800edf6:	e008      	b.n	800ee0a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	2200      	movs	r2, #0
 800edfc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	2200      	movs	r2, #0
 800ee02:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	2200      	movs	r2, #0
 800ee08:	609a      	str	r2, [r3, #8]
}
 800ee0a:	bf00      	nop
 800ee0c:	3724      	adds	r7, #36	@ 0x24
 800ee0e:	46bd      	mov	sp, r7
 800ee10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee14:	4770      	bx	lr
 800ee16:	bf00      	nop
 800ee18:	58024400 	.word	0x58024400
 800ee1c:	03d09000 	.word	0x03d09000
 800ee20:	46000000 	.word	0x46000000
 800ee24:	4c742400 	.word	0x4c742400
 800ee28:	4a742400 	.word	0x4a742400
 800ee2c:	4bbebc20 	.word	0x4bbebc20

0800ee30 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800ee30:	b480      	push	{r7}
 800ee32:	b089      	sub	sp, #36	@ 0x24
 800ee34:	af00      	add	r7, sp, #0
 800ee36:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ee38:	4ba1      	ldr	r3, [pc, #644]	@ (800f0c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ee3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ee3c:	f003 0303 	and.w	r3, r3, #3
 800ee40:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800ee42:	4b9f      	ldr	r3, [pc, #636]	@ (800f0c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ee44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ee46:	0d1b      	lsrs	r3, r3, #20
 800ee48:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ee4c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800ee4e:	4b9c      	ldr	r3, [pc, #624]	@ (800f0c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ee50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ee52:	0a1b      	lsrs	r3, r3, #8
 800ee54:	f003 0301 	and.w	r3, r3, #1
 800ee58:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800ee5a:	4b99      	ldr	r3, [pc, #612]	@ (800f0c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ee5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ee5e:	08db      	lsrs	r3, r3, #3
 800ee60:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ee64:	693a      	ldr	r2, [r7, #16]
 800ee66:	fb02 f303 	mul.w	r3, r2, r3
 800ee6a:	ee07 3a90 	vmov	s15, r3
 800ee6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ee72:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800ee76:	697b      	ldr	r3, [r7, #20]
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	f000 8111 	beq.w	800f0a0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800ee7e:	69bb      	ldr	r3, [r7, #24]
 800ee80:	2b02      	cmp	r3, #2
 800ee82:	f000 8083 	beq.w	800ef8c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800ee86:	69bb      	ldr	r3, [r7, #24]
 800ee88:	2b02      	cmp	r3, #2
 800ee8a:	f200 80a1 	bhi.w	800efd0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800ee8e:	69bb      	ldr	r3, [r7, #24]
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	d003      	beq.n	800ee9c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800ee94:	69bb      	ldr	r3, [r7, #24]
 800ee96:	2b01      	cmp	r3, #1
 800ee98:	d056      	beq.n	800ef48 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800ee9a:	e099      	b.n	800efd0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ee9c:	4b88      	ldr	r3, [pc, #544]	@ (800f0c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ee9e:	681b      	ldr	r3, [r3, #0]
 800eea0:	f003 0320 	and.w	r3, r3, #32
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	d02d      	beq.n	800ef04 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800eea8:	4b85      	ldr	r3, [pc, #532]	@ (800f0c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800eeaa:	681b      	ldr	r3, [r3, #0]
 800eeac:	08db      	lsrs	r3, r3, #3
 800eeae:	f003 0303 	and.w	r3, r3, #3
 800eeb2:	4a84      	ldr	r2, [pc, #528]	@ (800f0c4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800eeb4:	fa22 f303 	lsr.w	r3, r2, r3
 800eeb8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800eeba:	68bb      	ldr	r3, [r7, #8]
 800eebc:	ee07 3a90 	vmov	s15, r3
 800eec0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800eec4:	697b      	ldr	r3, [r7, #20]
 800eec6:	ee07 3a90 	vmov	s15, r3
 800eeca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800eece:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800eed2:	4b7b      	ldr	r3, [pc, #492]	@ (800f0c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800eed4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eed6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eeda:	ee07 3a90 	vmov	s15, r3
 800eede:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800eee2:	ed97 6a03 	vldr	s12, [r7, #12]
 800eee6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800f0c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800eeea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800eeee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800eef2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800eef6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800eefa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800eefe:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ef02:	e087      	b.n	800f014 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ef04:	697b      	ldr	r3, [r7, #20]
 800ef06:	ee07 3a90 	vmov	s15, r3
 800ef0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ef0e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800f0cc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800ef12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ef16:	4b6a      	ldr	r3, [pc, #424]	@ (800f0c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ef18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ef1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ef1e:	ee07 3a90 	vmov	s15, r3
 800ef22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ef26:	ed97 6a03 	vldr	s12, [r7, #12]
 800ef2a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800f0c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ef2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ef32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ef36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ef3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ef3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ef42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ef46:	e065      	b.n	800f014 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ef48:	697b      	ldr	r3, [r7, #20]
 800ef4a:	ee07 3a90 	vmov	s15, r3
 800ef4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ef52:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800f0d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ef56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ef5a:	4b59      	ldr	r3, [pc, #356]	@ (800f0c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ef5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ef5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ef62:	ee07 3a90 	vmov	s15, r3
 800ef66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ef6a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ef6e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800f0c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ef72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ef76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ef7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ef7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ef82:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ef86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ef8a:	e043      	b.n	800f014 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ef8c:	697b      	ldr	r3, [r7, #20]
 800ef8e:	ee07 3a90 	vmov	s15, r3
 800ef92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ef96:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800f0d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800ef9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ef9e:	4b48      	ldr	r3, [pc, #288]	@ (800f0c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800efa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800efa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800efa6:	ee07 3a90 	vmov	s15, r3
 800efaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800efae:	ed97 6a03 	vldr	s12, [r7, #12]
 800efb2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800f0c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800efb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800efba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800efbe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800efc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800efc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800efca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800efce:	e021      	b.n	800f014 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800efd0:	697b      	ldr	r3, [r7, #20]
 800efd2:	ee07 3a90 	vmov	s15, r3
 800efd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800efda:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800f0d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800efde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800efe2:	4b37      	ldr	r3, [pc, #220]	@ (800f0c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800efe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800efe6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800efea:	ee07 3a90 	vmov	s15, r3
 800efee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800eff2:	ed97 6a03 	vldr	s12, [r7, #12]
 800eff6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800f0c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800effa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800effe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f002:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f006:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f00a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f00e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f012:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800f014:	4b2a      	ldr	r3, [pc, #168]	@ (800f0c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f016:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f018:	0a5b      	lsrs	r3, r3, #9
 800f01a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f01e:	ee07 3a90 	vmov	s15, r3
 800f022:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f026:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f02a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f02e:	edd7 6a07 	vldr	s13, [r7, #28]
 800f032:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f036:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f03a:	ee17 2a90 	vmov	r2, s15
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800f042:	4b1f      	ldr	r3, [pc, #124]	@ (800f0c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f046:	0c1b      	lsrs	r3, r3, #16
 800f048:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f04c:	ee07 3a90 	vmov	s15, r3
 800f050:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f054:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f058:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f05c:	edd7 6a07 	vldr	s13, [r7, #28]
 800f060:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f064:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f068:	ee17 2a90 	vmov	r2, s15
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800f070:	4b13      	ldr	r3, [pc, #76]	@ (800f0c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f072:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f074:	0e1b      	lsrs	r3, r3, #24
 800f076:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f07a:	ee07 3a90 	vmov	s15, r3
 800f07e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f082:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f086:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f08a:	edd7 6a07 	vldr	s13, [r7, #28]
 800f08e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f092:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f096:	ee17 2a90 	vmov	r2, s15
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800f09e:	e008      	b.n	800f0b2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	2200      	movs	r2, #0
 800f0a4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	2200      	movs	r2, #0
 800f0aa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	2200      	movs	r2, #0
 800f0b0:	609a      	str	r2, [r3, #8]
}
 800f0b2:	bf00      	nop
 800f0b4:	3724      	adds	r7, #36	@ 0x24
 800f0b6:	46bd      	mov	sp, r7
 800f0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0bc:	4770      	bx	lr
 800f0be:	bf00      	nop
 800f0c0:	58024400 	.word	0x58024400
 800f0c4:	03d09000 	.word	0x03d09000
 800f0c8:	46000000 	.word	0x46000000
 800f0cc:	4c742400 	.word	0x4c742400
 800f0d0:	4a742400 	.word	0x4a742400
 800f0d4:	4bbebc20 	.word	0x4bbebc20

0800f0d8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800f0d8:	b580      	push	{r7, lr}
 800f0da:	b084      	sub	sp, #16
 800f0dc:	af00      	add	r7, sp, #0
 800f0de:	6078      	str	r0, [r7, #4]
 800f0e0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800f0e2:	2300      	movs	r3, #0
 800f0e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800f0e6:	4b53      	ldr	r3, [pc, #332]	@ (800f234 <RCCEx_PLL2_Config+0x15c>)
 800f0e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f0ea:	f003 0303 	and.w	r3, r3, #3
 800f0ee:	2b03      	cmp	r3, #3
 800f0f0:	d101      	bne.n	800f0f6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800f0f2:	2301      	movs	r3, #1
 800f0f4:	e099      	b.n	800f22a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800f0f6:	4b4f      	ldr	r3, [pc, #316]	@ (800f234 <RCCEx_PLL2_Config+0x15c>)
 800f0f8:	681b      	ldr	r3, [r3, #0]
 800f0fa:	4a4e      	ldr	r2, [pc, #312]	@ (800f234 <RCCEx_PLL2_Config+0x15c>)
 800f0fc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800f100:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f102:	f7f3 fcbd 	bl	8002a80 <HAL_GetTick>
 800f106:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800f108:	e008      	b.n	800f11c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800f10a:	f7f3 fcb9 	bl	8002a80 <HAL_GetTick>
 800f10e:	4602      	mov	r2, r0
 800f110:	68bb      	ldr	r3, [r7, #8]
 800f112:	1ad3      	subs	r3, r2, r3
 800f114:	2b02      	cmp	r3, #2
 800f116:	d901      	bls.n	800f11c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800f118:	2303      	movs	r3, #3
 800f11a:	e086      	b.n	800f22a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800f11c:	4b45      	ldr	r3, [pc, #276]	@ (800f234 <RCCEx_PLL2_Config+0x15c>)
 800f11e:	681b      	ldr	r3, [r3, #0]
 800f120:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f124:	2b00      	cmp	r3, #0
 800f126:	d1f0      	bne.n	800f10a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800f128:	4b42      	ldr	r3, [pc, #264]	@ (800f234 <RCCEx_PLL2_Config+0x15c>)
 800f12a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f12c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	681b      	ldr	r3, [r3, #0]
 800f134:	031b      	lsls	r3, r3, #12
 800f136:	493f      	ldr	r1, [pc, #252]	@ (800f234 <RCCEx_PLL2_Config+0x15c>)
 800f138:	4313      	orrs	r3, r2
 800f13a:	628b      	str	r3, [r1, #40]	@ 0x28
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	685b      	ldr	r3, [r3, #4]
 800f140:	3b01      	subs	r3, #1
 800f142:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	689b      	ldr	r3, [r3, #8]
 800f14a:	3b01      	subs	r3, #1
 800f14c:	025b      	lsls	r3, r3, #9
 800f14e:	b29b      	uxth	r3, r3
 800f150:	431a      	orrs	r2, r3
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	68db      	ldr	r3, [r3, #12]
 800f156:	3b01      	subs	r3, #1
 800f158:	041b      	lsls	r3, r3, #16
 800f15a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800f15e:	431a      	orrs	r2, r3
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	691b      	ldr	r3, [r3, #16]
 800f164:	3b01      	subs	r3, #1
 800f166:	061b      	lsls	r3, r3, #24
 800f168:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800f16c:	4931      	ldr	r1, [pc, #196]	@ (800f234 <RCCEx_PLL2_Config+0x15c>)
 800f16e:	4313      	orrs	r3, r2
 800f170:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800f172:	4b30      	ldr	r3, [pc, #192]	@ (800f234 <RCCEx_PLL2_Config+0x15c>)
 800f174:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f176:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	695b      	ldr	r3, [r3, #20]
 800f17e:	492d      	ldr	r1, [pc, #180]	@ (800f234 <RCCEx_PLL2_Config+0x15c>)
 800f180:	4313      	orrs	r3, r2
 800f182:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800f184:	4b2b      	ldr	r3, [pc, #172]	@ (800f234 <RCCEx_PLL2_Config+0x15c>)
 800f186:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f188:	f023 0220 	bic.w	r2, r3, #32
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	699b      	ldr	r3, [r3, #24]
 800f190:	4928      	ldr	r1, [pc, #160]	@ (800f234 <RCCEx_PLL2_Config+0x15c>)
 800f192:	4313      	orrs	r3, r2
 800f194:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800f196:	4b27      	ldr	r3, [pc, #156]	@ (800f234 <RCCEx_PLL2_Config+0x15c>)
 800f198:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f19a:	4a26      	ldr	r2, [pc, #152]	@ (800f234 <RCCEx_PLL2_Config+0x15c>)
 800f19c:	f023 0310 	bic.w	r3, r3, #16
 800f1a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800f1a2:	4b24      	ldr	r3, [pc, #144]	@ (800f234 <RCCEx_PLL2_Config+0x15c>)
 800f1a4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800f1a6:	4b24      	ldr	r3, [pc, #144]	@ (800f238 <RCCEx_PLL2_Config+0x160>)
 800f1a8:	4013      	ands	r3, r2
 800f1aa:	687a      	ldr	r2, [r7, #4]
 800f1ac:	69d2      	ldr	r2, [r2, #28]
 800f1ae:	00d2      	lsls	r2, r2, #3
 800f1b0:	4920      	ldr	r1, [pc, #128]	@ (800f234 <RCCEx_PLL2_Config+0x15c>)
 800f1b2:	4313      	orrs	r3, r2
 800f1b4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800f1b6:	4b1f      	ldr	r3, [pc, #124]	@ (800f234 <RCCEx_PLL2_Config+0x15c>)
 800f1b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f1ba:	4a1e      	ldr	r2, [pc, #120]	@ (800f234 <RCCEx_PLL2_Config+0x15c>)
 800f1bc:	f043 0310 	orr.w	r3, r3, #16
 800f1c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800f1c2:	683b      	ldr	r3, [r7, #0]
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	d106      	bne.n	800f1d6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800f1c8:	4b1a      	ldr	r3, [pc, #104]	@ (800f234 <RCCEx_PLL2_Config+0x15c>)
 800f1ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f1cc:	4a19      	ldr	r2, [pc, #100]	@ (800f234 <RCCEx_PLL2_Config+0x15c>)
 800f1ce:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800f1d2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800f1d4:	e00f      	b.n	800f1f6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800f1d6:	683b      	ldr	r3, [r7, #0]
 800f1d8:	2b01      	cmp	r3, #1
 800f1da:	d106      	bne.n	800f1ea <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800f1dc:	4b15      	ldr	r3, [pc, #84]	@ (800f234 <RCCEx_PLL2_Config+0x15c>)
 800f1de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f1e0:	4a14      	ldr	r2, [pc, #80]	@ (800f234 <RCCEx_PLL2_Config+0x15c>)
 800f1e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f1e6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800f1e8:	e005      	b.n	800f1f6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800f1ea:	4b12      	ldr	r3, [pc, #72]	@ (800f234 <RCCEx_PLL2_Config+0x15c>)
 800f1ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f1ee:	4a11      	ldr	r2, [pc, #68]	@ (800f234 <RCCEx_PLL2_Config+0x15c>)
 800f1f0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800f1f4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800f1f6:	4b0f      	ldr	r3, [pc, #60]	@ (800f234 <RCCEx_PLL2_Config+0x15c>)
 800f1f8:	681b      	ldr	r3, [r3, #0]
 800f1fa:	4a0e      	ldr	r2, [pc, #56]	@ (800f234 <RCCEx_PLL2_Config+0x15c>)
 800f1fc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800f200:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f202:	f7f3 fc3d 	bl	8002a80 <HAL_GetTick>
 800f206:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800f208:	e008      	b.n	800f21c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800f20a:	f7f3 fc39 	bl	8002a80 <HAL_GetTick>
 800f20e:	4602      	mov	r2, r0
 800f210:	68bb      	ldr	r3, [r7, #8]
 800f212:	1ad3      	subs	r3, r2, r3
 800f214:	2b02      	cmp	r3, #2
 800f216:	d901      	bls.n	800f21c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800f218:	2303      	movs	r3, #3
 800f21a:	e006      	b.n	800f22a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800f21c:	4b05      	ldr	r3, [pc, #20]	@ (800f234 <RCCEx_PLL2_Config+0x15c>)
 800f21e:	681b      	ldr	r3, [r3, #0]
 800f220:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f224:	2b00      	cmp	r3, #0
 800f226:	d0f0      	beq.n	800f20a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800f228:	7bfb      	ldrb	r3, [r7, #15]
}
 800f22a:	4618      	mov	r0, r3
 800f22c:	3710      	adds	r7, #16
 800f22e:	46bd      	mov	sp, r7
 800f230:	bd80      	pop	{r7, pc}
 800f232:	bf00      	nop
 800f234:	58024400 	.word	0x58024400
 800f238:	ffff0007 	.word	0xffff0007

0800f23c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800f23c:	b580      	push	{r7, lr}
 800f23e:	b084      	sub	sp, #16
 800f240:	af00      	add	r7, sp, #0
 800f242:	6078      	str	r0, [r7, #4]
 800f244:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800f246:	2300      	movs	r3, #0
 800f248:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800f24a:	4b53      	ldr	r3, [pc, #332]	@ (800f398 <RCCEx_PLL3_Config+0x15c>)
 800f24c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f24e:	f003 0303 	and.w	r3, r3, #3
 800f252:	2b03      	cmp	r3, #3
 800f254:	d101      	bne.n	800f25a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800f256:	2301      	movs	r3, #1
 800f258:	e099      	b.n	800f38e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800f25a:	4b4f      	ldr	r3, [pc, #316]	@ (800f398 <RCCEx_PLL3_Config+0x15c>)
 800f25c:	681b      	ldr	r3, [r3, #0]
 800f25e:	4a4e      	ldr	r2, [pc, #312]	@ (800f398 <RCCEx_PLL3_Config+0x15c>)
 800f260:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800f264:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f266:	f7f3 fc0b 	bl	8002a80 <HAL_GetTick>
 800f26a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800f26c:	e008      	b.n	800f280 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800f26e:	f7f3 fc07 	bl	8002a80 <HAL_GetTick>
 800f272:	4602      	mov	r2, r0
 800f274:	68bb      	ldr	r3, [r7, #8]
 800f276:	1ad3      	subs	r3, r2, r3
 800f278:	2b02      	cmp	r3, #2
 800f27a:	d901      	bls.n	800f280 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800f27c:	2303      	movs	r3, #3
 800f27e:	e086      	b.n	800f38e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800f280:	4b45      	ldr	r3, [pc, #276]	@ (800f398 <RCCEx_PLL3_Config+0x15c>)
 800f282:	681b      	ldr	r3, [r3, #0]
 800f284:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800f288:	2b00      	cmp	r3, #0
 800f28a:	d1f0      	bne.n	800f26e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800f28c:	4b42      	ldr	r3, [pc, #264]	@ (800f398 <RCCEx_PLL3_Config+0x15c>)
 800f28e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f290:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	681b      	ldr	r3, [r3, #0]
 800f298:	051b      	lsls	r3, r3, #20
 800f29a:	493f      	ldr	r1, [pc, #252]	@ (800f398 <RCCEx_PLL3_Config+0x15c>)
 800f29c:	4313      	orrs	r3, r2
 800f29e:	628b      	str	r3, [r1, #40]	@ 0x28
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	685b      	ldr	r3, [r3, #4]
 800f2a4:	3b01      	subs	r3, #1
 800f2a6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	689b      	ldr	r3, [r3, #8]
 800f2ae:	3b01      	subs	r3, #1
 800f2b0:	025b      	lsls	r3, r3, #9
 800f2b2:	b29b      	uxth	r3, r3
 800f2b4:	431a      	orrs	r2, r3
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	68db      	ldr	r3, [r3, #12]
 800f2ba:	3b01      	subs	r3, #1
 800f2bc:	041b      	lsls	r3, r3, #16
 800f2be:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800f2c2:	431a      	orrs	r2, r3
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	691b      	ldr	r3, [r3, #16]
 800f2c8:	3b01      	subs	r3, #1
 800f2ca:	061b      	lsls	r3, r3, #24
 800f2cc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800f2d0:	4931      	ldr	r1, [pc, #196]	@ (800f398 <RCCEx_PLL3_Config+0x15c>)
 800f2d2:	4313      	orrs	r3, r2
 800f2d4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800f2d6:	4b30      	ldr	r3, [pc, #192]	@ (800f398 <RCCEx_PLL3_Config+0x15c>)
 800f2d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f2da:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	695b      	ldr	r3, [r3, #20]
 800f2e2:	492d      	ldr	r1, [pc, #180]	@ (800f398 <RCCEx_PLL3_Config+0x15c>)
 800f2e4:	4313      	orrs	r3, r2
 800f2e6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800f2e8:	4b2b      	ldr	r3, [pc, #172]	@ (800f398 <RCCEx_PLL3_Config+0x15c>)
 800f2ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f2ec:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	699b      	ldr	r3, [r3, #24]
 800f2f4:	4928      	ldr	r1, [pc, #160]	@ (800f398 <RCCEx_PLL3_Config+0x15c>)
 800f2f6:	4313      	orrs	r3, r2
 800f2f8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800f2fa:	4b27      	ldr	r3, [pc, #156]	@ (800f398 <RCCEx_PLL3_Config+0x15c>)
 800f2fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f2fe:	4a26      	ldr	r2, [pc, #152]	@ (800f398 <RCCEx_PLL3_Config+0x15c>)
 800f300:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f304:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800f306:	4b24      	ldr	r3, [pc, #144]	@ (800f398 <RCCEx_PLL3_Config+0x15c>)
 800f308:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f30a:	4b24      	ldr	r3, [pc, #144]	@ (800f39c <RCCEx_PLL3_Config+0x160>)
 800f30c:	4013      	ands	r3, r2
 800f30e:	687a      	ldr	r2, [r7, #4]
 800f310:	69d2      	ldr	r2, [r2, #28]
 800f312:	00d2      	lsls	r2, r2, #3
 800f314:	4920      	ldr	r1, [pc, #128]	@ (800f398 <RCCEx_PLL3_Config+0x15c>)
 800f316:	4313      	orrs	r3, r2
 800f318:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800f31a:	4b1f      	ldr	r3, [pc, #124]	@ (800f398 <RCCEx_PLL3_Config+0x15c>)
 800f31c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f31e:	4a1e      	ldr	r2, [pc, #120]	@ (800f398 <RCCEx_PLL3_Config+0x15c>)
 800f320:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800f324:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800f326:	683b      	ldr	r3, [r7, #0]
 800f328:	2b00      	cmp	r3, #0
 800f32a:	d106      	bne.n	800f33a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800f32c:	4b1a      	ldr	r3, [pc, #104]	@ (800f398 <RCCEx_PLL3_Config+0x15c>)
 800f32e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f330:	4a19      	ldr	r2, [pc, #100]	@ (800f398 <RCCEx_PLL3_Config+0x15c>)
 800f332:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800f336:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800f338:	e00f      	b.n	800f35a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800f33a:	683b      	ldr	r3, [r7, #0]
 800f33c:	2b01      	cmp	r3, #1
 800f33e:	d106      	bne.n	800f34e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800f340:	4b15      	ldr	r3, [pc, #84]	@ (800f398 <RCCEx_PLL3_Config+0x15c>)
 800f342:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f344:	4a14      	ldr	r2, [pc, #80]	@ (800f398 <RCCEx_PLL3_Config+0x15c>)
 800f346:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800f34a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800f34c:	e005      	b.n	800f35a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800f34e:	4b12      	ldr	r3, [pc, #72]	@ (800f398 <RCCEx_PLL3_Config+0x15c>)
 800f350:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f352:	4a11      	ldr	r2, [pc, #68]	@ (800f398 <RCCEx_PLL3_Config+0x15c>)
 800f354:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800f358:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800f35a:	4b0f      	ldr	r3, [pc, #60]	@ (800f398 <RCCEx_PLL3_Config+0x15c>)
 800f35c:	681b      	ldr	r3, [r3, #0]
 800f35e:	4a0e      	ldr	r2, [pc, #56]	@ (800f398 <RCCEx_PLL3_Config+0x15c>)
 800f360:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800f364:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f366:	f7f3 fb8b 	bl	8002a80 <HAL_GetTick>
 800f36a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800f36c:	e008      	b.n	800f380 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800f36e:	f7f3 fb87 	bl	8002a80 <HAL_GetTick>
 800f372:	4602      	mov	r2, r0
 800f374:	68bb      	ldr	r3, [r7, #8]
 800f376:	1ad3      	subs	r3, r2, r3
 800f378:	2b02      	cmp	r3, #2
 800f37a:	d901      	bls.n	800f380 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800f37c:	2303      	movs	r3, #3
 800f37e:	e006      	b.n	800f38e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800f380:	4b05      	ldr	r3, [pc, #20]	@ (800f398 <RCCEx_PLL3_Config+0x15c>)
 800f382:	681b      	ldr	r3, [r3, #0]
 800f384:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800f388:	2b00      	cmp	r3, #0
 800f38a:	d0f0      	beq.n	800f36e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800f38c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f38e:	4618      	mov	r0, r3
 800f390:	3710      	adds	r7, #16
 800f392:	46bd      	mov	sp, r7
 800f394:	bd80      	pop	{r7, pc}
 800f396:	bf00      	nop
 800f398:	58024400 	.word	0x58024400
 800f39c:	ffff0007 	.word	0xffff0007

0800f3a0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800f3a0:	b580      	push	{r7, lr}
 800f3a2:	b084      	sub	sp, #16
 800f3a4:	af00      	add	r7, sp, #0
 800f3a6:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	d101      	bne.n	800f3b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800f3ae:	2301      	movs	r3, #1
 800f3b0:	e10f      	b.n	800f5d2 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	2200      	movs	r2, #0
 800f3b6:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	681b      	ldr	r3, [r3, #0]
 800f3bc:	4a87      	ldr	r2, [pc, #540]	@ (800f5dc <HAL_SPI_Init+0x23c>)
 800f3be:	4293      	cmp	r3, r2
 800f3c0:	d00f      	beq.n	800f3e2 <HAL_SPI_Init+0x42>
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	681b      	ldr	r3, [r3, #0]
 800f3c6:	4a86      	ldr	r2, [pc, #536]	@ (800f5e0 <HAL_SPI_Init+0x240>)
 800f3c8:	4293      	cmp	r3, r2
 800f3ca:	d00a      	beq.n	800f3e2 <HAL_SPI_Init+0x42>
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	681b      	ldr	r3, [r3, #0]
 800f3d0:	4a84      	ldr	r2, [pc, #528]	@ (800f5e4 <HAL_SPI_Init+0x244>)
 800f3d2:	4293      	cmp	r3, r2
 800f3d4:	d005      	beq.n	800f3e2 <HAL_SPI_Init+0x42>
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	68db      	ldr	r3, [r3, #12]
 800f3da:	2b0f      	cmp	r3, #15
 800f3dc:	d901      	bls.n	800f3e2 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800f3de:	2301      	movs	r3, #1
 800f3e0:	e0f7      	b.n	800f5d2 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800f3e2:	6878      	ldr	r0, [r7, #4]
 800f3e4:	f000 f900 	bl	800f5e8 <SPI_GetPacketSize>
 800f3e8:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	681b      	ldr	r3, [r3, #0]
 800f3ee:	4a7b      	ldr	r2, [pc, #492]	@ (800f5dc <HAL_SPI_Init+0x23c>)
 800f3f0:	4293      	cmp	r3, r2
 800f3f2:	d00c      	beq.n	800f40e <HAL_SPI_Init+0x6e>
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	681b      	ldr	r3, [r3, #0]
 800f3f8:	4a79      	ldr	r2, [pc, #484]	@ (800f5e0 <HAL_SPI_Init+0x240>)
 800f3fa:	4293      	cmp	r3, r2
 800f3fc:	d007      	beq.n	800f40e <HAL_SPI_Init+0x6e>
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	681b      	ldr	r3, [r3, #0]
 800f402:	4a78      	ldr	r2, [pc, #480]	@ (800f5e4 <HAL_SPI_Init+0x244>)
 800f404:	4293      	cmp	r3, r2
 800f406:	d002      	beq.n	800f40e <HAL_SPI_Init+0x6e>
 800f408:	68fb      	ldr	r3, [r7, #12]
 800f40a:	2b08      	cmp	r3, #8
 800f40c:	d811      	bhi.n	800f432 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800f412:	4a72      	ldr	r2, [pc, #456]	@ (800f5dc <HAL_SPI_Init+0x23c>)
 800f414:	4293      	cmp	r3, r2
 800f416:	d009      	beq.n	800f42c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	681b      	ldr	r3, [r3, #0]
 800f41c:	4a70      	ldr	r2, [pc, #448]	@ (800f5e0 <HAL_SPI_Init+0x240>)
 800f41e:	4293      	cmp	r3, r2
 800f420:	d004      	beq.n	800f42c <HAL_SPI_Init+0x8c>
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	681b      	ldr	r3, [r3, #0]
 800f426:	4a6f      	ldr	r2, [pc, #444]	@ (800f5e4 <HAL_SPI_Init+0x244>)
 800f428:	4293      	cmp	r3, r2
 800f42a:	d104      	bne.n	800f436 <HAL_SPI_Init+0x96>
 800f42c:	68fb      	ldr	r3, [r7, #12]
 800f42e:	2b10      	cmp	r3, #16
 800f430:	d901      	bls.n	800f436 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800f432:	2301      	movs	r3, #1
 800f434:	e0cd      	b.n	800f5d2 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800f43c:	b2db      	uxtb	r3, r3
 800f43e:	2b00      	cmp	r3, #0
 800f440:	d106      	bne.n	800f450 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	2200      	movs	r2, #0
 800f446:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800f44a:	6878      	ldr	r0, [r7, #4]
 800f44c:	f7f2 fe44 	bl	80020d8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	2202      	movs	r2, #2
 800f454:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	681b      	ldr	r3, [r3, #0]
 800f45c:	681a      	ldr	r2, [r3, #0]
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	681b      	ldr	r3, [r3, #0]
 800f462:	f022 0201 	bic.w	r2, r2, #1
 800f466:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	681b      	ldr	r3, [r3, #0]
 800f46c:	689b      	ldr	r3, [r3, #8]
 800f46e:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800f472:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	699b      	ldr	r3, [r3, #24]
 800f478:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800f47c:	d119      	bne.n	800f4b2 <HAL_SPI_Init+0x112>
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	685b      	ldr	r3, [r3, #4]
 800f482:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800f486:	d103      	bne.n	800f490 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800f48c:	2b00      	cmp	r3, #0
 800f48e:	d008      	beq.n	800f4a2 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800f494:	2b00      	cmp	r3, #0
 800f496:	d10c      	bne.n	800f4b2 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800f49c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f4a0:	d107      	bne.n	800f4b2 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	681b      	ldr	r3, [r3, #0]
 800f4a6:	681a      	ldr	r2, [r3, #0]
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	681b      	ldr	r3, [r3, #0]
 800f4ac:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800f4b0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	685b      	ldr	r3, [r3, #4]
 800f4b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	d00f      	beq.n	800f4de <HAL_SPI_Init+0x13e>
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	68db      	ldr	r3, [r3, #12]
 800f4c2:	2b06      	cmp	r3, #6
 800f4c4:	d90b      	bls.n	800f4de <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	681b      	ldr	r3, [r3, #0]
 800f4ca:	681b      	ldr	r3, [r3, #0]
 800f4cc:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	681b      	ldr	r3, [r3, #0]
 800f4d8:	430a      	orrs	r2, r1
 800f4da:	601a      	str	r2, [r3, #0]
 800f4dc:	e007      	b.n	800f4ee <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	681b      	ldr	r3, [r3, #0]
 800f4e2:	681a      	ldr	r2, [r3, #0]
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	681b      	ldr	r3, [r3, #0]
 800f4e8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800f4ec:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	69da      	ldr	r2, [r3, #28]
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f4f6:	431a      	orrs	r2, r3
 800f4f8:	68bb      	ldr	r3, [r7, #8]
 800f4fa:	431a      	orrs	r2, r3
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f500:	ea42 0103 	orr.w	r1, r2, r3
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	68da      	ldr	r2, [r3, #12]
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	681b      	ldr	r3, [r3, #0]
 800f50c:	430a      	orrs	r2, r1
 800f50e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f518:	431a      	orrs	r2, r3
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f51e:	431a      	orrs	r2, r3
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	699b      	ldr	r3, [r3, #24]
 800f524:	431a      	orrs	r2, r3
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	691b      	ldr	r3, [r3, #16]
 800f52a:	431a      	orrs	r2, r3
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	695b      	ldr	r3, [r3, #20]
 800f530:	431a      	orrs	r2, r3
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	6a1b      	ldr	r3, [r3, #32]
 800f536:	431a      	orrs	r2, r3
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	685b      	ldr	r3, [r3, #4]
 800f53c:	431a      	orrs	r2, r3
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f542:	431a      	orrs	r2, r3
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	689b      	ldr	r3, [r3, #8]
 800f548:	431a      	orrs	r2, r3
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f54e:	ea42 0103 	orr.w	r1, r2, r3
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	681b      	ldr	r3, [r3, #0]
 800f55a:	430a      	orrs	r2, r1
 800f55c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	685b      	ldr	r3, [r3, #4]
 800f562:	2b00      	cmp	r3, #0
 800f564:	d113      	bne.n	800f58e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	681b      	ldr	r3, [r3, #0]
 800f56a:	689b      	ldr	r3, [r3, #8]
 800f56c:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	681b      	ldr	r3, [r3, #0]
 800f574:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800f578:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	681b      	ldr	r3, [r3, #0]
 800f57e:	689b      	ldr	r3, [r3, #8]
 800f580:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	681b      	ldr	r3, [r3, #0]
 800f588:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800f58c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	681b      	ldr	r3, [r3, #0]
 800f592:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	681b      	ldr	r3, [r3, #0]
 800f598:	f022 0201 	bic.w	r2, r2, #1
 800f59c:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	685b      	ldr	r3, [r3, #4]
 800f5a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800f5a6:	2b00      	cmp	r3, #0
 800f5a8:	d00a      	beq.n	800f5c0 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	681b      	ldr	r3, [r3, #0]
 800f5ae:	68db      	ldr	r3, [r3, #12]
 800f5b0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	681b      	ldr	r3, [r3, #0]
 800f5bc:	430a      	orrs	r2, r1
 800f5be:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	2200      	movs	r2, #0
 800f5c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	2201      	movs	r2, #1
 800f5cc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800f5d0:	2300      	movs	r3, #0
}
 800f5d2:	4618      	mov	r0, r3
 800f5d4:	3710      	adds	r7, #16
 800f5d6:	46bd      	mov	sp, r7
 800f5d8:	bd80      	pop	{r7, pc}
 800f5da:	bf00      	nop
 800f5dc:	40013000 	.word	0x40013000
 800f5e0:	40003800 	.word	0x40003800
 800f5e4:	40003c00 	.word	0x40003c00

0800f5e8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800f5e8:	b480      	push	{r7}
 800f5ea:	b085      	sub	sp, #20
 800f5ec:	af00      	add	r7, sp, #0
 800f5ee:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f5f4:	095b      	lsrs	r3, r3, #5
 800f5f6:	3301      	adds	r3, #1
 800f5f8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	68db      	ldr	r3, [r3, #12]
 800f5fe:	3301      	adds	r3, #1
 800f600:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800f602:	68bb      	ldr	r3, [r7, #8]
 800f604:	3307      	adds	r3, #7
 800f606:	08db      	lsrs	r3, r3, #3
 800f608:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800f60a:	68bb      	ldr	r3, [r7, #8]
 800f60c:	68fa      	ldr	r2, [r7, #12]
 800f60e:	fb02 f303 	mul.w	r3, r2, r3
}
 800f612:	4618      	mov	r0, r3
 800f614:	3714      	adds	r7, #20
 800f616:	46bd      	mov	sp, r7
 800f618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f61c:	4770      	bx	lr

0800f61e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800f61e:	b580      	push	{r7, lr}
 800f620:	b082      	sub	sp, #8
 800f622:	af00      	add	r7, sp, #0
 800f624:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	2b00      	cmp	r3, #0
 800f62a:	d101      	bne.n	800f630 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800f62c:	2301      	movs	r3, #1
 800f62e:	e049      	b.n	800f6c4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f636:	b2db      	uxtb	r3, r3
 800f638:	2b00      	cmp	r3, #0
 800f63a:	d106      	bne.n	800f64a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	2200      	movs	r2, #0
 800f640:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800f644:	6878      	ldr	r0, [r7, #4]
 800f646:	f7f2 fe3b 	bl	80022c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	2202      	movs	r2, #2
 800f64e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	681a      	ldr	r2, [r3, #0]
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	3304      	adds	r3, #4
 800f65a:	4619      	mov	r1, r3
 800f65c:	4610      	mov	r0, r2
 800f65e:	f000 fbe9 	bl	800fe34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	2201      	movs	r2, #1
 800f666:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	2201      	movs	r2, #1
 800f66e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	2201      	movs	r2, #1
 800f676:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	2201      	movs	r2, #1
 800f67e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	2201      	movs	r2, #1
 800f686:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	2201      	movs	r2, #1
 800f68e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	2201      	movs	r2, #1
 800f696:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	2201      	movs	r2, #1
 800f69e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	2201      	movs	r2, #1
 800f6a6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	2201      	movs	r2, #1
 800f6ae:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	2201      	movs	r2, #1
 800f6b6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	2201      	movs	r2, #1
 800f6be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800f6c2:	2300      	movs	r3, #0
}
 800f6c4:	4618      	mov	r0, r3
 800f6c6:	3708      	adds	r7, #8
 800f6c8:	46bd      	mov	sp, r7
 800f6ca:	bd80      	pop	{r7, pc}

0800f6cc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800f6cc:	b580      	push	{r7, lr}
 800f6ce:	b082      	sub	sp, #8
 800f6d0:	af00      	add	r7, sp, #0
 800f6d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	2b00      	cmp	r3, #0
 800f6d8:	d101      	bne.n	800f6de <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800f6da:	2301      	movs	r3, #1
 800f6dc:	e049      	b.n	800f772 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f6e4:	b2db      	uxtb	r3, r3
 800f6e6:	2b00      	cmp	r3, #0
 800f6e8:	d106      	bne.n	800f6f8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	2200      	movs	r2, #0
 800f6ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800f6f2:	6878      	ldr	r0, [r7, #4]
 800f6f4:	f7f2 fd7e 	bl	80021f4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	2202      	movs	r2, #2
 800f6fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	681a      	ldr	r2, [r3, #0]
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	3304      	adds	r3, #4
 800f708:	4619      	mov	r1, r3
 800f70a:	4610      	mov	r0, r2
 800f70c:	f000 fb92 	bl	800fe34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	2201      	movs	r2, #1
 800f714:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	2201      	movs	r2, #1
 800f71c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	2201      	movs	r2, #1
 800f724:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	2201      	movs	r2, #1
 800f72c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	2201      	movs	r2, #1
 800f734:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	2201      	movs	r2, #1
 800f73c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	2201      	movs	r2, #1
 800f744:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	2201      	movs	r2, #1
 800f74c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	2201      	movs	r2, #1
 800f754:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	2201      	movs	r2, #1
 800f75c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	2201      	movs	r2, #1
 800f764:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	2201      	movs	r2, #1
 800f76c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800f770:	2300      	movs	r3, #0
}
 800f772:	4618      	mov	r0, r3
 800f774:	3708      	adds	r7, #8
 800f776:	46bd      	mov	sp, r7
 800f778:	bd80      	pop	{r7, pc}
	...

0800f77c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f77c:	b580      	push	{r7, lr}
 800f77e:	b084      	sub	sp, #16
 800f780:	af00      	add	r7, sp, #0
 800f782:	6078      	str	r0, [r7, #4]
 800f784:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800f786:	683b      	ldr	r3, [r7, #0]
 800f788:	2b00      	cmp	r3, #0
 800f78a:	d109      	bne.n	800f7a0 <HAL_TIM_PWM_Start+0x24>
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800f792:	b2db      	uxtb	r3, r3
 800f794:	2b01      	cmp	r3, #1
 800f796:	bf14      	ite	ne
 800f798:	2301      	movne	r3, #1
 800f79a:	2300      	moveq	r3, #0
 800f79c:	b2db      	uxtb	r3, r3
 800f79e:	e03c      	b.n	800f81a <HAL_TIM_PWM_Start+0x9e>
 800f7a0:	683b      	ldr	r3, [r7, #0]
 800f7a2:	2b04      	cmp	r3, #4
 800f7a4:	d109      	bne.n	800f7ba <HAL_TIM_PWM_Start+0x3e>
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800f7ac:	b2db      	uxtb	r3, r3
 800f7ae:	2b01      	cmp	r3, #1
 800f7b0:	bf14      	ite	ne
 800f7b2:	2301      	movne	r3, #1
 800f7b4:	2300      	moveq	r3, #0
 800f7b6:	b2db      	uxtb	r3, r3
 800f7b8:	e02f      	b.n	800f81a <HAL_TIM_PWM_Start+0x9e>
 800f7ba:	683b      	ldr	r3, [r7, #0]
 800f7bc:	2b08      	cmp	r3, #8
 800f7be:	d109      	bne.n	800f7d4 <HAL_TIM_PWM_Start+0x58>
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f7c6:	b2db      	uxtb	r3, r3
 800f7c8:	2b01      	cmp	r3, #1
 800f7ca:	bf14      	ite	ne
 800f7cc:	2301      	movne	r3, #1
 800f7ce:	2300      	moveq	r3, #0
 800f7d0:	b2db      	uxtb	r3, r3
 800f7d2:	e022      	b.n	800f81a <HAL_TIM_PWM_Start+0x9e>
 800f7d4:	683b      	ldr	r3, [r7, #0]
 800f7d6:	2b0c      	cmp	r3, #12
 800f7d8:	d109      	bne.n	800f7ee <HAL_TIM_PWM_Start+0x72>
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f7e0:	b2db      	uxtb	r3, r3
 800f7e2:	2b01      	cmp	r3, #1
 800f7e4:	bf14      	ite	ne
 800f7e6:	2301      	movne	r3, #1
 800f7e8:	2300      	moveq	r3, #0
 800f7ea:	b2db      	uxtb	r3, r3
 800f7ec:	e015      	b.n	800f81a <HAL_TIM_PWM_Start+0x9e>
 800f7ee:	683b      	ldr	r3, [r7, #0]
 800f7f0:	2b10      	cmp	r3, #16
 800f7f2:	d109      	bne.n	800f808 <HAL_TIM_PWM_Start+0x8c>
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800f7fa:	b2db      	uxtb	r3, r3
 800f7fc:	2b01      	cmp	r3, #1
 800f7fe:	bf14      	ite	ne
 800f800:	2301      	movne	r3, #1
 800f802:	2300      	moveq	r3, #0
 800f804:	b2db      	uxtb	r3, r3
 800f806:	e008      	b.n	800f81a <HAL_TIM_PWM_Start+0x9e>
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800f80e:	b2db      	uxtb	r3, r3
 800f810:	2b01      	cmp	r3, #1
 800f812:	bf14      	ite	ne
 800f814:	2301      	movne	r3, #1
 800f816:	2300      	moveq	r3, #0
 800f818:	b2db      	uxtb	r3, r3
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	d001      	beq.n	800f822 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800f81e:	2301      	movs	r3, #1
 800f820:	e0a1      	b.n	800f966 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800f822:	683b      	ldr	r3, [r7, #0]
 800f824:	2b00      	cmp	r3, #0
 800f826:	d104      	bne.n	800f832 <HAL_TIM_PWM_Start+0xb6>
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	2202      	movs	r2, #2
 800f82c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800f830:	e023      	b.n	800f87a <HAL_TIM_PWM_Start+0xfe>
 800f832:	683b      	ldr	r3, [r7, #0]
 800f834:	2b04      	cmp	r3, #4
 800f836:	d104      	bne.n	800f842 <HAL_TIM_PWM_Start+0xc6>
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	2202      	movs	r2, #2
 800f83c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800f840:	e01b      	b.n	800f87a <HAL_TIM_PWM_Start+0xfe>
 800f842:	683b      	ldr	r3, [r7, #0]
 800f844:	2b08      	cmp	r3, #8
 800f846:	d104      	bne.n	800f852 <HAL_TIM_PWM_Start+0xd6>
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	2202      	movs	r2, #2
 800f84c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800f850:	e013      	b.n	800f87a <HAL_TIM_PWM_Start+0xfe>
 800f852:	683b      	ldr	r3, [r7, #0]
 800f854:	2b0c      	cmp	r3, #12
 800f856:	d104      	bne.n	800f862 <HAL_TIM_PWM_Start+0xe6>
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	2202      	movs	r2, #2
 800f85c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800f860:	e00b      	b.n	800f87a <HAL_TIM_PWM_Start+0xfe>
 800f862:	683b      	ldr	r3, [r7, #0]
 800f864:	2b10      	cmp	r3, #16
 800f866:	d104      	bne.n	800f872 <HAL_TIM_PWM_Start+0xf6>
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	2202      	movs	r2, #2
 800f86c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800f870:	e003      	b.n	800f87a <HAL_TIM_PWM_Start+0xfe>
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	2202      	movs	r2, #2
 800f876:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	681b      	ldr	r3, [r3, #0]
 800f87e:	2201      	movs	r2, #1
 800f880:	6839      	ldr	r1, [r7, #0]
 800f882:	4618      	mov	r0, r3
 800f884:	f000 fe4c 	bl	8010520 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	681b      	ldr	r3, [r3, #0]
 800f88c:	4a38      	ldr	r2, [pc, #224]	@ (800f970 <HAL_TIM_PWM_Start+0x1f4>)
 800f88e:	4293      	cmp	r3, r2
 800f890:	d013      	beq.n	800f8ba <HAL_TIM_PWM_Start+0x13e>
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	681b      	ldr	r3, [r3, #0]
 800f896:	4a37      	ldr	r2, [pc, #220]	@ (800f974 <HAL_TIM_PWM_Start+0x1f8>)
 800f898:	4293      	cmp	r3, r2
 800f89a:	d00e      	beq.n	800f8ba <HAL_TIM_PWM_Start+0x13e>
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	681b      	ldr	r3, [r3, #0]
 800f8a0:	4a35      	ldr	r2, [pc, #212]	@ (800f978 <HAL_TIM_PWM_Start+0x1fc>)
 800f8a2:	4293      	cmp	r3, r2
 800f8a4:	d009      	beq.n	800f8ba <HAL_TIM_PWM_Start+0x13e>
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	681b      	ldr	r3, [r3, #0]
 800f8aa:	4a34      	ldr	r2, [pc, #208]	@ (800f97c <HAL_TIM_PWM_Start+0x200>)
 800f8ac:	4293      	cmp	r3, r2
 800f8ae:	d004      	beq.n	800f8ba <HAL_TIM_PWM_Start+0x13e>
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	681b      	ldr	r3, [r3, #0]
 800f8b4:	4a32      	ldr	r2, [pc, #200]	@ (800f980 <HAL_TIM_PWM_Start+0x204>)
 800f8b6:	4293      	cmp	r3, r2
 800f8b8:	d101      	bne.n	800f8be <HAL_TIM_PWM_Start+0x142>
 800f8ba:	2301      	movs	r3, #1
 800f8bc:	e000      	b.n	800f8c0 <HAL_TIM_PWM_Start+0x144>
 800f8be:	2300      	movs	r3, #0
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	d007      	beq.n	800f8d4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	681b      	ldr	r3, [r3, #0]
 800f8c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	681b      	ldr	r3, [r3, #0]
 800f8ce:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800f8d2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	681b      	ldr	r3, [r3, #0]
 800f8d8:	4a25      	ldr	r2, [pc, #148]	@ (800f970 <HAL_TIM_PWM_Start+0x1f4>)
 800f8da:	4293      	cmp	r3, r2
 800f8dc:	d022      	beq.n	800f924 <HAL_TIM_PWM_Start+0x1a8>
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	681b      	ldr	r3, [r3, #0]
 800f8e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f8e6:	d01d      	beq.n	800f924 <HAL_TIM_PWM_Start+0x1a8>
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	681b      	ldr	r3, [r3, #0]
 800f8ec:	4a25      	ldr	r2, [pc, #148]	@ (800f984 <HAL_TIM_PWM_Start+0x208>)
 800f8ee:	4293      	cmp	r3, r2
 800f8f0:	d018      	beq.n	800f924 <HAL_TIM_PWM_Start+0x1a8>
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	681b      	ldr	r3, [r3, #0]
 800f8f6:	4a24      	ldr	r2, [pc, #144]	@ (800f988 <HAL_TIM_PWM_Start+0x20c>)
 800f8f8:	4293      	cmp	r3, r2
 800f8fa:	d013      	beq.n	800f924 <HAL_TIM_PWM_Start+0x1a8>
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	681b      	ldr	r3, [r3, #0]
 800f900:	4a22      	ldr	r2, [pc, #136]	@ (800f98c <HAL_TIM_PWM_Start+0x210>)
 800f902:	4293      	cmp	r3, r2
 800f904:	d00e      	beq.n	800f924 <HAL_TIM_PWM_Start+0x1a8>
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	681b      	ldr	r3, [r3, #0]
 800f90a:	4a1a      	ldr	r2, [pc, #104]	@ (800f974 <HAL_TIM_PWM_Start+0x1f8>)
 800f90c:	4293      	cmp	r3, r2
 800f90e:	d009      	beq.n	800f924 <HAL_TIM_PWM_Start+0x1a8>
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	681b      	ldr	r3, [r3, #0]
 800f914:	4a1e      	ldr	r2, [pc, #120]	@ (800f990 <HAL_TIM_PWM_Start+0x214>)
 800f916:	4293      	cmp	r3, r2
 800f918:	d004      	beq.n	800f924 <HAL_TIM_PWM_Start+0x1a8>
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	681b      	ldr	r3, [r3, #0]
 800f91e:	4a16      	ldr	r2, [pc, #88]	@ (800f978 <HAL_TIM_PWM_Start+0x1fc>)
 800f920:	4293      	cmp	r3, r2
 800f922:	d115      	bne.n	800f950 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	681b      	ldr	r3, [r3, #0]
 800f928:	689a      	ldr	r2, [r3, #8]
 800f92a:	4b1a      	ldr	r3, [pc, #104]	@ (800f994 <HAL_TIM_PWM_Start+0x218>)
 800f92c:	4013      	ands	r3, r2
 800f92e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f930:	68fb      	ldr	r3, [r7, #12]
 800f932:	2b06      	cmp	r3, #6
 800f934:	d015      	beq.n	800f962 <HAL_TIM_PWM_Start+0x1e6>
 800f936:	68fb      	ldr	r3, [r7, #12]
 800f938:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f93c:	d011      	beq.n	800f962 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	681b      	ldr	r3, [r3, #0]
 800f942:	681a      	ldr	r2, [r3, #0]
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	681b      	ldr	r3, [r3, #0]
 800f948:	f042 0201 	orr.w	r2, r2, #1
 800f94c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f94e:	e008      	b.n	800f962 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	681b      	ldr	r3, [r3, #0]
 800f954:	681a      	ldr	r2, [r3, #0]
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	681b      	ldr	r3, [r3, #0]
 800f95a:	f042 0201 	orr.w	r2, r2, #1
 800f95e:	601a      	str	r2, [r3, #0]
 800f960:	e000      	b.n	800f964 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f962:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800f964:	2300      	movs	r3, #0
}
 800f966:	4618      	mov	r0, r3
 800f968:	3710      	adds	r7, #16
 800f96a:	46bd      	mov	sp, r7
 800f96c:	bd80      	pop	{r7, pc}
 800f96e:	bf00      	nop
 800f970:	40010000 	.word	0x40010000
 800f974:	40010400 	.word	0x40010400
 800f978:	40014000 	.word	0x40014000
 800f97c:	40014400 	.word	0x40014400
 800f980:	40014800 	.word	0x40014800
 800f984:	40000400 	.word	0x40000400
 800f988:	40000800 	.word	0x40000800
 800f98c:	40000c00 	.word	0x40000c00
 800f990:	40001800 	.word	0x40001800
 800f994:	00010007 	.word	0x00010007

0800f998 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800f998:	b580      	push	{r7, lr}
 800f99a:	b084      	sub	sp, #16
 800f99c:	af00      	add	r7, sp, #0
 800f99e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	681b      	ldr	r3, [r3, #0]
 800f9a4:	68db      	ldr	r3, [r3, #12]
 800f9a6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	681b      	ldr	r3, [r3, #0]
 800f9ac:	691b      	ldr	r3, [r3, #16]
 800f9ae:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800f9b0:	68bb      	ldr	r3, [r7, #8]
 800f9b2:	f003 0302 	and.w	r3, r3, #2
 800f9b6:	2b00      	cmp	r3, #0
 800f9b8:	d020      	beq.n	800f9fc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800f9ba:	68fb      	ldr	r3, [r7, #12]
 800f9bc:	f003 0302 	and.w	r3, r3, #2
 800f9c0:	2b00      	cmp	r3, #0
 800f9c2:	d01b      	beq.n	800f9fc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	681b      	ldr	r3, [r3, #0]
 800f9c8:	f06f 0202 	mvn.w	r2, #2
 800f9cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	2201      	movs	r2, #1
 800f9d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	681b      	ldr	r3, [r3, #0]
 800f9d8:	699b      	ldr	r3, [r3, #24]
 800f9da:	f003 0303 	and.w	r3, r3, #3
 800f9de:	2b00      	cmp	r3, #0
 800f9e0:	d003      	beq.n	800f9ea <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800f9e2:	6878      	ldr	r0, [r7, #4]
 800f9e4:	f000 fa08 	bl	800fdf8 <HAL_TIM_IC_CaptureCallback>
 800f9e8:	e005      	b.n	800f9f6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800f9ea:	6878      	ldr	r0, [r7, #4]
 800f9ec:	f000 f9fa 	bl	800fde4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f9f0:	6878      	ldr	r0, [r7, #4]
 800f9f2:	f000 fa0b 	bl	800fe0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	2200      	movs	r2, #0
 800f9fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800f9fc:	68bb      	ldr	r3, [r7, #8]
 800f9fe:	f003 0304 	and.w	r3, r3, #4
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	d020      	beq.n	800fa48 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800fa06:	68fb      	ldr	r3, [r7, #12]
 800fa08:	f003 0304 	and.w	r3, r3, #4
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	d01b      	beq.n	800fa48 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	681b      	ldr	r3, [r3, #0]
 800fa14:	f06f 0204 	mvn.w	r2, #4
 800fa18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	2202      	movs	r2, #2
 800fa1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	681b      	ldr	r3, [r3, #0]
 800fa24:	699b      	ldr	r3, [r3, #24]
 800fa26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800fa2a:	2b00      	cmp	r3, #0
 800fa2c:	d003      	beq.n	800fa36 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fa2e:	6878      	ldr	r0, [r7, #4]
 800fa30:	f000 f9e2 	bl	800fdf8 <HAL_TIM_IC_CaptureCallback>
 800fa34:	e005      	b.n	800fa42 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fa36:	6878      	ldr	r0, [r7, #4]
 800fa38:	f000 f9d4 	bl	800fde4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fa3c:	6878      	ldr	r0, [r7, #4]
 800fa3e:	f000 f9e5 	bl	800fe0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	2200      	movs	r2, #0
 800fa46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800fa48:	68bb      	ldr	r3, [r7, #8]
 800fa4a:	f003 0308 	and.w	r3, r3, #8
 800fa4e:	2b00      	cmp	r3, #0
 800fa50:	d020      	beq.n	800fa94 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800fa52:	68fb      	ldr	r3, [r7, #12]
 800fa54:	f003 0308 	and.w	r3, r3, #8
 800fa58:	2b00      	cmp	r3, #0
 800fa5a:	d01b      	beq.n	800fa94 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	681b      	ldr	r3, [r3, #0]
 800fa60:	f06f 0208 	mvn.w	r2, #8
 800fa64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	2204      	movs	r2, #4
 800fa6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	681b      	ldr	r3, [r3, #0]
 800fa70:	69db      	ldr	r3, [r3, #28]
 800fa72:	f003 0303 	and.w	r3, r3, #3
 800fa76:	2b00      	cmp	r3, #0
 800fa78:	d003      	beq.n	800fa82 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fa7a:	6878      	ldr	r0, [r7, #4]
 800fa7c:	f000 f9bc 	bl	800fdf8 <HAL_TIM_IC_CaptureCallback>
 800fa80:	e005      	b.n	800fa8e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fa82:	6878      	ldr	r0, [r7, #4]
 800fa84:	f000 f9ae 	bl	800fde4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fa88:	6878      	ldr	r0, [r7, #4]
 800fa8a:	f000 f9bf 	bl	800fe0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	2200      	movs	r2, #0
 800fa92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800fa94:	68bb      	ldr	r3, [r7, #8]
 800fa96:	f003 0310 	and.w	r3, r3, #16
 800fa9a:	2b00      	cmp	r3, #0
 800fa9c:	d020      	beq.n	800fae0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800fa9e:	68fb      	ldr	r3, [r7, #12]
 800faa0:	f003 0310 	and.w	r3, r3, #16
 800faa4:	2b00      	cmp	r3, #0
 800faa6:	d01b      	beq.n	800fae0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	681b      	ldr	r3, [r3, #0]
 800faac:	f06f 0210 	mvn.w	r2, #16
 800fab0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	2208      	movs	r2, #8
 800fab6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	681b      	ldr	r3, [r3, #0]
 800fabc:	69db      	ldr	r3, [r3, #28]
 800fabe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800fac2:	2b00      	cmp	r3, #0
 800fac4:	d003      	beq.n	800face <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fac6:	6878      	ldr	r0, [r7, #4]
 800fac8:	f000 f996 	bl	800fdf8 <HAL_TIM_IC_CaptureCallback>
 800facc:	e005      	b.n	800fada <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800face:	6878      	ldr	r0, [r7, #4]
 800fad0:	f000 f988 	bl	800fde4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fad4:	6878      	ldr	r0, [r7, #4]
 800fad6:	f000 f999 	bl	800fe0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	2200      	movs	r2, #0
 800fade:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800fae0:	68bb      	ldr	r3, [r7, #8]
 800fae2:	f003 0301 	and.w	r3, r3, #1
 800fae6:	2b00      	cmp	r3, #0
 800fae8:	d00c      	beq.n	800fb04 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800faea:	68fb      	ldr	r3, [r7, #12]
 800faec:	f003 0301 	and.w	r3, r3, #1
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	d007      	beq.n	800fb04 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	681b      	ldr	r3, [r3, #0]
 800faf8:	f06f 0201 	mvn.w	r2, #1
 800fafc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800fafe:	6878      	ldr	r0, [r7, #4]
 800fb00:	f000 f966 	bl	800fdd0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800fb04:	68bb      	ldr	r3, [r7, #8]
 800fb06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	d104      	bne.n	800fb18 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800fb0e:	68bb      	ldr	r3, [r7, #8]
 800fb10:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800fb14:	2b00      	cmp	r3, #0
 800fb16:	d00c      	beq.n	800fb32 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800fb18:	68fb      	ldr	r3, [r7, #12]
 800fb1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fb1e:	2b00      	cmp	r3, #0
 800fb20:	d007      	beq.n	800fb32 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	681b      	ldr	r3, [r3, #0]
 800fb26:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800fb2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800fb2c:	6878      	ldr	r0, [r7, #4]
 800fb2e:	f000 fe33 	bl	8010798 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800fb32:	68bb      	ldr	r3, [r7, #8]
 800fb34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800fb38:	2b00      	cmp	r3, #0
 800fb3a:	d00c      	beq.n	800fb56 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800fb3c:	68fb      	ldr	r3, [r7, #12]
 800fb3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fb42:	2b00      	cmp	r3, #0
 800fb44:	d007      	beq.n	800fb56 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	681b      	ldr	r3, [r3, #0]
 800fb4a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800fb4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800fb50:	6878      	ldr	r0, [r7, #4]
 800fb52:	f000 fe2b 	bl	80107ac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800fb56:	68bb      	ldr	r3, [r7, #8]
 800fb58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fb5c:	2b00      	cmp	r3, #0
 800fb5e:	d00c      	beq.n	800fb7a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800fb60:	68fb      	ldr	r3, [r7, #12]
 800fb62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fb66:	2b00      	cmp	r3, #0
 800fb68:	d007      	beq.n	800fb7a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	681b      	ldr	r3, [r3, #0]
 800fb6e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800fb72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800fb74:	6878      	ldr	r0, [r7, #4]
 800fb76:	f000 f953 	bl	800fe20 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800fb7a:	68bb      	ldr	r3, [r7, #8]
 800fb7c:	f003 0320 	and.w	r3, r3, #32
 800fb80:	2b00      	cmp	r3, #0
 800fb82:	d00c      	beq.n	800fb9e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800fb84:	68fb      	ldr	r3, [r7, #12]
 800fb86:	f003 0320 	and.w	r3, r3, #32
 800fb8a:	2b00      	cmp	r3, #0
 800fb8c:	d007      	beq.n	800fb9e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	681b      	ldr	r3, [r3, #0]
 800fb92:	f06f 0220 	mvn.w	r2, #32
 800fb96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800fb98:	6878      	ldr	r0, [r7, #4]
 800fb9a:	f000 fdf3 	bl	8010784 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800fb9e:	bf00      	nop
 800fba0:	3710      	adds	r7, #16
 800fba2:	46bd      	mov	sp, r7
 800fba4:	bd80      	pop	{r7, pc}
	...

0800fba8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800fba8:	b580      	push	{r7, lr}
 800fbaa:	b086      	sub	sp, #24
 800fbac:	af00      	add	r7, sp, #0
 800fbae:	60f8      	str	r0, [r7, #12]
 800fbb0:	60b9      	str	r1, [r7, #8]
 800fbb2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800fbb4:	2300      	movs	r3, #0
 800fbb6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800fbb8:	68fb      	ldr	r3, [r7, #12]
 800fbba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800fbbe:	2b01      	cmp	r3, #1
 800fbc0:	d101      	bne.n	800fbc6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800fbc2:	2302      	movs	r3, #2
 800fbc4:	e0ff      	b.n	800fdc6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800fbc6:	68fb      	ldr	r3, [r7, #12]
 800fbc8:	2201      	movs	r2, #1
 800fbca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	2b14      	cmp	r3, #20
 800fbd2:	f200 80f0 	bhi.w	800fdb6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800fbd6:	a201      	add	r2, pc, #4	@ (adr r2, 800fbdc <HAL_TIM_PWM_ConfigChannel+0x34>)
 800fbd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fbdc:	0800fc31 	.word	0x0800fc31
 800fbe0:	0800fdb7 	.word	0x0800fdb7
 800fbe4:	0800fdb7 	.word	0x0800fdb7
 800fbe8:	0800fdb7 	.word	0x0800fdb7
 800fbec:	0800fc71 	.word	0x0800fc71
 800fbf0:	0800fdb7 	.word	0x0800fdb7
 800fbf4:	0800fdb7 	.word	0x0800fdb7
 800fbf8:	0800fdb7 	.word	0x0800fdb7
 800fbfc:	0800fcb3 	.word	0x0800fcb3
 800fc00:	0800fdb7 	.word	0x0800fdb7
 800fc04:	0800fdb7 	.word	0x0800fdb7
 800fc08:	0800fdb7 	.word	0x0800fdb7
 800fc0c:	0800fcf3 	.word	0x0800fcf3
 800fc10:	0800fdb7 	.word	0x0800fdb7
 800fc14:	0800fdb7 	.word	0x0800fdb7
 800fc18:	0800fdb7 	.word	0x0800fdb7
 800fc1c:	0800fd35 	.word	0x0800fd35
 800fc20:	0800fdb7 	.word	0x0800fdb7
 800fc24:	0800fdb7 	.word	0x0800fdb7
 800fc28:	0800fdb7 	.word	0x0800fdb7
 800fc2c:	0800fd75 	.word	0x0800fd75
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800fc30:	68fb      	ldr	r3, [r7, #12]
 800fc32:	681b      	ldr	r3, [r3, #0]
 800fc34:	68b9      	ldr	r1, [r7, #8]
 800fc36:	4618      	mov	r0, r3
 800fc38:	f000 f99c 	bl	800ff74 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800fc3c:	68fb      	ldr	r3, [r7, #12]
 800fc3e:	681b      	ldr	r3, [r3, #0]
 800fc40:	699a      	ldr	r2, [r3, #24]
 800fc42:	68fb      	ldr	r3, [r7, #12]
 800fc44:	681b      	ldr	r3, [r3, #0]
 800fc46:	f042 0208 	orr.w	r2, r2, #8
 800fc4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800fc4c:	68fb      	ldr	r3, [r7, #12]
 800fc4e:	681b      	ldr	r3, [r3, #0]
 800fc50:	699a      	ldr	r2, [r3, #24]
 800fc52:	68fb      	ldr	r3, [r7, #12]
 800fc54:	681b      	ldr	r3, [r3, #0]
 800fc56:	f022 0204 	bic.w	r2, r2, #4
 800fc5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800fc5c:	68fb      	ldr	r3, [r7, #12]
 800fc5e:	681b      	ldr	r3, [r3, #0]
 800fc60:	6999      	ldr	r1, [r3, #24]
 800fc62:	68bb      	ldr	r3, [r7, #8]
 800fc64:	691a      	ldr	r2, [r3, #16]
 800fc66:	68fb      	ldr	r3, [r7, #12]
 800fc68:	681b      	ldr	r3, [r3, #0]
 800fc6a:	430a      	orrs	r2, r1
 800fc6c:	619a      	str	r2, [r3, #24]
      break;
 800fc6e:	e0a5      	b.n	800fdbc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800fc70:	68fb      	ldr	r3, [r7, #12]
 800fc72:	681b      	ldr	r3, [r3, #0]
 800fc74:	68b9      	ldr	r1, [r7, #8]
 800fc76:	4618      	mov	r0, r3
 800fc78:	f000 fa0c 	bl	8010094 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800fc7c:	68fb      	ldr	r3, [r7, #12]
 800fc7e:	681b      	ldr	r3, [r3, #0]
 800fc80:	699a      	ldr	r2, [r3, #24]
 800fc82:	68fb      	ldr	r3, [r7, #12]
 800fc84:	681b      	ldr	r3, [r3, #0]
 800fc86:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800fc8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800fc8c:	68fb      	ldr	r3, [r7, #12]
 800fc8e:	681b      	ldr	r3, [r3, #0]
 800fc90:	699a      	ldr	r2, [r3, #24]
 800fc92:	68fb      	ldr	r3, [r7, #12]
 800fc94:	681b      	ldr	r3, [r3, #0]
 800fc96:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800fc9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800fc9c:	68fb      	ldr	r3, [r7, #12]
 800fc9e:	681b      	ldr	r3, [r3, #0]
 800fca0:	6999      	ldr	r1, [r3, #24]
 800fca2:	68bb      	ldr	r3, [r7, #8]
 800fca4:	691b      	ldr	r3, [r3, #16]
 800fca6:	021a      	lsls	r2, r3, #8
 800fca8:	68fb      	ldr	r3, [r7, #12]
 800fcaa:	681b      	ldr	r3, [r3, #0]
 800fcac:	430a      	orrs	r2, r1
 800fcae:	619a      	str	r2, [r3, #24]
      break;
 800fcb0:	e084      	b.n	800fdbc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800fcb2:	68fb      	ldr	r3, [r7, #12]
 800fcb4:	681b      	ldr	r3, [r3, #0]
 800fcb6:	68b9      	ldr	r1, [r7, #8]
 800fcb8:	4618      	mov	r0, r3
 800fcba:	f000 fa75 	bl	80101a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800fcbe:	68fb      	ldr	r3, [r7, #12]
 800fcc0:	681b      	ldr	r3, [r3, #0]
 800fcc2:	69da      	ldr	r2, [r3, #28]
 800fcc4:	68fb      	ldr	r3, [r7, #12]
 800fcc6:	681b      	ldr	r3, [r3, #0]
 800fcc8:	f042 0208 	orr.w	r2, r2, #8
 800fccc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800fcce:	68fb      	ldr	r3, [r7, #12]
 800fcd0:	681b      	ldr	r3, [r3, #0]
 800fcd2:	69da      	ldr	r2, [r3, #28]
 800fcd4:	68fb      	ldr	r3, [r7, #12]
 800fcd6:	681b      	ldr	r3, [r3, #0]
 800fcd8:	f022 0204 	bic.w	r2, r2, #4
 800fcdc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800fcde:	68fb      	ldr	r3, [r7, #12]
 800fce0:	681b      	ldr	r3, [r3, #0]
 800fce2:	69d9      	ldr	r1, [r3, #28]
 800fce4:	68bb      	ldr	r3, [r7, #8]
 800fce6:	691a      	ldr	r2, [r3, #16]
 800fce8:	68fb      	ldr	r3, [r7, #12]
 800fcea:	681b      	ldr	r3, [r3, #0]
 800fcec:	430a      	orrs	r2, r1
 800fcee:	61da      	str	r2, [r3, #28]
      break;
 800fcf0:	e064      	b.n	800fdbc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800fcf2:	68fb      	ldr	r3, [r7, #12]
 800fcf4:	681b      	ldr	r3, [r3, #0]
 800fcf6:	68b9      	ldr	r1, [r7, #8]
 800fcf8:	4618      	mov	r0, r3
 800fcfa:	f000 fadd 	bl	80102b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800fcfe:	68fb      	ldr	r3, [r7, #12]
 800fd00:	681b      	ldr	r3, [r3, #0]
 800fd02:	69da      	ldr	r2, [r3, #28]
 800fd04:	68fb      	ldr	r3, [r7, #12]
 800fd06:	681b      	ldr	r3, [r3, #0]
 800fd08:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800fd0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800fd0e:	68fb      	ldr	r3, [r7, #12]
 800fd10:	681b      	ldr	r3, [r3, #0]
 800fd12:	69da      	ldr	r2, [r3, #28]
 800fd14:	68fb      	ldr	r3, [r7, #12]
 800fd16:	681b      	ldr	r3, [r3, #0]
 800fd18:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800fd1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800fd1e:	68fb      	ldr	r3, [r7, #12]
 800fd20:	681b      	ldr	r3, [r3, #0]
 800fd22:	69d9      	ldr	r1, [r3, #28]
 800fd24:	68bb      	ldr	r3, [r7, #8]
 800fd26:	691b      	ldr	r3, [r3, #16]
 800fd28:	021a      	lsls	r2, r3, #8
 800fd2a:	68fb      	ldr	r3, [r7, #12]
 800fd2c:	681b      	ldr	r3, [r3, #0]
 800fd2e:	430a      	orrs	r2, r1
 800fd30:	61da      	str	r2, [r3, #28]
      break;
 800fd32:	e043      	b.n	800fdbc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800fd34:	68fb      	ldr	r3, [r7, #12]
 800fd36:	681b      	ldr	r3, [r3, #0]
 800fd38:	68b9      	ldr	r1, [r7, #8]
 800fd3a:	4618      	mov	r0, r3
 800fd3c:	f000 fb26 	bl	801038c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800fd40:	68fb      	ldr	r3, [r7, #12]
 800fd42:	681b      	ldr	r3, [r3, #0]
 800fd44:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800fd46:	68fb      	ldr	r3, [r7, #12]
 800fd48:	681b      	ldr	r3, [r3, #0]
 800fd4a:	f042 0208 	orr.w	r2, r2, #8
 800fd4e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800fd50:	68fb      	ldr	r3, [r7, #12]
 800fd52:	681b      	ldr	r3, [r3, #0]
 800fd54:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800fd56:	68fb      	ldr	r3, [r7, #12]
 800fd58:	681b      	ldr	r3, [r3, #0]
 800fd5a:	f022 0204 	bic.w	r2, r2, #4
 800fd5e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800fd60:	68fb      	ldr	r3, [r7, #12]
 800fd62:	681b      	ldr	r3, [r3, #0]
 800fd64:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800fd66:	68bb      	ldr	r3, [r7, #8]
 800fd68:	691a      	ldr	r2, [r3, #16]
 800fd6a:	68fb      	ldr	r3, [r7, #12]
 800fd6c:	681b      	ldr	r3, [r3, #0]
 800fd6e:	430a      	orrs	r2, r1
 800fd70:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800fd72:	e023      	b.n	800fdbc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800fd74:	68fb      	ldr	r3, [r7, #12]
 800fd76:	681b      	ldr	r3, [r3, #0]
 800fd78:	68b9      	ldr	r1, [r7, #8]
 800fd7a:	4618      	mov	r0, r3
 800fd7c:	f000 fb6a 	bl	8010454 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800fd80:	68fb      	ldr	r3, [r7, #12]
 800fd82:	681b      	ldr	r3, [r3, #0]
 800fd84:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800fd86:	68fb      	ldr	r3, [r7, #12]
 800fd88:	681b      	ldr	r3, [r3, #0]
 800fd8a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800fd8e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800fd90:	68fb      	ldr	r3, [r7, #12]
 800fd92:	681b      	ldr	r3, [r3, #0]
 800fd94:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800fd96:	68fb      	ldr	r3, [r7, #12]
 800fd98:	681b      	ldr	r3, [r3, #0]
 800fd9a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800fd9e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800fda0:	68fb      	ldr	r3, [r7, #12]
 800fda2:	681b      	ldr	r3, [r3, #0]
 800fda4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800fda6:	68bb      	ldr	r3, [r7, #8]
 800fda8:	691b      	ldr	r3, [r3, #16]
 800fdaa:	021a      	lsls	r2, r3, #8
 800fdac:	68fb      	ldr	r3, [r7, #12]
 800fdae:	681b      	ldr	r3, [r3, #0]
 800fdb0:	430a      	orrs	r2, r1
 800fdb2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800fdb4:	e002      	b.n	800fdbc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800fdb6:	2301      	movs	r3, #1
 800fdb8:	75fb      	strb	r3, [r7, #23]
      break;
 800fdba:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800fdbc:	68fb      	ldr	r3, [r7, #12]
 800fdbe:	2200      	movs	r2, #0
 800fdc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800fdc4:	7dfb      	ldrb	r3, [r7, #23]
}
 800fdc6:	4618      	mov	r0, r3
 800fdc8:	3718      	adds	r7, #24
 800fdca:	46bd      	mov	sp, r7
 800fdcc:	bd80      	pop	{r7, pc}
 800fdce:	bf00      	nop

0800fdd0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800fdd0:	b480      	push	{r7}
 800fdd2:	b083      	sub	sp, #12
 800fdd4:	af00      	add	r7, sp, #0
 800fdd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800fdd8:	bf00      	nop
 800fdda:	370c      	adds	r7, #12
 800fddc:	46bd      	mov	sp, r7
 800fdde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fde2:	4770      	bx	lr

0800fde4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800fde4:	b480      	push	{r7}
 800fde6:	b083      	sub	sp, #12
 800fde8:	af00      	add	r7, sp, #0
 800fdea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800fdec:	bf00      	nop
 800fdee:	370c      	adds	r7, #12
 800fdf0:	46bd      	mov	sp, r7
 800fdf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdf6:	4770      	bx	lr

0800fdf8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800fdf8:	b480      	push	{r7}
 800fdfa:	b083      	sub	sp, #12
 800fdfc:	af00      	add	r7, sp, #0
 800fdfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800fe00:	bf00      	nop
 800fe02:	370c      	adds	r7, #12
 800fe04:	46bd      	mov	sp, r7
 800fe06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe0a:	4770      	bx	lr

0800fe0c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800fe0c:	b480      	push	{r7}
 800fe0e:	b083      	sub	sp, #12
 800fe10:	af00      	add	r7, sp, #0
 800fe12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800fe14:	bf00      	nop
 800fe16:	370c      	adds	r7, #12
 800fe18:	46bd      	mov	sp, r7
 800fe1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe1e:	4770      	bx	lr

0800fe20 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800fe20:	b480      	push	{r7}
 800fe22:	b083      	sub	sp, #12
 800fe24:	af00      	add	r7, sp, #0
 800fe26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800fe28:	bf00      	nop
 800fe2a:	370c      	adds	r7, #12
 800fe2c:	46bd      	mov	sp, r7
 800fe2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe32:	4770      	bx	lr

0800fe34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800fe34:	b480      	push	{r7}
 800fe36:	b085      	sub	sp, #20
 800fe38:	af00      	add	r7, sp, #0
 800fe3a:	6078      	str	r0, [r7, #4]
 800fe3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	681b      	ldr	r3, [r3, #0]
 800fe42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	4a43      	ldr	r2, [pc, #268]	@ (800ff54 <TIM_Base_SetConfig+0x120>)
 800fe48:	4293      	cmp	r3, r2
 800fe4a:	d013      	beq.n	800fe74 <TIM_Base_SetConfig+0x40>
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fe52:	d00f      	beq.n	800fe74 <TIM_Base_SetConfig+0x40>
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	4a40      	ldr	r2, [pc, #256]	@ (800ff58 <TIM_Base_SetConfig+0x124>)
 800fe58:	4293      	cmp	r3, r2
 800fe5a:	d00b      	beq.n	800fe74 <TIM_Base_SetConfig+0x40>
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	4a3f      	ldr	r2, [pc, #252]	@ (800ff5c <TIM_Base_SetConfig+0x128>)
 800fe60:	4293      	cmp	r3, r2
 800fe62:	d007      	beq.n	800fe74 <TIM_Base_SetConfig+0x40>
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	4a3e      	ldr	r2, [pc, #248]	@ (800ff60 <TIM_Base_SetConfig+0x12c>)
 800fe68:	4293      	cmp	r3, r2
 800fe6a:	d003      	beq.n	800fe74 <TIM_Base_SetConfig+0x40>
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	4a3d      	ldr	r2, [pc, #244]	@ (800ff64 <TIM_Base_SetConfig+0x130>)
 800fe70:	4293      	cmp	r3, r2
 800fe72:	d108      	bne.n	800fe86 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800fe74:	68fb      	ldr	r3, [r7, #12]
 800fe76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fe7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800fe7c:	683b      	ldr	r3, [r7, #0]
 800fe7e:	685b      	ldr	r3, [r3, #4]
 800fe80:	68fa      	ldr	r2, [r7, #12]
 800fe82:	4313      	orrs	r3, r2
 800fe84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	4a32      	ldr	r2, [pc, #200]	@ (800ff54 <TIM_Base_SetConfig+0x120>)
 800fe8a:	4293      	cmp	r3, r2
 800fe8c:	d01f      	beq.n	800fece <TIM_Base_SetConfig+0x9a>
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fe94:	d01b      	beq.n	800fece <TIM_Base_SetConfig+0x9a>
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	4a2f      	ldr	r2, [pc, #188]	@ (800ff58 <TIM_Base_SetConfig+0x124>)
 800fe9a:	4293      	cmp	r3, r2
 800fe9c:	d017      	beq.n	800fece <TIM_Base_SetConfig+0x9a>
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	4a2e      	ldr	r2, [pc, #184]	@ (800ff5c <TIM_Base_SetConfig+0x128>)
 800fea2:	4293      	cmp	r3, r2
 800fea4:	d013      	beq.n	800fece <TIM_Base_SetConfig+0x9a>
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	4a2d      	ldr	r2, [pc, #180]	@ (800ff60 <TIM_Base_SetConfig+0x12c>)
 800feaa:	4293      	cmp	r3, r2
 800feac:	d00f      	beq.n	800fece <TIM_Base_SetConfig+0x9a>
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	4a2c      	ldr	r2, [pc, #176]	@ (800ff64 <TIM_Base_SetConfig+0x130>)
 800feb2:	4293      	cmp	r3, r2
 800feb4:	d00b      	beq.n	800fece <TIM_Base_SetConfig+0x9a>
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	4a2b      	ldr	r2, [pc, #172]	@ (800ff68 <TIM_Base_SetConfig+0x134>)
 800feba:	4293      	cmp	r3, r2
 800febc:	d007      	beq.n	800fece <TIM_Base_SetConfig+0x9a>
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	4a2a      	ldr	r2, [pc, #168]	@ (800ff6c <TIM_Base_SetConfig+0x138>)
 800fec2:	4293      	cmp	r3, r2
 800fec4:	d003      	beq.n	800fece <TIM_Base_SetConfig+0x9a>
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	4a29      	ldr	r2, [pc, #164]	@ (800ff70 <TIM_Base_SetConfig+0x13c>)
 800feca:	4293      	cmp	r3, r2
 800fecc:	d108      	bne.n	800fee0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800fece:	68fb      	ldr	r3, [r7, #12]
 800fed0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800fed4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800fed6:	683b      	ldr	r3, [r7, #0]
 800fed8:	68db      	ldr	r3, [r3, #12]
 800feda:	68fa      	ldr	r2, [r7, #12]
 800fedc:	4313      	orrs	r3, r2
 800fede:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800fee0:	68fb      	ldr	r3, [r7, #12]
 800fee2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800fee6:	683b      	ldr	r3, [r7, #0]
 800fee8:	695b      	ldr	r3, [r3, #20]
 800feea:	4313      	orrs	r3, r2
 800feec:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800feee:	683b      	ldr	r3, [r7, #0]
 800fef0:	689a      	ldr	r2, [r3, #8]
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800fef6:	683b      	ldr	r3, [r7, #0]
 800fef8:	681a      	ldr	r2, [r3, #0]
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	4a14      	ldr	r2, [pc, #80]	@ (800ff54 <TIM_Base_SetConfig+0x120>)
 800ff02:	4293      	cmp	r3, r2
 800ff04:	d00f      	beq.n	800ff26 <TIM_Base_SetConfig+0xf2>
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	4a16      	ldr	r2, [pc, #88]	@ (800ff64 <TIM_Base_SetConfig+0x130>)
 800ff0a:	4293      	cmp	r3, r2
 800ff0c:	d00b      	beq.n	800ff26 <TIM_Base_SetConfig+0xf2>
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	4a15      	ldr	r2, [pc, #84]	@ (800ff68 <TIM_Base_SetConfig+0x134>)
 800ff12:	4293      	cmp	r3, r2
 800ff14:	d007      	beq.n	800ff26 <TIM_Base_SetConfig+0xf2>
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	4a14      	ldr	r2, [pc, #80]	@ (800ff6c <TIM_Base_SetConfig+0x138>)
 800ff1a:	4293      	cmp	r3, r2
 800ff1c:	d003      	beq.n	800ff26 <TIM_Base_SetConfig+0xf2>
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	4a13      	ldr	r2, [pc, #76]	@ (800ff70 <TIM_Base_SetConfig+0x13c>)
 800ff22:	4293      	cmp	r3, r2
 800ff24:	d103      	bne.n	800ff2e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ff26:	683b      	ldr	r3, [r7, #0]
 800ff28:	691a      	ldr	r2, [r3, #16]
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	681b      	ldr	r3, [r3, #0]
 800ff32:	f043 0204 	orr.w	r2, r3, #4
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	2201      	movs	r2, #1
 800ff3e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	68fa      	ldr	r2, [r7, #12]
 800ff44:	601a      	str	r2, [r3, #0]
}
 800ff46:	bf00      	nop
 800ff48:	3714      	adds	r7, #20
 800ff4a:	46bd      	mov	sp, r7
 800ff4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff50:	4770      	bx	lr
 800ff52:	bf00      	nop
 800ff54:	40010000 	.word	0x40010000
 800ff58:	40000400 	.word	0x40000400
 800ff5c:	40000800 	.word	0x40000800
 800ff60:	40000c00 	.word	0x40000c00
 800ff64:	40010400 	.word	0x40010400
 800ff68:	40014000 	.word	0x40014000
 800ff6c:	40014400 	.word	0x40014400
 800ff70:	40014800 	.word	0x40014800

0800ff74 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ff74:	b480      	push	{r7}
 800ff76:	b087      	sub	sp, #28
 800ff78:	af00      	add	r7, sp, #0
 800ff7a:	6078      	str	r0, [r7, #4]
 800ff7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	6a1b      	ldr	r3, [r3, #32]
 800ff82:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	6a1b      	ldr	r3, [r3, #32]
 800ff88:	f023 0201 	bic.w	r2, r3, #1
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	685b      	ldr	r3, [r3, #4]
 800ff94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	699b      	ldr	r3, [r3, #24]
 800ff9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ff9c:	68fa      	ldr	r2, [r7, #12]
 800ff9e:	4b37      	ldr	r3, [pc, #220]	@ (801007c <TIM_OC1_SetConfig+0x108>)
 800ffa0:	4013      	ands	r3, r2
 800ffa2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ffa4:	68fb      	ldr	r3, [r7, #12]
 800ffa6:	f023 0303 	bic.w	r3, r3, #3
 800ffaa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ffac:	683b      	ldr	r3, [r7, #0]
 800ffae:	681b      	ldr	r3, [r3, #0]
 800ffb0:	68fa      	ldr	r2, [r7, #12]
 800ffb2:	4313      	orrs	r3, r2
 800ffb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ffb6:	697b      	ldr	r3, [r7, #20]
 800ffb8:	f023 0302 	bic.w	r3, r3, #2
 800ffbc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ffbe:	683b      	ldr	r3, [r7, #0]
 800ffc0:	689b      	ldr	r3, [r3, #8]
 800ffc2:	697a      	ldr	r2, [r7, #20]
 800ffc4:	4313      	orrs	r3, r2
 800ffc6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	4a2d      	ldr	r2, [pc, #180]	@ (8010080 <TIM_OC1_SetConfig+0x10c>)
 800ffcc:	4293      	cmp	r3, r2
 800ffce:	d00f      	beq.n	800fff0 <TIM_OC1_SetConfig+0x7c>
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	4a2c      	ldr	r2, [pc, #176]	@ (8010084 <TIM_OC1_SetConfig+0x110>)
 800ffd4:	4293      	cmp	r3, r2
 800ffd6:	d00b      	beq.n	800fff0 <TIM_OC1_SetConfig+0x7c>
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	4a2b      	ldr	r2, [pc, #172]	@ (8010088 <TIM_OC1_SetConfig+0x114>)
 800ffdc:	4293      	cmp	r3, r2
 800ffde:	d007      	beq.n	800fff0 <TIM_OC1_SetConfig+0x7c>
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	4a2a      	ldr	r2, [pc, #168]	@ (801008c <TIM_OC1_SetConfig+0x118>)
 800ffe4:	4293      	cmp	r3, r2
 800ffe6:	d003      	beq.n	800fff0 <TIM_OC1_SetConfig+0x7c>
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	4a29      	ldr	r2, [pc, #164]	@ (8010090 <TIM_OC1_SetConfig+0x11c>)
 800ffec:	4293      	cmp	r3, r2
 800ffee:	d10c      	bne.n	801000a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800fff0:	697b      	ldr	r3, [r7, #20]
 800fff2:	f023 0308 	bic.w	r3, r3, #8
 800fff6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800fff8:	683b      	ldr	r3, [r7, #0]
 800fffa:	68db      	ldr	r3, [r3, #12]
 800fffc:	697a      	ldr	r2, [r7, #20]
 800fffe:	4313      	orrs	r3, r2
 8010000:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8010002:	697b      	ldr	r3, [r7, #20]
 8010004:	f023 0304 	bic.w	r3, r3, #4
 8010008:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	4a1c      	ldr	r2, [pc, #112]	@ (8010080 <TIM_OC1_SetConfig+0x10c>)
 801000e:	4293      	cmp	r3, r2
 8010010:	d00f      	beq.n	8010032 <TIM_OC1_SetConfig+0xbe>
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	4a1b      	ldr	r2, [pc, #108]	@ (8010084 <TIM_OC1_SetConfig+0x110>)
 8010016:	4293      	cmp	r3, r2
 8010018:	d00b      	beq.n	8010032 <TIM_OC1_SetConfig+0xbe>
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	4a1a      	ldr	r2, [pc, #104]	@ (8010088 <TIM_OC1_SetConfig+0x114>)
 801001e:	4293      	cmp	r3, r2
 8010020:	d007      	beq.n	8010032 <TIM_OC1_SetConfig+0xbe>
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	4a19      	ldr	r2, [pc, #100]	@ (801008c <TIM_OC1_SetConfig+0x118>)
 8010026:	4293      	cmp	r3, r2
 8010028:	d003      	beq.n	8010032 <TIM_OC1_SetConfig+0xbe>
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	4a18      	ldr	r2, [pc, #96]	@ (8010090 <TIM_OC1_SetConfig+0x11c>)
 801002e:	4293      	cmp	r3, r2
 8010030:	d111      	bne.n	8010056 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8010032:	693b      	ldr	r3, [r7, #16]
 8010034:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8010038:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801003a:	693b      	ldr	r3, [r7, #16]
 801003c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8010040:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8010042:	683b      	ldr	r3, [r7, #0]
 8010044:	695b      	ldr	r3, [r3, #20]
 8010046:	693a      	ldr	r2, [r7, #16]
 8010048:	4313      	orrs	r3, r2
 801004a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 801004c:	683b      	ldr	r3, [r7, #0]
 801004e:	699b      	ldr	r3, [r3, #24]
 8010050:	693a      	ldr	r2, [r7, #16]
 8010052:	4313      	orrs	r3, r2
 8010054:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	693a      	ldr	r2, [r7, #16]
 801005a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	68fa      	ldr	r2, [r7, #12]
 8010060:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8010062:	683b      	ldr	r3, [r7, #0]
 8010064:	685a      	ldr	r2, [r3, #4]
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	697a      	ldr	r2, [r7, #20]
 801006e:	621a      	str	r2, [r3, #32]
}
 8010070:	bf00      	nop
 8010072:	371c      	adds	r7, #28
 8010074:	46bd      	mov	sp, r7
 8010076:	f85d 7b04 	ldr.w	r7, [sp], #4
 801007a:	4770      	bx	lr
 801007c:	fffeff8f 	.word	0xfffeff8f
 8010080:	40010000 	.word	0x40010000
 8010084:	40010400 	.word	0x40010400
 8010088:	40014000 	.word	0x40014000
 801008c:	40014400 	.word	0x40014400
 8010090:	40014800 	.word	0x40014800

08010094 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010094:	b480      	push	{r7}
 8010096:	b087      	sub	sp, #28
 8010098:	af00      	add	r7, sp, #0
 801009a:	6078      	str	r0, [r7, #4]
 801009c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	6a1b      	ldr	r3, [r3, #32]
 80100a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	6a1b      	ldr	r3, [r3, #32]
 80100a8:	f023 0210 	bic.w	r2, r3, #16
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	685b      	ldr	r3, [r3, #4]
 80100b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	699b      	ldr	r3, [r3, #24]
 80100ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80100bc:	68fa      	ldr	r2, [r7, #12]
 80100be:	4b34      	ldr	r3, [pc, #208]	@ (8010190 <TIM_OC2_SetConfig+0xfc>)
 80100c0:	4013      	ands	r3, r2
 80100c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80100c4:	68fb      	ldr	r3, [r7, #12]
 80100c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80100ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80100cc:	683b      	ldr	r3, [r7, #0]
 80100ce:	681b      	ldr	r3, [r3, #0]
 80100d0:	021b      	lsls	r3, r3, #8
 80100d2:	68fa      	ldr	r2, [r7, #12]
 80100d4:	4313      	orrs	r3, r2
 80100d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80100d8:	697b      	ldr	r3, [r7, #20]
 80100da:	f023 0320 	bic.w	r3, r3, #32
 80100de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80100e0:	683b      	ldr	r3, [r7, #0]
 80100e2:	689b      	ldr	r3, [r3, #8]
 80100e4:	011b      	lsls	r3, r3, #4
 80100e6:	697a      	ldr	r2, [r7, #20]
 80100e8:	4313      	orrs	r3, r2
 80100ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	4a29      	ldr	r2, [pc, #164]	@ (8010194 <TIM_OC2_SetConfig+0x100>)
 80100f0:	4293      	cmp	r3, r2
 80100f2:	d003      	beq.n	80100fc <TIM_OC2_SetConfig+0x68>
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	4a28      	ldr	r2, [pc, #160]	@ (8010198 <TIM_OC2_SetConfig+0x104>)
 80100f8:	4293      	cmp	r3, r2
 80100fa:	d10d      	bne.n	8010118 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80100fc:	697b      	ldr	r3, [r7, #20]
 80100fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010102:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8010104:	683b      	ldr	r3, [r7, #0]
 8010106:	68db      	ldr	r3, [r3, #12]
 8010108:	011b      	lsls	r3, r3, #4
 801010a:	697a      	ldr	r2, [r7, #20]
 801010c:	4313      	orrs	r3, r2
 801010e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8010110:	697b      	ldr	r3, [r7, #20]
 8010112:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010116:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	4a1e      	ldr	r2, [pc, #120]	@ (8010194 <TIM_OC2_SetConfig+0x100>)
 801011c:	4293      	cmp	r3, r2
 801011e:	d00f      	beq.n	8010140 <TIM_OC2_SetConfig+0xac>
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	4a1d      	ldr	r2, [pc, #116]	@ (8010198 <TIM_OC2_SetConfig+0x104>)
 8010124:	4293      	cmp	r3, r2
 8010126:	d00b      	beq.n	8010140 <TIM_OC2_SetConfig+0xac>
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	4a1c      	ldr	r2, [pc, #112]	@ (801019c <TIM_OC2_SetConfig+0x108>)
 801012c:	4293      	cmp	r3, r2
 801012e:	d007      	beq.n	8010140 <TIM_OC2_SetConfig+0xac>
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	4a1b      	ldr	r2, [pc, #108]	@ (80101a0 <TIM_OC2_SetConfig+0x10c>)
 8010134:	4293      	cmp	r3, r2
 8010136:	d003      	beq.n	8010140 <TIM_OC2_SetConfig+0xac>
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	4a1a      	ldr	r2, [pc, #104]	@ (80101a4 <TIM_OC2_SetConfig+0x110>)
 801013c:	4293      	cmp	r3, r2
 801013e:	d113      	bne.n	8010168 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8010140:	693b      	ldr	r3, [r7, #16]
 8010142:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8010146:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8010148:	693b      	ldr	r3, [r7, #16]
 801014a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 801014e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8010150:	683b      	ldr	r3, [r7, #0]
 8010152:	695b      	ldr	r3, [r3, #20]
 8010154:	009b      	lsls	r3, r3, #2
 8010156:	693a      	ldr	r2, [r7, #16]
 8010158:	4313      	orrs	r3, r2
 801015a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 801015c:	683b      	ldr	r3, [r7, #0]
 801015e:	699b      	ldr	r3, [r3, #24]
 8010160:	009b      	lsls	r3, r3, #2
 8010162:	693a      	ldr	r2, [r7, #16]
 8010164:	4313      	orrs	r3, r2
 8010166:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	693a      	ldr	r2, [r7, #16]
 801016c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	68fa      	ldr	r2, [r7, #12]
 8010172:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8010174:	683b      	ldr	r3, [r7, #0]
 8010176:	685a      	ldr	r2, [r3, #4]
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	697a      	ldr	r2, [r7, #20]
 8010180:	621a      	str	r2, [r3, #32]
}
 8010182:	bf00      	nop
 8010184:	371c      	adds	r7, #28
 8010186:	46bd      	mov	sp, r7
 8010188:	f85d 7b04 	ldr.w	r7, [sp], #4
 801018c:	4770      	bx	lr
 801018e:	bf00      	nop
 8010190:	feff8fff 	.word	0xfeff8fff
 8010194:	40010000 	.word	0x40010000
 8010198:	40010400 	.word	0x40010400
 801019c:	40014000 	.word	0x40014000
 80101a0:	40014400 	.word	0x40014400
 80101a4:	40014800 	.word	0x40014800

080101a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80101a8:	b480      	push	{r7}
 80101aa:	b087      	sub	sp, #28
 80101ac:	af00      	add	r7, sp, #0
 80101ae:	6078      	str	r0, [r7, #4]
 80101b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	6a1b      	ldr	r3, [r3, #32]
 80101b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	6a1b      	ldr	r3, [r3, #32]
 80101bc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	685b      	ldr	r3, [r3, #4]
 80101c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	69db      	ldr	r3, [r3, #28]
 80101ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80101d0:	68fa      	ldr	r2, [r7, #12]
 80101d2:	4b33      	ldr	r3, [pc, #204]	@ (80102a0 <TIM_OC3_SetConfig+0xf8>)
 80101d4:	4013      	ands	r3, r2
 80101d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80101d8:	68fb      	ldr	r3, [r7, #12]
 80101da:	f023 0303 	bic.w	r3, r3, #3
 80101de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80101e0:	683b      	ldr	r3, [r7, #0]
 80101e2:	681b      	ldr	r3, [r3, #0]
 80101e4:	68fa      	ldr	r2, [r7, #12]
 80101e6:	4313      	orrs	r3, r2
 80101e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80101ea:	697b      	ldr	r3, [r7, #20]
 80101ec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80101f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80101f2:	683b      	ldr	r3, [r7, #0]
 80101f4:	689b      	ldr	r3, [r3, #8]
 80101f6:	021b      	lsls	r3, r3, #8
 80101f8:	697a      	ldr	r2, [r7, #20]
 80101fa:	4313      	orrs	r3, r2
 80101fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	4a28      	ldr	r2, [pc, #160]	@ (80102a4 <TIM_OC3_SetConfig+0xfc>)
 8010202:	4293      	cmp	r3, r2
 8010204:	d003      	beq.n	801020e <TIM_OC3_SetConfig+0x66>
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	4a27      	ldr	r2, [pc, #156]	@ (80102a8 <TIM_OC3_SetConfig+0x100>)
 801020a:	4293      	cmp	r3, r2
 801020c:	d10d      	bne.n	801022a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801020e:	697b      	ldr	r3, [r7, #20]
 8010210:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8010214:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8010216:	683b      	ldr	r3, [r7, #0]
 8010218:	68db      	ldr	r3, [r3, #12]
 801021a:	021b      	lsls	r3, r3, #8
 801021c:	697a      	ldr	r2, [r7, #20]
 801021e:	4313      	orrs	r3, r2
 8010220:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8010222:	697b      	ldr	r3, [r7, #20]
 8010224:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8010228:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	4a1d      	ldr	r2, [pc, #116]	@ (80102a4 <TIM_OC3_SetConfig+0xfc>)
 801022e:	4293      	cmp	r3, r2
 8010230:	d00f      	beq.n	8010252 <TIM_OC3_SetConfig+0xaa>
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	4a1c      	ldr	r2, [pc, #112]	@ (80102a8 <TIM_OC3_SetConfig+0x100>)
 8010236:	4293      	cmp	r3, r2
 8010238:	d00b      	beq.n	8010252 <TIM_OC3_SetConfig+0xaa>
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	4a1b      	ldr	r2, [pc, #108]	@ (80102ac <TIM_OC3_SetConfig+0x104>)
 801023e:	4293      	cmp	r3, r2
 8010240:	d007      	beq.n	8010252 <TIM_OC3_SetConfig+0xaa>
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	4a1a      	ldr	r2, [pc, #104]	@ (80102b0 <TIM_OC3_SetConfig+0x108>)
 8010246:	4293      	cmp	r3, r2
 8010248:	d003      	beq.n	8010252 <TIM_OC3_SetConfig+0xaa>
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	4a19      	ldr	r2, [pc, #100]	@ (80102b4 <TIM_OC3_SetConfig+0x10c>)
 801024e:	4293      	cmp	r3, r2
 8010250:	d113      	bne.n	801027a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8010252:	693b      	ldr	r3, [r7, #16]
 8010254:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8010258:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801025a:	693b      	ldr	r3, [r7, #16]
 801025c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8010260:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8010262:	683b      	ldr	r3, [r7, #0]
 8010264:	695b      	ldr	r3, [r3, #20]
 8010266:	011b      	lsls	r3, r3, #4
 8010268:	693a      	ldr	r2, [r7, #16]
 801026a:	4313      	orrs	r3, r2
 801026c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801026e:	683b      	ldr	r3, [r7, #0]
 8010270:	699b      	ldr	r3, [r3, #24]
 8010272:	011b      	lsls	r3, r3, #4
 8010274:	693a      	ldr	r2, [r7, #16]
 8010276:	4313      	orrs	r3, r2
 8010278:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	693a      	ldr	r2, [r7, #16]
 801027e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	68fa      	ldr	r2, [r7, #12]
 8010284:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8010286:	683b      	ldr	r3, [r7, #0]
 8010288:	685a      	ldr	r2, [r3, #4]
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	697a      	ldr	r2, [r7, #20]
 8010292:	621a      	str	r2, [r3, #32]
}
 8010294:	bf00      	nop
 8010296:	371c      	adds	r7, #28
 8010298:	46bd      	mov	sp, r7
 801029a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801029e:	4770      	bx	lr
 80102a0:	fffeff8f 	.word	0xfffeff8f
 80102a4:	40010000 	.word	0x40010000
 80102a8:	40010400 	.word	0x40010400
 80102ac:	40014000 	.word	0x40014000
 80102b0:	40014400 	.word	0x40014400
 80102b4:	40014800 	.word	0x40014800

080102b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80102b8:	b480      	push	{r7}
 80102ba:	b087      	sub	sp, #28
 80102bc:	af00      	add	r7, sp, #0
 80102be:	6078      	str	r0, [r7, #4]
 80102c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	6a1b      	ldr	r3, [r3, #32]
 80102c6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	6a1b      	ldr	r3, [r3, #32]
 80102cc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	685b      	ldr	r3, [r3, #4]
 80102d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	69db      	ldr	r3, [r3, #28]
 80102de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80102e0:	68fa      	ldr	r2, [r7, #12]
 80102e2:	4b24      	ldr	r3, [pc, #144]	@ (8010374 <TIM_OC4_SetConfig+0xbc>)
 80102e4:	4013      	ands	r3, r2
 80102e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80102e8:	68fb      	ldr	r3, [r7, #12]
 80102ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80102ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80102f0:	683b      	ldr	r3, [r7, #0]
 80102f2:	681b      	ldr	r3, [r3, #0]
 80102f4:	021b      	lsls	r3, r3, #8
 80102f6:	68fa      	ldr	r2, [r7, #12]
 80102f8:	4313      	orrs	r3, r2
 80102fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80102fc:	693b      	ldr	r3, [r7, #16]
 80102fe:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8010302:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8010304:	683b      	ldr	r3, [r7, #0]
 8010306:	689b      	ldr	r3, [r3, #8]
 8010308:	031b      	lsls	r3, r3, #12
 801030a:	693a      	ldr	r2, [r7, #16]
 801030c:	4313      	orrs	r3, r2
 801030e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	4a19      	ldr	r2, [pc, #100]	@ (8010378 <TIM_OC4_SetConfig+0xc0>)
 8010314:	4293      	cmp	r3, r2
 8010316:	d00f      	beq.n	8010338 <TIM_OC4_SetConfig+0x80>
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	4a18      	ldr	r2, [pc, #96]	@ (801037c <TIM_OC4_SetConfig+0xc4>)
 801031c:	4293      	cmp	r3, r2
 801031e:	d00b      	beq.n	8010338 <TIM_OC4_SetConfig+0x80>
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	4a17      	ldr	r2, [pc, #92]	@ (8010380 <TIM_OC4_SetConfig+0xc8>)
 8010324:	4293      	cmp	r3, r2
 8010326:	d007      	beq.n	8010338 <TIM_OC4_SetConfig+0x80>
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	4a16      	ldr	r2, [pc, #88]	@ (8010384 <TIM_OC4_SetConfig+0xcc>)
 801032c:	4293      	cmp	r3, r2
 801032e:	d003      	beq.n	8010338 <TIM_OC4_SetConfig+0x80>
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	4a15      	ldr	r2, [pc, #84]	@ (8010388 <TIM_OC4_SetConfig+0xd0>)
 8010334:	4293      	cmp	r3, r2
 8010336:	d109      	bne.n	801034c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8010338:	697b      	ldr	r3, [r7, #20]
 801033a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 801033e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8010340:	683b      	ldr	r3, [r7, #0]
 8010342:	695b      	ldr	r3, [r3, #20]
 8010344:	019b      	lsls	r3, r3, #6
 8010346:	697a      	ldr	r2, [r7, #20]
 8010348:	4313      	orrs	r3, r2
 801034a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	697a      	ldr	r2, [r7, #20]
 8010350:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	68fa      	ldr	r2, [r7, #12]
 8010356:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8010358:	683b      	ldr	r3, [r7, #0]
 801035a:	685a      	ldr	r2, [r3, #4]
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	693a      	ldr	r2, [r7, #16]
 8010364:	621a      	str	r2, [r3, #32]
}
 8010366:	bf00      	nop
 8010368:	371c      	adds	r7, #28
 801036a:	46bd      	mov	sp, r7
 801036c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010370:	4770      	bx	lr
 8010372:	bf00      	nop
 8010374:	feff8fff 	.word	0xfeff8fff
 8010378:	40010000 	.word	0x40010000
 801037c:	40010400 	.word	0x40010400
 8010380:	40014000 	.word	0x40014000
 8010384:	40014400 	.word	0x40014400
 8010388:	40014800 	.word	0x40014800

0801038c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 801038c:	b480      	push	{r7}
 801038e:	b087      	sub	sp, #28
 8010390:	af00      	add	r7, sp, #0
 8010392:	6078      	str	r0, [r7, #4]
 8010394:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	6a1b      	ldr	r3, [r3, #32]
 801039a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	6a1b      	ldr	r3, [r3, #32]
 80103a0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	685b      	ldr	r3, [r3, #4]
 80103ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80103b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80103b4:	68fa      	ldr	r2, [r7, #12]
 80103b6:	4b21      	ldr	r3, [pc, #132]	@ (801043c <TIM_OC5_SetConfig+0xb0>)
 80103b8:	4013      	ands	r3, r2
 80103ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80103bc:	683b      	ldr	r3, [r7, #0]
 80103be:	681b      	ldr	r3, [r3, #0]
 80103c0:	68fa      	ldr	r2, [r7, #12]
 80103c2:	4313      	orrs	r3, r2
 80103c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80103c6:	693b      	ldr	r3, [r7, #16]
 80103c8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80103cc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80103ce:	683b      	ldr	r3, [r7, #0]
 80103d0:	689b      	ldr	r3, [r3, #8]
 80103d2:	041b      	lsls	r3, r3, #16
 80103d4:	693a      	ldr	r2, [r7, #16]
 80103d6:	4313      	orrs	r3, r2
 80103d8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	4a18      	ldr	r2, [pc, #96]	@ (8010440 <TIM_OC5_SetConfig+0xb4>)
 80103de:	4293      	cmp	r3, r2
 80103e0:	d00f      	beq.n	8010402 <TIM_OC5_SetConfig+0x76>
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	4a17      	ldr	r2, [pc, #92]	@ (8010444 <TIM_OC5_SetConfig+0xb8>)
 80103e6:	4293      	cmp	r3, r2
 80103e8:	d00b      	beq.n	8010402 <TIM_OC5_SetConfig+0x76>
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	4a16      	ldr	r2, [pc, #88]	@ (8010448 <TIM_OC5_SetConfig+0xbc>)
 80103ee:	4293      	cmp	r3, r2
 80103f0:	d007      	beq.n	8010402 <TIM_OC5_SetConfig+0x76>
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	4a15      	ldr	r2, [pc, #84]	@ (801044c <TIM_OC5_SetConfig+0xc0>)
 80103f6:	4293      	cmp	r3, r2
 80103f8:	d003      	beq.n	8010402 <TIM_OC5_SetConfig+0x76>
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	4a14      	ldr	r2, [pc, #80]	@ (8010450 <TIM_OC5_SetConfig+0xc4>)
 80103fe:	4293      	cmp	r3, r2
 8010400:	d109      	bne.n	8010416 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8010402:	697b      	ldr	r3, [r7, #20]
 8010404:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8010408:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 801040a:	683b      	ldr	r3, [r7, #0]
 801040c:	695b      	ldr	r3, [r3, #20]
 801040e:	021b      	lsls	r3, r3, #8
 8010410:	697a      	ldr	r2, [r7, #20]
 8010412:	4313      	orrs	r3, r2
 8010414:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	697a      	ldr	r2, [r7, #20]
 801041a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	68fa      	ldr	r2, [r7, #12]
 8010420:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8010422:	683b      	ldr	r3, [r7, #0]
 8010424:	685a      	ldr	r2, [r3, #4]
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	693a      	ldr	r2, [r7, #16]
 801042e:	621a      	str	r2, [r3, #32]
}
 8010430:	bf00      	nop
 8010432:	371c      	adds	r7, #28
 8010434:	46bd      	mov	sp, r7
 8010436:	f85d 7b04 	ldr.w	r7, [sp], #4
 801043a:	4770      	bx	lr
 801043c:	fffeff8f 	.word	0xfffeff8f
 8010440:	40010000 	.word	0x40010000
 8010444:	40010400 	.word	0x40010400
 8010448:	40014000 	.word	0x40014000
 801044c:	40014400 	.word	0x40014400
 8010450:	40014800 	.word	0x40014800

08010454 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8010454:	b480      	push	{r7}
 8010456:	b087      	sub	sp, #28
 8010458:	af00      	add	r7, sp, #0
 801045a:	6078      	str	r0, [r7, #4]
 801045c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	6a1b      	ldr	r3, [r3, #32]
 8010462:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	6a1b      	ldr	r3, [r3, #32]
 8010468:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	685b      	ldr	r3, [r3, #4]
 8010474:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801047a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 801047c:	68fa      	ldr	r2, [r7, #12]
 801047e:	4b22      	ldr	r3, [pc, #136]	@ (8010508 <TIM_OC6_SetConfig+0xb4>)
 8010480:	4013      	ands	r3, r2
 8010482:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010484:	683b      	ldr	r3, [r7, #0]
 8010486:	681b      	ldr	r3, [r3, #0]
 8010488:	021b      	lsls	r3, r3, #8
 801048a:	68fa      	ldr	r2, [r7, #12]
 801048c:	4313      	orrs	r3, r2
 801048e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8010490:	693b      	ldr	r3, [r7, #16]
 8010492:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8010496:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8010498:	683b      	ldr	r3, [r7, #0]
 801049a:	689b      	ldr	r3, [r3, #8]
 801049c:	051b      	lsls	r3, r3, #20
 801049e:	693a      	ldr	r2, [r7, #16]
 80104a0:	4313      	orrs	r3, r2
 80104a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	4a19      	ldr	r2, [pc, #100]	@ (801050c <TIM_OC6_SetConfig+0xb8>)
 80104a8:	4293      	cmp	r3, r2
 80104aa:	d00f      	beq.n	80104cc <TIM_OC6_SetConfig+0x78>
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	4a18      	ldr	r2, [pc, #96]	@ (8010510 <TIM_OC6_SetConfig+0xbc>)
 80104b0:	4293      	cmp	r3, r2
 80104b2:	d00b      	beq.n	80104cc <TIM_OC6_SetConfig+0x78>
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	4a17      	ldr	r2, [pc, #92]	@ (8010514 <TIM_OC6_SetConfig+0xc0>)
 80104b8:	4293      	cmp	r3, r2
 80104ba:	d007      	beq.n	80104cc <TIM_OC6_SetConfig+0x78>
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	4a16      	ldr	r2, [pc, #88]	@ (8010518 <TIM_OC6_SetConfig+0xc4>)
 80104c0:	4293      	cmp	r3, r2
 80104c2:	d003      	beq.n	80104cc <TIM_OC6_SetConfig+0x78>
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	4a15      	ldr	r2, [pc, #84]	@ (801051c <TIM_OC6_SetConfig+0xc8>)
 80104c8:	4293      	cmp	r3, r2
 80104ca:	d109      	bne.n	80104e0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80104cc:	697b      	ldr	r3, [r7, #20]
 80104ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80104d2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80104d4:	683b      	ldr	r3, [r7, #0]
 80104d6:	695b      	ldr	r3, [r3, #20]
 80104d8:	029b      	lsls	r3, r3, #10
 80104da:	697a      	ldr	r2, [r7, #20]
 80104dc:	4313      	orrs	r3, r2
 80104de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	697a      	ldr	r2, [r7, #20]
 80104e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	68fa      	ldr	r2, [r7, #12]
 80104ea:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80104ec:	683b      	ldr	r3, [r7, #0]
 80104ee:	685a      	ldr	r2, [r3, #4]
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	693a      	ldr	r2, [r7, #16]
 80104f8:	621a      	str	r2, [r3, #32]
}
 80104fa:	bf00      	nop
 80104fc:	371c      	adds	r7, #28
 80104fe:	46bd      	mov	sp, r7
 8010500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010504:	4770      	bx	lr
 8010506:	bf00      	nop
 8010508:	feff8fff 	.word	0xfeff8fff
 801050c:	40010000 	.word	0x40010000
 8010510:	40010400 	.word	0x40010400
 8010514:	40014000 	.word	0x40014000
 8010518:	40014400 	.word	0x40014400
 801051c:	40014800 	.word	0x40014800

08010520 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8010520:	b480      	push	{r7}
 8010522:	b087      	sub	sp, #28
 8010524:	af00      	add	r7, sp, #0
 8010526:	60f8      	str	r0, [r7, #12]
 8010528:	60b9      	str	r1, [r7, #8]
 801052a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 801052c:	68bb      	ldr	r3, [r7, #8]
 801052e:	f003 031f 	and.w	r3, r3, #31
 8010532:	2201      	movs	r2, #1
 8010534:	fa02 f303 	lsl.w	r3, r2, r3
 8010538:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801053a:	68fb      	ldr	r3, [r7, #12]
 801053c:	6a1a      	ldr	r2, [r3, #32]
 801053e:	697b      	ldr	r3, [r7, #20]
 8010540:	43db      	mvns	r3, r3
 8010542:	401a      	ands	r2, r3
 8010544:	68fb      	ldr	r3, [r7, #12]
 8010546:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8010548:	68fb      	ldr	r3, [r7, #12]
 801054a:	6a1a      	ldr	r2, [r3, #32]
 801054c:	68bb      	ldr	r3, [r7, #8]
 801054e:	f003 031f 	and.w	r3, r3, #31
 8010552:	6879      	ldr	r1, [r7, #4]
 8010554:	fa01 f303 	lsl.w	r3, r1, r3
 8010558:	431a      	orrs	r2, r3
 801055a:	68fb      	ldr	r3, [r7, #12]
 801055c:	621a      	str	r2, [r3, #32]
}
 801055e:	bf00      	nop
 8010560:	371c      	adds	r7, #28
 8010562:	46bd      	mov	sp, r7
 8010564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010568:	4770      	bx	lr
	...

0801056c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 801056c:	b480      	push	{r7}
 801056e:	b085      	sub	sp, #20
 8010570:	af00      	add	r7, sp, #0
 8010572:	6078      	str	r0, [r7, #4]
 8010574:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801057c:	2b01      	cmp	r3, #1
 801057e:	d101      	bne.n	8010584 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8010580:	2302      	movs	r3, #2
 8010582:	e06d      	b.n	8010660 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	2201      	movs	r2, #1
 8010588:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	2202      	movs	r2, #2
 8010590:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	681b      	ldr	r3, [r3, #0]
 8010598:	685b      	ldr	r3, [r3, #4]
 801059a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	681b      	ldr	r3, [r3, #0]
 80105a0:	689b      	ldr	r3, [r3, #8]
 80105a2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	681b      	ldr	r3, [r3, #0]
 80105a8:	4a30      	ldr	r2, [pc, #192]	@ (801066c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80105aa:	4293      	cmp	r3, r2
 80105ac:	d004      	beq.n	80105b8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	681b      	ldr	r3, [r3, #0]
 80105b2:	4a2f      	ldr	r2, [pc, #188]	@ (8010670 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80105b4:	4293      	cmp	r3, r2
 80105b6:	d108      	bne.n	80105ca <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80105b8:	68fb      	ldr	r3, [r7, #12]
 80105ba:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80105be:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80105c0:	683b      	ldr	r3, [r7, #0]
 80105c2:	685b      	ldr	r3, [r3, #4]
 80105c4:	68fa      	ldr	r2, [r7, #12]
 80105c6:	4313      	orrs	r3, r2
 80105c8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80105ca:	68fb      	ldr	r3, [r7, #12]
 80105cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80105d0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80105d2:	683b      	ldr	r3, [r7, #0]
 80105d4:	681b      	ldr	r3, [r3, #0]
 80105d6:	68fa      	ldr	r2, [r7, #12]
 80105d8:	4313      	orrs	r3, r2
 80105da:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	681b      	ldr	r3, [r3, #0]
 80105e0:	68fa      	ldr	r2, [r7, #12]
 80105e2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	681b      	ldr	r3, [r3, #0]
 80105e8:	4a20      	ldr	r2, [pc, #128]	@ (801066c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80105ea:	4293      	cmp	r3, r2
 80105ec:	d022      	beq.n	8010634 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	681b      	ldr	r3, [r3, #0]
 80105f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80105f6:	d01d      	beq.n	8010634 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	681b      	ldr	r3, [r3, #0]
 80105fc:	4a1d      	ldr	r2, [pc, #116]	@ (8010674 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80105fe:	4293      	cmp	r3, r2
 8010600:	d018      	beq.n	8010634 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	681b      	ldr	r3, [r3, #0]
 8010606:	4a1c      	ldr	r2, [pc, #112]	@ (8010678 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8010608:	4293      	cmp	r3, r2
 801060a:	d013      	beq.n	8010634 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	681b      	ldr	r3, [r3, #0]
 8010610:	4a1a      	ldr	r2, [pc, #104]	@ (801067c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8010612:	4293      	cmp	r3, r2
 8010614:	d00e      	beq.n	8010634 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	681b      	ldr	r3, [r3, #0]
 801061a:	4a15      	ldr	r2, [pc, #84]	@ (8010670 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 801061c:	4293      	cmp	r3, r2
 801061e:	d009      	beq.n	8010634 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	681b      	ldr	r3, [r3, #0]
 8010624:	4a16      	ldr	r2, [pc, #88]	@ (8010680 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8010626:	4293      	cmp	r3, r2
 8010628:	d004      	beq.n	8010634 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	681b      	ldr	r3, [r3, #0]
 801062e:	4a15      	ldr	r2, [pc, #84]	@ (8010684 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8010630:	4293      	cmp	r3, r2
 8010632:	d10c      	bne.n	801064e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8010634:	68bb      	ldr	r3, [r7, #8]
 8010636:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801063a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801063c:	683b      	ldr	r3, [r7, #0]
 801063e:	689b      	ldr	r3, [r3, #8]
 8010640:	68ba      	ldr	r2, [r7, #8]
 8010642:	4313      	orrs	r3, r2
 8010644:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	681b      	ldr	r3, [r3, #0]
 801064a:	68ba      	ldr	r2, [r7, #8]
 801064c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	2201      	movs	r2, #1
 8010652:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	2200      	movs	r2, #0
 801065a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 801065e:	2300      	movs	r3, #0
}
 8010660:	4618      	mov	r0, r3
 8010662:	3714      	adds	r7, #20
 8010664:	46bd      	mov	sp, r7
 8010666:	f85d 7b04 	ldr.w	r7, [sp], #4
 801066a:	4770      	bx	lr
 801066c:	40010000 	.word	0x40010000
 8010670:	40010400 	.word	0x40010400
 8010674:	40000400 	.word	0x40000400
 8010678:	40000800 	.word	0x40000800
 801067c:	40000c00 	.word	0x40000c00
 8010680:	40001800 	.word	0x40001800
 8010684:	40014000 	.word	0x40014000

08010688 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8010688:	b480      	push	{r7}
 801068a:	b085      	sub	sp, #20
 801068c:	af00      	add	r7, sp, #0
 801068e:	6078      	str	r0, [r7, #4]
 8010690:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8010692:	2300      	movs	r3, #0
 8010694:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801069c:	2b01      	cmp	r3, #1
 801069e:	d101      	bne.n	80106a4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80106a0:	2302      	movs	r3, #2
 80106a2:	e065      	b.n	8010770 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	2201      	movs	r2, #1
 80106a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80106ac:	68fb      	ldr	r3, [r7, #12]
 80106ae:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80106b2:	683b      	ldr	r3, [r7, #0]
 80106b4:	68db      	ldr	r3, [r3, #12]
 80106b6:	4313      	orrs	r3, r2
 80106b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80106ba:	68fb      	ldr	r3, [r7, #12]
 80106bc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80106c0:	683b      	ldr	r3, [r7, #0]
 80106c2:	689b      	ldr	r3, [r3, #8]
 80106c4:	4313      	orrs	r3, r2
 80106c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80106c8:	68fb      	ldr	r3, [r7, #12]
 80106ca:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80106ce:	683b      	ldr	r3, [r7, #0]
 80106d0:	685b      	ldr	r3, [r3, #4]
 80106d2:	4313      	orrs	r3, r2
 80106d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80106d6:	68fb      	ldr	r3, [r7, #12]
 80106d8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80106dc:	683b      	ldr	r3, [r7, #0]
 80106de:	681b      	ldr	r3, [r3, #0]
 80106e0:	4313      	orrs	r3, r2
 80106e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80106e4:	68fb      	ldr	r3, [r7, #12]
 80106e6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80106ea:	683b      	ldr	r3, [r7, #0]
 80106ec:	691b      	ldr	r3, [r3, #16]
 80106ee:	4313      	orrs	r3, r2
 80106f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80106f2:	68fb      	ldr	r3, [r7, #12]
 80106f4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80106f8:	683b      	ldr	r3, [r7, #0]
 80106fa:	695b      	ldr	r3, [r3, #20]
 80106fc:	4313      	orrs	r3, r2
 80106fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8010700:	68fb      	ldr	r3, [r7, #12]
 8010702:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8010706:	683b      	ldr	r3, [r7, #0]
 8010708:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801070a:	4313      	orrs	r3, r2
 801070c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 801070e:	68fb      	ldr	r3, [r7, #12]
 8010710:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8010714:	683b      	ldr	r3, [r7, #0]
 8010716:	699b      	ldr	r3, [r3, #24]
 8010718:	041b      	lsls	r3, r3, #16
 801071a:	4313      	orrs	r3, r2
 801071c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	681b      	ldr	r3, [r3, #0]
 8010722:	4a16      	ldr	r2, [pc, #88]	@ (801077c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8010724:	4293      	cmp	r3, r2
 8010726:	d004      	beq.n	8010732 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8010728:	687b      	ldr	r3, [r7, #4]
 801072a:	681b      	ldr	r3, [r3, #0]
 801072c:	4a14      	ldr	r2, [pc, #80]	@ (8010780 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 801072e:	4293      	cmp	r3, r2
 8010730:	d115      	bne.n	801075e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8010732:	68fb      	ldr	r3, [r7, #12]
 8010734:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8010738:	683b      	ldr	r3, [r7, #0]
 801073a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801073c:	051b      	lsls	r3, r3, #20
 801073e:	4313      	orrs	r3, r2
 8010740:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8010742:	68fb      	ldr	r3, [r7, #12]
 8010744:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8010748:	683b      	ldr	r3, [r7, #0]
 801074a:	69db      	ldr	r3, [r3, #28]
 801074c:	4313      	orrs	r3, r2
 801074e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8010750:	68fb      	ldr	r3, [r7, #12]
 8010752:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8010756:	683b      	ldr	r3, [r7, #0]
 8010758:	6a1b      	ldr	r3, [r3, #32]
 801075a:	4313      	orrs	r3, r2
 801075c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	681b      	ldr	r3, [r3, #0]
 8010762:	68fa      	ldr	r2, [r7, #12]
 8010764:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	2200      	movs	r2, #0
 801076a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 801076e:	2300      	movs	r3, #0
}
 8010770:	4618      	mov	r0, r3
 8010772:	3714      	adds	r7, #20
 8010774:	46bd      	mov	sp, r7
 8010776:	f85d 7b04 	ldr.w	r7, [sp], #4
 801077a:	4770      	bx	lr
 801077c:	40010000 	.word	0x40010000
 8010780:	40010400 	.word	0x40010400

08010784 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8010784:	b480      	push	{r7}
 8010786:	b083      	sub	sp, #12
 8010788:	af00      	add	r7, sp, #0
 801078a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 801078c:	bf00      	nop
 801078e:	370c      	adds	r7, #12
 8010790:	46bd      	mov	sp, r7
 8010792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010796:	4770      	bx	lr

08010798 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8010798:	b480      	push	{r7}
 801079a:	b083      	sub	sp, #12
 801079c:	af00      	add	r7, sp, #0
 801079e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80107a0:	bf00      	nop
 80107a2:	370c      	adds	r7, #12
 80107a4:	46bd      	mov	sp, r7
 80107a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107aa:	4770      	bx	lr

080107ac <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80107ac:	b480      	push	{r7}
 80107ae:	b083      	sub	sp, #12
 80107b0:	af00      	add	r7, sp, #0
 80107b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80107b4:	bf00      	nop
 80107b6:	370c      	adds	r7, #12
 80107b8:	46bd      	mov	sp, r7
 80107ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107be:	4770      	bx	lr

080107c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80107c0:	b580      	push	{r7, lr}
 80107c2:	b082      	sub	sp, #8
 80107c4:	af00      	add	r7, sp, #0
 80107c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	2b00      	cmp	r3, #0
 80107cc:	d101      	bne.n	80107d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80107ce:	2301      	movs	r3, #1
 80107d0:	e042      	b.n	8010858 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80107d2:	687b      	ldr	r3, [r7, #4]
 80107d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80107d8:	2b00      	cmp	r3, #0
 80107da:	d106      	bne.n	80107ea <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	2200      	movs	r2, #0
 80107e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80107e4:	6878      	ldr	r0, [r7, #4]
 80107e6:	f7f1 fe6d 	bl	80024c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	2224      	movs	r2, #36	@ 0x24
 80107ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	681b      	ldr	r3, [r3, #0]
 80107f6:	681a      	ldr	r2, [r3, #0]
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	681b      	ldr	r3, [r3, #0]
 80107fc:	f022 0201 	bic.w	r2, r2, #1
 8010800:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010806:	2b00      	cmp	r3, #0
 8010808:	d002      	beq.n	8010810 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 801080a:	6878      	ldr	r0, [r7, #4]
 801080c:	f001 fa6a 	bl	8011ce4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8010810:	6878      	ldr	r0, [r7, #4]
 8010812:	f000 fcff 	bl	8011214 <UART_SetConfig>
 8010816:	4603      	mov	r3, r0
 8010818:	2b01      	cmp	r3, #1
 801081a:	d101      	bne.n	8010820 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 801081c:	2301      	movs	r3, #1
 801081e:	e01b      	b.n	8010858 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	681b      	ldr	r3, [r3, #0]
 8010824:	685a      	ldr	r2, [r3, #4]
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	681b      	ldr	r3, [r3, #0]
 801082a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 801082e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	681b      	ldr	r3, [r3, #0]
 8010834:	689a      	ldr	r2, [r3, #8]
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	681b      	ldr	r3, [r3, #0]
 801083a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 801083e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	681b      	ldr	r3, [r3, #0]
 8010844:	681a      	ldr	r2, [r3, #0]
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	681b      	ldr	r3, [r3, #0]
 801084a:	f042 0201 	orr.w	r2, r2, #1
 801084e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8010850:	6878      	ldr	r0, [r7, #4]
 8010852:	f001 fae9 	bl	8011e28 <UART_CheckIdleState>
 8010856:	4603      	mov	r3, r0
}
 8010858:	4618      	mov	r0, r3
 801085a:	3708      	adds	r7, #8
 801085c:	46bd      	mov	sp, r7
 801085e:	bd80      	pop	{r7, pc}

08010860 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010860:	b580      	push	{r7, lr}
 8010862:	b08a      	sub	sp, #40	@ 0x28
 8010864:	af02      	add	r7, sp, #8
 8010866:	60f8      	str	r0, [r7, #12]
 8010868:	60b9      	str	r1, [r7, #8]
 801086a:	603b      	str	r3, [r7, #0]
 801086c:	4613      	mov	r3, r2
 801086e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8010870:	68fb      	ldr	r3, [r7, #12]
 8010872:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010876:	2b20      	cmp	r3, #32
 8010878:	d17b      	bne.n	8010972 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 801087a:	68bb      	ldr	r3, [r7, #8]
 801087c:	2b00      	cmp	r3, #0
 801087e:	d002      	beq.n	8010886 <HAL_UART_Transmit+0x26>
 8010880:	88fb      	ldrh	r3, [r7, #6]
 8010882:	2b00      	cmp	r3, #0
 8010884:	d101      	bne.n	801088a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8010886:	2301      	movs	r3, #1
 8010888:	e074      	b.n	8010974 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801088a:	68fb      	ldr	r3, [r7, #12]
 801088c:	2200      	movs	r2, #0
 801088e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8010892:	68fb      	ldr	r3, [r7, #12]
 8010894:	2221      	movs	r2, #33	@ 0x21
 8010896:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801089a:	f7f2 f8f1 	bl	8002a80 <HAL_GetTick>
 801089e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80108a0:	68fb      	ldr	r3, [r7, #12]
 80108a2:	88fa      	ldrh	r2, [r7, #6]
 80108a4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80108a8:	68fb      	ldr	r3, [r7, #12]
 80108aa:	88fa      	ldrh	r2, [r7, #6]
 80108ac:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80108b0:	68fb      	ldr	r3, [r7, #12]
 80108b2:	689b      	ldr	r3, [r3, #8]
 80108b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80108b8:	d108      	bne.n	80108cc <HAL_UART_Transmit+0x6c>
 80108ba:	68fb      	ldr	r3, [r7, #12]
 80108bc:	691b      	ldr	r3, [r3, #16]
 80108be:	2b00      	cmp	r3, #0
 80108c0:	d104      	bne.n	80108cc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80108c2:	2300      	movs	r3, #0
 80108c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80108c6:	68bb      	ldr	r3, [r7, #8]
 80108c8:	61bb      	str	r3, [r7, #24]
 80108ca:	e003      	b.n	80108d4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80108cc:	68bb      	ldr	r3, [r7, #8]
 80108ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80108d0:	2300      	movs	r3, #0
 80108d2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80108d4:	e030      	b.n	8010938 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80108d6:	683b      	ldr	r3, [r7, #0]
 80108d8:	9300      	str	r3, [sp, #0]
 80108da:	697b      	ldr	r3, [r7, #20]
 80108dc:	2200      	movs	r2, #0
 80108de:	2180      	movs	r1, #128	@ 0x80
 80108e0:	68f8      	ldr	r0, [r7, #12]
 80108e2:	f001 fb4b 	bl	8011f7c <UART_WaitOnFlagUntilTimeout>
 80108e6:	4603      	mov	r3, r0
 80108e8:	2b00      	cmp	r3, #0
 80108ea:	d005      	beq.n	80108f8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80108ec:	68fb      	ldr	r3, [r7, #12]
 80108ee:	2220      	movs	r2, #32
 80108f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80108f4:	2303      	movs	r3, #3
 80108f6:	e03d      	b.n	8010974 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80108f8:	69fb      	ldr	r3, [r7, #28]
 80108fa:	2b00      	cmp	r3, #0
 80108fc:	d10b      	bne.n	8010916 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80108fe:	69bb      	ldr	r3, [r7, #24]
 8010900:	881b      	ldrh	r3, [r3, #0]
 8010902:	461a      	mov	r2, r3
 8010904:	68fb      	ldr	r3, [r7, #12]
 8010906:	681b      	ldr	r3, [r3, #0]
 8010908:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801090c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 801090e:	69bb      	ldr	r3, [r7, #24]
 8010910:	3302      	adds	r3, #2
 8010912:	61bb      	str	r3, [r7, #24]
 8010914:	e007      	b.n	8010926 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8010916:	69fb      	ldr	r3, [r7, #28]
 8010918:	781a      	ldrb	r2, [r3, #0]
 801091a:	68fb      	ldr	r3, [r7, #12]
 801091c:	681b      	ldr	r3, [r3, #0]
 801091e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8010920:	69fb      	ldr	r3, [r7, #28]
 8010922:	3301      	adds	r3, #1
 8010924:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8010926:	68fb      	ldr	r3, [r7, #12]
 8010928:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 801092c:	b29b      	uxth	r3, r3
 801092e:	3b01      	subs	r3, #1
 8010930:	b29a      	uxth	r2, r3
 8010932:	68fb      	ldr	r3, [r7, #12]
 8010934:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8010938:	68fb      	ldr	r3, [r7, #12]
 801093a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 801093e:	b29b      	uxth	r3, r3
 8010940:	2b00      	cmp	r3, #0
 8010942:	d1c8      	bne.n	80108d6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8010944:	683b      	ldr	r3, [r7, #0]
 8010946:	9300      	str	r3, [sp, #0]
 8010948:	697b      	ldr	r3, [r7, #20]
 801094a:	2200      	movs	r2, #0
 801094c:	2140      	movs	r1, #64	@ 0x40
 801094e:	68f8      	ldr	r0, [r7, #12]
 8010950:	f001 fb14 	bl	8011f7c <UART_WaitOnFlagUntilTimeout>
 8010954:	4603      	mov	r3, r0
 8010956:	2b00      	cmp	r3, #0
 8010958:	d005      	beq.n	8010966 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 801095a:	68fb      	ldr	r3, [r7, #12]
 801095c:	2220      	movs	r2, #32
 801095e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8010962:	2303      	movs	r3, #3
 8010964:	e006      	b.n	8010974 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8010966:	68fb      	ldr	r3, [r7, #12]
 8010968:	2220      	movs	r2, #32
 801096a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 801096e:	2300      	movs	r3, #0
 8010970:	e000      	b.n	8010974 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8010972:	2302      	movs	r3, #2
  }
}
 8010974:	4618      	mov	r0, r3
 8010976:	3720      	adds	r7, #32
 8010978:	46bd      	mov	sp, r7
 801097a:	bd80      	pop	{r7, pc}

0801097c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801097c:	b580      	push	{r7, lr}
 801097e:	b08a      	sub	sp, #40	@ 0x28
 8010980:	af00      	add	r7, sp, #0
 8010982:	60f8      	str	r0, [r7, #12]
 8010984:	60b9      	str	r1, [r7, #8]
 8010986:	4613      	mov	r3, r2
 8010988:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801098a:	68fb      	ldr	r3, [r7, #12]
 801098c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010990:	2b20      	cmp	r3, #32
 8010992:	d137      	bne.n	8010a04 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8010994:	68bb      	ldr	r3, [r7, #8]
 8010996:	2b00      	cmp	r3, #0
 8010998:	d002      	beq.n	80109a0 <HAL_UART_Receive_DMA+0x24>
 801099a:	88fb      	ldrh	r3, [r7, #6]
 801099c:	2b00      	cmp	r3, #0
 801099e:	d101      	bne.n	80109a4 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80109a0:	2301      	movs	r3, #1
 80109a2:	e030      	b.n	8010a06 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80109a4:	68fb      	ldr	r3, [r7, #12]
 80109a6:	2200      	movs	r2, #0
 80109a8:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80109aa:	68fb      	ldr	r3, [r7, #12]
 80109ac:	681b      	ldr	r3, [r3, #0]
 80109ae:	4a18      	ldr	r2, [pc, #96]	@ (8010a10 <HAL_UART_Receive_DMA+0x94>)
 80109b0:	4293      	cmp	r3, r2
 80109b2:	d01f      	beq.n	80109f4 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80109b4:	68fb      	ldr	r3, [r7, #12]
 80109b6:	681b      	ldr	r3, [r3, #0]
 80109b8:	685b      	ldr	r3, [r3, #4]
 80109ba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80109be:	2b00      	cmp	r3, #0
 80109c0:	d018      	beq.n	80109f4 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80109c2:	68fb      	ldr	r3, [r7, #12]
 80109c4:	681b      	ldr	r3, [r3, #0]
 80109c6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80109c8:	697b      	ldr	r3, [r7, #20]
 80109ca:	e853 3f00 	ldrex	r3, [r3]
 80109ce:	613b      	str	r3, [r7, #16]
   return(result);
 80109d0:	693b      	ldr	r3, [r7, #16]
 80109d2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80109d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80109d8:	68fb      	ldr	r3, [r7, #12]
 80109da:	681b      	ldr	r3, [r3, #0]
 80109dc:	461a      	mov	r2, r3
 80109de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80109e0:	623b      	str	r3, [r7, #32]
 80109e2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80109e4:	69f9      	ldr	r1, [r7, #28]
 80109e6:	6a3a      	ldr	r2, [r7, #32]
 80109e8:	e841 2300 	strex	r3, r2, [r1]
 80109ec:	61bb      	str	r3, [r7, #24]
   return(result);
 80109ee:	69bb      	ldr	r3, [r7, #24]
 80109f0:	2b00      	cmp	r3, #0
 80109f2:	d1e6      	bne.n	80109c2 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80109f4:	88fb      	ldrh	r3, [r7, #6]
 80109f6:	461a      	mov	r2, r3
 80109f8:	68b9      	ldr	r1, [r7, #8]
 80109fa:	68f8      	ldr	r0, [r7, #12]
 80109fc:	f001 fb2c 	bl	8012058 <UART_Start_Receive_DMA>
 8010a00:	4603      	mov	r3, r0
 8010a02:	e000      	b.n	8010a06 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8010a04:	2302      	movs	r3, #2
  }
}
 8010a06:	4618      	mov	r0, r3
 8010a08:	3728      	adds	r7, #40	@ 0x28
 8010a0a:	46bd      	mov	sp, r7
 8010a0c:	bd80      	pop	{r7, pc}
 8010a0e:	bf00      	nop
 8010a10:	58000c00 	.word	0x58000c00

08010a14 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8010a14:	b580      	push	{r7, lr}
 8010a16:	b0ba      	sub	sp, #232	@ 0xe8
 8010a18:	af00      	add	r7, sp, #0
 8010a1a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	681b      	ldr	r3, [r3, #0]
 8010a20:	69db      	ldr	r3, [r3, #28]
 8010a22:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	681b      	ldr	r3, [r3, #0]
 8010a2a:	681b      	ldr	r3, [r3, #0]
 8010a2c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	681b      	ldr	r3, [r3, #0]
 8010a34:	689b      	ldr	r3, [r3, #8]
 8010a36:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8010a3a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8010a3e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8010a42:	4013      	ands	r3, r2
 8010a44:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8010a48:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8010a4c:	2b00      	cmp	r3, #0
 8010a4e:	d11b      	bne.n	8010a88 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8010a50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010a54:	f003 0320 	and.w	r3, r3, #32
 8010a58:	2b00      	cmp	r3, #0
 8010a5a:	d015      	beq.n	8010a88 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8010a5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010a60:	f003 0320 	and.w	r3, r3, #32
 8010a64:	2b00      	cmp	r3, #0
 8010a66:	d105      	bne.n	8010a74 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8010a68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010a6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8010a70:	2b00      	cmp	r3, #0
 8010a72:	d009      	beq.n	8010a88 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010a78:	2b00      	cmp	r3, #0
 8010a7a:	f000 8393 	beq.w	80111a4 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010a82:	6878      	ldr	r0, [r7, #4]
 8010a84:	4798      	blx	r3
      }
      return;
 8010a86:	e38d      	b.n	80111a4 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8010a88:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8010a8c:	2b00      	cmp	r3, #0
 8010a8e:	f000 8123 	beq.w	8010cd8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8010a92:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8010a96:	4b8d      	ldr	r3, [pc, #564]	@ (8010ccc <HAL_UART_IRQHandler+0x2b8>)
 8010a98:	4013      	ands	r3, r2
 8010a9a:	2b00      	cmp	r3, #0
 8010a9c:	d106      	bne.n	8010aac <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8010a9e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8010aa2:	4b8b      	ldr	r3, [pc, #556]	@ (8010cd0 <HAL_UART_IRQHandler+0x2bc>)
 8010aa4:	4013      	ands	r3, r2
 8010aa6:	2b00      	cmp	r3, #0
 8010aa8:	f000 8116 	beq.w	8010cd8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8010aac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010ab0:	f003 0301 	and.w	r3, r3, #1
 8010ab4:	2b00      	cmp	r3, #0
 8010ab6:	d011      	beq.n	8010adc <HAL_UART_IRQHandler+0xc8>
 8010ab8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010abc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010ac0:	2b00      	cmp	r3, #0
 8010ac2:	d00b      	beq.n	8010adc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	681b      	ldr	r3, [r3, #0]
 8010ac8:	2201      	movs	r2, #1
 8010aca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010ad2:	f043 0201 	orr.w	r2, r3, #1
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010adc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010ae0:	f003 0302 	and.w	r3, r3, #2
 8010ae4:	2b00      	cmp	r3, #0
 8010ae6:	d011      	beq.n	8010b0c <HAL_UART_IRQHandler+0xf8>
 8010ae8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010aec:	f003 0301 	and.w	r3, r3, #1
 8010af0:	2b00      	cmp	r3, #0
 8010af2:	d00b      	beq.n	8010b0c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	681b      	ldr	r3, [r3, #0]
 8010af8:	2202      	movs	r2, #2
 8010afa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010b02:	f043 0204 	orr.w	r2, r3, #4
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010b0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010b10:	f003 0304 	and.w	r3, r3, #4
 8010b14:	2b00      	cmp	r3, #0
 8010b16:	d011      	beq.n	8010b3c <HAL_UART_IRQHandler+0x128>
 8010b18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010b1c:	f003 0301 	and.w	r3, r3, #1
 8010b20:	2b00      	cmp	r3, #0
 8010b22:	d00b      	beq.n	8010b3c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	681b      	ldr	r3, [r3, #0]
 8010b28:	2204      	movs	r2, #4
 8010b2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010b32:	f043 0202 	orr.w	r2, r3, #2
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8010b3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010b40:	f003 0308 	and.w	r3, r3, #8
 8010b44:	2b00      	cmp	r3, #0
 8010b46:	d017      	beq.n	8010b78 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8010b48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010b4c:	f003 0320 	and.w	r3, r3, #32
 8010b50:	2b00      	cmp	r3, #0
 8010b52:	d105      	bne.n	8010b60 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8010b54:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8010b58:	4b5c      	ldr	r3, [pc, #368]	@ (8010ccc <HAL_UART_IRQHandler+0x2b8>)
 8010b5a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8010b5c:	2b00      	cmp	r3, #0
 8010b5e:	d00b      	beq.n	8010b78 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	681b      	ldr	r3, [r3, #0]
 8010b64:	2208      	movs	r2, #8
 8010b66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010b6e:	f043 0208 	orr.w	r2, r3, #8
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8010b78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010b7c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8010b80:	2b00      	cmp	r3, #0
 8010b82:	d012      	beq.n	8010baa <HAL_UART_IRQHandler+0x196>
 8010b84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010b88:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8010b8c:	2b00      	cmp	r3, #0
 8010b8e:	d00c      	beq.n	8010baa <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	681b      	ldr	r3, [r3, #0]
 8010b94:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8010b98:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010ba0:	f043 0220 	orr.w	r2, r3, #32
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010bb0:	2b00      	cmp	r3, #0
 8010bb2:	f000 82f9 	beq.w	80111a8 <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8010bb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010bba:	f003 0320 	and.w	r3, r3, #32
 8010bbe:	2b00      	cmp	r3, #0
 8010bc0:	d013      	beq.n	8010bea <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8010bc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010bc6:	f003 0320 	and.w	r3, r3, #32
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	d105      	bne.n	8010bda <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8010bce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010bd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8010bd6:	2b00      	cmp	r3, #0
 8010bd8:	d007      	beq.n	8010bea <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010bde:	2b00      	cmp	r3, #0
 8010be0:	d003      	beq.n	8010bea <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010be6:	6878      	ldr	r0, [r7, #4]
 8010be8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010bf0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	681b      	ldr	r3, [r3, #0]
 8010bf8:	689b      	ldr	r3, [r3, #8]
 8010bfa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010bfe:	2b40      	cmp	r3, #64	@ 0x40
 8010c00:	d005      	beq.n	8010c0e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8010c02:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8010c06:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8010c0a:	2b00      	cmp	r3, #0
 8010c0c:	d054      	beq.n	8010cb8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8010c0e:	6878      	ldr	r0, [r7, #4]
 8010c10:	f001 fb0a 	bl	8012228 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	681b      	ldr	r3, [r3, #0]
 8010c18:	689b      	ldr	r3, [r3, #8]
 8010c1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010c1e:	2b40      	cmp	r3, #64	@ 0x40
 8010c20:	d146      	bne.n	8010cb0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	681b      	ldr	r3, [r3, #0]
 8010c26:	3308      	adds	r3, #8
 8010c28:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c2c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8010c30:	e853 3f00 	ldrex	r3, [r3]
 8010c34:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8010c38:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8010c3c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010c40:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	681b      	ldr	r3, [r3, #0]
 8010c48:	3308      	adds	r3, #8
 8010c4a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8010c4e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8010c52:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c56:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8010c5a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8010c5e:	e841 2300 	strex	r3, r2, [r1]
 8010c62:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8010c66:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8010c6a:	2b00      	cmp	r3, #0
 8010c6c:	d1d9      	bne.n	8010c22 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010c74:	2b00      	cmp	r3, #0
 8010c76:	d017      	beq.n	8010ca8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010c7e:	4a15      	ldr	r2, [pc, #84]	@ (8010cd4 <HAL_UART_IRQHandler+0x2c0>)
 8010c80:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010c88:	4618      	mov	r0, r3
 8010c8a:	f7f3 fc8d 	bl	80045a8 <HAL_DMA_Abort_IT>
 8010c8e:	4603      	mov	r3, r0
 8010c90:	2b00      	cmp	r3, #0
 8010c92:	d019      	beq.n	8010cc8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8010c94:	687b      	ldr	r3, [r7, #4]
 8010c96:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010c9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010c9c:	687a      	ldr	r2, [r7, #4]
 8010c9e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8010ca2:	4610      	mov	r0, r2
 8010ca4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010ca6:	e00f      	b.n	8010cc8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8010ca8:	6878      	ldr	r0, [r7, #4]
 8010caa:	f000 fa9d 	bl	80111e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010cae:	e00b      	b.n	8010cc8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010cb0:	6878      	ldr	r0, [r7, #4]
 8010cb2:	f000 fa99 	bl	80111e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010cb6:	e007      	b.n	8010cc8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8010cb8:	6878      	ldr	r0, [r7, #4]
 8010cba:	f000 fa95 	bl	80111e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	2200      	movs	r2, #0
 8010cc2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8010cc6:	e26f      	b.n	80111a8 <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010cc8:	bf00      	nop
    return;
 8010cca:	e26d      	b.n	80111a8 <HAL_UART_IRQHandler+0x794>
 8010ccc:	10000001 	.word	0x10000001
 8010cd0:	04000120 	.word	0x04000120
 8010cd4:	080124db 	.word	0x080124db

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010cd8:	687b      	ldr	r3, [r7, #4]
 8010cda:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010cdc:	2b01      	cmp	r3, #1
 8010cde:	f040 8203 	bne.w	80110e8 <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8010ce2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010ce6:	f003 0310 	and.w	r3, r3, #16
 8010cea:	2b00      	cmp	r3, #0
 8010cec:	f000 81fc 	beq.w	80110e8 <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8010cf0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010cf4:	f003 0310 	and.w	r3, r3, #16
 8010cf8:	2b00      	cmp	r3, #0
 8010cfa:	f000 81f5 	beq.w	80110e8 <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	681b      	ldr	r3, [r3, #0]
 8010d02:	2210      	movs	r2, #16
 8010d04:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	681b      	ldr	r3, [r3, #0]
 8010d0a:	689b      	ldr	r3, [r3, #8]
 8010d0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010d10:	2b40      	cmp	r3, #64	@ 0x40
 8010d12:	f040 816d 	bne.w	8010ff0 <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8010d16:	687b      	ldr	r3, [r7, #4]
 8010d18:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010d1c:	681b      	ldr	r3, [r3, #0]
 8010d1e:	4aa4      	ldr	r2, [pc, #656]	@ (8010fb0 <HAL_UART_IRQHandler+0x59c>)
 8010d20:	4293      	cmp	r3, r2
 8010d22:	d068      	beq.n	8010df6 <HAL_UART_IRQHandler+0x3e2>
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010d2a:	681b      	ldr	r3, [r3, #0]
 8010d2c:	4aa1      	ldr	r2, [pc, #644]	@ (8010fb4 <HAL_UART_IRQHandler+0x5a0>)
 8010d2e:	4293      	cmp	r3, r2
 8010d30:	d061      	beq.n	8010df6 <HAL_UART_IRQHandler+0x3e2>
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010d38:	681b      	ldr	r3, [r3, #0]
 8010d3a:	4a9f      	ldr	r2, [pc, #636]	@ (8010fb8 <HAL_UART_IRQHandler+0x5a4>)
 8010d3c:	4293      	cmp	r3, r2
 8010d3e:	d05a      	beq.n	8010df6 <HAL_UART_IRQHandler+0x3e2>
 8010d40:	687b      	ldr	r3, [r7, #4]
 8010d42:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010d46:	681b      	ldr	r3, [r3, #0]
 8010d48:	4a9c      	ldr	r2, [pc, #624]	@ (8010fbc <HAL_UART_IRQHandler+0x5a8>)
 8010d4a:	4293      	cmp	r3, r2
 8010d4c:	d053      	beq.n	8010df6 <HAL_UART_IRQHandler+0x3e2>
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010d54:	681b      	ldr	r3, [r3, #0]
 8010d56:	4a9a      	ldr	r2, [pc, #616]	@ (8010fc0 <HAL_UART_IRQHandler+0x5ac>)
 8010d58:	4293      	cmp	r3, r2
 8010d5a:	d04c      	beq.n	8010df6 <HAL_UART_IRQHandler+0x3e2>
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010d62:	681b      	ldr	r3, [r3, #0]
 8010d64:	4a97      	ldr	r2, [pc, #604]	@ (8010fc4 <HAL_UART_IRQHandler+0x5b0>)
 8010d66:	4293      	cmp	r3, r2
 8010d68:	d045      	beq.n	8010df6 <HAL_UART_IRQHandler+0x3e2>
 8010d6a:	687b      	ldr	r3, [r7, #4]
 8010d6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010d70:	681b      	ldr	r3, [r3, #0]
 8010d72:	4a95      	ldr	r2, [pc, #596]	@ (8010fc8 <HAL_UART_IRQHandler+0x5b4>)
 8010d74:	4293      	cmp	r3, r2
 8010d76:	d03e      	beq.n	8010df6 <HAL_UART_IRQHandler+0x3e2>
 8010d78:	687b      	ldr	r3, [r7, #4]
 8010d7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010d7e:	681b      	ldr	r3, [r3, #0]
 8010d80:	4a92      	ldr	r2, [pc, #584]	@ (8010fcc <HAL_UART_IRQHandler+0x5b8>)
 8010d82:	4293      	cmp	r3, r2
 8010d84:	d037      	beq.n	8010df6 <HAL_UART_IRQHandler+0x3e2>
 8010d86:	687b      	ldr	r3, [r7, #4]
 8010d88:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010d8c:	681b      	ldr	r3, [r3, #0]
 8010d8e:	4a90      	ldr	r2, [pc, #576]	@ (8010fd0 <HAL_UART_IRQHandler+0x5bc>)
 8010d90:	4293      	cmp	r3, r2
 8010d92:	d030      	beq.n	8010df6 <HAL_UART_IRQHandler+0x3e2>
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010d9a:	681b      	ldr	r3, [r3, #0]
 8010d9c:	4a8d      	ldr	r2, [pc, #564]	@ (8010fd4 <HAL_UART_IRQHandler+0x5c0>)
 8010d9e:	4293      	cmp	r3, r2
 8010da0:	d029      	beq.n	8010df6 <HAL_UART_IRQHandler+0x3e2>
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010da8:	681b      	ldr	r3, [r3, #0]
 8010daa:	4a8b      	ldr	r2, [pc, #556]	@ (8010fd8 <HAL_UART_IRQHandler+0x5c4>)
 8010dac:	4293      	cmp	r3, r2
 8010dae:	d022      	beq.n	8010df6 <HAL_UART_IRQHandler+0x3e2>
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010db6:	681b      	ldr	r3, [r3, #0]
 8010db8:	4a88      	ldr	r2, [pc, #544]	@ (8010fdc <HAL_UART_IRQHandler+0x5c8>)
 8010dba:	4293      	cmp	r3, r2
 8010dbc:	d01b      	beq.n	8010df6 <HAL_UART_IRQHandler+0x3e2>
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010dc4:	681b      	ldr	r3, [r3, #0]
 8010dc6:	4a86      	ldr	r2, [pc, #536]	@ (8010fe0 <HAL_UART_IRQHandler+0x5cc>)
 8010dc8:	4293      	cmp	r3, r2
 8010dca:	d014      	beq.n	8010df6 <HAL_UART_IRQHandler+0x3e2>
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010dd2:	681b      	ldr	r3, [r3, #0]
 8010dd4:	4a83      	ldr	r2, [pc, #524]	@ (8010fe4 <HAL_UART_IRQHandler+0x5d0>)
 8010dd6:	4293      	cmp	r3, r2
 8010dd8:	d00d      	beq.n	8010df6 <HAL_UART_IRQHandler+0x3e2>
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010de0:	681b      	ldr	r3, [r3, #0]
 8010de2:	4a81      	ldr	r2, [pc, #516]	@ (8010fe8 <HAL_UART_IRQHandler+0x5d4>)
 8010de4:	4293      	cmp	r3, r2
 8010de6:	d006      	beq.n	8010df6 <HAL_UART_IRQHandler+0x3e2>
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010dee:	681b      	ldr	r3, [r3, #0]
 8010df0:	4a7e      	ldr	r2, [pc, #504]	@ (8010fec <HAL_UART_IRQHandler+0x5d8>)
 8010df2:	4293      	cmp	r3, r2
 8010df4:	d106      	bne.n	8010e04 <HAL_UART_IRQHandler+0x3f0>
 8010df6:	687b      	ldr	r3, [r7, #4]
 8010df8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010dfc:	681b      	ldr	r3, [r3, #0]
 8010dfe:	685b      	ldr	r3, [r3, #4]
 8010e00:	b29b      	uxth	r3, r3
 8010e02:	e005      	b.n	8010e10 <HAL_UART_IRQHandler+0x3fc>
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010e0a:	681b      	ldr	r3, [r3, #0]
 8010e0c:	685b      	ldr	r3, [r3, #4]
 8010e0e:	b29b      	uxth	r3, r3
 8010e10:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8010e14:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8010e18:	2b00      	cmp	r3, #0
 8010e1a:	f000 80ad 	beq.w	8010f78 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8010e24:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8010e28:	429a      	cmp	r2, r3
 8010e2a:	f080 80a5 	bcs.w	8010f78 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8010e2e:	687b      	ldr	r3, [r7, #4]
 8010e30:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8010e34:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010e3e:	69db      	ldr	r3, [r3, #28]
 8010e40:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010e44:	f000 8087 	beq.w	8010f56 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	681b      	ldr	r3, [r3, #0]
 8010e4c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010e50:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8010e54:	e853 3f00 	ldrex	r3, [r3]
 8010e58:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8010e5c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8010e60:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8010e64:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8010e68:	687b      	ldr	r3, [r7, #4]
 8010e6a:	681b      	ldr	r3, [r3, #0]
 8010e6c:	461a      	mov	r2, r3
 8010e6e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8010e72:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8010e76:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010e7a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8010e7e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8010e82:	e841 2300 	strex	r3, r2, [r1]
 8010e86:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8010e8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8010e8e:	2b00      	cmp	r3, #0
 8010e90:	d1da      	bne.n	8010e48 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	681b      	ldr	r3, [r3, #0]
 8010e96:	3308      	adds	r3, #8
 8010e98:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010e9a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8010e9c:	e853 3f00 	ldrex	r3, [r3]
 8010ea0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8010ea2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8010ea4:	f023 0301 	bic.w	r3, r3, #1
 8010ea8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	681b      	ldr	r3, [r3, #0]
 8010eb0:	3308      	adds	r3, #8
 8010eb2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8010eb6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8010eba:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ebc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8010ebe:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8010ec2:	e841 2300 	strex	r3, r2, [r1]
 8010ec6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8010ec8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010eca:	2b00      	cmp	r3, #0
 8010ecc:	d1e1      	bne.n	8010e92 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010ece:	687b      	ldr	r3, [r7, #4]
 8010ed0:	681b      	ldr	r3, [r3, #0]
 8010ed2:	3308      	adds	r3, #8
 8010ed4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ed6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010ed8:	e853 3f00 	ldrex	r3, [r3]
 8010edc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8010ede:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010ee0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010ee4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8010ee8:	687b      	ldr	r3, [r7, #4]
 8010eea:	681b      	ldr	r3, [r3, #0]
 8010eec:	3308      	adds	r3, #8
 8010eee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8010ef2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8010ef4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ef6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8010ef8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8010efa:	e841 2300 	strex	r3, r2, [r1]
 8010efe:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8010f00:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010f02:	2b00      	cmp	r3, #0
 8010f04:	d1e3      	bne.n	8010ece <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	2220      	movs	r2, #32
 8010f0a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	2200      	movs	r2, #0
 8010f12:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	681b      	ldr	r3, [r3, #0]
 8010f18:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010f1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010f1c:	e853 3f00 	ldrex	r3, [r3]
 8010f20:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8010f22:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010f24:	f023 0310 	bic.w	r3, r3, #16
 8010f28:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	681b      	ldr	r3, [r3, #0]
 8010f30:	461a      	mov	r2, r3
 8010f32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010f36:	65bb      	str	r3, [r7, #88]	@ 0x58
 8010f38:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f3a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8010f3c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8010f3e:	e841 2300 	strex	r3, r2, [r1]
 8010f42:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8010f44:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010f46:	2b00      	cmp	r3, #0
 8010f48:	d1e4      	bne.n	8010f14 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010f50:	4618      	mov	r0, r3
 8010f52:	f7f3 f80b 	bl	8003f6c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	2202      	movs	r2, #2
 8010f5a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8010f5c:	687b      	ldr	r3, [r7, #4]
 8010f5e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8010f62:	687b      	ldr	r3, [r7, #4]
 8010f64:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8010f68:	b29b      	uxth	r3, r3
 8010f6a:	1ad3      	subs	r3, r2, r3
 8010f6c:	b29b      	uxth	r3, r3
 8010f6e:	4619      	mov	r1, r3
 8010f70:	6878      	ldr	r0, [r7, #4]
 8010f72:	f000 f943 	bl	80111fc <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8010f76:	e119      	b.n	80111ac <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8010f7e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8010f82:	429a      	cmp	r2, r3
 8010f84:	f040 8112 	bne.w	80111ac <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010f8e:	69db      	ldr	r3, [r3, #28]
 8010f90:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010f94:	f040 810a 	bne.w	80111ac <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	2202      	movs	r2, #2
 8010f9c:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8010fa4:	4619      	mov	r1, r3
 8010fa6:	6878      	ldr	r0, [r7, #4]
 8010fa8:	f000 f928 	bl	80111fc <HAL_UARTEx_RxEventCallback>
      return;
 8010fac:	e0fe      	b.n	80111ac <HAL_UART_IRQHandler+0x798>
 8010fae:	bf00      	nop
 8010fb0:	40020010 	.word	0x40020010
 8010fb4:	40020028 	.word	0x40020028
 8010fb8:	40020040 	.word	0x40020040
 8010fbc:	40020058 	.word	0x40020058
 8010fc0:	40020070 	.word	0x40020070
 8010fc4:	40020088 	.word	0x40020088
 8010fc8:	400200a0 	.word	0x400200a0
 8010fcc:	400200b8 	.word	0x400200b8
 8010fd0:	40020410 	.word	0x40020410
 8010fd4:	40020428 	.word	0x40020428
 8010fd8:	40020440 	.word	0x40020440
 8010fdc:	40020458 	.word	0x40020458
 8010fe0:	40020470 	.word	0x40020470
 8010fe4:	40020488 	.word	0x40020488
 8010fe8:	400204a0 	.word	0x400204a0
 8010fec:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8010ff0:	687b      	ldr	r3, [r7, #4]
 8010ff2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8010ff6:	687b      	ldr	r3, [r7, #4]
 8010ff8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8010ffc:	b29b      	uxth	r3, r3
 8010ffe:	1ad3      	subs	r3, r2, r3
 8011000:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801100a:	b29b      	uxth	r3, r3
 801100c:	2b00      	cmp	r3, #0
 801100e:	f000 80cf 	beq.w	80111b0 <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 8011012:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8011016:	2b00      	cmp	r3, #0
 8011018:	f000 80ca 	beq.w	80111b0 <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	681b      	ldr	r3, [r3, #0]
 8011020:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011022:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011024:	e853 3f00 	ldrex	r3, [r3]
 8011028:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 801102a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801102c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8011030:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	681b      	ldr	r3, [r3, #0]
 8011038:	461a      	mov	r2, r3
 801103a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 801103e:	647b      	str	r3, [r7, #68]	@ 0x44
 8011040:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011042:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8011044:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011046:	e841 2300 	strex	r3, r2, [r1]
 801104a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801104c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801104e:	2b00      	cmp	r3, #0
 8011050:	d1e4      	bne.n	801101c <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011052:	687b      	ldr	r3, [r7, #4]
 8011054:	681b      	ldr	r3, [r3, #0]
 8011056:	3308      	adds	r3, #8
 8011058:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801105a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801105c:	e853 3f00 	ldrex	r3, [r3]
 8011060:	623b      	str	r3, [r7, #32]
   return(result);
 8011062:	6a3a      	ldr	r2, [r7, #32]
 8011064:	4b55      	ldr	r3, [pc, #340]	@ (80111bc <HAL_UART_IRQHandler+0x7a8>)
 8011066:	4013      	ands	r3, r2
 8011068:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	681b      	ldr	r3, [r3, #0]
 8011070:	3308      	adds	r3, #8
 8011072:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8011076:	633a      	str	r2, [r7, #48]	@ 0x30
 8011078:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801107a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801107c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801107e:	e841 2300 	strex	r3, r2, [r1]
 8011082:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8011084:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011086:	2b00      	cmp	r3, #0
 8011088:	d1e3      	bne.n	8011052 <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	2220      	movs	r2, #32
 801108e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	2200      	movs	r2, #0
 8011096:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	2200      	movs	r2, #0
 801109c:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	681b      	ldr	r3, [r3, #0]
 80110a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80110a4:	693b      	ldr	r3, [r7, #16]
 80110a6:	e853 3f00 	ldrex	r3, [r3]
 80110aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80110ac:	68fb      	ldr	r3, [r7, #12]
 80110ae:	f023 0310 	bic.w	r3, r3, #16
 80110b2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80110b6:	687b      	ldr	r3, [r7, #4]
 80110b8:	681b      	ldr	r3, [r3, #0]
 80110ba:	461a      	mov	r2, r3
 80110bc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80110c0:	61fb      	str	r3, [r7, #28]
 80110c2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80110c4:	69b9      	ldr	r1, [r7, #24]
 80110c6:	69fa      	ldr	r2, [r7, #28]
 80110c8:	e841 2300 	strex	r3, r2, [r1]
 80110cc:	617b      	str	r3, [r7, #20]
   return(result);
 80110ce:	697b      	ldr	r3, [r7, #20]
 80110d0:	2b00      	cmp	r3, #0
 80110d2:	d1e4      	bne.n	801109e <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	2202      	movs	r2, #2
 80110d8:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80110da:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80110de:	4619      	mov	r1, r3
 80110e0:	6878      	ldr	r0, [r7, #4]
 80110e2:	f000 f88b 	bl	80111fc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80110e6:	e063      	b.n	80111b0 <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80110e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80110ec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80110f0:	2b00      	cmp	r3, #0
 80110f2:	d00e      	beq.n	8011112 <HAL_UART_IRQHandler+0x6fe>
 80110f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80110f8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80110fc:	2b00      	cmp	r3, #0
 80110fe:	d008      	beq.n	8011112 <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	681b      	ldr	r3, [r3, #0]
 8011104:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8011108:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 801110a:	6878      	ldr	r0, [r7, #4]
 801110c:	f001 fa22 	bl	8012554 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8011110:	e051      	b.n	80111b6 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8011112:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011116:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801111a:	2b00      	cmp	r3, #0
 801111c:	d014      	beq.n	8011148 <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 801111e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8011122:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011126:	2b00      	cmp	r3, #0
 8011128:	d105      	bne.n	8011136 <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 801112a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801112e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8011132:	2b00      	cmp	r3, #0
 8011134:	d008      	beq.n	8011148 <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 8011136:	687b      	ldr	r3, [r7, #4]
 8011138:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801113a:	2b00      	cmp	r3, #0
 801113c:	d03a      	beq.n	80111b4 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 801113e:	687b      	ldr	r3, [r7, #4]
 8011140:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011142:	6878      	ldr	r0, [r7, #4]
 8011144:	4798      	blx	r3
    }
    return;
 8011146:	e035      	b.n	80111b4 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8011148:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801114c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011150:	2b00      	cmp	r3, #0
 8011152:	d009      	beq.n	8011168 <HAL_UART_IRQHandler+0x754>
 8011154:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8011158:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801115c:	2b00      	cmp	r3, #0
 801115e:	d003      	beq.n	8011168 <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 8011160:	6878      	ldr	r0, [r7, #4]
 8011162:	f001 f9cc 	bl	80124fe <UART_EndTransmit_IT>
    return;
 8011166:	e026      	b.n	80111b6 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8011168:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801116c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8011170:	2b00      	cmp	r3, #0
 8011172:	d009      	beq.n	8011188 <HAL_UART_IRQHandler+0x774>
 8011174:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8011178:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 801117c:	2b00      	cmp	r3, #0
 801117e:	d003      	beq.n	8011188 <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8011180:	6878      	ldr	r0, [r7, #4]
 8011182:	f001 f9fb 	bl	801257c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8011186:	e016      	b.n	80111b6 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8011188:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801118c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8011190:	2b00      	cmp	r3, #0
 8011192:	d010      	beq.n	80111b6 <HAL_UART_IRQHandler+0x7a2>
 8011194:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8011198:	2b00      	cmp	r3, #0
 801119a:	da0c      	bge.n	80111b6 <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 801119c:	6878      	ldr	r0, [r7, #4]
 801119e:	f001 f9e3 	bl	8012568 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80111a2:	e008      	b.n	80111b6 <HAL_UART_IRQHandler+0x7a2>
      return;
 80111a4:	bf00      	nop
 80111a6:	e006      	b.n	80111b6 <HAL_UART_IRQHandler+0x7a2>
    return;
 80111a8:	bf00      	nop
 80111aa:	e004      	b.n	80111b6 <HAL_UART_IRQHandler+0x7a2>
      return;
 80111ac:	bf00      	nop
 80111ae:	e002      	b.n	80111b6 <HAL_UART_IRQHandler+0x7a2>
      return;
 80111b0:	bf00      	nop
 80111b2:	e000      	b.n	80111b6 <HAL_UART_IRQHandler+0x7a2>
    return;
 80111b4:	bf00      	nop
  }
}
 80111b6:	37e8      	adds	r7, #232	@ 0xe8
 80111b8:	46bd      	mov	sp, r7
 80111ba:	bd80      	pop	{r7, pc}
 80111bc:	effffffe 	.word	0xeffffffe

080111c0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80111c0:	b480      	push	{r7}
 80111c2:	b083      	sub	sp, #12
 80111c4:	af00      	add	r7, sp, #0
 80111c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80111c8:	bf00      	nop
 80111ca:	370c      	adds	r7, #12
 80111cc:	46bd      	mov	sp, r7
 80111ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111d2:	4770      	bx	lr

080111d4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80111d4:	b480      	push	{r7}
 80111d6:	b083      	sub	sp, #12
 80111d8:	af00      	add	r7, sp, #0
 80111da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80111dc:	bf00      	nop
 80111de:	370c      	adds	r7, #12
 80111e0:	46bd      	mov	sp, r7
 80111e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111e6:	4770      	bx	lr

080111e8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80111e8:	b480      	push	{r7}
 80111ea:	b083      	sub	sp, #12
 80111ec:	af00      	add	r7, sp, #0
 80111ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80111f0:	bf00      	nop
 80111f2:	370c      	adds	r7, #12
 80111f4:	46bd      	mov	sp, r7
 80111f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111fa:	4770      	bx	lr

080111fc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80111fc:	b480      	push	{r7}
 80111fe:	b083      	sub	sp, #12
 8011200:	af00      	add	r7, sp, #0
 8011202:	6078      	str	r0, [r7, #4]
 8011204:	460b      	mov	r3, r1
 8011206:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8011208:	bf00      	nop
 801120a:	370c      	adds	r7, #12
 801120c:	46bd      	mov	sp, r7
 801120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011212:	4770      	bx	lr

08011214 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8011214:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011218:	b092      	sub	sp, #72	@ 0x48
 801121a:	af00      	add	r7, sp, #0
 801121c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801121e:	2300      	movs	r3, #0
 8011220:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8011224:	697b      	ldr	r3, [r7, #20]
 8011226:	689a      	ldr	r2, [r3, #8]
 8011228:	697b      	ldr	r3, [r7, #20]
 801122a:	691b      	ldr	r3, [r3, #16]
 801122c:	431a      	orrs	r2, r3
 801122e:	697b      	ldr	r3, [r7, #20]
 8011230:	695b      	ldr	r3, [r3, #20]
 8011232:	431a      	orrs	r2, r3
 8011234:	697b      	ldr	r3, [r7, #20]
 8011236:	69db      	ldr	r3, [r3, #28]
 8011238:	4313      	orrs	r3, r2
 801123a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801123c:	697b      	ldr	r3, [r7, #20]
 801123e:	681b      	ldr	r3, [r3, #0]
 8011240:	681a      	ldr	r2, [r3, #0]
 8011242:	4bbe      	ldr	r3, [pc, #760]	@ (801153c <UART_SetConfig+0x328>)
 8011244:	4013      	ands	r3, r2
 8011246:	697a      	ldr	r2, [r7, #20]
 8011248:	6812      	ldr	r2, [r2, #0]
 801124a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 801124c:	430b      	orrs	r3, r1
 801124e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8011250:	697b      	ldr	r3, [r7, #20]
 8011252:	681b      	ldr	r3, [r3, #0]
 8011254:	685b      	ldr	r3, [r3, #4]
 8011256:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 801125a:	697b      	ldr	r3, [r7, #20]
 801125c:	68da      	ldr	r2, [r3, #12]
 801125e:	697b      	ldr	r3, [r7, #20]
 8011260:	681b      	ldr	r3, [r3, #0]
 8011262:	430a      	orrs	r2, r1
 8011264:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8011266:	697b      	ldr	r3, [r7, #20]
 8011268:	699b      	ldr	r3, [r3, #24]
 801126a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 801126c:	697b      	ldr	r3, [r7, #20]
 801126e:	681b      	ldr	r3, [r3, #0]
 8011270:	4ab3      	ldr	r2, [pc, #716]	@ (8011540 <UART_SetConfig+0x32c>)
 8011272:	4293      	cmp	r3, r2
 8011274:	d004      	beq.n	8011280 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8011276:	697b      	ldr	r3, [r7, #20]
 8011278:	6a1b      	ldr	r3, [r3, #32]
 801127a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801127c:	4313      	orrs	r3, r2
 801127e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8011280:	697b      	ldr	r3, [r7, #20]
 8011282:	681b      	ldr	r3, [r3, #0]
 8011284:	689a      	ldr	r2, [r3, #8]
 8011286:	4baf      	ldr	r3, [pc, #700]	@ (8011544 <UART_SetConfig+0x330>)
 8011288:	4013      	ands	r3, r2
 801128a:	697a      	ldr	r2, [r7, #20]
 801128c:	6812      	ldr	r2, [r2, #0]
 801128e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8011290:	430b      	orrs	r3, r1
 8011292:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8011294:	697b      	ldr	r3, [r7, #20]
 8011296:	681b      	ldr	r3, [r3, #0]
 8011298:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801129a:	f023 010f 	bic.w	r1, r3, #15
 801129e:	697b      	ldr	r3, [r7, #20]
 80112a0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80112a2:	697b      	ldr	r3, [r7, #20]
 80112a4:	681b      	ldr	r3, [r3, #0]
 80112a6:	430a      	orrs	r2, r1
 80112a8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80112aa:	697b      	ldr	r3, [r7, #20]
 80112ac:	681b      	ldr	r3, [r3, #0]
 80112ae:	4aa6      	ldr	r2, [pc, #664]	@ (8011548 <UART_SetConfig+0x334>)
 80112b0:	4293      	cmp	r3, r2
 80112b2:	d177      	bne.n	80113a4 <UART_SetConfig+0x190>
 80112b4:	4ba5      	ldr	r3, [pc, #660]	@ (801154c <UART_SetConfig+0x338>)
 80112b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80112b8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80112bc:	2b28      	cmp	r3, #40	@ 0x28
 80112be:	d86d      	bhi.n	801139c <UART_SetConfig+0x188>
 80112c0:	a201      	add	r2, pc, #4	@ (adr r2, 80112c8 <UART_SetConfig+0xb4>)
 80112c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80112c6:	bf00      	nop
 80112c8:	0801136d 	.word	0x0801136d
 80112cc:	0801139d 	.word	0x0801139d
 80112d0:	0801139d 	.word	0x0801139d
 80112d4:	0801139d 	.word	0x0801139d
 80112d8:	0801139d 	.word	0x0801139d
 80112dc:	0801139d 	.word	0x0801139d
 80112e0:	0801139d 	.word	0x0801139d
 80112e4:	0801139d 	.word	0x0801139d
 80112e8:	08011375 	.word	0x08011375
 80112ec:	0801139d 	.word	0x0801139d
 80112f0:	0801139d 	.word	0x0801139d
 80112f4:	0801139d 	.word	0x0801139d
 80112f8:	0801139d 	.word	0x0801139d
 80112fc:	0801139d 	.word	0x0801139d
 8011300:	0801139d 	.word	0x0801139d
 8011304:	0801139d 	.word	0x0801139d
 8011308:	0801137d 	.word	0x0801137d
 801130c:	0801139d 	.word	0x0801139d
 8011310:	0801139d 	.word	0x0801139d
 8011314:	0801139d 	.word	0x0801139d
 8011318:	0801139d 	.word	0x0801139d
 801131c:	0801139d 	.word	0x0801139d
 8011320:	0801139d 	.word	0x0801139d
 8011324:	0801139d 	.word	0x0801139d
 8011328:	08011385 	.word	0x08011385
 801132c:	0801139d 	.word	0x0801139d
 8011330:	0801139d 	.word	0x0801139d
 8011334:	0801139d 	.word	0x0801139d
 8011338:	0801139d 	.word	0x0801139d
 801133c:	0801139d 	.word	0x0801139d
 8011340:	0801139d 	.word	0x0801139d
 8011344:	0801139d 	.word	0x0801139d
 8011348:	0801138d 	.word	0x0801138d
 801134c:	0801139d 	.word	0x0801139d
 8011350:	0801139d 	.word	0x0801139d
 8011354:	0801139d 	.word	0x0801139d
 8011358:	0801139d 	.word	0x0801139d
 801135c:	0801139d 	.word	0x0801139d
 8011360:	0801139d 	.word	0x0801139d
 8011364:	0801139d 	.word	0x0801139d
 8011368:	08011395 	.word	0x08011395
 801136c:	2301      	movs	r3, #1
 801136e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011372:	e222      	b.n	80117ba <UART_SetConfig+0x5a6>
 8011374:	2304      	movs	r3, #4
 8011376:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801137a:	e21e      	b.n	80117ba <UART_SetConfig+0x5a6>
 801137c:	2308      	movs	r3, #8
 801137e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011382:	e21a      	b.n	80117ba <UART_SetConfig+0x5a6>
 8011384:	2310      	movs	r3, #16
 8011386:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801138a:	e216      	b.n	80117ba <UART_SetConfig+0x5a6>
 801138c:	2320      	movs	r3, #32
 801138e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011392:	e212      	b.n	80117ba <UART_SetConfig+0x5a6>
 8011394:	2340      	movs	r3, #64	@ 0x40
 8011396:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801139a:	e20e      	b.n	80117ba <UART_SetConfig+0x5a6>
 801139c:	2380      	movs	r3, #128	@ 0x80
 801139e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80113a2:	e20a      	b.n	80117ba <UART_SetConfig+0x5a6>
 80113a4:	697b      	ldr	r3, [r7, #20]
 80113a6:	681b      	ldr	r3, [r3, #0]
 80113a8:	4a69      	ldr	r2, [pc, #420]	@ (8011550 <UART_SetConfig+0x33c>)
 80113aa:	4293      	cmp	r3, r2
 80113ac:	d130      	bne.n	8011410 <UART_SetConfig+0x1fc>
 80113ae:	4b67      	ldr	r3, [pc, #412]	@ (801154c <UART_SetConfig+0x338>)
 80113b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80113b2:	f003 0307 	and.w	r3, r3, #7
 80113b6:	2b05      	cmp	r3, #5
 80113b8:	d826      	bhi.n	8011408 <UART_SetConfig+0x1f4>
 80113ba:	a201      	add	r2, pc, #4	@ (adr r2, 80113c0 <UART_SetConfig+0x1ac>)
 80113bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80113c0:	080113d9 	.word	0x080113d9
 80113c4:	080113e1 	.word	0x080113e1
 80113c8:	080113e9 	.word	0x080113e9
 80113cc:	080113f1 	.word	0x080113f1
 80113d0:	080113f9 	.word	0x080113f9
 80113d4:	08011401 	.word	0x08011401
 80113d8:	2300      	movs	r3, #0
 80113da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80113de:	e1ec      	b.n	80117ba <UART_SetConfig+0x5a6>
 80113e0:	2304      	movs	r3, #4
 80113e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80113e6:	e1e8      	b.n	80117ba <UART_SetConfig+0x5a6>
 80113e8:	2308      	movs	r3, #8
 80113ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80113ee:	e1e4      	b.n	80117ba <UART_SetConfig+0x5a6>
 80113f0:	2310      	movs	r3, #16
 80113f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80113f6:	e1e0      	b.n	80117ba <UART_SetConfig+0x5a6>
 80113f8:	2320      	movs	r3, #32
 80113fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80113fe:	e1dc      	b.n	80117ba <UART_SetConfig+0x5a6>
 8011400:	2340      	movs	r3, #64	@ 0x40
 8011402:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011406:	e1d8      	b.n	80117ba <UART_SetConfig+0x5a6>
 8011408:	2380      	movs	r3, #128	@ 0x80
 801140a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801140e:	e1d4      	b.n	80117ba <UART_SetConfig+0x5a6>
 8011410:	697b      	ldr	r3, [r7, #20]
 8011412:	681b      	ldr	r3, [r3, #0]
 8011414:	4a4f      	ldr	r2, [pc, #316]	@ (8011554 <UART_SetConfig+0x340>)
 8011416:	4293      	cmp	r3, r2
 8011418:	d130      	bne.n	801147c <UART_SetConfig+0x268>
 801141a:	4b4c      	ldr	r3, [pc, #304]	@ (801154c <UART_SetConfig+0x338>)
 801141c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801141e:	f003 0307 	and.w	r3, r3, #7
 8011422:	2b05      	cmp	r3, #5
 8011424:	d826      	bhi.n	8011474 <UART_SetConfig+0x260>
 8011426:	a201      	add	r2, pc, #4	@ (adr r2, 801142c <UART_SetConfig+0x218>)
 8011428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801142c:	08011445 	.word	0x08011445
 8011430:	0801144d 	.word	0x0801144d
 8011434:	08011455 	.word	0x08011455
 8011438:	0801145d 	.word	0x0801145d
 801143c:	08011465 	.word	0x08011465
 8011440:	0801146d 	.word	0x0801146d
 8011444:	2300      	movs	r3, #0
 8011446:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801144a:	e1b6      	b.n	80117ba <UART_SetConfig+0x5a6>
 801144c:	2304      	movs	r3, #4
 801144e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011452:	e1b2      	b.n	80117ba <UART_SetConfig+0x5a6>
 8011454:	2308      	movs	r3, #8
 8011456:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801145a:	e1ae      	b.n	80117ba <UART_SetConfig+0x5a6>
 801145c:	2310      	movs	r3, #16
 801145e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011462:	e1aa      	b.n	80117ba <UART_SetConfig+0x5a6>
 8011464:	2320      	movs	r3, #32
 8011466:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801146a:	e1a6      	b.n	80117ba <UART_SetConfig+0x5a6>
 801146c:	2340      	movs	r3, #64	@ 0x40
 801146e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011472:	e1a2      	b.n	80117ba <UART_SetConfig+0x5a6>
 8011474:	2380      	movs	r3, #128	@ 0x80
 8011476:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801147a:	e19e      	b.n	80117ba <UART_SetConfig+0x5a6>
 801147c:	697b      	ldr	r3, [r7, #20]
 801147e:	681b      	ldr	r3, [r3, #0]
 8011480:	4a35      	ldr	r2, [pc, #212]	@ (8011558 <UART_SetConfig+0x344>)
 8011482:	4293      	cmp	r3, r2
 8011484:	d130      	bne.n	80114e8 <UART_SetConfig+0x2d4>
 8011486:	4b31      	ldr	r3, [pc, #196]	@ (801154c <UART_SetConfig+0x338>)
 8011488:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801148a:	f003 0307 	and.w	r3, r3, #7
 801148e:	2b05      	cmp	r3, #5
 8011490:	d826      	bhi.n	80114e0 <UART_SetConfig+0x2cc>
 8011492:	a201      	add	r2, pc, #4	@ (adr r2, 8011498 <UART_SetConfig+0x284>)
 8011494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011498:	080114b1 	.word	0x080114b1
 801149c:	080114b9 	.word	0x080114b9
 80114a0:	080114c1 	.word	0x080114c1
 80114a4:	080114c9 	.word	0x080114c9
 80114a8:	080114d1 	.word	0x080114d1
 80114ac:	080114d9 	.word	0x080114d9
 80114b0:	2300      	movs	r3, #0
 80114b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80114b6:	e180      	b.n	80117ba <UART_SetConfig+0x5a6>
 80114b8:	2304      	movs	r3, #4
 80114ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80114be:	e17c      	b.n	80117ba <UART_SetConfig+0x5a6>
 80114c0:	2308      	movs	r3, #8
 80114c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80114c6:	e178      	b.n	80117ba <UART_SetConfig+0x5a6>
 80114c8:	2310      	movs	r3, #16
 80114ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80114ce:	e174      	b.n	80117ba <UART_SetConfig+0x5a6>
 80114d0:	2320      	movs	r3, #32
 80114d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80114d6:	e170      	b.n	80117ba <UART_SetConfig+0x5a6>
 80114d8:	2340      	movs	r3, #64	@ 0x40
 80114da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80114de:	e16c      	b.n	80117ba <UART_SetConfig+0x5a6>
 80114e0:	2380      	movs	r3, #128	@ 0x80
 80114e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80114e6:	e168      	b.n	80117ba <UART_SetConfig+0x5a6>
 80114e8:	697b      	ldr	r3, [r7, #20]
 80114ea:	681b      	ldr	r3, [r3, #0]
 80114ec:	4a1b      	ldr	r2, [pc, #108]	@ (801155c <UART_SetConfig+0x348>)
 80114ee:	4293      	cmp	r3, r2
 80114f0:	d142      	bne.n	8011578 <UART_SetConfig+0x364>
 80114f2:	4b16      	ldr	r3, [pc, #88]	@ (801154c <UART_SetConfig+0x338>)
 80114f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80114f6:	f003 0307 	and.w	r3, r3, #7
 80114fa:	2b05      	cmp	r3, #5
 80114fc:	d838      	bhi.n	8011570 <UART_SetConfig+0x35c>
 80114fe:	a201      	add	r2, pc, #4	@ (adr r2, 8011504 <UART_SetConfig+0x2f0>)
 8011500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011504:	0801151d 	.word	0x0801151d
 8011508:	08011525 	.word	0x08011525
 801150c:	0801152d 	.word	0x0801152d
 8011510:	08011535 	.word	0x08011535
 8011514:	08011561 	.word	0x08011561
 8011518:	08011569 	.word	0x08011569
 801151c:	2300      	movs	r3, #0
 801151e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011522:	e14a      	b.n	80117ba <UART_SetConfig+0x5a6>
 8011524:	2304      	movs	r3, #4
 8011526:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801152a:	e146      	b.n	80117ba <UART_SetConfig+0x5a6>
 801152c:	2308      	movs	r3, #8
 801152e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011532:	e142      	b.n	80117ba <UART_SetConfig+0x5a6>
 8011534:	2310      	movs	r3, #16
 8011536:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801153a:	e13e      	b.n	80117ba <UART_SetConfig+0x5a6>
 801153c:	cfff69f3 	.word	0xcfff69f3
 8011540:	58000c00 	.word	0x58000c00
 8011544:	11fff4ff 	.word	0x11fff4ff
 8011548:	40011000 	.word	0x40011000
 801154c:	58024400 	.word	0x58024400
 8011550:	40004400 	.word	0x40004400
 8011554:	40004800 	.word	0x40004800
 8011558:	40004c00 	.word	0x40004c00
 801155c:	40005000 	.word	0x40005000
 8011560:	2320      	movs	r3, #32
 8011562:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011566:	e128      	b.n	80117ba <UART_SetConfig+0x5a6>
 8011568:	2340      	movs	r3, #64	@ 0x40
 801156a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801156e:	e124      	b.n	80117ba <UART_SetConfig+0x5a6>
 8011570:	2380      	movs	r3, #128	@ 0x80
 8011572:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011576:	e120      	b.n	80117ba <UART_SetConfig+0x5a6>
 8011578:	697b      	ldr	r3, [r7, #20]
 801157a:	681b      	ldr	r3, [r3, #0]
 801157c:	4acb      	ldr	r2, [pc, #812]	@ (80118ac <UART_SetConfig+0x698>)
 801157e:	4293      	cmp	r3, r2
 8011580:	d176      	bne.n	8011670 <UART_SetConfig+0x45c>
 8011582:	4bcb      	ldr	r3, [pc, #812]	@ (80118b0 <UART_SetConfig+0x69c>)
 8011584:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011586:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801158a:	2b28      	cmp	r3, #40	@ 0x28
 801158c:	d86c      	bhi.n	8011668 <UART_SetConfig+0x454>
 801158e:	a201      	add	r2, pc, #4	@ (adr r2, 8011594 <UART_SetConfig+0x380>)
 8011590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011594:	08011639 	.word	0x08011639
 8011598:	08011669 	.word	0x08011669
 801159c:	08011669 	.word	0x08011669
 80115a0:	08011669 	.word	0x08011669
 80115a4:	08011669 	.word	0x08011669
 80115a8:	08011669 	.word	0x08011669
 80115ac:	08011669 	.word	0x08011669
 80115b0:	08011669 	.word	0x08011669
 80115b4:	08011641 	.word	0x08011641
 80115b8:	08011669 	.word	0x08011669
 80115bc:	08011669 	.word	0x08011669
 80115c0:	08011669 	.word	0x08011669
 80115c4:	08011669 	.word	0x08011669
 80115c8:	08011669 	.word	0x08011669
 80115cc:	08011669 	.word	0x08011669
 80115d0:	08011669 	.word	0x08011669
 80115d4:	08011649 	.word	0x08011649
 80115d8:	08011669 	.word	0x08011669
 80115dc:	08011669 	.word	0x08011669
 80115e0:	08011669 	.word	0x08011669
 80115e4:	08011669 	.word	0x08011669
 80115e8:	08011669 	.word	0x08011669
 80115ec:	08011669 	.word	0x08011669
 80115f0:	08011669 	.word	0x08011669
 80115f4:	08011651 	.word	0x08011651
 80115f8:	08011669 	.word	0x08011669
 80115fc:	08011669 	.word	0x08011669
 8011600:	08011669 	.word	0x08011669
 8011604:	08011669 	.word	0x08011669
 8011608:	08011669 	.word	0x08011669
 801160c:	08011669 	.word	0x08011669
 8011610:	08011669 	.word	0x08011669
 8011614:	08011659 	.word	0x08011659
 8011618:	08011669 	.word	0x08011669
 801161c:	08011669 	.word	0x08011669
 8011620:	08011669 	.word	0x08011669
 8011624:	08011669 	.word	0x08011669
 8011628:	08011669 	.word	0x08011669
 801162c:	08011669 	.word	0x08011669
 8011630:	08011669 	.word	0x08011669
 8011634:	08011661 	.word	0x08011661
 8011638:	2301      	movs	r3, #1
 801163a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801163e:	e0bc      	b.n	80117ba <UART_SetConfig+0x5a6>
 8011640:	2304      	movs	r3, #4
 8011642:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011646:	e0b8      	b.n	80117ba <UART_SetConfig+0x5a6>
 8011648:	2308      	movs	r3, #8
 801164a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801164e:	e0b4      	b.n	80117ba <UART_SetConfig+0x5a6>
 8011650:	2310      	movs	r3, #16
 8011652:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011656:	e0b0      	b.n	80117ba <UART_SetConfig+0x5a6>
 8011658:	2320      	movs	r3, #32
 801165a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801165e:	e0ac      	b.n	80117ba <UART_SetConfig+0x5a6>
 8011660:	2340      	movs	r3, #64	@ 0x40
 8011662:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011666:	e0a8      	b.n	80117ba <UART_SetConfig+0x5a6>
 8011668:	2380      	movs	r3, #128	@ 0x80
 801166a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801166e:	e0a4      	b.n	80117ba <UART_SetConfig+0x5a6>
 8011670:	697b      	ldr	r3, [r7, #20]
 8011672:	681b      	ldr	r3, [r3, #0]
 8011674:	4a8f      	ldr	r2, [pc, #572]	@ (80118b4 <UART_SetConfig+0x6a0>)
 8011676:	4293      	cmp	r3, r2
 8011678:	d130      	bne.n	80116dc <UART_SetConfig+0x4c8>
 801167a:	4b8d      	ldr	r3, [pc, #564]	@ (80118b0 <UART_SetConfig+0x69c>)
 801167c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801167e:	f003 0307 	and.w	r3, r3, #7
 8011682:	2b05      	cmp	r3, #5
 8011684:	d826      	bhi.n	80116d4 <UART_SetConfig+0x4c0>
 8011686:	a201      	add	r2, pc, #4	@ (adr r2, 801168c <UART_SetConfig+0x478>)
 8011688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801168c:	080116a5 	.word	0x080116a5
 8011690:	080116ad 	.word	0x080116ad
 8011694:	080116b5 	.word	0x080116b5
 8011698:	080116bd 	.word	0x080116bd
 801169c:	080116c5 	.word	0x080116c5
 80116a0:	080116cd 	.word	0x080116cd
 80116a4:	2300      	movs	r3, #0
 80116a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80116aa:	e086      	b.n	80117ba <UART_SetConfig+0x5a6>
 80116ac:	2304      	movs	r3, #4
 80116ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80116b2:	e082      	b.n	80117ba <UART_SetConfig+0x5a6>
 80116b4:	2308      	movs	r3, #8
 80116b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80116ba:	e07e      	b.n	80117ba <UART_SetConfig+0x5a6>
 80116bc:	2310      	movs	r3, #16
 80116be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80116c2:	e07a      	b.n	80117ba <UART_SetConfig+0x5a6>
 80116c4:	2320      	movs	r3, #32
 80116c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80116ca:	e076      	b.n	80117ba <UART_SetConfig+0x5a6>
 80116cc:	2340      	movs	r3, #64	@ 0x40
 80116ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80116d2:	e072      	b.n	80117ba <UART_SetConfig+0x5a6>
 80116d4:	2380      	movs	r3, #128	@ 0x80
 80116d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80116da:	e06e      	b.n	80117ba <UART_SetConfig+0x5a6>
 80116dc:	697b      	ldr	r3, [r7, #20]
 80116de:	681b      	ldr	r3, [r3, #0]
 80116e0:	4a75      	ldr	r2, [pc, #468]	@ (80118b8 <UART_SetConfig+0x6a4>)
 80116e2:	4293      	cmp	r3, r2
 80116e4:	d130      	bne.n	8011748 <UART_SetConfig+0x534>
 80116e6:	4b72      	ldr	r3, [pc, #456]	@ (80118b0 <UART_SetConfig+0x69c>)
 80116e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80116ea:	f003 0307 	and.w	r3, r3, #7
 80116ee:	2b05      	cmp	r3, #5
 80116f0:	d826      	bhi.n	8011740 <UART_SetConfig+0x52c>
 80116f2:	a201      	add	r2, pc, #4	@ (adr r2, 80116f8 <UART_SetConfig+0x4e4>)
 80116f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80116f8:	08011711 	.word	0x08011711
 80116fc:	08011719 	.word	0x08011719
 8011700:	08011721 	.word	0x08011721
 8011704:	08011729 	.word	0x08011729
 8011708:	08011731 	.word	0x08011731
 801170c:	08011739 	.word	0x08011739
 8011710:	2300      	movs	r3, #0
 8011712:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011716:	e050      	b.n	80117ba <UART_SetConfig+0x5a6>
 8011718:	2304      	movs	r3, #4
 801171a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801171e:	e04c      	b.n	80117ba <UART_SetConfig+0x5a6>
 8011720:	2308      	movs	r3, #8
 8011722:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011726:	e048      	b.n	80117ba <UART_SetConfig+0x5a6>
 8011728:	2310      	movs	r3, #16
 801172a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801172e:	e044      	b.n	80117ba <UART_SetConfig+0x5a6>
 8011730:	2320      	movs	r3, #32
 8011732:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011736:	e040      	b.n	80117ba <UART_SetConfig+0x5a6>
 8011738:	2340      	movs	r3, #64	@ 0x40
 801173a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801173e:	e03c      	b.n	80117ba <UART_SetConfig+0x5a6>
 8011740:	2380      	movs	r3, #128	@ 0x80
 8011742:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011746:	e038      	b.n	80117ba <UART_SetConfig+0x5a6>
 8011748:	697b      	ldr	r3, [r7, #20]
 801174a:	681b      	ldr	r3, [r3, #0]
 801174c:	4a5b      	ldr	r2, [pc, #364]	@ (80118bc <UART_SetConfig+0x6a8>)
 801174e:	4293      	cmp	r3, r2
 8011750:	d130      	bne.n	80117b4 <UART_SetConfig+0x5a0>
 8011752:	4b57      	ldr	r3, [pc, #348]	@ (80118b0 <UART_SetConfig+0x69c>)
 8011754:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011756:	f003 0307 	and.w	r3, r3, #7
 801175a:	2b05      	cmp	r3, #5
 801175c:	d826      	bhi.n	80117ac <UART_SetConfig+0x598>
 801175e:	a201      	add	r2, pc, #4	@ (adr r2, 8011764 <UART_SetConfig+0x550>)
 8011760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011764:	0801177d 	.word	0x0801177d
 8011768:	08011785 	.word	0x08011785
 801176c:	0801178d 	.word	0x0801178d
 8011770:	08011795 	.word	0x08011795
 8011774:	0801179d 	.word	0x0801179d
 8011778:	080117a5 	.word	0x080117a5
 801177c:	2302      	movs	r3, #2
 801177e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011782:	e01a      	b.n	80117ba <UART_SetConfig+0x5a6>
 8011784:	2304      	movs	r3, #4
 8011786:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801178a:	e016      	b.n	80117ba <UART_SetConfig+0x5a6>
 801178c:	2308      	movs	r3, #8
 801178e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011792:	e012      	b.n	80117ba <UART_SetConfig+0x5a6>
 8011794:	2310      	movs	r3, #16
 8011796:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801179a:	e00e      	b.n	80117ba <UART_SetConfig+0x5a6>
 801179c:	2320      	movs	r3, #32
 801179e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80117a2:	e00a      	b.n	80117ba <UART_SetConfig+0x5a6>
 80117a4:	2340      	movs	r3, #64	@ 0x40
 80117a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80117aa:	e006      	b.n	80117ba <UART_SetConfig+0x5a6>
 80117ac:	2380      	movs	r3, #128	@ 0x80
 80117ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80117b2:	e002      	b.n	80117ba <UART_SetConfig+0x5a6>
 80117b4:	2380      	movs	r3, #128	@ 0x80
 80117b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80117ba:	697b      	ldr	r3, [r7, #20]
 80117bc:	681b      	ldr	r3, [r3, #0]
 80117be:	4a3f      	ldr	r2, [pc, #252]	@ (80118bc <UART_SetConfig+0x6a8>)
 80117c0:	4293      	cmp	r3, r2
 80117c2:	f040 80f8 	bne.w	80119b6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80117c6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80117ca:	2b20      	cmp	r3, #32
 80117cc:	dc46      	bgt.n	801185c <UART_SetConfig+0x648>
 80117ce:	2b02      	cmp	r3, #2
 80117d0:	f2c0 8082 	blt.w	80118d8 <UART_SetConfig+0x6c4>
 80117d4:	3b02      	subs	r3, #2
 80117d6:	2b1e      	cmp	r3, #30
 80117d8:	d87e      	bhi.n	80118d8 <UART_SetConfig+0x6c4>
 80117da:	a201      	add	r2, pc, #4	@ (adr r2, 80117e0 <UART_SetConfig+0x5cc>)
 80117dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80117e0:	08011863 	.word	0x08011863
 80117e4:	080118d9 	.word	0x080118d9
 80117e8:	0801186b 	.word	0x0801186b
 80117ec:	080118d9 	.word	0x080118d9
 80117f0:	080118d9 	.word	0x080118d9
 80117f4:	080118d9 	.word	0x080118d9
 80117f8:	0801187b 	.word	0x0801187b
 80117fc:	080118d9 	.word	0x080118d9
 8011800:	080118d9 	.word	0x080118d9
 8011804:	080118d9 	.word	0x080118d9
 8011808:	080118d9 	.word	0x080118d9
 801180c:	080118d9 	.word	0x080118d9
 8011810:	080118d9 	.word	0x080118d9
 8011814:	080118d9 	.word	0x080118d9
 8011818:	0801188b 	.word	0x0801188b
 801181c:	080118d9 	.word	0x080118d9
 8011820:	080118d9 	.word	0x080118d9
 8011824:	080118d9 	.word	0x080118d9
 8011828:	080118d9 	.word	0x080118d9
 801182c:	080118d9 	.word	0x080118d9
 8011830:	080118d9 	.word	0x080118d9
 8011834:	080118d9 	.word	0x080118d9
 8011838:	080118d9 	.word	0x080118d9
 801183c:	080118d9 	.word	0x080118d9
 8011840:	080118d9 	.word	0x080118d9
 8011844:	080118d9 	.word	0x080118d9
 8011848:	080118d9 	.word	0x080118d9
 801184c:	080118d9 	.word	0x080118d9
 8011850:	080118d9 	.word	0x080118d9
 8011854:	080118d9 	.word	0x080118d9
 8011858:	080118cb 	.word	0x080118cb
 801185c:	2b40      	cmp	r3, #64	@ 0x40
 801185e:	d037      	beq.n	80118d0 <UART_SetConfig+0x6bc>
 8011860:	e03a      	b.n	80118d8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8011862:	f7fd f97b 	bl	800eb5c <HAL_RCCEx_GetD3PCLK1Freq>
 8011866:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8011868:	e03c      	b.n	80118e4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801186a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801186e:	4618      	mov	r0, r3
 8011870:	f7fd f98a 	bl	800eb88 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011874:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011876:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011878:	e034      	b.n	80118e4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801187a:	f107 0318 	add.w	r3, r7, #24
 801187e:	4618      	mov	r0, r3
 8011880:	f7fd fad6 	bl	800ee30 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011884:	69fb      	ldr	r3, [r7, #28]
 8011886:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011888:	e02c      	b.n	80118e4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801188a:	4b09      	ldr	r3, [pc, #36]	@ (80118b0 <UART_SetConfig+0x69c>)
 801188c:	681b      	ldr	r3, [r3, #0]
 801188e:	f003 0320 	and.w	r3, r3, #32
 8011892:	2b00      	cmp	r3, #0
 8011894:	d016      	beq.n	80118c4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8011896:	4b06      	ldr	r3, [pc, #24]	@ (80118b0 <UART_SetConfig+0x69c>)
 8011898:	681b      	ldr	r3, [r3, #0]
 801189a:	08db      	lsrs	r3, r3, #3
 801189c:	f003 0303 	and.w	r3, r3, #3
 80118a0:	4a07      	ldr	r2, [pc, #28]	@ (80118c0 <UART_SetConfig+0x6ac>)
 80118a2:	fa22 f303 	lsr.w	r3, r2, r3
 80118a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80118a8:	e01c      	b.n	80118e4 <UART_SetConfig+0x6d0>
 80118aa:	bf00      	nop
 80118ac:	40011400 	.word	0x40011400
 80118b0:	58024400 	.word	0x58024400
 80118b4:	40007800 	.word	0x40007800
 80118b8:	40007c00 	.word	0x40007c00
 80118bc:	58000c00 	.word	0x58000c00
 80118c0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80118c4:	4b9d      	ldr	r3, [pc, #628]	@ (8011b3c <UART_SetConfig+0x928>)
 80118c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80118c8:	e00c      	b.n	80118e4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80118ca:	4b9d      	ldr	r3, [pc, #628]	@ (8011b40 <UART_SetConfig+0x92c>)
 80118cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80118ce:	e009      	b.n	80118e4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80118d0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80118d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80118d6:	e005      	b.n	80118e4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80118d8:	2300      	movs	r3, #0
 80118da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80118dc:	2301      	movs	r3, #1
 80118de:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80118e2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80118e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80118e6:	2b00      	cmp	r3, #0
 80118e8:	f000 81de 	beq.w	8011ca8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80118ec:	697b      	ldr	r3, [r7, #20]
 80118ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80118f0:	4a94      	ldr	r2, [pc, #592]	@ (8011b44 <UART_SetConfig+0x930>)
 80118f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80118f6:	461a      	mov	r2, r3
 80118f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80118fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80118fe:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8011900:	697b      	ldr	r3, [r7, #20]
 8011902:	685a      	ldr	r2, [r3, #4]
 8011904:	4613      	mov	r3, r2
 8011906:	005b      	lsls	r3, r3, #1
 8011908:	4413      	add	r3, r2
 801190a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801190c:	429a      	cmp	r2, r3
 801190e:	d305      	bcc.n	801191c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8011910:	697b      	ldr	r3, [r7, #20]
 8011912:	685b      	ldr	r3, [r3, #4]
 8011914:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8011916:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011918:	429a      	cmp	r2, r3
 801191a:	d903      	bls.n	8011924 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 801191c:	2301      	movs	r3, #1
 801191e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8011922:	e1c1      	b.n	8011ca8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011924:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011926:	2200      	movs	r2, #0
 8011928:	60bb      	str	r3, [r7, #8]
 801192a:	60fa      	str	r2, [r7, #12]
 801192c:	697b      	ldr	r3, [r7, #20]
 801192e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011930:	4a84      	ldr	r2, [pc, #528]	@ (8011b44 <UART_SetConfig+0x930>)
 8011932:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011936:	b29b      	uxth	r3, r3
 8011938:	2200      	movs	r2, #0
 801193a:	603b      	str	r3, [r7, #0]
 801193c:	607a      	str	r2, [r7, #4]
 801193e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011942:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8011946:	f7ee fd23 	bl	8000390 <__aeabi_uldivmod>
 801194a:	4602      	mov	r2, r0
 801194c:	460b      	mov	r3, r1
 801194e:	4610      	mov	r0, r2
 8011950:	4619      	mov	r1, r3
 8011952:	f04f 0200 	mov.w	r2, #0
 8011956:	f04f 0300 	mov.w	r3, #0
 801195a:	020b      	lsls	r3, r1, #8
 801195c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8011960:	0202      	lsls	r2, r0, #8
 8011962:	6979      	ldr	r1, [r7, #20]
 8011964:	6849      	ldr	r1, [r1, #4]
 8011966:	0849      	lsrs	r1, r1, #1
 8011968:	2000      	movs	r0, #0
 801196a:	460c      	mov	r4, r1
 801196c:	4605      	mov	r5, r0
 801196e:	eb12 0804 	adds.w	r8, r2, r4
 8011972:	eb43 0905 	adc.w	r9, r3, r5
 8011976:	697b      	ldr	r3, [r7, #20]
 8011978:	685b      	ldr	r3, [r3, #4]
 801197a:	2200      	movs	r2, #0
 801197c:	469a      	mov	sl, r3
 801197e:	4693      	mov	fp, r2
 8011980:	4652      	mov	r2, sl
 8011982:	465b      	mov	r3, fp
 8011984:	4640      	mov	r0, r8
 8011986:	4649      	mov	r1, r9
 8011988:	f7ee fd02 	bl	8000390 <__aeabi_uldivmod>
 801198c:	4602      	mov	r2, r0
 801198e:	460b      	mov	r3, r1
 8011990:	4613      	mov	r3, r2
 8011992:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8011994:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011996:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801199a:	d308      	bcc.n	80119ae <UART_SetConfig+0x79a>
 801199c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801199e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80119a2:	d204      	bcs.n	80119ae <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80119a4:	697b      	ldr	r3, [r7, #20]
 80119a6:	681b      	ldr	r3, [r3, #0]
 80119a8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80119aa:	60da      	str	r2, [r3, #12]
 80119ac:	e17c      	b.n	8011ca8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80119ae:	2301      	movs	r3, #1
 80119b0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80119b4:	e178      	b.n	8011ca8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80119b6:	697b      	ldr	r3, [r7, #20]
 80119b8:	69db      	ldr	r3, [r3, #28]
 80119ba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80119be:	f040 80c5 	bne.w	8011b4c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80119c2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80119c6:	2b20      	cmp	r3, #32
 80119c8:	dc48      	bgt.n	8011a5c <UART_SetConfig+0x848>
 80119ca:	2b00      	cmp	r3, #0
 80119cc:	db7b      	blt.n	8011ac6 <UART_SetConfig+0x8b2>
 80119ce:	2b20      	cmp	r3, #32
 80119d0:	d879      	bhi.n	8011ac6 <UART_SetConfig+0x8b2>
 80119d2:	a201      	add	r2, pc, #4	@ (adr r2, 80119d8 <UART_SetConfig+0x7c4>)
 80119d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80119d8:	08011a63 	.word	0x08011a63
 80119dc:	08011a6b 	.word	0x08011a6b
 80119e0:	08011ac7 	.word	0x08011ac7
 80119e4:	08011ac7 	.word	0x08011ac7
 80119e8:	08011a73 	.word	0x08011a73
 80119ec:	08011ac7 	.word	0x08011ac7
 80119f0:	08011ac7 	.word	0x08011ac7
 80119f4:	08011ac7 	.word	0x08011ac7
 80119f8:	08011a83 	.word	0x08011a83
 80119fc:	08011ac7 	.word	0x08011ac7
 8011a00:	08011ac7 	.word	0x08011ac7
 8011a04:	08011ac7 	.word	0x08011ac7
 8011a08:	08011ac7 	.word	0x08011ac7
 8011a0c:	08011ac7 	.word	0x08011ac7
 8011a10:	08011ac7 	.word	0x08011ac7
 8011a14:	08011ac7 	.word	0x08011ac7
 8011a18:	08011a93 	.word	0x08011a93
 8011a1c:	08011ac7 	.word	0x08011ac7
 8011a20:	08011ac7 	.word	0x08011ac7
 8011a24:	08011ac7 	.word	0x08011ac7
 8011a28:	08011ac7 	.word	0x08011ac7
 8011a2c:	08011ac7 	.word	0x08011ac7
 8011a30:	08011ac7 	.word	0x08011ac7
 8011a34:	08011ac7 	.word	0x08011ac7
 8011a38:	08011ac7 	.word	0x08011ac7
 8011a3c:	08011ac7 	.word	0x08011ac7
 8011a40:	08011ac7 	.word	0x08011ac7
 8011a44:	08011ac7 	.word	0x08011ac7
 8011a48:	08011ac7 	.word	0x08011ac7
 8011a4c:	08011ac7 	.word	0x08011ac7
 8011a50:	08011ac7 	.word	0x08011ac7
 8011a54:	08011ac7 	.word	0x08011ac7
 8011a58:	08011ab9 	.word	0x08011ab9
 8011a5c:	2b40      	cmp	r3, #64	@ 0x40
 8011a5e:	d02e      	beq.n	8011abe <UART_SetConfig+0x8aa>
 8011a60:	e031      	b.n	8011ac6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011a62:	f7fb fe45 	bl	800d6f0 <HAL_RCC_GetPCLK1Freq>
 8011a66:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8011a68:	e033      	b.n	8011ad2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011a6a:	f7fb fe57 	bl	800d71c <HAL_RCC_GetPCLK2Freq>
 8011a6e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8011a70:	e02f      	b.n	8011ad2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011a72:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8011a76:	4618      	mov	r0, r3
 8011a78:	f7fd f886 	bl	800eb88 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011a7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011a7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011a80:	e027      	b.n	8011ad2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011a82:	f107 0318 	add.w	r3, r7, #24
 8011a86:	4618      	mov	r0, r3
 8011a88:	f7fd f9d2 	bl	800ee30 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011a8c:	69fb      	ldr	r3, [r7, #28]
 8011a8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011a90:	e01f      	b.n	8011ad2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011a92:	4b2d      	ldr	r3, [pc, #180]	@ (8011b48 <UART_SetConfig+0x934>)
 8011a94:	681b      	ldr	r3, [r3, #0]
 8011a96:	f003 0320 	and.w	r3, r3, #32
 8011a9a:	2b00      	cmp	r3, #0
 8011a9c:	d009      	beq.n	8011ab2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8011a9e:	4b2a      	ldr	r3, [pc, #168]	@ (8011b48 <UART_SetConfig+0x934>)
 8011aa0:	681b      	ldr	r3, [r3, #0]
 8011aa2:	08db      	lsrs	r3, r3, #3
 8011aa4:	f003 0303 	and.w	r3, r3, #3
 8011aa8:	4a24      	ldr	r2, [pc, #144]	@ (8011b3c <UART_SetConfig+0x928>)
 8011aaa:	fa22 f303 	lsr.w	r3, r2, r3
 8011aae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011ab0:	e00f      	b.n	8011ad2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8011ab2:	4b22      	ldr	r3, [pc, #136]	@ (8011b3c <UART_SetConfig+0x928>)
 8011ab4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011ab6:	e00c      	b.n	8011ad2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011ab8:	4b21      	ldr	r3, [pc, #132]	@ (8011b40 <UART_SetConfig+0x92c>)
 8011aba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011abc:	e009      	b.n	8011ad2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011abe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8011ac2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011ac4:	e005      	b.n	8011ad2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8011ac6:	2300      	movs	r3, #0
 8011ac8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8011aca:	2301      	movs	r3, #1
 8011acc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8011ad0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8011ad2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011ad4:	2b00      	cmp	r3, #0
 8011ad6:	f000 80e7 	beq.w	8011ca8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011ada:	697b      	ldr	r3, [r7, #20]
 8011adc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011ade:	4a19      	ldr	r2, [pc, #100]	@ (8011b44 <UART_SetConfig+0x930>)
 8011ae0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011ae4:	461a      	mov	r2, r3
 8011ae6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011ae8:	fbb3 f3f2 	udiv	r3, r3, r2
 8011aec:	005a      	lsls	r2, r3, #1
 8011aee:	697b      	ldr	r3, [r7, #20]
 8011af0:	685b      	ldr	r3, [r3, #4]
 8011af2:	085b      	lsrs	r3, r3, #1
 8011af4:	441a      	add	r2, r3
 8011af6:	697b      	ldr	r3, [r7, #20]
 8011af8:	685b      	ldr	r3, [r3, #4]
 8011afa:	fbb2 f3f3 	udiv	r3, r2, r3
 8011afe:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011b00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011b02:	2b0f      	cmp	r3, #15
 8011b04:	d916      	bls.n	8011b34 <UART_SetConfig+0x920>
 8011b06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011b08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011b0c:	d212      	bcs.n	8011b34 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8011b0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011b10:	b29b      	uxth	r3, r3
 8011b12:	f023 030f 	bic.w	r3, r3, #15
 8011b16:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8011b18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011b1a:	085b      	lsrs	r3, r3, #1
 8011b1c:	b29b      	uxth	r3, r3
 8011b1e:	f003 0307 	and.w	r3, r3, #7
 8011b22:	b29a      	uxth	r2, r3
 8011b24:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8011b26:	4313      	orrs	r3, r2
 8011b28:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8011b2a:	697b      	ldr	r3, [r7, #20]
 8011b2c:	681b      	ldr	r3, [r3, #0]
 8011b2e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8011b30:	60da      	str	r2, [r3, #12]
 8011b32:	e0b9      	b.n	8011ca8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8011b34:	2301      	movs	r3, #1
 8011b36:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8011b3a:	e0b5      	b.n	8011ca8 <UART_SetConfig+0xa94>
 8011b3c:	03d09000 	.word	0x03d09000
 8011b40:	003d0900 	.word	0x003d0900
 8011b44:	08017a80 	.word	0x08017a80
 8011b48:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8011b4c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8011b50:	2b20      	cmp	r3, #32
 8011b52:	dc49      	bgt.n	8011be8 <UART_SetConfig+0x9d4>
 8011b54:	2b00      	cmp	r3, #0
 8011b56:	db7c      	blt.n	8011c52 <UART_SetConfig+0xa3e>
 8011b58:	2b20      	cmp	r3, #32
 8011b5a:	d87a      	bhi.n	8011c52 <UART_SetConfig+0xa3e>
 8011b5c:	a201      	add	r2, pc, #4	@ (adr r2, 8011b64 <UART_SetConfig+0x950>)
 8011b5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011b62:	bf00      	nop
 8011b64:	08011bef 	.word	0x08011bef
 8011b68:	08011bf7 	.word	0x08011bf7
 8011b6c:	08011c53 	.word	0x08011c53
 8011b70:	08011c53 	.word	0x08011c53
 8011b74:	08011bff 	.word	0x08011bff
 8011b78:	08011c53 	.word	0x08011c53
 8011b7c:	08011c53 	.word	0x08011c53
 8011b80:	08011c53 	.word	0x08011c53
 8011b84:	08011c0f 	.word	0x08011c0f
 8011b88:	08011c53 	.word	0x08011c53
 8011b8c:	08011c53 	.word	0x08011c53
 8011b90:	08011c53 	.word	0x08011c53
 8011b94:	08011c53 	.word	0x08011c53
 8011b98:	08011c53 	.word	0x08011c53
 8011b9c:	08011c53 	.word	0x08011c53
 8011ba0:	08011c53 	.word	0x08011c53
 8011ba4:	08011c1f 	.word	0x08011c1f
 8011ba8:	08011c53 	.word	0x08011c53
 8011bac:	08011c53 	.word	0x08011c53
 8011bb0:	08011c53 	.word	0x08011c53
 8011bb4:	08011c53 	.word	0x08011c53
 8011bb8:	08011c53 	.word	0x08011c53
 8011bbc:	08011c53 	.word	0x08011c53
 8011bc0:	08011c53 	.word	0x08011c53
 8011bc4:	08011c53 	.word	0x08011c53
 8011bc8:	08011c53 	.word	0x08011c53
 8011bcc:	08011c53 	.word	0x08011c53
 8011bd0:	08011c53 	.word	0x08011c53
 8011bd4:	08011c53 	.word	0x08011c53
 8011bd8:	08011c53 	.word	0x08011c53
 8011bdc:	08011c53 	.word	0x08011c53
 8011be0:	08011c53 	.word	0x08011c53
 8011be4:	08011c45 	.word	0x08011c45
 8011be8:	2b40      	cmp	r3, #64	@ 0x40
 8011bea:	d02e      	beq.n	8011c4a <UART_SetConfig+0xa36>
 8011bec:	e031      	b.n	8011c52 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011bee:	f7fb fd7f 	bl	800d6f0 <HAL_RCC_GetPCLK1Freq>
 8011bf2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8011bf4:	e033      	b.n	8011c5e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011bf6:	f7fb fd91 	bl	800d71c <HAL_RCC_GetPCLK2Freq>
 8011bfa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8011bfc:	e02f      	b.n	8011c5e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011bfe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8011c02:	4618      	mov	r0, r3
 8011c04:	f7fc ffc0 	bl	800eb88 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011c08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011c0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011c0c:	e027      	b.n	8011c5e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011c0e:	f107 0318 	add.w	r3, r7, #24
 8011c12:	4618      	mov	r0, r3
 8011c14:	f7fd f90c 	bl	800ee30 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011c18:	69fb      	ldr	r3, [r7, #28]
 8011c1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011c1c:	e01f      	b.n	8011c5e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011c1e:	4b2d      	ldr	r3, [pc, #180]	@ (8011cd4 <UART_SetConfig+0xac0>)
 8011c20:	681b      	ldr	r3, [r3, #0]
 8011c22:	f003 0320 	and.w	r3, r3, #32
 8011c26:	2b00      	cmp	r3, #0
 8011c28:	d009      	beq.n	8011c3e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8011c2a:	4b2a      	ldr	r3, [pc, #168]	@ (8011cd4 <UART_SetConfig+0xac0>)
 8011c2c:	681b      	ldr	r3, [r3, #0]
 8011c2e:	08db      	lsrs	r3, r3, #3
 8011c30:	f003 0303 	and.w	r3, r3, #3
 8011c34:	4a28      	ldr	r2, [pc, #160]	@ (8011cd8 <UART_SetConfig+0xac4>)
 8011c36:	fa22 f303 	lsr.w	r3, r2, r3
 8011c3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011c3c:	e00f      	b.n	8011c5e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8011c3e:	4b26      	ldr	r3, [pc, #152]	@ (8011cd8 <UART_SetConfig+0xac4>)
 8011c40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011c42:	e00c      	b.n	8011c5e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011c44:	4b25      	ldr	r3, [pc, #148]	@ (8011cdc <UART_SetConfig+0xac8>)
 8011c46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011c48:	e009      	b.n	8011c5e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011c4a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8011c4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011c50:	e005      	b.n	8011c5e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8011c52:	2300      	movs	r3, #0
 8011c54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8011c56:	2301      	movs	r3, #1
 8011c58:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8011c5c:	bf00      	nop
    }

    if (pclk != 0U)
 8011c5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011c60:	2b00      	cmp	r3, #0
 8011c62:	d021      	beq.n	8011ca8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011c64:	697b      	ldr	r3, [r7, #20]
 8011c66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011c68:	4a1d      	ldr	r2, [pc, #116]	@ (8011ce0 <UART_SetConfig+0xacc>)
 8011c6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011c6e:	461a      	mov	r2, r3
 8011c70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011c72:	fbb3 f2f2 	udiv	r2, r3, r2
 8011c76:	697b      	ldr	r3, [r7, #20]
 8011c78:	685b      	ldr	r3, [r3, #4]
 8011c7a:	085b      	lsrs	r3, r3, #1
 8011c7c:	441a      	add	r2, r3
 8011c7e:	697b      	ldr	r3, [r7, #20]
 8011c80:	685b      	ldr	r3, [r3, #4]
 8011c82:	fbb2 f3f3 	udiv	r3, r2, r3
 8011c86:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011c88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011c8a:	2b0f      	cmp	r3, #15
 8011c8c:	d909      	bls.n	8011ca2 <UART_SetConfig+0xa8e>
 8011c8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011c90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011c94:	d205      	bcs.n	8011ca2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8011c96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011c98:	b29a      	uxth	r2, r3
 8011c9a:	697b      	ldr	r3, [r7, #20]
 8011c9c:	681b      	ldr	r3, [r3, #0]
 8011c9e:	60da      	str	r2, [r3, #12]
 8011ca0:	e002      	b.n	8011ca8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8011ca2:	2301      	movs	r3, #1
 8011ca4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8011ca8:	697b      	ldr	r3, [r7, #20]
 8011caa:	2201      	movs	r2, #1
 8011cac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8011cb0:	697b      	ldr	r3, [r7, #20]
 8011cb2:	2201      	movs	r2, #1
 8011cb4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8011cb8:	697b      	ldr	r3, [r7, #20]
 8011cba:	2200      	movs	r2, #0
 8011cbc:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8011cbe:	697b      	ldr	r3, [r7, #20]
 8011cc0:	2200      	movs	r2, #0
 8011cc2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8011cc4:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8011cc8:	4618      	mov	r0, r3
 8011cca:	3748      	adds	r7, #72	@ 0x48
 8011ccc:	46bd      	mov	sp, r7
 8011cce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8011cd2:	bf00      	nop
 8011cd4:	58024400 	.word	0x58024400
 8011cd8:	03d09000 	.word	0x03d09000
 8011cdc:	003d0900 	.word	0x003d0900
 8011ce0:	08017a80 	.word	0x08017a80

08011ce4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8011ce4:	b480      	push	{r7}
 8011ce6:	b083      	sub	sp, #12
 8011ce8:	af00      	add	r7, sp, #0
 8011cea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8011cec:	687b      	ldr	r3, [r7, #4]
 8011cee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011cf0:	f003 0308 	and.w	r3, r3, #8
 8011cf4:	2b00      	cmp	r3, #0
 8011cf6:	d00a      	beq.n	8011d0e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8011cf8:	687b      	ldr	r3, [r7, #4]
 8011cfa:	681b      	ldr	r3, [r3, #0]
 8011cfc:	685b      	ldr	r3, [r3, #4]
 8011cfe:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011d06:	687b      	ldr	r3, [r7, #4]
 8011d08:	681b      	ldr	r3, [r3, #0]
 8011d0a:	430a      	orrs	r2, r1
 8011d0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8011d0e:	687b      	ldr	r3, [r7, #4]
 8011d10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011d12:	f003 0301 	and.w	r3, r3, #1
 8011d16:	2b00      	cmp	r3, #0
 8011d18:	d00a      	beq.n	8011d30 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8011d1a:	687b      	ldr	r3, [r7, #4]
 8011d1c:	681b      	ldr	r3, [r3, #0]
 8011d1e:	685b      	ldr	r3, [r3, #4]
 8011d20:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8011d24:	687b      	ldr	r3, [r7, #4]
 8011d26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011d28:	687b      	ldr	r3, [r7, #4]
 8011d2a:	681b      	ldr	r3, [r3, #0]
 8011d2c:	430a      	orrs	r2, r1
 8011d2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8011d30:	687b      	ldr	r3, [r7, #4]
 8011d32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011d34:	f003 0302 	and.w	r3, r3, #2
 8011d38:	2b00      	cmp	r3, #0
 8011d3a:	d00a      	beq.n	8011d52 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	681b      	ldr	r3, [r3, #0]
 8011d40:	685b      	ldr	r3, [r3, #4]
 8011d42:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8011d4a:	687b      	ldr	r3, [r7, #4]
 8011d4c:	681b      	ldr	r3, [r3, #0]
 8011d4e:	430a      	orrs	r2, r1
 8011d50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8011d52:	687b      	ldr	r3, [r7, #4]
 8011d54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011d56:	f003 0304 	and.w	r3, r3, #4
 8011d5a:	2b00      	cmp	r3, #0
 8011d5c:	d00a      	beq.n	8011d74 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8011d5e:	687b      	ldr	r3, [r7, #4]
 8011d60:	681b      	ldr	r3, [r3, #0]
 8011d62:	685b      	ldr	r3, [r3, #4]
 8011d64:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8011d68:	687b      	ldr	r3, [r7, #4]
 8011d6a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011d6c:	687b      	ldr	r3, [r7, #4]
 8011d6e:	681b      	ldr	r3, [r3, #0]
 8011d70:	430a      	orrs	r2, r1
 8011d72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011d78:	f003 0310 	and.w	r3, r3, #16
 8011d7c:	2b00      	cmp	r3, #0
 8011d7e:	d00a      	beq.n	8011d96 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8011d80:	687b      	ldr	r3, [r7, #4]
 8011d82:	681b      	ldr	r3, [r3, #0]
 8011d84:	689b      	ldr	r3, [r3, #8]
 8011d86:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8011d8a:	687b      	ldr	r3, [r7, #4]
 8011d8c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8011d8e:	687b      	ldr	r3, [r7, #4]
 8011d90:	681b      	ldr	r3, [r3, #0]
 8011d92:	430a      	orrs	r2, r1
 8011d94:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8011d96:	687b      	ldr	r3, [r7, #4]
 8011d98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011d9a:	f003 0320 	and.w	r3, r3, #32
 8011d9e:	2b00      	cmp	r3, #0
 8011da0:	d00a      	beq.n	8011db8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8011da2:	687b      	ldr	r3, [r7, #4]
 8011da4:	681b      	ldr	r3, [r3, #0]
 8011da6:	689b      	ldr	r3, [r3, #8]
 8011da8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8011dac:	687b      	ldr	r3, [r7, #4]
 8011dae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8011db0:	687b      	ldr	r3, [r7, #4]
 8011db2:	681b      	ldr	r3, [r3, #0]
 8011db4:	430a      	orrs	r2, r1
 8011db6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8011db8:	687b      	ldr	r3, [r7, #4]
 8011dba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011dbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011dc0:	2b00      	cmp	r3, #0
 8011dc2:	d01a      	beq.n	8011dfa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8011dc4:	687b      	ldr	r3, [r7, #4]
 8011dc6:	681b      	ldr	r3, [r3, #0]
 8011dc8:	685b      	ldr	r3, [r3, #4]
 8011dca:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8011dce:	687b      	ldr	r3, [r7, #4]
 8011dd0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	681b      	ldr	r3, [r3, #0]
 8011dd6:	430a      	orrs	r2, r1
 8011dd8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8011dda:	687b      	ldr	r3, [r7, #4]
 8011ddc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011dde:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8011de2:	d10a      	bne.n	8011dfa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	681b      	ldr	r3, [r3, #0]
 8011de8:	685b      	ldr	r3, [r3, #4]
 8011dea:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8011dee:	687b      	ldr	r3, [r7, #4]
 8011df0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8011df2:	687b      	ldr	r3, [r7, #4]
 8011df4:	681b      	ldr	r3, [r3, #0]
 8011df6:	430a      	orrs	r2, r1
 8011df8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8011dfa:	687b      	ldr	r3, [r7, #4]
 8011dfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011dfe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011e02:	2b00      	cmp	r3, #0
 8011e04:	d00a      	beq.n	8011e1c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8011e06:	687b      	ldr	r3, [r7, #4]
 8011e08:	681b      	ldr	r3, [r3, #0]
 8011e0a:	685b      	ldr	r3, [r3, #4]
 8011e0c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8011e10:	687b      	ldr	r3, [r7, #4]
 8011e12:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8011e14:	687b      	ldr	r3, [r7, #4]
 8011e16:	681b      	ldr	r3, [r3, #0]
 8011e18:	430a      	orrs	r2, r1
 8011e1a:	605a      	str	r2, [r3, #4]
  }
}
 8011e1c:	bf00      	nop
 8011e1e:	370c      	adds	r7, #12
 8011e20:	46bd      	mov	sp, r7
 8011e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e26:	4770      	bx	lr

08011e28 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8011e28:	b580      	push	{r7, lr}
 8011e2a:	b098      	sub	sp, #96	@ 0x60
 8011e2c:	af02      	add	r7, sp, #8
 8011e2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011e30:	687b      	ldr	r3, [r7, #4]
 8011e32:	2200      	movs	r2, #0
 8011e34:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8011e38:	f7f0 fe22 	bl	8002a80 <HAL_GetTick>
 8011e3c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8011e3e:	687b      	ldr	r3, [r7, #4]
 8011e40:	681b      	ldr	r3, [r3, #0]
 8011e42:	681b      	ldr	r3, [r3, #0]
 8011e44:	f003 0308 	and.w	r3, r3, #8
 8011e48:	2b08      	cmp	r3, #8
 8011e4a:	d12f      	bne.n	8011eac <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011e4c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8011e50:	9300      	str	r3, [sp, #0]
 8011e52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011e54:	2200      	movs	r2, #0
 8011e56:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8011e5a:	6878      	ldr	r0, [r7, #4]
 8011e5c:	f000 f88e 	bl	8011f7c <UART_WaitOnFlagUntilTimeout>
 8011e60:	4603      	mov	r3, r0
 8011e62:	2b00      	cmp	r3, #0
 8011e64:	d022      	beq.n	8011eac <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8011e66:	687b      	ldr	r3, [r7, #4]
 8011e68:	681b      	ldr	r3, [r3, #0]
 8011e6a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011e6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011e6e:	e853 3f00 	ldrex	r3, [r3]
 8011e72:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8011e74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011e76:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8011e7a:	653b      	str	r3, [r7, #80]	@ 0x50
 8011e7c:	687b      	ldr	r3, [r7, #4]
 8011e7e:	681b      	ldr	r3, [r3, #0]
 8011e80:	461a      	mov	r2, r3
 8011e82:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011e84:	647b      	str	r3, [r7, #68]	@ 0x44
 8011e86:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011e88:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8011e8a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011e8c:	e841 2300 	strex	r3, r2, [r1]
 8011e90:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8011e92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011e94:	2b00      	cmp	r3, #0
 8011e96:	d1e6      	bne.n	8011e66 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8011e98:	687b      	ldr	r3, [r7, #4]
 8011e9a:	2220      	movs	r2, #32
 8011e9c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8011ea0:	687b      	ldr	r3, [r7, #4]
 8011ea2:	2200      	movs	r2, #0
 8011ea4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011ea8:	2303      	movs	r3, #3
 8011eaa:	e063      	b.n	8011f74 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8011eac:	687b      	ldr	r3, [r7, #4]
 8011eae:	681b      	ldr	r3, [r3, #0]
 8011eb0:	681b      	ldr	r3, [r3, #0]
 8011eb2:	f003 0304 	and.w	r3, r3, #4
 8011eb6:	2b04      	cmp	r3, #4
 8011eb8:	d149      	bne.n	8011f4e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011eba:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8011ebe:	9300      	str	r3, [sp, #0]
 8011ec0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011ec2:	2200      	movs	r2, #0
 8011ec4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8011ec8:	6878      	ldr	r0, [r7, #4]
 8011eca:	f000 f857 	bl	8011f7c <UART_WaitOnFlagUntilTimeout>
 8011ece:	4603      	mov	r3, r0
 8011ed0:	2b00      	cmp	r3, #0
 8011ed2:	d03c      	beq.n	8011f4e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011ed4:	687b      	ldr	r3, [r7, #4]
 8011ed6:	681b      	ldr	r3, [r3, #0]
 8011ed8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011edc:	e853 3f00 	ldrex	r3, [r3]
 8011ee0:	623b      	str	r3, [r7, #32]
   return(result);
 8011ee2:	6a3b      	ldr	r3, [r7, #32]
 8011ee4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8011ee8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011eea:	687b      	ldr	r3, [r7, #4]
 8011eec:	681b      	ldr	r3, [r3, #0]
 8011eee:	461a      	mov	r2, r3
 8011ef0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011ef2:	633b      	str	r3, [r7, #48]	@ 0x30
 8011ef4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011ef6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011ef8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011efa:	e841 2300 	strex	r3, r2, [r1]
 8011efe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8011f00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011f02:	2b00      	cmp	r3, #0
 8011f04:	d1e6      	bne.n	8011ed4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011f06:	687b      	ldr	r3, [r7, #4]
 8011f08:	681b      	ldr	r3, [r3, #0]
 8011f0a:	3308      	adds	r3, #8
 8011f0c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011f0e:	693b      	ldr	r3, [r7, #16]
 8011f10:	e853 3f00 	ldrex	r3, [r3]
 8011f14:	60fb      	str	r3, [r7, #12]
   return(result);
 8011f16:	68fb      	ldr	r3, [r7, #12]
 8011f18:	f023 0301 	bic.w	r3, r3, #1
 8011f1c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011f1e:	687b      	ldr	r3, [r7, #4]
 8011f20:	681b      	ldr	r3, [r3, #0]
 8011f22:	3308      	adds	r3, #8
 8011f24:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8011f26:	61fa      	str	r2, [r7, #28]
 8011f28:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011f2a:	69b9      	ldr	r1, [r7, #24]
 8011f2c:	69fa      	ldr	r2, [r7, #28]
 8011f2e:	e841 2300 	strex	r3, r2, [r1]
 8011f32:	617b      	str	r3, [r7, #20]
   return(result);
 8011f34:	697b      	ldr	r3, [r7, #20]
 8011f36:	2b00      	cmp	r3, #0
 8011f38:	d1e5      	bne.n	8011f06 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8011f3a:	687b      	ldr	r3, [r7, #4]
 8011f3c:	2220      	movs	r2, #32
 8011f3e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8011f42:	687b      	ldr	r3, [r7, #4]
 8011f44:	2200      	movs	r2, #0
 8011f46:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011f4a:	2303      	movs	r3, #3
 8011f4c:	e012      	b.n	8011f74 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8011f4e:	687b      	ldr	r3, [r7, #4]
 8011f50:	2220      	movs	r2, #32
 8011f52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8011f56:	687b      	ldr	r3, [r7, #4]
 8011f58:	2220      	movs	r2, #32
 8011f5a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011f5e:	687b      	ldr	r3, [r7, #4]
 8011f60:	2200      	movs	r2, #0
 8011f62:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011f64:	687b      	ldr	r3, [r7, #4]
 8011f66:	2200      	movs	r2, #0
 8011f68:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8011f6a:	687b      	ldr	r3, [r7, #4]
 8011f6c:	2200      	movs	r2, #0
 8011f6e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8011f72:	2300      	movs	r3, #0
}
 8011f74:	4618      	mov	r0, r3
 8011f76:	3758      	adds	r7, #88	@ 0x58
 8011f78:	46bd      	mov	sp, r7
 8011f7a:	bd80      	pop	{r7, pc}

08011f7c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8011f7c:	b580      	push	{r7, lr}
 8011f7e:	b084      	sub	sp, #16
 8011f80:	af00      	add	r7, sp, #0
 8011f82:	60f8      	str	r0, [r7, #12]
 8011f84:	60b9      	str	r1, [r7, #8]
 8011f86:	603b      	str	r3, [r7, #0]
 8011f88:	4613      	mov	r3, r2
 8011f8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011f8c:	e04f      	b.n	801202e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011f8e:	69bb      	ldr	r3, [r7, #24]
 8011f90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011f94:	d04b      	beq.n	801202e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011f96:	f7f0 fd73 	bl	8002a80 <HAL_GetTick>
 8011f9a:	4602      	mov	r2, r0
 8011f9c:	683b      	ldr	r3, [r7, #0]
 8011f9e:	1ad3      	subs	r3, r2, r3
 8011fa0:	69ba      	ldr	r2, [r7, #24]
 8011fa2:	429a      	cmp	r2, r3
 8011fa4:	d302      	bcc.n	8011fac <UART_WaitOnFlagUntilTimeout+0x30>
 8011fa6:	69bb      	ldr	r3, [r7, #24]
 8011fa8:	2b00      	cmp	r3, #0
 8011faa:	d101      	bne.n	8011fb0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8011fac:	2303      	movs	r3, #3
 8011fae:	e04e      	b.n	801204e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8011fb0:	68fb      	ldr	r3, [r7, #12]
 8011fb2:	681b      	ldr	r3, [r3, #0]
 8011fb4:	681b      	ldr	r3, [r3, #0]
 8011fb6:	f003 0304 	and.w	r3, r3, #4
 8011fba:	2b00      	cmp	r3, #0
 8011fbc:	d037      	beq.n	801202e <UART_WaitOnFlagUntilTimeout+0xb2>
 8011fbe:	68bb      	ldr	r3, [r7, #8]
 8011fc0:	2b80      	cmp	r3, #128	@ 0x80
 8011fc2:	d034      	beq.n	801202e <UART_WaitOnFlagUntilTimeout+0xb2>
 8011fc4:	68bb      	ldr	r3, [r7, #8]
 8011fc6:	2b40      	cmp	r3, #64	@ 0x40
 8011fc8:	d031      	beq.n	801202e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8011fca:	68fb      	ldr	r3, [r7, #12]
 8011fcc:	681b      	ldr	r3, [r3, #0]
 8011fce:	69db      	ldr	r3, [r3, #28]
 8011fd0:	f003 0308 	and.w	r3, r3, #8
 8011fd4:	2b08      	cmp	r3, #8
 8011fd6:	d110      	bne.n	8011ffa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8011fd8:	68fb      	ldr	r3, [r7, #12]
 8011fda:	681b      	ldr	r3, [r3, #0]
 8011fdc:	2208      	movs	r2, #8
 8011fde:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011fe0:	68f8      	ldr	r0, [r7, #12]
 8011fe2:	f000 f921 	bl	8012228 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8011fe6:	68fb      	ldr	r3, [r7, #12]
 8011fe8:	2208      	movs	r2, #8
 8011fea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011fee:	68fb      	ldr	r3, [r7, #12]
 8011ff0:	2200      	movs	r2, #0
 8011ff2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8011ff6:	2301      	movs	r3, #1
 8011ff8:	e029      	b.n	801204e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8011ffa:	68fb      	ldr	r3, [r7, #12]
 8011ffc:	681b      	ldr	r3, [r3, #0]
 8011ffe:	69db      	ldr	r3, [r3, #28]
 8012000:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8012004:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8012008:	d111      	bne.n	801202e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801200a:	68fb      	ldr	r3, [r7, #12]
 801200c:	681b      	ldr	r3, [r3, #0]
 801200e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8012012:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8012014:	68f8      	ldr	r0, [r7, #12]
 8012016:	f000 f907 	bl	8012228 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801201a:	68fb      	ldr	r3, [r7, #12]
 801201c:	2220      	movs	r2, #32
 801201e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8012022:	68fb      	ldr	r3, [r7, #12]
 8012024:	2200      	movs	r2, #0
 8012026:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 801202a:	2303      	movs	r3, #3
 801202c:	e00f      	b.n	801204e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801202e:	68fb      	ldr	r3, [r7, #12]
 8012030:	681b      	ldr	r3, [r3, #0]
 8012032:	69da      	ldr	r2, [r3, #28]
 8012034:	68bb      	ldr	r3, [r7, #8]
 8012036:	4013      	ands	r3, r2
 8012038:	68ba      	ldr	r2, [r7, #8]
 801203a:	429a      	cmp	r2, r3
 801203c:	bf0c      	ite	eq
 801203e:	2301      	moveq	r3, #1
 8012040:	2300      	movne	r3, #0
 8012042:	b2db      	uxtb	r3, r3
 8012044:	461a      	mov	r2, r3
 8012046:	79fb      	ldrb	r3, [r7, #7]
 8012048:	429a      	cmp	r2, r3
 801204a:	d0a0      	beq.n	8011f8e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801204c:	2300      	movs	r3, #0
}
 801204e:	4618      	mov	r0, r3
 8012050:	3710      	adds	r7, #16
 8012052:	46bd      	mov	sp, r7
 8012054:	bd80      	pop	{r7, pc}
	...

08012058 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8012058:	b580      	push	{r7, lr}
 801205a:	b096      	sub	sp, #88	@ 0x58
 801205c:	af00      	add	r7, sp, #0
 801205e:	60f8      	str	r0, [r7, #12]
 8012060:	60b9      	str	r1, [r7, #8]
 8012062:	4613      	mov	r3, r2
 8012064:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8012066:	68fb      	ldr	r3, [r7, #12]
 8012068:	68ba      	ldr	r2, [r7, #8]
 801206a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 801206c:	68fb      	ldr	r3, [r7, #12]
 801206e:	88fa      	ldrh	r2, [r7, #6]
 8012070:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012074:	68fb      	ldr	r3, [r7, #12]
 8012076:	2200      	movs	r2, #0
 8012078:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801207c:	68fb      	ldr	r3, [r7, #12]
 801207e:	2222      	movs	r2, #34	@ 0x22
 8012080:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8012084:	68fb      	ldr	r3, [r7, #12]
 8012086:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801208a:	2b00      	cmp	r3, #0
 801208c:	d02d      	beq.n	80120ea <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 801208e:	68fb      	ldr	r3, [r7, #12]
 8012090:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012094:	4a40      	ldr	r2, [pc, #256]	@ (8012198 <UART_Start_Receive_DMA+0x140>)
 8012096:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8012098:	68fb      	ldr	r3, [r7, #12]
 801209a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801209e:	4a3f      	ldr	r2, [pc, #252]	@ (801219c <UART_Start_Receive_DMA+0x144>)
 80120a0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80120a2:	68fb      	ldr	r3, [r7, #12]
 80120a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80120a8:	4a3d      	ldr	r2, [pc, #244]	@ (80121a0 <UART_Start_Receive_DMA+0x148>)
 80120aa:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80120ac:	68fb      	ldr	r3, [r7, #12]
 80120ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80120b2:	2200      	movs	r2, #0
 80120b4:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80120b6:	68fb      	ldr	r3, [r7, #12]
 80120b8:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 80120bc:	68fb      	ldr	r3, [r7, #12]
 80120be:	681b      	ldr	r3, [r3, #0]
 80120c0:	3324      	adds	r3, #36	@ 0x24
 80120c2:	4619      	mov	r1, r3
 80120c4:	68fb      	ldr	r3, [r7, #12]
 80120c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80120c8:	461a      	mov	r2, r3
 80120ca:	88fb      	ldrh	r3, [r7, #6]
 80120cc:	f7f1 fce4 	bl	8003a98 <HAL_DMA_Start_IT>
 80120d0:	4603      	mov	r3, r0
 80120d2:	2b00      	cmp	r3, #0
 80120d4:	d009      	beq.n	80120ea <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80120d6:	68fb      	ldr	r3, [r7, #12]
 80120d8:	2210      	movs	r2, #16
 80120da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80120de:	68fb      	ldr	r3, [r7, #12]
 80120e0:	2220      	movs	r2, #32
 80120e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 80120e6:	2301      	movs	r3, #1
 80120e8:	e051      	b.n	801218e <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80120ea:	68fb      	ldr	r3, [r7, #12]
 80120ec:	691b      	ldr	r3, [r3, #16]
 80120ee:	2b00      	cmp	r3, #0
 80120f0:	d018      	beq.n	8012124 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80120f2:	68fb      	ldr	r3, [r7, #12]
 80120f4:	681b      	ldr	r3, [r3, #0]
 80120f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80120f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80120fa:	e853 3f00 	ldrex	r3, [r3]
 80120fe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8012100:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012102:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8012106:	657b      	str	r3, [r7, #84]	@ 0x54
 8012108:	68fb      	ldr	r3, [r7, #12]
 801210a:	681b      	ldr	r3, [r3, #0]
 801210c:	461a      	mov	r2, r3
 801210e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012110:	64bb      	str	r3, [r7, #72]	@ 0x48
 8012112:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012114:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8012116:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8012118:	e841 2300 	strex	r3, r2, [r1]
 801211c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 801211e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012120:	2b00      	cmp	r3, #0
 8012122:	d1e6      	bne.n	80120f2 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012124:	68fb      	ldr	r3, [r7, #12]
 8012126:	681b      	ldr	r3, [r3, #0]
 8012128:	3308      	adds	r3, #8
 801212a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801212c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801212e:	e853 3f00 	ldrex	r3, [r3]
 8012132:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8012134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012136:	f043 0301 	orr.w	r3, r3, #1
 801213a:	653b      	str	r3, [r7, #80]	@ 0x50
 801213c:	68fb      	ldr	r3, [r7, #12]
 801213e:	681b      	ldr	r3, [r3, #0]
 8012140:	3308      	adds	r3, #8
 8012142:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8012144:	637a      	str	r2, [r7, #52]	@ 0x34
 8012146:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012148:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801214a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801214c:	e841 2300 	strex	r3, r2, [r1]
 8012150:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8012152:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012154:	2b00      	cmp	r3, #0
 8012156:	d1e5      	bne.n	8012124 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8012158:	68fb      	ldr	r3, [r7, #12]
 801215a:	681b      	ldr	r3, [r3, #0]
 801215c:	3308      	adds	r3, #8
 801215e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012160:	697b      	ldr	r3, [r7, #20]
 8012162:	e853 3f00 	ldrex	r3, [r3]
 8012166:	613b      	str	r3, [r7, #16]
   return(result);
 8012168:	693b      	ldr	r3, [r7, #16]
 801216a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801216e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8012170:	68fb      	ldr	r3, [r7, #12]
 8012172:	681b      	ldr	r3, [r3, #0]
 8012174:	3308      	adds	r3, #8
 8012176:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8012178:	623a      	str	r2, [r7, #32]
 801217a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801217c:	69f9      	ldr	r1, [r7, #28]
 801217e:	6a3a      	ldr	r2, [r7, #32]
 8012180:	e841 2300 	strex	r3, r2, [r1]
 8012184:	61bb      	str	r3, [r7, #24]
   return(result);
 8012186:	69bb      	ldr	r3, [r7, #24]
 8012188:	2b00      	cmp	r3, #0
 801218a:	d1e5      	bne.n	8012158 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 801218c:	2300      	movs	r3, #0
}
 801218e:	4618      	mov	r0, r3
 8012190:	3758      	adds	r7, #88	@ 0x58
 8012192:	46bd      	mov	sp, r7
 8012194:	bd80      	pop	{r7, pc}
 8012196:	bf00      	nop
 8012198:	080122f5 	.word	0x080122f5
 801219c:	0801241d 	.word	0x0801241d
 80121a0:	0801245b 	.word	0x0801245b

080121a4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80121a4:	b480      	push	{r7}
 80121a6:	b08f      	sub	sp, #60	@ 0x3c
 80121a8:	af00      	add	r7, sp, #0
 80121aa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80121ac:	687b      	ldr	r3, [r7, #4]
 80121ae:	681b      	ldr	r3, [r3, #0]
 80121b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80121b2:	6a3b      	ldr	r3, [r7, #32]
 80121b4:	e853 3f00 	ldrex	r3, [r3]
 80121b8:	61fb      	str	r3, [r7, #28]
   return(result);
 80121ba:	69fb      	ldr	r3, [r7, #28]
 80121bc:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80121c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80121c2:	687b      	ldr	r3, [r7, #4]
 80121c4:	681b      	ldr	r3, [r3, #0]
 80121c6:	461a      	mov	r2, r3
 80121c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80121ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80121cc:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80121ce:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80121d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80121d2:	e841 2300 	strex	r3, r2, [r1]
 80121d6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80121d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80121da:	2b00      	cmp	r3, #0
 80121dc:	d1e6      	bne.n	80121ac <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80121de:	687b      	ldr	r3, [r7, #4]
 80121e0:	681b      	ldr	r3, [r3, #0]
 80121e2:	3308      	adds	r3, #8
 80121e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80121e6:	68fb      	ldr	r3, [r7, #12]
 80121e8:	e853 3f00 	ldrex	r3, [r3]
 80121ec:	60bb      	str	r3, [r7, #8]
   return(result);
 80121ee:	68bb      	ldr	r3, [r7, #8]
 80121f0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80121f4:	633b      	str	r3, [r7, #48]	@ 0x30
 80121f6:	687b      	ldr	r3, [r7, #4]
 80121f8:	681b      	ldr	r3, [r3, #0]
 80121fa:	3308      	adds	r3, #8
 80121fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80121fe:	61ba      	str	r2, [r7, #24]
 8012200:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012202:	6979      	ldr	r1, [r7, #20]
 8012204:	69ba      	ldr	r2, [r7, #24]
 8012206:	e841 2300 	strex	r3, r2, [r1]
 801220a:	613b      	str	r3, [r7, #16]
   return(result);
 801220c:	693b      	ldr	r3, [r7, #16]
 801220e:	2b00      	cmp	r3, #0
 8012210:	d1e5      	bne.n	80121de <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8012212:	687b      	ldr	r3, [r7, #4]
 8012214:	2220      	movs	r2, #32
 8012216:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 801221a:	bf00      	nop
 801221c:	373c      	adds	r7, #60	@ 0x3c
 801221e:	46bd      	mov	sp, r7
 8012220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012224:	4770      	bx	lr
	...

08012228 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8012228:	b480      	push	{r7}
 801222a:	b095      	sub	sp, #84	@ 0x54
 801222c:	af00      	add	r7, sp, #0
 801222e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012230:	687b      	ldr	r3, [r7, #4]
 8012232:	681b      	ldr	r3, [r3, #0]
 8012234:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012236:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012238:	e853 3f00 	ldrex	r3, [r3]
 801223c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 801223e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012240:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8012244:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8012246:	687b      	ldr	r3, [r7, #4]
 8012248:	681b      	ldr	r3, [r3, #0]
 801224a:	461a      	mov	r2, r3
 801224c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801224e:	643b      	str	r3, [r7, #64]	@ 0x40
 8012250:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012252:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8012254:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8012256:	e841 2300 	strex	r3, r2, [r1]
 801225a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 801225c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801225e:	2b00      	cmp	r3, #0
 8012260:	d1e6      	bne.n	8012230 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8012262:	687b      	ldr	r3, [r7, #4]
 8012264:	681b      	ldr	r3, [r3, #0]
 8012266:	3308      	adds	r3, #8
 8012268:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801226a:	6a3b      	ldr	r3, [r7, #32]
 801226c:	e853 3f00 	ldrex	r3, [r3]
 8012270:	61fb      	str	r3, [r7, #28]
   return(result);
 8012272:	69fa      	ldr	r2, [r7, #28]
 8012274:	4b1e      	ldr	r3, [pc, #120]	@ (80122f0 <UART_EndRxTransfer+0xc8>)
 8012276:	4013      	ands	r3, r2
 8012278:	64bb      	str	r3, [r7, #72]	@ 0x48
 801227a:	687b      	ldr	r3, [r7, #4]
 801227c:	681b      	ldr	r3, [r3, #0]
 801227e:	3308      	adds	r3, #8
 8012280:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8012282:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8012284:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012286:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8012288:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801228a:	e841 2300 	strex	r3, r2, [r1]
 801228e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8012290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012292:	2b00      	cmp	r3, #0
 8012294:	d1e5      	bne.n	8012262 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012296:	687b      	ldr	r3, [r7, #4]
 8012298:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801229a:	2b01      	cmp	r3, #1
 801229c:	d118      	bne.n	80122d0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801229e:	687b      	ldr	r3, [r7, #4]
 80122a0:	681b      	ldr	r3, [r3, #0]
 80122a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80122a4:	68fb      	ldr	r3, [r7, #12]
 80122a6:	e853 3f00 	ldrex	r3, [r3]
 80122aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80122ac:	68bb      	ldr	r3, [r7, #8]
 80122ae:	f023 0310 	bic.w	r3, r3, #16
 80122b2:	647b      	str	r3, [r7, #68]	@ 0x44
 80122b4:	687b      	ldr	r3, [r7, #4]
 80122b6:	681b      	ldr	r3, [r3, #0]
 80122b8:	461a      	mov	r2, r3
 80122ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80122bc:	61bb      	str	r3, [r7, #24]
 80122be:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80122c0:	6979      	ldr	r1, [r7, #20]
 80122c2:	69ba      	ldr	r2, [r7, #24]
 80122c4:	e841 2300 	strex	r3, r2, [r1]
 80122c8:	613b      	str	r3, [r7, #16]
   return(result);
 80122ca:	693b      	ldr	r3, [r7, #16]
 80122cc:	2b00      	cmp	r3, #0
 80122ce:	d1e6      	bne.n	801229e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80122d0:	687b      	ldr	r3, [r7, #4]
 80122d2:	2220      	movs	r2, #32
 80122d4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80122d8:	687b      	ldr	r3, [r7, #4]
 80122da:	2200      	movs	r2, #0
 80122dc:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80122de:	687b      	ldr	r3, [r7, #4]
 80122e0:	2200      	movs	r2, #0
 80122e2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80122e4:	bf00      	nop
 80122e6:	3754      	adds	r7, #84	@ 0x54
 80122e8:	46bd      	mov	sp, r7
 80122ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122ee:	4770      	bx	lr
 80122f0:	effffffe 	.word	0xeffffffe

080122f4 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80122f4:	b580      	push	{r7, lr}
 80122f6:	b09c      	sub	sp, #112	@ 0x70
 80122f8:	af00      	add	r7, sp, #0
 80122fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80122fc:	687b      	ldr	r3, [r7, #4]
 80122fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012300:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8012302:	687b      	ldr	r3, [r7, #4]
 8012304:	69db      	ldr	r3, [r3, #28]
 8012306:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801230a:	d071      	beq.n	80123f0 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 801230c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801230e:	2200      	movs	r2, #0
 8012310:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8012314:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012316:	681b      	ldr	r3, [r3, #0]
 8012318:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801231a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801231c:	e853 3f00 	ldrex	r3, [r3]
 8012320:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8012322:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012324:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8012328:	66bb      	str	r3, [r7, #104]	@ 0x68
 801232a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801232c:	681b      	ldr	r3, [r3, #0]
 801232e:	461a      	mov	r2, r3
 8012330:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8012332:	65bb      	str	r3, [r7, #88]	@ 0x58
 8012334:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012336:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8012338:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801233a:	e841 2300 	strex	r3, r2, [r1]
 801233e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8012340:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012342:	2b00      	cmp	r3, #0
 8012344:	d1e6      	bne.n	8012314 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012346:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012348:	681b      	ldr	r3, [r3, #0]
 801234a:	3308      	adds	r3, #8
 801234c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801234e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012350:	e853 3f00 	ldrex	r3, [r3]
 8012354:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8012356:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012358:	f023 0301 	bic.w	r3, r3, #1
 801235c:	667b      	str	r3, [r7, #100]	@ 0x64
 801235e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012360:	681b      	ldr	r3, [r3, #0]
 8012362:	3308      	adds	r3, #8
 8012364:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8012366:	647a      	str	r2, [r7, #68]	@ 0x44
 8012368:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801236a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801236c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801236e:	e841 2300 	strex	r3, r2, [r1]
 8012372:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8012374:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012376:	2b00      	cmp	r3, #0
 8012378:	d1e5      	bne.n	8012346 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801237a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801237c:	681b      	ldr	r3, [r3, #0]
 801237e:	3308      	adds	r3, #8
 8012380:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012384:	e853 3f00 	ldrex	r3, [r3]
 8012388:	623b      	str	r3, [r7, #32]
   return(result);
 801238a:	6a3b      	ldr	r3, [r7, #32]
 801238c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8012390:	663b      	str	r3, [r7, #96]	@ 0x60
 8012392:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012394:	681b      	ldr	r3, [r3, #0]
 8012396:	3308      	adds	r3, #8
 8012398:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801239a:	633a      	str	r2, [r7, #48]	@ 0x30
 801239c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801239e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80123a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80123a2:	e841 2300 	strex	r3, r2, [r1]
 80123a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80123a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80123aa:	2b00      	cmp	r3, #0
 80123ac:	d1e5      	bne.n	801237a <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80123ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80123b0:	2220      	movs	r2, #32
 80123b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80123b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80123b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80123ba:	2b01      	cmp	r3, #1
 80123bc:	d118      	bne.n	80123f0 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80123be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80123c0:	681b      	ldr	r3, [r3, #0]
 80123c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80123c4:	693b      	ldr	r3, [r7, #16]
 80123c6:	e853 3f00 	ldrex	r3, [r3]
 80123ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80123cc:	68fb      	ldr	r3, [r7, #12]
 80123ce:	f023 0310 	bic.w	r3, r3, #16
 80123d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80123d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80123d6:	681b      	ldr	r3, [r3, #0]
 80123d8:	461a      	mov	r2, r3
 80123da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80123dc:	61fb      	str	r3, [r7, #28]
 80123de:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80123e0:	69b9      	ldr	r1, [r7, #24]
 80123e2:	69fa      	ldr	r2, [r7, #28]
 80123e4:	e841 2300 	strex	r3, r2, [r1]
 80123e8:	617b      	str	r3, [r7, #20]
   return(result);
 80123ea:	697b      	ldr	r3, [r7, #20]
 80123ec:	2b00      	cmp	r3, #0
 80123ee:	d1e6      	bne.n	80123be <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80123f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80123f2:	2200      	movs	r2, #0
 80123f4:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80123f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80123f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80123fa:	2b01      	cmp	r3, #1
 80123fc:	d107      	bne.n	801240e <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80123fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012400:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8012404:	4619      	mov	r1, r3
 8012406:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8012408:	f7fe fef8 	bl	80111fc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801240c:	e002      	b.n	8012414 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 801240e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8012410:	f7ef f92e 	bl	8001670 <HAL_UART_RxCpltCallback>
}
 8012414:	bf00      	nop
 8012416:	3770      	adds	r7, #112	@ 0x70
 8012418:	46bd      	mov	sp, r7
 801241a:	bd80      	pop	{r7, pc}

0801241c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801241c:	b580      	push	{r7, lr}
 801241e:	b084      	sub	sp, #16
 8012420:	af00      	add	r7, sp, #0
 8012422:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8012424:	687b      	ldr	r3, [r7, #4]
 8012426:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012428:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 801242a:	68fb      	ldr	r3, [r7, #12]
 801242c:	2201      	movs	r2, #1
 801242e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012430:	68fb      	ldr	r3, [r7, #12]
 8012432:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012434:	2b01      	cmp	r3, #1
 8012436:	d109      	bne.n	801244c <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8012438:	68fb      	ldr	r3, [r7, #12]
 801243a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801243e:	085b      	lsrs	r3, r3, #1
 8012440:	b29b      	uxth	r3, r3
 8012442:	4619      	mov	r1, r3
 8012444:	68f8      	ldr	r0, [r7, #12]
 8012446:	f7fe fed9 	bl	80111fc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801244a:	e002      	b.n	8012452 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 801244c:	68f8      	ldr	r0, [r7, #12]
 801244e:	f7fe fec1 	bl	80111d4 <HAL_UART_RxHalfCpltCallback>
}
 8012452:	bf00      	nop
 8012454:	3710      	adds	r7, #16
 8012456:	46bd      	mov	sp, r7
 8012458:	bd80      	pop	{r7, pc}

0801245a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 801245a:	b580      	push	{r7, lr}
 801245c:	b086      	sub	sp, #24
 801245e:	af00      	add	r7, sp, #0
 8012460:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8012462:	687b      	ldr	r3, [r7, #4]
 8012464:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012466:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8012468:	697b      	ldr	r3, [r7, #20]
 801246a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801246e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8012470:	697b      	ldr	r3, [r7, #20]
 8012472:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8012476:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8012478:	697b      	ldr	r3, [r7, #20]
 801247a:	681b      	ldr	r3, [r3, #0]
 801247c:	689b      	ldr	r3, [r3, #8]
 801247e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8012482:	2b80      	cmp	r3, #128	@ 0x80
 8012484:	d109      	bne.n	801249a <UART_DMAError+0x40>
 8012486:	693b      	ldr	r3, [r7, #16]
 8012488:	2b21      	cmp	r3, #33	@ 0x21
 801248a:	d106      	bne.n	801249a <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 801248c:	697b      	ldr	r3, [r7, #20]
 801248e:	2200      	movs	r2, #0
 8012490:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8012494:	6978      	ldr	r0, [r7, #20]
 8012496:	f7ff fe85 	bl	80121a4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 801249a:	697b      	ldr	r3, [r7, #20]
 801249c:	681b      	ldr	r3, [r3, #0]
 801249e:	689b      	ldr	r3, [r3, #8]
 80124a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80124a4:	2b40      	cmp	r3, #64	@ 0x40
 80124a6:	d109      	bne.n	80124bc <UART_DMAError+0x62>
 80124a8:	68fb      	ldr	r3, [r7, #12]
 80124aa:	2b22      	cmp	r3, #34	@ 0x22
 80124ac:	d106      	bne.n	80124bc <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80124ae:	697b      	ldr	r3, [r7, #20]
 80124b0:	2200      	movs	r2, #0
 80124b2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 80124b6:	6978      	ldr	r0, [r7, #20]
 80124b8:	f7ff feb6 	bl	8012228 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80124bc:	697b      	ldr	r3, [r7, #20]
 80124be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80124c2:	f043 0210 	orr.w	r2, r3, #16
 80124c6:	697b      	ldr	r3, [r7, #20]
 80124c8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80124cc:	6978      	ldr	r0, [r7, #20]
 80124ce:	f7fe fe8b 	bl	80111e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80124d2:	bf00      	nop
 80124d4:	3718      	adds	r7, #24
 80124d6:	46bd      	mov	sp, r7
 80124d8:	bd80      	pop	{r7, pc}

080124da <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80124da:	b580      	push	{r7, lr}
 80124dc:	b084      	sub	sp, #16
 80124de:	af00      	add	r7, sp, #0
 80124e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80124e2:	687b      	ldr	r3, [r7, #4]
 80124e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80124e6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80124e8:	68fb      	ldr	r3, [r7, #12]
 80124ea:	2200      	movs	r2, #0
 80124ec:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80124f0:	68f8      	ldr	r0, [r7, #12]
 80124f2:	f7fe fe79 	bl	80111e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80124f6:	bf00      	nop
 80124f8:	3710      	adds	r7, #16
 80124fa:	46bd      	mov	sp, r7
 80124fc:	bd80      	pop	{r7, pc}

080124fe <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80124fe:	b580      	push	{r7, lr}
 8012500:	b088      	sub	sp, #32
 8012502:	af00      	add	r7, sp, #0
 8012504:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8012506:	687b      	ldr	r3, [r7, #4]
 8012508:	681b      	ldr	r3, [r3, #0]
 801250a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801250c:	68fb      	ldr	r3, [r7, #12]
 801250e:	e853 3f00 	ldrex	r3, [r3]
 8012512:	60bb      	str	r3, [r7, #8]
   return(result);
 8012514:	68bb      	ldr	r3, [r7, #8]
 8012516:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801251a:	61fb      	str	r3, [r7, #28]
 801251c:	687b      	ldr	r3, [r7, #4]
 801251e:	681b      	ldr	r3, [r3, #0]
 8012520:	461a      	mov	r2, r3
 8012522:	69fb      	ldr	r3, [r7, #28]
 8012524:	61bb      	str	r3, [r7, #24]
 8012526:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012528:	6979      	ldr	r1, [r7, #20]
 801252a:	69ba      	ldr	r2, [r7, #24]
 801252c:	e841 2300 	strex	r3, r2, [r1]
 8012530:	613b      	str	r3, [r7, #16]
   return(result);
 8012532:	693b      	ldr	r3, [r7, #16]
 8012534:	2b00      	cmp	r3, #0
 8012536:	d1e6      	bne.n	8012506 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8012538:	687b      	ldr	r3, [r7, #4]
 801253a:	2220      	movs	r2, #32
 801253c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8012540:	687b      	ldr	r3, [r7, #4]
 8012542:	2200      	movs	r2, #0
 8012544:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8012546:	6878      	ldr	r0, [r7, #4]
 8012548:	f7fe fe3a 	bl	80111c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801254c:	bf00      	nop
 801254e:	3720      	adds	r7, #32
 8012550:	46bd      	mov	sp, r7
 8012552:	bd80      	pop	{r7, pc}

08012554 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8012554:	b480      	push	{r7}
 8012556:	b083      	sub	sp, #12
 8012558:	af00      	add	r7, sp, #0
 801255a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801255c:	bf00      	nop
 801255e:	370c      	adds	r7, #12
 8012560:	46bd      	mov	sp, r7
 8012562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012566:	4770      	bx	lr

08012568 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8012568:	b480      	push	{r7}
 801256a:	b083      	sub	sp, #12
 801256c:	af00      	add	r7, sp, #0
 801256e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8012570:	bf00      	nop
 8012572:	370c      	adds	r7, #12
 8012574:	46bd      	mov	sp, r7
 8012576:	f85d 7b04 	ldr.w	r7, [sp], #4
 801257a:	4770      	bx	lr

0801257c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 801257c:	b480      	push	{r7}
 801257e:	b083      	sub	sp, #12
 8012580:	af00      	add	r7, sp, #0
 8012582:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8012584:	bf00      	nop
 8012586:	370c      	adds	r7, #12
 8012588:	46bd      	mov	sp, r7
 801258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801258e:	4770      	bx	lr

08012590 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8012590:	b580      	push	{r7, lr}
 8012592:	b084      	sub	sp, #16
 8012594:	af00      	add	r7, sp, #0
 8012596:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012598:	687b      	ldr	r3, [r7, #4]
 801259a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801259e:	2b01      	cmp	r3, #1
 80125a0:	d101      	bne.n	80125a6 <HAL_UARTEx_EnableFifoMode+0x16>
 80125a2:	2302      	movs	r3, #2
 80125a4:	e02b      	b.n	80125fe <HAL_UARTEx_EnableFifoMode+0x6e>
 80125a6:	687b      	ldr	r3, [r7, #4]
 80125a8:	2201      	movs	r2, #1
 80125aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80125ae:	687b      	ldr	r3, [r7, #4]
 80125b0:	2224      	movs	r2, #36	@ 0x24
 80125b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80125b6:	687b      	ldr	r3, [r7, #4]
 80125b8:	681b      	ldr	r3, [r3, #0]
 80125ba:	681b      	ldr	r3, [r3, #0]
 80125bc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80125be:	687b      	ldr	r3, [r7, #4]
 80125c0:	681b      	ldr	r3, [r3, #0]
 80125c2:	681a      	ldr	r2, [r3, #0]
 80125c4:	687b      	ldr	r3, [r7, #4]
 80125c6:	681b      	ldr	r3, [r3, #0]
 80125c8:	f022 0201 	bic.w	r2, r2, #1
 80125cc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 80125ce:	68fb      	ldr	r3, [r7, #12]
 80125d0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80125d4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 80125d6:	687b      	ldr	r3, [r7, #4]
 80125d8:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80125dc:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80125de:	687b      	ldr	r3, [r7, #4]
 80125e0:	681b      	ldr	r3, [r3, #0]
 80125e2:	68fa      	ldr	r2, [r7, #12]
 80125e4:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80125e6:	6878      	ldr	r0, [r7, #4]
 80125e8:	f000 f88a 	bl	8012700 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	2220      	movs	r2, #32
 80125f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80125f4:	687b      	ldr	r3, [r7, #4]
 80125f6:	2200      	movs	r2, #0
 80125f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80125fc:	2300      	movs	r3, #0
}
 80125fe:	4618      	mov	r0, r3
 8012600:	3710      	adds	r7, #16
 8012602:	46bd      	mov	sp, r7
 8012604:	bd80      	pop	{r7, pc}

08012606 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8012606:	b580      	push	{r7, lr}
 8012608:	b084      	sub	sp, #16
 801260a:	af00      	add	r7, sp, #0
 801260c:	6078      	str	r0, [r7, #4]
 801260e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012610:	687b      	ldr	r3, [r7, #4]
 8012612:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8012616:	2b01      	cmp	r3, #1
 8012618:	d101      	bne.n	801261e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801261a:	2302      	movs	r3, #2
 801261c:	e02d      	b.n	801267a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801261e:	687b      	ldr	r3, [r7, #4]
 8012620:	2201      	movs	r2, #1
 8012622:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012626:	687b      	ldr	r3, [r7, #4]
 8012628:	2224      	movs	r2, #36	@ 0x24
 801262a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801262e:	687b      	ldr	r3, [r7, #4]
 8012630:	681b      	ldr	r3, [r3, #0]
 8012632:	681b      	ldr	r3, [r3, #0]
 8012634:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012636:	687b      	ldr	r3, [r7, #4]
 8012638:	681b      	ldr	r3, [r3, #0]
 801263a:	681a      	ldr	r2, [r3, #0]
 801263c:	687b      	ldr	r3, [r7, #4]
 801263e:	681b      	ldr	r3, [r3, #0]
 8012640:	f022 0201 	bic.w	r2, r2, #1
 8012644:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8012646:	687b      	ldr	r3, [r7, #4]
 8012648:	681b      	ldr	r3, [r3, #0]
 801264a:	689b      	ldr	r3, [r3, #8]
 801264c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8012650:	687b      	ldr	r3, [r7, #4]
 8012652:	681b      	ldr	r3, [r3, #0]
 8012654:	683a      	ldr	r2, [r7, #0]
 8012656:	430a      	orrs	r2, r1
 8012658:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801265a:	6878      	ldr	r0, [r7, #4]
 801265c:	f000 f850 	bl	8012700 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012660:	687b      	ldr	r3, [r7, #4]
 8012662:	681b      	ldr	r3, [r3, #0]
 8012664:	68fa      	ldr	r2, [r7, #12]
 8012666:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012668:	687b      	ldr	r3, [r7, #4]
 801266a:	2220      	movs	r2, #32
 801266c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012670:	687b      	ldr	r3, [r7, #4]
 8012672:	2200      	movs	r2, #0
 8012674:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8012678:	2300      	movs	r3, #0
}
 801267a:	4618      	mov	r0, r3
 801267c:	3710      	adds	r7, #16
 801267e:	46bd      	mov	sp, r7
 8012680:	bd80      	pop	{r7, pc}

08012682 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8012682:	b580      	push	{r7, lr}
 8012684:	b084      	sub	sp, #16
 8012686:	af00      	add	r7, sp, #0
 8012688:	6078      	str	r0, [r7, #4]
 801268a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801268c:	687b      	ldr	r3, [r7, #4]
 801268e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8012692:	2b01      	cmp	r3, #1
 8012694:	d101      	bne.n	801269a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8012696:	2302      	movs	r3, #2
 8012698:	e02d      	b.n	80126f6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801269a:	687b      	ldr	r3, [r7, #4]
 801269c:	2201      	movs	r2, #1
 801269e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80126a2:	687b      	ldr	r3, [r7, #4]
 80126a4:	2224      	movs	r2, #36	@ 0x24
 80126a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80126aa:	687b      	ldr	r3, [r7, #4]
 80126ac:	681b      	ldr	r3, [r3, #0]
 80126ae:	681b      	ldr	r3, [r3, #0]
 80126b0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80126b2:	687b      	ldr	r3, [r7, #4]
 80126b4:	681b      	ldr	r3, [r3, #0]
 80126b6:	681a      	ldr	r2, [r3, #0]
 80126b8:	687b      	ldr	r3, [r7, #4]
 80126ba:	681b      	ldr	r3, [r3, #0]
 80126bc:	f022 0201 	bic.w	r2, r2, #1
 80126c0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80126c2:	687b      	ldr	r3, [r7, #4]
 80126c4:	681b      	ldr	r3, [r3, #0]
 80126c6:	689b      	ldr	r3, [r3, #8]
 80126c8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80126cc:	687b      	ldr	r3, [r7, #4]
 80126ce:	681b      	ldr	r3, [r3, #0]
 80126d0:	683a      	ldr	r2, [r7, #0]
 80126d2:	430a      	orrs	r2, r1
 80126d4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80126d6:	6878      	ldr	r0, [r7, #4]
 80126d8:	f000 f812 	bl	8012700 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80126dc:	687b      	ldr	r3, [r7, #4]
 80126de:	681b      	ldr	r3, [r3, #0]
 80126e0:	68fa      	ldr	r2, [r7, #12]
 80126e2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80126e4:	687b      	ldr	r3, [r7, #4]
 80126e6:	2220      	movs	r2, #32
 80126e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80126ec:	687b      	ldr	r3, [r7, #4]
 80126ee:	2200      	movs	r2, #0
 80126f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80126f4:	2300      	movs	r3, #0
}
 80126f6:	4618      	mov	r0, r3
 80126f8:	3710      	adds	r7, #16
 80126fa:	46bd      	mov	sp, r7
 80126fc:	bd80      	pop	{r7, pc}
	...

08012700 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8012700:	b480      	push	{r7}
 8012702:	b085      	sub	sp, #20
 8012704:	af00      	add	r7, sp, #0
 8012706:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8012708:	687b      	ldr	r3, [r7, #4]
 801270a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801270c:	2b00      	cmp	r3, #0
 801270e:	d108      	bne.n	8012722 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8012710:	687b      	ldr	r3, [r7, #4]
 8012712:	2201      	movs	r2, #1
 8012714:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8012718:	687b      	ldr	r3, [r7, #4]
 801271a:	2201      	movs	r2, #1
 801271c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8012720:	e031      	b.n	8012786 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8012722:	2310      	movs	r3, #16
 8012724:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8012726:	2310      	movs	r3, #16
 8012728:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801272a:	687b      	ldr	r3, [r7, #4]
 801272c:	681b      	ldr	r3, [r3, #0]
 801272e:	689b      	ldr	r3, [r3, #8]
 8012730:	0e5b      	lsrs	r3, r3, #25
 8012732:	b2db      	uxtb	r3, r3
 8012734:	f003 0307 	and.w	r3, r3, #7
 8012738:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801273a:	687b      	ldr	r3, [r7, #4]
 801273c:	681b      	ldr	r3, [r3, #0]
 801273e:	689b      	ldr	r3, [r3, #8]
 8012740:	0f5b      	lsrs	r3, r3, #29
 8012742:	b2db      	uxtb	r3, r3
 8012744:	f003 0307 	and.w	r3, r3, #7
 8012748:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801274a:	7bbb      	ldrb	r3, [r7, #14]
 801274c:	7b3a      	ldrb	r2, [r7, #12]
 801274e:	4911      	ldr	r1, [pc, #68]	@ (8012794 <UARTEx_SetNbDataToProcess+0x94>)
 8012750:	5c8a      	ldrb	r2, [r1, r2]
 8012752:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8012756:	7b3a      	ldrb	r2, [r7, #12]
 8012758:	490f      	ldr	r1, [pc, #60]	@ (8012798 <UARTEx_SetNbDataToProcess+0x98>)
 801275a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801275c:	fb93 f3f2 	sdiv	r3, r3, r2
 8012760:	b29a      	uxth	r2, r3
 8012762:	687b      	ldr	r3, [r7, #4]
 8012764:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012768:	7bfb      	ldrb	r3, [r7, #15]
 801276a:	7b7a      	ldrb	r2, [r7, #13]
 801276c:	4909      	ldr	r1, [pc, #36]	@ (8012794 <UARTEx_SetNbDataToProcess+0x94>)
 801276e:	5c8a      	ldrb	r2, [r1, r2]
 8012770:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8012774:	7b7a      	ldrb	r2, [r7, #13]
 8012776:	4908      	ldr	r1, [pc, #32]	@ (8012798 <UARTEx_SetNbDataToProcess+0x98>)
 8012778:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801277a:	fb93 f3f2 	sdiv	r3, r3, r2
 801277e:	b29a      	uxth	r2, r3
 8012780:	687b      	ldr	r3, [r7, #4]
 8012782:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8012786:	bf00      	nop
 8012788:	3714      	adds	r7, #20
 801278a:	46bd      	mov	sp, r7
 801278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012790:	4770      	bx	lr
 8012792:	bf00      	nop
 8012794:	08017a98 	.word	0x08017a98
 8012798:	08017aa0 	.word	0x08017aa0

0801279c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 801279c:	b084      	sub	sp, #16
 801279e:	b580      	push	{r7, lr}
 80127a0:	b084      	sub	sp, #16
 80127a2:	af00      	add	r7, sp, #0
 80127a4:	6078      	str	r0, [r7, #4]
 80127a6:	f107 001c 	add.w	r0, r7, #28
 80127aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80127ae:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80127b2:	2b01      	cmp	r3, #1
 80127b4:	d121      	bne.n	80127fa <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80127b6:	687b      	ldr	r3, [r7, #4]
 80127b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80127ba:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80127be:	687b      	ldr	r3, [r7, #4]
 80127c0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80127c2:	687b      	ldr	r3, [r7, #4]
 80127c4:	68da      	ldr	r2, [r3, #12]
 80127c6:	4b2c      	ldr	r3, [pc, #176]	@ (8012878 <USB_CoreInit+0xdc>)
 80127c8:	4013      	ands	r3, r2
 80127ca:	687a      	ldr	r2, [r7, #4]
 80127cc:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80127ce:	687b      	ldr	r3, [r7, #4]
 80127d0:	68db      	ldr	r3, [r3, #12]
 80127d2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80127d6:	687b      	ldr	r3, [r7, #4]
 80127d8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80127da:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80127de:	2b01      	cmp	r3, #1
 80127e0:	d105      	bne.n	80127ee <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80127e2:	687b      	ldr	r3, [r7, #4]
 80127e4:	68db      	ldr	r3, [r3, #12]
 80127e6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80127ea:	687b      	ldr	r3, [r7, #4]
 80127ec:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80127ee:	6878      	ldr	r0, [r7, #4]
 80127f0:	f001 fafa 	bl	8013de8 <USB_CoreReset>
 80127f4:	4603      	mov	r3, r0
 80127f6:	73fb      	strb	r3, [r7, #15]
 80127f8:	e01b      	b.n	8012832 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80127fa:	687b      	ldr	r3, [r7, #4]
 80127fc:	68db      	ldr	r3, [r3, #12]
 80127fe:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8012802:	687b      	ldr	r3, [r7, #4]
 8012804:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8012806:	6878      	ldr	r0, [r7, #4]
 8012808:	f001 faee 	bl	8013de8 <USB_CoreReset>
 801280c:	4603      	mov	r3, r0
 801280e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8012810:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8012814:	2b00      	cmp	r3, #0
 8012816:	d106      	bne.n	8012826 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8012818:	687b      	ldr	r3, [r7, #4]
 801281a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801281c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8012820:	687b      	ldr	r3, [r7, #4]
 8012822:	639a      	str	r2, [r3, #56]	@ 0x38
 8012824:	e005      	b.n	8012832 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8012826:	687b      	ldr	r3, [r7, #4]
 8012828:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801282a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 801282e:	687b      	ldr	r3, [r7, #4]
 8012830:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8012832:	7fbb      	ldrb	r3, [r7, #30]
 8012834:	2b01      	cmp	r3, #1
 8012836:	d116      	bne.n	8012866 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8012838:	687b      	ldr	r3, [r7, #4]
 801283a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801283c:	b29a      	uxth	r2, r3
 801283e:	687b      	ldr	r3, [r7, #4]
 8012840:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8012842:	687b      	ldr	r3, [r7, #4]
 8012844:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8012846:	4b0d      	ldr	r3, [pc, #52]	@ (801287c <USB_CoreInit+0xe0>)
 8012848:	4313      	orrs	r3, r2
 801284a:	687a      	ldr	r2, [r7, #4]
 801284c:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 801284e:	687b      	ldr	r3, [r7, #4]
 8012850:	689b      	ldr	r3, [r3, #8]
 8012852:	f043 0206 	orr.w	r2, r3, #6
 8012856:	687b      	ldr	r3, [r7, #4]
 8012858:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 801285a:	687b      	ldr	r3, [r7, #4]
 801285c:	689b      	ldr	r3, [r3, #8]
 801285e:	f043 0220 	orr.w	r2, r3, #32
 8012862:	687b      	ldr	r3, [r7, #4]
 8012864:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8012866:	7bfb      	ldrb	r3, [r7, #15]
}
 8012868:	4618      	mov	r0, r3
 801286a:	3710      	adds	r7, #16
 801286c:	46bd      	mov	sp, r7
 801286e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8012872:	b004      	add	sp, #16
 8012874:	4770      	bx	lr
 8012876:	bf00      	nop
 8012878:	ffbdffbf 	.word	0xffbdffbf
 801287c:	03ee0000 	.word	0x03ee0000

08012880 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8012880:	b480      	push	{r7}
 8012882:	b087      	sub	sp, #28
 8012884:	af00      	add	r7, sp, #0
 8012886:	60f8      	str	r0, [r7, #12]
 8012888:	60b9      	str	r1, [r7, #8]
 801288a:	4613      	mov	r3, r2
 801288c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 801288e:	79fb      	ldrb	r3, [r7, #7]
 8012890:	2b02      	cmp	r3, #2
 8012892:	d165      	bne.n	8012960 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8012894:	68bb      	ldr	r3, [r7, #8]
 8012896:	4a41      	ldr	r2, [pc, #260]	@ (801299c <USB_SetTurnaroundTime+0x11c>)
 8012898:	4293      	cmp	r3, r2
 801289a:	d906      	bls.n	80128aa <USB_SetTurnaroundTime+0x2a>
 801289c:	68bb      	ldr	r3, [r7, #8]
 801289e:	4a40      	ldr	r2, [pc, #256]	@ (80129a0 <USB_SetTurnaroundTime+0x120>)
 80128a0:	4293      	cmp	r3, r2
 80128a2:	d202      	bcs.n	80128aa <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80128a4:	230f      	movs	r3, #15
 80128a6:	617b      	str	r3, [r7, #20]
 80128a8:	e062      	b.n	8012970 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80128aa:	68bb      	ldr	r3, [r7, #8]
 80128ac:	4a3c      	ldr	r2, [pc, #240]	@ (80129a0 <USB_SetTurnaroundTime+0x120>)
 80128ae:	4293      	cmp	r3, r2
 80128b0:	d306      	bcc.n	80128c0 <USB_SetTurnaroundTime+0x40>
 80128b2:	68bb      	ldr	r3, [r7, #8]
 80128b4:	4a3b      	ldr	r2, [pc, #236]	@ (80129a4 <USB_SetTurnaroundTime+0x124>)
 80128b6:	4293      	cmp	r3, r2
 80128b8:	d202      	bcs.n	80128c0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80128ba:	230e      	movs	r3, #14
 80128bc:	617b      	str	r3, [r7, #20]
 80128be:	e057      	b.n	8012970 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80128c0:	68bb      	ldr	r3, [r7, #8]
 80128c2:	4a38      	ldr	r2, [pc, #224]	@ (80129a4 <USB_SetTurnaroundTime+0x124>)
 80128c4:	4293      	cmp	r3, r2
 80128c6:	d306      	bcc.n	80128d6 <USB_SetTurnaroundTime+0x56>
 80128c8:	68bb      	ldr	r3, [r7, #8]
 80128ca:	4a37      	ldr	r2, [pc, #220]	@ (80129a8 <USB_SetTurnaroundTime+0x128>)
 80128cc:	4293      	cmp	r3, r2
 80128ce:	d202      	bcs.n	80128d6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80128d0:	230d      	movs	r3, #13
 80128d2:	617b      	str	r3, [r7, #20]
 80128d4:	e04c      	b.n	8012970 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80128d6:	68bb      	ldr	r3, [r7, #8]
 80128d8:	4a33      	ldr	r2, [pc, #204]	@ (80129a8 <USB_SetTurnaroundTime+0x128>)
 80128da:	4293      	cmp	r3, r2
 80128dc:	d306      	bcc.n	80128ec <USB_SetTurnaroundTime+0x6c>
 80128de:	68bb      	ldr	r3, [r7, #8]
 80128e0:	4a32      	ldr	r2, [pc, #200]	@ (80129ac <USB_SetTurnaroundTime+0x12c>)
 80128e2:	4293      	cmp	r3, r2
 80128e4:	d802      	bhi.n	80128ec <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80128e6:	230c      	movs	r3, #12
 80128e8:	617b      	str	r3, [r7, #20]
 80128ea:	e041      	b.n	8012970 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80128ec:	68bb      	ldr	r3, [r7, #8]
 80128ee:	4a2f      	ldr	r2, [pc, #188]	@ (80129ac <USB_SetTurnaroundTime+0x12c>)
 80128f0:	4293      	cmp	r3, r2
 80128f2:	d906      	bls.n	8012902 <USB_SetTurnaroundTime+0x82>
 80128f4:	68bb      	ldr	r3, [r7, #8]
 80128f6:	4a2e      	ldr	r2, [pc, #184]	@ (80129b0 <USB_SetTurnaroundTime+0x130>)
 80128f8:	4293      	cmp	r3, r2
 80128fa:	d802      	bhi.n	8012902 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80128fc:	230b      	movs	r3, #11
 80128fe:	617b      	str	r3, [r7, #20]
 8012900:	e036      	b.n	8012970 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8012902:	68bb      	ldr	r3, [r7, #8]
 8012904:	4a2a      	ldr	r2, [pc, #168]	@ (80129b0 <USB_SetTurnaroundTime+0x130>)
 8012906:	4293      	cmp	r3, r2
 8012908:	d906      	bls.n	8012918 <USB_SetTurnaroundTime+0x98>
 801290a:	68bb      	ldr	r3, [r7, #8]
 801290c:	4a29      	ldr	r2, [pc, #164]	@ (80129b4 <USB_SetTurnaroundTime+0x134>)
 801290e:	4293      	cmp	r3, r2
 8012910:	d802      	bhi.n	8012918 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8012912:	230a      	movs	r3, #10
 8012914:	617b      	str	r3, [r7, #20]
 8012916:	e02b      	b.n	8012970 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8012918:	68bb      	ldr	r3, [r7, #8]
 801291a:	4a26      	ldr	r2, [pc, #152]	@ (80129b4 <USB_SetTurnaroundTime+0x134>)
 801291c:	4293      	cmp	r3, r2
 801291e:	d906      	bls.n	801292e <USB_SetTurnaroundTime+0xae>
 8012920:	68bb      	ldr	r3, [r7, #8]
 8012922:	4a25      	ldr	r2, [pc, #148]	@ (80129b8 <USB_SetTurnaroundTime+0x138>)
 8012924:	4293      	cmp	r3, r2
 8012926:	d202      	bcs.n	801292e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8012928:	2309      	movs	r3, #9
 801292a:	617b      	str	r3, [r7, #20]
 801292c:	e020      	b.n	8012970 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 801292e:	68bb      	ldr	r3, [r7, #8]
 8012930:	4a21      	ldr	r2, [pc, #132]	@ (80129b8 <USB_SetTurnaroundTime+0x138>)
 8012932:	4293      	cmp	r3, r2
 8012934:	d306      	bcc.n	8012944 <USB_SetTurnaroundTime+0xc4>
 8012936:	68bb      	ldr	r3, [r7, #8]
 8012938:	4a20      	ldr	r2, [pc, #128]	@ (80129bc <USB_SetTurnaroundTime+0x13c>)
 801293a:	4293      	cmp	r3, r2
 801293c:	d802      	bhi.n	8012944 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 801293e:	2308      	movs	r3, #8
 8012940:	617b      	str	r3, [r7, #20]
 8012942:	e015      	b.n	8012970 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8012944:	68bb      	ldr	r3, [r7, #8]
 8012946:	4a1d      	ldr	r2, [pc, #116]	@ (80129bc <USB_SetTurnaroundTime+0x13c>)
 8012948:	4293      	cmp	r3, r2
 801294a:	d906      	bls.n	801295a <USB_SetTurnaroundTime+0xda>
 801294c:	68bb      	ldr	r3, [r7, #8]
 801294e:	4a1c      	ldr	r2, [pc, #112]	@ (80129c0 <USB_SetTurnaroundTime+0x140>)
 8012950:	4293      	cmp	r3, r2
 8012952:	d202      	bcs.n	801295a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8012954:	2307      	movs	r3, #7
 8012956:	617b      	str	r3, [r7, #20]
 8012958:	e00a      	b.n	8012970 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 801295a:	2306      	movs	r3, #6
 801295c:	617b      	str	r3, [r7, #20]
 801295e:	e007      	b.n	8012970 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8012960:	79fb      	ldrb	r3, [r7, #7]
 8012962:	2b00      	cmp	r3, #0
 8012964:	d102      	bne.n	801296c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8012966:	2309      	movs	r3, #9
 8012968:	617b      	str	r3, [r7, #20]
 801296a:	e001      	b.n	8012970 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 801296c:	2309      	movs	r3, #9
 801296e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8012970:	68fb      	ldr	r3, [r7, #12]
 8012972:	68db      	ldr	r3, [r3, #12]
 8012974:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8012978:	68fb      	ldr	r3, [r7, #12]
 801297a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 801297c:	68fb      	ldr	r3, [r7, #12]
 801297e:	68da      	ldr	r2, [r3, #12]
 8012980:	697b      	ldr	r3, [r7, #20]
 8012982:	029b      	lsls	r3, r3, #10
 8012984:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8012988:	431a      	orrs	r2, r3
 801298a:	68fb      	ldr	r3, [r7, #12]
 801298c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 801298e:	2300      	movs	r3, #0
}
 8012990:	4618      	mov	r0, r3
 8012992:	371c      	adds	r7, #28
 8012994:	46bd      	mov	sp, r7
 8012996:	f85d 7b04 	ldr.w	r7, [sp], #4
 801299a:	4770      	bx	lr
 801299c:	00d8acbf 	.word	0x00d8acbf
 80129a0:	00e4e1c0 	.word	0x00e4e1c0
 80129a4:	00f42400 	.word	0x00f42400
 80129a8:	01067380 	.word	0x01067380
 80129ac:	011a499f 	.word	0x011a499f
 80129b0:	01312cff 	.word	0x01312cff
 80129b4:	014ca43f 	.word	0x014ca43f
 80129b8:	016e3600 	.word	0x016e3600
 80129bc:	01a6ab1f 	.word	0x01a6ab1f
 80129c0:	01e84800 	.word	0x01e84800

080129c4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80129c4:	b480      	push	{r7}
 80129c6:	b083      	sub	sp, #12
 80129c8:	af00      	add	r7, sp, #0
 80129ca:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80129cc:	687b      	ldr	r3, [r7, #4]
 80129ce:	689b      	ldr	r3, [r3, #8]
 80129d0:	f043 0201 	orr.w	r2, r3, #1
 80129d4:	687b      	ldr	r3, [r7, #4]
 80129d6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80129d8:	2300      	movs	r3, #0
}
 80129da:	4618      	mov	r0, r3
 80129dc:	370c      	adds	r7, #12
 80129de:	46bd      	mov	sp, r7
 80129e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129e4:	4770      	bx	lr

080129e6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80129e6:	b480      	push	{r7}
 80129e8:	b083      	sub	sp, #12
 80129ea:	af00      	add	r7, sp, #0
 80129ec:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80129ee:	687b      	ldr	r3, [r7, #4]
 80129f0:	689b      	ldr	r3, [r3, #8]
 80129f2:	f023 0201 	bic.w	r2, r3, #1
 80129f6:	687b      	ldr	r3, [r7, #4]
 80129f8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80129fa:	2300      	movs	r3, #0
}
 80129fc:	4618      	mov	r0, r3
 80129fe:	370c      	adds	r7, #12
 8012a00:	46bd      	mov	sp, r7
 8012a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a06:	4770      	bx	lr

08012a08 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8012a08:	b580      	push	{r7, lr}
 8012a0a:	b084      	sub	sp, #16
 8012a0c:	af00      	add	r7, sp, #0
 8012a0e:	6078      	str	r0, [r7, #4]
 8012a10:	460b      	mov	r3, r1
 8012a12:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8012a14:	2300      	movs	r3, #0
 8012a16:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8012a18:	687b      	ldr	r3, [r7, #4]
 8012a1a:	68db      	ldr	r3, [r3, #12]
 8012a1c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8012a20:	687b      	ldr	r3, [r7, #4]
 8012a22:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8012a24:	78fb      	ldrb	r3, [r7, #3]
 8012a26:	2b01      	cmp	r3, #1
 8012a28:	d115      	bne.n	8012a56 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8012a2a:	687b      	ldr	r3, [r7, #4]
 8012a2c:	68db      	ldr	r3, [r3, #12]
 8012a2e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8012a32:	687b      	ldr	r3, [r7, #4]
 8012a34:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8012a36:	200a      	movs	r0, #10
 8012a38:	f7f0 f82e 	bl	8002a98 <HAL_Delay>
      ms += 10U;
 8012a3c:	68fb      	ldr	r3, [r7, #12]
 8012a3e:	330a      	adds	r3, #10
 8012a40:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8012a42:	6878      	ldr	r0, [r7, #4]
 8012a44:	f001 f93f 	bl	8013cc6 <USB_GetMode>
 8012a48:	4603      	mov	r3, r0
 8012a4a:	2b01      	cmp	r3, #1
 8012a4c:	d01e      	beq.n	8012a8c <USB_SetCurrentMode+0x84>
 8012a4e:	68fb      	ldr	r3, [r7, #12]
 8012a50:	2bc7      	cmp	r3, #199	@ 0xc7
 8012a52:	d9f0      	bls.n	8012a36 <USB_SetCurrentMode+0x2e>
 8012a54:	e01a      	b.n	8012a8c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8012a56:	78fb      	ldrb	r3, [r7, #3]
 8012a58:	2b00      	cmp	r3, #0
 8012a5a:	d115      	bne.n	8012a88 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8012a5c:	687b      	ldr	r3, [r7, #4]
 8012a5e:	68db      	ldr	r3, [r3, #12]
 8012a60:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8012a64:	687b      	ldr	r3, [r7, #4]
 8012a66:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8012a68:	200a      	movs	r0, #10
 8012a6a:	f7f0 f815 	bl	8002a98 <HAL_Delay>
      ms += 10U;
 8012a6e:	68fb      	ldr	r3, [r7, #12]
 8012a70:	330a      	adds	r3, #10
 8012a72:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8012a74:	6878      	ldr	r0, [r7, #4]
 8012a76:	f001 f926 	bl	8013cc6 <USB_GetMode>
 8012a7a:	4603      	mov	r3, r0
 8012a7c:	2b00      	cmp	r3, #0
 8012a7e:	d005      	beq.n	8012a8c <USB_SetCurrentMode+0x84>
 8012a80:	68fb      	ldr	r3, [r7, #12]
 8012a82:	2bc7      	cmp	r3, #199	@ 0xc7
 8012a84:	d9f0      	bls.n	8012a68 <USB_SetCurrentMode+0x60>
 8012a86:	e001      	b.n	8012a8c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8012a88:	2301      	movs	r3, #1
 8012a8a:	e005      	b.n	8012a98 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8012a8c:	68fb      	ldr	r3, [r7, #12]
 8012a8e:	2bc8      	cmp	r3, #200	@ 0xc8
 8012a90:	d101      	bne.n	8012a96 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8012a92:	2301      	movs	r3, #1
 8012a94:	e000      	b.n	8012a98 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8012a96:	2300      	movs	r3, #0
}
 8012a98:	4618      	mov	r0, r3
 8012a9a:	3710      	adds	r7, #16
 8012a9c:	46bd      	mov	sp, r7
 8012a9e:	bd80      	pop	{r7, pc}

08012aa0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8012aa0:	b084      	sub	sp, #16
 8012aa2:	b580      	push	{r7, lr}
 8012aa4:	b086      	sub	sp, #24
 8012aa6:	af00      	add	r7, sp, #0
 8012aa8:	6078      	str	r0, [r7, #4]
 8012aaa:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8012aae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8012ab2:	2300      	movs	r3, #0
 8012ab4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012ab6:	687b      	ldr	r3, [r7, #4]
 8012ab8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8012aba:	2300      	movs	r3, #0
 8012abc:	613b      	str	r3, [r7, #16]
 8012abe:	e009      	b.n	8012ad4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8012ac0:	687a      	ldr	r2, [r7, #4]
 8012ac2:	693b      	ldr	r3, [r7, #16]
 8012ac4:	3340      	adds	r3, #64	@ 0x40
 8012ac6:	009b      	lsls	r3, r3, #2
 8012ac8:	4413      	add	r3, r2
 8012aca:	2200      	movs	r2, #0
 8012acc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8012ace:	693b      	ldr	r3, [r7, #16]
 8012ad0:	3301      	adds	r3, #1
 8012ad2:	613b      	str	r3, [r7, #16]
 8012ad4:	693b      	ldr	r3, [r7, #16]
 8012ad6:	2b0e      	cmp	r3, #14
 8012ad8:	d9f2      	bls.n	8012ac0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8012ada:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8012ade:	2b00      	cmp	r3, #0
 8012ae0:	d11c      	bne.n	8012b1c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8012ae2:	68fb      	ldr	r3, [r7, #12]
 8012ae4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012ae8:	685b      	ldr	r3, [r3, #4]
 8012aea:	68fa      	ldr	r2, [r7, #12]
 8012aec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8012af0:	f043 0302 	orr.w	r3, r3, #2
 8012af4:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8012af6:	687b      	ldr	r3, [r7, #4]
 8012af8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012afa:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8012afe:	687b      	ldr	r3, [r7, #4]
 8012b00:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8012b02:	687b      	ldr	r3, [r7, #4]
 8012b04:	681b      	ldr	r3, [r3, #0]
 8012b06:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8012b0a:	687b      	ldr	r3, [r7, #4]
 8012b0c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8012b0e:	687b      	ldr	r3, [r7, #4]
 8012b10:	681b      	ldr	r3, [r3, #0]
 8012b12:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8012b16:	687b      	ldr	r3, [r7, #4]
 8012b18:	601a      	str	r2, [r3, #0]
 8012b1a:	e005      	b.n	8012b28 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8012b1c:	687b      	ldr	r3, [r7, #4]
 8012b1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012b20:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8012b24:	687b      	ldr	r3, [r7, #4]
 8012b26:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8012b28:	68fb      	ldr	r3, [r7, #12]
 8012b2a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8012b2e:	461a      	mov	r2, r3
 8012b30:	2300      	movs	r3, #0
 8012b32:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8012b34:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8012b38:	2b01      	cmp	r3, #1
 8012b3a:	d10d      	bne.n	8012b58 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8012b3c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012b40:	2b00      	cmp	r3, #0
 8012b42:	d104      	bne.n	8012b4e <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8012b44:	2100      	movs	r1, #0
 8012b46:	6878      	ldr	r0, [r7, #4]
 8012b48:	f000 f968 	bl	8012e1c <USB_SetDevSpeed>
 8012b4c:	e008      	b.n	8012b60 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8012b4e:	2101      	movs	r1, #1
 8012b50:	6878      	ldr	r0, [r7, #4]
 8012b52:	f000 f963 	bl	8012e1c <USB_SetDevSpeed>
 8012b56:	e003      	b.n	8012b60 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8012b58:	2103      	movs	r1, #3
 8012b5a:	6878      	ldr	r0, [r7, #4]
 8012b5c:	f000 f95e 	bl	8012e1c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8012b60:	2110      	movs	r1, #16
 8012b62:	6878      	ldr	r0, [r7, #4]
 8012b64:	f000 f8fa 	bl	8012d5c <USB_FlushTxFifo>
 8012b68:	4603      	mov	r3, r0
 8012b6a:	2b00      	cmp	r3, #0
 8012b6c:	d001      	beq.n	8012b72 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8012b6e:	2301      	movs	r3, #1
 8012b70:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8012b72:	6878      	ldr	r0, [r7, #4]
 8012b74:	f000 f924 	bl	8012dc0 <USB_FlushRxFifo>
 8012b78:	4603      	mov	r3, r0
 8012b7a:	2b00      	cmp	r3, #0
 8012b7c:	d001      	beq.n	8012b82 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8012b7e:	2301      	movs	r3, #1
 8012b80:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8012b82:	68fb      	ldr	r3, [r7, #12]
 8012b84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012b88:	461a      	mov	r2, r3
 8012b8a:	2300      	movs	r3, #0
 8012b8c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8012b8e:	68fb      	ldr	r3, [r7, #12]
 8012b90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012b94:	461a      	mov	r2, r3
 8012b96:	2300      	movs	r3, #0
 8012b98:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8012b9a:	68fb      	ldr	r3, [r7, #12]
 8012b9c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012ba0:	461a      	mov	r2, r3
 8012ba2:	2300      	movs	r3, #0
 8012ba4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012ba6:	2300      	movs	r3, #0
 8012ba8:	613b      	str	r3, [r7, #16]
 8012baa:	e043      	b.n	8012c34 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8012bac:	693b      	ldr	r3, [r7, #16]
 8012bae:	015a      	lsls	r2, r3, #5
 8012bb0:	68fb      	ldr	r3, [r7, #12]
 8012bb2:	4413      	add	r3, r2
 8012bb4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012bb8:	681b      	ldr	r3, [r3, #0]
 8012bba:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8012bbe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8012bc2:	d118      	bne.n	8012bf6 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8012bc4:	693b      	ldr	r3, [r7, #16]
 8012bc6:	2b00      	cmp	r3, #0
 8012bc8:	d10a      	bne.n	8012be0 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8012bca:	693b      	ldr	r3, [r7, #16]
 8012bcc:	015a      	lsls	r2, r3, #5
 8012bce:	68fb      	ldr	r3, [r7, #12]
 8012bd0:	4413      	add	r3, r2
 8012bd2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012bd6:	461a      	mov	r2, r3
 8012bd8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8012bdc:	6013      	str	r3, [r2, #0]
 8012bde:	e013      	b.n	8012c08 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8012be0:	693b      	ldr	r3, [r7, #16]
 8012be2:	015a      	lsls	r2, r3, #5
 8012be4:	68fb      	ldr	r3, [r7, #12]
 8012be6:	4413      	add	r3, r2
 8012be8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012bec:	461a      	mov	r2, r3
 8012bee:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8012bf2:	6013      	str	r3, [r2, #0]
 8012bf4:	e008      	b.n	8012c08 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8012bf6:	693b      	ldr	r3, [r7, #16]
 8012bf8:	015a      	lsls	r2, r3, #5
 8012bfa:	68fb      	ldr	r3, [r7, #12]
 8012bfc:	4413      	add	r3, r2
 8012bfe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012c02:	461a      	mov	r2, r3
 8012c04:	2300      	movs	r3, #0
 8012c06:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8012c08:	693b      	ldr	r3, [r7, #16]
 8012c0a:	015a      	lsls	r2, r3, #5
 8012c0c:	68fb      	ldr	r3, [r7, #12]
 8012c0e:	4413      	add	r3, r2
 8012c10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012c14:	461a      	mov	r2, r3
 8012c16:	2300      	movs	r3, #0
 8012c18:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8012c1a:	693b      	ldr	r3, [r7, #16]
 8012c1c:	015a      	lsls	r2, r3, #5
 8012c1e:	68fb      	ldr	r3, [r7, #12]
 8012c20:	4413      	add	r3, r2
 8012c22:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012c26:	461a      	mov	r2, r3
 8012c28:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8012c2c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012c2e:	693b      	ldr	r3, [r7, #16]
 8012c30:	3301      	adds	r3, #1
 8012c32:	613b      	str	r3, [r7, #16]
 8012c34:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8012c38:	461a      	mov	r2, r3
 8012c3a:	693b      	ldr	r3, [r7, #16]
 8012c3c:	4293      	cmp	r3, r2
 8012c3e:	d3b5      	bcc.n	8012bac <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012c40:	2300      	movs	r3, #0
 8012c42:	613b      	str	r3, [r7, #16]
 8012c44:	e043      	b.n	8012cce <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8012c46:	693b      	ldr	r3, [r7, #16]
 8012c48:	015a      	lsls	r2, r3, #5
 8012c4a:	68fb      	ldr	r3, [r7, #12]
 8012c4c:	4413      	add	r3, r2
 8012c4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012c52:	681b      	ldr	r3, [r3, #0]
 8012c54:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8012c58:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8012c5c:	d118      	bne.n	8012c90 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8012c5e:	693b      	ldr	r3, [r7, #16]
 8012c60:	2b00      	cmp	r3, #0
 8012c62:	d10a      	bne.n	8012c7a <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8012c64:	693b      	ldr	r3, [r7, #16]
 8012c66:	015a      	lsls	r2, r3, #5
 8012c68:	68fb      	ldr	r3, [r7, #12]
 8012c6a:	4413      	add	r3, r2
 8012c6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012c70:	461a      	mov	r2, r3
 8012c72:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8012c76:	6013      	str	r3, [r2, #0]
 8012c78:	e013      	b.n	8012ca2 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8012c7a:	693b      	ldr	r3, [r7, #16]
 8012c7c:	015a      	lsls	r2, r3, #5
 8012c7e:	68fb      	ldr	r3, [r7, #12]
 8012c80:	4413      	add	r3, r2
 8012c82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012c86:	461a      	mov	r2, r3
 8012c88:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8012c8c:	6013      	str	r3, [r2, #0]
 8012c8e:	e008      	b.n	8012ca2 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8012c90:	693b      	ldr	r3, [r7, #16]
 8012c92:	015a      	lsls	r2, r3, #5
 8012c94:	68fb      	ldr	r3, [r7, #12]
 8012c96:	4413      	add	r3, r2
 8012c98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012c9c:	461a      	mov	r2, r3
 8012c9e:	2300      	movs	r3, #0
 8012ca0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8012ca2:	693b      	ldr	r3, [r7, #16]
 8012ca4:	015a      	lsls	r2, r3, #5
 8012ca6:	68fb      	ldr	r3, [r7, #12]
 8012ca8:	4413      	add	r3, r2
 8012caa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012cae:	461a      	mov	r2, r3
 8012cb0:	2300      	movs	r3, #0
 8012cb2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8012cb4:	693b      	ldr	r3, [r7, #16]
 8012cb6:	015a      	lsls	r2, r3, #5
 8012cb8:	68fb      	ldr	r3, [r7, #12]
 8012cba:	4413      	add	r3, r2
 8012cbc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012cc0:	461a      	mov	r2, r3
 8012cc2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8012cc6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012cc8:	693b      	ldr	r3, [r7, #16]
 8012cca:	3301      	adds	r3, #1
 8012ccc:	613b      	str	r3, [r7, #16]
 8012cce:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8012cd2:	461a      	mov	r2, r3
 8012cd4:	693b      	ldr	r3, [r7, #16]
 8012cd6:	4293      	cmp	r3, r2
 8012cd8:	d3b5      	bcc.n	8012c46 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8012cda:	68fb      	ldr	r3, [r7, #12]
 8012cdc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012ce0:	691b      	ldr	r3, [r3, #16]
 8012ce2:	68fa      	ldr	r2, [r7, #12]
 8012ce4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8012ce8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8012cec:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8012cee:	687b      	ldr	r3, [r7, #4]
 8012cf0:	2200      	movs	r2, #0
 8012cf2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8012cf4:	687b      	ldr	r3, [r7, #4]
 8012cf6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8012cfa:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8012cfc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8012d00:	2b00      	cmp	r3, #0
 8012d02:	d105      	bne.n	8012d10 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8012d04:	687b      	ldr	r3, [r7, #4]
 8012d06:	699b      	ldr	r3, [r3, #24]
 8012d08:	f043 0210 	orr.w	r2, r3, #16
 8012d0c:	687b      	ldr	r3, [r7, #4]
 8012d0e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8012d10:	687b      	ldr	r3, [r7, #4]
 8012d12:	699a      	ldr	r2, [r3, #24]
 8012d14:	4b0f      	ldr	r3, [pc, #60]	@ (8012d54 <USB_DevInit+0x2b4>)
 8012d16:	4313      	orrs	r3, r2
 8012d18:	687a      	ldr	r2, [r7, #4]
 8012d1a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8012d1c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8012d20:	2b00      	cmp	r3, #0
 8012d22:	d005      	beq.n	8012d30 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8012d24:	687b      	ldr	r3, [r7, #4]
 8012d26:	699b      	ldr	r3, [r3, #24]
 8012d28:	f043 0208 	orr.w	r2, r3, #8
 8012d2c:	687b      	ldr	r3, [r7, #4]
 8012d2e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8012d30:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8012d34:	2b01      	cmp	r3, #1
 8012d36:	d105      	bne.n	8012d44 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8012d38:	687b      	ldr	r3, [r7, #4]
 8012d3a:	699a      	ldr	r2, [r3, #24]
 8012d3c:	4b06      	ldr	r3, [pc, #24]	@ (8012d58 <USB_DevInit+0x2b8>)
 8012d3e:	4313      	orrs	r3, r2
 8012d40:	687a      	ldr	r2, [r7, #4]
 8012d42:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8012d44:	7dfb      	ldrb	r3, [r7, #23]
}
 8012d46:	4618      	mov	r0, r3
 8012d48:	3718      	adds	r7, #24
 8012d4a:	46bd      	mov	sp, r7
 8012d4c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8012d50:	b004      	add	sp, #16
 8012d52:	4770      	bx	lr
 8012d54:	803c3800 	.word	0x803c3800
 8012d58:	40000004 	.word	0x40000004

08012d5c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8012d5c:	b480      	push	{r7}
 8012d5e:	b085      	sub	sp, #20
 8012d60:	af00      	add	r7, sp, #0
 8012d62:	6078      	str	r0, [r7, #4]
 8012d64:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8012d66:	2300      	movs	r3, #0
 8012d68:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8012d6a:	68fb      	ldr	r3, [r7, #12]
 8012d6c:	3301      	adds	r3, #1
 8012d6e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8012d70:	68fb      	ldr	r3, [r7, #12]
 8012d72:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8012d76:	d901      	bls.n	8012d7c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8012d78:	2303      	movs	r3, #3
 8012d7a:	e01b      	b.n	8012db4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8012d7c:	687b      	ldr	r3, [r7, #4]
 8012d7e:	691b      	ldr	r3, [r3, #16]
 8012d80:	2b00      	cmp	r3, #0
 8012d82:	daf2      	bge.n	8012d6a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8012d84:	2300      	movs	r3, #0
 8012d86:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8012d88:	683b      	ldr	r3, [r7, #0]
 8012d8a:	019b      	lsls	r3, r3, #6
 8012d8c:	f043 0220 	orr.w	r2, r3, #32
 8012d90:	687b      	ldr	r3, [r7, #4]
 8012d92:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8012d94:	68fb      	ldr	r3, [r7, #12]
 8012d96:	3301      	adds	r3, #1
 8012d98:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8012d9a:	68fb      	ldr	r3, [r7, #12]
 8012d9c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8012da0:	d901      	bls.n	8012da6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8012da2:	2303      	movs	r3, #3
 8012da4:	e006      	b.n	8012db4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8012da6:	687b      	ldr	r3, [r7, #4]
 8012da8:	691b      	ldr	r3, [r3, #16]
 8012daa:	f003 0320 	and.w	r3, r3, #32
 8012dae:	2b20      	cmp	r3, #32
 8012db0:	d0f0      	beq.n	8012d94 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8012db2:	2300      	movs	r3, #0
}
 8012db4:	4618      	mov	r0, r3
 8012db6:	3714      	adds	r7, #20
 8012db8:	46bd      	mov	sp, r7
 8012dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dbe:	4770      	bx	lr

08012dc0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8012dc0:	b480      	push	{r7}
 8012dc2:	b085      	sub	sp, #20
 8012dc4:	af00      	add	r7, sp, #0
 8012dc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8012dc8:	2300      	movs	r3, #0
 8012dca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8012dcc:	68fb      	ldr	r3, [r7, #12]
 8012dce:	3301      	adds	r3, #1
 8012dd0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8012dd2:	68fb      	ldr	r3, [r7, #12]
 8012dd4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8012dd8:	d901      	bls.n	8012dde <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8012dda:	2303      	movs	r3, #3
 8012ddc:	e018      	b.n	8012e10 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8012dde:	687b      	ldr	r3, [r7, #4]
 8012de0:	691b      	ldr	r3, [r3, #16]
 8012de2:	2b00      	cmp	r3, #0
 8012de4:	daf2      	bge.n	8012dcc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8012de6:	2300      	movs	r3, #0
 8012de8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8012dea:	687b      	ldr	r3, [r7, #4]
 8012dec:	2210      	movs	r2, #16
 8012dee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8012df0:	68fb      	ldr	r3, [r7, #12]
 8012df2:	3301      	adds	r3, #1
 8012df4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8012df6:	68fb      	ldr	r3, [r7, #12]
 8012df8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8012dfc:	d901      	bls.n	8012e02 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8012dfe:	2303      	movs	r3, #3
 8012e00:	e006      	b.n	8012e10 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8012e02:	687b      	ldr	r3, [r7, #4]
 8012e04:	691b      	ldr	r3, [r3, #16]
 8012e06:	f003 0310 	and.w	r3, r3, #16
 8012e0a:	2b10      	cmp	r3, #16
 8012e0c:	d0f0      	beq.n	8012df0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8012e0e:	2300      	movs	r3, #0
}
 8012e10:	4618      	mov	r0, r3
 8012e12:	3714      	adds	r7, #20
 8012e14:	46bd      	mov	sp, r7
 8012e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e1a:	4770      	bx	lr

08012e1c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8012e1c:	b480      	push	{r7}
 8012e1e:	b085      	sub	sp, #20
 8012e20:	af00      	add	r7, sp, #0
 8012e22:	6078      	str	r0, [r7, #4]
 8012e24:	460b      	mov	r3, r1
 8012e26:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012e28:	687b      	ldr	r3, [r7, #4]
 8012e2a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8012e2c:	68fb      	ldr	r3, [r7, #12]
 8012e2e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012e32:	681a      	ldr	r2, [r3, #0]
 8012e34:	78fb      	ldrb	r3, [r7, #3]
 8012e36:	68f9      	ldr	r1, [r7, #12]
 8012e38:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8012e3c:	4313      	orrs	r3, r2
 8012e3e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8012e40:	2300      	movs	r3, #0
}
 8012e42:	4618      	mov	r0, r3
 8012e44:	3714      	adds	r7, #20
 8012e46:	46bd      	mov	sp, r7
 8012e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e4c:	4770      	bx	lr

08012e4e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8012e4e:	b480      	push	{r7}
 8012e50:	b087      	sub	sp, #28
 8012e52:	af00      	add	r7, sp, #0
 8012e54:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012e56:	687b      	ldr	r3, [r7, #4]
 8012e58:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8012e5a:	693b      	ldr	r3, [r7, #16]
 8012e5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012e60:	689b      	ldr	r3, [r3, #8]
 8012e62:	f003 0306 	and.w	r3, r3, #6
 8012e66:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8012e68:	68fb      	ldr	r3, [r7, #12]
 8012e6a:	2b00      	cmp	r3, #0
 8012e6c:	d102      	bne.n	8012e74 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8012e6e:	2300      	movs	r3, #0
 8012e70:	75fb      	strb	r3, [r7, #23]
 8012e72:	e00a      	b.n	8012e8a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8012e74:	68fb      	ldr	r3, [r7, #12]
 8012e76:	2b02      	cmp	r3, #2
 8012e78:	d002      	beq.n	8012e80 <USB_GetDevSpeed+0x32>
 8012e7a:	68fb      	ldr	r3, [r7, #12]
 8012e7c:	2b06      	cmp	r3, #6
 8012e7e:	d102      	bne.n	8012e86 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8012e80:	2302      	movs	r3, #2
 8012e82:	75fb      	strb	r3, [r7, #23]
 8012e84:	e001      	b.n	8012e8a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8012e86:	230f      	movs	r3, #15
 8012e88:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8012e8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8012e8c:	4618      	mov	r0, r3
 8012e8e:	371c      	adds	r7, #28
 8012e90:	46bd      	mov	sp, r7
 8012e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e96:	4770      	bx	lr

08012e98 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8012e98:	b480      	push	{r7}
 8012e9a:	b085      	sub	sp, #20
 8012e9c:	af00      	add	r7, sp, #0
 8012e9e:	6078      	str	r0, [r7, #4]
 8012ea0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012ea2:	687b      	ldr	r3, [r7, #4]
 8012ea4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8012ea6:	683b      	ldr	r3, [r7, #0]
 8012ea8:	781b      	ldrb	r3, [r3, #0]
 8012eaa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8012eac:	683b      	ldr	r3, [r7, #0]
 8012eae:	785b      	ldrb	r3, [r3, #1]
 8012eb0:	2b01      	cmp	r3, #1
 8012eb2:	d139      	bne.n	8012f28 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8012eb4:	68fb      	ldr	r3, [r7, #12]
 8012eb6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012eba:	69da      	ldr	r2, [r3, #28]
 8012ebc:	683b      	ldr	r3, [r7, #0]
 8012ebe:	781b      	ldrb	r3, [r3, #0]
 8012ec0:	f003 030f 	and.w	r3, r3, #15
 8012ec4:	2101      	movs	r1, #1
 8012ec6:	fa01 f303 	lsl.w	r3, r1, r3
 8012eca:	b29b      	uxth	r3, r3
 8012ecc:	68f9      	ldr	r1, [r7, #12]
 8012ece:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8012ed2:	4313      	orrs	r3, r2
 8012ed4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8012ed6:	68bb      	ldr	r3, [r7, #8]
 8012ed8:	015a      	lsls	r2, r3, #5
 8012eda:	68fb      	ldr	r3, [r7, #12]
 8012edc:	4413      	add	r3, r2
 8012ede:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012ee2:	681b      	ldr	r3, [r3, #0]
 8012ee4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8012ee8:	2b00      	cmp	r3, #0
 8012eea:	d153      	bne.n	8012f94 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8012eec:	68bb      	ldr	r3, [r7, #8]
 8012eee:	015a      	lsls	r2, r3, #5
 8012ef0:	68fb      	ldr	r3, [r7, #12]
 8012ef2:	4413      	add	r3, r2
 8012ef4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012ef8:	681a      	ldr	r2, [r3, #0]
 8012efa:	683b      	ldr	r3, [r7, #0]
 8012efc:	689b      	ldr	r3, [r3, #8]
 8012efe:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8012f02:	683b      	ldr	r3, [r7, #0]
 8012f04:	791b      	ldrb	r3, [r3, #4]
 8012f06:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8012f08:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8012f0a:	68bb      	ldr	r3, [r7, #8]
 8012f0c:	059b      	lsls	r3, r3, #22
 8012f0e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8012f10:	431a      	orrs	r2, r3
 8012f12:	68bb      	ldr	r3, [r7, #8]
 8012f14:	0159      	lsls	r1, r3, #5
 8012f16:	68fb      	ldr	r3, [r7, #12]
 8012f18:	440b      	add	r3, r1
 8012f1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012f1e:	4619      	mov	r1, r3
 8012f20:	4b20      	ldr	r3, [pc, #128]	@ (8012fa4 <USB_ActivateEndpoint+0x10c>)
 8012f22:	4313      	orrs	r3, r2
 8012f24:	600b      	str	r3, [r1, #0]
 8012f26:	e035      	b.n	8012f94 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8012f28:	68fb      	ldr	r3, [r7, #12]
 8012f2a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012f2e:	69da      	ldr	r2, [r3, #28]
 8012f30:	683b      	ldr	r3, [r7, #0]
 8012f32:	781b      	ldrb	r3, [r3, #0]
 8012f34:	f003 030f 	and.w	r3, r3, #15
 8012f38:	2101      	movs	r1, #1
 8012f3a:	fa01 f303 	lsl.w	r3, r1, r3
 8012f3e:	041b      	lsls	r3, r3, #16
 8012f40:	68f9      	ldr	r1, [r7, #12]
 8012f42:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8012f46:	4313      	orrs	r3, r2
 8012f48:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8012f4a:	68bb      	ldr	r3, [r7, #8]
 8012f4c:	015a      	lsls	r2, r3, #5
 8012f4e:	68fb      	ldr	r3, [r7, #12]
 8012f50:	4413      	add	r3, r2
 8012f52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012f56:	681b      	ldr	r3, [r3, #0]
 8012f58:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8012f5c:	2b00      	cmp	r3, #0
 8012f5e:	d119      	bne.n	8012f94 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8012f60:	68bb      	ldr	r3, [r7, #8]
 8012f62:	015a      	lsls	r2, r3, #5
 8012f64:	68fb      	ldr	r3, [r7, #12]
 8012f66:	4413      	add	r3, r2
 8012f68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012f6c:	681a      	ldr	r2, [r3, #0]
 8012f6e:	683b      	ldr	r3, [r7, #0]
 8012f70:	689b      	ldr	r3, [r3, #8]
 8012f72:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8012f76:	683b      	ldr	r3, [r7, #0]
 8012f78:	791b      	ldrb	r3, [r3, #4]
 8012f7a:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8012f7c:	430b      	orrs	r3, r1
 8012f7e:	431a      	orrs	r2, r3
 8012f80:	68bb      	ldr	r3, [r7, #8]
 8012f82:	0159      	lsls	r1, r3, #5
 8012f84:	68fb      	ldr	r3, [r7, #12]
 8012f86:	440b      	add	r3, r1
 8012f88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012f8c:	4619      	mov	r1, r3
 8012f8e:	4b05      	ldr	r3, [pc, #20]	@ (8012fa4 <USB_ActivateEndpoint+0x10c>)
 8012f90:	4313      	orrs	r3, r2
 8012f92:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8012f94:	2300      	movs	r3, #0
}
 8012f96:	4618      	mov	r0, r3
 8012f98:	3714      	adds	r7, #20
 8012f9a:	46bd      	mov	sp, r7
 8012f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fa0:	4770      	bx	lr
 8012fa2:	bf00      	nop
 8012fa4:	10008000 	.word	0x10008000

08012fa8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8012fa8:	b480      	push	{r7}
 8012faa:	b085      	sub	sp, #20
 8012fac:	af00      	add	r7, sp, #0
 8012fae:	6078      	str	r0, [r7, #4]
 8012fb0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012fb2:	687b      	ldr	r3, [r7, #4]
 8012fb4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8012fb6:	683b      	ldr	r3, [r7, #0]
 8012fb8:	781b      	ldrb	r3, [r3, #0]
 8012fba:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8012fbc:	683b      	ldr	r3, [r7, #0]
 8012fbe:	785b      	ldrb	r3, [r3, #1]
 8012fc0:	2b01      	cmp	r3, #1
 8012fc2:	d161      	bne.n	8013088 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8012fc4:	68bb      	ldr	r3, [r7, #8]
 8012fc6:	015a      	lsls	r2, r3, #5
 8012fc8:	68fb      	ldr	r3, [r7, #12]
 8012fca:	4413      	add	r3, r2
 8012fcc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012fd0:	681b      	ldr	r3, [r3, #0]
 8012fd2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8012fd6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8012fda:	d11f      	bne.n	801301c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8012fdc:	68bb      	ldr	r3, [r7, #8]
 8012fde:	015a      	lsls	r2, r3, #5
 8012fe0:	68fb      	ldr	r3, [r7, #12]
 8012fe2:	4413      	add	r3, r2
 8012fe4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012fe8:	681b      	ldr	r3, [r3, #0]
 8012fea:	68ba      	ldr	r2, [r7, #8]
 8012fec:	0151      	lsls	r1, r2, #5
 8012fee:	68fa      	ldr	r2, [r7, #12]
 8012ff0:	440a      	add	r2, r1
 8012ff2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8012ff6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8012ffa:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8012ffc:	68bb      	ldr	r3, [r7, #8]
 8012ffe:	015a      	lsls	r2, r3, #5
 8013000:	68fb      	ldr	r3, [r7, #12]
 8013002:	4413      	add	r3, r2
 8013004:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013008:	681b      	ldr	r3, [r3, #0]
 801300a:	68ba      	ldr	r2, [r7, #8]
 801300c:	0151      	lsls	r1, r2, #5
 801300e:	68fa      	ldr	r2, [r7, #12]
 8013010:	440a      	add	r2, r1
 8013012:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8013016:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801301a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 801301c:	68fb      	ldr	r3, [r7, #12]
 801301e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8013022:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8013024:	683b      	ldr	r3, [r7, #0]
 8013026:	781b      	ldrb	r3, [r3, #0]
 8013028:	f003 030f 	and.w	r3, r3, #15
 801302c:	2101      	movs	r1, #1
 801302e:	fa01 f303 	lsl.w	r3, r1, r3
 8013032:	b29b      	uxth	r3, r3
 8013034:	43db      	mvns	r3, r3
 8013036:	68f9      	ldr	r1, [r7, #12]
 8013038:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 801303c:	4013      	ands	r3, r2
 801303e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8013040:	68fb      	ldr	r3, [r7, #12]
 8013042:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8013046:	69da      	ldr	r2, [r3, #28]
 8013048:	683b      	ldr	r3, [r7, #0]
 801304a:	781b      	ldrb	r3, [r3, #0]
 801304c:	f003 030f 	and.w	r3, r3, #15
 8013050:	2101      	movs	r1, #1
 8013052:	fa01 f303 	lsl.w	r3, r1, r3
 8013056:	b29b      	uxth	r3, r3
 8013058:	43db      	mvns	r3, r3
 801305a:	68f9      	ldr	r1, [r7, #12]
 801305c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8013060:	4013      	ands	r3, r2
 8013062:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8013064:	68bb      	ldr	r3, [r7, #8]
 8013066:	015a      	lsls	r2, r3, #5
 8013068:	68fb      	ldr	r3, [r7, #12]
 801306a:	4413      	add	r3, r2
 801306c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013070:	681a      	ldr	r2, [r3, #0]
 8013072:	68bb      	ldr	r3, [r7, #8]
 8013074:	0159      	lsls	r1, r3, #5
 8013076:	68fb      	ldr	r3, [r7, #12]
 8013078:	440b      	add	r3, r1
 801307a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801307e:	4619      	mov	r1, r3
 8013080:	4b35      	ldr	r3, [pc, #212]	@ (8013158 <USB_DeactivateEndpoint+0x1b0>)
 8013082:	4013      	ands	r3, r2
 8013084:	600b      	str	r3, [r1, #0]
 8013086:	e060      	b.n	801314a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8013088:	68bb      	ldr	r3, [r7, #8]
 801308a:	015a      	lsls	r2, r3, #5
 801308c:	68fb      	ldr	r3, [r7, #12]
 801308e:	4413      	add	r3, r2
 8013090:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013094:	681b      	ldr	r3, [r3, #0]
 8013096:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801309a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801309e:	d11f      	bne.n	80130e0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80130a0:	68bb      	ldr	r3, [r7, #8]
 80130a2:	015a      	lsls	r2, r3, #5
 80130a4:	68fb      	ldr	r3, [r7, #12]
 80130a6:	4413      	add	r3, r2
 80130a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80130ac:	681b      	ldr	r3, [r3, #0]
 80130ae:	68ba      	ldr	r2, [r7, #8]
 80130b0:	0151      	lsls	r1, r2, #5
 80130b2:	68fa      	ldr	r2, [r7, #12]
 80130b4:	440a      	add	r2, r1
 80130b6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80130ba:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80130be:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80130c0:	68bb      	ldr	r3, [r7, #8]
 80130c2:	015a      	lsls	r2, r3, #5
 80130c4:	68fb      	ldr	r3, [r7, #12]
 80130c6:	4413      	add	r3, r2
 80130c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80130cc:	681b      	ldr	r3, [r3, #0]
 80130ce:	68ba      	ldr	r2, [r7, #8]
 80130d0:	0151      	lsls	r1, r2, #5
 80130d2:	68fa      	ldr	r2, [r7, #12]
 80130d4:	440a      	add	r2, r1
 80130d6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80130da:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80130de:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80130e0:	68fb      	ldr	r3, [r7, #12]
 80130e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80130e6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80130e8:	683b      	ldr	r3, [r7, #0]
 80130ea:	781b      	ldrb	r3, [r3, #0]
 80130ec:	f003 030f 	and.w	r3, r3, #15
 80130f0:	2101      	movs	r1, #1
 80130f2:	fa01 f303 	lsl.w	r3, r1, r3
 80130f6:	041b      	lsls	r3, r3, #16
 80130f8:	43db      	mvns	r3, r3
 80130fa:	68f9      	ldr	r1, [r7, #12]
 80130fc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8013100:	4013      	ands	r3, r2
 8013102:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8013104:	68fb      	ldr	r3, [r7, #12]
 8013106:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801310a:	69da      	ldr	r2, [r3, #28]
 801310c:	683b      	ldr	r3, [r7, #0]
 801310e:	781b      	ldrb	r3, [r3, #0]
 8013110:	f003 030f 	and.w	r3, r3, #15
 8013114:	2101      	movs	r1, #1
 8013116:	fa01 f303 	lsl.w	r3, r1, r3
 801311a:	041b      	lsls	r3, r3, #16
 801311c:	43db      	mvns	r3, r3
 801311e:	68f9      	ldr	r1, [r7, #12]
 8013120:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8013124:	4013      	ands	r3, r2
 8013126:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8013128:	68bb      	ldr	r3, [r7, #8]
 801312a:	015a      	lsls	r2, r3, #5
 801312c:	68fb      	ldr	r3, [r7, #12]
 801312e:	4413      	add	r3, r2
 8013130:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013134:	681a      	ldr	r2, [r3, #0]
 8013136:	68bb      	ldr	r3, [r7, #8]
 8013138:	0159      	lsls	r1, r3, #5
 801313a:	68fb      	ldr	r3, [r7, #12]
 801313c:	440b      	add	r3, r1
 801313e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013142:	4619      	mov	r1, r3
 8013144:	4b05      	ldr	r3, [pc, #20]	@ (801315c <USB_DeactivateEndpoint+0x1b4>)
 8013146:	4013      	ands	r3, r2
 8013148:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 801314a:	2300      	movs	r3, #0
}
 801314c:	4618      	mov	r0, r3
 801314e:	3714      	adds	r7, #20
 8013150:	46bd      	mov	sp, r7
 8013152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013156:	4770      	bx	lr
 8013158:	ec337800 	.word	0xec337800
 801315c:	eff37800 	.word	0xeff37800

08013160 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8013160:	b580      	push	{r7, lr}
 8013162:	b08a      	sub	sp, #40	@ 0x28
 8013164:	af02      	add	r7, sp, #8
 8013166:	60f8      	str	r0, [r7, #12]
 8013168:	60b9      	str	r1, [r7, #8]
 801316a:	4613      	mov	r3, r2
 801316c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801316e:	68fb      	ldr	r3, [r7, #12]
 8013170:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8013172:	68bb      	ldr	r3, [r7, #8]
 8013174:	781b      	ldrb	r3, [r3, #0]
 8013176:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8013178:	68bb      	ldr	r3, [r7, #8]
 801317a:	785b      	ldrb	r3, [r3, #1]
 801317c:	2b01      	cmp	r3, #1
 801317e:	f040 8185 	bne.w	801348c <USB_EPStartXfer+0x32c>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8013182:	68bb      	ldr	r3, [r7, #8]
 8013184:	691b      	ldr	r3, [r3, #16]
 8013186:	2b00      	cmp	r3, #0
 8013188:	d132      	bne.n	80131f0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801318a:	69bb      	ldr	r3, [r7, #24]
 801318c:	015a      	lsls	r2, r3, #5
 801318e:	69fb      	ldr	r3, [r7, #28]
 8013190:	4413      	add	r3, r2
 8013192:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013196:	691a      	ldr	r2, [r3, #16]
 8013198:	69bb      	ldr	r3, [r7, #24]
 801319a:	0159      	lsls	r1, r3, #5
 801319c:	69fb      	ldr	r3, [r7, #28]
 801319e:	440b      	add	r3, r1
 80131a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80131a4:	4619      	mov	r1, r3
 80131a6:	4ba7      	ldr	r3, [pc, #668]	@ (8013444 <USB_EPStartXfer+0x2e4>)
 80131a8:	4013      	ands	r3, r2
 80131aa:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80131ac:	69bb      	ldr	r3, [r7, #24]
 80131ae:	015a      	lsls	r2, r3, #5
 80131b0:	69fb      	ldr	r3, [r7, #28]
 80131b2:	4413      	add	r3, r2
 80131b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80131b8:	691b      	ldr	r3, [r3, #16]
 80131ba:	69ba      	ldr	r2, [r7, #24]
 80131bc:	0151      	lsls	r1, r2, #5
 80131be:	69fa      	ldr	r2, [r7, #28]
 80131c0:	440a      	add	r2, r1
 80131c2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80131c6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80131ca:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80131cc:	69bb      	ldr	r3, [r7, #24]
 80131ce:	015a      	lsls	r2, r3, #5
 80131d0:	69fb      	ldr	r3, [r7, #28]
 80131d2:	4413      	add	r3, r2
 80131d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80131d8:	691a      	ldr	r2, [r3, #16]
 80131da:	69bb      	ldr	r3, [r7, #24]
 80131dc:	0159      	lsls	r1, r3, #5
 80131de:	69fb      	ldr	r3, [r7, #28]
 80131e0:	440b      	add	r3, r1
 80131e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80131e6:	4619      	mov	r1, r3
 80131e8:	4b97      	ldr	r3, [pc, #604]	@ (8013448 <USB_EPStartXfer+0x2e8>)
 80131ea:	4013      	ands	r3, r2
 80131ec:	610b      	str	r3, [r1, #16]
 80131ee:	e097      	b.n	8013320 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80131f0:	69bb      	ldr	r3, [r7, #24]
 80131f2:	015a      	lsls	r2, r3, #5
 80131f4:	69fb      	ldr	r3, [r7, #28]
 80131f6:	4413      	add	r3, r2
 80131f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80131fc:	691a      	ldr	r2, [r3, #16]
 80131fe:	69bb      	ldr	r3, [r7, #24]
 8013200:	0159      	lsls	r1, r3, #5
 8013202:	69fb      	ldr	r3, [r7, #28]
 8013204:	440b      	add	r3, r1
 8013206:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801320a:	4619      	mov	r1, r3
 801320c:	4b8e      	ldr	r3, [pc, #568]	@ (8013448 <USB_EPStartXfer+0x2e8>)
 801320e:	4013      	ands	r3, r2
 8013210:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8013212:	69bb      	ldr	r3, [r7, #24]
 8013214:	015a      	lsls	r2, r3, #5
 8013216:	69fb      	ldr	r3, [r7, #28]
 8013218:	4413      	add	r3, r2
 801321a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801321e:	691a      	ldr	r2, [r3, #16]
 8013220:	69bb      	ldr	r3, [r7, #24]
 8013222:	0159      	lsls	r1, r3, #5
 8013224:	69fb      	ldr	r3, [r7, #28]
 8013226:	440b      	add	r3, r1
 8013228:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801322c:	4619      	mov	r1, r3
 801322e:	4b85      	ldr	r3, [pc, #532]	@ (8013444 <USB_EPStartXfer+0x2e4>)
 8013230:	4013      	ands	r3, r2
 8013232:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8013234:	69bb      	ldr	r3, [r7, #24]
 8013236:	2b00      	cmp	r3, #0
 8013238:	d11a      	bne.n	8013270 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 801323a:	68bb      	ldr	r3, [r7, #8]
 801323c:	691a      	ldr	r2, [r3, #16]
 801323e:	68bb      	ldr	r3, [r7, #8]
 8013240:	689b      	ldr	r3, [r3, #8]
 8013242:	429a      	cmp	r2, r3
 8013244:	d903      	bls.n	801324e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8013246:	68bb      	ldr	r3, [r7, #8]
 8013248:	689a      	ldr	r2, [r3, #8]
 801324a:	68bb      	ldr	r3, [r7, #8]
 801324c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801324e:	69bb      	ldr	r3, [r7, #24]
 8013250:	015a      	lsls	r2, r3, #5
 8013252:	69fb      	ldr	r3, [r7, #28]
 8013254:	4413      	add	r3, r2
 8013256:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801325a:	691b      	ldr	r3, [r3, #16]
 801325c:	69ba      	ldr	r2, [r7, #24]
 801325e:	0151      	lsls	r1, r2, #5
 8013260:	69fa      	ldr	r2, [r7, #28]
 8013262:	440a      	add	r2, r1
 8013264:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8013268:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801326c:	6113      	str	r3, [r2, #16]
 801326e:	e044      	b.n	80132fa <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8013270:	68bb      	ldr	r3, [r7, #8]
 8013272:	691a      	ldr	r2, [r3, #16]
 8013274:	68bb      	ldr	r3, [r7, #8]
 8013276:	689b      	ldr	r3, [r3, #8]
 8013278:	4413      	add	r3, r2
 801327a:	1e5a      	subs	r2, r3, #1
 801327c:	68bb      	ldr	r3, [r7, #8]
 801327e:	689b      	ldr	r3, [r3, #8]
 8013280:	fbb2 f3f3 	udiv	r3, r2, r3
 8013284:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8013286:	69bb      	ldr	r3, [r7, #24]
 8013288:	015a      	lsls	r2, r3, #5
 801328a:	69fb      	ldr	r3, [r7, #28]
 801328c:	4413      	add	r3, r2
 801328e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013292:	691a      	ldr	r2, [r3, #16]
 8013294:	8afb      	ldrh	r3, [r7, #22]
 8013296:	04d9      	lsls	r1, r3, #19
 8013298:	4b6c      	ldr	r3, [pc, #432]	@ (801344c <USB_EPStartXfer+0x2ec>)
 801329a:	400b      	ands	r3, r1
 801329c:	69b9      	ldr	r1, [r7, #24]
 801329e:	0148      	lsls	r0, r1, #5
 80132a0:	69f9      	ldr	r1, [r7, #28]
 80132a2:	4401      	add	r1, r0
 80132a4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80132a8:	4313      	orrs	r3, r2
 80132aa:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 80132ac:	68bb      	ldr	r3, [r7, #8]
 80132ae:	791b      	ldrb	r3, [r3, #4]
 80132b0:	2b01      	cmp	r3, #1
 80132b2:	d122      	bne.n	80132fa <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80132b4:	69bb      	ldr	r3, [r7, #24]
 80132b6:	015a      	lsls	r2, r3, #5
 80132b8:	69fb      	ldr	r3, [r7, #28]
 80132ba:	4413      	add	r3, r2
 80132bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80132c0:	691b      	ldr	r3, [r3, #16]
 80132c2:	69ba      	ldr	r2, [r7, #24]
 80132c4:	0151      	lsls	r1, r2, #5
 80132c6:	69fa      	ldr	r2, [r7, #28]
 80132c8:	440a      	add	r2, r1
 80132ca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80132ce:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80132d2:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 80132d4:	69bb      	ldr	r3, [r7, #24]
 80132d6:	015a      	lsls	r2, r3, #5
 80132d8:	69fb      	ldr	r3, [r7, #28]
 80132da:	4413      	add	r3, r2
 80132dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80132e0:	691a      	ldr	r2, [r3, #16]
 80132e2:	8afb      	ldrh	r3, [r7, #22]
 80132e4:	075b      	lsls	r3, r3, #29
 80132e6:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80132ea:	69b9      	ldr	r1, [r7, #24]
 80132ec:	0148      	lsls	r0, r1, #5
 80132ee:	69f9      	ldr	r1, [r7, #28]
 80132f0:	4401      	add	r1, r0
 80132f2:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80132f6:	4313      	orrs	r3, r2
 80132f8:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80132fa:	69bb      	ldr	r3, [r7, #24]
 80132fc:	015a      	lsls	r2, r3, #5
 80132fe:	69fb      	ldr	r3, [r7, #28]
 8013300:	4413      	add	r3, r2
 8013302:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013306:	691a      	ldr	r2, [r3, #16]
 8013308:	68bb      	ldr	r3, [r7, #8]
 801330a:	691b      	ldr	r3, [r3, #16]
 801330c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013310:	69b9      	ldr	r1, [r7, #24]
 8013312:	0148      	lsls	r0, r1, #5
 8013314:	69f9      	ldr	r1, [r7, #28]
 8013316:	4401      	add	r1, r0
 8013318:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 801331c:	4313      	orrs	r3, r2
 801331e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8013320:	79fb      	ldrb	r3, [r7, #7]
 8013322:	2b01      	cmp	r3, #1
 8013324:	d14b      	bne.n	80133be <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8013326:	68bb      	ldr	r3, [r7, #8]
 8013328:	69db      	ldr	r3, [r3, #28]
 801332a:	2b00      	cmp	r3, #0
 801332c:	d009      	beq.n	8013342 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 801332e:	69bb      	ldr	r3, [r7, #24]
 8013330:	015a      	lsls	r2, r3, #5
 8013332:	69fb      	ldr	r3, [r7, #28]
 8013334:	4413      	add	r3, r2
 8013336:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801333a:	461a      	mov	r2, r3
 801333c:	68bb      	ldr	r3, [r7, #8]
 801333e:	69db      	ldr	r3, [r3, #28]
 8013340:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8013342:	68bb      	ldr	r3, [r7, #8]
 8013344:	791b      	ldrb	r3, [r3, #4]
 8013346:	2b01      	cmp	r3, #1
 8013348:	d128      	bne.n	801339c <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801334a:	69fb      	ldr	r3, [r7, #28]
 801334c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8013350:	689b      	ldr	r3, [r3, #8]
 8013352:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8013356:	2b00      	cmp	r3, #0
 8013358:	d110      	bne.n	801337c <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 801335a:	69bb      	ldr	r3, [r7, #24]
 801335c:	015a      	lsls	r2, r3, #5
 801335e:	69fb      	ldr	r3, [r7, #28]
 8013360:	4413      	add	r3, r2
 8013362:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013366:	681b      	ldr	r3, [r3, #0]
 8013368:	69ba      	ldr	r2, [r7, #24]
 801336a:	0151      	lsls	r1, r2, #5
 801336c:	69fa      	ldr	r2, [r7, #28]
 801336e:	440a      	add	r2, r1
 8013370:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8013374:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8013378:	6013      	str	r3, [r2, #0]
 801337a:	e00f      	b.n	801339c <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801337c:	69bb      	ldr	r3, [r7, #24]
 801337e:	015a      	lsls	r2, r3, #5
 8013380:	69fb      	ldr	r3, [r7, #28]
 8013382:	4413      	add	r3, r2
 8013384:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013388:	681b      	ldr	r3, [r3, #0]
 801338a:	69ba      	ldr	r2, [r7, #24]
 801338c:	0151      	lsls	r1, r2, #5
 801338e:	69fa      	ldr	r2, [r7, #28]
 8013390:	440a      	add	r2, r1
 8013392:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8013396:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801339a:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801339c:	69bb      	ldr	r3, [r7, #24]
 801339e:	015a      	lsls	r2, r3, #5
 80133a0:	69fb      	ldr	r3, [r7, #28]
 80133a2:	4413      	add	r3, r2
 80133a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80133a8:	681b      	ldr	r3, [r3, #0]
 80133aa:	69ba      	ldr	r2, [r7, #24]
 80133ac:	0151      	lsls	r1, r2, #5
 80133ae:	69fa      	ldr	r2, [r7, #28]
 80133b0:	440a      	add	r2, r1
 80133b2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80133b6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80133ba:	6013      	str	r3, [r2, #0]
 80133bc:	e169      	b.n	8013692 <USB_EPStartXfer+0x532>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80133be:	69bb      	ldr	r3, [r7, #24]
 80133c0:	015a      	lsls	r2, r3, #5
 80133c2:	69fb      	ldr	r3, [r7, #28]
 80133c4:	4413      	add	r3, r2
 80133c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80133ca:	681b      	ldr	r3, [r3, #0]
 80133cc:	69ba      	ldr	r2, [r7, #24]
 80133ce:	0151      	lsls	r1, r2, #5
 80133d0:	69fa      	ldr	r2, [r7, #28]
 80133d2:	440a      	add	r2, r1
 80133d4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80133d8:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80133dc:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80133de:	68bb      	ldr	r3, [r7, #8]
 80133e0:	791b      	ldrb	r3, [r3, #4]
 80133e2:	2b01      	cmp	r3, #1
 80133e4:	d015      	beq.n	8013412 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80133e6:	68bb      	ldr	r3, [r7, #8]
 80133e8:	691b      	ldr	r3, [r3, #16]
 80133ea:	2b00      	cmp	r3, #0
 80133ec:	f000 8151 	beq.w	8013692 <USB_EPStartXfer+0x532>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80133f0:	69fb      	ldr	r3, [r7, #28]
 80133f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80133f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80133f8:	68bb      	ldr	r3, [r7, #8]
 80133fa:	781b      	ldrb	r3, [r3, #0]
 80133fc:	f003 030f 	and.w	r3, r3, #15
 8013400:	2101      	movs	r1, #1
 8013402:	fa01 f303 	lsl.w	r3, r1, r3
 8013406:	69f9      	ldr	r1, [r7, #28]
 8013408:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 801340c:	4313      	orrs	r3, r2
 801340e:	634b      	str	r3, [r1, #52]	@ 0x34
 8013410:	e13f      	b.n	8013692 <USB_EPStartXfer+0x532>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8013412:	69fb      	ldr	r3, [r7, #28]
 8013414:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8013418:	689b      	ldr	r3, [r3, #8]
 801341a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801341e:	2b00      	cmp	r3, #0
 8013420:	d116      	bne.n	8013450 <USB_EPStartXfer+0x2f0>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8013422:	69bb      	ldr	r3, [r7, #24]
 8013424:	015a      	lsls	r2, r3, #5
 8013426:	69fb      	ldr	r3, [r7, #28]
 8013428:	4413      	add	r3, r2
 801342a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801342e:	681b      	ldr	r3, [r3, #0]
 8013430:	69ba      	ldr	r2, [r7, #24]
 8013432:	0151      	lsls	r1, r2, #5
 8013434:	69fa      	ldr	r2, [r7, #28]
 8013436:	440a      	add	r2, r1
 8013438:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801343c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8013440:	6013      	str	r3, [r2, #0]
 8013442:	e015      	b.n	8013470 <USB_EPStartXfer+0x310>
 8013444:	e007ffff 	.word	0xe007ffff
 8013448:	fff80000 	.word	0xfff80000
 801344c:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8013450:	69bb      	ldr	r3, [r7, #24]
 8013452:	015a      	lsls	r2, r3, #5
 8013454:	69fb      	ldr	r3, [r7, #28]
 8013456:	4413      	add	r3, r2
 8013458:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801345c:	681b      	ldr	r3, [r3, #0]
 801345e:	69ba      	ldr	r2, [r7, #24]
 8013460:	0151      	lsls	r1, r2, #5
 8013462:	69fa      	ldr	r2, [r7, #28]
 8013464:	440a      	add	r2, r1
 8013466:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801346a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801346e:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8013470:	68bb      	ldr	r3, [r7, #8]
 8013472:	68d9      	ldr	r1, [r3, #12]
 8013474:	68bb      	ldr	r3, [r7, #8]
 8013476:	781a      	ldrb	r2, [r3, #0]
 8013478:	68bb      	ldr	r3, [r7, #8]
 801347a:	691b      	ldr	r3, [r3, #16]
 801347c:	b298      	uxth	r0, r3
 801347e:	79fb      	ldrb	r3, [r7, #7]
 8013480:	9300      	str	r3, [sp, #0]
 8013482:	4603      	mov	r3, r0
 8013484:	68f8      	ldr	r0, [r7, #12]
 8013486:	f000 f9b9 	bl	80137fc <USB_WritePacket>
 801348a:	e102      	b.n	8013692 <USB_EPStartXfer+0x532>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 801348c:	69bb      	ldr	r3, [r7, #24]
 801348e:	015a      	lsls	r2, r3, #5
 8013490:	69fb      	ldr	r3, [r7, #28]
 8013492:	4413      	add	r3, r2
 8013494:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013498:	691a      	ldr	r2, [r3, #16]
 801349a:	69bb      	ldr	r3, [r7, #24]
 801349c:	0159      	lsls	r1, r3, #5
 801349e:	69fb      	ldr	r3, [r7, #28]
 80134a0:	440b      	add	r3, r1
 80134a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80134a6:	4619      	mov	r1, r3
 80134a8:	4b7c      	ldr	r3, [pc, #496]	@ (801369c <USB_EPStartXfer+0x53c>)
 80134aa:	4013      	ands	r3, r2
 80134ac:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80134ae:	69bb      	ldr	r3, [r7, #24]
 80134b0:	015a      	lsls	r2, r3, #5
 80134b2:	69fb      	ldr	r3, [r7, #28]
 80134b4:	4413      	add	r3, r2
 80134b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80134ba:	691a      	ldr	r2, [r3, #16]
 80134bc:	69bb      	ldr	r3, [r7, #24]
 80134be:	0159      	lsls	r1, r3, #5
 80134c0:	69fb      	ldr	r3, [r7, #28]
 80134c2:	440b      	add	r3, r1
 80134c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80134c8:	4619      	mov	r1, r3
 80134ca:	4b75      	ldr	r3, [pc, #468]	@ (80136a0 <USB_EPStartXfer+0x540>)
 80134cc:	4013      	ands	r3, r2
 80134ce:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 80134d0:	69bb      	ldr	r3, [r7, #24]
 80134d2:	2b00      	cmp	r3, #0
 80134d4:	d12f      	bne.n	8013536 <USB_EPStartXfer+0x3d6>
    {
      if (ep->xfer_len > 0U)
 80134d6:	68bb      	ldr	r3, [r7, #8]
 80134d8:	691b      	ldr	r3, [r3, #16]
 80134da:	2b00      	cmp	r3, #0
 80134dc:	d003      	beq.n	80134e6 <USB_EPStartXfer+0x386>
      {
        ep->xfer_len = ep->maxpacket;
 80134de:	68bb      	ldr	r3, [r7, #8]
 80134e0:	689a      	ldr	r2, [r3, #8]
 80134e2:	68bb      	ldr	r3, [r7, #8]
 80134e4:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80134e6:	68bb      	ldr	r3, [r7, #8]
 80134e8:	689a      	ldr	r2, [r3, #8]
 80134ea:	68bb      	ldr	r3, [r7, #8]
 80134ec:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80134ee:	69bb      	ldr	r3, [r7, #24]
 80134f0:	015a      	lsls	r2, r3, #5
 80134f2:	69fb      	ldr	r3, [r7, #28]
 80134f4:	4413      	add	r3, r2
 80134f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80134fa:	691a      	ldr	r2, [r3, #16]
 80134fc:	68bb      	ldr	r3, [r7, #8]
 80134fe:	6a1b      	ldr	r3, [r3, #32]
 8013500:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013504:	69b9      	ldr	r1, [r7, #24]
 8013506:	0148      	lsls	r0, r1, #5
 8013508:	69f9      	ldr	r1, [r7, #28]
 801350a:	4401      	add	r1, r0
 801350c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8013510:	4313      	orrs	r3, r2
 8013512:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8013514:	69bb      	ldr	r3, [r7, #24]
 8013516:	015a      	lsls	r2, r3, #5
 8013518:	69fb      	ldr	r3, [r7, #28]
 801351a:	4413      	add	r3, r2
 801351c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013520:	691b      	ldr	r3, [r3, #16]
 8013522:	69ba      	ldr	r2, [r7, #24]
 8013524:	0151      	lsls	r1, r2, #5
 8013526:	69fa      	ldr	r2, [r7, #28]
 8013528:	440a      	add	r2, r1
 801352a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801352e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8013532:	6113      	str	r3, [r2, #16]
 8013534:	e05f      	b.n	80135f6 <USB_EPStartXfer+0x496>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8013536:	68bb      	ldr	r3, [r7, #8]
 8013538:	691b      	ldr	r3, [r3, #16]
 801353a:	2b00      	cmp	r3, #0
 801353c:	d123      	bne.n	8013586 <USB_EPStartXfer+0x426>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 801353e:	69bb      	ldr	r3, [r7, #24]
 8013540:	015a      	lsls	r2, r3, #5
 8013542:	69fb      	ldr	r3, [r7, #28]
 8013544:	4413      	add	r3, r2
 8013546:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801354a:	691a      	ldr	r2, [r3, #16]
 801354c:	68bb      	ldr	r3, [r7, #8]
 801354e:	689b      	ldr	r3, [r3, #8]
 8013550:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013554:	69b9      	ldr	r1, [r7, #24]
 8013556:	0148      	lsls	r0, r1, #5
 8013558:	69f9      	ldr	r1, [r7, #28]
 801355a:	4401      	add	r1, r0
 801355c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8013560:	4313      	orrs	r3, r2
 8013562:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8013564:	69bb      	ldr	r3, [r7, #24]
 8013566:	015a      	lsls	r2, r3, #5
 8013568:	69fb      	ldr	r3, [r7, #28]
 801356a:	4413      	add	r3, r2
 801356c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013570:	691b      	ldr	r3, [r3, #16]
 8013572:	69ba      	ldr	r2, [r7, #24]
 8013574:	0151      	lsls	r1, r2, #5
 8013576:	69fa      	ldr	r2, [r7, #28]
 8013578:	440a      	add	r2, r1
 801357a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801357e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8013582:	6113      	str	r3, [r2, #16]
 8013584:	e037      	b.n	80135f6 <USB_EPStartXfer+0x496>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8013586:	68bb      	ldr	r3, [r7, #8]
 8013588:	691a      	ldr	r2, [r3, #16]
 801358a:	68bb      	ldr	r3, [r7, #8]
 801358c:	689b      	ldr	r3, [r3, #8]
 801358e:	4413      	add	r3, r2
 8013590:	1e5a      	subs	r2, r3, #1
 8013592:	68bb      	ldr	r3, [r7, #8]
 8013594:	689b      	ldr	r3, [r3, #8]
 8013596:	fbb2 f3f3 	udiv	r3, r2, r3
 801359a:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 801359c:	68bb      	ldr	r3, [r7, #8]
 801359e:	689b      	ldr	r3, [r3, #8]
 80135a0:	8afa      	ldrh	r2, [r7, #22]
 80135a2:	fb03 f202 	mul.w	r2, r3, r2
 80135a6:	68bb      	ldr	r3, [r7, #8]
 80135a8:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80135aa:	69bb      	ldr	r3, [r7, #24]
 80135ac:	015a      	lsls	r2, r3, #5
 80135ae:	69fb      	ldr	r3, [r7, #28]
 80135b0:	4413      	add	r3, r2
 80135b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80135b6:	691a      	ldr	r2, [r3, #16]
 80135b8:	8afb      	ldrh	r3, [r7, #22]
 80135ba:	04d9      	lsls	r1, r3, #19
 80135bc:	4b39      	ldr	r3, [pc, #228]	@ (80136a4 <USB_EPStartXfer+0x544>)
 80135be:	400b      	ands	r3, r1
 80135c0:	69b9      	ldr	r1, [r7, #24]
 80135c2:	0148      	lsls	r0, r1, #5
 80135c4:	69f9      	ldr	r1, [r7, #28]
 80135c6:	4401      	add	r1, r0
 80135c8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80135cc:	4313      	orrs	r3, r2
 80135ce:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80135d0:	69bb      	ldr	r3, [r7, #24]
 80135d2:	015a      	lsls	r2, r3, #5
 80135d4:	69fb      	ldr	r3, [r7, #28]
 80135d6:	4413      	add	r3, r2
 80135d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80135dc:	691a      	ldr	r2, [r3, #16]
 80135de:	68bb      	ldr	r3, [r7, #8]
 80135e0:	6a1b      	ldr	r3, [r3, #32]
 80135e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80135e6:	69b9      	ldr	r1, [r7, #24]
 80135e8:	0148      	lsls	r0, r1, #5
 80135ea:	69f9      	ldr	r1, [r7, #28]
 80135ec:	4401      	add	r1, r0
 80135ee:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80135f2:	4313      	orrs	r3, r2
 80135f4:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80135f6:	79fb      	ldrb	r3, [r7, #7]
 80135f8:	2b01      	cmp	r3, #1
 80135fa:	d10d      	bne.n	8013618 <USB_EPStartXfer+0x4b8>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80135fc:	68bb      	ldr	r3, [r7, #8]
 80135fe:	68db      	ldr	r3, [r3, #12]
 8013600:	2b00      	cmp	r3, #0
 8013602:	d009      	beq.n	8013618 <USB_EPStartXfer+0x4b8>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8013604:	68bb      	ldr	r3, [r7, #8]
 8013606:	68d9      	ldr	r1, [r3, #12]
 8013608:	69bb      	ldr	r3, [r7, #24]
 801360a:	015a      	lsls	r2, r3, #5
 801360c:	69fb      	ldr	r3, [r7, #28]
 801360e:	4413      	add	r3, r2
 8013610:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013614:	460a      	mov	r2, r1
 8013616:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8013618:	68bb      	ldr	r3, [r7, #8]
 801361a:	791b      	ldrb	r3, [r3, #4]
 801361c:	2b01      	cmp	r3, #1
 801361e:	d128      	bne.n	8013672 <USB_EPStartXfer+0x512>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8013620:	69fb      	ldr	r3, [r7, #28]
 8013622:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8013626:	689b      	ldr	r3, [r3, #8]
 8013628:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801362c:	2b00      	cmp	r3, #0
 801362e:	d110      	bne.n	8013652 <USB_EPStartXfer+0x4f2>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8013630:	69bb      	ldr	r3, [r7, #24]
 8013632:	015a      	lsls	r2, r3, #5
 8013634:	69fb      	ldr	r3, [r7, #28]
 8013636:	4413      	add	r3, r2
 8013638:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801363c:	681b      	ldr	r3, [r3, #0]
 801363e:	69ba      	ldr	r2, [r7, #24]
 8013640:	0151      	lsls	r1, r2, #5
 8013642:	69fa      	ldr	r2, [r7, #28]
 8013644:	440a      	add	r2, r1
 8013646:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801364a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 801364e:	6013      	str	r3, [r2, #0]
 8013650:	e00f      	b.n	8013672 <USB_EPStartXfer+0x512>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8013652:	69bb      	ldr	r3, [r7, #24]
 8013654:	015a      	lsls	r2, r3, #5
 8013656:	69fb      	ldr	r3, [r7, #28]
 8013658:	4413      	add	r3, r2
 801365a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801365e:	681b      	ldr	r3, [r3, #0]
 8013660:	69ba      	ldr	r2, [r7, #24]
 8013662:	0151      	lsls	r1, r2, #5
 8013664:	69fa      	ldr	r2, [r7, #28]
 8013666:	440a      	add	r2, r1
 8013668:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801366c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8013670:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8013672:	69bb      	ldr	r3, [r7, #24]
 8013674:	015a      	lsls	r2, r3, #5
 8013676:	69fb      	ldr	r3, [r7, #28]
 8013678:	4413      	add	r3, r2
 801367a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801367e:	681b      	ldr	r3, [r3, #0]
 8013680:	69ba      	ldr	r2, [r7, #24]
 8013682:	0151      	lsls	r1, r2, #5
 8013684:	69fa      	ldr	r2, [r7, #28]
 8013686:	440a      	add	r2, r1
 8013688:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801368c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8013690:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8013692:	2300      	movs	r3, #0
}
 8013694:	4618      	mov	r0, r3
 8013696:	3720      	adds	r7, #32
 8013698:	46bd      	mov	sp, r7
 801369a:	bd80      	pop	{r7, pc}
 801369c:	fff80000 	.word	0xfff80000
 80136a0:	e007ffff 	.word	0xe007ffff
 80136a4:	1ff80000 	.word	0x1ff80000

080136a8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80136a8:	b480      	push	{r7}
 80136aa:	b087      	sub	sp, #28
 80136ac:	af00      	add	r7, sp, #0
 80136ae:	6078      	str	r0, [r7, #4]
 80136b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80136b2:	2300      	movs	r3, #0
 80136b4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80136b6:	2300      	movs	r3, #0
 80136b8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80136ba:	687b      	ldr	r3, [r7, #4]
 80136bc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80136be:	683b      	ldr	r3, [r7, #0]
 80136c0:	785b      	ldrb	r3, [r3, #1]
 80136c2:	2b01      	cmp	r3, #1
 80136c4:	d14a      	bne.n	801375c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80136c6:	683b      	ldr	r3, [r7, #0]
 80136c8:	781b      	ldrb	r3, [r3, #0]
 80136ca:	015a      	lsls	r2, r3, #5
 80136cc:	693b      	ldr	r3, [r7, #16]
 80136ce:	4413      	add	r3, r2
 80136d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80136d4:	681b      	ldr	r3, [r3, #0]
 80136d6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80136da:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80136de:	f040 8086 	bne.w	80137ee <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80136e2:	683b      	ldr	r3, [r7, #0]
 80136e4:	781b      	ldrb	r3, [r3, #0]
 80136e6:	015a      	lsls	r2, r3, #5
 80136e8:	693b      	ldr	r3, [r7, #16]
 80136ea:	4413      	add	r3, r2
 80136ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80136f0:	681b      	ldr	r3, [r3, #0]
 80136f2:	683a      	ldr	r2, [r7, #0]
 80136f4:	7812      	ldrb	r2, [r2, #0]
 80136f6:	0151      	lsls	r1, r2, #5
 80136f8:	693a      	ldr	r2, [r7, #16]
 80136fa:	440a      	add	r2, r1
 80136fc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8013700:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8013704:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8013706:	683b      	ldr	r3, [r7, #0]
 8013708:	781b      	ldrb	r3, [r3, #0]
 801370a:	015a      	lsls	r2, r3, #5
 801370c:	693b      	ldr	r3, [r7, #16]
 801370e:	4413      	add	r3, r2
 8013710:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013714:	681b      	ldr	r3, [r3, #0]
 8013716:	683a      	ldr	r2, [r7, #0]
 8013718:	7812      	ldrb	r2, [r2, #0]
 801371a:	0151      	lsls	r1, r2, #5
 801371c:	693a      	ldr	r2, [r7, #16]
 801371e:	440a      	add	r2, r1
 8013720:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8013724:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8013728:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 801372a:	68fb      	ldr	r3, [r7, #12]
 801372c:	3301      	adds	r3, #1
 801372e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8013730:	68fb      	ldr	r3, [r7, #12]
 8013732:	f242 7210 	movw	r2, #10000	@ 0x2710
 8013736:	4293      	cmp	r3, r2
 8013738:	d902      	bls.n	8013740 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 801373a:	2301      	movs	r3, #1
 801373c:	75fb      	strb	r3, [r7, #23]
          break;
 801373e:	e056      	b.n	80137ee <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8013740:	683b      	ldr	r3, [r7, #0]
 8013742:	781b      	ldrb	r3, [r3, #0]
 8013744:	015a      	lsls	r2, r3, #5
 8013746:	693b      	ldr	r3, [r7, #16]
 8013748:	4413      	add	r3, r2
 801374a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801374e:	681b      	ldr	r3, [r3, #0]
 8013750:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8013754:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8013758:	d0e7      	beq.n	801372a <USB_EPStopXfer+0x82>
 801375a:	e048      	b.n	80137ee <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801375c:	683b      	ldr	r3, [r7, #0]
 801375e:	781b      	ldrb	r3, [r3, #0]
 8013760:	015a      	lsls	r2, r3, #5
 8013762:	693b      	ldr	r3, [r7, #16]
 8013764:	4413      	add	r3, r2
 8013766:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801376a:	681b      	ldr	r3, [r3, #0]
 801376c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8013770:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8013774:	d13b      	bne.n	80137ee <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8013776:	683b      	ldr	r3, [r7, #0]
 8013778:	781b      	ldrb	r3, [r3, #0]
 801377a:	015a      	lsls	r2, r3, #5
 801377c:	693b      	ldr	r3, [r7, #16]
 801377e:	4413      	add	r3, r2
 8013780:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013784:	681b      	ldr	r3, [r3, #0]
 8013786:	683a      	ldr	r2, [r7, #0]
 8013788:	7812      	ldrb	r2, [r2, #0]
 801378a:	0151      	lsls	r1, r2, #5
 801378c:	693a      	ldr	r2, [r7, #16]
 801378e:	440a      	add	r2, r1
 8013790:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8013794:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8013798:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 801379a:	683b      	ldr	r3, [r7, #0]
 801379c:	781b      	ldrb	r3, [r3, #0]
 801379e:	015a      	lsls	r2, r3, #5
 80137a0:	693b      	ldr	r3, [r7, #16]
 80137a2:	4413      	add	r3, r2
 80137a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80137a8:	681b      	ldr	r3, [r3, #0]
 80137aa:	683a      	ldr	r2, [r7, #0]
 80137ac:	7812      	ldrb	r2, [r2, #0]
 80137ae:	0151      	lsls	r1, r2, #5
 80137b0:	693a      	ldr	r2, [r7, #16]
 80137b2:	440a      	add	r2, r1
 80137b4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80137b8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80137bc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80137be:	68fb      	ldr	r3, [r7, #12]
 80137c0:	3301      	adds	r3, #1
 80137c2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80137c4:	68fb      	ldr	r3, [r7, #12]
 80137c6:	f242 7210 	movw	r2, #10000	@ 0x2710
 80137ca:	4293      	cmp	r3, r2
 80137cc:	d902      	bls.n	80137d4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80137ce:	2301      	movs	r3, #1
 80137d0:	75fb      	strb	r3, [r7, #23]
          break;
 80137d2:	e00c      	b.n	80137ee <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80137d4:	683b      	ldr	r3, [r7, #0]
 80137d6:	781b      	ldrb	r3, [r3, #0]
 80137d8:	015a      	lsls	r2, r3, #5
 80137da:	693b      	ldr	r3, [r7, #16]
 80137dc:	4413      	add	r3, r2
 80137de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80137e2:	681b      	ldr	r3, [r3, #0]
 80137e4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80137e8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80137ec:	d0e7      	beq.n	80137be <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80137ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80137f0:	4618      	mov	r0, r3
 80137f2:	371c      	adds	r7, #28
 80137f4:	46bd      	mov	sp, r7
 80137f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137fa:	4770      	bx	lr

080137fc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80137fc:	b480      	push	{r7}
 80137fe:	b089      	sub	sp, #36	@ 0x24
 8013800:	af00      	add	r7, sp, #0
 8013802:	60f8      	str	r0, [r7, #12]
 8013804:	60b9      	str	r1, [r7, #8]
 8013806:	4611      	mov	r1, r2
 8013808:	461a      	mov	r2, r3
 801380a:	460b      	mov	r3, r1
 801380c:	71fb      	strb	r3, [r7, #7]
 801380e:	4613      	mov	r3, r2
 8013810:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013812:	68fb      	ldr	r3, [r7, #12]
 8013814:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8013816:	68bb      	ldr	r3, [r7, #8]
 8013818:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 801381a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801381e:	2b00      	cmp	r3, #0
 8013820:	d123      	bne.n	801386a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8013822:	88bb      	ldrh	r3, [r7, #4]
 8013824:	3303      	adds	r3, #3
 8013826:	089b      	lsrs	r3, r3, #2
 8013828:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 801382a:	2300      	movs	r3, #0
 801382c:	61bb      	str	r3, [r7, #24]
 801382e:	e018      	b.n	8013862 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8013830:	79fb      	ldrb	r3, [r7, #7]
 8013832:	031a      	lsls	r2, r3, #12
 8013834:	697b      	ldr	r3, [r7, #20]
 8013836:	4413      	add	r3, r2
 8013838:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801383c:	461a      	mov	r2, r3
 801383e:	69fb      	ldr	r3, [r7, #28]
 8013840:	681b      	ldr	r3, [r3, #0]
 8013842:	6013      	str	r3, [r2, #0]
      pSrc++;
 8013844:	69fb      	ldr	r3, [r7, #28]
 8013846:	3301      	adds	r3, #1
 8013848:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801384a:	69fb      	ldr	r3, [r7, #28]
 801384c:	3301      	adds	r3, #1
 801384e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8013850:	69fb      	ldr	r3, [r7, #28]
 8013852:	3301      	adds	r3, #1
 8013854:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8013856:	69fb      	ldr	r3, [r7, #28]
 8013858:	3301      	adds	r3, #1
 801385a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 801385c:	69bb      	ldr	r3, [r7, #24]
 801385e:	3301      	adds	r3, #1
 8013860:	61bb      	str	r3, [r7, #24]
 8013862:	69ba      	ldr	r2, [r7, #24]
 8013864:	693b      	ldr	r3, [r7, #16]
 8013866:	429a      	cmp	r2, r3
 8013868:	d3e2      	bcc.n	8013830 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 801386a:	2300      	movs	r3, #0
}
 801386c:	4618      	mov	r0, r3
 801386e:	3724      	adds	r7, #36	@ 0x24
 8013870:	46bd      	mov	sp, r7
 8013872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013876:	4770      	bx	lr

08013878 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8013878:	b480      	push	{r7}
 801387a:	b08b      	sub	sp, #44	@ 0x2c
 801387c:	af00      	add	r7, sp, #0
 801387e:	60f8      	str	r0, [r7, #12]
 8013880:	60b9      	str	r1, [r7, #8]
 8013882:	4613      	mov	r3, r2
 8013884:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013886:	68fb      	ldr	r3, [r7, #12]
 8013888:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 801388a:	68bb      	ldr	r3, [r7, #8]
 801388c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 801388e:	88fb      	ldrh	r3, [r7, #6]
 8013890:	089b      	lsrs	r3, r3, #2
 8013892:	b29b      	uxth	r3, r3
 8013894:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8013896:	88fb      	ldrh	r3, [r7, #6]
 8013898:	f003 0303 	and.w	r3, r3, #3
 801389c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 801389e:	2300      	movs	r3, #0
 80138a0:	623b      	str	r3, [r7, #32]
 80138a2:	e014      	b.n	80138ce <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80138a4:	69bb      	ldr	r3, [r7, #24]
 80138a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80138aa:	681a      	ldr	r2, [r3, #0]
 80138ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80138ae:	601a      	str	r2, [r3, #0]
    pDest++;
 80138b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80138b2:	3301      	adds	r3, #1
 80138b4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80138b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80138b8:	3301      	adds	r3, #1
 80138ba:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80138bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80138be:	3301      	adds	r3, #1
 80138c0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80138c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80138c4:	3301      	adds	r3, #1
 80138c6:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80138c8:	6a3b      	ldr	r3, [r7, #32]
 80138ca:	3301      	adds	r3, #1
 80138cc:	623b      	str	r3, [r7, #32]
 80138ce:	6a3a      	ldr	r2, [r7, #32]
 80138d0:	697b      	ldr	r3, [r7, #20]
 80138d2:	429a      	cmp	r2, r3
 80138d4:	d3e6      	bcc.n	80138a4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80138d6:	8bfb      	ldrh	r3, [r7, #30]
 80138d8:	2b00      	cmp	r3, #0
 80138da:	d01e      	beq.n	801391a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80138dc:	2300      	movs	r3, #0
 80138de:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80138e0:	69bb      	ldr	r3, [r7, #24]
 80138e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80138e6:	461a      	mov	r2, r3
 80138e8:	f107 0310 	add.w	r3, r7, #16
 80138ec:	6812      	ldr	r2, [r2, #0]
 80138ee:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80138f0:	693a      	ldr	r2, [r7, #16]
 80138f2:	6a3b      	ldr	r3, [r7, #32]
 80138f4:	b2db      	uxtb	r3, r3
 80138f6:	00db      	lsls	r3, r3, #3
 80138f8:	fa22 f303 	lsr.w	r3, r2, r3
 80138fc:	b2da      	uxtb	r2, r3
 80138fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013900:	701a      	strb	r2, [r3, #0]
      i++;
 8013902:	6a3b      	ldr	r3, [r7, #32]
 8013904:	3301      	adds	r3, #1
 8013906:	623b      	str	r3, [r7, #32]
      pDest++;
 8013908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801390a:	3301      	adds	r3, #1
 801390c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 801390e:	8bfb      	ldrh	r3, [r7, #30]
 8013910:	3b01      	subs	r3, #1
 8013912:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8013914:	8bfb      	ldrh	r3, [r7, #30]
 8013916:	2b00      	cmp	r3, #0
 8013918:	d1ea      	bne.n	80138f0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 801391a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 801391c:	4618      	mov	r0, r3
 801391e:	372c      	adds	r7, #44	@ 0x2c
 8013920:	46bd      	mov	sp, r7
 8013922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013926:	4770      	bx	lr

08013928 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8013928:	b480      	push	{r7}
 801392a:	b085      	sub	sp, #20
 801392c:	af00      	add	r7, sp, #0
 801392e:	6078      	str	r0, [r7, #4]
 8013930:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013932:	687b      	ldr	r3, [r7, #4]
 8013934:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8013936:	683b      	ldr	r3, [r7, #0]
 8013938:	781b      	ldrb	r3, [r3, #0]
 801393a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801393c:	683b      	ldr	r3, [r7, #0]
 801393e:	785b      	ldrb	r3, [r3, #1]
 8013940:	2b01      	cmp	r3, #1
 8013942:	d12c      	bne.n	801399e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8013944:	68bb      	ldr	r3, [r7, #8]
 8013946:	015a      	lsls	r2, r3, #5
 8013948:	68fb      	ldr	r3, [r7, #12]
 801394a:	4413      	add	r3, r2
 801394c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013950:	681b      	ldr	r3, [r3, #0]
 8013952:	2b00      	cmp	r3, #0
 8013954:	db12      	blt.n	801397c <USB_EPSetStall+0x54>
 8013956:	68bb      	ldr	r3, [r7, #8]
 8013958:	2b00      	cmp	r3, #0
 801395a:	d00f      	beq.n	801397c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 801395c:	68bb      	ldr	r3, [r7, #8]
 801395e:	015a      	lsls	r2, r3, #5
 8013960:	68fb      	ldr	r3, [r7, #12]
 8013962:	4413      	add	r3, r2
 8013964:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013968:	681b      	ldr	r3, [r3, #0]
 801396a:	68ba      	ldr	r2, [r7, #8]
 801396c:	0151      	lsls	r1, r2, #5
 801396e:	68fa      	ldr	r2, [r7, #12]
 8013970:	440a      	add	r2, r1
 8013972:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8013976:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 801397a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 801397c:	68bb      	ldr	r3, [r7, #8]
 801397e:	015a      	lsls	r2, r3, #5
 8013980:	68fb      	ldr	r3, [r7, #12]
 8013982:	4413      	add	r3, r2
 8013984:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013988:	681b      	ldr	r3, [r3, #0]
 801398a:	68ba      	ldr	r2, [r7, #8]
 801398c:	0151      	lsls	r1, r2, #5
 801398e:	68fa      	ldr	r2, [r7, #12]
 8013990:	440a      	add	r2, r1
 8013992:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8013996:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 801399a:	6013      	str	r3, [r2, #0]
 801399c:	e02b      	b.n	80139f6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 801399e:	68bb      	ldr	r3, [r7, #8]
 80139a0:	015a      	lsls	r2, r3, #5
 80139a2:	68fb      	ldr	r3, [r7, #12]
 80139a4:	4413      	add	r3, r2
 80139a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80139aa:	681b      	ldr	r3, [r3, #0]
 80139ac:	2b00      	cmp	r3, #0
 80139ae:	db12      	blt.n	80139d6 <USB_EPSetStall+0xae>
 80139b0:	68bb      	ldr	r3, [r7, #8]
 80139b2:	2b00      	cmp	r3, #0
 80139b4:	d00f      	beq.n	80139d6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80139b6:	68bb      	ldr	r3, [r7, #8]
 80139b8:	015a      	lsls	r2, r3, #5
 80139ba:	68fb      	ldr	r3, [r7, #12]
 80139bc:	4413      	add	r3, r2
 80139be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80139c2:	681b      	ldr	r3, [r3, #0]
 80139c4:	68ba      	ldr	r2, [r7, #8]
 80139c6:	0151      	lsls	r1, r2, #5
 80139c8:	68fa      	ldr	r2, [r7, #12]
 80139ca:	440a      	add	r2, r1
 80139cc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80139d0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80139d4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80139d6:	68bb      	ldr	r3, [r7, #8]
 80139d8:	015a      	lsls	r2, r3, #5
 80139da:	68fb      	ldr	r3, [r7, #12]
 80139dc:	4413      	add	r3, r2
 80139de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80139e2:	681b      	ldr	r3, [r3, #0]
 80139e4:	68ba      	ldr	r2, [r7, #8]
 80139e6:	0151      	lsls	r1, r2, #5
 80139e8:	68fa      	ldr	r2, [r7, #12]
 80139ea:	440a      	add	r2, r1
 80139ec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80139f0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80139f4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80139f6:	2300      	movs	r3, #0
}
 80139f8:	4618      	mov	r0, r3
 80139fa:	3714      	adds	r7, #20
 80139fc:	46bd      	mov	sp, r7
 80139fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a02:	4770      	bx	lr

08013a04 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8013a04:	b480      	push	{r7}
 8013a06:	b085      	sub	sp, #20
 8013a08:	af00      	add	r7, sp, #0
 8013a0a:	6078      	str	r0, [r7, #4]
 8013a0c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013a0e:	687b      	ldr	r3, [r7, #4]
 8013a10:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8013a12:	683b      	ldr	r3, [r7, #0]
 8013a14:	781b      	ldrb	r3, [r3, #0]
 8013a16:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8013a18:	683b      	ldr	r3, [r7, #0]
 8013a1a:	785b      	ldrb	r3, [r3, #1]
 8013a1c:	2b01      	cmp	r3, #1
 8013a1e:	d128      	bne.n	8013a72 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8013a20:	68bb      	ldr	r3, [r7, #8]
 8013a22:	015a      	lsls	r2, r3, #5
 8013a24:	68fb      	ldr	r3, [r7, #12]
 8013a26:	4413      	add	r3, r2
 8013a28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013a2c:	681b      	ldr	r3, [r3, #0]
 8013a2e:	68ba      	ldr	r2, [r7, #8]
 8013a30:	0151      	lsls	r1, r2, #5
 8013a32:	68fa      	ldr	r2, [r7, #12]
 8013a34:	440a      	add	r2, r1
 8013a36:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8013a3a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8013a3e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8013a40:	683b      	ldr	r3, [r7, #0]
 8013a42:	791b      	ldrb	r3, [r3, #4]
 8013a44:	2b03      	cmp	r3, #3
 8013a46:	d003      	beq.n	8013a50 <USB_EPClearStall+0x4c>
 8013a48:	683b      	ldr	r3, [r7, #0]
 8013a4a:	791b      	ldrb	r3, [r3, #4]
 8013a4c:	2b02      	cmp	r3, #2
 8013a4e:	d138      	bne.n	8013ac2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8013a50:	68bb      	ldr	r3, [r7, #8]
 8013a52:	015a      	lsls	r2, r3, #5
 8013a54:	68fb      	ldr	r3, [r7, #12]
 8013a56:	4413      	add	r3, r2
 8013a58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013a5c:	681b      	ldr	r3, [r3, #0]
 8013a5e:	68ba      	ldr	r2, [r7, #8]
 8013a60:	0151      	lsls	r1, r2, #5
 8013a62:	68fa      	ldr	r2, [r7, #12]
 8013a64:	440a      	add	r2, r1
 8013a66:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8013a6a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8013a6e:	6013      	str	r3, [r2, #0]
 8013a70:	e027      	b.n	8013ac2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8013a72:	68bb      	ldr	r3, [r7, #8]
 8013a74:	015a      	lsls	r2, r3, #5
 8013a76:	68fb      	ldr	r3, [r7, #12]
 8013a78:	4413      	add	r3, r2
 8013a7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013a7e:	681b      	ldr	r3, [r3, #0]
 8013a80:	68ba      	ldr	r2, [r7, #8]
 8013a82:	0151      	lsls	r1, r2, #5
 8013a84:	68fa      	ldr	r2, [r7, #12]
 8013a86:	440a      	add	r2, r1
 8013a88:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8013a8c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8013a90:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8013a92:	683b      	ldr	r3, [r7, #0]
 8013a94:	791b      	ldrb	r3, [r3, #4]
 8013a96:	2b03      	cmp	r3, #3
 8013a98:	d003      	beq.n	8013aa2 <USB_EPClearStall+0x9e>
 8013a9a:	683b      	ldr	r3, [r7, #0]
 8013a9c:	791b      	ldrb	r3, [r3, #4]
 8013a9e:	2b02      	cmp	r3, #2
 8013aa0:	d10f      	bne.n	8013ac2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8013aa2:	68bb      	ldr	r3, [r7, #8]
 8013aa4:	015a      	lsls	r2, r3, #5
 8013aa6:	68fb      	ldr	r3, [r7, #12]
 8013aa8:	4413      	add	r3, r2
 8013aaa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013aae:	681b      	ldr	r3, [r3, #0]
 8013ab0:	68ba      	ldr	r2, [r7, #8]
 8013ab2:	0151      	lsls	r1, r2, #5
 8013ab4:	68fa      	ldr	r2, [r7, #12]
 8013ab6:	440a      	add	r2, r1
 8013ab8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8013abc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8013ac0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8013ac2:	2300      	movs	r3, #0
}
 8013ac4:	4618      	mov	r0, r3
 8013ac6:	3714      	adds	r7, #20
 8013ac8:	46bd      	mov	sp, r7
 8013aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ace:	4770      	bx	lr

08013ad0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8013ad0:	b480      	push	{r7}
 8013ad2:	b085      	sub	sp, #20
 8013ad4:	af00      	add	r7, sp, #0
 8013ad6:	6078      	str	r0, [r7, #4]
 8013ad8:	460b      	mov	r3, r1
 8013ada:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013adc:	687b      	ldr	r3, [r7, #4]
 8013ade:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8013ae0:	68fb      	ldr	r3, [r7, #12]
 8013ae2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8013ae6:	681b      	ldr	r3, [r3, #0]
 8013ae8:	68fa      	ldr	r2, [r7, #12]
 8013aea:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8013aee:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8013af2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8013af4:	68fb      	ldr	r3, [r7, #12]
 8013af6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8013afa:	681a      	ldr	r2, [r3, #0]
 8013afc:	78fb      	ldrb	r3, [r7, #3]
 8013afe:	011b      	lsls	r3, r3, #4
 8013b00:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8013b04:	68f9      	ldr	r1, [r7, #12]
 8013b06:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8013b0a:	4313      	orrs	r3, r2
 8013b0c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8013b0e:	2300      	movs	r3, #0
}
 8013b10:	4618      	mov	r0, r3
 8013b12:	3714      	adds	r7, #20
 8013b14:	46bd      	mov	sp, r7
 8013b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b1a:	4770      	bx	lr

08013b1c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8013b1c:	b480      	push	{r7}
 8013b1e:	b085      	sub	sp, #20
 8013b20:	af00      	add	r7, sp, #0
 8013b22:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013b24:	687b      	ldr	r3, [r7, #4]
 8013b26:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8013b28:	68fb      	ldr	r3, [r7, #12]
 8013b2a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8013b2e:	681b      	ldr	r3, [r3, #0]
 8013b30:	68fa      	ldr	r2, [r7, #12]
 8013b32:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8013b36:	f023 0303 	bic.w	r3, r3, #3
 8013b3a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8013b3c:	68fb      	ldr	r3, [r7, #12]
 8013b3e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8013b42:	685b      	ldr	r3, [r3, #4]
 8013b44:	68fa      	ldr	r2, [r7, #12]
 8013b46:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8013b4a:	f023 0302 	bic.w	r3, r3, #2
 8013b4e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8013b50:	2300      	movs	r3, #0
}
 8013b52:	4618      	mov	r0, r3
 8013b54:	3714      	adds	r7, #20
 8013b56:	46bd      	mov	sp, r7
 8013b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b5c:	4770      	bx	lr

08013b5e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8013b5e:	b480      	push	{r7}
 8013b60:	b085      	sub	sp, #20
 8013b62:	af00      	add	r7, sp, #0
 8013b64:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013b66:	687b      	ldr	r3, [r7, #4]
 8013b68:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8013b6a:	68fb      	ldr	r3, [r7, #12]
 8013b6c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8013b70:	681b      	ldr	r3, [r3, #0]
 8013b72:	68fa      	ldr	r2, [r7, #12]
 8013b74:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8013b78:	f023 0303 	bic.w	r3, r3, #3
 8013b7c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8013b7e:	68fb      	ldr	r3, [r7, #12]
 8013b80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8013b84:	685b      	ldr	r3, [r3, #4]
 8013b86:	68fa      	ldr	r2, [r7, #12]
 8013b88:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8013b8c:	f043 0302 	orr.w	r3, r3, #2
 8013b90:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8013b92:	2300      	movs	r3, #0
}
 8013b94:	4618      	mov	r0, r3
 8013b96:	3714      	adds	r7, #20
 8013b98:	46bd      	mov	sp, r7
 8013b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b9e:	4770      	bx	lr

08013ba0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8013ba0:	b480      	push	{r7}
 8013ba2:	b085      	sub	sp, #20
 8013ba4:	af00      	add	r7, sp, #0
 8013ba6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8013ba8:	687b      	ldr	r3, [r7, #4]
 8013baa:	695b      	ldr	r3, [r3, #20]
 8013bac:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8013bae:	687b      	ldr	r3, [r7, #4]
 8013bb0:	699b      	ldr	r3, [r3, #24]
 8013bb2:	68fa      	ldr	r2, [r7, #12]
 8013bb4:	4013      	ands	r3, r2
 8013bb6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8013bb8:	68fb      	ldr	r3, [r7, #12]
}
 8013bba:	4618      	mov	r0, r3
 8013bbc:	3714      	adds	r7, #20
 8013bbe:	46bd      	mov	sp, r7
 8013bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bc4:	4770      	bx	lr

08013bc6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8013bc6:	b480      	push	{r7}
 8013bc8:	b085      	sub	sp, #20
 8013bca:	af00      	add	r7, sp, #0
 8013bcc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013bce:	687b      	ldr	r3, [r7, #4]
 8013bd0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8013bd2:	68fb      	ldr	r3, [r7, #12]
 8013bd4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8013bd8:	699b      	ldr	r3, [r3, #24]
 8013bda:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8013bdc:	68fb      	ldr	r3, [r7, #12]
 8013bde:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8013be2:	69db      	ldr	r3, [r3, #28]
 8013be4:	68ba      	ldr	r2, [r7, #8]
 8013be6:	4013      	ands	r3, r2
 8013be8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8013bea:	68bb      	ldr	r3, [r7, #8]
 8013bec:	0c1b      	lsrs	r3, r3, #16
}
 8013bee:	4618      	mov	r0, r3
 8013bf0:	3714      	adds	r7, #20
 8013bf2:	46bd      	mov	sp, r7
 8013bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bf8:	4770      	bx	lr

08013bfa <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8013bfa:	b480      	push	{r7}
 8013bfc:	b085      	sub	sp, #20
 8013bfe:	af00      	add	r7, sp, #0
 8013c00:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013c02:	687b      	ldr	r3, [r7, #4]
 8013c04:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8013c06:	68fb      	ldr	r3, [r7, #12]
 8013c08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8013c0c:	699b      	ldr	r3, [r3, #24]
 8013c0e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8013c10:	68fb      	ldr	r3, [r7, #12]
 8013c12:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8013c16:	69db      	ldr	r3, [r3, #28]
 8013c18:	68ba      	ldr	r2, [r7, #8]
 8013c1a:	4013      	ands	r3, r2
 8013c1c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8013c1e:	68bb      	ldr	r3, [r7, #8]
 8013c20:	b29b      	uxth	r3, r3
}
 8013c22:	4618      	mov	r0, r3
 8013c24:	3714      	adds	r7, #20
 8013c26:	46bd      	mov	sp, r7
 8013c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c2c:	4770      	bx	lr

08013c2e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8013c2e:	b480      	push	{r7}
 8013c30:	b085      	sub	sp, #20
 8013c32:	af00      	add	r7, sp, #0
 8013c34:	6078      	str	r0, [r7, #4]
 8013c36:	460b      	mov	r3, r1
 8013c38:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013c3a:	687b      	ldr	r3, [r7, #4]
 8013c3c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8013c3e:	78fb      	ldrb	r3, [r7, #3]
 8013c40:	015a      	lsls	r2, r3, #5
 8013c42:	68fb      	ldr	r3, [r7, #12]
 8013c44:	4413      	add	r3, r2
 8013c46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013c4a:	689b      	ldr	r3, [r3, #8]
 8013c4c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8013c4e:	68fb      	ldr	r3, [r7, #12]
 8013c50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8013c54:	695b      	ldr	r3, [r3, #20]
 8013c56:	68ba      	ldr	r2, [r7, #8]
 8013c58:	4013      	ands	r3, r2
 8013c5a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8013c5c:	68bb      	ldr	r3, [r7, #8]
}
 8013c5e:	4618      	mov	r0, r3
 8013c60:	3714      	adds	r7, #20
 8013c62:	46bd      	mov	sp, r7
 8013c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c68:	4770      	bx	lr

08013c6a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8013c6a:	b480      	push	{r7}
 8013c6c:	b087      	sub	sp, #28
 8013c6e:	af00      	add	r7, sp, #0
 8013c70:	6078      	str	r0, [r7, #4]
 8013c72:	460b      	mov	r3, r1
 8013c74:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013c76:	687b      	ldr	r3, [r7, #4]
 8013c78:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8013c7a:	697b      	ldr	r3, [r7, #20]
 8013c7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8013c80:	691b      	ldr	r3, [r3, #16]
 8013c82:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8013c84:	697b      	ldr	r3, [r7, #20]
 8013c86:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8013c8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013c8c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8013c8e:	78fb      	ldrb	r3, [r7, #3]
 8013c90:	f003 030f 	and.w	r3, r3, #15
 8013c94:	68fa      	ldr	r2, [r7, #12]
 8013c96:	fa22 f303 	lsr.w	r3, r2, r3
 8013c9a:	01db      	lsls	r3, r3, #7
 8013c9c:	b2db      	uxtb	r3, r3
 8013c9e:	693a      	ldr	r2, [r7, #16]
 8013ca0:	4313      	orrs	r3, r2
 8013ca2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8013ca4:	78fb      	ldrb	r3, [r7, #3]
 8013ca6:	015a      	lsls	r2, r3, #5
 8013ca8:	697b      	ldr	r3, [r7, #20]
 8013caa:	4413      	add	r3, r2
 8013cac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013cb0:	689b      	ldr	r3, [r3, #8]
 8013cb2:	693a      	ldr	r2, [r7, #16]
 8013cb4:	4013      	ands	r3, r2
 8013cb6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8013cb8:	68bb      	ldr	r3, [r7, #8]
}
 8013cba:	4618      	mov	r0, r3
 8013cbc:	371c      	adds	r7, #28
 8013cbe:	46bd      	mov	sp, r7
 8013cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cc4:	4770      	bx	lr

08013cc6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8013cc6:	b480      	push	{r7}
 8013cc8:	b083      	sub	sp, #12
 8013cca:	af00      	add	r7, sp, #0
 8013ccc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8013cce:	687b      	ldr	r3, [r7, #4]
 8013cd0:	695b      	ldr	r3, [r3, #20]
 8013cd2:	f003 0301 	and.w	r3, r3, #1
}
 8013cd6:	4618      	mov	r0, r3
 8013cd8:	370c      	adds	r7, #12
 8013cda:	46bd      	mov	sp, r7
 8013cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ce0:	4770      	bx	lr
	...

08013ce4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8013ce4:	b480      	push	{r7}
 8013ce6:	b085      	sub	sp, #20
 8013ce8:	af00      	add	r7, sp, #0
 8013cea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013cec:	687b      	ldr	r3, [r7, #4]
 8013cee:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8013cf0:	68fb      	ldr	r3, [r7, #12]
 8013cf2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013cf6:	681a      	ldr	r2, [r3, #0]
 8013cf8:	68fb      	ldr	r3, [r7, #12]
 8013cfa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013cfe:	4619      	mov	r1, r3
 8013d00:	4b09      	ldr	r3, [pc, #36]	@ (8013d28 <USB_ActivateSetup+0x44>)
 8013d02:	4013      	ands	r3, r2
 8013d04:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8013d06:	68fb      	ldr	r3, [r7, #12]
 8013d08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8013d0c:	685b      	ldr	r3, [r3, #4]
 8013d0e:	68fa      	ldr	r2, [r7, #12]
 8013d10:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8013d14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8013d18:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8013d1a:	2300      	movs	r3, #0
}
 8013d1c:	4618      	mov	r0, r3
 8013d1e:	3714      	adds	r7, #20
 8013d20:	46bd      	mov	sp, r7
 8013d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d26:	4770      	bx	lr
 8013d28:	fffff800 	.word	0xfffff800

08013d2c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8013d2c:	b480      	push	{r7}
 8013d2e:	b087      	sub	sp, #28
 8013d30:	af00      	add	r7, sp, #0
 8013d32:	60f8      	str	r0, [r7, #12]
 8013d34:	460b      	mov	r3, r1
 8013d36:	607a      	str	r2, [r7, #4]
 8013d38:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013d3a:	68fb      	ldr	r3, [r7, #12]
 8013d3c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8013d3e:	68fb      	ldr	r3, [r7, #12]
 8013d40:	333c      	adds	r3, #60	@ 0x3c
 8013d42:	3304      	adds	r3, #4
 8013d44:	681b      	ldr	r3, [r3, #0]
 8013d46:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8013d48:	693b      	ldr	r3, [r7, #16]
 8013d4a:	4a26      	ldr	r2, [pc, #152]	@ (8013de4 <USB_EP0_OutStart+0xb8>)
 8013d4c:	4293      	cmp	r3, r2
 8013d4e:	d90a      	bls.n	8013d66 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8013d50:	697b      	ldr	r3, [r7, #20]
 8013d52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013d56:	681b      	ldr	r3, [r3, #0]
 8013d58:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8013d5c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8013d60:	d101      	bne.n	8013d66 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8013d62:	2300      	movs	r3, #0
 8013d64:	e037      	b.n	8013dd6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8013d66:	697b      	ldr	r3, [r7, #20]
 8013d68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013d6c:	461a      	mov	r2, r3
 8013d6e:	2300      	movs	r3, #0
 8013d70:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8013d72:	697b      	ldr	r3, [r7, #20]
 8013d74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013d78:	691b      	ldr	r3, [r3, #16]
 8013d7a:	697a      	ldr	r2, [r7, #20]
 8013d7c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8013d80:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8013d84:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8013d86:	697b      	ldr	r3, [r7, #20]
 8013d88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013d8c:	691b      	ldr	r3, [r3, #16]
 8013d8e:	697a      	ldr	r2, [r7, #20]
 8013d90:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8013d94:	f043 0318 	orr.w	r3, r3, #24
 8013d98:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8013d9a:	697b      	ldr	r3, [r7, #20]
 8013d9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013da0:	691b      	ldr	r3, [r3, #16]
 8013da2:	697a      	ldr	r2, [r7, #20]
 8013da4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8013da8:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8013dac:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8013dae:	7afb      	ldrb	r3, [r7, #11]
 8013db0:	2b01      	cmp	r3, #1
 8013db2:	d10f      	bne.n	8013dd4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8013db4:	697b      	ldr	r3, [r7, #20]
 8013db6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013dba:	461a      	mov	r2, r3
 8013dbc:	687b      	ldr	r3, [r7, #4]
 8013dbe:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8013dc0:	697b      	ldr	r3, [r7, #20]
 8013dc2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013dc6:	681b      	ldr	r3, [r3, #0]
 8013dc8:	697a      	ldr	r2, [r7, #20]
 8013dca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8013dce:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8013dd2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8013dd4:	2300      	movs	r3, #0
}
 8013dd6:	4618      	mov	r0, r3
 8013dd8:	371c      	adds	r7, #28
 8013dda:	46bd      	mov	sp, r7
 8013ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013de0:	4770      	bx	lr
 8013de2:	bf00      	nop
 8013de4:	4f54300a 	.word	0x4f54300a

08013de8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8013de8:	b480      	push	{r7}
 8013dea:	b085      	sub	sp, #20
 8013dec:	af00      	add	r7, sp, #0
 8013dee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8013df0:	2300      	movs	r3, #0
 8013df2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8013df4:	68fb      	ldr	r3, [r7, #12]
 8013df6:	3301      	adds	r3, #1
 8013df8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8013dfa:	68fb      	ldr	r3, [r7, #12]
 8013dfc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8013e00:	d901      	bls.n	8013e06 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8013e02:	2303      	movs	r3, #3
 8013e04:	e01b      	b.n	8013e3e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8013e06:	687b      	ldr	r3, [r7, #4]
 8013e08:	691b      	ldr	r3, [r3, #16]
 8013e0a:	2b00      	cmp	r3, #0
 8013e0c:	daf2      	bge.n	8013df4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8013e0e:	2300      	movs	r3, #0
 8013e10:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8013e12:	687b      	ldr	r3, [r7, #4]
 8013e14:	691b      	ldr	r3, [r3, #16]
 8013e16:	f043 0201 	orr.w	r2, r3, #1
 8013e1a:	687b      	ldr	r3, [r7, #4]
 8013e1c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8013e1e:	68fb      	ldr	r3, [r7, #12]
 8013e20:	3301      	adds	r3, #1
 8013e22:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8013e24:	68fb      	ldr	r3, [r7, #12]
 8013e26:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8013e2a:	d901      	bls.n	8013e30 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8013e2c:	2303      	movs	r3, #3
 8013e2e:	e006      	b.n	8013e3e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8013e30:	687b      	ldr	r3, [r7, #4]
 8013e32:	691b      	ldr	r3, [r3, #16]
 8013e34:	f003 0301 	and.w	r3, r3, #1
 8013e38:	2b01      	cmp	r3, #1
 8013e3a:	d0f0      	beq.n	8013e1e <USB_CoreReset+0x36>

  return HAL_OK;
 8013e3c:	2300      	movs	r3, #0
}
 8013e3e:	4618      	mov	r0, r3
 8013e40:	3714      	adds	r7, #20
 8013e42:	46bd      	mov	sp, r7
 8013e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e48:	4770      	bx	lr

08013e4a <XBEE_Init>:
#include "XBEE.h"

// FUNCTION IMPLEMENTEATIONS
// ------------------------------------------------------------------------------------

uint8_t XBEE_Init(XBEE_HandleTypeDef *hxbee) {
 8013e4a:	b580      	push	{r7, lr}
 8013e4c:	b082      	sub	sp, #8
 8013e4e:	af00      	add	r7, sp, #0
 8013e50:	6078      	str	r0, [r7, #4]
	// Set up the variables
	hxbee->pkt_DMAHead   = 0;
 8013e52:	687b      	ldr	r3, [r7, #4]
 8013e54:	2200      	movs	r2, #0
 8013e56:	741a      	strb	r2, [r3, #16]
	hxbee->pktRx_state   = 0;
 8013e58:	687b      	ldr	r3, [r7, #4]
 8013e5a:	2200      	movs	r2, #0
 8013e5c:	745a      	strb	r2, [r3, #17]
	hxbee->pktTx_state   = 0;
 8013e5e:	687b      	ldr	r3, [r7, #4]
 8013e60:	2200      	movs	r2, #0
 8013e62:	76da      	strb	r2, [r3, #27]
	hxbee->pktRx_idxPush = 0;
 8013e64:	687b      	ldr	r3, [r7, #4]
 8013e66:	2200      	movs	r2, #0
 8013e68:	765a      	strb	r2, [r3, #25]
	hxbee->pktRx_idxPop  = 0;
 8013e6a:	687b      	ldr	r3, [r7, #4]
 8013e6c:	2200      	movs	r2, #0
 8013e6e:	769a      	strb	r2, [r3, #26]
	hxbee->pktTx_idxPush = 0;
 8013e70:	687b      	ldr	r3, [r7, #4]
 8013e72:	2200      	movs	r2, #0
 8013e74:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
	hxbee->pktTx_idxPop  = 0;
 8013e78:	687b      	ldr	r3, [r7, #4]
 8013e7a:	2200      	movs	r2, #0
 8013e7c:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

	// Allocate mem
	hxbee->pkt_bufDMA  = malloc(PKT_RAWSIZE);
 8013e80:	2044      	movs	r0, #68	@ 0x44
 8013e82:	f002 ff1f 	bl	8016cc4 <malloc>
 8013e86:	4603      	mov	r3, r0
 8013e88:	461a      	mov	r2, r3
 8013e8a:	687b      	ldr	r3, [r7, #4]
 8013e8c:	609a      	str	r2, [r3, #8]
	hxbee->pkt_bufPart = malloc(PKT_RAWSIZE);
 8013e8e:	2044      	movs	r0, #68	@ 0x44
 8013e90:	f002 ff18 	bl	8016cc4 <malloc>
 8013e94:	4603      	mov	r3, r0
 8013e96:	461a      	mov	r2, r3
 8013e98:	687b      	ldr	r3, [r7, #4]
 8013e9a:	60da      	str	r2, [r3, #12]
	hxbee->pktRx_mem   = malloc(hxbee->pktRx_max*PKT_RAWSIZE);
 8013e9c:	687b      	ldr	r3, [r7, #4]
 8013e9e:	7e1b      	ldrb	r3, [r3, #24]
 8013ea0:	461a      	mov	r2, r3
 8013ea2:	4613      	mov	r3, r2
 8013ea4:	011b      	lsls	r3, r3, #4
 8013ea6:	4413      	add	r3, r2
 8013ea8:	009b      	lsls	r3, r3, #2
 8013eaa:	4618      	mov	r0, r3
 8013eac:	f002 ff0a 	bl	8016cc4 <malloc>
 8013eb0:	4603      	mov	r3, r0
 8013eb2:	461a      	mov	r2, r3
 8013eb4:	687b      	ldr	r3, [r7, #4]
 8013eb6:	615a      	str	r2, [r3, #20]
	hxbee->pktTx_mem   = malloc(hxbee->pktTx_max*PKT_RAWSIZE);
 8013eb8:	687b      	ldr	r3, [r7, #4]
 8013eba:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013ebe:	461a      	mov	r2, r3
 8013ec0:	4613      	mov	r3, r2
 8013ec2:	011b      	lsls	r3, r3, #4
 8013ec4:	4413      	add	r3, r2
 8013ec6:	009b      	lsls	r3, r3, #2
 8013ec8:	4618      	mov	r0, r3
 8013eca:	f002 fefb 	bl	8016cc4 <malloc>
 8013ece:	4603      	mov	r3, r0
 8013ed0:	461a      	mov	r2, r3
 8013ed2:	687b      	ldr	r3, [r7, #4]
 8013ed4:	61da      	str	r2, [r3, #28]

	// Begin the cyclic UART capture
	// Make sure the DMA is circular
	return HAL_UART_Receive_DMA(hxbee->uart_handle, hxbee->pkt_bufDMA, PKT_RAWSIZE);
 8013ed6:	687b      	ldr	r3, [r7, #4]
 8013ed8:	6818      	ldr	r0, [r3, #0]
 8013eda:	687b      	ldr	r3, [r7, #4]
 8013edc:	689b      	ldr	r3, [r3, #8]
 8013ede:	2244      	movs	r2, #68	@ 0x44
 8013ee0:	4619      	mov	r1, r3
 8013ee2:	f7fc fd4b 	bl	801097c <HAL_UART_Receive_DMA>
 8013ee6:	4603      	mov	r3, r0
}
 8013ee8:	4618      	mov	r0, r3
 8013eea:	3708      	adds	r7, #8
 8013eec:	46bd      	mov	sp, r7
 8013eee:	bd80      	pop	{r7, pc}

08013ef0 <XBEE_RXPacket>:

// Gets a packet if there's one buffered
// 0 - Success
// 1 - Nothing to Get
uint8_t XBEE_RXPacket(XBEE_HandleTypeDef *hxbee, uint8_t **pRxBuffer, uint16_t *pkt_num) {
 8013ef0:	b480      	push	{r7}
 8013ef2:	b087      	sub	sp, #28
 8013ef4:	af00      	add	r7, sp, #0
 8013ef6:	60f8      	str	r0, [r7, #12]
 8013ef8:	60b9      	str	r1, [r7, #8]
 8013efa:	607a      	str	r2, [r7, #4]
	// Check if there's an available packet
	if (hxbee->pktRx_idxPop == hxbee->pktRx_idxPush) return 1;
 8013efc:	68fb      	ldr	r3, [r7, #12]
 8013efe:	7e9a      	ldrb	r2, [r3, #26]
 8013f00:	68fb      	ldr	r3, [r7, #12]
 8013f02:	7e5b      	ldrb	r3, [r3, #25]
 8013f04:	429a      	cmp	r2, r3
 8013f06:	d101      	bne.n	8013f0c <XBEE_RXPacket+0x1c>
 8013f08:	2301      	movs	r3, #1
 8013f0a:	e05b      	b.n	8013fc4 <XBEE_RXPacket+0xd4>

	// There's a packet up for grabs, get a pointer to the raw pkt incl. Header
	uint8_t *pRxInternal = hxbee->pktRx_mem + hxbee->pktRx_idxPop*PKT_RAWSIZE;
 8013f0c:	68fb      	ldr	r3, [r7, #12]
 8013f0e:	695a      	ldr	r2, [r3, #20]
 8013f10:	68fb      	ldr	r3, [r7, #12]
 8013f12:	7e9b      	ldrb	r3, [r3, #26]
 8013f14:	4619      	mov	r1, r3
 8013f16:	460b      	mov	r3, r1
 8013f18:	011b      	lsls	r3, r3, #4
 8013f1a:	440b      	add	r3, r1
 8013f1c:	009b      	lsls	r3, r3, #2
 8013f1e:	4413      	add	r3, r2
 8013f20:	613b      	str	r3, [r7, #16]

	hxbee->pktRx_idxPop += 1;
 8013f22:	68fb      	ldr	r3, [r7, #12]
 8013f24:	7e9b      	ldrb	r3, [r3, #26]
 8013f26:	3301      	adds	r3, #1
 8013f28:	b2da      	uxtb	r2, r3
 8013f2a:	68fb      	ldr	r3, [r7, #12]
 8013f2c:	769a      	strb	r2, [r3, #26]
	hxbee->pktRx_idxPop %= hxbee->pktRx_max;
 8013f2e:	68fb      	ldr	r3, [r7, #12]
 8013f30:	7e9b      	ldrb	r3, [r3, #26]
 8013f32:	68fa      	ldr	r2, [r7, #12]
 8013f34:	7e12      	ldrb	r2, [r2, #24]
 8013f36:	fbb3 f1f2 	udiv	r1, r3, r2
 8013f3a:	fb01 f202 	mul.w	r2, r1, r2
 8013f3e:	1a9b      	subs	r3, r3, r2
 8013f40:	b2da      	uxtb	r2, r3
 8013f42:	68fb      	ldr	r3, [r7, #12]
 8013f44:	769a      	strb	r2, [r3, #26]

	// Compute the checksum
	uint8_t checksum = 0x00;
 8013f46:	2300      	movs	r3, #0
 8013f48:	75fb      	strb	r3, [r7, #23]
	for (uint8_t i = 0; i < PKT_RAWSIZE; i++) {
 8013f4a:	2300      	movs	r3, #0
 8013f4c:	75bb      	strb	r3, [r7, #22]
 8013f4e:	e00e      	b.n	8013f6e <XBEE_RXPacket+0x7e>
		if (i == 3) continue;
 8013f50:	7dbb      	ldrb	r3, [r7, #22]
 8013f52:	2b03      	cmp	r3, #3
 8013f54:	d007      	beq.n	8013f66 <XBEE_RXPacket+0x76>
		checksum |= pRxInternal[i];
 8013f56:	7dbb      	ldrb	r3, [r7, #22]
 8013f58:	693a      	ldr	r2, [r7, #16]
 8013f5a:	4413      	add	r3, r2
 8013f5c:	781a      	ldrb	r2, [r3, #0]
 8013f5e:	7dfb      	ldrb	r3, [r7, #23]
 8013f60:	4313      	orrs	r3, r2
 8013f62:	75fb      	strb	r3, [r7, #23]
 8013f64:	e000      	b.n	8013f68 <XBEE_RXPacket+0x78>
		if (i == 3) continue;
 8013f66:	bf00      	nop
	for (uint8_t i = 0; i < PKT_RAWSIZE; i++) {
 8013f68:	7dbb      	ldrb	r3, [r7, #22]
 8013f6a:	3301      	adds	r3, #1
 8013f6c:	75bb      	strb	r3, [r7, #22]
 8013f6e:	7dbb      	ldrb	r3, [r7, #22]
 8013f70:	2b43      	cmp	r3, #67	@ 0x43
 8013f72:	d9ed      	bls.n	8013f50 <XBEE_RXPacket+0x60>
	}

	// Packet corrupted, mismatch checksum
	if (pRxInternal[3] != checksum) return 1;
 8013f74:	693b      	ldr	r3, [r7, #16]
 8013f76:	3303      	adds	r3, #3
 8013f78:	781b      	ldrb	r3, [r3, #0]
 8013f7a:	7dfa      	ldrb	r2, [r7, #23]
 8013f7c:	429a      	cmp	r2, r3
 8013f7e:	d001      	beq.n	8013f84 <XBEE_RXPacket+0x94>
 8013f80:	2301      	movs	r3, #1
 8013f82:	e01f      	b.n	8013fc4 <XBEE_RXPacket+0xd4>

	// Get the 16 bit packet number field
	*pkt_num = 0;
 8013f84:	687b      	ldr	r3, [r7, #4]
 8013f86:	2200      	movs	r2, #0
 8013f88:	801a      	strh	r2, [r3, #0]
	*pkt_num += pRxInternal[1];
 8013f8a:	687b      	ldr	r3, [r7, #4]
 8013f8c:	881b      	ldrh	r3, [r3, #0]
 8013f8e:	693a      	ldr	r2, [r7, #16]
 8013f90:	3201      	adds	r2, #1
 8013f92:	7812      	ldrb	r2, [r2, #0]
 8013f94:	4413      	add	r3, r2
 8013f96:	b29a      	uxth	r2, r3
 8013f98:	687b      	ldr	r3, [r7, #4]
 8013f9a:	801a      	strh	r2, [r3, #0]
	*pkt_num *= 256;
 8013f9c:	687b      	ldr	r3, [r7, #4]
 8013f9e:	881b      	ldrh	r3, [r3, #0]
 8013fa0:	021b      	lsls	r3, r3, #8
 8013fa2:	b29a      	uxth	r2, r3
 8013fa4:	687b      	ldr	r3, [r7, #4]
 8013fa6:	801a      	strh	r2, [r3, #0]
	*pkt_num += pRxInternal[2];
 8013fa8:	687b      	ldr	r3, [r7, #4]
 8013faa:	881b      	ldrh	r3, [r3, #0]
 8013fac:	693a      	ldr	r2, [r7, #16]
 8013fae:	3202      	adds	r2, #2
 8013fb0:	7812      	ldrb	r2, [r2, #0]
 8013fb2:	4413      	add	r3, r2
 8013fb4:	b29a      	uxth	r2, r3
 8013fb6:	687b      	ldr	r3, [r7, #4]
 8013fb8:	801a      	strh	r2, [r3, #0]

	*pRxBuffer = pRxInternal + 4;
 8013fba:	693b      	ldr	r3, [r7, #16]
 8013fbc:	1d1a      	adds	r2, r3, #4
 8013fbe:	68bb      	ldr	r3, [r7, #8]
 8013fc0:	601a      	str	r2, [r3, #0]

	return 0;
 8013fc2:	2300      	movs	r3, #0
}
 8013fc4:	4618      	mov	r0, r3
 8013fc6:	371c      	adds	r7, #28
 8013fc8:	46bd      	mov	sp, r7
 8013fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fce:	4770      	bx	lr

08013fd0 <XBEE_TXPacket>:

uint8_t XBEE_TXPacket(XBEE_HandleTypeDef *hxbee, uint8_t *pTxBuffer, uint16_t pkt_num) {
 8013fd0:	b580      	push	{r7, lr}
 8013fd2:	b086      	sub	sp, #24
 8013fd4:	af00      	add	r7, sp, #0
 8013fd6:	60f8      	str	r0, [r7, #12]
 8013fd8:	60b9      	str	r1, [r7, #8]
 8013fda:	4613      	mov	r3, r2
 8013fdc:	80fb      	strh	r3, [r7, #6]
	// Attempt to increment the packet buffer index
	// Note: We don't actually increment the index until the end of the function in case something goes wrong
	uint8_t pkt_idx = hxbee->pktTx_idxPush + 1;
 8013fde:	68fb      	ldr	r3, [r7, #12]
 8013fe0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8013fe4:	3301      	adds	r3, #1
 8013fe6:	75bb      	strb	r3, [r7, #22]
	pkt_idx %= hxbee->pktTx_max;
 8013fe8:	68fb      	ldr	r3, [r7, #12]
 8013fea:	f893 2020 	ldrb.w	r2, [r3, #32]
 8013fee:	7dbb      	ldrb	r3, [r7, #22]
 8013ff0:	fbb3 f1f2 	udiv	r1, r3, r2
 8013ff4:	fb01 f202 	mul.w	r2, r1, r2
 8013ff8:	1a9b      	subs	r3, r3, r2
 8013ffa:	75bb      	strb	r3, [r7, #22]

	// No space left in the buffer, we have to drop this packet
	if (pkt_idx == hxbee->pktTx_idxPop) return 1;
 8013ffc:	68fb      	ldr	r3, [r7, #12]
 8013ffe:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8014002:	7dba      	ldrb	r2, [r7, #22]
 8014004:	429a      	cmp	r2, r3
 8014006:	d101      	bne.n	801400c <XBEE_TXPacket+0x3c>
 8014008:	2301      	movs	r3, #1
 801400a:	e047      	b.n	801409c <XBEE_TXPacket+0xcc>

	// Get a reference to this memory location
	uint8_t *newPkt = hxbee->pktTx_mem + hxbee->pktTx_idxPush*PKT_RAWSIZE;
 801400c:	68fb      	ldr	r3, [r7, #12]
 801400e:	69da      	ldr	r2, [r3, #28]
 8014010:	68fb      	ldr	r3, [r7, #12]
 8014012:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8014016:	4619      	mov	r1, r3
 8014018:	460b      	mov	r3, r1
 801401a:	011b      	lsls	r3, r3, #4
 801401c:	440b      	add	r3, r1
 801401e:	009b      	lsls	r3, r3, #2
 8014020:	4413      	add	r3, r2
 8014022:	613b      	str	r3, [r7, #16]

	// Construct the packet
	newPkt[0] = PKT_DELIMETER;
 8014024:	693b      	ldr	r3, [r7, #16]
 8014026:	22aa      	movs	r2, #170	@ 0xaa
 8014028:	701a      	strb	r2, [r3, #0]
	newPkt[1] = pkt_num >> 8;
 801402a:	88fb      	ldrh	r3, [r7, #6]
 801402c:	0a1b      	lsrs	r3, r3, #8
 801402e:	b29a      	uxth	r2, r3
 8014030:	693b      	ldr	r3, [r7, #16]
 8014032:	3301      	adds	r3, #1
 8014034:	b2d2      	uxtb	r2, r2
 8014036:	701a      	strb	r2, [r3, #0]
	newPkt[2] = pkt_num & 0x00FF;
 8014038:	693b      	ldr	r3, [r7, #16]
 801403a:	3302      	adds	r3, #2
 801403c:	88fa      	ldrh	r2, [r7, #6]
 801403e:	b2d2      	uxtb	r2, r2
 8014040:	701a      	strb	r2, [r3, #0]

	memcpy(newPkt + 4, pTxBuffer, PKT_DATASIZE);
 8014042:	693b      	ldr	r3, [r7, #16]
 8014044:	3304      	adds	r3, #4
 8014046:	2240      	movs	r2, #64	@ 0x40
 8014048:	68b9      	ldr	r1, [r7, #8]
 801404a:	4618      	mov	r0, r3
 801404c:	f002 ff56 	bl	8016efc <memcpy>

	// Compute the checksum
	newPkt[3] = 0x00;
 8014050:	693b      	ldr	r3, [r7, #16]
 8014052:	3303      	adds	r3, #3
 8014054:	2200      	movs	r2, #0
 8014056:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < PKT_RAWSIZE; i++) {
 8014058:	2300      	movs	r3, #0
 801405a:	75fb      	strb	r3, [r7, #23]
 801405c:	e013      	b.n	8014086 <XBEE_TXPacket+0xb6>
		if (i == 3) continue;
 801405e:	7dfb      	ldrb	r3, [r7, #23]
 8014060:	2b03      	cmp	r3, #3
 8014062:	d00c      	beq.n	801407e <XBEE_TXPacket+0xae>
		newPkt[3] |= newPkt[i];
 8014064:	693b      	ldr	r3, [r7, #16]
 8014066:	3303      	adds	r3, #3
 8014068:	7819      	ldrb	r1, [r3, #0]
 801406a:	7dfb      	ldrb	r3, [r7, #23]
 801406c:	693a      	ldr	r2, [r7, #16]
 801406e:	4413      	add	r3, r2
 8014070:	781a      	ldrb	r2, [r3, #0]
 8014072:	693b      	ldr	r3, [r7, #16]
 8014074:	3303      	adds	r3, #3
 8014076:	430a      	orrs	r2, r1
 8014078:	b2d2      	uxtb	r2, r2
 801407a:	701a      	strb	r2, [r3, #0]
 801407c:	e000      	b.n	8014080 <XBEE_TXPacket+0xb0>
		if (i == 3) continue;
 801407e:	bf00      	nop
	for (uint8_t i = 0; i < PKT_RAWSIZE; i++) {
 8014080:	7dfb      	ldrb	r3, [r7, #23]
 8014082:	3301      	adds	r3, #1
 8014084:	75fb      	strb	r3, [r7, #23]
 8014086:	7dfb      	ldrb	r3, [r7, #23]
 8014088:	2b43      	cmp	r3, #67	@ 0x43
 801408a:	d9e8      	bls.n	801405e <XBEE_TXPacket+0x8e>
	}

	// Try and immediately send the packet
	// TODO: Set the bust state, interrupts
	return HAL_UART_Transmit(hxbee->uart_handle, newPkt, PKT_RAWSIZE, 30);	// Transmit the buffer
 801408c:	68fb      	ldr	r3, [r7, #12]
 801408e:	6818      	ldr	r0, [r3, #0]
 8014090:	231e      	movs	r3, #30
 8014092:	2244      	movs	r2, #68	@ 0x44
 8014094:	6939      	ldr	r1, [r7, #16]
 8014096:	f7fc fbe3 	bl	8010860 <HAL_UART_Transmit>
 801409a:	4603      	mov	r3, r0
}
 801409c:	4618      	mov	r0, r3
 801409e:	3718      	adds	r7, #24
 80140a0:	46bd      	mov	sp, r7
 80140a2:	bd80      	pop	{r7, pc}

080140a4 <XBEE_RX_DMACallback>:
// Process incoming packets on DMA callback
// 0 - Success
// 1 - Buffer full
// 2 - Packet malformed
// 3 - Checksum mismatch
uint8_t XBEE_RX_DMACallback(XBEE_HandleTypeDef *hxbee) {
 80140a4:	b580      	push	{r7, lr}
 80140a6:	b096      	sub	sp, #88	@ 0x58
 80140a8:	af00      	add	r7, sp, #0
 80140aa:	6078      	str	r0, [r7, #4]
	// Attempt to increment the packet buffer index
	// Note: We don't actually increment the index until the end of the function in case something goes wrong
	uint8_t pkt_idx = hxbee->pktRx_idxPush + 1;
 80140ac:	687b      	ldr	r3, [r7, #4]
 80140ae:	7e5b      	ldrb	r3, [r3, #25]
 80140b0:	3301      	adds	r3, #1
 80140b2:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
	pkt_idx %= hxbee->pktRx_max;
 80140b6:	687b      	ldr	r3, [r7, #4]
 80140b8:	7e1a      	ldrb	r2, [r3, #24]
 80140ba:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80140be:	fbb3 f1f2 	udiv	r1, r3, r2
 80140c2:	fb01 f202 	mul.w	r2, r1, r2
 80140c6:	1a9b      	subs	r3, r3, r2
 80140c8:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55

	// No space left in the buffer, we have to drop this packet
	if (pkt_idx == hxbee->pktRx_idxPop) return 1;
 80140cc:	687b      	ldr	r3, [r7, #4]
 80140ce:	7e9b      	ldrb	r3, [r3, #26]
 80140d0:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 80140d4:	429a      	cmp	r2, r3
 80140d6:	d101      	bne.n	80140dc <XBEE_RX_DMACallback+0x38>
 80140d8:	2301      	movs	r3, #1
 80140da:	e097      	b.n	801420c <XBEE_RX_DMACallback+0x168>

	// Create a temporary buffer for the complete packet
	uint8_t pkt_cplt[PKT_RAWSIZE];

	// Store the last readHead, we need this for packet reconstruction if bytes got lost
	uint8_t old_head = hxbee->pkt_DMAHead;
 80140dc:	687b      	ldr	r3, [r7, #4]
 80140de:	7c1b      	ldrb	r3, [r3, #16]
 80140e0:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54

	// Find the delimeter
	uint8_t found_delim = 0;
 80140e4:	2300      	movs	r3, #0
 80140e6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	for (uint8_t circular_ptr = 0; circular_ptr < PKT_RAWSIZE; circular_ptr++) {
 80140ea:	2300      	movs	r3, #0
 80140ec:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
 80140f0:	e027      	b.n	8014142 <XBEE_RX_DMACallback+0x9e>
		uint8_t packet_ptr = (circular_ptr + hxbee->pkt_DMAHead) % PKT_RAWSIZE;
 80140f2:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 80140f6:	687a      	ldr	r2, [r7, #4]
 80140f8:	7c12      	ldrb	r2, [r2, #16]
 80140fa:	441a      	add	r2, r3
 80140fc:	4b45      	ldr	r3, [pc, #276]	@ (8014214 <XBEE_RX_DMACallback+0x170>)
 80140fe:	fb83 1302 	smull	r1, r3, r3, r2
 8014102:	1159      	asrs	r1, r3, #5
 8014104:	17d3      	asrs	r3, r2, #31
 8014106:	1ac9      	subs	r1, r1, r3
 8014108:	460b      	mov	r3, r1
 801410a:	011b      	lsls	r3, r3, #4
 801410c:	440b      	add	r3, r1
 801410e:	009b      	lsls	r3, r3, #2
 8014110:	1ad1      	subs	r1, r2, r3
 8014112:	460b      	mov	r3, r1
 8014114:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
		if (hxbee->pkt_bufDMA[packet_ptr] == PKT_DELIMETER) {
 8014118:	687b      	ldr	r3, [r7, #4]
 801411a:	689a      	ldr	r2, [r3, #8]
 801411c:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8014120:	4413      	add	r3, r2
 8014122:	781b      	ldrb	r3, [r3, #0]
 8014124:	2baa      	cmp	r3, #170	@ 0xaa
 8014126:	d107      	bne.n	8014138 <XBEE_RX_DMACallback+0x94>
			found_delim = 1;					// Update flag
 8014128:	2301      	movs	r3, #1
 801412a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			hxbee->pkt_DMAHead = packet_ptr;	// Move the readHead
 801412e:	687b      	ldr	r3, [r7, #4]
 8014130:	f897 2053 	ldrb.w	r2, [r7, #83]	@ 0x53
 8014134:	741a      	strb	r2, [r3, #16]
			break;
 8014136:	e008      	b.n	801414a <XBEE_RX_DMACallback+0xa6>
	for (uint8_t circular_ptr = 0; circular_ptr < PKT_RAWSIZE; circular_ptr++) {
 8014138:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 801413c:	3301      	adds	r3, #1
 801413e:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
 8014142:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 8014146:	2b43      	cmp	r3, #67	@ 0x43
 8014148:	d9d3      	bls.n	80140f2 <XBEE_RX_DMACallback+0x4e>
		}
	}

	// Couldn't find the delimeter, this packet is FUBAR, discard the whole thing
	if (!found_delim) return 2;
 801414a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801414e:	2b00      	cmp	r3, #0
 8014150:	d101      	bne.n	8014156 <XBEE_RX_DMACallback+0xb2>
 8014152:	2302      	movs	r3, #2
 8014154:	e05a      	b.n	801420c <XBEE_RX_DMACallback+0x168>

	// Copy the partial packet contents into the completed packet buffer
	memcpy(pkt_cplt, hxbee->pkt_bufPart, PKT_RAWSIZE);
 8014156:	687b      	ldr	r3, [r7, #4]
 8014158:	68da      	ldr	r2, [r3, #12]
 801415a:	f107 030c 	add.w	r3, r7, #12
 801415e:	4611      	mov	r1, r2
 8014160:	2244      	movs	r2, #68	@ 0x44
 8014162:	4618      	mov	r0, r3
 8014164:	f002 feca 	bl	8016efc <memcpy>

	// Copy the new packet contents into the partial packet buffer
	memcpy(hxbee->pkt_bufPart, hxbee->pkt_bufDMA + hxbee->pkt_DMAHead, PKT_RAWSIZE - hxbee->pkt_DMAHead);
 8014168:	687b      	ldr	r3, [r7, #4]
 801416a:	68d8      	ldr	r0, [r3, #12]
 801416c:	687b      	ldr	r3, [r7, #4]
 801416e:	689b      	ldr	r3, [r3, #8]
 8014170:	687a      	ldr	r2, [r7, #4]
 8014172:	7c12      	ldrb	r2, [r2, #16]
 8014174:	1899      	adds	r1, r3, r2
 8014176:	687b      	ldr	r3, [r7, #4]
 8014178:	7c1b      	ldrb	r3, [r3, #16]
 801417a:	f1c3 0344 	rsb	r3, r3, #68	@ 0x44
 801417e:	461a      	mov	r2, r3
 8014180:	f002 febc 	bl	8016efc <memcpy>

	// finish the old packet
	// Account for dropped byte underflow
	// TODO: We can actually correct this instead of just giving up
	if (old_head < hxbee->pkt_DMAHead) {
 8014184:	687b      	ldr	r3, [r7, #4]
 8014186:	7c1b      	ldrb	r3, [r3, #16]
 8014188:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 801418c:	429a      	cmp	r2, r3
 801418e:	d201      	bcs.n	8014194 <XBEE_RX_DMACallback+0xf0>
		return 2;
 8014190:	2302      	movs	r3, #2
 8014192:	e03b      	b.n	801420c <XBEE_RX_DMACallback+0x168>
	}

	uint16_t head_slip = old_head - hxbee->pkt_DMAHead;	// How many bytes were dropped
 8014194:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8014198:	b29b      	uxth	r3, r3
 801419a:	687a      	ldr	r2, [r7, #4]
 801419c:	7c12      	ldrb	r2, [r2, #16]
 801419e:	1a9b      	subs	r3, r3, r2
 80141a0:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
	memset(pkt_cplt + (PKT_RAWSIZE - old_head), 0x00, head_slip); 									 // Zero dropped bytes
 80141a4:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 80141a8:	f1c3 0344 	rsb	r3, r3, #68	@ 0x44
 80141ac:	461a      	mov	r2, r3
 80141ae:	f107 030c 	add.w	r3, r7, #12
 80141b2:	4413      	add	r3, r2
 80141b4:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 80141b8:	2100      	movs	r1, #0
 80141ba:	4618      	mov	r0, r3
 80141bc:	f002 fe5a 	bl	8016e74 <memset>
	memcpy(pkt_cplt + (PKT_RAWSIZE - old_head) + head_slip, hxbee->pkt_bufDMA, hxbee->pkt_DMAHead); // Fill in missing bytes
 80141c0:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 80141c4:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 80141c8:	1ad3      	subs	r3, r2, r3
 80141ca:	3344      	adds	r3, #68	@ 0x44
 80141cc:	f107 020c 	add.w	r2, r7, #12
 80141d0:	18d0      	adds	r0, r2, r3
 80141d2:	687b      	ldr	r3, [r7, #4]
 80141d4:	6899      	ldr	r1, [r3, #8]
 80141d6:	687b      	ldr	r3, [r7, #4]
 80141d8:	7c1b      	ldrb	r3, [r3, #16]
 80141da:	461a      	mov	r2, r3
 80141dc:	f002 fe8e 	bl	8016efc <memcpy>
	// In the event of a single dropped byte, this is accurate, if more than one gets dropped this may become inaccurate

	// TODO: CHECKSUM

	// If everything went well, increment the index and move the data into the RX buffer
	hxbee->pktRx_idxPush = pkt_idx;
 80141e0:	687b      	ldr	r3, [r7, #4]
 80141e2:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 80141e6:	765a      	strb	r2, [r3, #25]
	memcpy(hxbee->pktRx_mem + hxbee->pktRx_idxPush*PKT_RAWSIZE, pkt_cplt, PKT_RAWSIZE);
 80141e8:	687b      	ldr	r3, [r7, #4]
 80141ea:	695a      	ldr	r2, [r3, #20]
 80141ec:	687b      	ldr	r3, [r7, #4]
 80141ee:	7e5b      	ldrb	r3, [r3, #25]
 80141f0:	4619      	mov	r1, r3
 80141f2:	460b      	mov	r3, r1
 80141f4:	011b      	lsls	r3, r3, #4
 80141f6:	440b      	add	r3, r1
 80141f8:	009b      	lsls	r3, r3, #2
 80141fa:	4413      	add	r3, r2
 80141fc:	4618      	mov	r0, r3
 80141fe:	f107 030c 	add.w	r3, r7, #12
 8014202:	2244      	movs	r2, #68	@ 0x44
 8014204:	4619      	mov	r1, r3
 8014206:	f002 fe79 	bl	8016efc <memcpy>

	return 0;
 801420a:	2300      	movs	r3, #0
}
 801420c:	4618      	mov	r0, r3
 801420e:	3758      	adds	r7, #88	@ 0x58
 8014210:	46bd      	mov	sp, r7
 8014212:	bd80      	pop	{r7, pc}
 8014214:	78787879 	.word	0x78787879

08014218 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014218:	b580      	push	{r7, lr}
 801421a:	b084      	sub	sp, #16
 801421c:	af00      	add	r7, sp, #0
 801421e:	6078      	str	r0, [r7, #4]
 8014220:	460b      	mov	r3, r1
 8014222:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8014224:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8014228:	f002 fd08 	bl	8016c3c <USBD_static_malloc>
 801422c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 801422e:	68fb      	ldr	r3, [r7, #12]
 8014230:	2b00      	cmp	r3, #0
 8014232:	d109      	bne.n	8014248 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8014234:	687b      	ldr	r3, [r7, #4]
 8014236:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801423a:	687b      	ldr	r3, [r7, #4]
 801423c:	32b0      	adds	r2, #176	@ 0xb0
 801423e:	2100      	movs	r1, #0
 8014240:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8014244:	2302      	movs	r3, #2
 8014246:	e0d4      	b.n	80143f2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8014248:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 801424c:	2100      	movs	r1, #0
 801424e:	68f8      	ldr	r0, [r7, #12]
 8014250:	f002 fe10 	bl	8016e74 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8014254:	687b      	ldr	r3, [r7, #4]
 8014256:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801425a:	687b      	ldr	r3, [r7, #4]
 801425c:	32b0      	adds	r2, #176	@ 0xb0
 801425e:	68f9      	ldr	r1, [r7, #12]
 8014260:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8014264:	687b      	ldr	r3, [r7, #4]
 8014266:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801426a:	687b      	ldr	r3, [r7, #4]
 801426c:	32b0      	adds	r2, #176	@ 0xb0
 801426e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8014272:	687b      	ldr	r3, [r7, #4]
 8014274:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014278:	687b      	ldr	r3, [r7, #4]
 801427a:	7c1b      	ldrb	r3, [r3, #16]
 801427c:	2b00      	cmp	r3, #0
 801427e:	d138      	bne.n	80142f2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8014280:	4b5e      	ldr	r3, [pc, #376]	@ (80143fc <USBD_CDC_Init+0x1e4>)
 8014282:	7819      	ldrb	r1, [r3, #0]
 8014284:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8014288:	2202      	movs	r2, #2
 801428a:	6878      	ldr	r0, [r7, #4]
 801428c:	f002 fbb3 	bl	80169f6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8014290:	4b5a      	ldr	r3, [pc, #360]	@ (80143fc <USBD_CDC_Init+0x1e4>)
 8014292:	781b      	ldrb	r3, [r3, #0]
 8014294:	f003 020f 	and.w	r2, r3, #15
 8014298:	6879      	ldr	r1, [r7, #4]
 801429a:	4613      	mov	r3, r2
 801429c:	009b      	lsls	r3, r3, #2
 801429e:	4413      	add	r3, r2
 80142a0:	009b      	lsls	r3, r3, #2
 80142a2:	440b      	add	r3, r1
 80142a4:	3324      	adds	r3, #36	@ 0x24
 80142a6:	2201      	movs	r2, #1
 80142a8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80142aa:	4b55      	ldr	r3, [pc, #340]	@ (8014400 <USBD_CDC_Init+0x1e8>)
 80142ac:	7819      	ldrb	r1, [r3, #0]
 80142ae:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80142b2:	2202      	movs	r2, #2
 80142b4:	6878      	ldr	r0, [r7, #4]
 80142b6:	f002 fb9e 	bl	80169f6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80142ba:	4b51      	ldr	r3, [pc, #324]	@ (8014400 <USBD_CDC_Init+0x1e8>)
 80142bc:	781b      	ldrb	r3, [r3, #0]
 80142be:	f003 020f 	and.w	r2, r3, #15
 80142c2:	6879      	ldr	r1, [r7, #4]
 80142c4:	4613      	mov	r3, r2
 80142c6:	009b      	lsls	r3, r3, #2
 80142c8:	4413      	add	r3, r2
 80142ca:	009b      	lsls	r3, r3, #2
 80142cc:	440b      	add	r3, r1
 80142ce:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80142d2:	2201      	movs	r2, #1
 80142d4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80142d6:	4b4b      	ldr	r3, [pc, #300]	@ (8014404 <USBD_CDC_Init+0x1ec>)
 80142d8:	781b      	ldrb	r3, [r3, #0]
 80142da:	f003 020f 	and.w	r2, r3, #15
 80142de:	6879      	ldr	r1, [r7, #4]
 80142e0:	4613      	mov	r3, r2
 80142e2:	009b      	lsls	r3, r3, #2
 80142e4:	4413      	add	r3, r2
 80142e6:	009b      	lsls	r3, r3, #2
 80142e8:	440b      	add	r3, r1
 80142ea:	3326      	adds	r3, #38	@ 0x26
 80142ec:	2210      	movs	r2, #16
 80142ee:	801a      	strh	r2, [r3, #0]
 80142f0:	e035      	b.n	801435e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80142f2:	4b42      	ldr	r3, [pc, #264]	@ (80143fc <USBD_CDC_Init+0x1e4>)
 80142f4:	7819      	ldrb	r1, [r3, #0]
 80142f6:	2340      	movs	r3, #64	@ 0x40
 80142f8:	2202      	movs	r2, #2
 80142fa:	6878      	ldr	r0, [r7, #4]
 80142fc:	f002 fb7b 	bl	80169f6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8014300:	4b3e      	ldr	r3, [pc, #248]	@ (80143fc <USBD_CDC_Init+0x1e4>)
 8014302:	781b      	ldrb	r3, [r3, #0]
 8014304:	f003 020f 	and.w	r2, r3, #15
 8014308:	6879      	ldr	r1, [r7, #4]
 801430a:	4613      	mov	r3, r2
 801430c:	009b      	lsls	r3, r3, #2
 801430e:	4413      	add	r3, r2
 8014310:	009b      	lsls	r3, r3, #2
 8014312:	440b      	add	r3, r1
 8014314:	3324      	adds	r3, #36	@ 0x24
 8014316:	2201      	movs	r2, #1
 8014318:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 801431a:	4b39      	ldr	r3, [pc, #228]	@ (8014400 <USBD_CDC_Init+0x1e8>)
 801431c:	7819      	ldrb	r1, [r3, #0]
 801431e:	2340      	movs	r3, #64	@ 0x40
 8014320:	2202      	movs	r2, #2
 8014322:	6878      	ldr	r0, [r7, #4]
 8014324:	f002 fb67 	bl	80169f6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8014328:	4b35      	ldr	r3, [pc, #212]	@ (8014400 <USBD_CDC_Init+0x1e8>)
 801432a:	781b      	ldrb	r3, [r3, #0]
 801432c:	f003 020f 	and.w	r2, r3, #15
 8014330:	6879      	ldr	r1, [r7, #4]
 8014332:	4613      	mov	r3, r2
 8014334:	009b      	lsls	r3, r3, #2
 8014336:	4413      	add	r3, r2
 8014338:	009b      	lsls	r3, r3, #2
 801433a:	440b      	add	r3, r1
 801433c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8014340:	2201      	movs	r2, #1
 8014342:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8014344:	4b2f      	ldr	r3, [pc, #188]	@ (8014404 <USBD_CDC_Init+0x1ec>)
 8014346:	781b      	ldrb	r3, [r3, #0]
 8014348:	f003 020f 	and.w	r2, r3, #15
 801434c:	6879      	ldr	r1, [r7, #4]
 801434e:	4613      	mov	r3, r2
 8014350:	009b      	lsls	r3, r3, #2
 8014352:	4413      	add	r3, r2
 8014354:	009b      	lsls	r3, r3, #2
 8014356:	440b      	add	r3, r1
 8014358:	3326      	adds	r3, #38	@ 0x26
 801435a:	2210      	movs	r2, #16
 801435c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 801435e:	4b29      	ldr	r3, [pc, #164]	@ (8014404 <USBD_CDC_Init+0x1ec>)
 8014360:	7819      	ldrb	r1, [r3, #0]
 8014362:	2308      	movs	r3, #8
 8014364:	2203      	movs	r2, #3
 8014366:	6878      	ldr	r0, [r7, #4]
 8014368:	f002 fb45 	bl	80169f6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 801436c:	4b25      	ldr	r3, [pc, #148]	@ (8014404 <USBD_CDC_Init+0x1ec>)
 801436e:	781b      	ldrb	r3, [r3, #0]
 8014370:	f003 020f 	and.w	r2, r3, #15
 8014374:	6879      	ldr	r1, [r7, #4]
 8014376:	4613      	mov	r3, r2
 8014378:	009b      	lsls	r3, r3, #2
 801437a:	4413      	add	r3, r2
 801437c:	009b      	lsls	r3, r3, #2
 801437e:	440b      	add	r3, r1
 8014380:	3324      	adds	r3, #36	@ 0x24
 8014382:	2201      	movs	r2, #1
 8014384:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8014386:	68fb      	ldr	r3, [r7, #12]
 8014388:	2200      	movs	r2, #0
 801438a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 801438e:	687b      	ldr	r3, [r7, #4]
 8014390:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8014394:	687a      	ldr	r2, [r7, #4]
 8014396:	33b0      	adds	r3, #176	@ 0xb0
 8014398:	009b      	lsls	r3, r3, #2
 801439a:	4413      	add	r3, r2
 801439c:	685b      	ldr	r3, [r3, #4]
 801439e:	681b      	ldr	r3, [r3, #0]
 80143a0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80143a2:	68fb      	ldr	r3, [r7, #12]
 80143a4:	2200      	movs	r2, #0
 80143a6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80143aa:	68fb      	ldr	r3, [r7, #12]
 80143ac:	2200      	movs	r2, #0
 80143ae:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 80143b2:	68fb      	ldr	r3, [r7, #12]
 80143b4:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80143b8:	2b00      	cmp	r3, #0
 80143ba:	d101      	bne.n	80143c0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80143bc:	2302      	movs	r3, #2
 80143be:	e018      	b.n	80143f2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80143c0:	687b      	ldr	r3, [r7, #4]
 80143c2:	7c1b      	ldrb	r3, [r3, #16]
 80143c4:	2b00      	cmp	r3, #0
 80143c6:	d10a      	bne.n	80143de <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80143c8:	4b0d      	ldr	r3, [pc, #52]	@ (8014400 <USBD_CDC_Init+0x1e8>)
 80143ca:	7819      	ldrb	r1, [r3, #0]
 80143cc:	68fb      	ldr	r3, [r7, #12]
 80143ce:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80143d2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80143d6:	6878      	ldr	r0, [r7, #4]
 80143d8:	f002 fbfc 	bl	8016bd4 <USBD_LL_PrepareReceive>
 80143dc:	e008      	b.n	80143f0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80143de:	4b08      	ldr	r3, [pc, #32]	@ (8014400 <USBD_CDC_Init+0x1e8>)
 80143e0:	7819      	ldrb	r1, [r3, #0]
 80143e2:	68fb      	ldr	r3, [r7, #12]
 80143e4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80143e8:	2340      	movs	r3, #64	@ 0x40
 80143ea:	6878      	ldr	r0, [r7, #4]
 80143ec:	f002 fbf2 	bl	8016bd4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80143f0:	2300      	movs	r3, #0
}
 80143f2:	4618      	mov	r0, r3
 80143f4:	3710      	adds	r7, #16
 80143f6:	46bd      	mov	sp, r7
 80143f8:	bd80      	pop	{r7, pc}
 80143fa:	bf00      	nop
 80143fc:	240000ab 	.word	0x240000ab
 8014400:	240000ac 	.word	0x240000ac
 8014404:	240000ad 	.word	0x240000ad

08014408 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014408:	b580      	push	{r7, lr}
 801440a:	b082      	sub	sp, #8
 801440c:	af00      	add	r7, sp, #0
 801440e:	6078      	str	r0, [r7, #4]
 8014410:	460b      	mov	r3, r1
 8014412:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8014414:	4b3a      	ldr	r3, [pc, #232]	@ (8014500 <USBD_CDC_DeInit+0xf8>)
 8014416:	781b      	ldrb	r3, [r3, #0]
 8014418:	4619      	mov	r1, r3
 801441a:	6878      	ldr	r0, [r7, #4]
 801441c:	f002 fb11 	bl	8016a42 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8014420:	4b37      	ldr	r3, [pc, #220]	@ (8014500 <USBD_CDC_DeInit+0xf8>)
 8014422:	781b      	ldrb	r3, [r3, #0]
 8014424:	f003 020f 	and.w	r2, r3, #15
 8014428:	6879      	ldr	r1, [r7, #4]
 801442a:	4613      	mov	r3, r2
 801442c:	009b      	lsls	r3, r3, #2
 801442e:	4413      	add	r3, r2
 8014430:	009b      	lsls	r3, r3, #2
 8014432:	440b      	add	r3, r1
 8014434:	3324      	adds	r3, #36	@ 0x24
 8014436:	2200      	movs	r2, #0
 8014438:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 801443a:	4b32      	ldr	r3, [pc, #200]	@ (8014504 <USBD_CDC_DeInit+0xfc>)
 801443c:	781b      	ldrb	r3, [r3, #0]
 801443e:	4619      	mov	r1, r3
 8014440:	6878      	ldr	r0, [r7, #4]
 8014442:	f002 fafe 	bl	8016a42 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8014446:	4b2f      	ldr	r3, [pc, #188]	@ (8014504 <USBD_CDC_DeInit+0xfc>)
 8014448:	781b      	ldrb	r3, [r3, #0]
 801444a:	f003 020f 	and.w	r2, r3, #15
 801444e:	6879      	ldr	r1, [r7, #4]
 8014450:	4613      	mov	r3, r2
 8014452:	009b      	lsls	r3, r3, #2
 8014454:	4413      	add	r3, r2
 8014456:	009b      	lsls	r3, r3, #2
 8014458:	440b      	add	r3, r1
 801445a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 801445e:	2200      	movs	r2, #0
 8014460:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8014462:	4b29      	ldr	r3, [pc, #164]	@ (8014508 <USBD_CDC_DeInit+0x100>)
 8014464:	781b      	ldrb	r3, [r3, #0]
 8014466:	4619      	mov	r1, r3
 8014468:	6878      	ldr	r0, [r7, #4]
 801446a:	f002 faea 	bl	8016a42 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 801446e:	4b26      	ldr	r3, [pc, #152]	@ (8014508 <USBD_CDC_DeInit+0x100>)
 8014470:	781b      	ldrb	r3, [r3, #0]
 8014472:	f003 020f 	and.w	r2, r3, #15
 8014476:	6879      	ldr	r1, [r7, #4]
 8014478:	4613      	mov	r3, r2
 801447a:	009b      	lsls	r3, r3, #2
 801447c:	4413      	add	r3, r2
 801447e:	009b      	lsls	r3, r3, #2
 8014480:	440b      	add	r3, r1
 8014482:	3324      	adds	r3, #36	@ 0x24
 8014484:	2200      	movs	r2, #0
 8014486:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8014488:	4b1f      	ldr	r3, [pc, #124]	@ (8014508 <USBD_CDC_DeInit+0x100>)
 801448a:	781b      	ldrb	r3, [r3, #0]
 801448c:	f003 020f 	and.w	r2, r3, #15
 8014490:	6879      	ldr	r1, [r7, #4]
 8014492:	4613      	mov	r3, r2
 8014494:	009b      	lsls	r3, r3, #2
 8014496:	4413      	add	r3, r2
 8014498:	009b      	lsls	r3, r3, #2
 801449a:	440b      	add	r3, r1
 801449c:	3326      	adds	r3, #38	@ 0x26
 801449e:	2200      	movs	r2, #0
 80144a0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80144a2:	687b      	ldr	r3, [r7, #4]
 80144a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80144a8:	687b      	ldr	r3, [r7, #4]
 80144aa:	32b0      	adds	r2, #176	@ 0xb0
 80144ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80144b0:	2b00      	cmp	r3, #0
 80144b2:	d01f      	beq.n	80144f4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80144b4:	687b      	ldr	r3, [r7, #4]
 80144b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80144ba:	687a      	ldr	r2, [r7, #4]
 80144bc:	33b0      	adds	r3, #176	@ 0xb0
 80144be:	009b      	lsls	r3, r3, #2
 80144c0:	4413      	add	r3, r2
 80144c2:	685b      	ldr	r3, [r3, #4]
 80144c4:	685b      	ldr	r3, [r3, #4]
 80144c6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80144c8:	687b      	ldr	r3, [r7, #4]
 80144ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80144ce:	687b      	ldr	r3, [r7, #4]
 80144d0:	32b0      	adds	r2, #176	@ 0xb0
 80144d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80144d6:	4618      	mov	r0, r3
 80144d8:	f002 fbbe 	bl	8016c58 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80144dc:	687b      	ldr	r3, [r7, #4]
 80144de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80144e2:	687b      	ldr	r3, [r7, #4]
 80144e4:	32b0      	adds	r2, #176	@ 0xb0
 80144e6:	2100      	movs	r1, #0
 80144e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80144ec:	687b      	ldr	r3, [r7, #4]
 80144ee:	2200      	movs	r2, #0
 80144f0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80144f4:	2300      	movs	r3, #0
}
 80144f6:	4618      	mov	r0, r3
 80144f8:	3708      	adds	r7, #8
 80144fa:	46bd      	mov	sp, r7
 80144fc:	bd80      	pop	{r7, pc}
 80144fe:	bf00      	nop
 8014500:	240000ab 	.word	0x240000ab
 8014504:	240000ac 	.word	0x240000ac
 8014508:	240000ad 	.word	0x240000ad

0801450c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 801450c:	b580      	push	{r7, lr}
 801450e:	b086      	sub	sp, #24
 8014510:	af00      	add	r7, sp, #0
 8014512:	6078      	str	r0, [r7, #4]
 8014514:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014516:	687b      	ldr	r3, [r7, #4]
 8014518:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801451c:	687b      	ldr	r3, [r7, #4]
 801451e:	32b0      	adds	r2, #176	@ 0xb0
 8014520:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014524:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8014526:	2300      	movs	r3, #0
 8014528:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 801452a:	2300      	movs	r3, #0
 801452c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 801452e:	2300      	movs	r3, #0
 8014530:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8014532:	693b      	ldr	r3, [r7, #16]
 8014534:	2b00      	cmp	r3, #0
 8014536:	d101      	bne.n	801453c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8014538:	2303      	movs	r3, #3
 801453a:	e0bf      	b.n	80146bc <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801453c:	683b      	ldr	r3, [r7, #0]
 801453e:	781b      	ldrb	r3, [r3, #0]
 8014540:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8014544:	2b00      	cmp	r3, #0
 8014546:	d050      	beq.n	80145ea <USBD_CDC_Setup+0xde>
 8014548:	2b20      	cmp	r3, #32
 801454a:	f040 80af 	bne.w	80146ac <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 801454e:	683b      	ldr	r3, [r7, #0]
 8014550:	88db      	ldrh	r3, [r3, #6]
 8014552:	2b00      	cmp	r3, #0
 8014554:	d03a      	beq.n	80145cc <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8014556:	683b      	ldr	r3, [r7, #0]
 8014558:	781b      	ldrb	r3, [r3, #0]
 801455a:	b25b      	sxtb	r3, r3
 801455c:	2b00      	cmp	r3, #0
 801455e:	da1b      	bge.n	8014598 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8014560:	687b      	ldr	r3, [r7, #4]
 8014562:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8014566:	687a      	ldr	r2, [r7, #4]
 8014568:	33b0      	adds	r3, #176	@ 0xb0
 801456a:	009b      	lsls	r3, r3, #2
 801456c:	4413      	add	r3, r2
 801456e:	685b      	ldr	r3, [r3, #4]
 8014570:	689b      	ldr	r3, [r3, #8]
 8014572:	683a      	ldr	r2, [r7, #0]
 8014574:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8014576:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8014578:	683a      	ldr	r2, [r7, #0]
 801457a:	88d2      	ldrh	r2, [r2, #6]
 801457c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 801457e:	683b      	ldr	r3, [r7, #0]
 8014580:	88db      	ldrh	r3, [r3, #6]
 8014582:	2b07      	cmp	r3, #7
 8014584:	bf28      	it	cs
 8014586:	2307      	movcs	r3, #7
 8014588:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 801458a:	693b      	ldr	r3, [r7, #16]
 801458c:	89fa      	ldrh	r2, [r7, #14]
 801458e:	4619      	mov	r1, r3
 8014590:	6878      	ldr	r0, [r7, #4]
 8014592:	f001 fdbd 	bl	8016110 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8014596:	e090      	b.n	80146ba <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8014598:	683b      	ldr	r3, [r7, #0]
 801459a:	785a      	ldrb	r2, [r3, #1]
 801459c:	693b      	ldr	r3, [r7, #16]
 801459e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80145a2:	683b      	ldr	r3, [r7, #0]
 80145a4:	88db      	ldrh	r3, [r3, #6]
 80145a6:	2b3f      	cmp	r3, #63	@ 0x3f
 80145a8:	d803      	bhi.n	80145b2 <USBD_CDC_Setup+0xa6>
 80145aa:	683b      	ldr	r3, [r7, #0]
 80145ac:	88db      	ldrh	r3, [r3, #6]
 80145ae:	b2da      	uxtb	r2, r3
 80145b0:	e000      	b.n	80145b4 <USBD_CDC_Setup+0xa8>
 80145b2:	2240      	movs	r2, #64	@ 0x40
 80145b4:	693b      	ldr	r3, [r7, #16]
 80145b6:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80145ba:	6939      	ldr	r1, [r7, #16]
 80145bc:	693b      	ldr	r3, [r7, #16]
 80145be:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80145c2:	461a      	mov	r2, r3
 80145c4:	6878      	ldr	r0, [r7, #4]
 80145c6:	f001 fdcf 	bl	8016168 <USBD_CtlPrepareRx>
      break;
 80145ca:	e076      	b.n	80146ba <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80145cc:	687b      	ldr	r3, [r7, #4]
 80145ce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80145d2:	687a      	ldr	r2, [r7, #4]
 80145d4:	33b0      	adds	r3, #176	@ 0xb0
 80145d6:	009b      	lsls	r3, r3, #2
 80145d8:	4413      	add	r3, r2
 80145da:	685b      	ldr	r3, [r3, #4]
 80145dc:	689b      	ldr	r3, [r3, #8]
 80145de:	683a      	ldr	r2, [r7, #0]
 80145e0:	7850      	ldrb	r0, [r2, #1]
 80145e2:	2200      	movs	r2, #0
 80145e4:	6839      	ldr	r1, [r7, #0]
 80145e6:	4798      	blx	r3
      break;
 80145e8:	e067      	b.n	80146ba <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80145ea:	683b      	ldr	r3, [r7, #0]
 80145ec:	785b      	ldrb	r3, [r3, #1]
 80145ee:	2b0b      	cmp	r3, #11
 80145f0:	d851      	bhi.n	8014696 <USBD_CDC_Setup+0x18a>
 80145f2:	a201      	add	r2, pc, #4	@ (adr r2, 80145f8 <USBD_CDC_Setup+0xec>)
 80145f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80145f8:	08014629 	.word	0x08014629
 80145fc:	080146a5 	.word	0x080146a5
 8014600:	08014697 	.word	0x08014697
 8014604:	08014697 	.word	0x08014697
 8014608:	08014697 	.word	0x08014697
 801460c:	08014697 	.word	0x08014697
 8014610:	08014697 	.word	0x08014697
 8014614:	08014697 	.word	0x08014697
 8014618:	08014697 	.word	0x08014697
 801461c:	08014697 	.word	0x08014697
 8014620:	08014653 	.word	0x08014653
 8014624:	0801467d 	.word	0x0801467d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014628:	687b      	ldr	r3, [r7, #4]
 801462a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801462e:	b2db      	uxtb	r3, r3
 8014630:	2b03      	cmp	r3, #3
 8014632:	d107      	bne.n	8014644 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8014634:	f107 030a 	add.w	r3, r7, #10
 8014638:	2202      	movs	r2, #2
 801463a:	4619      	mov	r1, r3
 801463c:	6878      	ldr	r0, [r7, #4]
 801463e:	f001 fd67 	bl	8016110 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8014642:	e032      	b.n	80146aa <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8014644:	6839      	ldr	r1, [r7, #0]
 8014646:	6878      	ldr	r0, [r7, #4]
 8014648:	f001 fce5 	bl	8016016 <USBD_CtlError>
            ret = USBD_FAIL;
 801464c:	2303      	movs	r3, #3
 801464e:	75fb      	strb	r3, [r7, #23]
          break;
 8014650:	e02b      	b.n	80146aa <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014652:	687b      	ldr	r3, [r7, #4]
 8014654:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014658:	b2db      	uxtb	r3, r3
 801465a:	2b03      	cmp	r3, #3
 801465c:	d107      	bne.n	801466e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 801465e:	f107 030d 	add.w	r3, r7, #13
 8014662:	2201      	movs	r2, #1
 8014664:	4619      	mov	r1, r3
 8014666:	6878      	ldr	r0, [r7, #4]
 8014668:	f001 fd52 	bl	8016110 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801466c:	e01d      	b.n	80146aa <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 801466e:	6839      	ldr	r1, [r7, #0]
 8014670:	6878      	ldr	r0, [r7, #4]
 8014672:	f001 fcd0 	bl	8016016 <USBD_CtlError>
            ret = USBD_FAIL;
 8014676:	2303      	movs	r3, #3
 8014678:	75fb      	strb	r3, [r7, #23]
          break;
 801467a:	e016      	b.n	80146aa <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 801467c:	687b      	ldr	r3, [r7, #4]
 801467e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014682:	b2db      	uxtb	r3, r3
 8014684:	2b03      	cmp	r3, #3
 8014686:	d00f      	beq.n	80146a8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8014688:	6839      	ldr	r1, [r7, #0]
 801468a:	6878      	ldr	r0, [r7, #4]
 801468c:	f001 fcc3 	bl	8016016 <USBD_CtlError>
            ret = USBD_FAIL;
 8014690:	2303      	movs	r3, #3
 8014692:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8014694:	e008      	b.n	80146a8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8014696:	6839      	ldr	r1, [r7, #0]
 8014698:	6878      	ldr	r0, [r7, #4]
 801469a:	f001 fcbc 	bl	8016016 <USBD_CtlError>
          ret = USBD_FAIL;
 801469e:	2303      	movs	r3, #3
 80146a0:	75fb      	strb	r3, [r7, #23]
          break;
 80146a2:	e002      	b.n	80146aa <USBD_CDC_Setup+0x19e>
          break;
 80146a4:	bf00      	nop
 80146a6:	e008      	b.n	80146ba <USBD_CDC_Setup+0x1ae>
          break;
 80146a8:	bf00      	nop
      }
      break;
 80146aa:	e006      	b.n	80146ba <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80146ac:	6839      	ldr	r1, [r7, #0]
 80146ae:	6878      	ldr	r0, [r7, #4]
 80146b0:	f001 fcb1 	bl	8016016 <USBD_CtlError>
      ret = USBD_FAIL;
 80146b4:	2303      	movs	r3, #3
 80146b6:	75fb      	strb	r3, [r7, #23]
      break;
 80146b8:	bf00      	nop
  }

  return (uint8_t)ret;
 80146ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80146bc:	4618      	mov	r0, r3
 80146be:	3718      	adds	r7, #24
 80146c0:	46bd      	mov	sp, r7
 80146c2:	bd80      	pop	{r7, pc}

080146c4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80146c4:	b580      	push	{r7, lr}
 80146c6:	b084      	sub	sp, #16
 80146c8:	af00      	add	r7, sp, #0
 80146ca:	6078      	str	r0, [r7, #4]
 80146cc:	460b      	mov	r3, r1
 80146ce:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80146d0:	687b      	ldr	r3, [r7, #4]
 80146d2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80146d6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80146d8:	687b      	ldr	r3, [r7, #4]
 80146da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80146de:	687b      	ldr	r3, [r7, #4]
 80146e0:	32b0      	adds	r2, #176	@ 0xb0
 80146e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80146e6:	2b00      	cmp	r3, #0
 80146e8:	d101      	bne.n	80146ee <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80146ea:	2303      	movs	r3, #3
 80146ec:	e065      	b.n	80147ba <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80146ee:	687b      	ldr	r3, [r7, #4]
 80146f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80146f4:	687b      	ldr	r3, [r7, #4]
 80146f6:	32b0      	adds	r2, #176	@ 0xb0
 80146f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80146fc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80146fe:	78fb      	ldrb	r3, [r7, #3]
 8014700:	f003 020f 	and.w	r2, r3, #15
 8014704:	6879      	ldr	r1, [r7, #4]
 8014706:	4613      	mov	r3, r2
 8014708:	009b      	lsls	r3, r3, #2
 801470a:	4413      	add	r3, r2
 801470c:	009b      	lsls	r3, r3, #2
 801470e:	440b      	add	r3, r1
 8014710:	3318      	adds	r3, #24
 8014712:	681b      	ldr	r3, [r3, #0]
 8014714:	2b00      	cmp	r3, #0
 8014716:	d02f      	beq.n	8014778 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8014718:	78fb      	ldrb	r3, [r7, #3]
 801471a:	f003 020f 	and.w	r2, r3, #15
 801471e:	6879      	ldr	r1, [r7, #4]
 8014720:	4613      	mov	r3, r2
 8014722:	009b      	lsls	r3, r3, #2
 8014724:	4413      	add	r3, r2
 8014726:	009b      	lsls	r3, r3, #2
 8014728:	440b      	add	r3, r1
 801472a:	3318      	adds	r3, #24
 801472c:	681a      	ldr	r2, [r3, #0]
 801472e:	78fb      	ldrb	r3, [r7, #3]
 8014730:	f003 010f 	and.w	r1, r3, #15
 8014734:	68f8      	ldr	r0, [r7, #12]
 8014736:	460b      	mov	r3, r1
 8014738:	00db      	lsls	r3, r3, #3
 801473a:	440b      	add	r3, r1
 801473c:	009b      	lsls	r3, r3, #2
 801473e:	4403      	add	r3, r0
 8014740:	331c      	adds	r3, #28
 8014742:	681b      	ldr	r3, [r3, #0]
 8014744:	fbb2 f1f3 	udiv	r1, r2, r3
 8014748:	fb01 f303 	mul.w	r3, r1, r3
 801474c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 801474e:	2b00      	cmp	r3, #0
 8014750:	d112      	bne.n	8014778 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8014752:	78fb      	ldrb	r3, [r7, #3]
 8014754:	f003 020f 	and.w	r2, r3, #15
 8014758:	6879      	ldr	r1, [r7, #4]
 801475a:	4613      	mov	r3, r2
 801475c:	009b      	lsls	r3, r3, #2
 801475e:	4413      	add	r3, r2
 8014760:	009b      	lsls	r3, r3, #2
 8014762:	440b      	add	r3, r1
 8014764:	3318      	adds	r3, #24
 8014766:	2200      	movs	r2, #0
 8014768:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801476a:	78f9      	ldrb	r1, [r7, #3]
 801476c:	2300      	movs	r3, #0
 801476e:	2200      	movs	r2, #0
 8014770:	6878      	ldr	r0, [r7, #4]
 8014772:	f002 fa0e 	bl	8016b92 <USBD_LL_Transmit>
 8014776:	e01f      	b.n	80147b8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8014778:	68bb      	ldr	r3, [r7, #8]
 801477a:	2200      	movs	r2, #0
 801477c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8014780:	687b      	ldr	r3, [r7, #4]
 8014782:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8014786:	687a      	ldr	r2, [r7, #4]
 8014788:	33b0      	adds	r3, #176	@ 0xb0
 801478a:	009b      	lsls	r3, r3, #2
 801478c:	4413      	add	r3, r2
 801478e:	685b      	ldr	r3, [r3, #4]
 8014790:	691b      	ldr	r3, [r3, #16]
 8014792:	2b00      	cmp	r3, #0
 8014794:	d010      	beq.n	80147b8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8014796:	687b      	ldr	r3, [r7, #4]
 8014798:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801479c:	687a      	ldr	r2, [r7, #4]
 801479e:	33b0      	adds	r3, #176	@ 0xb0
 80147a0:	009b      	lsls	r3, r3, #2
 80147a2:	4413      	add	r3, r2
 80147a4:	685b      	ldr	r3, [r3, #4]
 80147a6:	691b      	ldr	r3, [r3, #16]
 80147a8:	68ba      	ldr	r2, [r7, #8]
 80147aa:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80147ae:	68ba      	ldr	r2, [r7, #8]
 80147b0:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80147b4:	78fa      	ldrb	r2, [r7, #3]
 80147b6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80147b8:	2300      	movs	r3, #0
}
 80147ba:	4618      	mov	r0, r3
 80147bc:	3710      	adds	r7, #16
 80147be:	46bd      	mov	sp, r7
 80147c0:	bd80      	pop	{r7, pc}

080147c2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80147c2:	b580      	push	{r7, lr}
 80147c4:	b084      	sub	sp, #16
 80147c6:	af00      	add	r7, sp, #0
 80147c8:	6078      	str	r0, [r7, #4]
 80147ca:	460b      	mov	r3, r1
 80147cc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80147ce:	687b      	ldr	r3, [r7, #4]
 80147d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80147d4:	687b      	ldr	r3, [r7, #4]
 80147d6:	32b0      	adds	r2, #176	@ 0xb0
 80147d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80147dc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80147de:	687b      	ldr	r3, [r7, #4]
 80147e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80147e4:	687b      	ldr	r3, [r7, #4]
 80147e6:	32b0      	adds	r2, #176	@ 0xb0
 80147e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80147ec:	2b00      	cmp	r3, #0
 80147ee:	d101      	bne.n	80147f4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80147f0:	2303      	movs	r3, #3
 80147f2:	e01a      	b.n	801482a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80147f4:	78fb      	ldrb	r3, [r7, #3]
 80147f6:	4619      	mov	r1, r3
 80147f8:	6878      	ldr	r0, [r7, #4]
 80147fa:	f002 fa0c 	bl	8016c16 <USBD_LL_GetRxDataSize>
 80147fe:	4602      	mov	r2, r0
 8014800:	68fb      	ldr	r3, [r7, #12]
 8014802:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8014806:	687b      	ldr	r3, [r7, #4]
 8014808:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801480c:	687a      	ldr	r2, [r7, #4]
 801480e:	33b0      	adds	r3, #176	@ 0xb0
 8014810:	009b      	lsls	r3, r3, #2
 8014812:	4413      	add	r3, r2
 8014814:	685b      	ldr	r3, [r3, #4]
 8014816:	68db      	ldr	r3, [r3, #12]
 8014818:	68fa      	ldr	r2, [r7, #12]
 801481a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 801481e:	68fa      	ldr	r2, [r7, #12]
 8014820:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8014824:	4611      	mov	r1, r2
 8014826:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8014828:	2300      	movs	r3, #0
}
 801482a:	4618      	mov	r0, r3
 801482c:	3710      	adds	r7, #16
 801482e:	46bd      	mov	sp, r7
 8014830:	bd80      	pop	{r7, pc}

08014832 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8014832:	b580      	push	{r7, lr}
 8014834:	b084      	sub	sp, #16
 8014836:	af00      	add	r7, sp, #0
 8014838:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801483a:	687b      	ldr	r3, [r7, #4]
 801483c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014840:	687b      	ldr	r3, [r7, #4]
 8014842:	32b0      	adds	r2, #176	@ 0xb0
 8014844:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014848:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 801484a:	68fb      	ldr	r3, [r7, #12]
 801484c:	2b00      	cmp	r3, #0
 801484e:	d101      	bne.n	8014854 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8014850:	2303      	movs	r3, #3
 8014852:	e024      	b.n	801489e <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8014854:	687b      	ldr	r3, [r7, #4]
 8014856:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801485a:	687a      	ldr	r2, [r7, #4]
 801485c:	33b0      	adds	r3, #176	@ 0xb0
 801485e:	009b      	lsls	r3, r3, #2
 8014860:	4413      	add	r3, r2
 8014862:	685b      	ldr	r3, [r3, #4]
 8014864:	2b00      	cmp	r3, #0
 8014866:	d019      	beq.n	801489c <USBD_CDC_EP0_RxReady+0x6a>
 8014868:	68fb      	ldr	r3, [r7, #12]
 801486a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 801486e:	2bff      	cmp	r3, #255	@ 0xff
 8014870:	d014      	beq.n	801489c <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8014872:	687b      	ldr	r3, [r7, #4]
 8014874:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8014878:	687a      	ldr	r2, [r7, #4]
 801487a:	33b0      	adds	r3, #176	@ 0xb0
 801487c:	009b      	lsls	r3, r3, #2
 801487e:	4413      	add	r3, r2
 8014880:	685b      	ldr	r3, [r3, #4]
 8014882:	689b      	ldr	r3, [r3, #8]
 8014884:	68fa      	ldr	r2, [r7, #12]
 8014886:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 801488a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 801488c:	68fa      	ldr	r2, [r7, #12]
 801488e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8014892:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8014894:	68fb      	ldr	r3, [r7, #12]
 8014896:	22ff      	movs	r2, #255	@ 0xff
 8014898:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 801489c:	2300      	movs	r3, #0
}
 801489e:	4618      	mov	r0, r3
 80148a0:	3710      	adds	r7, #16
 80148a2:	46bd      	mov	sp, r7
 80148a4:	bd80      	pop	{r7, pc}
	...

080148a8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80148a8:	b580      	push	{r7, lr}
 80148aa:	b086      	sub	sp, #24
 80148ac:	af00      	add	r7, sp, #0
 80148ae:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80148b0:	2182      	movs	r1, #130	@ 0x82
 80148b2:	4818      	ldr	r0, [pc, #96]	@ (8014914 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80148b4:	f000 fd4f 	bl	8015356 <USBD_GetEpDesc>
 80148b8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80148ba:	2101      	movs	r1, #1
 80148bc:	4815      	ldr	r0, [pc, #84]	@ (8014914 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80148be:	f000 fd4a 	bl	8015356 <USBD_GetEpDesc>
 80148c2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80148c4:	2181      	movs	r1, #129	@ 0x81
 80148c6:	4813      	ldr	r0, [pc, #76]	@ (8014914 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80148c8:	f000 fd45 	bl	8015356 <USBD_GetEpDesc>
 80148cc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80148ce:	697b      	ldr	r3, [r7, #20]
 80148d0:	2b00      	cmp	r3, #0
 80148d2:	d002      	beq.n	80148da <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80148d4:	697b      	ldr	r3, [r7, #20]
 80148d6:	2210      	movs	r2, #16
 80148d8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80148da:	693b      	ldr	r3, [r7, #16]
 80148dc:	2b00      	cmp	r3, #0
 80148de:	d006      	beq.n	80148ee <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80148e0:	693b      	ldr	r3, [r7, #16]
 80148e2:	2200      	movs	r2, #0
 80148e4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80148e8:	711a      	strb	r2, [r3, #4]
 80148ea:	2200      	movs	r2, #0
 80148ec:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80148ee:	68fb      	ldr	r3, [r7, #12]
 80148f0:	2b00      	cmp	r3, #0
 80148f2:	d006      	beq.n	8014902 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80148f4:	68fb      	ldr	r3, [r7, #12]
 80148f6:	2200      	movs	r2, #0
 80148f8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80148fc:	711a      	strb	r2, [r3, #4]
 80148fe:	2200      	movs	r2, #0
 8014900:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8014902:	687b      	ldr	r3, [r7, #4]
 8014904:	2243      	movs	r2, #67	@ 0x43
 8014906:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8014908:	4b02      	ldr	r3, [pc, #8]	@ (8014914 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 801490a:	4618      	mov	r0, r3
 801490c:	3718      	adds	r7, #24
 801490e:	46bd      	mov	sp, r7
 8014910:	bd80      	pop	{r7, pc}
 8014912:	bf00      	nop
 8014914:	24000068 	.word	0x24000068

08014918 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8014918:	b580      	push	{r7, lr}
 801491a:	b086      	sub	sp, #24
 801491c:	af00      	add	r7, sp, #0
 801491e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8014920:	2182      	movs	r1, #130	@ 0x82
 8014922:	4818      	ldr	r0, [pc, #96]	@ (8014984 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8014924:	f000 fd17 	bl	8015356 <USBD_GetEpDesc>
 8014928:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801492a:	2101      	movs	r1, #1
 801492c:	4815      	ldr	r0, [pc, #84]	@ (8014984 <USBD_CDC_GetHSCfgDesc+0x6c>)
 801492e:	f000 fd12 	bl	8015356 <USBD_GetEpDesc>
 8014932:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8014934:	2181      	movs	r1, #129	@ 0x81
 8014936:	4813      	ldr	r0, [pc, #76]	@ (8014984 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8014938:	f000 fd0d 	bl	8015356 <USBD_GetEpDesc>
 801493c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801493e:	697b      	ldr	r3, [r7, #20]
 8014940:	2b00      	cmp	r3, #0
 8014942:	d002      	beq.n	801494a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8014944:	697b      	ldr	r3, [r7, #20]
 8014946:	2210      	movs	r2, #16
 8014948:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801494a:	693b      	ldr	r3, [r7, #16]
 801494c:	2b00      	cmp	r3, #0
 801494e:	d006      	beq.n	801495e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8014950:	693b      	ldr	r3, [r7, #16]
 8014952:	2200      	movs	r2, #0
 8014954:	711a      	strb	r2, [r3, #4]
 8014956:	2200      	movs	r2, #0
 8014958:	f042 0202 	orr.w	r2, r2, #2
 801495c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801495e:	68fb      	ldr	r3, [r7, #12]
 8014960:	2b00      	cmp	r3, #0
 8014962:	d006      	beq.n	8014972 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8014964:	68fb      	ldr	r3, [r7, #12]
 8014966:	2200      	movs	r2, #0
 8014968:	711a      	strb	r2, [r3, #4]
 801496a:	2200      	movs	r2, #0
 801496c:	f042 0202 	orr.w	r2, r2, #2
 8014970:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8014972:	687b      	ldr	r3, [r7, #4]
 8014974:	2243      	movs	r2, #67	@ 0x43
 8014976:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8014978:	4b02      	ldr	r3, [pc, #8]	@ (8014984 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 801497a:	4618      	mov	r0, r3
 801497c:	3718      	adds	r7, #24
 801497e:	46bd      	mov	sp, r7
 8014980:	bd80      	pop	{r7, pc}
 8014982:	bf00      	nop
 8014984:	24000068 	.word	0x24000068

08014988 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8014988:	b580      	push	{r7, lr}
 801498a:	b086      	sub	sp, #24
 801498c:	af00      	add	r7, sp, #0
 801498e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8014990:	2182      	movs	r1, #130	@ 0x82
 8014992:	4818      	ldr	r0, [pc, #96]	@ (80149f4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8014994:	f000 fcdf 	bl	8015356 <USBD_GetEpDesc>
 8014998:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801499a:	2101      	movs	r1, #1
 801499c:	4815      	ldr	r0, [pc, #84]	@ (80149f4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 801499e:	f000 fcda 	bl	8015356 <USBD_GetEpDesc>
 80149a2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80149a4:	2181      	movs	r1, #129	@ 0x81
 80149a6:	4813      	ldr	r0, [pc, #76]	@ (80149f4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80149a8:	f000 fcd5 	bl	8015356 <USBD_GetEpDesc>
 80149ac:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80149ae:	697b      	ldr	r3, [r7, #20]
 80149b0:	2b00      	cmp	r3, #0
 80149b2:	d002      	beq.n	80149ba <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80149b4:	697b      	ldr	r3, [r7, #20]
 80149b6:	2210      	movs	r2, #16
 80149b8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80149ba:	693b      	ldr	r3, [r7, #16]
 80149bc:	2b00      	cmp	r3, #0
 80149be:	d006      	beq.n	80149ce <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80149c0:	693b      	ldr	r3, [r7, #16]
 80149c2:	2200      	movs	r2, #0
 80149c4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80149c8:	711a      	strb	r2, [r3, #4]
 80149ca:	2200      	movs	r2, #0
 80149cc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80149ce:	68fb      	ldr	r3, [r7, #12]
 80149d0:	2b00      	cmp	r3, #0
 80149d2:	d006      	beq.n	80149e2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80149d4:	68fb      	ldr	r3, [r7, #12]
 80149d6:	2200      	movs	r2, #0
 80149d8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80149dc:	711a      	strb	r2, [r3, #4]
 80149de:	2200      	movs	r2, #0
 80149e0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80149e2:	687b      	ldr	r3, [r7, #4]
 80149e4:	2243      	movs	r2, #67	@ 0x43
 80149e6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80149e8:	4b02      	ldr	r3, [pc, #8]	@ (80149f4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80149ea:	4618      	mov	r0, r3
 80149ec:	3718      	adds	r7, #24
 80149ee:	46bd      	mov	sp, r7
 80149f0:	bd80      	pop	{r7, pc}
 80149f2:	bf00      	nop
 80149f4:	24000068 	.word	0x24000068

080149f8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80149f8:	b480      	push	{r7}
 80149fa:	b083      	sub	sp, #12
 80149fc:	af00      	add	r7, sp, #0
 80149fe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8014a00:	687b      	ldr	r3, [r7, #4]
 8014a02:	220a      	movs	r2, #10
 8014a04:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8014a06:	4b03      	ldr	r3, [pc, #12]	@ (8014a14 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8014a08:	4618      	mov	r0, r3
 8014a0a:	370c      	adds	r7, #12
 8014a0c:	46bd      	mov	sp, r7
 8014a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a12:	4770      	bx	lr
 8014a14:	24000024 	.word	0x24000024

08014a18 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8014a18:	b480      	push	{r7}
 8014a1a:	b083      	sub	sp, #12
 8014a1c:	af00      	add	r7, sp, #0
 8014a1e:	6078      	str	r0, [r7, #4]
 8014a20:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8014a22:	683b      	ldr	r3, [r7, #0]
 8014a24:	2b00      	cmp	r3, #0
 8014a26:	d101      	bne.n	8014a2c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8014a28:	2303      	movs	r3, #3
 8014a2a:	e009      	b.n	8014a40 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8014a2c:	687b      	ldr	r3, [r7, #4]
 8014a2e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8014a32:	687a      	ldr	r2, [r7, #4]
 8014a34:	33b0      	adds	r3, #176	@ 0xb0
 8014a36:	009b      	lsls	r3, r3, #2
 8014a38:	4413      	add	r3, r2
 8014a3a:	683a      	ldr	r2, [r7, #0]
 8014a3c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8014a3e:	2300      	movs	r3, #0
}
 8014a40:	4618      	mov	r0, r3
 8014a42:	370c      	adds	r7, #12
 8014a44:	46bd      	mov	sp, r7
 8014a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a4a:	4770      	bx	lr

08014a4c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8014a4c:	b480      	push	{r7}
 8014a4e:	b087      	sub	sp, #28
 8014a50:	af00      	add	r7, sp, #0
 8014a52:	60f8      	str	r0, [r7, #12]
 8014a54:	60b9      	str	r1, [r7, #8]
 8014a56:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014a58:	68fb      	ldr	r3, [r7, #12]
 8014a5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014a5e:	68fb      	ldr	r3, [r7, #12]
 8014a60:	32b0      	adds	r2, #176	@ 0xb0
 8014a62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014a66:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8014a68:	697b      	ldr	r3, [r7, #20]
 8014a6a:	2b00      	cmp	r3, #0
 8014a6c:	d101      	bne.n	8014a72 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8014a6e:	2303      	movs	r3, #3
 8014a70:	e008      	b.n	8014a84 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8014a72:	697b      	ldr	r3, [r7, #20]
 8014a74:	68ba      	ldr	r2, [r7, #8]
 8014a76:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8014a7a:	697b      	ldr	r3, [r7, #20]
 8014a7c:	687a      	ldr	r2, [r7, #4]
 8014a7e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8014a82:	2300      	movs	r3, #0
}
 8014a84:	4618      	mov	r0, r3
 8014a86:	371c      	adds	r7, #28
 8014a88:	46bd      	mov	sp, r7
 8014a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a8e:	4770      	bx	lr

08014a90 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8014a90:	b480      	push	{r7}
 8014a92:	b085      	sub	sp, #20
 8014a94:	af00      	add	r7, sp, #0
 8014a96:	6078      	str	r0, [r7, #4]
 8014a98:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014a9a:	687b      	ldr	r3, [r7, #4]
 8014a9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014aa0:	687b      	ldr	r3, [r7, #4]
 8014aa2:	32b0      	adds	r2, #176	@ 0xb0
 8014aa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014aa8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8014aaa:	68fb      	ldr	r3, [r7, #12]
 8014aac:	2b00      	cmp	r3, #0
 8014aae:	d101      	bne.n	8014ab4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8014ab0:	2303      	movs	r3, #3
 8014ab2:	e004      	b.n	8014abe <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8014ab4:	68fb      	ldr	r3, [r7, #12]
 8014ab6:	683a      	ldr	r2, [r7, #0]
 8014ab8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8014abc:	2300      	movs	r3, #0
}
 8014abe:	4618      	mov	r0, r3
 8014ac0:	3714      	adds	r7, #20
 8014ac2:	46bd      	mov	sp, r7
 8014ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ac8:	4770      	bx	lr
	...

08014acc <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8014acc:	b580      	push	{r7, lr}
 8014ace:	b084      	sub	sp, #16
 8014ad0:	af00      	add	r7, sp, #0
 8014ad2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014ad4:	687b      	ldr	r3, [r7, #4]
 8014ad6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014ada:	687b      	ldr	r3, [r7, #4]
 8014adc:	32b0      	adds	r2, #176	@ 0xb0
 8014ade:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014ae2:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8014ae4:	2301      	movs	r3, #1
 8014ae6:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8014ae8:	68bb      	ldr	r3, [r7, #8]
 8014aea:	2b00      	cmp	r3, #0
 8014aec:	d101      	bne.n	8014af2 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8014aee:	2303      	movs	r3, #3
 8014af0:	e025      	b.n	8014b3e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8014af2:	68bb      	ldr	r3, [r7, #8]
 8014af4:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8014af8:	2b00      	cmp	r3, #0
 8014afa:	d11f      	bne.n	8014b3c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8014afc:	68bb      	ldr	r3, [r7, #8]
 8014afe:	2201      	movs	r2, #1
 8014b00:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8014b04:	4b10      	ldr	r3, [pc, #64]	@ (8014b48 <USBD_CDC_TransmitPacket+0x7c>)
 8014b06:	781b      	ldrb	r3, [r3, #0]
 8014b08:	f003 020f 	and.w	r2, r3, #15
 8014b0c:	68bb      	ldr	r3, [r7, #8]
 8014b0e:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8014b12:	6878      	ldr	r0, [r7, #4]
 8014b14:	4613      	mov	r3, r2
 8014b16:	009b      	lsls	r3, r3, #2
 8014b18:	4413      	add	r3, r2
 8014b1a:	009b      	lsls	r3, r3, #2
 8014b1c:	4403      	add	r3, r0
 8014b1e:	3318      	adds	r3, #24
 8014b20:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8014b22:	4b09      	ldr	r3, [pc, #36]	@ (8014b48 <USBD_CDC_TransmitPacket+0x7c>)
 8014b24:	7819      	ldrb	r1, [r3, #0]
 8014b26:	68bb      	ldr	r3, [r7, #8]
 8014b28:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8014b2c:	68bb      	ldr	r3, [r7, #8]
 8014b2e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8014b32:	6878      	ldr	r0, [r7, #4]
 8014b34:	f002 f82d 	bl	8016b92 <USBD_LL_Transmit>

    ret = USBD_OK;
 8014b38:	2300      	movs	r3, #0
 8014b3a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8014b3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8014b3e:	4618      	mov	r0, r3
 8014b40:	3710      	adds	r7, #16
 8014b42:	46bd      	mov	sp, r7
 8014b44:	bd80      	pop	{r7, pc}
 8014b46:	bf00      	nop
 8014b48:	240000ab 	.word	0x240000ab

08014b4c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8014b4c:	b580      	push	{r7, lr}
 8014b4e:	b084      	sub	sp, #16
 8014b50:	af00      	add	r7, sp, #0
 8014b52:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014b54:	687b      	ldr	r3, [r7, #4]
 8014b56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014b5a:	687b      	ldr	r3, [r7, #4]
 8014b5c:	32b0      	adds	r2, #176	@ 0xb0
 8014b5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014b62:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8014b64:	687b      	ldr	r3, [r7, #4]
 8014b66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014b6a:	687b      	ldr	r3, [r7, #4]
 8014b6c:	32b0      	adds	r2, #176	@ 0xb0
 8014b6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014b72:	2b00      	cmp	r3, #0
 8014b74:	d101      	bne.n	8014b7a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8014b76:	2303      	movs	r3, #3
 8014b78:	e018      	b.n	8014bac <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014b7a:	687b      	ldr	r3, [r7, #4]
 8014b7c:	7c1b      	ldrb	r3, [r3, #16]
 8014b7e:	2b00      	cmp	r3, #0
 8014b80:	d10a      	bne.n	8014b98 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8014b82:	4b0c      	ldr	r3, [pc, #48]	@ (8014bb4 <USBD_CDC_ReceivePacket+0x68>)
 8014b84:	7819      	ldrb	r1, [r3, #0]
 8014b86:	68fb      	ldr	r3, [r7, #12]
 8014b88:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8014b8c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8014b90:	6878      	ldr	r0, [r7, #4]
 8014b92:	f002 f81f 	bl	8016bd4 <USBD_LL_PrepareReceive>
 8014b96:	e008      	b.n	8014baa <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8014b98:	4b06      	ldr	r3, [pc, #24]	@ (8014bb4 <USBD_CDC_ReceivePacket+0x68>)
 8014b9a:	7819      	ldrb	r1, [r3, #0]
 8014b9c:	68fb      	ldr	r3, [r7, #12]
 8014b9e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8014ba2:	2340      	movs	r3, #64	@ 0x40
 8014ba4:	6878      	ldr	r0, [r7, #4]
 8014ba6:	f002 f815 	bl	8016bd4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8014baa:	2300      	movs	r3, #0
}
 8014bac:	4618      	mov	r0, r3
 8014bae:	3710      	adds	r7, #16
 8014bb0:	46bd      	mov	sp, r7
 8014bb2:	bd80      	pop	{r7, pc}
 8014bb4:	240000ac 	.word	0x240000ac

08014bb8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8014bb8:	b580      	push	{r7, lr}
 8014bba:	b086      	sub	sp, #24
 8014bbc:	af00      	add	r7, sp, #0
 8014bbe:	60f8      	str	r0, [r7, #12]
 8014bc0:	60b9      	str	r1, [r7, #8]
 8014bc2:	4613      	mov	r3, r2
 8014bc4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8014bc6:	68fb      	ldr	r3, [r7, #12]
 8014bc8:	2b00      	cmp	r3, #0
 8014bca:	d101      	bne.n	8014bd0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8014bcc:	2303      	movs	r3, #3
 8014bce:	e01f      	b.n	8014c10 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8014bd0:	68fb      	ldr	r3, [r7, #12]
 8014bd2:	2200      	movs	r2, #0
 8014bd4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8014bd8:	68fb      	ldr	r3, [r7, #12]
 8014bda:	2200      	movs	r2, #0
 8014bdc:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8014be0:	68fb      	ldr	r3, [r7, #12]
 8014be2:	2200      	movs	r2, #0
 8014be4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8014be8:	68bb      	ldr	r3, [r7, #8]
 8014bea:	2b00      	cmp	r3, #0
 8014bec:	d003      	beq.n	8014bf6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8014bee:	68fb      	ldr	r3, [r7, #12]
 8014bf0:	68ba      	ldr	r2, [r7, #8]
 8014bf2:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8014bf6:	68fb      	ldr	r3, [r7, #12]
 8014bf8:	2201      	movs	r2, #1
 8014bfa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8014bfe:	68fb      	ldr	r3, [r7, #12]
 8014c00:	79fa      	ldrb	r2, [r7, #7]
 8014c02:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8014c04:	68f8      	ldr	r0, [r7, #12]
 8014c06:	f001 fe8b 	bl	8016920 <USBD_LL_Init>
 8014c0a:	4603      	mov	r3, r0
 8014c0c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8014c0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8014c10:	4618      	mov	r0, r3
 8014c12:	3718      	adds	r7, #24
 8014c14:	46bd      	mov	sp, r7
 8014c16:	bd80      	pop	{r7, pc}

08014c18 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8014c18:	b580      	push	{r7, lr}
 8014c1a:	b084      	sub	sp, #16
 8014c1c:	af00      	add	r7, sp, #0
 8014c1e:	6078      	str	r0, [r7, #4]
 8014c20:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8014c22:	2300      	movs	r3, #0
 8014c24:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8014c26:	683b      	ldr	r3, [r7, #0]
 8014c28:	2b00      	cmp	r3, #0
 8014c2a:	d101      	bne.n	8014c30 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8014c2c:	2303      	movs	r3, #3
 8014c2e:	e025      	b.n	8014c7c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8014c30:	687b      	ldr	r3, [r7, #4]
 8014c32:	683a      	ldr	r2, [r7, #0]
 8014c34:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8014c38:	687b      	ldr	r3, [r7, #4]
 8014c3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014c3e:	687b      	ldr	r3, [r7, #4]
 8014c40:	32ae      	adds	r2, #174	@ 0xae
 8014c42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014c46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014c48:	2b00      	cmp	r3, #0
 8014c4a:	d00f      	beq.n	8014c6c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8014c4c:	687b      	ldr	r3, [r7, #4]
 8014c4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014c52:	687b      	ldr	r3, [r7, #4]
 8014c54:	32ae      	adds	r2, #174	@ 0xae
 8014c56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014c5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014c5c:	f107 020e 	add.w	r2, r7, #14
 8014c60:	4610      	mov	r0, r2
 8014c62:	4798      	blx	r3
 8014c64:	4602      	mov	r2, r0
 8014c66:	687b      	ldr	r3, [r7, #4]
 8014c68:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8014c6c:	687b      	ldr	r3, [r7, #4]
 8014c6e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8014c72:	1c5a      	adds	r2, r3, #1
 8014c74:	687b      	ldr	r3, [r7, #4]
 8014c76:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8014c7a:	2300      	movs	r3, #0
}
 8014c7c:	4618      	mov	r0, r3
 8014c7e:	3710      	adds	r7, #16
 8014c80:	46bd      	mov	sp, r7
 8014c82:	bd80      	pop	{r7, pc}

08014c84 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8014c84:	b580      	push	{r7, lr}
 8014c86:	b082      	sub	sp, #8
 8014c88:	af00      	add	r7, sp, #0
 8014c8a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8014c8c:	6878      	ldr	r0, [r7, #4]
 8014c8e:	f001 fe97 	bl	80169c0 <USBD_LL_Start>
 8014c92:	4603      	mov	r3, r0
}
 8014c94:	4618      	mov	r0, r3
 8014c96:	3708      	adds	r7, #8
 8014c98:	46bd      	mov	sp, r7
 8014c9a:	bd80      	pop	{r7, pc}

08014c9c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8014c9c:	b480      	push	{r7}
 8014c9e:	b083      	sub	sp, #12
 8014ca0:	af00      	add	r7, sp, #0
 8014ca2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8014ca4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8014ca6:	4618      	mov	r0, r3
 8014ca8:	370c      	adds	r7, #12
 8014caa:	46bd      	mov	sp, r7
 8014cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cb0:	4770      	bx	lr

08014cb2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014cb2:	b580      	push	{r7, lr}
 8014cb4:	b084      	sub	sp, #16
 8014cb6:	af00      	add	r7, sp, #0
 8014cb8:	6078      	str	r0, [r7, #4]
 8014cba:	460b      	mov	r3, r1
 8014cbc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8014cbe:	2300      	movs	r3, #0
 8014cc0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8014cc2:	687b      	ldr	r3, [r7, #4]
 8014cc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014cc8:	2b00      	cmp	r3, #0
 8014cca:	d009      	beq.n	8014ce0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8014ccc:	687b      	ldr	r3, [r7, #4]
 8014cce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014cd2:	681b      	ldr	r3, [r3, #0]
 8014cd4:	78fa      	ldrb	r2, [r7, #3]
 8014cd6:	4611      	mov	r1, r2
 8014cd8:	6878      	ldr	r0, [r7, #4]
 8014cda:	4798      	blx	r3
 8014cdc:	4603      	mov	r3, r0
 8014cde:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8014ce0:	7bfb      	ldrb	r3, [r7, #15]
}
 8014ce2:	4618      	mov	r0, r3
 8014ce4:	3710      	adds	r7, #16
 8014ce6:	46bd      	mov	sp, r7
 8014ce8:	bd80      	pop	{r7, pc}

08014cea <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014cea:	b580      	push	{r7, lr}
 8014cec:	b084      	sub	sp, #16
 8014cee:	af00      	add	r7, sp, #0
 8014cf0:	6078      	str	r0, [r7, #4]
 8014cf2:	460b      	mov	r3, r1
 8014cf4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8014cf6:	2300      	movs	r3, #0
 8014cf8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8014cfa:	687b      	ldr	r3, [r7, #4]
 8014cfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014d00:	685b      	ldr	r3, [r3, #4]
 8014d02:	78fa      	ldrb	r2, [r7, #3]
 8014d04:	4611      	mov	r1, r2
 8014d06:	6878      	ldr	r0, [r7, #4]
 8014d08:	4798      	blx	r3
 8014d0a:	4603      	mov	r3, r0
 8014d0c:	2b00      	cmp	r3, #0
 8014d0e:	d001      	beq.n	8014d14 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8014d10:	2303      	movs	r3, #3
 8014d12:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8014d14:	7bfb      	ldrb	r3, [r7, #15]
}
 8014d16:	4618      	mov	r0, r3
 8014d18:	3710      	adds	r7, #16
 8014d1a:	46bd      	mov	sp, r7
 8014d1c:	bd80      	pop	{r7, pc}

08014d1e <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8014d1e:	b580      	push	{r7, lr}
 8014d20:	b084      	sub	sp, #16
 8014d22:	af00      	add	r7, sp, #0
 8014d24:	6078      	str	r0, [r7, #4]
 8014d26:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8014d28:	687b      	ldr	r3, [r7, #4]
 8014d2a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8014d2e:	6839      	ldr	r1, [r7, #0]
 8014d30:	4618      	mov	r0, r3
 8014d32:	f001 f936 	bl	8015fa2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8014d36:	687b      	ldr	r3, [r7, #4]
 8014d38:	2201      	movs	r2, #1
 8014d3a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8014d3e:	687b      	ldr	r3, [r7, #4]
 8014d40:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8014d44:	461a      	mov	r2, r3
 8014d46:	687b      	ldr	r3, [r7, #4]
 8014d48:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8014d4c:	687b      	ldr	r3, [r7, #4]
 8014d4e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8014d52:	f003 031f 	and.w	r3, r3, #31
 8014d56:	2b02      	cmp	r3, #2
 8014d58:	d01a      	beq.n	8014d90 <USBD_LL_SetupStage+0x72>
 8014d5a:	2b02      	cmp	r3, #2
 8014d5c:	d822      	bhi.n	8014da4 <USBD_LL_SetupStage+0x86>
 8014d5e:	2b00      	cmp	r3, #0
 8014d60:	d002      	beq.n	8014d68 <USBD_LL_SetupStage+0x4a>
 8014d62:	2b01      	cmp	r3, #1
 8014d64:	d00a      	beq.n	8014d7c <USBD_LL_SetupStage+0x5e>
 8014d66:	e01d      	b.n	8014da4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8014d68:	687b      	ldr	r3, [r7, #4]
 8014d6a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8014d6e:	4619      	mov	r1, r3
 8014d70:	6878      	ldr	r0, [r7, #4]
 8014d72:	f000 fb63 	bl	801543c <USBD_StdDevReq>
 8014d76:	4603      	mov	r3, r0
 8014d78:	73fb      	strb	r3, [r7, #15]
      break;
 8014d7a:	e020      	b.n	8014dbe <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8014d7c:	687b      	ldr	r3, [r7, #4]
 8014d7e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8014d82:	4619      	mov	r1, r3
 8014d84:	6878      	ldr	r0, [r7, #4]
 8014d86:	f000 fbcb 	bl	8015520 <USBD_StdItfReq>
 8014d8a:	4603      	mov	r3, r0
 8014d8c:	73fb      	strb	r3, [r7, #15]
      break;
 8014d8e:	e016      	b.n	8014dbe <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8014d90:	687b      	ldr	r3, [r7, #4]
 8014d92:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8014d96:	4619      	mov	r1, r3
 8014d98:	6878      	ldr	r0, [r7, #4]
 8014d9a:	f000 fc2d 	bl	80155f8 <USBD_StdEPReq>
 8014d9e:	4603      	mov	r3, r0
 8014da0:	73fb      	strb	r3, [r7, #15]
      break;
 8014da2:	e00c      	b.n	8014dbe <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8014da4:	687b      	ldr	r3, [r7, #4]
 8014da6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8014daa:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8014dae:	b2db      	uxtb	r3, r3
 8014db0:	4619      	mov	r1, r3
 8014db2:	6878      	ldr	r0, [r7, #4]
 8014db4:	f001 fe64 	bl	8016a80 <USBD_LL_StallEP>
 8014db8:	4603      	mov	r3, r0
 8014dba:	73fb      	strb	r3, [r7, #15]
      break;
 8014dbc:	bf00      	nop
  }

  return ret;
 8014dbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8014dc0:	4618      	mov	r0, r3
 8014dc2:	3710      	adds	r7, #16
 8014dc4:	46bd      	mov	sp, r7
 8014dc6:	bd80      	pop	{r7, pc}

08014dc8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8014dc8:	b580      	push	{r7, lr}
 8014dca:	b086      	sub	sp, #24
 8014dcc:	af00      	add	r7, sp, #0
 8014dce:	60f8      	str	r0, [r7, #12]
 8014dd0:	460b      	mov	r3, r1
 8014dd2:	607a      	str	r2, [r7, #4]
 8014dd4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8014dd6:	2300      	movs	r3, #0
 8014dd8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8014dda:	7afb      	ldrb	r3, [r7, #11]
 8014ddc:	2b00      	cmp	r3, #0
 8014dde:	d16e      	bne.n	8014ebe <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8014de0:	68fb      	ldr	r3, [r7, #12]
 8014de2:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8014de6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8014de8:	68fb      	ldr	r3, [r7, #12]
 8014dea:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8014dee:	2b03      	cmp	r3, #3
 8014df0:	f040 8098 	bne.w	8014f24 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8014df4:	693b      	ldr	r3, [r7, #16]
 8014df6:	689a      	ldr	r2, [r3, #8]
 8014df8:	693b      	ldr	r3, [r7, #16]
 8014dfa:	68db      	ldr	r3, [r3, #12]
 8014dfc:	429a      	cmp	r2, r3
 8014dfe:	d913      	bls.n	8014e28 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8014e00:	693b      	ldr	r3, [r7, #16]
 8014e02:	689a      	ldr	r2, [r3, #8]
 8014e04:	693b      	ldr	r3, [r7, #16]
 8014e06:	68db      	ldr	r3, [r3, #12]
 8014e08:	1ad2      	subs	r2, r2, r3
 8014e0a:	693b      	ldr	r3, [r7, #16]
 8014e0c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8014e0e:	693b      	ldr	r3, [r7, #16]
 8014e10:	68da      	ldr	r2, [r3, #12]
 8014e12:	693b      	ldr	r3, [r7, #16]
 8014e14:	689b      	ldr	r3, [r3, #8]
 8014e16:	4293      	cmp	r3, r2
 8014e18:	bf28      	it	cs
 8014e1a:	4613      	movcs	r3, r2
 8014e1c:	461a      	mov	r2, r3
 8014e1e:	6879      	ldr	r1, [r7, #4]
 8014e20:	68f8      	ldr	r0, [r7, #12]
 8014e22:	f001 f9be 	bl	80161a2 <USBD_CtlContinueRx>
 8014e26:	e07d      	b.n	8014f24 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8014e28:	68fb      	ldr	r3, [r7, #12]
 8014e2a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8014e2e:	f003 031f 	and.w	r3, r3, #31
 8014e32:	2b02      	cmp	r3, #2
 8014e34:	d014      	beq.n	8014e60 <USBD_LL_DataOutStage+0x98>
 8014e36:	2b02      	cmp	r3, #2
 8014e38:	d81d      	bhi.n	8014e76 <USBD_LL_DataOutStage+0xae>
 8014e3a:	2b00      	cmp	r3, #0
 8014e3c:	d002      	beq.n	8014e44 <USBD_LL_DataOutStage+0x7c>
 8014e3e:	2b01      	cmp	r3, #1
 8014e40:	d003      	beq.n	8014e4a <USBD_LL_DataOutStage+0x82>
 8014e42:	e018      	b.n	8014e76 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8014e44:	2300      	movs	r3, #0
 8014e46:	75bb      	strb	r3, [r7, #22]
            break;
 8014e48:	e018      	b.n	8014e7c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8014e4a:	68fb      	ldr	r3, [r7, #12]
 8014e4c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8014e50:	b2db      	uxtb	r3, r3
 8014e52:	4619      	mov	r1, r3
 8014e54:	68f8      	ldr	r0, [r7, #12]
 8014e56:	f000 fa64 	bl	8015322 <USBD_CoreFindIF>
 8014e5a:	4603      	mov	r3, r0
 8014e5c:	75bb      	strb	r3, [r7, #22]
            break;
 8014e5e:	e00d      	b.n	8014e7c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8014e60:	68fb      	ldr	r3, [r7, #12]
 8014e62:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8014e66:	b2db      	uxtb	r3, r3
 8014e68:	4619      	mov	r1, r3
 8014e6a:	68f8      	ldr	r0, [r7, #12]
 8014e6c:	f000 fa66 	bl	801533c <USBD_CoreFindEP>
 8014e70:	4603      	mov	r3, r0
 8014e72:	75bb      	strb	r3, [r7, #22]
            break;
 8014e74:	e002      	b.n	8014e7c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8014e76:	2300      	movs	r3, #0
 8014e78:	75bb      	strb	r3, [r7, #22]
            break;
 8014e7a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8014e7c:	7dbb      	ldrb	r3, [r7, #22]
 8014e7e:	2b00      	cmp	r3, #0
 8014e80:	d119      	bne.n	8014eb6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014e82:	68fb      	ldr	r3, [r7, #12]
 8014e84:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014e88:	b2db      	uxtb	r3, r3
 8014e8a:	2b03      	cmp	r3, #3
 8014e8c:	d113      	bne.n	8014eb6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8014e8e:	7dba      	ldrb	r2, [r7, #22]
 8014e90:	68fb      	ldr	r3, [r7, #12]
 8014e92:	32ae      	adds	r2, #174	@ 0xae
 8014e94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014e98:	691b      	ldr	r3, [r3, #16]
 8014e9a:	2b00      	cmp	r3, #0
 8014e9c:	d00b      	beq.n	8014eb6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8014e9e:	7dba      	ldrb	r2, [r7, #22]
 8014ea0:	68fb      	ldr	r3, [r7, #12]
 8014ea2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8014ea6:	7dba      	ldrb	r2, [r7, #22]
 8014ea8:	68fb      	ldr	r3, [r7, #12]
 8014eaa:	32ae      	adds	r2, #174	@ 0xae
 8014eac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014eb0:	691b      	ldr	r3, [r3, #16]
 8014eb2:	68f8      	ldr	r0, [r7, #12]
 8014eb4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8014eb6:	68f8      	ldr	r0, [r7, #12]
 8014eb8:	f001 f984 	bl	80161c4 <USBD_CtlSendStatus>
 8014ebc:	e032      	b.n	8014f24 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8014ebe:	7afb      	ldrb	r3, [r7, #11]
 8014ec0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014ec4:	b2db      	uxtb	r3, r3
 8014ec6:	4619      	mov	r1, r3
 8014ec8:	68f8      	ldr	r0, [r7, #12]
 8014eca:	f000 fa37 	bl	801533c <USBD_CoreFindEP>
 8014ece:	4603      	mov	r3, r0
 8014ed0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8014ed2:	7dbb      	ldrb	r3, [r7, #22]
 8014ed4:	2bff      	cmp	r3, #255	@ 0xff
 8014ed6:	d025      	beq.n	8014f24 <USBD_LL_DataOutStage+0x15c>
 8014ed8:	7dbb      	ldrb	r3, [r7, #22]
 8014eda:	2b00      	cmp	r3, #0
 8014edc:	d122      	bne.n	8014f24 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014ede:	68fb      	ldr	r3, [r7, #12]
 8014ee0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014ee4:	b2db      	uxtb	r3, r3
 8014ee6:	2b03      	cmp	r3, #3
 8014ee8:	d117      	bne.n	8014f1a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8014eea:	7dba      	ldrb	r2, [r7, #22]
 8014eec:	68fb      	ldr	r3, [r7, #12]
 8014eee:	32ae      	adds	r2, #174	@ 0xae
 8014ef0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014ef4:	699b      	ldr	r3, [r3, #24]
 8014ef6:	2b00      	cmp	r3, #0
 8014ef8:	d00f      	beq.n	8014f1a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8014efa:	7dba      	ldrb	r2, [r7, #22]
 8014efc:	68fb      	ldr	r3, [r7, #12]
 8014efe:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8014f02:	7dba      	ldrb	r2, [r7, #22]
 8014f04:	68fb      	ldr	r3, [r7, #12]
 8014f06:	32ae      	adds	r2, #174	@ 0xae
 8014f08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014f0c:	699b      	ldr	r3, [r3, #24]
 8014f0e:	7afa      	ldrb	r2, [r7, #11]
 8014f10:	4611      	mov	r1, r2
 8014f12:	68f8      	ldr	r0, [r7, #12]
 8014f14:	4798      	blx	r3
 8014f16:	4603      	mov	r3, r0
 8014f18:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8014f1a:	7dfb      	ldrb	r3, [r7, #23]
 8014f1c:	2b00      	cmp	r3, #0
 8014f1e:	d001      	beq.n	8014f24 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8014f20:	7dfb      	ldrb	r3, [r7, #23]
 8014f22:	e000      	b.n	8014f26 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8014f24:	2300      	movs	r3, #0
}
 8014f26:	4618      	mov	r0, r3
 8014f28:	3718      	adds	r7, #24
 8014f2a:	46bd      	mov	sp, r7
 8014f2c:	bd80      	pop	{r7, pc}

08014f2e <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8014f2e:	b580      	push	{r7, lr}
 8014f30:	b086      	sub	sp, #24
 8014f32:	af00      	add	r7, sp, #0
 8014f34:	60f8      	str	r0, [r7, #12]
 8014f36:	460b      	mov	r3, r1
 8014f38:	607a      	str	r2, [r7, #4]
 8014f3a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8014f3c:	7afb      	ldrb	r3, [r7, #11]
 8014f3e:	2b00      	cmp	r3, #0
 8014f40:	d16f      	bne.n	8015022 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8014f42:	68fb      	ldr	r3, [r7, #12]
 8014f44:	3314      	adds	r3, #20
 8014f46:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8014f48:	68fb      	ldr	r3, [r7, #12]
 8014f4a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8014f4e:	2b02      	cmp	r3, #2
 8014f50:	d15a      	bne.n	8015008 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8014f52:	693b      	ldr	r3, [r7, #16]
 8014f54:	689a      	ldr	r2, [r3, #8]
 8014f56:	693b      	ldr	r3, [r7, #16]
 8014f58:	68db      	ldr	r3, [r3, #12]
 8014f5a:	429a      	cmp	r2, r3
 8014f5c:	d914      	bls.n	8014f88 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8014f5e:	693b      	ldr	r3, [r7, #16]
 8014f60:	689a      	ldr	r2, [r3, #8]
 8014f62:	693b      	ldr	r3, [r7, #16]
 8014f64:	68db      	ldr	r3, [r3, #12]
 8014f66:	1ad2      	subs	r2, r2, r3
 8014f68:	693b      	ldr	r3, [r7, #16]
 8014f6a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8014f6c:	693b      	ldr	r3, [r7, #16]
 8014f6e:	689b      	ldr	r3, [r3, #8]
 8014f70:	461a      	mov	r2, r3
 8014f72:	6879      	ldr	r1, [r7, #4]
 8014f74:	68f8      	ldr	r0, [r7, #12]
 8014f76:	f001 f8e6 	bl	8016146 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8014f7a:	2300      	movs	r3, #0
 8014f7c:	2200      	movs	r2, #0
 8014f7e:	2100      	movs	r1, #0
 8014f80:	68f8      	ldr	r0, [r7, #12]
 8014f82:	f001 fe27 	bl	8016bd4 <USBD_LL_PrepareReceive>
 8014f86:	e03f      	b.n	8015008 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8014f88:	693b      	ldr	r3, [r7, #16]
 8014f8a:	68da      	ldr	r2, [r3, #12]
 8014f8c:	693b      	ldr	r3, [r7, #16]
 8014f8e:	689b      	ldr	r3, [r3, #8]
 8014f90:	429a      	cmp	r2, r3
 8014f92:	d11c      	bne.n	8014fce <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8014f94:	693b      	ldr	r3, [r7, #16]
 8014f96:	685a      	ldr	r2, [r3, #4]
 8014f98:	693b      	ldr	r3, [r7, #16]
 8014f9a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8014f9c:	429a      	cmp	r2, r3
 8014f9e:	d316      	bcc.n	8014fce <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8014fa0:	693b      	ldr	r3, [r7, #16]
 8014fa2:	685a      	ldr	r2, [r3, #4]
 8014fa4:	68fb      	ldr	r3, [r7, #12]
 8014fa6:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8014faa:	429a      	cmp	r2, r3
 8014fac:	d20f      	bcs.n	8014fce <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8014fae:	2200      	movs	r2, #0
 8014fb0:	2100      	movs	r1, #0
 8014fb2:	68f8      	ldr	r0, [r7, #12]
 8014fb4:	f001 f8c7 	bl	8016146 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8014fb8:	68fb      	ldr	r3, [r7, #12]
 8014fba:	2200      	movs	r2, #0
 8014fbc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8014fc0:	2300      	movs	r3, #0
 8014fc2:	2200      	movs	r2, #0
 8014fc4:	2100      	movs	r1, #0
 8014fc6:	68f8      	ldr	r0, [r7, #12]
 8014fc8:	f001 fe04 	bl	8016bd4 <USBD_LL_PrepareReceive>
 8014fcc:	e01c      	b.n	8015008 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014fce:	68fb      	ldr	r3, [r7, #12]
 8014fd0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014fd4:	b2db      	uxtb	r3, r3
 8014fd6:	2b03      	cmp	r3, #3
 8014fd8:	d10f      	bne.n	8014ffa <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8014fda:	68fb      	ldr	r3, [r7, #12]
 8014fdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014fe0:	68db      	ldr	r3, [r3, #12]
 8014fe2:	2b00      	cmp	r3, #0
 8014fe4:	d009      	beq.n	8014ffa <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8014fe6:	68fb      	ldr	r3, [r7, #12]
 8014fe8:	2200      	movs	r2, #0
 8014fea:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8014fee:	68fb      	ldr	r3, [r7, #12]
 8014ff0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014ff4:	68db      	ldr	r3, [r3, #12]
 8014ff6:	68f8      	ldr	r0, [r7, #12]
 8014ff8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8014ffa:	2180      	movs	r1, #128	@ 0x80
 8014ffc:	68f8      	ldr	r0, [r7, #12]
 8014ffe:	f001 fd3f 	bl	8016a80 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8015002:	68f8      	ldr	r0, [r7, #12]
 8015004:	f001 f8f1 	bl	80161ea <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8015008:	68fb      	ldr	r3, [r7, #12]
 801500a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 801500e:	2b00      	cmp	r3, #0
 8015010:	d03a      	beq.n	8015088 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8015012:	68f8      	ldr	r0, [r7, #12]
 8015014:	f7ff fe42 	bl	8014c9c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8015018:	68fb      	ldr	r3, [r7, #12]
 801501a:	2200      	movs	r2, #0
 801501c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8015020:	e032      	b.n	8015088 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8015022:	7afb      	ldrb	r3, [r7, #11]
 8015024:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8015028:	b2db      	uxtb	r3, r3
 801502a:	4619      	mov	r1, r3
 801502c:	68f8      	ldr	r0, [r7, #12]
 801502e:	f000 f985 	bl	801533c <USBD_CoreFindEP>
 8015032:	4603      	mov	r3, r0
 8015034:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015036:	7dfb      	ldrb	r3, [r7, #23]
 8015038:	2bff      	cmp	r3, #255	@ 0xff
 801503a:	d025      	beq.n	8015088 <USBD_LL_DataInStage+0x15a>
 801503c:	7dfb      	ldrb	r3, [r7, #23]
 801503e:	2b00      	cmp	r3, #0
 8015040:	d122      	bne.n	8015088 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015042:	68fb      	ldr	r3, [r7, #12]
 8015044:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015048:	b2db      	uxtb	r3, r3
 801504a:	2b03      	cmp	r3, #3
 801504c:	d11c      	bne.n	8015088 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 801504e:	7dfa      	ldrb	r2, [r7, #23]
 8015050:	68fb      	ldr	r3, [r7, #12]
 8015052:	32ae      	adds	r2, #174	@ 0xae
 8015054:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015058:	695b      	ldr	r3, [r3, #20]
 801505a:	2b00      	cmp	r3, #0
 801505c:	d014      	beq.n	8015088 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 801505e:	7dfa      	ldrb	r2, [r7, #23]
 8015060:	68fb      	ldr	r3, [r7, #12]
 8015062:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8015066:	7dfa      	ldrb	r2, [r7, #23]
 8015068:	68fb      	ldr	r3, [r7, #12]
 801506a:	32ae      	adds	r2, #174	@ 0xae
 801506c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015070:	695b      	ldr	r3, [r3, #20]
 8015072:	7afa      	ldrb	r2, [r7, #11]
 8015074:	4611      	mov	r1, r2
 8015076:	68f8      	ldr	r0, [r7, #12]
 8015078:	4798      	blx	r3
 801507a:	4603      	mov	r3, r0
 801507c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 801507e:	7dbb      	ldrb	r3, [r7, #22]
 8015080:	2b00      	cmp	r3, #0
 8015082:	d001      	beq.n	8015088 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8015084:	7dbb      	ldrb	r3, [r7, #22]
 8015086:	e000      	b.n	801508a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8015088:	2300      	movs	r3, #0
}
 801508a:	4618      	mov	r0, r3
 801508c:	3718      	adds	r7, #24
 801508e:	46bd      	mov	sp, r7
 8015090:	bd80      	pop	{r7, pc}

08015092 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8015092:	b580      	push	{r7, lr}
 8015094:	b084      	sub	sp, #16
 8015096:	af00      	add	r7, sp, #0
 8015098:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 801509a:	2300      	movs	r3, #0
 801509c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801509e:	687b      	ldr	r3, [r7, #4]
 80150a0:	2201      	movs	r2, #1
 80150a2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80150a6:	687b      	ldr	r3, [r7, #4]
 80150a8:	2200      	movs	r2, #0
 80150aa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80150ae:	687b      	ldr	r3, [r7, #4]
 80150b0:	2200      	movs	r2, #0
 80150b2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80150b4:	687b      	ldr	r3, [r7, #4]
 80150b6:	2200      	movs	r2, #0
 80150b8:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80150bc:	687b      	ldr	r3, [r7, #4]
 80150be:	2200      	movs	r2, #0
 80150c0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80150c4:	687b      	ldr	r3, [r7, #4]
 80150c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80150ca:	2b00      	cmp	r3, #0
 80150cc:	d014      	beq.n	80150f8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80150ce:	687b      	ldr	r3, [r7, #4]
 80150d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80150d4:	685b      	ldr	r3, [r3, #4]
 80150d6:	2b00      	cmp	r3, #0
 80150d8:	d00e      	beq.n	80150f8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80150da:	687b      	ldr	r3, [r7, #4]
 80150dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80150e0:	685b      	ldr	r3, [r3, #4]
 80150e2:	687a      	ldr	r2, [r7, #4]
 80150e4:	6852      	ldr	r2, [r2, #4]
 80150e6:	b2d2      	uxtb	r2, r2
 80150e8:	4611      	mov	r1, r2
 80150ea:	6878      	ldr	r0, [r7, #4]
 80150ec:	4798      	blx	r3
 80150ee:	4603      	mov	r3, r0
 80150f0:	2b00      	cmp	r3, #0
 80150f2:	d001      	beq.n	80150f8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80150f4:	2303      	movs	r3, #3
 80150f6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80150f8:	2340      	movs	r3, #64	@ 0x40
 80150fa:	2200      	movs	r2, #0
 80150fc:	2100      	movs	r1, #0
 80150fe:	6878      	ldr	r0, [r7, #4]
 8015100:	f001 fc79 	bl	80169f6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8015104:	687b      	ldr	r3, [r7, #4]
 8015106:	2201      	movs	r2, #1
 8015108:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 801510c:	687b      	ldr	r3, [r7, #4]
 801510e:	2240      	movs	r2, #64	@ 0x40
 8015110:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8015114:	2340      	movs	r3, #64	@ 0x40
 8015116:	2200      	movs	r2, #0
 8015118:	2180      	movs	r1, #128	@ 0x80
 801511a:	6878      	ldr	r0, [r7, #4]
 801511c:	f001 fc6b 	bl	80169f6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8015120:	687b      	ldr	r3, [r7, #4]
 8015122:	2201      	movs	r2, #1
 8015124:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8015126:	687b      	ldr	r3, [r7, #4]
 8015128:	2240      	movs	r2, #64	@ 0x40
 801512a:	621a      	str	r2, [r3, #32]

  return ret;
 801512c:	7bfb      	ldrb	r3, [r7, #15]
}
 801512e:	4618      	mov	r0, r3
 8015130:	3710      	adds	r7, #16
 8015132:	46bd      	mov	sp, r7
 8015134:	bd80      	pop	{r7, pc}

08015136 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8015136:	b480      	push	{r7}
 8015138:	b083      	sub	sp, #12
 801513a:	af00      	add	r7, sp, #0
 801513c:	6078      	str	r0, [r7, #4]
 801513e:	460b      	mov	r3, r1
 8015140:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8015142:	687b      	ldr	r3, [r7, #4]
 8015144:	78fa      	ldrb	r2, [r7, #3]
 8015146:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8015148:	2300      	movs	r3, #0
}
 801514a:	4618      	mov	r0, r3
 801514c:	370c      	adds	r7, #12
 801514e:	46bd      	mov	sp, r7
 8015150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015154:	4770      	bx	lr

08015156 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8015156:	b480      	push	{r7}
 8015158:	b083      	sub	sp, #12
 801515a:	af00      	add	r7, sp, #0
 801515c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 801515e:	687b      	ldr	r3, [r7, #4]
 8015160:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015164:	b2db      	uxtb	r3, r3
 8015166:	2b04      	cmp	r3, #4
 8015168:	d006      	beq.n	8015178 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 801516a:	687b      	ldr	r3, [r7, #4]
 801516c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015170:	b2da      	uxtb	r2, r3
 8015172:	687b      	ldr	r3, [r7, #4]
 8015174:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8015178:	687b      	ldr	r3, [r7, #4]
 801517a:	2204      	movs	r2, #4
 801517c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8015180:	2300      	movs	r3, #0
}
 8015182:	4618      	mov	r0, r3
 8015184:	370c      	adds	r7, #12
 8015186:	46bd      	mov	sp, r7
 8015188:	f85d 7b04 	ldr.w	r7, [sp], #4
 801518c:	4770      	bx	lr

0801518e <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801518e:	b480      	push	{r7}
 8015190:	b083      	sub	sp, #12
 8015192:	af00      	add	r7, sp, #0
 8015194:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8015196:	687b      	ldr	r3, [r7, #4]
 8015198:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801519c:	b2db      	uxtb	r3, r3
 801519e:	2b04      	cmp	r3, #4
 80151a0:	d106      	bne.n	80151b0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80151a2:	687b      	ldr	r3, [r7, #4]
 80151a4:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80151a8:	b2da      	uxtb	r2, r3
 80151aa:	687b      	ldr	r3, [r7, #4]
 80151ac:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80151b0:	2300      	movs	r3, #0
}
 80151b2:	4618      	mov	r0, r3
 80151b4:	370c      	adds	r7, #12
 80151b6:	46bd      	mov	sp, r7
 80151b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151bc:	4770      	bx	lr

080151be <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80151be:	b580      	push	{r7, lr}
 80151c0:	b082      	sub	sp, #8
 80151c2:	af00      	add	r7, sp, #0
 80151c4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80151c6:	687b      	ldr	r3, [r7, #4]
 80151c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80151cc:	b2db      	uxtb	r3, r3
 80151ce:	2b03      	cmp	r3, #3
 80151d0:	d110      	bne.n	80151f4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80151d2:	687b      	ldr	r3, [r7, #4]
 80151d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80151d8:	2b00      	cmp	r3, #0
 80151da:	d00b      	beq.n	80151f4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80151dc:	687b      	ldr	r3, [r7, #4]
 80151de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80151e2:	69db      	ldr	r3, [r3, #28]
 80151e4:	2b00      	cmp	r3, #0
 80151e6:	d005      	beq.n	80151f4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80151e8:	687b      	ldr	r3, [r7, #4]
 80151ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80151ee:	69db      	ldr	r3, [r3, #28]
 80151f0:	6878      	ldr	r0, [r7, #4]
 80151f2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80151f4:	2300      	movs	r3, #0
}
 80151f6:	4618      	mov	r0, r3
 80151f8:	3708      	adds	r7, #8
 80151fa:	46bd      	mov	sp, r7
 80151fc:	bd80      	pop	{r7, pc}

080151fe <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80151fe:	b580      	push	{r7, lr}
 8015200:	b082      	sub	sp, #8
 8015202:	af00      	add	r7, sp, #0
 8015204:	6078      	str	r0, [r7, #4]
 8015206:	460b      	mov	r3, r1
 8015208:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 801520a:	687b      	ldr	r3, [r7, #4]
 801520c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015210:	687b      	ldr	r3, [r7, #4]
 8015212:	32ae      	adds	r2, #174	@ 0xae
 8015214:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015218:	2b00      	cmp	r3, #0
 801521a:	d101      	bne.n	8015220 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 801521c:	2303      	movs	r3, #3
 801521e:	e01c      	b.n	801525a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015220:	687b      	ldr	r3, [r7, #4]
 8015222:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015226:	b2db      	uxtb	r3, r3
 8015228:	2b03      	cmp	r3, #3
 801522a:	d115      	bne.n	8015258 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 801522c:	687b      	ldr	r3, [r7, #4]
 801522e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015232:	687b      	ldr	r3, [r7, #4]
 8015234:	32ae      	adds	r2, #174	@ 0xae
 8015236:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801523a:	6a1b      	ldr	r3, [r3, #32]
 801523c:	2b00      	cmp	r3, #0
 801523e:	d00b      	beq.n	8015258 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8015240:	687b      	ldr	r3, [r7, #4]
 8015242:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015246:	687b      	ldr	r3, [r7, #4]
 8015248:	32ae      	adds	r2, #174	@ 0xae
 801524a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801524e:	6a1b      	ldr	r3, [r3, #32]
 8015250:	78fa      	ldrb	r2, [r7, #3]
 8015252:	4611      	mov	r1, r2
 8015254:	6878      	ldr	r0, [r7, #4]
 8015256:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8015258:	2300      	movs	r3, #0
}
 801525a:	4618      	mov	r0, r3
 801525c:	3708      	adds	r7, #8
 801525e:	46bd      	mov	sp, r7
 8015260:	bd80      	pop	{r7, pc}

08015262 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8015262:	b580      	push	{r7, lr}
 8015264:	b082      	sub	sp, #8
 8015266:	af00      	add	r7, sp, #0
 8015268:	6078      	str	r0, [r7, #4]
 801526a:	460b      	mov	r3, r1
 801526c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 801526e:	687b      	ldr	r3, [r7, #4]
 8015270:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015274:	687b      	ldr	r3, [r7, #4]
 8015276:	32ae      	adds	r2, #174	@ 0xae
 8015278:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801527c:	2b00      	cmp	r3, #0
 801527e:	d101      	bne.n	8015284 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8015280:	2303      	movs	r3, #3
 8015282:	e01c      	b.n	80152be <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015284:	687b      	ldr	r3, [r7, #4]
 8015286:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801528a:	b2db      	uxtb	r3, r3
 801528c:	2b03      	cmp	r3, #3
 801528e:	d115      	bne.n	80152bc <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8015290:	687b      	ldr	r3, [r7, #4]
 8015292:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015296:	687b      	ldr	r3, [r7, #4]
 8015298:	32ae      	adds	r2, #174	@ 0xae
 801529a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801529e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80152a0:	2b00      	cmp	r3, #0
 80152a2:	d00b      	beq.n	80152bc <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80152a4:	687b      	ldr	r3, [r7, #4]
 80152a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80152aa:	687b      	ldr	r3, [r7, #4]
 80152ac:	32ae      	adds	r2, #174	@ 0xae
 80152ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80152b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80152b4:	78fa      	ldrb	r2, [r7, #3]
 80152b6:	4611      	mov	r1, r2
 80152b8:	6878      	ldr	r0, [r7, #4]
 80152ba:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80152bc:	2300      	movs	r3, #0
}
 80152be:	4618      	mov	r0, r3
 80152c0:	3708      	adds	r7, #8
 80152c2:	46bd      	mov	sp, r7
 80152c4:	bd80      	pop	{r7, pc}

080152c6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80152c6:	b480      	push	{r7}
 80152c8:	b083      	sub	sp, #12
 80152ca:	af00      	add	r7, sp, #0
 80152cc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80152ce:	2300      	movs	r3, #0
}
 80152d0:	4618      	mov	r0, r3
 80152d2:	370c      	adds	r7, #12
 80152d4:	46bd      	mov	sp, r7
 80152d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152da:	4770      	bx	lr

080152dc <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80152dc:	b580      	push	{r7, lr}
 80152de:	b084      	sub	sp, #16
 80152e0:	af00      	add	r7, sp, #0
 80152e2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80152e4:	2300      	movs	r3, #0
 80152e6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80152e8:	687b      	ldr	r3, [r7, #4]
 80152ea:	2201      	movs	r2, #1
 80152ec:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80152f0:	687b      	ldr	r3, [r7, #4]
 80152f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80152f6:	2b00      	cmp	r3, #0
 80152f8:	d00e      	beq.n	8015318 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80152fa:	687b      	ldr	r3, [r7, #4]
 80152fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8015300:	685b      	ldr	r3, [r3, #4]
 8015302:	687a      	ldr	r2, [r7, #4]
 8015304:	6852      	ldr	r2, [r2, #4]
 8015306:	b2d2      	uxtb	r2, r2
 8015308:	4611      	mov	r1, r2
 801530a:	6878      	ldr	r0, [r7, #4]
 801530c:	4798      	blx	r3
 801530e:	4603      	mov	r3, r0
 8015310:	2b00      	cmp	r3, #0
 8015312:	d001      	beq.n	8015318 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8015314:	2303      	movs	r3, #3
 8015316:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8015318:	7bfb      	ldrb	r3, [r7, #15]
}
 801531a:	4618      	mov	r0, r3
 801531c:	3710      	adds	r7, #16
 801531e:	46bd      	mov	sp, r7
 8015320:	bd80      	pop	{r7, pc}

08015322 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8015322:	b480      	push	{r7}
 8015324:	b083      	sub	sp, #12
 8015326:	af00      	add	r7, sp, #0
 8015328:	6078      	str	r0, [r7, #4]
 801532a:	460b      	mov	r3, r1
 801532c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 801532e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8015330:	4618      	mov	r0, r3
 8015332:	370c      	adds	r7, #12
 8015334:	46bd      	mov	sp, r7
 8015336:	f85d 7b04 	ldr.w	r7, [sp], #4
 801533a:	4770      	bx	lr

0801533c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 801533c:	b480      	push	{r7}
 801533e:	b083      	sub	sp, #12
 8015340:	af00      	add	r7, sp, #0
 8015342:	6078      	str	r0, [r7, #4]
 8015344:	460b      	mov	r3, r1
 8015346:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8015348:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 801534a:	4618      	mov	r0, r3
 801534c:	370c      	adds	r7, #12
 801534e:	46bd      	mov	sp, r7
 8015350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015354:	4770      	bx	lr

08015356 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8015356:	b580      	push	{r7, lr}
 8015358:	b086      	sub	sp, #24
 801535a:	af00      	add	r7, sp, #0
 801535c:	6078      	str	r0, [r7, #4]
 801535e:	460b      	mov	r3, r1
 8015360:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8015362:	687b      	ldr	r3, [r7, #4]
 8015364:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8015366:	687b      	ldr	r3, [r7, #4]
 8015368:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 801536a:	2300      	movs	r3, #0
 801536c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 801536e:	68fb      	ldr	r3, [r7, #12]
 8015370:	885b      	ldrh	r3, [r3, #2]
 8015372:	b29b      	uxth	r3, r3
 8015374:	68fa      	ldr	r2, [r7, #12]
 8015376:	7812      	ldrb	r2, [r2, #0]
 8015378:	4293      	cmp	r3, r2
 801537a:	d91f      	bls.n	80153bc <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 801537c:	68fb      	ldr	r3, [r7, #12]
 801537e:	781b      	ldrb	r3, [r3, #0]
 8015380:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8015382:	e013      	b.n	80153ac <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8015384:	f107 030a 	add.w	r3, r7, #10
 8015388:	4619      	mov	r1, r3
 801538a:	6978      	ldr	r0, [r7, #20]
 801538c:	f000 f81b 	bl	80153c6 <USBD_GetNextDesc>
 8015390:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8015392:	697b      	ldr	r3, [r7, #20]
 8015394:	785b      	ldrb	r3, [r3, #1]
 8015396:	2b05      	cmp	r3, #5
 8015398:	d108      	bne.n	80153ac <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 801539a:	697b      	ldr	r3, [r7, #20]
 801539c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 801539e:	693b      	ldr	r3, [r7, #16]
 80153a0:	789b      	ldrb	r3, [r3, #2]
 80153a2:	78fa      	ldrb	r2, [r7, #3]
 80153a4:	429a      	cmp	r2, r3
 80153a6:	d008      	beq.n	80153ba <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80153a8:	2300      	movs	r3, #0
 80153aa:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80153ac:	68fb      	ldr	r3, [r7, #12]
 80153ae:	885b      	ldrh	r3, [r3, #2]
 80153b0:	b29a      	uxth	r2, r3
 80153b2:	897b      	ldrh	r3, [r7, #10]
 80153b4:	429a      	cmp	r2, r3
 80153b6:	d8e5      	bhi.n	8015384 <USBD_GetEpDesc+0x2e>
 80153b8:	e000      	b.n	80153bc <USBD_GetEpDesc+0x66>
          break;
 80153ba:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80153bc:	693b      	ldr	r3, [r7, #16]
}
 80153be:	4618      	mov	r0, r3
 80153c0:	3718      	adds	r7, #24
 80153c2:	46bd      	mov	sp, r7
 80153c4:	bd80      	pop	{r7, pc}

080153c6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80153c6:	b480      	push	{r7}
 80153c8:	b085      	sub	sp, #20
 80153ca:	af00      	add	r7, sp, #0
 80153cc:	6078      	str	r0, [r7, #4]
 80153ce:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80153d0:	687b      	ldr	r3, [r7, #4]
 80153d2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80153d4:	683b      	ldr	r3, [r7, #0]
 80153d6:	881b      	ldrh	r3, [r3, #0]
 80153d8:	68fa      	ldr	r2, [r7, #12]
 80153da:	7812      	ldrb	r2, [r2, #0]
 80153dc:	4413      	add	r3, r2
 80153de:	b29a      	uxth	r2, r3
 80153e0:	683b      	ldr	r3, [r7, #0]
 80153e2:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80153e4:	68fb      	ldr	r3, [r7, #12]
 80153e6:	781b      	ldrb	r3, [r3, #0]
 80153e8:	461a      	mov	r2, r3
 80153ea:	687b      	ldr	r3, [r7, #4]
 80153ec:	4413      	add	r3, r2
 80153ee:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80153f0:	68fb      	ldr	r3, [r7, #12]
}
 80153f2:	4618      	mov	r0, r3
 80153f4:	3714      	adds	r7, #20
 80153f6:	46bd      	mov	sp, r7
 80153f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153fc:	4770      	bx	lr

080153fe <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80153fe:	b480      	push	{r7}
 8015400:	b087      	sub	sp, #28
 8015402:	af00      	add	r7, sp, #0
 8015404:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8015406:	687b      	ldr	r3, [r7, #4]
 8015408:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 801540a:	697b      	ldr	r3, [r7, #20]
 801540c:	781b      	ldrb	r3, [r3, #0]
 801540e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8015410:	697b      	ldr	r3, [r7, #20]
 8015412:	3301      	adds	r3, #1
 8015414:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8015416:	697b      	ldr	r3, [r7, #20]
 8015418:	781b      	ldrb	r3, [r3, #0]
 801541a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 801541c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8015420:	021b      	lsls	r3, r3, #8
 8015422:	b21a      	sxth	r2, r3
 8015424:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8015428:	4313      	orrs	r3, r2
 801542a:	b21b      	sxth	r3, r3
 801542c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 801542e:	89fb      	ldrh	r3, [r7, #14]
}
 8015430:	4618      	mov	r0, r3
 8015432:	371c      	adds	r7, #28
 8015434:	46bd      	mov	sp, r7
 8015436:	f85d 7b04 	ldr.w	r7, [sp], #4
 801543a:	4770      	bx	lr

0801543c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801543c:	b580      	push	{r7, lr}
 801543e:	b084      	sub	sp, #16
 8015440:	af00      	add	r7, sp, #0
 8015442:	6078      	str	r0, [r7, #4]
 8015444:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8015446:	2300      	movs	r3, #0
 8015448:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801544a:	683b      	ldr	r3, [r7, #0]
 801544c:	781b      	ldrb	r3, [r3, #0]
 801544e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8015452:	2b40      	cmp	r3, #64	@ 0x40
 8015454:	d005      	beq.n	8015462 <USBD_StdDevReq+0x26>
 8015456:	2b40      	cmp	r3, #64	@ 0x40
 8015458:	d857      	bhi.n	801550a <USBD_StdDevReq+0xce>
 801545a:	2b00      	cmp	r3, #0
 801545c:	d00f      	beq.n	801547e <USBD_StdDevReq+0x42>
 801545e:	2b20      	cmp	r3, #32
 8015460:	d153      	bne.n	801550a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8015462:	687b      	ldr	r3, [r7, #4]
 8015464:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015468:	687b      	ldr	r3, [r7, #4]
 801546a:	32ae      	adds	r2, #174	@ 0xae
 801546c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015470:	689b      	ldr	r3, [r3, #8]
 8015472:	6839      	ldr	r1, [r7, #0]
 8015474:	6878      	ldr	r0, [r7, #4]
 8015476:	4798      	blx	r3
 8015478:	4603      	mov	r3, r0
 801547a:	73fb      	strb	r3, [r7, #15]
      break;
 801547c:	e04a      	b.n	8015514 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801547e:	683b      	ldr	r3, [r7, #0]
 8015480:	785b      	ldrb	r3, [r3, #1]
 8015482:	2b09      	cmp	r3, #9
 8015484:	d83b      	bhi.n	80154fe <USBD_StdDevReq+0xc2>
 8015486:	a201      	add	r2, pc, #4	@ (adr r2, 801548c <USBD_StdDevReq+0x50>)
 8015488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801548c:	080154e1 	.word	0x080154e1
 8015490:	080154f5 	.word	0x080154f5
 8015494:	080154ff 	.word	0x080154ff
 8015498:	080154eb 	.word	0x080154eb
 801549c:	080154ff 	.word	0x080154ff
 80154a0:	080154bf 	.word	0x080154bf
 80154a4:	080154b5 	.word	0x080154b5
 80154a8:	080154ff 	.word	0x080154ff
 80154ac:	080154d7 	.word	0x080154d7
 80154b0:	080154c9 	.word	0x080154c9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80154b4:	6839      	ldr	r1, [r7, #0]
 80154b6:	6878      	ldr	r0, [r7, #4]
 80154b8:	f000 fa3c 	bl	8015934 <USBD_GetDescriptor>
          break;
 80154bc:	e024      	b.n	8015508 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80154be:	6839      	ldr	r1, [r7, #0]
 80154c0:	6878      	ldr	r0, [r7, #4]
 80154c2:	f000 fbcb 	bl	8015c5c <USBD_SetAddress>
          break;
 80154c6:	e01f      	b.n	8015508 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80154c8:	6839      	ldr	r1, [r7, #0]
 80154ca:	6878      	ldr	r0, [r7, #4]
 80154cc:	f000 fc0a 	bl	8015ce4 <USBD_SetConfig>
 80154d0:	4603      	mov	r3, r0
 80154d2:	73fb      	strb	r3, [r7, #15]
          break;
 80154d4:	e018      	b.n	8015508 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80154d6:	6839      	ldr	r1, [r7, #0]
 80154d8:	6878      	ldr	r0, [r7, #4]
 80154da:	f000 fcad 	bl	8015e38 <USBD_GetConfig>
          break;
 80154de:	e013      	b.n	8015508 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80154e0:	6839      	ldr	r1, [r7, #0]
 80154e2:	6878      	ldr	r0, [r7, #4]
 80154e4:	f000 fcde 	bl	8015ea4 <USBD_GetStatus>
          break;
 80154e8:	e00e      	b.n	8015508 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80154ea:	6839      	ldr	r1, [r7, #0]
 80154ec:	6878      	ldr	r0, [r7, #4]
 80154ee:	f000 fd0d 	bl	8015f0c <USBD_SetFeature>
          break;
 80154f2:	e009      	b.n	8015508 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80154f4:	6839      	ldr	r1, [r7, #0]
 80154f6:	6878      	ldr	r0, [r7, #4]
 80154f8:	f000 fd31 	bl	8015f5e <USBD_ClrFeature>
          break;
 80154fc:	e004      	b.n	8015508 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80154fe:	6839      	ldr	r1, [r7, #0]
 8015500:	6878      	ldr	r0, [r7, #4]
 8015502:	f000 fd88 	bl	8016016 <USBD_CtlError>
          break;
 8015506:	bf00      	nop
      }
      break;
 8015508:	e004      	b.n	8015514 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 801550a:	6839      	ldr	r1, [r7, #0]
 801550c:	6878      	ldr	r0, [r7, #4]
 801550e:	f000 fd82 	bl	8016016 <USBD_CtlError>
      break;
 8015512:	bf00      	nop
  }

  return ret;
 8015514:	7bfb      	ldrb	r3, [r7, #15]
}
 8015516:	4618      	mov	r0, r3
 8015518:	3710      	adds	r7, #16
 801551a:	46bd      	mov	sp, r7
 801551c:	bd80      	pop	{r7, pc}
 801551e:	bf00      	nop

08015520 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015520:	b580      	push	{r7, lr}
 8015522:	b084      	sub	sp, #16
 8015524:	af00      	add	r7, sp, #0
 8015526:	6078      	str	r0, [r7, #4]
 8015528:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801552a:	2300      	movs	r3, #0
 801552c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801552e:	683b      	ldr	r3, [r7, #0]
 8015530:	781b      	ldrb	r3, [r3, #0]
 8015532:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8015536:	2b40      	cmp	r3, #64	@ 0x40
 8015538:	d005      	beq.n	8015546 <USBD_StdItfReq+0x26>
 801553a:	2b40      	cmp	r3, #64	@ 0x40
 801553c:	d852      	bhi.n	80155e4 <USBD_StdItfReq+0xc4>
 801553e:	2b00      	cmp	r3, #0
 8015540:	d001      	beq.n	8015546 <USBD_StdItfReq+0x26>
 8015542:	2b20      	cmp	r3, #32
 8015544:	d14e      	bne.n	80155e4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8015546:	687b      	ldr	r3, [r7, #4]
 8015548:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801554c:	b2db      	uxtb	r3, r3
 801554e:	3b01      	subs	r3, #1
 8015550:	2b02      	cmp	r3, #2
 8015552:	d840      	bhi.n	80155d6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8015554:	683b      	ldr	r3, [r7, #0]
 8015556:	889b      	ldrh	r3, [r3, #4]
 8015558:	b2db      	uxtb	r3, r3
 801555a:	2b01      	cmp	r3, #1
 801555c:	d836      	bhi.n	80155cc <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 801555e:	683b      	ldr	r3, [r7, #0]
 8015560:	889b      	ldrh	r3, [r3, #4]
 8015562:	b2db      	uxtb	r3, r3
 8015564:	4619      	mov	r1, r3
 8015566:	6878      	ldr	r0, [r7, #4]
 8015568:	f7ff fedb 	bl	8015322 <USBD_CoreFindIF>
 801556c:	4603      	mov	r3, r0
 801556e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015570:	7bbb      	ldrb	r3, [r7, #14]
 8015572:	2bff      	cmp	r3, #255	@ 0xff
 8015574:	d01d      	beq.n	80155b2 <USBD_StdItfReq+0x92>
 8015576:	7bbb      	ldrb	r3, [r7, #14]
 8015578:	2b00      	cmp	r3, #0
 801557a:	d11a      	bne.n	80155b2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 801557c:	7bba      	ldrb	r2, [r7, #14]
 801557e:	687b      	ldr	r3, [r7, #4]
 8015580:	32ae      	adds	r2, #174	@ 0xae
 8015582:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015586:	689b      	ldr	r3, [r3, #8]
 8015588:	2b00      	cmp	r3, #0
 801558a:	d00f      	beq.n	80155ac <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 801558c:	7bba      	ldrb	r2, [r7, #14]
 801558e:	687b      	ldr	r3, [r7, #4]
 8015590:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8015594:	7bba      	ldrb	r2, [r7, #14]
 8015596:	687b      	ldr	r3, [r7, #4]
 8015598:	32ae      	adds	r2, #174	@ 0xae
 801559a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801559e:	689b      	ldr	r3, [r3, #8]
 80155a0:	6839      	ldr	r1, [r7, #0]
 80155a2:	6878      	ldr	r0, [r7, #4]
 80155a4:	4798      	blx	r3
 80155a6:	4603      	mov	r3, r0
 80155a8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80155aa:	e004      	b.n	80155b6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80155ac:	2303      	movs	r3, #3
 80155ae:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80155b0:	e001      	b.n	80155b6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80155b2:	2303      	movs	r3, #3
 80155b4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80155b6:	683b      	ldr	r3, [r7, #0]
 80155b8:	88db      	ldrh	r3, [r3, #6]
 80155ba:	2b00      	cmp	r3, #0
 80155bc:	d110      	bne.n	80155e0 <USBD_StdItfReq+0xc0>
 80155be:	7bfb      	ldrb	r3, [r7, #15]
 80155c0:	2b00      	cmp	r3, #0
 80155c2:	d10d      	bne.n	80155e0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80155c4:	6878      	ldr	r0, [r7, #4]
 80155c6:	f000 fdfd 	bl	80161c4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80155ca:	e009      	b.n	80155e0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80155cc:	6839      	ldr	r1, [r7, #0]
 80155ce:	6878      	ldr	r0, [r7, #4]
 80155d0:	f000 fd21 	bl	8016016 <USBD_CtlError>
          break;
 80155d4:	e004      	b.n	80155e0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80155d6:	6839      	ldr	r1, [r7, #0]
 80155d8:	6878      	ldr	r0, [r7, #4]
 80155da:	f000 fd1c 	bl	8016016 <USBD_CtlError>
          break;
 80155de:	e000      	b.n	80155e2 <USBD_StdItfReq+0xc2>
          break;
 80155e0:	bf00      	nop
      }
      break;
 80155e2:	e004      	b.n	80155ee <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80155e4:	6839      	ldr	r1, [r7, #0]
 80155e6:	6878      	ldr	r0, [r7, #4]
 80155e8:	f000 fd15 	bl	8016016 <USBD_CtlError>
      break;
 80155ec:	bf00      	nop
  }

  return ret;
 80155ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80155f0:	4618      	mov	r0, r3
 80155f2:	3710      	adds	r7, #16
 80155f4:	46bd      	mov	sp, r7
 80155f6:	bd80      	pop	{r7, pc}

080155f8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80155f8:	b580      	push	{r7, lr}
 80155fa:	b084      	sub	sp, #16
 80155fc:	af00      	add	r7, sp, #0
 80155fe:	6078      	str	r0, [r7, #4]
 8015600:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8015602:	2300      	movs	r3, #0
 8015604:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8015606:	683b      	ldr	r3, [r7, #0]
 8015608:	889b      	ldrh	r3, [r3, #4]
 801560a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801560c:	683b      	ldr	r3, [r7, #0]
 801560e:	781b      	ldrb	r3, [r3, #0]
 8015610:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8015614:	2b40      	cmp	r3, #64	@ 0x40
 8015616:	d007      	beq.n	8015628 <USBD_StdEPReq+0x30>
 8015618:	2b40      	cmp	r3, #64	@ 0x40
 801561a:	f200 817f 	bhi.w	801591c <USBD_StdEPReq+0x324>
 801561e:	2b00      	cmp	r3, #0
 8015620:	d02a      	beq.n	8015678 <USBD_StdEPReq+0x80>
 8015622:	2b20      	cmp	r3, #32
 8015624:	f040 817a 	bne.w	801591c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8015628:	7bbb      	ldrb	r3, [r7, #14]
 801562a:	4619      	mov	r1, r3
 801562c:	6878      	ldr	r0, [r7, #4]
 801562e:	f7ff fe85 	bl	801533c <USBD_CoreFindEP>
 8015632:	4603      	mov	r3, r0
 8015634:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015636:	7b7b      	ldrb	r3, [r7, #13]
 8015638:	2bff      	cmp	r3, #255	@ 0xff
 801563a:	f000 8174 	beq.w	8015926 <USBD_StdEPReq+0x32e>
 801563e:	7b7b      	ldrb	r3, [r7, #13]
 8015640:	2b00      	cmp	r3, #0
 8015642:	f040 8170 	bne.w	8015926 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8015646:	7b7a      	ldrb	r2, [r7, #13]
 8015648:	687b      	ldr	r3, [r7, #4]
 801564a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 801564e:	7b7a      	ldrb	r2, [r7, #13]
 8015650:	687b      	ldr	r3, [r7, #4]
 8015652:	32ae      	adds	r2, #174	@ 0xae
 8015654:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015658:	689b      	ldr	r3, [r3, #8]
 801565a:	2b00      	cmp	r3, #0
 801565c:	f000 8163 	beq.w	8015926 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8015660:	7b7a      	ldrb	r2, [r7, #13]
 8015662:	687b      	ldr	r3, [r7, #4]
 8015664:	32ae      	adds	r2, #174	@ 0xae
 8015666:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801566a:	689b      	ldr	r3, [r3, #8]
 801566c:	6839      	ldr	r1, [r7, #0]
 801566e:	6878      	ldr	r0, [r7, #4]
 8015670:	4798      	blx	r3
 8015672:	4603      	mov	r3, r0
 8015674:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8015676:	e156      	b.n	8015926 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8015678:	683b      	ldr	r3, [r7, #0]
 801567a:	785b      	ldrb	r3, [r3, #1]
 801567c:	2b03      	cmp	r3, #3
 801567e:	d008      	beq.n	8015692 <USBD_StdEPReq+0x9a>
 8015680:	2b03      	cmp	r3, #3
 8015682:	f300 8145 	bgt.w	8015910 <USBD_StdEPReq+0x318>
 8015686:	2b00      	cmp	r3, #0
 8015688:	f000 809b 	beq.w	80157c2 <USBD_StdEPReq+0x1ca>
 801568c:	2b01      	cmp	r3, #1
 801568e:	d03c      	beq.n	801570a <USBD_StdEPReq+0x112>
 8015690:	e13e      	b.n	8015910 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8015692:	687b      	ldr	r3, [r7, #4]
 8015694:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015698:	b2db      	uxtb	r3, r3
 801569a:	2b02      	cmp	r3, #2
 801569c:	d002      	beq.n	80156a4 <USBD_StdEPReq+0xac>
 801569e:	2b03      	cmp	r3, #3
 80156a0:	d016      	beq.n	80156d0 <USBD_StdEPReq+0xd8>
 80156a2:	e02c      	b.n	80156fe <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80156a4:	7bbb      	ldrb	r3, [r7, #14]
 80156a6:	2b00      	cmp	r3, #0
 80156a8:	d00d      	beq.n	80156c6 <USBD_StdEPReq+0xce>
 80156aa:	7bbb      	ldrb	r3, [r7, #14]
 80156ac:	2b80      	cmp	r3, #128	@ 0x80
 80156ae:	d00a      	beq.n	80156c6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80156b0:	7bbb      	ldrb	r3, [r7, #14]
 80156b2:	4619      	mov	r1, r3
 80156b4:	6878      	ldr	r0, [r7, #4]
 80156b6:	f001 f9e3 	bl	8016a80 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80156ba:	2180      	movs	r1, #128	@ 0x80
 80156bc:	6878      	ldr	r0, [r7, #4]
 80156be:	f001 f9df 	bl	8016a80 <USBD_LL_StallEP>
 80156c2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80156c4:	e020      	b.n	8015708 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80156c6:	6839      	ldr	r1, [r7, #0]
 80156c8:	6878      	ldr	r0, [r7, #4]
 80156ca:	f000 fca4 	bl	8016016 <USBD_CtlError>
              break;
 80156ce:	e01b      	b.n	8015708 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80156d0:	683b      	ldr	r3, [r7, #0]
 80156d2:	885b      	ldrh	r3, [r3, #2]
 80156d4:	2b00      	cmp	r3, #0
 80156d6:	d10e      	bne.n	80156f6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80156d8:	7bbb      	ldrb	r3, [r7, #14]
 80156da:	2b00      	cmp	r3, #0
 80156dc:	d00b      	beq.n	80156f6 <USBD_StdEPReq+0xfe>
 80156de:	7bbb      	ldrb	r3, [r7, #14]
 80156e0:	2b80      	cmp	r3, #128	@ 0x80
 80156e2:	d008      	beq.n	80156f6 <USBD_StdEPReq+0xfe>
 80156e4:	683b      	ldr	r3, [r7, #0]
 80156e6:	88db      	ldrh	r3, [r3, #6]
 80156e8:	2b00      	cmp	r3, #0
 80156ea:	d104      	bne.n	80156f6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80156ec:	7bbb      	ldrb	r3, [r7, #14]
 80156ee:	4619      	mov	r1, r3
 80156f0:	6878      	ldr	r0, [r7, #4]
 80156f2:	f001 f9c5 	bl	8016a80 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80156f6:	6878      	ldr	r0, [r7, #4]
 80156f8:	f000 fd64 	bl	80161c4 <USBD_CtlSendStatus>

              break;
 80156fc:	e004      	b.n	8015708 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80156fe:	6839      	ldr	r1, [r7, #0]
 8015700:	6878      	ldr	r0, [r7, #4]
 8015702:	f000 fc88 	bl	8016016 <USBD_CtlError>
              break;
 8015706:	bf00      	nop
          }
          break;
 8015708:	e107      	b.n	801591a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801570a:	687b      	ldr	r3, [r7, #4]
 801570c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015710:	b2db      	uxtb	r3, r3
 8015712:	2b02      	cmp	r3, #2
 8015714:	d002      	beq.n	801571c <USBD_StdEPReq+0x124>
 8015716:	2b03      	cmp	r3, #3
 8015718:	d016      	beq.n	8015748 <USBD_StdEPReq+0x150>
 801571a:	e04b      	b.n	80157b4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801571c:	7bbb      	ldrb	r3, [r7, #14]
 801571e:	2b00      	cmp	r3, #0
 8015720:	d00d      	beq.n	801573e <USBD_StdEPReq+0x146>
 8015722:	7bbb      	ldrb	r3, [r7, #14]
 8015724:	2b80      	cmp	r3, #128	@ 0x80
 8015726:	d00a      	beq.n	801573e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8015728:	7bbb      	ldrb	r3, [r7, #14]
 801572a:	4619      	mov	r1, r3
 801572c:	6878      	ldr	r0, [r7, #4]
 801572e:	f001 f9a7 	bl	8016a80 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8015732:	2180      	movs	r1, #128	@ 0x80
 8015734:	6878      	ldr	r0, [r7, #4]
 8015736:	f001 f9a3 	bl	8016a80 <USBD_LL_StallEP>
 801573a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801573c:	e040      	b.n	80157c0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 801573e:	6839      	ldr	r1, [r7, #0]
 8015740:	6878      	ldr	r0, [r7, #4]
 8015742:	f000 fc68 	bl	8016016 <USBD_CtlError>
              break;
 8015746:	e03b      	b.n	80157c0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8015748:	683b      	ldr	r3, [r7, #0]
 801574a:	885b      	ldrh	r3, [r3, #2]
 801574c:	2b00      	cmp	r3, #0
 801574e:	d136      	bne.n	80157be <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8015750:	7bbb      	ldrb	r3, [r7, #14]
 8015752:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8015756:	2b00      	cmp	r3, #0
 8015758:	d004      	beq.n	8015764 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 801575a:	7bbb      	ldrb	r3, [r7, #14]
 801575c:	4619      	mov	r1, r3
 801575e:	6878      	ldr	r0, [r7, #4]
 8015760:	f001 f9ad 	bl	8016abe <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8015764:	6878      	ldr	r0, [r7, #4]
 8015766:	f000 fd2d 	bl	80161c4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 801576a:	7bbb      	ldrb	r3, [r7, #14]
 801576c:	4619      	mov	r1, r3
 801576e:	6878      	ldr	r0, [r7, #4]
 8015770:	f7ff fde4 	bl	801533c <USBD_CoreFindEP>
 8015774:	4603      	mov	r3, r0
 8015776:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015778:	7b7b      	ldrb	r3, [r7, #13]
 801577a:	2bff      	cmp	r3, #255	@ 0xff
 801577c:	d01f      	beq.n	80157be <USBD_StdEPReq+0x1c6>
 801577e:	7b7b      	ldrb	r3, [r7, #13]
 8015780:	2b00      	cmp	r3, #0
 8015782:	d11c      	bne.n	80157be <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8015784:	7b7a      	ldrb	r2, [r7, #13]
 8015786:	687b      	ldr	r3, [r7, #4]
 8015788:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 801578c:	7b7a      	ldrb	r2, [r7, #13]
 801578e:	687b      	ldr	r3, [r7, #4]
 8015790:	32ae      	adds	r2, #174	@ 0xae
 8015792:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015796:	689b      	ldr	r3, [r3, #8]
 8015798:	2b00      	cmp	r3, #0
 801579a:	d010      	beq.n	80157be <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 801579c:	7b7a      	ldrb	r2, [r7, #13]
 801579e:	687b      	ldr	r3, [r7, #4]
 80157a0:	32ae      	adds	r2, #174	@ 0xae
 80157a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80157a6:	689b      	ldr	r3, [r3, #8]
 80157a8:	6839      	ldr	r1, [r7, #0]
 80157aa:	6878      	ldr	r0, [r7, #4]
 80157ac:	4798      	blx	r3
 80157ae:	4603      	mov	r3, r0
 80157b0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80157b2:	e004      	b.n	80157be <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80157b4:	6839      	ldr	r1, [r7, #0]
 80157b6:	6878      	ldr	r0, [r7, #4]
 80157b8:	f000 fc2d 	bl	8016016 <USBD_CtlError>
              break;
 80157bc:	e000      	b.n	80157c0 <USBD_StdEPReq+0x1c8>
              break;
 80157be:	bf00      	nop
          }
          break;
 80157c0:	e0ab      	b.n	801591a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80157c2:	687b      	ldr	r3, [r7, #4]
 80157c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80157c8:	b2db      	uxtb	r3, r3
 80157ca:	2b02      	cmp	r3, #2
 80157cc:	d002      	beq.n	80157d4 <USBD_StdEPReq+0x1dc>
 80157ce:	2b03      	cmp	r3, #3
 80157d0:	d032      	beq.n	8015838 <USBD_StdEPReq+0x240>
 80157d2:	e097      	b.n	8015904 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80157d4:	7bbb      	ldrb	r3, [r7, #14]
 80157d6:	2b00      	cmp	r3, #0
 80157d8:	d007      	beq.n	80157ea <USBD_StdEPReq+0x1f2>
 80157da:	7bbb      	ldrb	r3, [r7, #14]
 80157dc:	2b80      	cmp	r3, #128	@ 0x80
 80157de:	d004      	beq.n	80157ea <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80157e0:	6839      	ldr	r1, [r7, #0]
 80157e2:	6878      	ldr	r0, [r7, #4]
 80157e4:	f000 fc17 	bl	8016016 <USBD_CtlError>
                break;
 80157e8:	e091      	b.n	801590e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80157ea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80157ee:	2b00      	cmp	r3, #0
 80157f0:	da0b      	bge.n	801580a <USBD_StdEPReq+0x212>
 80157f2:	7bbb      	ldrb	r3, [r7, #14]
 80157f4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80157f8:	4613      	mov	r3, r2
 80157fa:	009b      	lsls	r3, r3, #2
 80157fc:	4413      	add	r3, r2
 80157fe:	009b      	lsls	r3, r3, #2
 8015800:	3310      	adds	r3, #16
 8015802:	687a      	ldr	r2, [r7, #4]
 8015804:	4413      	add	r3, r2
 8015806:	3304      	adds	r3, #4
 8015808:	e00b      	b.n	8015822 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801580a:	7bbb      	ldrb	r3, [r7, #14]
 801580c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015810:	4613      	mov	r3, r2
 8015812:	009b      	lsls	r3, r3, #2
 8015814:	4413      	add	r3, r2
 8015816:	009b      	lsls	r3, r3, #2
 8015818:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 801581c:	687a      	ldr	r2, [r7, #4]
 801581e:	4413      	add	r3, r2
 8015820:	3304      	adds	r3, #4
 8015822:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8015824:	68bb      	ldr	r3, [r7, #8]
 8015826:	2200      	movs	r2, #0
 8015828:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801582a:	68bb      	ldr	r3, [r7, #8]
 801582c:	2202      	movs	r2, #2
 801582e:	4619      	mov	r1, r3
 8015830:	6878      	ldr	r0, [r7, #4]
 8015832:	f000 fc6d 	bl	8016110 <USBD_CtlSendData>
              break;
 8015836:	e06a      	b.n	801590e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8015838:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801583c:	2b00      	cmp	r3, #0
 801583e:	da11      	bge.n	8015864 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8015840:	7bbb      	ldrb	r3, [r7, #14]
 8015842:	f003 020f 	and.w	r2, r3, #15
 8015846:	6879      	ldr	r1, [r7, #4]
 8015848:	4613      	mov	r3, r2
 801584a:	009b      	lsls	r3, r3, #2
 801584c:	4413      	add	r3, r2
 801584e:	009b      	lsls	r3, r3, #2
 8015850:	440b      	add	r3, r1
 8015852:	3324      	adds	r3, #36	@ 0x24
 8015854:	881b      	ldrh	r3, [r3, #0]
 8015856:	2b00      	cmp	r3, #0
 8015858:	d117      	bne.n	801588a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 801585a:	6839      	ldr	r1, [r7, #0]
 801585c:	6878      	ldr	r0, [r7, #4]
 801585e:	f000 fbda 	bl	8016016 <USBD_CtlError>
                  break;
 8015862:	e054      	b.n	801590e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8015864:	7bbb      	ldrb	r3, [r7, #14]
 8015866:	f003 020f 	and.w	r2, r3, #15
 801586a:	6879      	ldr	r1, [r7, #4]
 801586c:	4613      	mov	r3, r2
 801586e:	009b      	lsls	r3, r3, #2
 8015870:	4413      	add	r3, r2
 8015872:	009b      	lsls	r3, r3, #2
 8015874:	440b      	add	r3, r1
 8015876:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 801587a:	881b      	ldrh	r3, [r3, #0]
 801587c:	2b00      	cmp	r3, #0
 801587e:	d104      	bne.n	801588a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8015880:	6839      	ldr	r1, [r7, #0]
 8015882:	6878      	ldr	r0, [r7, #4]
 8015884:	f000 fbc7 	bl	8016016 <USBD_CtlError>
                  break;
 8015888:	e041      	b.n	801590e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801588a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801588e:	2b00      	cmp	r3, #0
 8015890:	da0b      	bge.n	80158aa <USBD_StdEPReq+0x2b2>
 8015892:	7bbb      	ldrb	r3, [r7, #14]
 8015894:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8015898:	4613      	mov	r3, r2
 801589a:	009b      	lsls	r3, r3, #2
 801589c:	4413      	add	r3, r2
 801589e:	009b      	lsls	r3, r3, #2
 80158a0:	3310      	adds	r3, #16
 80158a2:	687a      	ldr	r2, [r7, #4]
 80158a4:	4413      	add	r3, r2
 80158a6:	3304      	adds	r3, #4
 80158a8:	e00b      	b.n	80158c2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80158aa:	7bbb      	ldrb	r3, [r7, #14]
 80158ac:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80158b0:	4613      	mov	r3, r2
 80158b2:	009b      	lsls	r3, r3, #2
 80158b4:	4413      	add	r3, r2
 80158b6:	009b      	lsls	r3, r3, #2
 80158b8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80158bc:	687a      	ldr	r2, [r7, #4]
 80158be:	4413      	add	r3, r2
 80158c0:	3304      	adds	r3, #4
 80158c2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80158c4:	7bbb      	ldrb	r3, [r7, #14]
 80158c6:	2b00      	cmp	r3, #0
 80158c8:	d002      	beq.n	80158d0 <USBD_StdEPReq+0x2d8>
 80158ca:	7bbb      	ldrb	r3, [r7, #14]
 80158cc:	2b80      	cmp	r3, #128	@ 0x80
 80158ce:	d103      	bne.n	80158d8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80158d0:	68bb      	ldr	r3, [r7, #8]
 80158d2:	2200      	movs	r2, #0
 80158d4:	601a      	str	r2, [r3, #0]
 80158d6:	e00e      	b.n	80158f6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80158d8:	7bbb      	ldrb	r3, [r7, #14]
 80158da:	4619      	mov	r1, r3
 80158dc:	6878      	ldr	r0, [r7, #4]
 80158de:	f001 f90d 	bl	8016afc <USBD_LL_IsStallEP>
 80158e2:	4603      	mov	r3, r0
 80158e4:	2b00      	cmp	r3, #0
 80158e6:	d003      	beq.n	80158f0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80158e8:	68bb      	ldr	r3, [r7, #8]
 80158ea:	2201      	movs	r2, #1
 80158ec:	601a      	str	r2, [r3, #0]
 80158ee:	e002      	b.n	80158f6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80158f0:	68bb      	ldr	r3, [r7, #8]
 80158f2:	2200      	movs	r2, #0
 80158f4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80158f6:	68bb      	ldr	r3, [r7, #8]
 80158f8:	2202      	movs	r2, #2
 80158fa:	4619      	mov	r1, r3
 80158fc:	6878      	ldr	r0, [r7, #4]
 80158fe:	f000 fc07 	bl	8016110 <USBD_CtlSendData>
              break;
 8015902:	e004      	b.n	801590e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8015904:	6839      	ldr	r1, [r7, #0]
 8015906:	6878      	ldr	r0, [r7, #4]
 8015908:	f000 fb85 	bl	8016016 <USBD_CtlError>
              break;
 801590c:	bf00      	nop
          }
          break;
 801590e:	e004      	b.n	801591a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8015910:	6839      	ldr	r1, [r7, #0]
 8015912:	6878      	ldr	r0, [r7, #4]
 8015914:	f000 fb7f 	bl	8016016 <USBD_CtlError>
          break;
 8015918:	bf00      	nop
      }
      break;
 801591a:	e005      	b.n	8015928 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 801591c:	6839      	ldr	r1, [r7, #0]
 801591e:	6878      	ldr	r0, [r7, #4]
 8015920:	f000 fb79 	bl	8016016 <USBD_CtlError>
      break;
 8015924:	e000      	b.n	8015928 <USBD_StdEPReq+0x330>
      break;
 8015926:	bf00      	nop
  }

  return ret;
 8015928:	7bfb      	ldrb	r3, [r7, #15]
}
 801592a:	4618      	mov	r0, r3
 801592c:	3710      	adds	r7, #16
 801592e:	46bd      	mov	sp, r7
 8015930:	bd80      	pop	{r7, pc}
	...

08015934 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015934:	b580      	push	{r7, lr}
 8015936:	b084      	sub	sp, #16
 8015938:	af00      	add	r7, sp, #0
 801593a:	6078      	str	r0, [r7, #4]
 801593c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801593e:	2300      	movs	r3, #0
 8015940:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8015942:	2300      	movs	r3, #0
 8015944:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8015946:	2300      	movs	r3, #0
 8015948:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 801594a:	683b      	ldr	r3, [r7, #0]
 801594c:	885b      	ldrh	r3, [r3, #2]
 801594e:	0a1b      	lsrs	r3, r3, #8
 8015950:	b29b      	uxth	r3, r3
 8015952:	3b01      	subs	r3, #1
 8015954:	2b0e      	cmp	r3, #14
 8015956:	f200 8152 	bhi.w	8015bfe <USBD_GetDescriptor+0x2ca>
 801595a:	a201      	add	r2, pc, #4	@ (adr r2, 8015960 <USBD_GetDescriptor+0x2c>)
 801595c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015960:	080159d1 	.word	0x080159d1
 8015964:	080159e9 	.word	0x080159e9
 8015968:	08015a29 	.word	0x08015a29
 801596c:	08015bff 	.word	0x08015bff
 8015970:	08015bff 	.word	0x08015bff
 8015974:	08015b9f 	.word	0x08015b9f
 8015978:	08015bcb 	.word	0x08015bcb
 801597c:	08015bff 	.word	0x08015bff
 8015980:	08015bff 	.word	0x08015bff
 8015984:	08015bff 	.word	0x08015bff
 8015988:	08015bff 	.word	0x08015bff
 801598c:	08015bff 	.word	0x08015bff
 8015990:	08015bff 	.word	0x08015bff
 8015994:	08015bff 	.word	0x08015bff
 8015998:	0801599d 	.word	0x0801599d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 801599c:	687b      	ldr	r3, [r7, #4]
 801599e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80159a2:	69db      	ldr	r3, [r3, #28]
 80159a4:	2b00      	cmp	r3, #0
 80159a6:	d00b      	beq.n	80159c0 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80159a8:	687b      	ldr	r3, [r7, #4]
 80159aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80159ae:	69db      	ldr	r3, [r3, #28]
 80159b0:	687a      	ldr	r2, [r7, #4]
 80159b2:	7c12      	ldrb	r2, [r2, #16]
 80159b4:	f107 0108 	add.w	r1, r7, #8
 80159b8:	4610      	mov	r0, r2
 80159ba:	4798      	blx	r3
 80159bc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80159be:	e126      	b.n	8015c0e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80159c0:	6839      	ldr	r1, [r7, #0]
 80159c2:	6878      	ldr	r0, [r7, #4]
 80159c4:	f000 fb27 	bl	8016016 <USBD_CtlError>
        err++;
 80159c8:	7afb      	ldrb	r3, [r7, #11]
 80159ca:	3301      	adds	r3, #1
 80159cc:	72fb      	strb	r3, [r7, #11]
      break;
 80159ce:	e11e      	b.n	8015c0e <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80159d0:	687b      	ldr	r3, [r7, #4]
 80159d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80159d6:	681b      	ldr	r3, [r3, #0]
 80159d8:	687a      	ldr	r2, [r7, #4]
 80159da:	7c12      	ldrb	r2, [r2, #16]
 80159dc:	f107 0108 	add.w	r1, r7, #8
 80159e0:	4610      	mov	r0, r2
 80159e2:	4798      	blx	r3
 80159e4:	60f8      	str	r0, [r7, #12]
      break;
 80159e6:	e112      	b.n	8015c0e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80159e8:	687b      	ldr	r3, [r7, #4]
 80159ea:	7c1b      	ldrb	r3, [r3, #16]
 80159ec:	2b00      	cmp	r3, #0
 80159ee:	d10d      	bne.n	8015a0c <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80159f0:	687b      	ldr	r3, [r7, #4]
 80159f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80159f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80159f8:	f107 0208 	add.w	r2, r7, #8
 80159fc:	4610      	mov	r0, r2
 80159fe:	4798      	blx	r3
 8015a00:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8015a02:	68fb      	ldr	r3, [r7, #12]
 8015a04:	3301      	adds	r3, #1
 8015a06:	2202      	movs	r2, #2
 8015a08:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8015a0a:	e100      	b.n	8015c0e <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8015a0c:	687b      	ldr	r3, [r7, #4]
 8015a0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8015a12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015a14:	f107 0208 	add.w	r2, r7, #8
 8015a18:	4610      	mov	r0, r2
 8015a1a:	4798      	blx	r3
 8015a1c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8015a1e:	68fb      	ldr	r3, [r7, #12]
 8015a20:	3301      	adds	r3, #1
 8015a22:	2202      	movs	r2, #2
 8015a24:	701a      	strb	r2, [r3, #0]
      break;
 8015a26:	e0f2      	b.n	8015c0e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8015a28:	683b      	ldr	r3, [r7, #0]
 8015a2a:	885b      	ldrh	r3, [r3, #2]
 8015a2c:	b2db      	uxtb	r3, r3
 8015a2e:	2b05      	cmp	r3, #5
 8015a30:	f200 80ac 	bhi.w	8015b8c <USBD_GetDescriptor+0x258>
 8015a34:	a201      	add	r2, pc, #4	@ (adr r2, 8015a3c <USBD_GetDescriptor+0x108>)
 8015a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015a3a:	bf00      	nop
 8015a3c:	08015a55 	.word	0x08015a55
 8015a40:	08015a89 	.word	0x08015a89
 8015a44:	08015abd 	.word	0x08015abd
 8015a48:	08015af1 	.word	0x08015af1
 8015a4c:	08015b25 	.word	0x08015b25
 8015a50:	08015b59 	.word	0x08015b59
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8015a54:	687b      	ldr	r3, [r7, #4]
 8015a56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8015a5a:	685b      	ldr	r3, [r3, #4]
 8015a5c:	2b00      	cmp	r3, #0
 8015a5e:	d00b      	beq.n	8015a78 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8015a60:	687b      	ldr	r3, [r7, #4]
 8015a62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8015a66:	685b      	ldr	r3, [r3, #4]
 8015a68:	687a      	ldr	r2, [r7, #4]
 8015a6a:	7c12      	ldrb	r2, [r2, #16]
 8015a6c:	f107 0108 	add.w	r1, r7, #8
 8015a70:	4610      	mov	r0, r2
 8015a72:	4798      	blx	r3
 8015a74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015a76:	e091      	b.n	8015b9c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8015a78:	6839      	ldr	r1, [r7, #0]
 8015a7a:	6878      	ldr	r0, [r7, #4]
 8015a7c:	f000 facb 	bl	8016016 <USBD_CtlError>
            err++;
 8015a80:	7afb      	ldrb	r3, [r7, #11]
 8015a82:	3301      	adds	r3, #1
 8015a84:	72fb      	strb	r3, [r7, #11]
          break;
 8015a86:	e089      	b.n	8015b9c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8015a88:	687b      	ldr	r3, [r7, #4]
 8015a8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8015a8e:	689b      	ldr	r3, [r3, #8]
 8015a90:	2b00      	cmp	r3, #0
 8015a92:	d00b      	beq.n	8015aac <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8015a94:	687b      	ldr	r3, [r7, #4]
 8015a96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8015a9a:	689b      	ldr	r3, [r3, #8]
 8015a9c:	687a      	ldr	r2, [r7, #4]
 8015a9e:	7c12      	ldrb	r2, [r2, #16]
 8015aa0:	f107 0108 	add.w	r1, r7, #8
 8015aa4:	4610      	mov	r0, r2
 8015aa6:	4798      	blx	r3
 8015aa8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015aaa:	e077      	b.n	8015b9c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8015aac:	6839      	ldr	r1, [r7, #0]
 8015aae:	6878      	ldr	r0, [r7, #4]
 8015ab0:	f000 fab1 	bl	8016016 <USBD_CtlError>
            err++;
 8015ab4:	7afb      	ldrb	r3, [r7, #11]
 8015ab6:	3301      	adds	r3, #1
 8015ab8:	72fb      	strb	r3, [r7, #11]
          break;
 8015aba:	e06f      	b.n	8015b9c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8015abc:	687b      	ldr	r3, [r7, #4]
 8015abe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8015ac2:	68db      	ldr	r3, [r3, #12]
 8015ac4:	2b00      	cmp	r3, #0
 8015ac6:	d00b      	beq.n	8015ae0 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8015ac8:	687b      	ldr	r3, [r7, #4]
 8015aca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8015ace:	68db      	ldr	r3, [r3, #12]
 8015ad0:	687a      	ldr	r2, [r7, #4]
 8015ad2:	7c12      	ldrb	r2, [r2, #16]
 8015ad4:	f107 0108 	add.w	r1, r7, #8
 8015ad8:	4610      	mov	r0, r2
 8015ada:	4798      	blx	r3
 8015adc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015ade:	e05d      	b.n	8015b9c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8015ae0:	6839      	ldr	r1, [r7, #0]
 8015ae2:	6878      	ldr	r0, [r7, #4]
 8015ae4:	f000 fa97 	bl	8016016 <USBD_CtlError>
            err++;
 8015ae8:	7afb      	ldrb	r3, [r7, #11]
 8015aea:	3301      	adds	r3, #1
 8015aec:	72fb      	strb	r3, [r7, #11]
          break;
 8015aee:	e055      	b.n	8015b9c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8015af0:	687b      	ldr	r3, [r7, #4]
 8015af2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8015af6:	691b      	ldr	r3, [r3, #16]
 8015af8:	2b00      	cmp	r3, #0
 8015afa:	d00b      	beq.n	8015b14 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8015afc:	687b      	ldr	r3, [r7, #4]
 8015afe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8015b02:	691b      	ldr	r3, [r3, #16]
 8015b04:	687a      	ldr	r2, [r7, #4]
 8015b06:	7c12      	ldrb	r2, [r2, #16]
 8015b08:	f107 0108 	add.w	r1, r7, #8
 8015b0c:	4610      	mov	r0, r2
 8015b0e:	4798      	blx	r3
 8015b10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015b12:	e043      	b.n	8015b9c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8015b14:	6839      	ldr	r1, [r7, #0]
 8015b16:	6878      	ldr	r0, [r7, #4]
 8015b18:	f000 fa7d 	bl	8016016 <USBD_CtlError>
            err++;
 8015b1c:	7afb      	ldrb	r3, [r7, #11]
 8015b1e:	3301      	adds	r3, #1
 8015b20:	72fb      	strb	r3, [r7, #11]
          break;
 8015b22:	e03b      	b.n	8015b9c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8015b24:	687b      	ldr	r3, [r7, #4]
 8015b26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8015b2a:	695b      	ldr	r3, [r3, #20]
 8015b2c:	2b00      	cmp	r3, #0
 8015b2e:	d00b      	beq.n	8015b48 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8015b30:	687b      	ldr	r3, [r7, #4]
 8015b32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8015b36:	695b      	ldr	r3, [r3, #20]
 8015b38:	687a      	ldr	r2, [r7, #4]
 8015b3a:	7c12      	ldrb	r2, [r2, #16]
 8015b3c:	f107 0108 	add.w	r1, r7, #8
 8015b40:	4610      	mov	r0, r2
 8015b42:	4798      	blx	r3
 8015b44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015b46:	e029      	b.n	8015b9c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8015b48:	6839      	ldr	r1, [r7, #0]
 8015b4a:	6878      	ldr	r0, [r7, #4]
 8015b4c:	f000 fa63 	bl	8016016 <USBD_CtlError>
            err++;
 8015b50:	7afb      	ldrb	r3, [r7, #11]
 8015b52:	3301      	adds	r3, #1
 8015b54:	72fb      	strb	r3, [r7, #11]
          break;
 8015b56:	e021      	b.n	8015b9c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8015b58:	687b      	ldr	r3, [r7, #4]
 8015b5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8015b5e:	699b      	ldr	r3, [r3, #24]
 8015b60:	2b00      	cmp	r3, #0
 8015b62:	d00b      	beq.n	8015b7c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8015b64:	687b      	ldr	r3, [r7, #4]
 8015b66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8015b6a:	699b      	ldr	r3, [r3, #24]
 8015b6c:	687a      	ldr	r2, [r7, #4]
 8015b6e:	7c12      	ldrb	r2, [r2, #16]
 8015b70:	f107 0108 	add.w	r1, r7, #8
 8015b74:	4610      	mov	r0, r2
 8015b76:	4798      	blx	r3
 8015b78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015b7a:	e00f      	b.n	8015b9c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8015b7c:	6839      	ldr	r1, [r7, #0]
 8015b7e:	6878      	ldr	r0, [r7, #4]
 8015b80:	f000 fa49 	bl	8016016 <USBD_CtlError>
            err++;
 8015b84:	7afb      	ldrb	r3, [r7, #11]
 8015b86:	3301      	adds	r3, #1
 8015b88:	72fb      	strb	r3, [r7, #11]
          break;
 8015b8a:	e007      	b.n	8015b9c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8015b8c:	6839      	ldr	r1, [r7, #0]
 8015b8e:	6878      	ldr	r0, [r7, #4]
 8015b90:	f000 fa41 	bl	8016016 <USBD_CtlError>
          err++;
 8015b94:	7afb      	ldrb	r3, [r7, #11]
 8015b96:	3301      	adds	r3, #1
 8015b98:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8015b9a:	bf00      	nop
      }
      break;
 8015b9c:	e037      	b.n	8015c0e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015b9e:	687b      	ldr	r3, [r7, #4]
 8015ba0:	7c1b      	ldrb	r3, [r3, #16]
 8015ba2:	2b00      	cmp	r3, #0
 8015ba4:	d109      	bne.n	8015bba <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8015ba6:	687b      	ldr	r3, [r7, #4]
 8015ba8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8015bac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015bae:	f107 0208 	add.w	r2, r7, #8
 8015bb2:	4610      	mov	r0, r2
 8015bb4:	4798      	blx	r3
 8015bb6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015bb8:	e029      	b.n	8015c0e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8015bba:	6839      	ldr	r1, [r7, #0]
 8015bbc:	6878      	ldr	r0, [r7, #4]
 8015bbe:	f000 fa2a 	bl	8016016 <USBD_CtlError>
        err++;
 8015bc2:	7afb      	ldrb	r3, [r7, #11]
 8015bc4:	3301      	adds	r3, #1
 8015bc6:	72fb      	strb	r3, [r7, #11]
      break;
 8015bc8:	e021      	b.n	8015c0e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015bca:	687b      	ldr	r3, [r7, #4]
 8015bcc:	7c1b      	ldrb	r3, [r3, #16]
 8015bce:	2b00      	cmp	r3, #0
 8015bd0:	d10d      	bne.n	8015bee <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8015bd2:	687b      	ldr	r3, [r7, #4]
 8015bd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8015bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015bda:	f107 0208 	add.w	r2, r7, #8
 8015bde:	4610      	mov	r0, r2
 8015be0:	4798      	blx	r3
 8015be2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8015be4:	68fb      	ldr	r3, [r7, #12]
 8015be6:	3301      	adds	r3, #1
 8015be8:	2207      	movs	r2, #7
 8015bea:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015bec:	e00f      	b.n	8015c0e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8015bee:	6839      	ldr	r1, [r7, #0]
 8015bf0:	6878      	ldr	r0, [r7, #4]
 8015bf2:	f000 fa10 	bl	8016016 <USBD_CtlError>
        err++;
 8015bf6:	7afb      	ldrb	r3, [r7, #11]
 8015bf8:	3301      	adds	r3, #1
 8015bfa:	72fb      	strb	r3, [r7, #11]
      break;
 8015bfc:	e007      	b.n	8015c0e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8015bfe:	6839      	ldr	r1, [r7, #0]
 8015c00:	6878      	ldr	r0, [r7, #4]
 8015c02:	f000 fa08 	bl	8016016 <USBD_CtlError>
      err++;
 8015c06:	7afb      	ldrb	r3, [r7, #11]
 8015c08:	3301      	adds	r3, #1
 8015c0a:	72fb      	strb	r3, [r7, #11]
      break;
 8015c0c:	bf00      	nop
  }

  if (err != 0U)
 8015c0e:	7afb      	ldrb	r3, [r7, #11]
 8015c10:	2b00      	cmp	r3, #0
 8015c12:	d11e      	bne.n	8015c52 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8015c14:	683b      	ldr	r3, [r7, #0]
 8015c16:	88db      	ldrh	r3, [r3, #6]
 8015c18:	2b00      	cmp	r3, #0
 8015c1a:	d016      	beq.n	8015c4a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8015c1c:	893b      	ldrh	r3, [r7, #8]
 8015c1e:	2b00      	cmp	r3, #0
 8015c20:	d00e      	beq.n	8015c40 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8015c22:	683b      	ldr	r3, [r7, #0]
 8015c24:	88da      	ldrh	r2, [r3, #6]
 8015c26:	893b      	ldrh	r3, [r7, #8]
 8015c28:	4293      	cmp	r3, r2
 8015c2a:	bf28      	it	cs
 8015c2c:	4613      	movcs	r3, r2
 8015c2e:	b29b      	uxth	r3, r3
 8015c30:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8015c32:	893b      	ldrh	r3, [r7, #8]
 8015c34:	461a      	mov	r2, r3
 8015c36:	68f9      	ldr	r1, [r7, #12]
 8015c38:	6878      	ldr	r0, [r7, #4]
 8015c3a:	f000 fa69 	bl	8016110 <USBD_CtlSendData>
 8015c3e:	e009      	b.n	8015c54 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8015c40:	6839      	ldr	r1, [r7, #0]
 8015c42:	6878      	ldr	r0, [r7, #4]
 8015c44:	f000 f9e7 	bl	8016016 <USBD_CtlError>
 8015c48:	e004      	b.n	8015c54 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8015c4a:	6878      	ldr	r0, [r7, #4]
 8015c4c:	f000 faba 	bl	80161c4 <USBD_CtlSendStatus>
 8015c50:	e000      	b.n	8015c54 <USBD_GetDescriptor+0x320>
    return;
 8015c52:	bf00      	nop
  }
}
 8015c54:	3710      	adds	r7, #16
 8015c56:	46bd      	mov	sp, r7
 8015c58:	bd80      	pop	{r7, pc}
 8015c5a:	bf00      	nop

08015c5c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015c5c:	b580      	push	{r7, lr}
 8015c5e:	b084      	sub	sp, #16
 8015c60:	af00      	add	r7, sp, #0
 8015c62:	6078      	str	r0, [r7, #4]
 8015c64:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8015c66:	683b      	ldr	r3, [r7, #0]
 8015c68:	889b      	ldrh	r3, [r3, #4]
 8015c6a:	2b00      	cmp	r3, #0
 8015c6c:	d131      	bne.n	8015cd2 <USBD_SetAddress+0x76>
 8015c6e:	683b      	ldr	r3, [r7, #0]
 8015c70:	88db      	ldrh	r3, [r3, #6]
 8015c72:	2b00      	cmp	r3, #0
 8015c74:	d12d      	bne.n	8015cd2 <USBD_SetAddress+0x76>
 8015c76:	683b      	ldr	r3, [r7, #0]
 8015c78:	885b      	ldrh	r3, [r3, #2]
 8015c7a:	2b7f      	cmp	r3, #127	@ 0x7f
 8015c7c:	d829      	bhi.n	8015cd2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8015c7e:	683b      	ldr	r3, [r7, #0]
 8015c80:	885b      	ldrh	r3, [r3, #2]
 8015c82:	b2db      	uxtb	r3, r3
 8015c84:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8015c88:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015c8a:	687b      	ldr	r3, [r7, #4]
 8015c8c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015c90:	b2db      	uxtb	r3, r3
 8015c92:	2b03      	cmp	r3, #3
 8015c94:	d104      	bne.n	8015ca0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8015c96:	6839      	ldr	r1, [r7, #0]
 8015c98:	6878      	ldr	r0, [r7, #4]
 8015c9a:	f000 f9bc 	bl	8016016 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015c9e:	e01d      	b.n	8015cdc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8015ca0:	687b      	ldr	r3, [r7, #4]
 8015ca2:	7bfa      	ldrb	r2, [r7, #15]
 8015ca4:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8015ca8:	7bfb      	ldrb	r3, [r7, #15]
 8015caa:	4619      	mov	r1, r3
 8015cac:	6878      	ldr	r0, [r7, #4]
 8015cae:	f000 ff51 	bl	8016b54 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8015cb2:	6878      	ldr	r0, [r7, #4]
 8015cb4:	f000 fa86 	bl	80161c4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8015cb8:	7bfb      	ldrb	r3, [r7, #15]
 8015cba:	2b00      	cmp	r3, #0
 8015cbc:	d004      	beq.n	8015cc8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8015cbe:	687b      	ldr	r3, [r7, #4]
 8015cc0:	2202      	movs	r2, #2
 8015cc2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015cc6:	e009      	b.n	8015cdc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8015cc8:	687b      	ldr	r3, [r7, #4]
 8015cca:	2201      	movs	r2, #1
 8015ccc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015cd0:	e004      	b.n	8015cdc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8015cd2:	6839      	ldr	r1, [r7, #0]
 8015cd4:	6878      	ldr	r0, [r7, #4]
 8015cd6:	f000 f99e 	bl	8016016 <USBD_CtlError>
  }
}
 8015cda:	bf00      	nop
 8015cdc:	bf00      	nop
 8015cde:	3710      	adds	r7, #16
 8015ce0:	46bd      	mov	sp, r7
 8015ce2:	bd80      	pop	{r7, pc}

08015ce4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015ce4:	b580      	push	{r7, lr}
 8015ce6:	b084      	sub	sp, #16
 8015ce8:	af00      	add	r7, sp, #0
 8015cea:	6078      	str	r0, [r7, #4]
 8015cec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8015cee:	2300      	movs	r3, #0
 8015cf0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8015cf2:	683b      	ldr	r3, [r7, #0]
 8015cf4:	885b      	ldrh	r3, [r3, #2]
 8015cf6:	b2da      	uxtb	r2, r3
 8015cf8:	4b4e      	ldr	r3, [pc, #312]	@ (8015e34 <USBD_SetConfig+0x150>)
 8015cfa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8015cfc:	4b4d      	ldr	r3, [pc, #308]	@ (8015e34 <USBD_SetConfig+0x150>)
 8015cfe:	781b      	ldrb	r3, [r3, #0]
 8015d00:	2b01      	cmp	r3, #1
 8015d02:	d905      	bls.n	8015d10 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8015d04:	6839      	ldr	r1, [r7, #0]
 8015d06:	6878      	ldr	r0, [r7, #4]
 8015d08:	f000 f985 	bl	8016016 <USBD_CtlError>
    return USBD_FAIL;
 8015d0c:	2303      	movs	r3, #3
 8015d0e:	e08c      	b.n	8015e2a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8015d10:	687b      	ldr	r3, [r7, #4]
 8015d12:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015d16:	b2db      	uxtb	r3, r3
 8015d18:	2b02      	cmp	r3, #2
 8015d1a:	d002      	beq.n	8015d22 <USBD_SetConfig+0x3e>
 8015d1c:	2b03      	cmp	r3, #3
 8015d1e:	d029      	beq.n	8015d74 <USBD_SetConfig+0x90>
 8015d20:	e075      	b.n	8015e0e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8015d22:	4b44      	ldr	r3, [pc, #272]	@ (8015e34 <USBD_SetConfig+0x150>)
 8015d24:	781b      	ldrb	r3, [r3, #0]
 8015d26:	2b00      	cmp	r3, #0
 8015d28:	d020      	beq.n	8015d6c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8015d2a:	4b42      	ldr	r3, [pc, #264]	@ (8015e34 <USBD_SetConfig+0x150>)
 8015d2c:	781b      	ldrb	r3, [r3, #0]
 8015d2e:	461a      	mov	r2, r3
 8015d30:	687b      	ldr	r3, [r7, #4]
 8015d32:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8015d34:	4b3f      	ldr	r3, [pc, #252]	@ (8015e34 <USBD_SetConfig+0x150>)
 8015d36:	781b      	ldrb	r3, [r3, #0]
 8015d38:	4619      	mov	r1, r3
 8015d3a:	6878      	ldr	r0, [r7, #4]
 8015d3c:	f7fe ffb9 	bl	8014cb2 <USBD_SetClassConfig>
 8015d40:	4603      	mov	r3, r0
 8015d42:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8015d44:	7bfb      	ldrb	r3, [r7, #15]
 8015d46:	2b00      	cmp	r3, #0
 8015d48:	d008      	beq.n	8015d5c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8015d4a:	6839      	ldr	r1, [r7, #0]
 8015d4c:	6878      	ldr	r0, [r7, #4]
 8015d4e:	f000 f962 	bl	8016016 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8015d52:	687b      	ldr	r3, [r7, #4]
 8015d54:	2202      	movs	r2, #2
 8015d56:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8015d5a:	e065      	b.n	8015e28 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8015d5c:	6878      	ldr	r0, [r7, #4]
 8015d5e:	f000 fa31 	bl	80161c4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8015d62:	687b      	ldr	r3, [r7, #4]
 8015d64:	2203      	movs	r2, #3
 8015d66:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8015d6a:	e05d      	b.n	8015e28 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8015d6c:	6878      	ldr	r0, [r7, #4]
 8015d6e:	f000 fa29 	bl	80161c4 <USBD_CtlSendStatus>
      break;
 8015d72:	e059      	b.n	8015e28 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8015d74:	4b2f      	ldr	r3, [pc, #188]	@ (8015e34 <USBD_SetConfig+0x150>)
 8015d76:	781b      	ldrb	r3, [r3, #0]
 8015d78:	2b00      	cmp	r3, #0
 8015d7a:	d112      	bne.n	8015da2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8015d7c:	687b      	ldr	r3, [r7, #4]
 8015d7e:	2202      	movs	r2, #2
 8015d80:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8015d84:	4b2b      	ldr	r3, [pc, #172]	@ (8015e34 <USBD_SetConfig+0x150>)
 8015d86:	781b      	ldrb	r3, [r3, #0]
 8015d88:	461a      	mov	r2, r3
 8015d8a:	687b      	ldr	r3, [r7, #4]
 8015d8c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8015d8e:	4b29      	ldr	r3, [pc, #164]	@ (8015e34 <USBD_SetConfig+0x150>)
 8015d90:	781b      	ldrb	r3, [r3, #0]
 8015d92:	4619      	mov	r1, r3
 8015d94:	6878      	ldr	r0, [r7, #4]
 8015d96:	f7fe ffa8 	bl	8014cea <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8015d9a:	6878      	ldr	r0, [r7, #4]
 8015d9c:	f000 fa12 	bl	80161c4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8015da0:	e042      	b.n	8015e28 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8015da2:	4b24      	ldr	r3, [pc, #144]	@ (8015e34 <USBD_SetConfig+0x150>)
 8015da4:	781b      	ldrb	r3, [r3, #0]
 8015da6:	461a      	mov	r2, r3
 8015da8:	687b      	ldr	r3, [r7, #4]
 8015daa:	685b      	ldr	r3, [r3, #4]
 8015dac:	429a      	cmp	r2, r3
 8015dae:	d02a      	beq.n	8015e06 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8015db0:	687b      	ldr	r3, [r7, #4]
 8015db2:	685b      	ldr	r3, [r3, #4]
 8015db4:	b2db      	uxtb	r3, r3
 8015db6:	4619      	mov	r1, r3
 8015db8:	6878      	ldr	r0, [r7, #4]
 8015dba:	f7fe ff96 	bl	8014cea <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8015dbe:	4b1d      	ldr	r3, [pc, #116]	@ (8015e34 <USBD_SetConfig+0x150>)
 8015dc0:	781b      	ldrb	r3, [r3, #0]
 8015dc2:	461a      	mov	r2, r3
 8015dc4:	687b      	ldr	r3, [r7, #4]
 8015dc6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8015dc8:	4b1a      	ldr	r3, [pc, #104]	@ (8015e34 <USBD_SetConfig+0x150>)
 8015dca:	781b      	ldrb	r3, [r3, #0]
 8015dcc:	4619      	mov	r1, r3
 8015dce:	6878      	ldr	r0, [r7, #4]
 8015dd0:	f7fe ff6f 	bl	8014cb2 <USBD_SetClassConfig>
 8015dd4:	4603      	mov	r3, r0
 8015dd6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8015dd8:	7bfb      	ldrb	r3, [r7, #15]
 8015dda:	2b00      	cmp	r3, #0
 8015ddc:	d00f      	beq.n	8015dfe <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8015dde:	6839      	ldr	r1, [r7, #0]
 8015de0:	6878      	ldr	r0, [r7, #4]
 8015de2:	f000 f918 	bl	8016016 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8015de6:	687b      	ldr	r3, [r7, #4]
 8015de8:	685b      	ldr	r3, [r3, #4]
 8015dea:	b2db      	uxtb	r3, r3
 8015dec:	4619      	mov	r1, r3
 8015dee:	6878      	ldr	r0, [r7, #4]
 8015df0:	f7fe ff7b 	bl	8014cea <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8015df4:	687b      	ldr	r3, [r7, #4]
 8015df6:	2202      	movs	r2, #2
 8015df8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8015dfc:	e014      	b.n	8015e28 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8015dfe:	6878      	ldr	r0, [r7, #4]
 8015e00:	f000 f9e0 	bl	80161c4 <USBD_CtlSendStatus>
      break;
 8015e04:	e010      	b.n	8015e28 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8015e06:	6878      	ldr	r0, [r7, #4]
 8015e08:	f000 f9dc 	bl	80161c4 <USBD_CtlSendStatus>
      break;
 8015e0c:	e00c      	b.n	8015e28 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8015e0e:	6839      	ldr	r1, [r7, #0]
 8015e10:	6878      	ldr	r0, [r7, #4]
 8015e12:	f000 f900 	bl	8016016 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8015e16:	4b07      	ldr	r3, [pc, #28]	@ (8015e34 <USBD_SetConfig+0x150>)
 8015e18:	781b      	ldrb	r3, [r3, #0]
 8015e1a:	4619      	mov	r1, r3
 8015e1c:	6878      	ldr	r0, [r7, #4]
 8015e1e:	f7fe ff64 	bl	8014cea <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8015e22:	2303      	movs	r3, #3
 8015e24:	73fb      	strb	r3, [r7, #15]
      break;
 8015e26:	bf00      	nop
  }

  return ret;
 8015e28:	7bfb      	ldrb	r3, [r7, #15]
}
 8015e2a:	4618      	mov	r0, r3
 8015e2c:	3710      	adds	r7, #16
 8015e2e:	46bd      	mov	sp, r7
 8015e30:	bd80      	pop	{r7, pc}
 8015e32:	bf00      	nop
 8015e34:	24025b58 	.word	0x24025b58

08015e38 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015e38:	b580      	push	{r7, lr}
 8015e3a:	b082      	sub	sp, #8
 8015e3c:	af00      	add	r7, sp, #0
 8015e3e:	6078      	str	r0, [r7, #4]
 8015e40:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8015e42:	683b      	ldr	r3, [r7, #0]
 8015e44:	88db      	ldrh	r3, [r3, #6]
 8015e46:	2b01      	cmp	r3, #1
 8015e48:	d004      	beq.n	8015e54 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8015e4a:	6839      	ldr	r1, [r7, #0]
 8015e4c:	6878      	ldr	r0, [r7, #4]
 8015e4e:	f000 f8e2 	bl	8016016 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8015e52:	e023      	b.n	8015e9c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8015e54:	687b      	ldr	r3, [r7, #4]
 8015e56:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015e5a:	b2db      	uxtb	r3, r3
 8015e5c:	2b02      	cmp	r3, #2
 8015e5e:	dc02      	bgt.n	8015e66 <USBD_GetConfig+0x2e>
 8015e60:	2b00      	cmp	r3, #0
 8015e62:	dc03      	bgt.n	8015e6c <USBD_GetConfig+0x34>
 8015e64:	e015      	b.n	8015e92 <USBD_GetConfig+0x5a>
 8015e66:	2b03      	cmp	r3, #3
 8015e68:	d00b      	beq.n	8015e82 <USBD_GetConfig+0x4a>
 8015e6a:	e012      	b.n	8015e92 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8015e6c:	687b      	ldr	r3, [r7, #4]
 8015e6e:	2200      	movs	r2, #0
 8015e70:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8015e72:	687b      	ldr	r3, [r7, #4]
 8015e74:	3308      	adds	r3, #8
 8015e76:	2201      	movs	r2, #1
 8015e78:	4619      	mov	r1, r3
 8015e7a:	6878      	ldr	r0, [r7, #4]
 8015e7c:	f000 f948 	bl	8016110 <USBD_CtlSendData>
        break;
 8015e80:	e00c      	b.n	8015e9c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8015e82:	687b      	ldr	r3, [r7, #4]
 8015e84:	3304      	adds	r3, #4
 8015e86:	2201      	movs	r2, #1
 8015e88:	4619      	mov	r1, r3
 8015e8a:	6878      	ldr	r0, [r7, #4]
 8015e8c:	f000 f940 	bl	8016110 <USBD_CtlSendData>
        break;
 8015e90:	e004      	b.n	8015e9c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8015e92:	6839      	ldr	r1, [r7, #0]
 8015e94:	6878      	ldr	r0, [r7, #4]
 8015e96:	f000 f8be 	bl	8016016 <USBD_CtlError>
        break;
 8015e9a:	bf00      	nop
}
 8015e9c:	bf00      	nop
 8015e9e:	3708      	adds	r7, #8
 8015ea0:	46bd      	mov	sp, r7
 8015ea2:	bd80      	pop	{r7, pc}

08015ea4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015ea4:	b580      	push	{r7, lr}
 8015ea6:	b082      	sub	sp, #8
 8015ea8:	af00      	add	r7, sp, #0
 8015eaa:	6078      	str	r0, [r7, #4]
 8015eac:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8015eae:	687b      	ldr	r3, [r7, #4]
 8015eb0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015eb4:	b2db      	uxtb	r3, r3
 8015eb6:	3b01      	subs	r3, #1
 8015eb8:	2b02      	cmp	r3, #2
 8015eba:	d81e      	bhi.n	8015efa <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8015ebc:	683b      	ldr	r3, [r7, #0]
 8015ebe:	88db      	ldrh	r3, [r3, #6]
 8015ec0:	2b02      	cmp	r3, #2
 8015ec2:	d004      	beq.n	8015ece <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8015ec4:	6839      	ldr	r1, [r7, #0]
 8015ec6:	6878      	ldr	r0, [r7, #4]
 8015ec8:	f000 f8a5 	bl	8016016 <USBD_CtlError>
        break;
 8015ecc:	e01a      	b.n	8015f04 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8015ece:	687b      	ldr	r3, [r7, #4]
 8015ed0:	2201      	movs	r2, #1
 8015ed2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8015ed4:	687b      	ldr	r3, [r7, #4]
 8015ed6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8015eda:	2b00      	cmp	r3, #0
 8015edc:	d005      	beq.n	8015eea <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8015ede:	687b      	ldr	r3, [r7, #4]
 8015ee0:	68db      	ldr	r3, [r3, #12]
 8015ee2:	f043 0202 	orr.w	r2, r3, #2
 8015ee6:	687b      	ldr	r3, [r7, #4]
 8015ee8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8015eea:	687b      	ldr	r3, [r7, #4]
 8015eec:	330c      	adds	r3, #12
 8015eee:	2202      	movs	r2, #2
 8015ef0:	4619      	mov	r1, r3
 8015ef2:	6878      	ldr	r0, [r7, #4]
 8015ef4:	f000 f90c 	bl	8016110 <USBD_CtlSendData>
      break;
 8015ef8:	e004      	b.n	8015f04 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8015efa:	6839      	ldr	r1, [r7, #0]
 8015efc:	6878      	ldr	r0, [r7, #4]
 8015efe:	f000 f88a 	bl	8016016 <USBD_CtlError>
      break;
 8015f02:	bf00      	nop
  }
}
 8015f04:	bf00      	nop
 8015f06:	3708      	adds	r7, #8
 8015f08:	46bd      	mov	sp, r7
 8015f0a:	bd80      	pop	{r7, pc}

08015f0c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015f0c:	b580      	push	{r7, lr}
 8015f0e:	b082      	sub	sp, #8
 8015f10:	af00      	add	r7, sp, #0
 8015f12:	6078      	str	r0, [r7, #4]
 8015f14:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8015f16:	683b      	ldr	r3, [r7, #0]
 8015f18:	885b      	ldrh	r3, [r3, #2]
 8015f1a:	2b01      	cmp	r3, #1
 8015f1c:	d107      	bne.n	8015f2e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8015f1e:	687b      	ldr	r3, [r7, #4]
 8015f20:	2201      	movs	r2, #1
 8015f22:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8015f26:	6878      	ldr	r0, [r7, #4]
 8015f28:	f000 f94c 	bl	80161c4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8015f2c:	e013      	b.n	8015f56 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8015f2e:	683b      	ldr	r3, [r7, #0]
 8015f30:	885b      	ldrh	r3, [r3, #2]
 8015f32:	2b02      	cmp	r3, #2
 8015f34:	d10b      	bne.n	8015f4e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8015f36:	683b      	ldr	r3, [r7, #0]
 8015f38:	889b      	ldrh	r3, [r3, #4]
 8015f3a:	0a1b      	lsrs	r3, r3, #8
 8015f3c:	b29b      	uxth	r3, r3
 8015f3e:	b2da      	uxtb	r2, r3
 8015f40:	687b      	ldr	r3, [r7, #4]
 8015f42:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8015f46:	6878      	ldr	r0, [r7, #4]
 8015f48:	f000 f93c 	bl	80161c4 <USBD_CtlSendStatus>
}
 8015f4c:	e003      	b.n	8015f56 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8015f4e:	6839      	ldr	r1, [r7, #0]
 8015f50:	6878      	ldr	r0, [r7, #4]
 8015f52:	f000 f860 	bl	8016016 <USBD_CtlError>
}
 8015f56:	bf00      	nop
 8015f58:	3708      	adds	r7, #8
 8015f5a:	46bd      	mov	sp, r7
 8015f5c:	bd80      	pop	{r7, pc}

08015f5e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015f5e:	b580      	push	{r7, lr}
 8015f60:	b082      	sub	sp, #8
 8015f62:	af00      	add	r7, sp, #0
 8015f64:	6078      	str	r0, [r7, #4]
 8015f66:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8015f68:	687b      	ldr	r3, [r7, #4]
 8015f6a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015f6e:	b2db      	uxtb	r3, r3
 8015f70:	3b01      	subs	r3, #1
 8015f72:	2b02      	cmp	r3, #2
 8015f74:	d80b      	bhi.n	8015f8e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8015f76:	683b      	ldr	r3, [r7, #0]
 8015f78:	885b      	ldrh	r3, [r3, #2]
 8015f7a:	2b01      	cmp	r3, #1
 8015f7c:	d10c      	bne.n	8015f98 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8015f7e:	687b      	ldr	r3, [r7, #4]
 8015f80:	2200      	movs	r2, #0
 8015f82:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8015f86:	6878      	ldr	r0, [r7, #4]
 8015f88:	f000 f91c 	bl	80161c4 <USBD_CtlSendStatus>
      }
      break;
 8015f8c:	e004      	b.n	8015f98 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8015f8e:	6839      	ldr	r1, [r7, #0]
 8015f90:	6878      	ldr	r0, [r7, #4]
 8015f92:	f000 f840 	bl	8016016 <USBD_CtlError>
      break;
 8015f96:	e000      	b.n	8015f9a <USBD_ClrFeature+0x3c>
      break;
 8015f98:	bf00      	nop
  }
}
 8015f9a:	bf00      	nop
 8015f9c:	3708      	adds	r7, #8
 8015f9e:	46bd      	mov	sp, r7
 8015fa0:	bd80      	pop	{r7, pc}

08015fa2 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8015fa2:	b580      	push	{r7, lr}
 8015fa4:	b084      	sub	sp, #16
 8015fa6:	af00      	add	r7, sp, #0
 8015fa8:	6078      	str	r0, [r7, #4]
 8015faa:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8015fac:	683b      	ldr	r3, [r7, #0]
 8015fae:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8015fb0:	68fb      	ldr	r3, [r7, #12]
 8015fb2:	781a      	ldrb	r2, [r3, #0]
 8015fb4:	687b      	ldr	r3, [r7, #4]
 8015fb6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8015fb8:	68fb      	ldr	r3, [r7, #12]
 8015fba:	3301      	adds	r3, #1
 8015fbc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8015fbe:	68fb      	ldr	r3, [r7, #12]
 8015fc0:	781a      	ldrb	r2, [r3, #0]
 8015fc2:	687b      	ldr	r3, [r7, #4]
 8015fc4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8015fc6:	68fb      	ldr	r3, [r7, #12]
 8015fc8:	3301      	adds	r3, #1
 8015fca:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8015fcc:	68f8      	ldr	r0, [r7, #12]
 8015fce:	f7ff fa16 	bl	80153fe <SWAPBYTE>
 8015fd2:	4603      	mov	r3, r0
 8015fd4:	461a      	mov	r2, r3
 8015fd6:	687b      	ldr	r3, [r7, #4]
 8015fd8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8015fda:	68fb      	ldr	r3, [r7, #12]
 8015fdc:	3301      	adds	r3, #1
 8015fde:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8015fe0:	68fb      	ldr	r3, [r7, #12]
 8015fe2:	3301      	adds	r3, #1
 8015fe4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8015fe6:	68f8      	ldr	r0, [r7, #12]
 8015fe8:	f7ff fa09 	bl	80153fe <SWAPBYTE>
 8015fec:	4603      	mov	r3, r0
 8015fee:	461a      	mov	r2, r3
 8015ff0:	687b      	ldr	r3, [r7, #4]
 8015ff2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8015ff4:	68fb      	ldr	r3, [r7, #12]
 8015ff6:	3301      	adds	r3, #1
 8015ff8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8015ffa:	68fb      	ldr	r3, [r7, #12]
 8015ffc:	3301      	adds	r3, #1
 8015ffe:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8016000:	68f8      	ldr	r0, [r7, #12]
 8016002:	f7ff f9fc 	bl	80153fe <SWAPBYTE>
 8016006:	4603      	mov	r3, r0
 8016008:	461a      	mov	r2, r3
 801600a:	687b      	ldr	r3, [r7, #4]
 801600c:	80da      	strh	r2, [r3, #6]
}
 801600e:	bf00      	nop
 8016010:	3710      	adds	r7, #16
 8016012:	46bd      	mov	sp, r7
 8016014:	bd80      	pop	{r7, pc}

08016016 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016016:	b580      	push	{r7, lr}
 8016018:	b082      	sub	sp, #8
 801601a:	af00      	add	r7, sp, #0
 801601c:	6078      	str	r0, [r7, #4]
 801601e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8016020:	2180      	movs	r1, #128	@ 0x80
 8016022:	6878      	ldr	r0, [r7, #4]
 8016024:	f000 fd2c 	bl	8016a80 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8016028:	2100      	movs	r1, #0
 801602a:	6878      	ldr	r0, [r7, #4]
 801602c:	f000 fd28 	bl	8016a80 <USBD_LL_StallEP>
}
 8016030:	bf00      	nop
 8016032:	3708      	adds	r7, #8
 8016034:	46bd      	mov	sp, r7
 8016036:	bd80      	pop	{r7, pc}

08016038 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8016038:	b580      	push	{r7, lr}
 801603a:	b086      	sub	sp, #24
 801603c:	af00      	add	r7, sp, #0
 801603e:	60f8      	str	r0, [r7, #12]
 8016040:	60b9      	str	r1, [r7, #8]
 8016042:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8016044:	2300      	movs	r3, #0
 8016046:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8016048:	68fb      	ldr	r3, [r7, #12]
 801604a:	2b00      	cmp	r3, #0
 801604c:	d042      	beq.n	80160d4 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 801604e:	68fb      	ldr	r3, [r7, #12]
 8016050:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8016052:	6938      	ldr	r0, [r7, #16]
 8016054:	f000 f842 	bl	80160dc <USBD_GetLen>
 8016058:	4603      	mov	r3, r0
 801605a:	3301      	adds	r3, #1
 801605c:	005b      	lsls	r3, r3, #1
 801605e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8016062:	d808      	bhi.n	8016076 <USBD_GetString+0x3e>
 8016064:	6938      	ldr	r0, [r7, #16]
 8016066:	f000 f839 	bl	80160dc <USBD_GetLen>
 801606a:	4603      	mov	r3, r0
 801606c:	3301      	adds	r3, #1
 801606e:	b29b      	uxth	r3, r3
 8016070:	005b      	lsls	r3, r3, #1
 8016072:	b29a      	uxth	r2, r3
 8016074:	e001      	b.n	801607a <USBD_GetString+0x42>
 8016076:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801607a:	687b      	ldr	r3, [r7, #4]
 801607c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 801607e:	7dfb      	ldrb	r3, [r7, #23]
 8016080:	68ba      	ldr	r2, [r7, #8]
 8016082:	4413      	add	r3, r2
 8016084:	687a      	ldr	r2, [r7, #4]
 8016086:	7812      	ldrb	r2, [r2, #0]
 8016088:	701a      	strb	r2, [r3, #0]
  idx++;
 801608a:	7dfb      	ldrb	r3, [r7, #23]
 801608c:	3301      	adds	r3, #1
 801608e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8016090:	7dfb      	ldrb	r3, [r7, #23]
 8016092:	68ba      	ldr	r2, [r7, #8]
 8016094:	4413      	add	r3, r2
 8016096:	2203      	movs	r2, #3
 8016098:	701a      	strb	r2, [r3, #0]
  idx++;
 801609a:	7dfb      	ldrb	r3, [r7, #23]
 801609c:	3301      	adds	r3, #1
 801609e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80160a0:	e013      	b.n	80160ca <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 80160a2:	7dfb      	ldrb	r3, [r7, #23]
 80160a4:	68ba      	ldr	r2, [r7, #8]
 80160a6:	4413      	add	r3, r2
 80160a8:	693a      	ldr	r2, [r7, #16]
 80160aa:	7812      	ldrb	r2, [r2, #0]
 80160ac:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80160ae:	693b      	ldr	r3, [r7, #16]
 80160b0:	3301      	adds	r3, #1
 80160b2:	613b      	str	r3, [r7, #16]
    idx++;
 80160b4:	7dfb      	ldrb	r3, [r7, #23]
 80160b6:	3301      	adds	r3, #1
 80160b8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80160ba:	7dfb      	ldrb	r3, [r7, #23]
 80160bc:	68ba      	ldr	r2, [r7, #8]
 80160be:	4413      	add	r3, r2
 80160c0:	2200      	movs	r2, #0
 80160c2:	701a      	strb	r2, [r3, #0]
    idx++;
 80160c4:	7dfb      	ldrb	r3, [r7, #23]
 80160c6:	3301      	adds	r3, #1
 80160c8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80160ca:	693b      	ldr	r3, [r7, #16]
 80160cc:	781b      	ldrb	r3, [r3, #0]
 80160ce:	2b00      	cmp	r3, #0
 80160d0:	d1e7      	bne.n	80160a2 <USBD_GetString+0x6a>
 80160d2:	e000      	b.n	80160d6 <USBD_GetString+0x9e>
    return;
 80160d4:	bf00      	nop
  }
}
 80160d6:	3718      	adds	r7, #24
 80160d8:	46bd      	mov	sp, r7
 80160da:	bd80      	pop	{r7, pc}

080160dc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80160dc:	b480      	push	{r7}
 80160de:	b085      	sub	sp, #20
 80160e0:	af00      	add	r7, sp, #0
 80160e2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80160e4:	2300      	movs	r3, #0
 80160e6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80160e8:	687b      	ldr	r3, [r7, #4]
 80160ea:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80160ec:	e005      	b.n	80160fa <USBD_GetLen+0x1e>
  {
    len++;
 80160ee:	7bfb      	ldrb	r3, [r7, #15]
 80160f0:	3301      	adds	r3, #1
 80160f2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80160f4:	68bb      	ldr	r3, [r7, #8]
 80160f6:	3301      	adds	r3, #1
 80160f8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80160fa:	68bb      	ldr	r3, [r7, #8]
 80160fc:	781b      	ldrb	r3, [r3, #0]
 80160fe:	2b00      	cmp	r3, #0
 8016100:	d1f5      	bne.n	80160ee <USBD_GetLen+0x12>
  }

  return len;
 8016102:	7bfb      	ldrb	r3, [r7, #15]
}
 8016104:	4618      	mov	r0, r3
 8016106:	3714      	adds	r7, #20
 8016108:	46bd      	mov	sp, r7
 801610a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801610e:	4770      	bx	lr

08016110 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8016110:	b580      	push	{r7, lr}
 8016112:	b084      	sub	sp, #16
 8016114:	af00      	add	r7, sp, #0
 8016116:	60f8      	str	r0, [r7, #12]
 8016118:	60b9      	str	r1, [r7, #8]
 801611a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801611c:	68fb      	ldr	r3, [r7, #12]
 801611e:	2202      	movs	r2, #2
 8016120:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8016124:	68fb      	ldr	r3, [r7, #12]
 8016126:	687a      	ldr	r2, [r7, #4]
 8016128:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 801612a:	68fb      	ldr	r3, [r7, #12]
 801612c:	687a      	ldr	r2, [r7, #4]
 801612e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8016130:	687b      	ldr	r3, [r7, #4]
 8016132:	68ba      	ldr	r2, [r7, #8]
 8016134:	2100      	movs	r1, #0
 8016136:	68f8      	ldr	r0, [r7, #12]
 8016138:	f000 fd2b 	bl	8016b92 <USBD_LL_Transmit>

  return USBD_OK;
 801613c:	2300      	movs	r3, #0
}
 801613e:	4618      	mov	r0, r3
 8016140:	3710      	adds	r7, #16
 8016142:	46bd      	mov	sp, r7
 8016144:	bd80      	pop	{r7, pc}

08016146 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8016146:	b580      	push	{r7, lr}
 8016148:	b084      	sub	sp, #16
 801614a:	af00      	add	r7, sp, #0
 801614c:	60f8      	str	r0, [r7, #12]
 801614e:	60b9      	str	r1, [r7, #8]
 8016150:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8016152:	687b      	ldr	r3, [r7, #4]
 8016154:	68ba      	ldr	r2, [r7, #8]
 8016156:	2100      	movs	r1, #0
 8016158:	68f8      	ldr	r0, [r7, #12]
 801615a:	f000 fd1a 	bl	8016b92 <USBD_LL_Transmit>

  return USBD_OK;
 801615e:	2300      	movs	r3, #0
}
 8016160:	4618      	mov	r0, r3
 8016162:	3710      	adds	r7, #16
 8016164:	46bd      	mov	sp, r7
 8016166:	bd80      	pop	{r7, pc}

08016168 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8016168:	b580      	push	{r7, lr}
 801616a:	b084      	sub	sp, #16
 801616c:	af00      	add	r7, sp, #0
 801616e:	60f8      	str	r0, [r7, #12]
 8016170:	60b9      	str	r1, [r7, #8]
 8016172:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8016174:	68fb      	ldr	r3, [r7, #12]
 8016176:	2203      	movs	r2, #3
 8016178:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 801617c:	68fb      	ldr	r3, [r7, #12]
 801617e:	687a      	ldr	r2, [r7, #4]
 8016180:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8016184:	68fb      	ldr	r3, [r7, #12]
 8016186:	687a      	ldr	r2, [r7, #4]
 8016188:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801618c:	687b      	ldr	r3, [r7, #4]
 801618e:	68ba      	ldr	r2, [r7, #8]
 8016190:	2100      	movs	r1, #0
 8016192:	68f8      	ldr	r0, [r7, #12]
 8016194:	f000 fd1e 	bl	8016bd4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8016198:	2300      	movs	r3, #0
}
 801619a:	4618      	mov	r0, r3
 801619c:	3710      	adds	r7, #16
 801619e:	46bd      	mov	sp, r7
 80161a0:	bd80      	pop	{r7, pc}

080161a2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80161a2:	b580      	push	{r7, lr}
 80161a4:	b084      	sub	sp, #16
 80161a6:	af00      	add	r7, sp, #0
 80161a8:	60f8      	str	r0, [r7, #12]
 80161aa:	60b9      	str	r1, [r7, #8]
 80161ac:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80161ae:	687b      	ldr	r3, [r7, #4]
 80161b0:	68ba      	ldr	r2, [r7, #8]
 80161b2:	2100      	movs	r1, #0
 80161b4:	68f8      	ldr	r0, [r7, #12]
 80161b6:	f000 fd0d 	bl	8016bd4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80161ba:	2300      	movs	r3, #0
}
 80161bc:	4618      	mov	r0, r3
 80161be:	3710      	adds	r7, #16
 80161c0:	46bd      	mov	sp, r7
 80161c2:	bd80      	pop	{r7, pc}

080161c4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80161c4:	b580      	push	{r7, lr}
 80161c6:	b082      	sub	sp, #8
 80161c8:	af00      	add	r7, sp, #0
 80161ca:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80161cc:	687b      	ldr	r3, [r7, #4]
 80161ce:	2204      	movs	r2, #4
 80161d0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80161d4:	2300      	movs	r3, #0
 80161d6:	2200      	movs	r2, #0
 80161d8:	2100      	movs	r1, #0
 80161da:	6878      	ldr	r0, [r7, #4]
 80161dc:	f000 fcd9 	bl	8016b92 <USBD_LL_Transmit>

  return USBD_OK;
 80161e0:	2300      	movs	r3, #0
}
 80161e2:	4618      	mov	r0, r3
 80161e4:	3708      	adds	r7, #8
 80161e6:	46bd      	mov	sp, r7
 80161e8:	bd80      	pop	{r7, pc}

080161ea <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80161ea:	b580      	push	{r7, lr}
 80161ec:	b082      	sub	sp, #8
 80161ee:	af00      	add	r7, sp, #0
 80161f0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80161f2:	687b      	ldr	r3, [r7, #4]
 80161f4:	2205      	movs	r2, #5
 80161f6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80161fa:	2300      	movs	r3, #0
 80161fc:	2200      	movs	r2, #0
 80161fe:	2100      	movs	r1, #0
 8016200:	6878      	ldr	r0, [r7, #4]
 8016202:	f000 fce7 	bl	8016bd4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8016206:	2300      	movs	r3, #0
}
 8016208:	4618      	mov	r0, r3
 801620a:	3708      	adds	r7, #8
 801620c:	46bd      	mov	sp, r7
 801620e:	bd80      	pop	{r7, pc}

08016210 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8016210:	b580      	push	{r7, lr}
 8016212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8016214:	2200      	movs	r2, #0
 8016216:	4918      	ldr	r1, [pc, #96]	@ (8016278 <MX_USB_DEVICE_Init+0x68>)
 8016218:	4818      	ldr	r0, [pc, #96]	@ (801627c <MX_USB_DEVICE_Init+0x6c>)
 801621a:	f7fe fccd 	bl	8014bb8 <USBD_Init>
 801621e:	4603      	mov	r3, r0
 8016220:	2b00      	cmp	r3, #0
 8016222:	d001      	beq.n	8016228 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8016224:	f7eb fcda 	bl	8001bdc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8016228:	4915      	ldr	r1, [pc, #84]	@ (8016280 <MX_USB_DEVICE_Init+0x70>)
 801622a:	4814      	ldr	r0, [pc, #80]	@ (801627c <MX_USB_DEVICE_Init+0x6c>)
 801622c:	f7fe fcf4 	bl	8014c18 <USBD_RegisterClass>
 8016230:	4603      	mov	r3, r0
 8016232:	2b00      	cmp	r3, #0
 8016234:	d001      	beq.n	801623a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8016236:	f7eb fcd1 	bl	8001bdc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 801623a:	4912      	ldr	r1, [pc, #72]	@ (8016284 <MX_USB_DEVICE_Init+0x74>)
 801623c:	480f      	ldr	r0, [pc, #60]	@ (801627c <MX_USB_DEVICE_Init+0x6c>)
 801623e:	f7fe fbeb 	bl	8014a18 <USBD_CDC_RegisterInterface>
 8016242:	4603      	mov	r3, r0
 8016244:	2b00      	cmp	r3, #0
 8016246:	d001      	beq.n	801624c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8016248:	f7eb fcc8 	bl	8001bdc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801624c:	480b      	ldr	r0, [pc, #44]	@ (801627c <MX_USB_DEVICE_Init+0x6c>)
 801624e:	f7fe fd19 	bl	8014c84 <USBD_Start>
 8016252:	4603      	mov	r3, r0
 8016254:	2b00      	cmp	r3, #0
 8016256:	d001      	beq.n	801625c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8016258:	f7eb fcc0 	bl	8001bdc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 801625c:	f7f6 fa7e 	bl	800c75c <HAL_PWREx_EnableUSBVoltageDetector>

  hcdc = (USBD_CDC_HandleTypeDef *)hUsbDeviceFS.pClassDataCmsit[hUsbDeviceFS.classId];
 8016260:	4b06      	ldr	r3, [pc, #24]	@ (801627c <MX_USB_DEVICE_Init+0x6c>)
 8016262:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8016266:	4a05      	ldr	r2, [pc, #20]	@ (801627c <MX_USB_DEVICE_Init+0x6c>)
 8016268:	33b0      	adds	r3, #176	@ 0xb0
 801626a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801626e:	4a06      	ldr	r2, [pc, #24]	@ (8016288 <MX_USB_DEVICE_Init+0x78>)
 8016270:	6013      	str	r3, [r2, #0]

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8016272:	bf00      	nop
 8016274:	bd80      	pop	{r7, pc}
 8016276:	bf00      	nop
 8016278:	240000c4 	.word	0x240000c4
 801627c:	24025b5c 	.word	0x24025b5c
 8016280:	24000030 	.word	0x24000030
 8016284:	240000b0 	.word	0x240000b0
 8016288:	24025e38 	.word	0x24025e38

0801628c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801628c:	b580      	push	{r7, lr}
 801628e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8016290:	2200      	movs	r2, #0
 8016292:	4905      	ldr	r1, [pc, #20]	@ (80162a8 <CDC_Init_FS+0x1c>)
 8016294:	4805      	ldr	r0, [pc, #20]	@ (80162ac <CDC_Init_FS+0x20>)
 8016296:	f7fe fbd9 	bl	8014a4c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801629a:	4905      	ldr	r1, [pc, #20]	@ (80162b0 <CDC_Init_FS+0x24>)
 801629c:	4803      	ldr	r0, [pc, #12]	@ (80162ac <CDC_Init_FS+0x20>)
 801629e:	f7fe fbf7 	bl	8014a90 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80162a2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80162a4:	4618      	mov	r0, r3
 80162a6:	bd80      	pop	{r7, pc}
 80162a8:	2402663c 	.word	0x2402663c
 80162ac:	24025b5c 	.word	0x24025b5c
 80162b0:	24025e3c 	.word	0x24025e3c

080162b4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80162b4:	b480      	push	{r7}
 80162b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80162b8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80162ba:	4618      	mov	r0, r3
 80162bc:	46bd      	mov	sp, r7
 80162be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162c2:	4770      	bx	lr

080162c4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80162c4:	b480      	push	{r7}
 80162c6:	b083      	sub	sp, #12
 80162c8:	af00      	add	r7, sp, #0
 80162ca:	4603      	mov	r3, r0
 80162cc:	6039      	str	r1, [r7, #0]
 80162ce:	71fb      	strb	r3, [r7, #7]
 80162d0:	4613      	mov	r3, r2
 80162d2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80162d4:	79fb      	ldrb	r3, [r7, #7]
 80162d6:	2b23      	cmp	r3, #35	@ 0x23
 80162d8:	d84a      	bhi.n	8016370 <CDC_Control_FS+0xac>
 80162da:	a201      	add	r2, pc, #4	@ (adr r2, 80162e0 <CDC_Control_FS+0x1c>)
 80162dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80162e0:	08016371 	.word	0x08016371
 80162e4:	08016371 	.word	0x08016371
 80162e8:	08016371 	.word	0x08016371
 80162ec:	08016371 	.word	0x08016371
 80162f0:	08016371 	.word	0x08016371
 80162f4:	08016371 	.word	0x08016371
 80162f8:	08016371 	.word	0x08016371
 80162fc:	08016371 	.word	0x08016371
 8016300:	08016371 	.word	0x08016371
 8016304:	08016371 	.word	0x08016371
 8016308:	08016371 	.word	0x08016371
 801630c:	08016371 	.word	0x08016371
 8016310:	08016371 	.word	0x08016371
 8016314:	08016371 	.word	0x08016371
 8016318:	08016371 	.word	0x08016371
 801631c:	08016371 	.word	0x08016371
 8016320:	08016371 	.word	0x08016371
 8016324:	08016371 	.word	0x08016371
 8016328:	08016371 	.word	0x08016371
 801632c:	08016371 	.word	0x08016371
 8016330:	08016371 	.word	0x08016371
 8016334:	08016371 	.word	0x08016371
 8016338:	08016371 	.word	0x08016371
 801633c:	08016371 	.word	0x08016371
 8016340:	08016371 	.word	0x08016371
 8016344:	08016371 	.word	0x08016371
 8016348:	08016371 	.word	0x08016371
 801634c:	08016371 	.word	0x08016371
 8016350:	08016371 	.word	0x08016371
 8016354:	08016371 	.word	0x08016371
 8016358:	08016371 	.word	0x08016371
 801635c:	08016371 	.word	0x08016371
 8016360:	08016371 	.word	0x08016371
 8016364:	08016371 	.word	0x08016371
 8016368:	08016371 	.word	0x08016371
 801636c:	08016371 	.word	0x08016371
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8016370:	bf00      	nop
  }

  return (USBD_OK);
 8016372:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8016374:	4618      	mov	r0, r3
 8016376:	370c      	adds	r7, #12
 8016378:	46bd      	mov	sp, r7
 801637a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801637e:	4770      	bx	lr

08016380 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8016380:	b580      	push	{r7, lr}
 8016382:	b082      	sub	sp, #8
 8016384:	af00      	add	r7, sp, #0
 8016386:	6078      	str	r0, [r7, #4]
 8016388:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801638a:	6879      	ldr	r1, [r7, #4]
 801638c:	480a      	ldr	r0, [pc, #40]	@ (80163b8 <CDC_Receive_FS+0x38>)
 801638e:	f7fe fb7f 	bl	8014a90 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8016392:	4809      	ldr	r0, [pc, #36]	@ (80163b8 <CDC_Receive_FS+0x38>)
 8016394:	f7fe fbda 	bl	8014b4c <USBD_CDC_ReceivePacket>
	usb_device_rxFlag = 0x01;
 8016398:	4b08      	ldr	r3, [pc, #32]	@ (80163bc <CDC_Receive_FS+0x3c>)
 801639a:	2201      	movs	r2, #1
 801639c:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, Buf, *Len, 100);
 801639e:	683b      	ldr	r3, [r7, #0]
 80163a0:	681b      	ldr	r3, [r3, #0]
 80163a2:	b29a      	uxth	r2, r3
 80163a4:	2364      	movs	r3, #100	@ 0x64
 80163a6:	6879      	ldr	r1, [r7, #4]
 80163a8:	4805      	ldr	r0, [pc, #20]	@ (80163c0 <CDC_Receive_FS+0x40>)
 80163aa:	f7fa fa59 	bl	8010860 <HAL_UART_Transmit>

	//CDC_Transmit_FS(Buf,*Len);
	return (USBD_OK);
 80163ae:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80163b0:	4618      	mov	r0, r3
 80163b2:	3708      	adds	r7, #8
 80163b4:	46bd      	mov	sp, r7
 80163b6:	bd80      	pop	{r7, pc}
 80163b8:	24025b5c 	.word	0x24025b5c
 80163bc:	24000748 	.word	0x24000748
 80163c0:	240005d4 	.word	0x240005d4

080163c4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80163c4:	b580      	push	{r7, lr}
 80163c6:	b084      	sub	sp, #16
 80163c8:	af00      	add	r7, sp, #0
 80163ca:	6078      	str	r0, [r7, #4]
 80163cc:	460b      	mov	r3, r1
 80163ce:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80163d0:	2300      	movs	r3, #0
 80163d2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80163d4:	4b0d      	ldr	r3, [pc, #52]	@ (801640c <CDC_Transmit_FS+0x48>)
 80163d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80163da:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80163dc:	68bb      	ldr	r3, [r7, #8]
 80163de:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80163e2:	2b00      	cmp	r3, #0
 80163e4:	d001      	beq.n	80163ea <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80163e6:	2301      	movs	r3, #1
 80163e8:	e00b      	b.n	8016402 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80163ea:	887b      	ldrh	r3, [r7, #2]
 80163ec:	461a      	mov	r2, r3
 80163ee:	6879      	ldr	r1, [r7, #4]
 80163f0:	4806      	ldr	r0, [pc, #24]	@ (801640c <CDC_Transmit_FS+0x48>)
 80163f2:	f7fe fb2b 	bl	8014a4c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80163f6:	4805      	ldr	r0, [pc, #20]	@ (801640c <CDC_Transmit_FS+0x48>)
 80163f8:	f7fe fb68 	bl	8014acc <USBD_CDC_TransmitPacket>
 80163fc:	4603      	mov	r3, r0
 80163fe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8016400:	7bfb      	ldrb	r3, [r7, #15]
}
 8016402:	4618      	mov	r0, r3
 8016404:	3710      	adds	r7, #16
 8016406:	46bd      	mov	sp, r7
 8016408:	bd80      	pop	{r7, pc}
 801640a:	bf00      	nop
 801640c:	24025b5c 	.word	0x24025b5c

08016410 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8016410:	b480      	push	{r7}
 8016412:	b087      	sub	sp, #28
 8016414:	af00      	add	r7, sp, #0
 8016416:	60f8      	str	r0, [r7, #12]
 8016418:	60b9      	str	r1, [r7, #8]
 801641a:	4613      	mov	r3, r2
 801641c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801641e:	2300      	movs	r3, #0
 8016420:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8016422:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016426:	4618      	mov	r0, r3
 8016428:	371c      	adds	r7, #28
 801642a:	46bd      	mov	sp, r7
 801642c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016430:	4770      	bx	lr
	...

08016434 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016434:	b480      	push	{r7}
 8016436:	b083      	sub	sp, #12
 8016438:	af00      	add	r7, sp, #0
 801643a:	4603      	mov	r3, r0
 801643c:	6039      	str	r1, [r7, #0]
 801643e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8016440:	683b      	ldr	r3, [r7, #0]
 8016442:	2212      	movs	r2, #18
 8016444:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8016446:	4b03      	ldr	r3, [pc, #12]	@ (8016454 <USBD_FS_DeviceDescriptor+0x20>)
}
 8016448:	4618      	mov	r0, r3
 801644a:	370c      	adds	r7, #12
 801644c:	46bd      	mov	sp, r7
 801644e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016452:	4770      	bx	lr
 8016454:	240000e4 	.word	0x240000e4

08016458 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016458:	b480      	push	{r7}
 801645a:	b083      	sub	sp, #12
 801645c:	af00      	add	r7, sp, #0
 801645e:	4603      	mov	r3, r0
 8016460:	6039      	str	r1, [r7, #0]
 8016462:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8016464:	683b      	ldr	r3, [r7, #0]
 8016466:	2204      	movs	r2, #4
 8016468:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801646a:	4b03      	ldr	r3, [pc, #12]	@ (8016478 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801646c:	4618      	mov	r0, r3
 801646e:	370c      	adds	r7, #12
 8016470:	46bd      	mov	sp, r7
 8016472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016476:	4770      	bx	lr
 8016478:	240000f8 	.word	0x240000f8

0801647c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801647c:	b580      	push	{r7, lr}
 801647e:	b082      	sub	sp, #8
 8016480:	af00      	add	r7, sp, #0
 8016482:	4603      	mov	r3, r0
 8016484:	6039      	str	r1, [r7, #0]
 8016486:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8016488:	79fb      	ldrb	r3, [r7, #7]
 801648a:	2b00      	cmp	r3, #0
 801648c:	d105      	bne.n	801649a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801648e:	683a      	ldr	r2, [r7, #0]
 8016490:	4907      	ldr	r1, [pc, #28]	@ (80164b0 <USBD_FS_ProductStrDescriptor+0x34>)
 8016492:	4808      	ldr	r0, [pc, #32]	@ (80164b4 <USBD_FS_ProductStrDescriptor+0x38>)
 8016494:	f7ff fdd0 	bl	8016038 <USBD_GetString>
 8016498:	e004      	b.n	80164a4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801649a:	683a      	ldr	r2, [r7, #0]
 801649c:	4904      	ldr	r1, [pc, #16]	@ (80164b0 <USBD_FS_ProductStrDescriptor+0x34>)
 801649e:	4805      	ldr	r0, [pc, #20]	@ (80164b4 <USBD_FS_ProductStrDescriptor+0x38>)
 80164a0:	f7ff fdca 	bl	8016038 <USBD_GetString>
  }
  return USBD_StrDesc;
 80164a4:	4b02      	ldr	r3, [pc, #8]	@ (80164b0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80164a6:	4618      	mov	r0, r3
 80164a8:	3708      	adds	r7, #8
 80164aa:	46bd      	mov	sp, r7
 80164ac:	bd80      	pop	{r7, pc}
 80164ae:	bf00      	nop
 80164b0:	24026e3c 	.word	0x24026e3c
 80164b4:	080177c0 	.word	0x080177c0

080164b8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80164b8:	b580      	push	{r7, lr}
 80164ba:	b082      	sub	sp, #8
 80164bc:	af00      	add	r7, sp, #0
 80164be:	4603      	mov	r3, r0
 80164c0:	6039      	str	r1, [r7, #0]
 80164c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80164c4:	683a      	ldr	r2, [r7, #0]
 80164c6:	4904      	ldr	r1, [pc, #16]	@ (80164d8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80164c8:	4804      	ldr	r0, [pc, #16]	@ (80164dc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80164ca:	f7ff fdb5 	bl	8016038 <USBD_GetString>
  return USBD_StrDesc;
 80164ce:	4b02      	ldr	r3, [pc, #8]	@ (80164d8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80164d0:	4618      	mov	r0, r3
 80164d2:	3708      	adds	r7, #8
 80164d4:	46bd      	mov	sp, r7
 80164d6:	bd80      	pop	{r7, pc}
 80164d8:	24026e3c 	.word	0x24026e3c
 80164dc:	080177d8 	.word	0x080177d8

080164e0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80164e0:	b580      	push	{r7, lr}
 80164e2:	b082      	sub	sp, #8
 80164e4:	af00      	add	r7, sp, #0
 80164e6:	4603      	mov	r3, r0
 80164e8:	6039      	str	r1, [r7, #0]
 80164ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80164ec:	683b      	ldr	r3, [r7, #0]
 80164ee:	221a      	movs	r2, #26
 80164f0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80164f2:	f000 f843 	bl	801657c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80164f6:	4b02      	ldr	r3, [pc, #8]	@ (8016500 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80164f8:	4618      	mov	r0, r3
 80164fa:	3708      	adds	r7, #8
 80164fc:	46bd      	mov	sp, r7
 80164fe:	bd80      	pop	{r7, pc}
 8016500:	240000fc 	.word	0x240000fc

08016504 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016504:	b580      	push	{r7, lr}
 8016506:	b082      	sub	sp, #8
 8016508:	af00      	add	r7, sp, #0
 801650a:	4603      	mov	r3, r0
 801650c:	6039      	str	r1, [r7, #0]
 801650e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8016510:	79fb      	ldrb	r3, [r7, #7]
 8016512:	2b00      	cmp	r3, #0
 8016514:	d105      	bne.n	8016522 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8016516:	683a      	ldr	r2, [r7, #0]
 8016518:	4907      	ldr	r1, [pc, #28]	@ (8016538 <USBD_FS_ConfigStrDescriptor+0x34>)
 801651a:	4808      	ldr	r0, [pc, #32]	@ (801653c <USBD_FS_ConfigStrDescriptor+0x38>)
 801651c:	f7ff fd8c 	bl	8016038 <USBD_GetString>
 8016520:	e004      	b.n	801652c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8016522:	683a      	ldr	r2, [r7, #0]
 8016524:	4904      	ldr	r1, [pc, #16]	@ (8016538 <USBD_FS_ConfigStrDescriptor+0x34>)
 8016526:	4805      	ldr	r0, [pc, #20]	@ (801653c <USBD_FS_ConfigStrDescriptor+0x38>)
 8016528:	f7ff fd86 	bl	8016038 <USBD_GetString>
  }
  return USBD_StrDesc;
 801652c:	4b02      	ldr	r3, [pc, #8]	@ (8016538 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801652e:	4618      	mov	r0, r3
 8016530:	3708      	adds	r7, #8
 8016532:	46bd      	mov	sp, r7
 8016534:	bd80      	pop	{r7, pc}
 8016536:	bf00      	nop
 8016538:	24026e3c 	.word	0x24026e3c
 801653c:	080177ec 	.word	0x080177ec

08016540 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016540:	b580      	push	{r7, lr}
 8016542:	b082      	sub	sp, #8
 8016544:	af00      	add	r7, sp, #0
 8016546:	4603      	mov	r3, r0
 8016548:	6039      	str	r1, [r7, #0]
 801654a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801654c:	79fb      	ldrb	r3, [r7, #7]
 801654e:	2b00      	cmp	r3, #0
 8016550:	d105      	bne.n	801655e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8016552:	683a      	ldr	r2, [r7, #0]
 8016554:	4907      	ldr	r1, [pc, #28]	@ (8016574 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8016556:	4808      	ldr	r0, [pc, #32]	@ (8016578 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8016558:	f7ff fd6e 	bl	8016038 <USBD_GetString>
 801655c:	e004      	b.n	8016568 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801655e:	683a      	ldr	r2, [r7, #0]
 8016560:	4904      	ldr	r1, [pc, #16]	@ (8016574 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8016562:	4805      	ldr	r0, [pc, #20]	@ (8016578 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8016564:	f7ff fd68 	bl	8016038 <USBD_GetString>
  }
  return USBD_StrDesc;
 8016568:	4b02      	ldr	r3, [pc, #8]	@ (8016574 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801656a:	4618      	mov	r0, r3
 801656c:	3708      	adds	r7, #8
 801656e:	46bd      	mov	sp, r7
 8016570:	bd80      	pop	{r7, pc}
 8016572:	bf00      	nop
 8016574:	24026e3c 	.word	0x24026e3c
 8016578:	080177f8 	.word	0x080177f8

0801657c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801657c:	b580      	push	{r7, lr}
 801657e:	b084      	sub	sp, #16
 8016580:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8016582:	4b0f      	ldr	r3, [pc, #60]	@ (80165c0 <Get_SerialNum+0x44>)
 8016584:	681b      	ldr	r3, [r3, #0]
 8016586:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8016588:	4b0e      	ldr	r3, [pc, #56]	@ (80165c4 <Get_SerialNum+0x48>)
 801658a:	681b      	ldr	r3, [r3, #0]
 801658c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801658e:	4b0e      	ldr	r3, [pc, #56]	@ (80165c8 <Get_SerialNum+0x4c>)
 8016590:	681b      	ldr	r3, [r3, #0]
 8016592:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8016594:	68fa      	ldr	r2, [r7, #12]
 8016596:	687b      	ldr	r3, [r7, #4]
 8016598:	4413      	add	r3, r2
 801659a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801659c:	68fb      	ldr	r3, [r7, #12]
 801659e:	2b00      	cmp	r3, #0
 80165a0:	d009      	beq.n	80165b6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80165a2:	2208      	movs	r2, #8
 80165a4:	4909      	ldr	r1, [pc, #36]	@ (80165cc <Get_SerialNum+0x50>)
 80165a6:	68f8      	ldr	r0, [r7, #12]
 80165a8:	f000 f814 	bl	80165d4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80165ac:	2204      	movs	r2, #4
 80165ae:	4908      	ldr	r1, [pc, #32]	@ (80165d0 <Get_SerialNum+0x54>)
 80165b0:	68b8      	ldr	r0, [r7, #8]
 80165b2:	f000 f80f 	bl	80165d4 <IntToUnicode>
  }
}
 80165b6:	bf00      	nop
 80165b8:	3710      	adds	r7, #16
 80165ba:	46bd      	mov	sp, r7
 80165bc:	bd80      	pop	{r7, pc}
 80165be:	bf00      	nop
 80165c0:	1ff1e800 	.word	0x1ff1e800
 80165c4:	1ff1e804 	.word	0x1ff1e804
 80165c8:	1ff1e808 	.word	0x1ff1e808
 80165cc:	240000fe 	.word	0x240000fe
 80165d0:	2400010e 	.word	0x2400010e

080165d4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80165d4:	b480      	push	{r7}
 80165d6:	b087      	sub	sp, #28
 80165d8:	af00      	add	r7, sp, #0
 80165da:	60f8      	str	r0, [r7, #12]
 80165dc:	60b9      	str	r1, [r7, #8]
 80165de:	4613      	mov	r3, r2
 80165e0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80165e2:	2300      	movs	r3, #0
 80165e4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80165e6:	2300      	movs	r3, #0
 80165e8:	75fb      	strb	r3, [r7, #23]
 80165ea:	e027      	b.n	801663c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80165ec:	68fb      	ldr	r3, [r7, #12]
 80165ee:	0f1b      	lsrs	r3, r3, #28
 80165f0:	2b09      	cmp	r3, #9
 80165f2:	d80b      	bhi.n	801660c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80165f4:	68fb      	ldr	r3, [r7, #12]
 80165f6:	0f1b      	lsrs	r3, r3, #28
 80165f8:	b2da      	uxtb	r2, r3
 80165fa:	7dfb      	ldrb	r3, [r7, #23]
 80165fc:	005b      	lsls	r3, r3, #1
 80165fe:	4619      	mov	r1, r3
 8016600:	68bb      	ldr	r3, [r7, #8]
 8016602:	440b      	add	r3, r1
 8016604:	3230      	adds	r2, #48	@ 0x30
 8016606:	b2d2      	uxtb	r2, r2
 8016608:	701a      	strb	r2, [r3, #0]
 801660a:	e00a      	b.n	8016622 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801660c:	68fb      	ldr	r3, [r7, #12]
 801660e:	0f1b      	lsrs	r3, r3, #28
 8016610:	b2da      	uxtb	r2, r3
 8016612:	7dfb      	ldrb	r3, [r7, #23]
 8016614:	005b      	lsls	r3, r3, #1
 8016616:	4619      	mov	r1, r3
 8016618:	68bb      	ldr	r3, [r7, #8]
 801661a:	440b      	add	r3, r1
 801661c:	3237      	adds	r2, #55	@ 0x37
 801661e:	b2d2      	uxtb	r2, r2
 8016620:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8016622:	68fb      	ldr	r3, [r7, #12]
 8016624:	011b      	lsls	r3, r3, #4
 8016626:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8016628:	7dfb      	ldrb	r3, [r7, #23]
 801662a:	005b      	lsls	r3, r3, #1
 801662c:	3301      	adds	r3, #1
 801662e:	68ba      	ldr	r2, [r7, #8]
 8016630:	4413      	add	r3, r2
 8016632:	2200      	movs	r2, #0
 8016634:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8016636:	7dfb      	ldrb	r3, [r7, #23]
 8016638:	3301      	adds	r3, #1
 801663a:	75fb      	strb	r3, [r7, #23]
 801663c:	7dfa      	ldrb	r2, [r7, #23]
 801663e:	79fb      	ldrb	r3, [r7, #7]
 8016640:	429a      	cmp	r2, r3
 8016642:	d3d3      	bcc.n	80165ec <IntToUnicode+0x18>
  }
}
 8016644:	bf00      	nop
 8016646:	bf00      	nop
 8016648:	371c      	adds	r7, #28
 801664a:	46bd      	mov	sp, r7
 801664c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016650:	4770      	bx	lr
	...

08016654 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8016654:	b580      	push	{r7, lr}
 8016656:	b0ba      	sub	sp, #232	@ 0xe8
 8016658:	af00      	add	r7, sp, #0
 801665a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801665c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8016660:	2200      	movs	r2, #0
 8016662:	601a      	str	r2, [r3, #0]
 8016664:	605a      	str	r2, [r3, #4]
 8016666:	609a      	str	r2, [r3, #8]
 8016668:	60da      	str	r2, [r3, #12]
 801666a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 801666c:	f107 0310 	add.w	r3, r7, #16
 8016670:	22c0      	movs	r2, #192	@ 0xc0
 8016672:	2100      	movs	r1, #0
 8016674:	4618      	mov	r0, r3
 8016676:	f000 fbfd 	bl	8016e74 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 801667a:	687b      	ldr	r3, [r7, #4]
 801667c:	681b      	ldr	r3, [r3, #0]
 801667e:	4a2c      	ldr	r2, [pc, #176]	@ (8016730 <HAL_PCD_MspInit+0xdc>)
 8016680:	4293      	cmp	r3, r2
 8016682:	d151      	bne.n	8016728 <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8016684:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8016688:	f04f 0300 	mov.w	r3, #0
 801668c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8016690:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8016694:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8016698:	f107 0310 	add.w	r3, r7, #16
 801669c:	4618      	mov	r0, r3
 801669e:	f7f7 f853 	bl	800d748 <HAL_RCCEx_PeriphCLKConfig>
 80166a2:	4603      	mov	r3, r0
 80166a4:	2b00      	cmp	r3, #0
 80166a6:	d001      	beq.n	80166ac <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 80166a8:	f7eb fa98 	bl	8001bdc <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80166ac:	f7f6 f856 	bl	800c75c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80166b0:	4b20      	ldr	r3, [pc, #128]	@ (8016734 <HAL_PCD_MspInit+0xe0>)
 80166b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80166b6:	4a1f      	ldr	r2, [pc, #124]	@ (8016734 <HAL_PCD_MspInit+0xe0>)
 80166b8:	f043 0301 	orr.w	r3, r3, #1
 80166bc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80166c0:	4b1c      	ldr	r3, [pc, #112]	@ (8016734 <HAL_PCD_MspInit+0xe0>)
 80166c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80166c6:	f003 0301 	and.w	r3, r3, #1
 80166ca:	60fb      	str	r3, [r7, #12]
 80166cc:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80166ce:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80166d2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80166d6:	2302      	movs	r3, #2
 80166d8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80166dc:	2300      	movs	r3, #0
 80166de:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80166e2:	2300      	movs	r3, #0
 80166e4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80166e8:	230a      	movs	r3, #10
 80166ea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80166ee:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80166f2:	4619      	mov	r1, r3
 80166f4:	4810      	ldr	r0, [pc, #64]	@ (8016738 <HAL_PCD_MspInit+0xe4>)
 80166f6:	f7f0 f96d 	bl	80069d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80166fa:	4b0e      	ldr	r3, [pc, #56]	@ (8016734 <HAL_PCD_MspInit+0xe0>)
 80166fc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8016700:	4a0c      	ldr	r2, [pc, #48]	@ (8016734 <HAL_PCD_MspInit+0xe0>)
 8016702:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8016706:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 801670a:	4b0a      	ldr	r3, [pc, #40]	@ (8016734 <HAL_PCD_MspInit+0xe0>)
 801670c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8016710:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8016714:	60bb      	str	r3, [r7, #8]
 8016716:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8016718:	2200      	movs	r2, #0
 801671a:	2100      	movs	r1, #0
 801671c:	2065      	movs	r0, #101	@ 0x65
 801671e:	f7ec fac6 	bl	8002cae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8016722:	2065      	movs	r0, #101	@ 0x65
 8016724:	f7ec fadd 	bl	8002ce2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8016728:	bf00      	nop
 801672a:	37e8      	adds	r7, #232	@ 0xe8
 801672c:	46bd      	mov	sp, r7
 801672e:	bd80      	pop	{r7, pc}
 8016730:	40080000 	.word	0x40080000
 8016734:	58024400 	.word	0x58024400
 8016738:	58020000 	.word	0x58020000

0801673c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801673c:	b580      	push	{r7, lr}
 801673e:	b082      	sub	sp, #8
 8016740:	af00      	add	r7, sp, #0
 8016742:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8016744:	687b      	ldr	r3, [r7, #4]
 8016746:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 801674a:	687b      	ldr	r3, [r7, #4]
 801674c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8016750:	4619      	mov	r1, r3
 8016752:	4610      	mov	r0, r2
 8016754:	f7fe fae3 	bl	8014d1e <USBD_LL_SetupStage>
}
 8016758:	bf00      	nop
 801675a:	3708      	adds	r7, #8
 801675c:	46bd      	mov	sp, r7
 801675e:	bd80      	pop	{r7, pc}

08016760 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016760:	b580      	push	{r7, lr}
 8016762:	b082      	sub	sp, #8
 8016764:	af00      	add	r7, sp, #0
 8016766:	6078      	str	r0, [r7, #4]
 8016768:	460b      	mov	r3, r1
 801676a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801676c:	687b      	ldr	r3, [r7, #4]
 801676e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8016772:	78fa      	ldrb	r2, [r7, #3]
 8016774:	6879      	ldr	r1, [r7, #4]
 8016776:	4613      	mov	r3, r2
 8016778:	00db      	lsls	r3, r3, #3
 801677a:	4413      	add	r3, r2
 801677c:	009b      	lsls	r3, r3, #2
 801677e:	440b      	add	r3, r1
 8016780:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8016784:	681a      	ldr	r2, [r3, #0]
 8016786:	78fb      	ldrb	r3, [r7, #3]
 8016788:	4619      	mov	r1, r3
 801678a:	f7fe fb1d 	bl	8014dc8 <USBD_LL_DataOutStage>
}
 801678e:	bf00      	nop
 8016790:	3708      	adds	r7, #8
 8016792:	46bd      	mov	sp, r7
 8016794:	bd80      	pop	{r7, pc}

08016796 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016796:	b580      	push	{r7, lr}
 8016798:	b082      	sub	sp, #8
 801679a:	af00      	add	r7, sp, #0
 801679c:	6078      	str	r0, [r7, #4]
 801679e:	460b      	mov	r3, r1
 80167a0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80167a2:	687b      	ldr	r3, [r7, #4]
 80167a4:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80167a8:	78fa      	ldrb	r2, [r7, #3]
 80167aa:	6879      	ldr	r1, [r7, #4]
 80167ac:	4613      	mov	r3, r2
 80167ae:	00db      	lsls	r3, r3, #3
 80167b0:	4413      	add	r3, r2
 80167b2:	009b      	lsls	r3, r3, #2
 80167b4:	440b      	add	r3, r1
 80167b6:	3320      	adds	r3, #32
 80167b8:	681a      	ldr	r2, [r3, #0]
 80167ba:	78fb      	ldrb	r3, [r7, #3]
 80167bc:	4619      	mov	r1, r3
 80167be:	f7fe fbb6 	bl	8014f2e <USBD_LL_DataInStage>
}
 80167c2:	bf00      	nop
 80167c4:	3708      	adds	r7, #8
 80167c6:	46bd      	mov	sp, r7
 80167c8:	bd80      	pop	{r7, pc}

080167ca <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80167ca:	b580      	push	{r7, lr}
 80167cc:	b082      	sub	sp, #8
 80167ce:	af00      	add	r7, sp, #0
 80167d0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80167d2:	687b      	ldr	r3, [r7, #4]
 80167d4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80167d8:	4618      	mov	r0, r3
 80167da:	f7fe fcf0 	bl	80151be <USBD_LL_SOF>
}
 80167de:	bf00      	nop
 80167e0:	3708      	adds	r7, #8
 80167e2:	46bd      	mov	sp, r7
 80167e4:	bd80      	pop	{r7, pc}

080167e6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80167e6:	b580      	push	{r7, lr}
 80167e8:	b084      	sub	sp, #16
 80167ea:	af00      	add	r7, sp, #0
 80167ec:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80167ee:	2301      	movs	r3, #1
 80167f0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80167f2:	687b      	ldr	r3, [r7, #4]
 80167f4:	79db      	ldrb	r3, [r3, #7]
 80167f6:	2b00      	cmp	r3, #0
 80167f8:	d102      	bne.n	8016800 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80167fa:	2300      	movs	r3, #0
 80167fc:	73fb      	strb	r3, [r7, #15]
 80167fe:	e008      	b.n	8016812 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8016800:	687b      	ldr	r3, [r7, #4]
 8016802:	79db      	ldrb	r3, [r3, #7]
 8016804:	2b02      	cmp	r3, #2
 8016806:	d102      	bne.n	801680e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8016808:	2301      	movs	r3, #1
 801680a:	73fb      	strb	r3, [r7, #15]
 801680c:	e001      	b.n	8016812 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801680e:	f7eb f9e5 	bl	8001bdc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8016812:	687b      	ldr	r3, [r7, #4]
 8016814:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8016818:	7bfa      	ldrb	r2, [r7, #15]
 801681a:	4611      	mov	r1, r2
 801681c:	4618      	mov	r0, r3
 801681e:	f7fe fc8a 	bl	8015136 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8016822:	687b      	ldr	r3, [r7, #4]
 8016824:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8016828:	4618      	mov	r0, r3
 801682a:	f7fe fc32 	bl	8015092 <USBD_LL_Reset>
}
 801682e:	bf00      	nop
 8016830:	3710      	adds	r7, #16
 8016832:	46bd      	mov	sp, r7
 8016834:	bd80      	pop	{r7, pc}
	...

08016838 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016838:	b580      	push	{r7, lr}
 801683a:	b082      	sub	sp, #8
 801683c:	af00      	add	r7, sp, #0
 801683e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8016840:	687b      	ldr	r3, [r7, #4]
 8016842:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8016846:	4618      	mov	r0, r3
 8016848:	f7fe fc85 	bl	8015156 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801684c:	687b      	ldr	r3, [r7, #4]
 801684e:	681b      	ldr	r3, [r3, #0]
 8016850:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8016854:	681b      	ldr	r3, [r3, #0]
 8016856:	687a      	ldr	r2, [r7, #4]
 8016858:	6812      	ldr	r2, [r2, #0]
 801685a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 801685e:	f043 0301 	orr.w	r3, r3, #1
 8016862:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8016864:	687b      	ldr	r3, [r7, #4]
 8016866:	7adb      	ldrb	r3, [r3, #11]
 8016868:	2b00      	cmp	r3, #0
 801686a:	d005      	beq.n	8016878 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801686c:	4b04      	ldr	r3, [pc, #16]	@ (8016880 <HAL_PCD_SuspendCallback+0x48>)
 801686e:	691b      	ldr	r3, [r3, #16]
 8016870:	4a03      	ldr	r2, [pc, #12]	@ (8016880 <HAL_PCD_SuspendCallback+0x48>)
 8016872:	f043 0306 	orr.w	r3, r3, #6
 8016876:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8016878:	bf00      	nop
 801687a:	3708      	adds	r7, #8
 801687c:	46bd      	mov	sp, r7
 801687e:	bd80      	pop	{r7, pc}
 8016880:	e000ed00 	.word	0xe000ed00

08016884 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016884:	b580      	push	{r7, lr}
 8016886:	b082      	sub	sp, #8
 8016888:	af00      	add	r7, sp, #0
 801688a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801688c:	687b      	ldr	r3, [r7, #4]
 801688e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8016892:	4618      	mov	r0, r3
 8016894:	f7fe fc7b 	bl	801518e <USBD_LL_Resume>
}
 8016898:	bf00      	nop
 801689a:	3708      	adds	r7, #8
 801689c:	46bd      	mov	sp, r7
 801689e:	bd80      	pop	{r7, pc}

080168a0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80168a0:	b580      	push	{r7, lr}
 80168a2:	b082      	sub	sp, #8
 80168a4:	af00      	add	r7, sp, #0
 80168a6:	6078      	str	r0, [r7, #4]
 80168a8:	460b      	mov	r3, r1
 80168aa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80168ac:	687b      	ldr	r3, [r7, #4]
 80168ae:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80168b2:	78fa      	ldrb	r2, [r7, #3]
 80168b4:	4611      	mov	r1, r2
 80168b6:	4618      	mov	r0, r3
 80168b8:	f7fe fcd3 	bl	8015262 <USBD_LL_IsoOUTIncomplete>
}
 80168bc:	bf00      	nop
 80168be:	3708      	adds	r7, #8
 80168c0:	46bd      	mov	sp, r7
 80168c2:	bd80      	pop	{r7, pc}

080168c4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80168c4:	b580      	push	{r7, lr}
 80168c6:	b082      	sub	sp, #8
 80168c8:	af00      	add	r7, sp, #0
 80168ca:	6078      	str	r0, [r7, #4]
 80168cc:	460b      	mov	r3, r1
 80168ce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80168d0:	687b      	ldr	r3, [r7, #4]
 80168d2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80168d6:	78fa      	ldrb	r2, [r7, #3]
 80168d8:	4611      	mov	r1, r2
 80168da:	4618      	mov	r0, r3
 80168dc:	f7fe fc8f 	bl	80151fe <USBD_LL_IsoINIncomplete>
}
 80168e0:	bf00      	nop
 80168e2:	3708      	adds	r7, #8
 80168e4:	46bd      	mov	sp, r7
 80168e6:	bd80      	pop	{r7, pc}

080168e8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80168e8:	b580      	push	{r7, lr}
 80168ea:	b082      	sub	sp, #8
 80168ec:	af00      	add	r7, sp, #0
 80168ee:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80168f0:	687b      	ldr	r3, [r7, #4]
 80168f2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80168f6:	4618      	mov	r0, r3
 80168f8:	f7fe fce5 	bl	80152c6 <USBD_LL_DevConnected>
}
 80168fc:	bf00      	nop
 80168fe:	3708      	adds	r7, #8
 8016900:	46bd      	mov	sp, r7
 8016902:	bd80      	pop	{r7, pc}

08016904 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016904:	b580      	push	{r7, lr}
 8016906:	b082      	sub	sp, #8
 8016908:	af00      	add	r7, sp, #0
 801690a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801690c:	687b      	ldr	r3, [r7, #4]
 801690e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8016912:	4618      	mov	r0, r3
 8016914:	f7fe fce2 	bl	80152dc <USBD_LL_DevDisconnected>
}
 8016918:	bf00      	nop
 801691a:	3708      	adds	r7, #8
 801691c:	46bd      	mov	sp, r7
 801691e:	bd80      	pop	{r7, pc}

08016920 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8016920:	b580      	push	{r7, lr}
 8016922:	b082      	sub	sp, #8
 8016924:	af00      	add	r7, sp, #0
 8016926:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8016928:	687b      	ldr	r3, [r7, #4]
 801692a:	781b      	ldrb	r3, [r3, #0]
 801692c:	2b00      	cmp	r3, #0
 801692e:	d13e      	bne.n	80169ae <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8016930:	4a21      	ldr	r2, [pc, #132]	@ (80169b8 <USBD_LL_Init+0x98>)
 8016932:	687b      	ldr	r3, [r7, #4]
 8016934:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8016938:	687b      	ldr	r3, [r7, #4]
 801693a:	4a1f      	ldr	r2, [pc, #124]	@ (80169b8 <USBD_LL_Init+0x98>)
 801693c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8016940:	4b1d      	ldr	r3, [pc, #116]	@ (80169b8 <USBD_LL_Init+0x98>)
 8016942:	4a1e      	ldr	r2, [pc, #120]	@ (80169bc <USBD_LL_Init+0x9c>)
 8016944:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8016946:	4b1c      	ldr	r3, [pc, #112]	@ (80169b8 <USBD_LL_Init+0x98>)
 8016948:	2209      	movs	r2, #9
 801694a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801694c:	4b1a      	ldr	r3, [pc, #104]	@ (80169b8 <USBD_LL_Init+0x98>)
 801694e:	2202      	movs	r2, #2
 8016950:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8016952:	4b19      	ldr	r3, [pc, #100]	@ (80169b8 <USBD_LL_Init+0x98>)
 8016954:	2200      	movs	r2, #0
 8016956:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8016958:	4b17      	ldr	r3, [pc, #92]	@ (80169b8 <USBD_LL_Init+0x98>)
 801695a:	2202      	movs	r2, #2
 801695c:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801695e:	4b16      	ldr	r3, [pc, #88]	@ (80169b8 <USBD_LL_Init+0x98>)
 8016960:	2200      	movs	r2, #0
 8016962:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8016964:	4b14      	ldr	r3, [pc, #80]	@ (80169b8 <USBD_LL_Init+0x98>)
 8016966:	2200      	movs	r2, #0
 8016968:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801696a:	4b13      	ldr	r3, [pc, #76]	@ (80169b8 <USBD_LL_Init+0x98>)
 801696c:	2200      	movs	r2, #0
 801696e:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8016970:	4b11      	ldr	r3, [pc, #68]	@ (80169b8 <USBD_LL_Init+0x98>)
 8016972:	2200      	movs	r2, #0
 8016974:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8016976:	4b10      	ldr	r3, [pc, #64]	@ (80169b8 <USBD_LL_Init+0x98>)
 8016978:	2200      	movs	r2, #0
 801697a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 801697c:	4b0e      	ldr	r3, [pc, #56]	@ (80169b8 <USBD_LL_Init+0x98>)
 801697e:	2200      	movs	r2, #0
 8016980:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8016982:	480d      	ldr	r0, [pc, #52]	@ (80169b8 <USBD_LL_Init+0x98>)
 8016984:	f7f4 fc10 	bl	800b1a8 <HAL_PCD_Init>
 8016988:	4603      	mov	r3, r0
 801698a:	2b00      	cmp	r3, #0
 801698c:	d001      	beq.n	8016992 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 801698e:	f7eb f925 	bl	8001bdc <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8016992:	2180      	movs	r1, #128	@ 0x80
 8016994:	4808      	ldr	r0, [pc, #32]	@ (80169b8 <USBD_LL_Init+0x98>)
 8016996:	f7f5 fe66 	bl	800c666 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801699a:	2240      	movs	r2, #64	@ 0x40
 801699c:	2100      	movs	r1, #0
 801699e:	4806      	ldr	r0, [pc, #24]	@ (80169b8 <USBD_LL_Init+0x98>)
 80169a0:	f7f5 fe1a 	bl	800c5d8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80169a4:	2280      	movs	r2, #128	@ 0x80
 80169a6:	2101      	movs	r1, #1
 80169a8:	4803      	ldr	r0, [pc, #12]	@ (80169b8 <USBD_LL_Init+0x98>)
 80169aa:	f7f5 fe15 	bl	800c5d8 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 80169ae:	2300      	movs	r3, #0
}
 80169b0:	4618      	mov	r0, r3
 80169b2:	3708      	adds	r7, #8
 80169b4:	46bd      	mov	sp, r7
 80169b6:	bd80      	pop	{r7, pc}
 80169b8:	2402703c 	.word	0x2402703c
 80169bc:	40080000 	.word	0x40080000

080169c0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80169c0:	b580      	push	{r7, lr}
 80169c2:	b084      	sub	sp, #16
 80169c4:	af00      	add	r7, sp, #0
 80169c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80169c8:	2300      	movs	r3, #0
 80169ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80169cc:	2300      	movs	r3, #0
 80169ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80169d0:	687b      	ldr	r3, [r7, #4]
 80169d2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80169d6:	4618      	mov	r0, r3
 80169d8:	f7f4 fcf2 	bl	800b3c0 <HAL_PCD_Start>
 80169dc:	4603      	mov	r3, r0
 80169de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80169e0:	7bfb      	ldrb	r3, [r7, #15]
 80169e2:	4618      	mov	r0, r3
 80169e4:	f000 f942 	bl	8016c6c <USBD_Get_USB_Status>
 80169e8:	4603      	mov	r3, r0
 80169ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80169ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80169ee:	4618      	mov	r0, r3
 80169f0:	3710      	adds	r7, #16
 80169f2:	46bd      	mov	sp, r7
 80169f4:	bd80      	pop	{r7, pc}

080169f6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80169f6:	b580      	push	{r7, lr}
 80169f8:	b084      	sub	sp, #16
 80169fa:	af00      	add	r7, sp, #0
 80169fc:	6078      	str	r0, [r7, #4]
 80169fe:	4608      	mov	r0, r1
 8016a00:	4611      	mov	r1, r2
 8016a02:	461a      	mov	r2, r3
 8016a04:	4603      	mov	r3, r0
 8016a06:	70fb      	strb	r3, [r7, #3]
 8016a08:	460b      	mov	r3, r1
 8016a0a:	70bb      	strb	r3, [r7, #2]
 8016a0c:	4613      	mov	r3, r2
 8016a0e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016a10:	2300      	movs	r3, #0
 8016a12:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016a14:	2300      	movs	r3, #0
 8016a16:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8016a18:	687b      	ldr	r3, [r7, #4]
 8016a1a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8016a1e:	78bb      	ldrb	r3, [r7, #2]
 8016a20:	883a      	ldrh	r2, [r7, #0]
 8016a22:	78f9      	ldrb	r1, [r7, #3]
 8016a24:	f7f5 f9f3 	bl	800be0e <HAL_PCD_EP_Open>
 8016a28:	4603      	mov	r3, r0
 8016a2a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016a2c:	7bfb      	ldrb	r3, [r7, #15]
 8016a2e:	4618      	mov	r0, r3
 8016a30:	f000 f91c 	bl	8016c6c <USBD_Get_USB_Status>
 8016a34:	4603      	mov	r3, r0
 8016a36:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016a38:	7bbb      	ldrb	r3, [r7, #14]
}
 8016a3a:	4618      	mov	r0, r3
 8016a3c:	3710      	adds	r7, #16
 8016a3e:	46bd      	mov	sp, r7
 8016a40:	bd80      	pop	{r7, pc}

08016a42 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016a42:	b580      	push	{r7, lr}
 8016a44:	b084      	sub	sp, #16
 8016a46:	af00      	add	r7, sp, #0
 8016a48:	6078      	str	r0, [r7, #4]
 8016a4a:	460b      	mov	r3, r1
 8016a4c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016a4e:	2300      	movs	r3, #0
 8016a50:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016a52:	2300      	movs	r3, #0
 8016a54:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8016a56:	687b      	ldr	r3, [r7, #4]
 8016a58:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8016a5c:	78fa      	ldrb	r2, [r7, #3]
 8016a5e:	4611      	mov	r1, r2
 8016a60:	4618      	mov	r0, r3
 8016a62:	f7f5 fa3e 	bl	800bee2 <HAL_PCD_EP_Close>
 8016a66:	4603      	mov	r3, r0
 8016a68:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016a6a:	7bfb      	ldrb	r3, [r7, #15]
 8016a6c:	4618      	mov	r0, r3
 8016a6e:	f000 f8fd 	bl	8016c6c <USBD_Get_USB_Status>
 8016a72:	4603      	mov	r3, r0
 8016a74:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016a76:	7bbb      	ldrb	r3, [r7, #14]
}
 8016a78:	4618      	mov	r0, r3
 8016a7a:	3710      	adds	r7, #16
 8016a7c:	46bd      	mov	sp, r7
 8016a7e:	bd80      	pop	{r7, pc}

08016a80 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016a80:	b580      	push	{r7, lr}
 8016a82:	b084      	sub	sp, #16
 8016a84:	af00      	add	r7, sp, #0
 8016a86:	6078      	str	r0, [r7, #4]
 8016a88:	460b      	mov	r3, r1
 8016a8a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016a8c:	2300      	movs	r3, #0
 8016a8e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016a90:	2300      	movs	r3, #0
 8016a92:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8016a94:	687b      	ldr	r3, [r7, #4]
 8016a96:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8016a9a:	78fa      	ldrb	r2, [r7, #3]
 8016a9c:	4611      	mov	r1, r2
 8016a9e:	4618      	mov	r0, r3
 8016aa0:	f7f5 faf6 	bl	800c090 <HAL_PCD_EP_SetStall>
 8016aa4:	4603      	mov	r3, r0
 8016aa6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016aa8:	7bfb      	ldrb	r3, [r7, #15]
 8016aaa:	4618      	mov	r0, r3
 8016aac:	f000 f8de 	bl	8016c6c <USBD_Get_USB_Status>
 8016ab0:	4603      	mov	r3, r0
 8016ab2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016ab4:	7bbb      	ldrb	r3, [r7, #14]
}
 8016ab6:	4618      	mov	r0, r3
 8016ab8:	3710      	adds	r7, #16
 8016aba:	46bd      	mov	sp, r7
 8016abc:	bd80      	pop	{r7, pc}

08016abe <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016abe:	b580      	push	{r7, lr}
 8016ac0:	b084      	sub	sp, #16
 8016ac2:	af00      	add	r7, sp, #0
 8016ac4:	6078      	str	r0, [r7, #4]
 8016ac6:	460b      	mov	r3, r1
 8016ac8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016aca:	2300      	movs	r3, #0
 8016acc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016ace:	2300      	movs	r3, #0
 8016ad0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8016ad2:	687b      	ldr	r3, [r7, #4]
 8016ad4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8016ad8:	78fa      	ldrb	r2, [r7, #3]
 8016ada:	4611      	mov	r1, r2
 8016adc:	4618      	mov	r0, r3
 8016ade:	f7f5 fb3a 	bl	800c156 <HAL_PCD_EP_ClrStall>
 8016ae2:	4603      	mov	r3, r0
 8016ae4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016ae6:	7bfb      	ldrb	r3, [r7, #15]
 8016ae8:	4618      	mov	r0, r3
 8016aea:	f000 f8bf 	bl	8016c6c <USBD_Get_USB_Status>
 8016aee:	4603      	mov	r3, r0
 8016af0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016af2:	7bbb      	ldrb	r3, [r7, #14]
}
 8016af4:	4618      	mov	r0, r3
 8016af6:	3710      	adds	r7, #16
 8016af8:	46bd      	mov	sp, r7
 8016afa:	bd80      	pop	{r7, pc}

08016afc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016afc:	b480      	push	{r7}
 8016afe:	b085      	sub	sp, #20
 8016b00:	af00      	add	r7, sp, #0
 8016b02:	6078      	str	r0, [r7, #4]
 8016b04:	460b      	mov	r3, r1
 8016b06:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8016b08:	687b      	ldr	r3, [r7, #4]
 8016b0a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8016b0e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8016b10:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8016b14:	2b00      	cmp	r3, #0
 8016b16:	da0b      	bge.n	8016b30 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8016b18:	78fb      	ldrb	r3, [r7, #3]
 8016b1a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8016b1e:	68f9      	ldr	r1, [r7, #12]
 8016b20:	4613      	mov	r3, r2
 8016b22:	00db      	lsls	r3, r3, #3
 8016b24:	4413      	add	r3, r2
 8016b26:	009b      	lsls	r3, r3, #2
 8016b28:	440b      	add	r3, r1
 8016b2a:	3316      	adds	r3, #22
 8016b2c:	781b      	ldrb	r3, [r3, #0]
 8016b2e:	e00b      	b.n	8016b48 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8016b30:	78fb      	ldrb	r3, [r7, #3]
 8016b32:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8016b36:	68f9      	ldr	r1, [r7, #12]
 8016b38:	4613      	mov	r3, r2
 8016b3a:	00db      	lsls	r3, r3, #3
 8016b3c:	4413      	add	r3, r2
 8016b3e:	009b      	lsls	r3, r3, #2
 8016b40:	440b      	add	r3, r1
 8016b42:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8016b46:	781b      	ldrb	r3, [r3, #0]
  }
}
 8016b48:	4618      	mov	r0, r3
 8016b4a:	3714      	adds	r7, #20
 8016b4c:	46bd      	mov	sp, r7
 8016b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b52:	4770      	bx	lr

08016b54 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8016b54:	b580      	push	{r7, lr}
 8016b56:	b084      	sub	sp, #16
 8016b58:	af00      	add	r7, sp, #0
 8016b5a:	6078      	str	r0, [r7, #4]
 8016b5c:	460b      	mov	r3, r1
 8016b5e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016b60:	2300      	movs	r3, #0
 8016b62:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016b64:	2300      	movs	r3, #0
 8016b66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8016b68:	687b      	ldr	r3, [r7, #4]
 8016b6a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8016b6e:	78fa      	ldrb	r2, [r7, #3]
 8016b70:	4611      	mov	r1, r2
 8016b72:	4618      	mov	r0, r3
 8016b74:	f7f5 f927 	bl	800bdc6 <HAL_PCD_SetAddress>
 8016b78:	4603      	mov	r3, r0
 8016b7a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016b7c:	7bfb      	ldrb	r3, [r7, #15]
 8016b7e:	4618      	mov	r0, r3
 8016b80:	f000 f874 	bl	8016c6c <USBD_Get_USB_Status>
 8016b84:	4603      	mov	r3, r0
 8016b86:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016b88:	7bbb      	ldrb	r3, [r7, #14]
}
 8016b8a:	4618      	mov	r0, r3
 8016b8c:	3710      	adds	r7, #16
 8016b8e:	46bd      	mov	sp, r7
 8016b90:	bd80      	pop	{r7, pc}

08016b92 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8016b92:	b580      	push	{r7, lr}
 8016b94:	b086      	sub	sp, #24
 8016b96:	af00      	add	r7, sp, #0
 8016b98:	60f8      	str	r0, [r7, #12]
 8016b9a:	607a      	str	r2, [r7, #4]
 8016b9c:	603b      	str	r3, [r7, #0]
 8016b9e:	460b      	mov	r3, r1
 8016ba0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016ba2:	2300      	movs	r3, #0
 8016ba4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016ba6:	2300      	movs	r3, #0
 8016ba8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8016baa:	68fb      	ldr	r3, [r7, #12]
 8016bac:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8016bb0:	7af9      	ldrb	r1, [r7, #11]
 8016bb2:	683b      	ldr	r3, [r7, #0]
 8016bb4:	687a      	ldr	r2, [r7, #4]
 8016bb6:	f7f5 fa31 	bl	800c01c <HAL_PCD_EP_Transmit>
 8016bba:	4603      	mov	r3, r0
 8016bbc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016bbe:	7dfb      	ldrb	r3, [r7, #23]
 8016bc0:	4618      	mov	r0, r3
 8016bc2:	f000 f853 	bl	8016c6c <USBD_Get_USB_Status>
 8016bc6:	4603      	mov	r3, r0
 8016bc8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8016bca:	7dbb      	ldrb	r3, [r7, #22]
}
 8016bcc:	4618      	mov	r0, r3
 8016bce:	3718      	adds	r7, #24
 8016bd0:	46bd      	mov	sp, r7
 8016bd2:	bd80      	pop	{r7, pc}

08016bd4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8016bd4:	b580      	push	{r7, lr}
 8016bd6:	b086      	sub	sp, #24
 8016bd8:	af00      	add	r7, sp, #0
 8016bda:	60f8      	str	r0, [r7, #12]
 8016bdc:	607a      	str	r2, [r7, #4]
 8016bde:	603b      	str	r3, [r7, #0]
 8016be0:	460b      	mov	r3, r1
 8016be2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016be4:	2300      	movs	r3, #0
 8016be6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016be8:	2300      	movs	r3, #0
 8016bea:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8016bec:	68fb      	ldr	r3, [r7, #12]
 8016bee:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8016bf2:	7af9      	ldrb	r1, [r7, #11]
 8016bf4:	683b      	ldr	r3, [r7, #0]
 8016bf6:	687a      	ldr	r2, [r7, #4]
 8016bf8:	f7f5 f9bd 	bl	800bf76 <HAL_PCD_EP_Receive>
 8016bfc:	4603      	mov	r3, r0
 8016bfe:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016c00:	7dfb      	ldrb	r3, [r7, #23]
 8016c02:	4618      	mov	r0, r3
 8016c04:	f000 f832 	bl	8016c6c <USBD_Get_USB_Status>
 8016c08:	4603      	mov	r3, r0
 8016c0a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8016c0c:	7dbb      	ldrb	r3, [r7, #22]
}
 8016c0e:	4618      	mov	r0, r3
 8016c10:	3718      	adds	r7, #24
 8016c12:	46bd      	mov	sp, r7
 8016c14:	bd80      	pop	{r7, pc}

08016c16 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016c16:	b580      	push	{r7, lr}
 8016c18:	b082      	sub	sp, #8
 8016c1a:	af00      	add	r7, sp, #0
 8016c1c:	6078      	str	r0, [r7, #4]
 8016c1e:	460b      	mov	r3, r1
 8016c20:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8016c22:	687b      	ldr	r3, [r7, #4]
 8016c24:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8016c28:	78fa      	ldrb	r2, [r7, #3]
 8016c2a:	4611      	mov	r1, r2
 8016c2c:	4618      	mov	r0, r3
 8016c2e:	f7f5 f9dd 	bl	800bfec <HAL_PCD_EP_GetRxCount>
 8016c32:	4603      	mov	r3, r0
}
 8016c34:	4618      	mov	r0, r3
 8016c36:	3708      	adds	r7, #8
 8016c38:	46bd      	mov	sp, r7
 8016c3a:	bd80      	pop	{r7, pc}

08016c3c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8016c3c:	b480      	push	{r7}
 8016c3e:	b083      	sub	sp, #12
 8016c40:	af00      	add	r7, sp, #0
 8016c42:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8016c44:	4b03      	ldr	r3, [pc, #12]	@ (8016c54 <USBD_static_malloc+0x18>)
}
 8016c46:	4618      	mov	r0, r3
 8016c48:	370c      	adds	r7, #12
 8016c4a:	46bd      	mov	sp, r7
 8016c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c50:	4770      	bx	lr
 8016c52:	bf00      	nop
 8016c54:	24027520 	.word	0x24027520

08016c58 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8016c58:	b480      	push	{r7}
 8016c5a:	b083      	sub	sp, #12
 8016c5c:	af00      	add	r7, sp, #0
 8016c5e:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8016c60:	bf00      	nop
 8016c62:	370c      	adds	r7, #12
 8016c64:	46bd      	mov	sp, r7
 8016c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c6a:	4770      	bx	lr

08016c6c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8016c6c:	b480      	push	{r7}
 8016c6e:	b085      	sub	sp, #20
 8016c70:	af00      	add	r7, sp, #0
 8016c72:	4603      	mov	r3, r0
 8016c74:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016c76:	2300      	movs	r3, #0
 8016c78:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8016c7a:	79fb      	ldrb	r3, [r7, #7]
 8016c7c:	2b03      	cmp	r3, #3
 8016c7e:	d817      	bhi.n	8016cb0 <USBD_Get_USB_Status+0x44>
 8016c80:	a201      	add	r2, pc, #4	@ (adr r2, 8016c88 <USBD_Get_USB_Status+0x1c>)
 8016c82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016c86:	bf00      	nop
 8016c88:	08016c99 	.word	0x08016c99
 8016c8c:	08016c9f 	.word	0x08016c9f
 8016c90:	08016ca5 	.word	0x08016ca5
 8016c94:	08016cab 	.word	0x08016cab
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8016c98:	2300      	movs	r3, #0
 8016c9a:	73fb      	strb	r3, [r7, #15]
    break;
 8016c9c:	e00b      	b.n	8016cb6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8016c9e:	2303      	movs	r3, #3
 8016ca0:	73fb      	strb	r3, [r7, #15]
    break;
 8016ca2:	e008      	b.n	8016cb6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8016ca4:	2301      	movs	r3, #1
 8016ca6:	73fb      	strb	r3, [r7, #15]
    break;
 8016ca8:	e005      	b.n	8016cb6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8016caa:	2303      	movs	r3, #3
 8016cac:	73fb      	strb	r3, [r7, #15]
    break;
 8016cae:	e002      	b.n	8016cb6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8016cb0:	2303      	movs	r3, #3
 8016cb2:	73fb      	strb	r3, [r7, #15]
    break;
 8016cb4:	bf00      	nop
  }
  return usb_status;
 8016cb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8016cb8:	4618      	mov	r0, r3
 8016cba:	3714      	adds	r7, #20
 8016cbc:	46bd      	mov	sp, r7
 8016cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cc2:	4770      	bx	lr

08016cc4 <malloc>:
 8016cc4:	4b02      	ldr	r3, [pc, #8]	@ (8016cd0 <malloc+0xc>)
 8016cc6:	4601      	mov	r1, r0
 8016cc8:	6818      	ldr	r0, [r3, #0]
 8016cca:	f000 b825 	b.w	8016d18 <_malloc_r>
 8016cce:	bf00      	nop
 8016cd0:	24000118 	.word	0x24000118

08016cd4 <sbrk_aligned>:
 8016cd4:	b570      	push	{r4, r5, r6, lr}
 8016cd6:	4e0f      	ldr	r6, [pc, #60]	@ (8016d14 <sbrk_aligned+0x40>)
 8016cd8:	460c      	mov	r4, r1
 8016cda:	6831      	ldr	r1, [r6, #0]
 8016cdc:	4605      	mov	r5, r0
 8016cde:	b911      	cbnz	r1, 8016ce6 <sbrk_aligned+0x12>
 8016ce0:	f000 f8d0 	bl	8016e84 <_sbrk_r>
 8016ce4:	6030      	str	r0, [r6, #0]
 8016ce6:	4621      	mov	r1, r4
 8016ce8:	4628      	mov	r0, r5
 8016cea:	f000 f8cb 	bl	8016e84 <_sbrk_r>
 8016cee:	1c43      	adds	r3, r0, #1
 8016cf0:	d103      	bne.n	8016cfa <sbrk_aligned+0x26>
 8016cf2:	f04f 34ff 	mov.w	r4, #4294967295
 8016cf6:	4620      	mov	r0, r4
 8016cf8:	bd70      	pop	{r4, r5, r6, pc}
 8016cfa:	1cc4      	adds	r4, r0, #3
 8016cfc:	f024 0403 	bic.w	r4, r4, #3
 8016d00:	42a0      	cmp	r0, r4
 8016d02:	d0f8      	beq.n	8016cf6 <sbrk_aligned+0x22>
 8016d04:	1a21      	subs	r1, r4, r0
 8016d06:	4628      	mov	r0, r5
 8016d08:	f000 f8bc 	bl	8016e84 <_sbrk_r>
 8016d0c:	3001      	adds	r0, #1
 8016d0e:	d1f2      	bne.n	8016cf6 <sbrk_aligned+0x22>
 8016d10:	e7ef      	b.n	8016cf2 <sbrk_aligned+0x1e>
 8016d12:	bf00      	nop
 8016d14:	24027740 	.word	0x24027740

08016d18 <_malloc_r>:
 8016d18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016d1c:	1ccd      	adds	r5, r1, #3
 8016d1e:	f025 0503 	bic.w	r5, r5, #3
 8016d22:	3508      	adds	r5, #8
 8016d24:	2d0c      	cmp	r5, #12
 8016d26:	bf38      	it	cc
 8016d28:	250c      	movcc	r5, #12
 8016d2a:	2d00      	cmp	r5, #0
 8016d2c:	4606      	mov	r6, r0
 8016d2e:	db01      	blt.n	8016d34 <_malloc_r+0x1c>
 8016d30:	42a9      	cmp	r1, r5
 8016d32:	d904      	bls.n	8016d3e <_malloc_r+0x26>
 8016d34:	230c      	movs	r3, #12
 8016d36:	6033      	str	r3, [r6, #0]
 8016d38:	2000      	movs	r0, #0
 8016d3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016d3e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8016e14 <_malloc_r+0xfc>
 8016d42:	f000 f869 	bl	8016e18 <__malloc_lock>
 8016d46:	f8d8 3000 	ldr.w	r3, [r8]
 8016d4a:	461c      	mov	r4, r3
 8016d4c:	bb44      	cbnz	r4, 8016da0 <_malloc_r+0x88>
 8016d4e:	4629      	mov	r1, r5
 8016d50:	4630      	mov	r0, r6
 8016d52:	f7ff ffbf 	bl	8016cd4 <sbrk_aligned>
 8016d56:	1c43      	adds	r3, r0, #1
 8016d58:	4604      	mov	r4, r0
 8016d5a:	d158      	bne.n	8016e0e <_malloc_r+0xf6>
 8016d5c:	f8d8 4000 	ldr.w	r4, [r8]
 8016d60:	4627      	mov	r7, r4
 8016d62:	2f00      	cmp	r7, #0
 8016d64:	d143      	bne.n	8016dee <_malloc_r+0xd6>
 8016d66:	2c00      	cmp	r4, #0
 8016d68:	d04b      	beq.n	8016e02 <_malloc_r+0xea>
 8016d6a:	6823      	ldr	r3, [r4, #0]
 8016d6c:	4639      	mov	r1, r7
 8016d6e:	4630      	mov	r0, r6
 8016d70:	eb04 0903 	add.w	r9, r4, r3
 8016d74:	f000 f886 	bl	8016e84 <_sbrk_r>
 8016d78:	4581      	cmp	r9, r0
 8016d7a:	d142      	bne.n	8016e02 <_malloc_r+0xea>
 8016d7c:	6821      	ldr	r1, [r4, #0]
 8016d7e:	1a6d      	subs	r5, r5, r1
 8016d80:	4629      	mov	r1, r5
 8016d82:	4630      	mov	r0, r6
 8016d84:	f7ff ffa6 	bl	8016cd4 <sbrk_aligned>
 8016d88:	3001      	adds	r0, #1
 8016d8a:	d03a      	beq.n	8016e02 <_malloc_r+0xea>
 8016d8c:	6823      	ldr	r3, [r4, #0]
 8016d8e:	442b      	add	r3, r5
 8016d90:	6023      	str	r3, [r4, #0]
 8016d92:	f8d8 3000 	ldr.w	r3, [r8]
 8016d96:	685a      	ldr	r2, [r3, #4]
 8016d98:	bb62      	cbnz	r2, 8016df4 <_malloc_r+0xdc>
 8016d9a:	f8c8 7000 	str.w	r7, [r8]
 8016d9e:	e00f      	b.n	8016dc0 <_malloc_r+0xa8>
 8016da0:	6822      	ldr	r2, [r4, #0]
 8016da2:	1b52      	subs	r2, r2, r5
 8016da4:	d420      	bmi.n	8016de8 <_malloc_r+0xd0>
 8016da6:	2a0b      	cmp	r2, #11
 8016da8:	d917      	bls.n	8016dda <_malloc_r+0xc2>
 8016daa:	1961      	adds	r1, r4, r5
 8016dac:	42a3      	cmp	r3, r4
 8016dae:	6025      	str	r5, [r4, #0]
 8016db0:	bf18      	it	ne
 8016db2:	6059      	strne	r1, [r3, #4]
 8016db4:	6863      	ldr	r3, [r4, #4]
 8016db6:	bf08      	it	eq
 8016db8:	f8c8 1000 	streq.w	r1, [r8]
 8016dbc:	5162      	str	r2, [r4, r5]
 8016dbe:	604b      	str	r3, [r1, #4]
 8016dc0:	4630      	mov	r0, r6
 8016dc2:	f000 f82f 	bl	8016e24 <__malloc_unlock>
 8016dc6:	f104 000b 	add.w	r0, r4, #11
 8016dca:	1d23      	adds	r3, r4, #4
 8016dcc:	f020 0007 	bic.w	r0, r0, #7
 8016dd0:	1ac2      	subs	r2, r0, r3
 8016dd2:	bf1c      	itt	ne
 8016dd4:	1a1b      	subne	r3, r3, r0
 8016dd6:	50a3      	strne	r3, [r4, r2]
 8016dd8:	e7af      	b.n	8016d3a <_malloc_r+0x22>
 8016dda:	6862      	ldr	r2, [r4, #4]
 8016ddc:	42a3      	cmp	r3, r4
 8016dde:	bf0c      	ite	eq
 8016de0:	f8c8 2000 	streq.w	r2, [r8]
 8016de4:	605a      	strne	r2, [r3, #4]
 8016de6:	e7eb      	b.n	8016dc0 <_malloc_r+0xa8>
 8016de8:	4623      	mov	r3, r4
 8016dea:	6864      	ldr	r4, [r4, #4]
 8016dec:	e7ae      	b.n	8016d4c <_malloc_r+0x34>
 8016dee:	463c      	mov	r4, r7
 8016df0:	687f      	ldr	r7, [r7, #4]
 8016df2:	e7b6      	b.n	8016d62 <_malloc_r+0x4a>
 8016df4:	461a      	mov	r2, r3
 8016df6:	685b      	ldr	r3, [r3, #4]
 8016df8:	42a3      	cmp	r3, r4
 8016dfa:	d1fb      	bne.n	8016df4 <_malloc_r+0xdc>
 8016dfc:	2300      	movs	r3, #0
 8016dfe:	6053      	str	r3, [r2, #4]
 8016e00:	e7de      	b.n	8016dc0 <_malloc_r+0xa8>
 8016e02:	230c      	movs	r3, #12
 8016e04:	6033      	str	r3, [r6, #0]
 8016e06:	4630      	mov	r0, r6
 8016e08:	f000 f80c 	bl	8016e24 <__malloc_unlock>
 8016e0c:	e794      	b.n	8016d38 <_malloc_r+0x20>
 8016e0e:	6005      	str	r5, [r0, #0]
 8016e10:	e7d6      	b.n	8016dc0 <_malloc_r+0xa8>
 8016e12:	bf00      	nop
 8016e14:	24027744 	.word	0x24027744

08016e18 <__malloc_lock>:
 8016e18:	4801      	ldr	r0, [pc, #4]	@ (8016e20 <__malloc_lock+0x8>)
 8016e1a:	f000 b86d 	b.w	8016ef8 <__retarget_lock_acquire_recursive>
 8016e1e:	bf00      	nop
 8016e20:	24027884 	.word	0x24027884

08016e24 <__malloc_unlock>:
 8016e24:	4801      	ldr	r0, [pc, #4]	@ (8016e2c <__malloc_unlock+0x8>)
 8016e26:	f000 b868 	b.w	8016efa <__retarget_lock_release_recursive>
 8016e2a:	bf00      	nop
 8016e2c:	24027884 	.word	0x24027884

08016e30 <siprintf>:
 8016e30:	b40e      	push	{r1, r2, r3}
 8016e32:	b510      	push	{r4, lr}
 8016e34:	b09d      	sub	sp, #116	@ 0x74
 8016e36:	ab1f      	add	r3, sp, #124	@ 0x7c
 8016e38:	9002      	str	r0, [sp, #8]
 8016e3a:	9006      	str	r0, [sp, #24]
 8016e3c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8016e40:	480a      	ldr	r0, [pc, #40]	@ (8016e6c <siprintf+0x3c>)
 8016e42:	9107      	str	r1, [sp, #28]
 8016e44:	9104      	str	r1, [sp, #16]
 8016e46:	490a      	ldr	r1, [pc, #40]	@ (8016e70 <siprintf+0x40>)
 8016e48:	f853 2b04 	ldr.w	r2, [r3], #4
 8016e4c:	9105      	str	r1, [sp, #20]
 8016e4e:	2400      	movs	r4, #0
 8016e50:	a902      	add	r1, sp, #8
 8016e52:	6800      	ldr	r0, [r0, #0]
 8016e54:	9301      	str	r3, [sp, #4]
 8016e56:	941b      	str	r4, [sp, #108]	@ 0x6c
 8016e58:	f000 f904 	bl	8017064 <_svfiprintf_r>
 8016e5c:	9b02      	ldr	r3, [sp, #8]
 8016e5e:	701c      	strb	r4, [r3, #0]
 8016e60:	b01d      	add	sp, #116	@ 0x74
 8016e62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016e66:	b003      	add	sp, #12
 8016e68:	4770      	bx	lr
 8016e6a:	bf00      	nop
 8016e6c:	24000118 	.word	0x24000118
 8016e70:	ffff0208 	.word	0xffff0208

08016e74 <memset>:
 8016e74:	4402      	add	r2, r0
 8016e76:	4603      	mov	r3, r0
 8016e78:	4293      	cmp	r3, r2
 8016e7a:	d100      	bne.n	8016e7e <memset+0xa>
 8016e7c:	4770      	bx	lr
 8016e7e:	f803 1b01 	strb.w	r1, [r3], #1
 8016e82:	e7f9      	b.n	8016e78 <memset+0x4>

08016e84 <_sbrk_r>:
 8016e84:	b538      	push	{r3, r4, r5, lr}
 8016e86:	4d06      	ldr	r5, [pc, #24]	@ (8016ea0 <_sbrk_r+0x1c>)
 8016e88:	2300      	movs	r3, #0
 8016e8a:	4604      	mov	r4, r0
 8016e8c:	4608      	mov	r0, r1
 8016e8e:	602b      	str	r3, [r5, #0]
 8016e90:	f7eb fc56 	bl	8002740 <_sbrk>
 8016e94:	1c43      	adds	r3, r0, #1
 8016e96:	d102      	bne.n	8016e9e <_sbrk_r+0x1a>
 8016e98:	682b      	ldr	r3, [r5, #0]
 8016e9a:	b103      	cbz	r3, 8016e9e <_sbrk_r+0x1a>
 8016e9c:	6023      	str	r3, [r4, #0]
 8016e9e:	bd38      	pop	{r3, r4, r5, pc}
 8016ea0:	24027880 	.word	0x24027880

08016ea4 <__errno>:
 8016ea4:	4b01      	ldr	r3, [pc, #4]	@ (8016eac <__errno+0x8>)
 8016ea6:	6818      	ldr	r0, [r3, #0]
 8016ea8:	4770      	bx	lr
 8016eaa:	bf00      	nop
 8016eac:	24000118 	.word	0x24000118

08016eb0 <__libc_init_array>:
 8016eb0:	b570      	push	{r4, r5, r6, lr}
 8016eb2:	4d0d      	ldr	r5, [pc, #52]	@ (8016ee8 <__libc_init_array+0x38>)
 8016eb4:	4c0d      	ldr	r4, [pc, #52]	@ (8016eec <__libc_init_array+0x3c>)
 8016eb6:	1b64      	subs	r4, r4, r5
 8016eb8:	10a4      	asrs	r4, r4, #2
 8016eba:	2600      	movs	r6, #0
 8016ebc:	42a6      	cmp	r6, r4
 8016ebe:	d109      	bne.n	8016ed4 <__libc_init_array+0x24>
 8016ec0:	4d0b      	ldr	r5, [pc, #44]	@ (8016ef0 <__libc_init_array+0x40>)
 8016ec2:	4c0c      	ldr	r4, [pc, #48]	@ (8016ef4 <__libc_init_array+0x44>)
 8016ec4:	f000 fba6 	bl	8017614 <_init>
 8016ec8:	1b64      	subs	r4, r4, r5
 8016eca:	10a4      	asrs	r4, r4, #2
 8016ecc:	2600      	movs	r6, #0
 8016ece:	42a6      	cmp	r6, r4
 8016ed0:	d105      	bne.n	8016ede <__libc_init_array+0x2e>
 8016ed2:	bd70      	pop	{r4, r5, r6, pc}
 8016ed4:	f855 3b04 	ldr.w	r3, [r5], #4
 8016ed8:	4798      	blx	r3
 8016eda:	3601      	adds	r6, #1
 8016edc:	e7ee      	b.n	8016ebc <__libc_init_array+0xc>
 8016ede:	f855 3b04 	ldr.w	r3, [r5], #4
 8016ee2:	4798      	blx	r3
 8016ee4:	3601      	adds	r6, #1
 8016ee6:	e7f2      	b.n	8016ece <__libc_init_array+0x1e>
 8016ee8:	08017ae4 	.word	0x08017ae4
 8016eec:	08017ae4 	.word	0x08017ae4
 8016ef0:	08017ae4 	.word	0x08017ae4
 8016ef4:	08017ae8 	.word	0x08017ae8

08016ef8 <__retarget_lock_acquire_recursive>:
 8016ef8:	4770      	bx	lr

08016efa <__retarget_lock_release_recursive>:
 8016efa:	4770      	bx	lr

08016efc <memcpy>:
 8016efc:	440a      	add	r2, r1
 8016efe:	4291      	cmp	r1, r2
 8016f00:	f100 33ff 	add.w	r3, r0, #4294967295
 8016f04:	d100      	bne.n	8016f08 <memcpy+0xc>
 8016f06:	4770      	bx	lr
 8016f08:	b510      	push	{r4, lr}
 8016f0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016f0e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016f12:	4291      	cmp	r1, r2
 8016f14:	d1f9      	bne.n	8016f0a <memcpy+0xe>
 8016f16:	bd10      	pop	{r4, pc}

08016f18 <_free_r>:
 8016f18:	b538      	push	{r3, r4, r5, lr}
 8016f1a:	4605      	mov	r5, r0
 8016f1c:	2900      	cmp	r1, #0
 8016f1e:	d041      	beq.n	8016fa4 <_free_r+0x8c>
 8016f20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016f24:	1f0c      	subs	r4, r1, #4
 8016f26:	2b00      	cmp	r3, #0
 8016f28:	bfb8      	it	lt
 8016f2a:	18e4      	addlt	r4, r4, r3
 8016f2c:	f7ff ff74 	bl	8016e18 <__malloc_lock>
 8016f30:	4a1d      	ldr	r2, [pc, #116]	@ (8016fa8 <_free_r+0x90>)
 8016f32:	6813      	ldr	r3, [r2, #0]
 8016f34:	b933      	cbnz	r3, 8016f44 <_free_r+0x2c>
 8016f36:	6063      	str	r3, [r4, #4]
 8016f38:	6014      	str	r4, [r2, #0]
 8016f3a:	4628      	mov	r0, r5
 8016f3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016f40:	f7ff bf70 	b.w	8016e24 <__malloc_unlock>
 8016f44:	42a3      	cmp	r3, r4
 8016f46:	d908      	bls.n	8016f5a <_free_r+0x42>
 8016f48:	6820      	ldr	r0, [r4, #0]
 8016f4a:	1821      	adds	r1, r4, r0
 8016f4c:	428b      	cmp	r3, r1
 8016f4e:	bf01      	itttt	eq
 8016f50:	6819      	ldreq	r1, [r3, #0]
 8016f52:	685b      	ldreq	r3, [r3, #4]
 8016f54:	1809      	addeq	r1, r1, r0
 8016f56:	6021      	streq	r1, [r4, #0]
 8016f58:	e7ed      	b.n	8016f36 <_free_r+0x1e>
 8016f5a:	461a      	mov	r2, r3
 8016f5c:	685b      	ldr	r3, [r3, #4]
 8016f5e:	b10b      	cbz	r3, 8016f64 <_free_r+0x4c>
 8016f60:	42a3      	cmp	r3, r4
 8016f62:	d9fa      	bls.n	8016f5a <_free_r+0x42>
 8016f64:	6811      	ldr	r1, [r2, #0]
 8016f66:	1850      	adds	r0, r2, r1
 8016f68:	42a0      	cmp	r0, r4
 8016f6a:	d10b      	bne.n	8016f84 <_free_r+0x6c>
 8016f6c:	6820      	ldr	r0, [r4, #0]
 8016f6e:	4401      	add	r1, r0
 8016f70:	1850      	adds	r0, r2, r1
 8016f72:	4283      	cmp	r3, r0
 8016f74:	6011      	str	r1, [r2, #0]
 8016f76:	d1e0      	bne.n	8016f3a <_free_r+0x22>
 8016f78:	6818      	ldr	r0, [r3, #0]
 8016f7a:	685b      	ldr	r3, [r3, #4]
 8016f7c:	6053      	str	r3, [r2, #4]
 8016f7e:	4408      	add	r0, r1
 8016f80:	6010      	str	r0, [r2, #0]
 8016f82:	e7da      	b.n	8016f3a <_free_r+0x22>
 8016f84:	d902      	bls.n	8016f8c <_free_r+0x74>
 8016f86:	230c      	movs	r3, #12
 8016f88:	602b      	str	r3, [r5, #0]
 8016f8a:	e7d6      	b.n	8016f3a <_free_r+0x22>
 8016f8c:	6820      	ldr	r0, [r4, #0]
 8016f8e:	1821      	adds	r1, r4, r0
 8016f90:	428b      	cmp	r3, r1
 8016f92:	bf04      	itt	eq
 8016f94:	6819      	ldreq	r1, [r3, #0]
 8016f96:	685b      	ldreq	r3, [r3, #4]
 8016f98:	6063      	str	r3, [r4, #4]
 8016f9a:	bf04      	itt	eq
 8016f9c:	1809      	addeq	r1, r1, r0
 8016f9e:	6021      	streq	r1, [r4, #0]
 8016fa0:	6054      	str	r4, [r2, #4]
 8016fa2:	e7ca      	b.n	8016f3a <_free_r+0x22>
 8016fa4:	bd38      	pop	{r3, r4, r5, pc}
 8016fa6:	bf00      	nop
 8016fa8:	24027744 	.word	0x24027744

08016fac <__ssputs_r>:
 8016fac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016fb0:	688e      	ldr	r6, [r1, #8]
 8016fb2:	461f      	mov	r7, r3
 8016fb4:	42be      	cmp	r6, r7
 8016fb6:	680b      	ldr	r3, [r1, #0]
 8016fb8:	4682      	mov	sl, r0
 8016fba:	460c      	mov	r4, r1
 8016fbc:	4690      	mov	r8, r2
 8016fbe:	d82d      	bhi.n	801701c <__ssputs_r+0x70>
 8016fc0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8016fc4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8016fc8:	d026      	beq.n	8017018 <__ssputs_r+0x6c>
 8016fca:	6965      	ldr	r5, [r4, #20]
 8016fcc:	6909      	ldr	r1, [r1, #16]
 8016fce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016fd2:	eba3 0901 	sub.w	r9, r3, r1
 8016fd6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8016fda:	1c7b      	adds	r3, r7, #1
 8016fdc:	444b      	add	r3, r9
 8016fde:	106d      	asrs	r5, r5, #1
 8016fe0:	429d      	cmp	r5, r3
 8016fe2:	bf38      	it	cc
 8016fe4:	461d      	movcc	r5, r3
 8016fe6:	0553      	lsls	r3, r2, #21
 8016fe8:	d527      	bpl.n	801703a <__ssputs_r+0x8e>
 8016fea:	4629      	mov	r1, r5
 8016fec:	f7ff fe94 	bl	8016d18 <_malloc_r>
 8016ff0:	4606      	mov	r6, r0
 8016ff2:	b360      	cbz	r0, 801704e <__ssputs_r+0xa2>
 8016ff4:	6921      	ldr	r1, [r4, #16]
 8016ff6:	464a      	mov	r2, r9
 8016ff8:	f7ff ff80 	bl	8016efc <memcpy>
 8016ffc:	89a3      	ldrh	r3, [r4, #12]
 8016ffe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8017002:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8017006:	81a3      	strh	r3, [r4, #12]
 8017008:	6126      	str	r6, [r4, #16]
 801700a:	6165      	str	r5, [r4, #20]
 801700c:	444e      	add	r6, r9
 801700e:	eba5 0509 	sub.w	r5, r5, r9
 8017012:	6026      	str	r6, [r4, #0]
 8017014:	60a5      	str	r5, [r4, #8]
 8017016:	463e      	mov	r6, r7
 8017018:	42be      	cmp	r6, r7
 801701a:	d900      	bls.n	801701e <__ssputs_r+0x72>
 801701c:	463e      	mov	r6, r7
 801701e:	6820      	ldr	r0, [r4, #0]
 8017020:	4632      	mov	r2, r6
 8017022:	4641      	mov	r1, r8
 8017024:	f000 faa6 	bl	8017574 <memmove>
 8017028:	68a3      	ldr	r3, [r4, #8]
 801702a:	1b9b      	subs	r3, r3, r6
 801702c:	60a3      	str	r3, [r4, #8]
 801702e:	6823      	ldr	r3, [r4, #0]
 8017030:	4433      	add	r3, r6
 8017032:	6023      	str	r3, [r4, #0]
 8017034:	2000      	movs	r0, #0
 8017036:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801703a:	462a      	mov	r2, r5
 801703c:	f000 fab4 	bl	80175a8 <_realloc_r>
 8017040:	4606      	mov	r6, r0
 8017042:	2800      	cmp	r0, #0
 8017044:	d1e0      	bne.n	8017008 <__ssputs_r+0x5c>
 8017046:	6921      	ldr	r1, [r4, #16]
 8017048:	4650      	mov	r0, sl
 801704a:	f7ff ff65 	bl	8016f18 <_free_r>
 801704e:	230c      	movs	r3, #12
 8017050:	f8ca 3000 	str.w	r3, [sl]
 8017054:	89a3      	ldrh	r3, [r4, #12]
 8017056:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801705a:	81a3      	strh	r3, [r4, #12]
 801705c:	f04f 30ff 	mov.w	r0, #4294967295
 8017060:	e7e9      	b.n	8017036 <__ssputs_r+0x8a>
	...

08017064 <_svfiprintf_r>:
 8017064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017068:	4698      	mov	r8, r3
 801706a:	898b      	ldrh	r3, [r1, #12]
 801706c:	061b      	lsls	r3, r3, #24
 801706e:	b09d      	sub	sp, #116	@ 0x74
 8017070:	4607      	mov	r7, r0
 8017072:	460d      	mov	r5, r1
 8017074:	4614      	mov	r4, r2
 8017076:	d510      	bpl.n	801709a <_svfiprintf_r+0x36>
 8017078:	690b      	ldr	r3, [r1, #16]
 801707a:	b973      	cbnz	r3, 801709a <_svfiprintf_r+0x36>
 801707c:	2140      	movs	r1, #64	@ 0x40
 801707e:	f7ff fe4b 	bl	8016d18 <_malloc_r>
 8017082:	6028      	str	r0, [r5, #0]
 8017084:	6128      	str	r0, [r5, #16]
 8017086:	b930      	cbnz	r0, 8017096 <_svfiprintf_r+0x32>
 8017088:	230c      	movs	r3, #12
 801708a:	603b      	str	r3, [r7, #0]
 801708c:	f04f 30ff 	mov.w	r0, #4294967295
 8017090:	b01d      	add	sp, #116	@ 0x74
 8017092:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017096:	2340      	movs	r3, #64	@ 0x40
 8017098:	616b      	str	r3, [r5, #20]
 801709a:	2300      	movs	r3, #0
 801709c:	9309      	str	r3, [sp, #36]	@ 0x24
 801709e:	2320      	movs	r3, #32
 80170a0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80170a4:	f8cd 800c 	str.w	r8, [sp, #12]
 80170a8:	2330      	movs	r3, #48	@ 0x30
 80170aa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8017248 <_svfiprintf_r+0x1e4>
 80170ae:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80170b2:	f04f 0901 	mov.w	r9, #1
 80170b6:	4623      	mov	r3, r4
 80170b8:	469a      	mov	sl, r3
 80170ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80170be:	b10a      	cbz	r2, 80170c4 <_svfiprintf_r+0x60>
 80170c0:	2a25      	cmp	r2, #37	@ 0x25
 80170c2:	d1f9      	bne.n	80170b8 <_svfiprintf_r+0x54>
 80170c4:	ebba 0b04 	subs.w	fp, sl, r4
 80170c8:	d00b      	beq.n	80170e2 <_svfiprintf_r+0x7e>
 80170ca:	465b      	mov	r3, fp
 80170cc:	4622      	mov	r2, r4
 80170ce:	4629      	mov	r1, r5
 80170d0:	4638      	mov	r0, r7
 80170d2:	f7ff ff6b 	bl	8016fac <__ssputs_r>
 80170d6:	3001      	adds	r0, #1
 80170d8:	f000 80a7 	beq.w	801722a <_svfiprintf_r+0x1c6>
 80170dc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80170de:	445a      	add	r2, fp
 80170e0:	9209      	str	r2, [sp, #36]	@ 0x24
 80170e2:	f89a 3000 	ldrb.w	r3, [sl]
 80170e6:	2b00      	cmp	r3, #0
 80170e8:	f000 809f 	beq.w	801722a <_svfiprintf_r+0x1c6>
 80170ec:	2300      	movs	r3, #0
 80170ee:	f04f 32ff 	mov.w	r2, #4294967295
 80170f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80170f6:	f10a 0a01 	add.w	sl, sl, #1
 80170fa:	9304      	str	r3, [sp, #16]
 80170fc:	9307      	str	r3, [sp, #28]
 80170fe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8017102:	931a      	str	r3, [sp, #104]	@ 0x68
 8017104:	4654      	mov	r4, sl
 8017106:	2205      	movs	r2, #5
 8017108:	f814 1b01 	ldrb.w	r1, [r4], #1
 801710c:	484e      	ldr	r0, [pc, #312]	@ (8017248 <_svfiprintf_r+0x1e4>)
 801710e:	f7e9 f8ef 	bl	80002f0 <memchr>
 8017112:	9a04      	ldr	r2, [sp, #16]
 8017114:	b9d8      	cbnz	r0, 801714e <_svfiprintf_r+0xea>
 8017116:	06d0      	lsls	r0, r2, #27
 8017118:	bf44      	itt	mi
 801711a:	2320      	movmi	r3, #32
 801711c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017120:	0711      	lsls	r1, r2, #28
 8017122:	bf44      	itt	mi
 8017124:	232b      	movmi	r3, #43	@ 0x2b
 8017126:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801712a:	f89a 3000 	ldrb.w	r3, [sl]
 801712e:	2b2a      	cmp	r3, #42	@ 0x2a
 8017130:	d015      	beq.n	801715e <_svfiprintf_r+0xfa>
 8017132:	9a07      	ldr	r2, [sp, #28]
 8017134:	4654      	mov	r4, sl
 8017136:	2000      	movs	r0, #0
 8017138:	f04f 0c0a 	mov.w	ip, #10
 801713c:	4621      	mov	r1, r4
 801713e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017142:	3b30      	subs	r3, #48	@ 0x30
 8017144:	2b09      	cmp	r3, #9
 8017146:	d94b      	bls.n	80171e0 <_svfiprintf_r+0x17c>
 8017148:	b1b0      	cbz	r0, 8017178 <_svfiprintf_r+0x114>
 801714a:	9207      	str	r2, [sp, #28]
 801714c:	e014      	b.n	8017178 <_svfiprintf_r+0x114>
 801714e:	eba0 0308 	sub.w	r3, r0, r8
 8017152:	fa09 f303 	lsl.w	r3, r9, r3
 8017156:	4313      	orrs	r3, r2
 8017158:	9304      	str	r3, [sp, #16]
 801715a:	46a2      	mov	sl, r4
 801715c:	e7d2      	b.n	8017104 <_svfiprintf_r+0xa0>
 801715e:	9b03      	ldr	r3, [sp, #12]
 8017160:	1d19      	adds	r1, r3, #4
 8017162:	681b      	ldr	r3, [r3, #0]
 8017164:	9103      	str	r1, [sp, #12]
 8017166:	2b00      	cmp	r3, #0
 8017168:	bfbb      	ittet	lt
 801716a:	425b      	neglt	r3, r3
 801716c:	f042 0202 	orrlt.w	r2, r2, #2
 8017170:	9307      	strge	r3, [sp, #28]
 8017172:	9307      	strlt	r3, [sp, #28]
 8017174:	bfb8      	it	lt
 8017176:	9204      	strlt	r2, [sp, #16]
 8017178:	7823      	ldrb	r3, [r4, #0]
 801717a:	2b2e      	cmp	r3, #46	@ 0x2e
 801717c:	d10a      	bne.n	8017194 <_svfiprintf_r+0x130>
 801717e:	7863      	ldrb	r3, [r4, #1]
 8017180:	2b2a      	cmp	r3, #42	@ 0x2a
 8017182:	d132      	bne.n	80171ea <_svfiprintf_r+0x186>
 8017184:	9b03      	ldr	r3, [sp, #12]
 8017186:	1d1a      	adds	r2, r3, #4
 8017188:	681b      	ldr	r3, [r3, #0]
 801718a:	9203      	str	r2, [sp, #12]
 801718c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8017190:	3402      	adds	r4, #2
 8017192:	9305      	str	r3, [sp, #20]
 8017194:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8017258 <_svfiprintf_r+0x1f4>
 8017198:	7821      	ldrb	r1, [r4, #0]
 801719a:	2203      	movs	r2, #3
 801719c:	4650      	mov	r0, sl
 801719e:	f7e9 f8a7 	bl	80002f0 <memchr>
 80171a2:	b138      	cbz	r0, 80171b4 <_svfiprintf_r+0x150>
 80171a4:	9b04      	ldr	r3, [sp, #16]
 80171a6:	eba0 000a 	sub.w	r0, r0, sl
 80171aa:	2240      	movs	r2, #64	@ 0x40
 80171ac:	4082      	lsls	r2, r0
 80171ae:	4313      	orrs	r3, r2
 80171b0:	3401      	adds	r4, #1
 80171b2:	9304      	str	r3, [sp, #16]
 80171b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80171b8:	4824      	ldr	r0, [pc, #144]	@ (801724c <_svfiprintf_r+0x1e8>)
 80171ba:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80171be:	2206      	movs	r2, #6
 80171c0:	f7e9 f896 	bl	80002f0 <memchr>
 80171c4:	2800      	cmp	r0, #0
 80171c6:	d036      	beq.n	8017236 <_svfiprintf_r+0x1d2>
 80171c8:	4b21      	ldr	r3, [pc, #132]	@ (8017250 <_svfiprintf_r+0x1ec>)
 80171ca:	bb1b      	cbnz	r3, 8017214 <_svfiprintf_r+0x1b0>
 80171cc:	9b03      	ldr	r3, [sp, #12]
 80171ce:	3307      	adds	r3, #7
 80171d0:	f023 0307 	bic.w	r3, r3, #7
 80171d4:	3308      	adds	r3, #8
 80171d6:	9303      	str	r3, [sp, #12]
 80171d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80171da:	4433      	add	r3, r6
 80171dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80171de:	e76a      	b.n	80170b6 <_svfiprintf_r+0x52>
 80171e0:	fb0c 3202 	mla	r2, ip, r2, r3
 80171e4:	460c      	mov	r4, r1
 80171e6:	2001      	movs	r0, #1
 80171e8:	e7a8      	b.n	801713c <_svfiprintf_r+0xd8>
 80171ea:	2300      	movs	r3, #0
 80171ec:	3401      	adds	r4, #1
 80171ee:	9305      	str	r3, [sp, #20]
 80171f0:	4619      	mov	r1, r3
 80171f2:	f04f 0c0a 	mov.w	ip, #10
 80171f6:	4620      	mov	r0, r4
 80171f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80171fc:	3a30      	subs	r2, #48	@ 0x30
 80171fe:	2a09      	cmp	r2, #9
 8017200:	d903      	bls.n	801720a <_svfiprintf_r+0x1a6>
 8017202:	2b00      	cmp	r3, #0
 8017204:	d0c6      	beq.n	8017194 <_svfiprintf_r+0x130>
 8017206:	9105      	str	r1, [sp, #20]
 8017208:	e7c4      	b.n	8017194 <_svfiprintf_r+0x130>
 801720a:	fb0c 2101 	mla	r1, ip, r1, r2
 801720e:	4604      	mov	r4, r0
 8017210:	2301      	movs	r3, #1
 8017212:	e7f0      	b.n	80171f6 <_svfiprintf_r+0x192>
 8017214:	ab03      	add	r3, sp, #12
 8017216:	9300      	str	r3, [sp, #0]
 8017218:	462a      	mov	r2, r5
 801721a:	4b0e      	ldr	r3, [pc, #56]	@ (8017254 <_svfiprintf_r+0x1f0>)
 801721c:	a904      	add	r1, sp, #16
 801721e:	4638      	mov	r0, r7
 8017220:	f3af 8000 	nop.w
 8017224:	1c42      	adds	r2, r0, #1
 8017226:	4606      	mov	r6, r0
 8017228:	d1d6      	bne.n	80171d8 <_svfiprintf_r+0x174>
 801722a:	89ab      	ldrh	r3, [r5, #12]
 801722c:	065b      	lsls	r3, r3, #25
 801722e:	f53f af2d 	bmi.w	801708c <_svfiprintf_r+0x28>
 8017232:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017234:	e72c      	b.n	8017090 <_svfiprintf_r+0x2c>
 8017236:	ab03      	add	r3, sp, #12
 8017238:	9300      	str	r3, [sp, #0]
 801723a:	462a      	mov	r2, r5
 801723c:	4b05      	ldr	r3, [pc, #20]	@ (8017254 <_svfiprintf_r+0x1f0>)
 801723e:	a904      	add	r1, sp, #16
 8017240:	4638      	mov	r0, r7
 8017242:	f000 f879 	bl	8017338 <_printf_i>
 8017246:	e7ed      	b.n	8017224 <_svfiprintf_r+0x1c0>
 8017248:	08017aa8 	.word	0x08017aa8
 801724c:	08017ab2 	.word	0x08017ab2
 8017250:	00000000 	.word	0x00000000
 8017254:	08016fad 	.word	0x08016fad
 8017258:	08017aae 	.word	0x08017aae

0801725c <_printf_common>:
 801725c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017260:	4616      	mov	r6, r2
 8017262:	4698      	mov	r8, r3
 8017264:	688a      	ldr	r2, [r1, #8]
 8017266:	690b      	ldr	r3, [r1, #16]
 8017268:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801726c:	4293      	cmp	r3, r2
 801726e:	bfb8      	it	lt
 8017270:	4613      	movlt	r3, r2
 8017272:	6033      	str	r3, [r6, #0]
 8017274:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8017278:	4607      	mov	r7, r0
 801727a:	460c      	mov	r4, r1
 801727c:	b10a      	cbz	r2, 8017282 <_printf_common+0x26>
 801727e:	3301      	adds	r3, #1
 8017280:	6033      	str	r3, [r6, #0]
 8017282:	6823      	ldr	r3, [r4, #0]
 8017284:	0699      	lsls	r1, r3, #26
 8017286:	bf42      	ittt	mi
 8017288:	6833      	ldrmi	r3, [r6, #0]
 801728a:	3302      	addmi	r3, #2
 801728c:	6033      	strmi	r3, [r6, #0]
 801728e:	6825      	ldr	r5, [r4, #0]
 8017290:	f015 0506 	ands.w	r5, r5, #6
 8017294:	d106      	bne.n	80172a4 <_printf_common+0x48>
 8017296:	f104 0a19 	add.w	sl, r4, #25
 801729a:	68e3      	ldr	r3, [r4, #12]
 801729c:	6832      	ldr	r2, [r6, #0]
 801729e:	1a9b      	subs	r3, r3, r2
 80172a0:	42ab      	cmp	r3, r5
 80172a2:	dc26      	bgt.n	80172f2 <_printf_common+0x96>
 80172a4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80172a8:	6822      	ldr	r2, [r4, #0]
 80172aa:	3b00      	subs	r3, #0
 80172ac:	bf18      	it	ne
 80172ae:	2301      	movne	r3, #1
 80172b0:	0692      	lsls	r2, r2, #26
 80172b2:	d42b      	bmi.n	801730c <_printf_common+0xb0>
 80172b4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80172b8:	4641      	mov	r1, r8
 80172ba:	4638      	mov	r0, r7
 80172bc:	47c8      	blx	r9
 80172be:	3001      	adds	r0, #1
 80172c0:	d01e      	beq.n	8017300 <_printf_common+0xa4>
 80172c2:	6823      	ldr	r3, [r4, #0]
 80172c4:	6922      	ldr	r2, [r4, #16]
 80172c6:	f003 0306 	and.w	r3, r3, #6
 80172ca:	2b04      	cmp	r3, #4
 80172cc:	bf02      	ittt	eq
 80172ce:	68e5      	ldreq	r5, [r4, #12]
 80172d0:	6833      	ldreq	r3, [r6, #0]
 80172d2:	1aed      	subeq	r5, r5, r3
 80172d4:	68a3      	ldr	r3, [r4, #8]
 80172d6:	bf0c      	ite	eq
 80172d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80172dc:	2500      	movne	r5, #0
 80172de:	4293      	cmp	r3, r2
 80172e0:	bfc4      	itt	gt
 80172e2:	1a9b      	subgt	r3, r3, r2
 80172e4:	18ed      	addgt	r5, r5, r3
 80172e6:	2600      	movs	r6, #0
 80172e8:	341a      	adds	r4, #26
 80172ea:	42b5      	cmp	r5, r6
 80172ec:	d11a      	bne.n	8017324 <_printf_common+0xc8>
 80172ee:	2000      	movs	r0, #0
 80172f0:	e008      	b.n	8017304 <_printf_common+0xa8>
 80172f2:	2301      	movs	r3, #1
 80172f4:	4652      	mov	r2, sl
 80172f6:	4641      	mov	r1, r8
 80172f8:	4638      	mov	r0, r7
 80172fa:	47c8      	blx	r9
 80172fc:	3001      	adds	r0, #1
 80172fe:	d103      	bne.n	8017308 <_printf_common+0xac>
 8017300:	f04f 30ff 	mov.w	r0, #4294967295
 8017304:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017308:	3501      	adds	r5, #1
 801730a:	e7c6      	b.n	801729a <_printf_common+0x3e>
 801730c:	18e1      	adds	r1, r4, r3
 801730e:	1c5a      	adds	r2, r3, #1
 8017310:	2030      	movs	r0, #48	@ 0x30
 8017312:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8017316:	4422      	add	r2, r4
 8017318:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801731c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8017320:	3302      	adds	r3, #2
 8017322:	e7c7      	b.n	80172b4 <_printf_common+0x58>
 8017324:	2301      	movs	r3, #1
 8017326:	4622      	mov	r2, r4
 8017328:	4641      	mov	r1, r8
 801732a:	4638      	mov	r0, r7
 801732c:	47c8      	blx	r9
 801732e:	3001      	adds	r0, #1
 8017330:	d0e6      	beq.n	8017300 <_printf_common+0xa4>
 8017332:	3601      	adds	r6, #1
 8017334:	e7d9      	b.n	80172ea <_printf_common+0x8e>
	...

08017338 <_printf_i>:
 8017338:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801733c:	7e0f      	ldrb	r7, [r1, #24]
 801733e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8017340:	2f78      	cmp	r7, #120	@ 0x78
 8017342:	4691      	mov	r9, r2
 8017344:	4680      	mov	r8, r0
 8017346:	460c      	mov	r4, r1
 8017348:	469a      	mov	sl, r3
 801734a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801734e:	d807      	bhi.n	8017360 <_printf_i+0x28>
 8017350:	2f62      	cmp	r7, #98	@ 0x62
 8017352:	d80a      	bhi.n	801736a <_printf_i+0x32>
 8017354:	2f00      	cmp	r7, #0
 8017356:	f000 80d1 	beq.w	80174fc <_printf_i+0x1c4>
 801735a:	2f58      	cmp	r7, #88	@ 0x58
 801735c:	f000 80b8 	beq.w	80174d0 <_printf_i+0x198>
 8017360:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8017364:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8017368:	e03a      	b.n	80173e0 <_printf_i+0xa8>
 801736a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801736e:	2b15      	cmp	r3, #21
 8017370:	d8f6      	bhi.n	8017360 <_printf_i+0x28>
 8017372:	a101      	add	r1, pc, #4	@ (adr r1, 8017378 <_printf_i+0x40>)
 8017374:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8017378:	080173d1 	.word	0x080173d1
 801737c:	080173e5 	.word	0x080173e5
 8017380:	08017361 	.word	0x08017361
 8017384:	08017361 	.word	0x08017361
 8017388:	08017361 	.word	0x08017361
 801738c:	08017361 	.word	0x08017361
 8017390:	080173e5 	.word	0x080173e5
 8017394:	08017361 	.word	0x08017361
 8017398:	08017361 	.word	0x08017361
 801739c:	08017361 	.word	0x08017361
 80173a0:	08017361 	.word	0x08017361
 80173a4:	080174e3 	.word	0x080174e3
 80173a8:	0801740f 	.word	0x0801740f
 80173ac:	0801749d 	.word	0x0801749d
 80173b0:	08017361 	.word	0x08017361
 80173b4:	08017361 	.word	0x08017361
 80173b8:	08017505 	.word	0x08017505
 80173bc:	08017361 	.word	0x08017361
 80173c0:	0801740f 	.word	0x0801740f
 80173c4:	08017361 	.word	0x08017361
 80173c8:	08017361 	.word	0x08017361
 80173cc:	080174a5 	.word	0x080174a5
 80173d0:	6833      	ldr	r3, [r6, #0]
 80173d2:	1d1a      	adds	r2, r3, #4
 80173d4:	681b      	ldr	r3, [r3, #0]
 80173d6:	6032      	str	r2, [r6, #0]
 80173d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80173dc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80173e0:	2301      	movs	r3, #1
 80173e2:	e09c      	b.n	801751e <_printf_i+0x1e6>
 80173e4:	6833      	ldr	r3, [r6, #0]
 80173e6:	6820      	ldr	r0, [r4, #0]
 80173e8:	1d19      	adds	r1, r3, #4
 80173ea:	6031      	str	r1, [r6, #0]
 80173ec:	0606      	lsls	r6, r0, #24
 80173ee:	d501      	bpl.n	80173f4 <_printf_i+0xbc>
 80173f0:	681d      	ldr	r5, [r3, #0]
 80173f2:	e003      	b.n	80173fc <_printf_i+0xc4>
 80173f4:	0645      	lsls	r5, r0, #25
 80173f6:	d5fb      	bpl.n	80173f0 <_printf_i+0xb8>
 80173f8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80173fc:	2d00      	cmp	r5, #0
 80173fe:	da03      	bge.n	8017408 <_printf_i+0xd0>
 8017400:	232d      	movs	r3, #45	@ 0x2d
 8017402:	426d      	negs	r5, r5
 8017404:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8017408:	4858      	ldr	r0, [pc, #352]	@ (801756c <_printf_i+0x234>)
 801740a:	230a      	movs	r3, #10
 801740c:	e011      	b.n	8017432 <_printf_i+0xfa>
 801740e:	6821      	ldr	r1, [r4, #0]
 8017410:	6833      	ldr	r3, [r6, #0]
 8017412:	0608      	lsls	r0, r1, #24
 8017414:	f853 5b04 	ldr.w	r5, [r3], #4
 8017418:	d402      	bmi.n	8017420 <_printf_i+0xe8>
 801741a:	0649      	lsls	r1, r1, #25
 801741c:	bf48      	it	mi
 801741e:	b2ad      	uxthmi	r5, r5
 8017420:	2f6f      	cmp	r7, #111	@ 0x6f
 8017422:	4852      	ldr	r0, [pc, #328]	@ (801756c <_printf_i+0x234>)
 8017424:	6033      	str	r3, [r6, #0]
 8017426:	bf14      	ite	ne
 8017428:	230a      	movne	r3, #10
 801742a:	2308      	moveq	r3, #8
 801742c:	2100      	movs	r1, #0
 801742e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8017432:	6866      	ldr	r6, [r4, #4]
 8017434:	60a6      	str	r6, [r4, #8]
 8017436:	2e00      	cmp	r6, #0
 8017438:	db05      	blt.n	8017446 <_printf_i+0x10e>
 801743a:	6821      	ldr	r1, [r4, #0]
 801743c:	432e      	orrs	r6, r5
 801743e:	f021 0104 	bic.w	r1, r1, #4
 8017442:	6021      	str	r1, [r4, #0]
 8017444:	d04b      	beq.n	80174de <_printf_i+0x1a6>
 8017446:	4616      	mov	r6, r2
 8017448:	fbb5 f1f3 	udiv	r1, r5, r3
 801744c:	fb03 5711 	mls	r7, r3, r1, r5
 8017450:	5dc7      	ldrb	r7, [r0, r7]
 8017452:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8017456:	462f      	mov	r7, r5
 8017458:	42bb      	cmp	r3, r7
 801745a:	460d      	mov	r5, r1
 801745c:	d9f4      	bls.n	8017448 <_printf_i+0x110>
 801745e:	2b08      	cmp	r3, #8
 8017460:	d10b      	bne.n	801747a <_printf_i+0x142>
 8017462:	6823      	ldr	r3, [r4, #0]
 8017464:	07df      	lsls	r7, r3, #31
 8017466:	d508      	bpl.n	801747a <_printf_i+0x142>
 8017468:	6923      	ldr	r3, [r4, #16]
 801746a:	6861      	ldr	r1, [r4, #4]
 801746c:	4299      	cmp	r1, r3
 801746e:	bfde      	ittt	le
 8017470:	2330      	movle	r3, #48	@ 0x30
 8017472:	f806 3c01 	strble.w	r3, [r6, #-1]
 8017476:	f106 36ff 	addle.w	r6, r6, #4294967295
 801747a:	1b92      	subs	r2, r2, r6
 801747c:	6122      	str	r2, [r4, #16]
 801747e:	f8cd a000 	str.w	sl, [sp]
 8017482:	464b      	mov	r3, r9
 8017484:	aa03      	add	r2, sp, #12
 8017486:	4621      	mov	r1, r4
 8017488:	4640      	mov	r0, r8
 801748a:	f7ff fee7 	bl	801725c <_printf_common>
 801748e:	3001      	adds	r0, #1
 8017490:	d14a      	bne.n	8017528 <_printf_i+0x1f0>
 8017492:	f04f 30ff 	mov.w	r0, #4294967295
 8017496:	b004      	add	sp, #16
 8017498:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801749c:	6823      	ldr	r3, [r4, #0]
 801749e:	f043 0320 	orr.w	r3, r3, #32
 80174a2:	6023      	str	r3, [r4, #0]
 80174a4:	4832      	ldr	r0, [pc, #200]	@ (8017570 <_printf_i+0x238>)
 80174a6:	2778      	movs	r7, #120	@ 0x78
 80174a8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80174ac:	6823      	ldr	r3, [r4, #0]
 80174ae:	6831      	ldr	r1, [r6, #0]
 80174b0:	061f      	lsls	r7, r3, #24
 80174b2:	f851 5b04 	ldr.w	r5, [r1], #4
 80174b6:	d402      	bmi.n	80174be <_printf_i+0x186>
 80174b8:	065f      	lsls	r7, r3, #25
 80174ba:	bf48      	it	mi
 80174bc:	b2ad      	uxthmi	r5, r5
 80174be:	6031      	str	r1, [r6, #0]
 80174c0:	07d9      	lsls	r1, r3, #31
 80174c2:	bf44      	itt	mi
 80174c4:	f043 0320 	orrmi.w	r3, r3, #32
 80174c8:	6023      	strmi	r3, [r4, #0]
 80174ca:	b11d      	cbz	r5, 80174d4 <_printf_i+0x19c>
 80174cc:	2310      	movs	r3, #16
 80174ce:	e7ad      	b.n	801742c <_printf_i+0xf4>
 80174d0:	4826      	ldr	r0, [pc, #152]	@ (801756c <_printf_i+0x234>)
 80174d2:	e7e9      	b.n	80174a8 <_printf_i+0x170>
 80174d4:	6823      	ldr	r3, [r4, #0]
 80174d6:	f023 0320 	bic.w	r3, r3, #32
 80174da:	6023      	str	r3, [r4, #0]
 80174dc:	e7f6      	b.n	80174cc <_printf_i+0x194>
 80174de:	4616      	mov	r6, r2
 80174e0:	e7bd      	b.n	801745e <_printf_i+0x126>
 80174e2:	6833      	ldr	r3, [r6, #0]
 80174e4:	6825      	ldr	r5, [r4, #0]
 80174e6:	6961      	ldr	r1, [r4, #20]
 80174e8:	1d18      	adds	r0, r3, #4
 80174ea:	6030      	str	r0, [r6, #0]
 80174ec:	062e      	lsls	r6, r5, #24
 80174ee:	681b      	ldr	r3, [r3, #0]
 80174f0:	d501      	bpl.n	80174f6 <_printf_i+0x1be>
 80174f2:	6019      	str	r1, [r3, #0]
 80174f4:	e002      	b.n	80174fc <_printf_i+0x1c4>
 80174f6:	0668      	lsls	r0, r5, #25
 80174f8:	d5fb      	bpl.n	80174f2 <_printf_i+0x1ba>
 80174fa:	8019      	strh	r1, [r3, #0]
 80174fc:	2300      	movs	r3, #0
 80174fe:	6123      	str	r3, [r4, #16]
 8017500:	4616      	mov	r6, r2
 8017502:	e7bc      	b.n	801747e <_printf_i+0x146>
 8017504:	6833      	ldr	r3, [r6, #0]
 8017506:	1d1a      	adds	r2, r3, #4
 8017508:	6032      	str	r2, [r6, #0]
 801750a:	681e      	ldr	r6, [r3, #0]
 801750c:	6862      	ldr	r2, [r4, #4]
 801750e:	2100      	movs	r1, #0
 8017510:	4630      	mov	r0, r6
 8017512:	f7e8 feed 	bl	80002f0 <memchr>
 8017516:	b108      	cbz	r0, 801751c <_printf_i+0x1e4>
 8017518:	1b80      	subs	r0, r0, r6
 801751a:	6060      	str	r0, [r4, #4]
 801751c:	6863      	ldr	r3, [r4, #4]
 801751e:	6123      	str	r3, [r4, #16]
 8017520:	2300      	movs	r3, #0
 8017522:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8017526:	e7aa      	b.n	801747e <_printf_i+0x146>
 8017528:	6923      	ldr	r3, [r4, #16]
 801752a:	4632      	mov	r2, r6
 801752c:	4649      	mov	r1, r9
 801752e:	4640      	mov	r0, r8
 8017530:	47d0      	blx	sl
 8017532:	3001      	adds	r0, #1
 8017534:	d0ad      	beq.n	8017492 <_printf_i+0x15a>
 8017536:	6823      	ldr	r3, [r4, #0]
 8017538:	079b      	lsls	r3, r3, #30
 801753a:	d413      	bmi.n	8017564 <_printf_i+0x22c>
 801753c:	68e0      	ldr	r0, [r4, #12]
 801753e:	9b03      	ldr	r3, [sp, #12]
 8017540:	4298      	cmp	r0, r3
 8017542:	bfb8      	it	lt
 8017544:	4618      	movlt	r0, r3
 8017546:	e7a6      	b.n	8017496 <_printf_i+0x15e>
 8017548:	2301      	movs	r3, #1
 801754a:	4632      	mov	r2, r6
 801754c:	4649      	mov	r1, r9
 801754e:	4640      	mov	r0, r8
 8017550:	47d0      	blx	sl
 8017552:	3001      	adds	r0, #1
 8017554:	d09d      	beq.n	8017492 <_printf_i+0x15a>
 8017556:	3501      	adds	r5, #1
 8017558:	68e3      	ldr	r3, [r4, #12]
 801755a:	9903      	ldr	r1, [sp, #12]
 801755c:	1a5b      	subs	r3, r3, r1
 801755e:	42ab      	cmp	r3, r5
 8017560:	dcf2      	bgt.n	8017548 <_printf_i+0x210>
 8017562:	e7eb      	b.n	801753c <_printf_i+0x204>
 8017564:	2500      	movs	r5, #0
 8017566:	f104 0619 	add.w	r6, r4, #25
 801756a:	e7f5      	b.n	8017558 <_printf_i+0x220>
 801756c:	08017ab9 	.word	0x08017ab9
 8017570:	08017aca 	.word	0x08017aca

08017574 <memmove>:
 8017574:	4288      	cmp	r0, r1
 8017576:	b510      	push	{r4, lr}
 8017578:	eb01 0402 	add.w	r4, r1, r2
 801757c:	d902      	bls.n	8017584 <memmove+0x10>
 801757e:	4284      	cmp	r4, r0
 8017580:	4623      	mov	r3, r4
 8017582:	d807      	bhi.n	8017594 <memmove+0x20>
 8017584:	1e43      	subs	r3, r0, #1
 8017586:	42a1      	cmp	r1, r4
 8017588:	d008      	beq.n	801759c <memmove+0x28>
 801758a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801758e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8017592:	e7f8      	b.n	8017586 <memmove+0x12>
 8017594:	4402      	add	r2, r0
 8017596:	4601      	mov	r1, r0
 8017598:	428a      	cmp	r2, r1
 801759a:	d100      	bne.n	801759e <memmove+0x2a>
 801759c:	bd10      	pop	{r4, pc}
 801759e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80175a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80175a6:	e7f7      	b.n	8017598 <memmove+0x24>

080175a8 <_realloc_r>:
 80175a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80175ac:	4607      	mov	r7, r0
 80175ae:	4614      	mov	r4, r2
 80175b0:	460d      	mov	r5, r1
 80175b2:	b921      	cbnz	r1, 80175be <_realloc_r+0x16>
 80175b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80175b8:	4611      	mov	r1, r2
 80175ba:	f7ff bbad 	b.w	8016d18 <_malloc_r>
 80175be:	b92a      	cbnz	r2, 80175cc <_realloc_r+0x24>
 80175c0:	f7ff fcaa 	bl	8016f18 <_free_r>
 80175c4:	4625      	mov	r5, r4
 80175c6:	4628      	mov	r0, r5
 80175c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80175cc:	f000 f81a 	bl	8017604 <_malloc_usable_size_r>
 80175d0:	4284      	cmp	r4, r0
 80175d2:	4606      	mov	r6, r0
 80175d4:	d802      	bhi.n	80175dc <_realloc_r+0x34>
 80175d6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80175da:	d8f4      	bhi.n	80175c6 <_realloc_r+0x1e>
 80175dc:	4621      	mov	r1, r4
 80175de:	4638      	mov	r0, r7
 80175e0:	f7ff fb9a 	bl	8016d18 <_malloc_r>
 80175e4:	4680      	mov	r8, r0
 80175e6:	b908      	cbnz	r0, 80175ec <_realloc_r+0x44>
 80175e8:	4645      	mov	r5, r8
 80175ea:	e7ec      	b.n	80175c6 <_realloc_r+0x1e>
 80175ec:	42b4      	cmp	r4, r6
 80175ee:	4622      	mov	r2, r4
 80175f0:	4629      	mov	r1, r5
 80175f2:	bf28      	it	cs
 80175f4:	4632      	movcs	r2, r6
 80175f6:	f7ff fc81 	bl	8016efc <memcpy>
 80175fa:	4629      	mov	r1, r5
 80175fc:	4638      	mov	r0, r7
 80175fe:	f7ff fc8b 	bl	8016f18 <_free_r>
 8017602:	e7f1      	b.n	80175e8 <_realloc_r+0x40>

08017604 <_malloc_usable_size_r>:
 8017604:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017608:	1f18      	subs	r0, r3, #4
 801760a:	2b00      	cmp	r3, #0
 801760c:	bfbc      	itt	lt
 801760e:	580b      	ldrlt	r3, [r1, r0]
 8017610:	18c0      	addlt	r0, r0, r3
 8017612:	4770      	bx	lr

08017614 <_init>:
 8017614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017616:	bf00      	nop
 8017618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801761a:	bc08      	pop	{r3}
 801761c:	469e      	mov	lr, r3
 801761e:	4770      	bx	lr

08017620 <_fini>:
 8017620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017622:	bf00      	nop
 8017624:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017626:	bc08      	pop	{r3}
 8017628:	469e      	mov	lr, r3
 801762a:	4770      	bx	lr
