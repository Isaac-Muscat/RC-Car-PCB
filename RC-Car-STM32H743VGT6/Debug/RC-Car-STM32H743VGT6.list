
RC-Car-STM32H743VGT6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016310  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000488  080165b0  080165b0  000175b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08016a38  08016a38  00017a38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08016a40  08016a40  00017a40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08016a44  08016a44  00017a44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000158  24000000  08016a48  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000b86c  24000158  08016ba0  00018158  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2400b9c4  08016ba0  000189c4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00018158  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002d919  00000000  00000000  00018186  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000054ac  00000000  00000000  00045a9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002150  00000000  00000000  0004af50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001a02  00000000  00000000  0004d0a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003d0a1  00000000  00000000  0004eaa2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00030709  00000000  00000000  0008bb43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00170f20  00000000  00000000  000bc24c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0022d16c  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000946c  00000000  00000000  0022d1b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000074  00000000  00000000  0023661c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000158 	.word	0x24000158
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08016598 	.word	0x08016598

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400015c 	.word	0x2400015c
 80002dc:	08016598 	.word	0x08016598

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b988 	b.w	80006b8 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	468e      	mov	lr, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	4688      	mov	r8, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d962      	bls.n	800049c <__udivmoddi4+0xdc>
 80003d6:	fab2 f682 	clz	r6, r2
 80003da:	b14e      	cbz	r6, 80003f0 <__udivmoddi4+0x30>
 80003dc:	f1c6 0320 	rsb	r3, r6, #32
 80003e0:	fa01 f806 	lsl.w	r8, r1, r6
 80003e4:	fa20 f303 	lsr.w	r3, r0, r3
 80003e8:	40b7      	lsls	r7, r6
 80003ea:	ea43 0808 	orr.w	r8, r3, r8
 80003ee:	40b4      	lsls	r4, r6
 80003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f4:	fa1f fc87 	uxth.w	ip, r7
 80003f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003fc:	0c23      	lsrs	r3, r4, #16
 80003fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000402:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000406:	fb01 f20c 	mul.w	r2, r1, ip
 800040a:	429a      	cmp	r2, r3
 800040c:	d909      	bls.n	8000422 <__udivmoddi4+0x62>
 800040e:	18fb      	adds	r3, r7, r3
 8000410:	f101 30ff 	add.w	r0, r1, #4294967295
 8000414:	f080 80ea 	bcs.w	80005ec <__udivmoddi4+0x22c>
 8000418:	429a      	cmp	r2, r3
 800041a:	f240 80e7 	bls.w	80005ec <__udivmoddi4+0x22c>
 800041e:	3902      	subs	r1, #2
 8000420:	443b      	add	r3, r7
 8000422:	1a9a      	subs	r2, r3, r2
 8000424:	b2a3      	uxth	r3, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000432:	fb00 fc0c 	mul.w	ip, r0, ip
 8000436:	459c      	cmp	ip, r3
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x8e>
 800043a:	18fb      	adds	r3, r7, r3
 800043c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000440:	f080 80d6 	bcs.w	80005f0 <__udivmoddi4+0x230>
 8000444:	459c      	cmp	ip, r3
 8000446:	f240 80d3 	bls.w	80005f0 <__udivmoddi4+0x230>
 800044a:	443b      	add	r3, r7
 800044c:	3802      	subs	r0, #2
 800044e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000452:	eba3 030c 	sub.w	r3, r3, ip
 8000456:	2100      	movs	r1, #0
 8000458:	b11d      	cbz	r5, 8000462 <__udivmoddi4+0xa2>
 800045a:	40f3      	lsrs	r3, r6
 800045c:	2200      	movs	r2, #0
 800045e:	e9c5 3200 	strd	r3, r2, [r5]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d905      	bls.n	8000476 <__udivmoddi4+0xb6>
 800046a:	b10d      	cbz	r5, 8000470 <__udivmoddi4+0xb0>
 800046c:	e9c5 0100 	strd	r0, r1, [r5]
 8000470:	2100      	movs	r1, #0
 8000472:	4608      	mov	r0, r1
 8000474:	e7f5      	b.n	8000462 <__udivmoddi4+0xa2>
 8000476:	fab3 f183 	clz	r1, r3
 800047a:	2900      	cmp	r1, #0
 800047c:	d146      	bne.n	800050c <__udivmoddi4+0x14c>
 800047e:	4573      	cmp	r3, lr
 8000480:	d302      	bcc.n	8000488 <__udivmoddi4+0xc8>
 8000482:	4282      	cmp	r2, r0
 8000484:	f200 8105 	bhi.w	8000692 <__udivmoddi4+0x2d2>
 8000488:	1a84      	subs	r4, r0, r2
 800048a:	eb6e 0203 	sbc.w	r2, lr, r3
 800048e:	2001      	movs	r0, #1
 8000490:	4690      	mov	r8, r2
 8000492:	2d00      	cmp	r5, #0
 8000494:	d0e5      	beq.n	8000462 <__udivmoddi4+0xa2>
 8000496:	e9c5 4800 	strd	r4, r8, [r5]
 800049a:	e7e2      	b.n	8000462 <__udivmoddi4+0xa2>
 800049c:	2a00      	cmp	r2, #0
 800049e:	f000 8090 	beq.w	80005c2 <__udivmoddi4+0x202>
 80004a2:	fab2 f682 	clz	r6, r2
 80004a6:	2e00      	cmp	r6, #0
 80004a8:	f040 80a4 	bne.w	80005f4 <__udivmoddi4+0x234>
 80004ac:	1a8a      	subs	r2, r1, r2
 80004ae:	0c03      	lsrs	r3, r0, #16
 80004b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b4:	b280      	uxth	r0, r0
 80004b6:	b2bc      	uxth	r4, r7
 80004b8:	2101      	movs	r1, #1
 80004ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80004be:	fb0e 221c 	mls	r2, lr, ip, r2
 80004c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004c6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ca:	429a      	cmp	r2, r3
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x11e>
 80004ce:	18fb      	adds	r3, r7, r3
 80004d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004d4:	d202      	bcs.n	80004dc <__udivmoddi4+0x11c>
 80004d6:	429a      	cmp	r2, r3
 80004d8:	f200 80e0 	bhi.w	800069c <__udivmoddi4+0x2dc>
 80004dc:	46c4      	mov	ip, r8
 80004de:	1a9b      	subs	r3, r3, r2
 80004e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004ec:	fb02 f404 	mul.w	r4, r2, r4
 80004f0:	429c      	cmp	r4, r3
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x144>
 80004f4:	18fb      	adds	r3, r7, r3
 80004f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x142>
 80004fc:	429c      	cmp	r4, r3
 80004fe:	f200 80ca 	bhi.w	8000696 <__udivmoddi4+0x2d6>
 8000502:	4602      	mov	r2, r0
 8000504:	1b1b      	subs	r3, r3, r4
 8000506:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800050a:	e7a5      	b.n	8000458 <__udivmoddi4+0x98>
 800050c:	f1c1 0620 	rsb	r6, r1, #32
 8000510:	408b      	lsls	r3, r1
 8000512:	fa22 f706 	lsr.w	r7, r2, r6
 8000516:	431f      	orrs	r7, r3
 8000518:	fa0e f401 	lsl.w	r4, lr, r1
 800051c:	fa20 f306 	lsr.w	r3, r0, r6
 8000520:	fa2e fe06 	lsr.w	lr, lr, r6
 8000524:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000528:	4323      	orrs	r3, r4
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	fa1f fc87 	uxth.w	ip, r7
 8000532:	fbbe f0f9 	udiv	r0, lr, r9
 8000536:	0c1c      	lsrs	r4, r3, #16
 8000538:	fb09 ee10 	mls	lr, r9, r0, lr
 800053c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000540:	fb00 fe0c 	mul.w	lr, r0, ip
 8000544:	45a6      	cmp	lr, r4
 8000546:	fa02 f201 	lsl.w	r2, r2, r1
 800054a:	d909      	bls.n	8000560 <__udivmoddi4+0x1a0>
 800054c:	193c      	adds	r4, r7, r4
 800054e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000552:	f080 809c 	bcs.w	800068e <__udivmoddi4+0x2ce>
 8000556:	45a6      	cmp	lr, r4
 8000558:	f240 8099 	bls.w	800068e <__udivmoddi4+0x2ce>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	eba4 040e 	sub.w	r4, r4, lr
 8000564:	fa1f fe83 	uxth.w	lr, r3
 8000568:	fbb4 f3f9 	udiv	r3, r4, r9
 800056c:	fb09 4413 	mls	r4, r9, r3, r4
 8000570:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000574:	fb03 fc0c 	mul.w	ip, r3, ip
 8000578:	45a4      	cmp	ip, r4
 800057a:	d908      	bls.n	800058e <__udivmoddi4+0x1ce>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000582:	f080 8082 	bcs.w	800068a <__udivmoddi4+0x2ca>
 8000586:	45a4      	cmp	ip, r4
 8000588:	d97f      	bls.n	800068a <__udivmoddi4+0x2ca>
 800058a:	3b02      	subs	r3, #2
 800058c:	443c      	add	r4, r7
 800058e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000592:	eba4 040c 	sub.w	r4, r4, ip
 8000596:	fba0 ec02 	umull	lr, ip, r0, r2
 800059a:	4564      	cmp	r4, ip
 800059c:	4673      	mov	r3, lr
 800059e:	46e1      	mov	r9, ip
 80005a0:	d362      	bcc.n	8000668 <__udivmoddi4+0x2a8>
 80005a2:	d05f      	beq.n	8000664 <__udivmoddi4+0x2a4>
 80005a4:	b15d      	cbz	r5, 80005be <__udivmoddi4+0x1fe>
 80005a6:	ebb8 0203 	subs.w	r2, r8, r3
 80005aa:	eb64 0409 	sbc.w	r4, r4, r9
 80005ae:	fa04 f606 	lsl.w	r6, r4, r6
 80005b2:	fa22 f301 	lsr.w	r3, r2, r1
 80005b6:	431e      	orrs	r6, r3
 80005b8:	40cc      	lsrs	r4, r1
 80005ba:	e9c5 6400 	strd	r6, r4, [r5]
 80005be:	2100      	movs	r1, #0
 80005c0:	e74f      	b.n	8000462 <__udivmoddi4+0xa2>
 80005c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005c6:	0c01      	lsrs	r1, r0, #16
 80005c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005cc:	b280      	uxth	r0, r0
 80005ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005d2:	463b      	mov	r3, r7
 80005d4:	4638      	mov	r0, r7
 80005d6:	463c      	mov	r4, r7
 80005d8:	46b8      	mov	r8, r7
 80005da:	46be      	mov	lr, r7
 80005dc:	2620      	movs	r6, #32
 80005de:	fbb1 f1f7 	udiv	r1, r1, r7
 80005e2:	eba2 0208 	sub.w	r2, r2, r8
 80005e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005ea:	e766      	b.n	80004ba <__udivmoddi4+0xfa>
 80005ec:	4601      	mov	r1, r0
 80005ee:	e718      	b.n	8000422 <__udivmoddi4+0x62>
 80005f0:	4610      	mov	r0, r2
 80005f2:	e72c      	b.n	800044e <__udivmoddi4+0x8e>
 80005f4:	f1c6 0220 	rsb	r2, r6, #32
 80005f8:	fa2e f302 	lsr.w	r3, lr, r2
 80005fc:	40b7      	lsls	r7, r6
 80005fe:	40b1      	lsls	r1, r6
 8000600:	fa20 f202 	lsr.w	r2, r0, r2
 8000604:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000608:	430a      	orrs	r2, r1
 800060a:	fbb3 f8fe 	udiv	r8, r3, lr
 800060e:	b2bc      	uxth	r4, r7
 8000610:	fb0e 3318 	mls	r3, lr, r8, r3
 8000614:	0c11      	lsrs	r1, r2, #16
 8000616:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800061a:	fb08 f904 	mul.w	r9, r8, r4
 800061e:	40b0      	lsls	r0, r6
 8000620:	4589      	cmp	r9, r1
 8000622:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000626:	b280      	uxth	r0, r0
 8000628:	d93e      	bls.n	80006a8 <__udivmoddi4+0x2e8>
 800062a:	1879      	adds	r1, r7, r1
 800062c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000630:	d201      	bcs.n	8000636 <__udivmoddi4+0x276>
 8000632:	4589      	cmp	r9, r1
 8000634:	d81f      	bhi.n	8000676 <__udivmoddi4+0x2b6>
 8000636:	eba1 0109 	sub.w	r1, r1, r9
 800063a:	fbb1 f9fe 	udiv	r9, r1, lr
 800063e:	fb09 f804 	mul.w	r8, r9, r4
 8000642:	fb0e 1119 	mls	r1, lr, r9, r1
 8000646:	b292      	uxth	r2, r2
 8000648:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800064c:	4542      	cmp	r2, r8
 800064e:	d229      	bcs.n	80006a4 <__udivmoddi4+0x2e4>
 8000650:	18ba      	adds	r2, r7, r2
 8000652:	f109 31ff 	add.w	r1, r9, #4294967295
 8000656:	d2c4      	bcs.n	80005e2 <__udivmoddi4+0x222>
 8000658:	4542      	cmp	r2, r8
 800065a:	d2c2      	bcs.n	80005e2 <__udivmoddi4+0x222>
 800065c:	f1a9 0102 	sub.w	r1, r9, #2
 8000660:	443a      	add	r2, r7
 8000662:	e7be      	b.n	80005e2 <__udivmoddi4+0x222>
 8000664:	45f0      	cmp	r8, lr
 8000666:	d29d      	bcs.n	80005a4 <__udivmoddi4+0x1e4>
 8000668:	ebbe 0302 	subs.w	r3, lr, r2
 800066c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000670:	3801      	subs	r0, #1
 8000672:	46e1      	mov	r9, ip
 8000674:	e796      	b.n	80005a4 <__udivmoddi4+0x1e4>
 8000676:	eba7 0909 	sub.w	r9, r7, r9
 800067a:	4449      	add	r1, r9
 800067c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000680:	fbb1 f9fe 	udiv	r9, r1, lr
 8000684:	fb09 f804 	mul.w	r8, r9, r4
 8000688:	e7db      	b.n	8000642 <__udivmoddi4+0x282>
 800068a:	4673      	mov	r3, lr
 800068c:	e77f      	b.n	800058e <__udivmoddi4+0x1ce>
 800068e:	4650      	mov	r0, sl
 8000690:	e766      	b.n	8000560 <__udivmoddi4+0x1a0>
 8000692:	4608      	mov	r0, r1
 8000694:	e6fd      	b.n	8000492 <__udivmoddi4+0xd2>
 8000696:	443b      	add	r3, r7
 8000698:	3a02      	subs	r2, #2
 800069a:	e733      	b.n	8000504 <__udivmoddi4+0x144>
 800069c:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a0:	443b      	add	r3, r7
 80006a2:	e71c      	b.n	80004de <__udivmoddi4+0x11e>
 80006a4:	4649      	mov	r1, r9
 80006a6:	e79c      	b.n	80005e2 <__udivmoddi4+0x222>
 80006a8:	eba1 0109 	sub.w	r1, r1, r9
 80006ac:	46c4      	mov	ip, r8
 80006ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b2:	fb09 f804 	mul.w	r8, r9, r4
 80006b6:	e7c4      	b.n	8000642 <__udivmoddi4+0x282>

080006b8 <__aeabi_idiv0>:
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop

080006bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b086      	sub	sp, #24
 80006c0:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80006c2:	f000 ffdd 	bl	8001680 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006c6:	f001 fe83 	bl	80023d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ca:	f000 f8ef 	bl	80008ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006ce:	f000 fced 	bl	80010ac <MX_GPIO_Init>
  MX_DMA_Init();
 80006d2:	f000 fcab 	bl	800102c <MX_DMA_Init>
  MX_MDMA_Init();
 80006d6:	f000 fcc9 	bl	800106c <MX_MDMA_Init>
  MX_USART1_UART_Init();
 80006da:	f000 fc59 	bl	8000f90 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 80006de:	f014 fd59 	bl	8015194 <MX_USB_DEVICE_Init>
  MX_DCMI_Init();
 80006e2:	f000 f95d 	bl	80009a0 <MX_DCMI_Init>
  MX_I2C2_Init();
 80006e6:	f000 f993 	bl	8000a10 <MX_I2C2_Init>
  MX_TIM14_Init();
 80006ea:	f000 fc05 	bl	8000ef8 <MX_TIM14_Init>
  MX_TIM2_Init();
 80006ee:	f000 fac7 	bl	8000c80 <MX_TIM2_Init>
  MX_TIM4_Init();
 80006f2:	f000 fb9b 	bl	8000e2c <MX_TIM4_Init>
  MX_TIM1_Init();
 80006f6:	f000 fa35 	bl	8000b64 <MX_TIM1_Init>
  MX_TIM3_Init();
 80006fa:	f000 fb31 	bl	8000d60 <MX_TIM3_Init>
  MX_JPEG_Init();
 80006fe:	f000 f9c7 	bl	8000a90 <MX_JPEG_Init>
  MX_SPI2_Init();
 8000702:	f000 f9d9 	bl	8000ab8 <MX_SPI2_Init>

	// ------------------------------------------------------------ SETUP USB MESSAGING -- //
	//uint8_t usb_msg[100] = {0};	// Reserve 100 bytes for USB Debug messages

	// ------------------------------------------------------------ SETUP CAMERA INTERFACE -- //
	HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);	// XCLK - Start the camera's core clock
 8000706:	2100      	movs	r1, #0
 8000708:	4859      	ldr	r0, [pc, #356]	@ (8000870 <main+0x1b4>)
 800070a:	f00e fd6f 	bl	800f1ec <HAL_TIM_PWM_Start>
	// X 		  COM15 [6] = 1 (Data range [00-FF])
	// X 		  COM15 [5] = 0 (RGB 565)
	// X 		  COM15 [4] = 1 (RGB 565)
	uint8_t cam_regCache;

	cam_regCache = 0b00001000;
 800070e:	2308      	movs	r3, #8
 8000710:	737b      	strb	r3, [r7, #13]
	while (CAM_SetRegister(0x0C, cam_regCache, 0)) {}
 8000712:	bf00      	nop
 8000714:	7b7b      	ldrb	r3, [r7, #13]
 8000716:	2200      	movs	r2, #0
 8000718:	4619      	mov	r1, r3
 800071a:	200c      	movs	r0, #12
 800071c:	f000 fe7c 	bl	8001418 <CAM_SetRegister>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d1f6      	bne.n	8000714 <main+0x58>

	cam_regCache = 0b00010000;
 8000726:	2310      	movs	r3, #16
 8000728:	737b      	strb	r3, [r7, #13]
	while (CAM_SetRegister(0x12, cam_regCache, 0)) {}
 800072a:	bf00      	nop
 800072c:	7b7b      	ldrb	r3, [r7, #13]
 800072e:	2200      	movs	r2, #0
 8000730:	4619      	mov	r1, r3
 8000732:	2012      	movs	r0, #18
 8000734:	f000 fe70 	bl	8001418 <CAM_SetRegister>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d1f6      	bne.n	800072c <main+0x70>

	cam_regCache = 0b10000110;
 800073e:	2386      	movs	r3, #134	@ 0x86
 8000740:	737b      	strb	r3, [r7, #13]
	while (CAM_SetRegister(0x32, cam_regCache, 0)) {}
 8000742:	bf00      	nop
 8000744:	7b7b      	ldrb	r3, [r7, #13]
 8000746:	2200      	movs	r2, #0
 8000748:	4619      	mov	r1, r3
 800074a:	2032      	movs	r0, #50	@ 0x32
 800074c:	f000 fe64 	bl	8001418 <CAM_SetRegister>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d1f6      	bne.n	8000744 <main+0x88>
	//while (CAM_SetRegister(0x40, cam_regCache, 0)) {}

	// ------------------------------------------------------------ SETUP JPEG ENCODING -- //
	// Set the CONFIG
	JPEG_ConfTypeDef* jpeg_config;
	jpeg_config->ColorSpace = JPEG_GRAYSCALE_COLORSPACE;
 8000756:	68bb      	ldr	r3, [r7, #8]
 8000758:	2200      	movs	r2, #0
 800075a:	601a      	str	r2, [r3, #0]
	//jpeg_config->ColorSpace = JPEG_YCBCR_COLORSPACE;
	//jpeg_config->ChromaSubsampling = JPEG_422_SUBSAMPLING;
	jpeg_config->ImageWidth = JPEG_MCU_WIDTH*8;
 800075c:	68bb      	ldr	r3, [r7, #8]
 800075e:	2230      	movs	r2, #48	@ 0x30
 8000760:	60da      	str	r2, [r3, #12]
	jpeg_config->ImageHeight = JPEG_MCU_HEIGHT*8;
 8000762:	68bb      	ldr	r3, [r7, #8]
 8000764:	2248      	movs	r2, #72	@ 0x48
 8000766:	609a      	str	r2, [r3, #8]
	jpeg_config->ImageQuality = JPEG_QUALITY;
 8000768:	68bb      	ldr	r3, [r7, #8]
 800076a:	2214      	movs	r2, #20
 800076c:	611a      	str	r2, [r3, #16]
	HAL_JPEG_ConfigEncoding(&hjpeg, jpeg_config);
 800076e:	68b9      	ldr	r1, [r7, #8]
 8000770:	4840      	ldr	r0, [pc, #256]	@ (8000874 <main+0x1b8>)
 8000772:	f007 fd75 	bl	8008260 <HAL_JPEG_ConfigEncoding>

	// ------------------------------------------------------------ SETUP XBEE -- //
	hxbee.uart_handle = &huart1;
 8000776:	4b40      	ldr	r3, [pc, #256]	@ (8000878 <main+0x1bc>)
 8000778:	4a40      	ldr	r2, [pc, #256]	@ (800087c <main+0x1c0>)
 800077a:	601a      	str	r2, [r3, #0]
	hxbee.pktRx_max = 5;
 800077c:	4b3e      	ldr	r3, [pc, #248]	@ (8000878 <main+0x1bc>)
 800077e:	2205      	movs	r2, #5
 8000780:	761a      	strb	r2, [r3, #24]
	hxbee.pktTx_max = 5;
 8000782:	4b3d      	ldr	r3, [pc, #244]	@ (8000878 <main+0x1bc>)
 8000784:	2205      	movs	r2, #5
 8000786:	f883 2020 	strb.w	r2, [r3, #32]

	if (XBEE_Init(&hxbee)) {
 800078a:	483b      	ldr	r0, [pc, #236]	@ (8000878 <main+0x1bc>)
 800078c:	f012 fc63 	bl	8013056 <XBEE_Init>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d00e      	beq.n	80007b4 <main+0xf8>
		sprintf(usb_msg, " Failed to Init XBEE");
 8000796:	493a      	ldr	r1, [pc, #232]	@ (8000880 <main+0x1c4>)
 8000798:	483a      	ldr	r0, [pc, #232]	@ (8000884 <main+0x1c8>)
 800079a:	f015 fb0b 	bl	8015db4 <siprintf>
		WriteDebug(usb_msg, strlen(usb_msg));
 800079e:	4839      	ldr	r0, [pc, #228]	@ (8000884 <main+0x1c8>)
 80007a0:	f7ff fd9e 	bl	80002e0 <strlen>
 80007a4:	4603      	mov	r3, r0
 80007a6:	b2db      	uxtb	r3, r3
 80007a8:	4619      	mov	r1, r3
 80007aa:	4836      	ldr	r0, [pc, #216]	@ (8000884 <main+0x1c8>)
 80007ac:	f000 fdaa 	bl	8001304 <WriteDebug>
		while (1) { }
 80007b0:	bf00      	nop
 80007b2:	e7fd      	b.n	80007b0 <main+0xf4>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		// Take a snapshot
		camera_state = 1;	// Flag Camera as DMA Queued
 80007b4:	4b34      	ldr	r3, [pc, #208]	@ (8000888 <main+0x1cc>)
 80007b6:	2201      	movs	r2, #1
 80007b8:	701a      	strb	r2, [r3, #0]
		HAL_StatusTypeDef ovStat = HAL_DCMI_Start_DMA(&hdcmi, DCMI_MODE_SNAPSHOT, camera_mem, CAM_GRAYSIZE / 4);
 80007ba:	4a34      	ldr	r2, [pc, #208]	@ (800088c <main+0x1d0>)
 80007bc:	f241 23ab 	movw	r3, #4779	@ 0x12ab
 80007c0:	2102      	movs	r1, #2
 80007c2:	4833      	ldr	r0, [pc, #204]	@ (8000890 <main+0x1d4>)
 80007c4:	f002 f8c8 	bl	8002958 <HAL_DCMI_Start_DMA>
 80007c8:	4603      	mov	r3, r0
 80007ca:	71fb      	strb	r3, [r7, #7]
		if (ovStat) {
 80007cc:	79fb      	ldrb	r3, [r7, #7]
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d011      	beq.n	80007f6 <main+0x13a>
			//while (1) {
			sprintf(usb_msg, "DCMI/DMA ERROR - Code 0x%X\r\n", ovStat);
 80007d2:	79fb      	ldrb	r3, [r7, #7]
 80007d4:	461a      	mov	r2, r3
 80007d6:	492f      	ldr	r1, [pc, #188]	@ (8000894 <main+0x1d8>)
 80007d8:	482a      	ldr	r0, [pc, #168]	@ (8000884 <main+0x1c8>)
 80007da:	f015 faeb 	bl	8015db4 <siprintf>
			CDC_Transmit_FS(usb_msg, strlen(usb_msg));
 80007de:	4829      	ldr	r0, [pc, #164]	@ (8000884 <main+0x1c8>)
 80007e0:	f7ff fd7e 	bl	80002e0 <strlen>
 80007e4:	4603      	mov	r3, r0
 80007e6:	4619      	mov	r1, r3
 80007e8:	4826      	ldr	r0, [pc, #152]	@ (8000884 <main+0x1c8>)
 80007ea:	f014 fdad 	bl	8015348 <CDC_Transmit_FS>
			HAL_Delay(1000);
 80007ee:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80007f2:	f001 fe7f 	bl	80024f4 <HAL_Delay>
			//}
		}

		// Wait until the camera is idle again
		while (camera_state) { }
 80007f6:	bf00      	nop
 80007f8:	4b23      	ldr	r3, [pc, #140]	@ (8000888 <main+0x1cc>)
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	b2db      	uxtb	r3, r3
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d1fa      	bne.n	80007f8 <main+0x13c>

		// Start the JPEG Encode
		jpeg_ready = 0;
 8000802:	4b25      	ldr	r3, [pc, #148]	@ (8000898 <main+0x1dc>)
 8000804:	2200      	movs	r2, #0
 8000806:	701a      	strb	r2, [r3, #0]
		jpeg_block = 0;
 8000808:	4b24      	ldr	r3, [pc, #144]	@ (800089c <main+0x1e0>)
 800080a:	2200      	movs	r2, #0
 800080c:	601a      	str	r2, [r3, #0]
		jpeg_size = 0;
 800080e:	4b24      	ldr	r3, [pc, #144]	@ (80008a0 <main+0x1e4>)
 8000810:	2200      	movs	r2, #0
 8000812:	601a      	str	r2, [r3, #0]

		GenerateJPEGMCUBlock();
 8000814:	f000 fea8 	bl	8001568 <GenerateJPEGMCUBlock>
		HAL_JPEG_Encode_DMA(&hjpeg, jpeg_mcu, 64, jpeg_out, JPEG_OUTBUF_SIZE);
 8000818:	2340      	movs	r3, #64	@ 0x40
 800081a:	9300      	str	r3, [sp, #0]
 800081c:	4b21      	ldr	r3, [pc, #132]	@ (80008a4 <main+0x1e8>)
 800081e:	2240      	movs	r2, #64	@ 0x40
 8000820:	4921      	ldr	r1, [pc, #132]	@ (80008a8 <main+0x1ec>)
 8000822:	4814      	ldr	r0, [pc, #80]	@ (8000874 <main+0x1b8>)
 8000824:	f007 ff54 	bl	80086d0 <HAL_JPEG_Encode_DMA>

		// Wait until the JPEG is done frying
		while (!jpeg_ready) { }
 8000828:	bf00      	nop
 800082a:	4b1b      	ldr	r3, [pc, #108]	@ (8000898 <main+0x1dc>)
 800082c:	781b      	ldrb	r3, [r3, #0]
 800082e:	b2db      	uxtb	r3, r3
 8000830:	2b00      	cmp	r3, #0
 8000832:	d0fa      	beq.n	800082a <main+0x16e>

//		sprintf(usb_msg, "Begin Transmission\r\n");
//		CDC_Transmit_FS(usb_msg, strlen(usb_msg));

		// Transmit the camera data
		for (uint16_t i = 0; i < ((jpeg_size - JPEG_HEADERSIZE) / UART_TXSIZE) + 1; i++) {
 8000834:	2300      	movs	r3, #0
 8000836:	81fb      	strh	r3, [r7, #14]
 8000838:	e010      	b.n	800085c <main+0x1a0>
//				checksum += jpeg_out[i*UART_TXSIZE + JPEG_HEADERSIZE];
//			}
//			uart_txRaw_buffer[3] = 0x00;
//			memcpy(uart_tx_buffer, jpeg_out + i*UART_TXSIZE + JPEG_HEADERSIZE, UART_TXSIZE);	// Copy jpeg vram into the TX buffer data segment
//			HAL_UART_Transmit(&huart1, uart_txRaw_buffer, UART_TXSIZE + 4, 30);	// Transmit the buffer
			XBEE_TXPacket(&hxbee, jpeg_out + i*UART_TXSIZE + JPEG_HEADERSIZE, i);
 800083a:	89fb      	ldrh	r3, [r7, #14]
 800083c:	019b      	lsls	r3, r3, #6
 800083e:	f203 230e 	addw	r3, r3, #526	@ 0x20e
 8000842:	4a18      	ldr	r2, [pc, #96]	@ (80008a4 <main+0x1e8>)
 8000844:	4413      	add	r3, r2
 8000846:	89fa      	ldrh	r2, [r7, #14]
 8000848:	4619      	mov	r1, r3
 800084a:	480b      	ldr	r0, [pc, #44]	@ (8000878 <main+0x1bc>)
 800084c:	f012 fc56 	bl	80130fc <XBEE_TXPacket>
			// Debug
//			if (i % 10 == 0) {
//				sprintf(usb_msg, "0x%X\r\n", i);
//				CDC_Transmit_FS(usb_msg, strlen(usb_msg));
//			}
			HAL_Delay(5);
 8000850:	2005      	movs	r0, #5
 8000852:	f001 fe4f 	bl	80024f4 <HAL_Delay>
		for (uint16_t i = 0; i < ((jpeg_size - JPEG_HEADERSIZE) / UART_TXSIZE) + 1; i++) {
 8000856:	89fb      	ldrh	r3, [r7, #14]
 8000858:	3301      	adds	r3, #1
 800085a:	81fb      	strh	r3, [r7, #14]
 800085c:	89fa      	ldrh	r2, [r7, #14]
 800085e:	4b10      	ldr	r3, [pc, #64]	@ (80008a0 <main+0x1e4>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	f2a3 230e 	subw	r3, r3, #526	@ 0x20e
 8000866:	099b      	lsrs	r3, r3, #6
 8000868:	3301      	adds	r3, #1
 800086a:	429a      	cmp	r2, r3
 800086c:	d3e5      	bcc.n	800083a <main+0x17e>
	{
 800086e:	e7a1      	b.n	80007b4 <main+0xf8>
 8000870:	24000578 	.word	0x24000578
 8000874:	24000290 	.word	0x24000290
 8000878:	24009c68 	.word	0x24009c68
 800087c:	240005c4 	.word	0x240005c4
 8000880:	080165b0 	.word	0x080165b0
 8000884:	24000658 	.word	0x24000658
 8000888:	2400516e 	.word	0x2400516e
 800088c:	240006c0 	.word	0x240006c0
 8000890:	24000174 	.word	0x24000174
 8000894:	080165c8 	.word	0x080165c8
 8000898:	24000000 	.word	0x24000000
 800089c:	240051b0 	.word	0x240051b0
 80008a0:	24009c64 	.word	0x24009c64
 80008a4:	240051b4 	.word	0x240051b4
 80008a8:	24005170 	.word	0x24005170

080008ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b09c      	sub	sp, #112	@ 0x70
 80008b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008b6:	224c      	movs	r2, #76	@ 0x4c
 80008b8:	2100      	movs	r1, #0
 80008ba:	4618      	mov	r0, r3
 80008bc:	f015 fa9c 	bl	8015df8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008c0:	1d3b      	adds	r3, r7, #4
 80008c2:	2220      	movs	r2, #32
 80008c4:	2100      	movs	r1, #0
 80008c6:	4618      	mov	r0, r3
 80008c8:	f015 fa96 	bl	8015df8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80008cc:	2002      	movs	r0, #2
 80008ce:	f00b fc43 	bl	800c158 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008d2:	2300      	movs	r3, #0
 80008d4:	603b      	str	r3, [r7, #0]
 80008d6:	4b30      	ldr	r3, [pc, #192]	@ (8000998 <SystemClock_Config+0xec>)
 80008d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008da:	4a2f      	ldr	r2, [pc, #188]	@ (8000998 <SystemClock_Config+0xec>)
 80008dc:	f023 0301 	bic.w	r3, r3, #1
 80008e0:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80008e2:	4b2d      	ldr	r3, [pc, #180]	@ (8000998 <SystemClock_Config+0xec>)
 80008e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008e6:	f003 0301 	and.w	r3, r3, #1
 80008ea:	603b      	str	r3, [r7, #0]
 80008ec:	4b2b      	ldr	r3, [pc, #172]	@ (800099c <SystemClock_Config+0xf0>)
 80008ee:	699b      	ldr	r3, [r3, #24]
 80008f0:	4a2a      	ldr	r2, [pc, #168]	@ (800099c <SystemClock_Config+0xf0>)
 80008f2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80008f6:	6193      	str	r3, [r2, #24]
 80008f8:	4b28      	ldr	r3, [pc, #160]	@ (800099c <SystemClock_Config+0xf0>)
 80008fa:	699b      	ldr	r3, [r3, #24]
 80008fc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000900:	603b      	str	r3, [r7, #0]
 8000902:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000904:	bf00      	nop
 8000906:	4b25      	ldr	r3, [pc, #148]	@ (800099c <SystemClock_Config+0xf0>)
 8000908:	699b      	ldr	r3, [r3, #24]
 800090a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800090e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000912:	d1f8      	bne.n	8000906 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000914:	2301      	movs	r3, #1
 8000916:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000918:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800091c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800091e:	2302      	movs	r3, #2
 8000920:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000922:	2302      	movs	r3, #2
 8000924:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000926:	2302      	movs	r3, #2
 8000928:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 800092a:	2318      	movs	r3, #24
 800092c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800092e:	2302      	movs	r3, #2
 8000930:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 6;
 8000932:	2306      	movs	r3, #6
 8000934:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000936:	2302      	movs	r3, #2
 8000938:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800093a:	230c      	movs	r3, #12
 800093c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800093e:	2300      	movs	r3, #0
 8000940:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000942:	2300      	movs	r3, #0
 8000944:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000946:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800094a:	4618      	mov	r0, r3
 800094c:	f00b fc4e 	bl	800c1ec <HAL_RCC_OscConfig>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000956:	f000 febf 	bl	80016d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800095a:	233f      	movs	r3, #63	@ 0x3f
 800095c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800095e:	2303      	movs	r3, #3
 8000960:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000962:	2300      	movs	r3, #0
 8000964:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000966:	2300      	movs	r3, #0
 8000968:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800096a:	2340      	movs	r3, #64	@ 0x40
 800096c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800096e:	2340      	movs	r3, #64	@ 0x40
 8000970:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000972:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000976:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000978:	2340      	movs	r3, #64	@ 0x40
 800097a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800097c:	1d3b      	adds	r3, r7, #4
 800097e:	2102      	movs	r1, #2
 8000980:	4618      	mov	r0, r3
 8000982:	f00c f88d 	bl	800caa0 <HAL_RCC_ClockConfig>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 800098c:	f000 fea4 	bl	80016d8 <Error_Handler>
  }
}
 8000990:	bf00      	nop
 8000992:	3770      	adds	r7, #112	@ 0x70
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	58000400 	.word	0x58000400
 800099c:	58024800 	.word	0x58024800

080009a0 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 80009a4:	4b18      	ldr	r3, [pc, #96]	@ (8000a08 <MX_DCMI_Init+0x68>)
 80009a6:	4a19      	ldr	r2, [pc, #100]	@ (8000a0c <MX_DCMI_Init+0x6c>)
 80009a8:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 80009aa:	4b17      	ldr	r3, [pc, #92]	@ (8000a08 <MX_DCMI_Init+0x68>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 80009b0:	4b15      	ldr	r3, [pc, #84]	@ (8000a08 <MX_DCMI_Init+0x68>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_HIGH;
 80009b6:	4b14      	ldr	r3, [pc, #80]	@ (8000a08 <MX_DCMI_Init+0x68>)
 80009b8:	2280      	movs	r2, #128	@ 0x80
 80009ba:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 80009bc:	4b12      	ldr	r3, [pc, #72]	@ (8000a08 <MX_DCMI_Init+0x68>)
 80009be:	2200      	movs	r2, #0
 80009c0:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 80009c2:	4b11      	ldr	r3, [pc, #68]	@ (8000a08 <MX_DCMI_Init+0x68>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 80009c8:	4b0f      	ldr	r3, [pc, #60]	@ (8000a08 <MX_DCMI_Init+0x68>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 80009ce:	4b0e      	ldr	r3, [pc, #56]	@ (8000a08 <MX_DCMI_Init+0x68>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALTERNATE_4;
 80009d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000a08 <MX_DCMI_Init+0x68>)
 80009d6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80009da:	625a      	str	r2, [r3, #36]	@ 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_EVEN;
 80009dc:	4b0a      	ldr	r3, [pc, #40]	@ (8000a08 <MX_DCMI_Init+0x68>)
 80009de:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80009e2:	629a      	str	r2, [r3, #40]	@ 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALTERNATE_2;
 80009e4:	4b08      	ldr	r3, [pc, #32]	@ (8000a08 <MX_DCMI_Init+0x68>)
 80009e6:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80009ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 80009ec:	4b06      	ldr	r3, [pc, #24]	@ (8000a08 <MX_DCMI_Init+0x68>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 80009f2:	4805      	ldr	r0, [pc, #20]	@ (8000a08 <MX_DCMI_Init+0x68>)
 80009f4:	f001 ff36 	bl	8002864 <HAL_DCMI_Init>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <MX_DCMI_Init+0x62>
  {
    Error_Handler();
 80009fe:	f000 fe6b 	bl	80016d8 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8000a02:	bf00      	nop
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	24000174 	.word	0x24000174
 8000a0c:	48020000 	.word	0x48020000

08000a10 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000a14:	4b1b      	ldr	r3, [pc, #108]	@ (8000a84 <MX_I2C2_Init+0x74>)
 8000a16:	4a1c      	ldr	r2, [pc, #112]	@ (8000a88 <MX_I2C2_Init+0x78>)
 8000a18:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00C0EAFF;
 8000a1a:	4b1a      	ldr	r3, [pc, #104]	@ (8000a84 <MX_I2C2_Init+0x74>)
 8000a1c:	4a1b      	ldr	r2, [pc, #108]	@ (8000a8c <MX_I2C2_Init+0x7c>)
 8000a1e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000a20:	4b18      	ldr	r3, [pc, #96]	@ (8000a84 <MX_I2C2_Init+0x74>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a26:	4b17      	ldr	r3, [pc, #92]	@ (8000a84 <MX_I2C2_Init+0x74>)
 8000a28:	2201      	movs	r2, #1
 8000a2a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a2c:	4b15      	ldr	r3, [pc, #84]	@ (8000a84 <MX_I2C2_Init+0x74>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000a32:	4b14      	ldr	r3, [pc, #80]	@ (8000a84 <MX_I2C2_Init+0x74>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a38:	4b12      	ldr	r3, [pc, #72]	@ (8000a84 <MX_I2C2_Init+0x74>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a3e:	4b11      	ldr	r3, [pc, #68]	@ (8000a84 <MX_I2C2_Init+0x74>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a44:	4b0f      	ldr	r3, [pc, #60]	@ (8000a84 <MX_I2C2_Init+0x74>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000a4a:	480e      	ldr	r0, [pc, #56]	@ (8000a84 <MX_I2C2_Init+0x74>)
 8000a4c:	f005 feba 	bl	80067c4 <HAL_I2C_Init>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000a56:	f000 fe3f 	bl	80016d8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	4809      	ldr	r0, [pc, #36]	@ (8000a84 <MX_I2C2_Init+0x74>)
 8000a5e:	f007 fae5 	bl	800802c <HAL_I2CEx_ConfigAnalogFilter>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000a68:	f000 fe36 	bl	80016d8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	4805      	ldr	r0, [pc, #20]	@ (8000a84 <MX_I2C2_Init+0x74>)
 8000a70:	f007 fb27 	bl	80080c2 <HAL_I2CEx_ConfigDigitalFilter>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000a7a:	f000 fe2d 	bl	80016d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000a7e:	bf00      	nop
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	2400023c 	.word	0x2400023c
 8000a88:	40005800 	.word	0x40005800
 8000a8c:	00c0eaff 	.word	0x00c0eaff

08000a90 <MX_JPEG_Init>:
  * @brief JPEG Initialization Function
  * @param None
  * @retval None
  */
static void MX_JPEG_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE END JPEG_Init 0 */

  /* USER CODE BEGIN JPEG_Init 1 */

  /* USER CODE END JPEG_Init 1 */
  hjpeg.Instance = JPEG;
 8000a94:	4b06      	ldr	r3, [pc, #24]	@ (8000ab0 <MX_JPEG_Init+0x20>)
 8000a96:	4a07      	ldr	r2, [pc, #28]	@ (8000ab4 <MX_JPEG_Init+0x24>)
 8000a98:	601a      	str	r2, [r3, #0]
  if (HAL_JPEG_Init(&hjpeg) != HAL_OK)
 8000a9a:	4805      	ldr	r0, [pc, #20]	@ (8000ab0 <MX_JPEG_Init+0x20>)
 8000a9c:	f007 fb5e 	bl	800815c <HAL_JPEG_Init>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <MX_JPEG_Init+0x1a>
  {
    Error_Handler();
 8000aa6:	f000 fe17 	bl	80016d8 <Error_Handler>
  }
  /* USER CODE BEGIN JPEG_Init 2 */

  /* USER CODE END JPEG_Init 2 */

}
 8000aaa:	bf00      	nop
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	24000290 	.word	0x24000290
 8000ab4:	52003000 	.word	0x52003000

08000ab8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000abc:	4b27      	ldr	r3, [pc, #156]	@ (8000b5c <MX_SPI2_Init+0xa4>)
 8000abe:	4a28      	ldr	r2, [pc, #160]	@ (8000b60 <MX_SPI2_Init+0xa8>)
 8000ac0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000ac2:	4b26      	ldr	r3, [pc, #152]	@ (8000b5c <MX_SPI2_Init+0xa4>)
 8000ac4:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000ac8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000aca:	4b24      	ldr	r3, [pc, #144]	@ (8000b5c <MX_SPI2_Init+0xa4>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000ad0:	4b22      	ldr	r3, [pc, #136]	@ (8000b5c <MX_SPI2_Init+0xa4>)
 8000ad2:	2203      	movs	r2, #3
 8000ad4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ad6:	4b21      	ldr	r3, [pc, #132]	@ (8000b5c <MX_SPI2_Init+0xa4>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000adc:	4b1f      	ldr	r3, [pc, #124]	@ (8000b5c <MX_SPI2_Init+0xa4>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000ae2:	4b1e      	ldr	r3, [pc, #120]	@ (8000b5c <MX_SPI2_Init+0xa4>)
 8000ae4:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000ae8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000aea:	4b1c      	ldr	r3, [pc, #112]	@ (8000b5c <MX_SPI2_Init+0xa4>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000af0:	4b1a      	ldr	r3, [pc, #104]	@ (8000b5c <MX_SPI2_Init+0xa4>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000af6:	4b19      	ldr	r3, [pc, #100]	@ (8000b5c <MX_SPI2_Init+0xa4>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000afc:	4b17      	ldr	r3, [pc, #92]	@ (8000b5c <MX_SPI2_Init+0xa4>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8000b02:	4b16      	ldr	r3, [pc, #88]	@ (8000b5c <MX_SPI2_Init+0xa4>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000b08:	4b14      	ldr	r3, [pc, #80]	@ (8000b5c <MX_SPI2_Init+0xa4>)
 8000b0a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b0e:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000b10:	4b12      	ldr	r3, [pc, #72]	@ (8000b5c <MX_SPI2_Init+0xa4>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000b16:	4b11      	ldr	r3, [pc, #68]	@ (8000b5c <MX_SPI2_Init+0xa4>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000b1c:	4b0f      	ldr	r3, [pc, #60]	@ (8000b5c <MX_SPI2_Init+0xa4>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000b22:	4b0e      	ldr	r3, [pc, #56]	@ (8000b5c <MX_SPI2_Init+0xa4>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000b28:	4b0c      	ldr	r3, [pc, #48]	@ (8000b5c <MX_SPI2_Init+0xa4>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000b2e:	4b0b      	ldr	r3, [pc, #44]	@ (8000b5c <MX_SPI2_Init+0xa4>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000b34:	4b09      	ldr	r3, [pc, #36]	@ (8000b5c <MX_SPI2_Init+0xa4>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000b3a:	4b08      	ldr	r3, [pc, #32]	@ (8000b5c <MX_SPI2_Init+0xa4>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000b40:	4b06      	ldr	r3, [pc, #24]	@ (8000b5c <MX_SPI2_Init+0xa4>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000b46:	4805      	ldr	r0, [pc, #20]	@ (8000b5c <MX_SPI2_Init+0xa4>)
 8000b48:	f00e f962 	bl	800ee10 <HAL_SPI_Init>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 8000b52:	f000 fdc1 	bl	80016d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000b56:	bf00      	nop
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	240003c0 	.word	0x240003c0
 8000b60:	40003800 	.word	0x40003800

08000b64 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b096      	sub	sp, #88	@ 0x58
 8000b68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b6a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000b6e:	2200      	movs	r2, #0
 8000b70:	601a      	str	r2, [r3, #0]
 8000b72:	605a      	str	r2, [r3, #4]
 8000b74:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b76:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	601a      	str	r2, [r3, #0]
 8000b7e:	605a      	str	r2, [r3, #4]
 8000b80:	609a      	str	r2, [r3, #8]
 8000b82:	60da      	str	r2, [r3, #12]
 8000b84:	611a      	str	r2, [r3, #16]
 8000b86:	615a      	str	r2, [r3, #20]
 8000b88:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b8a:	1d3b      	adds	r3, r7, #4
 8000b8c:	222c      	movs	r2, #44	@ 0x2c
 8000b8e:	2100      	movs	r1, #0
 8000b90:	4618      	mov	r0, r3
 8000b92:	f015 f931 	bl	8015df8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b96:	4b38      	ldr	r3, [pc, #224]	@ (8000c78 <MX_TIM1_Init+0x114>)
 8000b98:	4a38      	ldr	r2, [pc, #224]	@ (8000c7c <MX_TIM1_Init+0x118>)
 8000b9a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000b9c:	4b36      	ldr	r3, [pc, #216]	@ (8000c78 <MX_TIM1_Init+0x114>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ba2:	4b35      	ldr	r3, [pc, #212]	@ (8000c78 <MX_TIM1_Init+0x114>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000;
 8000ba8:	4b33      	ldr	r3, [pc, #204]	@ (8000c78 <MX_TIM1_Init+0x114>)
 8000baa:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000bae:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bb0:	4b31      	ldr	r3, [pc, #196]	@ (8000c78 <MX_TIM1_Init+0x114>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000bb6:	4b30      	ldr	r3, [pc, #192]	@ (8000c78 <MX_TIM1_Init+0x114>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bbc:	4b2e      	ldr	r3, [pc, #184]	@ (8000c78 <MX_TIM1_Init+0x114>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000bc2:	482d      	ldr	r0, [pc, #180]	@ (8000c78 <MX_TIM1_Init+0x114>)
 8000bc4:	f00e faba 	bl	800f13c <HAL_TIM_PWM_Init>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000bce:	f000 fd83 	bl	80016d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000bde:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000be2:	4619      	mov	r1, r3
 8000be4:	4824      	ldr	r0, [pc, #144]	@ (8000c78 <MX_TIM1_Init+0x114>)
 8000be6:	f00f f9f9 	bl	800ffdc <HAL_TIMEx_MasterConfigSynchronization>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000bf0:	f000 fd72 	bl	80016d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bf4:	2360      	movs	r3, #96	@ 0x60
 8000bf6:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c00:	2300      	movs	r3, #0
 8000c02:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c04:	2300      	movs	r3, #0
 8000c06:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000c0c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000c10:	220c      	movs	r2, #12
 8000c12:	4619      	mov	r1, r3
 8000c14:	4818      	ldr	r0, [pc, #96]	@ (8000c78 <MX_TIM1_Init+0x114>)
 8000c16:	f00e fcff 	bl	800f618 <HAL_TIM_PWM_ConfigChannel>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8000c20:	f000 fd5a 	bl	80016d8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000c24:	2300      	movs	r3, #0
 8000c26:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000c30:	2300      	movs	r3, #0
 8000c32:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c34:	2300      	movs	r3, #0
 8000c36:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c38:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c3c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000c42:	2300      	movs	r3, #0
 8000c44:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000c46:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000c4a:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c50:	2300      	movs	r3, #0
 8000c52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000c54:	1d3b      	adds	r3, r7, #4
 8000c56:	4619      	mov	r1, r3
 8000c58:	4807      	ldr	r0, [pc, #28]	@ (8000c78 <MX_TIM1_Init+0x114>)
 8000c5a:	f00f fa4d 	bl	80100f8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <MX_TIM1_Init+0x104>
  {
    Error_Handler();
 8000c64:	f000 fd38 	bl	80016d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000c68:	4803      	ldr	r0, [pc, #12]	@ (8000c78 <MX_TIM1_Init+0x114>)
 8000c6a:	f001 f8cf 	bl	8001e0c <HAL_TIM_MspPostInit>

}
 8000c6e:	bf00      	nop
 8000c70:	3758      	adds	r7, #88	@ 0x58
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	24000448 	.word	0x24000448
 8000c7c:	40010000 	.word	0x40010000

08000c80 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b08a      	sub	sp, #40	@ 0x28
 8000c84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c86:	f107 031c 	add.w	r3, r7, #28
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	601a      	str	r2, [r3, #0]
 8000c8e:	605a      	str	r2, [r3, #4]
 8000c90:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c92:	463b      	mov	r3, r7
 8000c94:	2200      	movs	r2, #0
 8000c96:	601a      	str	r2, [r3, #0]
 8000c98:	605a      	str	r2, [r3, #4]
 8000c9a:	609a      	str	r2, [r3, #8]
 8000c9c:	60da      	str	r2, [r3, #12]
 8000c9e:	611a      	str	r2, [r3, #16]
 8000ca0:	615a      	str	r2, [r3, #20]
 8000ca2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ca4:	4b2d      	ldr	r3, [pc, #180]	@ (8000d5c <MX_TIM2_Init+0xdc>)
 8000ca6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000caa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000cac:	4b2b      	ldr	r3, [pc, #172]	@ (8000d5c <MX_TIM2_Init+0xdc>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cb2:	4b2a      	ldr	r3, [pc, #168]	@ (8000d5c <MX_TIM2_Init+0xdc>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 8000cb8:	4b28      	ldr	r3, [pc, #160]	@ (8000d5c <MX_TIM2_Init+0xdc>)
 8000cba:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000cbe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cc0:	4b26      	ldr	r3, [pc, #152]	@ (8000d5c <MX_TIM2_Init+0xdc>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cc6:	4b25      	ldr	r3, [pc, #148]	@ (8000d5c <MX_TIM2_Init+0xdc>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000ccc:	4823      	ldr	r0, [pc, #140]	@ (8000d5c <MX_TIM2_Init+0xdc>)
 8000cce:	f00e fa35 	bl	800f13c <HAL_TIM_PWM_Init>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000cd8:	f000 fcfe 	bl	80016d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ce4:	f107 031c 	add.w	r3, r7, #28
 8000ce8:	4619      	mov	r1, r3
 8000cea:	481c      	ldr	r0, [pc, #112]	@ (8000d5c <MX_TIM2_Init+0xdc>)
 8000cec:	f00f f976 	bl	800ffdc <HAL_TIMEx_MasterConfigSynchronization>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000cf6:	f000 fcef 	bl	80016d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cfa:	2360      	movs	r3, #96	@ 0x60
 8000cfc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d02:	2300      	movs	r3, #0
 8000d04:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d06:	2300      	movs	r3, #0
 8000d08:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d0a:	463b      	mov	r3, r7
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4619      	mov	r1, r3
 8000d10:	4812      	ldr	r0, [pc, #72]	@ (8000d5c <MX_TIM2_Init+0xdc>)
 8000d12:	f00e fc81 	bl	800f618 <HAL_TIM_PWM_ConfigChannel>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d001      	beq.n	8000d20 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000d1c:	f000 fcdc 	bl	80016d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d20:	463b      	mov	r3, r7
 8000d22:	2204      	movs	r2, #4
 8000d24:	4619      	mov	r1, r3
 8000d26:	480d      	ldr	r0, [pc, #52]	@ (8000d5c <MX_TIM2_Init+0xdc>)
 8000d28:	f00e fc76 	bl	800f618 <HAL_TIM_PWM_ConfigChannel>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8000d32:	f000 fcd1 	bl	80016d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000d36:	463b      	mov	r3, r7
 8000d38:	2208      	movs	r2, #8
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	4807      	ldr	r0, [pc, #28]	@ (8000d5c <MX_TIM2_Init+0xdc>)
 8000d3e:	f00e fc6b 	bl	800f618 <HAL_TIM_PWM_ConfigChannel>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d001      	beq.n	8000d4c <MX_TIM2_Init+0xcc>
  {
    Error_Handler();
 8000d48:	f000 fcc6 	bl	80016d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000d4c:	4803      	ldr	r0, [pc, #12]	@ (8000d5c <MX_TIM2_Init+0xdc>)
 8000d4e:	f001 f85d 	bl	8001e0c <HAL_TIM_MspPostInit>

}
 8000d52:	bf00      	nop
 8000d54:	3728      	adds	r7, #40	@ 0x28
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	24000494 	.word	0x24000494

08000d60 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b08a      	sub	sp, #40	@ 0x28
 8000d64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d66:	f107 031c 	add.w	r3, r7, #28
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	601a      	str	r2, [r3, #0]
 8000d6e:	605a      	str	r2, [r3, #4]
 8000d70:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d72:	463b      	mov	r3, r7
 8000d74:	2200      	movs	r2, #0
 8000d76:	601a      	str	r2, [r3, #0]
 8000d78:	605a      	str	r2, [r3, #4]
 8000d7a:	609a      	str	r2, [r3, #8]
 8000d7c:	60da      	str	r2, [r3, #12]
 8000d7e:	611a      	str	r2, [r3, #16]
 8000d80:	615a      	str	r2, [r3, #20]
 8000d82:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d84:	4b27      	ldr	r3, [pc, #156]	@ (8000e24 <MX_TIM3_Init+0xc4>)
 8000d86:	4a28      	ldr	r2, [pc, #160]	@ (8000e28 <MX_TIM3_Init+0xc8>)
 8000d88:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000d8a:	4b26      	ldr	r3, [pc, #152]	@ (8000e24 <MX_TIM3_Init+0xc4>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d90:	4b24      	ldr	r3, [pc, #144]	@ (8000e24 <MX_TIM3_Init+0xc4>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000;
 8000d96:	4b23      	ldr	r3, [pc, #140]	@ (8000e24 <MX_TIM3_Init+0xc4>)
 8000d98:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000d9c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d9e:	4b21      	ldr	r3, [pc, #132]	@ (8000e24 <MX_TIM3_Init+0xc4>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000da4:	4b1f      	ldr	r3, [pc, #124]	@ (8000e24 <MX_TIM3_Init+0xc4>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000daa:	481e      	ldr	r0, [pc, #120]	@ (8000e24 <MX_TIM3_Init+0xc4>)
 8000dac:	f00e f9c6 	bl	800f13c <HAL_TIM_PWM_Init>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000db6:	f000 fc8f 	bl	80016d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000dc2:	f107 031c 	add.w	r3, r7, #28
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	4816      	ldr	r0, [pc, #88]	@ (8000e24 <MX_TIM3_Init+0xc4>)
 8000dca:	f00f f907 	bl	800ffdc <HAL_TIMEx_MasterConfigSynchronization>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000dd4:	f000 fc80 	bl	80016d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000dd8:	2360      	movs	r3, #96	@ 0x60
 8000dda:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000de0:	2300      	movs	r3, #0
 8000de2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000de4:	2300      	movs	r3, #0
 8000de6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000de8:	463b      	mov	r3, r7
 8000dea:	2208      	movs	r2, #8
 8000dec:	4619      	mov	r1, r3
 8000dee:	480d      	ldr	r0, [pc, #52]	@ (8000e24 <MX_TIM3_Init+0xc4>)
 8000df0:	f00e fc12 	bl	800f618 <HAL_TIM_PWM_ConfigChannel>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8000dfa:	f000 fc6d 	bl	80016d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000dfe:	463b      	mov	r3, r7
 8000e00:	220c      	movs	r2, #12
 8000e02:	4619      	mov	r1, r3
 8000e04:	4807      	ldr	r0, [pc, #28]	@ (8000e24 <MX_TIM3_Init+0xc4>)
 8000e06:	f00e fc07 	bl	800f618 <HAL_TIM_PWM_ConfigChannel>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000e10:	f000 fc62 	bl	80016d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000e14:	4803      	ldr	r0, [pc, #12]	@ (8000e24 <MX_TIM3_Init+0xc4>)
 8000e16:	f000 fff9 	bl	8001e0c <HAL_TIM_MspPostInit>

}
 8000e1a:	bf00      	nop
 8000e1c:	3728      	adds	r7, #40	@ 0x28
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	240004e0 	.word	0x240004e0
 8000e28:	40000400 	.word	0x40000400

08000e2c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b08a      	sub	sp, #40	@ 0x28
 8000e30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e32:	f107 031c 	add.w	r3, r7, #28
 8000e36:	2200      	movs	r2, #0
 8000e38:	601a      	str	r2, [r3, #0]
 8000e3a:	605a      	str	r2, [r3, #4]
 8000e3c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e3e:	463b      	mov	r3, r7
 8000e40:	2200      	movs	r2, #0
 8000e42:	601a      	str	r2, [r3, #0]
 8000e44:	605a      	str	r2, [r3, #4]
 8000e46:	609a      	str	r2, [r3, #8]
 8000e48:	60da      	str	r2, [r3, #12]
 8000e4a:	611a      	str	r2, [r3, #16]
 8000e4c:	615a      	str	r2, [r3, #20]
 8000e4e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000e50:	4b27      	ldr	r3, [pc, #156]	@ (8000ef0 <MX_TIM4_Init+0xc4>)
 8000e52:	4a28      	ldr	r2, [pc, #160]	@ (8000ef4 <MX_TIM4_Init+0xc8>)
 8000e54:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000e56:	4b26      	ldr	r3, [pc, #152]	@ (8000ef0 <MX_TIM4_Init+0xc4>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e5c:	4b24      	ldr	r3, [pc, #144]	@ (8000ef0 <MX_TIM4_Init+0xc4>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2000;
 8000e62:	4b23      	ldr	r3, [pc, #140]	@ (8000ef0 <MX_TIM4_Init+0xc4>)
 8000e64:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000e68:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e6a:	4b21      	ldr	r3, [pc, #132]	@ (8000ef0 <MX_TIM4_Init+0xc4>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e70:	4b1f      	ldr	r3, [pc, #124]	@ (8000ef0 <MX_TIM4_Init+0xc4>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000e76:	481e      	ldr	r0, [pc, #120]	@ (8000ef0 <MX_TIM4_Init+0xc4>)
 8000e78:	f00e f960 	bl	800f13c <HAL_TIM_PWM_Init>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8000e82:	f000 fc29 	bl	80016d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e86:	2300      	movs	r3, #0
 8000e88:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000e8e:	f107 031c 	add.w	r3, r7, #28
 8000e92:	4619      	mov	r1, r3
 8000e94:	4816      	ldr	r0, [pc, #88]	@ (8000ef0 <MX_TIM4_Init+0xc4>)
 8000e96:	f00f f8a1 	bl	800ffdc <HAL_TIMEx_MasterConfigSynchronization>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8000ea0:	f000 fc1a 	bl	80016d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ea4:	2360      	movs	r3, #96	@ 0x60
 8000ea6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000eac:	2300      	movs	r3, #0
 8000eae:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000eb4:	463b      	mov	r3, r7
 8000eb6:	2208      	movs	r2, #8
 8000eb8:	4619      	mov	r1, r3
 8000eba:	480d      	ldr	r0, [pc, #52]	@ (8000ef0 <MX_TIM4_Init+0xc4>)
 8000ebc:	f00e fbac 	bl	800f618 <HAL_TIM_PWM_ConfigChannel>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8000ec6:	f000 fc07 	bl	80016d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000eca:	463b      	mov	r3, r7
 8000ecc:	220c      	movs	r2, #12
 8000ece:	4619      	mov	r1, r3
 8000ed0:	4807      	ldr	r0, [pc, #28]	@ (8000ef0 <MX_TIM4_Init+0xc4>)
 8000ed2:	f00e fba1 	bl	800f618 <HAL_TIM_PWM_ConfigChannel>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8000edc:	f000 fbfc 	bl	80016d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000ee0:	4803      	ldr	r0, [pc, #12]	@ (8000ef0 <MX_TIM4_Init+0xc4>)
 8000ee2:	f000 ff93 	bl	8001e0c <HAL_TIM_MspPostInit>

}
 8000ee6:	bf00      	nop
 8000ee8:	3728      	adds	r7, #40	@ 0x28
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	2400052c 	.word	0x2400052c
 8000ef4:	40000800 	.word	0x40000800

08000ef8 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b088      	sub	sp, #32
 8000efc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000efe:	1d3b      	adds	r3, r7, #4
 8000f00:	2200      	movs	r2, #0
 8000f02:	601a      	str	r2, [r3, #0]
 8000f04:	605a      	str	r2, [r3, #4]
 8000f06:	609a      	str	r2, [r3, #8]
 8000f08:	60da      	str	r2, [r3, #12]
 8000f0a:	611a      	str	r2, [r3, #16]
 8000f0c:	615a      	str	r2, [r3, #20]
 8000f0e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000f10:	4b1d      	ldr	r3, [pc, #116]	@ (8000f88 <MX_TIM14_Init+0x90>)
 8000f12:	4a1e      	ldr	r2, [pc, #120]	@ (8000f8c <MX_TIM14_Init+0x94>)
 8000f14:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 8000f16:	4b1c      	ldr	r3, [pc, #112]	@ (8000f88 <MX_TIM14_Init+0x90>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f1c:	4b1a      	ldr	r3, [pc, #104]	@ (8000f88 <MX_TIM14_Init+0x90>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 5;
 8000f22:	4b19      	ldr	r3, [pc, #100]	@ (8000f88 <MX_TIM14_Init+0x90>)
 8000f24:	2205      	movs	r2, #5
 8000f26:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f28:	4b17      	ldr	r3, [pc, #92]	@ (8000f88 <MX_TIM14_Init+0x90>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f2e:	4b16      	ldr	r3, [pc, #88]	@ (8000f88 <MX_TIM14_Init+0x90>)
 8000f30:	2280      	movs	r2, #128	@ 0x80
 8000f32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000f34:	4814      	ldr	r0, [pc, #80]	@ (8000f88 <MX_TIM14_Init+0x90>)
 8000f36:	f00e f8aa 	bl	800f08e <HAL_TIM_Base_Init>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <MX_TIM14_Init+0x4c>
  {
    Error_Handler();
 8000f40:	f000 fbca 	bl	80016d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8000f44:	4810      	ldr	r0, [pc, #64]	@ (8000f88 <MX_TIM14_Init+0x90>)
 8000f46:	f00e f8f9 	bl	800f13c <HAL_TIM_PWM_Init>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <MX_TIM14_Init+0x5c>
  {
    Error_Handler();
 8000f50:	f000 fbc2 	bl	80016d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f54:	2360      	movs	r3, #96	@ 0x60
 8000f56:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 3;
 8000f58:	2303      	movs	r3, #3
 8000f5a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8000f60:	2304      	movs	r3, #4
 8000f62:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f64:	1d3b      	adds	r3, r7, #4
 8000f66:	2200      	movs	r2, #0
 8000f68:	4619      	mov	r1, r3
 8000f6a:	4807      	ldr	r0, [pc, #28]	@ (8000f88 <MX_TIM14_Init+0x90>)
 8000f6c:	f00e fb54 	bl	800f618 <HAL_TIM_PWM_ConfigChannel>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <MX_TIM14_Init+0x82>
  {
    Error_Handler();
 8000f76:	f000 fbaf 	bl	80016d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8000f7a:	4803      	ldr	r0, [pc, #12]	@ (8000f88 <MX_TIM14_Init+0x90>)
 8000f7c:	f000 ff46 	bl	8001e0c <HAL_TIM_MspPostInit>

}
 8000f80:	bf00      	nop
 8000f82:	3720      	adds	r7, #32
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	24000578 	.word	0x24000578
 8000f8c:	40002000 	.word	0x40002000

08000f90 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f94:	4b22      	ldr	r3, [pc, #136]	@ (8001020 <MX_USART1_UART_Init+0x90>)
 8000f96:	4a23      	ldr	r2, [pc, #140]	@ (8001024 <MX_USART1_UART_Init+0x94>)
 8000f98:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 111111;
 8000f9a:	4b21      	ldr	r3, [pc, #132]	@ (8001020 <MX_USART1_UART_Init+0x90>)
 8000f9c:	4a22      	ldr	r2, [pc, #136]	@ (8001028 <MX_USART1_UART_Init+0x98>)
 8000f9e:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000fa0:	4b1f      	ldr	r3, [pc, #124]	@ (8001020 <MX_USART1_UART_Init+0x90>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000fa6:	4b1e      	ldr	r3, [pc, #120]	@ (8001020 <MX_USART1_UART_Init+0x90>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000fac:	4b1c      	ldr	r3, [pc, #112]	@ (8001020 <MX_USART1_UART_Init+0x90>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000fb2:	4b1b      	ldr	r3, [pc, #108]	@ (8001020 <MX_USART1_UART_Init+0x90>)
 8000fb4:	220c      	movs	r2, #12
 8000fb6:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fb8:	4b19      	ldr	r3, [pc, #100]	@ (8001020 <MX_USART1_UART_Init+0x90>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fbe:	4b18      	ldr	r3, [pc, #96]	@ (8001020 <MX_USART1_UART_Init+0x90>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fc4:	4b16      	ldr	r3, [pc, #88]	@ (8001020 <MX_USART1_UART_Init+0x90>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000fca:	4b15      	ldr	r3, [pc, #84]	@ (8001020 <MX_USART1_UART_Init+0x90>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fd0:	4b13      	ldr	r3, [pc, #76]	@ (8001020 <MX_USART1_UART_Init+0x90>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000fd6:	4812      	ldr	r0, [pc, #72]	@ (8001020 <MX_USART1_UART_Init+0x90>)
 8000fd8:	f00f f92a 	bl	8010230 <HAL_UART_Init>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <MX_USART1_UART_Init+0x56>
  {
    Error_Handler();
 8000fe2:	f000 fb79 	bl	80016d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	480d      	ldr	r0, [pc, #52]	@ (8001020 <MX_USART1_UART_Init+0x90>)
 8000fea:	f010 fc13 	bl	8011814 <HAL_UARTEx_SetTxFifoThreshold>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <MX_USART1_UART_Init+0x68>
  {
    Error_Handler();
 8000ff4:	f000 fb70 	bl	80016d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	4809      	ldr	r0, [pc, #36]	@ (8001020 <MX_USART1_UART_Init+0x90>)
 8000ffc:	f010 fc48 	bl	8011890 <HAL_UARTEx_SetRxFifoThreshold>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <MX_USART1_UART_Init+0x7a>
  {
    Error_Handler();
 8001006:	f000 fb67 	bl	80016d8 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart1) != HAL_OK)
 800100a:	4805      	ldr	r0, [pc, #20]	@ (8001020 <MX_USART1_UART_Init+0x90>)
 800100c:	f010 fbc7 	bl	801179e <HAL_UARTEx_EnableFifoMode>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <MX_USART1_UART_Init+0x8a>
  {
    Error_Handler();
 8001016:	f000 fb5f 	bl	80016d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800101a:	bf00      	nop
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	240005c4 	.word	0x240005c4
 8001024:	40011000 	.word	0x40011000
 8001028:	0001b207 	.word	0x0001b207

0800102c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001032:	4b0d      	ldr	r3, [pc, #52]	@ (8001068 <MX_DMA_Init+0x3c>)
 8001034:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001038:	4a0b      	ldr	r2, [pc, #44]	@ (8001068 <MX_DMA_Init+0x3c>)
 800103a:	f043 0301 	orr.w	r3, r3, #1
 800103e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001042:	4b09      	ldr	r3, [pc, #36]	@ (8001068 <MX_DMA_Init+0x3c>)
 8001044:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001048:	f003 0301 	and.w	r3, r3, #1
 800104c:	607b      	str	r3, [r7, #4]
 800104e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001050:	2200      	movs	r2, #0
 8001052:	2100      	movs	r1, #0
 8001054:	200b      	movs	r0, #11
 8001056:	f001 fb58 	bl	800270a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800105a:	200b      	movs	r0, #11
 800105c:	f001 fb6f 	bl	800273e <HAL_NVIC_EnableIRQ>

}
 8001060:	bf00      	nop
 8001062:	3708      	adds	r7, #8
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	58024400 	.word	0x58024400

0800106c <MX_MDMA_Init>:

/**
  * Enable MDMA controller clock
  */
static void MX_MDMA_Init(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0

  /* MDMA controller clock enable */
  __HAL_RCC_MDMA_CLK_ENABLE();
 8001072:	4b0d      	ldr	r3, [pc, #52]	@ (80010a8 <MX_MDMA_Init+0x3c>)
 8001074:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001078:	4a0b      	ldr	r2, [pc, #44]	@ (80010a8 <MX_MDMA_Init+0x3c>)
 800107a:	f043 0301 	orr.w	r3, r3, #1
 800107e:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8001082:	4b09      	ldr	r3, [pc, #36]	@ (80010a8 <MX_MDMA_Init+0x3c>)
 8001084:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001088:	f003 0301 	and.w	r3, r3, #1
 800108c:	607b      	str	r3, [r7, #4]
 800108e:	687b      	ldr	r3, [r7, #4]
  /* Local variables */

  /* MDMA interrupt initialization */
  /* MDMA_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MDMA_IRQn, 0, 0);
 8001090:	2200      	movs	r2, #0
 8001092:	2100      	movs	r1, #0
 8001094:	207a      	movs	r0, #122	@ 0x7a
 8001096:	f001 fb38 	bl	800270a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(MDMA_IRQn);
 800109a:	207a      	movs	r0, #122	@ 0x7a
 800109c:	f001 fb4f 	bl	800273e <HAL_NVIC_EnableIRQ>

}
 80010a0:	bf00      	nop
 80010a2:	3708      	adds	r7, #8
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	58024400 	.word	0x58024400

080010ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b08c      	sub	sp, #48	@ 0x30
 80010b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b2:	f107 031c 	add.w	r3, r7, #28
 80010b6:	2200      	movs	r2, #0
 80010b8:	601a      	str	r2, [r3, #0]
 80010ba:	605a      	str	r2, [r3, #4]
 80010bc:	609a      	str	r2, [r3, #8]
 80010be:	60da      	str	r2, [r3, #12]
 80010c0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80010c2:	4b52      	ldr	r3, [pc, #328]	@ (800120c <MX_GPIO_Init+0x160>)
 80010c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010c8:	4a50      	ldr	r2, [pc, #320]	@ (800120c <MX_GPIO_Init+0x160>)
 80010ca:	f043 0310 	orr.w	r3, r3, #16
 80010ce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010d2:	4b4e      	ldr	r3, [pc, #312]	@ (800120c <MX_GPIO_Init+0x160>)
 80010d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010d8:	f003 0310 	and.w	r3, r3, #16
 80010dc:	61bb      	str	r3, [r7, #24]
 80010de:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010e0:	4b4a      	ldr	r3, [pc, #296]	@ (800120c <MX_GPIO_Init+0x160>)
 80010e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010e6:	4a49      	ldr	r2, [pc, #292]	@ (800120c <MX_GPIO_Init+0x160>)
 80010e8:	f043 0304 	orr.w	r3, r3, #4
 80010ec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010f0:	4b46      	ldr	r3, [pc, #280]	@ (800120c <MX_GPIO_Init+0x160>)
 80010f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010f6:	f003 0304 	and.w	r3, r3, #4
 80010fa:	617b      	str	r3, [r7, #20]
 80010fc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010fe:	4b43      	ldr	r3, [pc, #268]	@ (800120c <MX_GPIO_Init+0x160>)
 8001100:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001104:	4a41      	ldr	r2, [pc, #260]	@ (800120c <MX_GPIO_Init+0x160>)
 8001106:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800110a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800110e:	4b3f      	ldr	r3, [pc, #252]	@ (800120c <MX_GPIO_Init+0x160>)
 8001110:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001114:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001118:	613b      	str	r3, [r7, #16]
 800111a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800111c:	4b3b      	ldr	r3, [pc, #236]	@ (800120c <MX_GPIO_Init+0x160>)
 800111e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001122:	4a3a      	ldr	r2, [pc, #232]	@ (800120c <MX_GPIO_Init+0x160>)
 8001124:	f043 0301 	orr.w	r3, r3, #1
 8001128:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800112c:	4b37      	ldr	r3, [pc, #220]	@ (800120c <MX_GPIO_Init+0x160>)
 800112e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001132:	f003 0301 	and.w	r3, r3, #1
 8001136:	60fb      	str	r3, [r7, #12]
 8001138:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800113a:	4b34      	ldr	r3, [pc, #208]	@ (800120c <MX_GPIO_Init+0x160>)
 800113c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001140:	4a32      	ldr	r2, [pc, #200]	@ (800120c <MX_GPIO_Init+0x160>)
 8001142:	f043 0302 	orr.w	r3, r3, #2
 8001146:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800114a:	4b30      	ldr	r3, [pc, #192]	@ (800120c <MX_GPIO_Init+0x160>)
 800114c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001150:	f003 0302 	and.w	r3, r3, #2
 8001154:	60bb      	str	r3, [r7, #8]
 8001156:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001158:	4b2c      	ldr	r3, [pc, #176]	@ (800120c <MX_GPIO_Init+0x160>)
 800115a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800115e:	4a2b      	ldr	r2, [pc, #172]	@ (800120c <MX_GPIO_Init+0x160>)
 8001160:	f043 0308 	orr.w	r3, r3, #8
 8001164:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001168:	4b28      	ldr	r3, [pc, #160]	@ (800120c <MX_GPIO_Init+0x160>)
 800116a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800116e:	f003 0308 	and.w	r3, r3, #8
 8001172:	607b      	str	r3, [r7, #4]
 8001174:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001176:	2200      	movs	r2, #0
 8001178:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 800117c:	4824      	ldr	r0, [pc, #144]	@ (8001210 <MX_GPIO_Init+0x164>)
 800117e:	f005 fb07 	bl	8006790 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8001182:	2201      	movs	r2, #1
 8001184:	2108      	movs	r1, #8
 8001186:	4823      	ldr	r0, [pc, #140]	@ (8001214 <MX_GPIO_Init+0x168>)
 8001188:	f005 fb02 	bl	8006790 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);
 800118c:	2200      	movs	r2, #0
 800118e:	2101      	movs	r1, #1
 8001190:	4821      	ldr	r0, [pc, #132]	@ (8001218 <MX_GPIO_Init+0x16c>)
 8001192:	f005 fafd 	bl	8006790 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001196:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800119a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800119c:	2301      	movs	r3, #1
 800119e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a0:	2300      	movs	r3, #0
 80011a2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a4:	2300      	movs	r3, #0
 80011a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011a8:	f107 031c 	add.w	r3, r7, #28
 80011ac:	4619      	mov	r1, r3
 80011ae:	4818      	ldr	r0, [pc, #96]	@ (8001210 <MX_GPIO_Init+0x164>)
 80011b0:	f005 f93e 	bl	8006430 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80011b4:	2301      	movs	r3, #1
 80011b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011b8:	2300      	movs	r3, #0
 80011ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011bc:	2300      	movs	r3, #0
 80011be:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011c0:	f107 031c 	add.w	r3, r7, #28
 80011c4:	4619      	mov	r1, r3
 80011c6:	4812      	ldr	r0, [pc, #72]	@ (8001210 <MX_GPIO_Init+0x164>)
 80011c8:	f005 f932 	bl	8006430 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80011cc:	2308      	movs	r3, #8
 80011ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011d0:	2301      	movs	r3, #1
 80011d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d4:	2300      	movs	r3, #0
 80011d6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d8:	2300      	movs	r3, #0
 80011da:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011dc:	f107 031c 	add.w	r3, r7, #28
 80011e0:	4619      	mov	r1, r3
 80011e2:	480c      	ldr	r0, [pc, #48]	@ (8001214 <MX_GPIO_Init+0x168>)
 80011e4:	f005 f924 	bl	8006430 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80011e8:	2301      	movs	r3, #1
 80011ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ec:	2301      	movs	r3, #1
 80011ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f0:	2300      	movs	r3, #0
 80011f2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f4:	2300      	movs	r3, #0
 80011f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011f8:	f107 031c 	add.w	r3, r7, #28
 80011fc:	4619      	mov	r1, r3
 80011fe:	4806      	ldr	r0, [pc, #24]	@ (8001218 <MX_GPIO_Init+0x16c>)
 8001200:	f005 f916 	bl	8006430 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001204:	bf00      	nop
 8001206:	3730      	adds	r7, #48	@ 0x30
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	58024400 	.word	0x58024400
 8001210:	58020800 	.word	0x58020800
 8001214:	58020000 	.word	0x58020000
 8001218:	58020c00 	.word	0x58020c00

0800121c <HAL_DCMI_VsyncEventCallback>:

/* USER CODE BEGIN 4 */

// ------------------------------------------------------------ OVERRIDE CALLBACKS -- //
// Frame captured event, called when the DMA buffer is full of new frame data
void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi) {
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
	if (!camera_state) return;	// Do nothing if the camera is IDLE
 8001224:	4b0e      	ldr	r3, [pc, #56]	@ (8001260 <HAL_DCMI_VsyncEventCallback+0x44>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	b2db      	uxtb	r3, r3
 800122a:	2b00      	cmp	r3, #0
 800122c:	d014      	beq.n	8001258 <HAL_DCMI_VsyncEventCallback+0x3c>

	if (camera_state == 1) {	// Transition flag to CAPTURING
 800122e:	4b0c      	ldr	r3, [pc, #48]	@ (8001260 <HAL_DCMI_VsyncEventCallback+0x44>)
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	b2db      	uxtb	r3, r3
 8001234:	2b01      	cmp	r3, #1
 8001236:	d103      	bne.n	8001240 <HAL_DCMI_VsyncEventCallback+0x24>
		camera_state = 2;
 8001238:	4b09      	ldr	r3, [pc, #36]	@ (8001260 <HAL_DCMI_VsyncEventCallback+0x44>)
 800123a:	2202      	movs	r2, #2
 800123c:	701a      	strb	r2, [r3, #0]
		return;
 800123e:	e00c      	b.n	800125a <HAL_DCMI_VsyncEventCallback+0x3e>
	}

	if (camera_state == 2) {	// Transition flag to IDLE
 8001240:	4b07      	ldr	r3, [pc, #28]	@ (8001260 <HAL_DCMI_VsyncEventCallback+0x44>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	b2db      	uxtb	r3, r3
 8001246:	2b02      	cmp	r3, #2
 8001248:	d107      	bne.n	800125a <HAL_DCMI_VsyncEventCallback+0x3e>
		HAL_DCMI_Stop(hdcmi);
 800124a:	6878      	ldr	r0, [r7, #4]
 800124c:	f001 fc46 	bl	8002adc <HAL_DCMI_Stop>
		camera_state = 0;
 8001250:	4b03      	ldr	r3, [pc, #12]	@ (8001260 <HAL_DCMI_VsyncEventCallback+0x44>)
 8001252:	2200      	movs	r2, #0
 8001254:	701a      	strb	r2, [r3, #0]
		return;
 8001256:	e000      	b.n	800125a <HAL_DCMI_VsyncEventCallback+0x3e>
	if (!camera_state) return;	// Do nothing if the camera is IDLE
 8001258:	bf00      	nop
	}
}
 800125a:	3708      	adds	r7, #8
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	2400516e 	.word	0x2400516e

08001264 <HAL_JPEG_GetDataCallback>:

// JPEG hardware is requesting the next MCU block
void HAL_JPEG_GetDataCallback(JPEG_HandleTypeDef *hjpeg, uint32_t NbDecodedData) {
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
 800126c:	6039      	str	r1, [r7, #0]
	//		sprintf(usb_msg, "JPEG: Block: %d\r\n", jpeg_block);
	//		CDC_Transmit_FS(usb_msg, strlen(usb_msg));
	//	}

	// Restock the input buffer with new MCU
	if (GenerateJPEGMCUBlock()) {
 800126e:	f000 f97b 	bl	8001568 <GenerateJPEGMCUBlock>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d006      	beq.n	8001286 <HAL_JPEG_GetDataCallback+0x22>
		// ERROR while generating MCU, probable memory leak - recover JPEG peripheral by restarting
		// Reset JPEG variables
		jpeg_ready = 1;
 8001278:	4b07      	ldr	r3, [pc, #28]	@ (8001298 <HAL_JPEG_GetDataCallback+0x34>)
 800127a:	2201      	movs	r2, #1
 800127c:	701a      	strb	r2, [r3, #0]
		jpeg_block = 0;
 800127e:	4b07      	ldr	r3, [pc, #28]	@ (800129c <HAL_JPEG_GetDataCallback+0x38>)
 8001280:	2200      	movs	r2, #0
 8001282:	601a      	str	r2, [r3, #0]
	}
	else {
		// Configure the buffer to be the same as before, it's contents have changed
		HAL_JPEG_ConfigInputBuffer(hjpeg, jpeg_mcu, 64);
	}
}
 8001284:	e004      	b.n	8001290 <HAL_JPEG_GetDataCallback+0x2c>
		HAL_JPEG_ConfigInputBuffer(hjpeg, jpeg_mcu, 64);
 8001286:	2240      	movs	r2, #64	@ 0x40
 8001288:	4905      	ldr	r1, [pc, #20]	@ (80012a0 <HAL_JPEG_GetDataCallback+0x3c>)
 800128a:	6878      	ldr	r0, [r7, #4]
 800128c:	f007 fae8 	bl	8008860 <HAL_JPEG_ConfigInputBuffer>
}
 8001290:	bf00      	nop
 8001292:	3708      	adds	r7, #8
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	24000000 	.word	0x24000000
 800129c:	240051b0 	.word	0x240051b0
 80012a0:	24005170 	.word	0x24005170

080012a4 <HAL_JPEG_DataReadyCallback>:

// JPEG hardware is requesting a larger output buffer.
// This is done to manage JPEG output size, give it a buffer only as large as required
void HAL_JPEG_DataReadyCallback(JPEG_HandleTypeDef *hjpeg, uint8_t *pDataOut, uint32_t OutDataLength) {
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b084      	sub	sp, #16
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	60f8      	str	r0, [r7, #12]
 80012ac:	60b9      	str	r1, [r7, #8]
 80012ae:	607a      	str	r2, [r7, #4]
	// Setup new output buffer location (part of contiguous super-buffer)
	jpeg_size += JPEG_OUTBUF_SIZE;
 80012b0:	4b08      	ldr	r3, [pc, #32]	@ (80012d4 <HAL_JPEG_DataReadyCallback+0x30>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	3340      	adds	r3, #64	@ 0x40
 80012b6:	4a07      	ldr	r2, [pc, #28]	@ (80012d4 <HAL_JPEG_DataReadyCallback+0x30>)
 80012b8:	6013      	str	r3, [r2, #0]
	HAL_JPEG_ConfigOutputBuffer(hjpeg, jpeg_out + jpeg_size, JPEG_OUTBUF_SIZE);
 80012ba:	4b06      	ldr	r3, [pc, #24]	@ (80012d4 <HAL_JPEG_DataReadyCallback+0x30>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4a06      	ldr	r2, [pc, #24]	@ (80012d8 <HAL_JPEG_DataReadyCallback+0x34>)
 80012c0:	4413      	add	r3, r2
 80012c2:	2240      	movs	r2, #64	@ 0x40
 80012c4:	4619      	mov	r1, r3
 80012c6:	68f8      	ldr	r0, [r7, #12]
 80012c8:	f007 fadc 	bl	8008884 <HAL_JPEG_ConfigOutputBuffer>
	// Debug MSG
	//	sprintf(usb_msg, "JPEG: DataReady - output: %d\r\n", jpeg_size);
	//	CDC_Transmit_FS(usb_msg, strlen(usb_msg));
}
 80012cc:	bf00      	nop
 80012ce:	3710      	adds	r7, #16
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	24009c64 	.word	0x24009c64
 80012d8:	240051b4 	.word	0x240051b4

080012dc <HAL_JPEG_EncodeCpltCallback>:

// JPEG hardware has completed the current image
void HAL_JPEG_EncodeCpltCallback(JPEG_HandleTypeDef *hjpeg) {
 80012dc:	b480      	push	{r7}
 80012de:	b083      	sub	sp, #12
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
	// Reset JPEG variables
	jpeg_ready = 1;
 80012e4:	4b05      	ldr	r3, [pc, #20]	@ (80012fc <HAL_JPEG_EncodeCpltCallback+0x20>)
 80012e6:	2201      	movs	r2, #1
 80012e8:	701a      	strb	r2, [r3, #0]
	jpeg_block = 0;
 80012ea:	4b05      	ldr	r3, [pc, #20]	@ (8001300 <HAL_JPEG_EncodeCpltCallback+0x24>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]
	// Debug MSG
	//	sprintf(usb_msg, "JPEG: Finished encode\r\n");
	//	CDC_Transmit_FS(usb_msg, strlen(usb_msg));
}
 80012f0:	bf00      	nop
 80012f2:	370c      	adds	r7, #12
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr
 80012fc:	24000000 	.word	0x24000000
 8001300:	240051b0 	.word	0x240051b0

08001304 <WriteDebug>:

// ------------------------------------------------------------ UTILITY FUNCTIONS -- //
// Transmit wrapper, this is for continuity across Controller project which debugs by printing to OLEDs
void WriteDebug(uint8_t *str_ptr, uint8_t str_len) {
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	460b      	mov	r3, r1
 800130e:	70fb      	strb	r3, [r7, #3]
	CDC_Transmit_FS(str_ptr, str_len);
 8001310:	78fb      	ldrb	r3, [r7, #3]
 8001312:	4619      	mov	r1, r3
 8001314:	6878      	ldr	r0, [r7, #4]
 8001316:	f014 f817 	bl	8015348 <CDC_Transmit_FS>
}
 800131a:	bf00      	nop
 800131c:	3708      	adds	r7, #8
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
	...

08001324 <CAM_GetRegister>:

HAL_StatusTypeDef CAM_GetRegister(uint8_t addr, uint8_t* pData, uint8_t haltOnError) {
 8001324:	b580      	push	{r7, lr}
 8001326:	b09e      	sub	sp, #120	@ 0x78
 8001328:	af02      	add	r7, sp, #8
 800132a:	4603      	mov	r3, r0
 800132c:	6039      	str	r1, [r7, #0]
 800132e:	71fb      	strb	r3, [r7, #7]
 8001330:	4613      	mov	r3, r2
 8001332:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef ov_result;
	uint8_t usb_msg[100] = {0};
 8001334:	f107 0308 	add.w	r3, r7, #8
 8001338:	2264      	movs	r2, #100	@ 0x64
 800133a:	2100      	movs	r1, #0
 800133c:	4618      	mov	r0, r3
 800133e:	f014 fd5b 	bl	8015df8 <memset>

	ov_result = HAL_I2C_Master_Transmit(&hi2c2, OV7670_ADDR_READ, &addr, 1, 100);
 8001342:	1dfa      	adds	r2, r7, #7
 8001344:	2364      	movs	r3, #100	@ 0x64
 8001346:	9300      	str	r3, [sp, #0]
 8001348:	2301      	movs	r3, #1
 800134a:	2143      	movs	r1, #67	@ 0x43
 800134c:	482f      	ldr	r0, [pc, #188]	@ (800140c <CAM_GetRegister+0xe8>)
 800134e:	f005 fad5 	bl	80068fc <HAL_I2C_Master_Transmit>
 8001352:	4603      	mov	r3, r0
 8001354:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	if (ov_result) {
 8001358:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800135c:	2b00      	cmp	r3, #0
 800135e:	d020      	beq.n	80013a2 <CAM_GetRegister+0x7e>
		if (haltOnError) {
 8001360:	79bb      	ldrb	r3, [r7, #6]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d01a      	beq.n	800139c <CAM_GetRegister+0x78>
			sprintf(usb_msg, "TX ERROR: Cannot read camera register 0x%X - Code 0x%X\r\n", addr, ov_result);
 8001366:	79fb      	ldrb	r3, [r7, #7]
 8001368:	461a      	mov	r2, r3
 800136a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800136e:	f107 0008 	add.w	r0, r7, #8
 8001372:	4927      	ldr	r1, [pc, #156]	@ (8001410 <CAM_GetRegister+0xec>)
 8001374:	f014 fd1e 	bl	8015db4 <siprintf>
			while (1) {
				CDC_Transmit_FS(usb_msg, strlen(usb_msg));
 8001378:	f107 0308 	add.w	r3, r7, #8
 800137c:	4618      	mov	r0, r3
 800137e:	f7fe ffaf 	bl	80002e0 <strlen>
 8001382:	4602      	mov	r2, r0
 8001384:	f107 0308 	add.w	r3, r7, #8
 8001388:	4611      	mov	r1, r2
 800138a:	4618      	mov	r0, r3
 800138c:	f013 ffdc 	bl	8015348 <CDC_Transmit_FS>
				HAL_Delay(1000);
 8001390:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001394:	f001 f8ae 	bl	80024f4 <HAL_Delay>
			while (1) {
 8001398:	bf00      	nop
 800139a:	e7ed      	b.n	8001378 <CAM_GetRegister+0x54>
			}
		}
		return ov_result;
 800139c:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80013a0:	e030      	b.n	8001404 <CAM_GetRegister+0xe0>
	}


	ov_result = HAL_I2C_Master_Receive(&hi2c2, OV7670_ADDR_READ, pData, 1, 100);
 80013a2:	2364      	movs	r3, #100	@ 0x64
 80013a4:	9300      	str	r3, [sp, #0]
 80013a6:	2301      	movs	r3, #1
 80013a8:	683a      	ldr	r2, [r7, #0]
 80013aa:	2143      	movs	r1, #67	@ 0x43
 80013ac:	4817      	ldr	r0, [pc, #92]	@ (800140c <CAM_GetRegister+0xe8>)
 80013ae:	f005 fbbd 	bl	8006b2c <HAL_I2C_Master_Receive>
 80013b2:	4603      	mov	r3, r0
 80013b4:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	if (ov_result) {
 80013b8:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d020      	beq.n	8001402 <CAM_GetRegister+0xde>
		if (haltOnError) {
 80013c0:	79bb      	ldrb	r3, [r7, #6]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d01a      	beq.n	80013fc <CAM_GetRegister+0xd8>
			sprintf(usb_msg, "RX ERROR: Cannot read camera register 0x%X - Code 0x%X\r\n", addr, ov_result);
 80013c6:	79fb      	ldrb	r3, [r7, #7]
 80013c8:	461a      	mov	r2, r3
 80013ca:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80013ce:	f107 0008 	add.w	r0, r7, #8
 80013d2:	4910      	ldr	r1, [pc, #64]	@ (8001414 <CAM_GetRegister+0xf0>)
 80013d4:	f014 fcee 	bl	8015db4 <siprintf>
			while (1) {
				CDC_Transmit_FS(usb_msg, strlen(usb_msg));
 80013d8:	f107 0308 	add.w	r3, r7, #8
 80013dc:	4618      	mov	r0, r3
 80013de:	f7fe ff7f 	bl	80002e0 <strlen>
 80013e2:	4602      	mov	r2, r0
 80013e4:	f107 0308 	add.w	r3, r7, #8
 80013e8:	4611      	mov	r1, r2
 80013ea:	4618      	mov	r0, r3
 80013ec:	f013 ffac 	bl	8015348 <CDC_Transmit_FS>
				HAL_Delay(1000);
 80013f0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80013f4:	f001 f87e 	bl	80024f4 <HAL_Delay>
			while (1) {
 80013f8:	bf00      	nop
 80013fa:	e7ed      	b.n	80013d8 <CAM_GetRegister+0xb4>
			}
		}
		return ov_result;
 80013fc:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001400:	e000      	b.n	8001404 <CAM_GetRegister+0xe0>
	}


	return HAL_OK;
 8001402:	2300      	movs	r3, #0
}
 8001404:	4618      	mov	r0, r3
 8001406:	3770      	adds	r7, #112	@ 0x70
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	2400023c 	.word	0x2400023c
 8001410:	080165e8 	.word	0x080165e8
 8001414:	08016624 	.word	0x08016624

08001418 <CAM_SetRegister>:

HAL_StatusTypeDef CAM_SetRegister(uint8_t addr, uint8_t data, uint8_t haltOnError) {
 8001418:	b580      	push	{r7, lr}
 800141a:	b0a0      	sub	sp, #128	@ 0x80
 800141c:	af02      	add	r7, sp, #8
 800141e:	4603      	mov	r3, r0
 8001420:	71fb      	strb	r3, [r7, #7]
 8001422:	460b      	mov	r3, r1
 8001424:	71bb      	strb	r3, [r7, #6]
 8001426:	4613      	mov	r3, r2
 8001428:	717b      	strb	r3, [r7, #5]
	HAL_StatusTypeDef ov_result;
	uint8_t usb_msg[100] = {0};
 800142a:	f107 0310 	add.w	r3, r7, #16
 800142e:	2264      	movs	r2, #100	@ 0x64
 8001430:	2100      	movs	r1, #0
 8001432:	4618      	mov	r0, r3
 8001434:	f014 fce0 	bl	8015df8 <memset>

	uint8_t reg_set[2] = {addr, data};
 8001438:	79fb      	ldrb	r3, [r7, #7]
 800143a:	733b      	strb	r3, [r7, #12]
 800143c:	79bb      	ldrb	r3, [r7, #6]
 800143e:	737b      	strb	r3, [r7, #13]

	ov_result = HAL_I2C_Master_Transmit(&hi2c2, OV7670_ADDR_WRITE, reg_set, 2, 100);
 8001440:	f107 020c 	add.w	r2, r7, #12
 8001444:	2364      	movs	r3, #100	@ 0x64
 8001446:	9300      	str	r3, [sp, #0]
 8001448:	2302      	movs	r3, #2
 800144a:	2142      	movs	r1, #66	@ 0x42
 800144c:	4841      	ldr	r0, [pc, #260]	@ (8001554 <CAM_SetRegister+0x13c>)
 800144e:	f005 fa55 	bl	80068fc <HAL_I2C_Master_Transmit>
 8001452:	4603      	mov	r3, r0
 8001454:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
	if (ov_result) {
 8001458:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800145c:	2b00      	cmp	r3, #0
 800145e:	d01f      	beq.n	80014a0 <CAM_SetRegister+0x88>
		if (haltOnError) {
 8001460:	797b      	ldrb	r3, [r7, #5]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d019      	beq.n	800149a <CAM_SetRegister+0x82>
			sprintf(usb_msg, "TX ERROR: Cannot write camera register 0x%X - Code 0x%X\r\n", addr, ov_result);
 8001466:	79fa      	ldrb	r2, [r7, #7]
 8001468:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800146c:	f107 0010 	add.w	r0, r7, #16
 8001470:	4939      	ldr	r1, [pc, #228]	@ (8001558 <CAM_SetRegister+0x140>)
 8001472:	f014 fc9f 	bl	8015db4 <siprintf>
			while (1) {
				CDC_Transmit_FS(usb_msg, strlen(usb_msg));
 8001476:	f107 0310 	add.w	r3, r7, #16
 800147a:	4618      	mov	r0, r3
 800147c:	f7fe ff30 	bl	80002e0 <strlen>
 8001480:	4602      	mov	r2, r0
 8001482:	f107 0310 	add.w	r3, r7, #16
 8001486:	4611      	mov	r1, r2
 8001488:	4618      	mov	r0, r3
 800148a:	f013 ff5d 	bl	8015348 <CDC_Transmit_FS>
				HAL_Delay(1000);
 800148e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001492:	f001 f82f 	bl	80024f4 <HAL_Delay>
			while (1) {
 8001496:	bf00      	nop
 8001498:	e7ed      	b.n	8001476 <CAM_SetRegister+0x5e>
			}
		}
		return ov_result;
 800149a:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800149e:	e054      	b.n	800154a <CAM_SetRegister+0x132>
	}

	// Confirm write
	uint8_t reg_get = 0x00;
 80014a0:	2300      	movs	r3, #0
 80014a2:	72fb      	strb	r3, [r7, #11]
	ov_result = CAM_GetRegister(addr, &reg_get, 1);
 80014a4:	f107 010b 	add.w	r1, r7, #11
 80014a8:	79fb      	ldrb	r3, [r7, #7]
 80014aa:	2201      	movs	r2, #1
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7ff ff39 	bl	8001324 <CAM_GetRegister>
 80014b2:	4603      	mov	r3, r0
 80014b4:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
	if (ov_result) {
 80014b8:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d01f      	beq.n	8001500 <CAM_SetRegister+0xe8>
		if (haltOnError) {
 80014c0:	797b      	ldrb	r3, [r7, #5]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d019      	beq.n	80014fa <CAM_SetRegister+0xe2>
			sprintf(usb_msg, "CF ERROR: Cannot confirm camera register 0x%X - Code 0x%X\r\n", addr, ov_result);
 80014c6:	79fa      	ldrb	r2, [r7, #7]
 80014c8:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80014cc:	f107 0010 	add.w	r0, r7, #16
 80014d0:	4922      	ldr	r1, [pc, #136]	@ (800155c <CAM_SetRegister+0x144>)
 80014d2:	f014 fc6f 	bl	8015db4 <siprintf>
			while (1) {
				CDC_Transmit_FS(usb_msg, strlen(usb_msg));
 80014d6:	f107 0310 	add.w	r3, r7, #16
 80014da:	4618      	mov	r0, r3
 80014dc:	f7fe ff00 	bl	80002e0 <strlen>
 80014e0:	4602      	mov	r2, r0
 80014e2:	f107 0310 	add.w	r3, r7, #16
 80014e6:	4611      	mov	r1, r2
 80014e8:	4618      	mov	r0, r3
 80014ea:	f013 ff2d 	bl	8015348 <CDC_Transmit_FS>
				HAL_Delay(1000);
 80014ee:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80014f2:	f000 ffff 	bl	80024f4 <HAL_Delay>
			while (1) {
 80014f6:	bf00      	nop
 80014f8:	e7ed      	b.n	80014d6 <CAM_SetRegister+0xbe>
			}
		}
		else {
			return ov_result;
 80014fa:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80014fe:	e024      	b.n	800154a <CAM_SetRegister+0x132>
		}
	}

	if (reg_get != data) {
 8001500:	7afb      	ldrb	r3, [r7, #11]
 8001502:	79ba      	ldrb	r2, [r7, #6]
 8001504:	429a      	cmp	r2, r3
 8001506:	d01f      	beq.n	8001548 <CAM_SetRegister+0x130>
		// Error, bad write
		if (haltOnError) {
 8001508:	797b      	ldrb	r3, [r7, #5]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d01a      	beq.n	8001544 <CAM_SetRegister+0x12c>
			sprintf(usb_msg, "CF ERROR: Bad write to register 0x%X - EXPECTED 0x%X, GOT 0x%X\r\n", addr, data, reg_get);
 800150e:	79fa      	ldrb	r2, [r7, #7]
 8001510:	79bb      	ldrb	r3, [r7, #6]
 8001512:	7af9      	ldrb	r1, [r7, #11]
 8001514:	f107 0010 	add.w	r0, r7, #16
 8001518:	9100      	str	r1, [sp, #0]
 800151a:	4911      	ldr	r1, [pc, #68]	@ (8001560 <CAM_SetRegister+0x148>)
 800151c:	f014 fc4a 	bl	8015db4 <siprintf>
			while (1) {
				CDC_Transmit_FS(usb_msg, strlen(usb_msg));
 8001520:	f107 0310 	add.w	r3, r7, #16
 8001524:	4618      	mov	r0, r3
 8001526:	f7fe fedb 	bl	80002e0 <strlen>
 800152a:	4602      	mov	r2, r0
 800152c:	f107 0310 	add.w	r3, r7, #16
 8001530:	4611      	mov	r1, r2
 8001532:	4618      	mov	r0, r3
 8001534:	f013 ff08 	bl	8015348 <CDC_Transmit_FS>
				HAL_Delay(1000);
 8001538:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800153c:	f000 ffda 	bl	80024f4 <HAL_Delay>
			while (1) {
 8001540:	bf00      	nop
 8001542:	e7ed      	b.n	8001520 <CAM_SetRegister+0x108>
			}
		}
		return HAL_ERROR;
 8001544:	2301      	movs	r3, #1
 8001546:	e000      	b.n	800154a <CAM_SetRegister+0x132>
	}

	return HAL_OK;
 8001548:	2300      	movs	r3, #0
}
 800154a:	4618      	mov	r0, r3
 800154c:	3778      	adds	r7, #120	@ 0x78
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	2400023c 	.word	0x2400023c
 8001558:	08016660 	.word	0x08016660
 800155c:	0801669c 	.word	0x0801669c
 8001560:	080166d8 	.word	0x080166d8
 8001564:	00000000 	.word	0x00000000

08001568 <GenerateJPEGMCUBlock>:

// GENERATE JPEG MCU BLOCK
uint8_t GenerateJPEGMCUBlock() {
 8001568:	b480      	push	{r7}
 800156a:	b087      	sub	sp, #28
 800156c:	af00      	add	r7, sp, #0
	if (jpeg_block >= JPEG_MCU_WIDTH*JPEG_MCU_HEIGHT) { return 1; }
 800156e:	4b40      	ldr	r3, [pc, #256]	@ (8001670 <GenerateJPEGMCUBlock+0x108>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	2b35      	cmp	r3, #53	@ 0x35
 8001574:	d901      	bls.n	800157a <GenerateJPEGMCUBlock+0x12>
 8001576:	2301      	movs	r3, #1
 8001578:	e06a      	b.n	8001650 <GenerateJPEGMCUBlock+0xe8>
	int xStart = (jpeg_block % JPEG_MCU_WIDTH) * 8;
 800157a:	4b3d      	ldr	r3, [pc, #244]	@ (8001670 <GenerateJPEGMCUBlock+0x108>)
 800157c:	6819      	ldr	r1, [r3, #0]
 800157e:	4b3d      	ldr	r3, [pc, #244]	@ (8001674 <GenerateJPEGMCUBlock+0x10c>)
 8001580:	fba3 2301 	umull	r2, r3, r3, r1
 8001584:	089a      	lsrs	r2, r3, #2
 8001586:	4613      	mov	r3, r2
 8001588:	005b      	lsls	r3, r3, #1
 800158a:	4413      	add	r3, r2
 800158c:	005b      	lsls	r3, r3, #1
 800158e:	1aca      	subs	r2, r1, r3
 8001590:	00d3      	lsls	r3, r2, #3
 8001592:	60bb      	str	r3, [r7, #8]
	int yStart = (jpeg_block / JPEG_MCU_WIDTH) * 8;
 8001594:	4b36      	ldr	r3, [pc, #216]	@ (8001670 <GenerateJPEGMCUBlock+0x108>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a36      	ldr	r2, [pc, #216]	@ (8001674 <GenerateJPEGMCUBlock+0x10c>)
 800159a:	fba2 2303 	umull	r2, r3, r2, r3
 800159e:	089b      	lsrs	r3, r3, #2
 80015a0:	00db      	lsls	r3, r3, #3
 80015a2:	607b      	str	r3, [r7, #4]
	int i = 0;
 80015a4:	2300      	movs	r3, #0
 80015a6:	617b      	str	r3, [r7, #20]
	for (int y = yStart; y < yStart + 8; y++) {
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	613b      	str	r3, [r7, #16]
 80015ac:	e045      	b.n	800163a <GenerateJPEGMCUBlock+0xd2>
		for (int x = xStart; x < xStart + 8; x++) {
 80015ae:	68bb      	ldr	r3, [r7, #8]
 80015b0:	60fb      	str	r3, [r7, #12]
 80015b2:	e03a      	b.n	800162a <GenerateJPEGMCUBlock+0xc2>
			// Pad to 8x8
			if ((x*3.33) >= CAM_WIDTH) {
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	ee07 3a90 	vmov	s15, r3
 80015ba:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80015be:	ed9f 6b28 	vldr	d6, [pc, #160]	@ 8001660 <GenerateJPEGMCUBlock+0xf8>
 80015c2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80015c6:	ed9f 6b28 	vldr	d6, [pc, #160]	@ 8001668 <GenerateJPEGMCUBlock+0x100>
 80015ca:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80015ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015d2:	db05      	blt.n	80015e0 <GenerateJPEGMCUBlock+0x78>
				jpeg_mcu[i] = 0x00;
 80015d4:	4a28      	ldr	r2, [pc, #160]	@ (8001678 <GenerateJPEGMCUBlock+0x110>)
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	4413      	add	r3, r2
 80015da:	2200      	movs	r2, #0
 80015dc:	701a      	strb	r2, [r3, #0]
 80015de:	e01e      	b.n	800161e <GenerateJPEGMCUBlock+0xb6>
			} else {
				jpeg_mcu[i] = camera_mem[(uint16_t)(x*3.33) + (uint16_t)(y*2) * CAM_WIDTH];
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	ee07 3a90 	vmov	s15, r3
 80015e6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80015ea:	ed9f 6b1d 	vldr	d6, [pc, #116]	@ 8001660 <GenerateJPEGMCUBlock+0xf8>
 80015ee:	ee27 7b06 	vmul.f64	d7, d7, d6
 80015f2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80015f6:	ee17 3a90 	vmov	r3, s15
 80015fa:	b29b      	uxth	r3, r3
 80015fc:	461a      	mov	r2, r3
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	b29b      	uxth	r3, r3
 8001602:	005b      	lsls	r3, r3, #1
 8001604:	b29b      	uxth	r3, r3
 8001606:	4619      	mov	r1, r3
 8001608:	239e      	movs	r3, #158	@ 0x9e
 800160a:	fb01 f303 	mul.w	r3, r1, r3
 800160e:	4413      	add	r3, r2
 8001610:	4a1a      	ldr	r2, [pc, #104]	@ (800167c <GenerateJPEGMCUBlock+0x114>)
 8001612:	5cd1      	ldrb	r1, [r2, r3]
 8001614:	4a18      	ldr	r2, [pc, #96]	@ (8001678 <GenerateJPEGMCUBlock+0x110>)
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	4413      	add	r3, r2
 800161a:	460a      	mov	r2, r1
 800161c:	701a      	strb	r2, [r3, #0]
			}
			i++;
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	3301      	adds	r3, #1
 8001622:	617b      	str	r3, [r7, #20]
		for (int x = xStart; x < xStart + 8; x++) {
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	3301      	adds	r3, #1
 8001628:	60fb      	str	r3, [r7, #12]
 800162a:	68bb      	ldr	r3, [r7, #8]
 800162c:	3307      	adds	r3, #7
 800162e:	68fa      	ldr	r2, [r7, #12]
 8001630:	429a      	cmp	r2, r3
 8001632:	ddbf      	ble.n	80015b4 <GenerateJPEGMCUBlock+0x4c>
	for (int y = yStart; y < yStart + 8; y++) {
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	3301      	adds	r3, #1
 8001638:	613b      	str	r3, [r7, #16]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	3307      	adds	r3, #7
 800163e:	693a      	ldr	r2, [r7, #16]
 8001640:	429a      	cmp	r2, r3
 8001642:	ddb4      	ble.n	80015ae <GenerateJPEGMCUBlock+0x46>
		}
	}
	jpeg_block++;
 8001644:	4b0a      	ldr	r3, [pc, #40]	@ (8001670 <GenerateJPEGMCUBlock+0x108>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	3301      	adds	r3, #1
 800164a:	4a09      	ldr	r2, [pc, #36]	@ (8001670 <GenerateJPEGMCUBlock+0x108>)
 800164c:	6013      	str	r3, [r2, #0]
	return 0;
 800164e:	2300      	movs	r3, #0
}
 8001650:	4618      	mov	r0, r3
 8001652:	371c      	adds	r7, #28
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr
 800165c:	f3af 8000 	nop.w
 8001660:	0a3d70a4 	.word	0x0a3d70a4
 8001664:	400aa3d7 	.word	0x400aa3d7
 8001668:	00000000 	.word	0x00000000
 800166c:	4063c000 	.word	0x4063c000
 8001670:	240051b0 	.word	0x240051b0
 8001674:	aaaaaaab 	.word	0xaaaaaaab
 8001678:	24005170 	.word	0x24005170
 800167c:	240006c0 	.word	0x240006c0

08001680 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b084      	sub	sp, #16
 8001684:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001686:	463b      	mov	r3, r7
 8001688:	2200      	movs	r2, #0
 800168a:	601a      	str	r2, [r3, #0]
 800168c:	605a      	str	r2, [r3, #4]
 800168e:	609a      	str	r2, [r3, #8]
 8001690:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001692:	f001 f86f 	bl	8002774 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001696:	2301      	movs	r3, #1
 8001698:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800169a:	2300      	movs	r3, #0
 800169c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800169e:	2300      	movs	r3, #0
 80016a0:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80016a2:	231f      	movs	r3, #31
 80016a4:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80016a6:	2387      	movs	r3, #135	@ 0x87
 80016a8:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80016aa:	2300      	movs	r3, #0
 80016ac:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80016ae:	2300      	movs	r3, #0
 80016b0:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80016b2:	2301      	movs	r3, #1
 80016b4:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80016b6:	2301      	movs	r3, #1
 80016b8:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80016ba:	2300      	movs	r3, #0
 80016bc:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80016be:	2300      	movs	r3, #0
 80016c0:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80016c2:	463b      	mov	r3, r7
 80016c4:	4618      	mov	r0, r3
 80016c6:	f001 f88d 	bl	80027e4 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80016ca:	2004      	movs	r0, #4
 80016cc:	f001 f86a 	bl	80027a4 <HAL_MPU_Enable>

}
 80016d0:	bf00      	nop
 80016d2:	3710      	adds	r7, #16
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}

080016d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016dc:	b672      	cpsid	i
}
 80016de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80016e0:	bf00      	nop
 80016e2:	e7fd      	b.n	80016e0 <Error_Handler+0x8>

080016e4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ea:	4b0a      	ldr	r3, [pc, #40]	@ (8001714 <HAL_MspInit+0x30>)
 80016ec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80016f0:	4a08      	ldr	r2, [pc, #32]	@ (8001714 <HAL_MspInit+0x30>)
 80016f2:	f043 0302 	orr.w	r3, r3, #2
 80016f6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80016fa:	4b06      	ldr	r3, [pc, #24]	@ (8001714 <HAL_MspInit+0x30>)
 80016fc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001700:	f003 0302 	and.w	r3, r3, #2
 8001704:	607b      	str	r3, [r7, #4]
 8001706:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001708:	bf00      	nop
 800170a:	370c      	adds	r7, #12
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr
 8001714:	58024400 	.word	0x58024400

08001718 <HAL_DCMI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdcmi: DCMI handle pointer
  * @retval None
  */
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b08e      	sub	sp, #56	@ 0x38
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001720:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001724:	2200      	movs	r2, #0
 8001726:	601a      	str	r2, [r3, #0]
 8001728:	605a      	str	r2, [r3, #4]
 800172a:	609a      	str	r2, [r3, #8]
 800172c:	60da      	str	r2, [r3, #12]
 800172e:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a79      	ldr	r2, [pc, #484]	@ (800191c <HAL_DCMI_MspInit+0x204>)
 8001736:	4293      	cmp	r3, r2
 8001738:	f040 80ec 	bne.w	8001914 <HAL_DCMI_MspInit+0x1fc>
  {
    /* USER CODE BEGIN DCMI_MspInit 0 */

    /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 800173c:	4b78      	ldr	r3, [pc, #480]	@ (8001920 <HAL_DCMI_MspInit+0x208>)
 800173e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8001742:	4a77      	ldr	r2, [pc, #476]	@ (8001920 <HAL_DCMI_MspInit+0x208>)
 8001744:	f043 0301 	orr.w	r3, r3, #1
 8001748:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800174c:	4b74      	ldr	r3, [pc, #464]	@ (8001920 <HAL_DCMI_MspInit+0x208>)
 800174e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8001752:	f003 0301 	and.w	r3, r3, #1
 8001756:	623b      	str	r3, [r7, #32]
 8001758:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800175a:	4b71      	ldr	r3, [pc, #452]	@ (8001920 <HAL_DCMI_MspInit+0x208>)
 800175c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001760:	4a6f      	ldr	r2, [pc, #444]	@ (8001920 <HAL_DCMI_MspInit+0x208>)
 8001762:	f043 0310 	orr.w	r3, r3, #16
 8001766:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800176a:	4b6d      	ldr	r3, [pc, #436]	@ (8001920 <HAL_DCMI_MspInit+0x208>)
 800176c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001770:	f003 0310 	and.w	r3, r3, #16
 8001774:	61fb      	str	r3, [r7, #28]
 8001776:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001778:	4b69      	ldr	r3, [pc, #420]	@ (8001920 <HAL_DCMI_MspInit+0x208>)
 800177a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800177e:	4a68      	ldr	r2, [pc, #416]	@ (8001920 <HAL_DCMI_MspInit+0x208>)
 8001780:	f043 0301 	orr.w	r3, r3, #1
 8001784:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001788:	4b65      	ldr	r3, [pc, #404]	@ (8001920 <HAL_DCMI_MspInit+0x208>)
 800178a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800178e:	f003 0301 	and.w	r3, r3, #1
 8001792:	61bb      	str	r3, [r7, #24]
 8001794:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001796:	4b62      	ldr	r3, [pc, #392]	@ (8001920 <HAL_DCMI_MspInit+0x208>)
 8001798:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800179c:	4a60      	ldr	r2, [pc, #384]	@ (8001920 <HAL_DCMI_MspInit+0x208>)
 800179e:	f043 0304 	orr.w	r3, r3, #4
 80017a2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80017a6:	4b5e      	ldr	r3, [pc, #376]	@ (8001920 <HAL_DCMI_MspInit+0x208>)
 80017a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017ac:	f003 0304 	and.w	r3, r3, #4
 80017b0:	617b      	str	r3, [r7, #20]
 80017b2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80017b4:	4b5a      	ldr	r3, [pc, #360]	@ (8001920 <HAL_DCMI_MspInit+0x208>)
 80017b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017ba:	4a59      	ldr	r2, [pc, #356]	@ (8001920 <HAL_DCMI_MspInit+0x208>)
 80017bc:	f043 0308 	orr.w	r3, r3, #8
 80017c0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80017c4:	4b56      	ldr	r3, [pc, #344]	@ (8001920 <HAL_DCMI_MspInit+0x208>)
 80017c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017ca:	f003 0308 	and.w	r3, r3, #8
 80017ce:	613b      	str	r3, [r7, #16]
 80017d0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017d2:	4b53      	ldr	r3, [pc, #332]	@ (8001920 <HAL_DCMI_MspInit+0x208>)
 80017d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017d8:	4a51      	ldr	r2, [pc, #324]	@ (8001920 <HAL_DCMI_MspInit+0x208>)
 80017da:	f043 0302 	orr.w	r3, r3, #2
 80017de:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80017e2:	4b4f      	ldr	r3, [pc, #316]	@ (8001920 <HAL_DCMI_MspInit+0x208>)
 80017e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017e8:	f003 0302 	and.w	r3, r3, #2
 80017ec:	60fb      	str	r3, [r7, #12]
 80017ee:	68fb      	ldr	r3, [r7, #12]
    PD3     ------> DCMI_D5
    PB7     ------> DCMI_VSYNC
    PE0     ------> DCMI_D2
    PE1     ------> DCMI_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_0
 80017f0:	2373      	movs	r3, #115	@ 0x73
 80017f2:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f4:	2302      	movs	r3, #2
 80017f6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f8:	2300      	movs	r3, #0
 80017fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017fc:	2300      	movs	r3, #0
 80017fe:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001800:	230d      	movs	r3, #13
 8001802:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001804:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001808:	4619      	mov	r1, r3
 800180a:	4846      	ldr	r0, [pc, #280]	@ (8001924 <HAL_DCMI_MspInit+0x20c>)
 800180c:	f004 fe10 	bl	8006430 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001810:	2350      	movs	r3, #80	@ 0x50
 8001812:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001814:	2302      	movs	r3, #2
 8001816:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001818:	2300      	movs	r3, #0
 800181a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800181c:	2300      	movs	r3, #0
 800181e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001820:	230d      	movs	r3, #13
 8001822:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001824:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001828:	4619      	mov	r1, r3
 800182a:	483f      	ldr	r0, [pc, #252]	@ (8001928 <HAL_DCMI_MspInit+0x210>)
 800182c:	f004 fe00 	bl	8006430 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001830:	23c0      	movs	r3, #192	@ 0xc0
 8001832:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001834:	2302      	movs	r3, #2
 8001836:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001838:	2300      	movs	r3, #0
 800183a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800183c:	2300      	movs	r3, #0
 800183e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001840:	230d      	movs	r3, #13
 8001842:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001844:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001848:	4619      	mov	r1, r3
 800184a:	4838      	ldr	r0, [pc, #224]	@ (800192c <HAL_DCMI_MspInit+0x214>)
 800184c:	f004 fdf0 	bl	8006430 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001850:	2308      	movs	r3, #8
 8001852:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001854:	2302      	movs	r3, #2
 8001856:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001858:	2300      	movs	r3, #0
 800185a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800185c:	2300      	movs	r3, #0
 800185e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001860:	230d      	movs	r3, #13
 8001862:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001864:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001868:	4619      	mov	r1, r3
 800186a:	4831      	ldr	r0, [pc, #196]	@ (8001930 <HAL_DCMI_MspInit+0x218>)
 800186c:	f004 fde0 	bl	8006430 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001870:	2380      	movs	r3, #128	@ 0x80
 8001872:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001874:	2302      	movs	r3, #2
 8001876:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001878:	2300      	movs	r3, #0
 800187a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800187c:	2300      	movs	r3, #0
 800187e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001880:	230d      	movs	r3, #13
 8001882:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001884:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001888:	4619      	mov	r1, r3
 800188a:	482a      	ldr	r0, [pc, #168]	@ (8001934 <HAL_DCMI_MspInit+0x21c>)
 800188c:	f004 fdd0 	bl	8006430 <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA1_Stream0;
 8001890:	4b29      	ldr	r3, [pc, #164]	@ (8001938 <HAL_DCMI_MspInit+0x220>)
 8001892:	4a2a      	ldr	r2, [pc, #168]	@ (800193c <HAL_DCMI_MspInit+0x224>)
 8001894:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Request = DMA_REQUEST_DCMI;
 8001896:	4b28      	ldr	r3, [pc, #160]	@ (8001938 <HAL_DCMI_MspInit+0x220>)
 8001898:	224b      	movs	r2, #75	@ 0x4b
 800189a:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800189c:	4b26      	ldr	r3, [pc, #152]	@ (8001938 <HAL_DCMI_MspInit+0x220>)
 800189e:	2200      	movs	r2, #0
 80018a0:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 80018a2:	4b25      	ldr	r3, [pc, #148]	@ (8001938 <HAL_DCMI_MspInit+0x220>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 80018a8:	4b23      	ldr	r3, [pc, #140]	@ (8001938 <HAL_DCMI_MspInit+0x220>)
 80018aa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80018ae:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80018b0:	4b21      	ldr	r3, [pc, #132]	@ (8001938 <HAL_DCMI_MspInit+0x220>)
 80018b2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80018b6:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80018b8:	4b1f      	ldr	r3, [pc, #124]	@ (8001938 <HAL_DCMI_MspInit+0x220>)
 80018ba:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80018be:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_CIRCULAR;
 80018c0:	4b1d      	ldr	r3, [pc, #116]	@ (8001938 <HAL_DCMI_MspInit+0x220>)
 80018c2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80018c6:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80018c8:	4b1b      	ldr	r3, [pc, #108]	@ (8001938 <HAL_DCMI_MspInit+0x220>)
 80018ca:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80018ce:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80018d0:	4b19      	ldr	r3, [pc, #100]	@ (8001938 <HAL_DCMI_MspInit+0x220>)
 80018d2:	2204      	movs	r2, #4
 80018d4:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_dcmi.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80018d6:	4b18      	ldr	r3, [pc, #96]	@ (8001938 <HAL_DCMI_MspInit+0x220>)
 80018d8:	2203      	movs	r2, #3
 80018da:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_dcmi.Init.MemBurst = DMA_MBURST_SINGLE;
 80018dc:	4b16      	ldr	r3, [pc, #88]	@ (8001938 <HAL_DCMI_MspInit+0x220>)
 80018de:	2200      	movs	r2, #0
 80018e0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_dcmi.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80018e2:	4b15      	ldr	r3, [pc, #84]	@ (8001938 <HAL_DCMI_MspInit+0x220>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 80018e8:	4813      	ldr	r0, [pc, #76]	@ (8001938 <HAL_DCMI_MspInit+0x220>)
 80018ea:	f001 faa7 	bl	8002e3c <HAL_DMA_Init>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d001      	beq.n	80018f8 <HAL_DCMI_MspInit+0x1e0>
    {
      Error_Handler();
 80018f4:	f7ff fef0 	bl	80016d8 <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	4a0f      	ldr	r2, [pc, #60]	@ (8001938 <HAL_DCMI_MspInit+0x220>)
 80018fc:	649a      	str	r2, [r3, #72]	@ 0x48
 80018fe:	4a0e      	ldr	r2, [pc, #56]	@ (8001938 <HAL_DCMI_MspInit+0x220>)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6393      	str	r3, [r2, #56]	@ 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 0, 0);
 8001904:	2200      	movs	r2, #0
 8001906:	2100      	movs	r1, #0
 8001908:	204e      	movs	r0, #78	@ 0x4e
 800190a:	f000 fefe 	bl	800270a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 800190e:	204e      	movs	r0, #78	@ 0x4e
 8001910:	f000 ff15 	bl	800273e <HAL_NVIC_EnableIRQ>

    /* USER CODE END DCMI_MspInit 1 */

  }

}
 8001914:	bf00      	nop
 8001916:	3738      	adds	r7, #56	@ 0x38
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	48020000 	.word	0x48020000
 8001920:	58024400 	.word	0x58024400
 8001924:	58021000 	.word	0x58021000
 8001928:	58020000 	.word	0x58020000
 800192c:	58020800 	.word	0x58020800
 8001930:	58020c00 	.word	0x58020c00
 8001934:	58020400 	.word	0x58020400
 8001938:	240001c4 	.word	0x240001c4
 800193c:	40020010 	.word	0x40020010

08001940 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b0ba      	sub	sp, #232	@ 0xe8
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001948:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800194c:	2200      	movs	r2, #0
 800194e:	601a      	str	r2, [r3, #0]
 8001950:	605a      	str	r2, [r3, #4]
 8001952:	609a      	str	r2, [r3, #8]
 8001954:	60da      	str	r2, [r3, #12]
 8001956:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001958:	f107 0310 	add.w	r3, r7, #16
 800195c:	22c0      	movs	r2, #192	@ 0xc0
 800195e:	2100      	movs	r1, #0
 8001960:	4618      	mov	r0, r3
 8001962:	f014 fa49 	bl	8015df8 <memset>
  if(hi2c->Instance==I2C2)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a38      	ldr	r2, [pc, #224]	@ (8001a4c <HAL_I2C_MspInit+0x10c>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d169      	bne.n	8001a44 <HAL_I2C_MspInit+0x104>

    /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001970:	f04f 0208 	mov.w	r2, #8
 8001974:	f04f 0300 	mov.w	r3, #0
 8001978:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 2;
 800197c:	2302      	movs	r3, #2
 800197e:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 12;
 8001980:	230c      	movs	r3, #12
 8001982:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8001984:	2302      	movs	r3, #2
 8001986:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8001988:	2302      	movs	r3, #2
 800198a:	647b      	str	r3, [r7, #68]	@ 0x44
    PeriphClkInitStruct.PLL3.PLL3R = 3;
 800198c:	2303      	movs	r3, #3
 800198e:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8001990:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001994:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8001996:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800199a:	653b      	str	r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 800199c:	2300      	movs	r3, #0
 800199e:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_PLL3;
 80019a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80019a4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019a8:	f107 0310 	add.w	r3, r7, #16
 80019ac:	4618      	mov	r0, r3
 80019ae:	f00b fc03 	bl	800d1b8 <HAL_RCCEx_PeriphCLKConfig>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <HAL_I2C_MspInit+0x7c>
    {
      Error_Handler();
 80019b8:	f7ff fe8e 	bl	80016d8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019bc:	4b24      	ldr	r3, [pc, #144]	@ (8001a50 <HAL_I2C_MspInit+0x110>)
 80019be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019c2:	4a23      	ldr	r2, [pc, #140]	@ (8001a50 <HAL_I2C_MspInit+0x110>)
 80019c4:	f043 0302 	orr.w	r3, r3, #2
 80019c8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80019cc:	4b20      	ldr	r3, [pc, #128]	@ (8001a50 <HAL_I2C_MspInit+0x110>)
 80019ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019d2:	f003 0302 	and.w	r3, r3, #2
 80019d6:	60fb      	str	r3, [r7, #12]
 80019d8:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80019da:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80019de:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019e2:	2312      	movs	r3, #18
 80019e4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019e8:	2301      	movs	r3, #1
 80019ea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019ee:	2303      	movs	r3, #3
 80019f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80019f4:	2304      	movs	r3, #4
 80019f6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019fa:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80019fe:	4619      	mov	r1, r3
 8001a00:	4814      	ldr	r0, [pc, #80]	@ (8001a54 <HAL_I2C_MspInit+0x114>)
 8001a02:	f004 fd15 	bl	8006430 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001a06:	4b12      	ldr	r3, [pc, #72]	@ (8001a50 <HAL_I2C_MspInit+0x110>)
 8001a08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001a0c:	4a10      	ldr	r2, [pc, #64]	@ (8001a50 <HAL_I2C_MspInit+0x110>)
 8001a0e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001a12:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001a16:	4b0e      	ldr	r3, [pc, #56]	@ (8001a50 <HAL_I2C_MspInit+0x110>)
 8001a18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001a1c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a20:	60bb      	str	r3, [r7, #8]
 8001a22:	68bb      	ldr	r3, [r7, #8]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8001a24:	2200      	movs	r2, #0
 8001a26:	2100      	movs	r1, #0
 8001a28:	2021      	movs	r0, #33	@ 0x21
 8001a2a:	f000 fe6e 	bl	800270a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001a2e:	2021      	movs	r0, #33	@ 0x21
 8001a30:	f000 fe85 	bl	800273e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8001a34:	2200      	movs	r2, #0
 8001a36:	2100      	movs	r1, #0
 8001a38:	2022      	movs	r0, #34	@ 0x22
 8001a3a:	f000 fe66 	bl	800270a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8001a3e:	2022      	movs	r0, #34	@ 0x22
 8001a40:	f000 fe7d 	bl	800273e <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 8001a44:	bf00      	nop
 8001a46:	37e8      	adds	r7, #232	@ 0xe8
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	40005800 	.word	0x40005800
 8001a50:	58024400 	.word	0x58024400
 8001a54:	58020400 	.word	0x58020400

08001a58 <HAL_JPEG_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hjpeg: JPEG handle pointer
  * @retval None
  */
void HAL_JPEG_MspInit(JPEG_HandleTypeDef* hjpeg)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b084      	sub	sp, #16
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  if(hjpeg->Instance==JPEG)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a55      	ldr	r2, [pc, #340]	@ (8001bbc <HAL_JPEG_MspInit+0x164>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	f040 80a3 	bne.w	8001bb2 <HAL_JPEG_MspInit+0x15a>
  {
    /* USER CODE BEGIN JPEG_MspInit 0 */

    /* USER CODE END JPEG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_JPEG_CLK_ENABLE();
 8001a6c:	4b54      	ldr	r3, [pc, #336]	@ (8001bc0 <HAL_JPEG_MspInit+0x168>)
 8001a6e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001a72:	4a53      	ldr	r2, [pc, #332]	@ (8001bc0 <HAL_JPEG_MspInit+0x168>)
 8001a74:	f043 0320 	orr.w	r3, r3, #32
 8001a78:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8001a7c:	4b50      	ldr	r3, [pc, #320]	@ (8001bc0 <HAL_JPEG_MspInit+0x168>)
 8001a7e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001a82:	f003 0320 	and.w	r3, r3, #32
 8001a86:	60fb      	str	r3, [r7, #12]
 8001a88:	68fb      	ldr	r3, [r7, #12]

    /* JPEG MDMA Init */
    /* JPEG_INFIFO_TH Init */
    hmdma_jpeg_infifo_th.Instance = MDMA_Channel0;
 8001a8a:	4b4e      	ldr	r3, [pc, #312]	@ (8001bc4 <HAL_JPEG_MspInit+0x16c>)
 8001a8c:	4a4e      	ldr	r2, [pc, #312]	@ (8001bc8 <HAL_JPEG_MspInit+0x170>)
 8001a8e:	601a      	str	r2, [r3, #0]
    hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
 8001a90:	4b4c      	ldr	r3, [pc, #304]	@ (8001bc4 <HAL_JPEG_MspInit+0x16c>)
 8001a92:	2211      	movs	r2, #17
 8001a94:	605a      	str	r2, [r3, #4]
    hmdma_jpeg_infifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
 8001a96:	4b4b      	ldr	r3, [pc, #300]	@ (8001bc4 <HAL_JPEG_MspInit+0x16c>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	609a      	str	r2, [r3, #8]
    hmdma_jpeg_infifo_th.Init.Priority = MDMA_PRIORITY_MEDIUM;
 8001a9c:	4b49      	ldr	r3, [pc, #292]	@ (8001bc4 <HAL_JPEG_MspInit+0x16c>)
 8001a9e:	2240      	movs	r2, #64	@ 0x40
 8001aa0:	60da      	str	r2, [r3, #12]
    hmdma_jpeg_infifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8001aa2:	4b48      	ldr	r3, [pc, #288]	@ (8001bc4 <HAL_JPEG_MspInit+0x16c>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	611a      	str	r2, [r3, #16]
    hmdma_jpeg_infifo_th.Init.SourceInc = MDMA_SRC_INC_BYTE;
 8001aa8:	4b46      	ldr	r3, [pc, #280]	@ (8001bc4 <HAL_JPEG_MspInit+0x16c>)
 8001aaa:	2202      	movs	r2, #2
 8001aac:	615a      	str	r2, [r3, #20]
    hmdma_jpeg_infifo_th.Init.DestinationInc = MDMA_DEST_INC_DISABLE;
 8001aae:	4b45      	ldr	r3, [pc, #276]	@ (8001bc4 <HAL_JPEG_MspInit+0x16c>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	619a      	str	r2, [r3, #24]
    hmdma_jpeg_infifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_BYTE;
 8001ab4:	4b43      	ldr	r3, [pc, #268]	@ (8001bc4 <HAL_JPEG_MspInit+0x16c>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	61da      	str	r2, [r3, #28]
    hmdma_jpeg_infifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
 8001aba:	4b42      	ldr	r3, [pc, #264]	@ (8001bc4 <HAL_JPEG_MspInit+0x16c>)
 8001abc:	2280      	movs	r2, #128	@ 0x80
 8001abe:	621a      	str	r2, [r3, #32]
    hmdma_jpeg_infifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8001ac0:	4b40      	ldr	r3, [pc, #256]	@ (8001bc4 <HAL_JPEG_MspInit+0x16c>)
 8001ac2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001ac6:	625a      	str	r2, [r3, #36]	@ 0x24
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
 8001ac8:	4b3e      	ldr	r3, [pc, #248]	@ (8001bc4 <HAL_JPEG_MspInit+0x16c>)
 8001aca:	2220      	movs	r2, #32
 8001acc:	629a      	str	r2, [r3, #40]	@ 0x28
    hmdma_jpeg_infifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 8001ace:	4b3d      	ldr	r3, [pc, #244]	@ (8001bc4 <HAL_JPEG_MspInit+0x16c>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hmdma_jpeg_infifo_th.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 8001ad4:	4b3b      	ldr	r3, [pc, #236]	@ (8001bc4 <HAL_JPEG_MspInit+0x16c>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	631a      	str	r2, [r3, #48]	@ 0x30
    hmdma_jpeg_infifo_th.Init.SourceBlockAddressOffset = 0;
 8001ada:	4b3a      	ldr	r3, [pc, #232]	@ (8001bc4 <HAL_JPEG_MspInit+0x16c>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	635a      	str	r2, [r3, #52]	@ 0x34
    hmdma_jpeg_infifo_th.Init.DestBlockAddressOffset = 0;
 8001ae0:	4b38      	ldr	r3, [pc, #224]	@ (8001bc4 <HAL_JPEG_MspInit+0x16c>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	639a      	str	r2, [r3, #56]	@ 0x38
    if (HAL_MDMA_Init(&hmdma_jpeg_infifo_th) != HAL_OK)
 8001ae6:	4837      	ldr	r0, [pc, #220]	@ (8001bc4 <HAL_JPEG_MspInit+0x16c>)
 8001ae8:	f008 fcf4 	bl	800a4d4 <HAL_MDMA_Init>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <HAL_JPEG_MspInit+0x9e>
    {
      Error_Handler();
 8001af2:	f7ff fdf1 	bl	80016d8 <Error_Handler>
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_infifo_th, 0, 0) != HAL_OK)
 8001af6:	2200      	movs	r2, #0
 8001af8:	2100      	movs	r1, #0
 8001afa:	4832      	ldr	r0, [pc, #200]	@ (8001bc4 <HAL_JPEG_MspInit+0x16c>)
 8001afc:	f008 fd36 	bl	800a56c <HAL_MDMA_ConfigPostRequestMask>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <HAL_JPEG_MspInit+0xb2>
    {
      Error_Handler();
 8001b06:	f7ff fde7 	bl	80016d8 <Error_Handler>
    }

    __HAL_LINKDMA(hjpeg,hdmain,hmdma_jpeg_infifo_th);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	4a2d      	ldr	r2, [pc, #180]	@ (8001bc4 <HAL_JPEG_MspInit+0x16c>)
 8001b0e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001b10:	4a2c      	ldr	r2, [pc, #176]	@ (8001bc4 <HAL_JPEG_MspInit+0x16c>)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6413      	str	r3, [r2, #64]	@ 0x40

    /* JPEG_OUTFIFO_NE Init */
    hmdma_jpeg_outfifo_ne.Instance = MDMA_Channel1;
 8001b16:	4b2d      	ldr	r3, [pc, #180]	@ (8001bcc <HAL_JPEG_MspInit+0x174>)
 8001b18:	4a2d      	ldr	r2, [pc, #180]	@ (8001bd0 <HAL_JPEG_MspInit+0x178>)
 8001b1a:	601a      	str	r2, [r3, #0]
    hmdma_jpeg_outfifo_ne.Init.Request = MDMA_REQUEST_JPEG_OUTFIFO_NE;
 8001b1c:	4b2b      	ldr	r3, [pc, #172]	@ (8001bcc <HAL_JPEG_MspInit+0x174>)
 8001b1e:	2214      	movs	r2, #20
 8001b20:	605a      	str	r2, [r3, #4]
    hmdma_jpeg_outfifo_ne.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
 8001b22:	4b2a      	ldr	r3, [pc, #168]	@ (8001bcc <HAL_JPEG_MspInit+0x174>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	609a      	str	r2, [r3, #8]
    hmdma_jpeg_outfifo_ne.Init.Priority = MDMA_PRIORITY_MEDIUM;
 8001b28:	4b28      	ldr	r3, [pc, #160]	@ (8001bcc <HAL_JPEG_MspInit+0x174>)
 8001b2a:	2240      	movs	r2, #64	@ 0x40
 8001b2c:	60da      	str	r2, [r3, #12]
    hmdma_jpeg_outfifo_ne.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8001b2e:	4b27      	ldr	r3, [pc, #156]	@ (8001bcc <HAL_JPEG_MspInit+0x174>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	611a      	str	r2, [r3, #16]
    hmdma_jpeg_outfifo_ne.Init.SourceInc = MDMA_SRC_INC_DISABLE;
 8001b34:	4b25      	ldr	r3, [pc, #148]	@ (8001bcc <HAL_JPEG_MspInit+0x174>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	615a      	str	r2, [r3, #20]
    hmdma_jpeg_outfifo_ne.Init.DestinationInc = MDMA_DEST_INC_BYTE;
 8001b3a:	4b24      	ldr	r3, [pc, #144]	@ (8001bcc <HAL_JPEG_MspInit+0x174>)
 8001b3c:	2208      	movs	r2, #8
 8001b3e:	619a      	str	r2, [r3, #24]
    hmdma_jpeg_outfifo_ne.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 8001b40:	4b22      	ldr	r3, [pc, #136]	@ (8001bcc <HAL_JPEG_MspInit+0x174>)
 8001b42:	2220      	movs	r2, #32
 8001b44:	61da      	str	r2, [r3, #28]
    hmdma_jpeg_outfifo_ne.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
 8001b46:	4b21      	ldr	r3, [pc, #132]	@ (8001bcc <HAL_JPEG_MspInit+0x174>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	621a      	str	r2, [r3, #32]
    hmdma_jpeg_outfifo_ne.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8001b4c:	4b1f      	ldr	r3, [pc, #124]	@ (8001bcc <HAL_JPEG_MspInit+0x174>)
 8001b4e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001b52:	625a      	str	r2, [r3, #36]	@ 0x24
    hmdma_jpeg_outfifo_ne.Init.BufferTransferLength = 4;
 8001b54:	4b1d      	ldr	r3, [pc, #116]	@ (8001bcc <HAL_JPEG_MspInit+0x174>)
 8001b56:	2204      	movs	r2, #4
 8001b58:	629a      	str	r2, [r3, #40]	@ 0x28
    hmdma_jpeg_outfifo_ne.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 8001b5a:	4b1c      	ldr	r3, [pc, #112]	@ (8001bcc <HAL_JPEG_MspInit+0x174>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hmdma_jpeg_outfifo_ne.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 8001b60:	4b1a      	ldr	r3, [pc, #104]	@ (8001bcc <HAL_JPEG_MspInit+0x174>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	631a      	str	r2, [r3, #48]	@ 0x30
    hmdma_jpeg_outfifo_ne.Init.SourceBlockAddressOffset = 0;
 8001b66:	4b19      	ldr	r3, [pc, #100]	@ (8001bcc <HAL_JPEG_MspInit+0x174>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	635a      	str	r2, [r3, #52]	@ 0x34
    hmdma_jpeg_outfifo_ne.Init.DestBlockAddressOffset = 0;
 8001b6c:	4b17      	ldr	r3, [pc, #92]	@ (8001bcc <HAL_JPEG_MspInit+0x174>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	639a      	str	r2, [r3, #56]	@ 0x38
    if (HAL_MDMA_Init(&hmdma_jpeg_outfifo_ne) != HAL_OK)
 8001b72:	4816      	ldr	r0, [pc, #88]	@ (8001bcc <HAL_JPEG_MspInit+0x174>)
 8001b74:	f008 fcae 	bl	800a4d4 <HAL_MDMA_Init>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d001      	beq.n	8001b82 <HAL_JPEG_MspInit+0x12a>
    {
      Error_Handler();
 8001b7e:	f7ff fdab 	bl	80016d8 <Error_Handler>
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_outfifo_ne, 0, 0) != HAL_OK)
 8001b82:	2200      	movs	r2, #0
 8001b84:	2100      	movs	r1, #0
 8001b86:	4811      	ldr	r0, [pc, #68]	@ (8001bcc <HAL_JPEG_MspInit+0x174>)
 8001b88:	f008 fcf0 	bl	800a56c <HAL_MDMA_ConfigPostRequestMask>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d001      	beq.n	8001b96 <HAL_JPEG_MspInit+0x13e>
    {
      Error_Handler();
 8001b92:	f7ff fda1 	bl	80016d8 <Error_Handler>
    }

    __HAL_LINKDMA(hjpeg,hdmaout,hmdma_jpeg_outfifo_ne);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	4a0c      	ldr	r2, [pc, #48]	@ (8001bcc <HAL_JPEG_MspInit+0x174>)
 8001b9a:	635a      	str	r2, [r3, #52]	@ 0x34
 8001b9c:	4a0b      	ldr	r2, [pc, #44]	@ (8001bcc <HAL_JPEG_MspInit+0x174>)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6413      	str	r3, [r2, #64]	@ 0x40

    /* JPEG interrupt Init */
    HAL_NVIC_SetPriority(JPEG_IRQn, 0, 0);
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	2100      	movs	r1, #0
 8001ba6:	2079      	movs	r0, #121	@ 0x79
 8001ba8:	f000 fdaf 	bl	800270a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(JPEG_IRQn);
 8001bac:	2079      	movs	r0, #121	@ 0x79
 8001bae:	f000 fdc6 	bl	800273e <HAL_NVIC_EnableIRQ>

    /* USER CODE END JPEG_MspInit 1 */

  }

}
 8001bb2:	bf00      	nop
 8001bb4:	3710      	adds	r7, #16
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	52003000 	.word	0x52003000
 8001bc0:	58024400 	.word	0x58024400
 8001bc4:	240002e8 	.word	0x240002e8
 8001bc8:	52000040 	.word	0x52000040
 8001bcc:	24000354 	.word	0x24000354
 8001bd0:	52000080 	.word	0x52000080

08001bd4 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b0bc      	sub	sp, #240	@ 0xf0
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bdc:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001be0:	2200      	movs	r2, #0
 8001be2:	601a      	str	r2, [r3, #0]
 8001be4:	605a      	str	r2, [r3, #4]
 8001be6:	609a      	str	r2, [r3, #8]
 8001be8:	60da      	str	r2, [r3, #12]
 8001bea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001bec:	f107 0318 	add.w	r3, r7, #24
 8001bf0:	22c0      	movs	r2, #192	@ 0xc0
 8001bf2:	2100      	movs	r1, #0
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f014 f8ff 	bl	8015df8 <memset>
  if(hspi->Instance==SPI2)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a38      	ldr	r2, [pc, #224]	@ (8001ce0 <HAL_SPI_MspInit+0x10c>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d169      	bne.n	8001cd8 <HAL_SPI_MspInit+0x104>

    /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8001c04:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001c08:	f04f 0300 	mov.w	r3, #0
 8001c0c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001c10:	2300      	movs	r3, #0
 8001c12:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c14:	f107 0318 	add.w	r3, r7, #24
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f00b facd 	bl	800d1b8 <HAL_RCCEx_PeriphCLKConfig>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d001      	beq.n	8001c28 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8001c24:	f7ff fd58 	bl	80016d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001c28:	4b2e      	ldr	r3, [pc, #184]	@ (8001ce4 <HAL_SPI_MspInit+0x110>)
 8001c2a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001c2e:	4a2d      	ldr	r2, [pc, #180]	@ (8001ce4 <HAL_SPI_MspInit+0x110>)
 8001c30:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c34:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001c38:	4b2a      	ldr	r3, [pc, #168]	@ (8001ce4 <HAL_SPI_MspInit+0x110>)
 8001c3a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001c3e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c42:	617b      	str	r3, [r7, #20]
 8001c44:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c46:	4b27      	ldr	r3, [pc, #156]	@ (8001ce4 <HAL_SPI_MspInit+0x110>)
 8001c48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c4c:	4a25      	ldr	r2, [pc, #148]	@ (8001ce4 <HAL_SPI_MspInit+0x110>)
 8001c4e:	f043 0304 	orr.w	r3, r3, #4
 8001c52:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001c56:	4b23      	ldr	r3, [pc, #140]	@ (8001ce4 <HAL_SPI_MspInit+0x110>)
 8001c58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c5c:	f003 0304 	and.w	r3, r3, #4
 8001c60:	613b      	str	r3, [r7, #16]
 8001c62:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c64:	4b1f      	ldr	r3, [pc, #124]	@ (8001ce4 <HAL_SPI_MspInit+0x110>)
 8001c66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c6a:	4a1e      	ldr	r2, [pc, #120]	@ (8001ce4 <HAL_SPI_MspInit+0x110>)
 8001c6c:	f043 0302 	orr.w	r3, r3, #2
 8001c70:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001c74:	4b1b      	ldr	r3, [pc, #108]	@ (8001ce4 <HAL_SPI_MspInit+0x110>)
 8001c76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c7a:	f003 0302 	and.w	r3, r3, #2
 8001c7e:	60fb      	str	r3, [r7, #12]
 8001c80:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PC2_C     ------> SPI2_MISO
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8001c82:	2306      	movs	r3, #6
 8001c84:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c88:	2302      	movs	r3, #2
 8001c8a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c94:	2300      	movs	r3, #0
 8001c96:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001c9a:	2305      	movs	r3, #5
 8001c9c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ca0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	4810      	ldr	r0, [pc, #64]	@ (8001ce8 <HAL_SPI_MspInit+0x114>)
 8001ca8:	f004 fbc2 	bl	8006430 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001cac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001cb0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cb4:	2302      	movs	r3, #2
 8001cb6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001cc6:	2305      	movs	r3, #5
 8001cc8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ccc:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	4806      	ldr	r0, [pc, #24]	@ (8001cec <HAL_SPI_MspInit+0x118>)
 8001cd4:	f004 fbac 	bl	8006430 <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8001cd8:	bf00      	nop
 8001cda:	37f0      	adds	r7, #240	@ 0xf0
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	40003800 	.word	0x40003800
 8001ce4:	58024400 	.word	0x58024400
 8001ce8:	58020800 	.word	0x58020800
 8001cec:	58020400 	.word	0x58020400

08001cf0 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b087      	sub	sp, #28
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a2b      	ldr	r2, [pc, #172]	@ (8001dac <HAL_TIM_PWM_MspInit+0xbc>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d10f      	bne.n	8001d22 <HAL_TIM_PWM_MspInit+0x32>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d02:	4b2b      	ldr	r3, [pc, #172]	@ (8001db0 <HAL_TIM_PWM_MspInit+0xc0>)
 8001d04:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001d08:	4a29      	ldr	r2, [pc, #164]	@ (8001db0 <HAL_TIM_PWM_MspInit+0xc0>)
 8001d0a:	f043 0301 	orr.w	r3, r3, #1
 8001d0e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001d12:	4b27      	ldr	r3, [pc, #156]	@ (8001db0 <HAL_TIM_PWM_MspInit+0xc0>)
 8001d14:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001d18:	f003 0301 	and.w	r3, r3, #1
 8001d1c:	617b      	str	r3, [r7, #20]
 8001d1e:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001d20:	e03d      	b.n	8001d9e <HAL_TIM_PWM_MspInit+0xae>
  else if(htim_pwm->Instance==TIM2)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d2a:	d10f      	bne.n	8001d4c <HAL_TIM_PWM_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d2c:	4b20      	ldr	r3, [pc, #128]	@ (8001db0 <HAL_TIM_PWM_MspInit+0xc0>)
 8001d2e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001d32:	4a1f      	ldr	r2, [pc, #124]	@ (8001db0 <HAL_TIM_PWM_MspInit+0xc0>)
 8001d34:	f043 0301 	orr.w	r3, r3, #1
 8001d38:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001d3c:	4b1c      	ldr	r3, [pc, #112]	@ (8001db0 <HAL_TIM_PWM_MspInit+0xc0>)
 8001d3e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001d42:	f003 0301 	and.w	r3, r3, #1
 8001d46:	613b      	str	r3, [r7, #16]
 8001d48:	693b      	ldr	r3, [r7, #16]
}
 8001d4a:	e028      	b.n	8001d9e <HAL_TIM_PWM_MspInit+0xae>
  else if(htim_pwm->Instance==TIM3)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a18      	ldr	r2, [pc, #96]	@ (8001db4 <HAL_TIM_PWM_MspInit+0xc4>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d10f      	bne.n	8001d76 <HAL_TIM_PWM_MspInit+0x86>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d56:	4b16      	ldr	r3, [pc, #88]	@ (8001db0 <HAL_TIM_PWM_MspInit+0xc0>)
 8001d58:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001d5c:	4a14      	ldr	r2, [pc, #80]	@ (8001db0 <HAL_TIM_PWM_MspInit+0xc0>)
 8001d5e:	f043 0302 	orr.w	r3, r3, #2
 8001d62:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001d66:	4b12      	ldr	r3, [pc, #72]	@ (8001db0 <HAL_TIM_PWM_MspInit+0xc0>)
 8001d68:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001d6c:	f003 0302 	and.w	r3, r3, #2
 8001d70:	60fb      	str	r3, [r7, #12]
 8001d72:	68fb      	ldr	r3, [r7, #12]
}
 8001d74:	e013      	b.n	8001d9e <HAL_TIM_PWM_MspInit+0xae>
  else if(htim_pwm->Instance==TIM4)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a0f      	ldr	r2, [pc, #60]	@ (8001db8 <HAL_TIM_PWM_MspInit+0xc8>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d10e      	bne.n	8001d9e <HAL_TIM_PWM_MspInit+0xae>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001d80:	4b0b      	ldr	r3, [pc, #44]	@ (8001db0 <HAL_TIM_PWM_MspInit+0xc0>)
 8001d82:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001d86:	4a0a      	ldr	r2, [pc, #40]	@ (8001db0 <HAL_TIM_PWM_MspInit+0xc0>)
 8001d88:	f043 0304 	orr.w	r3, r3, #4
 8001d8c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001d90:	4b07      	ldr	r3, [pc, #28]	@ (8001db0 <HAL_TIM_PWM_MspInit+0xc0>)
 8001d92:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001d96:	f003 0304 	and.w	r3, r3, #4
 8001d9a:	60bb      	str	r3, [r7, #8]
 8001d9c:	68bb      	ldr	r3, [r7, #8]
}
 8001d9e:	bf00      	nop
 8001da0:	371c      	adds	r7, #28
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop
 8001dac:	40010000 	.word	0x40010000
 8001db0:	58024400 	.word	0x58024400
 8001db4:	40000400 	.word	0x40000400
 8001db8:	40000800 	.word	0x40000800

08001dbc <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b084      	sub	sp, #16
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a0e      	ldr	r2, [pc, #56]	@ (8001e04 <HAL_TIM_Base_MspInit+0x48>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d116      	bne.n	8001dfc <HAL_TIM_Base_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM14_MspInit 0 */

    /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001dce:	4b0e      	ldr	r3, [pc, #56]	@ (8001e08 <HAL_TIM_Base_MspInit+0x4c>)
 8001dd0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001dd4:	4a0c      	ldr	r2, [pc, #48]	@ (8001e08 <HAL_TIM_Base_MspInit+0x4c>)
 8001dd6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001dda:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001dde:	4b0a      	ldr	r3, [pc, #40]	@ (8001e08 <HAL_TIM_Base_MspInit+0x4c>)
 8001de0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001de4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001de8:	60fb      	str	r3, [r7, #12]
 8001dea:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8001dec:	2200      	movs	r2, #0
 8001dee:	2100      	movs	r1, #0
 8001df0:	202d      	movs	r0, #45	@ 0x2d
 8001df2:	f000 fc8a 	bl	800270a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8001df6:	202d      	movs	r0, #45	@ 0x2d
 8001df8:	f000 fca1 	bl	800273e <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM14_MspInit 1 */

  }

}
 8001dfc:	bf00      	nop
 8001dfe:	3710      	adds	r7, #16
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	40002000 	.word	0x40002000
 8001e08:	58024400 	.word	0x58024400

08001e0c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b08c      	sub	sp, #48	@ 0x30
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e14:	f107 031c 	add.w	r3, r7, #28
 8001e18:	2200      	movs	r2, #0
 8001e1a:	601a      	str	r2, [r3, #0]
 8001e1c:	605a      	str	r2, [r3, #4]
 8001e1e:	609a      	str	r2, [r3, #8]
 8001e20:	60da      	str	r2, [r3, #12]
 8001e22:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a5d      	ldr	r2, [pc, #372]	@ (8001fa0 <HAL_TIM_MspPostInit+0x194>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d120      	bne.n	8001e70 <HAL_TIM_MspPostInit+0x64>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e2e:	4b5d      	ldr	r3, [pc, #372]	@ (8001fa4 <HAL_TIM_MspPostInit+0x198>)
 8001e30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e34:	4a5b      	ldr	r2, [pc, #364]	@ (8001fa4 <HAL_TIM_MspPostInit+0x198>)
 8001e36:	f043 0310 	orr.w	r3, r3, #16
 8001e3a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e3e:	4b59      	ldr	r3, [pc, #356]	@ (8001fa4 <HAL_TIM_MspPostInit+0x198>)
 8001e40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e44:	f003 0310 	and.w	r3, r3, #16
 8001e48:	61bb      	str	r3, [r7, #24]
 8001e4a:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001e4c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001e50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e52:	2302      	movs	r3, #2
 8001e54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e56:	2300      	movs	r3, #0
 8001e58:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e62:	f107 031c 	add.w	r3, r7, #28
 8001e66:	4619      	mov	r1, r3
 8001e68:	484f      	ldr	r0, [pc, #316]	@ (8001fa8 <HAL_TIM_MspPostInit+0x19c>)
 8001e6a:	f004 fae1 	bl	8006430 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM14_MspPostInit 1 */

    /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8001e6e:	e093      	b.n	8001f98 <HAL_TIM_MspPostInit+0x18c>
  else if(htim->Instance==TIM2)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e78:	d11f      	bne.n	8001eba <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e7a:	4b4a      	ldr	r3, [pc, #296]	@ (8001fa4 <HAL_TIM_MspPostInit+0x198>)
 8001e7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e80:	4a48      	ldr	r2, [pc, #288]	@ (8001fa4 <HAL_TIM_MspPostInit+0x198>)
 8001e82:	f043 0301 	orr.w	r3, r3, #1
 8001e86:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e8a:	4b46      	ldr	r3, [pc, #280]	@ (8001fa4 <HAL_TIM_MspPostInit+0x198>)
 8001e8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e90:	f003 0301 	and.w	r3, r3, #1
 8001e94:	617b      	str	r3, [r7, #20]
 8001e96:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001e98:	2307      	movs	r3, #7
 8001e9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e9c:	2302      	movs	r3, #2
 8001e9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eac:	f107 031c 	add.w	r3, r7, #28
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	483e      	ldr	r0, [pc, #248]	@ (8001fac <HAL_TIM_MspPostInit+0x1a0>)
 8001eb4:	f004 fabc 	bl	8006430 <HAL_GPIO_Init>
}
 8001eb8:	e06e      	b.n	8001f98 <HAL_TIM_MspPostInit+0x18c>
  else if(htim->Instance==TIM3)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a3c      	ldr	r2, [pc, #240]	@ (8001fb0 <HAL_TIM_MspPostInit+0x1a4>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d11f      	bne.n	8001f04 <HAL_TIM_MspPostInit+0xf8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ec4:	4b37      	ldr	r3, [pc, #220]	@ (8001fa4 <HAL_TIM_MspPostInit+0x198>)
 8001ec6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001eca:	4a36      	ldr	r2, [pc, #216]	@ (8001fa4 <HAL_TIM_MspPostInit+0x198>)
 8001ecc:	f043 0302 	orr.w	r3, r3, #2
 8001ed0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ed4:	4b33      	ldr	r3, [pc, #204]	@ (8001fa4 <HAL_TIM_MspPostInit+0x198>)
 8001ed6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001eda:	f003 0302 	and.w	r3, r3, #2
 8001ede:	613b      	str	r3, [r7, #16]
 8001ee0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee6:	2302      	movs	r3, #2
 8001ee8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eea:	2300      	movs	r3, #0
 8001eec:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001ef2:	2302      	movs	r3, #2
 8001ef4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ef6:	f107 031c 	add.w	r3, r7, #28
 8001efa:	4619      	mov	r1, r3
 8001efc:	482d      	ldr	r0, [pc, #180]	@ (8001fb4 <HAL_TIM_MspPostInit+0x1a8>)
 8001efe:	f004 fa97 	bl	8006430 <HAL_GPIO_Init>
}
 8001f02:	e049      	b.n	8001f98 <HAL_TIM_MspPostInit+0x18c>
  else if(htim->Instance==TIM4)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a2b      	ldr	r2, [pc, #172]	@ (8001fb8 <HAL_TIM_MspPostInit+0x1ac>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d120      	bne.n	8001f50 <HAL_TIM_MspPostInit+0x144>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f0e:	4b25      	ldr	r3, [pc, #148]	@ (8001fa4 <HAL_TIM_MspPostInit+0x198>)
 8001f10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f14:	4a23      	ldr	r2, [pc, #140]	@ (8001fa4 <HAL_TIM_MspPostInit+0x198>)
 8001f16:	f043 0302 	orr.w	r3, r3, #2
 8001f1a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f1e:	4b21      	ldr	r3, [pc, #132]	@ (8001fa4 <HAL_TIM_MspPostInit+0x198>)
 8001f20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f24:	f003 0302 	and.w	r3, r3, #2
 8001f28:	60fb      	str	r3, [r7, #12]
 8001f2a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001f2c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001f30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f32:	2302      	movs	r3, #2
 8001f34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f36:	2300      	movs	r3, #0
 8001f38:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001f3e:	2302      	movs	r3, #2
 8001f40:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f42:	f107 031c 	add.w	r3, r7, #28
 8001f46:	4619      	mov	r1, r3
 8001f48:	481a      	ldr	r0, [pc, #104]	@ (8001fb4 <HAL_TIM_MspPostInit+0x1a8>)
 8001f4a:	f004 fa71 	bl	8006430 <HAL_GPIO_Init>
}
 8001f4e:	e023      	b.n	8001f98 <HAL_TIM_MspPostInit+0x18c>
  else if(htim->Instance==TIM14)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a19      	ldr	r2, [pc, #100]	@ (8001fbc <HAL_TIM_MspPostInit+0x1b0>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d11e      	bne.n	8001f98 <HAL_TIM_MspPostInit+0x18c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f5a:	4b12      	ldr	r3, [pc, #72]	@ (8001fa4 <HAL_TIM_MspPostInit+0x198>)
 8001f5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f60:	4a10      	ldr	r2, [pc, #64]	@ (8001fa4 <HAL_TIM_MspPostInit+0x198>)
 8001f62:	f043 0301 	orr.w	r3, r3, #1
 8001f66:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f6a:	4b0e      	ldr	r3, [pc, #56]	@ (8001fa4 <HAL_TIM_MspPostInit+0x198>)
 8001f6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f70:	f003 0301 	and.w	r3, r3, #1
 8001f74:	60bb      	str	r3, [r7, #8]
 8001f76:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001f78:	2380      	movs	r3, #128	@ 0x80
 8001f7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f7c:	2302      	movs	r3, #2
 8001f7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f80:	2300      	movs	r3, #0
 8001f82:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f84:	2300      	movs	r3, #0
 8001f86:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8001f88:	2309      	movs	r3, #9
 8001f8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f8c:	f107 031c 	add.w	r3, r7, #28
 8001f90:	4619      	mov	r1, r3
 8001f92:	4806      	ldr	r0, [pc, #24]	@ (8001fac <HAL_TIM_MspPostInit+0x1a0>)
 8001f94:	f004 fa4c 	bl	8006430 <HAL_GPIO_Init>
}
 8001f98:	bf00      	nop
 8001f9a:	3730      	adds	r7, #48	@ 0x30
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	40010000 	.word	0x40010000
 8001fa4:	58024400 	.word	0x58024400
 8001fa8:	58021000 	.word	0x58021000
 8001fac:	58020000 	.word	0x58020000
 8001fb0:	40000400 	.word	0x40000400
 8001fb4:	58020400 	.word	0x58020400
 8001fb8:	40000800 	.word	0x40000800
 8001fbc:	40002000 	.word	0x40002000

08001fc0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b0ba      	sub	sp, #232	@ 0xe8
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fc8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001fcc:	2200      	movs	r2, #0
 8001fce:	601a      	str	r2, [r3, #0]
 8001fd0:	605a      	str	r2, [r3, #4]
 8001fd2:	609a      	str	r2, [r3, #8]
 8001fd4:	60da      	str	r2, [r3, #12]
 8001fd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001fd8:	f107 0310 	add.w	r3, r7, #16
 8001fdc:	22c0      	movs	r2, #192	@ 0xc0
 8001fde:	2100      	movs	r1, #0
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f013 ff09 	bl	8015df8 <memset>
  if(huart->Instance==USART1)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a27      	ldr	r2, [pc, #156]	@ (8002088 <HAL_UART_MspInit+0xc8>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d146      	bne.n	800207e <HAL_UART_MspInit+0xbe>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001ff0:	f04f 0201 	mov.w	r2, #1
 8001ff4:	f04f 0300 	mov.w	r3, #0
 8001ff8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002002:	f107 0310 	add.w	r3, r7, #16
 8002006:	4618      	mov	r0, r3
 8002008:	f00b f8d6 	bl	800d1b8 <HAL_RCCEx_PeriphCLKConfig>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d001      	beq.n	8002016 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002012:	f7ff fb61 	bl	80016d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002016:	4b1d      	ldr	r3, [pc, #116]	@ (800208c <HAL_UART_MspInit+0xcc>)
 8002018:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800201c:	4a1b      	ldr	r2, [pc, #108]	@ (800208c <HAL_UART_MspInit+0xcc>)
 800201e:	f043 0310 	orr.w	r3, r3, #16
 8002022:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002026:	4b19      	ldr	r3, [pc, #100]	@ (800208c <HAL_UART_MspInit+0xcc>)
 8002028:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800202c:	f003 0310 	and.w	r3, r3, #16
 8002030:	60fb      	str	r3, [r7, #12]
 8002032:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002034:	4b15      	ldr	r3, [pc, #84]	@ (800208c <HAL_UART_MspInit+0xcc>)
 8002036:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800203a:	4a14      	ldr	r2, [pc, #80]	@ (800208c <HAL_UART_MspInit+0xcc>)
 800203c:	f043 0302 	orr.w	r3, r3, #2
 8002040:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002044:	4b11      	ldr	r3, [pc, #68]	@ (800208c <HAL_UART_MspInit+0xcc>)
 8002046:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800204a:	f003 0302 	and.w	r3, r3, #2
 800204e:	60bb      	str	r3, [r7, #8]
 8002050:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002052:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002056:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800205a:	2302      	movs	r3, #2
 800205c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002060:	2300      	movs	r3, #0
 8002062:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002066:	2300      	movs	r3, #0
 8002068:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800206c:	2304      	movs	r3, #4
 800206e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002072:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002076:	4619      	mov	r1, r3
 8002078:	4805      	ldr	r0, [pc, #20]	@ (8002090 <HAL_UART_MspInit+0xd0>)
 800207a:	f004 f9d9 	bl	8006430 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 800207e:	bf00      	nop
 8002080:	37e8      	adds	r7, #232	@ 0xe8
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	40011000 	.word	0x40011000
 800208c:	58024400 	.word	0x58024400
 8002090:	58020400 	.word	0x58020400

08002094 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002098:	bf00      	nop
 800209a:	e7fd      	b.n	8002098 <NMI_Handler+0x4>

0800209c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020a0:	bf00      	nop
 80020a2:	e7fd      	b.n	80020a0 <HardFault_Handler+0x4>

080020a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020a8:	bf00      	nop
 80020aa:	e7fd      	b.n	80020a8 <MemManage_Handler+0x4>

080020ac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020b0:	bf00      	nop
 80020b2:	e7fd      	b.n	80020b0 <BusFault_Handler+0x4>

080020b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020b8:	bf00      	nop
 80020ba:	e7fd      	b.n	80020b8 <UsageFault_Handler+0x4>

080020bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020bc:	b480      	push	{r7}
 80020be:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020c0:	bf00      	nop
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr

080020ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020ca:	b480      	push	{r7}
 80020cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020ce:	bf00      	nop
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr

080020d8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020dc:	bf00      	nop
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr

080020e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020e6:	b580      	push	{r7, lr}
 80020e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020ea:	f000 f9e3 	bl	80024b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020ee:	bf00      	nop
 80020f0:	bd80      	pop	{r7, pc}
	...

080020f4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 80020f8:	4802      	ldr	r0, [pc, #8]	@ (8002104 <DMA1_Stream0_IRQHandler+0x10>)
 80020fa:	f002 f9c9 	bl	8004490 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80020fe:	bf00      	nop
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	240001c4 	.word	0x240001c4

08002108 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 800210c:	4802      	ldr	r0, [pc, #8]	@ (8002118 <I2C2_EV_IRQHandler+0x10>)
 800210e:	f004 fe03 	bl	8006d18 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8002112:	bf00      	nop
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	2400023c 	.word	0x2400023c

0800211c <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8002120:	4802      	ldr	r0, [pc, #8]	@ (800212c <I2C2_ER_IRQHandler+0x10>)
 8002122:	f004 fe13 	bl	8006d4c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8002126:	bf00      	nop
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	2400023c 	.word	0x2400023c

08002130 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8002134:	4802      	ldr	r0, [pc, #8]	@ (8002140 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8002136:	f00d f967 	bl	800f408 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 800213a:	bf00      	nop
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	24000578 	.word	0x24000578

08002144 <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 8002148:	4802      	ldr	r0, [pc, #8]	@ (8002154 <DCMI_IRQHandler+0x10>)
 800214a:	f000 fd27 	bl	8002b9c <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  /* USER CODE END DCMI_IRQn 1 */
}
 800214e:	bf00      	nop
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	24000174 	.word	0x24000174

08002158 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800215c:	4802      	ldr	r0, [pc, #8]	@ (8002168 <OTG_FS_IRQHandler+0x10>)
 800215e:	f008 fe9c 	bl	800ae9a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002162:	bf00      	nop
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	2400b178 	.word	0x2400b178

0800216c <JPEG_IRQHandler>:

/**
  * @brief This function handles JPEG global interrupt.
  */
void JPEG_IRQHandler(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN JPEG_IRQn 0 */

  /* USER CODE END JPEG_IRQn 0 */
  HAL_JPEG_IRQHandler(&hjpeg);
 8002170:	4802      	ldr	r0, [pc, #8]	@ (800217c <JPEG_IRQHandler+0x10>)
 8002172:	f006 fbb8 	bl	80088e6 <HAL_JPEG_IRQHandler>
  /* USER CODE BEGIN JPEG_IRQn 1 */

  /* USER CODE END JPEG_IRQn 1 */
}
 8002176:	bf00      	nop
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	24000290 	.word	0x24000290

08002180 <MDMA_IRQHandler>:

/**
  * @brief This function handles MDMA global interrupt.
  */
void MDMA_IRQHandler(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MDMA_IRQn 0 */

  /* USER CODE END MDMA_IRQn 0 */
  HAL_MDMA_IRQHandler(&hmdma_jpeg_infifo_th);
 8002184:	4803      	ldr	r0, [pc, #12]	@ (8002194 <MDMA_IRQHandler+0x14>)
 8002186:	f008 faeb 	bl	800a760 <HAL_MDMA_IRQHandler>
  HAL_MDMA_IRQHandler(&hmdma_jpeg_outfifo_ne);
 800218a:	4803      	ldr	r0, [pc, #12]	@ (8002198 <MDMA_IRQHandler+0x18>)
 800218c:	f008 fae8 	bl	800a760 <HAL_MDMA_IRQHandler>
  /* USER CODE BEGIN MDMA_IRQn 1 */

  /* USER CODE END MDMA_IRQn 1 */
}
 8002190:	bf00      	nop
 8002192:	bd80      	pop	{r7, pc}
 8002194:	240002e8 	.word	0x240002e8
 8002198:	24000354 	.word	0x24000354

0800219c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b086      	sub	sp, #24
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021a4:	4a14      	ldr	r2, [pc, #80]	@ (80021f8 <_sbrk+0x5c>)
 80021a6:	4b15      	ldr	r3, [pc, #84]	@ (80021fc <_sbrk+0x60>)
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021b0:	4b13      	ldr	r3, [pc, #76]	@ (8002200 <_sbrk+0x64>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d102      	bne.n	80021be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021b8:	4b11      	ldr	r3, [pc, #68]	@ (8002200 <_sbrk+0x64>)
 80021ba:	4a12      	ldr	r2, [pc, #72]	@ (8002204 <_sbrk+0x68>)
 80021bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021be:	4b10      	ldr	r3, [pc, #64]	@ (8002200 <_sbrk+0x64>)
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4413      	add	r3, r2
 80021c6:	693a      	ldr	r2, [r7, #16]
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d207      	bcs.n	80021dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021cc:	f013 fe2c 	bl	8015e28 <__errno>
 80021d0:	4603      	mov	r3, r0
 80021d2:	220c      	movs	r2, #12
 80021d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021d6:	f04f 33ff 	mov.w	r3, #4294967295
 80021da:	e009      	b.n	80021f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021dc:	4b08      	ldr	r3, [pc, #32]	@ (8002200 <_sbrk+0x64>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021e2:	4b07      	ldr	r3, [pc, #28]	@ (8002200 <_sbrk+0x64>)
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4413      	add	r3, r2
 80021ea:	4a05      	ldr	r2, [pc, #20]	@ (8002200 <_sbrk+0x64>)
 80021ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021ee:	68fb      	ldr	r3, [r7, #12]
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	3718      	adds	r7, #24
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	24080000 	.word	0x24080000
 80021fc:	00000400 	.word	0x00000400
 8002200:	24009c8c 	.word	0x24009c8c
 8002204:	2400b9c8 	.word	0x2400b9c8

08002208 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002208:	b480      	push	{r7}
 800220a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800220c:	4b43      	ldr	r3, [pc, #268]	@ (800231c <SystemInit+0x114>)
 800220e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002212:	4a42      	ldr	r2, [pc, #264]	@ (800231c <SystemInit+0x114>)
 8002214:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002218:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800221c:	4b40      	ldr	r3, [pc, #256]	@ (8002320 <SystemInit+0x118>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 030f 	and.w	r3, r3, #15
 8002224:	2b06      	cmp	r3, #6
 8002226:	d807      	bhi.n	8002238 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002228:	4b3d      	ldr	r3, [pc, #244]	@ (8002320 <SystemInit+0x118>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f023 030f 	bic.w	r3, r3, #15
 8002230:	4a3b      	ldr	r2, [pc, #236]	@ (8002320 <SystemInit+0x118>)
 8002232:	f043 0307 	orr.w	r3, r3, #7
 8002236:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002238:	4b3a      	ldr	r3, [pc, #232]	@ (8002324 <SystemInit+0x11c>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a39      	ldr	r2, [pc, #228]	@ (8002324 <SystemInit+0x11c>)
 800223e:	f043 0301 	orr.w	r3, r3, #1
 8002242:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002244:	4b37      	ldr	r3, [pc, #220]	@ (8002324 <SystemInit+0x11c>)
 8002246:	2200      	movs	r2, #0
 8002248:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800224a:	4b36      	ldr	r3, [pc, #216]	@ (8002324 <SystemInit+0x11c>)
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	4935      	ldr	r1, [pc, #212]	@ (8002324 <SystemInit+0x11c>)
 8002250:	4b35      	ldr	r3, [pc, #212]	@ (8002328 <SystemInit+0x120>)
 8002252:	4013      	ands	r3, r2
 8002254:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002256:	4b32      	ldr	r3, [pc, #200]	@ (8002320 <SystemInit+0x118>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 0308 	and.w	r3, r3, #8
 800225e:	2b00      	cmp	r3, #0
 8002260:	d007      	beq.n	8002272 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002262:	4b2f      	ldr	r3, [pc, #188]	@ (8002320 <SystemInit+0x118>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f023 030f 	bic.w	r3, r3, #15
 800226a:	4a2d      	ldr	r2, [pc, #180]	@ (8002320 <SystemInit+0x118>)
 800226c:	f043 0307 	orr.w	r3, r3, #7
 8002270:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002272:	4b2c      	ldr	r3, [pc, #176]	@ (8002324 <SystemInit+0x11c>)
 8002274:	2200      	movs	r2, #0
 8002276:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002278:	4b2a      	ldr	r3, [pc, #168]	@ (8002324 <SystemInit+0x11c>)
 800227a:	2200      	movs	r2, #0
 800227c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800227e:	4b29      	ldr	r3, [pc, #164]	@ (8002324 <SystemInit+0x11c>)
 8002280:	2200      	movs	r2, #0
 8002282:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002284:	4b27      	ldr	r3, [pc, #156]	@ (8002324 <SystemInit+0x11c>)
 8002286:	4a29      	ldr	r2, [pc, #164]	@ (800232c <SystemInit+0x124>)
 8002288:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800228a:	4b26      	ldr	r3, [pc, #152]	@ (8002324 <SystemInit+0x11c>)
 800228c:	4a28      	ldr	r2, [pc, #160]	@ (8002330 <SystemInit+0x128>)
 800228e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002290:	4b24      	ldr	r3, [pc, #144]	@ (8002324 <SystemInit+0x11c>)
 8002292:	4a28      	ldr	r2, [pc, #160]	@ (8002334 <SystemInit+0x12c>)
 8002294:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002296:	4b23      	ldr	r3, [pc, #140]	@ (8002324 <SystemInit+0x11c>)
 8002298:	2200      	movs	r2, #0
 800229a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800229c:	4b21      	ldr	r3, [pc, #132]	@ (8002324 <SystemInit+0x11c>)
 800229e:	4a25      	ldr	r2, [pc, #148]	@ (8002334 <SystemInit+0x12c>)
 80022a0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80022a2:	4b20      	ldr	r3, [pc, #128]	@ (8002324 <SystemInit+0x11c>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80022a8:	4b1e      	ldr	r3, [pc, #120]	@ (8002324 <SystemInit+0x11c>)
 80022aa:	4a22      	ldr	r2, [pc, #136]	@ (8002334 <SystemInit+0x12c>)
 80022ac:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80022ae:	4b1d      	ldr	r3, [pc, #116]	@ (8002324 <SystemInit+0x11c>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80022b4:	4b1b      	ldr	r3, [pc, #108]	@ (8002324 <SystemInit+0x11c>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a1a      	ldr	r2, [pc, #104]	@ (8002324 <SystemInit+0x11c>)
 80022ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80022be:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80022c0:	4b18      	ldr	r3, [pc, #96]	@ (8002324 <SystemInit+0x11c>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80022c6:	4b1c      	ldr	r3, [pc, #112]	@ (8002338 <SystemInit+0x130>)
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	4b1c      	ldr	r3, [pc, #112]	@ (800233c <SystemInit+0x134>)
 80022cc:	4013      	ands	r3, r2
 80022ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80022d2:	d202      	bcs.n	80022da <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80022d4:	4b1a      	ldr	r3, [pc, #104]	@ (8002340 <SystemInit+0x138>)
 80022d6:	2201      	movs	r2, #1
 80022d8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80022da:	4b12      	ldr	r3, [pc, #72]	@ (8002324 <SystemInit+0x11c>)
 80022dc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80022e0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d113      	bne.n	8002310 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80022e8:	4b0e      	ldr	r3, [pc, #56]	@ (8002324 <SystemInit+0x11c>)
 80022ea:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80022ee:	4a0d      	ldr	r2, [pc, #52]	@ (8002324 <SystemInit+0x11c>)
 80022f0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80022f4:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80022f8:	4b12      	ldr	r3, [pc, #72]	@ (8002344 <SystemInit+0x13c>)
 80022fa:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80022fe:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8002300:	4b08      	ldr	r3, [pc, #32]	@ (8002324 <SystemInit+0x11c>)
 8002302:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002306:	4a07      	ldr	r2, [pc, #28]	@ (8002324 <SystemInit+0x11c>)
 8002308:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800230c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002310:	bf00      	nop
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr
 800231a:	bf00      	nop
 800231c:	e000ed00 	.word	0xe000ed00
 8002320:	52002000 	.word	0x52002000
 8002324:	58024400 	.word	0x58024400
 8002328:	eaf6ed7f 	.word	0xeaf6ed7f
 800232c:	02020200 	.word	0x02020200
 8002330:	01ff0000 	.word	0x01ff0000
 8002334:	01010280 	.word	0x01010280
 8002338:	5c001000 	.word	0x5c001000
 800233c:	ffff0000 	.word	0xffff0000
 8002340:	51008108 	.word	0x51008108
 8002344:	52004000 	.word	0x52004000

08002348 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8002348:	b480      	push	{r7}
 800234a:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 800234c:	4b09      	ldr	r3, [pc, #36]	@ (8002374 <ExitRun0Mode+0x2c>)
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	4a08      	ldr	r2, [pc, #32]	@ (8002374 <ExitRun0Mode+0x2c>)
 8002352:	f043 0302 	orr.w	r3, r3, #2
 8002356:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8002358:	bf00      	nop
 800235a:	4b06      	ldr	r3, [pc, #24]	@ (8002374 <ExitRun0Mode+0x2c>)
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002362:	2b00      	cmp	r3, #0
 8002364:	d0f9      	beq.n	800235a <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8002366:	bf00      	nop
 8002368:	bf00      	nop
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr
 8002372:	bf00      	nop
 8002374:	58024800 	.word	0x58024800

08002378 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002378:	f8df d038 	ldr.w	sp, [pc, #56]	@ 80023b4 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 800237c:	f7ff ffe4 	bl	8002348 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002380:	f7ff ff42 	bl	8002208 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002384:	480c      	ldr	r0, [pc, #48]	@ (80023b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002386:	490d      	ldr	r1, [pc, #52]	@ (80023bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002388:	4a0d      	ldr	r2, [pc, #52]	@ (80023c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800238a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800238c:	e002      	b.n	8002394 <LoopCopyDataInit>

0800238e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800238e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002390:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002392:	3304      	adds	r3, #4

08002394 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002394:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002396:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002398:	d3f9      	bcc.n	800238e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800239a:	4a0a      	ldr	r2, [pc, #40]	@ (80023c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800239c:	4c0a      	ldr	r4, [pc, #40]	@ (80023c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800239e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023a0:	e001      	b.n	80023a6 <LoopFillZerobss>

080023a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023a4:	3204      	adds	r2, #4

080023a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023a8:	d3fb      	bcc.n	80023a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80023aa:	f013 fd43 	bl	8015e34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023ae:	f7fe f985 	bl	80006bc <main>
  bx  lr
 80023b2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80023b4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80023b8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80023bc:	24000158 	.word	0x24000158
  ldr r2, =_sidata
 80023c0:	08016a48 	.word	0x08016a48
  ldr r2, =_sbss
 80023c4:	24000158 	.word	0x24000158
  ldr r4, =_ebss
 80023c8:	2400b9c4 	.word	0x2400b9c4

080023cc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80023cc:	e7fe      	b.n	80023cc <ADC3_IRQHandler>
	...

080023d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023d6:	2003      	movs	r0, #3
 80023d8:	f000 f98c 	bl	80026f4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80023dc:	f00a fd16 	bl	800ce0c <HAL_RCC_GetSysClockFreq>
 80023e0:	4602      	mov	r2, r0
 80023e2:	4b15      	ldr	r3, [pc, #84]	@ (8002438 <HAL_Init+0x68>)
 80023e4:	699b      	ldr	r3, [r3, #24]
 80023e6:	0a1b      	lsrs	r3, r3, #8
 80023e8:	f003 030f 	and.w	r3, r3, #15
 80023ec:	4913      	ldr	r1, [pc, #76]	@ (800243c <HAL_Init+0x6c>)
 80023ee:	5ccb      	ldrb	r3, [r1, r3]
 80023f0:	f003 031f 	and.w	r3, r3, #31
 80023f4:	fa22 f303 	lsr.w	r3, r2, r3
 80023f8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80023fa:	4b0f      	ldr	r3, [pc, #60]	@ (8002438 <HAL_Init+0x68>)
 80023fc:	699b      	ldr	r3, [r3, #24]
 80023fe:	f003 030f 	and.w	r3, r3, #15
 8002402:	4a0e      	ldr	r2, [pc, #56]	@ (800243c <HAL_Init+0x6c>)
 8002404:	5cd3      	ldrb	r3, [r2, r3]
 8002406:	f003 031f 	and.w	r3, r3, #31
 800240a:	687a      	ldr	r2, [r7, #4]
 800240c:	fa22 f303 	lsr.w	r3, r2, r3
 8002410:	4a0b      	ldr	r2, [pc, #44]	@ (8002440 <HAL_Init+0x70>)
 8002412:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002414:	4a0b      	ldr	r2, [pc, #44]	@ (8002444 <HAL_Init+0x74>)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800241a:	200f      	movs	r0, #15
 800241c:	f000 f814 	bl	8002448 <HAL_InitTick>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d001      	beq.n	800242a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e002      	b.n	8002430 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800242a:	f7ff f95b 	bl	80016e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800242e:	2300      	movs	r3, #0
}
 8002430:	4618      	mov	r0, r3
 8002432:	3708      	adds	r7, #8
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}
 8002438:	58024400 	.word	0x58024400
 800243c:	08016764 	.word	0x08016764
 8002440:	24000008 	.word	0x24000008
 8002444:	24000004 	.word	0x24000004

08002448 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b082      	sub	sp, #8
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002450:	4b15      	ldr	r3, [pc, #84]	@ (80024a8 <HAL_InitTick+0x60>)
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d101      	bne.n	800245c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	e021      	b.n	80024a0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800245c:	4b13      	ldr	r3, [pc, #76]	@ (80024ac <HAL_InitTick+0x64>)
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	4b11      	ldr	r3, [pc, #68]	@ (80024a8 <HAL_InitTick+0x60>)
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	4619      	mov	r1, r3
 8002466:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800246a:	fbb3 f3f1 	udiv	r3, r3, r1
 800246e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002472:	4618      	mov	r0, r3
 8002474:	f000 f971 	bl	800275a <HAL_SYSTICK_Config>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d001      	beq.n	8002482 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e00e      	b.n	80024a0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2b0f      	cmp	r3, #15
 8002486:	d80a      	bhi.n	800249e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002488:	2200      	movs	r2, #0
 800248a:	6879      	ldr	r1, [r7, #4]
 800248c:	f04f 30ff 	mov.w	r0, #4294967295
 8002490:	f000 f93b 	bl	800270a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002494:	4a06      	ldr	r2, [pc, #24]	@ (80024b0 <HAL_InitTick+0x68>)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800249a:	2300      	movs	r3, #0
 800249c:	e000      	b.n	80024a0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3708      	adds	r7, #8
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	24000010 	.word	0x24000010
 80024ac:	24000004 	.word	0x24000004
 80024b0:	2400000c 	.word	0x2400000c

080024b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024b4:	b480      	push	{r7}
 80024b6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80024b8:	4b06      	ldr	r3, [pc, #24]	@ (80024d4 <HAL_IncTick+0x20>)
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	461a      	mov	r2, r3
 80024be:	4b06      	ldr	r3, [pc, #24]	@ (80024d8 <HAL_IncTick+0x24>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4413      	add	r3, r2
 80024c4:	4a04      	ldr	r2, [pc, #16]	@ (80024d8 <HAL_IncTick+0x24>)
 80024c6:	6013      	str	r3, [r2, #0]
}
 80024c8:	bf00      	nop
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr
 80024d2:	bf00      	nop
 80024d4:	24000010 	.word	0x24000010
 80024d8:	24009c90 	.word	0x24009c90

080024dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024dc:	b480      	push	{r7}
 80024de:	af00      	add	r7, sp, #0
  return uwTick;
 80024e0:	4b03      	ldr	r3, [pc, #12]	@ (80024f0 <HAL_GetTick+0x14>)
 80024e2:	681b      	ldr	r3, [r3, #0]
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr
 80024ee:	bf00      	nop
 80024f0:	24009c90 	.word	0x24009c90

080024f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b084      	sub	sp, #16
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024fc:	f7ff ffee 	bl	80024dc <HAL_GetTick>
 8002500:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800250c:	d005      	beq.n	800251a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800250e:	4b0a      	ldr	r3, [pc, #40]	@ (8002538 <HAL_Delay+0x44>)
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	461a      	mov	r2, r3
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	4413      	add	r3, r2
 8002518:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800251a:	bf00      	nop
 800251c:	f7ff ffde 	bl	80024dc <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	68fa      	ldr	r2, [r7, #12]
 8002528:	429a      	cmp	r2, r3
 800252a:	d8f7      	bhi.n	800251c <HAL_Delay+0x28>
  {
  }
}
 800252c:	bf00      	nop
 800252e:	bf00      	nop
 8002530:	3710      	adds	r7, #16
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	24000010 	.word	0x24000010

0800253c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800253c:	b480      	push	{r7}
 800253e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002540:	4b03      	ldr	r3, [pc, #12]	@ (8002550 <HAL_GetREVID+0x14>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	0c1b      	lsrs	r3, r3, #16
}
 8002546:	4618      	mov	r0, r3
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr
 8002550:	5c001000 	.word	0x5c001000

08002554 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002554:	b480      	push	{r7}
 8002556:	b085      	sub	sp, #20
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	f003 0307 	and.w	r3, r3, #7
 8002562:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002564:	4b0b      	ldr	r3, [pc, #44]	@ (8002594 <__NVIC_SetPriorityGrouping+0x40>)
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800256a:	68ba      	ldr	r2, [r7, #8]
 800256c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002570:	4013      	ands	r3, r2
 8002572:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800257c:	4b06      	ldr	r3, [pc, #24]	@ (8002598 <__NVIC_SetPriorityGrouping+0x44>)
 800257e:	4313      	orrs	r3, r2
 8002580:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002582:	4a04      	ldr	r2, [pc, #16]	@ (8002594 <__NVIC_SetPriorityGrouping+0x40>)
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	60d3      	str	r3, [r2, #12]
}
 8002588:	bf00      	nop
 800258a:	3714      	adds	r7, #20
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr
 8002594:	e000ed00 	.word	0xe000ed00
 8002598:	05fa0000 	.word	0x05fa0000

0800259c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800259c:	b480      	push	{r7}
 800259e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025a0:	4b04      	ldr	r3, [pc, #16]	@ (80025b4 <__NVIC_GetPriorityGrouping+0x18>)
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	0a1b      	lsrs	r3, r3, #8
 80025a6:	f003 0307 	and.w	r3, r3, #7
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr
 80025b4:	e000ed00 	.word	0xe000ed00

080025b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b083      	sub	sp, #12
 80025bc:	af00      	add	r7, sp, #0
 80025be:	4603      	mov	r3, r0
 80025c0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80025c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	db0b      	blt.n	80025e2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025ca:	88fb      	ldrh	r3, [r7, #6]
 80025cc:	f003 021f 	and.w	r2, r3, #31
 80025d0:	4907      	ldr	r1, [pc, #28]	@ (80025f0 <__NVIC_EnableIRQ+0x38>)
 80025d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025d6:	095b      	lsrs	r3, r3, #5
 80025d8:	2001      	movs	r0, #1
 80025da:	fa00 f202 	lsl.w	r2, r0, r2
 80025de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80025e2:	bf00      	nop
 80025e4:	370c      	adds	r7, #12
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr
 80025ee:	bf00      	nop
 80025f0:	e000e100 	.word	0xe000e100

080025f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b083      	sub	sp, #12
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	4603      	mov	r3, r0
 80025fc:	6039      	str	r1, [r7, #0]
 80025fe:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002600:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002604:	2b00      	cmp	r3, #0
 8002606:	db0a      	blt.n	800261e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	b2da      	uxtb	r2, r3
 800260c:	490c      	ldr	r1, [pc, #48]	@ (8002640 <__NVIC_SetPriority+0x4c>)
 800260e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002612:	0112      	lsls	r2, r2, #4
 8002614:	b2d2      	uxtb	r2, r2
 8002616:	440b      	add	r3, r1
 8002618:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800261c:	e00a      	b.n	8002634 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	b2da      	uxtb	r2, r3
 8002622:	4908      	ldr	r1, [pc, #32]	@ (8002644 <__NVIC_SetPriority+0x50>)
 8002624:	88fb      	ldrh	r3, [r7, #6]
 8002626:	f003 030f 	and.w	r3, r3, #15
 800262a:	3b04      	subs	r3, #4
 800262c:	0112      	lsls	r2, r2, #4
 800262e:	b2d2      	uxtb	r2, r2
 8002630:	440b      	add	r3, r1
 8002632:	761a      	strb	r2, [r3, #24]
}
 8002634:	bf00      	nop
 8002636:	370c      	adds	r7, #12
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr
 8002640:	e000e100 	.word	0xe000e100
 8002644:	e000ed00 	.word	0xe000ed00

08002648 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002648:	b480      	push	{r7}
 800264a:	b089      	sub	sp, #36	@ 0x24
 800264c:	af00      	add	r7, sp, #0
 800264e:	60f8      	str	r0, [r7, #12]
 8002650:	60b9      	str	r1, [r7, #8]
 8002652:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	f003 0307 	and.w	r3, r3, #7
 800265a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800265c:	69fb      	ldr	r3, [r7, #28]
 800265e:	f1c3 0307 	rsb	r3, r3, #7
 8002662:	2b04      	cmp	r3, #4
 8002664:	bf28      	it	cs
 8002666:	2304      	movcs	r3, #4
 8002668:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	3304      	adds	r3, #4
 800266e:	2b06      	cmp	r3, #6
 8002670:	d902      	bls.n	8002678 <NVIC_EncodePriority+0x30>
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	3b03      	subs	r3, #3
 8002676:	e000      	b.n	800267a <NVIC_EncodePriority+0x32>
 8002678:	2300      	movs	r3, #0
 800267a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800267c:	f04f 32ff 	mov.w	r2, #4294967295
 8002680:	69bb      	ldr	r3, [r7, #24]
 8002682:	fa02 f303 	lsl.w	r3, r2, r3
 8002686:	43da      	mvns	r2, r3
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	401a      	ands	r2, r3
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002690:	f04f 31ff 	mov.w	r1, #4294967295
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	fa01 f303 	lsl.w	r3, r1, r3
 800269a:	43d9      	mvns	r1, r3
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026a0:	4313      	orrs	r3, r2
         );
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3724      	adds	r7, #36	@ 0x24
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr
	...

080026b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b082      	sub	sp, #8
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	3b01      	subs	r3, #1
 80026bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80026c0:	d301      	bcc.n	80026c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026c2:	2301      	movs	r3, #1
 80026c4:	e00f      	b.n	80026e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026c6:	4a0a      	ldr	r2, [pc, #40]	@ (80026f0 <SysTick_Config+0x40>)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	3b01      	subs	r3, #1
 80026cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026ce:	210f      	movs	r1, #15
 80026d0:	f04f 30ff 	mov.w	r0, #4294967295
 80026d4:	f7ff ff8e 	bl	80025f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026d8:	4b05      	ldr	r3, [pc, #20]	@ (80026f0 <SysTick_Config+0x40>)
 80026da:	2200      	movs	r2, #0
 80026dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026de:	4b04      	ldr	r3, [pc, #16]	@ (80026f0 <SysTick_Config+0x40>)
 80026e0:	2207      	movs	r2, #7
 80026e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026e4:	2300      	movs	r3, #0
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3708      	adds	r7, #8
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	e000e010 	.word	0xe000e010

080026f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026fc:	6878      	ldr	r0, [r7, #4]
 80026fe:	f7ff ff29 	bl	8002554 <__NVIC_SetPriorityGrouping>
}
 8002702:	bf00      	nop
 8002704:	3708      	adds	r7, #8
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}

0800270a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800270a:	b580      	push	{r7, lr}
 800270c:	b086      	sub	sp, #24
 800270e:	af00      	add	r7, sp, #0
 8002710:	4603      	mov	r3, r0
 8002712:	60b9      	str	r1, [r7, #8]
 8002714:	607a      	str	r2, [r7, #4]
 8002716:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002718:	f7ff ff40 	bl	800259c <__NVIC_GetPriorityGrouping>
 800271c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	68b9      	ldr	r1, [r7, #8]
 8002722:	6978      	ldr	r0, [r7, #20]
 8002724:	f7ff ff90 	bl	8002648 <NVIC_EncodePriority>
 8002728:	4602      	mov	r2, r0
 800272a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800272e:	4611      	mov	r1, r2
 8002730:	4618      	mov	r0, r3
 8002732:	f7ff ff5f 	bl	80025f4 <__NVIC_SetPriority>
}
 8002736:	bf00      	nop
 8002738:	3718      	adds	r7, #24
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}

0800273e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800273e:	b580      	push	{r7, lr}
 8002740:	b082      	sub	sp, #8
 8002742:	af00      	add	r7, sp, #0
 8002744:	4603      	mov	r3, r0
 8002746:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002748:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800274c:	4618      	mov	r0, r3
 800274e:	f7ff ff33 	bl	80025b8 <__NVIC_EnableIRQ>
}
 8002752:	bf00      	nop
 8002754:	3708      	adds	r7, #8
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}

0800275a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800275a:	b580      	push	{r7, lr}
 800275c:	b082      	sub	sp, #8
 800275e:	af00      	add	r7, sp, #0
 8002760:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f7ff ffa4 	bl	80026b0 <SysTick_Config>
 8002768:	4603      	mov	r3, r0
}
 800276a:	4618      	mov	r0, r3
 800276c:	3708      	adds	r7, #8
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
	...

08002774 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002774:	b480      	push	{r7}
 8002776:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002778:	f3bf 8f5f 	dmb	sy
}
 800277c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800277e:	4b07      	ldr	r3, [pc, #28]	@ (800279c <HAL_MPU_Disable+0x28>)
 8002780:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002782:	4a06      	ldr	r2, [pc, #24]	@ (800279c <HAL_MPU_Disable+0x28>)
 8002784:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002788:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800278a:	4b05      	ldr	r3, [pc, #20]	@ (80027a0 <HAL_MPU_Disable+0x2c>)
 800278c:	2200      	movs	r2, #0
 800278e:	605a      	str	r2, [r3, #4]
}
 8002790:	bf00      	nop
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr
 800279a:	bf00      	nop
 800279c:	e000ed00 	.word	0xe000ed00
 80027a0:	e000ed90 	.word	0xe000ed90

080027a4 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b083      	sub	sp, #12
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80027ac:	4a0b      	ldr	r2, [pc, #44]	@ (80027dc <HAL_MPU_Enable+0x38>)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	f043 0301 	orr.w	r3, r3, #1
 80027b4:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80027b6:	4b0a      	ldr	r3, [pc, #40]	@ (80027e0 <HAL_MPU_Enable+0x3c>)
 80027b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027ba:	4a09      	ldr	r2, [pc, #36]	@ (80027e0 <HAL_MPU_Enable+0x3c>)
 80027bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027c0:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80027c2:	f3bf 8f4f 	dsb	sy
}
 80027c6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80027c8:	f3bf 8f6f 	isb	sy
}
 80027cc:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80027ce:	bf00      	nop
 80027d0:	370c      	adds	r7, #12
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr
 80027da:	bf00      	nop
 80027dc:	e000ed90 	.word	0xe000ed90
 80027e0:	e000ed00 	.word	0xe000ed00

080027e4 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b083      	sub	sp, #12
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	785a      	ldrb	r2, [r3, #1]
 80027f0:	4b1b      	ldr	r3, [pc, #108]	@ (8002860 <HAL_MPU_ConfigRegion+0x7c>)
 80027f2:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80027f4:	4b1a      	ldr	r3, [pc, #104]	@ (8002860 <HAL_MPU_ConfigRegion+0x7c>)
 80027f6:	691b      	ldr	r3, [r3, #16]
 80027f8:	4a19      	ldr	r2, [pc, #100]	@ (8002860 <HAL_MPU_ConfigRegion+0x7c>)
 80027fa:	f023 0301 	bic.w	r3, r3, #1
 80027fe:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8002800:	4a17      	ldr	r2, [pc, #92]	@ (8002860 <HAL_MPU_ConfigRegion+0x7c>)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	7b1b      	ldrb	r3, [r3, #12]
 800280c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	7adb      	ldrb	r3, [r3, #11]
 8002812:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002814:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	7a9b      	ldrb	r3, [r3, #10]
 800281a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800281c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	7b5b      	ldrb	r3, [r3, #13]
 8002822:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002824:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	7b9b      	ldrb	r3, [r3, #14]
 800282a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800282c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	7bdb      	ldrb	r3, [r3, #15]
 8002832:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002834:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	7a5b      	ldrb	r3, [r3, #9]
 800283a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800283c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	7a1b      	ldrb	r3, [r3, #8]
 8002842:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002844:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002846:	687a      	ldr	r2, [r7, #4]
 8002848:	7812      	ldrb	r2, [r2, #0]
 800284a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800284c:	4a04      	ldr	r2, [pc, #16]	@ (8002860 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800284e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002850:	6113      	str	r3, [r2, #16]
}
 8002852:	bf00      	nop
 8002854:	370c      	adds	r7, #12
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr
 800285e:	bf00      	nop
 8002860:	e000ed90 	.word	0xe000ed90

08002864 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b082      	sub	sp, #8
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d101      	bne.n	8002876 <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e069      	b.n	800294a <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800287c:	b2db      	uxtb	r3, r3
 800287e:	2b00      	cmp	r3, #0
 8002880:	d102      	bne.n	8002888 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f7fe ff48 	bl	8001718 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2202      	movs	r2, #2
 800288c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	699b      	ldr	r3, [r3, #24]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d002      	beq.n	800289e <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2200      	movs	r2, #0
 800289c:	625a      	str	r2, [r3, #36]	@ 0x24
  }
  /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	6819      	ldr	r1, [r3, #0]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	4b2a      	ldr	r3, [pc, #168]	@ (8002954 <HAL_DCMI_Init+0xf0>)
 80028aa:	400b      	ands	r3, r1
 80028ac:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	6819      	ldr	r1, [r3, #0]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	685a      	ldr	r2, [r3, #4]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	695b      	ldr	r3, [r3, #20]
 80028bc:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80028c2:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	691b      	ldr	r3, [r3, #16]
 80028c8:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80028ce:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	699b      	ldr	r3, [r3, #24]
 80028d4:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80028da:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028e0:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80028e6:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028ec:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80028f2:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	430a      	orrs	r2, r1
 80028fa:	601a      	str	r2, [r3, #0]

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	2b10      	cmp	r3, #16
 8002902:	d112      	bne.n	800292a <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	7f1b      	ldrb	r3, [r3, #28]
 8002908:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	7f5b      	ldrb	r3, [r3, #29]
 800290e:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8002910:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	7f9b      	ldrb	r3, [r3, #30]
 8002916:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8002918:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	7fdb      	ldrb	r3, [r3, #31]
 8002920:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8002926:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8002928:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	68da      	ldr	r2, [r3, #12]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f042 021e 	orr.w	r2, r2, #30
 8002938:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2200      	movs	r2, #0
 800293e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2201      	movs	r2, #1
 8002944:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002948:	2300      	movs	r3, #0
}
 800294a:	4618      	mov	r0, r3
 800294c:	3708      	adds	r7, #8
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	ffe0f007 	.word	0xffe0f007

08002958 <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef *hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b088      	sub	sp, #32
 800295c:	af02      	add	r7, sp, #8
 800295e:	60f8      	str	r0, [r7, #12]
 8002960:	60b9      	str	r1, [r7, #8]
 8002962:	607a      	str	r2, [r7, #4]
 8002964:	603b      	str	r3, [r7, #0]

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800296c:	2b01      	cmp	r3, #1
 800296e:	d101      	bne.n	8002974 <HAL_DCMI_Start_DMA+0x1c>
 8002970:	2302      	movs	r3, #2
 8002972:	e0ab      	b.n	8002acc <HAL_DCMI_Start_DMA+0x174>
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2201      	movs	r2, #1
 8002978:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2202      	movs	r2, #2
 8002980:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002992:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f022 0202 	bic.w	r2, r2, #2
 80029a2:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |= (uint32_t)(DCMI_Mode);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	6819      	ldr	r1, [r3, #0]
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	68ba      	ldr	r2, [r7, #8]
 80029b0:	430a      	orrs	r2, r1
 80029b2:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029b8:	4a46      	ldr	r2, [pc, #280]	@ (8002ad4 <HAL_DCMI_Start_DMA+0x17c>)
 80029ba:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029c0:	4a45      	ldr	r2, [pc, #276]	@ (8002ad8 <HAL_DCMI_Start_DMA+0x180>)
 80029c2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029c8:	2200      	movs	r2, #0
 80029ca:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Reset transfer counters value */
  hdcmi->XferCount = 0;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	2200      	movs	r2, #0
 80029d0:	639a      	str	r2, [r3, #56]	@ 0x38
  hdcmi->XferTransferNumber = 0;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	2200      	movs	r2, #0
 80029d6:	641a      	str	r2, [r3, #64]	@ 0x40
  hdcmi->XferSize = 0;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2200      	movs	r2, #0
 80029dc:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdcmi->pBuffPtr = 0;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2200      	movs	r2, #0
 80029e2:	645a      	str	r2, [r3, #68]	@ 0x44

  if (Length <= 0xFFFFU)
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029ea:	d219      	bcs.n	8002a20 <HAL_DCMI_Start_DMA+0xc8>
  {
    /* Enable the DMA Stream */
    if (HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length) != HAL_OK)
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	3328      	adds	r3, #40	@ 0x28
 80029f6:	4619      	mov	r1, r3
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	687a      	ldr	r2, [r7, #4]
 80029fc:	f000 fd7a 	bl	80034f4 <HAL_DMA_Start_IT>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d055      	beq.n	8002ab2 <HAL_DCMI_Start_DMA+0x15a>
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2240      	movs	r2, #64	@ 0x40
 8002a0a:	64da      	str	r2, [r3, #76]	@ 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2201      	movs	r2, #1
 8002a10:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2200      	movs	r2, #0
 8002a18:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      /* Return function status */
      return HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e055      	b.n	8002acc <HAL_DCMI_Start_DMA+0x174>
    }
  }
  else /* DCMI_DOUBLE_BUFFER Mode */
  {
    /* Set the DMA memory1 conversion complete callback */
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a24:	4a2b      	ldr	r2, [pc, #172]	@ (8002ad4 <HAL_DCMI_Start_DMA+0x17c>)
 8002a26:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	639a      	str	r2, [r3, #56]	@ 0x38
    hdcmi->XferSize = Length;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	683a      	ldr	r2, [r7, #0]
 8002a32:	63da      	str	r2, [r3, #60]	@ 0x3c
    hdcmi->pBuffPtr = pData;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Get the number of buffer */
    while (hdcmi->XferSize > 0xFFFFU)
 8002a3a:	e009      	b.n	8002a50 <HAL_DCMI_Start_DMA+0xf8>
    {
      hdcmi->XferSize = (hdcmi->XferSize / 2U);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a40:	085a      	lsrs	r2, r3, #1
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	63da      	str	r2, [r3, #60]	@ 0x3c
      hdcmi->XferCount = hdcmi->XferCount * 2U;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a4a:	005a      	lsls	r2, r3, #1
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	639a      	str	r2, [r3, #56]	@ 0x38
    while (hdcmi->XferSize > 0xFFFFU)
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a58:	d2f0      	bcs.n	8002a3c <HAL_DCMI_Start_DMA+0xe4>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a5e:	1e9a      	subs	r2, r3, #2
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	639a      	str	r2, [r3, #56]	@ 0x38
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Update second memory address */
    SecondMemAddress = (uint32_t)(pData + (4U * hdcmi->XferSize));
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a70:	009b      	lsls	r3, r3, #2
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	4413      	add	r3, r2
 8002a76:	617b      	str	r3, [r7, #20]

    /* Start DMA multi buffer transfer */
    if (HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize) != HAL_OK)
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	3328      	adds	r3, #40	@ 0x28
 8002a82:	4619      	mov	r1, r3
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a88:	9300      	str	r3, [sp, #0]
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	687a      	ldr	r2, [r7, #4]
 8002a8e:	f003 f81f 	bl	8005ad0 <HAL_DMAEx_MultiBufferStart_IT>
 8002a92:	4603      	mov	r3, r0
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d00c      	beq.n	8002ab2 <HAL_DCMI_Start_DMA+0x15a>
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	2240      	movs	r2, #64	@ 0x40
 8002a9c:	64da      	str	r2, [r3, #76]	@ 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      /* Return function status */
      return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e00c      	b.n	8002acc <HAL_DCMI_Start_DMA+0x174>
    }
  }

  /* Enable Capture */
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f042 0201 	orr.w	r2, r2, #1
 8002ac0:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Return function status */
  return HAL_OK;
 8002aca:	2300      	movs	r3, #0
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	3718      	adds	r7, #24
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}
 8002ad4:	08002cdd 	.word	0x08002cdd
 8002ad8:	08002e03 	.word	0x08002e03

08002adc <HAL_DCMI_Stop>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Stop(DCMI_HandleTypeDef *hdcmi)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b084      	sub	sp, #16
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 8002ae4:	4b2b      	ldr	r3, [pc, #172]	@ (8002b94 <HAL_DCMI_Stop+0xb8>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a2b      	ldr	r2, [pc, #172]	@ (8002b98 <HAL_DCMI_Stop+0xbc>)
 8002aea:	fba2 2303 	umull	r2, r3, r2, r3
 8002aee:	0a5b      	lsrs	r3, r3, #9
 8002af0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002af4:	fb02 f303 	mul.w	r3, r2, r3
 8002af8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8002afa:	2300      	movs	r3, #0
 8002afc:	72fb      	strb	r3, [r7, #11]

  /* Process locked */
  __HAL_LOCK(hdcmi);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d101      	bne.n	8002b0c <HAL_DCMI_Stop+0x30>
 8002b08:	2302      	movs	r3, #2
 8002b0a:	e03f      	b.n	8002b8c <HAL_DCMI_Stop+0xb0>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2202      	movs	r2, #2
 8002b18:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Disable Capture */
  hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f022 0201 	bic.w	r2, r2, #1
 8002b2a:	601a      	str	r2, [r3, #0]

  /* Check if the DCMI capture effectively disabled */
  do
  {
    count-- ;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	3b01      	subs	r3, #1
 8002b30:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d108      	bne.n	8002b4a <HAL_DCMI_Stop+0x6e>
    {
      /* Update error code */
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b3c:	f043 0220 	orr.w	r2, r3, #32
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	64da      	str	r2, [r3, #76]	@ 0x4c

      status = HAL_TIMEOUT;
 8002b44:	2303      	movs	r3, #3
 8002b46:	72fb      	strb	r3, [r7, #11]
      break;
 8002b48:	e006      	b.n	8002b58 <HAL_DCMI_Stop+0x7c>
    }
  }
  while ((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 0301 	and.w	r3, r3, #1
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d1e9      	bne.n	8002b2c <HAL_DCMI_Stop+0x50>

  /* Disable the DCMI */
  __HAL_DCMI_DISABLE(hdcmi);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002b66:	601a      	str	r2, [r3, #0]

  /* Disable the DMA */
  (void)HAL_DMA_Abort(hdcmi->DMA_Handle);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f000 ff2b 	bl	80039c8 <HAL_DMA_Abort>

  /* Update error code */
  hdcmi->ErrorCode |= HAL_DCMI_ERROR_NONE;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Change DCMI state */
  hdcmi->State = HAL_DCMI_STATE_READY;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2200      	movs	r2, #0
 8002b86:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Return function status */
  return status;
 8002b8a:	7afb      	ldrb	r3, [r7, #11]
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3710      	adds	r7, #16
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	24000004 	.word	0x24000004
 8002b98:	10624dd3 	.word	0x10624dd3

08002b9c <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b084      	sub	sp, #16
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	691b      	ldr	r3, [r3, #16]
 8002baa:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if ((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	f003 0304 	and.w	r3, r3, #4
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d016      	beq.n	8002be4 <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	2204      	movs	r2, #4
 8002bbc:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bc2:	f043 0202 	orr.w	r2, r3, #2
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2204      	movs	r2, #4
 8002bce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002bd6:	4a31      	ldr	r2, [pc, #196]	@ (8002c9c <HAL_DCMI_IRQHandler+0x100>)
 8002bd8:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002bde:	4618      	mov	r0, r3
 8002be0:	f001 fa10 	bl	8004004 <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if ((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	f003 0302 	and.w	r3, r3, #2
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d016      	beq.n	8002c1c <HAL_DCMI_IRQHandler+0x80>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	2202      	movs	r2, #2
 8002bf4:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bfa:	f043 0201 	orr.w	r2, r3, #1
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2204      	movs	r2, #4
 8002c06:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c0e:	4a23      	ldr	r2, [pc, #140]	@ (8002c9c <HAL_DCMI_IRQHandler+0x100>)
 8002c10:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c16:	4618      	mov	r0, r3
 8002c18:	f001 f9f4 	bl	8004004 <HAL_DMA_Abort_IT>
  }
  /* Line Interrupt management ************************************************/
  if ((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	f003 0310 	and.w	r3, r3, #16
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d006      	beq.n	8002c34 <HAL_DCMI_IRQHandler+0x98>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	2210      	movs	r2, #16
 8002c2c:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else
    HAL_DCMI_LineEventCallback(hdcmi);
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f000 f840 	bl	8002cb4 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* VSYNC interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	f003 0308 	and.w	r3, r3, #8
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d006      	beq.n	8002c4c <HAL_DCMI_IRQHandler+0xb0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	2208      	movs	r2, #8
 8002c44:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f7fe fae8 	bl	800121c <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* FRAME interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	f003 0301 	and.w	r3, r3, #1
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d01d      	beq.n	8002c92 <HAL_DCMI_IRQHandler+0xf6>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 0302 	and.w	r3, r3, #2
 8002c60:	2b02      	cmp	r3, #2
 8002c62:	d107      	bne.n	8002c74 <HAL_DCMI_IRQHandler+0xd8>
    {
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	68da      	ldr	r2, [r3, #12]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f022 021e 	bic.w	r2, r2, #30
 8002c72:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	68da      	ldr	r2, [r3, #12]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f022 0201 	bic.w	r2, r2, #1
 8002c82:	60da      	str	r2, [r3, #12]

    /* Clear the End of Frame flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	2201      	movs	r2, #1
 8002c8a:	615a      	str	r2, [r3, #20]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else
    HAL_DCMI_FrameEventCallback(hdcmi);
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	f000 f81b 	bl	8002cc8 <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
}
 8002c92:	bf00      	nop
 8002c94:	3710      	adds	r7, #16
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	08002e03 	.word	0x08002e03

08002ca0 <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b083      	sub	sp, #12
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 8002ca8:	bf00      	nop
 8002caa:	370c      	adds	r7, #12
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr

08002cb4 <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b083      	sub	sp, #12
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 8002cbc:	bf00      	nop
 8002cbe:	370c      	adds	r7, #12
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr

08002cc8 <HAL_DCMI_FrameEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b083      	sub	sp, #12
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_FrameEventCallback could be implemented in the user file
   */
}
 8002cd0:	bf00      	nop
 8002cd2:	370c      	adds	r7, #12
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cda:	4770      	bx	lr

08002cdc <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b084      	sub	sp, #16
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  uint32_t tmp ;

  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ce8:	60fb      	str	r3, [r7, #12]

  if (hdcmi->XferCount != 0U)
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d043      	beq.n	8002d7a <DCMI_DMAXferCplt+0x9e>
  {
    /* Update memory 0 address location */
    tmp = ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR) & DMA_SxCR_CT);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002cfe:	60bb      	str	r3, [r7, #8]
    if (((hdcmi->XferCount % 2U) == 0U) && (tmp != 0U))
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d04:	f003 0301 	and.w	r3, r3, #1
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d118      	bne.n	8002d3e <DCMI_DMAXferCplt+0x62>
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d015      	beq.n	8002d3e <DCMI_DMAXferCplt+0x62>
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	68db      	ldr	r3, [r3, #12]
 8002d1a:	60bb      	str	r3, [r7, #8]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY0);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d24:	00da      	lsls	r2, r3, #3
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	4413      	add	r3, r2
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	4619      	mov	r1, r3
 8002d2e:	f003 fa2d 	bl	800618c <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d36:	1e5a      	subs	r2, r3, #1
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	639a      	str	r2, [r3, #56]	@ 0x38
 8002d3c:	e044      	b.n	8002dc8 <DCMI_DMAXferCplt+0xec>
    }
    /* Update memory 1 address location */
    else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d13c      	bne.n	8002dc8 <DCMI_DMAXferCplt+0xec>
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	691b      	ldr	r3, [r3, #16]
 8002d56:	60bb      	str	r3, [r7, #8]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY1);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d60:	00da      	lsls	r2, r3, #3
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	4413      	add	r3, r2
 8002d66:	2201      	movs	r2, #1
 8002d68:	4619      	mov	r1, r3
 8002d6a:	f003 fa0f 	bl	800618c <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d72:	1e5a      	subs	r2, r3, #1
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	639a      	str	r2, [r3, #56]	@ 0x38
 8002d78:	e026      	b.n	8002dc8 <DCMI_DMAXferCplt+0xec>
    {
      /* Nothing to do */
    }
  }
  /* Update memory 0 address location */
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) != 0U)
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d006      	beq.n	8002d98 <DCMI_DMAXferCplt+0xbc>
  {
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR = hdcmi->pBuffPtr;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	68fa      	ldr	r2, [r7, #12]
 8002d92:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002d94:	60da      	str	r2, [r3, #12]
 8002d96:	e017      	b.n	8002dc8 <DCMI_DMAXferCplt+0xec>
  }
  /* Update memory 1 address location */
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d10f      	bne.n	8002dc8 <DCMI_DMAXferCplt+0xec>
  {
    tmp = hdcmi->pBuffPtr;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dac:	60bb      	str	r3, [r7, #8]
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR = (tmp + (4U * hdcmi->XferSize));
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002db2:	0099      	lsls	r1, r3, #2
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	68ba      	ldr	r2, [r7, #8]
 8002dbc:	440a      	add	r2, r1
 8002dbe:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	639a      	str	r2, [r3, #56]	@ 0x38
  {
    /* Nothing to do */
  }

  /* Check if the frame is transferred */
  if (hdcmi->XferCount == hdcmi->XferTransferNumber)
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d112      	bne.n	8002dfa <DCMI_DMAXferCplt+0x11e>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	68da      	ldr	r2, [r3, #12]
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f042 0201 	orr.w	r2, r2, #1
 8002de2:	60da      	str	r2, [r3, #12]

    /* When snapshot mode, set dcmi state to ready */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 0302 	and.w	r3, r3, #2
 8002dee:	2b02      	cmp	r3, #2
 8002df0:	d103      	bne.n	8002dfa <DCMI_DMAXferCplt+0x11e>
    {
      hdcmi->State = HAL_DCMI_STATE_READY;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2201      	movs	r2, #1
 8002df6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    }
  }
}
 8002dfa:	bf00      	nop
 8002dfc:	3710      	adds	r7, #16
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}

08002e02 <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 8002e02:	b580      	push	{r7, lr}
 8002e04:	b084      	sub	sp, #16
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e0e:	60fb      	str	r3, [r7, #12]

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e16:	2b02      	cmp	r3, #2
 8002e18:	d009      	beq.n	8002e2e <DCMI_DMAError+0x2c>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e26:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 8002e2e:	68f8      	ldr	r0, [r7, #12]
 8002e30:	f7ff ff36 	bl	8002ca0 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
}
 8002e34:	bf00      	nop
 8002e36:	3710      	adds	r7, #16
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}

08002e3c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b086      	sub	sp, #24
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002e44:	f7ff fb4a 	bl	80024dc <HAL_GetTick>
 8002e48:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d101      	bne.n	8002e54 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	e316      	b.n	8003482 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a66      	ldr	r2, [pc, #408]	@ (8002ff4 <HAL_DMA_Init+0x1b8>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d04a      	beq.n	8002ef4 <HAL_DMA_Init+0xb8>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a65      	ldr	r2, [pc, #404]	@ (8002ff8 <HAL_DMA_Init+0x1bc>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d045      	beq.n	8002ef4 <HAL_DMA_Init+0xb8>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a63      	ldr	r2, [pc, #396]	@ (8002ffc <HAL_DMA_Init+0x1c0>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d040      	beq.n	8002ef4 <HAL_DMA_Init+0xb8>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a62      	ldr	r2, [pc, #392]	@ (8003000 <HAL_DMA_Init+0x1c4>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d03b      	beq.n	8002ef4 <HAL_DMA_Init+0xb8>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a60      	ldr	r2, [pc, #384]	@ (8003004 <HAL_DMA_Init+0x1c8>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d036      	beq.n	8002ef4 <HAL_DMA_Init+0xb8>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a5f      	ldr	r2, [pc, #380]	@ (8003008 <HAL_DMA_Init+0x1cc>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d031      	beq.n	8002ef4 <HAL_DMA_Init+0xb8>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a5d      	ldr	r2, [pc, #372]	@ (800300c <HAL_DMA_Init+0x1d0>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d02c      	beq.n	8002ef4 <HAL_DMA_Init+0xb8>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a5c      	ldr	r2, [pc, #368]	@ (8003010 <HAL_DMA_Init+0x1d4>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d027      	beq.n	8002ef4 <HAL_DMA_Init+0xb8>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a5a      	ldr	r2, [pc, #360]	@ (8003014 <HAL_DMA_Init+0x1d8>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d022      	beq.n	8002ef4 <HAL_DMA_Init+0xb8>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a59      	ldr	r2, [pc, #356]	@ (8003018 <HAL_DMA_Init+0x1dc>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d01d      	beq.n	8002ef4 <HAL_DMA_Init+0xb8>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a57      	ldr	r2, [pc, #348]	@ (800301c <HAL_DMA_Init+0x1e0>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d018      	beq.n	8002ef4 <HAL_DMA_Init+0xb8>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a56      	ldr	r2, [pc, #344]	@ (8003020 <HAL_DMA_Init+0x1e4>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d013      	beq.n	8002ef4 <HAL_DMA_Init+0xb8>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a54      	ldr	r2, [pc, #336]	@ (8003024 <HAL_DMA_Init+0x1e8>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d00e      	beq.n	8002ef4 <HAL_DMA_Init+0xb8>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a53      	ldr	r2, [pc, #332]	@ (8003028 <HAL_DMA_Init+0x1ec>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d009      	beq.n	8002ef4 <HAL_DMA_Init+0xb8>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a51      	ldr	r2, [pc, #324]	@ (800302c <HAL_DMA_Init+0x1f0>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d004      	beq.n	8002ef4 <HAL_DMA_Init+0xb8>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a50      	ldr	r2, [pc, #320]	@ (8003030 <HAL_DMA_Init+0x1f4>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d101      	bne.n	8002ef8 <HAL_DMA_Init+0xbc>
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e000      	b.n	8002efa <HAL_DMA_Init+0xbe>
 8002ef8:	2300      	movs	r3, #0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	f000 813b 	beq.w	8003176 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2202      	movs	r2, #2
 8002f04:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a37      	ldr	r2, [pc, #220]	@ (8002ff4 <HAL_DMA_Init+0x1b8>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d04a      	beq.n	8002fb0 <HAL_DMA_Init+0x174>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a36      	ldr	r2, [pc, #216]	@ (8002ff8 <HAL_DMA_Init+0x1bc>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d045      	beq.n	8002fb0 <HAL_DMA_Init+0x174>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a34      	ldr	r2, [pc, #208]	@ (8002ffc <HAL_DMA_Init+0x1c0>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d040      	beq.n	8002fb0 <HAL_DMA_Init+0x174>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a33      	ldr	r2, [pc, #204]	@ (8003000 <HAL_DMA_Init+0x1c4>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d03b      	beq.n	8002fb0 <HAL_DMA_Init+0x174>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a31      	ldr	r2, [pc, #196]	@ (8003004 <HAL_DMA_Init+0x1c8>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d036      	beq.n	8002fb0 <HAL_DMA_Init+0x174>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a30      	ldr	r2, [pc, #192]	@ (8003008 <HAL_DMA_Init+0x1cc>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d031      	beq.n	8002fb0 <HAL_DMA_Init+0x174>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a2e      	ldr	r2, [pc, #184]	@ (800300c <HAL_DMA_Init+0x1d0>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d02c      	beq.n	8002fb0 <HAL_DMA_Init+0x174>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a2d      	ldr	r2, [pc, #180]	@ (8003010 <HAL_DMA_Init+0x1d4>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d027      	beq.n	8002fb0 <HAL_DMA_Init+0x174>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a2b      	ldr	r2, [pc, #172]	@ (8003014 <HAL_DMA_Init+0x1d8>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d022      	beq.n	8002fb0 <HAL_DMA_Init+0x174>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a2a      	ldr	r2, [pc, #168]	@ (8003018 <HAL_DMA_Init+0x1dc>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d01d      	beq.n	8002fb0 <HAL_DMA_Init+0x174>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a28      	ldr	r2, [pc, #160]	@ (800301c <HAL_DMA_Init+0x1e0>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d018      	beq.n	8002fb0 <HAL_DMA_Init+0x174>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a27      	ldr	r2, [pc, #156]	@ (8003020 <HAL_DMA_Init+0x1e4>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d013      	beq.n	8002fb0 <HAL_DMA_Init+0x174>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a25      	ldr	r2, [pc, #148]	@ (8003024 <HAL_DMA_Init+0x1e8>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d00e      	beq.n	8002fb0 <HAL_DMA_Init+0x174>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a24      	ldr	r2, [pc, #144]	@ (8003028 <HAL_DMA_Init+0x1ec>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d009      	beq.n	8002fb0 <HAL_DMA_Init+0x174>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a22      	ldr	r2, [pc, #136]	@ (800302c <HAL_DMA_Init+0x1f0>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d004      	beq.n	8002fb0 <HAL_DMA_Init+0x174>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a21      	ldr	r2, [pc, #132]	@ (8003030 <HAL_DMA_Init+0x1f4>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d108      	bne.n	8002fc2 <HAL_DMA_Init+0x186>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f022 0201 	bic.w	r2, r2, #1
 8002fbe:	601a      	str	r2, [r3, #0]
 8002fc0:	e007      	b.n	8002fd2 <HAL_DMA_Init+0x196>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f022 0201 	bic.w	r2, r2, #1
 8002fd0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002fd2:	e02f      	b.n	8003034 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002fd4:	f7ff fa82 	bl	80024dc <HAL_GetTick>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	2b05      	cmp	r3, #5
 8002fe0:	d928      	bls.n	8003034 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2220      	movs	r2, #32
 8002fe6:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2203      	movs	r2, #3
 8002fec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e246      	b.n	8003482 <HAL_DMA_Init+0x646>
 8002ff4:	40020010 	.word	0x40020010
 8002ff8:	40020028 	.word	0x40020028
 8002ffc:	40020040 	.word	0x40020040
 8003000:	40020058 	.word	0x40020058
 8003004:	40020070 	.word	0x40020070
 8003008:	40020088 	.word	0x40020088
 800300c:	400200a0 	.word	0x400200a0
 8003010:	400200b8 	.word	0x400200b8
 8003014:	40020410 	.word	0x40020410
 8003018:	40020428 	.word	0x40020428
 800301c:	40020440 	.word	0x40020440
 8003020:	40020458 	.word	0x40020458
 8003024:	40020470 	.word	0x40020470
 8003028:	40020488 	.word	0x40020488
 800302c:	400204a0 	.word	0x400204a0
 8003030:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 0301 	and.w	r3, r3, #1
 800303e:	2b00      	cmp	r3, #0
 8003040:	d1c8      	bne.n	8002fd4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800304a:	697a      	ldr	r2, [r7, #20]
 800304c:	4b83      	ldr	r3, [pc, #524]	@ (800325c <HAL_DMA_Init+0x420>)
 800304e:	4013      	ands	r3, r2
 8003050:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800305a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	691b      	ldr	r3, [r3, #16]
 8003060:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003066:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	699b      	ldr	r3, [r3, #24]
 800306c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003072:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6a1b      	ldr	r3, [r3, #32]
 8003078:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800307a:	697a      	ldr	r2, [r7, #20]
 800307c:	4313      	orrs	r3, r2
 800307e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003084:	2b04      	cmp	r3, #4
 8003086:	d107      	bne.n	8003098 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003090:	4313      	orrs	r3, r2
 8003092:	697a      	ldr	r2, [r7, #20]
 8003094:	4313      	orrs	r3, r2
 8003096:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003098:	4b71      	ldr	r3, [pc, #452]	@ (8003260 <HAL_DMA_Init+0x424>)
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	4b71      	ldr	r3, [pc, #452]	@ (8003264 <HAL_DMA_Init+0x428>)
 800309e:	4013      	ands	r3, r2
 80030a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80030a4:	d328      	bcc.n	80030f8 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	2b28      	cmp	r3, #40	@ 0x28
 80030ac:	d903      	bls.n	80030b6 <HAL_DMA_Init+0x27a>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	2b2e      	cmp	r3, #46	@ 0x2e
 80030b4:	d917      	bls.n	80030e6 <HAL_DMA_Init+0x2aa>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	2b3e      	cmp	r3, #62	@ 0x3e
 80030bc:	d903      	bls.n	80030c6 <HAL_DMA_Init+0x28a>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	2b42      	cmp	r3, #66	@ 0x42
 80030c4:	d90f      	bls.n	80030e6 <HAL_DMA_Init+0x2aa>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	2b46      	cmp	r3, #70	@ 0x46
 80030cc:	d903      	bls.n	80030d6 <HAL_DMA_Init+0x29a>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	2b48      	cmp	r3, #72	@ 0x48
 80030d4:	d907      	bls.n	80030e6 <HAL_DMA_Init+0x2aa>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	2b4e      	cmp	r3, #78	@ 0x4e
 80030dc:	d905      	bls.n	80030ea <HAL_DMA_Init+0x2ae>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	2b52      	cmp	r3, #82	@ 0x52
 80030e4:	d801      	bhi.n	80030ea <HAL_DMA_Init+0x2ae>
 80030e6:	2301      	movs	r3, #1
 80030e8:	e000      	b.n	80030ec <HAL_DMA_Init+0x2b0>
 80030ea:	2300      	movs	r3, #0
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d003      	beq.n	80030f8 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80030f6:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	697a      	ldr	r2, [r7, #20]
 80030fe:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	695b      	ldr	r3, [r3, #20]
 8003106:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	f023 0307 	bic.w	r3, r3, #7
 800310e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003114:	697a      	ldr	r2, [r7, #20]
 8003116:	4313      	orrs	r3, r2
 8003118:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800311e:	2b04      	cmp	r3, #4
 8003120:	d117      	bne.n	8003152 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003126:	697a      	ldr	r2, [r7, #20]
 8003128:	4313      	orrs	r3, r2
 800312a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003130:	2b00      	cmp	r3, #0
 8003132:	d00e      	beq.n	8003152 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003134:	6878      	ldr	r0, [r7, #4]
 8003136:	f002 fb41 	bl	80057bc <DMA_CheckFifoParam>
 800313a:	4603      	mov	r3, r0
 800313c:	2b00      	cmp	r3, #0
 800313e:	d008      	beq.n	8003152 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2240      	movs	r2, #64	@ 0x40
 8003144:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2201      	movs	r2, #1
 800314a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e197      	b.n	8003482 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	697a      	ldr	r2, [r7, #20]
 8003158:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f002 fa7c 	bl	8005658 <DMA_CalcBaseAndBitshift>
 8003160:	4603      	mov	r3, r0
 8003162:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003168:	f003 031f 	and.w	r3, r3, #31
 800316c:	223f      	movs	r2, #63	@ 0x3f
 800316e:	409a      	lsls	r2, r3
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	609a      	str	r2, [r3, #8]
 8003174:	e0cd      	b.n	8003312 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a3b      	ldr	r2, [pc, #236]	@ (8003268 <HAL_DMA_Init+0x42c>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d022      	beq.n	80031c6 <HAL_DMA_Init+0x38a>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a39      	ldr	r2, [pc, #228]	@ (800326c <HAL_DMA_Init+0x430>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d01d      	beq.n	80031c6 <HAL_DMA_Init+0x38a>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a38      	ldr	r2, [pc, #224]	@ (8003270 <HAL_DMA_Init+0x434>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d018      	beq.n	80031c6 <HAL_DMA_Init+0x38a>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a36      	ldr	r2, [pc, #216]	@ (8003274 <HAL_DMA_Init+0x438>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d013      	beq.n	80031c6 <HAL_DMA_Init+0x38a>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a35      	ldr	r2, [pc, #212]	@ (8003278 <HAL_DMA_Init+0x43c>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d00e      	beq.n	80031c6 <HAL_DMA_Init+0x38a>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a33      	ldr	r2, [pc, #204]	@ (800327c <HAL_DMA_Init+0x440>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d009      	beq.n	80031c6 <HAL_DMA_Init+0x38a>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a32      	ldr	r2, [pc, #200]	@ (8003280 <HAL_DMA_Init+0x444>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d004      	beq.n	80031c6 <HAL_DMA_Init+0x38a>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a30      	ldr	r2, [pc, #192]	@ (8003284 <HAL_DMA_Init+0x448>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d101      	bne.n	80031ca <HAL_DMA_Init+0x38e>
 80031c6:	2301      	movs	r3, #1
 80031c8:	e000      	b.n	80031cc <HAL_DMA_Init+0x390>
 80031ca:	2300      	movs	r3, #0
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	f000 8097 	beq.w	8003300 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a24      	ldr	r2, [pc, #144]	@ (8003268 <HAL_DMA_Init+0x42c>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d021      	beq.n	8003220 <HAL_DMA_Init+0x3e4>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a22      	ldr	r2, [pc, #136]	@ (800326c <HAL_DMA_Init+0x430>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d01c      	beq.n	8003220 <HAL_DMA_Init+0x3e4>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a21      	ldr	r2, [pc, #132]	@ (8003270 <HAL_DMA_Init+0x434>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d017      	beq.n	8003220 <HAL_DMA_Init+0x3e4>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a1f      	ldr	r2, [pc, #124]	@ (8003274 <HAL_DMA_Init+0x438>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d012      	beq.n	8003220 <HAL_DMA_Init+0x3e4>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a1e      	ldr	r2, [pc, #120]	@ (8003278 <HAL_DMA_Init+0x43c>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d00d      	beq.n	8003220 <HAL_DMA_Init+0x3e4>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a1c      	ldr	r2, [pc, #112]	@ (800327c <HAL_DMA_Init+0x440>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d008      	beq.n	8003220 <HAL_DMA_Init+0x3e4>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a1b      	ldr	r2, [pc, #108]	@ (8003280 <HAL_DMA_Init+0x444>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d003      	beq.n	8003220 <HAL_DMA_Init+0x3e4>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a19      	ldr	r2, [pc, #100]	@ (8003284 <HAL_DMA_Init+0x448>)
 800321e:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2202      	movs	r2, #2
 8003224:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2200      	movs	r2, #0
 800322c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003238:	697a      	ldr	r2, [r7, #20]
 800323a:	4b13      	ldr	r3, [pc, #76]	@ (8003288 <HAL_DMA_Init+0x44c>)
 800323c:	4013      	ands	r3, r2
 800323e:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	2b40      	cmp	r3, #64	@ 0x40
 8003246:	d021      	beq.n	800328c <HAL_DMA_Init+0x450>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	2b80      	cmp	r3, #128	@ 0x80
 800324e:	d102      	bne.n	8003256 <HAL_DMA_Init+0x41a>
 8003250:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003254:	e01b      	b.n	800328e <HAL_DMA_Init+0x452>
 8003256:	2300      	movs	r3, #0
 8003258:	e019      	b.n	800328e <HAL_DMA_Init+0x452>
 800325a:	bf00      	nop
 800325c:	fe10803f 	.word	0xfe10803f
 8003260:	5c001000 	.word	0x5c001000
 8003264:	ffff0000 	.word	0xffff0000
 8003268:	58025408 	.word	0x58025408
 800326c:	5802541c 	.word	0x5802541c
 8003270:	58025430 	.word	0x58025430
 8003274:	58025444 	.word	0x58025444
 8003278:	58025458 	.word	0x58025458
 800327c:	5802546c 	.word	0x5802546c
 8003280:	58025480 	.word	0x58025480
 8003284:	58025494 	.word	0x58025494
 8003288:	fffe000f 	.word	0xfffe000f
 800328c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800328e:	687a      	ldr	r2, [r7, #4]
 8003290:	68d2      	ldr	r2, [r2, #12]
 8003292:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003294:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	691b      	ldr	r3, [r3, #16]
 800329a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800329c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	695b      	ldr	r3, [r3, #20]
 80032a2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80032a4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	699b      	ldr	r3, [r3, #24]
 80032aa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80032ac:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	69db      	ldr	r3, [r3, #28]
 80032b2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80032b4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6a1b      	ldr	r3, [r3, #32]
 80032ba:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80032bc:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80032be:	697a      	ldr	r2, [r7, #20]
 80032c0:	4313      	orrs	r3, r2
 80032c2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	697a      	ldr	r2, [r7, #20]
 80032ca:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	461a      	mov	r2, r3
 80032d2:	4b6e      	ldr	r3, [pc, #440]	@ (800348c <HAL_DMA_Init+0x650>)
 80032d4:	4413      	add	r3, r2
 80032d6:	4a6e      	ldr	r2, [pc, #440]	@ (8003490 <HAL_DMA_Init+0x654>)
 80032d8:	fba2 2303 	umull	r2, r3, r2, r3
 80032dc:	091b      	lsrs	r3, r3, #4
 80032de:	009a      	lsls	r2, r3, #2
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	f002 f9b7 	bl	8005658 <DMA_CalcBaseAndBitshift>
 80032ea:	4603      	mov	r3, r0
 80032ec:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032f2:	f003 031f 	and.w	r3, r3, #31
 80032f6:	2201      	movs	r2, #1
 80032f8:	409a      	lsls	r2, r3
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	605a      	str	r2, [r3, #4]
 80032fe:	e008      	b.n	8003312 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2240      	movs	r2, #64	@ 0x40
 8003304:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2203      	movs	r2, #3
 800330a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e0b7      	b.n	8003482 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a5f      	ldr	r2, [pc, #380]	@ (8003494 <HAL_DMA_Init+0x658>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d072      	beq.n	8003402 <HAL_DMA_Init+0x5c6>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a5d      	ldr	r2, [pc, #372]	@ (8003498 <HAL_DMA_Init+0x65c>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d06d      	beq.n	8003402 <HAL_DMA_Init+0x5c6>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a5c      	ldr	r2, [pc, #368]	@ (800349c <HAL_DMA_Init+0x660>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d068      	beq.n	8003402 <HAL_DMA_Init+0x5c6>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a5a      	ldr	r2, [pc, #360]	@ (80034a0 <HAL_DMA_Init+0x664>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d063      	beq.n	8003402 <HAL_DMA_Init+0x5c6>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a59      	ldr	r2, [pc, #356]	@ (80034a4 <HAL_DMA_Init+0x668>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d05e      	beq.n	8003402 <HAL_DMA_Init+0x5c6>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a57      	ldr	r2, [pc, #348]	@ (80034a8 <HAL_DMA_Init+0x66c>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d059      	beq.n	8003402 <HAL_DMA_Init+0x5c6>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a56      	ldr	r2, [pc, #344]	@ (80034ac <HAL_DMA_Init+0x670>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d054      	beq.n	8003402 <HAL_DMA_Init+0x5c6>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a54      	ldr	r2, [pc, #336]	@ (80034b0 <HAL_DMA_Init+0x674>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d04f      	beq.n	8003402 <HAL_DMA_Init+0x5c6>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a53      	ldr	r2, [pc, #332]	@ (80034b4 <HAL_DMA_Init+0x678>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d04a      	beq.n	8003402 <HAL_DMA_Init+0x5c6>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a51      	ldr	r2, [pc, #324]	@ (80034b8 <HAL_DMA_Init+0x67c>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d045      	beq.n	8003402 <HAL_DMA_Init+0x5c6>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a50      	ldr	r2, [pc, #320]	@ (80034bc <HAL_DMA_Init+0x680>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d040      	beq.n	8003402 <HAL_DMA_Init+0x5c6>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a4e      	ldr	r2, [pc, #312]	@ (80034c0 <HAL_DMA_Init+0x684>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d03b      	beq.n	8003402 <HAL_DMA_Init+0x5c6>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a4d      	ldr	r2, [pc, #308]	@ (80034c4 <HAL_DMA_Init+0x688>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d036      	beq.n	8003402 <HAL_DMA_Init+0x5c6>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a4b      	ldr	r2, [pc, #300]	@ (80034c8 <HAL_DMA_Init+0x68c>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d031      	beq.n	8003402 <HAL_DMA_Init+0x5c6>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a4a      	ldr	r2, [pc, #296]	@ (80034cc <HAL_DMA_Init+0x690>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d02c      	beq.n	8003402 <HAL_DMA_Init+0x5c6>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a48      	ldr	r2, [pc, #288]	@ (80034d0 <HAL_DMA_Init+0x694>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d027      	beq.n	8003402 <HAL_DMA_Init+0x5c6>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a47      	ldr	r2, [pc, #284]	@ (80034d4 <HAL_DMA_Init+0x698>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d022      	beq.n	8003402 <HAL_DMA_Init+0x5c6>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a45      	ldr	r2, [pc, #276]	@ (80034d8 <HAL_DMA_Init+0x69c>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d01d      	beq.n	8003402 <HAL_DMA_Init+0x5c6>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a44      	ldr	r2, [pc, #272]	@ (80034dc <HAL_DMA_Init+0x6a0>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d018      	beq.n	8003402 <HAL_DMA_Init+0x5c6>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a42      	ldr	r2, [pc, #264]	@ (80034e0 <HAL_DMA_Init+0x6a4>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d013      	beq.n	8003402 <HAL_DMA_Init+0x5c6>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a41      	ldr	r2, [pc, #260]	@ (80034e4 <HAL_DMA_Init+0x6a8>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d00e      	beq.n	8003402 <HAL_DMA_Init+0x5c6>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a3f      	ldr	r2, [pc, #252]	@ (80034e8 <HAL_DMA_Init+0x6ac>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d009      	beq.n	8003402 <HAL_DMA_Init+0x5c6>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a3e      	ldr	r2, [pc, #248]	@ (80034ec <HAL_DMA_Init+0x6b0>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d004      	beq.n	8003402 <HAL_DMA_Init+0x5c6>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a3c      	ldr	r2, [pc, #240]	@ (80034f0 <HAL_DMA_Init+0x6b4>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d101      	bne.n	8003406 <HAL_DMA_Init+0x5ca>
 8003402:	2301      	movs	r3, #1
 8003404:	e000      	b.n	8003408 <HAL_DMA_Init+0x5cc>
 8003406:	2300      	movs	r3, #0
 8003408:	2b00      	cmp	r3, #0
 800340a:	d032      	beq.n	8003472 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800340c:	6878      	ldr	r0, [r7, #4]
 800340e:	f002 fa51 	bl	80058b4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	2b80      	cmp	r3, #128	@ 0x80
 8003418:	d102      	bne.n	8003420 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2200      	movs	r2, #0
 800341e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	685a      	ldr	r2, [r3, #4]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003428:	b2d2      	uxtb	r2, r2
 800342a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003430:	687a      	ldr	r2, [r7, #4]
 8003432:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003434:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d010      	beq.n	8003460 <HAL_DMA_Init+0x624>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	2b08      	cmp	r3, #8
 8003444:	d80c      	bhi.n	8003460 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f002 face 	bl	80059e8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003450:	2200      	movs	r2, #0
 8003452:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003458:	687a      	ldr	r2, [r7, #4]
 800345a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800345c:	605a      	str	r2, [r3, #4]
 800345e:	e008      	b.n	8003472 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2200      	movs	r2, #0
 8003464:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2200      	movs	r2, #0
 800346a:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2200      	movs	r2, #0
 8003470:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2200      	movs	r2, #0
 8003476:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2201      	movs	r2, #1
 800347c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003480:	2300      	movs	r3, #0
}
 8003482:	4618      	mov	r0, r3
 8003484:	3718      	adds	r7, #24
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}
 800348a:	bf00      	nop
 800348c:	a7fdabf8 	.word	0xa7fdabf8
 8003490:	cccccccd 	.word	0xcccccccd
 8003494:	40020010 	.word	0x40020010
 8003498:	40020028 	.word	0x40020028
 800349c:	40020040 	.word	0x40020040
 80034a0:	40020058 	.word	0x40020058
 80034a4:	40020070 	.word	0x40020070
 80034a8:	40020088 	.word	0x40020088
 80034ac:	400200a0 	.word	0x400200a0
 80034b0:	400200b8 	.word	0x400200b8
 80034b4:	40020410 	.word	0x40020410
 80034b8:	40020428 	.word	0x40020428
 80034bc:	40020440 	.word	0x40020440
 80034c0:	40020458 	.word	0x40020458
 80034c4:	40020470 	.word	0x40020470
 80034c8:	40020488 	.word	0x40020488
 80034cc:	400204a0 	.word	0x400204a0
 80034d0:	400204b8 	.word	0x400204b8
 80034d4:	58025408 	.word	0x58025408
 80034d8:	5802541c 	.word	0x5802541c
 80034dc:	58025430 	.word	0x58025430
 80034e0:	58025444 	.word	0x58025444
 80034e4:	58025458 	.word	0x58025458
 80034e8:	5802546c 	.word	0x5802546c
 80034ec:	58025480 	.word	0x58025480
 80034f0:	58025494 	.word	0x58025494

080034f4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b086      	sub	sp, #24
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	60f8      	str	r0, [r7, #12]
 80034fc:	60b9      	str	r1, [r7, #8]
 80034fe:	607a      	str	r2, [r7, #4]
 8003500:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003502:	2300      	movs	r3, #0
 8003504:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d101      	bne.n	8003510 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e226      	b.n	800395e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003516:	2b01      	cmp	r3, #1
 8003518:	d101      	bne.n	800351e <HAL_DMA_Start_IT+0x2a>
 800351a:	2302      	movs	r3, #2
 800351c:	e21f      	b.n	800395e <HAL_DMA_Start_IT+0x46a>
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2201      	movs	r2, #1
 8003522:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800352c:	b2db      	uxtb	r3, r3
 800352e:	2b01      	cmp	r3, #1
 8003530:	f040 820a 	bne.w	8003948 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2202      	movs	r2, #2
 8003538:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2200      	movs	r2, #0
 8003540:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a68      	ldr	r2, [pc, #416]	@ (80036e8 <HAL_DMA_Start_IT+0x1f4>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d04a      	beq.n	80035e2 <HAL_DMA_Start_IT+0xee>
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a66      	ldr	r2, [pc, #408]	@ (80036ec <HAL_DMA_Start_IT+0x1f8>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d045      	beq.n	80035e2 <HAL_DMA_Start_IT+0xee>
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a65      	ldr	r2, [pc, #404]	@ (80036f0 <HAL_DMA_Start_IT+0x1fc>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d040      	beq.n	80035e2 <HAL_DMA_Start_IT+0xee>
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a63      	ldr	r2, [pc, #396]	@ (80036f4 <HAL_DMA_Start_IT+0x200>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d03b      	beq.n	80035e2 <HAL_DMA_Start_IT+0xee>
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a62      	ldr	r2, [pc, #392]	@ (80036f8 <HAL_DMA_Start_IT+0x204>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d036      	beq.n	80035e2 <HAL_DMA_Start_IT+0xee>
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a60      	ldr	r2, [pc, #384]	@ (80036fc <HAL_DMA_Start_IT+0x208>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d031      	beq.n	80035e2 <HAL_DMA_Start_IT+0xee>
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a5f      	ldr	r2, [pc, #380]	@ (8003700 <HAL_DMA_Start_IT+0x20c>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d02c      	beq.n	80035e2 <HAL_DMA_Start_IT+0xee>
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a5d      	ldr	r2, [pc, #372]	@ (8003704 <HAL_DMA_Start_IT+0x210>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d027      	beq.n	80035e2 <HAL_DMA_Start_IT+0xee>
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a5c      	ldr	r2, [pc, #368]	@ (8003708 <HAL_DMA_Start_IT+0x214>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d022      	beq.n	80035e2 <HAL_DMA_Start_IT+0xee>
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a5a      	ldr	r2, [pc, #360]	@ (800370c <HAL_DMA_Start_IT+0x218>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d01d      	beq.n	80035e2 <HAL_DMA_Start_IT+0xee>
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a59      	ldr	r2, [pc, #356]	@ (8003710 <HAL_DMA_Start_IT+0x21c>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d018      	beq.n	80035e2 <HAL_DMA_Start_IT+0xee>
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a57      	ldr	r2, [pc, #348]	@ (8003714 <HAL_DMA_Start_IT+0x220>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d013      	beq.n	80035e2 <HAL_DMA_Start_IT+0xee>
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a56      	ldr	r2, [pc, #344]	@ (8003718 <HAL_DMA_Start_IT+0x224>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d00e      	beq.n	80035e2 <HAL_DMA_Start_IT+0xee>
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a54      	ldr	r2, [pc, #336]	@ (800371c <HAL_DMA_Start_IT+0x228>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d009      	beq.n	80035e2 <HAL_DMA_Start_IT+0xee>
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a53      	ldr	r2, [pc, #332]	@ (8003720 <HAL_DMA_Start_IT+0x22c>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d004      	beq.n	80035e2 <HAL_DMA_Start_IT+0xee>
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a51      	ldr	r2, [pc, #324]	@ (8003724 <HAL_DMA_Start_IT+0x230>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d108      	bne.n	80035f4 <HAL_DMA_Start_IT+0x100>
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f022 0201 	bic.w	r2, r2, #1
 80035f0:	601a      	str	r2, [r3, #0]
 80035f2:	e007      	b.n	8003604 <HAL_DMA_Start_IT+0x110>
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f022 0201 	bic.w	r2, r2, #1
 8003602:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	687a      	ldr	r2, [r7, #4]
 8003608:	68b9      	ldr	r1, [r7, #8]
 800360a:	68f8      	ldr	r0, [r7, #12]
 800360c:	f001 fe78 	bl	8005300 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a34      	ldr	r2, [pc, #208]	@ (80036e8 <HAL_DMA_Start_IT+0x1f4>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d04a      	beq.n	80036b0 <HAL_DMA_Start_IT+0x1bc>
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a33      	ldr	r2, [pc, #204]	@ (80036ec <HAL_DMA_Start_IT+0x1f8>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d045      	beq.n	80036b0 <HAL_DMA_Start_IT+0x1bc>
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a31      	ldr	r2, [pc, #196]	@ (80036f0 <HAL_DMA_Start_IT+0x1fc>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d040      	beq.n	80036b0 <HAL_DMA_Start_IT+0x1bc>
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a30      	ldr	r2, [pc, #192]	@ (80036f4 <HAL_DMA_Start_IT+0x200>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d03b      	beq.n	80036b0 <HAL_DMA_Start_IT+0x1bc>
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a2e      	ldr	r2, [pc, #184]	@ (80036f8 <HAL_DMA_Start_IT+0x204>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d036      	beq.n	80036b0 <HAL_DMA_Start_IT+0x1bc>
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a2d      	ldr	r2, [pc, #180]	@ (80036fc <HAL_DMA_Start_IT+0x208>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d031      	beq.n	80036b0 <HAL_DMA_Start_IT+0x1bc>
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a2b      	ldr	r2, [pc, #172]	@ (8003700 <HAL_DMA_Start_IT+0x20c>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d02c      	beq.n	80036b0 <HAL_DMA_Start_IT+0x1bc>
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a2a      	ldr	r2, [pc, #168]	@ (8003704 <HAL_DMA_Start_IT+0x210>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d027      	beq.n	80036b0 <HAL_DMA_Start_IT+0x1bc>
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a28      	ldr	r2, [pc, #160]	@ (8003708 <HAL_DMA_Start_IT+0x214>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d022      	beq.n	80036b0 <HAL_DMA_Start_IT+0x1bc>
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a27      	ldr	r2, [pc, #156]	@ (800370c <HAL_DMA_Start_IT+0x218>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d01d      	beq.n	80036b0 <HAL_DMA_Start_IT+0x1bc>
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a25      	ldr	r2, [pc, #148]	@ (8003710 <HAL_DMA_Start_IT+0x21c>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d018      	beq.n	80036b0 <HAL_DMA_Start_IT+0x1bc>
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a24      	ldr	r2, [pc, #144]	@ (8003714 <HAL_DMA_Start_IT+0x220>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d013      	beq.n	80036b0 <HAL_DMA_Start_IT+0x1bc>
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a22      	ldr	r2, [pc, #136]	@ (8003718 <HAL_DMA_Start_IT+0x224>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d00e      	beq.n	80036b0 <HAL_DMA_Start_IT+0x1bc>
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a21      	ldr	r2, [pc, #132]	@ (800371c <HAL_DMA_Start_IT+0x228>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d009      	beq.n	80036b0 <HAL_DMA_Start_IT+0x1bc>
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a1f      	ldr	r2, [pc, #124]	@ (8003720 <HAL_DMA_Start_IT+0x22c>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d004      	beq.n	80036b0 <HAL_DMA_Start_IT+0x1bc>
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a1e      	ldr	r2, [pc, #120]	@ (8003724 <HAL_DMA_Start_IT+0x230>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d101      	bne.n	80036b4 <HAL_DMA_Start_IT+0x1c0>
 80036b0:	2301      	movs	r3, #1
 80036b2:	e000      	b.n	80036b6 <HAL_DMA_Start_IT+0x1c2>
 80036b4:	2300      	movs	r3, #0
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d036      	beq.n	8003728 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f023 021e 	bic.w	r2, r3, #30
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f042 0216 	orr.w	r2, r2, #22
 80036cc:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d03e      	beq.n	8003754 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f042 0208 	orr.w	r2, r2, #8
 80036e4:	601a      	str	r2, [r3, #0]
 80036e6:	e035      	b.n	8003754 <HAL_DMA_Start_IT+0x260>
 80036e8:	40020010 	.word	0x40020010
 80036ec:	40020028 	.word	0x40020028
 80036f0:	40020040 	.word	0x40020040
 80036f4:	40020058 	.word	0x40020058
 80036f8:	40020070 	.word	0x40020070
 80036fc:	40020088 	.word	0x40020088
 8003700:	400200a0 	.word	0x400200a0
 8003704:	400200b8 	.word	0x400200b8
 8003708:	40020410 	.word	0x40020410
 800370c:	40020428 	.word	0x40020428
 8003710:	40020440 	.word	0x40020440
 8003714:	40020458 	.word	0x40020458
 8003718:	40020470 	.word	0x40020470
 800371c:	40020488 	.word	0x40020488
 8003720:	400204a0 	.word	0x400204a0
 8003724:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f023 020e 	bic.w	r2, r3, #14
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f042 020a 	orr.w	r2, r2, #10
 800373a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003740:	2b00      	cmp	r3, #0
 8003742:	d007      	beq.n	8003754 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f042 0204 	orr.w	r2, r2, #4
 8003752:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a83      	ldr	r2, [pc, #524]	@ (8003968 <HAL_DMA_Start_IT+0x474>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d072      	beq.n	8003844 <HAL_DMA_Start_IT+0x350>
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a82      	ldr	r2, [pc, #520]	@ (800396c <HAL_DMA_Start_IT+0x478>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d06d      	beq.n	8003844 <HAL_DMA_Start_IT+0x350>
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a80      	ldr	r2, [pc, #512]	@ (8003970 <HAL_DMA_Start_IT+0x47c>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d068      	beq.n	8003844 <HAL_DMA_Start_IT+0x350>
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a7f      	ldr	r2, [pc, #508]	@ (8003974 <HAL_DMA_Start_IT+0x480>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d063      	beq.n	8003844 <HAL_DMA_Start_IT+0x350>
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a7d      	ldr	r2, [pc, #500]	@ (8003978 <HAL_DMA_Start_IT+0x484>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d05e      	beq.n	8003844 <HAL_DMA_Start_IT+0x350>
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a7c      	ldr	r2, [pc, #496]	@ (800397c <HAL_DMA_Start_IT+0x488>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d059      	beq.n	8003844 <HAL_DMA_Start_IT+0x350>
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a7a      	ldr	r2, [pc, #488]	@ (8003980 <HAL_DMA_Start_IT+0x48c>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d054      	beq.n	8003844 <HAL_DMA_Start_IT+0x350>
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a79      	ldr	r2, [pc, #484]	@ (8003984 <HAL_DMA_Start_IT+0x490>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d04f      	beq.n	8003844 <HAL_DMA_Start_IT+0x350>
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a77      	ldr	r2, [pc, #476]	@ (8003988 <HAL_DMA_Start_IT+0x494>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d04a      	beq.n	8003844 <HAL_DMA_Start_IT+0x350>
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a76      	ldr	r2, [pc, #472]	@ (800398c <HAL_DMA_Start_IT+0x498>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d045      	beq.n	8003844 <HAL_DMA_Start_IT+0x350>
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a74      	ldr	r2, [pc, #464]	@ (8003990 <HAL_DMA_Start_IT+0x49c>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d040      	beq.n	8003844 <HAL_DMA_Start_IT+0x350>
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a73      	ldr	r2, [pc, #460]	@ (8003994 <HAL_DMA_Start_IT+0x4a0>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d03b      	beq.n	8003844 <HAL_DMA_Start_IT+0x350>
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a71      	ldr	r2, [pc, #452]	@ (8003998 <HAL_DMA_Start_IT+0x4a4>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d036      	beq.n	8003844 <HAL_DMA_Start_IT+0x350>
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a70      	ldr	r2, [pc, #448]	@ (800399c <HAL_DMA_Start_IT+0x4a8>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d031      	beq.n	8003844 <HAL_DMA_Start_IT+0x350>
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a6e      	ldr	r2, [pc, #440]	@ (80039a0 <HAL_DMA_Start_IT+0x4ac>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d02c      	beq.n	8003844 <HAL_DMA_Start_IT+0x350>
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a6d      	ldr	r2, [pc, #436]	@ (80039a4 <HAL_DMA_Start_IT+0x4b0>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d027      	beq.n	8003844 <HAL_DMA_Start_IT+0x350>
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a6b      	ldr	r2, [pc, #428]	@ (80039a8 <HAL_DMA_Start_IT+0x4b4>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d022      	beq.n	8003844 <HAL_DMA_Start_IT+0x350>
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a6a      	ldr	r2, [pc, #424]	@ (80039ac <HAL_DMA_Start_IT+0x4b8>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d01d      	beq.n	8003844 <HAL_DMA_Start_IT+0x350>
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a68      	ldr	r2, [pc, #416]	@ (80039b0 <HAL_DMA_Start_IT+0x4bc>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d018      	beq.n	8003844 <HAL_DMA_Start_IT+0x350>
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a67      	ldr	r2, [pc, #412]	@ (80039b4 <HAL_DMA_Start_IT+0x4c0>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d013      	beq.n	8003844 <HAL_DMA_Start_IT+0x350>
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a65      	ldr	r2, [pc, #404]	@ (80039b8 <HAL_DMA_Start_IT+0x4c4>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d00e      	beq.n	8003844 <HAL_DMA_Start_IT+0x350>
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a64      	ldr	r2, [pc, #400]	@ (80039bc <HAL_DMA_Start_IT+0x4c8>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d009      	beq.n	8003844 <HAL_DMA_Start_IT+0x350>
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a62      	ldr	r2, [pc, #392]	@ (80039c0 <HAL_DMA_Start_IT+0x4cc>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d004      	beq.n	8003844 <HAL_DMA_Start_IT+0x350>
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a61      	ldr	r2, [pc, #388]	@ (80039c4 <HAL_DMA_Start_IT+0x4d0>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d101      	bne.n	8003848 <HAL_DMA_Start_IT+0x354>
 8003844:	2301      	movs	r3, #1
 8003846:	e000      	b.n	800384a <HAL_DMA_Start_IT+0x356>
 8003848:	2300      	movs	r3, #0
 800384a:	2b00      	cmp	r3, #0
 800384c:	d01a      	beq.n	8003884 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003858:	2b00      	cmp	r3, #0
 800385a:	d007      	beq.n	800386c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003866:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800386a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003870:	2b00      	cmp	r3, #0
 8003872:	d007      	beq.n	8003884 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800387e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003882:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a37      	ldr	r2, [pc, #220]	@ (8003968 <HAL_DMA_Start_IT+0x474>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d04a      	beq.n	8003924 <HAL_DMA_Start_IT+0x430>
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a36      	ldr	r2, [pc, #216]	@ (800396c <HAL_DMA_Start_IT+0x478>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d045      	beq.n	8003924 <HAL_DMA_Start_IT+0x430>
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a34      	ldr	r2, [pc, #208]	@ (8003970 <HAL_DMA_Start_IT+0x47c>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d040      	beq.n	8003924 <HAL_DMA_Start_IT+0x430>
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a33      	ldr	r2, [pc, #204]	@ (8003974 <HAL_DMA_Start_IT+0x480>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d03b      	beq.n	8003924 <HAL_DMA_Start_IT+0x430>
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a31      	ldr	r2, [pc, #196]	@ (8003978 <HAL_DMA_Start_IT+0x484>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d036      	beq.n	8003924 <HAL_DMA_Start_IT+0x430>
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a30      	ldr	r2, [pc, #192]	@ (800397c <HAL_DMA_Start_IT+0x488>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d031      	beq.n	8003924 <HAL_DMA_Start_IT+0x430>
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a2e      	ldr	r2, [pc, #184]	@ (8003980 <HAL_DMA_Start_IT+0x48c>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d02c      	beq.n	8003924 <HAL_DMA_Start_IT+0x430>
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a2d      	ldr	r2, [pc, #180]	@ (8003984 <HAL_DMA_Start_IT+0x490>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d027      	beq.n	8003924 <HAL_DMA_Start_IT+0x430>
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a2b      	ldr	r2, [pc, #172]	@ (8003988 <HAL_DMA_Start_IT+0x494>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d022      	beq.n	8003924 <HAL_DMA_Start_IT+0x430>
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a2a      	ldr	r2, [pc, #168]	@ (800398c <HAL_DMA_Start_IT+0x498>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d01d      	beq.n	8003924 <HAL_DMA_Start_IT+0x430>
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a28      	ldr	r2, [pc, #160]	@ (8003990 <HAL_DMA_Start_IT+0x49c>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d018      	beq.n	8003924 <HAL_DMA_Start_IT+0x430>
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a27      	ldr	r2, [pc, #156]	@ (8003994 <HAL_DMA_Start_IT+0x4a0>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d013      	beq.n	8003924 <HAL_DMA_Start_IT+0x430>
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a25      	ldr	r2, [pc, #148]	@ (8003998 <HAL_DMA_Start_IT+0x4a4>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d00e      	beq.n	8003924 <HAL_DMA_Start_IT+0x430>
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a24      	ldr	r2, [pc, #144]	@ (800399c <HAL_DMA_Start_IT+0x4a8>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d009      	beq.n	8003924 <HAL_DMA_Start_IT+0x430>
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a22      	ldr	r2, [pc, #136]	@ (80039a0 <HAL_DMA_Start_IT+0x4ac>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d004      	beq.n	8003924 <HAL_DMA_Start_IT+0x430>
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a21      	ldr	r2, [pc, #132]	@ (80039a4 <HAL_DMA_Start_IT+0x4b0>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d108      	bne.n	8003936 <HAL_DMA_Start_IT+0x442>
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f042 0201 	orr.w	r2, r2, #1
 8003932:	601a      	str	r2, [r3, #0]
 8003934:	e012      	b.n	800395c <HAL_DMA_Start_IT+0x468>
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f042 0201 	orr.w	r2, r2, #1
 8003944:	601a      	str	r2, [r3, #0]
 8003946:	e009      	b.n	800395c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800394e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2200      	movs	r2, #0
 8003954:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800395c:	7dfb      	ldrb	r3, [r7, #23]
}
 800395e:	4618      	mov	r0, r3
 8003960:	3718      	adds	r7, #24
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}
 8003966:	bf00      	nop
 8003968:	40020010 	.word	0x40020010
 800396c:	40020028 	.word	0x40020028
 8003970:	40020040 	.word	0x40020040
 8003974:	40020058 	.word	0x40020058
 8003978:	40020070 	.word	0x40020070
 800397c:	40020088 	.word	0x40020088
 8003980:	400200a0 	.word	0x400200a0
 8003984:	400200b8 	.word	0x400200b8
 8003988:	40020410 	.word	0x40020410
 800398c:	40020428 	.word	0x40020428
 8003990:	40020440 	.word	0x40020440
 8003994:	40020458 	.word	0x40020458
 8003998:	40020470 	.word	0x40020470
 800399c:	40020488 	.word	0x40020488
 80039a0:	400204a0 	.word	0x400204a0
 80039a4:	400204b8 	.word	0x400204b8
 80039a8:	58025408 	.word	0x58025408
 80039ac:	5802541c 	.word	0x5802541c
 80039b0:	58025430 	.word	0x58025430
 80039b4:	58025444 	.word	0x58025444
 80039b8:	58025458 	.word	0x58025458
 80039bc:	5802546c 	.word	0x5802546c
 80039c0:	58025480 	.word	0x58025480
 80039c4:	58025494 	.word	0x58025494

080039c8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b086      	sub	sp, #24
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80039d0:	f7fe fd84 	bl	80024dc <HAL_GetTick>
 80039d4:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d101      	bne.n	80039e0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	e2dc      	b.n	8003f9a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80039e6:	b2db      	uxtb	r3, r3
 80039e8:	2b02      	cmp	r3, #2
 80039ea:	d008      	beq.n	80039fe <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2280      	movs	r2, #128	@ 0x80
 80039f0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2200      	movs	r2, #0
 80039f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	e2cd      	b.n	8003f9a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a76      	ldr	r2, [pc, #472]	@ (8003bdc <HAL_DMA_Abort+0x214>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d04a      	beq.n	8003a9e <HAL_DMA_Abort+0xd6>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a74      	ldr	r2, [pc, #464]	@ (8003be0 <HAL_DMA_Abort+0x218>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d045      	beq.n	8003a9e <HAL_DMA_Abort+0xd6>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a73      	ldr	r2, [pc, #460]	@ (8003be4 <HAL_DMA_Abort+0x21c>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d040      	beq.n	8003a9e <HAL_DMA_Abort+0xd6>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a71      	ldr	r2, [pc, #452]	@ (8003be8 <HAL_DMA_Abort+0x220>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d03b      	beq.n	8003a9e <HAL_DMA_Abort+0xd6>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a70      	ldr	r2, [pc, #448]	@ (8003bec <HAL_DMA_Abort+0x224>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d036      	beq.n	8003a9e <HAL_DMA_Abort+0xd6>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a6e      	ldr	r2, [pc, #440]	@ (8003bf0 <HAL_DMA_Abort+0x228>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d031      	beq.n	8003a9e <HAL_DMA_Abort+0xd6>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a6d      	ldr	r2, [pc, #436]	@ (8003bf4 <HAL_DMA_Abort+0x22c>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d02c      	beq.n	8003a9e <HAL_DMA_Abort+0xd6>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a6b      	ldr	r2, [pc, #428]	@ (8003bf8 <HAL_DMA_Abort+0x230>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d027      	beq.n	8003a9e <HAL_DMA_Abort+0xd6>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a6a      	ldr	r2, [pc, #424]	@ (8003bfc <HAL_DMA_Abort+0x234>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d022      	beq.n	8003a9e <HAL_DMA_Abort+0xd6>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a68      	ldr	r2, [pc, #416]	@ (8003c00 <HAL_DMA_Abort+0x238>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d01d      	beq.n	8003a9e <HAL_DMA_Abort+0xd6>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a67      	ldr	r2, [pc, #412]	@ (8003c04 <HAL_DMA_Abort+0x23c>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d018      	beq.n	8003a9e <HAL_DMA_Abort+0xd6>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a65      	ldr	r2, [pc, #404]	@ (8003c08 <HAL_DMA_Abort+0x240>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d013      	beq.n	8003a9e <HAL_DMA_Abort+0xd6>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a64      	ldr	r2, [pc, #400]	@ (8003c0c <HAL_DMA_Abort+0x244>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d00e      	beq.n	8003a9e <HAL_DMA_Abort+0xd6>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a62      	ldr	r2, [pc, #392]	@ (8003c10 <HAL_DMA_Abort+0x248>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d009      	beq.n	8003a9e <HAL_DMA_Abort+0xd6>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a61      	ldr	r2, [pc, #388]	@ (8003c14 <HAL_DMA_Abort+0x24c>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d004      	beq.n	8003a9e <HAL_DMA_Abort+0xd6>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a5f      	ldr	r2, [pc, #380]	@ (8003c18 <HAL_DMA_Abort+0x250>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d101      	bne.n	8003aa2 <HAL_DMA_Abort+0xda>
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e000      	b.n	8003aa4 <HAL_DMA_Abort+0xdc>
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d013      	beq.n	8003ad0 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f022 021e 	bic.w	r2, r2, #30
 8003ab6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	695a      	ldr	r2, [r3, #20]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003ac6:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	617b      	str	r3, [r7, #20]
 8003ace:	e00a      	b.n	8003ae6 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f022 020e 	bic.w	r2, r2, #14
 8003ade:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a3c      	ldr	r2, [pc, #240]	@ (8003bdc <HAL_DMA_Abort+0x214>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d072      	beq.n	8003bd6 <HAL_DMA_Abort+0x20e>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a3a      	ldr	r2, [pc, #232]	@ (8003be0 <HAL_DMA_Abort+0x218>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d06d      	beq.n	8003bd6 <HAL_DMA_Abort+0x20e>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a39      	ldr	r2, [pc, #228]	@ (8003be4 <HAL_DMA_Abort+0x21c>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d068      	beq.n	8003bd6 <HAL_DMA_Abort+0x20e>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a37      	ldr	r2, [pc, #220]	@ (8003be8 <HAL_DMA_Abort+0x220>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d063      	beq.n	8003bd6 <HAL_DMA_Abort+0x20e>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a36      	ldr	r2, [pc, #216]	@ (8003bec <HAL_DMA_Abort+0x224>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d05e      	beq.n	8003bd6 <HAL_DMA_Abort+0x20e>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a34      	ldr	r2, [pc, #208]	@ (8003bf0 <HAL_DMA_Abort+0x228>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d059      	beq.n	8003bd6 <HAL_DMA_Abort+0x20e>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a33      	ldr	r2, [pc, #204]	@ (8003bf4 <HAL_DMA_Abort+0x22c>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d054      	beq.n	8003bd6 <HAL_DMA_Abort+0x20e>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a31      	ldr	r2, [pc, #196]	@ (8003bf8 <HAL_DMA_Abort+0x230>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d04f      	beq.n	8003bd6 <HAL_DMA_Abort+0x20e>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a30      	ldr	r2, [pc, #192]	@ (8003bfc <HAL_DMA_Abort+0x234>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d04a      	beq.n	8003bd6 <HAL_DMA_Abort+0x20e>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a2e      	ldr	r2, [pc, #184]	@ (8003c00 <HAL_DMA_Abort+0x238>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d045      	beq.n	8003bd6 <HAL_DMA_Abort+0x20e>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a2d      	ldr	r2, [pc, #180]	@ (8003c04 <HAL_DMA_Abort+0x23c>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d040      	beq.n	8003bd6 <HAL_DMA_Abort+0x20e>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a2b      	ldr	r2, [pc, #172]	@ (8003c08 <HAL_DMA_Abort+0x240>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d03b      	beq.n	8003bd6 <HAL_DMA_Abort+0x20e>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a2a      	ldr	r2, [pc, #168]	@ (8003c0c <HAL_DMA_Abort+0x244>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d036      	beq.n	8003bd6 <HAL_DMA_Abort+0x20e>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a28      	ldr	r2, [pc, #160]	@ (8003c10 <HAL_DMA_Abort+0x248>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d031      	beq.n	8003bd6 <HAL_DMA_Abort+0x20e>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a27      	ldr	r2, [pc, #156]	@ (8003c14 <HAL_DMA_Abort+0x24c>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d02c      	beq.n	8003bd6 <HAL_DMA_Abort+0x20e>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a25      	ldr	r2, [pc, #148]	@ (8003c18 <HAL_DMA_Abort+0x250>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d027      	beq.n	8003bd6 <HAL_DMA_Abort+0x20e>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a24      	ldr	r2, [pc, #144]	@ (8003c1c <HAL_DMA_Abort+0x254>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d022      	beq.n	8003bd6 <HAL_DMA_Abort+0x20e>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a22      	ldr	r2, [pc, #136]	@ (8003c20 <HAL_DMA_Abort+0x258>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d01d      	beq.n	8003bd6 <HAL_DMA_Abort+0x20e>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a21      	ldr	r2, [pc, #132]	@ (8003c24 <HAL_DMA_Abort+0x25c>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d018      	beq.n	8003bd6 <HAL_DMA_Abort+0x20e>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a1f      	ldr	r2, [pc, #124]	@ (8003c28 <HAL_DMA_Abort+0x260>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d013      	beq.n	8003bd6 <HAL_DMA_Abort+0x20e>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a1e      	ldr	r2, [pc, #120]	@ (8003c2c <HAL_DMA_Abort+0x264>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d00e      	beq.n	8003bd6 <HAL_DMA_Abort+0x20e>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a1c      	ldr	r2, [pc, #112]	@ (8003c30 <HAL_DMA_Abort+0x268>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d009      	beq.n	8003bd6 <HAL_DMA_Abort+0x20e>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a1b      	ldr	r2, [pc, #108]	@ (8003c34 <HAL_DMA_Abort+0x26c>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d004      	beq.n	8003bd6 <HAL_DMA_Abort+0x20e>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a19      	ldr	r2, [pc, #100]	@ (8003c38 <HAL_DMA_Abort+0x270>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d132      	bne.n	8003c3c <HAL_DMA_Abort+0x274>
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e031      	b.n	8003c3e <HAL_DMA_Abort+0x276>
 8003bda:	bf00      	nop
 8003bdc:	40020010 	.word	0x40020010
 8003be0:	40020028 	.word	0x40020028
 8003be4:	40020040 	.word	0x40020040
 8003be8:	40020058 	.word	0x40020058
 8003bec:	40020070 	.word	0x40020070
 8003bf0:	40020088 	.word	0x40020088
 8003bf4:	400200a0 	.word	0x400200a0
 8003bf8:	400200b8 	.word	0x400200b8
 8003bfc:	40020410 	.word	0x40020410
 8003c00:	40020428 	.word	0x40020428
 8003c04:	40020440 	.word	0x40020440
 8003c08:	40020458 	.word	0x40020458
 8003c0c:	40020470 	.word	0x40020470
 8003c10:	40020488 	.word	0x40020488
 8003c14:	400204a0 	.word	0x400204a0
 8003c18:	400204b8 	.word	0x400204b8
 8003c1c:	58025408 	.word	0x58025408
 8003c20:	5802541c 	.word	0x5802541c
 8003c24:	58025430 	.word	0x58025430
 8003c28:	58025444 	.word	0x58025444
 8003c2c:	58025458 	.word	0x58025458
 8003c30:	5802546c 	.word	0x5802546c
 8003c34:	58025480 	.word	0x58025480
 8003c38:	58025494 	.word	0x58025494
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d007      	beq.n	8003c52 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c4c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003c50:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a6d      	ldr	r2, [pc, #436]	@ (8003e0c <HAL_DMA_Abort+0x444>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d04a      	beq.n	8003cf2 <HAL_DMA_Abort+0x32a>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a6b      	ldr	r2, [pc, #428]	@ (8003e10 <HAL_DMA_Abort+0x448>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d045      	beq.n	8003cf2 <HAL_DMA_Abort+0x32a>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a6a      	ldr	r2, [pc, #424]	@ (8003e14 <HAL_DMA_Abort+0x44c>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d040      	beq.n	8003cf2 <HAL_DMA_Abort+0x32a>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a68      	ldr	r2, [pc, #416]	@ (8003e18 <HAL_DMA_Abort+0x450>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d03b      	beq.n	8003cf2 <HAL_DMA_Abort+0x32a>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a67      	ldr	r2, [pc, #412]	@ (8003e1c <HAL_DMA_Abort+0x454>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d036      	beq.n	8003cf2 <HAL_DMA_Abort+0x32a>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a65      	ldr	r2, [pc, #404]	@ (8003e20 <HAL_DMA_Abort+0x458>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d031      	beq.n	8003cf2 <HAL_DMA_Abort+0x32a>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a64      	ldr	r2, [pc, #400]	@ (8003e24 <HAL_DMA_Abort+0x45c>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d02c      	beq.n	8003cf2 <HAL_DMA_Abort+0x32a>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a62      	ldr	r2, [pc, #392]	@ (8003e28 <HAL_DMA_Abort+0x460>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d027      	beq.n	8003cf2 <HAL_DMA_Abort+0x32a>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a61      	ldr	r2, [pc, #388]	@ (8003e2c <HAL_DMA_Abort+0x464>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d022      	beq.n	8003cf2 <HAL_DMA_Abort+0x32a>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a5f      	ldr	r2, [pc, #380]	@ (8003e30 <HAL_DMA_Abort+0x468>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d01d      	beq.n	8003cf2 <HAL_DMA_Abort+0x32a>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a5e      	ldr	r2, [pc, #376]	@ (8003e34 <HAL_DMA_Abort+0x46c>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d018      	beq.n	8003cf2 <HAL_DMA_Abort+0x32a>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a5c      	ldr	r2, [pc, #368]	@ (8003e38 <HAL_DMA_Abort+0x470>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d013      	beq.n	8003cf2 <HAL_DMA_Abort+0x32a>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a5b      	ldr	r2, [pc, #364]	@ (8003e3c <HAL_DMA_Abort+0x474>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d00e      	beq.n	8003cf2 <HAL_DMA_Abort+0x32a>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a59      	ldr	r2, [pc, #356]	@ (8003e40 <HAL_DMA_Abort+0x478>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d009      	beq.n	8003cf2 <HAL_DMA_Abort+0x32a>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a58      	ldr	r2, [pc, #352]	@ (8003e44 <HAL_DMA_Abort+0x47c>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d004      	beq.n	8003cf2 <HAL_DMA_Abort+0x32a>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a56      	ldr	r2, [pc, #344]	@ (8003e48 <HAL_DMA_Abort+0x480>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d108      	bne.n	8003d04 <HAL_DMA_Abort+0x33c>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f022 0201 	bic.w	r2, r2, #1
 8003d00:	601a      	str	r2, [r3, #0]
 8003d02:	e007      	b.n	8003d14 <HAL_DMA_Abort+0x34c>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f022 0201 	bic.w	r2, r2, #1
 8003d12:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003d14:	e013      	b.n	8003d3e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003d16:	f7fe fbe1 	bl	80024dc <HAL_GetTick>
 8003d1a:	4602      	mov	r2, r0
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	1ad3      	subs	r3, r2, r3
 8003d20:	2b05      	cmp	r3, #5
 8003d22:	d90c      	bls.n	8003d3e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2220      	movs	r2, #32
 8003d28:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2203      	movs	r2, #3
 8003d2e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2200      	movs	r2, #0
 8003d36:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e12d      	b.n	8003f9a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f003 0301 	and.w	r3, r3, #1
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d1e5      	bne.n	8003d16 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a2f      	ldr	r2, [pc, #188]	@ (8003e0c <HAL_DMA_Abort+0x444>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d04a      	beq.n	8003dea <HAL_DMA_Abort+0x422>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a2d      	ldr	r2, [pc, #180]	@ (8003e10 <HAL_DMA_Abort+0x448>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d045      	beq.n	8003dea <HAL_DMA_Abort+0x422>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a2c      	ldr	r2, [pc, #176]	@ (8003e14 <HAL_DMA_Abort+0x44c>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d040      	beq.n	8003dea <HAL_DMA_Abort+0x422>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a2a      	ldr	r2, [pc, #168]	@ (8003e18 <HAL_DMA_Abort+0x450>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d03b      	beq.n	8003dea <HAL_DMA_Abort+0x422>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a29      	ldr	r2, [pc, #164]	@ (8003e1c <HAL_DMA_Abort+0x454>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d036      	beq.n	8003dea <HAL_DMA_Abort+0x422>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a27      	ldr	r2, [pc, #156]	@ (8003e20 <HAL_DMA_Abort+0x458>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d031      	beq.n	8003dea <HAL_DMA_Abort+0x422>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a26      	ldr	r2, [pc, #152]	@ (8003e24 <HAL_DMA_Abort+0x45c>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d02c      	beq.n	8003dea <HAL_DMA_Abort+0x422>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a24      	ldr	r2, [pc, #144]	@ (8003e28 <HAL_DMA_Abort+0x460>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d027      	beq.n	8003dea <HAL_DMA_Abort+0x422>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a23      	ldr	r2, [pc, #140]	@ (8003e2c <HAL_DMA_Abort+0x464>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d022      	beq.n	8003dea <HAL_DMA_Abort+0x422>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a21      	ldr	r2, [pc, #132]	@ (8003e30 <HAL_DMA_Abort+0x468>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d01d      	beq.n	8003dea <HAL_DMA_Abort+0x422>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a20      	ldr	r2, [pc, #128]	@ (8003e34 <HAL_DMA_Abort+0x46c>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d018      	beq.n	8003dea <HAL_DMA_Abort+0x422>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a1e      	ldr	r2, [pc, #120]	@ (8003e38 <HAL_DMA_Abort+0x470>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d013      	beq.n	8003dea <HAL_DMA_Abort+0x422>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a1d      	ldr	r2, [pc, #116]	@ (8003e3c <HAL_DMA_Abort+0x474>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d00e      	beq.n	8003dea <HAL_DMA_Abort+0x422>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a1b      	ldr	r2, [pc, #108]	@ (8003e40 <HAL_DMA_Abort+0x478>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d009      	beq.n	8003dea <HAL_DMA_Abort+0x422>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a1a      	ldr	r2, [pc, #104]	@ (8003e44 <HAL_DMA_Abort+0x47c>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d004      	beq.n	8003dea <HAL_DMA_Abort+0x422>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a18      	ldr	r2, [pc, #96]	@ (8003e48 <HAL_DMA_Abort+0x480>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d101      	bne.n	8003dee <HAL_DMA_Abort+0x426>
 8003dea:	2301      	movs	r3, #1
 8003dec:	e000      	b.n	8003df0 <HAL_DMA_Abort+0x428>
 8003dee:	2300      	movs	r3, #0
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d02b      	beq.n	8003e4c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003df8:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dfe:	f003 031f 	and.w	r3, r3, #31
 8003e02:	223f      	movs	r2, #63	@ 0x3f
 8003e04:	409a      	lsls	r2, r3
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	609a      	str	r2, [r3, #8]
 8003e0a:	e02a      	b.n	8003e62 <HAL_DMA_Abort+0x49a>
 8003e0c:	40020010 	.word	0x40020010
 8003e10:	40020028 	.word	0x40020028
 8003e14:	40020040 	.word	0x40020040
 8003e18:	40020058 	.word	0x40020058
 8003e1c:	40020070 	.word	0x40020070
 8003e20:	40020088 	.word	0x40020088
 8003e24:	400200a0 	.word	0x400200a0
 8003e28:	400200b8 	.word	0x400200b8
 8003e2c:	40020410 	.word	0x40020410
 8003e30:	40020428 	.word	0x40020428
 8003e34:	40020440 	.word	0x40020440
 8003e38:	40020458 	.word	0x40020458
 8003e3c:	40020470 	.word	0x40020470
 8003e40:	40020488 	.word	0x40020488
 8003e44:	400204a0 	.word	0x400204a0
 8003e48:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e50:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e56:	f003 031f 	and.w	r3, r3, #31
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	409a      	lsls	r2, r3
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a4f      	ldr	r2, [pc, #316]	@ (8003fa4 <HAL_DMA_Abort+0x5dc>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d072      	beq.n	8003f52 <HAL_DMA_Abort+0x58a>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a4d      	ldr	r2, [pc, #308]	@ (8003fa8 <HAL_DMA_Abort+0x5e0>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d06d      	beq.n	8003f52 <HAL_DMA_Abort+0x58a>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a4c      	ldr	r2, [pc, #304]	@ (8003fac <HAL_DMA_Abort+0x5e4>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d068      	beq.n	8003f52 <HAL_DMA_Abort+0x58a>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a4a      	ldr	r2, [pc, #296]	@ (8003fb0 <HAL_DMA_Abort+0x5e8>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d063      	beq.n	8003f52 <HAL_DMA_Abort+0x58a>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a49      	ldr	r2, [pc, #292]	@ (8003fb4 <HAL_DMA_Abort+0x5ec>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d05e      	beq.n	8003f52 <HAL_DMA_Abort+0x58a>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a47      	ldr	r2, [pc, #284]	@ (8003fb8 <HAL_DMA_Abort+0x5f0>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d059      	beq.n	8003f52 <HAL_DMA_Abort+0x58a>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a46      	ldr	r2, [pc, #280]	@ (8003fbc <HAL_DMA_Abort+0x5f4>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d054      	beq.n	8003f52 <HAL_DMA_Abort+0x58a>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a44      	ldr	r2, [pc, #272]	@ (8003fc0 <HAL_DMA_Abort+0x5f8>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d04f      	beq.n	8003f52 <HAL_DMA_Abort+0x58a>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a43      	ldr	r2, [pc, #268]	@ (8003fc4 <HAL_DMA_Abort+0x5fc>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d04a      	beq.n	8003f52 <HAL_DMA_Abort+0x58a>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a41      	ldr	r2, [pc, #260]	@ (8003fc8 <HAL_DMA_Abort+0x600>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d045      	beq.n	8003f52 <HAL_DMA_Abort+0x58a>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a40      	ldr	r2, [pc, #256]	@ (8003fcc <HAL_DMA_Abort+0x604>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d040      	beq.n	8003f52 <HAL_DMA_Abort+0x58a>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a3e      	ldr	r2, [pc, #248]	@ (8003fd0 <HAL_DMA_Abort+0x608>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d03b      	beq.n	8003f52 <HAL_DMA_Abort+0x58a>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a3d      	ldr	r2, [pc, #244]	@ (8003fd4 <HAL_DMA_Abort+0x60c>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d036      	beq.n	8003f52 <HAL_DMA_Abort+0x58a>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a3b      	ldr	r2, [pc, #236]	@ (8003fd8 <HAL_DMA_Abort+0x610>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d031      	beq.n	8003f52 <HAL_DMA_Abort+0x58a>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a3a      	ldr	r2, [pc, #232]	@ (8003fdc <HAL_DMA_Abort+0x614>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d02c      	beq.n	8003f52 <HAL_DMA_Abort+0x58a>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a38      	ldr	r2, [pc, #224]	@ (8003fe0 <HAL_DMA_Abort+0x618>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d027      	beq.n	8003f52 <HAL_DMA_Abort+0x58a>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a37      	ldr	r2, [pc, #220]	@ (8003fe4 <HAL_DMA_Abort+0x61c>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d022      	beq.n	8003f52 <HAL_DMA_Abort+0x58a>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a35      	ldr	r2, [pc, #212]	@ (8003fe8 <HAL_DMA_Abort+0x620>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d01d      	beq.n	8003f52 <HAL_DMA_Abort+0x58a>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a34      	ldr	r2, [pc, #208]	@ (8003fec <HAL_DMA_Abort+0x624>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d018      	beq.n	8003f52 <HAL_DMA_Abort+0x58a>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a32      	ldr	r2, [pc, #200]	@ (8003ff0 <HAL_DMA_Abort+0x628>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d013      	beq.n	8003f52 <HAL_DMA_Abort+0x58a>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a31      	ldr	r2, [pc, #196]	@ (8003ff4 <HAL_DMA_Abort+0x62c>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d00e      	beq.n	8003f52 <HAL_DMA_Abort+0x58a>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a2f      	ldr	r2, [pc, #188]	@ (8003ff8 <HAL_DMA_Abort+0x630>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d009      	beq.n	8003f52 <HAL_DMA_Abort+0x58a>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a2e      	ldr	r2, [pc, #184]	@ (8003ffc <HAL_DMA_Abort+0x634>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d004      	beq.n	8003f52 <HAL_DMA_Abort+0x58a>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a2c      	ldr	r2, [pc, #176]	@ (8004000 <HAL_DMA_Abort+0x638>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d101      	bne.n	8003f56 <HAL_DMA_Abort+0x58e>
 8003f52:	2301      	movs	r3, #1
 8003f54:	e000      	b.n	8003f58 <HAL_DMA_Abort+0x590>
 8003f56:	2300      	movs	r3, #0
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d015      	beq.n	8003f88 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003f60:	687a      	ldr	r2, [r7, #4]
 8003f62:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003f64:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d00c      	beq.n	8003f88 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f78:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003f7c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f82:	687a      	ldr	r2, [r7, #4]
 8003f84:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003f86:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2200      	movs	r2, #0
 8003f94:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8003f98:	2300      	movs	r3, #0
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3718      	adds	r7, #24
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}
 8003fa2:	bf00      	nop
 8003fa4:	40020010 	.word	0x40020010
 8003fa8:	40020028 	.word	0x40020028
 8003fac:	40020040 	.word	0x40020040
 8003fb0:	40020058 	.word	0x40020058
 8003fb4:	40020070 	.word	0x40020070
 8003fb8:	40020088 	.word	0x40020088
 8003fbc:	400200a0 	.word	0x400200a0
 8003fc0:	400200b8 	.word	0x400200b8
 8003fc4:	40020410 	.word	0x40020410
 8003fc8:	40020428 	.word	0x40020428
 8003fcc:	40020440 	.word	0x40020440
 8003fd0:	40020458 	.word	0x40020458
 8003fd4:	40020470 	.word	0x40020470
 8003fd8:	40020488 	.word	0x40020488
 8003fdc:	400204a0 	.word	0x400204a0
 8003fe0:	400204b8 	.word	0x400204b8
 8003fe4:	58025408 	.word	0x58025408
 8003fe8:	5802541c 	.word	0x5802541c
 8003fec:	58025430 	.word	0x58025430
 8003ff0:	58025444 	.word	0x58025444
 8003ff4:	58025458 	.word	0x58025458
 8003ff8:	5802546c 	.word	0x5802546c
 8003ffc:	58025480 	.word	0x58025480
 8004000:	58025494 	.word	0x58025494

08004004 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b084      	sub	sp, #16
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d101      	bne.n	8004016 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	e237      	b.n	8004486 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800401c:	b2db      	uxtb	r3, r3
 800401e:	2b02      	cmp	r3, #2
 8004020:	d004      	beq.n	800402c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2280      	movs	r2, #128	@ 0x80
 8004026:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004028:	2301      	movs	r3, #1
 800402a:	e22c      	b.n	8004486 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a5c      	ldr	r2, [pc, #368]	@ (80041a4 <HAL_DMA_Abort_IT+0x1a0>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d04a      	beq.n	80040cc <HAL_DMA_Abort_IT+0xc8>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a5b      	ldr	r2, [pc, #364]	@ (80041a8 <HAL_DMA_Abort_IT+0x1a4>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d045      	beq.n	80040cc <HAL_DMA_Abort_IT+0xc8>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a59      	ldr	r2, [pc, #356]	@ (80041ac <HAL_DMA_Abort_IT+0x1a8>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d040      	beq.n	80040cc <HAL_DMA_Abort_IT+0xc8>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a58      	ldr	r2, [pc, #352]	@ (80041b0 <HAL_DMA_Abort_IT+0x1ac>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d03b      	beq.n	80040cc <HAL_DMA_Abort_IT+0xc8>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a56      	ldr	r2, [pc, #344]	@ (80041b4 <HAL_DMA_Abort_IT+0x1b0>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d036      	beq.n	80040cc <HAL_DMA_Abort_IT+0xc8>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a55      	ldr	r2, [pc, #340]	@ (80041b8 <HAL_DMA_Abort_IT+0x1b4>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d031      	beq.n	80040cc <HAL_DMA_Abort_IT+0xc8>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a53      	ldr	r2, [pc, #332]	@ (80041bc <HAL_DMA_Abort_IT+0x1b8>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d02c      	beq.n	80040cc <HAL_DMA_Abort_IT+0xc8>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a52      	ldr	r2, [pc, #328]	@ (80041c0 <HAL_DMA_Abort_IT+0x1bc>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d027      	beq.n	80040cc <HAL_DMA_Abort_IT+0xc8>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a50      	ldr	r2, [pc, #320]	@ (80041c4 <HAL_DMA_Abort_IT+0x1c0>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d022      	beq.n	80040cc <HAL_DMA_Abort_IT+0xc8>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a4f      	ldr	r2, [pc, #316]	@ (80041c8 <HAL_DMA_Abort_IT+0x1c4>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d01d      	beq.n	80040cc <HAL_DMA_Abort_IT+0xc8>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a4d      	ldr	r2, [pc, #308]	@ (80041cc <HAL_DMA_Abort_IT+0x1c8>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d018      	beq.n	80040cc <HAL_DMA_Abort_IT+0xc8>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a4c      	ldr	r2, [pc, #304]	@ (80041d0 <HAL_DMA_Abort_IT+0x1cc>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d013      	beq.n	80040cc <HAL_DMA_Abort_IT+0xc8>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a4a      	ldr	r2, [pc, #296]	@ (80041d4 <HAL_DMA_Abort_IT+0x1d0>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d00e      	beq.n	80040cc <HAL_DMA_Abort_IT+0xc8>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a49      	ldr	r2, [pc, #292]	@ (80041d8 <HAL_DMA_Abort_IT+0x1d4>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d009      	beq.n	80040cc <HAL_DMA_Abort_IT+0xc8>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a47      	ldr	r2, [pc, #284]	@ (80041dc <HAL_DMA_Abort_IT+0x1d8>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d004      	beq.n	80040cc <HAL_DMA_Abort_IT+0xc8>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a46      	ldr	r2, [pc, #280]	@ (80041e0 <HAL_DMA_Abort_IT+0x1dc>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d101      	bne.n	80040d0 <HAL_DMA_Abort_IT+0xcc>
 80040cc:	2301      	movs	r3, #1
 80040ce:	e000      	b.n	80040d2 <HAL_DMA_Abort_IT+0xce>
 80040d0:	2300      	movs	r3, #0
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	f000 8086 	beq.w	80041e4 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2204      	movs	r2, #4
 80040dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a2f      	ldr	r2, [pc, #188]	@ (80041a4 <HAL_DMA_Abort_IT+0x1a0>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d04a      	beq.n	8004180 <HAL_DMA_Abort_IT+0x17c>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a2e      	ldr	r2, [pc, #184]	@ (80041a8 <HAL_DMA_Abort_IT+0x1a4>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d045      	beq.n	8004180 <HAL_DMA_Abort_IT+0x17c>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a2c      	ldr	r2, [pc, #176]	@ (80041ac <HAL_DMA_Abort_IT+0x1a8>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d040      	beq.n	8004180 <HAL_DMA_Abort_IT+0x17c>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a2b      	ldr	r2, [pc, #172]	@ (80041b0 <HAL_DMA_Abort_IT+0x1ac>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d03b      	beq.n	8004180 <HAL_DMA_Abort_IT+0x17c>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a29      	ldr	r2, [pc, #164]	@ (80041b4 <HAL_DMA_Abort_IT+0x1b0>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d036      	beq.n	8004180 <HAL_DMA_Abort_IT+0x17c>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a28      	ldr	r2, [pc, #160]	@ (80041b8 <HAL_DMA_Abort_IT+0x1b4>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d031      	beq.n	8004180 <HAL_DMA_Abort_IT+0x17c>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a26      	ldr	r2, [pc, #152]	@ (80041bc <HAL_DMA_Abort_IT+0x1b8>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d02c      	beq.n	8004180 <HAL_DMA_Abort_IT+0x17c>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a25      	ldr	r2, [pc, #148]	@ (80041c0 <HAL_DMA_Abort_IT+0x1bc>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d027      	beq.n	8004180 <HAL_DMA_Abort_IT+0x17c>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a23      	ldr	r2, [pc, #140]	@ (80041c4 <HAL_DMA_Abort_IT+0x1c0>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d022      	beq.n	8004180 <HAL_DMA_Abort_IT+0x17c>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a22      	ldr	r2, [pc, #136]	@ (80041c8 <HAL_DMA_Abort_IT+0x1c4>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d01d      	beq.n	8004180 <HAL_DMA_Abort_IT+0x17c>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a20      	ldr	r2, [pc, #128]	@ (80041cc <HAL_DMA_Abort_IT+0x1c8>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d018      	beq.n	8004180 <HAL_DMA_Abort_IT+0x17c>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a1f      	ldr	r2, [pc, #124]	@ (80041d0 <HAL_DMA_Abort_IT+0x1cc>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d013      	beq.n	8004180 <HAL_DMA_Abort_IT+0x17c>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a1d      	ldr	r2, [pc, #116]	@ (80041d4 <HAL_DMA_Abort_IT+0x1d0>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d00e      	beq.n	8004180 <HAL_DMA_Abort_IT+0x17c>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a1c      	ldr	r2, [pc, #112]	@ (80041d8 <HAL_DMA_Abort_IT+0x1d4>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d009      	beq.n	8004180 <HAL_DMA_Abort_IT+0x17c>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a1a      	ldr	r2, [pc, #104]	@ (80041dc <HAL_DMA_Abort_IT+0x1d8>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d004      	beq.n	8004180 <HAL_DMA_Abort_IT+0x17c>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a19      	ldr	r2, [pc, #100]	@ (80041e0 <HAL_DMA_Abort_IT+0x1dc>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d108      	bne.n	8004192 <HAL_DMA_Abort_IT+0x18e>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f022 0201 	bic.w	r2, r2, #1
 800418e:	601a      	str	r2, [r3, #0]
 8004190:	e178      	b.n	8004484 <HAL_DMA_Abort_IT+0x480>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f022 0201 	bic.w	r2, r2, #1
 80041a0:	601a      	str	r2, [r3, #0]
 80041a2:	e16f      	b.n	8004484 <HAL_DMA_Abort_IT+0x480>
 80041a4:	40020010 	.word	0x40020010
 80041a8:	40020028 	.word	0x40020028
 80041ac:	40020040 	.word	0x40020040
 80041b0:	40020058 	.word	0x40020058
 80041b4:	40020070 	.word	0x40020070
 80041b8:	40020088 	.word	0x40020088
 80041bc:	400200a0 	.word	0x400200a0
 80041c0:	400200b8 	.word	0x400200b8
 80041c4:	40020410 	.word	0x40020410
 80041c8:	40020428 	.word	0x40020428
 80041cc:	40020440 	.word	0x40020440
 80041d0:	40020458 	.word	0x40020458
 80041d4:	40020470 	.word	0x40020470
 80041d8:	40020488 	.word	0x40020488
 80041dc:	400204a0 	.word	0x400204a0
 80041e0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	681a      	ldr	r2, [r3, #0]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f022 020e 	bic.w	r2, r2, #14
 80041f2:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a6c      	ldr	r2, [pc, #432]	@ (80043ac <HAL_DMA_Abort_IT+0x3a8>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d04a      	beq.n	8004294 <HAL_DMA_Abort_IT+0x290>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a6b      	ldr	r2, [pc, #428]	@ (80043b0 <HAL_DMA_Abort_IT+0x3ac>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d045      	beq.n	8004294 <HAL_DMA_Abort_IT+0x290>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a69      	ldr	r2, [pc, #420]	@ (80043b4 <HAL_DMA_Abort_IT+0x3b0>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d040      	beq.n	8004294 <HAL_DMA_Abort_IT+0x290>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a68      	ldr	r2, [pc, #416]	@ (80043b8 <HAL_DMA_Abort_IT+0x3b4>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d03b      	beq.n	8004294 <HAL_DMA_Abort_IT+0x290>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a66      	ldr	r2, [pc, #408]	@ (80043bc <HAL_DMA_Abort_IT+0x3b8>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d036      	beq.n	8004294 <HAL_DMA_Abort_IT+0x290>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a65      	ldr	r2, [pc, #404]	@ (80043c0 <HAL_DMA_Abort_IT+0x3bc>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d031      	beq.n	8004294 <HAL_DMA_Abort_IT+0x290>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a63      	ldr	r2, [pc, #396]	@ (80043c4 <HAL_DMA_Abort_IT+0x3c0>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d02c      	beq.n	8004294 <HAL_DMA_Abort_IT+0x290>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a62      	ldr	r2, [pc, #392]	@ (80043c8 <HAL_DMA_Abort_IT+0x3c4>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d027      	beq.n	8004294 <HAL_DMA_Abort_IT+0x290>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a60      	ldr	r2, [pc, #384]	@ (80043cc <HAL_DMA_Abort_IT+0x3c8>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d022      	beq.n	8004294 <HAL_DMA_Abort_IT+0x290>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a5f      	ldr	r2, [pc, #380]	@ (80043d0 <HAL_DMA_Abort_IT+0x3cc>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d01d      	beq.n	8004294 <HAL_DMA_Abort_IT+0x290>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a5d      	ldr	r2, [pc, #372]	@ (80043d4 <HAL_DMA_Abort_IT+0x3d0>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d018      	beq.n	8004294 <HAL_DMA_Abort_IT+0x290>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a5c      	ldr	r2, [pc, #368]	@ (80043d8 <HAL_DMA_Abort_IT+0x3d4>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d013      	beq.n	8004294 <HAL_DMA_Abort_IT+0x290>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a5a      	ldr	r2, [pc, #360]	@ (80043dc <HAL_DMA_Abort_IT+0x3d8>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d00e      	beq.n	8004294 <HAL_DMA_Abort_IT+0x290>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a59      	ldr	r2, [pc, #356]	@ (80043e0 <HAL_DMA_Abort_IT+0x3dc>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d009      	beq.n	8004294 <HAL_DMA_Abort_IT+0x290>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a57      	ldr	r2, [pc, #348]	@ (80043e4 <HAL_DMA_Abort_IT+0x3e0>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d004      	beq.n	8004294 <HAL_DMA_Abort_IT+0x290>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a56      	ldr	r2, [pc, #344]	@ (80043e8 <HAL_DMA_Abort_IT+0x3e4>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d108      	bne.n	80042a6 <HAL_DMA_Abort_IT+0x2a2>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f022 0201 	bic.w	r2, r2, #1
 80042a2:	601a      	str	r2, [r3, #0]
 80042a4:	e007      	b.n	80042b6 <HAL_DMA_Abort_IT+0x2b2>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	681a      	ldr	r2, [r3, #0]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f022 0201 	bic.w	r2, r2, #1
 80042b4:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a3c      	ldr	r2, [pc, #240]	@ (80043ac <HAL_DMA_Abort_IT+0x3a8>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d072      	beq.n	80043a6 <HAL_DMA_Abort_IT+0x3a2>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a3a      	ldr	r2, [pc, #232]	@ (80043b0 <HAL_DMA_Abort_IT+0x3ac>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d06d      	beq.n	80043a6 <HAL_DMA_Abort_IT+0x3a2>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a39      	ldr	r2, [pc, #228]	@ (80043b4 <HAL_DMA_Abort_IT+0x3b0>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d068      	beq.n	80043a6 <HAL_DMA_Abort_IT+0x3a2>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a37      	ldr	r2, [pc, #220]	@ (80043b8 <HAL_DMA_Abort_IT+0x3b4>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d063      	beq.n	80043a6 <HAL_DMA_Abort_IT+0x3a2>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a36      	ldr	r2, [pc, #216]	@ (80043bc <HAL_DMA_Abort_IT+0x3b8>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d05e      	beq.n	80043a6 <HAL_DMA_Abort_IT+0x3a2>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a34      	ldr	r2, [pc, #208]	@ (80043c0 <HAL_DMA_Abort_IT+0x3bc>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d059      	beq.n	80043a6 <HAL_DMA_Abort_IT+0x3a2>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a33      	ldr	r2, [pc, #204]	@ (80043c4 <HAL_DMA_Abort_IT+0x3c0>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d054      	beq.n	80043a6 <HAL_DMA_Abort_IT+0x3a2>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a31      	ldr	r2, [pc, #196]	@ (80043c8 <HAL_DMA_Abort_IT+0x3c4>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d04f      	beq.n	80043a6 <HAL_DMA_Abort_IT+0x3a2>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a30      	ldr	r2, [pc, #192]	@ (80043cc <HAL_DMA_Abort_IT+0x3c8>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d04a      	beq.n	80043a6 <HAL_DMA_Abort_IT+0x3a2>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a2e      	ldr	r2, [pc, #184]	@ (80043d0 <HAL_DMA_Abort_IT+0x3cc>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d045      	beq.n	80043a6 <HAL_DMA_Abort_IT+0x3a2>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a2d      	ldr	r2, [pc, #180]	@ (80043d4 <HAL_DMA_Abort_IT+0x3d0>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d040      	beq.n	80043a6 <HAL_DMA_Abort_IT+0x3a2>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a2b      	ldr	r2, [pc, #172]	@ (80043d8 <HAL_DMA_Abort_IT+0x3d4>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d03b      	beq.n	80043a6 <HAL_DMA_Abort_IT+0x3a2>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a2a      	ldr	r2, [pc, #168]	@ (80043dc <HAL_DMA_Abort_IT+0x3d8>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d036      	beq.n	80043a6 <HAL_DMA_Abort_IT+0x3a2>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a28      	ldr	r2, [pc, #160]	@ (80043e0 <HAL_DMA_Abort_IT+0x3dc>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d031      	beq.n	80043a6 <HAL_DMA_Abort_IT+0x3a2>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a27      	ldr	r2, [pc, #156]	@ (80043e4 <HAL_DMA_Abort_IT+0x3e0>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d02c      	beq.n	80043a6 <HAL_DMA_Abort_IT+0x3a2>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a25      	ldr	r2, [pc, #148]	@ (80043e8 <HAL_DMA_Abort_IT+0x3e4>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d027      	beq.n	80043a6 <HAL_DMA_Abort_IT+0x3a2>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a24      	ldr	r2, [pc, #144]	@ (80043ec <HAL_DMA_Abort_IT+0x3e8>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d022      	beq.n	80043a6 <HAL_DMA_Abort_IT+0x3a2>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a22      	ldr	r2, [pc, #136]	@ (80043f0 <HAL_DMA_Abort_IT+0x3ec>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d01d      	beq.n	80043a6 <HAL_DMA_Abort_IT+0x3a2>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a21      	ldr	r2, [pc, #132]	@ (80043f4 <HAL_DMA_Abort_IT+0x3f0>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d018      	beq.n	80043a6 <HAL_DMA_Abort_IT+0x3a2>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a1f      	ldr	r2, [pc, #124]	@ (80043f8 <HAL_DMA_Abort_IT+0x3f4>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d013      	beq.n	80043a6 <HAL_DMA_Abort_IT+0x3a2>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a1e      	ldr	r2, [pc, #120]	@ (80043fc <HAL_DMA_Abort_IT+0x3f8>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d00e      	beq.n	80043a6 <HAL_DMA_Abort_IT+0x3a2>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a1c      	ldr	r2, [pc, #112]	@ (8004400 <HAL_DMA_Abort_IT+0x3fc>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d009      	beq.n	80043a6 <HAL_DMA_Abort_IT+0x3a2>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a1b      	ldr	r2, [pc, #108]	@ (8004404 <HAL_DMA_Abort_IT+0x400>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d004      	beq.n	80043a6 <HAL_DMA_Abort_IT+0x3a2>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a19      	ldr	r2, [pc, #100]	@ (8004408 <HAL_DMA_Abort_IT+0x404>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d132      	bne.n	800440c <HAL_DMA_Abort_IT+0x408>
 80043a6:	2301      	movs	r3, #1
 80043a8:	e031      	b.n	800440e <HAL_DMA_Abort_IT+0x40a>
 80043aa:	bf00      	nop
 80043ac:	40020010 	.word	0x40020010
 80043b0:	40020028 	.word	0x40020028
 80043b4:	40020040 	.word	0x40020040
 80043b8:	40020058 	.word	0x40020058
 80043bc:	40020070 	.word	0x40020070
 80043c0:	40020088 	.word	0x40020088
 80043c4:	400200a0 	.word	0x400200a0
 80043c8:	400200b8 	.word	0x400200b8
 80043cc:	40020410 	.word	0x40020410
 80043d0:	40020428 	.word	0x40020428
 80043d4:	40020440 	.word	0x40020440
 80043d8:	40020458 	.word	0x40020458
 80043dc:	40020470 	.word	0x40020470
 80043e0:	40020488 	.word	0x40020488
 80043e4:	400204a0 	.word	0x400204a0
 80043e8:	400204b8 	.word	0x400204b8
 80043ec:	58025408 	.word	0x58025408
 80043f0:	5802541c 	.word	0x5802541c
 80043f4:	58025430 	.word	0x58025430
 80043f8:	58025444 	.word	0x58025444
 80043fc:	58025458 	.word	0x58025458
 8004400:	5802546c 	.word	0x5802546c
 8004404:	58025480 	.word	0x58025480
 8004408:	58025494 	.word	0x58025494
 800440c:	2300      	movs	r3, #0
 800440e:	2b00      	cmp	r3, #0
 8004410:	d028      	beq.n	8004464 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800441c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004420:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004426:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800442c:	f003 031f 	and.w	r3, r3, #31
 8004430:	2201      	movs	r2, #1
 8004432:	409a      	lsls	r2, r3
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800443c:	687a      	ldr	r2, [r7, #4]
 800443e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004440:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004446:	2b00      	cmp	r3, #0
 8004448:	d00c      	beq.n	8004464 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800444e:	681a      	ldr	r2, [r3, #0]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004454:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004458:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800445e:	687a      	ldr	r2, [r7, #4]
 8004460:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004462:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2201      	movs	r2, #1
 8004468:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2200      	movs	r2, #0
 8004470:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004478:	2b00      	cmp	r3, #0
 800447a:	d003      	beq.n	8004484 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004480:	6878      	ldr	r0, [r7, #4]
 8004482:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8004484:	2300      	movs	r3, #0
}
 8004486:	4618      	mov	r0, r3
 8004488:	3710      	adds	r7, #16
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}
 800448e:	bf00      	nop

08004490 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b08a      	sub	sp, #40	@ 0x28
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004498:	2300      	movs	r3, #0
 800449a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800449c:	4b67      	ldr	r3, [pc, #412]	@ (800463c <HAL_DMA_IRQHandler+0x1ac>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a67      	ldr	r2, [pc, #412]	@ (8004640 <HAL_DMA_IRQHandler+0x1b0>)
 80044a2:	fba2 2303 	umull	r2, r3, r2, r3
 80044a6:	0a9b      	lsrs	r3, r3, #10
 80044a8:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044ae:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044b4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80044b6:	6a3b      	ldr	r3, [r7, #32]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80044bc:	69fb      	ldr	r3, [r7, #28]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a5f      	ldr	r2, [pc, #380]	@ (8004644 <HAL_DMA_IRQHandler+0x1b4>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d04a      	beq.n	8004562 <HAL_DMA_IRQHandler+0xd2>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a5d      	ldr	r2, [pc, #372]	@ (8004648 <HAL_DMA_IRQHandler+0x1b8>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d045      	beq.n	8004562 <HAL_DMA_IRQHandler+0xd2>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a5c      	ldr	r2, [pc, #368]	@ (800464c <HAL_DMA_IRQHandler+0x1bc>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d040      	beq.n	8004562 <HAL_DMA_IRQHandler+0xd2>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a5a      	ldr	r2, [pc, #360]	@ (8004650 <HAL_DMA_IRQHandler+0x1c0>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d03b      	beq.n	8004562 <HAL_DMA_IRQHandler+0xd2>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a59      	ldr	r2, [pc, #356]	@ (8004654 <HAL_DMA_IRQHandler+0x1c4>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d036      	beq.n	8004562 <HAL_DMA_IRQHandler+0xd2>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a57      	ldr	r2, [pc, #348]	@ (8004658 <HAL_DMA_IRQHandler+0x1c8>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d031      	beq.n	8004562 <HAL_DMA_IRQHandler+0xd2>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a56      	ldr	r2, [pc, #344]	@ (800465c <HAL_DMA_IRQHandler+0x1cc>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d02c      	beq.n	8004562 <HAL_DMA_IRQHandler+0xd2>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a54      	ldr	r2, [pc, #336]	@ (8004660 <HAL_DMA_IRQHandler+0x1d0>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d027      	beq.n	8004562 <HAL_DMA_IRQHandler+0xd2>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a53      	ldr	r2, [pc, #332]	@ (8004664 <HAL_DMA_IRQHandler+0x1d4>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d022      	beq.n	8004562 <HAL_DMA_IRQHandler+0xd2>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a51      	ldr	r2, [pc, #324]	@ (8004668 <HAL_DMA_IRQHandler+0x1d8>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d01d      	beq.n	8004562 <HAL_DMA_IRQHandler+0xd2>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a50      	ldr	r2, [pc, #320]	@ (800466c <HAL_DMA_IRQHandler+0x1dc>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d018      	beq.n	8004562 <HAL_DMA_IRQHandler+0xd2>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a4e      	ldr	r2, [pc, #312]	@ (8004670 <HAL_DMA_IRQHandler+0x1e0>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d013      	beq.n	8004562 <HAL_DMA_IRQHandler+0xd2>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a4d      	ldr	r2, [pc, #308]	@ (8004674 <HAL_DMA_IRQHandler+0x1e4>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d00e      	beq.n	8004562 <HAL_DMA_IRQHandler+0xd2>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a4b      	ldr	r2, [pc, #300]	@ (8004678 <HAL_DMA_IRQHandler+0x1e8>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d009      	beq.n	8004562 <HAL_DMA_IRQHandler+0xd2>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a4a      	ldr	r2, [pc, #296]	@ (800467c <HAL_DMA_IRQHandler+0x1ec>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d004      	beq.n	8004562 <HAL_DMA_IRQHandler+0xd2>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a48      	ldr	r2, [pc, #288]	@ (8004680 <HAL_DMA_IRQHandler+0x1f0>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d101      	bne.n	8004566 <HAL_DMA_IRQHandler+0xd6>
 8004562:	2301      	movs	r3, #1
 8004564:	e000      	b.n	8004568 <HAL_DMA_IRQHandler+0xd8>
 8004566:	2300      	movs	r3, #0
 8004568:	2b00      	cmp	r3, #0
 800456a:	f000 842b 	beq.w	8004dc4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004572:	f003 031f 	and.w	r3, r3, #31
 8004576:	2208      	movs	r2, #8
 8004578:	409a      	lsls	r2, r3
 800457a:	69bb      	ldr	r3, [r7, #24]
 800457c:	4013      	ands	r3, r2
 800457e:	2b00      	cmp	r3, #0
 8004580:	f000 80a2 	beq.w	80046c8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a2e      	ldr	r2, [pc, #184]	@ (8004644 <HAL_DMA_IRQHandler+0x1b4>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d04a      	beq.n	8004624 <HAL_DMA_IRQHandler+0x194>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a2d      	ldr	r2, [pc, #180]	@ (8004648 <HAL_DMA_IRQHandler+0x1b8>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d045      	beq.n	8004624 <HAL_DMA_IRQHandler+0x194>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a2b      	ldr	r2, [pc, #172]	@ (800464c <HAL_DMA_IRQHandler+0x1bc>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d040      	beq.n	8004624 <HAL_DMA_IRQHandler+0x194>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a2a      	ldr	r2, [pc, #168]	@ (8004650 <HAL_DMA_IRQHandler+0x1c0>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d03b      	beq.n	8004624 <HAL_DMA_IRQHandler+0x194>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a28      	ldr	r2, [pc, #160]	@ (8004654 <HAL_DMA_IRQHandler+0x1c4>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d036      	beq.n	8004624 <HAL_DMA_IRQHandler+0x194>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a27      	ldr	r2, [pc, #156]	@ (8004658 <HAL_DMA_IRQHandler+0x1c8>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d031      	beq.n	8004624 <HAL_DMA_IRQHandler+0x194>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a25      	ldr	r2, [pc, #148]	@ (800465c <HAL_DMA_IRQHandler+0x1cc>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d02c      	beq.n	8004624 <HAL_DMA_IRQHandler+0x194>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a24      	ldr	r2, [pc, #144]	@ (8004660 <HAL_DMA_IRQHandler+0x1d0>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d027      	beq.n	8004624 <HAL_DMA_IRQHandler+0x194>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a22      	ldr	r2, [pc, #136]	@ (8004664 <HAL_DMA_IRQHandler+0x1d4>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d022      	beq.n	8004624 <HAL_DMA_IRQHandler+0x194>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a21      	ldr	r2, [pc, #132]	@ (8004668 <HAL_DMA_IRQHandler+0x1d8>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d01d      	beq.n	8004624 <HAL_DMA_IRQHandler+0x194>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a1f      	ldr	r2, [pc, #124]	@ (800466c <HAL_DMA_IRQHandler+0x1dc>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d018      	beq.n	8004624 <HAL_DMA_IRQHandler+0x194>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a1e      	ldr	r2, [pc, #120]	@ (8004670 <HAL_DMA_IRQHandler+0x1e0>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d013      	beq.n	8004624 <HAL_DMA_IRQHandler+0x194>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a1c      	ldr	r2, [pc, #112]	@ (8004674 <HAL_DMA_IRQHandler+0x1e4>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d00e      	beq.n	8004624 <HAL_DMA_IRQHandler+0x194>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a1b      	ldr	r2, [pc, #108]	@ (8004678 <HAL_DMA_IRQHandler+0x1e8>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d009      	beq.n	8004624 <HAL_DMA_IRQHandler+0x194>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a19      	ldr	r2, [pc, #100]	@ (800467c <HAL_DMA_IRQHandler+0x1ec>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d004      	beq.n	8004624 <HAL_DMA_IRQHandler+0x194>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a18      	ldr	r2, [pc, #96]	@ (8004680 <HAL_DMA_IRQHandler+0x1f0>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d12f      	bne.n	8004684 <HAL_DMA_IRQHandler+0x1f4>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f003 0304 	and.w	r3, r3, #4
 800462e:	2b00      	cmp	r3, #0
 8004630:	bf14      	ite	ne
 8004632:	2301      	movne	r3, #1
 8004634:	2300      	moveq	r3, #0
 8004636:	b2db      	uxtb	r3, r3
 8004638:	e02e      	b.n	8004698 <HAL_DMA_IRQHandler+0x208>
 800463a:	bf00      	nop
 800463c:	24000004 	.word	0x24000004
 8004640:	1b4e81b5 	.word	0x1b4e81b5
 8004644:	40020010 	.word	0x40020010
 8004648:	40020028 	.word	0x40020028
 800464c:	40020040 	.word	0x40020040
 8004650:	40020058 	.word	0x40020058
 8004654:	40020070 	.word	0x40020070
 8004658:	40020088 	.word	0x40020088
 800465c:	400200a0 	.word	0x400200a0
 8004660:	400200b8 	.word	0x400200b8
 8004664:	40020410 	.word	0x40020410
 8004668:	40020428 	.word	0x40020428
 800466c:	40020440 	.word	0x40020440
 8004670:	40020458 	.word	0x40020458
 8004674:	40020470 	.word	0x40020470
 8004678:	40020488 	.word	0x40020488
 800467c:	400204a0 	.word	0x400204a0
 8004680:	400204b8 	.word	0x400204b8
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f003 0308 	and.w	r3, r3, #8
 800468e:	2b00      	cmp	r3, #0
 8004690:	bf14      	ite	ne
 8004692:	2301      	movne	r3, #1
 8004694:	2300      	moveq	r3, #0
 8004696:	b2db      	uxtb	r3, r3
 8004698:	2b00      	cmp	r3, #0
 800469a:	d015      	beq.n	80046c8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f022 0204 	bic.w	r2, r2, #4
 80046aa:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046b0:	f003 031f 	and.w	r3, r3, #31
 80046b4:	2208      	movs	r2, #8
 80046b6:	409a      	lsls	r2, r3
 80046b8:	6a3b      	ldr	r3, [r7, #32]
 80046ba:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046c0:	f043 0201 	orr.w	r2, r3, #1
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046cc:	f003 031f 	and.w	r3, r3, #31
 80046d0:	69ba      	ldr	r2, [r7, #24]
 80046d2:	fa22 f303 	lsr.w	r3, r2, r3
 80046d6:	f003 0301 	and.w	r3, r3, #1
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d06e      	beq.n	80047bc <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a69      	ldr	r2, [pc, #420]	@ (8004888 <HAL_DMA_IRQHandler+0x3f8>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d04a      	beq.n	800477e <HAL_DMA_IRQHandler+0x2ee>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a67      	ldr	r2, [pc, #412]	@ (800488c <HAL_DMA_IRQHandler+0x3fc>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d045      	beq.n	800477e <HAL_DMA_IRQHandler+0x2ee>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a66      	ldr	r2, [pc, #408]	@ (8004890 <HAL_DMA_IRQHandler+0x400>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d040      	beq.n	800477e <HAL_DMA_IRQHandler+0x2ee>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a64      	ldr	r2, [pc, #400]	@ (8004894 <HAL_DMA_IRQHandler+0x404>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d03b      	beq.n	800477e <HAL_DMA_IRQHandler+0x2ee>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a63      	ldr	r2, [pc, #396]	@ (8004898 <HAL_DMA_IRQHandler+0x408>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d036      	beq.n	800477e <HAL_DMA_IRQHandler+0x2ee>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a61      	ldr	r2, [pc, #388]	@ (800489c <HAL_DMA_IRQHandler+0x40c>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d031      	beq.n	800477e <HAL_DMA_IRQHandler+0x2ee>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a60      	ldr	r2, [pc, #384]	@ (80048a0 <HAL_DMA_IRQHandler+0x410>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d02c      	beq.n	800477e <HAL_DMA_IRQHandler+0x2ee>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a5e      	ldr	r2, [pc, #376]	@ (80048a4 <HAL_DMA_IRQHandler+0x414>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d027      	beq.n	800477e <HAL_DMA_IRQHandler+0x2ee>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a5d      	ldr	r2, [pc, #372]	@ (80048a8 <HAL_DMA_IRQHandler+0x418>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d022      	beq.n	800477e <HAL_DMA_IRQHandler+0x2ee>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a5b      	ldr	r2, [pc, #364]	@ (80048ac <HAL_DMA_IRQHandler+0x41c>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d01d      	beq.n	800477e <HAL_DMA_IRQHandler+0x2ee>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a5a      	ldr	r2, [pc, #360]	@ (80048b0 <HAL_DMA_IRQHandler+0x420>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d018      	beq.n	800477e <HAL_DMA_IRQHandler+0x2ee>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a58      	ldr	r2, [pc, #352]	@ (80048b4 <HAL_DMA_IRQHandler+0x424>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d013      	beq.n	800477e <HAL_DMA_IRQHandler+0x2ee>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a57      	ldr	r2, [pc, #348]	@ (80048b8 <HAL_DMA_IRQHandler+0x428>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d00e      	beq.n	800477e <HAL_DMA_IRQHandler+0x2ee>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a55      	ldr	r2, [pc, #340]	@ (80048bc <HAL_DMA_IRQHandler+0x42c>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d009      	beq.n	800477e <HAL_DMA_IRQHandler+0x2ee>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a54      	ldr	r2, [pc, #336]	@ (80048c0 <HAL_DMA_IRQHandler+0x430>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d004      	beq.n	800477e <HAL_DMA_IRQHandler+0x2ee>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a52      	ldr	r2, [pc, #328]	@ (80048c4 <HAL_DMA_IRQHandler+0x434>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d10a      	bne.n	8004794 <HAL_DMA_IRQHandler+0x304>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	695b      	ldr	r3, [r3, #20]
 8004784:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004788:	2b00      	cmp	r3, #0
 800478a:	bf14      	ite	ne
 800478c:	2301      	movne	r3, #1
 800478e:	2300      	moveq	r3, #0
 8004790:	b2db      	uxtb	r3, r3
 8004792:	e003      	b.n	800479c <HAL_DMA_IRQHandler+0x30c>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	2300      	movs	r3, #0
 800479c:	2b00      	cmp	r3, #0
 800479e:	d00d      	beq.n	80047bc <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047a4:	f003 031f 	and.w	r3, r3, #31
 80047a8:	2201      	movs	r2, #1
 80047aa:	409a      	lsls	r2, r3
 80047ac:	6a3b      	ldr	r3, [r7, #32]
 80047ae:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047b4:	f043 0202 	orr.w	r2, r3, #2
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047c0:	f003 031f 	and.w	r3, r3, #31
 80047c4:	2204      	movs	r2, #4
 80047c6:	409a      	lsls	r2, r3
 80047c8:	69bb      	ldr	r3, [r7, #24]
 80047ca:	4013      	ands	r3, r2
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	f000 808f 	beq.w	80048f0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a2c      	ldr	r2, [pc, #176]	@ (8004888 <HAL_DMA_IRQHandler+0x3f8>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d04a      	beq.n	8004872 <HAL_DMA_IRQHandler+0x3e2>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a2a      	ldr	r2, [pc, #168]	@ (800488c <HAL_DMA_IRQHandler+0x3fc>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d045      	beq.n	8004872 <HAL_DMA_IRQHandler+0x3e2>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a29      	ldr	r2, [pc, #164]	@ (8004890 <HAL_DMA_IRQHandler+0x400>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d040      	beq.n	8004872 <HAL_DMA_IRQHandler+0x3e2>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a27      	ldr	r2, [pc, #156]	@ (8004894 <HAL_DMA_IRQHandler+0x404>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d03b      	beq.n	8004872 <HAL_DMA_IRQHandler+0x3e2>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a26      	ldr	r2, [pc, #152]	@ (8004898 <HAL_DMA_IRQHandler+0x408>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d036      	beq.n	8004872 <HAL_DMA_IRQHandler+0x3e2>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a24      	ldr	r2, [pc, #144]	@ (800489c <HAL_DMA_IRQHandler+0x40c>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d031      	beq.n	8004872 <HAL_DMA_IRQHandler+0x3e2>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a23      	ldr	r2, [pc, #140]	@ (80048a0 <HAL_DMA_IRQHandler+0x410>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d02c      	beq.n	8004872 <HAL_DMA_IRQHandler+0x3e2>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a21      	ldr	r2, [pc, #132]	@ (80048a4 <HAL_DMA_IRQHandler+0x414>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d027      	beq.n	8004872 <HAL_DMA_IRQHandler+0x3e2>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a20      	ldr	r2, [pc, #128]	@ (80048a8 <HAL_DMA_IRQHandler+0x418>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d022      	beq.n	8004872 <HAL_DMA_IRQHandler+0x3e2>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a1e      	ldr	r2, [pc, #120]	@ (80048ac <HAL_DMA_IRQHandler+0x41c>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d01d      	beq.n	8004872 <HAL_DMA_IRQHandler+0x3e2>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a1d      	ldr	r2, [pc, #116]	@ (80048b0 <HAL_DMA_IRQHandler+0x420>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d018      	beq.n	8004872 <HAL_DMA_IRQHandler+0x3e2>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a1b      	ldr	r2, [pc, #108]	@ (80048b4 <HAL_DMA_IRQHandler+0x424>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d013      	beq.n	8004872 <HAL_DMA_IRQHandler+0x3e2>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a1a      	ldr	r2, [pc, #104]	@ (80048b8 <HAL_DMA_IRQHandler+0x428>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d00e      	beq.n	8004872 <HAL_DMA_IRQHandler+0x3e2>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a18      	ldr	r2, [pc, #96]	@ (80048bc <HAL_DMA_IRQHandler+0x42c>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d009      	beq.n	8004872 <HAL_DMA_IRQHandler+0x3e2>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a17      	ldr	r2, [pc, #92]	@ (80048c0 <HAL_DMA_IRQHandler+0x430>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d004      	beq.n	8004872 <HAL_DMA_IRQHandler+0x3e2>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a15      	ldr	r2, [pc, #84]	@ (80048c4 <HAL_DMA_IRQHandler+0x434>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d12a      	bne.n	80048c8 <HAL_DMA_IRQHandler+0x438>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f003 0302 	and.w	r3, r3, #2
 800487c:	2b00      	cmp	r3, #0
 800487e:	bf14      	ite	ne
 8004880:	2301      	movne	r3, #1
 8004882:	2300      	moveq	r3, #0
 8004884:	b2db      	uxtb	r3, r3
 8004886:	e023      	b.n	80048d0 <HAL_DMA_IRQHandler+0x440>
 8004888:	40020010 	.word	0x40020010
 800488c:	40020028 	.word	0x40020028
 8004890:	40020040 	.word	0x40020040
 8004894:	40020058 	.word	0x40020058
 8004898:	40020070 	.word	0x40020070
 800489c:	40020088 	.word	0x40020088
 80048a0:	400200a0 	.word	0x400200a0
 80048a4:	400200b8 	.word	0x400200b8
 80048a8:	40020410 	.word	0x40020410
 80048ac:	40020428 	.word	0x40020428
 80048b0:	40020440 	.word	0x40020440
 80048b4:	40020458 	.word	0x40020458
 80048b8:	40020470 	.word	0x40020470
 80048bc:	40020488 	.word	0x40020488
 80048c0:	400204a0 	.word	0x400204a0
 80048c4:	400204b8 	.word	0x400204b8
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	2300      	movs	r3, #0
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d00d      	beq.n	80048f0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048d8:	f003 031f 	and.w	r3, r3, #31
 80048dc:	2204      	movs	r2, #4
 80048de:	409a      	lsls	r2, r3
 80048e0:	6a3b      	ldr	r3, [r7, #32]
 80048e2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048e8:	f043 0204 	orr.w	r2, r3, #4
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048f4:	f003 031f 	and.w	r3, r3, #31
 80048f8:	2210      	movs	r2, #16
 80048fa:	409a      	lsls	r2, r3
 80048fc:	69bb      	ldr	r3, [r7, #24]
 80048fe:	4013      	ands	r3, r2
 8004900:	2b00      	cmp	r3, #0
 8004902:	f000 80a6 	beq.w	8004a52 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a85      	ldr	r2, [pc, #532]	@ (8004b20 <HAL_DMA_IRQHandler+0x690>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d04a      	beq.n	80049a6 <HAL_DMA_IRQHandler+0x516>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a83      	ldr	r2, [pc, #524]	@ (8004b24 <HAL_DMA_IRQHandler+0x694>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d045      	beq.n	80049a6 <HAL_DMA_IRQHandler+0x516>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a82      	ldr	r2, [pc, #520]	@ (8004b28 <HAL_DMA_IRQHandler+0x698>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d040      	beq.n	80049a6 <HAL_DMA_IRQHandler+0x516>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a80      	ldr	r2, [pc, #512]	@ (8004b2c <HAL_DMA_IRQHandler+0x69c>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d03b      	beq.n	80049a6 <HAL_DMA_IRQHandler+0x516>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a7f      	ldr	r2, [pc, #508]	@ (8004b30 <HAL_DMA_IRQHandler+0x6a0>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d036      	beq.n	80049a6 <HAL_DMA_IRQHandler+0x516>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a7d      	ldr	r2, [pc, #500]	@ (8004b34 <HAL_DMA_IRQHandler+0x6a4>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d031      	beq.n	80049a6 <HAL_DMA_IRQHandler+0x516>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a7c      	ldr	r2, [pc, #496]	@ (8004b38 <HAL_DMA_IRQHandler+0x6a8>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d02c      	beq.n	80049a6 <HAL_DMA_IRQHandler+0x516>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a7a      	ldr	r2, [pc, #488]	@ (8004b3c <HAL_DMA_IRQHandler+0x6ac>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d027      	beq.n	80049a6 <HAL_DMA_IRQHandler+0x516>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a79      	ldr	r2, [pc, #484]	@ (8004b40 <HAL_DMA_IRQHandler+0x6b0>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d022      	beq.n	80049a6 <HAL_DMA_IRQHandler+0x516>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a77      	ldr	r2, [pc, #476]	@ (8004b44 <HAL_DMA_IRQHandler+0x6b4>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d01d      	beq.n	80049a6 <HAL_DMA_IRQHandler+0x516>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a76      	ldr	r2, [pc, #472]	@ (8004b48 <HAL_DMA_IRQHandler+0x6b8>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d018      	beq.n	80049a6 <HAL_DMA_IRQHandler+0x516>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a74      	ldr	r2, [pc, #464]	@ (8004b4c <HAL_DMA_IRQHandler+0x6bc>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d013      	beq.n	80049a6 <HAL_DMA_IRQHandler+0x516>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a73      	ldr	r2, [pc, #460]	@ (8004b50 <HAL_DMA_IRQHandler+0x6c0>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d00e      	beq.n	80049a6 <HAL_DMA_IRQHandler+0x516>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a71      	ldr	r2, [pc, #452]	@ (8004b54 <HAL_DMA_IRQHandler+0x6c4>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d009      	beq.n	80049a6 <HAL_DMA_IRQHandler+0x516>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a70      	ldr	r2, [pc, #448]	@ (8004b58 <HAL_DMA_IRQHandler+0x6c8>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d004      	beq.n	80049a6 <HAL_DMA_IRQHandler+0x516>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a6e      	ldr	r2, [pc, #440]	@ (8004b5c <HAL_DMA_IRQHandler+0x6cc>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d10a      	bne.n	80049bc <HAL_DMA_IRQHandler+0x52c>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f003 0308 	and.w	r3, r3, #8
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	bf14      	ite	ne
 80049b4:	2301      	movne	r3, #1
 80049b6:	2300      	moveq	r3, #0
 80049b8:	b2db      	uxtb	r3, r3
 80049ba:	e009      	b.n	80049d0 <HAL_DMA_IRQHandler+0x540>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f003 0304 	and.w	r3, r3, #4
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	bf14      	ite	ne
 80049ca:	2301      	movne	r3, #1
 80049cc:	2300      	moveq	r3, #0
 80049ce:	b2db      	uxtb	r3, r3
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d03e      	beq.n	8004a52 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049d8:	f003 031f 	and.w	r3, r3, #31
 80049dc:	2210      	movs	r2, #16
 80049de:	409a      	lsls	r2, r3
 80049e0:	6a3b      	ldr	r3, [r7, #32]
 80049e2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d018      	beq.n	8004a24 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d108      	bne.n	8004a12 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d024      	beq.n	8004a52 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a0c:	6878      	ldr	r0, [r7, #4]
 8004a0e:	4798      	blx	r3
 8004a10:	e01f      	b.n	8004a52 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d01b      	beq.n	8004a52 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	4798      	blx	r3
 8004a22:	e016      	b.n	8004a52 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d107      	bne.n	8004a42 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	681a      	ldr	r2, [r3, #0]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f022 0208 	bic.w	r2, r2, #8
 8004a40:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d003      	beq.n	8004a52 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a56:	f003 031f 	and.w	r3, r3, #31
 8004a5a:	2220      	movs	r2, #32
 8004a5c:	409a      	lsls	r2, r3
 8004a5e:	69bb      	ldr	r3, [r7, #24]
 8004a60:	4013      	ands	r3, r2
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	f000 8110 	beq.w	8004c88 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a2c      	ldr	r2, [pc, #176]	@ (8004b20 <HAL_DMA_IRQHandler+0x690>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d04a      	beq.n	8004b08 <HAL_DMA_IRQHandler+0x678>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a2b      	ldr	r2, [pc, #172]	@ (8004b24 <HAL_DMA_IRQHandler+0x694>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d045      	beq.n	8004b08 <HAL_DMA_IRQHandler+0x678>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a29      	ldr	r2, [pc, #164]	@ (8004b28 <HAL_DMA_IRQHandler+0x698>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d040      	beq.n	8004b08 <HAL_DMA_IRQHandler+0x678>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a28      	ldr	r2, [pc, #160]	@ (8004b2c <HAL_DMA_IRQHandler+0x69c>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d03b      	beq.n	8004b08 <HAL_DMA_IRQHandler+0x678>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a26      	ldr	r2, [pc, #152]	@ (8004b30 <HAL_DMA_IRQHandler+0x6a0>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d036      	beq.n	8004b08 <HAL_DMA_IRQHandler+0x678>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a25      	ldr	r2, [pc, #148]	@ (8004b34 <HAL_DMA_IRQHandler+0x6a4>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d031      	beq.n	8004b08 <HAL_DMA_IRQHandler+0x678>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a23      	ldr	r2, [pc, #140]	@ (8004b38 <HAL_DMA_IRQHandler+0x6a8>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d02c      	beq.n	8004b08 <HAL_DMA_IRQHandler+0x678>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a22      	ldr	r2, [pc, #136]	@ (8004b3c <HAL_DMA_IRQHandler+0x6ac>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d027      	beq.n	8004b08 <HAL_DMA_IRQHandler+0x678>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a20      	ldr	r2, [pc, #128]	@ (8004b40 <HAL_DMA_IRQHandler+0x6b0>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d022      	beq.n	8004b08 <HAL_DMA_IRQHandler+0x678>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a1f      	ldr	r2, [pc, #124]	@ (8004b44 <HAL_DMA_IRQHandler+0x6b4>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d01d      	beq.n	8004b08 <HAL_DMA_IRQHandler+0x678>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a1d      	ldr	r2, [pc, #116]	@ (8004b48 <HAL_DMA_IRQHandler+0x6b8>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d018      	beq.n	8004b08 <HAL_DMA_IRQHandler+0x678>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a1c      	ldr	r2, [pc, #112]	@ (8004b4c <HAL_DMA_IRQHandler+0x6bc>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d013      	beq.n	8004b08 <HAL_DMA_IRQHandler+0x678>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a1a      	ldr	r2, [pc, #104]	@ (8004b50 <HAL_DMA_IRQHandler+0x6c0>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d00e      	beq.n	8004b08 <HAL_DMA_IRQHandler+0x678>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a19      	ldr	r2, [pc, #100]	@ (8004b54 <HAL_DMA_IRQHandler+0x6c4>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d009      	beq.n	8004b08 <HAL_DMA_IRQHandler+0x678>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a17      	ldr	r2, [pc, #92]	@ (8004b58 <HAL_DMA_IRQHandler+0x6c8>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d004      	beq.n	8004b08 <HAL_DMA_IRQHandler+0x678>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a16      	ldr	r2, [pc, #88]	@ (8004b5c <HAL_DMA_IRQHandler+0x6cc>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d12b      	bne.n	8004b60 <HAL_DMA_IRQHandler+0x6d0>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f003 0310 	and.w	r3, r3, #16
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	bf14      	ite	ne
 8004b16:	2301      	movne	r3, #1
 8004b18:	2300      	moveq	r3, #0
 8004b1a:	b2db      	uxtb	r3, r3
 8004b1c:	e02a      	b.n	8004b74 <HAL_DMA_IRQHandler+0x6e4>
 8004b1e:	bf00      	nop
 8004b20:	40020010 	.word	0x40020010
 8004b24:	40020028 	.word	0x40020028
 8004b28:	40020040 	.word	0x40020040
 8004b2c:	40020058 	.word	0x40020058
 8004b30:	40020070 	.word	0x40020070
 8004b34:	40020088 	.word	0x40020088
 8004b38:	400200a0 	.word	0x400200a0
 8004b3c:	400200b8 	.word	0x400200b8
 8004b40:	40020410 	.word	0x40020410
 8004b44:	40020428 	.word	0x40020428
 8004b48:	40020440 	.word	0x40020440
 8004b4c:	40020458 	.word	0x40020458
 8004b50:	40020470 	.word	0x40020470
 8004b54:	40020488 	.word	0x40020488
 8004b58:	400204a0 	.word	0x400204a0
 8004b5c:	400204b8 	.word	0x400204b8
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f003 0302 	and.w	r3, r3, #2
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	bf14      	ite	ne
 8004b6e:	2301      	movne	r3, #1
 8004b70:	2300      	moveq	r3, #0
 8004b72:	b2db      	uxtb	r3, r3
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	f000 8087 	beq.w	8004c88 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b7e:	f003 031f 	and.w	r3, r3, #31
 8004b82:	2220      	movs	r2, #32
 8004b84:	409a      	lsls	r2, r3
 8004b86:	6a3b      	ldr	r3, [r7, #32]
 8004b88:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004b90:	b2db      	uxtb	r3, r3
 8004b92:	2b04      	cmp	r3, #4
 8004b94:	d139      	bne.n	8004c0a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	681a      	ldr	r2, [r3, #0]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f022 0216 	bic.w	r2, r2, #22
 8004ba4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	695a      	ldr	r2, [r3, #20]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004bb4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d103      	bne.n	8004bc6 <HAL_DMA_IRQHandler+0x736>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d007      	beq.n	8004bd6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	681a      	ldr	r2, [r3, #0]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f022 0208 	bic.w	r2, r2, #8
 8004bd4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bda:	f003 031f 	and.w	r3, r3, #31
 8004bde:	223f      	movs	r2, #63	@ 0x3f
 8004be0:	409a      	lsls	r2, r3
 8004be2:	6a3b      	ldr	r3, [r7, #32]
 8004be4:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2201      	movs	r2, #1
 8004bea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	f000 834a 	beq.w	8005294 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c04:	6878      	ldr	r0, [r7, #4]
 8004c06:	4798      	blx	r3
          }
          return;
 8004c08:	e344      	b.n	8005294 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d018      	beq.n	8004c4a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d108      	bne.n	8004c38 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d02c      	beq.n	8004c88 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	4798      	blx	r3
 8004c36:	e027      	b.n	8004c88 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d023      	beq.n	8004c88 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c44:	6878      	ldr	r0, [r7, #4]
 8004c46:	4798      	blx	r3
 8004c48:	e01e      	b.n	8004c88 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d10f      	bne.n	8004c78 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	681a      	ldr	r2, [r3, #0]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f022 0210 	bic.w	r2, r2, #16
 8004c66:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2200      	movs	r2, #0
 8004c74:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d003      	beq.n	8004c88 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c84:	6878      	ldr	r0, [r7, #4]
 8004c86:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	f000 8306 	beq.w	800529e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c96:	f003 0301 	and.w	r3, r3, #1
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	f000 8088 	beq.w	8004db0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2204      	movs	r2, #4
 8004ca4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a7a      	ldr	r2, [pc, #488]	@ (8004e98 <HAL_DMA_IRQHandler+0xa08>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d04a      	beq.n	8004d48 <HAL_DMA_IRQHandler+0x8b8>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a79      	ldr	r2, [pc, #484]	@ (8004e9c <HAL_DMA_IRQHandler+0xa0c>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d045      	beq.n	8004d48 <HAL_DMA_IRQHandler+0x8b8>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a77      	ldr	r2, [pc, #476]	@ (8004ea0 <HAL_DMA_IRQHandler+0xa10>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d040      	beq.n	8004d48 <HAL_DMA_IRQHandler+0x8b8>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a76      	ldr	r2, [pc, #472]	@ (8004ea4 <HAL_DMA_IRQHandler+0xa14>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d03b      	beq.n	8004d48 <HAL_DMA_IRQHandler+0x8b8>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a74      	ldr	r2, [pc, #464]	@ (8004ea8 <HAL_DMA_IRQHandler+0xa18>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d036      	beq.n	8004d48 <HAL_DMA_IRQHandler+0x8b8>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a73      	ldr	r2, [pc, #460]	@ (8004eac <HAL_DMA_IRQHandler+0xa1c>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d031      	beq.n	8004d48 <HAL_DMA_IRQHandler+0x8b8>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a71      	ldr	r2, [pc, #452]	@ (8004eb0 <HAL_DMA_IRQHandler+0xa20>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d02c      	beq.n	8004d48 <HAL_DMA_IRQHandler+0x8b8>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a70      	ldr	r2, [pc, #448]	@ (8004eb4 <HAL_DMA_IRQHandler+0xa24>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d027      	beq.n	8004d48 <HAL_DMA_IRQHandler+0x8b8>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a6e      	ldr	r2, [pc, #440]	@ (8004eb8 <HAL_DMA_IRQHandler+0xa28>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d022      	beq.n	8004d48 <HAL_DMA_IRQHandler+0x8b8>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a6d      	ldr	r2, [pc, #436]	@ (8004ebc <HAL_DMA_IRQHandler+0xa2c>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d01d      	beq.n	8004d48 <HAL_DMA_IRQHandler+0x8b8>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a6b      	ldr	r2, [pc, #428]	@ (8004ec0 <HAL_DMA_IRQHandler+0xa30>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d018      	beq.n	8004d48 <HAL_DMA_IRQHandler+0x8b8>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a6a      	ldr	r2, [pc, #424]	@ (8004ec4 <HAL_DMA_IRQHandler+0xa34>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d013      	beq.n	8004d48 <HAL_DMA_IRQHandler+0x8b8>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a68      	ldr	r2, [pc, #416]	@ (8004ec8 <HAL_DMA_IRQHandler+0xa38>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d00e      	beq.n	8004d48 <HAL_DMA_IRQHandler+0x8b8>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a67      	ldr	r2, [pc, #412]	@ (8004ecc <HAL_DMA_IRQHandler+0xa3c>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d009      	beq.n	8004d48 <HAL_DMA_IRQHandler+0x8b8>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a65      	ldr	r2, [pc, #404]	@ (8004ed0 <HAL_DMA_IRQHandler+0xa40>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d004      	beq.n	8004d48 <HAL_DMA_IRQHandler+0x8b8>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a64      	ldr	r2, [pc, #400]	@ (8004ed4 <HAL_DMA_IRQHandler+0xa44>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d108      	bne.n	8004d5a <HAL_DMA_IRQHandler+0x8ca>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	681a      	ldr	r2, [r3, #0]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f022 0201 	bic.w	r2, r2, #1
 8004d56:	601a      	str	r2, [r3, #0]
 8004d58:	e007      	b.n	8004d6a <HAL_DMA_IRQHandler+0x8da>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	681a      	ldr	r2, [r3, #0]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f022 0201 	bic.w	r2, r2, #1
 8004d68:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	3301      	adds	r3, #1
 8004d6e:	60fb      	str	r3, [r7, #12]
 8004d70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d72:	429a      	cmp	r2, r3
 8004d74:	d307      	bcc.n	8004d86 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f003 0301 	and.w	r3, r3, #1
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d1f2      	bne.n	8004d6a <HAL_DMA_IRQHandler+0x8da>
 8004d84:	e000      	b.n	8004d88 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004d86:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f003 0301 	and.w	r3, r3, #1
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d004      	beq.n	8004da0 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2203      	movs	r2, #3
 8004d9a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8004d9e:	e003      	b.n	8004da8 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2201      	movs	r2, #1
 8004da4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2200      	movs	r2, #0
 8004dac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	f000 8272 	beq.w	800529e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	4798      	blx	r3
 8004dc2:	e26c      	b.n	800529e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a43      	ldr	r2, [pc, #268]	@ (8004ed8 <HAL_DMA_IRQHandler+0xa48>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d022      	beq.n	8004e14 <HAL_DMA_IRQHandler+0x984>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a42      	ldr	r2, [pc, #264]	@ (8004edc <HAL_DMA_IRQHandler+0xa4c>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d01d      	beq.n	8004e14 <HAL_DMA_IRQHandler+0x984>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a40      	ldr	r2, [pc, #256]	@ (8004ee0 <HAL_DMA_IRQHandler+0xa50>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d018      	beq.n	8004e14 <HAL_DMA_IRQHandler+0x984>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a3f      	ldr	r2, [pc, #252]	@ (8004ee4 <HAL_DMA_IRQHandler+0xa54>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d013      	beq.n	8004e14 <HAL_DMA_IRQHandler+0x984>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a3d      	ldr	r2, [pc, #244]	@ (8004ee8 <HAL_DMA_IRQHandler+0xa58>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d00e      	beq.n	8004e14 <HAL_DMA_IRQHandler+0x984>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a3c      	ldr	r2, [pc, #240]	@ (8004eec <HAL_DMA_IRQHandler+0xa5c>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d009      	beq.n	8004e14 <HAL_DMA_IRQHandler+0x984>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a3a      	ldr	r2, [pc, #232]	@ (8004ef0 <HAL_DMA_IRQHandler+0xa60>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d004      	beq.n	8004e14 <HAL_DMA_IRQHandler+0x984>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a39      	ldr	r2, [pc, #228]	@ (8004ef4 <HAL_DMA_IRQHandler+0xa64>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d101      	bne.n	8004e18 <HAL_DMA_IRQHandler+0x988>
 8004e14:	2301      	movs	r3, #1
 8004e16:	e000      	b.n	8004e1a <HAL_DMA_IRQHandler+0x98a>
 8004e18:	2300      	movs	r3, #0
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	f000 823f 	beq.w	800529e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e2c:	f003 031f 	and.w	r3, r3, #31
 8004e30:	2204      	movs	r2, #4
 8004e32:	409a      	lsls	r2, r3
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	4013      	ands	r3, r2
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	f000 80cd 	beq.w	8004fd8 <HAL_DMA_IRQHandler+0xb48>
 8004e3e:	693b      	ldr	r3, [r7, #16]
 8004e40:	f003 0304 	and.w	r3, r3, #4
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	f000 80c7 	beq.w	8004fd8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e4e:	f003 031f 	and.w	r3, r3, #31
 8004e52:	2204      	movs	r2, #4
 8004e54:	409a      	lsls	r2, r3
 8004e56:	69fb      	ldr	r3, [r7, #28]
 8004e58:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d049      	beq.n	8004ef8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d109      	bne.n	8004e82 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	f000 8210 	beq.w	8005298 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e7c:	6878      	ldr	r0, [r7, #4]
 8004e7e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004e80:	e20a      	b.n	8005298 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	f000 8206 	beq.w	8005298 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e90:	6878      	ldr	r0, [r7, #4]
 8004e92:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004e94:	e200      	b.n	8005298 <HAL_DMA_IRQHandler+0xe08>
 8004e96:	bf00      	nop
 8004e98:	40020010 	.word	0x40020010
 8004e9c:	40020028 	.word	0x40020028
 8004ea0:	40020040 	.word	0x40020040
 8004ea4:	40020058 	.word	0x40020058
 8004ea8:	40020070 	.word	0x40020070
 8004eac:	40020088 	.word	0x40020088
 8004eb0:	400200a0 	.word	0x400200a0
 8004eb4:	400200b8 	.word	0x400200b8
 8004eb8:	40020410 	.word	0x40020410
 8004ebc:	40020428 	.word	0x40020428
 8004ec0:	40020440 	.word	0x40020440
 8004ec4:	40020458 	.word	0x40020458
 8004ec8:	40020470 	.word	0x40020470
 8004ecc:	40020488 	.word	0x40020488
 8004ed0:	400204a0 	.word	0x400204a0
 8004ed4:	400204b8 	.word	0x400204b8
 8004ed8:	58025408 	.word	0x58025408
 8004edc:	5802541c 	.word	0x5802541c
 8004ee0:	58025430 	.word	0x58025430
 8004ee4:	58025444 	.word	0x58025444
 8004ee8:	58025458 	.word	0x58025458
 8004eec:	5802546c 	.word	0x5802546c
 8004ef0:	58025480 	.word	0x58025480
 8004ef4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	f003 0320 	and.w	r3, r3, #32
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d160      	bne.n	8004fc4 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a7f      	ldr	r2, [pc, #508]	@ (8005104 <HAL_DMA_IRQHandler+0xc74>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d04a      	beq.n	8004fa2 <HAL_DMA_IRQHandler+0xb12>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a7d      	ldr	r2, [pc, #500]	@ (8005108 <HAL_DMA_IRQHandler+0xc78>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d045      	beq.n	8004fa2 <HAL_DMA_IRQHandler+0xb12>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a7c      	ldr	r2, [pc, #496]	@ (800510c <HAL_DMA_IRQHandler+0xc7c>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d040      	beq.n	8004fa2 <HAL_DMA_IRQHandler+0xb12>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a7a      	ldr	r2, [pc, #488]	@ (8005110 <HAL_DMA_IRQHandler+0xc80>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d03b      	beq.n	8004fa2 <HAL_DMA_IRQHandler+0xb12>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a79      	ldr	r2, [pc, #484]	@ (8005114 <HAL_DMA_IRQHandler+0xc84>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d036      	beq.n	8004fa2 <HAL_DMA_IRQHandler+0xb12>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a77      	ldr	r2, [pc, #476]	@ (8005118 <HAL_DMA_IRQHandler+0xc88>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d031      	beq.n	8004fa2 <HAL_DMA_IRQHandler+0xb12>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a76      	ldr	r2, [pc, #472]	@ (800511c <HAL_DMA_IRQHandler+0xc8c>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d02c      	beq.n	8004fa2 <HAL_DMA_IRQHandler+0xb12>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a74      	ldr	r2, [pc, #464]	@ (8005120 <HAL_DMA_IRQHandler+0xc90>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d027      	beq.n	8004fa2 <HAL_DMA_IRQHandler+0xb12>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a73      	ldr	r2, [pc, #460]	@ (8005124 <HAL_DMA_IRQHandler+0xc94>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d022      	beq.n	8004fa2 <HAL_DMA_IRQHandler+0xb12>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a71      	ldr	r2, [pc, #452]	@ (8005128 <HAL_DMA_IRQHandler+0xc98>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d01d      	beq.n	8004fa2 <HAL_DMA_IRQHandler+0xb12>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a70      	ldr	r2, [pc, #448]	@ (800512c <HAL_DMA_IRQHandler+0xc9c>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d018      	beq.n	8004fa2 <HAL_DMA_IRQHandler+0xb12>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a6e      	ldr	r2, [pc, #440]	@ (8005130 <HAL_DMA_IRQHandler+0xca0>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d013      	beq.n	8004fa2 <HAL_DMA_IRQHandler+0xb12>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a6d      	ldr	r2, [pc, #436]	@ (8005134 <HAL_DMA_IRQHandler+0xca4>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d00e      	beq.n	8004fa2 <HAL_DMA_IRQHandler+0xb12>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a6b      	ldr	r2, [pc, #428]	@ (8005138 <HAL_DMA_IRQHandler+0xca8>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d009      	beq.n	8004fa2 <HAL_DMA_IRQHandler+0xb12>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a6a      	ldr	r2, [pc, #424]	@ (800513c <HAL_DMA_IRQHandler+0xcac>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d004      	beq.n	8004fa2 <HAL_DMA_IRQHandler+0xb12>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a68      	ldr	r2, [pc, #416]	@ (8005140 <HAL_DMA_IRQHandler+0xcb0>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d108      	bne.n	8004fb4 <HAL_DMA_IRQHandler+0xb24>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	681a      	ldr	r2, [r3, #0]
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f022 0208 	bic.w	r2, r2, #8
 8004fb0:	601a      	str	r2, [r3, #0]
 8004fb2:	e007      	b.n	8004fc4 <HAL_DMA_IRQHandler+0xb34>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	681a      	ldr	r2, [r3, #0]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f022 0204 	bic.w	r2, r2, #4
 8004fc2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	f000 8165 	beq.w	8005298 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004fd6:	e15f      	b.n	8005298 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fdc:	f003 031f 	and.w	r3, r3, #31
 8004fe0:	2202      	movs	r2, #2
 8004fe2:	409a      	lsls	r2, r3
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	4013      	ands	r3, r2
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	f000 80c5 	beq.w	8005178 <HAL_DMA_IRQHandler+0xce8>
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	f003 0302 	and.w	r3, r3, #2
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	f000 80bf 	beq.w	8005178 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ffe:	f003 031f 	and.w	r3, r3, #31
 8005002:	2202      	movs	r2, #2
 8005004:	409a      	lsls	r2, r3
 8005006:	69fb      	ldr	r3, [r7, #28]
 8005008:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005010:	2b00      	cmp	r3, #0
 8005012:	d018      	beq.n	8005046 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800501a:	2b00      	cmp	r3, #0
 800501c:	d109      	bne.n	8005032 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005022:	2b00      	cmp	r3, #0
 8005024:	f000 813a 	beq.w	800529c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800502c:	6878      	ldr	r0, [r7, #4]
 800502e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005030:	e134      	b.n	800529c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005036:	2b00      	cmp	r3, #0
 8005038:	f000 8130 	beq.w	800529c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005040:	6878      	ldr	r0, [r7, #4]
 8005042:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005044:	e12a      	b.n	800529c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	f003 0320 	and.w	r3, r3, #32
 800504c:	2b00      	cmp	r3, #0
 800504e:	f040 8089 	bne.w	8005164 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a2b      	ldr	r2, [pc, #172]	@ (8005104 <HAL_DMA_IRQHandler+0xc74>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d04a      	beq.n	80050f2 <HAL_DMA_IRQHandler+0xc62>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a29      	ldr	r2, [pc, #164]	@ (8005108 <HAL_DMA_IRQHandler+0xc78>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d045      	beq.n	80050f2 <HAL_DMA_IRQHandler+0xc62>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a28      	ldr	r2, [pc, #160]	@ (800510c <HAL_DMA_IRQHandler+0xc7c>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d040      	beq.n	80050f2 <HAL_DMA_IRQHandler+0xc62>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a26      	ldr	r2, [pc, #152]	@ (8005110 <HAL_DMA_IRQHandler+0xc80>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d03b      	beq.n	80050f2 <HAL_DMA_IRQHandler+0xc62>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a25      	ldr	r2, [pc, #148]	@ (8005114 <HAL_DMA_IRQHandler+0xc84>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d036      	beq.n	80050f2 <HAL_DMA_IRQHandler+0xc62>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a23      	ldr	r2, [pc, #140]	@ (8005118 <HAL_DMA_IRQHandler+0xc88>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d031      	beq.n	80050f2 <HAL_DMA_IRQHandler+0xc62>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a22      	ldr	r2, [pc, #136]	@ (800511c <HAL_DMA_IRQHandler+0xc8c>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d02c      	beq.n	80050f2 <HAL_DMA_IRQHandler+0xc62>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a20      	ldr	r2, [pc, #128]	@ (8005120 <HAL_DMA_IRQHandler+0xc90>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d027      	beq.n	80050f2 <HAL_DMA_IRQHandler+0xc62>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a1f      	ldr	r2, [pc, #124]	@ (8005124 <HAL_DMA_IRQHandler+0xc94>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d022      	beq.n	80050f2 <HAL_DMA_IRQHandler+0xc62>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a1d      	ldr	r2, [pc, #116]	@ (8005128 <HAL_DMA_IRQHandler+0xc98>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d01d      	beq.n	80050f2 <HAL_DMA_IRQHandler+0xc62>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a1c      	ldr	r2, [pc, #112]	@ (800512c <HAL_DMA_IRQHandler+0xc9c>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d018      	beq.n	80050f2 <HAL_DMA_IRQHandler+0xc62>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a1a      	ldr	r2, [pc, #104]	@ (8005130 <HAL_DMA_IRQHandler+0xca0>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d013      	beq.n	80050f2 <HAL_DMA_IRQHandler+0xc62>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a19      	ldr	r2, [pc, #100]	@ (8005134 <HAL_DMA_IRQHandler+0xca4>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d00e      	beq.n	80050f2 <HAL_DMA_IRQHandler+0xc62>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a17      	ldr	r2, [pc, #92]	@ (8005138 <HAL_DMA_IRQHandler+0xca8>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d009      	beq.n	80050f2 <HAL_DMA_IRQHandler+0xc62>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a16      	ldr	r2, [pc, #88]	@ (800513c <HAL_DMA_IRQHandler+0xcac>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d004      	beq.n	80050f2 <HAL_DMA_IRQHandler+0xc62>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a14      	ldr	r2, [pc, #80]	@ (8005140 <HAL_DMA_IRQHandler+0xcb0>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d128      	bne.n	8005144 <HAL_DMA_IRQHandler+0xcb4>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	681a      	ldr	r2, [r3, #0]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f022 0214 	bic.w	r2, r2, #20
 8005100:	601a      	str	r2, [r3, #0]
 8005102:	e027      	b.n	8005154 <HAL_DMA_IRQHandler+0xcc4>
 8005104:	40020010 	.word	0x40020010
 8005108:	40020028 	.word	0x40020028
 800510c:	40020040 	.word	0x40020040
 8005110:	40020058 	.word	0x40020058
 8005114:	40020070 	.word	0x40020070
 8005118:	40020088 	.word	0x40020088
 800511c:	400200a0 	.word	0x400200a0
 8005120:	400200b8 	.word	0x400200b8
 8005124:	40020410 	.word	0x40020410
 8005128:	40020428 	.word	0x40020428
 800512c:	40020440 	.word	0x40020440
 8005130:	40020458 	.word	0x40020458
 8005134:	40020470 	.word	0x40020470
 8005138:	40020488 	.word	0x40020488
 800513c:	400204a0 	.word	0x400204a0
 8005140:	400204b8 	.word	0x400204b8
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	681a      	ldr	r2, [r3, #0]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f022 020a 	bic.w	r2, r2, #10
 8005152:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2201      	movs	r2, #1
 8005158:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2200      	movs	r2, #0
 8005160:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005168:	2b00      	cmp	r3, #0
 800516a:	f000 8097 	beq.w	800529c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005176:	e091      	b.n	800529c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800517c:	f003 031f 	and.w	r3, r3, #31
 8005180:	2208      	movs	r2, #8
 8005182:	409a      	lsls	r2, r3
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	4013      	ands	r3, r2
 8005188:	2b00      	cmp	r3, #0
 800518a:	f000 8088 	beq.w	800529e <HAL_DMA_IRQHandler+0xe0e>
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	f003 0308 	and.w	r3, r3, #8
 8005194:	2b00      	cmp	r3, #0
 8005196:	f000 8082 	beq.w	800529e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4a41      	ldr	r2, [pc, #260]	@ (80052a4 <HAL_DMA_IRQHandler+0xe14>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d04a      	beq.n	800523a <HAL_DMA_IRQHandler+0xdaa>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a3f      	ldr	r2, [pc, #252]	@ (80052a8 <HAL_DMA_IRQHandler+0xe18>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d045      	beq.n	800523a <HAL_DMA_IRQHandler+0xdaa>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a3e      	ldr	r2, [pc, #248]	@ (80052ac <HAL_DMA_IRQHandler+0xe1c>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d040      	beq.n	800523a <HAL_DMA_IRQHandler+0xdaa>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a3c      	ldr	r2, [pc, #240]	@ (80052b0 <HAL_DMA_IRQHandler+0xe20>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d03b      	beq.n	800523a <HAL_DMA_IRQHandler+0xdaa>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a3b      	ldr	r2, [pc, #236]	@ (80052b4 <HAL_DMA_IRQHandler+0xe24>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d036      	beq.n	800523a <HAL_DMA_IRQHandler+0xdaa>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a39      	ldr	r2, [pc, #228]	@ (80052b8 <HAL_DMA_IRQHandler+0xe28>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d031      	beq.n	800523a <HAL_DMA_IRQHandler+0xdaa>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a38      	ldr	r2, [pc, #224]	@ (80052bc <HAL_DMA_IRQHandler+0xe2c>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d02c      	beq.n	800523a <HAL_DMA_IRQHandler+0xdaa>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a36      	ldr	r2, [pc, #216]	@ (80052c0 <HAL_DMA_IRQHandler+0xe30>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d027      	beq.n	800523a <HAL_DMA_IRQHandler+0xdaa>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a35      	ldr	r2, [pc, #212]	@ (80052c4 <HAL_DMA_IRQHandler+0xe34>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d022      	beq.n	800523a <HAL_DMA_IRQHandler+0xdaa>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a33      	ldr	r2, [pc, #204]	@ (80052c8 <HAL_DMA_IRQHandler+0xe38>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d01d      	beq.n	800523a <HAL_DMA_IRQHandler+0xdaa>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a32      	ldr	r2, [pc, #200]	@ (80052cc <HAL_DMA_IRQHandler+0xe3c>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d018      	beq.n	800523a <HAL_DMA_IRQHandler+0xdaa>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a30      	ldr	r2, [pc, #192]	@ (80052d0 <HAL_DMA_IRQHandler+0xe40>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d013      	beq.n	800523a <HAL_DMA_IRQHandler+0xdaa>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a2f      	ldr	r2, [pc, #188]	@ (80052d4 <HAL_DMA_IRQHandler+0xe44>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d00e      	beq.n	800523a <HAL_DMA_IRQHandler+0xdaa>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a2d      	ldr	r2, [pc, #180]	@ (80052d8 <HAL_DMA_IRQHandler+0xe48>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d009      	beq.n	800523a <HAL_DMA_IRQHandler+0xdaa>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a2c      	ldr	r2, [pc, #176]	@ (80052dc <HAL_DMA_IRQHandler+0xe4c>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d004      	beq.n	800523a <HAL_DMA_IRQHandler+0xdaa>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4a2a      	ldr	r2, [pc, #168]	@ (80052e0 <HAL_DMA_IRQHandler+0xe50>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d108      	bne.n	800524c <HAL_DMA_IRQHandler+0xdbc>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	681a      	ldr	r2, [r3, #0]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f022 021c 	bic.w	r2, r2, #28
 8005248:	601a      	str	r2, [r3, #0]
 800524a:	e007      	b.n	800525c <HAL_DMA_IRQHandler+0xdcc>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	681a      	ldr	r2, [r3, #0]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f022 020e 	bic.w	r2, r2, #14
 800525a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005260:	f003 031f 	and.w	r3, r3, #31
 8005264:	2201      	movs	r2, #1
 8005266:	409a      	lsls	r2, r3
 8005268:	69fb      	ldr	r3, [r7, #28]
 800526a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2201      	movs	r2, #1
 8005270:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2201      	movs	r2, #1
 8005276:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2200      	movs	r2, #0
 800527e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005286:	2b00      	cmp	r3, #0
 8005288:	d009      	beq.n	800529e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	4798      	blx	r3
 8005292:	e004      	b.n	800529e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005294:	bf00      	nop
 8005296:	e002      	b.n	800529e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005298:	bf00      	nop
 800529a:	e000      	b.n	800529e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800529c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800529e:	3728      	adds	r7, #40	@ 0x28
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bd80      	pop	{r7, pc}
 80052a4:	40020010 	.word	0x40020010
 80052a8:	40020028 	.word	0x40020028
 80052ac:	40020040 	.word	0x40020040
 80052b0:	40020058 	.word	0x40020058
 80052b4:	40020070 	.word	0x40020070
 80052b8:	40020088 	.word	0x40020088
 80052bc:	400200a0 	.word	0x400200a0
 80052c0:	400200b8 	.word	0x400200b8
 80052c4:	40020410 	.word	0x40020410
 80052c8:	40020428 	.word	0x40020428
 80052cc:	40020440 	.word	0x40020440
 80052d0:	40020458 	.word	0x40020458
 80052d4:	40020470 	.word	0x40020470
 80052d8:	40020488 	.word	0x40020488
 80052dc:	400204a0 	.word	0x400204a0
 80052e0:	400204b8 	.word	0x400204b8

080052e4 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(const DMA_HandleTypeDef *hdma)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b083      	sub	sp, #12
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80052f2:	b2db      	uxtb	r3, r3
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	370c      	adds	r7, #12
 80052f8:	46bd      	mov	sp, r7
 80052fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fe:	4770      	bx	lr

08005300 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005300:	b480      	push	{r7}
 8005302:	b087      	sub	sp, #28
 8005304:	af00      	add	r7, sp, #0
 8005306:	60f8      	str	r0, [r7, #12]
 8005308:	60b9      	str	r1, [r7, #8]
 800530a:	607a      	str	r2, [r7, #4]
 800530c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005312:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005318:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a7f      	ldr	r2, [pc, #508]	@ (800551c <DMA_SetConfig+0x21c>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d072      	beq.n	800540a <DMA_SetConfig+0x10a>
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a7d      	ldr	r2, [pc, #500]	@ (8005520 <DMA_SetConfig+0x220>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d06d      	beq.n	800540a <DMA_SetConfig+0x10a>
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4a7c      	ldr	r2, [pc, #496]	@ (8005524 <DMA_SetConfig+0x224>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d068      	beq.n	800540a <DMA_SetConfig+0x10a>
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a7a      	ldr	r2, [pc, #488]	@ (8005528 <DMA_SetConfig+0x228>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d063      	beq.n	800540a <DMA_SetConfig+0x10a>
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a79      	ldr	r2, [pc, #484]	@ (800552c <DMA_SetConfig+0x22c>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d05e      	beq.n	800540a <DMA_SetConfig+0x10a>
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a77      	ldr	r2, [pc, #476]	@ (8005530 <DMA_SetConfig+0x230>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d059      	beq.n	800540a <DMA_SetConfig+0x10a>
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a76      	ldr	r2, [pc, #472]	@ (8005534 <DMA_SetConfig+0x234>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d054      	beq.n	800540a <DMA_SetConfig+0x10a>
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a74      	ldr	r2, [pc, #464]	@ (8005538 <DMA_SetConfig+0x238>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d04f      	beq.n	800540a <DMA_SetConfig+0x10a>
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a73      	ldr	r2, [pc, #460]	@ (800553c <DMA_SetConfig+0x23c>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d04a      	beq.n	800540a <DMA_SetConfig+0x10a>
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a71      	ldr	r2, [pc, #452]	@ (8005540 <DMA_SetConfig+0x240>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d045      	beq.n	800540a <DMA_SetConfig+0x10a>
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a70      	ldr	r2, [pc, #448]	@ (8005544 <DMA_SetConfig+0x244>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d040      	beq.n	800540a <DMA_SetConfig+0x10a>
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a6e      	ldr	r2, [pc, #440]	@ (8005548 <DMA_SetConfig+0x248>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d03b      	beq.n	800540a <DMA_SetConfig+0x10a>
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a6d      	ldr	r2, [pc, #436]	@ (800554c <DMA_SetConfig+0x24c>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d036      	beq.n	800540a <DMA_SetConfig+0x10a>
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a6b      	ldr	r2, [pc, #428]	@ (8005550 <DMA_SetConfig+0x250>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d031      	beq.n	800540a <DMA_SetConfig+0x10a>
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a6a      	ldr	r2, [pc, #424]	@ (8005554 <DMA_SetConfig+0x254>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d02c      	beq.n	800540a <DMA_SetConfig+0x10a>
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a68      	ldr	r2, [pc, #416]	@ (8005558 <DMA_SetConfig+0x258>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d027      	beq.n	800540a <DMA_SetConfig+0x10a>
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a67      	ldr	r2, [pc, #412]	@ (800555c <DMA_SetConfig+0x25c>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d022      	beq.n	800540a <DMA_SetConfig+0x10a>
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a65      	ldr	r2, [pc, #404]	@ (8005560 <DMA_SetConfig+0x260>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d01d      	beq.n	800540a <DMA_SetConfig+0x10a>
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a64      	ldr	r2, [pc, #400]	@ (8005564 <DMA_SetConfig+0x264>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d018      	beq.n	800540a <DMA_SetConfig+0x10a>
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a62      	ldr	r2, [pc, #392]	@ (8005568 <DMA_SetConfig+0x268>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d013      	beq.n	800540a <DMA_SetConfig+0x10a>
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a61      	ldr	r2, [pc, #388]	@ (800556c <DMA_SetConfig+0x26c>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d00e      	beq.n	800540a <DMA_SetConfig+0x10a>
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a5f      	ldr	r2, [pc, #380]	@ (8005570 <DMA_SetConfig+0x270>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d009      	beq.n	800540a <DMA_SetConfig+0x10a>
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a5e      	ldr	r2, [pc, #376]	@ (8005574 <DMA_SetConfig+0x274>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d004      	beq.n	800540a <DMA_SetConfig+0x10a>
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a5c      	ldr	r2, [pc, #368]	@ (8005578 <DMA_SetConfig+0x278>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d101      	bne.n	800540e <DMA_SetConfig+0x10e>
 800540a:	2301      	movs	r3, #1
 800540c:	e000      	b.n	8005410 <DMA_SetConfig+0x110>
 800540e:	2300      	movs	r3, #0
 8005410:	2b00      	cmp	r3, #0
 8005412:	d00d      	beq.n	8005430 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005418:	68fa      	ldr	r2, [r7, #12]
 800541a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800541c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005422:	2b00      	cmp	r3, #0
 8005424:	d004      	beq.n	8005430 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800542a:	68fa      	ldr	r2, [r7, #12]
 800542c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800542e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a39      	ldr	r2, [pc, #228]	@ (800551c <DMA_SetConfig+0x21c>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d04a      	beq.n	80054d0 <DMA_SetConfig+0x1d0>
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a38      	ldr	r2, [pc, #224]	@ (8005520 <DMA_SetConfig+0x220>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d045      	beq.n	80054d0 <DMA_SetConfig+0x1d0>
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a36      	ldr	r2, [pc, #216]	@ (8005524 <DMA_SetConfig+0x224>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d040      	beq.n	80054d0 <DMA_SetConfig+0x1d0>
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a35      	ldr	r2, [pc, #212]	@ (8005528 <DMA_SetConfig+0x228>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d03b      	beq.n	80054d0 <DMA_SetConfig+0x1d0>
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a33      	ldr	r2, [pc, #204]	@ (800552c <DMA_SetConfig+0x22c>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d036      	beq.n	80054d0 <DMA_SetConfig+0x1d0>
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4a32      	ldr	r2, [pc, #200]	@ (8005530 <DMA_SetConfig+0x230>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d031      	beq.n	80054d0 <DMA_SetConfig+0x1d0>
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a30      	ldr	r2, [pc, #192]	@ (8005534 <DMA_SetConfig+0x234>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d02c      	beq.n	80054d0 <DMA_SetConfig+0x1d0>
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a2f      	ldr	r2, [pc, #188]	@ (8005538 <DMA_SetConfig+0x238>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d027      	beq.n	80054d0 <DMA_SetConfig+0x1d0>
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a2d      	ldr	r2, [pc, #180]	@ (800553c <DMA_SetConfig+0x23c>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d022      	beq.n	80054d0 <DMA_SetConfig+0x1d0>
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4a2c      	ldr	r2, [pc, #176]	@ (8005540 <DMA_SetConfig+0x240>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d01d      	beq.n	80054d0 <DMA_SetConfig+0x1d0>
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a2a      	ldr	r2, [pc, #168]	@ (8005544 <DMA_SetConfig+0x244>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d018      	beq.n	80054d0 <DMA_SetConfig+0x1d0>
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a29      	ldr	r2, [pc, #164]	@ (8005548 <DMA_SetConfig+0x248>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d013      	beq.n	80054d0 <DMA_SetConfig+0x1d0>
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a27      	ldr	r2, [pc, #156]	@ (800554c <DMA_SetConfig+0x24c>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d00e      	beq.n	80054d0 <DMA_SetConfig+0x1d0>
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a26      	ldr	r2, [pc, #152]	@ (8005550 <DMA_SetConfig+0x250>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d009      	beq.n	80054d0 <DMA_SetConfig+0x1d0>
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a24      	ldr	r2, [pc, #144]	@ (8005554 <DMA_SetConfig+0x254>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d004      	beq.n	80054d0 <DMA_SetConfig+0x1d0>
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a23      	ldr	r2, [pc, #140]	@ (8005558 <DMA_SetConfig+0x258>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d101      	bne.n	80054d4 <DMA_SetConfig+0x1d4>
 80054d0:	2301      	movs	r3, #1
 80054d2:	e000      	b.n	80054d6 <DMA_SetConfig+0x1d6>
 80054d4:	2300      	movs	r3, #0
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d059      	beq.n	800558e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054de:	f003 031f 	and.w	r3, r3, #31
 80054e2:	223f      	movs	r2, #63	@ 0x3f
 80054e4:	409a      	lsls	r2, r3
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	681a      	ldr	r2, [r3, #0]
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80054f8:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	683a      	ldr	r2, [r7, #0]
 8005500:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	689b      	ldr	r3, [r3, #8]
 8005506:	2b40      	cmp	r3, #64	@ 0x40
 8005508:	d138      	bne.n	800557c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	687a      	ldr	r2, [r7, #4]
 8005510:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	68ba      	ldr	r2, [r7, #8]
 8005518:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800551a:	e086      	b.n	800562a <DMA_SetConfig+0x32a>
 800551c:	40020010 	.word	0x40020010
 8005520:	40020028 	.word	0x40020028
 8005524:	40020040 	.word	0x40020040
 8005528:	40020058 	.word	0x40020058
 800552c:	40020070 	.word	0x40020070
 8005530:	40020088 	.word	0x40020088
 8005534:	400200a0 	.word	0x400200a0
 8005538:	400200b8 	.word	0x400200b8
 800553c:	40020410 	.word	0x40020410
 8005540:	40020428 	.word	0x40020428
 8005544:	40020440 	.word	0x40020440
 8005548:	40020458 	.word	0x40020458
 800554c:	40020470 	.word	0x40020470
 8005550:	40020488 	.word	0x40020488
 8005554:	400204a0 	.word	0x400204a0
 8005558:	400204b8 	.word	0x400204b8
 800555c:	58025408 	.word	0x58025408
 8005560:	5802541c 	.word	0x5802541c
 8005564:	58025430 	.word	0x58025430
 8005568:	58025444 	.word	0x58025444
 800556c:	58025458 	.word	0x58025458
 8005570:	5802546c 	.word	0x5802546c
 8005574:	58025480 	.word	0x58025480
 8005578:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	68ba      	ldr	r2, [r7, #8]
 8005582:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	687a      	ldr	r2, [r7, #4]
 800558a:	60da      	str	r2, [r3, #12]
}
 800558c:	e04d      	b.n	800562a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a29      	ldr	r2, [pc, #164]	@ (8005638 <DMA_SetConfig+0x338>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d022      	beq.n	80055de <DMA_SetConfig+0x2de>
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a27      	ldr	r2, [pc, #156]	@ (800563c <DMA_SetConfig+0x33c>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d01d      	beq.n	80055de <DMA_SetConfig+0x2de>
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a26      	ldr	r2, [pc, #152]	@ (8005640 <DMA_SetConfig+0x340>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d018      	beq.n	80055de <DMA_SetConfig+0x2de>
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a24      	ldr	r2, [pc, #144]	@ (8005644 <DMA_SetConfig+0x344>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d013      	beq.n	80055de <DMA_SetConfig+0x2de>
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a23      	ldr	r2, [pc, #140]	@ (8005648 <DMA_SetConfig+0x348>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d00e      	beq.n	80055de <DMA_SetConfig+0x2de>
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a21      	ldr	r2, [pc, #132]	@ (800564c <DMA_SetConfig+0x34c>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d009      	beq.n	80055de <DMA_SetConfig+0x2de>
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a20      	ldr	r2, [pc, #128]	@ (8005650 <DMA_SetConfig+0x350>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d004      	beq.n	80055de <DMA_SetConfig+0x2de>
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a1e      	ldr	r2, [pc, #120]	@ (8005654 <DMA_SetConfig+0x354>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d101      	bne.n	80055e2 <DMA_SetConfig+0x2e2>
 80055de:	2301      	movs	r3, #1
 80055e0:	e000      	b.n	80055e4 <DMA_SetConfig+0x2e4>
 80055e2:	2300      	movs	r3, #0
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d020      	beq.n	800562a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055ec:	f003 031f 	and.w	r3, r3, #31
 80055f0:	2201      	movs	r2, #1
 80055f2:	409a      	lsls	r2, r3
 80055f4:	693b      	ldr	r3, [r7, #16]
 80055f6:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	683a      	ldr	r2, [r7, #0]
 80055fe:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	689b      	ldr	r3, [r3, #8]
 8005604:	2b40      	cmp	r3, #64	@ 0x40
 8005606:	d108      	bne.n	800561a <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	687a      	ldr	r2, [r7, #4]
 800560e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	68ba      	ldr	r2, [r7, #8]
 8005616:	60da      	str	r2, [r3, #12]
}
 8005618:	e007      	b.n	800562a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	68ba      	ldr	r2, [r7, #8]
 8005620:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	687a      	ldr	r2, [r7, #4]
 8005628:	60da      	str	r2, [r3, #12]
}
 800562a:	bf00      	nop
 800562c:	371c      	adds	r7, #28
 800562e:	46bd      	mov	sp, r7
 8005630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005634:	4770      	bx	lr
 8005636:	bf00      	nop
 8005638:	58025408 	.word	0x58025408
 800563c:	5802541c 	.word	0x5802541c
 8005640:	58025430 	.word	0x58025430
 8005644:	58025444 	.word	0x58025444
 8005648:	58025458 	.word	0x58025458
 800564c:	5802546c 	.word	0x5802546c
 8005650:	58025480 	.word	0x58025480
 8005654:	58025494 	.word	0x58025494

08005658 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005658:	b480      	push	{r7}
 800565a:	b085      	sub	sp, #20
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a42      	ldr	r2, [pc, #264]	@ (8005770 <DMA_CalcBaseAndBitshift+0x118>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d04a      	beq.n	8005700 <DMA_CalcBaseAndBitshift+0xa8>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4a41      	ldr	r2, [pc, #260]	@ (8005774 <DMA_CalcBaseAndBitshift+0x11c>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d045      	beq.n	8005700 <DMA_CalcBaseAndBitshift+0xa8>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a3f      	ldr	r2, [pc, #252]	@ (8005778 <DMA_CalcBaseAndBitshift+0x120>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d040      	beq.n	8005700 <DMA_CalcBaseAndBitshift+0xa8>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4a3e      	ldr	r2, [pc, #248]	@ (800577c <DMA_CalcBaseAndBitshift+0x124>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d03b      	beq.n	8005700 <DMA_CalcBaseAndBitshift+0xa8>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a3c      	ldr	r2, [pc, #240]	@ (8005780 <DMA_CalcBaseAndBitshift+0x128>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d036      	beq.n	8005700 <DMA_CalcBaseAndBitshift+0xa8>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a3b      	ldr	r2, [pc, #236]	@ (8005784 <DMA_CalcBaseAndBitshift+0x12c>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d031      	beq.n	8005700 <DMA_CalcBaseAndBitshift+0xa8>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a39      	ldr	r2, [pc, #228]	@ (8005788 <DMA_CalcBaseAndBitshift+0x130>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d02c      	beq.n	8005700 <DMA_CalcBaseAndBitshift+0xa8>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a38      	ldr	r2, [pc, #224]	@ (800578c <DMA_CalcBaseAndBitshift+0x134>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d027      	beq.n	8005700 <DMA_CalcBaseAndBitshift+0xa8>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a36      	ldr	r2, [pc, #216]	@ (8005790 <DMA_CalcBaseAndBitshift+0x138>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d022      	beq.n	8005700 <DMA_CalcBaseAndBitshift+0xa8>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a35      	ldr	r2, [pc, #212]	@ (8005794 <DMA_CalcBaseAndBitshift+0x13c>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d01d      	beq.n	8005700 <DMA_CalcBaseAndBitshift+0xa8>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a33      	ldr	r2, [pc, #204]	@ (8005798 <DMA_CalcBaseAndBitshift+0x140>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d018      	beq.n	8005700 <DMA_CalcBaseAndBitshift+0xa8>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4a32      	ldr	r2, [pc, #200]	@ (800579c <DMA_CalcBaseAndBitshift+0x144>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d013      	beq.n	8005700 <DMA_CalcBaseAndBitshift+0xa8>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a30      	ldr	r2, [pc, #192]	@ (80057a0 <DMA_CalcBaseAndBitshift+0x148>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d00e      	beq.n	8005700 <DMA_CalcBaseAndBitshift+0xa8>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a2f      	ldr	r2, [pc, #188]	@ (80057a4 <DMA_CalcBaseAndBitshift+0x14c>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d009      	beq.n	8005700 <DMA_CalcBaseAndBitshift+0xa8>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a2d      	ldr	r2, [pc, #180]	@ (80057a8 <DMA_CalcBaseAndBitshift+0x150>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d004      	beq.n	8005700 <DMA_CalcBaseAndBitshift+0xa8>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a2c      	ldr	r2, [pc, #176]	@ (80057ac <DMA_CalcBaseAndBitshift+0x154>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d101      	bne.n	8005704 <DMA_CalcBaseAndBitshift+0xac>
 8005700:	2301      	movs	r3, #1
 8005702:	e000      	b.n	8005706 <DMA_CalcBaseAndBitshift+0xae>
 8005704:	2300      	movs	r3, #0
 8005706:	2b00      	cmp	r3, #0
 8005708:	d024      	beq.n	8005754 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	b2db      	uxtb	r3, r3
 8005710:	3b10      	subs	r3, #16
 8005712:	4a27      	ldr	r2, [pc, #156]	@ (80057b0 <DMA_CalcBaseAndBitshift+0x158>)
 8005714:	fba2 2303 	umull	r2, r3, r2, r3
 8005718:	091b      	lsrs	r3, r3, #4
 800571a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	f003 0307 	and.w	r3, r3, #7
 8005722:	4a24      	ldr	r2, [pc, #144]	@ (80057b4 <DMA_CalcBaseAndBitshift+0x15c>)
 8005724:	5cd3      	ldrb	r3, [r2, r3]
 8005726:	461a      	mov	r2, r3
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	2b03      	cmp	r3, #3
 8005730:	d908      	bls.n	8005744 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	461a      	mov	r2, r3
 8005738:	4b1f      	ldr	r3, [pc, #124]	@ (80057b8 <DMA_CalcBaseAndBitshift+0x160>)
 800573a:	4013      	ands	r3, r2
 800573c:	1d1a      	adds	r2, r3, #4
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	659a      	str	r2, [r3, #88]	@ 0x58
 8005742:	e00d      	b.n	8005760 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	461a      	mov	r2, r3
 800574a:	4b1b      	ldr	r3, [pc, #108]	@ (80057b8 <DMA_CalcBaseAndBitshift+0x160>)
 800574c:	4013      	ands	r3, r2
 800574e:	687a      	ldr	r2, [r7, #4]
 8005750:	6593      	str	r3, [r2, #88]	@ 0x58
 8005752:	e005      	b.n	8005760 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005764:	4618      	mov	r0, r3
 8005766:	3714      	adds	r7, #20
 8005768:	46bd      	mov	sp, r7
 800576a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576e:	4770      	bx	lr
 8005770:	40020010 	.word	0x40020010
 8005774:	40020028 	.word	0x40020028
 8005778:	40020040 	.word	0x40020040
 800577c:	40020058 	.word	0x40020058
 8005780:	40020070 	.word	0x40020070
 8005784:	40020088 	.word	0x40020088
 8005788:	400200a0 	.word	0x400200a0
 800578c:	400200b8 	.word	0x400200b8
 8005790:	40020410 	.word	0x40020410
 8005794:	40020428 	.word	0x40020428
 8005798:	40020440 	.word	0x40020440
 800579c:	40020458 	.word	0x40020458
 80057a0:	40020470 	.word	0x40020470
 80057a4:	40020488 	.word	0x40020488
 80057a8:	400204a0 	.word	0x400204a0
 80057ac:	400204b8 	.word	0x400204b8
 80057b0:	aaaaaaab 	.word	0xaaaaaaab
 80057b4:	08016774 	.word	0x08016774
 80057b8:	fffffc00 	.word	0xfffffc00

080057bc <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 80057bc:	b480      	push	{r7}
 80057be:	b085      	sub	sp, #20
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057c4:	2300      	movs	r3, #0
 80057c6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	699b      	ldr	r3, [r3, #24]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d120      	bne.n	8005812 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057d4:	2b03      	cmp	r3, #3
 80057d6:	d858      	bhi.n	800588a <DMA_CheckFifoParam+0xce>
 80057d8:	a201      	add	r2, pc, #4	@ (adr r2, 80057e0 <DMA_CheckFifoParam+0x24>)
 80057da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057de:	bf00      	nop
 80057e0:	080057f1 	.word	0x080057f1
 80057e4:	08005803 	.word	0x08005803
 80057e8:	080057f1 	.word	0x080057f1
 80057ec:	0800588b 	.word	0x0800588b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057f4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d048      	beq.n	800588e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80057fc:	2301      	movs	r3, #1
 80057fe:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005800:	e045      	b.n	800588e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005806:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800580a:	d142      	bne.n	8005892 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800580c:	2301      	movs	r3, #1
 800580e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005810:	e03f      	b.n	8005892 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	699b      	ldr	r3, [r3, #24]
 8005816:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800581a:	d123      	bne.n	8005864 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005820:	2b03      	cmp	r3, #3
 8005822:	d838      	bhi.n	8005896 <DMA_CheckFifoParam+0xda>
 8005824:	a201      	add	r2, pc, #4	@ (adr r2, 800582c <DMA_CheckFifoParam+0x70>)
 8005826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800582a:	bf00      	nop
 800582c:	0800583d 	.word	0x0800583d
 8005830:	08005843 	.word	0x08005843
 8005834:	0800583d 	.word	0x0800583d
 8005838:	08005855 	.word	0x08005855
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800583c:	2301      	movs	r3, #1
 800583e:	73fb      	strb	r3, [r7, #15]
        break;
 8005840:	e030      	b.n	80058a4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005846:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800584a:	2b00      	cmp	r3, #0
 800584c:	d025      	beq.n	800589a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800584e:	2301      	movs	r3, #1
 8005850:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005852:	e022      	b.n	800589a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005858:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800585c:	d11f      	bne.n	800589e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800585e:	2301      	movs	r3, #1
 8005860:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005862:	e01c      	b.n	800589e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005868:	2b02      	cmp	r3, #2
 800586a:	d902      	bls.n	8005872 <DMA_CheckFifoParam+0xb6>
 800586c:	2b03      	cmp	r3, #3
 800586e:	d003      	beq.n	8005878 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005870:	e018      	b.n	80058a4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8005872:	2301      	movs	r3, #1
 8005874:	73fb      	strb	r3, [r7, #15]
        break;
 8005876:	e015      	b.n	80058a4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800587c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005880:	2b00      	cmp	r3, #0
 8005882:	d00e      	beq.n	80058a2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005884:	2301      	movs	r3, #1
 8005886:	73fb      	strb	r3, [r7, #15]
    break;
 8005888:	e00b      	b.n	80058a2 <DMA_CheckFifoParam+0xe6>
        break;
 800588a:	bf00      	nop
 800588c:	e00a      	b.n	80058a4 <DMA_CheckFifoParam+0xe8>
        break;
 800588e:	bf00      	nop
 8005890:	e008      	b.n	80058a4 <DMA_CheckFifoParam+0xe8>
        break;
 8005892:	bf00      	nop
 8005894:	e006      	b.n	80058a4 <DMA_CheckFifoParam+0xe8>
        break;
 8005896:	bf00      	nop
 8005898:	e004      	b.n	80058a4 <DMA_CheckFifoParam+0xe8>
        break;
 800589a:	bf00      	nop
 800589c:	e002      	b.n	80058a4 <DMA_CheckFifoParam+0xe8>
        break;
 800589e:	bf00      	nop
 80058a0:	e000      	b.n	80058a4 <DMA_CheckFifoParam+0xe8>
    break;
 80058a2:	bf00      	nop
    }
  }

  return status;
 80058a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80058a6:	4618      	mov	r0, r3
 80058a8:	3714      	adds	r7, #20
 80058aa:	46bd      	mov	sp, r7
 80058ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b0:	4770      	bx	lr
 80058b2:	bf00      	nop

080058b4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80058b4:	b480      	push	{r7}
 80058b6:	b085      	sub	sp, #20
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a38      	ldr	r2, [pc, #224]	@ (80059a8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d022      	beq.n	8005912 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a36      	ldr	r2, [pc, #216]	@ (80059ac <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d01d      	beq.n	8005912 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a35      	ldr	r2, [pc, #212]	@ (80059b0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d018      	beq.n	8005912 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a33      	ldr	r2, [pc, #204]	@ (80059b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d013      	beq.n	8005912 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a32      	ldr	r2, [pc, #200]	@ (80059b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d00e      	beq.n	8005912 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a30      	ldr	r2, [pc, #192]	@ (80059bc <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d009      	beq.n	8005912 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a2f      	ldr	r2, [pc, #188]	@ (80059c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d004      	beq.n	8005912 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a2d      	ldr	r2, [pc, #180]	@ (80059c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d101      	bne.n	8005916 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005912:	2301      	movs	r3, #1
 8005914:	e000      	b.n	8005918 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8005916:	2300      	movs	r3, #0
 8005918:	2b00      	cmp	r3, #0
 800591a:	d01a      	beq.n	8005952 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	b2db      	uxtb	r3, r3
 8005922:	3b08      	subs	r3, #8
 8005924:	4a28      	ldr	r2, [pc, #160]	@ (80059c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8005926:	fba2 2303 	umull	r2, r3, r2, r3
 800592a:	091b      	lsrs	r3, r3, #4
 800592c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800592e:	68fa      	ldr	r2, [r7, #12]
 8005930:	4b26      	ldr	r3, [pc, #152]	@ (80059cc <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8005932:	4413      	add	r3, r2
 8005934:	009b      	lsls	r3, r3, #2
 8005936:	461a      	mov	r2, r3
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	4a24      	ldr	r2, [pc, #144]	@ (80059d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005940:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	f003 031f 	and.w	r3, r3, #31
 8005948:	2201      	movs	r2, #1
 800594a:	409a      	lsls	r2, r3
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005950:	e024      	b.n	800599c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	b2db      	uxtb	r3, r3
 8005958:	3b10      	subs	r3, #16
 800595a:	4a1e      	ldr	r2, [pc, #120]	@ (80059d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800595c:	fba2 2303 	umull	r2, r3, r2, r3
 8005960:	091b      	lsrs	r3, r3, #4
 8005962:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	4a1c      	ldr	r2, [pc, #112]	@ (80059d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d806      	bhi.n	800597a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	4a1b      	ldr	r2, [pc, #108]	@ (80059dc <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d902      	bls.n	800597a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	3308      	adds	r3, #8
 8005978:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800597a:	68fa      	ldr	r2, [r7, #12]
 800597c:	4b18      	ldr	r3, [pc, #96]	@ (80059e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800597e:	4413      	add	r3, r2
 8005980:	009b      	lsls	r3, r3, #2
 8005982:	461a      	mov	r2, r3
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	4a16      	ldr	r2, [pc, #88]	@ (80059e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800598c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	f003 031f 	and.w	r3, r3, #31
 8005994:	2201      	movs	r2, #1
 8005996:	409a      	lsls	r2, r3
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800599c:	bf00      	nop
 800599e:	3714      	adds	r7, #20
 80059a0:	46bd      	mov	sp, r7
 80059a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a6:	4770      	bx	lr
 80059a8:	58025408 	.word	0x58025408
 80059ac:	5802541c 	.word	0x5802541c
 80059b0:	58025430 	.word	0x58025430
 80059b4:	58025444 	.word	0x58025444
 80059b8:	58025458 	.word	0x58025458
 80059bc:	5802546c 	.word	0x5802546c
 80059c0:	58025480 	.word	0x58025480
 80059c4:	58025494 	.word	0x58025494
 80059c8:	cccccccd 	.word	0xcccccccd
 80059cc:	16009600 	.word	0x16009600
 80059d0:	58025880 	.word	0x58025880
 80059d4:	aaaaaaab 	.word	0xaaaaaaab
 80059d8:	400204b8 	.word	0x400204b8
 80059dc:	4002040f 	.word	0x4002040f
 80059e0:	10008200 	.word	0x10008200
 80059e4:	40020880 	.word	0x40020880

080059e8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b085      	sub	sp, #20
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	b2db      	uxtb	r3, r3
 80059f6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d04a      	beq.n	8005a94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	2b08      	cmp	r3, #8
 8005a02:	d847      	bhi.n	8005a94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4a25      	ldr	r2, [pc, #148]	@ (8005aa0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d022      	beq.n	8005a54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4a24      	ldr	r2, [pc, #144]	@ (8005aa4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d01d      	beq.n	8005a54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4a22      	ldr	r2, [pc, #136]	@ (8005aa8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d018      	beq.n	8005a54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4a21      	ldr	r2, [pc, #132]	@ (8005aac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d013      	beq.n	8005a54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a1f      	ldr	r2, [pc, #124]	@ (8005ab0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d00e      	beq.n	8005a54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a1e      	ldr	r2, [pc, #120]	@ (8005ab4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d009      	beq.n	8005a54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a1c      	ldr	r2, [pc, #112]	@ (8005ab8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d004      	beq.n	8005a54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4a1b      	ldr	r2, [pc, #108]	@ (8005abc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d101      	bne.n	8005a58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005a54:	2301      	movs	r3, #1
 8005a56:	e000      	b.n	8005a5a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005a58:	2300      	movs	r3, #0
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d00a      	beq.n	8005a74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005a5e:	68fa      	ldr	r2, [r7, #12]
 8005a60:	4b17      	ldr	r3, [pc, #92]	@ (8005ac0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005a62:	4413      	add	r3, r2
 8005a64:	009b      	lsls	r3, r3, #2
 8005a66:	461a      	mov	r2, r3
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	4a15      	ldr	r2, [pc, #84]	@ (8005ac4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005a70:	671a      	str	r2, [r3, #112]	@ 0x70
 8005a72:	e009      	b.n	8005a88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005a74:	68fa      	ldr	r2, [r7, #12]
 8005a76:	4b14      	ldr	r3, [pc, #80]	@ (8005ac8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005a78:	4413      	add	r3, r2
 8005a7a:	009b      	lsls	r3, r3, #2
 8005a7c:	461a      	mov	r2, r3
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	4a11      	ldr	r2, [pc, #68]	@ (8005acc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005a86:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	3b01      	subs	r3, #1
 8005a8c:	2201      	movs	r2, #1
 8005a8e:	409a      	lsls	r2, r3
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8005a94:	bf00      	nop
 8005a96:	3714      	adds	r7, #20
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9e:	4770      	bx	lr
 8005aa0:	58025408 	.word	0x58025408
 8005aa4:	5802541c 	.word	0x5802541c
 8005aa8:	58025430 	.word	0x58025430
 8005aac:	58025444 	.word	0x58025444
 8005ab0:	58025458 	.word	0x58025458
 8005ab4:	5802546c 	.word	0x5802546c
 8005ab8:	58025480 	.word	0x58025480
 8005abc:	58025494 	.word	0x58025494
 8005ac0:	1600963f 	.word	0x1600963f
 8005ac4:	58025940 	.word	0x58025940
 8005ac8:	1000823f 	.word	0x1000823f
 8005acc:	40020940 	.word	0x40020940

08005ad0 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress: The second memory Buffer address in case of multi buffer Transfer
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b086      	sub	sp, #24
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	60f8      	str	r0, [r7, #12]
 8005ad8:	60b9      	str	r1, [r7, #8]
 8005ada:	607a      	str	r2, [r7, #4]
 8005adc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005ade:	2300      	movs	r3, #0
 8005ae0:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Memory-to-memory transfer not supported in double buffering mode */
  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	689b      	ldr	r3, [r3, #8]
 8005ae6:	2b80      	cmp	r3, #128	@ 0x80
 8005ae8:	d105      	bne.n	8005af6 <HAL_DMAEx_MultiBufferStart_IT+0x26>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005af0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8005af2:	2301      	movs	r3, #1
 8005af4:	e315      	b.n	8006122 <HAL_DMAEx_MultiBufferStart_IT+0x652>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005afc:	2b01      	cmp	r3, #1
 8005afe:	d101      	bne.n	8005b04 <HAL_DMAEx_MultiBufferStart_IT+0x34>
 8005b00:	2302      	movs	r3, #2
 8005b02:	e30e      	b.n	8006122 <HAL_DMAEx_MultiBufferStart_IT+0x652>
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2201      	movs	r2, #1
 8005b08:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005b12:	b2db      	uxtb	r3, r3
 8005b14:	2b01      	cmp	r3, #1
 8005b16:	f040 82fd 	bne.w	8006114 <HAL_DMAEx_MultiBufferStart_IT+0x644>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	2202      	movs	r2, #2
 8005b1e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	2200      	movs	r2, #0
 8005b26:	655a      	str	r2, [r3, #84]	@ 0x54

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4a82      	ldr	r2, [pc, #520]	@ (8005d38 <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d04a      	beq.n	8005bc8 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4a81      	ldr	r2, [pc, #516]	@ (8005d3c <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d045      	beq.n	8005bc8 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4a7f      	ldr	r2, [pc, #508]	@ (8005d40 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d040      	beq.n	8005bc8 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4a7e      	ldr	r2, [pc, #504]	@ (8005d44 <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d03b      	beq.n	8005bc8 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a7c      	ldr	r2, [pc, #496]	@ (8005d48 <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d036      	beq.n	8005bc8 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a7b      	ldr	r2, [pc, #492]	@ (8005d4c <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d031      	beq.n	8005bc8 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a79      	ldr	r2, [pc, #484]	@ (8005d50 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d02c      	beq.n	8005bc8 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a78      	ldr	r2, [pc, #480]	@ (8005d54 <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d027      	beq.n	8005bc8 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4a76      	ldr	r2, [pc, #472]	@ (8005d58 <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d022      	beq.n	8005bc8 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a75      	ldr	r2, [pc, #468]	@ (8005d5c <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d01d      	beq.n	8005bc8 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a73      	ldr	r2, [pc, #460]	@ (8005d60 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d018      	beq.n	8005bc8 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a72      	ldr	r2, [pc, #456]	@ (8005d64 <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d013      	beq.n	8005bc8 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a70      	ldr	r2, [pc, #448]	@ (8005d68 <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d00e      	beq.n	8005bc8 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4a6f      	ldr	r2, [pc, #444]	@ (8005d6c <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d009      	beq.n	8005bc8 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a6d      	ldr	r2, [pc, #436]	@ (8005d70 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d004      	beq.n	8005bc8 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4a6c      	ldr	r2, [pc, #432]	@ (8005d74 <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d101      	bne.n	8005bcc <HAL_DMAEx_MultiBufferStart_IT+0xfc>
 8005bc8:	2301      	movs	r3, #1
 8005bca:	e000      	b.n	8005bce <HAL_DMAEx_MultiBufferStart_IT+0xfe>
 8005bcc:	2300      	movs	r3, #0
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d018      	beq.n	8005c04 <HAL_DMAEx_MultiBufferStart_IT+0x134>
    {
      /* Enable the Double buffer mode */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR |= DMA_SxCR_DBM;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	681a      	ldr	r2, [r3, #0]
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8005be0:	601a      	str	r2, [r3, #0]

      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = SecondMemAddress;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	683a      	ldr	r2, [r7, #0]
 8005be8:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 8U));
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bee:	3308      	adds	r3, #8
 8005bf0:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bf6:	f003 031f 	and.w	r3, r3, #31
 8005bfa:	223f      	movs	r2, #63	@ 0x3f
 8005bfc:	409a      	lsls	r2, r3
 8005bfe:	693b      	ldr	r3, [r7, #16]
 8005c00:	601a      	str	r2, [r3, #0]
 8005c02:	e018      	b.n	8005c36 <HAL_DMAEx_MultiBufferStart_IT+0x166>
    }
    else /* BDMA instance(s) */
    {
      /* Enable the Double buffer mode */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR |= (BDMA_CCR_DBM | BDMA_CCR_CIRC);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	6819      	ldr	r1, [r3, #0]
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681a      	ldr	r2, [r3, #0]
 8005c0e:	f248 0320 	movw	r3, #32800	@ 0x8020
 8005c12:	430b      	orrs	r3, r1
 8005c14:	6013      	str	r3, [r2, #0]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = SecondMemAddress;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	683a      	ldr	r2, [r7, #0]
 8005c1c:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 4U));
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c22:	3304      	adds	r3, #4
 8005c24:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c2a:	f003 031f 	and.w	r3, r3, #31
 8005c2e:	2201      	movs	r2, #1
 8005c30:	409a      	lsls	r2, r3
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	601a      	str	r2, [r3, #0]
    }

    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005c36:	6a3b      	ldr	r3, [r7, #32]
 8005c38:	687a      	ldr	r2, [r7, #4]
 8005c3a:	68b9      	ldr	r1, [r7, #8]
 8005c3c:	68f8      	ldr	r0, [r7, #12]
 8005c3e:	f000 fb41 	bl	80062c4 <DMA_MultiBufferSetConfig>

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4a3c      	ldr	r2, [pc, #240]	@ (8005d38 <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d072      	beq.n	8005d32 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4a3a      	ldr	r2, [pc, #232]	@ (8005d3c <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d06d      	beq.n	8005d32 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a39      	ldr	r2, [pc, #228]	@ (8005d40 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d068      	beq.n	8005d32 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a37      	ldr	r2, [pc, #220]	@ (8005d44 <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d063      	beq.n	8005d32 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4a36      	ldr	r2, [pc, #216]	@ (8005d48 <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d05e      	beq.n	8005d32 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a34      	ldr	r2, [pc, #208]	@ (8005d4c <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d059      	beq.n	8005d32 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4a33      	ldr	r2, [pc, #204]	@ (8005d50 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d054      	beq.n	8005d32 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a31      	ldr	r2, [pc, #196]	@ (8005d54 <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d04f      	beq.n	8005d32 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a30      	ldr	r2, [pc, #192]	@ (8005d58 <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d04a      	beq.n	8005d32 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a2e      	ldr	r2, [pc, #184]	@ (8005d5c <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d045      	beq.n	8005d32 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4a2d      	ldr	r2, [pc, #180]	@ (8005d60 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d040      	beq.n	8005d32 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a2b      	ldr	r2, [pc, #172]	@ (8005d64 <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d03b      	beq.n	8005d32 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4a2a      	ldr	r2, [pc, #168]	@ (8005d68 <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d036      	beq.n	8005d32 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a28      	ldr	r2, [pc, #160]	@ (8005d6c <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d031      	beq.n	8005d32 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4a27      	ldr	r2, [pc, #156]	@ (8005d70 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d02c      	beq.n	8005d32 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4a25      	ldr	r2, [pc, #148]	@ (8005d74 <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d027      	beq.n	8005d32 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4a24      	ldr	r2, [pc, #144]	@ (8005d78 <HAL_DMAEx_MultiBufferStart_IT+0x2a8>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d022      	beq.n	8005d32 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a22      	ldr	r2, [pc, #136]	@ (8005d7c <HAL_DMAEx_MultiBufferStart_IT+0x2ac>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d01d      	beq.n	8005d32 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a21      	ldr	r2, [pc, #132]	@ (8005d80 <HAL_DMAEx_MultiBufferStart_IT+0x2b0>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d018      	beq.n	8005d32 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4a1f      	ldr	r2, [pc, #124]	@ (8005d84 <HAL_DMAEx_MultiBufferStart_IT+0x2b4>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d013      	beq.n	8005d32 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4a1e      	ldr	r2, [pc, #120]	@ (8005d88 <HAL_DMAEx_MultiBufferStart_IT+0x2b8>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d00e      	beq.n	8005d32 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4a1c      	ldr	r2, [pc, #112]	@ (8005d8c <HAL_DMAEx_MultiBufferStart_IT+0x2bc>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d009      	beq.n	8005d32 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4a1b      	ldr	r2, [pc, #108]	@ (8005d90 <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d004      	beq.n	8005d32 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4a19      	ldr	r2, [pc, #100]	@ (8005d94 <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d132      	bne.n	8005d98 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>
 8005d32:	2301      	movs	r3, #1
 8005d34:	e031      	b.n	8005d9a <HAL_DMAEx_MultiBufferStart_IT+0x2ca>
 8005d36:	bf00      	nop
 8005d38:	40020010 	.word	0x40020010
 8005d3c:	40020028 	.word	0x40020028
 8005d40:	40020040 	.word	0x40020040
 8005d44:	40020058 	.word	0x40020058
 8005d48:	40020070 	.word	0x40020070
 8005d4c:	40020088 	.word	0x40020088
 8005d50:	400200a0 	.word	0x400200a0
 8005d54:	400200b8 	.word	0x400200b8
 8005d58:	40020410 	.word	0x40020410
 8005d5c:	40020428 	.word	0x40020428
 8005d60:	40020440 	.word	0x40020440
 8005d64:	40020458 	.word	0x40020458
 8005d68:	40020470 	.word	0x40020470
 8005d6c:	40020488 	.word	0x40020488
 8005d70:	400204a0 	.word	0x400204a0
 8005d74:	400204b8 	.word	0x400204b8
 8005d78:	58025408 	.word	0x58025408
 8005d7c:	5802541c 	.word	0x5802541c
 8005d80:	58025430 	.word	0x58025430
 8005d84:	58025444 	.word	0x58025444
 8005d88:	58025458 	.word	0x58025458
 8005d8c:	5802546c 	.word	0x5802546c
 8005d90:	58025480 	.word	0x58025480
 8005d94:	58025494 	.word	0x58025494
 8005d98:	2300      	movs	r3, #0
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d00d      	beq.n	8005dba <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005da2:	68fa      	ldr	r2, [r7, #12]
 8005da4:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005da6:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d004      	beq.n	8005dba <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
      {
        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005db4:	68fa      	ldr	r2, [r7, #12]
 8005db6:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005db8:	605a      	str	r2, [r3, #4]
      }
    }

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4a3b      	ldr	r2, [pc, #236]	@ (8005eac <HAL_DMAEx_MultiBufferStart_IT+0x3dc>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d04a      	beq.n	8005e5a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a39      	ldr	r2, [pc, #228]	@ (8005eb0 <HAL_DMAEx_MultiBufferStart_IT+0x3e0>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d045      	beq.n	8005e5a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4a38      	ldr	r2, [pc, #224]	@ (8005eb4 <HAL_DMAEx_MultiBufferStart_IT+0x3e4>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d040      	beq.n	8005e5a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4a36      	ldr	r2, [pc, #216]	@ (8005eb8 <HAL_DMAEx_MultiBufferStart_IT+0x3e8>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d03b      	beq.n	8005e5a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4a35      	ldr	r2, [pc, #212]	@ (8005ebc <HAL_DMAEx_MultiBufferStart_IT+0x3ec>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d036      	beq.n	8005e5a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a33      	ldr	r2, [pc, #204]	@ (8005ec0 <HAL_DMAEx_MultiBufferStart_IT+0x3f0>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d031      	beq.n	8005e5a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4a32      	ldr	r2, [pc, #200]	@ (8005ec4 <HAL_DMAEx_MultiBufferStart_IT+0x3f4>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d02c      	beq.n	8005e5a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a30      	ldr	r2, [pc, #192]	@ (8005ec8 <HAL_DMAEx_MultiBufferStart_IT+0x3f8>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d027      	beq.n	8005e5a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4a2f      	ldr	r2, [pc, #188]	@ (8005ecc <HAL_DMAEx_MultiBufferStart_IT+0x3fc>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d022      	beq.n	8005e5a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a2d      	ldr	r2, [pc, #180]	@ (8005ed0 <HAL_DMAEx_MultiBufferStart_IT+0x400>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d01d      	beq.n	8005e5a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4a2c      	ldr	r2, [pc, #176]	@ (8005ed4 <HAL_DMAEx_MultiBufferStart_IT+0x404>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d018      	beq.n	8005e5a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a2a      	ldr	r2, [pc, #168]	@ (8005ed8 <HAL_DMAEx_MultiBufferStart_IT+0x408>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d013      	beq.n	8005e5a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4a29      	ldr	r2, [pc, #164]	@ (8005edc <HAL_DMAEx_MultiBufferStart_IT+0x40c>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d00e      	beq.n	8005e5a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a27      	ldr	r2, [pc, #156]	@ (8005ee0 <HAL_DMAEx_MultiBufferStart_IT+0x410>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d009      	beq.n	8005e5a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a26      	ldr	r2, [pc, #152]	@ (8005ee4 <HAL_DMAEx_MultiBufferStart_IT+0x414>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d004      	beq.n	8005e5a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a24      	ldr	r2, [pc, #144]	@ (8005ee8 <HAL_DMAEx_MultiBufferStart_IT+0x418>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d101      	bne.n	8005e5e <HAL_DMAEx_MultiBufferStart_IT+0x38e>
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	e000      	b.n	8005e60 <HAL_DMAEx_MultiBufferStart_IT+0x390>
 8005e5e:	2300      	movs	r3, #0
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d043      	beq.n	8005eec <HAL_DMAEx_MultiBufferStart_IT+0x41c>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f023 021e 	bic.w	r2, r3, #30
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f042 0216 	orr.w	r2, r2, #22
 8005e76:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR |= DMA_IT_FE;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	695a      	ldr	r2, [r3, #20]
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005e86:	615a      	str	r2, [r3, #20]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d103      	bne.n	8005e98 <HAL_DMAEx_MultiBufferStart_IT+0x3c8>
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d043      	beq.n	8005f20 <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	681a      	ldr	r2, [r3, #0]
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f042 0208 	orr.w	r2, r2, #8
 8005ea6:	601a      	str	r2, [r3, #0]
 8005ea8:	e03a      	b.n	8005f20 <HAL_DMAEx_MultiBufferStart_IT+0x450>
 8005eaa:	bf00      	nop
 8005eac:	40020010 	.word	0x40020010
 8005eb0:	40020028 	.word	0x40020028
 8005eb4:	40020040 	.word	0x40020040
 8005eb8:	40020058 	.word	0x40020058
 8005ebc:	40020070 	.word	0x40020070
 8005ec0:	40020088 	.word	0x40020088
 8005ec4:	400200a0 	.word	0x400200a0
 8005ec8:	400200b8 	.word	0x400200b8
 8005ecc:	40020410 	.word	0x40020410
 8005ed0:	40020428 	.word	0x40020428
 8005ed4:	40020440 	.word	0x40020440
 8005ed8:	40020458 	.word	0x40020458
 8005edc:	40020470 	.word	0x40020470
 8005ee0:	40020488 	.word	0x40020488
 8005ee4:	400204a0 	.word	0x400204a0
 8005ee8:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA instance(s) */
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f023 020e 	bic.w	r2, r3, #14
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f042 020a 	orr.w	r2, r2, #10
 8005efe:	601a      	str	r2, [r3, #0]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d103      	bne.n	8005f10 <HAL_DMAEx_MultiBufferStart_IT+0x440>
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d007      	beq.n	8005f20 <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	681a      	ldr	r2, [r3, #0]
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f042 0204 	orr.w	r2, r2, #4
 8005f1e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4a81      	ldr	r2, [pc, #516]	@ (800612c <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d072      	beq.n	8006010 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4a80      	ldr	r2, [pc, #512]	@ (8006130 <HAL_DMAEx_MultiBufferStart_IT+0x660>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d06d      	beq.n	8006010 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4a7e      	ldr	r2, [pc, #504]	@ (8006134 <HAL_DMAEx_MultiBufferStart_IT+0x664>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d068      	beq.n	8006010 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4a7d      	ldr	r2, [pc, #500]	@ (8006138 <HAL_DMAEx_MultiBufferStart_IT+0x668>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d063      	beq.n	8006010 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a7b      	ldr	r2, [pc, #492]	@ (800613c <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d05e      	beq.n	8006010 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4a7a      	ldr	r2, [pc, #488]	@ (8006140 <HAL_DMAEx_MultiBufferStart_IT+0x670>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d059      	beq.n	8006010 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a78      	ldr	r2, [pc, #480]	@ (8006144 <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d054      	beq.n	8006010 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4a77      	ldr	r2, [pc, #476]	@ (8006148 <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d04f      	beq.n	8006010 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4a75      	ldr	r2, [pc, #468]	@ (800614c <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d04a      	beq.n	8006010 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4a74      	ldr	r2, [pc, #464]	@ (8006150 <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d045      	beq.n	8006010 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4a72      	ldr	r2, [pc, #456]	@ (8006154 <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d040      	beq.n	8006010 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4a71      	ldr	r2, [pc, #452]	@ (8006158 <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d03b      	beq.n	8006010 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a6f      	ldr	r2, [pc, #444]	@ (800615c <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d036      	beq.n	8006010 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4a6e      	ldr	r2, [pc, #440]	@ (8006160 <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d031      	beq.n	8006010 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4a6c      	ldr	r2, [pc, #432]	@ (8006164 <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d02c      	beq.n	8006010 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4a6b      	ldr	r2, [pc, #428]	@ (8006168 <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d027      	beq.n	8006010 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4a69      	ldr	r2, [pc, #420]	@ (800616c <HAL_DMAEx_MultiBufferStart_IT+0x69c>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d022      	beq.n	8006010 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4a68      	ldr	r2, [pc, #416]	@ (8006170 <HAL_DMAEx_MultiBufferStart_IT+0x6a0>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d01d      	beq.n	8006010 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4a66      	ldr	r2, [pc, #408]	@ (8006174 <HAL_DMAEx_MultiBufferStart_IT+0x6a4>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d018      	beq.n	8006010 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4a65      	ldr	r2, [pc, #404]	@ (8006178 <HAL_DMAEx_MultiBufferStart_IT+0x6a8>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d013      	beq.n	8006010 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4a63      	ldr	r2, [pc, #396]	@ (800617c <HAL_DMAEx_MultiBufferStart_IT+0x6ac>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d00e      	beq.n	8006010 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4a62      	ldr	r2, [pc, #392]	@ (8006180 <HAL_DMAEx_MultiBufferStart_IT+0x6b0>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d009      	beq.n	8006010 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4a60      	ldr	r2, [pc, #384]	@ (8006184 <HAL_DMAEx_MultiBufferStart_IT+0x6b4>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d004      	beq.n	8006010 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4a5f      	ldr	r2, [pc, #380]	@ (8006188 <HAL_DMAEx_MultiBufferStart_IT+0x6b8>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d101      	bne.n	8006014 <HAL_DMAEx_MultiBufferStart_IT+0x544>
 8006010:	2301      	movs	r3, #1
 8006012:	e000      	b.n	8006016 <HAL_DMAEx_MultiBufferStart_IT+0x546>
 8006014:	2300      	movs	r3, #0
 8006016:	2b00      	cmp	r3, #0
 8006018:	d01a      	beq.n	8006050 <HAL_DMAEx_MultiBufferStart_IT+0x580>
    {
      /* Check if DMAMUX Synchronization is enabled*/
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006024:	2b00      	cmp	r3, #0
 8006026:	d007      	beq.n	8006038 <HAL_DMAEx_MultiBufferStart_IT+0x568>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800602c:	681a      	ldr	r2, [r3, #0]
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006032:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006036:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800603c:	2b00      	cmp	r3, #0
 800603e:	d007      	beq.n	8006050 <HAL_DMAEx_MultiBufferStart_IT+0x580>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT*/
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006044:	681a      	ldr	r2, [r3, #0]
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800604a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800604e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4a35      	ldr	r2, [pc, #212]	@ (800612c <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d04a      	beq.n	80060f0 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a34      	ldr	r2, [pc, #208]	@ (8006130 <HAL_DMAEx_MultiBufferStart_IT+0x660>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d045      	beq.n	80060f0 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a32      	ldr	r2, [pc, #200]	@ (8006134 <HAL_DMAEx_MultiBufferStart_IT+0x664>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d040      	beq.n	80060f0 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a31      	ldr	r2, [pc, #196]	@ (8006138 <HAL_DMAEx_MultiBufferStart_IT+0x668>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d03b      	beq.n	80060f0 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a2f      	ldr	r2, [pc, #188]	@ (800613c <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d036      	beq.n	80060f0 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a2e      	ldr	r2, [pc, #184]	@ (8006140 <HAL_DMAEx_MultiBufferStart_IT+0x670>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d031      	beq.n	80060f0 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a2c      	ldr	r2, [pc, #176]	@ (8006144 <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d02c      	beq.n	80060f0 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4a2b      	ldr	r2, [pc, #172]	@ (8006148 <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d027      	beq.n	80060f0 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a29      	ldr	r2, [pc, #164]	@ (800614c <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d022      	beq.n	80060f0 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4a28      	ldr	r2, [pc, #160]	@ (8006150 <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d01d      	beq.n	80060f0 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4a26      	ldr	r2, [pc, #152]	@ (8006154 <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d018      	beq.n	80060f0 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4a25      	ldr	r2, [pc, #148]	@ (8006158 <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d013      	beq.n	80060f0 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4a23      	ldr	r2, [pc, #140]	@ (800615c <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d00e      	beq.n	80060f0 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4a22      	ldr	r2, [pc, #136]	@ (8006160 <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d009      	beq.n	80060f0 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a20      	ldr	r2, [pc, #128]	@ (8006164 <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d004      	beq.n	80060f0 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a1f      	ldr	r2, [pc, #124]	@ (8006168 <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d108      	bne.n	8006102 <HAL_DMAEx_MultiBufferStart_IT+0x632>
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	681a      	ldr	r2, [r3, #0]
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f042 0201 	orr.w	r2, r2, #1
 80060fe:	601a      	str	r2, [r3, #0]
 8006100:	e00e      	b.n	8006120 <HAL_DMAEx_MultiBufferStart_IT+0x650>
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	681a      	ldr	r2, [r3, #0]
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f042 0201 	orr.w	r2, r2, #1
 8006110:	601a      	str	r2, [r3, #0]
 8006112:	e005      	b.n	8006120 <HAL_DMAEx_MultiBufferStart_IT+0x650>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800611a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return error status */
    status = HAL_ERROR;
 800611c:	2301      	movs	r3, #1
 800611e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8006120:	7dfb      	ldrb	r3, [r7, #23]
}
 8006122:	4618      	mov	r0, r3
 8006124:	3718      	adds	r7, #24
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}
 800612a:	bf00      	nop
 800612c:	40020010 	.word	0x40020010
 8006130:	40020028 	.word	0x40020028
 8006134:	40020040 	.word	0x40020040
 8006138:	40020058 	.word	0x40020058
 800613c:	40020070 	.word	0x40020070
 8006140:	40020088 	.word	0x40020088
 8006144:	400200a0 	.word	0x400200a0
 8006148:	400200b8 	.word	0x400200b8
 800614c:	40020410 	.word	0x40020410
 8006150:	40020428 	.word	0x40020428
 8006154:	40020440 	.word	0x40020440
 8006158:	40020458 	.word	0x40020458
 800615c:	40020470 	.word	0x40020470
 8006160:	40020488 	.word	0x40020488
 8006164:	400204a0 	.word	0x400204a0
 8006168:	400204b8 	.word	0x400204b8
 800616c:	58025408 	.word	0x58025408
 8006170:	5802541c 	.word	0x5802541c
 8006174:	58025430 	.word	0x58025430
 8006178:	58025444 	.word	0x58025444
 800617c:	58025458 	.word	0x58025458
 8006180:	5802546c 	.word	0x5802546c
 8006184:	58025480 	.word	0x58025480
 8006188:	58025494 	.word	0x58025494

0800618c <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 800618c:	b480      	push	{r7}
 800618e:	b085      	sub	sp, #20
 8006190:	af00      	add	r7, sp, #0
 8006192:	60f8      	str	r0, [r7, #12]
 8006194:	60b9      	str	r1, [r7, #8]
 8006196:	4613      	mov	r3, r2
 8006198:	71fb      	strb	r3, [r7, #7]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4a39      	ldr	r2, [pc, #228]	@ (8006284 <HAL_DMAEx_ChangeMemory+0xf8>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d04a      	beq.n	800623a <HAL_DMAEx_ChangeMemory+0xae>
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4a37      	ldr	r2, [pc, #220]	@ (8006288 <HAL_DMAEx_ChangeMemory+0xfc>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d045      	beq.n	800623a <HAL_DMAEx_ChangeMemory+0xae>
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	4a36      	ldr	r2, [pc, #216]	@ (800628c <HAL_DMAEx_ChangeMemory+0x100>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d040      	beq.n	800623a <HAL_DMAEx_ChangeMemory+0xae>
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4a34      	ldr	r2, [pc, #208]	@ (8006290 <HAL_DMAEx_ChangeMemory+0x104>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d03b      	beq.n	800623a <HAL_DMAEx_ChangeMemory+0xae>
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	4a33      	ldr	r2, [pc, #204]	@ (8006294 <HAL_DMAEx_ChangeMemory+0x108>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d036      	beq.n	800623a <HAL_DMAEx_ChangeMemory+0xae>
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	4a31      	ldr	r2, [pc, #196]	@ (8006298 <HAL_DMAEx_ChangeMemory+0x10c>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d031      	beq.n	800623a <HAL_DMAEx_ChangeMemory+0xae>
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4a30      	ldr	r2, [pc, #192]	@ (800629c <HAL_DMAEx_ChangeMemory+0x110>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d02c      	beq.n	800623a <HAL_DMAEx_ChangeMemory+0xae>
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4a2e      	ldr	r2, [pc, #184]	@ (80062a0 <HAL_DMAEx_ChangeMemory+0x114>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d027      	beq.n	800623a <HAL_DMAEx_ChangeMemory+0xae>
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4a2d      	ldr	r2, [pc, #180]	@ (80062a4 <HAL_DMAEx_ChangeMemory+0x118>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d022      	beq.n	800623a <HAL_DMAEx_ChangeMemory+0xae>
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4a2b      	ldr	r2, [pc, #172]	@ (80062a8 <HAL_DMAEx_ChangeMemory+0x11c>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d01d      	beq.n	800623a <HAL_DMAEx_ChangeMemory+0xae>
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	4a2a      	ldr	r2, [pc, #168]	@ (80062ac <HAL_DMAEx_ChangeMemory+0x120>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d018      	beq.n	800623a <HAL_DMAEx_ChangeMemory+0xae>
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4a28      	ldr	r2, [pc, #160]	@ (80062b0 <HAL_DMAEx_ChangeMemory+0x124>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d013      	beq.n	800623a <HAL_DMAEx_ChangeMemory+0xae>
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4a27      	ldr	r2, [pc, #156]	@ (80062b4 <HAL_DMAEx_ChangeMemory+0x128>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d00e      	beq.n	800623a <HAL_DMAEx_ChangeMemory+0xae>
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4a25      	ldr	r2, [pc, #148]	@ (80062b8 <HAL_DMAEx_ChangeMemory+0x12c>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d009      	beq.n	800623a <HAL_DMAEx_ChangeMemory+0xae>
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4a24      	ldr	r2, [pc, #144]	@ (80062bc <HAL_DMAEx_ChangeMemory+0x130>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d004      	beq.n	800623a <HAL_DMAEx_ChangeMemory+0xae>
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a22      	ldr	r2, [pc, #136]	@ (80062c0 <HAL_DMAEx_ChangeMemory+0x134>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d101      	bne.n	800623e <HAL_DMAEx_ChangeMemory+0xb2>
 800623a:	2301      	movs	r3, #1
 800623c:	e000      	b.n	8006240 <HAL_DMAEx_ChangeMemory+0xb4>
 800623e:	2300      	movs	r3, #0
 8006240:	2b00      	cmp	r3, #0
 8006242:	d00c      	beq.n	800625e <HAL_DMAEx_ChangeMemory+0xd2>
  {
    if(memory == MEMORY0)
 8006244:	79fb      	ldrb	r3, [r7, #7]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d104      	bne.n	8006254 <HAL_DMAEx_ChangeMemory+0xc8>
    {
      /* change the memory0 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = Address;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	68ba      	ldr	r2, [r7, #8]
 8006250:	60da      	str	r2, [r3, #12]
 8006252:	e010      	b.n	8006276 <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = Address;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	68ba      	ldr	r2, [r7, #8]
 800625a:	611a      	str	r2, [r3, #16]
 800625c:	e00b      	b.n	8006276 <HAL_DMAEx_ChangeMemory+0xea>
    }
  }
  else /* BDMA instance(s) */
  {
    if(memory == MEMORY0)
 800625e:	79fb      	ldrb	r3, [r7, #7]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d104      	bne.n	800626e <HAL_DMAEx_ChangeMemory+0xe2>
    {
      /* change the memory0 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = Address;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	68ba      	ldr	r2, [r7, #8]
 800626a:	60da      	str	r2, [r3, #12]
 800626c:	e003      	b.n	8006276 <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = Address;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	68ba      	ldr	r2, [r7, #8]
 8006274:	611a      	str	r2, [r3, #16]
    }
  }

  return HAL_OK;
 8006276:	2300      	movs	r3, #0
}
 8006278:	4618      	mov	r0, r3
 800627a:	3714      	adds	r7, #20
 800627c:	46bd      	mov	sp, r7
 800627e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006282:	4770      	bx	lr
 8006284:	40020010 	.word	0x40020010
 8006288:	40020028 	.word	0x40020028
 800628c:	40020040 	.word	0x40020040
 8006290:	40020058 	.word	0x40020058
 8006294:	40020070 	.word	0x40020070
 8006298:	40020088 	.word	0x40020088
 800629c:	400200a0 	.word	0x400200a0
 80062a0:	400200b8 	.word	0x400200b8
 80062a4:	40020410 	.word	0x40020410
 80062a8:	40020428 	.word	0x40020428
 80062ac:	40020440 	.word	0x40020440
 80062b0:	40020458 	.word	0x40020458
 80062b4:	40020470 	.word	0x40020470
 80062b8:	40020488 	.word	0x40020488
 80062bc:	400204a0 	.word	0x400204a0
 80062c0:	400204b8 	.word	0x400204b8

080062c4 <DMA_MultiBufferSetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b085      	sub	sp, #20
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	60f8      	str	r0, [r7, #12]
 80062cc:	60b9      	str	r1, [r7, #8]
 80062ce:	607a      	str	r2, [r7, #4]
 80062d0:	603b      	str	r3, [r7, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4a46      	ldr	r2, [pc, #280]	@ (80063f0 <DMA_MultiBufferSetConfig+0x12c>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d04a      	beq.n	8006372 <DMA_MultiBufferSetConfig+0xae>
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	4a44      	ldr	r2, [pc, #272]	@ (80063f4 <DMA_MultiBufferSetConfig+0x130>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d045      	beq.n	8006372 <DMA_MultiBufferSetConfig+0xae>
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4a43      	ldr	r2, [pc, #268]	@ (80063f8 <DMA_MultiBufferSetConfig+0x134>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d040      	beq.n	8006372 <DMA_MultiBufferSetConfig+0xae>
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4a41      	ldr	r2, [pc, #260]	@ (80063fc <DMA_MultiBufferSetConfig+0x138>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d03b      	beq.n	8006372 <DMA_MultiBufferSetConfig+0xae>
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	4a40      	ldr	r2, [pc, #256]	@ (8006400 <DMA_MultiBufferSetConfig+0x13c>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d036      	beq.n	8006372 <DMA_MultiBufferSetConfig+0xae>
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4a3e      	ldr	r2, [pc, #248]	@ (8006404 <DMA_MultiBufferSetConfig+0x140>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d031      	beq.n	8006372 <DMA_MultiBufferSetConfig+0xae>
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	4a3d      	ldr	r2, [pc, #244]	@ (8006408 <DMA_MultiBufferSetConfig+0x144>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d02c      	beq.n	8006372 <DMA_MultiBufferSetConfig+0xae>
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4a3b      	ldr	r2, [pc, #236]	@ (800640c <DMA_MultiBufferSetConfig+0x148>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d027      	beq.n	8006372 <DMA_MultiBufferSetConfig+0xae>
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4a3a      	ldr	r2, [pc, #232]	@ (8006410 <DMA_MultiBufferSetConfig+0x14c>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d022      	beq.n	8006372 <DMA_MultiBufferSetConfig+0xae>
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4a38      	ldr	r2, [pc, #224]	@ (8006414 <DMA_MultiBufferSetConfig+0x150>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d01d      	beq.n	8006372 <DMA_MultiBufferSetConfig+0xae>
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	4a37      	ldr	r2, [pc, #220]	@ (8006418 <DMA_MultiBufferSetConfig+0x154>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d018      	beq.n	8006372 <DMA_MultiBufferSetConfig+0xae>
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	4a35      	ldr	r2, [pc, #212]	@ (800641c <DMA_MultiBufferSetConfig+0x158>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d013      	beq.n	8006372 <DMA_MultiBufferSetConfig+0xae>
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	4a34      	ldr	r2, [pc, #208]	@ (8006420 <DMA_MultiBufferSetConfig+0x15c>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d00e      	beq.n	8006372 <DMA_MultiBufferSetConfig+0xae>
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4a32      	ldr	r2, [pc, #200]	@ (8006424 <DMA_MultiBufferSetConfig+0x160>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d009      	beq.n	8006372 <DMA_MultiBufferSetConfig+0xae>
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	4a31      	ldr	r2, [pc, #196]	@ (8006428 <DMA_MultiBufferSetConfig+0x164>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d004      	beq.n	8006372 <DMA_MultiBufferSetConfig+0xae>
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4a2f      	ldr	r2, [pc, #188]	@ (800642c <DMA_MultiBufferSetConfig+0x168>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d101      	bne.n	8006376 <DMA_MultiBufferSetConfig+0xb2>
 8006372:	2301      	movs	r3, #1
 8006374:	e000      	b.n	8006378 <DMA_MultiBufferSetConfig+0xb4>
 8006376:	2300      	movs	r3, #0
 8006378:	2b00      	cmp	r3, #0
 800637a:	d019      	beq.n	80063b0 <DMA_MultiBufferSetConfig+0xec>
  {
    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = DataLength;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	683a      	ldr	r2, [r7, #0]
 8006382:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	689b      	ldr	r3, [r3, #8]
 8006388:	2b40      	cmp	r3, #64	@ 0x40
 800638a:	d108      	bne.n	800639e <DMA_MultiBufferSetConfig+0xda>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = DstAddress;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	687a      	ldr	r2, [r7, #4]
 8006392:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = SrcAddress;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	68ba      	ldr	r2, [r7, #8]
 800639a:	60da      	str	r2, [r3, #12]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
    }
  }
}
 800639c:	e021      	b.n	80063e2 <DMA_MultiBufferSetConfig+0x11e>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = SrcAddress;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	68ba      	ldr	r2, [r7, #8]
 80063a4:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = DstAddress;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	687a      	ldr	r2, [r7, #4]
 80063ac:	60da      	str	r2, [r3, #12]
}
 80063ae:	e018      	b.n	80063e2 <DMA_MultiBufferSetConfig+0x11e>
    ((BDMA_Channel_TypeDef   *)hdma->Instance)->CNDTR = DataLength;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	683a      	ldr	r2, [r7, #0]
 80063b6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	689b      	ldr	r3, [r3, #8]
 80063bc:	2b40      	cmp	r3, #64	@ 0x40
 80063be:	d108      	bne.n	80063d2 <DMA_MultiBufferSetConfig+0x10e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = DstAddress;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	687a      	ldr	r2, [r7, #4]
 80063c6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = SrcAddress;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	68ba      	ldr	r2, [r7, #8]
 80063ce:	60da      	str	r2, [r3, #12]
}
 80063d0:	e007      	b.n	80063e2 <DMA_MultiBufferSetConfig+0x11e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = SrcAddress;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	68ba      	ldr	r2, [r7, #8]
 80063d8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	687a      	ldr	r2, [r7, #4]
 80063e0:	60da      	str	r2, [r3, #12]
}
 80063e2:	bf00      	nop
 80063e4:	3714      	adds	r7, #20
 80063e6:	46bd      	mov	sp, r7
 80063e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ec:	4770      	bx	lr
 80063ee:	bf00      	nop
 80063f0:	40020010 	.word	0x40020010
 80063f4:	40020028 	.word	0x40020028
 80063f8:	40020040 	.word	0x40020040
 80063fc:	40020058 	.word	0x40020058
 8006400:	40020070 	.word	0x40020070
 8006404:	40020088 	.word	0x40020088
 8006408:	400200a0 	.word	0x400200a0
 800640c:	400200b8 	.word	0x400200b8
 8006410:	40020410 	.word	0x40020410
 8006414:	40020428 	.word	0x40020428
 8006418:	40020440 	.word	0x40020440
 800641c:	40020458 	.word	0x40020458
 8006420:	40020470 	.word	0x40020470
 8006424:	40020488 	.word	0x40020488
 8006428:	400204a0 	.word	0x400204a0
 800642c:	400204b8 	.word	0x400204b8

08006430 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8006430:	b480      	push	{r7}
 8006432:	b089      	sub	sp, #36	@ 0x24
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
 8006438:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800643a:	2300      	movs	r3, #0
 800643c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800643e:	4b89      	ldr	r3, [pc, #548]	@ (8006664 <HAL_GPIO_Init+0x234>)
 8006440:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006442:	e194      	b.n	800676e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	681a      	ldr	r2, [r3, #0]
 8006448:	2101      	movs	r1, #1
 800644a:	69fb      	ldr	r3, [r7, #28]
 800644c:	fa01 f303 	lsl.w	r3, r1, r3
 8006450:	4013      	ands	r3, r2
 8006452:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006454:	693b      	ldr	r3, [r7, #16]
 8006456:	2b00      	cmp	r3, #0
 8006458:	f000 8186 	beq.w	8006768 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	685b      	ldr	r3, [r3, #4]
 8006460:	f003 0303 	and.w	r3, r3, #3
 8006464:	2b01      	cmp	r3, #1
 8006466:	d005      	beq.n	8006474 <HAL_GPIO_Init+0x44>
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	685b      	ldr	r3, [r3, #4]
 800646c:	f003 0303 	and.w	r3, r3, #3
 8006470:	2b02      	cmp	r3, #2
 8006472:	d130      	bne.n	80064d6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	689b      	ldr	r3, [r3, #8]
 8006478:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800647a:	69fb      	ldr	r3, [r7, #28]
 800647c:	005b      	lsls	r3, r3, #1
 800647e:	2203      	movs	r2, #3
 8006480:	fa02 f303 	lsl.w	r3, r2, r3
 8006484:	43db      	mvns	r3, r3
 8006486:	69ba      	ldr	r2, [r7, #24]
 8006488:	4013      	ands	r3, r2
 800648a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	68da      	ldr	r2, [r3, #12]
 8006490:	69fb      	ldr	r3, [r7, #28]
 8006492:	005b      	lsls	r3, r3, #1
 8006494:	fa02 f303 	lsl.w	r3, r2, r3
 8006498:	69ba      	ldr	r2, [r7, #24]
 800649a:	4313      	orrs	r3, r2
 800649c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	69ba      	ldr	r2, [r7, #24]
 80064a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	685b      	ldr	r3, [r3, #4]
 80064a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80064aa:	2201      	movs	r2, #1
 80064ac:	69fb      	ldr	r3, [r7, #28]
 80064ae:	fa02 f303 	lsl.w	r3, r2, r3
 80064b2:	43db      	mvns	r3, r3
 80064b4:	69ba      	ldr	r2, [r7, #24]
 80064b6:	4013      	ands	r3, r2
 80064b8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	685b      	ldr	r3, [r3, #4]
 80064be:	091b      	lsrs	r3, r3, #4
 80064c0:	f003 0201 	and.w	r2, r3, #1
 80064c4:	69fb      	ldr	r3, [r7, #28]
 80064c6:	fa02 f303 	lsl.w	r3, r2, r3
 80064ca:	69ba      	ldr	r2, [r7, #24]
 80064cc:	4313      	orrs	r3, r2
 80064ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	69ba      	ldr	r2, [r7, #24]
 80064d4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	685b      	ldr	r3, [r3, #4]
 80064da:	f003 0303 	and.w	r3, r3, #3
 80064de:	2b03      	cmp	r3, #3
 80064e0:	d017      	beq.n	8006512 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	68db      	ldr	r3, [r3, #12]
 80064e6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80064e8:	69fb      	ldr	r3, [r7, #28]
 80064ea:	005b      	lsls	r3, r3, #1
 80064ec:	2203      	movs	r2, #3
 80064ee:	fa02 f303 	lsl.w	r3, r2, r3
 80064f2:	43db      	mvns	r3, r3
 80064f4:	69ba      	ldr	r2, [r7, #24]
 80064f6:	4013      	ands	r3, r2
 80064f8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	689a      	ldr	r2, [r3, #8]
 80064fe:	69fb      	ldr	r3, [r7, #28]
 8006500:	005b      	lsls	r3, r3, #1
 8006502:	fa02 f303 	lsl.w	r3, r2, r3
 8006506:	69ba      	ldr	r2, [r7, #24]
 8006508:	4313      	orrs	r3, r2
 800650a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	69ba      	ldr	r2, [r7, #24]
 8006510:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	685b      	ldr	r3, [r3, #4]
 8006516:	f003 0303 	and.w	r3, r3, #3
 800651a:	2b02      	cmp	r3, #2
 800651c:	d123      	bne.n	8006566 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800651e:	69fb      	ldr	r3, [r7, #28]
 8006520:	08da      	lsrs	r2, r3, #3
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	3208      	adds	r2, #8
 8006526:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800652a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800652c:	69fb      	ldr	r3, [r7, #28]
 800652e:	f003 0307 	and.w	r3, r3, #7
 8006532:	009b      	lsls	r3, r3, #2
 8006534:	220f      	movs	r2, #15
 8006536:	fa02 f303 	lsl.w	r3, r2, r3
 800653a:	43db      	mvns	r3, r3
 800653c:	69ba      	ldr	r2, [r7, #24]
 800653e:	4013      	ands	r3, r2
 8006540:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	691a      	ldr	r2, [r3, #16]
 8006546:	69fb      	ldr	r3, [r7, #28]
 8006548:	f003 0307 	and.w	r3, r3, #7
 800654c:	009b      	lsls	r3, r3, #2
 800654e:	fa02 f303 	lsl.w	r3, r2, r3
 8006552:	69ba      	ldr	r2, [r7, #24]
 8006554:	4313      	orrs	r3, r2
 8006556:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006558:	69fb      	ldr	r3, [r7, #28]
 800655a:	08da      	lsrs	r2, r3, #3
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	3208      	adds	r2, #8
 8006560:	69b9      	ldr	r1, [r7, #24]
 8006562:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800656c:	69fb      	ldr	r3, [r7, #28]
 800656e:	005b      	lsls	r3, r3, #1
 8006570:	2203      	movs	r2, #3
 8006572:	fa02 f303 	lsl.w	r3, r2, r3
 8006576:	43db      	mvns	r3, r3
 8006578:	69ba      	ldr	r2, [r7, #24]
 800657a:	4013      	ands	r3, r2
 800657c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	685b      	ldr	r3, [r3, #4]
 8006582:	f003 0203 	and.w	r2, r3, #3
 8006586:	69fb      	ldr	r3, [r7, #28]
 8006588:	005b      	lsls	r3, r3, #1
 800658a:	fa02 f303 	lsl.w	r3, r2, r3
 800658e:	69ba      	ldr	r2, [r7, #24]
 8006590:	4313      	orrs	r3, r2
 8006592:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	69ba      	ldr	r2, [r7, #24]
 8006598:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	685b      	ldr	r3, [r3, #4]
 800659e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	f000 80e0 	beq.w	8006768 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80065a8:	4b2f      	ldr	r3, [pc, #188]	@ (8006668 <HAL_GPIO_Init+0x238>)
 80065aa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80065ae:	4a2e      	ldr	r2, [pc, #184]	@ (8006668 <HAL_GPIO_Init+0x238>)
 80065b0:	f043 0302 	orr.w	r3, r3, #2
 80065b4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80065b8:	4b2b      	ldr	r3, [pc, #172]	@ (8006668 <HAL_GPIO_Init+0x238>)
 80065ba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80065be:	f003 0302 	and.w	r3, r3, #2
 80065c2:	60fb      	str	r3, [r7, #12]
 80065c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80065c6:	4a29      	ldr	r2, [pc, #164]	@ (800666c <HAL_GPIO_Init+0x23c>)
 80065c8:	69fb      	ldr	r3, [r7, #28]
 80065ca:	089b      	lsrs	r3, r3, #2
 80065cc:	3302      	adds	r3, #2
 80065ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80065d4:	69fb      	ldr	r3, [r7, #28]
 80065d6:	f003 0303 	and.w	r3, r3, #3
 80065da:	009b      	lsls	r3, r3, #2
 80065dc:	220f      	movs	r2, #15
 80065de:	fa02 f303 	lsl.w	r3, r2, r3
 80065e2:	43db      	mvns	r3, r3
 80065e4:	69ba      	ldr	r2, [r7, #24]
 80065e6:	4013      	ands	r3, r2
 80065e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	4a20      	ldr	r2, [pc, #128]	@ (8006670 <HAL_GPIO_Init+0x240>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d052      	beq.n	8006698 <HAL_GPIO_Init+0x268>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	4a1f      	ldr	r2, [pc, #124]	@ (8006674 <HAL_GPIO_Init+0x244>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d031      	beq.n	800665e <HAL_GPIO_Init+0x22e>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	4a1e      	ldr	r2, [pc, #120]	@ (8006678 <HAL_GPIO_Init+0x248>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d02b      	beq.n	800665a <HAL_GPIO_Init+0x22a>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	4a1d      	ldr	r2, [pc, #116]	@ (800667c <HAL_GPIO_Init+0x24c>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d025      	beq.n	8006656 <HAL_GPIO_Init+0x226>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	4a1c      	ldr	r2, [pc, #112]	@ (8006680 <HAL_GPIO_Init+0x250>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d01f      	beq.n	8006652 <HAL_GPIO_Init+0x222>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	4a1b      	ldr	r2, [pc, #108]	@ (8006684 <HAL_GPIO_Init+0x254>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d019      	beq.n	800664e <HAL_GPIO_Init+0x21e>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	4a1a      	ldr	r2, [pc, #104]	@ (8006688 <HAL_GPIO_Init+0x258>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d013      	beq.n	800664a <HAL_GPIO_Init+0x21a>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	4a19      	ldr	r2, [pc, #100]	@ (800668c <HAL_GPIO_Init+0x25c>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d00d      	beq.n	8006646 <HAL_GPIO_Init+0x216>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	4a18      	ldr	r2, [pc, #96]	@ (8006690 <HAL_GPIO_Init+0x260>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d007      	beq.n	8006642 <HAL_GPIO_Init+0x212>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	4a17      	ldr	r2, [pc, #92]	@ (8006694 <HAL_GPIO_Init+0x264>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d101      	bne.n	800663e <HAL_GPIO_Init+0x20e>
 800663a:	2309      	movs	r3, #9
 800663c:	e02d      	b.n	800669a <HAL_GPIO_Init+0x26a>
 800663e:	230a      	movs	r3, #10
 8006640:	e02b      	b.n	800669a <HAL_GPIO_Init+0x26a>
 8006642:	2308      	movs	r3, #8
 8006644:	e029      	b.n	800669a <HAL_GPIO_Init+0x26a>
 8006646:	2307      	movs	r3, #7
 8006648:	e027      	b.n	800669a <HAL_GPIO_Init+0x26a>
 800664a:	2306      	movs	r3, #6
 800664c:	e025      	b.n	800669a <HAL_GPIO_Init+0x26a>
 800664e:	2305      	movs	r3, #5
 8006650:	e023      	b.n	800669a <HAL_GPIO_Init+0x26a>
 8006652:	2304      	movs	r3, #4
 8006654:	e021      	b.n	800669a <HAL_GPIO_Init+0x26a>
 8006656:	2303      	movs	r3, #3
 8006658:	e01f      	b.n	800669a <HAL_GPIO_Init+0x26a>
 800665a:	2302      	movs	r3, #2
 800665c:	e01d      	b.n	800669a <HAL_GPIO_Init+0x26a>
 800665e:	2301      	movs	r3, #1
 8006660:	e01b      	b.n	800669a <HAL_GPIO_Init+0x26a>
 8006662:	bf00      	nop
 8006664:	58000080 	.word	0x58000080
 8006668:	58024400 	.word	0x58024400
 800666c:	58000400 	.word	0x58000400
 8006670:	58020000 	.word	0x58020000
 8006674:	58020400 	.word	0x58020400
 8006678:	58020800 	.word	0x58020800
 800667c:	58020c00 	.word	0x58020c00
 8006680:	58021000 	.word	0x58021000
 8006684:	58021400 	.word	0x58021400
 8006688:	58021800 	.word	0x58021800
 800668c:	58021c00 	.word	0x58021c00
 8006690:	58022000 	.word	0x58022000
 8006694:	58022400 	.word	0x58022400
 8006698:	2300      	movs	r3, #0
 800669a:	69fa      	ldr	r2, [r7, #28]
 800669c:	f002 0203 	and.w	r2, r2, #3
 80066a0:	0092      	lsls	r2, r2, #2
 80066a2:	4093      	lsls	r3, r2
 80066a4:	69ba      	ldr	r2, [r7, #24]
 80066a6:	4313      	orrs	r3, r2
 80066a8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80066aa:	4938      	ldr	r1, [pc, #224]	@ (800678c <HAL_GPIO_Init+0x35c>)
 80066ac:	69fb      	ldr	r3, [r7, #28]
 80066ae:	089b      	lsrs	r3, r3, #2
 80066b0:	3302      	adds	r3, #2
 80066b2:	69ba      	ldr	r2, [r7, #24]
 80066b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80066b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80066c0:	693b      	ldr	r3, [r7, #16]
 80066c2:	43db      	mvns	r3, r3
 80066c4:	69ba      	ldr	r2, [r7, #24]
 80066c6:	4013      	ands	r3, r2
 80066c8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	685b      	ldr	r3, [r3, #4]
 80066ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d003      	beq.n	80066de <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80066d6:	69ba      	ldr	r2, [r7, #24]
 80066d8:	693b      	ldr	r3, [r7, #16]
 80066da:	4313      	orrs	r3, r2
 80066dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80066de:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80066e2:	69bb      	ldr	r3, [r7, #24]
 80066e4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80066e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80066ea:	685b      	ldr	r3, [r3, #4]
 80066ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	43db      	mvns	r3, r3
 80066f2:	69ba      	ldr	r2, [r7, #24]
 80066f4:	4013      	ands	r3, r2
 80066f6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	685b      	ldr	r3, [r3, #4]
 80066fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006700:	2b00      	cmp	r3, #0
 8006702:	d003      	beq.n	800670c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006704:	69ba      	ldr	r2, [r7, #24]
 8006706:	693b      	ldr	r3, [r7, #16]
 8006708:	4313      	orrs	r3, r2
 800670a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800670c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006710:	69bb      	ldr	r3, [r7, #24]
 8006712:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006714:	697b      	ldr	r3, [r7, #20]
 8006716:	685b      	ldr	r3, [r3, #4]
 8006718:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800671a:	693b      	ldr	r3, [r7, #16]
 800671c:	43db      	mvns	r3, r3
 800671e:	69ba      	ldr	r2, [r7, #24]
 8006720:	4013      	ands	r3, r2
 8006722:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	685b      	ldr	r3, [r3, #4]
 8006728:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800672c:	2b00      	cmp	r3, #0
 800672e:	d003      	beq.n	8006738 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8006730:	69ba      	ldr	r2, [r7, #24]
 8006732:	693b      	ldr	r3, [r7, #16]
 8006734:	4313      	orrs	r3, r2
 8006736:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006738:	697b      	ldr	r3, [r7, #20]
 800673a:	69ba      	ldr	r2, [r7, #24]
 800673c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800673e:	697b      	ldr	r3, [r7, #20]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006744:	693b      	ldr	r3, [r7, #16]
 8006746:	43db      	mvns	r3, r3
 8006748:	69ba      	ldr	r2, [r7, #24]
 800674a:	4013      	ands	r3, r2
 800674c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	685b      	ldr	r3, [r3, #4]
 8006752:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006756:	2b00      	cmp	r3, #0
 8006758:	d003      	beq.n	8006762 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800675a:	69ba      	ldr	r2, [r7, #24]
 800675c:	693b      	ldr	r3, [r7, #16]
 800675e:	4313      	orrs	r3, r2
 8006760:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006762:	697b      	ldr	r3, [r7, #20]
 8006764:	69ba      	ldr	r2, [r7, #24]
 8006766:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006768:	69fb      	ldr	r3, [r7, #28]
 800676a:	3301      	adds	r3, #1
 800676c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	681a      	ldr	r2, [r3, #0]
 8006772:	69fb      	ldr	r3, [r7, #28]
 8006774:	fa22 f303 	lsr.w	r3, r2, r3
 8006778:	2b00      	cmp	r3, #0
 800677a:	f47f ae63 	bne.w	8006444 <HAL_GPIO_Init+0x14>
  }
}
 800677e:	bf00      	nop
 8006780:	bf00      	nop
 8006782:	3724      	adds	r7, #36	@ 0x24
 8006784:	46bd      	mov	sp, r7
 8006786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678a:	4770      	bx	lr
 800678c:	58000400 	.word	0x58000400

08006790 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006790:	b480      	push	{r7}
 8006792:	b083      	sub	sp, #12
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
 8006798:	460b      	mov	r3, r1
 800679a:	807b      	strh	r3, [r7, #2]
 800679c:	4613      	mov	r3, r2
 800679e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80067a0:	787b      	ldrb	r3, [r7, #1]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d003      	beq.n	80067ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80067a6:	887a      	ldrh	r2, [r7, #2]
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80067ac:	e003      	b.n	80067b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80067ae:	887b      	ldrh	r3, [r7, #2]
 80067b0:	041a      	lsls	r2, r3, #16
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	619a      	str	r2, [r3, #24]
}
 80067b6:	bf00      	nop
 80067b8:	370c      	adds	r7, #12
 80067ba:	46bd      	mov	sp, r7
 80067bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c0:	4770      	bx	lr
	...

080067c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b082      	sub	sp, #8
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d101      	bne.n	80067d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80067d2:	2301      	movs	r3, #1
 80067d4:	e08b      	b.n	80068ee <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80067dc:	b2db      	uxtb	r3, r3
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d106      	bne.n	80067f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2200      	movs	r2, #0
 80067e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	f7fb f8a8 	bl	8001940 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2224      	movs	r2, #36	@ 0x24
 80067f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	681a      	ldr	r2, [r3, #0]
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f022 0201 	bic.w	r2, r2, #1
 8006806:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	685a      	ldr	r2, [r3, #4]
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006814:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	689a      	ldr	r2, [r3, #8]
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006824:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	68db      	ldr	r3, [r3, #12]
 800682a:	2b01      	cmp	r3, #1
 800682c:	d107      	bne.n	800683e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	689a      	ldr	r2, [r3, #8]
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800683a:	609a      	str	r2, [r3, #8]
 800683c:	e006      	b.n	800684c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	689a      	ldr	r2, [r3, #8]
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800684a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	68db      	ldr	r3, [r3, #12]
 8006850:	2b02      	cmp	r3, #2
 8006852:	d108      	bne.n	8006866 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	685a      	ldr	r2, [r3, #4]
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006862:	605a      	str	r2, [r3, #4]
 8006864:	e007      	b.n	8006876 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	685a      	ldr	r2, [r3, #4]
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006874:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	6859      	ldr	r1, [r3, #4]
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681a      	ldr	r2, [r3, #0]
 8006880:	4b1d      	ldr	r3, [pc, #116]	@ (80068f8 <HAL_I2C_Init+0x134>)
 8006882:	430b      	orrs	r3, r1
 8006884:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	68da      	ldr	r2, [r3, #12]
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006894:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	691a      	ldr	r2, [r3, #16]
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	695b      	ldr	r3, [r3, #20]
 800689e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	699b      	ldr	r3, [r3, #24]
 80068a6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	430a      	orrs	r2, r1
 80068ae:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	69d9      	ldr	r1, [r3, #28]
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6a1a      	ldr	r2, [r3, #32]
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	430a      	orrs	r2, r1
 80068be:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	681a      	ldr	r2, [r3, #0]
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f042 0201 	orr.w	r2, r2, #1
 80068ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2200      	movs	r2, #0
 80068d4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2220      	movs	r2, #32
 80068da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2200      	movs	r2, #0
 80068e2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2200      	movs	r2, #0
 80068e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80068ec:	2300      	movs	r3, #0
}
 80068ee:	4618      	mov	r0, r3
 80068f0:	3708      	adds	r7, #8
 80068f2:	46bd      	mov	sp, r7
 80068f4:	bd80      	pop	{r7, pc}
 80068f6:	bf00      	nop
 80068f8:	02008000 	.word	0x02008000

080068fc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b088      	sub	sp, #32
 8006900:	af02      	add	r7, sp, #8
 8006902:	60f8      	str	r0, [r7, #12]
 8006904:	607a      	str	r2, [r7, #4]
 8006906:	461a      	mov	r2, r3
 8006908:	460b      	mov	r3, r1
 800690a:	817b      	strh	r3, [r7, #10]
 800690c:	4613      	mov	r3, r2
 800690e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006916:	b2db      	uxtb	r3, r3
 8006918:	2b20      	cmp	r3, #32
 800691a:	f040 80fd 	bne.w	8006b18 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006924:	2b01      	cmp	r3, #1
 8006926:	d101      	bne.n	800692c <HAL_I2C_Master_Transmit+0x30>
 8006928:	2302      	movs	r3, #2
 800692a:	e0f6      	b.n	8006b1a <HAL_I2C_Master_Transmit+0x21e>
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	2201      	movs	r2, #1
 8006930:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006934:	f7fb fdd2 	bl	80024dc <HAL_GetTick>
 8006938:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800693a:	693b      	ldr	r3, [r7, #16]
 800693c:	9300      	str	r3, [sp, #0]
 800693e:	2319      	movs	r3, #25
 8006940:	2201      	movs	r2, #1
 8006942:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006946:	68f8      	ldr	r0, [r7, #12]
 8006948:	f001 f891 	bl	8007a6e <I2C_WaitOnFlagUntilTimeout>
 800694c:	4603      	mov	r3, r0
 800694e:	2b00      	cmp	r3, #0
 8006950:	d001      	beq.n	8006956 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8006952:	2301      	movs	r3, #1
 8006954:	e0e1      	b.n	8006b1a <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	2221      	movs	r2, #33	@ 0x21
 800695a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	2210      	movs	r2, #16
 8006962:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	2200      	movs	r2, #0
 800696a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	687a      	ldr	r2, [r7, #4]
 8006970:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	893a      	ldrh	r2, [r7, #8]
 8006976:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	2200      	movs	r2, #0
 800697c:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006982:	b29b      	uxth	r3, r3
 8006984:	2bff      	cmp	r3, #255	@ 0xff
 8006986:	d906      	bls.n	8006996 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	22ff      	movs	r2, #255	@ 0xff
 800698c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800698e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006992:	617b      	str	r3, [r7, #20]
 8006994:	e007      	b.n	80069a6 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800699a:	b29a      	uxth	r2, r3
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80069a0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80069a4:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d024      	beq.n	80069f8 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069b2:	781a      	ldrb	r2, [r3, #0]
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069be:	1c5a      	adds	r2, r3, #1
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069c8:	b29b      	uxth	r3, r3
 80069ca:	3b01      	subs	r3, #1
 80069cc:	b29a      	uxth	r2, r3
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069d6:	3b01      	subs	r3, #1
 80069d8:	b29a      	uxth	r2, r3
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069e2:	b2db      	uxtb	r3, r3
 80069e4:	3301      	adds	r3, #1
 80069e6:	b2da      	uxtb	r2, r3
 80069e8:	8979      	ldrh	r1, [r7, #10]
 80069ea:	4b4e      	ldr	r3, [pc, #312]	@ (8006b24 <HAL_I2C_Master_Transmit+0x228>)
 80069ec:	9300      	str	r3, [sp, #0]
 80069ee:	697b      	ldr	r3, [r7, #20]
 80069f0:	68f8      	ldr	r0, [r7, #12]
 80069f2:	f001 fa8b 	bl	8007f0c <I2C_TransferConfig>
 80069f6:	e066      	b.n	8006ac6 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069fc:	b2da      	uxtb	r2, r3
 80069fe:	8979      	ldrh	r1, [r7, #10]
 8006a00:	4b48      	ldr	r3, [pc, #288]	@ (8006b24 <HAL_I2C_Master_Transmit+0x228>)
 8006a02:	9300      	str	r3, [sp, #0]
 8006a04:	697b      	ldr	r3, [r7, #20]
 8006a06:	68f8      	ldr	r0, [r7, #12]
 8006a08:	f001 fa80 	bl	8007f0c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8006a0c:	e05b      	b.n	8006ac6 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006a0e:	693a      	ldr	r2, [r7, #16]
 8006a10:	6a39      	ldr	r1, [r7, #32]
 8006a12:	68f8      	ldr	r0, [r7, #12]
 8006a14:	f001 f884 	bl	8007b20 <I2C_WaitOnTXISFlagUntilTimeout>
 8006a18:	4603      	mov	r3, r0
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d001      	beq.n	8006a22 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8006a1e:	2301      	movs	r3, #1
 8006a20:	e07b      	b.n	8006b1a <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a26:	781a      	ldrb	r2, [r3, #0]
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a32:	1c5a      	adds	r2, r3, #1
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a3c:	b29b      	uxth	r3, r3
 8006a3e:	3b01      	subs	r3, #1
 8006a40:	b29a      	uxth	r2, r3
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a4a:	3b01      	subs	r3, #1
 8006a4c:	b29a      	uxth	r2, r3
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a56:	b29b      	uxth	r3, r3
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d034      	beq.n	8006ac6 <HAL_I2C_Master_Transmit+0x1ca>
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d130      	bne.n	8006ac6 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006a64:	693b      	ldr	r3, [r7, #16]
 8006a66:	9300      	str	r3, [sp, #0]
 8006a68:	6a3b      	ldr	r3, [r7, #32]
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	2180      	movs	r1, #128	@ 0x80
 8006a6e:	68f8      	ldr	r0, [r7, #12]
 8006a70:	f000 fffd 	bl	8007a6e <I2C_WaitOnFlagUntilTimeout>
 8006a74:	4603      	mov	r3, r0
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d001      	beq.n	8006a7e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	e04d      	b.n	8006b1a <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a82:	b29b      	uxth	r3, r3
 8006a84:	2bff      	cmp	r3, #255	@ 0xff
 8006a86:	d90e      	bls.n	8006aa6 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	22ff      	movs	r2, #255	@ 0xff
 8006a8c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a92:	b2da      	uxtb	r2, r3
 8006a94:	8979      	ldrh	r1, [r7, #10]
 8006a96:	2300      	movs	r3, #0
 8006a98:	9300      	str	r3, [sp, #0]
 8006a9a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006a9e:	68f8      	ldr	r0, [r7, #12]
 8006aa0:	f001 fa34 	bl	8007f0c <I2C_TransferConfig>
 8006aa4:	e00f      	b.n	8006ac6 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006aaa:	b29a      	uxth	r2, r3
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ab4:	b2da      	uxtb	r2, r3
 8006ab6:	8979      	ldrh	r1, [r7, #10]
 8006ab8:	2300      	movs	r3, #0
 8006aba:	9300      	str	r3, [sp, #0]
 8006abc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006ac0:	68f8      	ldr	r0, [r7, #12]
 8006ac2:	f001 fa23 	bl	8007f0c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006aca:	b29b      	uxth	r3, r3
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d19e      	bne.n	8006a0e <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006ad0:	693a      	ldr	r2, [r7, #16]
 8006ad2:	6a39      	ldr	r1, [r7, #32]
 8006ad4:	68f8      	ldr	r0, [r7, #12]
 8006ad6:	f001 f86a 	bl	8007bae <I2C_WaitOnSTOPFlagUntilTimeout>
 8006ada:	4603      	mov	r3, r0
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d001      	beq.n	8006ae4 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	e01a      	b.n	8006b1a <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	2220      	movs	r2, #32
 8006aea:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	6859      	ldr	r1, [r3, #4]
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681a      	ldr	r2, [r3, #0]
 8006af6:	4b0c      	ldr	r3, [pc, #48]	@ (8006b28 <HAL_I2C_Master_Transmit+0x22c>)
 8006af8:	400b      	ands	r3, r1
 8006afa:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	2220      	movs	r2, #32
 8006b00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	2200      	movs	r2, #0
 8006b08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006b14:	2300      	movs	r3, #0
 8006b16:	e000      	b.n	8006b1a <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8006b18:	2302      	movs	r3, #2
  }
}
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	3718      	adds	r7, #24
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bd80      	pop	{r7, pc}
 8006b22:	bf00      	nop
 8006b24:	80002000 	.word	0x80002000
 8006b28:	fe00e800 	.word	0xfe00e800

08006b2c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b088      	sub	sp, #32
 8006b30:	af02      	add	r7, sp, #8
 8006b32:	60f8      	str	r0, [r7, #12]
 8006b34:	607a      	str	r2, [r7, #4]
 8006b36:	461a      	mov	r2, r3
 8006b38:	460b      	mov	r3, r1
 8006b3a:	817b      	strh	r3, [r7, #10]
 8006b3c:	4613      	mov	r3, r2
 8006b3e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b46:	b2db      	uxtb	r3, r3
 8006b48:	2b20      	cmp	r3, #32
 8006b4a:	f040 80db 	bne.w	8006d04 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006b54:	2b01      	cmp	r3, #1
 8006b56:	d101      	bne.n	8006b5c <HAL_I2C_Master_Receive+0x30>
 8006b58:	2302      	movs	r3, #2
 8006b5a:	e0d4      	b.n	8006d06 <HAL_I2C_Master_Receive+0x1da>
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	2201      	movs	r2, #1
 8006b60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006b64:	f7fb fcba 	bl	80024dc <HAL_GetTick>
 8006b68:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006b6a:	697b      	ldr	r3, [r7, #20]
 8006b6c:	9300      	str	r3, [sp, #0]
 8006b6e:	2319      	movs	r3, #25
 8006b70:	2201      	movs	r2, #1
 8006b72:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006b76:	68f8      	ldr	r0, [r7, #12]
 8006b78:	f000 ff79 	bl	8007a6e <I2C_WaitOnFlagUntilTimeout>
 8006b7c:	4603      	mov	r3, r0
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d001      	beq.n	8006b86 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8006b82:	2301      	movs	r3, #1
 8006b84:	e0bf      	b.n	8006d06 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	2222      	movs	r2, #34	@ 0x22
 8006b8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	2210      	movs	r2, #16
 8006b92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	2200      	movs	r2, #0
 8006b9a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	687a      	ldr	r2, [r7, #4]
 8006ba0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	893a      	ldrh	r2, [r7, #8]
 8006ba6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	2200      	movs	r2, #0
 8006bac:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006bb2:	b29b      	uxth	r3, r3
 8006bb4:	2bff      	cmp	r3, #255	@ 0xff
 8006bb6:	d90e      	bls.n	8006bd6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	22ff      	movs	r2, #255	@ 0xff
 8006bbc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006bc2:	b2da      	uxtb	r2, r3
 8006bc4:	8979      	ldrh	r1, [r7, #10]
 8006bc6:	4b52      	ldr	r3, [pc, #328]	@ (8006d10 <HAL_I2C_Master_Receive+0x1e4>)
 8006bc8:	9300      	str	r3, [sp, #0]
 8006bca:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006bce:	68f8      	ldr	r0, [r7, #12]
 8006bd0:	f001 f99c 	bl	8007f0c <I2C_TransferConfig>
 8006bd4:	e06d      	b.n	8006cb2 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006bda:	b29a      	uxth	r2, r3
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006be4:	b2da      	uxtb	r2, r3
 8006be6:	8979      	ldrh	r1, [r7, #10]
 8006be8:	4b49      	ldr	r3, [pc, #292]	@ (8006d10 <HAL_I2C_Master_Receive+0x1e4>)
 8006bea:	9300      	str	r3, [sp, #0]
 8006bec:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006bf0:	68f8      	ldr	r0, [r7, #12]
 8006bf2:	f001 f98b 	bl	8007f0c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8006bf6:	e05c      	b.n	8006cb2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006bf8:	697a      	ldr	r2, [r7, #20]
 8006bfa:	6a39      	ldr	r1, [r7, #32]
 8006bfc:	68f8      	ldr	r0, [r7, #12]
 8006bfe:	f001 f819 	bl	8007c34 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006c02:	4603      	mov	r3, r0
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d001      	beq.n	8006c0c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8006c08:	2301      	movs	r3, #1
 8006c0a:	e07c      	b.n	8006d06 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c16:	b2d2      	uxtb	r2, r2
 8006c18:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c1e:	1c5a      	adds	r2, r3, #1
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c28:	3b01      	subs	r3, #1
 8006c2a:	b29a      	uxth	r2, r3
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c34:	b29b      	uxth	r3, r3
 8006c36:	3b01      	subs	r3, #1
 8006c38:	b29a      	uxth	r2, r3
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c42:	b29b      	uxth	r3, r3
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d034      	beq.n	8006cb2 <HAL_I2C_Master_Receive+0x186>
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d130      	bne.n	8006cb2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006c50:	697b      	ldr	r3, [r7, #20]
 8006c52:	9300      	str	r3, [sp, #0]
 8006c54:	6a3b      	ldr	r3, [r7, #32]
 8006c56:	2200      	movs	r2, #0
 8006c58:	2180      	movs	r1, #128	@ 0x80
 8006c5a:	68f8      	ldr	r0, [r7, #12]
 8006c5c:	f000 ff07 	bl	8007a6e <I2C_WaitOnFlagUntilTimeout>
 8006c60:	4603      	mov	r3, r0
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d001      	beq.n	8006c6a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8006c66:	2301      	movs	r3, #1
 8006c68:	e04d      	b.n	8006d06 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c6e:	b29b      	uxth	r3, r3
 8006c70:	2bff      	cmp	r3, #255	@ 0xff
 8006c72:	d90e      	bls.n	8006c92 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	22ff      	movs	r2, #255	@ 0xff
 8006c78:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c7e:	b2da      	uxtb	r2, r3
 8006c80:	8979      	ldrh	r1, [r7, #10]
 8006c82:	2300      	movs	r3, #0
 8006c84:	9300      	str	r3, [sp, #0]
 8006c86:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006c8a:	68f8      	ldr	r0, [r7, #12]
 8006c8c:	f001 f93e 	bl	8007f0c <I2C_TransferConfig>
 8006c90:	e00f      	b.n	8006cb2 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c96:	b29a      	uxth	r2, r3
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ca0:	b2da      	uxtb	r2, r3
 8006ca2:	8979      	ldrh	r1, [r7, #10]
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	9300      	str	r3, [sp, #0]
 8006ca8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006cac:	68f8      	ldr	r0, [r7, #12]
 8006cae:	f001 f92d 	bl	8007f0c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006cb6:	b29b      	uxth	r3, r3
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d19d      	bne.n	8006bf8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006cbc:	697a      	ldr	r2, [r7, #20]
 8006cbe:	6a39      	ldr	r1, [r7, #32]
 8006cc0:	68f8      	ldr	r0, [r7, #12]
 8006cc2:	f000 ff74 	bl	8007bae <I2C_WaitOnSTOPFlagUntilTimeout>
 8006cc6:	4603      	mov	r3, r0
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d001      	beq.n	8006cd0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8006ccc:	2301      	movs	r3, #1
 8006cce:	e01a      	b.n	8006d06 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	2220      	movs	r2, #32
 8006cd6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	6859      	ldr	r1, [r3, #4]
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681a      	ldr	r2, [r3, #0]
 8006ce2:	4b0c      	ldr	r3, [pc, #48]	@ (8006d14 <HAL_I2C_Master_Receive+0x1e8>)
 8006ce4:	400b      	ands	r3, r1
 8006ce6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	2220      	movs	r2, #32
 8006cec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006d00:	2300      	movs	r3, #0
 8006d02:	e000      	b.n	8006d06 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8006d04:	2302      	movs	r3, #2
  }
}
 8006d06:	4618      	mov	r0, r3
 8006d08:	3718      	adds	r7, #24
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	bd80      	pop	{r7, pc}
 8006d0e:	bf00      	nop
 8006d10:	80002400 	.word	0x80002400
 8006d14:	fe00e800 	.word	0xfe00e800

08006d18 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b084      	sub	sp, #16
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	699b      	ldr	r3, [r3, #24]
 8006d26:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d005      	beq.n	8006d44 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d3c:	68ba      	ldr	r2, [r7, #8]
 8006d3e:	68f9      	ldr	r1, [r7, #12]
 8006d40:	6878      	ldr	r0, [r7, #4]
 8006d42:	4798      	blx	r3
  }
}
 8006d44:	bf00      	nop
 8006d46:	3710      	adds	r7, #16
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	bd80      	pop	{r7, pc}

08006d4c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b086      	sub	sp, #24
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	699b      	ldr	r3, [r3, #24]
 8006d5a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8006d64:	697b      	ldr	r3, [r7, #20]
 8006d66:	0a1b      	lsrs	r3, r3, #8
 8006d68:	f003 0301 	and.w	r3, r3, #1
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d010      	beq.n	8006d92 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8006d70:	693b      	ldr	r3, [r7, #16]
 8006d72:	09db      	lsrs	r3, r3, #7
 8006d74:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d00a      	beq.n	8006d92 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d80:	f043 0201 	orr.w	r2, r3, #1
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006d90:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8006d92:	697b      	ldr	r3, [r7, #20]
 8006d94:	0a9b      	lsrs	r3, r3, #10
 8006d96:	f003 0301 	and.w	r3, r3, #1
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d010      	beq.n	8006dc0 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8006d9e:	693b      	ldr	r3, [r7, #16]
 8006da0:	09db      	lsrs	r3, r3, #7
 8006da2:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d00a      	beq.n	8006dc0 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006dae:	f043 0208 	orr.w	r2, r3, #8
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006dbe:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8006dc0:	697b      	ldr	r3, [r7, #20]
 8006dc2:	0a5b      	lsrs	r3, r3, #9
 8006dc4:	f003 0301 	and.w	r3, r3, #1
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d010      	beq.n	8006dee <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8006dcc:	693b      	ldr	r3, [r7, #16]
 8006dce:	09db      	lsrs	r3, r3, #7
 8006dd0:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d00a      	beq.n	8006dee <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ddc:	f043 0202 	orr.w	r2, r3, #2
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006dec:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006df2:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	f003 030b 	and.w	r3, r3, #11
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d003      	beq.n	8006e06 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8006dfe:	68f9      	ldr	r1, [r7, #12]
 8006e00:	6878      	ldr	r0, [r7, #4]
 8006e02:	f000 fcdb 	bl	80077bc <I2C_ITError>
  }
}
 8006e06:	bf00      	nop
 8006e08:	3718      	adds	r7, #24
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	bd80      	pop	{r7, pc}

08006e0e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006e0e:	b480      	push	{r7}
 8006e10:	b083      	sub	sp, #12
 8006e12:	af00      	add	r7, sp, #0
 8006e14:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8006e16:	bf00      	nop
 8006e18:	370c      	adds	r7, #12
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e20:	4770      	bx	lr

08006e22 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006e22:	b480      	push	{r7}
 8006e24:	b083      	sub	sp, #12
 8006e26:	af00      	add	r7, sp, #0
 8006e28:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8006e2a:	bf00      	nop
 8006e2c:	370c      	adds	r7, #12
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e34:	4770      	bx	lr

08006e36 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8006e36:	b480      	push	{r7}
 8006e38:	b083      	sub	sp, #12
 8006e3a:	af00      	add	r7, sp, #0
 8006e3c:	6078      	str	r0, [r7, #4]
 8006e3e:	460b      	mov	r3, r1
 8006e40:	70fb      	strb	r3, [r7, #3]
 8006e42:	4613      	mov	r3, r2
 8006e44:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8006e46:	bf00      	nop
 8006e48:	370c      	adds	r7, #12
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e50:	4770      	bx	lr

08006e52 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006e52:	b480      	push	{r7}
 8006e54:	b083      	sub	sp, #12
 8006e56:	af00      	add	r7, sp, #0
 8006e58:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8006e5a:	bf00      	nop
 8006e5c:	370c      	adds	r7, #12
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e64:	4770      	bx	lr

08006e66 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006e66:	b480      	push	{r7}
 8006e68:	b083      	sub	sp, #12
 8006e6a:	af00      	add	r7, sp, #0
 8006e6c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8006e6e:	bf00      	nop
 8006e70:	370c      	adds	r7, #12
 8006e72:	46bd      	mov	sp, r7
 8006e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e78:	4770      	bx	lr

08006e7a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006e7a:	b480      	push	{r7}
 8006e7c:	b083      	sub	sp, #12
 8006e7e:	af00      	add	r7, sp, #0
 8006e80:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8006e82:	bf00      	nop
 8006e84:	370c      	adds	r7, #12
 8006e86:	46bd      	mov	sp, r7
 8006e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8c:	4770      	bx	lr

08006e8e <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8006e8e:	b580      	push	{r7, lr}
 8006e90:	b086      	sub	sp, #24
 8006e92:	af00      	add	r7, sp, #0
 8006e94:	60f8      	str	r0, [r7, #12]
 8006e96:	60b9      	str	r1, [r7, #8]
 8006e98:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e9e:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006eaa:	2b01      	cmp	r3, #1
 8006eac:	d101      	bne.n	8006eb2 <I2C_Slave_ISR_IT+0x24>
 8006eae:	2302      	movs	r3, #2
 8006eb0:	e0ed      	b.n	800708e <I2C_Slave_ISR_IT+0x200>
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	2201      	movs	r2, #1
 8006eb6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006eba:	693b      	ldr	r3, [r7, #16]
 8006ebc:	095b      	lsrs	r3, r3, #5
 8006ebe:	f003 0301 	and.w	r3, r3, #1
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d00a      	beq.n	8006edc <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	095b      	lsrs	r3, r3, #5
 8006eca:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d004      	beq.n	8006edc <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8006ed2:	6939      	ldr	r1, [r7, #16]
 8006ed4:	68f8      	ldr	r0, [r7, #12]
 8006ed6:	f000 f9c1 	bl	800725c <I2C_ITSlaveCplt>
 8006eda:	e0d3      	b.n	8007084 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006edc:	693b      	ldr	r3, [r7, #16]
 8006ede:	091b      	lsrs	r3, r3, #4
 8006ee0:	f003 0301 	and.w	r3, r3, #1
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d04d      	beq.n	8006f84 <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	091b      	lsrs	r3, r3, #4
 8006eec:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d047      	beq.n	8006f84 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ef8:	b29b      	uxth	r3, r3
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d128      	bne.n	8006f50 <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f04:	b2db      	uxtb	r3, r3
 8006f06:	2b28      	cmp	r3, #40	@ 0x28
 8006f08:	d108      	bne.n	8006f1c <I2C_Slave_ISR_IT+0x8e>
 8006f0a:	697b      	ldr	r3, [r7, #20]
 8006f0c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006f10:	d104      	bne.n	8006f1c <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8006f12:	6939      	ldr	r1, [r7, #16]
 8006f14:	68f8      	ldr	r0, [r7, #12]
 8006f16:	f000 fbfb 	bl	8007710 <I2C_ITListenCplt>
 8006f1a:	e032      	b.n	8006f82 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f22:	b2db      	uxtb	r3, r3
 8006f24:	2b29      	cmp	r3, #41	@ 0x29
 8006f26:	d10e      	bne.n	8006f46 <I2C_Slave_ISR_IT+0xb8>
 8006f28:	697b      	ldr	r3, [r7, #20]
 8006f2a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006f2e:	d00a      	beq.n	8006f46 <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	2210      	movs	r2, #16
 8006f36:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8006f38:	68f8      	ldr	r0, [r7, #12]
 8006f3a:	f000 fd56 	bl	80079ea <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006f3e:	68f8      	ldr	r0, [r7, #12]
 8006f40:	f000 f92d 	bl	800719e <I2C_ITSlaveSeqCplt>
 8006f44:	e01d      	b.n	8006f82 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	2210      	movs	r2, #16
 8006f4c:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8006f4e:	e096      	b.n	800707e <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	2210      	movs	r2, #16
 8006f56:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f5c:	f043 0204 	orr.w	r2, r3, #4
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006f64:	697b      	ldr	r3, [r7, #20]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d004      	beq.n	8006f74 <I2C_Slave_ISR_IT+0xe6>
 8006f6a:	697b      	ldr	r3, [r7, #20]
 8006f6c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006f70:	f040 8085 	bne.w	800707e <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f78:	4619      	mov	r1, r3
 8006f7a:	68f8      	ldr	r0, [r7, #12]
 8006f7c:	f000 fc1e 	bl	80077bc <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8006f80:	e07d      	b.n	800707e <I2C_Slave_ISR_IT+0x1f0>
 8006f82:	e07c      	b.n	800707e <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006f84:	693b      	ldr	r3, [r7, #16]
 8006f86:	089b      	lsrs	r3, r3, #2
 8006f88:	f003 0301 	and.w	r3, r3, #1
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d030      	beq.n	8006ff2 <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	089b      	lsrs	r3, r3, #2
 8006f94:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d02a      	beq.n	8006ff2 <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006fa0:	b29b      	uxth	r3, r3
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d018      	beq.n	8006fd8 <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fb0:	b2d2      	uxtb	r2, r2
 8006fb2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fb8:	1c5a      	adds	r2, r3, #1
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006fc2:	3b01      	subs	r3, #1
 8006fc4:	b29a      	uxth	r2, r3
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006fce:	b29b      	uxth	r3, r3
 8006fd0:	3b01      	subs	r3, #1
 8006fd2:	b29a      	uxth	r2, r3
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006fdc:	b29b      	uxth	r3, r3
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d14f      	bne.n	8007082 <I2C_Slave_ISR_IT+0x1f4>
 8006fe2:	697b      	ldr	r3, [r7, #20]
 8006fe4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006fe8:	d04b      	beq.n	8007082 <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8006fea:	68f8      	ldr	r0, [r7, #12]
 8006fec:	f000 f8d7 	bl	800719e <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8006ff0:	e047      	b.n	8007082 <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006ff2:	693b      	ldr	r3, [r7, #16]
 8006ff4:	08db      	lsrs	r3, r3, #3
 8006ff6:	f003 0301 	and.w	r3, r3, #1
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d00a      	beq.n	8007014 <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	08db      	lsrs	r3, r3, #3
 8007002:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007006:	2b00      	cmp	r3, #0
 8007008:	d004      	beq.n	8007014 <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800700a:	6939      	ldr	r1, [r7, #16]
 800700c:	68f8      	ldr	r0, [r7, #12]
 800700e:	f000 f842 	bl	8007096 <I2C_ITAddrCplt>
 8007012:	e037      	b.n	8007084 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007014:	693b      	ldr	r3, [r7, #16]
 8007016:	085b      	lsrs	r3, r3, #1
 8007018:	f003 0301 	and.w	r3, r3, #1
 800701c:	2b00      	cmp	r3, #0
 800701e:	d031      	beq.n	8007084 <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	085b      	lsrs	r3, r3, #1
 8007024:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007028:	2b00      	cmp	r3, #0
 800702a:	d02b      	beq.n	8007084 <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007030:	b29b      	uxth	r3, r3
 8007032:	2b00      	cmp	r3, #0
 8007034:	d018      	beq.n	8007068 <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800703a:	781a      	ldrb	r2, [r3, #0]
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007046:	1c5a      	adds	r2, r3, #1
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007050:	b29b      	uxth	r3, r3
 8007052:	3b01      	subs	r3, #1
 8007054:	b29a      	uxth	r2, r3
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800705e:	3b01      	subs	r3, #1
 8007060:	b29a      	uxth	r2, r3
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	851a      	strh	r2, [r3, #40]	@ 0x28
 8007066:	e00d      	b.n	8007084 <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8007068:	697b      	ldr	r3, [r7, #20]
 800706a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800706e:	d002      	beq.n	8007076 <I2C_Slave_ISR_IT+0x1e8>
 8007070:	697b      	ldr	r3, [r7, #20]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d106      	bne.n	8007084 <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8007076:	68f8      	ldr	r0, [r7, #12]
 8007078:	f000 f891 	bl	800719e <I2C_ITSlaveSeqCplt>
 800707c:	e002      	b.n	8007084 <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 800707e:	bf00      	nop
 8007080:	e000      	b.n	8007084 <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 8007082:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	2200      	movs	r2, #0
 8007088:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800708c:	2300      	movs	r3, #0
}
 800708e:	4618      	mov	r0, r3
 8007090:	3718      	adds	r7, #24
 8007092:	46bd      	mov	sp, r7
 8007094:	bd80      	pop	{r7, pc}

08007096 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007096:	b580      	push	{r7, lr}
 8007098:	b084      	sub	sp, #16
 800709a:	af00      	add	r7, sp, #0
 800709c:	6078      	str	r0, [r7, #4]
 800709e:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80070a6:	b2db      	uxtb	r3, r3
 80070a8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80070ac:	2b28      	cmp	r3, #40	@ 0x28
 80070ae:	d16a      	bne.n	8007186 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	699b      	ldr	r3, [r3, #24]
 80070b6:	0c1b      	lsrs	r3, r3, #16
 80070b8:	b2db      	uxtb	r3, r3
 80070ba:	f003 0301 	and.w	r3, r3, #1
 80070be:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	699b      	ldr	r3, [r3, #24]
 80070c6:	0c1b      	lsrs	r3, r3, #16
 80070c8:	b29b      	uxth	r3, r3
 80070ca:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80070ce:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	689b      	ldr	r3, [r3, #8]
 80070d6:	b29b      	uxth	r3, r3
 80070d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80070dc:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	68db      	ldr	r3, [r3, #12]
 80070e4:	b29b      	uxth	r3, r3
 80070e6:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80070ea:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	68db      	ldr	r3, [r3, #12]
 80070f0:	2b02      	cmp	r3, #2
 80070f2:	d138      	bne.n	8007166 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80070f4:	897b      	ldrh	r3, [r7, #10]
 80070f6:	09db      	lsrs	r3, r3, #7
 80070f8:	b29a      	uxth	r2, r3
 80070fa:	89bb      	ldrh	r3, [r7, #12]
 80070fc:	4053      	eors	r3, r2
 80070fe:	b29b      	uxth	r3, r3
 8007100:	f003 0306 	and.w	r3, r3, #6
 8007104:	2b00      	cmp	r3, #0
 8007106:	d11c      	bne.n	8007142 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8007108:	897b      	ldrh	r3, [r7, #10]
 800710a:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007110:	1c5a      	adds	r2, r3, #1
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800711a:	2b02      	cmp	r3, #2
 800711c:	d13b      	bne.n	8007196 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2200      	movs	r2, #0
 8007122:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	2208      	movs	r2, #8
 800712a:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2200      	movs	r2, #0
 8007130:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8007134:	89ba      	ldrh	r2, [r7, #12]
 8007136:	7bfb      	ldrb	r3, [r7, #15]
 8007138:	4619      	mov	r1, r3
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f7ff fe7b 	bl	8006e36 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8007140:	e029      	b.n	8007196 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8007142:	893b      	ldrh	r3, [r7, #8]
 8007144:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8007146:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	f000 ff10 	bl	8007f70 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2200      	movs	r2, #0
 8007154:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8007158:	89ba      	ldrh	r2, [r7, #12]
 800715a:	7bfb      	ldrb	r3, [r7, #15]
 800715c:	4619      	mov	r1, r3
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	f7ff fe69 	bl	8006e36 <HAL_I2C_AddrCallback>
}
 8007164:	e017      	b.n	8007196 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8007166:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800716a:	6878      	ldr	r0, [r7, #4]
 800716c:	f000 ff00 	bl	8007f70 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2200      	movs	r2, #0
 8007174:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8007178:	89ba      	ldrh	r2, [r7, #12]
 800717a:	7bfb      	ldrb	r3, [r7, #15]
 800717c:	4619      	mov	r1, r3
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	f7ff fe59 	bl	8006e36 <HAL_I2C_AddrCallback>
}
 8007184:	e007      	b.n	8007196 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	2208      	movs	r2, #8
 800718c:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2200      	movs	r2, #0
 8007192:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8007196:	bf00      	nop
 8007198:	3710      	adds	r7, #16
 800719a:	46bd      	mov	sp, r7
 800719c:	bd80      	pop	{r7, pc}

0800719e <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800719e:	b580      	push	{r7, lr}
 80071a0:	b084      	sub	sp, #16
 80071a2:	af00      	add	r7, sp, #0
 80071a4:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2200      	movs	r2, #0
 80071b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	0b9b      	lsrs	r3, r3, #14
 80071ba:	f003 0301 	and.w	r3, r3, #1
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d008      	beq.n	80071d4 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	681a      	ldr	r2, [r3, #0]
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80071d0:	601a      	str	r2, [r3, #0]
 80071d2:	e00d      	b.n	80071f0 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	0bdb      	lsrs	r3, r3, #15
 80071d8:	f003 0301 	and.w	r3, r3, #1
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d007      	beq.n	80071f0 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	681a      	ldr	r2, [r3, #0]
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80071ee:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80071f6:	b2db      	uxtb	r3, r3
 80071f8:	2b29      	cmp	r3, #41	@ 0x29
 80071fa:	d112      	bne.n	8007222 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2228      	movs	r2, #40	@ 0x28
 8007200:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2221      	movs	r2, #33	@ 0x21
 8007208:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800720a:	2101      	movs	r1, #1
 800720c:	6878      	ldr	r0, [r7, #4]
 800720e:	f000 feaf 	bl	8007f70 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2200      	movs	r2, #0
 8007216:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f7ff fdf7 	bl	8006e0e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8007220:	e017      	b.n	8007252 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007228:	b2db      	uxtb	r3, r3
 800722a:	2b2a      	cmp	r3, #42	@ 0x2a
 800722c:	d111      	bne.n	8007252 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2228      	movs	r2, #40	@ 0x28
 8007232:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2222      	movs	r2, #34	@ 0x22
 800723a:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800723c:	2102      	movs	r1, #2
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	f000 fe96 	bl	8007f70 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2200      	movs	r2, #0
 8007248:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800724c:	6878      	ldr	r0, [r7, #4]
 800724e:	f7ff fde8 	bl	8006e22 <HAL_I2C_SlaveRxCpltCallback>
}
 8007252:	bf00      	nop
 8007254:	3710      	adds	r7, #16
 8007256:	46bd      	mov	sp, r7
 8007258:	bd80      	pop	{r7, pc}
	...

0800725c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b086      	sub	sp, #24
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
 8007264:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007276:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800727e:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	2220      	movs	r2, #32
 8007286:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007288:	7afb      	ldrb	r3, [r7, #11]
 800728a:	2b21      	cmp	r3, #33	@ 0x21
 800728c:	d002      	beq.n	8007294 <I2C_ITSlaveCplt+0x38>
 800728e:	7afb      	ldrb	r3, [r7, #11]
 8007290:	2b29      	cmp	r3, #41	@ 0x29
 8007292:	d108      	bne.n	80072a6 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8007294:	f248 0101 	movw	r1, #32769	@ 0x8001
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	f000 fe69 	bl	8007f70 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2221      	movs	r2, #33	@ 0x21
 80072a2:	631a      	str	r2, [r3, #48]	@ 0x30
 80072a4:	e019      	b.n	80072da <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80072a6:	7afb      	ldrb	r3, [r7, #11]
 80072a8:	2b22      	cmp	r3, #34	@ 0x22
 80072aa:	d002      	beq.n	80072b2 <I2C_ITSlaveCplt+0x56>
 80072ac:	7afb      	ldrb	r3, [r7, #11]
 80072ae:	2b2a      	cmp	r3, #42	@ 0x2a
 80072b0:	d108      	bne.n	80072c4 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80072b2:	f248 0102 	movw	r1, #32770	@ 0x8002
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f000 fe5a 	bl	8007f70 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2222      	movs	r2, #34	@ 0x22
 80072c0:	631a      	str	r2, [r3, #48]	@ 0x30
 80072c2:	e00a      	b.n	80072da <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 80072c4:	7afb      	ldrb	r3, [r7, #11]
 80072c6:	2b28      	cmp	r3, #40	@ 0x28
 80072c8:	d107      	bne.n	80072da <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80072ca:	f248 0103 	movw	r1, #32771	@ 0x8003
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	f000 fe4e 	bl	8007f70 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2200      	movs	r2, #0
 80072d8:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	685a      	ldr	r2, [r3, #4]
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80072e8:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	6859      	ldr	r1, [r3, #4]
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681a      	ldr	r2, [r3, #0]
 80072f4:	4b80      	ldr	r3, [pc, #512]	@ (80074f8 <I2C_ITSlaveCplt+0x29c>)
 80072f6:	400b      	ands	r3, r1
 80072f8:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	f000 fb75 	bl	80079ea <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8007300:	693b      	ldr	r3, [r7, #16]
 8007302:	0b9b      	lsrs	r3, r3, #14
 8007304:	f003 0301 	and.w	r3, r3, #1
 8007308:	2b00      	cmp	r3, #0
 800730a:	d07a      	beq.n	8007402 <I2C_ITSlaveCplt+0x1a6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	681a      	ldr	r2, [r3, #0]
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800731a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007320:	2b00      	cmp	r3, #0
 8007322:	f000 8112 	beq.w	800754a <I2C_ITSlaveCplt+0x2ee>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	4a73      	ldr	r2, [pc, #460]	@ (80074fc <I2C_ITSlaveCplt+0x2a0>)
 800732e:	4293      	cmp	r3, r2
 8007330:	d059      	beq.n	80073e6 <I2C_ITSlaveCplt+0x18a>
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	4a71      	ldr	r2, [pc, #452]	@ (8007500 <I2C_ITSlaveCplt+0x2a4>)
 800733a:	4293      	cmp	r3, r2
 800733c:	d053      	beq.n	80073e6 <I2C_ITSlaveCplt+0x18a>
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4a6f      	ldr	r2, [pc, #444]	@ (8007504 <I2C_ITSlaveCplt+0x2a8>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d04d      	beq.n	80073e6 <I2C_ITSlaveCplt+0x18a>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	4a6d      	ldr	r2, [pc, #436]	@ (8007508 <I2C_ITSlaveCplt+0x2ac>)
 8007352:	4293      	cmp	r3, r2
 8007354:	d047      	beq.n	80073e6 <I2C_ITSlaveCplt+0x18a>
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	4a6b      	ldr	r2, [pc, #428]	@ (800750c <I2C_ITSlaveCplt+0x2b0>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d041      	beq.n	80073e6 <I2C_ITSlaveCplt+0x18a>
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	4a69      	ldr	r2, [pc, #420]	@ (8007510 <I2C_ITSlaveCplt+0x2b4>)
 800736a:	4293      	cmp	r3, r2
 800736c:	d03b      	beq.n	80073e6 <I2C_ITSlaveCplt+0x18a>
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	4a67      	ldr	r2, [pc, #412]	@ (8007514 <I2C_ITSlaveCplt+0x2b8>)
 8007376:	4293      	cmp	r3, r2
 8007378:	d035      	beq.n	80073e6 <I2C_ITSlaveCplt+0x18a>
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	4a65      	ldr	r2, [pc, #404]	@ (8007518 <I2C_ITSlaveCplt+0x2bc>)
 8007382:	4293      	cmp	r3, r2
 8007384:	d02f      	beq.n	80073e6 <I2C_ITSlaveCplt+0x18a>
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	4a63      	ldr	r2, [pc, #396]	@ (800751c <I2C_ITSlaveCplt+0x2c0>)
 800738e:	4293      	cmp	r3, r2
 8007390:	d029      	beq.n	80073e6 <I2C_ITSlaveCplt+0x18a>
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	4a61      	ldr	r2, [pc, #388]	@ (8007520 <I2C_ITSlaveCplt+0x2c4>)
 800739a:	4293      	cmp	r3, r2
 800739c:	d023      	beq.n	80073e6 <I2C_ITSlaveCplt+0x18a>
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	4a5f      	ldr	r2, [pc, #380]	@ (8007524 <I2C_ITSlaveCplt+0x2c8>)
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d01d      	beq.n	80073e6 <I2C_ITSlaveCplt+0x18a>
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	4a5d      	ldr	r2, [pc, #372]	@ (8007528 <I2C_ITSlaveCplt+0x2cc>)
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d017      	beq.n	80073e6 <I2C_ITSlaveCplt+0x18a>
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	4a5b      	ldr	r2, [pc, #364]	@ (800752c <I2C_ITSlaveCplt+0x2d0>)
 80073be:	4293      	cmp	r3, r2
 80073c0:	d011      	beq.n	80073e6 <I2C_ITSlaveCplt+0x18a>
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	4a59      	ldr	r2, [pc, #356]	@ (8007530 <I2C_ITSlaveCplt+0x2d4>)
 80073ca:	4293      	cmp	r3, r2
 80073cc:	d00b      	beq.n	80073e6 <I2C_ITSlaveCplt+0x18a>
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	4a57      	ldr	r2, [pc, #348]	@ (8007534 <I2C_ITSlaveCplt+0x2d8>)
 80073d6:	4293      	cmp	r3, r2
 80073d8:	d005      	beq.n	80073e6 <I2C_ITSlaveCplt+0x18a>
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	4a55      	ldr	r2, [pc, #340]	@ (8007538 <I2C_ITSlaveCplt+0x2dc>)
 80073e2:	4293      	cmp	r3, r2
 80073e4:	d105      	bne.n	80073f2 <I2C_ITSlaveCplt+0x196>
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	685b      	ldr	r3, [r3, #4]
 80073ee:	b29b      	uxth	r3, r3
 80073f0:	e004      	b.n	80073fc <I2C_ITSlaveCplt+0x1a0>
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	685b      	ldr	r3, [r3, #4]
 80073fa:	b29b      	uxth	r3, r3
 80073fc:	687a      	ldr	r2, [r7, #4]
 80073fe:	8553      	strh	r3, [r2, #42]	@ 0x2a
 8007400:	e0a3      	b.n	800754a <I2C_ITSlaveCplt+0x2ee>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8007402:	693b      	ldr	r3, [r7, #16]
 8007404:	0bdb      	lsrs	r3, r3, #15
 8007406:	f003 0301 	and.w	r3, r3, #1
 800740a:	2b00      	cmp	r3, #0
 800740c:	f000 809d 	beq.w	800754a <I2C_ITSlaveCplt+0x2ee>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	681a      	ldr	r2, [r3, #0]
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800741e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007424:	2b00      	cmp	r3, #0
 8007426:	f000 8090 	beq.w	800754a <I2C_ITSlaveCplt+0x2ee>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	4a32      	ldr	r2, [pc, #200]	@ (80074fc <I2C_ITSlaveCplt+0x2a0>)
 8007432:	4293      	cmp	r3, r2
 8007434:	d059      	beq.n	80074ea <I2C_ITSlaveCplt+0x28e>
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	4a30      	ldr	r2, [pc, #192]	@ (8007500 <I2C_ITSlaveCplt+0x2a4>)
 800743e:	4293      	cmp	r3, r2
 8007440:	d053      	beq.n	80074ea <I2C_ITSlaveCplt+0x28e>
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	4a2e      	ldr	r2, [pc, #184]	@ (8007504 <I2C_ITSlaveCplt+0x2a8>)
 800744a:	4293      	cmp	r3, r2
 800744c:	d04d      	beq.n	80074ea <I2C_ITSlaveCplt+0x28e>
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	4a2c      	ldr	r2, [pc, #176]	@ (8007508 <I2C_ITSlaveCplt+0x2ac>)
 8007456:	4293      	cmp	r3, r2
 8007458:	d047      	beq.n	80074ea <I2C_ITSlaveCplt+0x28e>
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	4a2a      	ldr	r2, [pc, #168]	@ (800750c <I2C_ITSlaveCplt+0x2b0>)
 8007462:	4293      	cmp	r3, r2
 8007464:	d041      	beq.n	80074ea <I2C_ITSlaveCplt+0x28e>
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	4a28      	ldr	r2, [pc, #160]	@ (8007510 <I2C_ITSlaveCplt+0x2b4>)
 800746e:	4293      	cmp	r3, r2
 8007470:	d03b      	beq.n	80074ea <I2C_ITSlaveCplt+0x28e>
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	4a26      	ldr	r2, [pc, #152]	@ (8007514 <I2C_ITSlaveCplt+0x2b8>)
 800747a:	4293      	cmp	r3, r2
 800747c:	d035      	beq.n	80074ea <I2C_ITSlaveCplt+0x28e>
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	4a24      	ldr	r2, [pc, #144]	@ (8007518 <I2C_ITSlaveCplt+0x2bc>)
 8007486:	4293      	cmp	r3, r2
 8007488:	d02f      	beq.n	80074ea <I2C_ITSlaveCplt+0x28e>
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	4a22      	ldr	r2, [pc, #136]	@ (800751c <I2C_ITSlaveCplt+0x2c0>)
 8007492:	4293      	cmp	r3, r2
 8007494:	d029      	beq.n	80074ea <I2C_ITSlaveCplt+0x28e>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	4a20      	ldr	r2, [pc, #128]	@ (8007520 <I2C_ITSlaveCplt+0x2c4>)
 800749e:	4293      	cmp	r3, r2
 80074a0:	d023      	beq.n	80074ea <I2C_ITSlaveCplt+0x28e>
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	4a1e      	ldr	r2, [pc, #120]	@ (8007524 <I2C_ITSlaveCplt+0x2c8>)
 80074aa:	4293      	cmp	r3, r2
 80074ac:	d01d      	beq.n	80074ea <I2C_ITSlaveCplt+0x28e>
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	4a1c      	ldr	r2, [pc, #112]	@ (8007528 <I2C_ITSlaveCplt+0x2cc>)
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d017      	beq.n	80074ea <I2C_ITSlaveCplt+0x28e>
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	4a1a      	ldr	r2, [pc, #104]	@ (800752c <I2C_ITSlaveCplt+0x2d0>)
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d011      	beq.n	80074ea <I2C_ITSlaveCplt+0x28e>
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	4a18      	ldr	r2, [pc, #96]	@ (8007530 <I2C_ITSlaveCplt+0x2d4>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d00b      	beq.n	80074ea <I2C_ITSlaveCplt+0x28e>
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4a16      	ldr	r2, [pc, #88]	@ (8007534 <I2C_ITSlaveCplt+0x2d8>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d005      	beq.n	80074ea <I2C_ITSlaveCplt+0x28e>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	4a14      	ldr	r2, [pc, #80]	@ (8007538 <I2C_ITSlaveCplt+0x2dc>)
 80074e6:	4293      	cmp	r3, r2
 80074e8:	d128      	bne.n	800753c <I2C_ITSlaveCplt+0x2e0>
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	685b      	ldr	r3, [r3, #4]
 80074f2:	b29b      	uxth	r3, r3
 80074f4:	e027      	b.n	8007546 <I2C_ITSlaveCplt+0x2ea>
 80074f6:	bf00      	nop
 80074f8:	fe00e800 	.word	0xfe00e800
 80074fc:	40020010 	.word	0x40020010
 8007500:	40020028 	.word	0x40020028
 8007504:	40020040 	.word	0x40020040
 8007508:	40020058 	.word	0x40020058
 800750c:	40020070 	.word	0x40020070
 8007510:	40020088 	.word	0x40020088
 8007514:	400200a0 	.word	0x400200a0
 8007518:	400200b8 	.word	0x400200b8
 800751c:	40020410 	.word	0x40020410
 8007520:	40020428 	.word	0x40020428
 8007524:	40020440 	.word	0x40020440
 8007528:	40020458 	.word	0x40020458
 800752c:	40020470 	.word	0x40020470
 8007530:	40020488 	.word	0x40020488
 8007534:	400204a0 	.word	0x400204a0
 8007538:	400204b8 	.word	0x400204b8
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	685b      	ldr	r3, [r3, #4]
 8007544:	b29b      	uxth	r3, r3
 8007546:	687a      	ldr	r2, [r7, #4]
 8007548:	8553      	strh	r3, [r2, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800754a:	697b      	ldr	r3, [r7, #20]
 800754c:	089b      	lsrs	r3, r3, #2
 800754e:	f003 0301 	and.w	r3, r3, #1
 8007552:	2b00      	cmp	r3, #0
 8007554:	d020      	beq.n	8007598 <I2C_ITSlaveCplt+0x33c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8007556:	697b      	ldr	r3, [r7, #20]
 8007558:	f023 0304 	bic.w	r3, r3, #4
 800755c:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007568:	b2d2      	uxtb	r2, r2
 800756a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007570:	1c5a      	adds	r2, r3, #1
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800757a:	2b00      	cmp	r3, #0
 800757c:	d00c      	beq.n	8007598 <I2C_ITSlaveCplt+0x33c>
    {
      hi2c->XferSize--;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007582:	3b01      	subs	r3, #1
 8007584:	b29a      	uxth	r2, r3
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800758e:	b29b      	uxth	r3, r3
 8007590:	3b01      	subs	r3, #1
 8007592:	b29a      	uxth	r2, r3
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800759c:	b29b      	uxth	r3, r3
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d005      	beq.n	80075ae <I2C_ITSlaveCplt+0x352>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075a6:	f043 0204 	orr.w	r2, r3, #4
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80075ae:	697b      	ldr	r3, [r7, #20]
 80075b0:	091b      	lsrs	r3, r3, #4
 80075b2:	f003 0301 	and.w	r3, r3, #1
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d04a      	beq.n	8007650 <I2C_ITSlaveCplt+0x3f4>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 80075ba:	693b      	ldr	r3, [r7, #16]
 80075bc:	091b      	lsrs	r3, r3, #4
 80075be:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d044      	beq.n	8007650 <I2C_ITSlaveCplt+0x3f4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80075ca:	b29b      	uxth	r3, r3
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d128      	bne.n	8007622 <I2C_ITSlaveCplt+0x3c6>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80075d6:	b2db      	uxtb	r3, r3
 80075d8:	2b28      	cmp	r3, #40	@ 0x28
 80075da:	d108      	bne.n	80075ee <I2C_ITSlaveCplt+0x392>
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80075e2:	d104      	bne.n	80075ee <I2C_ITSlaveCplt+0x392>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80075e4:	6979      	ldr	r1, [r7, #20]
 80075e6:	6878      	ldr	r0, [r7, #4]
 80075e8:	f000 f892 	bl	8007710 <I2C_ITListenCplt>
 80075ec:	e030      	b.n	8007650 <I2C_ITSlaveCplt+0x3f4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80075f4:	b2db      	uxtb	r3, r3
 80075f6:	2b29      	cmp	r3, #41	@ 0x29
 80075f8:	d10e      	bne.n	8007618 <I2C_ITSlaveCplt+0x3bc>
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007600:	d00a      	beq.n	8007618 <I2C_ITSlaveCplt+0x3bc>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	2210      	movs	r2, #16
 8007608:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800760a:	6878      	ldr	r0, [r7, #4]
 800760c:	f000 f9ed 	bl	80079ea <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8007610:	6878      	ldr	r0, [r7, #4]
 8007612:	f7ff fdc4 	bl	800719e <I2C_ITSlaveSeqCplt>
 8007616:	e01b      	b.n	8007650 <I2C_ITSlaveCplt+0x3f4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	2210      	movs	r2, #16
 800761e:	61da      	str	r2, [r3, #28]
 8007620:	e016      	b.n	8007650 <I2C_ITSlaveCplt+0x3f4>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	2210      	movs	r2, #16
 8007628:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800762e:	f043 0204 	orr.w	r2, r3, #4
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d003      	beq.n	8007644 <I2C_ITSlaveCplt+0x3e8>
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007642:	d105      	bne.n	8007650 <I2C_ITSlaveCplt+0x3f4>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007648:	4619      	mov	r1, r3
 800764a:	6878      	ldr	r0, [r7, #4]
 800764c:	f000 f8b6 	bl	80077bc <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2200      	movs	r2, #0
 8007654:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2200      	movs	r2, #0
 800765c:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007662:	2b00      	cmp	r3, #0
 8007664:	d010      	beq.n	8007688 <I2C_ITSlaveCplt+0x42c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800766a:	4619      	mov	r1, r3
 800766c:	6878      	ldr	r0, [r7, #4]
 800766e:	f000 f8a5 	bl	80077bc <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007678:	b2db      	uxtb	r3, r3
 800767a:	2b28      	cmp	r3, #40	@ 0x28
 800767c:	d141      	bne.n	8007702 <I2C_ITSlaveCplt+0x4a6>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800767e:	6979      	ldr	r1, [r7, #20]
 8007680:	6878      	ldr	r0, [r7, #4]
 8007682:	f000 f845 	bl	8007710 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007686:	e03c      	b.n	8007702 <I2C_ITSlaveCplt+0x4a6>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800768c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007690:	d014      	beq.n	80076bc <I2C_ITSlaveCplt+0x460>
    I2C_ITSlaveSeqCplt(hi2c);
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	f7ff fd83 	bl	800719e <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	4a1c      	ldr	r2, [pc, #112]	@ (800770c <I2C_ITSlaveCplt+0x4b0>)
 800769c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2220      	movs	r2, #32
 80076a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2200      	movs	r2, #0
 80076aa:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2200      	movs	r2, #0
 80076b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80076b4:	6878      	ldr	r0, [r7, #4]
 80076b6:	f7ff fbcc 	bl	8006e52 <HAL_I2C_ListenCpltCallback>
}
 80076ba:	e022      	b.n	8007702 <I2C_ITSlaveCplt+0x4a6>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80076c2:	b2db      	uxtb	r3, r3
 80076c4:	2b22      	cmp	r3, #34	@ 0x22
 80076c6:	d10e      	bne.n	80076e6 <I2C_ITSlaveCplt+0x48a>
    hi2c->State = HAL_I2C_STATE_READY;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2220      	movs	r2, #32
 80076cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2200      	movs	r2, #0
 80076d4:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2200      	movs	r2, #0
 80076da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80076de:	6878      	ldr	r0, [r7, #4]
 80076e0:	f7ff fb9f 	bl	8006e22 <HAL_I2C_SlaveRxCpltCallback>
}
 80076e4:	e00d      	b.n	8007702 <I2C_ITSlaveCplt+0x4a6>
    hi2c->State = HAL_I2C_STATE_READY;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2220      	movs	r2, #32
 80076ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	2200      	movs	r2, #0
 80076f2:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2200      	movs	r2, #0
 80076f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80076fc:	6878      	ldr	r0, [r7, #4]
 80076fe:	f7ff fb86 	bl	8006e0e <HAL_I2C_SlaveTxCpltCallback>
}
 8007702:	bf00      	nop
 8007704:	3718      	adds	r7, #24
 8007706:	46bd      	mov	sp, r7
 8007708:	bd80      	pop	{r7, pc}
 800770a:	bf00      	nop
 800770c:	ffff0000 	.word	0xffff0000

08007710 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b082      	sub	sp, #8
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
 8007718:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	4a26      	ldr	r2, [pc, #152]	@ (80077b8 <I2C_ITListenCplt+0xa8>)
 800771e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2200      	movs	r2, #0
 8007724:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2220      	movs	r2, #32
 800772a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2200      	movs	r2, #0
 8007732:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2200      	movs	r2, #0
 800773a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	089b      	lsrs	r3, r3, #2
 8007740:	f003 0301 	and.w	r3, r3, #1
 8007744:	2b00      	cmp	r3, #0
 8007746:	d022      	beq.n	800778e <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007752:	b2d2      	uxtb	r2, r2
 8007754:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800775a:	1c5a      	adds	r2, r3, #1
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007764:	2b00      	cmp	r3, #0
 8007766:	d012      	beq.n	800778e <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800776c:	3b01      	subs	r3, #1
 800776e:	b29a      	uxth	r2, r3
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007778:	b29b      	uxth	r3, r3
 800777a:	3b01      	subs	r3, #1
 800777c:	b29a      	uxth	r2, r3
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007786:	f043 0204 	orr.w	r2, r3, #4
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800778e:	f248 0103 	movw	r1, #32771	@ 0x8003
 8007792:	6878      	ldr	r0, [r7, #4]
 8007794:	f000 fbec 	bl	8007f70 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	2210      	movs	r2, #16
 800779e:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2200      	movs	r2, #0
 80077a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80077a8:	6878      	ldr	r0, [r7, #4]
 80077aa:	f7ff fb52 	bl	8006e52 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80077ae:	bf00      	nop
 80077b0:	3708      	adds	r7, #8
 80077b2:	46bd      	mov	sp, r7
 80077b4:	bd80      	pop	{r7, pc}
 80077b6:	bf00      	nop
 80077b8:	ffff0000 	.word	0xffff0000

080077bc <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b084      	sub	sp, #16
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
 80077c4:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80077cc:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	2200      	movs	r2, #0
 80077d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	4a6d      	ldr	r2, [pc, #436]	@ (8007990 <I2C_ITError+0x1d4>)
 80077da:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2200      	movs	r2, #0
 80077e0:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	431a      	orrs	r2, r3
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80077ee:	7bfb      	ldrb	r3, [r7, #15]
 80077f0:	2b28      	cmp	r3, #40	@ 0x28
 80077f2:	d005      	beq.n	8007800 <I2C_ITError+0x44>
 80077f4:	7bfb      	ldrb	r3, [r7, #15]
 80077f6:	2b29      	cmp	r3, #41	@ 0x29
 80077f8:	d002      	beq.n	8007800 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80077fa:	7bfb      	ldrb	r3, [r7, #15]
 80077fc:	2b2a      	cmp	r3, #42	@ 0x2a
 80077fe:	d10b      	bne.n	8007818 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007800:	2103      	movs	r1, #3
 8007802:	6878      	ldr	r0, [r7, #4]
 8007804:	f000 fbb4 	bl	8007f70 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2228      	movs	r2, #40	@ 0x28
 800780c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	4a60      	ldr	r2, [pc, #384]	@ (8007994 <I2C_ITError+0x1d8>)
 8007814:	635a      	str	r2, [r3, #52]	@ 0x34
 8007816:	e030      	b.n	800787a <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007818:	f248 0103 	movw	r1, #32771	@ 0x8003
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	f000 fba7 	bl	8007f70 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	f000 f8e1 	bl	80079ea <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800782e:	b2db      	uxtb	r3, r3
 8007830:	2b60      	cmp	r3, #96	@ 0x60
 8007832:	d01f      	beq.n	8007874 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2220      	movs	r2, #32
 8007838:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	699b      	ldr	r3, [r3, #24]
 8007842:	f003 0320 	and.w	r3, r3, #32
 8007846:	2b20      	cmp	r3, #32
 8007848:	d114      	bne.n	8007874 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	699b      	ldr	r3, [r3, #24]
 8007850:	f003 0310 	and.w	r3, r3, #16
 8007854:	2b10      	cmp	r3, #16
 8007856:	d109      	bne.n	800786c <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	2210      	movs	r2, #16
 800785e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007864:	f043 0204 	orr.w	r2, r3, #4
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	2220      	movs	r2, #32
 8007872:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2200      	movs	r2, #0
 8007878:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800787e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007884:	2b00      	cmp	r3, #0
 8007886:	d039      	beq.n	80078fc <I2C_ITError+0x140>
 8007888:	68bb      	ldr	r3, [r7, #8]
 800788a:	2b11      	cmp	r3, #17
 800788c:	d002      	beq.n	8007894 <I2C_ITError+0xd8>
 800788e:	68bb      	ldr	r3, [r7, #8]
 8007890:	2b21      	cmp	r3, #33	@ 0x21
 8007892:	d133      	bne.n	80078fc <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800789e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80078a2:	d107      	bne.n	80078b4 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	681a      	ldr	r2, [r3, #0]
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80078b2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078b8:	4618      	mov	r0, r3
 80078ba:	f7fd fd13 	bl	80052e4 <HAL_DMA_GetState>
 80078be:	4603      	mov	r3, r0
 80078c0:	2b01      	cmp	r3, #1
 80078c2:	d017      	beq.n	80078f4 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078c8:	4a33      	ldr	r2, [pc, #204]	@ (8007998 <I2C_ITError+0x1dc>)
 80078ca:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2200      	movs	r2, #0
 80078d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078d8:	4618      	mov	r0, r3
 80078da:	f7fc fb93 	bl	8004004 <HAL_DMA_Abort_IT>
 80078de:	4603      	mov	r3, r0
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d04d      	beq.n	8007980 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80078ea:	687a      	ldr	r2, [r7, #4]
 80078ec:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80078ee:	4610      	mov	r0, r2
 80078f0:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80078f2:	e045      	b.n	8007980 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80078f4:	6878      	ldr	r0, [r7, #4]
 80078f6:	f000 f851 	bl	800799c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80078fa:	e041      	b.n	8007980 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007900:	2b00      	cmp	r3, #0
 8007902:	d039      	beq.n	8007978 <I2C_ITError+0x1bc>
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	2b12      	cmp	r3, #18
 8007908:	d002      	beq.n	8007910 <I2C_ITError+0x154>
 800790a:	68bb      	ldr	r3, [r7, #8]
 800790c:	2b22      	cmp	r3, #34	@ 0x22
 800790e:	d133      	bne.n	8007978 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800791a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800791e:	d107      	bne.n	8007930 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	681a      	ldr	r2, [r3, #0]
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800792e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007934:	4618      	mov	r0, r3
 8007936:	f7fd fcd5 	bl	80052e4 <HAL_DMA_GetState>
 800793a:	4603      	mov	r3, r0
 800793c:	2b01      	cmp	r3, #1
 800793e:	d017      	beq.n	8007970 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007944:	4a14      	ldr	r2, [pc, #80]	@ (8007998 <I2C_ITError+0x1dc>)
 8007946:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2200      	movs	r2, #0
 800794c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007954:	4618      	mov	r0, r3
 8007956:	f7fc fb55 	bl	8004004 <HAL_DMA_Abort_IT>
 800795a:	4603      	mov	r3, r0
 800795c:	2b00      	cmp	r3, #0
 800795e:	d011      	beq.n	8007984 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007964:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007966:	687a      	ldr	r2, [r7, #4]
 8007968:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800796a:	4610      	mov	r0, r2
 800796c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800796e:	e009      	b.n	8007984 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8007970:	6878      	ldr	r0, [r7, #4]
 8007972:	f000 f813 	bl	800799c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007976:	e005      	b.n	8007984 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8007978:	6878      	ldr	r0, [r7, #4]
 800797a:	f000 f80f 	bl	800799c <I2C_TreatErrorCallback>
  }
}
 800797e:	e002      	b.n	8007986 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007980:	bf00      	nop
 8007982:	e000      	b.n	8007986 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007984:	bf00      	nop
}
 8007986:	bf00      	nop
 8007988:	3710      	adds	r7, #16
 800798a:	46bd      	mov	sp, r7
 800798c:	bd80      	pop	{r7, pc}
 800798e:	bf00      	nop
 8007990:	ffff0000 	.word	0xffff0000
 8007994:	08006e8f 	.word	0x08006e8f
 8007998:	08007a33 	.word	0x08007a33

0800799c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b082      	sub	sp, #8
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80079aa:	b2db      	uxtb	r3, r3
 80079ac:	2b60      	cmp	r3, #96	@ 0x60
 80079ae:	d10e      	bne.n	80079ce <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2220      	movs	r2, #32
 80079b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2200      	movs	r2, #0
 80079bc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2200      	movs	r2, #0
 80079c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80079c6:	6878      	ldr	r0, [r7, #4]
 80079c8:	f7ff fa57 	bl	8006e7a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80079cc:	e009      	b.n	80079e2 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2200      	movs	r2, #0
 80079d2:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2200      	movs	r2, #0
 80079d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80079dc:	6878      	ldr	r0, [r7, #4]
 80079de:	f7ff fa42 	bl	8006e66 <HAL_I2C_ErrorCallback>
}
 80079e2:	bf00      	nop
 80079e4:	3708      	adds	r7, #8
 80079e6:	46bd      	mov	sp, r7
 80079e8:	bd80      	pop	{r7, pc}

080079ea <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80079ea:	b480      	push	{r7}
 80079ec:	b083      	sub	sp, #12
 80079ee:	af00      	add	r7, sp, #0
 80079f0:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	699b      	ldr	r3, [r3, #24]
 80079f8:	f003 0302 	and.w	r3, r3, #2
 80079fc:	2b02      	cmp	r3, #2
 80079fe:	d103      	bne.n	8007a08 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	2200      	movs	r2, #0
 8007a06:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	699b      	ldr	r3, [r3, #24]
 8007a0e:	f003 0301 	and.w	r3, r3, #1
 8007a12:	2b01      	cmp	r3, #1
 8007a14:	d007      	beq.n	8007a26 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	699a      	ldr	r2, [r3, #24]
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f042 0201 	orr.w	r2, r2, #1
 8007a24:	619a      	str	r2, [r3, #24]
  }
}
 8007a26:	bf00      	nop
 8007a28:	370c      	adds	r7, #12
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a30:	4770      	bx	lr

08007a32 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8007a32:	b580      	push	{r7, lr}
 8007a34:	b084      	sub	sp, #16
 8007a36:	af00      	add	r7, sp, #0
 8007a38:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a3e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d003      	beq.n	8007a50 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d003      	beq.n	8007a60 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8007a60:	68f8      	ldr	r0, [r7, #12]
 8007a62:	f7ff ff9b 	bl	800799c <I2C_TreatErrorCallback>
}
 8007a66:	bf00      	nop
 8007a68:	3710      	adds	r7, #16
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	bd80      	pop	{r7, pc}

08007a6e <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007a6e:	b580      	push	{r7, lr}
 8007a70:	b084      	sub	sp, #16
 8007a72:	af00      	add	r7, sp, #0
 8007a74:	60f8      	str	r0, [r7, #12]
 8007a76:	60b9      	str	r1, [r7, #8]
 8007a78:	603b      	str	r3, [r7, #0]
 8007a7a:	4613      	mov	r3, r2
 8007a7c:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007a7e:	e03b      	b.n	8007af8 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007a80:	69ba      	ldr	r2, [r7, #24]
 8007a82:	6839      	ldr	r1, [r7, #0]
 8007a84:	68f8      	ldr	r0, [r7, #12]
 8007a86:	f000 f961 	bl	8007d4c <I2C_IsErrorOccurred>
 8007a8a:	4603      	mov	r3, r0
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d001      	beq.n	8007a94 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8007a90:	2301      	movs	r3, #1
 8007a92:	e041      	b.n	8007b18 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a9a:	d02d      	beq.n	8007af8 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a9c:	f7fa fd1e 	bl	80024dc <HAL_GetTick>
 8007aa0:	4602      	mov	r2, r0
 8007aa2:	69bb      	ldr	r3, [r7, #24]
 8007aa4:	1ad3      	subs	r3, r2, r3
 8007aa6:	683a      	ldr	r2, [r7, #0]
 8007aa8:	429a      	cmp	r2, r3
 8007aaa:	d302      	bcc.n	8007ab2 <I2C_WaitOnFlagUntilTimeout+0x44>
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d122      	bne.n	8007af8 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	699a      	ldr	r2, [r3, #24]
 8007ab8:	68bb      	ldr	r3, [r7, #8]
 8007aba:	4013      	ands	r3, r2
 8007abc:	68ba      	ldr	r2, [r7, #8]
 8007abe:	429a      	cmp	r2, r3
 8007ac0:	bf0c      	ite	eq
 8007ac2:	2301      	moveq	r3, #1
 8007ac4:	2300      	movne	r3, #0
 8007ac6:	b2db      	uxtb	r3, r3
 8007ac8:	461a      	mov	r2, r3
 8007aca:	79fb      	ldrb	r3, [r7, #7]
 8007acc:	429a      	cmp	r2, r3
 8007ace:	d113      	bne.n	8007af8 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ad4:	f043 0220 	orr.w	r2, r3, #32
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	2220      	movs	r2, #32
 8007ae0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	2200      	movs	r2, #0
 8007af0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8007af4:	2301      	movs	r3, #1
 8007af6:	e00f      	b.n	8007b18 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	699a      	ldr	r2, [r3, #24]
 8007afe:	68bb      	ldr	r3, [r7, #8]
 8007b00:	4013      	ands	r3, r2
 8007b02:	68ba      	ldr	r2, [r7, #8]
 8007b04:	429a      	cmp	r2, r3
 8007b06:	bf0c      	ite	eq
 8007b08:	2301      	moveq	r3, #1
 8007b0a:	2300      	movne	r3, #0
 8007b0c:	b2db      	uxtb	r3, r3
 8007b0e:	461a      	mov	r2, r3
 8007b10:	79fb      	ldrb	r3, [r7, #7]
 8007b12:	429a      	cmp	r2, r3
 8007b14:	d0b4      	beq.n	8007a80 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007b16:	2300      	movs	r3, #0
}
 8007b18:	4618      	mov	r0, r3
 8007b1a:	3710      	adds	r7, #16
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	bd80      	pop	{r7, pc}

08007b20 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b084      	sub	sp, #16
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	60f8      	str	r0, [r7, #12]
 8007b28:	60b9      	str	r1, [r7, #8]
 8007b2a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007b2c:	e033      	b.n	8007b96 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007b2e:	687a      	ldr	r2, [r7, #4]
 8007b30:	68b9      	ldr	r1, [r7, #8]
 8007b32:	68f8      	ldr	r0, [r7, #12]
 8007b34:	f000 f90a 	bl	8007d4c <I2C_IsErrorOccurred>
 8007b38:	4603      	mov	r3, r0
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d001      	beq.n	8007b42 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007b3e:	2301      	movs	r3, #1
 8007b40:	e031      	b.n	8007ba6 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b42:	68bb      	ldr	r3, [r7, #8]
 8007b44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b48:	d025      	beq.n	8007b96 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b4a:	f7fa fcc7 	bl	80024dc <HAL_GetTick>
 8007b4e:	4602      	mov	r2, r0
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	1ad3      	subs	r3, r2, r3
 8007b54:	68ba      	ldr	r2, [r7, #8]
 8007b56:	429a      	cmp	r2, r3
 8007b58:	d302      	bcc.n	8007b60 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007b5a:	68bb      	ldr	r3, [r7, #8]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d11a      	bne.n	8007b96 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	699b      	ldr	r3, [r3, #24]
 8007b66:	f003 0302 	and.w	r3, r3, #2
 8007b6a:	2b02      	cmp	r3, #2
 8007b6c:	d013      	beq.n	8007b96 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b72:	f043 0220 	orr.w	r2, r3, #32
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	2220      	movs	r2, #32
 8007b7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	2200      	movs	r2, #0
 8007b86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8007b92:	2301      	movs	r3, #1
 8007b94:	e007      	b.n	8007ba6 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	699b      	ldr	r3, [r3, #24]
 8007b9c:	f003 0302 	and.w	r3, r3, #2
 8007ba0:	2b02      	cmp	r3, #2
 8007ba2:	d1c4      	bne.n	8007b2e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007ba4:	2300      	movs	r3, #0
}
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	3710      	adds	r7, #16
 8007baa:	46bd      	mov	sp, r7
 8007bac:	bd80      	pop	{r7, pc}

08007bae <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007bae:	b580      	push	{r7, lr}
 8007bb0:	b084      	sub	sp, #16
 8007bb2:	af00      	add	r7, sp, #0
 8007bb4:	60f8      	str	r0, [r7, #12]
 8007bb6:	60b9      	str	r1, [r7, #8]
 8007bb8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007bba:	e02f      	b.n	8007c1c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007bbc:	687a      	ldr	r2, [r7, #4]
 8007bbe:	68b9      	ldr	r1, [r7, #8]
 8007bc0:	68f8      	ldr	r0, [r7, #12]
 8007bc2:	f000 f8c3 	bl	8007d4c <I2C_IsErrorOccurred>
 8007bc6:	4603      	mov	r3, r0
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d001      	beq.n	8007bd0 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007bcc:	2301      	movs	r3, #1
 8007bce:	e02d      	b.n	8007c2c <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007bd0:	f7fa fc84 	bl	80024dc <HAL_GetTick>
 8007bd4:	4602      	mov	r2, r0
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	1ad3      	subs	r3, r2, r3
 8007bda:	68ba      	ldr	r2, [r7, #8]
 8007bdc:	429a      	cmp	r2, r3
 8007bde:	d302      	bcc.n	8007be6 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007be0:	68bb      	ldr	r3, [r7, #8]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d11a      	bne.n	8007c1c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	699b      	ldr	r3, [r3, #24]
 8007bec:	f003 0320 	and.w	r3, r3, #32
 8007bf0:	2b20      	cmp	r3, #32
 8007bf2:	d013      	beq.n	8007c1c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007bf8:	f043 0220 	orr.w	r2, r3, #32
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	2220      	movs	r2, #32
 8007c04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	2200      	movs	r2, #0
 8007c14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8007c18:	2301      	movs	r3, #1
 8007c1a:	e007      	b.n	8007c2c <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	699b      	ldr	r3, [r3, #24]
 8007c22:	f003 0320 	and.w	r3, r3, #32
 8007c26:	2b20      	cmp	r3, #32
 8007c28:	d1c8      	bne.n	8007bbc <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007c2a:	2300      	movs	r3, #0
}
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	3710      	adds	r7, #16
 8007c30:	46bd      	mov	sp, r7
 8007c32:	bd80      	pop	{r7, pc}

08007c34 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b086      	sub	sp, #24
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	60f8      	str	r0, [r7, #12]
 8007c3c:	60b9      	str	r1, [r7, #8]
 8007c3e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007c40:	2300      	movs	r3, #0
 8007c42:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8007c44:	e071      	b.n	8007d2a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007c46:	687a      	ldr	r2, [r7, #4]
 8007c48:	68b9      	ldr	r1, [r7, #8]
 8007c4a:	68f8      	ldr	r0, [r7, #12]
 8007c4c:	f000 f87e 	bl	8007d4c <I2C_IsErrorOccurred>
 8007c50:	4603      	mov	r3, r0
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d001      	beq.n	8007c5a <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8007c56:	2301      	movs	r3, #1
 8007c58:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	699b      	ldr	r3, [r3, #24]
 8007c60:	f003 0320 	and.w	r3, r3, #32
 8007c64:	2b20      	cmp	r3, #32
 8007c66:	d13b      	bne.n	8007ce0 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8007c68:	7dfb      	ldrb	r3, [r7, #23]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d138      	bne.n	8007ce0 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	699b      	ldr	r3, [r3, #24]
 8007c74:	f003 0304 	and.w	r3, r3, #4
 8007c78:	2b04      	cmp	r3, #4
 8007c7a:	d105      	bne.n	8007c88 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d001      	beq.n	8007c88 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8007c84:	2300      	movs	r3, #0
 8007c86:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	699b      	ldr	r3, [r3, #24]
 8007c8e:	f003 0310 	and.w	r3, r3, #16
 8007c92:	2b10      	cmp	r3, #16
 8007c94:	d121      	bne.n	8007cda <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	2210      	movs	r2, #16
 8007c9c:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	2204      	movs	r2, #4
 8007ca2:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	2220      	movs	r2, #32
 8007caa:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	6859      	ldr	r1, [r3, #4]
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	681a      	ldr	r2, [r3, #0]
 8007cb6:	4b24      	ldr	r3, [pc, #144]	@ (8007d48 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8007cb8:	400b      	ands	r3, r1
 8007cba:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	2220      	movs	r2, #32
 8007cc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	2200      	movs	r2, #0
 8007cd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8007cd4:	2301      	movs	r3, #1
 8007cd6:	75fb      	strb	r3, [r7, #23]
 8007cd8:	e002      	b.n	8007ce0 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	2200      	movs	r2, #0
 8007cde:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8007ce0:	f7fa fbfc 	bl	80024dc <HAL_GetTick>
 8007ce4:	4602      	mov	r2, r0
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	1ad3      	subs	r3, r2, r3
 8007cea:	68ba      	ldr	r2, [r7, #8]
 8007cec:	429a      	cmp	r2, r3
 8007cee:	d302      	bcc.n	8007cf6 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8007cf0:	68bb      	ldr	r3, [r7, #8]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d119      	bne.n	8007d2a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8007cf6:	7dfb      	ldrb	r3, [r7, #23]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d116      	bne.n	8007d2a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	699b      	ldr	r3, [r3, #24]
 8007d02:	f003 0304 	and.w	r3, r3, #4
 8007d06:	2b04      	cmp	r3, #4
 8007d08:	d00f      	beq.n	8007d2a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d0e:	f043 0220 	orr.w	r2, r3, #32
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	2220      	movs	r2, #32
 8007d1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	2200      	movs	r2, #0
 8007d22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8007d26:	2301      	movs	r3, #1
 8007d28:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	699b      	ldr	r3, [r3, #24]
 8007d30:	f003 0304 	and.w	r3, r3, #4
 8007d34:	2b04      	cmp	r3, #4
 8007d36:	d002      	beq.n	8007d3e <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8007d38:	7dfb      	ldrb	r3, [r7, #23]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d083      	beq.n	8007c46 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8007d3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d40:	4618      	mov	r0, r3
 8007d42:	3718      	adds	r7, #24
 8007d44:	46bd      	mov	sp, r7
 8007d46:	bd80      	pop	{r7, pc}
 8007d48:	fe00e800 	.word	0xfe00e800

08007d4c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b08a      	sub	sp, #40	@ 0x28
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	60f8      	str	r0, [r7, #12]
 8007d54:	60b9      	str	r1, [r7, #8]
 8007d56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007d58:	2300      	movs	r3, #0
 8007d5a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	699b      	ldr	r3, [r3, #24]
 8007d64:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8007d66:	2300      	movs	r3, #0
 8007d68:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007d6e:	69bb      	ldr	r3, [r7, #24]
 8007d70:	f003 0310 	and.w	r3, r3, #16
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d068      	beq.n	8007e4a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	2210      	movs	r2, #16
 8007d7e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007d80:	e049      	b.n	8007e16 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007d82:	68bb      	ldr	r3, [r7, #8]
 8007d84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d88:	d045      	beq.n	8007e16 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007d8a:	f7fa fba7 	bl	80024dc <HAL_GetTick>
 8007d8e:	4602      	mov	r2, r0
 8007d90:	69fb      	ldr	r3, [r7, #28]
 8007d92:	1ad3      	subs	r3, r2, r3
 8007d94:	68ba      	ldr	r2, [r7, #8]
 8007d96:	429a      	cmp	r2, r3
 8007d98:	d302      	bcc.n	8007da0 <I2C_IsErrorOccurred+0x54>
 8007d9a:	68bb      	ldr	r3, [r7, #8]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d13a      	bne.n	8007e16 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	685b      	ldr	r3, [r3, #4]
 8007da6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007daa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007db2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	699b      	ldr	r3, [r3, #24]
 8007dba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007dbe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007dc2:	d121      	bne.n	8007e08 <I2C_IsErrorOccurred+0xbc>
 8007dc4:	697b      	ldr	r3, [r7, #20]
 8007dc6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007dca:	d01d      	beq.n	8007e08 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8007dcc:	7cfb      	ldrb	r3, [r7, #19]
 8007dce:	2b20      	cmp	r3, #32
 8007dd0:	d01a      	beq.n	8007e08 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	685a      	ldr	r2, [r3, #4]
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007de0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8007de2:	f7fa fb7b 	bl	80024dc <HAL_GetTick>
 8007de6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007de8:	e00e      	b.n	8007e08 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007dea:	f7fa fb77 	bl	80024dc <HAL_GetTick>
 8007dee:	4602      	mov	r2, r0
 8007df0:	69fb      	ldr	r3, [r7, #28]
 8007df2:	1ad3      	subs	r3, r2, r3
 8007df4:	2b19      	cmp	r3, #25
 8007df6:	d907      	bls.n	8007e08 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8007df8:	6a3b      	ldr	r3, [r7, #32]
 8007dfa:	f043 0320 	orr.w	r3, r3, #32
 8007dfe:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8007e00:	2301      	movs	r3, #1
 8007e02:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8007e06:	e006      	b.n	8007e16 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	699b      	ldr	r3, [r3, #24]
 8007e0e:	f003 0320 	and.w	r3, r3, #32
 8007e12:	2b20      	cmp	r3, #32
 8007e14:	d1e9      	bne.n	8007dea <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	699b      	ldr	r3, [r3, #24]
 8007e1c:	f003 0320 	and.w	r3, r3, #32
 8007e20:	2b20      	cmp	r3, #32
 8007e22:	d003      	beq.n	8007e2c <I2C_IsErrorOccurred+0xe0>
 8007e24:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d0aa      	beq.n	8007d82 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007e2c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d103      	bne.n	8007e3c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	2220      	movs	r2, #32
 8007e3a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007e3c:	6a3b      	ldr	r3, [r7, #32]
 8007e3e:	f043 0304 	orr.w	r3, r3, #4
 8007e42:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8007e44:	2301      	movs	r3, #1
 8007e46:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	699b      	ldr	r3, [r3, #24]
 8007e50:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8007e52:	69bb      	ldr	r3, [r7, #24]
 8007e54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d00b      	beq.n	8007e74 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8007e5c:	6a3b      	ldr	r3, [r7, #32]
 8007e5e:	f043 0301 	orr.w	r3, r3, #1
 8007e62:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007e6c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007e6e:	2301      	movs	r3, #1
 8007e70:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007e74:	69bb      	ldr	r3, [r7, #24]
 8007e76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d00b      	beq.n	8007e96 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8007e7e:	6a3b      	ldr	r3, [r7, #32]
 8007e80:	f043 0308 	orr.w	r3, r3, #8
 8007e84:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007e8e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007e90:	2301      	movs	r3, #1
 8007e92:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8007e96:	69bb      	ldr	r3, [r7, #24]
 8007e98:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d00b      	beq.n	8007eb8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8007ea0:	6a3b      	ldr	r3, [r7, #32]
 8007ea2:	f043 0302 	orr.w	r3, r3, #2
 8007ea6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007eb0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007eb2:	2301      	movs	r3, #1
 8007eb4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8007eb8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d01c      	beq.n	8007efa <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007ec0:	68f8      	ldr	r0, [r7, #12]
 8007ec2:	f7ff fd92 	bl	80079ea <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	6859      	ldr	r1, [r3, #4]
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	681a      	ldr	r2, [r3, #0]
 8007ed0:	4b0d      	ldr	r3, [pc, #52]	@ (8007f08 <I2C_IsErrorOccurred+0x1bc>)
 8007ed2:	400b      	ands	r3, r1
 8007ed4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007eda:	6a3b      	ldr	r3, [r7, #32]
 8007edc:	431a      	orrs	r2, r3
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	2220      	movs	r2, #32
 8007ee6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	2200      	movs	r2, #0
 8007eee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8007efa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8007efe:	4618      	mov	r0, r3
 8007f00:	3728      	adds	r7, #40	@ 0x28
 8007f02:	46bd      	mov	sp, r7
 8007f04:	bd80      	pop	{r7, pc}
 8007f06:	bf00      	nop
 8007f08:	fe00e800 	.word	0xfe00e800

08007f0c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007f0c:	b480      	push	{r7}
 8007f0e:	b087      	sub	sp, #28
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	60f8      	str	r0, [r7, #12]
 8007f14:	607b      	str	r3, [r7, #4]
 8007f16:	460b      	mov	r3, r1
 8007f18:	817b      	strh	r3, [r7, #10]
 8007f1a:	4613      	mov	r3, r2
 8007f1c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007f1e:	897b      	ldrh	r3, [r7, #10]
 8007f20:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007f24:	7a7b      	ldrb	r3, [r7, #9]
 8007f26:	041b      	lsls	r3, r3, #16
 8007f28:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007f2c:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007f32:	6a3b      	ldr	r3, [r7, #32]
 8007f34:	4313      	orrs	r3, r2
 8007f36:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007f3a:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	685a      	ldr	r2, [r3, #4]
 8007f42:	6a3b      	ldr	r3, [r7, #32]
 8007f44:	0d5b      	lsrs	r3, r3, #21
 8007f46:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8007f4a:	4b08      	ldr	r3, [pc, #32]	@ (8007f6c <I2C_TransferConfig+0x60>)
 8007f4c:	430b      	orrs	r3, r1
 8007f4e:	43db      	mvns	r3, r3
 8007f50:	ea02 0103 	and.w	r1, r2, r3
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	697a      	ldr	r2, [r7, #20]
 8007f5a:	430a      	orrs	r2, r1
 8007f5c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007f5e:	bf00      	nop
 8007f60:	371c      	adds	r7, #28
 8007f62:	46bd      	mov	sp, r7
 8007f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f68:	4770      	bx	lr
 8007f6a:	bf00      	nop
 8007f6c:	03ff63ff 	.word	0x03ff63ff

08007f70 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8007f70:	b480      	push	{r7}
 8007f72:	b085      	sub	sp, #20
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
 8007f78:	460b      	mov	r3, r1
 8007f7a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8007f80:	887b      	ldrh	r3, [r7, #2]
 8007f82:	f003 0301 	and.w	r3, r3, #1
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d00f      	beq.n	8007faa <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8007f90:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007f98:	b2db      	uxtb	r3, r3
 8007f9a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007f9e:	2b28      	cmp	r3, #40	@ 0x28
 8007fa0:	d003      	beq.n	8007faa <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8007fa8:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8007faa:	887b      	ldrh	r3, [r7, #2]
 8007fac:	f003 0302 	and.w	r3, r3, #2
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d00f      	beq.n	8007fd4 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8007fba:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007fc2:	b2db      	uxtb	r3, r3
 8007fc4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007fc8:	2b28      	cmp	r3, #40	@ 0x28
 8007fca:	d003      	beq.n	8007fd4 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8007fd2:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007fd4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	da03      	bge.n	8007fe4 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8007fe2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8007fe4:	887b      	ldrh	r3, [r7, #2]
 8007fe6:	2b10      	cmp	r3, #16
 8007fe8:	d103      	bne.n	8007ff2 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8007ff0:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007ff2:	887b      	ldrh	r3, [r7, #2]
 8007ff4:	2b20      	cmp	r3, #32
 8007ff6:	d103      	bne.n	8008000 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	f043 0320 	orr.w	r3, r3, #32
 8007ffe:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8008000:	887b      	ldrh	r3, [r7, #2]
 8008002:	2b40      	cmp	r3, #64	@ 0x40
 8008004:	d103      	bne.n	800800e <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800800c:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	6819      	ldr	r1, [r3, #0]
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	43da      	mvns	r2, r3
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	400a      	ands	r2, r1
 800801e:	601a      	str	r2, [r3, #0]
}
 8008020:	bf00      	nop
 8008022:	3714      	adds	r7, #20
 8008024:	46bd      	mov	sp, r7
 8008026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802a:	4770      	bx	lr

0800802c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800802c:	b480      	push	{r7}
 800802e:	b083      	sub	sp, #12
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
 8008034:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800803c:	b2db      	uxtb	r3, r3
 800803e:	2b20      	cmp	r3, #32
 8008040:	d138      	bne.n	80080b4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008048:	2b01      	cmp	r3, #1
 800804a:	d101      	bne.n	8008050 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800804c:	2302      	movs	r3, #2
 800804e:	e032      	b.n	80080b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2201      	movs	r2, #1
 8008054:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2224      	movs	r2, #36	@ 0x24
 800805c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	681a      	ldr	r2, [r3, #0]
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f022 0201 	bic.w	r2, r2, #1
 800806e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	681a      	ldr	r2, [r3, #0]
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800807e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	6819      	ldr	r1, [r3, #0]
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	683a      	ldr	r2, [r7, #0]
 800808c:	430a      	orrs	r2, r1
 800808e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	681a      	ldr	r2, [r3, #0]
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f042 0201 	orr.w	r2, r2, #1
 800809e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2220      	movs	r2, #32
 80080a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2200      	movs	r2, #0
 80080ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80080b0:	2300      	movs	r3, #0
 80080b2:	e000      	b.n	80080b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80080b4:	2302      	movs	r3, #2
  }
}
 80080b6:	4618      	mov	r0, r3
 80080b8:	370c      	adds	r7, #12
 80080ba:	46bd      	mov	sp, r7
 80080bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c0:	4770      	bx	lr

080080c2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80080c2:	b480      	push	{r7}
 80080c4:	b085      	sub	sp, #20
 80080c6:	af00      	add	r7, sp, #0
 80080c8:	6078      	str	r0, [r7, #4]
 80080ca:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80080d2:	b2db      	uxtb	r3, r3
 80080d4:	2b20      	cmp	r3, #32
 80080d6:	d139      	bne.n	800814c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80080de:	2b01      	cmp	r3, #1
 80080e0:	d101      	bne.n	80080e6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80080e2:	2302      	movs	r3, #2
 80080e4:	e033      	b.n	800814e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2201      	movs	r2, #1
 80080ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	2224      	movs	r2, #36	@ 0x24
 80080f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	681a      	ldr	r2, [r3, #0]
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	f022 0201 	bic.w	r2, r2, #1
 8008104:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8008114:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	021b      	lsls	r3, r3, #8
 800811a:	68fa      	ldr	r2, [r7, #12]
 800811c:	4313      	orrs	r3, r2
 800811e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	68fa      	ldr	r2, [r7, #12]
 8008126:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	681a      	ldr	r2, [r3, #0]
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f042 0201 	orr.w	r2, r2, #1
 8008136:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2220      	movs	r2, #32
 800813c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2200      	movs	r2, #0
 8008144:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008148:	2300      	movs	r3, #0
 800814a:	e000      	b.n	800814e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800814c:	2302      	movs	r3, #2
  }
}
 800814e:	4618      	mov	r0, r3
 8008150:	3714      	adds	r7, #20
 8008152:	46bd      	mov	sp, r7
 8008154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008158:	4770      	bx	lr
	...

0800815c <HAL_JPEG_Init>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_Init(JPEG_HandleTypeDef *hjpeg)
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b082      	sub	sp, #8
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
    99,  99,  99,  99,  99,  99,  99,  99,
    99,  99,  99,  99,  99,  99,  99,  99
  };

  /* Check the JPEG handle allocation */
  if (hjpeg == NULL)
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d101      	bne.n	800816e <HAL_JPEG_Init+0x12>
  {
    return HAL_ERROR;
 800816a:	2301      	movs	r3, #1
 800816c:	e070      	b.n	8008250 <HAL_JPEG_Init+0xf4>

    /* Init the low level hardware */
    hjpeg->MspInitCallback(hjpeg);
  }
#else
  if (hjpeg->State == HAL_JPEG_STATE_RESET)
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8008174:	b2db      	uxtb	r3, r3
 8008176:	2b00      	cmp	r3, #0
 8008178:	d106      	bne.n	8008188 <HAL_JPEG_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hjpeg->Lock = HAL_UNLOCKED;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2200      	movs	r2, #0
 800817e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_JPEG_MspInit(hjpeg);
 8008182:	6878      	ldr	r0, [r7, #4]
 8008184:	f7f9 fc68 	bl	8001a58 <HAL_JPEG_MspInit>
  }
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_BUSY;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2202      	movs	r2, #2
 800818c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Start the JPEG Core*/
  __HAL_JPEG_ENABLE(hjpeg);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	f042 0201 	orr.w	r2, r2, #1
 800819e:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Stop the JPEG encoding/decoding process*/
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	681a      	ldr	r2, [r3, #0]
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	f022 0201 	bic.w	r2, r2, #1
 80081ae:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 80081be:	631a      	str	r2, [r3, #48]	@ 0x30


  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80081ce:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80081de:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 80081ee:	639a      	str	r2, [r3, #56]	@ 0x38

  /* init default quantization tables*/
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	4a19      	ldr	r2, [pc, #100]	@ (8008258 <HAL_JPEG_Init+0xfc>)
 80081f4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	4a18      	ldr	r2, [pc, #96]	@ (800825c <HAL_JPEG_Init+0x100>)
 80081fa:	641a      	str	r2, [r3, #64]	@ 0x40
  hjpeg->QuantTable2 = NULL;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2200      	movs	r2, #0
 8008200:	645a      	str	r2, [r3, #68]	@ 0x44
  hjpeg->QuantTable3 = NULL;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	2200      	movs	r2, #0
 8008206:	649a      	str	r2, [r3, #72]	@ 0x48

  /* init the default Huffman tables*/
  if (JPEG_Set_HuffEnc_Mem(hjpeg) != HAL_OK)
 8008208:	6878      	ldr	r0, [r7, #4]
 800820a:	f000 fea1 	bl	8008f50 <JPEG_Set_HuffEnc_Mem>
 800820e:	4603      	mov	r3, r0
 8008210:	2b00      	cmp	r3, #0
 8008212:	d004      	beq.n	800821e <HAL_JPEG_Init+0xc2>
  {
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2201      	movs	r2, #1
 8008218:	651a      	str	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 800821a:	2301      	movs	r3, #1
 800821c:	e018      	b.n	8008250 <HAL_JPEG_Init+0xf4>
  }

  /* Enable header processing*/
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	685a      	ldr	r2, [r3, #4]
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800822c:	605a      	str	r2, [r3, #4]

  /* Reset JpegInCount and JpegOutCount */
  hjpeg->JpegInCount = 0;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	2200      	movs	r2, #0
 8008232:	621a      	str	r2, [r3, #32]
  hjpeg->JpegOutCount = 0;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2200      	movs	r2, #0
 8008238:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_READY;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	2201      	movs	r2, #1
 800823e:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Reset the JPEG ErrorCode */
  hjpeg->ErrorCode = HAL_JPEG_ERROR_NONE;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	2200      	movs	r2, #0
 8008246:	651a      	str	r2, [r3, #80]	@ 0x50

  /*Clear the context filelds*/
  hjpeg->Context = 0;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2200      	movs	r2, #0
 800824c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return HAL_OK;
 800824e:	2300      	movs	r3, #0
}
 8008250:	4618      	mov	r0, r3
 8008252:	3708      	adds	r7, #8
 8008254:	46bd      	mov	sp, r7
 8008256:	bd80      	pop	{r7, pc}
 8008258:	0801695c 	.word	0x0801695c
 800825c:	0801699c 	.word	0x0801699c

08008260 <HAL_JPEG_ConfigEncoding>:
  * @param  pConf pointer to a JPEG_ConfTypeDef structure that contains
  *         the encoding configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_ConfigEncoding(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pConf)
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b088      	sub	sp, #32
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
 8008268:	6039      	str	r1, [r7, #0]
  uint32_t vfactor;
  uint32_t hMCU;
  uint32_t vMCU;

  /* Check the JPEG handle allocation */
  if ((hjpeg == NULL) || (pConf == NULL))
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d002      	beq.n	8008276 <HAL_JPEG_ConfigEncoding+0x16>
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d101      	bne.n	800827a <HAL_JPEG_ConfigEncoding+0x1a>
  {
    return HAL_ERROR;
 8008276:	2301      	movs	r3, #1
 8008278:	e191      	b.n	800859e <HAL_JPEG_ConfigEncoding+0x33e>
    assert_param(IS_JPEG_COLORSPACE(pConf->ColorSpace));
    assert_param(IS_JPEG_CHROMASUBSAMPLING(pConf->ChromaSubsampling));
    assert_param(IS_JPEG_IMAGE_QUALITY(pConf->ImageQuality));

    /* Process Locked */
    __HAL_LOCK(hjpeg);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8008280:	2b01      	cmp	r3, #1
 8008282:	d101      	bne.n	8008288 <HAL_JPEG_ConfigEncoding+0x28>
 8008284:	2302      	movs	r3, #2
 8008286:	e18a      	b.n	800859e <HAL_JPEG_ConfigEncoding+0x33e>
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2201      	movs	r2, #1
 800828c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    if (hjpeg->State == HAL_JPEG_STATE_READY)
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8008296:	b2db      	uxtb	r3, r3
 8008298:	2b01      	cmp	r3, #1
 800829a:	f040 817b 	bne.w	8008594 <HAL_JPEG_ConfigEncoding+0x334>
    {
      hjpeg->State = HAL_JPEG_STATE_BUSY;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2202      	movs	r2, #2
 80082a2:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

      hjpeg->Conf.ColorSpace          =  pConf->ColorSpace;
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	681a      	ldr	r2, [r3, #0]
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	605a      	str	r2, [r3, #4]
      hjpeg->Conf.ChromaSubsampling   =  pConf->ChromaSubsampling;
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	685a      	ldr	r2, [r3, #4]
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	609a      	str	r2, [r3, #8]
      hjpeg->Conf.ImageHeight         =  pConf->ImageHeight;
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	689a      	ldr	r2, [r3, #8]
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	60da      	str	r2, [r3, #12]
      hjpeg->Conf.ImageWidth          =  pConf->ImageWidth;
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	68da      	ldr	r2, [r3, #12]
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	611a      	str	r2, [r3, #16]
      hjpeg->Conf.ImageQuality        =  pConf->ImageQuality;
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	691a      	ldr	r2, [r3, #16]
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	615a      	str	r2, [r3, #20]

      /* Reset the Color Space : by default only one quantization table is used*/
      hjpeg->Instance->CONFR1 &= ~JPEG_CONFR1_COLORSPACE;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	685a      	ldr	r2, [r3, #4]
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	f022 0230 	bic.w	r2, r2, #48	@ 0x30
 80082dc:	605a      	str	r2, [r3, #4]

      /* Set Number of color components*/
      if (hjpeg->Conf.ColorSpace == JPEG_GRAYSCALE_COLORSPACE)
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	685b      	ldr	r3, [r3, #4]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d110      	bne.n	8008308 <HAL_JPEG_ConfigEncoding+0xa8>
      {
        /*Gray Scale is only one component 8x8 blocks i.e 4:4:4*/
        hjpeg->Conf.ChromaSubsampling = JPEG_444_SUBSAMPLING;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2200      	movs	r2, #0
 80082ea:	609a      	str	r2, [r3, #8]

        JPEG_SetColorGrayScale(hjpeg);
 80082ec:	6878      	ldr	r0, [r7, #4]
 80082ee:	f001 f99b 	bl	8009628 <JPEG_SetColorGrayScale>
        /* Set quantization table 0*/
        error = JPEG_Set_Quantization_Mem(hjpeg, hjpeg->QuantTable0, (hjpeg->Instance->QMEM0));
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	3350      	adds	r3, #80	@ 0x50
 80082fc:	461a      	mov	r2, r3
 80082fe:	6878      	ldr	r0, [r7, #4]
 8008300:	f001 f8a8 	bl	8009454 <JPEG_Set_Quantization_Mem>
 8008304:	61f8      	str	r0, [r7, #28]
 8008306:	e0c5      	b.n	8008494 <HAL_JPEG_ConfigEncoding+0x234>
      }
      else if (hjpeg->Conf.ColorSpace == JPEG_YCBCR_COLORSPACE)
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	685b      	ldr	r3, [r3, #4]
 800830c:	2b10      	cmp	r3, #16
 800830e:	d166      	bne.n	80083de <HAL_JPEG_ConfigEncoding+0x17e>
      {
        /*
           Set the Color Space for YCbCr : 2 quantization tables are used
           one for Luminance(Y) and one for both Chrominances (Cb & Cr)
          */
        hjpeg->Instance->CONFR1 |= JPEG_CONFR1_COLORSPACE_0;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	685a      	ldr	r2, [r3, #4]
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	f042 0210 	orr.w	r2, r2, #16
 800831e:	605a      	str	r2, [r3, #4]

        JPEG_SetColorYCBCR(hjpeg);
 8008320:	6878      	ldr	r0, [r7, #4]
 8008322:	f001 f909 	bl	8009538 <JPEG_SetColorYCBCR>

        /* Set quantization table 0*/
        error  = JPEG_Set_Quantization_Mem(hjpeg, hjpeg->QuantTable0, (hjpeg->Instance->QMEM0));
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	3350      	adds	r3, #80	@ 0x50
 8008330:	461a      	mov	r2, r3
 8008332:	6878      	ldr	r0, [r7, #4]
 8008334:	f001 f88e 	bl	8009454 <JPEG_Set_Quantization_Mem>
 8008338:	61f8      	str	r0, [r7, #28]
        /*By default quantization table 0 for component 0 and quantization table 1 for both components 1 and 2*/
        error |= JPEG_Set_Quantization_Mem(hjpeg, hjpeg->QuantTable1, (hjpeg->Instance->QMEM1));
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	3390      	adds	r3, #144	@ 0x90
 8008344:	461a      	mov	r2, r3
 8008346:	6878      	ldr	r0, [r7, #4]
 8008348:	f001 f884 	bl	8009454 <JPEG_Set_Quantization_Mem>
 800834c:	4602      	mov	r2, r0
 800834e:	69fb      	ldr	r3, [r7, #28]
 8008350:	4313      	orrs	r3, r2
 8008352:	61fb      	str	r3, [r7, #28]

        if ((hjpeg->Context & JPEG_CONTEXT_CUSTOM_TABLES) != 0UL)
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008358:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800835c:	2b00      	cmp	r3, #0
 800835e:	f000 8099 	beq.w	8008494 <HAL_JPEG_ConfigEncoding+0x234>
        {
          /*Use user customized quantization tables , 1 table per component*/
          /* use 3 quantization tables , one for each component*/
          hjpeg->Instance->CONFR1 &= (~JPEG_CONFR1_COLORSPACE);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	685a      	ldr	r2, [r3, #4]
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f022 0230 	bic.w	r2, r2, #48	@ 0x30
 8008370:	605a      	str	r2, [r3, #4]
          hjpeg->Instance->CONFR1 |= JPEG_CONFR1_COLORSPACE_1;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	685a      	ldr	r2, [r3, #4]
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	f042 0220 	orr.w	r2, r2, #32
 8008380:	605a      	str	r2, [r3, #4]

          error |= JPEG_Set_Quantization_Mem(hjpeg, hjpeg->QuantTable2, (hjpeg->Instance->QMEM2));
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	33d0      	adds	r3, #208	@ 0xd0
 800838c:	461a      	mov	r2, r3
 800838e:	6878      	ldr	r0, [r7, #4]
 8008390:	f001 f860 	bl	8009454 <JPEG_Set_Quantization_Mem>
 8008394:	4602      	mov	r2, r0
 8008396:	69fb      	ldr	r3, [r7, #28]
 8008398:	4313      	orrs	r3, r2
 800839a:	61fb      	str	r3, [r7, #28]

          /*Use Quantization 1 table for component 1*/
          hjpeg->Instance->CONFR5 &= (~JPEG_CONFR5_QT);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	695a      	ldr	r2, [r3, #20]
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	f022 020c 	bic.w	r2, r2, #12
 80083aa:	615a      	str	r2, [r3, #20]
          hjpeg->Instance->CONFR5 |=  JPEG_CONFR5_QT_0;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	695a      	ldr	r2, [r3, #20]
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	f042 0204 	orr.w	r2, r2, #4
 80083ba:	615a      	str	r2, [r3, #20]

          /*Use Quantization 2 table for component 2*/
          hjpeg->Instance->CONFR6 &= (~JPEG_CONFR6_QT);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	699a      	ldr	r2, [r3, #24]
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	f022 020c 	bic.w	r2, r2, #12
 80083ca:	619a      	str	r2, [r3, #24]
          hjpeg->Instance->CONFR6 |=  JPEG_CONFR6_QT_1;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	699a      	ldr	r2, [r3, #24]
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	f042 0208 	orr.w	r2, r2, #8
 80083da:	619a      	str	r2, [r3, #24]
 80083dc:	e05a      	b.n	8008494 <HAL_JPEG_ConfigEncoding+0x234>
        }
      }
      else /* ColorSpace == JPEG_CMYK_COLORSPACE */
      {
        JPEG_SetColorCMYK(hjpeg);
 80083de:	6878      	ldr	r0, [r7, #4]
 80083e0:	f001 f940 	bl	8009664 <JPEG_SetColorCMYK>

        /* Set quantization table 0*/
        error  = JPEG_Set_Quantization_Mem(hjpeg, hjpeg->QuantTable0, (hjpeg->Instance->QMEM0));
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	3350      	adds	r3, #80	@ 0x50
 80083ee:	461a      	mov	r2, r3
 80083f0:	6878      	ldr	r0, [r7, #4]
 80083f2:	f001 f82f 	bl	8009454 <JPEG_Set_Quantization_Mem>
 80083f6:	61f8      	str	r0, [r7, #28]
        /*By default quantization table 0 for All components*/

        if ((hjpeg->Context & JPEG_CONTEXT_CUSTOM_TABLES) != 0UL)
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80083fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008400:	2b00      	cmp	r3, #0
 8008402:	d047      	beq.n	8008494 <HAL_JPEG_ConfigEncoding+0x234>
        {
          /*Use user customized quantization tables , 1 table per component*/
          /* use 4 quantization tables , one for each component*/
          hjpeg->Instance->CONFR1 |= JPEG_CONFR1_COLORSPACE;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	685a      	ldr	r2, [r3, #4]
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	f042 0230 	orr.w	r2, r2, #48	@ 0x30
 8008412:	605a      	str	r2, [r3, #4]

          error |= JPEG_Set_Quantization_Mem(hjpeg, hjpeg->QuantTable1, (hjpeg->Instance->QMEM1));
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	3390      	adds	r3, #144	@ 0x90
 800841e:	461a      	mov	r2, r3
 8008420:	6878      	ldr	r0, [r7, #4]
 8008422:	f001 f817 	bl	8009454 <JPEG_Set_Quantization_Mem>
 8008426:	4602      	mov	r2, r0
 8008428:	69fb      	ldr	r3, [r7, #28]
 800842a:	4313      	orrs	r3, r2
 800842c:	61fb      	str	r3, [r7, #28]
          error |= JPEG_Set_Quantization_Mem(hjpeg, hjpeg->QuantTable2, (hjpeg->Instance->QMEM2));
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	33d0      	adds	r3, #208	@ 0xd0
 8008438:	461a      	mov	r2, r3
 800843a:	6878      	ldr	r0, [r7, #4]
 800843c:	f001 f80a 	bl	8009454 <JPEG_Set_Quantization_Mem>
 8008440:	4602      	mov	r2, r0
 8008442:	69fb      	ldr	r3, [r7, #28]
 8008444:	4313      	orrs	r3, r2
 8008446:	61fb      	str	r3, [r7, #28]
          error |= JPEG_Set_Quantization_Mem(hjpeg, hjpeg->QuantTable3, (hjpeg->Instance->QMEM3));
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8008454:	461a      	mov	r2, r3
 8008456:	6878      	ldr	r0, [r7, #4]
 8008458:	f000 fffc 	bl	8009454 <JPEG_Set_Quantization_Mem>
 800845c:	4602      	mov	r2, r0
 800845e:	69fb      	ldr	r3, [r7, #28]
 8008460:	4313      	orrs	r3, r2
 8008462:	61fb      	str	r3, [r7, #28]

          /*Use Quantization 1 table for component 1*/
          hjpeg->Instance->CONFR5 |=  JPEG_CONFR5_QT_0;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	695a      	ldr	r2, [r3, #20]
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	f042 0204 	orr.w	r2, r2, #4
 8008472:	615a      	str	r2, [r3, #20]

          /*Use Quantization 2 table for component 2*/
          hjpeg->Instance->CONFR6 |=  JPEG_CONFR6_QT_1;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	699a      	ldr	r2, [r3, #24]
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	f042 0208 	orr.w	r2, r2, #8
 8008482:	619a      	str	r2, [r3, #24]

          /*Use Quantization 3 table for component 3*/
          hjpeg->Instance->CONFR7 |=  JPEG_CONFR7_QT;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	69da      	ldr	r2, [r3, #28]
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	f042 020c 	orr.w	r2, r2, #12
 8008492:	61da      	str	r2, [r3, #28]
        }
      }

      if (error != 0UL)
 8008494:	69fb      	ldr	r3, [r7, #28]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d00c      	beq.n	80084b4 <HAL_JPEG_ConfigEncoding+0x254>
      {
        hjpeg->ErrorCode = HAL_JPEG_ERROR_QUANT_TABLE;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	2202      	movs	r2, #2
 800849e:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Process Unlocked */
        __HAL_UNLOCK(hjpeg);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2200      	movs	r2, #0
 80084a4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Set the JPEG State to ready */
        hjpeg->State = HAL_JPEG_STATE_READY;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2201      	movs	r2, #1
 80084ac:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

        return  HAL_ERROR;
 80084b0:	2301      	movs	r3, #1
 80084b2:	e074      	b.n	800859e <HAL_JPEG_ConfigEncoding+0x33e>
      }
      /* Set the image size*/
      /* set the number of lines*/
      MODIFY_REG(hjpeg->Instance->CONFR1, JPEG_CONFR1_YSIZE, ((hjpeg->Conf.ImageHeight & 0x0000FFFFUL) << 16));
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	685b      	ldr	r3, [r3, #4]
 80084ba:	b299      	uxth	r1, r3
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	68db      	ldr	r3, [r3, #12]
 80084c0:	041a      	lsls	r2, r3, #16
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	430a      	orrs	r2, r1
 80084c8:	605a      	str	r2, [r3, #4]
      /* set the number of pixels per line*/
      MODIFY_REG(hjpeg->Instance->CONFR3, JPEG_CONFR3_XSIZE, ((hjpeg->Conf.ImageWidth & 0x0000FFFFUL) << 16));
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	68db      	ldr	r3, [r3, #12]
 80084d0:	b299      	uxth	r1, r3
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	691b      	ldr	r3, [r3, #16]
 80084d6:	041a      	lsls	r2, r3, #16
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	430a      	orrs	r2, r1
 80084de:	60da      	str	r2, [r3, #12]


      if (hjpeg->Conf.ChromaSubsampling == JPEG_420_SUBSAMPLING) /* 4:2:0*/
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	689b      	ldr	r3, [r3, #8]
 80084e4:	2b01      	cmp	r3, #1
 80084e6:	d104      	bne.n	80084f2 <HAL_JPEG_ConfigEncoding+0x292>
      {
        hfactor = 16;
 80084e8:	2310      	movs	r3, #16
 80084ea:	61bb      	str	r3, [r7, #24]
        vfactor = 16;
 80084ec:	2310      	movs	r3, #16
 80084ee:	617b      	str	r3, [r7, #20]
 80084f0:	e00c      	b.n	800850c <HAL_JPEG_ConfigEncoding+0x2ac>
      }
      else if (hjpeg->Conf.ChromaSubsampling == JPEG_422_SUBSAMPLING) /* 4:2:2*/
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	689b      	ldr	r3, [r3, #8]
 80084f6:	2b02      	cmp	r3, #2
 80084f8:	d104      	bne.n	8008504 <HAL_JPEG_ConfigEncoding+0x2a4>
      {
        hfactor = 16;
 80084fa:	2310      	movs	r3, #16
 80084fc:	61bb      	str	r3, [r7, #24]
        vfactor = 8;
 80084fe:	2308      	movs	r3, #8
 8008500:	617b      	str	r3, [r7, #20]
 8008502:	e003      	b.n	800850c <HAL_JPEG_ConfigEncoding+0x2ac>
      }
      else /* Default is 8x8 MCU,  4:4:4*/
      {
        hfactor = 8;
 8008504:	2308      	movs	r3, #8
 8008506:	61bb      	str	r3, [r7, #24]
        vfactor = 8;
 8008508:	2308      	movs	r3, #8
 800850a:	617b      	str	r3, [r7, #20]
      }

      hMCU = (hjpeg->Conf.ImageWidth / hfactor);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	691a      	ldr	r2, [r3, #16]
 8008510:	69bb      	ldr	r3, [r7, #24]
 8008512:	fbb2 f3f3 	udiv	r3, r2, r3
 8008516:	613b      	str	r3, [r7, #16]
      if ((hjpeg->Conf.ImageWidth % hfactor) != 0UL)
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	691b      	ldr	r3, [r3, #16]
 800851c:	69ba      	ldr	r2, [r7, #24]
 800851e:	fbb3 f2f2 	udiv	r2, r3, r2
 8008522:	69b9      	ldr	r1, [r7, #24]
 8008524:	fb01 f202 	mul.w	r2, r1, r2
 8008528:	1a9b      	subs	r3, r3, r2
 800852a:	2b00      	cmp	r3, #0
 800852c:	d002      	beq.n	8008534 <HAL_JPEG_ConfigEncoding+0x2d4>
      {
        hMCU++; /*+1 for horizontal incomplete MCU */
 800852e:	693b      	ldr	r3, [r7, #16]
 8008530:	3301      	adds	r3, #1
 8008532:	613b      	str	r3, [r7, #16]
      }

      vMCU = (hjpeg->Conf.ImageHeight / vfactor);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	68da      	ldr	r2, [r3, #12]
 8008538:	697b      	ldr	r3, [r7, #20]
 800853a:	fbb2 f3f3 	udiv	r3, r2, r3
 800853e:	60fb      	str	r3, [r7, #12]
      if ((hjpeg->Conf.ImageHeight % vfactor) != 0UL)
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	68db      	ldr	r3, [r3, #12]
 8008544:	697a      	ldr	r2, [r7, #20]
 8008546:	fbb3 f2f2 	udiv	r2, r3, r2
 800854a:	6979      	ldr	r1, [r7, #20]
 800854c:	fb01 f202 	mul.w	r2, r1, r2
 8008550:	1a9b      	subs	r3, r3, r2
 8008552:	2b00      	cmp	r3, #0
 8008554:	d002      	beq.n	800855c <HAL_JPEG_ConfigEncoding+0x2fc>
      {
        vMCU++; /*+1 for vertical incomplete MCU */
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	3301      	adds	r3, #1
 800855a:	60fb      	str	r3, [r7, #12]
      }

      numberMCU = (hMCU * vMCU) - 1UL; /* Bit Field JPEG_CONFR2_NMCU shall be set to NB_MCU - 1*/
 800855c:	693b      	ldr	r3, [r7, #16]
 800855e:	68fa      	ldr	r2, [r7, #12]
 8008560:	fb02 f303 	mul.w	r3, r2, r3
 8008564:	3b01      	subs	r3, #1
 8008566:	60bb      	str	r3, [r7, #8]
      /* Set the number of MCU*/
      hjpeg->Instance->CONFR2 = (numberMCU & JPEG_CONFR2_NMCU);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	68ba      	ldr	r2, [r7, #8]
 800856e:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8008572:	609a      	str	r2, [r3, #8]

      hjpeg->Context |= JPEG_CONTEXT_CONF_ENCODING;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008578:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hjpeg);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2200      	movs	r2, #0
 8008584:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Set the JPEG State to ready */
      hjpeg->State = HAL_JPEG_STATE_READY;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	2201      	movs	r2, #1
 800858c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

      /* Return function status */
      return HAL_OK;
 8008590:	2300      	movs	r3, #0
 8008592:	e004      	b.n	800859e <HAL_JPEG_ConfigEncoding+0x33e>
    }
    else
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hjpeg);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2200      	movs	r2, #0
 8008598:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Return function status */
      return HAL_BUSY;
 800859c:	2302      	movs	r3, #2
    }
  }
}
 800859e:	4618      	mov	r0, r3
 80085a0:	3720      	adds	r7, #32
 80085a2:	46bd      	mov	sp, r7
 80085a4:	bd80      	pop	{r7, pc}

080085a6 <HAL_JPEG_GetInfo>:
  * @param  pInfo pointer to a JPEG_ConfTypeDef structure that contains
  *         The JPEG decoded header information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_GetInfo(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
{
 80085a6:	b580      	push	{r7, lr}
 80085a8:	b086      	sub	sp, #24
 80085aa:	af00      	add	r7, sp, #0
 80085ac:	6078      	str	r0, [r7, #4]
 80085ae:	6039      	str	r1, [r7, #0]
  uint32_t yblockNb;
  uint32_t cBblockNb;
  uint32_t cRblockNb;

  /* Check the JPEG handle allocation */
  if ((hjpeg == NULL) || (pInfo == NULL))
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d002      	beq.n	80085bc <HAL_JPEG_GetInfo+0x16>
 80085b6:	683b      	ldr	r3, [r7, #0]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d101      	bne.n	80085c0 <HAL_JPEG_GetInfo+0x1a>
  {
    return HAL_ERROR;
 80085bc:	2301      	movs	r3, #1
 80085be:	e083      	b.n	80086c8 <HAL_JPEG_GetInfo+0x122>
  }

  /*Read the conf parameters */
  if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF_1)
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	685b      	ldr	r3, [r3, #4]
 80085c6:	f003 0303 	and.w	r3, r3, #3
 80085ca:	2b02      	cmp	r3, #2
 80085cc:	d103      	bne.n	80085d6 <HAL_JPEG_GetInfo+0x30>
  {
    pInfo->ColorSpace = JPEG_YCBCR_COLORSPACE;
 80085ce:	683b      	ldr	r3, [r7, #0]
 80085d0:	2210      	movs	r2, #16
 80085d2:	601a      	str	r2, [r3, #0]
 80085d4:	e017      	b.n	8008606 <HAL_JPEG_GetInfo+0x60>
  }
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == 0UL)
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	685b      	ldr	r3, [r3, #4]
 80085dc:	f003 0303 	and.w	r3, r3, #3
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d103      	bne.n	80085ec <HAL_JPEG_GetInfo+0x46>
  {
    pInfo->ColorSpace = JPEG_GRAYSCALE_COLORSPACE;
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	2200      	movs	r2, #0
 80085e8:	601a      	str	r2, [r3, #0]
 80085ea:	e00c      	b.n	8008606 <HAL_JPEG_GetInfo+0x60>
  }
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF)
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	685b      	ldr	r3, [r3, #4]
 80085f2:	f003 0303 	and.w	r3, r3, #3
 80085f6:	2b03      	cmp	r3, #3
 80085f8:	d103      	bne.n	8008602 <HAL_JPEG_GetInfo+0x5c>
  {
    pInfo->ColorSpace = JPEG_CMYK_COLORSPACE;
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	2230      	movs	r2, #48	@ 0x30
 80085fe:	601a      	str	r2, [r3, #0]
 8008600:	e001      	b.n	8008606 <HAL_JPEG_GetInfo+0x60>
  }
  else
  {
    return HAL_ERROR;
 8008602:	2301      	movs	r3, #1
 8008604:	e060      	b.n	80086c8 <HAL_JPEG_GetInfo+0x122>
  }

  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	685b      	ldr	r3, [r3, #4]
 800860c:	0c1b      	lsrs	r3, r3, #16
 800860e:	b29a      	uxth	r2, r3
 8008610:	683b      	ldr	r3, [r7, #0]
 8008612:	609a      	str	r2, [r3, #8]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	68db      	ldr	r3, [r3, #12]
 800861a:	0c1b      	lsrs	r3, r3, #16
 800861c:	b29a      	uxth	r2, r3
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	60da      	str	r2, [r3, #12]

  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 8008622:	683b      	ldr	r3, [r7, #0]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	2b10      	cmp	r3, #16
 8008628:	d003      	beq.n	8008632 <HAL_JPEG_GetInfo+0x8c>
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	2b30      	cmp	r3, #48	@ 0x30
 8008630:	d140      	bne.n	80086b4 <HAL_JPEG_GetInfo+0x10e>
  {
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	691b      	ldr	r3, [r3, #16]
 8008638:	091b      	lsrs	r3, r3, #4
 800863a:	f003 030f 	and.w	r3, r3, #15
 800863e:	617b      	str	r3, [r7, #20]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	695b      	ldr	r3, [r3, #20]
 8008646:	091b      	lsrs	r3, r3, #4
 8008648:	f003 030f 	and.w	r3, r3, #15
 800864c:	613b      	str	r3, [r7, #16]
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	699b      	ldr	r3, [r3, #24]
 8008654:	091b      	lsrs	r3, r3, #4
 8008656:	f003 030f 	and.w	r3, r3, #15
 800865a:	60fb      	str	r3, [r7, #12]

    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800865c:	697b      	ldr	r3, [r7, #20]
 800865e:	2b01      	cmp	r3, #1
 8008660:	d109      	bne.n	8008676 <HAL_JPEG_GetInfo+0xd0>
 8008662:	693b      	ldr	r3, [r7, #16]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d106      	bne.n	8008676 <HAL_JPEG_GetInfo+0xd0>
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d103      	bne.n	8008676 <HAL_JPEG_GetInfo+0xd0>
    {
      pInfo->ChromaSubsampling = JPEG_422_SUBSAMPLING; /*16x8 block*/
 800866e:	683b      	ldr	r3, [r7, #0]
 8008670:	2202      	movs	r2, #2
 8008672:	605a      	str	r2, [r3, #4]
 8008674:	e01d      	b.n	80086b2 <HAL_JPEG_GetInfo+0x10c>
    }
    else if ((yblockNb == 0UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8008676:	697b      	ldr	r3, [r7, #20]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d109      	bne.n	8008690 <HAL_JPEG_GetInfo+0xea>
 800867c:	693b      	ldr	r3, [r7, #16]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d106      	bne.n	8008690 <HAL_JPEG_GetInfo+0xea>
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d103      	bne.n	8008690 <HAL_JPEG_GetInfo+0xea>
    {
      pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	2200      	movs	r2, #0
 800868c:	605a      	str	r2, [r3, #4]
 800868e:	e010      	b.n	80086b2 <HAL_JPEG_GetInfo+0x10c>
    }
    else if ((yblockNb == 3UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8008690:	697b      	ldr	r3, [r7, #20]
 8008692:	2b03      	cmp	r3, #3
 8008694:	d109      	bne.n	80086aa <HAL_JPEG_GetInfo+0x104>
 8008696:	693b      	ldr	r3, [r7, #16]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d106      	bne.n	80086aa <HAL_JPEG_GetInfo+0x104>
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d103      	bne.n	80086aa <HAL_JPEG_GetInfo+0x104>
    {
      pInfo->ChromaSubsampling = JPEG_420_SUBSAMPLING;
 80086a2:	683b      	ldr	r3, [r7, #0]
 80086a4:	2201      	movs	r2, #1
 80086a6:	605a      	str	r2, [r3, #4]
 80086a8:	e003      	b.n	80086b2 <HAL_JPEG_GetInfo+0x10c>
    }
    else /*Default is 4:4:4*/
    {
      pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 80086aa:	683b      	ldr	r3, [r7, #0]
 80086ac:	2200      	movs	r2, #0
 80086ae:	605a      	str	r2, [r3, #4]
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 80086b0:	e003      	b.n	80086ba <HAL_JPEG_GetInfo+0x114>
 80086b2:	e002      	b.n	80086ba <HAL_JPEG_GetInfo+0x114>
    }
  }
  else
  {
    pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 80086b4:	683b      	ldr	r3, [r7, #0]
 80086b6:	2200      	movs	r2, #0
 80086b8:	605a      	str	r2, [r3, #4]
  }

  pInfo->ImageQuality = JPEG_GetQuality(hjpeg);
 80086ba:	6878      	ldr	r0, [r7, #4]
 80086bc:	f001 feac 	bl	800a418 <JPEG_GetQuality>
 80086c0:	4602      	mov	r2, r0
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	611a      	str	r2, [r3, #16]

  /* Return function status */
  return HAL_OK;
 80086c6:	2300      	movs	r3, #0
}
 80086c8:	4618      	mov	r0, r3
 80086ca:	3718      	adds	r7, #24
 80086cc:	46bd      	mov	sp, r7
 80086ce:	bd80      	pop	{r7, pc}

080086d0 <HAL_JPEG_Encode_DMA>:
  * @param  OutDataLength size in bytes of the Output buffer
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_JPEG_Encode_DMA(JPEG_HandleTypeDef *hjpeg, uint8_t *pDataInMCU, uint32_t InDataLength,
                                       uint8_t *pDataOut, uint32_t OutDataLength)
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b084      	sub	sp, #16
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	60f8      	str	r0, [r7, #12]
 80086d8:	60b9      	str	r1, [r7, #8]
 80086da:	607a      	str	r2, [r7, #4]
 80086dc:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param((InDataLength >= 4UL));
  assert_param((OutDataLength >= 4UL));

  /* Check In/out buffer allocation and size */
  if ((hjpeg == NULL) || (pDataInMCU == NULL) || (pDataOut == NULL))
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d005      	beq.n	80086f0 <HAL_JPEG_Encode_DMA+0x20>
 80086e4:	68bb      	ldr	r3, [r7, #8]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d002      	beq.n	80086f0 <HAL_JPEG_Encode_DMA+0x20>
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d101      	bne.n	80086f4 <HAL_JPEG_Encode_DMA+0x24>
  {
    return HAL_ERROR;
 80086f0:	2301      	movs	r3, #1
 80086f2:	e059      	b.n	80087a8 <HAL_JPEG_Encode_DMA+0xd8>
  }

  /* Process Locked */
  __HAL_LOCK(hjpeg);
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80086fa:	2b01      	cmp	r3, #1
 80086fc:	d101      	bne.n	8008702 <HAL_JPEG_Encode_DMA+0x32>
 80086fe:	2302      	movs	r3, #2
 8008700:	e052      	b.n	80087a8 <HAL_JPEG_Encode_DMA+0xd8>
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	2201      	movs	r2, #1
 8008706:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  if (hjpeg->State != HAL_JPEG_STATE_READY)
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8008710:	b2db      	uxtb	r3, r3
 8008712:	2b01      	cmp	r3, #1
 8008714:	d005      	beq.n	8008722 <HAL_JPEG_Encode_DMA+0x52>
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	2200      	movs	r2, #0
 800871a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_BUSY;
 800871e:	2302      	movs	r3, #2
 8008720:	e042      	b.n	80087a8 <HAL_JPEG_Encode_DMA+0xd8>
  }
  else
  {
    if ((hjpeg->Context & JPEG_CONTEXT_CONF_ENCODING) == JPEG_CONTEXT_CONF_ENCODING)
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008726:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800872a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800872e:	d134      	bne.n	800879a <HAL_JPEG_Encode_DMA+0xca>
    {
      /*Change JPEG state*/
      hjpeg->State = HAL_JPEG_STATE_BUSY_ENCODING;
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	2203      	movs	r2, #3
 8008734:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

      /*Set the Context to Encode with DMA*/
      hjpeg->Context &= ~(JPEG_CONTEXT_OPERATION_MASK | JPEG_CONTEXT_METHOD_MASK);
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800873c:	f023 020f 	bic.w	r2, r3, #15
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	655a      	str	r2, [r3, #84]	@ 0x54
      hjpeg->Context |= (JPEG_CONTEXT_ENCODE | JPEG_CONTEXT_DMA);
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008748:	f043 020d 	orr.w	r2, r3, #13
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	655a      	str	r2, [r3, #84]	@ 0x54

      /*Store In/out buffers pointers and size*/
      hjpeg->pJpegInBuffPtr = pDataInMCU;
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	68ba      	ldr	r2, [r7, #8]
 8008754:	619a      	str	r2, [r3, #24]
      hjpeg->pJpegOutBuffPtr = pDataOut;
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	683a      	ldr	r2, [r7, #0]
 800875a:	61da      	str	r2, [r3, #28]
      hjpeg->InDataLength = InDataLength;
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	687a      	ldr	r2, [r7, #4]
 8008760:	629a      	str	r2, [r3, #40]	@ 0x28
      hjpeg->OutDataLength = OutDataLength;
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	69ba      	ldr	r2, [r7, #24]
 8008766:	62da      	str	r2, [r3, #44]	@ 0x2c

      /*Reset In/out data counter */
      hjpeg->JpegInCount = 0;
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	2200      	movs	r2, #0
 800876c:	621a      	str	r2, [r3, #32]
      hjpeg->JpegOutCount = 0;
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	2200      	movs	r2, #0
 8008772:	625a      	str	r2, [r3, #36]	@ 0x24

      /*Init decoding process*/
      JPEG_Init_Process(hjpeg);
 8008774:	68f8      	ldr	r0, [r7, #12]
 8008776:	f000 ffdf 	bl	8009738 <JPEG_Init_Process>

      /* JPEG encoding process using DMA */
      if (JPEG_DMA_StartProcess(hjpeg) != HAL_OK)
 800877a:	68f8      	ldr	r0, [r7, #12]
 800877c:	f001 fb00 	bl	8009d80 <JPEG_DMA_StartProcess>
 8008780:	4603      	mov	r3, r0
 8008782:	2b00      	cmp	r3, #0
 8008784:	d00f      	beq.n	80087a6 <HAL_JPEG_Encode_DMA+0xd6>
      {
        /* Update State */
        hjpeg->State = HAL_JPEG_STATE_ERROR;
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	2206      	movs	r2, #6
 800878a:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
        /* Process Unlocked */
        __HAL_UNLOCK(hjpeg);
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	2200      	movs	r2, #0
 8008792:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 8008796:	2301      	movs	r3, #1
 8008798:	e006      	b.n	80087a8 <HAL_JPEG_Encode_DMA+0xd8>

    }
    else
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hjpeg);
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	2200      	movs	r2, #0
 800879e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      return HAL_ERROR;
 80087a2:	2301      	movs	r3, #1
 80087a4:	e000      	b.n	80087a8 <HAL_JPEG_Encode_DMA+0xd8>
    }
  }
  /* Return function status */
  return HAL_OK;
 80087a6:	2300      	movs	r3, #0
}
 80087a8:	4618      	mov	r0, r3
 80087aa:	3710      	adds	r7, #16
 80087ac:	46bd      	mov	sp, r7
 80087ae:	bd80      	pop	{r7, pc}

080087b0 <HAL_JPEG_Pause>:
  *                           JPEG_PAUSE_RESUME_OUTPUT: Pause Output processing
  *                           JPEG_PAUSE_RESUME_INPUT_OUTPUT: Pause Input and Output processing
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_JPEG_Pause(JPEG_HandleTypeDef *hjpeg, uint32_t XferSelection)
{
 80087b0:	b480      	push	{r7}
 80087b2:	b085      	sub	sp, #20
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
 80087b8:	6039      	str	r1, [r7, #0]
  uint32_t mask = 0;
 80087ba:	2300      	movs	r3, #0
 80087bc:	60fb      	str	r3, [r7, #12]

  assert_param(IS_JPEG_PAUSE_RESUME_STATE(XferSelection));

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80087c2:	f003 030c 	and.w	r3, r3, #12
 80087c6:	2b0c      	cmp	r3, #12
 80087c8:	d116      	bne.n	80087f8 <HAL_JPEG_Pause+0x48>
  {
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	f003 0301 	and.w	r3, r3, #1
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d005      	beq.n	80087e0 <HAL_JPEG_Pause+0x30>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80087d8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 80087e0:	683b      	ldr	r3, [r7, #0]
 80087e2:	f003 0302 	and.w	r3, r3, #2
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d033      	beq.n	8008852 <HAL_JPEG_Pause+0xa2>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80087ee:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	655a      	str	r2, [r3, #84]	@ 0x54
 80087f6:	e02c      	b.n	8008852 <HAL_JPEG_Pause+0xa2>
    }

  }
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80087fc:	f003 030c 	and.w	r3, r3, #12
 8008800:	2b08      	cmp	r3, #8
 8008802:	d126      	bne.n	8008852 <HAL_JPEG_Pause+0xa2>
  {

    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 8008804:	683b      	ldr	r3, [r7, #0]
 8008806:	f003 0301 	and.w	r3, r3, #1
 800880a:	2b00      	cmp	r3, #0
 800880c:	d009      	beq.n	8008822 <HAL_JPEG_Pause+0x72>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008812:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	655a      	str	r2, [r3, #84]	@ 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	f043 0306 	orr.w	r3, r3, #6
 8008820:	60fb      	str	r3, [r7, #12]
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 8008822:	683b      	ldr	r3, [r7, #0]
 8008824:	f003 0302 	and.w	r3, r3, #2
 8008828:	2b00      	cmp	r3, #0
 800882a:	d009      	beq.n	8008840 <HAL_JPEG_Pause+0x90>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008830:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	655a      	str	r2, [r3, #84]	@ 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
 800883e:	60fb      	str	r3, [r7, #12]
    }
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	43da      	mvns	r2, r3
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	400a      	ands	r2, r1
 8008850:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Nothing to do */
  }

  /* Return function status */
  return HAL_OK;
 8008852:	2300      	movs	r3, #0
}
 8008854:	4618      	mov	r0, r3
 8008856:	3714      	adds	r7, #20
 8008858:	46bd      	mov	sp, r7
 800885a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885e:	4770      	bx	lr

08008860 <HAL_JPEG_ConfigInputBuffer>:
  * @param  pNewInputBuffer Pointer to the new input data buffer
  * @param  InDataLength Size in bytes of the new Input data buffer
  * @retval HAL status
  */
void HAL_JPEG_ConfigInputBuffer(JPEG_HandleTypeDef *hjpeg, uint8_t *pNewInputBuffer, uint32_t InDataLength)
{
 8008860:	b480      	push	{r7}
 8008862:	b085      	sub	sp, #20
 8008864:	af00      	add	r7, sp, #0
 8008866:	60f8      	str	r0, [r7, #12]
 8008868:	60b9      	str	r1, [r7, #8]
 800886a:	607a      	str	r2, [r7, #4]
  hjpeg->pJpegInBuffPtr =  pNewInputBuffer;
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	68ba      	ldr	r2, [r7, #8]
 8008870:	619a      	str	r2, [r3, #24]
  hjpeg->InDataLength = InDataLength;
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	687a      	ldr	r2, [r7, #4]
 8008876:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8008878:	bf00      	nop
 800887a:	3714      	adds	r7, #20
 800887c:	46bd      	mov	sp, r7
 800887e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008882:	4770      	bx	lr

08008884 <HAL_JPEG_ConfigOutputBuffer>:
  * @param  pNewOutputBuffer Pointer to the new output data buffer
  * @param  OutDataLength Size in bytes of the new Output data buffer
  * @retval HAL status
  */
void HAL_JPEG_ConfigOutputBuffer(JPEG_HandleTypeDef *hjpeg, uint8_t *pNewOutputBuffer, uint32_t OutDataLength)
{
 8008884:	b480      	push	{r7}
 8008886:	b085      	sub	sp, #20
 8008888:	af00      	add	r7, sp, #0
 800888a:	60f8      	str	r0, [r7, #12]
 800888c:	60b9      	str	r1, [r7, #8]
 800888e:	607a      	str	r2, [r7, #4]
  hjpeg->pJpegOutBuffPtr = pNewOutputBuffer;
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	68ba      	ldr	r2, [r7, #8]
 8008894:	61da      	str	r2, [r3, #28]
  hjpeg->OutDataLength = OutDataLength;
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	687a      	ldr	r2, [r7, #4]
 800889a:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800889c:	bf00      	nop
 800889e:	3714      	adds	r7, #20
 80088a0:	46bd      	mov	sp, r7
 80088a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a6:	4770      	bx	lr

080088a8 <HAL_JPEG_InfoReadyCallback>:
  * @param  pInfo pointer to a JPEG_ConfTypeDef structure that contains
  *         The JPEG decoded header information
  * @retval None
  */
__weak void HAL_JPEG_InfoReadyCallback(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
{
 80088a8:	b480      	push	{r7}
 80088aa:	b083      	sub	sp, #12
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
 80088b0:	6039      	str	r1, [r7, #0]
  UNUSED(pInfo);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_JPEG_HeaderParsingCpltCallback could be implemented in the user file
   */
}
 80088b2:	bf00      	nop
 80088b4:	370c      	adds	r7, #12
 80088b6:	46bd      	mov	sp, r7
 80088b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088bc:	4770      	bx	lr

080088be <HAL_JPEG_DecodeCpltCallback>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
__weak void HAL_JPEG_DecodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
{
 80088be:	b480      	push	{r7}
 80088c0:	b083      	sub	sp, #12
 80088c2:	af00      	add	r7, sp, #0
 80088c4:	6078      	str	r0, [r7, #4]
  UNUSED(hjpeg);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_JPEG_EncodeCpltCallback could be implemented in the user file
   */
}
 80088c6:	bf00      	nop
 80088c8:	370c      	adds	r7, #12
 80088ca:	46bd      	mov	sp, r7
 80088cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d0:	4770      	bx	lr

080088d2 <HAL_JPEG_ErrorCallback>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
__weak void HAL_JPEG_ErrorCallback(JPEG_HandleTypeDef *hjpeg)
{
 80088d2:	b480      	push	{r7}
 80088d4:	b083      	sub	sp, #12
 80088d6:	af00      	add	r7, sp, #0
 80088d8:	6078      	str	r0, [r7, #4]
  UNUSED(hjpeg);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_JPEG_ErrorCallback could be implemented in the user file
   */
}
 80088da:	bf00      	nop
 80088dc:	370c      	adds	r7, #12
 80088de:	46bd      	mov	sp, r7
 80088e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e4:	4770      	bx	lr

080088e6 <HAL_JPEG_IRQHandler>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
void HAL_JPEG_IRQHandler(JPEG_HandleTypeDef *hjpeg)
{
 80088e6:	b580      	push	{r7, lr}
 80088e8:	b082      	sub	sp, #8
 80088ea:	af00      	add	r7, sp, #0
 80088ec:	6078      	str	r0, [r7, #4]
  switch (hjpeg->State)
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 80088f4:	b2db      	uxtb	r3, r3
 80088f6:	3b03      	subs	r3, #3
 80088f8:	2b01      	cmp	r3, #1
 80088fa:	d813      	bhi.n	8008924 <HAL_JPEG_IRQHandler+0x3e>
  {
    case HAL_JPEG_STATE_BUSY_ENCODING:
    case HAL_JPEG_STATE_BUSY_DECODING:
      /* continue JPEG data encoding/Decoding*/
      /* JPEG data processing : In/Out FIFO transfer*/
      if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008900:	f003 030c 	and.w	r3, r3, #12
 8008904:	2b08      	cmp	r3, #8
 8008906:	d103      	bne.n	8008910 <HAL_JPEG_IRQHandler+0x2a>
      {
        (void) JPEG_Process(hjpeg);
 8008908:	6878      	ldr	r0, [r7, #4]
 800890a:	f000 ff89 	bl	8009820 <JPEG_Process>
      }
      else
      {
        /* Nothing to do */
      }
      break;
 800890e:	e00b      	b.n	8008928 <HAL_JPEG_IRQHandler+0x42>
      else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008914:	f003 030c 	and.w	r3, r3, #12
 8008918:	2b0c      	cmp	r3, #12
 800891a:	d105      	bne.n	8008928 <HAL_JPEG_IRQHandler+0x42>
        JPEG_DMA_ContinueProcess(hjpeg);
 800891c:	6878      	ldr	r0, [r7, #4]
 800891e:	f001 fac9 	bl	8009eb4 <JPEG_DMA_ContinueProcess>
      break;
 8008922:	e001      	b.n	8008928 <HAL_JPEG_IRQHandler+0x42>

    default:
      break;
 8008924:	bf00      	nop
 8008926:	e000      	b.n	800892a <HAL_JPEG_IRQHandler+0x44>
      break;
 8008928:	bf00      	nop
  }
}
 800892a:	bf00      	nop
 800892c:	3708      	adds	r7, #8
 800892e:	46bd      	mov	sp, r7
 8008930:	bd80      	pop	{r7, pc}

08008932 <JPEG_Bits_To_SizeCodes>:
  * @param  Huffcode pointer to codes table
  * @param  LastK pointer to last Coeff (table dimension)
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Bits_To_SizeCodes(uint8_t *Bits, uint8_t *Huffsize, uint32_t *Huffcode, uint32_t *LastK)
{
 8008932:	b480      	push	{r7}
 8008934:	b08b      	sub	sp, #44	@ 0x2c
 8008936:	af00      	add	r7, sp, #0
 8008938:	60f8      	str	r0, [r7, #12]
 800893a:	60b9      	str	r1, [r7, #8]
 800893c:	607a      	str	r2, [r7, #4]
 800893e:	603b      	str	r3, [r7, #0]
  uint32_t l;
  uint32_t code;
  uint32_t si;

  /* Figure C.1: Generation of table of Huffman code sizes */
  p = 0;
 8008940:	2300      	movs	r3, #0
 8008942:	623b      	str	r3, [r7, #32]
  for (l = 0; l < 16UL; l++)
 8008944:	2300      	movs	r3, #0
 8008946:	61fb      	str	r3, [r7, #28]
 8008948:	e020      	b.n	800898c <JPEG_Bits_To_SizeCodes+0x5a>
  {
    i = (uint32_t)Bits[l];
 800894a:	68fa      	ldr	r2, [r7, #12]
 800894c:	69fb      	ldr	r3, [r7, #28]
 800894e:	4413      	add	r3, r2
 8008950:	781b      	ldrb	r3, [r3, #0]
 8008952:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((p + i) > 256UL)
 8008954:	6a3a      	ldr	r2, [r7, #32]
 8008956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008958:	4413      	add	r3, r2
 800895a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800895e:	d90f      	bls.n	8008980 <JPEG_Bits_To_SizeCodes+0x4e>
    {
      /* check for table overflow */
      return HAL_ERROR;
 8008960:	2301      	movs	r3, #1
 8008962:	e055      	b.n	8008a10 <JPEG_Bits_To_SizeCodes+0xde>
    }
    while (i != 0UL)
    {
      Huffsize[p] = (uint8_t) l + 1U;
 8008964:	69fb      	ldr	r3, [r7, #28]
 8008966:	b2da      	uxtb	r2, r3
 8008968:	68b9      	ldr	r1, [r7, #8]
 800896a:	6a3b      	ldr	r3, [r7, #32]
 800896c:	440b      	add	r3, r1
 800896e:	3201      	adds	r2, #1
 8008970:	b2d2      	uxtb	r2, r2
 8008972:	701a      	strb	r2, [r3, #0]
      p++;
 8008974:	6a3b      	ldr	r3, [r7, #32]
 8008976:	3301      	adds	r3, #1
 8008978:	623b      	str	r3, [r7, #32]
      i--;
 800897a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800897c:	3b01      	subs	r3, #1
 800897e:	627b      	str	r3, [r7, #36]	@ 0x24
    while (i != 0UL)
 8008980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008982:	2b00      	cmp	r3, #0
 8008984:	d1ee      	bne.n	8008964 <JPEG_Bits_To_SizeCodes+0x32>
  for (l = 0; l < 16UL; l++)
 8008986:	69fb      	ldr	r3, [r7, #28]
 8008988:	3301      	adds	r3, #1
 800898a:	61fb      	str	r3, [r7, #28]
 800898c:	69fb      	ldr	r3, [r7, #28]
 800898e:	2b0f      	cmp	r3, #15
 8008990:	d9db      	bls.n	800894a <JPEG_Bits_To_SizeCodes+0x18>
    }
  }
  Huffsize[p] = 0;
 8008992:	68ba      	ldr	r2, [r7, #8]
 8008994:	6a3b      	ldr	r3, [r7, #32]
 8008996:	4413      	add	r3, r2
 8008998:	2200      	movs	r2, #0
 800899a:	701a      	strb	r2, [r3, #0]
  *LastK = p;
 800899c:	683b      	ldr	r3, [r7, #0]
 800899e:	6a3a      	ldr	r2, [r7, #32]
 80089a0:	601a      	str	r2, [r3, #0]

  /* Figure C.2: Generation of table of Huffman codes */
  code = 0;
 80089a2:	2300      	movs	r3, #0
 80089a4:	61bb      	str	r3, [r7, #24]
  si = Huffsize[0];
 80089a6:	68bb      	ldr	r3, [r7, #8]
 80089a8:	781b      	ldrb	r3, [r3, #0]
 80089aa:	617b      	str	r3, [r7, #20]
  p = 0;
 80089ac:	2300      	movs	r3, #0
 80089ae:	623b      	str	r3, [r7, #32]
  while (Huffsize[p] != 0U)
 80089b0:	e027      	b.n	8008a02 <JPEG_Bits_To_SizeCodes+0xd0>
  {
    while (((uint32_t) Huffsize[p]) == si)
    {
      Huffcode[p] = code;
 80089b2:	6a3b      	ldr	r3, [r7, #32]
 80089b4:	009b      	lsls	r3, r3, #2
 80089b6:	687a      	ldr	r2, [r7, #4]
 80089b8:	4413      	add	r3, r2
 80089ba:	69ba      	ldr	r2, [r7, #24]
 80089bc:	601a      	str	r2, [r3, #0]
      p++;
 80089be:	6a3b      	ldr	r3, [r7, #32]
 80089c0:	3301      	adds	r3, #1
 80089c2:	623b      	str	r3, [r7, #32]
      code++;
 80089c4:	69bb      	ldr	r3, [r7, #24]
 80089c6:	3301      	adds	r3, #1
 80089c8:	61bb      	str	r3, [r7, #24]
    while (((uint32_t) Huffsize[p]) == si)
 80089ca:	68ba      	ldr	r2, [r7, #8]
 80089cc:	6a3b      	ldr	r3, [r7, #32]
 80089ce:	4413      	add	r3, r2
 80089d0:	781b      	ldrb	r3, [r3, #0]
 80089d2:	461a      	mov	r2, r3
 80089d4:	697b      	ldr	r3, [r7, #20]
 80089d6:	4293      	cmp	r3, r2
 80089d8:	d0eb      	beq.n	80089b2 <JPEG_Bits_To_SizeCodes+0x80>
    }
    /* code must fit in "size" bits (si), no code is allowed to be all ones*/
    if(si > 31UL)
 80089da:	697b      	ldr	r3, [r7, #20]
 80089dc:	2b1f      	cmp	r3, #31
 80089de:	d901      	bls.n	80089e4 <JPEG_Bits_To_SizeCodes+0xb2>
    {
      return HAL_ERROR;
 80089e0:	2301      	movs	r3, #1
 80089e2:	e015      	b.n	8008a10 <JPEG_Bits_To_SizeCodes+0xde>
    }
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 80089e4:	2201      	movs	r2, #1
 80089e6:	697b      	ldr	r3, [r7, #20]
 80089e8:	fa02 f303 	lsl.w	r3, r2, r3
 80089ec:	69ba      	ldr	r2, [r7, #24]
 80089ee:	429a      	cmp	r2, r3
 80089f0:	d301      	bcc.n	80089f6 <JPEG_Bits_To_SizeCodes+0xc4>
    {
      return HAL_ERROR;
 80089f2:	2301      	movs	r3, #1
 80089f4:	e00c      	b.n	8008a10 <JPEG_Bits_To_SizeCodes+0xde>
    }
    code <<= 1;
 80089f6:	69bb      	ldr	r3, [r7, #24]
 80089f8:	005b      	lsls	r3, r3, #1
 80089fa:	61bb      	str	r3, [r7, #24]
    si++;
 80089fc:	697b      	ldr	r3, [r7, #20]
 80089fe:	3301      	adds	r3, #1
 8008a00:	617b      	str	r3, [r7, #20]
  while (Huffsize[p] != 0U)
 8008a02:	68ba      	ldr	r2, [r7, #8]
 8008a04:	6a3b      	ldr	r3, [r7, #32]
 8008a06:	4413      	add	r3, r2
 8008a08:	781b      	ldrb	r3, [r3, #0]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d1dd      	bne.n	80089ca <JPEG_Bits_To_SizeCodes+0x98>
  }
  /* Return function status */
  return HAL_OK;
 8008a0e:	2300      	movs	r3, #0
}
 8008a10:	4618      	mov	r0, r3
 8008a12:	372c      	adds	r7, #44	@ 0x2c
 8008a14:	46bd      	mov	sp, r7
 8008a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1a:	4770      	bx	lr

08008a1c <JPEG_ACHuff_BitsVals_To_SizeCodes>:
  * @param  AC_SizeCodesTable pointer to AC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_ACHuff_BitsVals_To_SizeCodes(JPEG_ACHuffTableTypeDef *AC_BitsValsTable,
                                                           JPEG_AC_HuffCodeTableTypeDef *AC_SizeCodesTable)
{
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	f5ad 6da5 	sub.w	sp, sp, #1320	@ 0x528
 8008a22:	af00      	add	r7, sp, #0
 8008a24:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8008a28:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 8008a2c:	6018      	str	r0, [r3, #0]
 8008a2e:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8008a32:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 8008a36:	6019      	str	r1, [r3, #0]
  uint32_t huffcode[257];
  uint32_t k;
  uint32_t l, lsb, msb;
  uint32_t lastK;

  error = JPEG_Bits_To_SizeCodes(AC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 8008a38:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8008a3c:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 8008a40:	6818      	ldr	r0, [r3, #0]
 8008a42:	f107 0308 	add.w	r3, r7, #8
 8008a46:	f107 020c 	add.w	r2, r7, #12
 8008a4a:	f507 6182 	add.w	r1, r7, #1040	@ 0x410
 8008a4e:	f7ff ff70 	bl	8008932 <JPEG_Bits_To_SizeCodes>
 8008a52:	4603      	mov	r3, r0
 8008a54:	f887 351f 	strb.w	r3, [r7, #1311]	@ 0x51f
  if (error != HAL_OK)
 8008a58:	f897 351f 	ldrb.w	r3, [r7, #1311]	@ 0x51f
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d002      	beq.n	8008a66 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x4a>
  {
    return  error;
 8008a60:	f897 351f 	ldrb.w	r3, [r7, #1311]	@ 0x51f
 8008a64:	e075      	b.n	8008b52 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x136>
  }

  /* Figure C.3: Ordering procedure for encoding procedure code tables */
  k = 0;
 8008a66:	2300      	movs	r3, #0
 8008a68:	f8c7 3524 	str.w	r3, [r7, #1316]	@ 0x524

  while (k < lastK)
 8008a6c:	e067      	b.n	8008b3e <JPEG_ACHuff_BitsVals_To_SizeCodes+0x122>
  {
    l = AC_BitsValsTable->HuffVal[k];
 8008a6e:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8008a72:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 8008a76:	681a      	ldr	r2, [r3, #0]
 8008a78:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 8008a7c:	4413      	add	r3, r2
 8008a7e:	3310      	adds	r3, #16
 8008a80:	781b      	ldrb	r3, [r3, #0]
 8008a82:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
    if (l == 0UL)
 8008a86:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d103      	bne.n	8008a96 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x7a>
    {
      l = 160; /*l = 0x00 EOB code*/
 8008a8e:	23a0      	movs	r3, #160	@ 0xa0
 8008a90:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
 8008a94:	e021      	b.n	8008ada <JPEG_ACHuff_BitsVals_To_SizeCodes+0xbe>
    }
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
 8008a96:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8008a9a:	2bf0      	cmp	r3, #240	@ 0xf0
 8008a9c:	d103      	bne.n	8008aa6 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x8a>
    {
      l = 161;
 8008a9e:	23a1      	movs	r3, #161	@ 0xa1
 8008aa0:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
 8008aa4:	e019      	b.n	8008ada <JPEG_ACHuff_BitsVals_To_SizeCodes+0xbe>
    }
    else
    {
      msb = (l & 0xF0UL) >> 4;
 8008aa6:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8008aaa:	091b      	lsrs	r3, r3, #4
 8008aac:	f003 030f 	and.w	r3, r3, #15
 8008ab0:	f8c7 3518 	str.w	r3, [r7, #1304]	@ 0x518
      lsb = (l & 0x0FUL);
 8008ab4:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8008ab8:	f003 030f 	and.w	r3, r3, #15
 8008abc:	f8c7 3514 	str.w	r3, [r7, #1300]	@ 0x514
      l = (msb * 10UL) + lsb - 1UL;
 8008ac0:	f8d7 2518 	ldr.w	r2, [r7, #1304]	@ 0x518
 8008ac4:	4613      	mov	r3, r2
 8008ac6:	009b      	lsls	r3, r3, #2
 8008ac8:	4413      	add	r3, r2
 8008aca:	005b      	lsls	r3, r3, #1
 8008acc:	461a      	mov	r2, r3
 8008ace:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 8008ad2:	4413      	add	r3, r2
 8008ad4:	3b01      	subs	r3, #1
 8008ad6:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
    }
    if (l >= JPEG_AC_HUFF_TABLE_SIZE)
 8008ada:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8008ade:	2ba1      	cmp	r3, #161	@ 0xa1
 8008ae0:	d901      	bls.n	8008ae6 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xca>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 8008ae2:	2301      	movs	r3, #1
 8008ae4:	e035      	b.n	8008b52 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x136>
    }
    else
    {
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8008ae6:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8008aea:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 8008aee:	f8d7 2524 	ldr.w	r2, [r7, #1316]	@ 0x524
 8008af2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008af6:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8008afa:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 8008afe:	6819      	ldr	r1, [r3, #0]
 8008b00:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8008b04:	3328      	adds	r3, #40	@ 0x28
 8008b06:	009b      	lsls	r3, r3, #2
 8008b08:	440b      	add	r3, r1
 8008b0a:	605a      	str	r2, [r3, #4]
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 8008b0c:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8008b10:	f5a3 728c 	sub.w	r2, r3, #280	@ 0x118
 8008b14:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 8008b18:	4413      	add	r3, r2
 8008b1a:	781b      	ldrb	r3, [r3, #0]
 8008b1c:	3b01      	subs	r3, #1
 8008b1e:	b2d9      	uxtb	r1, r3
 8008b20:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8008b24:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 8008b28:	681a      	ldr	r2, [r3, #0]
 8008b2a:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8008b2e:	4413      	add	r3, r2
 8008b30:	460a      	mov	r2, r1
 8008b32:	701a      	strb	r2, [r3, #0]
      k++;
 8008b34:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 8008b38:	3301      	adds	r3, #1
 8008b3a:	f8c7 3524 	str.w	r3, [r7, #1316]	@ 0x524
  while (k < lastK)
 8008b3e:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8008b42:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	f8d7 2524 	ldr.w	r2, [r7, #1316]	@ 0x524
 8008b4c:	429a      	cmp	r2, r3
 8008b4e:	d38e      	bcc.n	8008a6e <JPEG_ACHuff_BitsVals_To_SizeCodes+0x52>
    }
  }

  /* Return function status */
  return HAL_OK;
 8008b50:	2300      	movs	r3, #0
}
 8008b52:	4618      	mov	r0, r3
 8008b54:	f507 67a5 	add.w	r7, r7, #1320	@ 0x528
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	bd80      	pop	{r7, pc}

08008b5c <JPEG_DCHuff_BitsVals_To_SizeCodes>:
  * @param  DC_SizeCodesTable pointer to DC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_DCHuff_BitsVals_To_SizeCodes(JPEG_DCHuffTableTypeDef *DC_BitsValsTable,
                                                           JPEG_DC_HuffCodeTableTypeDef *DC_SizeCodesTable)
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	f5ad 6da4 	sub.w	sp, sp, #1312	@ 0x520
 8008b62:	af00      	add	r7, sp, #0
 8008b64:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8008b68:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 8008b6c:	6018      	str	r0, [r3, #0]
 8008b6e:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8008b72:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 8008b76:	6019      	str	r1, [r3, #0]
  uint32_t k;
  uint32_t l;
  uint32_t lastK;
  uint8_t huffsize[257];
  uint32_t huffcode[257];
  error = JPEG_Bits_To_SizeCodes(DC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 8008b78:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8008b7c:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 8008b80:	6818      	ldr	r0, [r3, #0]
 8008b82:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8008b86:	f107 0208 	add.w	r2, r7, #8
 8008b8a:	f207 410c 	addw	r1, r7, #1036	@ 0x40c
 8008b8e:	f7ff fed0 	bl	8008932 <JPEG_Bits_To_SizeCodes>
 8008b92:	4603      	mov	r3, r0
 8008b94:	f887 351b 	strb.w	r3, [r7, #1307]	@ 0x51b
  if (error != HAL_OK)
 8008b98:	f897 351b 	ldrb.w	r3, [r7, #1307]	@ 0x51b
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d002      	beq.n	8008ba6 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4a>
  {
    return  error;
 8008ba0:	f897 351b 	ldrb.w	r3, [r7, #1307]	@ 0x51b
 8008ba4:	e048      	b.n	8008c38 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xdc>
  }
  /* Figure C.3: ordering procedure for encoding procedure code tables */
  k = 0;
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	f8c7 351c 	str.w	r3, [r7, #1308]	@ 0x51c

  while (k < lastK)
 8008bac:	e03d      	b.n	8008c2a <JPEG_DCHuff_BitsVals_To_SizeCodes+0xce>
  {
    l = DC_BitsValsTable->HuffVal[k];
 8008bae:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8008bb2:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 8008bb6:	681a      	ldr	r2, [r3, #0]
 8008bb8:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 8008bbc:	4413      	add	r3, r2
 8008bbe:	3310      	adds	r3, #16
 8008bc0:	781b      	ldrb	r3, [r3, #0]
 8008bc2:	f8c7 3514 	str.w	r3, [r7, #1300]	@ 0x514
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
 8008bc6:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 8008bca:	2b0b      	cmp	r3, #11
 8008bcc:	d901      	bls.n	8008bd2 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x76>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 8008bce:	2301      	movs	r3, #1
 8008bd0:	e032      	b.n	8008c38 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xdc>
    }
    else
    {
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8008bd2:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8008bd6:	f5a3 63a3 	sub.w	r3, r3, #1304	@ 0x518
 8008bda:	f8d7 251c 	ldr.w	r2, [r7, #1308]	@ 0x51c
 8008bde:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008be2:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8008be6:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 8008bea:	6819      	ldr	r1, [r3, #0]
 8008bec:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 8008bf0:	3302      	adds	r3, #2
 8008bf2:	009b      	lsls	r3, r3, #2
 8008bf4:	440b      	add	r3, r1
 8008bf6:	605a      	str	r2, [r3, #4]
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 8008bf8:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8008bfc:	f5a3 728a 	sub.w	r2, r3, #276	@ 0x114
 8008c00:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 8008c04:	4413      	add	r3, r2
 8008c06:	781b      	ldrb	r3, [r3, #0]
 8008c08:	3b01      	subs	r3, #1
 8008c0a:	b2d9      	uxtb	r1, r3
 8008c0c:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8008c10:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 8008c14:	681a      	ldr	r2, [r3, #0]
 8008c16:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 8008c1a:	4413      	add	r3, r2
 8008c1c:	460a      	mov	r2, r1
 8008c1e:	701a      	strb	r2, [r3, #0]
      k++;
 8008c20:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 8008c24:	3301      	adds	r3, #1
 8008c26:	f8c7 351c 	str.w	r3, [r7, #1308]	@ 0x51c
  while (k < lastK)
 8008c2a:	f8d7 3510 	ldr.w	r3, [r7, #1296]	@ 0x510
 8008c2e:	f8d7 251c 	ldr.w	r2, [r7, #1308]	@ 0x51c
 8008c32:	429a      	cmp	r2, r3
 8008c34:	d3bb      	bcc.n	8008bae <JPEG_DCHuff_BitsVals_To_SizeCodes+0x52>
    }
  }

  /* Return function status */
  return HAL_OK;
 8008c36:	2300      	movs	r3, #0
}
 8008c38:	4618      	mov	r0, r3
 8008c3a:	f507 67a4 	add.w	r7, r7, #1312	@ 0x520
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	bd80      	pop	{r7, pc}

08008c42 <JPEG_Set_HuffDC_Mem>:
  * @param  DCTableAddress Encoder DC huffman table address it could be HUFFENC_DC0 or HUFFENC_DC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffDC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_DCHuffTableTypeDef *HuffTableDC,
                                             const __IO uint32_t *DCTableAddress)
{
 8008c42:	b580      	push	{r7, lr}
 8008c44:	b09a      	sub	sp, #104	@ 0x68
 8008c46:	af00      	add	r7, sp, #0
 8008c48:	60f8      	str	r0, [r7, #12]
 8008c4a:	60b9      	str	r1, [r7, #8]
 8008c4c:	607a      	str	r2, [r7, #4]
  uint32_t i;
  uint32_t lsb;
  uint32_t msb;
  __IO uint32_t *address, *addressDef;

  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
 8008c56:	687a      	ldr	r2, [r7, #4]
 8008c58:	429a      	cmp	r2, r3
 8008c5a:	d106      	bne.n	8008c6a <JPEG_Set_HuffDC_Mem+0x28>
  {
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
 8008c64:	3318      	adds	r3, #24
 8008c66:	663b      	str	r3, [r7, #96]	@ 0x60
 8008c68:	e00f      	b.n	8008c8a <JPEG_Set_HuffDC_Mem+0x48>
  }
  else if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC1))
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
 8008c72:	687a      	ldr	r2, [r7, #4]
 8008c74:	429a      	cmp	r2, r3
 8008c76:	d106      	bne.n	8008c86 <JPEG_Set_HuffDC_Mem+0x44>
  {
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
 8008c80:	3318      	adds	r3, #24
 8008c82:	663b      	str	r3, [r7, #96]	@ 0x60
 8008c84:	e001      	b.n	8008c8a <JPEG_Set_HuffDC_Mem+0x48>
  }
  else
  {
    return HAL_ERROR;
 8008c86:	2301      	movs	r3, #1
 8008c88:	e059      	b.n	8008d3e <JPEG_Set_HuffDC_Mem+0xfc>
  }

  if (HuffTableDC != NULL)
 8008c8a:	68bb      	ldr	r3, [r7, #8]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d055      	beq.n	8008d3c <JPEG_Set_HuffDC_Mem+0xfa>
  {
    error = JPEG_DCHuff_BitsVals_To_SizeCodes(HuffTableDC, &dcSizeCodesTable);
 8008c90:	f107 0314 	add.w	r3, r7, #20
 8008c94:	4619      	mov	r1, r3
 8008c96:	68b8      	ldr	r0, [r7, #8]
 8008c98:	f7ff ff60 	bl	8008b5c <JPEG_DCHuff_BitsVals_To_SizeCodes>
 8008c9c:	4603      	mov	r3, r0
 8008c9e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    if (error != HAL_OK)
 8008ca2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d002      	beq.n	8008cb0 <JPEG_Set_HuffDC_Mem+0x6e>
    {
      return  error;
 8008caa:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008cae:	e046      	b.n	8008d3e <JPEG_Set_HuffDC_Mem+0xfc>
    }
    addressDef = address;
 8008cb0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008cb2:	65bb      	str	r3, [r7, #88]	@ 0x58
    *addressDef = 0x0FFF0FFF;
 8008cb4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008cb6:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 8008cba:	601a      	str	r2, [r3, #0]
    addressDef++;
 8008cbc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008cbe:	3304      	adds	r3, #4
 8008cc0:	65bb      	str	r3, [r7, #88]	@ 0x58
    *addressDef = 0x0FFF0FFF;
 8008cc2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008cc4:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 8008cc8:	601a      	str	r2, [r3, #0]

    i = JPEG_DC_HUFF_TABLE_SIZE;
 8008cca:	230c      	movs	r3, #12
 8008ccc:	667b      	str	r3, [r7, #100]	@ 0x64
    while (i > 1UL)
 8008cce:	e032      	b.n	8008d36 <JPEG_Set_HuffDC_Mem+0xf4>
    {
      i--;
 8008cd0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008cd2:	3b01      	subs	r3, #1
 8008cd4:	667b      	str	r3, [r7, #100]	@ 0x64
      address --;
 8008cd6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008cd8:	3b04      	subs	r3, #4
 8008cda:	663b      	str	r3, [r7, #96]	@ 0x60
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8008cdc:	f107 0214 	add.w	r2, r7, #20
 8008ce0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008ce2:	4413      	add	r3, r2
 8008ce4:	781b      	ldrb	r3, [r3, #0]
 8008ce6:	021b      	lsls	r3, r3, #8
 8008ce8:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8008cec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008cee:	3302      	adds	r3, #2
 8008cf0:	009b      	lsls	r3, r3, #2
 8008cf2:	3368      	adds	r3, #104	@ 0x68
 8008cf4:	443b      	add	r3, r7
 8008cf6:	f853 3c50 	ldr.w	r3, [r3, #-80]
 8008cfa:	b2db      	uxtb	r3, r3
 8008cfc:	4313      	orrs	r3, r2
 8008cfe:	657b      	str	r3, [r7, #84]	@ 0x54
                                                                                   0xFFUL);
      i--;
 8008d00:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008d02:	3b01      	subs	r3, #1
 8008d04:	667b      	str	r3, [r7, #100]	@ 0x64
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8008d06:	f107 0214 	add.w	r2, r7, #20
 8008d0a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008d0c:	4413      	add	r3, r2
 8008d0e:	781b      	ldrb	r3, [r3, #0]
 8008d10:	021b      	lsls	r3, r3, #8
 8008d12:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8008d16:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008d18:	3302      	adds	r3, #2
 8008d1a:	009b      	lsls	r3, r3, #2
 8008d1c:	3368      	adds	r3, #104	@ 0x68
 8008d1e:	443b      	add	r3, r7
 8008d20:	f853 3c50 	ldr.w	r3, [r3, #-80]
 8008d24:	b2db      	uxtb	r3, r3
 8008d26:	4313      	orrs	r3, r2
 8008d28:	653b      	str	r3, [r7, #80]	@ 0x50
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 8008d2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008d2c:	041a      	lsls	r2, r3, #16
 8008d2e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008d30:	431a      	orrs	r2, r3
 8008d32:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008d34:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 8008d36:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008d38:	2b01      	cmp	r3, #1
 8008d3a:	d8c9      	bhi.n	8008cd0 <JPEG_Set_HuffDC_Mem+0x8e>
    }
  }

  /* Return function status */
  return HAL_OK;
 8008d3c:	2300      	movs	r3, #0
}
 8008d3e:	4618      	mov	r0, r3
 8008d40:	3768      	adds	r7, #104	@ 0x68
 8008d42:	46bd      	mov	sp, r7
 8008d44:	bd80      	pop	{r7, pc}
	...

08008d48 <JPEG_Set_HuffAC_Mem>:
  * @param  ACTableAddress Encoder AC huffman table address it could be HUFFENC_AC0 or HUFFENC_AC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffAC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_ACHuffTableTypeDef *HuffTableAC,
                                             const __IO uint32_t *ACTableAddress)
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	f5ad 7d56 	sub.w	sp, sp, #856	@ 0x358
 8008d4e:	af00      	add	r7, sp, #0
 8008d50:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8008d54:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8008d58:	6018      	str	r0, [r3, #0]
 8008d5a:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8008d5e:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 8008d62:	6019      	str	r1, [r3, #0]
 8008d64:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8008d68:	f5a3 7355 	sub.w	r3, r3, #852	@ 0x354
 8008d6c:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef error;
  JPEG_AC_HuffCodeTableTypeDef acSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 8008d6e:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8008d72:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008d7e:	f507 7256 	add.w	r2, r7, #856	@ 0x358
 8008d82:	f5a2 7255 	sub.w	r2, r2, #852	@ 0x354
 8008d86:	6812      	ldr	r2, [r2, #0]
 8008d88:	429a      	cmp	r2, r3
 8008d8a:	d10c      	bne.n	8008da6 <JPEG_Set_HuffAC_Mem+0x5e>
  {
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 8008d8c:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8008d90:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008d9c:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8008da0:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
 8008da4:	e01d      	b.n	8008de2 <JPEG_Set_HuffAC_Mem+0x9a>
  }
  else if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC1))
 8008da6:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8008daa:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
 8008db6:	f507 7256 	add.w	r2, r7, #856	@ 0x358
 8008dba:	f5a2 7255 	sub.w	r2, r2, #852	@ 0x354
 8008dbe:	6812      	ldr	r2, [r2, #0]
 8008dc0:	429a      	cmp	r2, r3
 8008dc2:	d10c      	bne.n	8008dde <JPEG_Set_HuffAC_Mem+0x96>
  {
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 8008dc4:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8008dc8:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
 8008dd4:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8008dd8:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
 8008ddc:	e001      	b.n	8008de2 <JPEG_Set_HuffAC_Mem+0x9a>
  }
  else
  {
    return HAL_ERROR;
 8008dde:	2301      	movs	r3, #1
 8008de0:	e0a8      	b.n	8008f34 <JPEG_Set_HuffAC_Mem+0x1ec>
  }

  if (HuffTableAC != NULL)
 8008de2:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8008de6:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	f000 80a0 	beq.w	8008f32 <JPEG_Set_HuffAC_Mem+0x1ea>
  {
    error = JPEG_ACHuff_BitsVals_To_SizeCodes(HuffTableAC, &acSizeCodesTable);
 8008df2:	f107 0214 	add.w	r2, r7, #20
 8008df6:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8008dfa:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 8008dfe:	4611      	mov	r1, r2
 8008e00:	6818      	ldr	r0, [r3, #0]
 8008e02:	f7ff fe0b 	bl	8008a1c <JPEG_ACHuff_BitsVals_To_SizeCodes>
 8008e06:	4603      	mov	r3, r0
 8008e08:	f887 334b 	strb.w	r3, [r7, #843]	@ 0x34b
    if (error != HAL_OK)
 8008e0c:	f897 334b 	ldrb.w	r3, [r7, #843]	@ 0x34b
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d002      	beq.n	8008e1a <JPEG_Set_HuffAC_Mem+0xd2>
    {
      return  error;
 8008e14:	f897 334b 	ldrb.w	r3, [r7, #843]	@ 0x34b
 8008e18:	e08c      	b.n	8008f34 <JPEG_Set_HuffAC_Mem+0x1ec>
    }
    /* Default values settings: 162:167 FFFh , 168:175 FD0h_FD7h */
    /* Locations 162:175 of each AC table contain information used internally by the core */

    addressDef = address;
 8008e1a:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 8008e1e:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    for (i = 0; i < 3UL; i++)
 8008e22:	2300      	movs	r3, #0
 8008e24:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
 8008e28:	e00e      	b.n	8008e48 <JPEG_Set_HuffAC_Mem+0x100>
    {
      *addressDef = 0x0FFF0FFF;
 8008e2a:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8008e2e:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 8008e32:	601a      	str	r2, [r3, #0]
      addressDef++;
 8008e34:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8008e38:	3304      	adds	r3, #4
 8008e3a:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    for (i = 0; i < 3UL; i++)
 8008e3e:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8008e42:	3301      	adds	r3, #1
 8008e44:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
 8008e48:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8008e4c:	2b02      	cmp	r3, #2
 8008e4e:	d9ec      	bls.n	8008e2a <JPEG_Set_HuffAC_Mem+0xe2>
    }
    *addressDef = 0x0FD10FD0;
 8008e50:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8008e54:	4a3a      	ldr	r2, [pc, #232]	@ (8008f40 <JPEG_Set_HuffAC_Mem+0x1f8>)
 8008e56:	601a      	str	r2, [r3, #0]
    addressDef++;
 8008e58:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8008e5c:	3304      	adds	r3, #4
 8008e5e:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD30FD2;
 8008e62:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8008e66:	4a37      	ldr	r2, [pc, #220]	@ (8008f44 <JPEG_Set_HuffAC_Mem+0x1fc>)
 8008e68:	601a      	str	r2, [r3, #0]
    addressDef++;
 8008e6a:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8008e6e:	3304      	adds	r3, #4
 8008e70:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD50FD4;
 8008e74:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8008e78:	4a33      	ldr	r2, [pc, #204]	@ (8008f48 <JPEG_Set_HuffAC_Mem+0x200>)
 8008e7a:	601a      	str	r2, [r3, #0]
    addressDef++;
 8008e7c:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8008e80:	3304      	adds	r3, #4
 8008e82:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD70FD6;
 8008e86:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8008e8a:	4a30      	ldr	r2, [pc, #192]	@ (8008f4c <JPEG_Set_HuffAC_Mem+0x204>)
 8008e8c:	601a      	str	r2, [r3, #0]
    /* end of Locations 162:175  */


    i = JPEG_AC_HUFF_TABLE_SIZE;
 8008e8e:	23a2      	movs	r3, #162	@ 0xa2
 8008e90:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
    while (i > 1UL)
 8008e94:	e049      	b.n	8008f2a <JPEG_Set_HuffAC_Mem+0x1e2>
    {
      i--;
 8008e96:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8008e9a:	3b01      	subs	r3, #1
 8008e9c:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
      address--;
 8008ea0:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 8008ea4:	3b04      	subs	r3, #4
 8008ea6:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8008eaa:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8008eae:	f5a3 7251 	sub.w	r2, r3, #836	@ 0x344
 8008eb2:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8008eb6:	4413      	add	r3, r2
 8008eb8:	781b      	ldrb	r3, [r3, #0]
 8008eba:	021b      	lsls	r3, r3, #8
 8008ebc:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8008ec0:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8008ec4:	f5a3 7151 	sub.w	r1, r3, #836	@ 0x344
 8008ec8:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8008ecc:	3328      	adds	r3, #40	@ 0x28
 8008ece:	009b      	lsls	r3, r3, #2
 8008ed0:	440b      	add	r3, r1
 8008ed2:	685b      	ldr	r3, [r3, #4]
 8008ed4:	b2db      	uxtb	r3, r3
 8008ed6:	4313      	orrs	r3, r2
 8008ed8:	f8c7 3344 	str.w	r3, [r7, #836]	@ 0x344
                                                                                   0xFFUL);
      i--;
 8008edc:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8008ee0:	3b01      	subs	r3, #1
 8008ee2:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8008ee6:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8008eea:	f5a3 7251 	sub.w	r2, r3, #836	@ 0x344
 8008eee:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8008ef2:	4413      	add	r3, r2
 8008ef4:	781b      	ldrb	r3, [r3, #0]
 8008ef6:	021b      	lsls	r3, r3, #8
 8008ef8:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8008efc:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8008f00:	f5a3 7151 	sub.w	r1, r3, #836	@ 0x344
 8008f04:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8008f08:	3328      	adds	r3, #40	@ 0x28
 8008f0a:	009b      	lsls	r3, r3, #2
 8008f0c:	440b      	add	r3, r1
 8008f0e:	685b      	ldr	r3, [r3, #4]
 8008f10:	b2db      	uxtb	r3, r3
 8008f12:	4313      	orrs	r3, r2
 8008f14:	f8c7 3340 	str.w	r3, [r7, #832]	@ 0x340
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 8008f18:	f8d7 3344 	ldr.w	r3, [r7, #836]	@ 0x344
 8008f1c:	041a      	lsls	r2, r3, #16
 8008f1e:	f8d7 3340 	ldr.w	r3, [r7, #832]	@ 0x340
 8008f22:	431a      	orrs	r2, r3
 8008f24:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 8008f28:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 8008f2a:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8008f2e:	2b01      	cmp	r3, #1
 8008f30:	d8b1      	bhi.n	8008e96 <JPEG_Set_HuffAC_Mem+0x14e>
    }
  }

  /* Return function status */
  return HAL_OK;
 8008f32:	2300      	movs	r3, #0
}
 8008f34:	4618      	mov	r0, r3
 8008f36:	f507 7756 	add.w	r7, r7, #856	@ 0x358
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	bd80      	pop	{r7, pc}
 8008f3e:	bf00      	nop
 8008f40:	0fd10fd0 	.word	0x0fd10fd0
 8008f44:	0fd30fd2 	.word	0x0fd30fd2
 8008f48:	0fd50fd4 	.word	0x0fd50fd4
 8008f4c:	0fd70fd6 	.word	0x0fd70fd6

08008f50 <JPEG_Set_HuffEnc_Mem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static HAL_StatusTypeDef JPEG_Set_HuffEnc_Mem(JPEG_HandleTypeDef *hjpeg)
{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b084      	sub	sp, #16
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef error;

  JPEG_Set_Huff_DHTMem(hjpeg);
 8008f58:	6878      	ldr	r0, [r7, #4]
 8008f5a:	f000 f84d 	bl	8008ff8 <JPEG_Set_Huff_DHTMem>
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC0));
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
 8008f66:	461a      	mov	r2, r3
 8008f68:	491f      	ldr	r1, [pc, #124]	@ (8008fe8 <JPEG_Set_HuffEnc_Mem+0x98>)
 8008f6a:	6878      	ldr	r0, [r7, #4]
 8008f6c:	f7ff feec 	bl	8008d48 <JPEG_Set_HuffAC_Mem>
 8008f70:	4603      	mov	r3, r0
 8008f72:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8008f74:	7bfb      	ldrb	r3, [r7, #15]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d001      	beq.n	8008f7e <JPEG_Set_HuffEnc_Mem+0x2e>
  {
    return  error;
 8008f7a:	7bfb      	ldrb	r3, [r7, #15]
 8008f7c:	e030      	b.n	8008fe0 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC1));
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
 8008f86:	461a      	mov	r2, r3
 8008f88:	4918      	ldr	r1, [pc, #96]	@ (8008fec <JPEG_Set_HuffEnc_Mem+0x9c>)
 8008f8a:	6878      	ldr	r0, [r7, #4]
 8008f8c:	f7ff fedc 	bl	8008d48 <JPEG_Set_HuffAC_Mem>
 8008f90:	4603      	mov	r3, r0
 8008f92:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8008f94:	7bfb      	ldrb	r3, [r7, #15]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d001      	beq.n	8008f9e <JPEG_Set_HuffEnc_Mem+0x4e>
  {
    return  error;
 8008f9a:	7bfb      	ldrb	r3, [r7, #15]
 8008f9c:	e020      	b.n	8008fe0 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC0);
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
 8008fa6:	461a      	mov	r2, r3
 8008fa8:	4911      	ldr	r1, [pc, #68]	@ (8008ff0 <JPEG_Set_HuffEnc_Mem+0xa0>)
 8008faa:	6878      	ldr	r0, [r7, #4]
 8008fac:	f7ff fe49 	bl	8008c42 <JPEG_Set_HuffDC_Mem>
 8008fb0:	4603      	mov	r3, r0
 8008fb2:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8008fb4:	7bfb      	ldrb	r3, [r7, #15]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d001      	beq.n	8008fbe <JPEG_Set_HuffEnc_Mem+0x6e>
  {
    return  error;
 8008fba:	7bfb      	ldrb	r3, [r7, #15]
 8008fbc:	e010      	b.n	8008fe0 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC1);
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
 8008fc6:	461a      	mov	r2, r3
 8008fc8:	490a      	ldr	r1, [pc, #40]	@ (8008ff4 <JPEG_Set_HuffEnc_Mem+0xa4>)
 8008fca:	6878      	ldr	r0, [r7, #4]
 8008fcc:	f7ff fe39 	bl	8008c42 <JPEG_Set_HuffDC_Mem>
 8008fd0:	4603      	mov	r3, r0
 8008fd2:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8008fd4:	7bfb      	ldrb	r3, [r7, #15]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d001      	beq.n	8008fde <JPEG_Set_HuffEnc_Mem+0x8e>
  {
    return  error;
 8008fda:	7bfb      	ldrb	r3, [r7, #15]
 8008fdc:	e000      	b.n	8008fe0 <JPEG_Set_HuffEnc_Mem+0x90>
  }
  /* Return function status */
  return HAL_OK;
 8008fde:	2300      	movs	r3, #0
}
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	3710      	adds	r7, #16
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	bd80      	pop	{r7, pc}
 8008fe8:	080167b4 	.word	0x080167b4
 8008fec:	08016868 	.word	0x08016868
 8008ff0:	0801677c 	.word	0x0801677c
 8008ff4:	08016798 	.word	0x08016798

08008ff8 <JPEG_Set_Huff_DHTMem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_Set_Huff_DHTMem(JPEG_HandleTypeDef *hjpeg)
{
 8008ff8:	b480      	push	{r7}
 8008ffa:	b08b      	sub	sp, #44	@ 0x2c
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
  JPEG_ACHuffTableTypeDef *HuffTableAC0 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable;
 8009000:	4b80      	ldr	r3, [pc, #512]	@ (8009204 <JPEG_Set_Huff_DHTMem+0x20c>)
 8009002:	61fb      	str	r3, [r7, #28]
  JPEG_ACHuffTableTypeDef *HuffTableAC1 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable;
 8009004:	4b80      	ldr	r3, [pc, #512]	@ (8009208 <JPEG_Set_Huff_DHTMem+0x210>)
 8009006:	61bb      	str	r3, [r7, #24]
  JPEG_DCHuffTableTypeDef *HuffTableDC0 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable;
 8009008:	4b80      	ldr	r3, [pc, #512]	@ (800920c <JPEG_Set_Huff_DHTMem+0x214>)
 800900a:	617b      	str	r3, [r7, #20]
  JPEG_DCHuffTableTypeDef *HuffTableDC1 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable;
 800900c:	4b80      	ldr	r3, [pc, #512]	@ (8009210 <JPEG_Set_Huff_DHTMem+0x218>)
 800900e:	613b      	str	r3, [r7, #16]
  uint32_t value, index;
  __IO uint32_t *address;

  /* DC0 Huffman Table : BITS*/
  /* DC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address to DHTMEM + 3*/
  address = (hjpeg->Instance->DHTMEM + 3);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8009018:	330c      	adds	r3, #12
 800901a:	623b      	str	r3, [r7, #32]
  index = 16;
 800901c:	2310      	movs	r3, #16
 800901e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8009020:	e01d      	b.n	800905e <JPEG_Set_Huff_DHTMem+0x66>
  {

    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8009022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009024:	3b01      	subs	r3, #1
 8009026:	697a      	ldr	r2, [r7, #20]
 8009028:	5cd3      	ldrb	r3, [r2, r3]
 800902a:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800902c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800902e:	3b02      	subs	r3, #2
 8009030:	6979      	ldr	r1, [r7, #20]
 8009032:	5ccb      	ldrb	r3, [r1, r3]
 8009034:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8009036:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8009038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800903a:	3b03      	subs	r3, #3
 800903c:	6979      	ldr	r1, [r7, #20]
 800903e:	5ccb      	ldrb	r3, [r1, r3]
 8009040:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8009042:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->Bits[index - 4UL] & 0xFFUL);
 8009044:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009046:	3a04      	subs	r2, #4
 8009048:	6979      	ldr	r1, [r7, #20]
 800904a:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 800904c:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800904e:	6a3b      	ldr	r3, [r7, #32]
 8009050:	601a      	str	r2, [r3, #0]
    address--;
 8009052:	6a3b      	ldr	r3, [r7, #32]
 8009054:	3b04      	subs	r3, #4
 8009056:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8009058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800905a:	3b04      	subs	r3, #4
 800905c:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800905e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009060:	2b03      	cmp	r3, #3
 8009062:	d8de      	bhi.n	8009022 <JPEG_Set_Huff_DHTMem+0x2a>

  }
  /* DC0 Huffman Table : Val*/
  /* DC0 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +4 to DHTMEM + 6 */
  address = (hjpeg->Instance->DHTMEM + 6);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800906c:	3318      	adds	r3, #24
 800906e:	623b      	str	r3, [r7, #32]
  index = 12;
 8009070:	230c      	movs	r3, #12
 8009072:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8009074:	e021      	b.n	80090ba <JPEG_Set_Huff_DHTMem+0xc2>
  {
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8009076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009078:	3b01      	subs	r3, #1
 800907a:	697a      	ldr	r2, [r7, #20]
 800907c:	4413      	add	r3, r2
 800907e:	7c1b      	ldrb	r3, [r3, #16]
 8009080:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8009082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009084:	3b02      	subs	r3, #2
 8009086:	6979      	ldr	r1, [r7, #20]
 8009088:	440b      	add	r3, r1
 800908a:	7c1b      	ldrb	r3, [r3, #16]
 800908c:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800908e:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8009090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009092:	3b03      	subs	r3, #3
 8009094:	6979      	ldr	r1, [r7, #20]
 8009096:	440b      	add	r3, r1
 8009098:	7c1b      	ldrb	r3, [r3, #16]
 800909a:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800909c:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->HuffVal[index - 4UL] & 0xFFUL);
 800909e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80090a0:	3a04      	subs	r2, #4
 80090a2:	6979      	ldr	r1, [r7, #20]
 80090a4:	440a      	add	r2, r1
 80090a6:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 80090a8:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 80090aa:	6a3b      	ldr	r3, [r7, #32]
 80090ac:	601a      	str	r2, [r3, #0]
    address--;
 80090ae:	6a3b      	ldr	r3, [r7, #32]
 80090b0:	3b04      	subs	r3, #4
 80090b2:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 80090b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090b6:	3b04      	subs	r3, #4
 80090b8:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 80090ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090bc:	2b03      	cmp	r3, #3
 80090be:	d8da      	bhi.n	8009076 <JPEG_Set_Huff_DHTMem+0x7e>
  }

  /* AC0 Huffman Table : BITS*/
  /* AC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 7 to DHTMEM + 10*/
  address = (hjpeg->Instance->DHTMEM + 10UL);
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 80090c8:	3328      	adds	r3, #40	@ 0x28
 80090ca:	623b      	str	r3, [r7, #32]
  index = 16;
 80090cc:	2310      	movs	r3, #16
 80090ce:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 80090d0:	e01d      	b.n	800910e <JPEG_Set_Huff_DHTMem+0x116>
  {

    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 80090d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090d4:	3b01      	subs	r3, #1
 80090d6:	69fa      	ldr	r2, [r7, #28]
 80090d8:	5cd3      	ldrb	r3, [r2, r3]
 80090da:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 80090dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090de:	3b02      	subs	r3, #2
 80090e0:	69f9      	ldr	r1, [r7, #28]
 80090e2:	5ccb      	ldrb	r3, [r1, r3]
 80090e4:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 80090e6:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 80090e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090ea:	3b03      	subs	r3, #3
 80090ec:	69f9      	ldr	r1, [r7, #28]
 80090ee:	5ccb      	ldrb	r3, [r1, r3]
 80090f0:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 80090f2:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->Bits[index - 4UL] & 0xFFUL);
 80090f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80090f6:	3a04      	subs	r2, #4
 80090f8:	69f9      	ldr	r1, [r7, #28]
 80090fa:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 80090fc:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 80090fe:	6a3b      	ldr	r3, [r7, #32]
 8009100:	601a      	str	r2, [r3, #0]
    address--;
 8009102:	6a3b      	ldr	r3, [r7, #32]
 8009104:	3b04      	subs	r3, #4
 8009106:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8009108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800910a:	3b04      	subs	r3, #4
 800910c:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800910e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009110:	2b03      	cmp	r3, #3
 8009112:	d8de      	bhi.n	80090d2 <JPEG_Set_Huff_DHTMem+0xda>

  }
  /* AC0 Huffman Table : Val*/
  /* AC0 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 11 to DHTMEM + 51 */
  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 51) belong to AC0 VALS table */
  address = (hjpeg->Instance->DHTMEM + 51);
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800911c:	33cc      	adds	r3, #204	@ 0xcc
 800911e:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 8009120:	6a3b      	ldr	r3, [r7, #32]
 8009122:	681a      	ldr	r2, [r3, #0]
 8009124:	4b3b      	ldr	r3, [pc, #236]	@ (8009214 <JPEG_Set_Huff_DHTMem+0x21c>)
 8009126:	4013      	ands	r3, r2
 8009128:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
 800912a:	69fb      	ldr	r3, [r7, #28]
 800912c:	f893 30b1 	ldrb.w	r3, [r3, #177]	@ 0xb1
 8009130:	021a      	lsls	r2, r3, #8
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	4313      	orrs	r3, r2
 8009136:	69fa      	ldr	r2, [r7, #28]
 8009138:	f892 20b0 	ldrb.w	r2, [r2, #176]	@ 0xb0
 800913c:	4313      	orrs	r3, r2
 800913e:	60fb      	str	r3, [r7, #12]
  *address = value;
 8009140:	6a3b      	ldr	r3, [r7, #32]
 8009142:	68fa      	ldr	r2, [r7, #12]
 8009144:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC0 huffman values */
  address--; /* address = hjpeg->Instance->DHTMEM + 50*/
 8009146:	6a3b      	ldr	r3, [r7, #32]
 8009148:	3b04      	subs	r3, #4
 800914a:	623b      	str	r3, [r7, #32]
  index = 160;
 800914c:	23a0      	movs	r3, #160	@ 0xa0
 800914e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8009150:	e021      	b.n	8009196 <JPEG_Set_Huff_DHTMem+0x19e>
  {
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8009152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009154:	3b01      	subs	r3, #1
 8009156:	69fa      	ldr	r2, [r7, #28]
 8009158:	4413      	add	r3, r2
 800915a:	7c1b      	ldrb	r3, [r3, #16]
 800915c:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800915e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009160:	3b02      	subs	r3, #2
 8009162:	69f9      	ldr	r1, [r7, #28]
 8009164:	440b      	add	r3, r1
 8009166:	7c1b      	ldrb	r3, [r3, #16]
 8009168:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800916a:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 800916c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800916e:	3b03      	subs	r3, #3
 8009170:	69f9      	ldr	r1, [r7, #28]
 8009172:	440b      	add	r3, r1
 8009174:	7c1b      	ldrb	r3, [r3, #16]
 8009176:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8009178:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->HuffVal[index - 4UL] & 0xFFUL);
 800917a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800917c:	3a04      	subs	r2, #4
 800917e:	69f9      	ldr	r1, [r7, #28]
 8009180:	440a      	add	r2, r1
 8009182:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8009184:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8009186:	6a3b      	ldr	r3, [r7, #32]
 8009188:	601a      	str	r2, [r3, #0]
    address--;
 800918a:	6a3b      	ldr	r3, [r7, #32]
 800918c:	3b04      	subs	r3, #4
 800918e:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8009190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009192:	3b04      	subs	r3, #4
 8009194:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8009196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009198:	2b03      	cmp	r3, #3
 800919a:	d8da      	bhi.n	8009152 <JPEG_Set_Huff_DHTMem+0x15a>
  }

  /* DC1 Huffman Table : BITS*/
  /* DC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM + 51 base address to DHTMEM + 55*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 51) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 51);
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 80091a4:	33cc      	adds	r3, #204	@ 0xcc
 80091a6:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 80091a8:	6a3b      	ldr	r3, [r7, #32]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	b29b      	uxth	r3, r3
 80091ae:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->Bits[0] & 0xFFUL) << 16);
 80091b0:	693b      	ldr	r3, [r7, #16]
 80091b2:	785b      	ldrb	r3, [r3, #1]
 80091b4:	061a      	lsls	r2, r3, #24
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	431a      	orrs	r2, r3
 80091ba:	693b      	ldr	r3, [r7, #16]
 80091bc:	781b      	ldrb	r3, [r3, #0]
 80091be:	041b      	lsls	r3, r3, #16
 80091c0:	4313      	orrs	r3, r2
 80091c2:	60fb      	str	r3, [r7, #12]
  *address = value;
 80091c4:	6a3b      	ldr	r3, [r7, #32]
 80091c6:	68fa      	ldr	r2, [r7, #12]
 80091c8:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 55) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 55);
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 80091d2:	33dc      	adds	r3, #220	@ 0xdc
 80091d4:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 80091d6:	6a3b      	ldr	r3, [r7, #32]
 80091d8:	681a      	ldr	r2, [r3, #0]
 80091da:	4b0e      	ldr	r3, [pc, #56]	@ (8009214 <JPEG_Set_Huff_DHTMem+0x21c>)
 80091dc:	4013      	ands	r3, r2
 80091de:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->Bits[14] & 0xFFUL);
 80091e0:	693b      	ldr	r3, [r7, #16]
 80091e2:	7bdb      	ldrb	r3, [r3, #15]
 80091e4:	021a      	lsls	r2, r3, #8
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	4313      	orrs	r3, r2
 80091ea:	693a      	ldr	r2, [r7, #16]
 80091ec:	7b92      	ldrb	r2, [r2, #14]
 80091ee:	4313      	orrs	r3, r2
 80091f0:	60fb      	str	r3, [r7, #12]
  *address = value;
 80091f2:	6a3b      	ldr	r3, [r7, #32]
 80091f4:	68fa      	ldr	r2, [r7, #12]
 80091f6:	601a      	str	r2, [r3, #0]

  /*continue setting 12 DC1 huffman Bits from DHTMEM + 54 down to DHTMEM + 52*/
  address--;
 80091f8:	6a3b      	ldr	r3, [r7, #32]
 80091fa:	3b04      	subs	r3, #4
 80091fc:	623b      	str	r3, [r7, #32]
  index = 12;
 80091fe:	230c      	movs	r3, #12
 8009200:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8009202:	e027      	b.n	8009254 <JPEG_Set_Huff_DHTMem+0x25c>
 8009204:	080167b4 	.word	0x080167b4
 8009208:	08016868 	.word	0x08016868
 800920c:	0801677c 	.word	0x0801677c
 8009210:	08016798 	.word	0x08016798
 8009214:	ffff0000 	.word	0xffff0000
  {

    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8009218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800921a:	3301      	adds	r3, #1
 800921c:	693a      	ldr	r2, [r7, #16]
 800921e:	5cd3      	ldrb	r3, [r2, r3]
 8009220:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 8009222:	6939      	ldr	r1, [r7, #16]
 8009224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009226:	440b      	add	r3, r1
 8009228:	781b      	ldrb	r3, [r3, #0]
 800922a:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800922c:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 800922e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009230:	3b01      	subs	r3, #1
 8009232:	6939      	ldr	r1, [r7, #16]
 8009234:	5ccb      	ldrb	r3, [r1, r3]
 8009236:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 8009238:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->Bits[index - 2UL] & 0xFFUL);
 800923a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800923c:	3a02      	subs	r2, #2
 800923e:	6939      	ldr	r1, [r7, #16]
 8009240:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 8009242:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8009244:	6a3b      	ldr	r3, [r7, #32]
 8009246:	601a      	str	r2, [r3, #0]
    address--;
 8009248:	6a3b      	ldr	r3, [r7, #32]
 800924a:	3b04      	subs	r3, #4
 800924c:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800924e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009250:	3b04      	subs	r3, #4
 8009252:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8009254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009256:	2b03      	cmp	r3, #3
 8009258:	d8de      	bhi.n	8009218 <JPEG_Set_Huff_DHTMem+0x220>

  }
  /* DC1 Huffman Table : Val*/
  /* DC1 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +55 to DHTMEM + 58 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 55) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 55);
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8009262:	33dc      	adds	r3, #220	@ 0xdc
 8009264:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 8009266:	6a3b      	ldr	r3, [r7, #32]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	b29b      	uxth	r3, r3
 800926c:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->HuffVal[0] & 0xFFUL) <<
 800926e:	693b      	ldr	r3, [r7, #16]
 8009270:	7c5b      	ldrb	r3, [r3, #17]
 8009272:	061a      	lsls	r2, r3, #24
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	431a      	orrs	r2, r3
 8009278:	693b      	ldr	r3, [r7, #16]
 800927a:	7c1b      	ldrb	r3, [r3, #16]
 800927c:	041b      	lsls	r3, r3, #16
 800927e:	4313      	orrs	r3, r2
 8009280:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 8009282:	6a3b      	ldr	r3, [r7, #32]
 8009284:	68fa      	ldr	r2, [r7, #12]
 8009286:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 58) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 58);
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8009290:	33e8      	adds	r3, #232	@ 0xe8
 8009292:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000UL;
 8009294:	6a3b      	ldr	r3, [r7, #32]
 8009296:	681a      	ldr	r2, [r3, #0]
 8009298:	4b6d      	ldr	r3, [pc, #436]	@ (8009450 <JPEG_Set_Huff_DHTMem+0x458>)
 800929a:	4013      	ands	r3, r2
 800929c:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
 800929e:	693b      	ldr	r3, [r7, #16]
 80092a0:	7edb      	ldrb	r3, [r3, #27]
 80092a2:	021a      	lsls	r2, r3, #8
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	4313      	orrs	r3, r2
 80092a8:	693a      	ldr	r2, [r7, #16]
 80092aa:	7e92      	ldrb	r2, [r2, #26]
 80092ac:	4313      	orrs	r3, r2
 80092ae:	60fb      	str	r3, [r7, #12]
  *address = value;
 80092b0:	6a3b      	ldr	r3, [r7, #32]
 80092b2:	68fa      	ldr	r2, [r7, #12]
 80092b4:	601a      	str	r2, [r3, #0]

  /*continue setting 8 DC1 huffman val from DHTMEM + 57 down to DHTMEM + 56*/
  address--;
 80092b6:	6a3b      	ldr	r3, [r7, #32]
 80092b8:	3b04      	subs	r3, #4
 80092ba:	623b      	str	r3, [r7, #32]
  index = 8;
 80092bc:	2308      	movs	r3, #8
 80092be:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 80092c0:	e021      	b.n	8009306 <JPEG_Set_Huff_DHTMem+0x30e>
  {
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 80092c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092c4:	3301      	adds	r3, #1
 80092c6:	693a      	ldr	r2, [r7, #16]
 80092c8:	4413      	add	r3, r2
 80092ca:	7c1b      	ldrb	r3, [r3, #16]
 80092cc:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 80092ce:	6939      	ldr	r1, [r7, #16]
 80092d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092d2:	440b      	add	r3, r1
 80092d4:	3310      	adds	r3, #16
 80092d6:	781b      	ldrb	r3, [r3, #0]
 80092d8:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 80092da:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 80092dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092de:	3b01      	subs	r3, #1
 80092e0:	6939      	ldr	r1, [r7, #16]
 80092e2:	440b      	add	r3, r1
 80092e4:	7c1b      	ldrb	r3, [r3, #16]
 80092e6:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 80092e8:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->HuffVal[index - 2UL] & 0xFFUL);
 80092ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80092ec:	3a02      	subs	r2, #2
 80092ee:	6939      	ldr	r1, [r7, #16]
 80092f0:	440a      	add	r2, r1
 80092f2:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 80092f4:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 80092f6:	6a3b      	ldr	r3, [r7, #32]
 80092f8:	601a      	str	r2, [r3, #0]
    address--;
 80092fa:	6a3b      	ldr	r3, [r7, #32]
 80092fc:	3b04      	subs	r3, #4
 80092fe:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8009300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009302:	3b04      	subs	r3, #4
 8009304:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8009306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009308:	2b03      	cmp	r3, #3
 800930a:	d8da      	bhi.n	80092c2 <JPEG_Set_Huff_DHTMem+0x2ca>
  }

  /* AC1 Huffman Table : BITS*/
  /* AC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 58 to DHTMEM + 62*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 58) belong to AC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 58);
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8009314:	33e8      	adds	r3, #232	@ 0xe8
 8009316:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 8009318:	6a3b      	ldr	r3, [r7, #32]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	b29b      	uxth	r3, r3
 800931e:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->Bits[0] & 0xFFUL) << 16);
 8009320:	69bb      	ldr	r3, [r7, #24]
 8009322:	785b      	ldrb	r3, [r3, #1]
 8009324:	061a      	lsls	r2, r3, #24
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	431a      	orrs	r2, r3
 800932a:	69bb      	ldr	r3, [r7, #24]
 800932c:	781b      	ldrb	r3, [r3, #0]
 800932e:	041b      	lsls	r3, r3, #16
 8009330:	4313      	orrs	r3, r2
 8009332:	60fb      	str	r3, [r7, #12]
  *address = value;
 8009334:	6a3b      	ldr	r3, [r7, #32]
 8009336:	68fa      	ldr	r2, [r7, #12]
 8009338:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 62) belong to Bits Val table */
  address = (hjpeg->Instance->DHTMEM + 62);
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8009342:	33f8      	adds	r3, #248	@ 0xf8
 8009344:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 8009346:	6a3b      	ldr	r3, [r7, #32]
 8009348:	681a      	ldr	r2, [r3, #0]
 800934a:	4b41      	ldr	r3, [pc, #260]	@ (8009450 <JPEG_Set_Huff_DHTMem+0x458>)
 800934c:	4013      	ands	r3, r2
 800934e:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
 8009350:	69bb      	ldr	r3, [r7, #24]
 8009352:	7bdb      	ldrb	r3, [r3, #15]
 8009354:	021a      	lsls	r2, r3, #8
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	4313      	orrs	r3, r2
 800935a:	69ba      	ldr	r2, [r7, #24]
 800935c:	7b92      	ldrb	r2, [r2, #14]
 800935e:	4313      	orrs	r3, r2
 8009360:	60fb      	str	r3, [r7, #12]
  *address = value;
 8009362:	6a3b      	ldr	r3, [r7, #32]
 8009364:	68fa      	ldr	r2, [r7, #12]
 8009366:	601a      	str	r2, [r3, #0]

  /*continue setting 12 AC1 huffman Bits from DHTMEM + 61 down to DHTMEM + 59*/
  address--;
 8009368:	6a3b      	ldr	r3, [r7, #32]
 800936a:	3b04      	subs	r3, #4
 800936c:	623b      	str	r3, [r7, #32]
  index = 12;
 800936e:	230c      	movs	r3, #12
 8009370:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8009372:	e01d      	b.n	80093b0 <JPEG_Set_Huff_DHTMem+0x3b8>
  {

    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8009374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009376:	3301      	adds	r3, #1
 8009378:	69ba      	ldr	r2, [r7, #24]
 800937a:	5cd3      	ldrb	r3, [r2, r3]
 800937c:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 800937e:	69b9      	ldr	r1, [r7, #24]
 8009380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009382:	440b      	add	r3, r1
 8009384:	781b      	ldrb	r3, [r3, #0]
 8009386:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8009388:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 800938a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800938c:	3b01      	subs	r3, #1
 800938e:	69b9      	ldr	r1, [r7, #24]
 8009390:	5ccb      	ldrb	r3, [r1, r3]
 8009392:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 8009394:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->Bits[index - 2UL] & 0xFFUL);
 8009396:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009398:	3a02      	subs	r2, #2
 800939a:	69b9      	ldr	r1, [r7, #24]
 800939c:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 800939e:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 80093a0:	6a3b      	ldr	r3, [r7, #32]
 80093a2:	601a      	str	r2, [r3, #0]
    address--;
 80093a4:	6a3b      	ldr	r3, [r7, #32]
 80093a6:	3b04      	subs	r3, #4
 80093a8:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 80093aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093ac:	3b04      	subs	r3, #4
 80093ae:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 80093b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093b2:	2b03      	cmp	r3, #3
 80093b4:	d8de      	bhi.n	8009374 <JPEG_Set_Huff_DHTMem+0x37c>

  }
  /* AC1 Huffman Table : Val*/
  /* AC1 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 62 to DHTMEM + 102 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 62) belong to AC1 VALS table */
  address = (hjpeg->Instance->DHTMEM + 62);
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 80093be:	33f8      	adds	r3, #248	@ 0xf8
 80093c0:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 80093c2:	6a3b      	ldr	r3, [r7, #32]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	b29b      	uxth	r3, r3
 80093c8:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
 80093ca:	69bb      	ldr	r3, [r7, #24]
 80093cc:	7c5b      	ldrb	r3, [r3, #17]
 80093ce:	061a      	lsls	r2, r3, #24
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	431a      	orrs	r2, r3
 80093d4:	69bb      	ldr	r3, [r7, #24]
 80093d6:	7c1b      	ldrb	r3, [r3, #16]
 80093d8:	041b      	lsls	r3, r3, #16
 80093da:	4313      	orrs	r3, r2
 80093dc:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 80093de:	6a3b      	ldr	r3, [r7, #32]
 80093e0:	68fa      	ldr	r2, [r7, #12]
 80093e2:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC1 huffman values from DHTMEM + 63 to DHTMEM+102 */
  address = (hjpeg->Instance->DHTMEM + 102);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 80093ec:	f503 73cc 	add.w	r3, r3, #408	@ 0x198
 80093f0:	623b      	str	r3, [r7, #32]
  index = 160;
 80093f2:	23a0      	movs	r3, #160	@ 0xa0
 80093f4:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 80093f6:	e021      	b.n	800943c <JPEG_Set_Huff_DHTMem+0x444>
  {
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 80093f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093fa:	3301      	adds	r3, #1
 80093fc:	69ba      	ldr	r2, [r7, #24]
 80093fe:	4413      	add	r3, r2
 8009400:	7c1b      	ldrb	r3, [r3, #16]
 8009402:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 8009404:	69b9      	ldr	r1, [r7, #24]
 8009406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009408:	440b      	add	r3, r1
 800940a:	3310      	adds	r3, #16
 800940c:	781b      	ldrb	r3, [r3, #0]
 800940e:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8009410:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8009412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009414:	3b01      	subs	r3, #1
 8009416:	69b9      	ldr	r1, [r7, #24]
 8009418:	440b      	add	r3, r1
 800941a:	7c1b      	ldrb	r3, [r3, #16]
 800941c:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 800941e:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->HuffVal[index - 2UL] & 0xFFUL);
 8009420:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009422:	3a02      	subs	r2, #2
 8009424:	69b9      	ldr	r1, [r7, #24]
 8009426:	440a      	add	r2, r1
 8009428:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800942a:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800942c:	6a3b      	ldr	r3, [r7, #32]
 800942e:	601a      	str	r2, [r3, #0]
    address--;
 8009430:	6a3b      	ldr	r3, [r7, #32]
 8009432:	3b04      	subs	r3, #4
 8009434:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8009436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009438:	3b04      	subs	r3, #4
 800943a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800943c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800943e:	2b03      	cmp	r3, #3
 8009440:	d8da      	bhi.n	80093f8 <JPEG_Set_Huff_DHTMem+0x400>
  }

}
 8009442:	bf00      	nop
 8009444:	bf00      	nop
 8009446:	372c      	adds	r7, #44	@ 0x2c
 8009448:	46bd      	mov	sp, r7
 800944a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944e:	4770      	bx	lr
 8009450:	ffff0000 	.word	0xffff0000

08009454 <JPEG_Set_Quantization_Mem>:
  *         it could be QMEM0, QMEM1, QMEM2 or QMEM3
  * @retval 0 if no error, 1 if error
  */
static uint32_t JPEG_Set_Quantization_Mem(JPEG_HandleTypeDef *hjpeg, uint8_t *QTable,
                                                    __IO uint32_t *QTableAddress)
{
 8009454:	b480      	push	{r7}
 8009456:	b08b      	sub	sp, #44	@ 0x2c
 8009458:	af00      	add	r7, sp, #0
 800945a:	60f8      	str	r0, [r7, #12]
 800945c:	60b9      	str	r1, [r7, #8]
 800945e:	607a      	str	r2, [r7, #4]
  uint32_t quantRow;
  uint32_t quantVal;
  uint32_t ScaleFactor;
  __IO uint32_t *tableAddress;

  tableAddress = QTableAddress;
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	613b      	str	r3, [r7, #16]

  if ((hjpeg->Conf.ImageQuality >= 50UL) && (hjpeg->Conf.ImageQuality <= 100UL))
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	695b      	ldr	r3, [r3, #20]
 8009468:	2b31      	cmp	r3, #49	@ 0x31
 800946a:	d90a      	bls.n	8009482 <JPEG_Set_Quantization_Mem+0x2e>
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	695b      	ldr	r3, [r3, #20]
 8009470:	2b64      	cmp	r3, #100	@ 0x64
 8009472:	d806      	bhi.n	8009482 <JPEG_Set_Quantization_Mem+0x2e>
  {
    ScaleFactor = 200UL - (hjpeg->Conf.ImageQuality * 2UL);
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	695b      	ldr	r3, [r3, #20]
 8009478:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 800947c:	005b      	lsls	r3, r3, #1
 800947e:	617b      	str	r3, [r7, #20]
 8009480:	e00d      	b.n	800949e <JPEG_Set_Quantization_Mem+0x4a>
  }
  else if (hjpeg->Conf.ImageQuality > 0UL)
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	695b      	ldr	r3, [r3, #20]
 8009486:	2b00      	cmp	r3, #0
 8009488:	d007      	beq.n	800949a <JPEG_Set_Quantization_Mem+0x46>
  {
    ScaleFactor = ((uint32_t) 5000) / ((uint32_t) hjpeg->Conf.ImageQuality);
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	695b      	ldr	r3, [r3, #20]
 800948e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009492:	fbb2 f3f3 	udiv	r3, r2, r3
 8009496:	617b      	str	r3, [r7, #20]
 8009498:	e001      	b.n	800949e <JPEG_Set_Quantization_Mem+0x4a>
  }
  else
  {
    return 1UL;
 800949a:	2301      	movs	r3, #1
 800949c:	e041      	b.n	8009522 <JPEG_Set_Quantization_Mem+0xce>
  }

  /*Quantization_table = (Standard_quanization_table * ScaleFactor + 50) / 100*/
  i = 0;
 800949e:	2300      	movs	r3, #0
 80094a0:	627b      	str	r3, [r7, #36]	@ 0x24
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 80094a2:	e03a      	b.n	800951a <JPEG_Set_Quantization_Mem+0xc6>
  {
    quantRow = 0;
 80094a4:	2300      	movs	r3, #0
 80094a6:	61fb      	str	r3, [r7, #28]
    for (j = 0; j < 4UL; j++)
 80094a8:	2300      	movs	r3, #0
 80094aa:	623b      	str	r3, [r7, #32]
 80094ac:	e029      	b.n	8009502 <JPEG_Set_Quantization_Mem+0xae>
    {
      /* Note that the quantization coefficients must be specified in the table in zigzag order */
      quantVal = ((((uint32_t) QTable[JPEG_ZIGZAG_ORDER[i + j]]) * ScaleFactor) + 50UL) / 100UL;
 80094ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80094b0:	6a3b      	ldr	r3, [r7, #32]
 80094b2:	4413      	add	r3, r2
 80094b4:	4a1e      	ldr	r2, [pc, #120]	@ (8009530 <JPEG_Set_Quantization_Mem+0xdc>)
 80094b6:	5cd3      	ldrb	r3, [r2, r3]
 80094b8:	461a      	mov	r2, r3
 80094ba:	68bb      	ldr	r3, [r7, #8]
 80094bc:	4413      	add	r3, r2
 80094be:	781b      	ldrb	r3, [r3, #0]
 80094c0:	461a      	mov	r2, r3
 80094c2:	697b      	ldr	r3, [r7, #20]
 80094c4:	fb02 f303 	mul.w	r3, r2, r3
 80094c8:	3332      	adds	r3, #50	@ 0x32
 80094ca:	4a1a      	ldr	r2, [pc, #104]	@ (8009534 <JPEG_Set_Quantization_Mem+0xe0>)
 80094cc:	fba2 2303 	umull	r2, r3, r2, r3
 80094d0:	095b      	lsrs	r3, r3, #5
 80094d2:	61bb      	str	r3, [r7, #24]

      if (quantVal == 0UL)
 80094d4:	69bb      	ldr	r3, [r7, #24]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d102      	bne.n	80094e0 <JPEG_Set_Quantization_Mem+0x8c>
      {
        quantVal = 1UL;
 80094da:	2301      	movs	r3, #1
 80094dc:	61bb      	str	r3, [r7, #24]
 80094de:	e004      	b.n	80094ea <JPEG_Set_Quantization_Mem+0x96>
      }
      else if (quantVal > 255UL)
 80094e0:	69bb      	ldr	r3, [r7, #24]
 80094e2:	2bff      	cmp	r3, #255	@ 0xff
 80094e4:	d901      	bls.n	80094ea <JPEG_Set_Quantization_Mem+0x96>
      {
        quantVal = 255UL;
 80094e6:	23ff      	movs	r3, #255	@ 0xff
 80094e8:	61bb      	str	r3, [r7, #24]
      else
      {
        /* Nothing to do, keep same value of quantVal */
      }

      quantRow |= ((quantVal & 0xFFUL) << (8UL * j));
 80094ea:	69bb      	ldr	r3, [r7, #24]
 80094ec:	b2da      	uxtb	r2, r3
 80094ee:	6a3b      	ldr	r3, [r7, #32]
 80094f0:	00db      	lsls	r3, r3, #3
 80094f2:	fa02 f303 	lsl.w	r3, r2, r3
 80094f6:	69fa      	ldr	r2, [r7, #28]
 80094f8:	4313      	orrs	r3, r2
 80094fa:	61fb      	str	r3, [r7, #28]
    for (j = 0; j < 4UL; j++)
 80094fc:	6a3b      	ldr	r3, [r7, #32]
 80094fe:	3301      	adds	r3, #1
 8009500:	623b      	str	r3, [r7, #32]
 8009502:	6a3b      	ldr	r3, [r7, #32]
 8009504:	2b03      	cmp	r3, #3
 8009506:	d9d2      	bls.n	80094ae <JPEG_Set_Quantization_Mem+0x5a>
    }

    i += 4UL;
 8009508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800950a:	3304      	adds	r3, #4
 800950c:	627b      	str	r3, [r7, #36]	@ 0x24
    *tableAddress = quantRow;
 800950e:	693b      	ldr	r3, [r7, #16]
 8009510:	69fa      	ldr	r2, [r7, #28]
 8009512:	601a      	str	r2, [r3, #0]
    tableAddress ++;
 8009514:	693b      	ldr	r3, [r7, #16]
 8009516:	3304      	adds	r3, #4
 8009518:	613b      	str	r3, [r7, #16]
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 800951a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800951c:	2b3c      	cmp	r3, #60	@ 0x3c
 800951e:	d9c1      	bls.n	80094a4 <JPEG_Set_Quantization_Mem+0x50>
  }

  /* Return function status */
  return 0UL;
 8009520:	2300      	movs	r3, #0
}
 8009522:	4618      	mov	r0, r3
 8009524:	372c      	adds	r7, #44	@ 0x2c
 8009526:	46bd      	mov	sp, r7
 8009528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952c:	4770      	bx	lr
 800952e:	bf00      	nop
 8009530:	0801691c 	.word	0x0801691c
 8009534:	51eb851f 	.word	0x51eb851f

08009538 <JPEG_SetColorYCBCR>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_SetColorYCBCR(JPEG_HandleTypeDef *hjpeg)
{
 8009538:	b480      	push	{r7}
 800953a:	b087      	sub	sp, #28
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
  uint32_t ySamplingH;
  uint32_t ySamplingV;
  uint32_t yblockNb;

  /*Set Number of color components to 3*/
  hjpeg->Instance->CONFR1 &=  ~JPEG_CONFR1_NF;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	685a      	ldr	r2, [r3, #4]
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	f022 0203 	bic.w	r2, r2, #3
 800954e:	605a      	str	r2, [r3, #4]
  hjpeg->Instance->CONFR1 |=  JPEG_CONFR1_NF_1;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	685a      	ldr	r2, [r3, #4]
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	f042 0202 	orr.w	r2, r2, #2
 800955e:	605a      	str	r2, [r3, #4]

  /* compute MCU block size and Y, Cb ,Cr sampling factors*/
  if (hjpeg->Conf.ChromaSubsampling == JPEG_420_SUBSAMPLING)
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	689b      	ldr	r3, [r3, #8]
 8009564:	2b01      	cmp	r3, #1
 8009566:	d108      	bne.n	800957a <JPEG_SetColorYCBCR+0x42>
  {
    ySamplingH  = JPEG_CONFR4_HSF_1;   /* Hs = 2*/
 8009568:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800956c:	617b      	str	r3, [r7, #20]
    ySamplingV  = JPEG_CONFR4_VSF_1;   /* Vs = 2*/
 800956e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009572:	613b      	str	r3, [r7, #16]

    yblockNb  = 0x30; /* 4 blocks of 8x8*/
 8009574:	2330      	movs	r3, #48	@ 0x30
 8009576:	60fb      	str	r3, [r7, #12]
 8009578:	e014      	b.n	80095a4 <JPEG_SetColorYCBCR+0x6c>
  }
  else if (hjpeg->Conf.ChromaSubsampling == JPEG_422_SUBSAMPLING)
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	689b      	ldr	r3, [r3, #8]
 800957e:	2b02      	cmp	r3, #2
 8009580:	d108      	bne.n	8009594 <JPEG_SetColorYCBCR+0x5c>
  {
    ySamplingH  = JPEG_CONFR4_HSF_1;   /* Hs = 2*/
 8009582:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8009586:	617b      	str	r3, [r7, #20]
    ySamplingV  = JPEG_CONFR4_VSF_0;   /* Vs = 1*/
 8009588:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800958c:	613b      	str	r3, [r7, #16]

    yblockNb  = 0x10; /* 2 blocks of 8x8*/
 800958e:	2310      	movs	r3, #16
 8009590:	60fb      	str	r3, [r7, #12]
 8009592:	e007      	b.n	80095a4 <JPEG_SetColorYCBCR+0x6c>
  }
  else /*JPEG_444_SUBSAMPLING and default*/
  {
    ySamplingH  = JPEG_CONFR4_HSF_0;   /* Hs = 1*/
 8009594:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009598:	617b      	str	r3, [r7, #20]
    ySamplingV  = JPEG_CONFR4_VSF_0;   /* Vs = 1*/
 800959a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800959e:	613b      	str	r3, [r7, #16]

    yblockNb  = 0; /* 1 block of 8x8*/
 80095a0:	2300      	movs	r3, #0
 80095a2:	60fb      	str	r3, [r7, #12]
  }

  hjpeg->Instance->CONFR1 &= ~(JPEG_CONFR1_NF | JPEG_CONFR1_NS);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	685a      	ldr	r2, [r3, #4]
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	f022 02c3 	bic.w	r2, r2, #195	@ 0xc3
 80095b2:	605a      	str	r2, [r3, #4]
  hjpeg->Instance->CONFR1 |= (JPEG_CONFR1_NF_1 | JPEG_CONFR1_NS_1);
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	685a      	ldr	r2, [r3, #4]
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	f042 0282 	orr.w	r2, r2, #130	@ 0x82
 80095c2:	605a      	str	r2, [r3, #4]

  /*Reset CONFR4 register*/
  hjpeg->Instance->CONFR4 =  0;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	2200      	movs	r2, #0
 80095ca:	611a      	str	r2, [r3, #16]
  /*Set Horizental and Vertical  sampling factor , number of blocks , Quantization table and Huffman AC/DC tables for component 0*/
  hjpeg->Instance->CONFR4 |= (ySamplingH | ySamplingV | (yblockNb & JPEG_CONFR4_NB));
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	6919      	ldr	r1, [r3, #16]
 80095d2:	697a      	ldr	r2, [r7, #20]
 80095d4:	693b      	ldr	r3, [r7, #16]
 80095d6:	431a      	orrs	r2, r3
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80095de:	431a      	orrs	r2, r3
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	430a      	orrs	r2, r1
 80095e6:	611a      	str	r2, [r3, #16]

  /*Reset CONFR5 register*/
  hjpeg->Instance->CONFR5 =  0;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	2200      	movs	r2, #0
 80095ee:	615a      	str	r2, [r3, #20]
  /*Set Horizental and Vertical  sampling factor , number of blocks , Quantization table and Huffman AC/DC tables for component 1*/
  hjpeg->Instance->CONFR5 |= (JPEG_CONFR5_HSF_0 | JPEG_CONFR5_VSF_0 | JPEG_CONFR5_QT_0 | JPEG_CONFR5_HA | JPEG_CONFR5_HD);
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	6959      	ldr	r1, [r3, #20]
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681a      	ldr	r2, [r3, #0]
 80095fa:	f241 1307 	movw	r3, #4359	@ 0x1107
 80095fe:	430b      	orrs	r3, r1
 8009600:	6153      	str	r3, [r2, #20]

  /*Reset CONFR6 register*/
  hjpeg->Instance->CONFR6 =  0;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	2200      	movs	r2, #0
 8009608:	619a      	str	r2, [r3, #24]
  /*Set Horizental and Vertical  sampling factor and number of blocks for component 2*/
  /* In YCBCR , by default, both chrominance components (component 1 and component 2) use the same Quantization table (table 1) */
  /* In YCBCR , both chrominance components (component 1 and component 2) use the same Huffman tables (table 1) */
  hjpeg->Instance->CONFR6 |= (JPEG_CONFR6_HSF_0 | JPEG_CONFR6_VSF_0 | JPEG_CONFR6_QT_0 | JPEG_CONFR6_HA | JPEG_CONFR6_HD);
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	6999      	ldr	r1, [r3, #24]
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681a      	ldr	r2, [r3, #0]
 8009614:	f241 1307 	movw	r3, #4359	@ 0x1107
 8009618:	430b      	orrs	r3, r1
 800961a:	6193      	str	r3, [r2, #24]

}
 800961c:	bf00      	nop
 800961e:	371c      	adds	r7, #28
 8009620:	46bd      	mov	sp, r7
 8009622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009626:	4770      	bx	lr

08009628 <JPEG_SetColorGrayScale>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_SetColorGrayScale(JPEG_HandleTypeDef *hjpeg)
{
 8009628:	b480      	push	{r7}
 800962a:	b083      	sub	sp, #12
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
  /*Set Number of color components to 1*/
  hjpeg->Instance->CONFR1 &= ~(JPEG_CONFR1_NF | JPEG_CONFR1_NS);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	685a      	ldr	r2, [r3, #4]
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	f022 02c3 	bic.w	r2, r2, #195	@ 0xc3
 800963e:	605a      	str	r2, [r3, #4]

  /*in GrayScale use 1 single Quantization table (Table 0)*/
  /*in GrayScale use only one couple of AC/DC huffman table (table 0)*/

  /*Reset CONFR4 register*/
  hjpeg->Instance->CONFR4 =  0;
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	2200      	movs	r2, #0
 8009646:	611a      	str	r2, [r3, #16]
  /*Set Horizental and Vertical  sampling factor , number of blocks , Quantization table and Huffman AC/DC tables for component 0*/
  hjpeg->Instance->CONFR4 |=  JPEG_CONFR4_HSF_0 | JPEG_CONFR4_VSF_0 ;
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	691a      	ldr	r2, [r3, #16]
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	f442 5288 	orr.w	r2, r2, #4352	@ 0x1100
 8009656:	611a      	str	r2, [r3, #16]
}
 8009658:	bf00      	nop
 800965a:	370c      	adds	r7, #12
 800965c:	46bd      	mov	sp, r7
 800965e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009662:	4770      	bx	lr

08009664 <JPEG_SetColorCMYK>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_SetColorCMYK(JPEG_HandleTypeDef *hjpeg)
{
 8009664:	b480      	push	{r7}
 8009666:	b087      	sub	sp, #28
 8009668:	af00      	add	r7, sp, #0
 800966a:	6078      	str	r0, [r7, #4]
  uint32_t ySamplingH;
  uint32_t ySamplingV;
  uint32_t yblockNb;

  /*Set Number of color components to 4*/
  hjpeg->Instance->CONFR1 |= (JPEG_CONFR1_NF | JPEG_CONFR1_NS);
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	685a      	ldr	r2, [r3, #4]
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	f042 02c3 	orr.w	r2, r2, #195	@ 0xc3
 800967a:	605a      	str	r2, [r3, #4]

  /* compute MCU block size and Y, Cb ,Cr sampling factors*/
  if (hjpeg->Conf.ChromaSubsampling == JPEG_420_SUBSAMPLING)
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	689b      	ldr	r3, [r3, #8]
 8009680:	2b01      	cmp	r3, #1
 8009682:	d108      	bne.n	8009696 <JPEG_SetColorCMYK+0x32>
  {
    ySamplingH  = JPEG_CONFR4_HSF_1;   /* Hs = 2*/
 8009684:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8009688:	617b      	str	r3, [r7, #20]
    ySamplingV  = JPEG_CONFR4_VSF_1;   /* Vs = 2*/
 800968a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800968e:	613b      	str	r3, [r7, #16]

    yblockNb  = 0x30; /* 4 blocks of 8x8*/
 8009690:	2330      	movs	r3, #48	@ 0x30
 8009692:	60fb      	str	r3, [r7, #12]
 8009694:	e014      	b.n	80096c0 <JPEG_SetColorCMYK+0x5c>
  }
  else if (hjpeg->Conf.ChromaSubsampling == JPEG_422_SUBSAMPLING)
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	689b      	ldr	r3, [r3, #8]
 800969a:	2b02      	cmp	r3, #2
 800969c:	d108      	bne.n	80096b0 <JPEG_SetColorCMYK+0x4c>
  {
    ySamplingH  = JPEG_CONFR4_HSF_1;   /* Hs = 2*/
 800969e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80096a2:	617b      	str	r3, [r7, #20]
    ySamplingV  = JPEG_CONFR4_VSF_0;   /* Vs = 1*/
 80096a4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80096a8:	613b      	str	r3, [r7, #16]

    yblockNb  = 0x10; /* 2 blocks of 8x8*/
 80096aa:	2310      	movs	r3, #16
 80096ac:	60fb      	str	r3, [r7, #12]
 80096ae:	e007      	b.n	80096c0 <JPEG_SetColorCMYK+0x5c>
  }
  else /*JPEG_444_SUBSAMPLING and default*/
  {
    ySamplingH  = JPEG_CONFR4_HSF_0;   /* Hs = 1*/
 80096b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80096b4:	617b      	str	r3, [r7, #20]
    ySamplingV  = JPEG_CONFR4_VSF_0;   /* Vs = 1*/
 80096b6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80096ba:	613b      	str	r3, [r7, #16]

    yblockNb  = 0; /* 1 block of 8x8*/
 80096bc:	2300      	movs	r3, #0
 80096be:	60fb      	str	r3, [r7, #12]
  }

  /*Reset CONFR4 register*/
  hjpeg->Instance->CONFR4 =  0;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	2200      	movs	r2, #0
 80096c6:	611a      	str	r2, [r3, #16]
  /*Set Horizental and Vertical  sampling factor , number of blocks , Quantization table and Huffman AC/DC tables for component 0*/
  hjpeg->Instance->CONFR4 |= (ySamplingH | ySamplingV | (yblockNb & JPEG_CONFR4_NB));
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	6919      	ldr	r1, [r3, #16]
 80096ce:	697a      	ldr	r2, [r7, #20]
 80096d0:	693b      	ldr	r3, [r7, #16]
 80096d2:	431a      	orrs	r2, r3
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80096da:	431a      	orrs	r2, r3
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	430a      	orrs	r2, r1
 80096e2:	611a      	str	r2, [r3, #16]

  /*Reset CONFR5 register*/
  hjpeg->Instance->CONFR5 =  0;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	2200      	movs	r2, #0
 80096ea:	615a      	str	r2, [r3, #20]
  /*Set Horizental and Vertical  sampling factor , number of blocks , Quantization table and Huffman AC/DC tables for component 1*/
  hjpeg->Instance->CONFR5 |= (JPEG_CONFR5_HSF_0 | JPEG_CONFR5_VSF_0);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	695a      	ldr	r2, [r3, #20]
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	f442 5288 	orr.w	r2, r2, #4352	@ 0x1100
 80096fa:	615a      	str	r2, [r3, #20]

  /*Reset CONFR6 register*/
  hjpeg->Instance->CONFR6 =  0;
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	2200      	movs	r2, #0
 8009702:	619a      	str	r2, [r3, #24]
  /*Set Horizental and Vertical  sampling factor , number of blocks , Quantization table and Huffman AC/DC tables for component 2*/
  hjpeg->Instance->CONFR6 |= (JPEG_CONFR6_HSF_0 | JPEG_CONFR6_VSF_0);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	699a      	ldr	r2, [r3, #24]
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	f442 5288 	orr.w	r2, r2, #4352	@ 0x1100
 8009712:	619a      	str	r2, [r3, #24]

  /*Reset CONFR7 register*/
  hjpeg->Instance->CONFR7 =  0;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	2200      	movs	r2, #0
 800971a:	61da      	str	r2, [r3, #28]
  /*Set Horizental and Vertical  sampling factor , number of blocks , Quantization table and Huffman AC/DC tables for component 3*/
  hjpeg->Instance->CONFR7 |= (JPEG_CONFR7_HSF_0 | JPEG_CONFR7_VSF_0);
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	69da      	ldr	r2, [r3, #28]
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	f442 5288 	orr.w	r2, r2, #4352	@ 0x1100
 800972a:	61da      	str	r2, [r3, #28]
}
 800972c:	bf00      	nop
 800972e:	371c      	adds	r7, #28
 8009730:	46bd      	mov	sp, r7
 8009732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009736:	4770      	bx	lr

08009738 <JPEG_Init_Process>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_Init_Process(JPEG_HandleTypeDef *hjpeg)
{
 8009738:	b480      	push	{r7}
 800973a:	b083      	sub	sp, #12
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
  /*Reset pause*/
  hjpeg->Context &= (~(JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT));
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009744:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	655a      	str	r2, [r3, #84]	@ 0x54

  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009750:	f003 0303 	and.w	r3, r3, #3
 8009754:	2b02      	cmp	r3, #2
 8009756:	d108      	bne.n	800976a <JPEG_Init_Process+0x32>
  {
    /*Set JPEG Codec to Decoding mode */
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	685a      	ldr	r2, [r3, #4]
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	f042 0208 	orr.w	r2, r2, #8
 8009766:	605a      	str	r2, [r3, #4]
 8009768:	e007      	b.n	800977a <JPEG_Init_Process+0x42>
  }
  else /* JPEG_CONTEXT_ENCODE */
  {
    /*Set JPEG Codec to Encoding mode */
    hjpeg->Instance->CONFR1 &= ~JPEG_CONFR1_DE;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	685a      	ldr	r2, [r3, #4]
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	f022 0208 	bic.w	r2, r2, #8
 8009778:	605a      	str	r2, [r3, #4]
  }

  /*Stop JPEG processing */
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	681a      	ldr	r2, [r3, #0]
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	f022 0201 	bic.w	r2, r2, #1
 8009788:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8009798:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80097a8:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80097b8:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 80097c8:	639a      	str	r2, [r3, #56]	@ 0x38

  /*Start Encoding/Decoding*/
  hjpeg->Instance->CONFR0 |=  JPEG_CONFR0_START;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	681a      	ldr	r2, [r3, #0]
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	f042 0201 	orr.w	r2, r2, #1
 80097d8:	601a      	str	r2, [r3, #0]

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80097de:	f003 030c 	and.w	r3, r3, #12
 80097e2:	2b08      	cmp	r3, #8
 80097e4:	d108      	bne.n	80097f8 <JPEG_Init_Process+0xc0>
  {
    /*Enable IN/OUT, end of Conversation, and end of header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_IFT | JPEG_IT_IFNF | JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC | JPEG_IT_HPD);
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	f042 026e 	orr.w	r2, r2, #110	@ 0x6e
 80097f4:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  else
  {
    /* Nothing to do */
  }
}
 80097f6:	e00d      	b.n	8009814 <JPEG_Init_Process+0xdc>
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80097fc:	f003 030c 	and.w	r3, r3, #12
 8009800:	2b0c      	cmp	r3, #12
 8009802:	d107      	bne.n	8009814 <JPEG_Init_Process+0xdc>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8009812:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8009814:	bf00      	nop
 8009816:	370c      	adds	r7, #12
 8009818:	46bd      	mov	sp, r7
 800981a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981e:	4770      	bx	lr

08009820 <JPEG_Process>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if the process has ends else JPEG_PROCESS_ONGOING
  */
static uint32_t JPEG_Process(JPEG_HandleTypeDef *hjpeg)
{
 8009820:	b580      	push	{r7, lr}
 8009822:	b084      	sub	sp, #16
 8009824:	af00      	add	r7, sp, #0
 8009826:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;

  /*End of header processing flag */
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800982c:	f003 0303 	and.w	r3, r3, #3
 8009830:	2b02      	cmp	r3, #2
 8009832:	d125      	bne.n	8009880 <JPEG_Process+0x60>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800983a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800983e:	2b00      	cmp	r3, #0
 8009840:	d01e      	beq.n	8009880 <JPEG_Process+0x60>
    {
      /*Call Header parsing complete callback */
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	3304      	adds	r3, #4
 8009846:	4619      	mov	r1, r3
 8009848:	6878      	ldr	r0, [r7, #4]
 800984a:	f7fe feac 	bl	80085a6 <HAL_JPEG_GetInfo>
      /* Reset the ImageQuality */
      hjpeg->Conf.ImageQuality = 0;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	2200      	movs	r2, #0
 8009852:	615a      	str	r2, [r3, #20]

      /*Call Info Ready callback */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->InfoReadyCallback(hjpeg, &hjpeg->Conf);
#else
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	3304      	adds	r3, #4
 8009858:	4619      	mov	r1, r3
 800985a:	6878      	ldr	r0, [r7, #4]
 800985c:	f7ff f824 	bl	80088a8 <HAL_JPEG_InfoReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800986e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Clear header processing done flag */
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800987e:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  /*Input FIFO status handling*/
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL)
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009884:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009888:	2b00      	cmp	r3, #0
 800988a:	d116      	bne.n	80098ba <JPEG_Process+0x9a>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFTF) != 0UL)
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009892:	f003 0302 	and.w	r3, r3, #2
 8009896:	2b00      	cmp	r3, #0
 8009898:	d004      	beq.n	80098a4 <JPEG_Process+0x84>
    {
      /*Input FIFO threshold flag */
      /*JPEG_FIFO_TH_SIZE words can be written in */
      JPEG_ReadInputData(hjpeg, JPEG_FIFO_TH_SIZE);
 800989a:	2108      	movs	r1, #8
 800989c:	6878      	ldr	r0, [r7, #4]
 800989e:	f000 f988 	bl	8009bb2 <JPEG_ReadInputData>
 80098a2:	e00a      	b.n	80098ba <JPEG_Process+0x9a>
    }
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFNFF) != 0UL)
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80098aa:	f003 0304 	and.w	r3, r3, #4
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d003      	beq.n	80098ba <JPEG_Process+0x9a>
    {
      /*Input FIFO Not Full flag */
      /*32-bit value can be written in */
      JPEG_ReadInputData(hjpeg, 1);
 80098b2:	2101      	movs	r1, #1
 80098b4:	6878      	ldr	r0, [r7, #4]
 80098b6:	f000 f97c 	bl	8009bb2 <JPEG_ReadInputData>
    }
  }


  /*Output FIFO flag handling*/
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80098be:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d116      	bne.n	80098f4 <JPEG_Process+0xd4>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFTF) != 0UL)
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80098cc:	f003 0308 	and.w	r3, r3, #8
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d004      	beq.n	80098de <JPEG_Process+0xbe>
    {
      /*Output FIFO threshold flag */
      /*JPEG_FIFO_TH_SIZE words can be read out */
      JPEG_StoreOutputData(hjpeg, JPEG_FIFO_TH_SIZE);
 80098d4:	2108      	movs	r1, #8
 80098d6:	6878      	ldr	r0, [r7, #4]
 80098d8:	f000 f864 	bl	80099a4 <JPEG_StoreOutputData>
 80098dc:	e00a      	b.n	80098f4 <JPEG_Process+0xd4>
    }
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80098e4:	f003 0310 	and.w	r3, r3, #16
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d003      	beq.n	80098f4 <JPEG_Process+0xd4>
    {
      /*Output FIFO Not Empty flag */
      /*32-bit value can be read out */
      JPEG_StoreOutputData(hjpeg, 1);
 80098ec:	2101      	movs	r1, #1
 80098ee:	6878      	ldr	r0, [r7, #4]
 80098f0:	f000 f858 	bl	80099a4 <JPEG_StoreOutputData>
      /* Nothing to do */
    }
  }

  /*End of Conversion handling :i.e EOC flag is high and OFTF low and OFNEF low*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80098fa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80098fe:	2b20      	cmp	r3, #32
 8009900:	d14b      	bne.n	800999a <JPEG_Process+0x17a>
  {
    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	681a      	ldr	r2, [r3, #0]
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	f022 0201 	bic.w	r2, r2, #1
 8009910:	601a      	str	r2, [r3, #0]

    if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009916:	f003 030c 	and.w	r3, r3, #12
 800991a:	2b08      	cmp	r3, #8
 800991c:	d107      	bne.n	800992e <JPEG_Process+0x10e>
    {
      /* Disable All Interrupts */
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800992c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Clear all flags */
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800993c:	639a      	str	r2, [r3, #56]	@ 0x38

    /*Call End of conversion callback */
    if (hjpeg->JpegOutCount > 0UL)
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009942:	2b00      	cmp	r3, #0
 8009944:	d00a      	beq.n	800995c <JPEG_Process+0x13c>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	69d9      	ldr	r1, [r3, #28]
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800994e:	461a      	mov	r2, r3
 8009950:	6878      	ldr	r0, [r7, #4]
 8009952:	f7f7 fca7 	bl	80012a4 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	2200      	movs	r2, #0
 800995a:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /*Reset Context Operation*/
    tmpContext = hjpeg->Context;
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009960:	60fb      	str	r3, [r7, #12]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009966:	f403 4282 	and.w	r2, r3, #16640	@ 0x4100
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	2200      	movs	r2, #0
 8009972:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	2201      	movs	r2, #1
 800997a:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	f003 0303 	and.w	r3, r3, #3
 8009984:	2b02      	cmp	r3, #2
 8009986:	d103      	bne.n	8009990 <JPEG_Process+0x170>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8009988:	6878      	ldr	r0, [r7, #4]
 800998a:	f7fe ff98 	bl	80088be <HAL_JPEG_DecodeCpltCallback>
 800998e:	e002      	b.n	8009996 <JPEG_Process+0x176>
    else /* JPEG_CONTEXT_ENCODE */
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->EncodeCpltCallback(hjpeg);
#else
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 8009990:	6878      	ldr	r0, [r7, #4]
 8009992:	f7f7 fca3 	bl	80012dc <HAL_JPEG_EncodeCpltCallback>
#endif
    }

    return JPEG_PROCESS_DONE;
 8009996:	2301      	movs	r3, #1
 8009998:	e000      	b.n	800999c <JPEG_Process+0x17c>
  }


  return JPEG_PROCESS_ONGOING;
 800999a:	2300      	movs	r3, #0
}
 800999c:	4618      	mov	r0, r3
 800999e:	3710      	adds	r7, #16
 80099a0:	46bd      	mov	sp, r7
 80099a2:	bd80      	pop	{r7, pc}

080099a4 <JPEG_StoreOutputData>:
  *         the configuration information for JPEG module
  * @param  nbOutputWords Number of output words (of 32 bits) ready from the JPEG peripheral
  * @retval None
  */
static void JPEG_StoreOutputData(JPEG_HandleTypeDef *hjpeg, uint32_t nbOutputWords)
{
 80099a4:	b580      	push	{r7, lr}
 80099a6:	b086      	sub	sp, #24
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	6078      	str	r0, [r7, #4]
 80099ac:	6039      	str	r1, [r7, #0]
  uint32_t index;
  uint32_t nb_words;
  uint32_t nb_bytes;
  uint32_t dataword;

  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80099b6:	683b      	ldr	r3, [r7, #0]
 80099b8:	009b      	lsls	r3, r3, #2
 80099ba:	440b      	add	r3, r1
 80099bc:	429a      	cmp	r2, r3
 80099be:	d34b      	bcc.n	8009a58 <JPEG_StoreOutputData+0xb4>
  {
    for (index = 0; index < nbOutputWords; index++)
 80099c0:	2300      	movs	r3, #0
 80099c2:	617b      	str	r3, [r7, #20]
 80099c4:	e031      	b.n	8009a2a <JPEG_StoreOutputData+0x86>
    {
      /*Transfer 32 bits from the JPEG output FIFO*/
      dataword = hjpeg->Instance->DOR;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80099cc:	60bb      	str	r3, [r7, #8]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	69da      	ldr	r2, [r3, #28]
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099d6:	4413      	add	r3, r2
 80099d8:	68ba      	ldr	r2, [r7, #8]
 80099da:	b2d2      	uxtb	r2, r2
 80099dc:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 80099de:	68bb      	ldr	r3, [r7, #8]
 80099e0:	0a19      	lsrs	r1, r3, #8
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	69da      	ldr	r2, [r3, #28]
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099ea:	3301      	adds	r3, #1
 80099ec:	4413      	add	r3, r2
 80099ee:	b2ca      	uxtb	r2, r1
 80099f0:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 80099f2:	68bb      	ldr	r3, [r7, #8]
 80099f4:	0c19      	lsrs	r1, r3, #16
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	69da      	ldr	r2, [r3, #28]
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099fe:	3302      	adds	r3, #2
 8009a00:	4413      	add	r3, r2
 8009a02:	b2ca      	uxtb	r2, r1
 8009a04:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8009a06:	68bb      	ldr	r3, [r7, #8]
 8009a08:	0e19      	lsrs	r1, r3, #24
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	69da      	ldr	r2, [r3, #28]
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a12:	3303      	adds	r3, #3
 8009a14:	4413      	add	r3, r2
 8009a16:	b2ca      	uxtb	r2, r1
 8009a18:	701a      	strb	r2, [r3, #0]
      hjpeg->JpegOutCount += 4UL;
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a1e:	1d1a      	adds	r2, r3, #4
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	625a      	str	r2, [r3, #36]	@ 0x24
    for (index = 0; index < nbOutputWords; index++)
 8009a24:	697b      	ldr	r3, [r7, #20]
 8009a26:	3301      	adds	r3, #1
 8009a28:	617b      	str	r3, [r7, #20]
 8009a2a:	697a      	ldr	r2, [r7, #20]
 8009a2c:	683b      	ldr	r3, [r7, #0]
 8009a2e:	429a      	cmp	r2, r3
 8009a30:	d3c9      	bcc.n	80099c6 <JPEG_StoreOutputData+0x22>
    }
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a3a:	429a      	cmp	r2, r3
 8009a3c:	f040 80b5 	bne.w	8009baa <JPEG_StoreOutputData+0x206>
    {
      /*Output Buffer is full, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	69d9      	ldr	r1, [r3, #28]
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a48:	461a      	mov	r2, r3
 8009a4a:	6878      	ldr	r0, [r7, #4]
 8009a4c:	f7f7 fc2a 	bl	80012a4 <HAL_JPEG_DataReadyCallback>
#endif /*USE_HAL_JPEG_REGISTER_CALLBACKS*/
      hjpeg->JpegOutCount = 0;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	2200      	movs	r2, #0
 8009a54:	625a      	str	r2, [r3, #36]	@ 0x24
  }
  else
  {
    /* Nothing to do */
  }
}
 8009a56:	e0a8      	b.n	8009baa <JPEG_StoreOutputData+0x206>
  else if (hjpeg->OutDataLength > hjpeg->JpegOutCount)
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a60:	429a      	cmp	r2, r3
 8009a62:	f240 80a2 	bls.w	8009baa <JPEG_StoreOutputData+0x206>
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a6e:	1ad3      	subs	r3, r2, r3
 8009a70:	089b      	lsrs	r3, r3, #2
 8009a72:	613b      	str	r3, [r7, #16]
    for (index = 0; index < nb_words; index++)
 8009a74:	2300      	movs	r3, #0
 8009a76:	617b      	str	r3, [r7, #20]
 8009a78:	e031      	b.n	8009ade <JPEG_StoreOutputData+0x13a>
      dataword = hjpeg->Instance->DOR;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009a80:	60bb      	str	r3, [r7, #8]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	69da      	ldr	r2, [r3, #28]
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a8a:	4413      	add	r3, r2
 8009a8c:	68ba      	ldr	r2, [r7, #8]
 8009a8e:	b2d2      	uxtb	r2, r2
 8009a90:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 8009a92:	68bb      	ldr	r3, [r7, #8]
 8009a94:	0a19      	lsrs	r1, r3, #8
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	69da      	ldr	r2, [r3, #28]
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a9e:	3301      	adds	r3, #1
 8009aa0:	4413      	add	r3, r2
 8009aa2:	b2ca      	uxtb	r2, r1
 8009aa4:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8009aa6:	68bb      	ldr	r3, [r7, #8]
 8009aa8:	0c19      	lsrs	r1, r3, #16
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	69da      	ldr	r2, [r3, #28]
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ab2:	3302      	adds	r3, #2
 8009ab4:	4413      	add	r3, r2
 8009ab6:	b2ca      	uxtb	r2, r1
 8009ab8:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8009aba:	68bb      	ldr	r3, [r7, #8]
 8009abc:	0e19      	lsrs	r1, r3, #24
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	69da      	ldr	r2, [r3, #28]
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ac6:	3303      	adds	r3, #3
 8009ac8:	4413      	add	r3, r2
 8009aca:	b2ca      	uxtb	r2, r1
 8009acc:	701a      	strb	r2, [r3, #0]
      hjpeg->JpegOutCount += 4UL;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ad2:	1d1a      	adds	r2, r3, #4
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	625a      	str	r2, [r3, #36]	@ 0x24
    for (index = 0; index < nb_words; index++)
 8009ad8:	697b      	ldr	r3, [r7, #20]
 8009ada:	3301      	adds	r3, #1
 8009adc:	617b      	str	r3, [r7, #20]
 8009ade:	697a      	ldr	r2, [r7, #20]
 8009ae0:	693b      	ldr	r3, [r7, #16]
 8009ae2:	429a      	cmp	r2, r3
 8009ae4:	d3c9      	bcc.n	8009a7a <JPEG_StoreOutputData+0xd6>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009aee:	429a      	cmp	r2, r3
 8009af0:	d10b      	bne.n	8009b0a <JPEG_StoreOutputData+0x166>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	69d9      	ldr	r1, [r3, #28]
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009afa:	461a      	mov	r2, r3
 8009afc:	6878      	ldr	r0, [r7, #4]
 8009afe:	f7f7 fbd1 	bl	80012a4 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	2200      	movs	r2, #0
 8009b06:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8009b08:	e04f      	b.n	8009baa <JPEG_StoreOutputData+0x206>
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b12:	1ad3      	subs	r3, r2, r3
 8009b14:	60fb      	str	r3, [r7, #12]
      dataword = hjpeg->Instance->DOR;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009b1c:	60bb      	str	r3, [r7, #8]
      for (index = 0; index < nb_bytes; index++)
 8009b1e:	2300      	movs	r3, #0
 8009b20:	617b      	str	r3, [r7, #20]
 8009b22:	e015      	b.n	8009b50 <JPEG_StoreOutputData+0x1ac>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 8009b24:	697b      	ldr	r3, [r7, #20]
 8009b26:	f003 0303 	and.w	r3, r3, #3
 8009b2a:	00db      	lsls	r3, r3, #3
 8009b2c:	68ba      	ldr	r2, [r7, #8]
 8009b2e:	fa22 f103 	lsr.w	r1, r2, r3
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	69da      	ldr	r2, [r3, #28]
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b3a:	4413      	add	r3, r2
 8009b3c:	b2ca      	uxtb	r2, r1
 8009b3e:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount++;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b44:	1c5a      	adds	r2, r3, #1
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	625a      	str	r2, [r3, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 8009b4a:	697b      	ldr	r3, [r7, #20]
 8009b4c:	3301      	adds	r3, #1
 8009b4e:	617b      	str	r3, [r7, #20]
 8009b50:	697a      	ldr	r2, [r7, #20]
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	429a      	cmp	r2, r3
 8009b56:	d3e5      	bcc.n	8009b24 <JPEG_StoreOutputData+0x180>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	69d9      	ldr	r1, [r3, #28]
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b60:	461a      	mov	r2, r3
 8009b62:	6878      	ldr	r0, [r7, #4]
 8009b64:	f7f7 fb9e 	bl	80012a4 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	2200      	movs	r2, #0
 8009b6c:	625a      	str	r2, [r3, #36]	@ 0x24
      nb_bytes = 4UL - nb_bytes;
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	f1c3 0304 	rsb	r3, r3, #4
 8009b74:	60fb      	str	r3, [r7, #12]
      for (index = nb_bytes; index < 4UL; index++)
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	617b      	str	r3, [r7, #20]
 8009b7a:	e013      	b.n	8009ba4 <JPEG_StoreOutputData+0x200>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 8009b7c:	697b      	ldr	r3, [r7, #20]
 8009b7e:	00db      	lsls	r3, r3, #3
 8009b80:	68ba      	ldr	r2, [r7, #8]
 8009b82:	fa22 f103 	lsr.w	r1, r2, r3
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	69da      	ldr	r2, [r3, #28]
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b8e:	4413      	add	r3, r2
 8009b90:	b2ca      	uxtb	r2, r1
 8009b92:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount++;
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b98:	1c5a      	adds	r2, r3, #1
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	625a      	str	r2, [r3, #36]	@ 0x24
      for (index = nb_bytes; index < 4UL; index++)
 8009b9e:	697b      	ldr	r3, [r7, #20]
 8009ba0:	3301      	adds	r3, #1
 8009ba2:	617b      	str	r3, [r7, #20]
 8009ba4:	697b      	ldr	r3, [r7, #20]
 8009ba6:	2b03      	cmp	r3, #3
 8009ba8:	d9e8      	bls.n	8009b7c <JPEG_StoreOutputData+0x1d8>
}
 8009baa:	bf00      	nop
 8009bac:	3718      	adds	r7, #24
 8009bae:	46bd      	mov	sp, r7
 8009bb0:	bd80      	pop	{r7, pc}

08009bb2 <JPEG_ReadInputData>:
  *         the configuration information for JPEG module
  * @param  nbRequestWords Number of input words (of 32 bits) that the JPE peripheral request
  * @retval None
  */
static void JPEG_ReadInputData(JPEG_HandleTypeDef *hjpeg, uint32_t nbRequestWords)
{
 8009bb2:	b580      	push	{r7, lr}
 8009bb4:	b088      	sub	sp, #32
 8009bb6:	af00      	add	r7, sp, #0
 8009bb8:	6078      	str	r0, [r7, #4]
 8009bba:	6039      	str	r1, [r7, #0]
  uint32_t nb_bytes = 0;
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	61fb      	str	r3, [r7, #28]
  uint32_t nb_words;
  uint32_t index;
  uint32_t dataword;
  uint32_t input_count;

  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d002      	beq.n	8009bce <JPEG_ReadInputData+0x1c>
 8009bc8:	683b      	ldr	r3, [r7, #0]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d104      	bne.n	8009bd8 <JPEG_ReadInputData+0x26>
  {
    /* No more Input data : nothing to do*/
    (void) HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_INPUT);
 8009bce:	2101      	movs	r1, #1
 8009bd0:	6878      	ldr	r0, [r7, #4]
 8009bd2:	f7fe fded 	bl	80087b0 <HAL_JPEG_Pause>
 8009bd6:	e028      	b.n	8009c2a <JPEG_ReadInputData+0x78>
  }
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	6a1b      	ldr	r3, [r3, #32]
 8009be0:	429a      	cmp	r2, r3
 8009be2:	d906      	bls.n	8009bf2 <JPEG_ReadInputData+0x40>
  {
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	6a1b      	ldr	r3, [r3, #32]
 8009bec:	1ad3      	subs	r3, r2, r3
 8009bee:	61fb      	str	r3, [r7, #28]
 8009bf0:	e01b      	b.n	8009c2a <JPEG_ReadInputData+0x78>
  }
  else if (hjpeg->InDataLength == hjpeg->JpegInCount)
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	6a1b      	ldr	r3, [r3, #32]
 8009bfa:	429a      	cmp	r2, r3
 8009bfc:	d115      	bne.n	8009c2a <JPEG_ReadInputData+0x78>
  {
    /*Call HAL_JPEG_GetDataCallback to get new data */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->GetDataCallback(hjpeg, hjpeg->JpegInCount);
#else
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	6a1b      	ldr	r3, [r3, #32]
 8009c02:	4619      	mov	r1, r3
 8009c04:	6878      	ldr	r0, [r7, #4]
 8009c06:	f7f7 fb2d 	bl	8001264 <HAL_JPEG_GetDataCallback>
#endif /*USE_HAL_JPEG_REGISTER_CALLBACKS*/

    if (hjpeg->InDataLength > 4UL)
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c0e:	2b04      	cmp	r3, #4
 8009c10:	d905      	bls.n	8009c1e <JPEG_ReadInputData+0x6c>
    {
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c16:	f023 0203 	bic.w	r2, r3, #3
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	629a      	str	r2, [r3, #40]	@ 0x28
    }
    hjpeg->JpegInCount = 0;
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	2200      	movs	r2, #0
 8009c22:	621a      	str	r2, [r3, #32]
    nb_bytes = hjpeg->InDataLength;
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c28:	61fb      	str	r3, [r7, #28]
  }
  else
  {
    /* Nothing to do */
  }
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c2e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	f040 809f 	bne.w	8009d76 <JPEG_ReadInputData+0x1c4>
 8009c38:	69fb      	ldr	r3, [r7, #28]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	f000 809b 	beq.w	8009d76 <JPEG_ReadInputData+0x1c4>
  {
    nb_words = nb_bytes / 4UL;
 8009c40:	69fb      	ldr	r3, [r7, #28]
 8009c42:	089b      	lsrs	r3, r3, #2
 8009c44:	613b      	str	r3, [r7, #16]
    if (nb_words >= nbRequestWords)
 8009c46:	693a      	ldr	r2, [r7, #16]
 8009c48:	683b      	ldr	r3, [r7, #0]
 8009c4a:	429a      	cmp	r2, r3
 8009c4c:	d335      	bcc.n	8009cba <JPEG_ReadInputData+0x108>
    {
      for (index = 0; index < nbRequestWords; index++)
 8009c4e:	2300      	movs	r3, #0
 8009c50:	61bb      	str	r3, [r7, #24]
 8009c52:	e02d      	b.n	8009cb0 <JPEG_ReadInputData+0xfe>
      {
        input_count = hjpeg->JpegInCount;
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	6a1b      	ldr	r3, [r3, #32]
 8009c58:	60fb      	str	r3, [r7, #12]
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	699a      	ldr	r2, [r3, #24]
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	4413      	add	r3, r2
 8009c62:	781b      	ldrb	r3, [r3, #0]
 8009c64:	4619      	mov	r1, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	699a      	ldr	r2, [r3, #24]
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	3301      	adds	r3, #1
 8009c6e:	4413      	add	r3, r2
 8009c70:	781b      	ldrb	r3, [r3, #0]
 8009c72:	021b      	lsls	r3, r3, #8
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8009c74:	ea41 0203 	orr.w	r2, r1, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	6999      	ldr	r1, [r3, #24]
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	3302      	adds	r3, #2
 8009c80:	440b      	add	r3, r1
 8009c82:	781b      	ldrb	r3, [r3, #0]
 8009c84:	041b      	lsls	r3, r3, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8009c86:	ea42 0103 	orr.w	r1, r2, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	699a      	ldr	r2, [r3, #24]
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	3303      	adds	r3, #3
 8009c92:	4413      	add	r3, r2
 8009c94:	781b      	ldrb	r3, [r3, #0]
 8009c96:	061a      	lsls	r2, r3, #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8009c9c:	430a      	orrs	r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8009c9e:	641a      	str	r2, [r3, #64]	@ 0x40

        hjpeg->JpegInCount += 4UL;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	6a1b      	ldr	r3, [r3, #32]
 8009ca4:	1d1a      	adds	r2, r3, #4
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	621a      	str	r2, [r3, #32]
      for (index = 0; index < nbRequestWords; index++)
 8009caa:	69bb      	ldr	r3, [r7, #24]
 8009cac:	3301      	adds	r3, #1
 8009cae:	61bb      	str	r3, [r7, #24]
 8009cb0:	69ba      	ldr	r2, [r7, #24]
 8009cb2:	683b      	ldr	r3, [r7, #0]
 8009cb4:	429a      	cmp	r2, r3
 8009cb6:	d3cd      	bcc.n	8009c54 <JPEG_ReadInputData+0xa2>
        }
        hjpeg->Instance->DIR = dataword;
      }
    }
  }
}
 8009cb8:	e05d      	b.n	8009d76 <JPEG_ReadInputData+0x1c4>
      if (nb_words > 0UL)
 8009cba:	693b      	ldr	r3, [r7, #16]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d035      	beq.n	8009d2c <JPEG_ReadInputData+0x17a>
        for (index = 0; index < nb_words; index++)
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	61bb      	str	r3, [r7, #24]
 8009cc4:	e02d      	b.n	8009d22 <JPEG_ReadInputData+0x170>
          input_count = hjpeg->JpegInCount;
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	6a1b      	ldr	r3, [r3, #32]
 8009cca:	60fb      	str	r3, [r7, #12]
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	699a      	ldr	r2, [r3, #24]
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	4413      	add	r3, r2
 8009cd4:	781b      	ldrb	r3, [r3, #0]
 8009cd6:	4619      	mov	r1, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	699a      	ldr	r2, [r3, #24]
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	3301      	adds	r3, #1
 8009ce0:	4413      	add	r3, r2
 8009ce2:	781b      	ldrb	r3, [r3, #0]
 8009ce4:	021b      	lsls	r3, r3, #8
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8009ce6:	ea41 0203 	orr.w	r2, r1, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	6999      	ldr	r1, [r3, #24]
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	3302      	adds	r3, #2
 8009cf2:	440b      	add	r3, r1
 8009cf4:	781b      	ldrb	r3, [r3, #0]
 8009cf6:	041b      	lsls	r3, r3, #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8009cf8:	ea42 0103 	orr.w	r1, r2, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	699a      	ldr	r2, [r3, #24]
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	3303      	adds	r3, #3
 8009d04:	4413      	add	r3, r2
 8009d06:	781b      	ldrb	r3, [r3, #0]
 8009d08:	061a      	lsls	r2, r3, #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	681b      	ldr	r3, [r3, #0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8009d0e:	430a      	orrs	r2, r1
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8009d10:	641a      	str	r2, [r3, #64]	@ 0x40
          hjpeg->JpegInCount += 4UL;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	6a1b      	ldr	r3, [r3, #32]
 8009d16:	1d1a      	adds	r2, r3, #4
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	621a      	str	r2, [r3, #32]
        for (index = 0; index < nb_words; index++)
 8009d1c:	69bb      	ldr	r3, [r7, #24]
 8009d1e:	3301      	adds	r3, #1
 8009d20:	61bb      	str	r3, [r7, #24]
 8009d22:	69ba      	ldr	r2, [r7, #24]
 8009d24:	693b      	ldr	r3, [r7, #16]
 8009d26:	429a      	cmp	r2, r3
 8009d28:	d3cd      	bcc.n	8009cc6 <JPEG_ReadInputData+0x114>
}
 8009d2a:	e024      	b.n	8009d76 <JPEG_ReadInputData+0x1c4>
        dataword = 0;
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	617b      	str	r3, [r7, #20]
        for (index = 0; index < nb_bytes; index++)
 8009d30:	2300      	movs	r3, #0
 8009d32:	61bb      	str	r3, [r7, #24]
 8009d34:	e017      	b.n	8009d66 <JPEG_ReadInputData+0x1b4>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	699a      	ldr	r2, [r3, #24]
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	6a1b      	ldr	r3, [r3, #32]
 8009d3e:	4413      	add	r3, r2
 8009d40:	781b      	ldrb	r3, [r3, #0]
 8009d42:	461a      	mov	r2, r3
 8009d44:	69bb      	ldr	r3, [r7, #24]
 8009d46:	f003 0303 	and.w	r3, r3, #3
 8009d4a:	00db      	lsls	r3, r3, #3
 8009d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8009d50:	697a      	ldr	r2, [r7, #20]
 8009d52:	4313      	orrs	r3, r2
 8009d54:	617b      	str	r3, [r7, #20]
          hjpeg->JpegInCount++;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	6a1b      	ldr	r3, [r3, #32]
 8009d5a:	1c5a      	adds	r2, r3, #1
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	621a      	str	r2, [r3, #32]
        for (index = 0; index < nb_bytes; index++)
 8009d60:	69bb      	ldr	r3, [r7, #24]
 8009d62:	3301      	adds	r3, #1
 8009d64:	61bb      	str	r3, [r7, #24]
 8009d66:	69ba      	ldr	r2, [r7, #24]
 8009d68:	69fb      	ldr	r3, [r7, #28]
 8009d6a:	429a      	cmp	r2, r3
 8009d6c:	d3e3      	bcc.n	8009d36 <JPEG_ReadInputData+0x184>
        hjpeg->Instance->DIR = dataword;
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	697a      	ldr	r2, [r7, #20]
 8009d74:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8009d76:	bf00      	nop
 8009d78:	3720      	adds	r7, #32
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	bd80      	pop	{r7, pc}
	...

08009d80 <JPEG_DMA_StartProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if process ends else JPEG_PROCESS_ONGOING
  */
static HAL_StatusTypeDef JPEG_DMA_StartProcess(JPEG_HandleTypeDef *hjpeg)
{
 8009d80:	b590      	push	{r4, r7, lr}
 8009d82:	b087      	sub	sp, #28
 8009d84:	af02      	add	r7, sp, #8
 8009d86:	6078      	str	r0, [r7, #4]
  /*if the MDMA In is triggred with JPEG In FIFO Threshold flag
      then MDMA In buffer size is 32 bytes
    else (MDMA In is triggred with JPEG In FIFO not full flag)
      then MDMA In buffer size is 4 bytes
    */
  inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d8e:	60fb      	str	r3, [r7, #12]
  /*if the MDMA Out is triggred with JPEG Out FIFO Threshold flag
      then MDMA out buffer size is 32 bytes
    else (MDMA Out is triggred with JPEG Out FIFO not empty flag)
      then MDMA buffer size is 4 bytes
    */
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d96:	60bb      	str	r3, [r7, #8]

  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d9c:	68fa      	ldr	r2, [r7, #12]
 8009d9e:	429a      	cmp	r2, r3
 8009da0:	d804      	bhi.n	8009dac <JPEG_DMA_StartProcess+0x2c>
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009da6:	68ba      	ldr	r2, [r7, #8]
 8009da8:	429a      	cmp	r2, r3
 8009daa:	d901      	bls.n	8009db0 <JPEG_DMA_StartProcess+0x30>
  {
    return HAL_ERROR;
 8009dac:	2301      	movs	r3, #1
 8009dae:	e074      	b.n	8009e9a <JPEG_DMA_StartProcess+0x11a>
  }
  /* Set the JPEG MDMA In transfer complete callback */
  hjpeg->hdmain->XferCpltCallback = JPEG_MDMAInCpltCallback;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009db4:	4a3b      	ldr	r2, [pc, #236]	@ (8009ea4 <JPEG_DMA_StartProcess+0x124>)
 8009db6:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Set the MDMA In error callback */
  hjpeg->hdmain->XferErrorCallback = JPEG_MDMAErrorCallback;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009dbc:	4a3a      	ldr	r2, [pc, #232]	@ (8009ea8 <JPEG_DMA_StartProcess+0x128>)
 8009dbe:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the JPEG MDMA Out transfer complete callback */
  hjpeg->hdmaout->XferCpltCallback = JPEG_MDMAOutCpltCallback;
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009dc4:	4a39      	ldr	r2, [pc, #228]	@ (8009eac <JPEG_DMA_StartProcess+0x12c>)
 8009dc6:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Set the MDMA In error callback */
  hjpeg->hdmaout->XferErrorCallback = JPEG_MDMAErrorCallback;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009dcc:	4a36      	ldr	r2, [pc, #216]	@ (8009ea8 <JPEG_DMA_StartProcess+0x128>)
 8009dce:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Set the MDMA Out Abort callback */
  hjpeg->hdmaout->XferAbortCallback = JPEG_MDMAOutAbortCallback;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009dd4:	4a36      	ldr	r2, [pc, #216]	@ (8009eb0 <JPEG_DMA_StartProcess+0x130>)
 8009dd6:	659a      	str	r2, [r3, #88]	@ 0x58

  if ((inXfrSize == 0UL) || (outXfrSize == 0UL))
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d002      	beq.n	8009de4 <JPEG_DMA_StartProcess+0x64>
 8009dde:	68bb      	ldr	r3, [r7, #8]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d107      	bne.n	8009df4 <JPEG_DMA_StartProcess+0x74>
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009de8:	f043 0204 	orr.w	r2, r3, #4
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	651a      	str	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8009df0:	2301      	movs	r3, #1
 8009df2:	e052      	b.n	8009e9a <JPEG_DMA_StartProcess+0x11a>
  }
  /*MDMA transfer size (BNDTR) must be a multiple of MDMA buffer size (TLEN)*/
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009dfc:	68f9      	ldr	r1, [r7, #12]
 8009dfe:	fbb3 f1f1 	udiv	r1, r3, r1
 8009e02:	68f8      	ldr	r0, [r7, #12]
 8009e04:	fb00 f101 	mul.w	r1, r0, r1
 8009e08:	1a5b      	subs	r3, r3, r1
 8009e0a:	1ad2      	subs	r2, r2, r3
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	629a      	str	r2, [r3, #40]	@ 0x28

  /*MDMA transfer size (BNDTR) must be a multiple of MDMA buffer size (TLEN)*/
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e18:	68b9      	ldr	r1, [r7, #8]
 8009e1a:	fbb3 f1f1 	udiv	r1, r3, r1
 8009e1e:	68b8      	ldr	r0, [r7, #8]
 8009e20:	fb00 f101 	mul.w	r1, r0, r1
 8009e24:	1a5b      	subs	r3, r3, r1
 8009e26:	1ad2      	subs	r2, r2, r3
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	62da      	str	r2, [r3, #44]	@ 0x2c


  /* Start MDMA FIFO Out transfer */
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	3344      	adds	r3, #68	@ 0x44
 8009e36:	4619      	mov	r1, r3
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	69db      	ldr	r3, [r3, #28]
 8009e3c:	461c      	mov	r4, r3
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e42:	2201      	movs	r2, #1
 8009e44:	9200      	str	r2, [sp, #0]
 8009e46:	4622      	mov	r2, r4
 8009e48:	f000 fbe2 	bl	800a610 <HAL_MDMA_Start_IT>
 8009e4c:	4603      	mov	r3, r0
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d007      	beq.n	8009e62 <JPEG_DMA_StartProcess+0xe2>
                        hjpeg->OutDataLength, 1) != HAL_OK)
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009e56:	f043 0204 	orr.w	r2, r3, #4
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	651a      	str	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8009e5e:	2301      	movs	r3, #1
 8009e60:	e01b      	b.n	8009e9a <JPEG_DMA_StartProcess+0x11a>
  }
  /* Start DMA FIFO In transfer */
  if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	699b      	ldr	r3, [r3, #24]
 8009e6a:	4619      	mov	r1, r3
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	3340      	adds	r3, #64	@ 0x40
 8009e72:	461c      	mov	r4, r3
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e78:	2201      	movs	r2, #1
 8009e7a:	9200      	str	r2, [sp, #0]
 8009e7c:	4622      	mov	r2, r4
 8009e7e:	f000 fbc7 	bl	800a610 <HAL_MDMA_Start_IT>
 8009e82:	4603      	mov	r3, r0
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d007      	beq.n	8009e98 <JPEG_DMA_StartProcess+0x118>
                        hjpeg->InDataLength, 1) != HAL_OK)
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009e8c:	f043 0204 	orr.w	r2, r3, #4
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	651a      	str	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8009e94:	2301      	movs	r3, #1
 8009e96:	e000      	b.n	8009e9a <JPEG_DMA_StartProcess+0x11a>
  }

  return HAL_OK;
 8009e98:	2300      	movs	r3, #0
}
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	3714      	adds	r7, #20
 8009e9e:	46bd      	mov	sp, r7
 8009ea0:	bd90      	pop	{r4, r7, pc}
 8009ea2:	bf00      	nop
 8009ea4:	0800a1b3 	.word	0x0800a1b3
 8009ea8:	0800a3a1 	.word	0x0800a3a1
 8009eac:	0800a2df 	.word	0x0800a2df
 8009eb0:	0800a3f1 	.word	0x0800a3f1

08009eb4 <JPEG_DMA_ContinueProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if process ends else JPEG_PROCESS_ONGOING
  */
static void JPEG_DMA_ContinueProcess(JPEG_HandleTypeDef *hjpeg)
{
 8009eb4:	b580      	push	{r7, lr}
 8009eb6:	b082      	sub	sp, #8
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	6078      	str	r0, [r7, #4]
  /*End of header processing flag rises*/
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ec0:	f003 0303 	and.w	r3, r3, #3
 8009ec4:	2b02      	cmp	r3, #2
 8009ec6:	d125      	bne.n	8009f14 <JPEG_DMA_ContinueProcess+0x60>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009ece:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d01e      	beq.n	8009f14 <JPEG_DMA_ContinueProcess+0x60>
    {
      /*Call Header parsing complete callback */
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	3304      	adds	r3, #4
 8009eda:	4619      	mov	r1, r3
 8009edc:	6878      	ldr	r0, [r7, #4]
 8009ede:	f7fe fb62 	bl	80085a6 <HAL_JPEG_GetInfo>

      /* Reset the ImageQuality */
      hjpeg->Conf.ImageQuality = 0;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	2200      	movs	r2, #0
 8009ee6:	615a      	str	r2, [r3, #20]

      /*Call Info Ready callback */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->InfoReadyCallback(hjpeg, &hjpeg->Conf);
#else
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	3304      	adds	r3, #4
 8009eec:	4619      	mov	r1, r3
 8009eee:	6878      	ldr	r0, [r7, #4]
 8009ef0:	f7fe fcda 	bl	80088a8 <HAL_JPEG_InfoReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009f02:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Clear header processing done flag */
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009f12:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  /*End of Conversion handling*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) != 0UL)
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f1a:	f003 0320 	and.w	r3, r3, #32
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d039      	beq.n	8009f96 <JPEG_DMA_ContinueProcess+0xe2>
  {

    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f26:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	655a      	str	r2, [r3, #84]	@ 0x54

    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	681a      	ldr	r2, [r3, #0]
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	f022 0201 	bic.w	r2, r2, #1
 8009f3c:	601a      	str	r2, [r3, #0]

    __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8009f4c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Clear all flags */
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8009f5c:	639a      	str	r2, [r3, #56]	@ 0x38

    if (hjpeg->hdmain->State == HAL_MDMA_STATE_BUSY)
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f62:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009f66:	b2db      	uxtb	r3, r3
 8009f68:	2b02      	cmp	r3, #2
 8009f6a:	d104      	bne.n	8009f76 <JPEG_DMA_ContinueProcess+0xc2>
    {
      /* Stop the MDMA In Xfer*/
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmain);
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f70:	4618      	mov	r0, r3
 8009f72:	f000 fbce 	bl	800a712 <HAL_MDMA_Abort_IT>
    }

    if (hjpeg->hdmaout->State == HAL_MDMA_STATE_BUSY)
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f7a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009f7e:	b2db      	uxtb	r3, r3
 8009f80:	2b02      	cmp	r3, #2
 8009f82:	d105      	bne.n	8009f90 <JPEG_DMA_ContinueProcess+0xdc>
    {
      /* Stop the MDMA out Xfer*/
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmaout);
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f88:	4618      	mov	r0, r3
 8009f8a:	f000 fbc2 	bl	800a712 <HAL_MDMA_Abort_IT>
      JPEG_DMA_EndProcess(hjpeg);
    }
  }


}
 8009f8e:	e002      	b.n	8009f96 <JPEG_DMA_ContinueProcess+0xe2>
      JPEG_DMA_EndProcess(hjpeg);
 8009f90:	6878      	ldr	r0, [r7, #4]
 8009f92:	f000 f804 	bl	8009f9e <JPEG_DMA_EndProcess>
}
 8009f96:	bf00      	nop
 8009f98:	3708      	adds	r7, #8
 8009f9a:	46bd      	mov	sp, r7
 8009f9c:	bd80      	pop	{r7, pc}

08009f9e <JPEG_DMA_EndProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE
  */
static void JPEG_DMA_EndProcess(JPEG_HandleTypeDef *hjpeg)
{
 8009f9e:	b580      	push	{r7, lr}
 8009fa0:	b084      	sub	sp, #16
 8009fa2:	af00      	add	r7, sp, #0
 8009fa4:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;
  hjpeg->JpegOutCount = hjpeg->OutDataLength - (hjpeg->hdmaout->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	695b      	ldr	r3, [r3, #20]
 8009fb2:	f3c3 0310 	ubfx	r3, r3, #0, #17
 8009fb6:	1ad2      	subs	r2, r2, r3
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	625a      	str	r2, [r3, #36]	@ 0x24

  /*if Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
  if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fc4:	429a      	cmp	r2, r3
 8009fc6:	d10a      	bne.n	8009fde <JPEG_DMA_EndProcess+0x40>
  {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
    HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	69d9      	ldr	r1, [r3, #28]
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fd0:	461a      	mov	r2, r3
 8009fd2:	6878      	ldr	r0, [r7, #4]
 8009fd4:	f7f7 f966 	bl	80012a4 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

    hjpeg->JpegOutCount = 0;
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	2200      	movs	r2, #0
 8009fdc:	625a      	str	r2, [r3, #36]	@ 0x24
  }

  /*Check if remaining data in the output FIFO*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL)
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009fe4:	f003 0310 	and.w	r3, r3, #16
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d134      	bne.n	800a056 <JPEG_DMA_EndProcess+0xb8>
  {
    if (hjpeg->JpegOutCount > 0UL)
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d00a      	beq.n	800a00a <JPEG_DMA_EndProcess+0x6c>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	69d9      	ldr	r1, [r3, #28]
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ffc:	461a      	mov	r2, r3
 8009ffe:	6878      	ldr	r0, [r7, #4]
 800a000:	f7f7 f950 	bl	80012a4 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	2200      	movs	r2, #0
 800a008:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	681a      	ldr	r2, [r3, #0]
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	f022 0201 	bic.w	r2, r2, #1
 800a018:	601a      	str	r2, [r3, #0]

    tmpContext = hjpeg->Context;
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a01e:	60fb      	str	r3, [r7, #12]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a024:	f403 4282 	and.w	r2, r3, #16640	@ 0x4100
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	2200      	movs	r2, #0
 800a030:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	2201      	movs	r2, #1
 800a038:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	f003 0303 	and.w	r3, r3, #3
 800a042:	2b02      	cmp	r3, #2
 800a044:	d103      	bne.n	800a04e <JPEG_DMA_EndProcess+0xb0>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800a046:	6878      	ldr	r0, [r7, #4]
 800a048:	f7fe fc39 	bl	80088be <HAL_JPEG_DecodeCpltCallback>
  else
  {
    /* Nothing to do */
  }

}
 800a04c:	e00c      	b.n	800a068 <JPEG_DMA_EndProcess+0xca>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800a04e:	6878      	ldr	r0, [r7, #4]
 800a050:	f7f7 f944 	bl	80012dc <HAL_JPEG_EncodeCpltCallback>
}
 800a054:	e008      	b.n	800a068 <JPEG_DMA_EndProcess+0xca>
  else if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a05a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d102      	bne.n	800a068 <JPEG_DMA_EndProcess+0xca>
    JPEG_DMA_PollResidualData(hjpeg);
 800a062:	6878      	ldr	r0, [r7, #4]
 800a064:	f000 f804 	bl	800a070 <JPEG_DMA_PollResidualData>
}
 800a068:	bf00      	nop
 800a06a:	3710      	adds	r7, #16
 800a06c:	46bd      	mov	sp, r7
 800a06e:	bd80      	pop	{r7, pc}

0800a070 <JPEG_DMA_PollResidualData>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None.
  */
static void JPEG_DMA_PollResidualData(JPEG_HandleTypeDef *hjpeg)
{
 800a070:	b580      	push	{r7, lr}
 800a072:	b086      	sub	sp, #24
 800a074:	af00      	add	r7, sp, #0
 800a076:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;
  uint32_t count;
  uint32_t dataOut;

  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 800a078:	2310      	movs	r3, #16
 800a07a:	617b      	str	r3, [r7, #20]
 800a07c:	e04f      	b.n	800a11e <JPEG_DMA_PollResidualData+0xae>
  {
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a082:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a086:	2b00      	cmp	r3, #0
 800a088:	d146      	bne.n	800a118 <JPEG_DMA_PollResidualData+0xa8>
    {
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a090:	f003 0310 	and.w	r3, r3, #16
 800a094:	2b00      	cmp	r3, #0
 800a096:	d03f      	beq.n	800a118 <JPEG_DMA_PollResidualData+0xa8>
      {
        dataOut = hjpeg->Instance->DOR;
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a09e:	60fb      	str	r3, [r7, #12]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataOut & 0x000000FFUL);
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	69da      	ldr	r2, [r3, #28]
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0a8:	4413      	add	r3, r2
 800a0aa:	68fa      	ldr	r2, [r7, #12]
 800a0ac:	b2d2      	uxtb	r2, r2
 800a0ae:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataOut & 0x0000FF00UL) >> 8);
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	0a19      	lsrs	r1, r3, #8
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	69da      	ldr	r2, [r3, #28]
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0bc:	3301      	adds	r3, #1
 800a0be:	4413      	add	r3, r2
 800a0c0:	b2ca      	uxtb	r2, r1
 800a0c2:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	0c19      	lsrs	r1, r3, #16
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	69da      	ldr	r2, [r3, #28]
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0d0:	3302      	adds	r3, #2
 800a0d2:	4413      	add	r3, r2
 800a0d4:	b2ca      	uxtb	r2, r1
 800a0d6:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	0e19      	lsrs	r1, r3, #24
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	69da      	ldr	r2, [r3, #28]
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0e4:	3303      	adds	r3, #3
 800a0e6:	4413      	add	r3, r2
 800a0e8:	b2ca      	uxtb	r2, r1
 800a0ea:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount += 4UL;
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0f0:	1d1a      	adds	r2, r3, #4
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	625a      	str	r2, [r3, #36]	@ 0x24

        if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0fe:	429a      	cmp	r2, r3
 800a100:	d10a      	bne.n	800a118 <JPEG_DMA_PollResidualData+0xa8>
        {
          /*Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
          hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
          HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	69d9      	ldr	r1, [r3, #28]
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a10a:	461a      	mov	r2, r3
 800a10c:	6878      	ldr	r0, [r7, #4]
 800a10e:	f7f7 f8c9 	bl	80012a4 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

          hjpeg->JpegOutCount = 0;
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	2200      	movs	r2, #0
 800a116:	625a      	str	r2, [r3, #36]	@ 0x24
  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 800a118:	697b      	ldr	r3, [r7, #20]
 800a11a:	3b01      	subs	r3, #1
 800a11c:	617b      	str	r3, [r7, #20]
 800a11e:	697b      	ldr	r3, [r7, #20]
 800a120:	2b00      	cmp	r3, #0
 800a122:	d1ac      	bne.n	800a07e <JPEG_DMA_PollResidualData+0xe>

      }
    }
  }

  tmpContext = hjpeg->Context;
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a128:	613b      	str	r3, [r7, #16]

  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a130:	f003 0310 	and.w	r3, r3, #16
 800a134:	2b00      	cmp	r3, #0
 800a136:	d004      	beq.n	800a142 <JPEG_DMA_PollResidualData+0xd2>
 800a138:	693b      	ldr	r3, [r7, #16]
 800a13a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d133      	bne.n	800a1aa <JPEG_DMA_PollResidualData+0x13a>
  {
    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	681a      	ldr	r2, [r3, #0]
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	f022 0201 	bic.w	r2, r2, #1
 800a150:	601a      	str	r2, [r3, #0]

    if (hjpeg->JpegOutCount > 0UL)
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a156:	2b00      	cmp	r3, #0
 800a158:	d00a      	beq.n	800a170 <JPEG_DMA_PollResidualData+0x100>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	69d9      	ldr	r1, [r3, #28]
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a162:	461a      	mov	r2, r3
 800a164:	6878      	ldr	r0, [r7, #4]
 800a166:	f7f7 f89d 	bl	80012a4 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	2200      	movs	r2, #0
 800a16e:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    tmpContext = hjpeg->Context;
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a174:	613b      	str	r3, [r7, #16]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a17a:	f403 4282 	and.w	r2, r3, #16640	@ 0x4100
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	2200      	movs	r2, #0
 800a186:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	2201      	movs	r2, #1
 800a18e:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800a192:	693b      	ldr	r3, [r7, #16]
 800a194:	f003 0303 	and.w	r3, r3, #3
 800a198:	2b02      	cmp	r3, #2
 800a19a:	d103      	bne.n	800a1a4 <JPEG_DMA_PollResidualData+0x134>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800a19c:	6878      	ldr	r0, [r7, #4]
 800a19e:	f7fe fb8e 	bl	80088be <HAL_JPEG_DecodeCpltCallback>
#else
      HAL_JPEG_EncodeCpltCallback(hjpeg);
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
    }
  }
}
 800a1a2:	e002      	b.n	800a1aa <JPEG_DMA_PollResidualData+0x13a>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800a1a4:	6878      	ldr	r0, [r7, #4]
 800a1a6:	f7f7 f899 	bl	80012dc <HAL_JPEG_EncodeCpltCallback>
}
 800a1aa:	bf00      	nop
 800a1ac:	3718      	adds	r7, #24
 800a1ae:	46bd      	mov	sp, r7
 800a1b0:	bd80      	pop	{r7, pc}

0800a1b2 <JPEG_MDMAInCpltCallback>:
  * @brief  MDMA input transfer complete callback
  * @param  hmdma pointer to a MDMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_MDMAInCpltCallback(MDMA_HandleTypeDef *hmdma)
{
 800a1b2:	b590      	push	{r4, r7, lr}
 800a1b4:	b087      	sub	sp, #28
 800a1b6:	af02      	add	r7, sp, #8
 800a1b8:	6078      	str	r0, [r7, #4]
  uint32_t inXfrSize;

  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a1be:	60fb      	str	r3, [r7, #12]

  /* Disable The JPEG IT so the MDMA Input Callback can not be interrupted by the JPEG EOC IT or JPEG HPD IT */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800a1ce:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Check if context method is DMA and we are not in ending DMA stage */
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) == JPEG_CONTEXT_DMA)
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a1d4:	f248 030c 	movw	r3, #32780	@ 0x800c
 800a1d8:	4013      	ands	r3, r2
 800a1da:	2b0c      	cmp	r3, #12
 800a1dc:	d17c      	bne.n	800a2d8 <JPEG_MDMAInCpltCallback+0x126>
    /*if the MDMA In is triggred with JPEG In FIFO Threshold flag
      then MDMA In buffer size is 32 bytes
      else (MDMA In is triggred with JPEG In FIFO not full flag)
      then MDMA In buffer size is 4 bytes
      */
    inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a1e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1e4:	60bb      	str	r3, [r7, #8]

    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	695b      	ldr	r3, [r3, #20]
 800a1f0:	f3c3 0310 	ubfx	r3, r3, #0, #17
 800a1f4:	1ad2      	subs	r2, r2, r3
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	621a      	str	r2, [r3, #32]

    /*Call HAL_JPEG_GetDataCallback to get new data */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->GetDataCallback(hjpeg, hjpeg->JpegInCount);
#else
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	6a1b      	ldr	r3, [r3, #32]
 800a1fe:	4619      	mov	r1, r3
 800a200:	68f8      	ldr	r0, [r7, #12]
 800a202:	f7f7 f82f 	bl	8001264 <HAL_JPEG_GetDataCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */


    if (hjpeg->InDataLength >= inXfrSize)
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a20a:	68ba      	ldr	r2, [r7, #8]
 800a20c:	429a      	cmp	r2, r3
 800a20e:	d81f      	bhi.n	800a250 <JPEG_MDMAInCpltCallback+0x9e>
    {
      if (inXfrSize == 0UL)
 800a210:	68bb      	ldr	r3, [r7, #8]
 800a212:	2b00      	cmp	r3, #0
 800a214:	d10d      	bne.n	800a232 <JPEG_MDMAInCpltCallback+0x80>
      {
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a21a:	f043 0204 	orr.w	r2, r3, #4
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	651a      	str	r2, [r3, #80]	@ 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	2206      	movs	r2, #6
 800a226:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
        hjpeg->ErrorCallback(hjpeg);
#else
        HAL_JPEG_ErrorCallback(hjpeg);
 800a22a:	68f8      	ldr	r0, [r7, #12]
 800a22c:	f7fe fb51 	bl	80088d2 <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
        return;
 800a230:	e052      	b.n	800a2d8 <JPEG_MDMAInCpltCallback+0x126>
      }
      /*JPEG Input MDMA transfer data number must be multiple of MDMA buffer size
        as the destination is a 32 bits register */
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a23a:	68b9      	ldr	r1, [r7, #8]
 800a23c:	fbb3 f1f1 	udiv	r1, r3, r1
 800a240:	68b8      	ldr	r0, [r7, #8]
 800a242:	fb00 f101 	mul.w	r1, r0, r1
 800a246:	1a5b      	subs	r3, r3, r1
 800a248:	1ad2      	subs	r2, r2, r3
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	629a      	str	r2, [r3, #40]	@ 0x28
 800a24e:	e010      	b.n	800a272 <JPEG_MDMAInCpltCallback+0xc0>

    }
    else if (hjpeg->InDataLength > 0UL)
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a254:	2b00      	cmp	r3, #0
 800a256:	d00c      	beq.n	800a272 <JPEG_MDMAInCpltCallback+0xc0>
    {
      /* Transfer the remaining Data, must be multiple of source data size (byte) and destination data size (word) */
      if ((hjpeg->InDataLength % 4UL) != 0UL)
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a25c:	f003 0303 	and.w	r3, r3, #3
 800a260:	2b00      	cmp	r3, #0
 800a262:	d006      	beq.n	800a272 <JPEG_MDMAInCpltCallback+0xc0>
      {
        hjpeg->InDataLength = ((hjpeg->InDataLength / 4UL) + 1UL) * 4UL;
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a268:	089b      	lsrs	r3, r3, #2
 800a26a:	3301      	adds	r3, #1
 800a26c:	009a      	lsls	r2, r3, #2
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	629a      	str	r2, [r3, #40]	@ 0x28
    else
    {
      /* Nothing to do */
    }

    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a276:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d124      	bne.n	800a2c8 <JPEG_MDMAInCpltCallback+0x116>
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a282:	2b00      	cmp	r3, #0
 800a284:	d020      	beq.n	800a2c8 <JPEG_MDMAInCpltCallback+0x116>
    {
      /* Start MDMA FIFO In transfer */
      if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	699b      	ldr	r3, [r3, #24]
 800a28e:	4619      	mov	r1, r3
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	3340      	adds	r3, #64	@ 0x40
 800a296:	461c      	mov	r4, r3
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a29c:	2201      	movs	r2, #1
 800a29e:	9200      	str	r2, [sp, #0]
 800a2a0:	4622      	mov	r2, r4
 800a2a2:	f000 f9b5 	bl	800a610 <HAL_MDMA_Start_IT>
 800a2a6:	4603      	mov	r3, r0
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d00d      	beq.n	800a2c8 <JPEG_MDMAInCpltCallback+0x116>
                            hjpeg->InDataLength, 1) != HAL_OK)
      {
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a2b0:	f043 0204 	orr.w	r2, r3, #4
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	651a      	str	r2, [r3, #80]	@ 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	2206      	movs	r2, #6
 800a2bc:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
        hjpeg->ErrorCallback(hjpeg);
#else
        HAL_JPEG_ErrorCallback(hjpeg);
 800a2c0:	68f8      	ldr	r0, [r7, #12]
 800a2c2:	f7fe fb06 	bl	80088d2 <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
        return;
 800a2c6:	e007      	b.n	800a2d8 <JPEG_MDMAInCpltCallback+0x126>
      }
    }

    /* JPEG Conversion still on going : Enable the JPEG IT */
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800a2d6:	631a      	str	r2, [r3, #48]	@ 0x30
  }
}
 800a2d8:	3714      	adds	r7, #20
 800a2da:	46bd      	mov	sp, r7
 800a2dc:	bd90      	pop	{r4, r7, pc}

0800a2de <JPEG_MDMAOutCpltCallback>:
  * @brief  MDMA output transfer complete callback
  * @param  hmdma pointer to a MDMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_MDMAOutCpltCallback(MDMA_HandleTypeDef *hmdma)
{
 800a2de:	b590      	push	{r4, r7, lr}
 800a2e0:	b087      	sub	sp, #28
 800a2e2:	af02      	add	r7, sp, #8
 800a2e4:	6078      	str	r0, [r7, #4]
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a2ea:	60fb      	str	r3, [r7, #12]


  /* Disable The JPEG IT so the MDMA Output Callback can not be interrupted by the JPEG EOC IT or JPEG HPD IT */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800a2fa:	631a      	str	r2, [r3, #48]	@ 0x30

  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) ==
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a300:	f248 030c 	movw	r3, #32780	@ 0x800c
 800a304:	4013      	ands	r3, r2
 800a306:	2b0c      	cmp	r3, #12
 800a308:	d147      	bne.n	800a39a <JPEG_MDMAOutCpltCallback+0xbc>
      JPEG_CONTEXT_DMA) /* Check if context method is DMA and we are not in ending DMA stage */
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) == 0UL)
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a310:	f003 0320 	and.w	r3, r3, #32
 800a314:	2b00      	cmp	r3, #0
 800a316:	d138      	bne.n	800a38a <JPEG_MDMAOutCpltCallback+0xac>
    {
      hjpeg->JpegOutCount = hjpeg->OutDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	695b      	ldr	r3, [r3, #20]
 800a322:	f3c3 0310 	ubfx	r3, r3, #0, #17
 800a326:	1ad2      	subs	r2, r2, r3
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	625a      	str	r2, [r3, #36]	@ 0x24

      /*Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	69d9      	ldr	r1, [r3, #28]
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a334:	461a      	mov	r2, r3
 800a336:	68f8      	ldr	r0, [r7, #12]
 800a338:	f7f6 ffb4 	bl	80012a4 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a340:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a344:	2b00      	cmp	r3, #0
 800a346:	d120      	bne.n	800a38a <JPEG_MDMAOutCpltCallback+0xac>
      {
        /* Start MDMA FIFO Out transfer */
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	3344      	adds	r3, #68	@ 0x44
 800a352:	4619      	mov	r1, r3
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	69db      	ldr	r3, [r3, #28]
 800a358:	461c      	mov	r4, r3
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a35e:	2201      	movs	r2, #1
 800a360:	9200      	str	r2, [sp, #0]
 800a362:	4622      	mov	r2, r4
 800a364:	f000 f954 	bl	800a610 <HAL_MDMA_Start_IT>
 800a368:	4603      	mov	r3, r0
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d00d      	beq.n	800a38a <JPEG_MDMAOutCpltCallback+0xac>
                              hjpeg->OutDataLength, 1) != HAL_OK)
        {
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a372:	f043 0204 	orr.w	r2, r3, #4
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	651a      	str	r2, [r3, #80]	@ 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	2206      	movs	r2, #6
 800a37e:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
          hjpeg->ErrorCallback(hjpeg);
#else
          HAL_JPEG_ErrorCallback(hjpeg);
 800a382:	68f8      	ldr	r0, [r7, #12]
 800a384:	f7fe faa5 	bl	80088d2 <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
          return;
 800a388:	e007      	b.n	800a39a <JPEG_MDMAOutCpltCallback+0xbc>
        }
      }
    }

    /* JPEG Conversion still on going : Enable the JPEG IT */
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800a398:	631a      	str	r2, [r3, #48]	@ 0x30
  }

}
 800a39a:	3714      	adds	r7, #20
 800a39c:	46bd      	mov	sp, r7
 800a39e:	bd90      	pop	{r4, r7, pc}

0800a3a0 <JPEG_MDMAErrorCallback>:
  * @brief  MDMA Transfer error callback
  * @param  hmdma pointer to a MDMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_MDMAErrorCallback(MDMA_HandleTypeDef *hmdma)
{
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	b084      	sub	sp, #16
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	6078      	str	r0, [r7, #4]
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a3ac:	60fb      	str	r3, [r7, #12]

  /*Stop Encoding/Decoding*/
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	681a      	ldr	r2, [r3, #0]
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	f022 0201 	bic.w	r2, r2, #1
 800a3bc:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800a3cc:	631a      	str	r2, [r3, #48]	@ 0x30

  hjpeg->State = HAL_JPEG_STATE_READY;
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	2201      	movs	r2, #1
 800a3d2:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
  hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a3da:	f043 0204 	orr.w	r2, r3, #4
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	651a      	str	r2, [r3, #80]	@ 0x50

#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
  hjpeg->ErrorCallback(hjpeg);
#else
  HAL_JPEG_ErrorCallback(hjpeg);
 800a3e2:	68f8      	ldr	r0, [r7, #12]
 800a3e4:	f7fe fa75 	bl	80088d2 <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
}
 800a3e8:	bf00      	nop
 800a3ea:	3710      	adds	r7, #16
 800a3ec:	46bd      	mov	sp, r7
 800a3ee:	bd80      	pop	{r7, pc}

0800a3f0 <JPEG_MDMAOutAbortCallback>:
  * @brief  MDMA output Abort callback
  * @param  hmdma pointer to a MDMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_MDMAOutAbortCallback(MDMA_HandleTypeDef *hmdma)
{
 800a3f0:	b580      	push	{r7, lr}
 800a3f2:	b084      	sub	sp, #16
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a3fc:	60fb      	str	r3, [r7, #12]

  if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a402:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a406:	2b00      	cmp	r3, #0
 800a408:	d002      	beq.n	800a410 <JPEG_MDMAOutAbortCallback+0x20>
  {
    JPEG_DMA_EndProcess(hjpeg);
 800a40a:	68f8      	ldr	r0, [r7, #12]
 800a40c:	f7ff fdc7 	bl	8009f9e <JPEG_DMA_EndProcess>
  }
}
 800a410:	bf00      	nop
 800a412:	3710      	adds	r7, #16
 800a414:	46bd      	mov	sp, r7
 800a416:	bd80      	pop	{r7, pc}

0800a418 <JPEG_GetQuality>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG image quality from 1 to 100.
  */
static uint32_t JPEG_GetQuality(JPEG_HandleTypeDef *hjpeg)
{
 800a418:	b480      	push	{r7}
 800a41a:	b08b      	sub	sp, #44	@ 0x2c
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	6078      	str	r0, [r7, #4]
  uint32_t quality = 0;
 800a420:	2300      	movs	r3, #0
 800a422:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t quantRow, quantVal, scale, i, j;
  __IO uint32_t *tableAddress = hjpeg->Instance->QMEM0;
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	3350      	adds	r3, #80	@ 0x50
 800a42a:	61bb      	str	r3, [r7, #24]

  i = 0;
 800a42c:	2300      	movs	r3, #0
 800a42e:	623b      	str	r3, [r7, #32]
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 800a430:	e042      	b.n	800a4b8 <JPEG_GetQuality+0xa0>
  {
    quantRow = *tableAddress;
 800a432:	69bb      	ldr	r3, [r7, #24]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	617b      	str	r3, [r7, #20]
    for (j = 0; j < 4UL; j++)
 800a438:	2300      	movs	r3, #0
 800a43a:	61fb      	str	r3, [r7, #28]
 800a43c:	e033      	b.n	800a4a6 <JPEG_GetQuality+0x8e>
    {
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
 800a43e:	69fb      	ldr	r3, [r7, #28]
 800a440:	00db      	lsls	r3, r3, #3
 800a442:	697a      	ldr	r2, [r7, #20]
 800a444:	fa22 f303 	lsr.w	r3, r2, r3
 800a448:	b2db      	uxtb	r3, r3
 800a44a:	613b      	str	r3, [r7, #16]
      if (quantVal == 1UL)
 800a44c:	693b      	ldr	r3, [r7, #16]
 800a44e:	2b01      	cmp	r3, #1
 800a450:	d103      	bne.n	800a45a <JPEG_GetQuality+0x42>
      {
        /* if Quantization value = 1 then quality is 100%*/
        quality += 100UL;
 800a452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a454:	3364      	adds	r3, #100	@ 0x64
 800a456:	627b      	str	r3, [r7, #36]	@ 0x24
 800a458:	e022      	b.n	800a4a0 <JPEG_GetQuality+0x88>
      }
      else
      {
        /* Note that the quantization coefficients must be specified in the table in zigzag order */
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 800a45a:	693b      	ldr	r3, [r7, #16]
 800a45c:	2264      	movs	r2, #100	@ 0x64
 800a45e:	fb02 f303 	mul.w	r3, r2, r3
 800a462:	687a      	ldr	r2, [r7, #4]
 800a464:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800a466:	6a38      	ldr	r0, [r7, #32]
 800a468:	69f9      	ldr	r1, [r7, #28]
 800a46a:	4401      	add	r1, r0
 800a46c:	4818      	ldr	r0, [pc, #96]	@ (800a4d0 <JPEG_GetQuality+0xb8>)
 800a46e:	5c41      	ldrb	r1, [r0, r1]
 800a470:	440a      	add	r2, r1
 800a472:	7812      	ldrb	r2, [r2, #0]
 800a474:	fbb3 f3f2 	udiv	r3, r3, r2
 800a478:	60fb      	str	r3, [r7, #12]

        if (scale <= 100UL)
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	2b64      	cmp	r3, #100	@ 0x64
 800a47e:	d807      	bhi.n	800a490 <JPEG_GetQuality+0x78>
        {
          quality += (200UL - scale) / 2UL;
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	f1c3 03c8 	rsb	r3, r3, #200	@ 0xc8
 800a486:	085b      	lsrs	r3, r3, #1
 800a488:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a48a:	4413      	add	r3, r2
 800a48c:	627b      	str	r3, [r7, #36]	@ 0x24
 800a48e:	e007      	b.n	800a4a0 <JPEG_GetQuality+0x88>
        }
        else
        {
          quality += 5000UL / scale;
 800a490:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	fbb2 f3f3 	udiv	r3, r2, r3
 800a49a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a49c:	4413      	add	r3, r2
 800a49e:	627b      	str	r3, [r7, #36]	@ 0x24
    for (j = 0; j < 4UL; j++)
 800a4a0:	69fb      	ldr	r3, [r7, #28]
 800a4a2:	3301      	adds	r3, #1
 800a4a4:	61fb      	str	r3, [r7, #28]
 800a4a6:	69fb      	ldr	r3, [r7, #28]
 800a4a8:	2b03      	cmp	r3, #3
 800a4aa:	d9c8      	bls.n	800a43e <JPEG_GetQuality+0x26>
        }
      }
    }

    i += 4UL;
 800a4ac:	6a3b      	ldr	r3, [r7, #32]
 800a4ae:	3304      	adds	r3, #4
 800a4b0:	623b      	str	r3, [r7, #32]
    tableAddress ++;
 800a4b2:	69bb      	ldr	r3, [r7, #24]
 800a4b4:	3304      	adds	r3, #4
 800a4b6:	61bb      	str	r3, [r7, #24]
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 800a4b8:	6a3b      	ldr	r3, [r7, #32]
 800a4ba:	2b3c      	cmp	r3, #60	@ 0x3c
 800a4bc:	d9b9      	bls.n	800a432 <JPEG_GetQuality+0x1a>
  }

  return (quality / 64UL);
 800a4be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4c0:	099b      	lsrs	r3, r3, #6
}
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	372c      	adds	r7, #44	@ 0x2c
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4cc:	4770      	bx	lr
 800a4ce:	bf00      	nop
 800a4d0:	0801691c 	.word	0x0801691c

0800a4d4 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 800a4d4:	b580      	push	{r7, lr}
 800a4d6:	b084      	sub	sp, #16
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800a4dc:	f7f7 fffe 	bl	80024dc <HAL_GetTick>
 800a4e0:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d101      	bne.n	800a4ec <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
 800a4e8:	2301      	movs	r3, #1
 800a4ea:	e03b      	b.n	800a564 <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	2200      	movs	r2, #0
 800a4f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	2202      	movs	r2, #2
 800a4f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	68da      	ldr	r2, [r3, #12]
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	f022 0201 	bic.w	r2, r2, #1
 800a50a:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800a50c:	e00f      	b.n	800a52e <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 800a50e:	f7f7 ffe5 	bl	80024dc <HAL_GetTick>
 800a512:	4602      	mov	r2, r0
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	1ad3      	subs	r3, r2, r3
 800a518:	2b05      	cmp	r3, #5
 800a51a:	d908      	bls.n	800a52e <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	2240      	movs	r2, #64	@ 0x40
 800a520:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	2203      	movs	r2, #3
 800a526:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      return HAL_ERROR;
 800a52a:	2301      	movs	r3, #1
 800a52c:	e01a      	b.n	800a564 <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	68db      	ldr	r3, [r3, #12]
 800a534:	f003 0301 	and.w	r3, r3, #1
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d1e8      	bne.n	800a50e <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
 800a53c:	6878      	ldr	r0, [r7, #4]
 800a53e:	f000 fad3 	bl	800aae8 <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	2200      	movs	r2, #0
 800a546:	65da      	str	r2, [r3, #92]	@ 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	2200      	movs	r2, #0
 800a54c:	661a      	str	r2, [r3, #96]	@ 0x60
  hmdma->LinkedListNodeCounter  = 0;
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	2200      	movs	r2, #0
 800a552:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	2200      	movs	r2, #0
 800a558:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	2201      	movs	r2, #1
 800a55e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a562:	2300      	movs	r3, #0
}
 800a564:	4618      	mov	r0, r3
 800a566:	3710      	adds	r7, #16
 800a568:	46bd      	mov	sp, r7
 800a56a:	bd80      	pop	{r7, pc}

0800a56c <HAL_MDMA_ConfigPostRequestMask>:
  * @param  MaskData:    specifies the value to be written to MaskAddress after a request is served.
  *                      MaskAddress and MaskData could be used to automatically clear a peripheral flag when the request is served.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_ConfigPostRequestMask(MDMA_HandleTypeDef *hmdma, uint32_t MaskAddress, uint32_t MaskData)
{
 800a56c:	b480      	push	{r7}
 800a56e:	b087      	sub	sp, #28
 800a570:	af00      	add	r7, sp, #0
 800a572:	60f8      	str	r0, [r7, #12]
 800a574:	60b9      	str	r1, [r7, #8]
 800a576:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800a578:	2300      	movs	r3, #0
 800a57a:	75fb      	strb	r3, [r7, #23]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d101      	bne.n	800a586 <HAL_MDMA_ConfigPostRequestMask+0x1a>
  {
    return HAL_ERROR;
 800a582:	2301      	movs	r3, #1
 800a584:	e03e      	b.n	800a604 <HAL_MDMA_ConfigPostRequestMask+0x98>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a58c:	2b01      	cmp	r3, #1
 800a58e:	d101      	bne.n	800a594 <HAL_MDMA_ConfigPostRequestMask+0x28>
 800a590:	2302      	movs	r3, #2
 800a592:	e037      	b.n	800a604 <HAL_MDMA_ConfigPostRequestMask+0x98>
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	2201      	movs	r2, #1
 800a598:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a5a2:	b2db      	uxtb	r3, r3
 800a5a4:	2b01      	cmp	r3, #1
 800a5a6:	d126      	bne.n	800a5f6 <HAL_MDMA_ConfigPostRequestMask+0x8a>
  {
    /* if HW request set Post Request MaskAddress and MaskData,  */
    if((hmdma->Instance->CTCR & MDMA_CTCR_SWRM) == 0U)
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	691b      	ldr	r3, [r3, #16]
 800a5ae:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d11c      	bne.n	800a5f0 <HAL_MDMA_ConfigPostRequestMask+0x84>
    {
      /* Set the HW request clear Mask and Data */
      hmdma->Instance->CMAR = MaskAddress;
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	68ba      	ldr	r2, [r7, #8]
 800a5bc:	631a      	str	r2, [r3, #48]	@ 0x30
      hmdma->Instance->CMDR = MaskData;
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	687a      	ldr	r2, [r7, #4]
 800a5c4:	635a      	str	r2, [r3, #52]	@ 0x34
      -If the request is done by SW : BWM could be set to 1 or 0.
      -If the request is done by a peripheral :
         If mask address not set (0) => BWM must be set to 0
         If mask address set (different than 0) => BWM could be set to 1 or 0
      */
      if(MaskAddress == 0U)
 800a5c6:	68bb      	ldr	r3, [r7, #8]
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d108      	bne.n	800a5de <HAL_MDMA_ConfigPostRequestMask+0x72>
      {
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	691a      	ldr	r2, [r3, #16]
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800a5da:	611a      	str	r2, [r3, #16]
 800a5dc:	e00d      	b.n	800a5fa <HAL_MDMA_ConfigPostRequestMask+0x8e>
      }
      else
      {
        hmdma->Instance->CTCR |=  MDMA_CTCR_BWM;
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	691a      	ldr	r2, [r3, #16]
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800a5ec:	611a      	str	r2, [r3, #16]
 800a5ee:	e004      	b.n	800a5fa <HAL_MDMA_ConfigPostRequestMask+0x8e>
      }
    }
    else
    {
      /* Return error status */
      status =  HAL_ERROR;
 800a5f0:	2301      	movs	r3, #1
 800a5f2:	75fb      	strb	r3, [r7, #23]
 800a5f4:	e001      	b.n	800a5fa <HAL_MDMA_ConfigPostRequestMask+0x8e>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 800a5f6:	2301      	movs	r3, #1
 800a5f8:	75fb      	strb	r3, [r7, #23]
  }
  /* Release Lock */
  __HAL_UNLOCK(hmdma);
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	2200      	movs	r2, #0
 800a5fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a602:	7dfb      	ldrb	r3, [r7, #23]
}
 800a604:	4618      	mov	r0, r3
 800a606:	371c      	adds	r7, #28
 800a608:	46bd      	mov	sp, r7
 800a60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a60e:	4770      	bx	lr

0800a610 <HAL_MDMA_Start_IT>:
  * @param  BlockDataLength : The length of a block transfer in bytes
  * @param  BlockCount      : The number of a blocks to be transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Start_IT(MDMA_HandleTypeDef *hmdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t BlockDataLength, uint32_t BlockCount)
{
 800a610:	b580      	push	{r7, lr}
 800a612:	b086      	sub	sp, #24
 800a614:	af02      	add	r7, sp, #8
 800a616:	60f8      	str	r0, [r7, #12]
 800a618:	60b9      	str	r1, [r7, #8]
 800a61a:	607a      	str	r2, [r7, #4]
 800a61c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_MDMA_TRANSFER_LENGTH(BlockDataLength));
  assert_param(IS_MDMA_BLOCK_COUNT(BlockCount));

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	2b00      	cmp	r3, #0
 800a622:	d101      	bne.n	800a628 <HAL_MDMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a624:	2301      	movs	r3, #1
 800a626:	e070      	b.n	800a70a <HAL_MDMA_Start_IT+0xfa>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a62e:	2b01      	cmp	r3, #1
 800a630:	d101      	bne.n	800a636 <HAL_MDMA_Start_IT+0x26>
 800a632:	2302      	movs	r3, #2
 800a634:	e069      	b.n	800a70a <HAL_MDMA_Start_IT+0xfa>
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	2201      	movs	r2, #1
 800a63a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a644:	b2db      	uxtb	r3, r3
 800a646:	2b01      	cmp	r3, #1
 800a648:	d158      	bne.n	800a6fc <HAL_MDMA_Start_IT+0xec>
  {
    /* Change MDMA peripheral state */
    hmdma->State = HAL_MDMA_STATE_BUSY;
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	2202      	movs	r2, #2
 800a64e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Initialize the error code */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	2200      	movs	r2, #0
 800a656:	669a      	str	r2, [r3, #104]	@ 0x68

    /* Disable the peripheral */
    __HAL_MDMA_DISABLE(hmdma);
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	68da      	ldr	r2, [r3, #12]
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	f022 0201 	bic.w	r2, r2, #1
 800a666:	60da      	str	r2, [r3, #12]

    /* Configure the source, destination address and the data length */
    MDMA_SetConfig(hmdma, SrcAddress, DstAddress, BlockDataLength, BlockCount);
 800a668:	69bb      	ldr	r3, [r7, #24]
 800a66a:	9300      	str	r3, [sp, #0]
 800a66c:	683b      	ldr	r3, [r7, #0]
 800a66e:	687a      	ldr	r2, [r7, #4]
 800a670:	68b9      	ldr	r1, [r7, #8]
 800a672:	68f8      	ldr	r0, [r7, #12]
 800a674:	f000 f9c8 	bl	800aa08 <MDMA_SetConfig>

    /* Enable Common interrupts i.e Transfer Error IT and Channel Transfer Complete IT*/
    __HAL_MDMA_ENABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC));
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	68da      	ldr	r2, [r3, #12]
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	f042 0206 	orr.w	r2, r2, #6
 800a686:	60da      	str	r2, [r3, #12]

    if(hmdma->XferBlockCpltCallback != NULL)
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d007      	beq.n	800a6a0 <HAL_MDMA_Start_IT+0x90>
    {
      /* if Block transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BT);
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	68da      	ldr	r2, [r3, #12]
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	f042 0210 	orr.w	r2, r2, #16
 800a69e:	60da      	str	r2, [r3, #12]
    }

    if(hmdma->XferRepeatBlockCpltCallback != NULL)
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d007      	beq.n	800a6b8 <HAL_MDMA_Start_IT+0xa8>
    {
      /* if Repeated Block transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BRT);
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	68da      	ldr	r2, [r3, #12]
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	f042 0208 	orr.w	r2, r2, #8
 800a6b6:	60da      	str	r2, [r3, #12]
    }

    if(hmdma->XferBufferCpltCallback != NULL)
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d007      	beq.n	800a6d0 <HAL_MDMA_Start_IT+0xc0>
    {
      /* if buffer transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BFTC);
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	68da      	ldr	r2, [r3, #12]
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	f042 0220 	orr.w	r2, r2, #32
 800a6ce:	60da      	str	r2, [r3, #12]
    }

    /* Enable the Peripheral */
    __HAL_MDMA_ENABLE(hmdma);
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	68da      	ldr	r2, [r3, #12]
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	f042 0201 	orr.w	r2, r2, #1
 800a6de:	60da      	str	r2, [r3, #12]

    if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	685b      	ldr	r3, [r3, #4]
 800a6e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a6e8:	d10e      	bne.n	800a708 <HAL_MDMA_Start_IT+0xf8>
    {
      /* activate If SW request mode*/
      hmdma->Instance->CCR |=  MDMA_CCR_SWRQ;
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	68da      	ldr	r2, [r3, #12]
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800a6f8:	60da      	str	r2, [r3, #12]
 800a6fa:	e005      	b.n	800a708 <HAL_MDMA_Start_IT+0xf8>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hmdma);
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	2200      	movs	r2, #0
 800a700:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Return error status */
    return HAL_BUSY;
 800a704:	2302      	movs	r3, #2
 800a706:	e000      	b.n	800a70a <HAL_MDMA_Start_IT+0xfa>
  }

  return HAL_OK;
 800a708:	2300      	movs	r3, #0
}
 800a70a:	4618      	mov	r0, r3
 800a70c:	3710      	adds	r7, #16
 800a70e:	46bd      	mov	sp, r7
 800a710:	bd80      	pop	{r7, pc}

0800a712 <HAL_MDMA_Abort_IT>:
  * @param  hmdma  : pointer to a MDMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort_IT(MDMA_HandleTypeDef *hmdma)
{
 800a712:	b480      	push	{r7}
 800a714:	b083      	sub	sp, #12
 800a716:	af00      	add	r7, sp, #0
 800a718:	6078      	str	r0, [r7, #4]
  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d101      	bne.n	800a724 <HAL_MDMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800a720:	2301      	movs	r3, #1
 800a722:	e017      	b.n	800a754 <HAL_MDMA_Abort_IT+0x42>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a72a:	b2db      	uxtb	r3, r3
 800a72c:	2b02      	cmp	r3, #2
 800a72e:	d004      	beq.n	800a73a <HAL_MDMA_Abort_IT+0x28>
  {
    /* No transfer ongoing */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	2280      	movs	r2, #128	@ 0x80
 800a734:	669a      	str	r2, [r3, #104]	@ 0x68

    return HAL_ERROR;
 800a736:	2301      	movs	r3, #1
 800a738:	e00c      	b.n	800a754 <HAL_MDMA_Abort_IT+0x42>
  }
  else
  {
    /* Set Abort State  */
    hmdma->State = HAL_MDMA_STATE_ABORT;
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	2204      	movs	r2, #4
 800a73e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the stream */
    __HAL_MDMA_DISABLE(hmdma);
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	68da      	ldr	r2, [r3, #12]
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	f022 0201 	bic.w	r2, r2, #1
 800a750:	60da      	str	r2, [r3, #12]
  }

  return HAL_OK;
 800a752:	2300      	movs	r3, #0
}
 800a754:	4618      	mov	r0, r3
 800a756:	370c      	adds	r7, #12
 800a758:	46bd      	mov	sp, r7
 800a75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a75e:	4770      	bx	lr

0800a760 <HAL_MDMA_IRQHandler>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval None
  */
void HAL_MDMA_IRQHandler(MDMA_HandleTypeDef *hmdma)
{
 800a760:	b580      	push	{r7, lr}
 800a762:	b086      	sub	sp, #24
 800a764:	af00      	add	r7, sp, #0
 800a766:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 800a768:	2300      	movs	r3, #0
 800a76a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800a76c:	4b91      	ldr	r3, [pc, #580]	@ (800a9b4 <HAL_MDMA_IRQHandler+0x254>)
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	4a91      	ldr	r2, [pc, #580]	@ (800a9b8 <HAL_MDMA_IRQHandler+0x258>)
 800a772:	fba2 2303 	umull	r2, r3, r2, r3
 800a776:	0a9b      	lsrs	r3, r3, #10
 800a778:	617b      	str	r3, [r7, #20]

  uint32_t generalIntFlag, errorFlag;

  /* General Interrupt Flag management ****************************************/
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	461a      	mov	r2, r3
 800a780:	4b8e      	ldr	r3, [pc, #568]	@ (800a9bc <HAL_MDMA_IRQHandler+0x25c>)
 800a782:	4413      	add	r3, r2
 800a784:	099b      	lsrs	r3, r3, #6
 800a786:	f003 031f 	and.w	r3, r3, #31
 800a78a:	2201      	movs	r2, #1
 800a78c:	fa02 f303 	lsl.w	r3, r2, r3
 800a790:	613b      	str	r3, [r7, #16]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 800a792:	f04f 43a4 	mov.w	r3, #1375731712	@ 0x52000000
 800a796:	681a      	ldr	r2, [r3, #0]
 800a798:	693b      	ldr	r3, [r7, #16]
 800a79a:	4013      	ands	r3, r2
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	f000 812d 	beq.w	800a9fc <HAL_MDMA_IRQHandler+0x29c>
  {
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
  }

  /* Transfer Error Interrupt management ***************************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	f003 0301 	and.w	r3, r3, #1
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d054      	beq.n	800a85a <HAL_MDMA_IRQHandler+0xfa>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	68db      	ldr	r3, [r3, #12]
 800a7b6:	f003 0302 	and.w	r3, r3, #2
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d04d      	beq.n	800a85a <HAL_MDMA_IRQHandler+0xfa>
    {
      /* Disable the transfer error interrupt */
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	68da      	ldr	r2, [r3, #12]
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	f022 0202 	bic.w	r2, r2, #2
 800a7cc:	60da      	str	r2, [r3, #12]

      /* Get the transfer error source flag */
      errorFlag = hmdma->Instance->CESR;
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	689b      	ldr	r3, [r3, #8]
 800a7d4:	60fb      	str	r3, [r7, #12]

      if((errorFlag & MDMA_CESR_TED) == 0U)
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d106      	bne.n	800a7ee <HAL_MDMA_IRQHandler+0x8e>
      {
        /* Update error code : Read Transfer error  */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a7e4:	f043 0201 	orr.w	r2, r3, #1
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	669a      	str	r2, [r3, #104]	@ 0x68
 800a7ec:	e005      	b.n	800a7fa <HAL_MDMA_IRQHandler+0x9a>
      }
      else
      {
        /* Update error code : Write Transfer error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a7f2:	f043 0202 	orr.w	r2, r3, #2
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_TEMD) != 0U)
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a800:	2b00      	cmp	r3, #0
 800a802:	d005      	beq.n	800a810 <HAL_MDMA_IRQHandler+0xb0>
      {
        /* Update error code : Error Mask Data */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a808:	f043 0204 	orr.w	r2, r3, #4
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_TELD) != 0U)
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a816:	2b00      	cmp	r3, #0
 800a818:	d005      	beq.n	800a826 <HAL_MDMA_IRQHandler+0xc6>
      {
        /* Update error code : Error Linked list */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a81e:	f043 0208 	orr.w	r2, r3, #8
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_ASE) != 0U)
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d005      	beq.n	800a83c <HAL_MDMA_IRQHandler+0xdc>
      {
        /* Update error code : Address/Size alignment error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a834:	f043 0210 	orr.w	r2, r3, #16
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_BSE) != 0U)
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a842:	2b00      	cmp	r3, #0
 800a844:	d005      	beq.n	800a852 <HAL_MDMA_IRQHandler+0xf2>
      {
        /* Update error code : Block Size error error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a84a:	f043 0220 	orr.w	r2, r3, #32
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      /* Clear the transfer error flags */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	2201      	movs	r2, #1
 800a858:	605a      	str	r2, [r3, #4]
    }
  }

  /* Buffer Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	f003 0310 	and.w	r3, r3, #16
 800a864:	2b00      	cmp	r3, #0
 800a866:	d012      	beq.n	800a88e <HAL_MDMA_IRQHandler+0x12e>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	68db      	ldr	r3, [r3, #12]
 800a86e:	f003 0320 	and.w	r3, r3, #32
 800a872:	2b00      	cmp	r3, #0
 800a874:	d00b      	beq.n	800a88e <HAL_MDMA_IRQHandler+0x12e>
    {
      /* Clear the buffer transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	2210      	movs	r2, #16
 800a87c:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBufferCpltCallback != NULL)
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a882:	2b00      	cmp	r3, #0
 800a884:	d003      	beq.n	800a88e <HAL_MDMA_IRQHandler+0x12e>
      {
        /* Buffer transfer callback */
        hmdma->XferBufferCpltCallback(hmdma);
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a88a:	6878      	ldr	r0, [r7, #4]
 800a88c:	4798      	blx	r3
      }
    }
  }

  /* Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	f003 0308 	and.w	r3, r3, #8
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d012      	beq.n	800a8c2 <HAL_MDMA_IRQHandler+0x162>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	68db      	ldr	r3, [r3, #12]
 800a8a2:	f003 0310 	and.w	r3, r3, #16
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d00b      	beq.n	800a8c2 <HAL_MDMA_IRQHandler+0x162>
    {
      /* Clear the block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	2208      	movs	r2, #8
 800a8b0:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBlockCpltCallback != NULL)
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d003      	beq.n	800a8c2 <HAL_MDMA_IRQHandler+0x162>
      {
        /* Block transfer callback */
        hmdma->XferBlockCpltCallback(hmdma);
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a8be:	6878      	ldr	r0, [r7, #4]
 800a8c0:	4798      	blx	r3
      }
    }
  }

  /* Repeated Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	f003 0304 	and.w	r3, r3, #4
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d012      	beq.n	800a8f6 <HAL_MDMA_IRQHandler+0x196>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	68db      	ldr	r3, [r3, #12]
 800a8d6:	f003 0308 	and.w	r3, r3, #8
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d00b      	beq.n	800a8f6 <HAL_MDMA_IRQHandler+0x196>
    {
      /* Clear the repeat block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	2204      	movs	r2, #4
 800a8e4:	605a      	str	r2, [r3, #4]

      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d003      	beq.n	800a8f6 <HAL_MDMA_IRQHandler+0x196>
      {
        /* Repeated Block transfer callback */
        hmdma->XferRepeatBlockCpltCallback(hmdma);
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a8f2:	6878      	ldr	r0, [r7, #4]
 800a8f4:	4798      	blx	r3
      }
    }
  }

  /* Channel Transfer Complete Interrupt management ***********************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	f003 0302 	and.w	r3, r3, #2
 800a900:	2b00      	cmp	r3, #0
 800a902:	d039      	beq.n	800a978 <HAL_MDMA_IRQHandler+0x218>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	68db      	ldr	r3, [r3, #12]
 800a90a:	f003 0304 	and.w	r3, r3, #4
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d032      	beq.n	800a978 <HAL_MDMA_IRQHandler+0x218>
    {
      /* Disable all the transfer interrupts */
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	68da      	ldr	r2, [r3, #12]
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	f022 023e 	bic.w	r2, r2, #62	@ 0x3e
 800a920:	60da      	str	r2, [r3, #12]

      if(HAL_MDMA_STATE_ABORT == hmdma->State)
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a928:	b2db      	uxtb	r3, r3
 800a92a:	2b04      	cmp	r3, #4
 800a92c:	d110      	bne.n	800a950 <HAL_MDMA_IRQHandler+0x1f0>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hmdma);
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	2200      	movs	r2, #0
 800a932:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Change the DMA state */
        hmdma->State = HAL_MDMA_STATE_READY;
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	2201      	movs	r2, #1
 800a93a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        if(hmdma->XferAbortCallback != NULL)
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a942:	2b00      	cmp	r3, #0
 800a944:	d05c      	beq.n	800aa00 <HAL_MDMA_IRQHandler+0x2a0>
        {
          hmdma->XferAbortCallback(hmdma);
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a94a:	6878      	ldr	r0, [r7, #4]
 800a94c:	4798      	blx	r3
        }
        return;
 800a94e:	e057      	b.n	800aa00 <HAL_MDMA_IRQHandler+0x2a0>
      }

      /* Clear the Channel Transfer Complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	2202      	movs	r2, #2
 800a956:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hmdma);
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	2200      	movs	r2, #0
 800a95c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      /* Change MDMA peripheral state */
      hmdma->State = HAL_MDMA_STATE_READY;
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	2201      	movs	r2, #1
 800a964:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if(hmdma->XferCpltCallback != NULL)
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d003      	beq.n	800a978 <HAL_MDMA_IRQHandler+0x218>
      {
        /* Channel Transfer Complete callback */
        hmdma->XferCpltCallback(hmdma);
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a974:	6878      	ldr	r0, [r7, #4]
 800a976:	4798      	blx	r3
      }
    }
  }

  /* manage error case */
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d040      	beq.n	800aa02 <HAL_MDMA_IRQHandler+0x2a2>
  {
    hmdma->State = HAL_MDMA_STATE_ABORT;
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	2204      	movs	r2, #4
 800a984:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the channel */
    __HAL_MDMA_DISABLE(hmdma);
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	68da      	ldr	r2, [r3, #12]
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	f022 0201 	bic.w	r2, r2, #1
 800a996:	60da      	str	r2, [r3, #12]

    do
    {
      if (++count > timeout)
 800a998:	68bb      	ldr	r3, [r7, #8]
 800a99a:	3301      	adds	r3, #1
 800a99c:	60bb      	str	r3, [r7, #8]
 800a99e:	697a      	ldr	r2, [r7, #20]
 800a9a0:	429a      	cmp	r2, r3
 800a9a2:	d30d      	bcc.n	800a9c0 <HAL_MDMA_IRQHandler+0x260>
      {
        break;
      }
    }
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	68db      	ldr	r3, [r3, #12]
 800a9aa:	f003 0301 	and.w	r3, r3, #1
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d1f2      	bne.n	800a998 <HAL_MDMA_IRQHandler+0x238>
 800a9b2:	e006      	b.n	800a9c2 <HAL_MDMA_IRQHandler+0x262>
 800a9b4:	24000004 	.word	0x24000004
 800a9b8:	1b4e81b5 	.word	0x1b4e81b5
 800a9bc:	adffffc0 	.word	0xadffffc0
        break;
 800a9c0:	bf00      	nop

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	2200      	movs	r2, #0
 800a9c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	68db      	ldr	r3, [r3, #12]
 800a9d0:	f003 0301 	and.w	r3, r3, #1
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d004      	beq.n	800a9e2 <HAL_MDMA_IRQHandler+0x282>
    {
      /* Change the MDMA state to error if MDMA disable fails */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	2203      	movs	r2, #3
 800a9dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800a9e0:	e003      	b.n	800a9ea <HAL_MDMA_IRQHandler+0x28a>
    }
    else
    {
      /* Change the MDMA state to Ready if MDMA disable success */
      hmdma->State = HAL_MDMA_STATE_READY;
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	2201      	movs	r2, #1
 800a9e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    }


    if (hmdma->XferErrorCallback != NULL)
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d007      	beq.n	800aa02 <HAL_MDMA_IRQHandler+0x2a2>
    {
      /* Transfer error callback */
      hmdma->XferErrorCallback(hmdma);
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a9f6:	6878      	ldr	r0, [r7, #4]
 800a9f8:	4798      	blx	r3
 800a9fa:	e002      	b.n	800aa02 <HAL_MDMA_IRQHandler+0x2a2>
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
 800a9fc:	bf00      	nop
 800a9fe:	e000      	b.n	800aa02 <HAL_MDMA_IRQHandler+0x2a2>
        return;
 800aa00:	bf00      	nop
    }
  }
}
 800aa02:	3718      	adds	r7, #24
 800aa04:	46bd      	mov	sp, r7
 800aa06:	bd80      	pop	{r7, pc}

0800aa08 <MDMA_SetConfig>:
  * @param  BlockDataLength : The length of a block transfer in bytes
  * @param  BlockCount: The number of blocks to be transferred
  * @retval HAL status
  */
static void MDMA_SetConfig(MDMA_HandleTypeDef *hmdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t BlockDataLength, uint32_t BlockCount)
{
 800aa08:	b480      	push	{r7}
 800aa0a:	b087      	sub	sp, #28
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	60f8      	str	r0, [r7, #12]
 800aa10:	60b9      	str	r1, [r7, #8]
 800aa12:	607a      	str	r2, [r7, #4]
 800aa14:	603b      	str	r3, [r7, #0]
  uint32_t addressMask;

  /* Configure the MDMA Channel data length */
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	695a      	ldr	r2, [r3, #20]
 800aa1c:	4b31      	ldr	r3, [pc, #196]	@ (800aae4 <MDMA_SetConfig+0xdc>)
 800aa1e:	4013      	ands	r3, r2
 800aa20:	683a      	ldr	r2, [r7, #0]
 800aa22:	f3c2 0110 	ubfx	r1, r2, #0, #17
 800aa26:	68fa      	ldr	r2, [r7, #12]
 800aa28:	6812      	ldr	r2, [r2, #0]
 800aa2a:	430b      	orrs	r3, r1
 800aa2c:	6153      	str	r3, [r2, #20]

  /* Configure the MDMA block repeat count */
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	695b      	ldr	r3, [r3, #20]
 800aa34:	f3c3 0113 	ubfx	r1, r3, #0, #20
 800aa38:	6a3b      	ldr	r3, [r7, #32]
 800aa3a:	3b01      	subs	r3, #1
 800aa3c:	051a      	lsls	r2, r3, #20
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	430a      	orrs	r2, r1
 800aa44:	615a      	str	r2, [r3, #20]

  /* Clear all interrupt flags */
  __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_CISR_BRTIF | MDMA_CISR_BTIF | MDMA_CISR_TCIF);
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	221f      	movs	r2, #31
 800aa4c:	605a      	str	r2, [r3, #4]

  /* Configure MDMA Channel destination address */
  hmdma->Instance->CDAR = DstAddress;
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	687a      	ldr	r2, [r7, #4]
 800aa54:	61da      	str	r2, [r3, #28]

  /* Configure MDMA Channel Source address */
  hmdma->Instance->CSAR = SrcAddress;
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	68ba      	ldr	r2, [r7, #8]
 800aa5c:	619a      	str	r2, [r3, #24]

  addressMask = SrcAddress & 0xFF000000U;
 800aa5e:	68bb      	ldr	r3, [r7, #8]
 800aa60:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800aa64:	617b      	str	r3, [r7, #20]
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 800aa66:	697b      	ldr	r3, [r7, #20]
 800aa68:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aa6c:	d002      	beq.n	800aa74 <MDMA_SetConfig+0x6c>
 800aa6e:	697b      	ldr	r3, [r7, #20]
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d108      	bne.n	800aa86 <MDMA_SetConfig+0x7e>
  {
    /*The AHBSbus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_SBUS;
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800aa82:	629a      	str	r2, [r3, #40]	@ 0x28
 800aa84:	e007      	b.n	800aa96 <MDMA_SetConfig+0x8e>
  }
  else
  {
    /*The AXI bus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800aa94:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  addressMask = DstAddress & 0xFF000000U;
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800aa9c:	617b      	str	r3, [r7, #20]
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 800aa9e:	697b      	ldr	r3, [r7, #20]
 800aaa0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aaa4:	d002      	beq.n	800aaac <MDMA_SetConfig+0xa4>
 800aaa6:	697b      	ldr	r3, [r7, #20]
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d108      	bne.n	800aabe <MDMA_SetConfig+0xb6>
  {
    /*The AHB bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_DBUS;
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800aaba:	629a      	str	r2, [r3, #40]	@ 0x28
 800aabc:	e007      	b.n	800aace <MDMA_SetConfig+0xc6>
  }
  else
  {
    /*The AXI bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_DBUS);
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800aacc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Set the linked list register to the first node of the list */
  hmdma->Instance->CLAR = (uint32_t)hmdma->FirstLinkedListNodeAddress;
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800aad8:	bf00      	nop
 800aada:	371c      	adds	r7, #28
 800aadc:	46bd      	mov	sp, r7
 800aade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae2:	4770      	bx	lr
 800aae4:	fffe0000 	.word	0xfffe0000

0800aae8 <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 800aae8:	b480      	push	{r7}
 800aaea:	b085      	sub	sp, #20
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	68d9      	ldr	r1, [r3, #12]
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	691a      	ldr	r2, [r3, #16]
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	430a      	orrs	r2, r1
 800aafe:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	695a      	ldr	r2, [r3, #20]
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	699b      	ldr	r3, [r3, #24]
 800ab08:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800ab0e:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	6a1b      	ldr	r3, [r3, #32]
 800ab14:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800ab1a:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab20:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800ab26:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab2c:	3b01      	subs	r3, #1
 800ab2e:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
 800ab30:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 800ab3c:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800ab3e:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	685b      	ldr	r3, [r3, #4]
 800ab44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ab48:	d107      	bne.n	800ab5a <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	691a      	ldr	r2, [r3, #16]
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	f042 4240 	orr.w	r2, r2, #3221225472	@ 0xc0000000
 800ab58:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	2200      	movs	r2, #0
 800ab60:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	da11      	bge.n	800ab8e <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	695a      	ldr	r2, [r3, #20]
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800ab78:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab7e:	425b      	negs	r3, r3
 800ab80:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	68fa      	ldr	r2, [r7, #12]
 800ab88:	b292      	uxth	r2, r2
 800ab8a:	621a      	str	r2, [r3, #32]
 800ab8c:	e006      	b.n	800ab9c <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab92:	461a      	mov	r2, r3
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	b292      	uxth	r2, r2
 800ab9a:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	da15      	bge.n	800abd0 <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	695a      	ldr	r2, [r3, #20]
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 800abb2:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800abb8:	425b      	negs	r3, r3
 800abba:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	6a19      	ldr	r1, [r3, #32]
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	041a      	lsls	r2, r3, #16
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	430a      	orrs	r2, r1
 800abcc:	621a      	str	r2, [r3, #32]
 800abce:	e009      	b.n	800abe4 <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	6a19      	ldr	r1, [r3, #32]
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800abda:	041a      	lsls	r2, r3, #16
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	430a      	orrs	r2, r1
 800abe2:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	685b      	ldr	r3, [r3, #4]
 800abe8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800abec:	d006      	beq.n	800abfc <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	685a      	ldr	r2, [r3, #4]
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	b2d2      	uxtb	r2, r2
 800abf8:	629a      	str	r2, [r3, #40]	@ 0x28
 800abfa:	e003      	b.n	800ac04 <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	2200      	movs	r2, #0
 800ac02:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	2200      	movs	r2, #0
 800ac0a:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800ac0c:	bf00      	nop
 800ac0e:	3714      	adds	r7, #20
 800ac10:	46bd      	mov	sp, r7
 800ac12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac16:	4770      	bx	lr

0800ac18 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800ac18:	b580      	push	{r7, lr}
 800ac1a:	b086      	sub	sp, #24
 800ac1c:	af02      	add	r7, sp, #8
 800ac1e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d101      	bne.n	800ac2a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800ac26:	2301      	movs	r3, #1
 800ac28:	e0fe      	b.n	800ae28 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800ac30:	b2db      	uxtb	r3, r3
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d106      	bne.n	800ac44 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	2200      	movs	r2, #0
 800ac3a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800ac3e:	6878      	ldr	r0, [r7, #4]
 800ac40:	f00a fcca 	bl	80155d8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	2203      	movs	r2, #3
 800ac48:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	4618      	mov	r0, r3
 800ac52:	f006 ffce 	bl	8011bf2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	6818      	ldr	r0, [r3, #0]
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	7c1a      	ldrb	r2, [r3, #16]
 800ac5e:	f88d 2000 	strb.w	r2, [sp]
 800ac62:	3304      	adds	r3, #4
 800ac64:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ac66:	f006 fe9f 	bl	80119a8 <USB_CoreInit>
 800ac6a:	4603      	mov	r3, r0
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d005      	beq.n	800ac7c <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	2202      	movs	r2, #2
 800ac74:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800ac78:	2301      	movs	r3, #1
 800ac7a:	e0d5      	b.n	800ae28 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	2100      	movs	r1, #0
 800ac82:	4618      	mov	r0, r3
 800ac84:	f006 ffc6 	bl	8011c14 <USB_SetCurrentMode>
 800ac88:	4603      	mov	r3, r0
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d005      	beq.n	800ac9a <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	2202      	movs	r2, #2
 800ac92:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800ac96:	2301      	movs	r3, #1
 800ac98:	e0c6      	b.n	800ae28 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ac9a:	2300      	movs	r3, #0
 800ac9c:	73fb      	strb	r3, [r7, #15]
 800ac9e:	e04a      	b.n	800ad36 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800aca0:	7bfa      	ldrb	r2, [r7, #15]
 800aca2:	6879      	ldr	r1, [r7, #4]
 800aca4:	4613      	mov	r3, r2
 800aca6:	00db      	lsls	r3, r3, #3
 800aca8:	4413      	add	r3, r2
 800acaa:	009b      	lsls	r3, r3, #2
 800acac:	440b      	add	r3, r1
 800acae:	3315      	adds	r3, #21
 800acb0:	2201      	movs	r2, #1
 800acb2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800acb4:	7bfa      	ldrb	r2, [r7, #15]
 800acb6:	6879      	ldr	r1, [r7, #4]
 800acb8:	4613      	mov	r3, r2
 800acba:	00db      	lsls	r3, r3, #3
 800acbc:	4413      	add	r3, r2
 800acbe:	009b      	lsls	r3, r3, #2
 800acc0:	440b      	add	r3, r1
 800acc2:	3314      	adds	r3, #20
 800acc4:	7bfa      	ldrb	r2, [r7, #15]
 800acc6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800acc8:	7bfa      	ldrb	r2, [r7, #15]
 800acca:	7bfb      	ldrb	r3, [r7, #15]
 800accc:	b298      	uxth	r0, r3
 800acce:	6879      	ldr	r1, [r7, #4]
 800acd0:	4613      	mov	r3, r2
 800acd2:	00db      	lsls	r3, r3, #3
 800acd4:	4413      	add	r3, r2
 800acd6:	009b      	lsls	r3, r3, #2
 800acd8:	440b      	add	r3, r1
 800acda:	332e      	adds	r3, #46	@ 0x2e
 800acdc:	4602      	mov	r2, r0
 800acde:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800ace0:	7bfa      	ldrb	r2, [r7, #15]
 800ace2:	6879      	ldr	r1, [r7, #4]
 800ace4:	4613      	mov	r3, r2
 800ace6:	00db      	lsls	r3, r3, #3
 800ace8:	4413      	add	r3, r2
 800acea:	009b      	lsls	r3, r3, #2
 800acec:	440b      	add	r3, r1
 800acee:	3318      	adds	r3, #24
 800acf0:	2200      	movs	r2, #0
 800acf2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800acf4:	7bfa      	ldrb	r2, [r7, #15]
 800acf6:	6879      	ldr	r1, [r7, #4]
 800acf8:	4613      	mov	r3, r2
 800acfa:	00db      	lsls	r3, r3, #3
 800acfc:	4413      	add	r3, r2
 800acfe:	009b      	lsls	r3, r3, #2
 800ad00:	440b      	add	r3, r1
 800ad02:	331c      	adds	r3, #28
 800ad04:	2200      	movs	r2, #0
 800ad06:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800ad08:	7bfa      	ldrb	r2, [r7, #15]
 800ad0a:	6879      	ldr	r1, [r7, #4]
 800ad0c:	4613      	mov	r3, r2
 800ad0e:	00db      	lsls	r3, r3, #3
 800ad10:	4413      	add	r3, r2
 800ad12:	009b      	lsls	r3, r3, #2
 800ad14:	440b      	add	r3, r1
 800ad16:	3320      	adds	r3, #32
 800ad18:	2200      	movs	r2, #0
 800ad1a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800ad1c:	7bfa      	ldrb	r2, [r7, #15]
 800ad1e:	6879      	ldr	r1, [r7, #4]
 800ad20:	4613      	mov	r3, r2
 800ad22:	00db      	lsls	r3, r3, #3
 800ad24:	4413      	add	r3, r2
 800ad26:	009b      	lsls	r3, r3, #2
 800ad28:	440b      	add	r3, r1
 800ad2a:	3324      	adds	r3, #36	@ 0x24
 800ad2c:	2200      	movs	r2, #0
 800ad2e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ad30:	7bfb      	ldrb	r3, [r7, #15]
 800ad32:	3301      	adds	r3, #1
 800ad34:	73fb      	strb	r3, [r7, #15]
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	791b      	ldrb	r3, [r3, #4]
 800ad3a:	7bfa      	ldrb	r2, [r7, #15]
 800ad3c:	429a      	cmp	r2, r3
 800ad3e:	d3af      	bcc.n	800aca0 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ad40:	2300      	movs	r3, #0
 800ad42:	73fb      	strb	r3, [r7, #15]
 800ad44:	e044      	b.n	800add0 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800ad46:	7bfa      	ldrb	r2, [r7, #15]
 800ad48:	6879      	ldr	r1, [r7, #4]
 800ad4a:	4613      	mov	r3, r2
 800ad4c:	00db      	lsls	r3, r3, #3
 800ad4e:	4413      	add	r3, r2
 800ad50:	009b      	lsls	r3, r3, #2
 800ad52:	440b      	add	r3, r1
 800ad54:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800ad58:	2200      	movs	r2, #0
 800ad5a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800ad5c:	7bfa      	ldrb	r2, [r7, #15]
 800ad5e:	6879      	ldr	r1, [r7, #4]
 800ad60:	4613      	mov	r3, r2
 800ad62:	00db      	lsls	r3, r3, #3
 800ad64:	4413      	add	r3, r2
 800ad66:	009b      	lsls	r3, r3, #2
 800ad68:	440b      	add	r3, r1
 800ad6a:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800ad6e:	7bfa      	ldrb	r2, [r7, #15]
 800ad70:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800ad72:	7bfa      	ldrb	r2, [r7, #15]
 800ad74:	6879      	ldr	r1, [r7, #4]
 800ad76:	4613      	mov	r3, r2
 800ad78:	00db      	lsls	r3, r3, #3
 800ad7a:	4413      	add	r3, r2
 800ad7c:	009b      	lsls	r3, r3, #2
 800ad7e:	440b      	add	r3, r1
 800ad80:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800ad84:	2200      	movs	r2, #0
 800ad86:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800ad88:	7bfa      	ldrb	r2, [r7, #15]
 800ad8a:	6879      	ldr	r1, [r7, #4]
 800ad8c:	4613      	mov	r3, r2
 800ad8e:	00db      	lsls	r3, r3, #3
 800ad90:	4413      	add	r3, r2
 800ad92:	009b      	lsls	r3, r3, #2
 800ad94:	440b      	add	r3, r1
 800ad96:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800ad9a:	2200      	movs	r2, #0
 800ad9c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800ad9e:	7bfa      	ldrb	r2, [r7, #15]
 800ada0:	6879      	ldr	r1, [r7, #4]
 800ada2:	4613      	mov	r3, r2
 800ada4:	00db      	lsls	r3, r3, #3
 800ada6:	4413      	add	r3, r2
 800ada8:	009b      	lsls	r3, r3, #2
 800adaa:	440b      	add	r3, r1
 800adac:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800adb0:	2200      	movs	r2, #0
 800adb2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800adb4:	7bfa      	ldrb	r2, [r7, #15]
 800adb6:	6879      	ldr	r1, [r7, #4]
 800adb8:	4613      	mov	r3, r2
 800adba:	00db      	lsls	r3, r3, #3
 800adbc:	4413      	add	r3, r2
 800adbe:	009b      	lsls	r3, r3, #2
 800adc0:	440b      	add	r3, r1
 800adc2:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800adc6:	2200      	movs	r2, #0
 800adc8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800adca:	7bfb      	ldrb	r3, [r7, #15]
 800adcc:	3301      	adds	r3, #1
 800adce:	73fb      	strb	r3, [r7, #15]
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	791b      	ldrb	r3, [r3, #4]
 800add4:	7bfa      	ldrb	r2, [r7, #15]
 800add6:	429a      	cmp	r2, r3
 800add8:	d3b5      	bcc.n	800ad46 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	6818      	ldr	r0, [r3, #0]
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	7c1a      	ldrb	r2, [r3, #16]
 800ade2:	f88d 2000 	strb.w	r2, [sp]
 800ade6:	3304      	adds	r3, #4
 800ade8:	cb0e      	ldmia	r3, {r1, r2, r3}
 800adea:	f006 ff5f 	bl	8011cac <USB_DevInit>
 800adee:	4603      	mov	r3, r0
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d005      	beq.n	800ae00 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	2202      	movs	r2, #2
 800adf8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800adfc:	2301      	movs	r3, #1
 800adfe:	e013      	b.n	800ae28 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	2200      	movs	r2, #0
 800ae04:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	2201      	movs	r2, #1
 800ae0a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	7b1b      	ldrb	r3, [r3, #12]
 800ae12:	2b01      	cmp	r3, #1
 800ae14:	d102      	bne.n	800ae1c <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800ae16:	6878      	ldr	r0, [r7, #4]
 800ae18:	f001 f96e 	bl	800c0f8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	4618      	mov	r0, r3
 800ae22:	f007 ffa2 	bl	8012d6a <USB_DevDisconnect>

  return HAL_OK;
 800ae26:	2300      	movs	r3, #0
}
 800ae28:	4618      	mov	r0, r3
 800ae2a:	3710      	adds	r7, #16
 800ae2c:	46bd      	mov	sp, r7
 800ae2e:	bd80      	pop	{r7, pc}

0800ae30 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800ae30:	b580      	push	{r7, lr}
 800ae32:	b084      	sub	sp, #16
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800ae44:	2b01      	cmp	r3, #1
 800ae46:	d101      	bne.n	800ae4c <HAL_PCD_Start+0x1c>
 800ae48:	2302      	movs	r3, #2
 800ae4a:	e022      	b.n	800ae92 <HAL_PCD_Start+0x62>
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	2201      	movs	r2, #1
 800ae50:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	68db      	ldr	r3, [r3, #12]
 800ae58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d009      	beq.n	800ae74 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800ae64:	2b01      	cmp	r3, #1
 800ae66:	d105      	bne.n	800ae74 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae6c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	4618      	mov	r0, r3
 800ae7a:	f006 fea9 	bl	8011bd0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	4618      	mov	r0, r3
 800ae84:	f007 ff50 	bl	8012d28 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	2200      	movs	r2, #0
 800ae8c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800ae90:	2300      	movs	r3, #0
}
 800ae92:	4618      	mov	r0, r3
 800ae94:	3710      	adds	r7, #16
 800ae96:	46bd      	mov	sp, r7
 800ae98:	bd80      	pop	{r7, pc}

0800ae9a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800ae9a:	b590      	push	{r4, r7, lr}
 800ae9c:	b08d      	sub	sp, #52	@ 0x34
 800ae9e:	af00      	add	r7, sp, #0
 800aea0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aea8:	6a3b      	ldr	r3, [r7, #32]
 800aeaa:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	4618      	mov	r0, r3
 800aeb2:	f008 f80e 	bl	8012ed2 <USB_GetMode>
 800aeb6:	4603      	mov	r3, r0
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	f040 84b9 	bne.w	800b830 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	4618      	mov	r0, r3
 800aec4:	f007 ff72 	bl	8012dac <USB_ReadInterrupts>
 800aec8:	4603      	mov	r3, r0
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	f000 84af 	beq.w	800b82e <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800aed0:	69fb      	ldr	r3, [r7, #28]
 800aed2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aed6:	689b      	ldr	r3, [r3, #8]
 800aed8:	0a1b      	lsrs	r3, r3, #8
 800aeda:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	4618      	mov	r0, r3
 800aeea:	f007 ff5f 	bl	8012dac <USB_ReadInterrupts>
 800aeee:	4603      	mov	r3, r0
 800aef0:	f003 0302 	and.w	r3, r3, #2
 800aef4:	2b02      	cmp	r3, #2
 800aef6:	d107      	bne.n	800af08 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	695a      	ldr	r2, [r3, #20]
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	f002 0202 	and.w	r2, r2, #2
 800af06:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	4618      	mov	r0, r3
 800af0e:	f007 ff4d 	bl	8012dac <USB_ReadInterrupts>
 800af12:	4603      	mov	r3, r0
 800af14:	f003 0310 	and.w	r3, r3, #16
 800af18:	2b10      	cmp	r3, #16
 800af1a:	d161      	bne.n	800afe0 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	699a      	ldr	r2, [r3, #24]
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	f022 0210 	bic.w	r2, r2, #16
 800af2a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800af2c:	6a3b      	ldr	r3, [r7, #32]
 800af2e:	6a1b      	ldr	r3, [r3, #32]
 800af30:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800af32:	69bb      	ldr	r3, [r7, #24]
 800af34:	f003 020f 	and.w	r2, r3, #15
 800af38:	4613      	mov	r3, r2
 800af3a:	00db      	lsls	r3, r3, #3
 800af3c:	4413      	add	r3, r2
 800af3e:	009b      	lsls	r3, r3, #2
 800af40:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800af44:	687a      	ldr	r2, [r7, #4]
 800af46:	4413      	add	r3, r2
 800af48:	3304      	adds	r3, #4
 800af4a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800af4c:	69bb      	ldr	r3, [r7, #24]
 800af4e:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800af52:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800af56:	d124      	bne.n	800afa2 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800af58:	69ba      	ldr	r2, [r7, #24]
 800af5a:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800af5e:	4013      	ands	r3, r2
 800af60:	2b00      	cmp	r3, #0
 800af62:	d035      	beq.n	800afd0 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800af64:	697b      	ldr	r3, [r7, #20]
 800af66:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800af68:	69bb      	ldr	r3, [r7, #24]
 800af6a:	091b      	lsrs	r3, r3, #4
 800af6c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800af6e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800af72:	b29b      	uxth	r3, r3
 800af74:	461a      	mov	r2, r3
 800af76:	6a38      	ldr	r0, [r7, #32]
 800af78:	f007 fd84 	bl	8012a84 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800af7c:	697b      	ldr	r3, [r7, #20]
 800af7e:	68da      	ldr	r2, [r3, #12]
 800af80:	69bb      	ldr	r3, [r7, #24]
 800af82:	091b      	lsrs	r3, r3, #4
 800af84:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800af88:	441a      	add	r2, r3
 800af8a:	697b      	ldr	r3, [r7, #20]
 800af8c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800af8e:	697b      	ldr	r3, [r7, #20]
 800af90:	695a      	ldr	r2, [r3, #20]
 800af92:	69bb      	ldr	r3, [r7, #24]
 800af94:	091b      	lsrs	r3, r3, #4
 800af96:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800af9a:	441a      	add	r2, r3
 800af9c:	697b      	ldr	r3, [r7, #20]
 800af9e:	615a      	str	r2, [r3, #20]
 800afa0:	e016      	b.n	800afd0 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800afa2:	69bb      	ldr	r3, [r7, #24]
 800afa4:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800afa8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800afac:	d110      	bne.n	800afd0 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800afb4:	2208      	movs	r2, #8
 800afb6:	4619      	mov	r1, r3
 800afb8:	6a38      	ldr	r0, [r7, #32]
 800afba:	f007 fd63 	bl	8012a84 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800afbe:	697b      	ldr	r3, [r7, #20]
 800afc0:	695a      	ldr	r2, [r3, #20]
 800afc2:	69bb      	ldr	r3, [r7, #24]
 800afc4:	091b      	lsrs	r3, r3, #4
 800afc6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800afca:	441a      	add	r2, r3
 800afcc:	697b      	ldr	r3, [r7, #20]
 800afce:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	699a      	ldr	r2, [r3, #24]
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	f042 0210 	orr.w	r2, r2, #16
 800afde:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	4618      	mov	r0, r3
 800afe6:	f007 fee1 	bl	8012dac <USB_ReadInterrupts>
 800afea:	4603      	mov	r3, r0
 800afec:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800aff0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800aff4:	f040 80a7 	bne.w	800b146 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800aff8:	2300      	movs	r3, #0
 800affa:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	4618      	mov	r0, r3
 800b002:	f007 fee6 	bl	8012dd2 <USB_ReadDevAllOutEpInterrupt>
 800b006:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800b008:	e099      	b.n	800b13e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800b00a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b00c:	f003 0301 	and.w	r3, r3, #1
 800b010:	2b00      	cmp	r3, #0
 800b012:	f000 808e 	beq.w	800b132 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b01c:	b2d2      	uxtb	r2, r2
 800b01e:	4611      	mov	r1, r2
 800b020:	4618      	mov	r0, r3
 800b022:	f007 ff0a 	bl	8012e3a <USB_ReadDevOutEPInterrupt>
 800b026:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800b028:	693b      	ldr	r3, [r7, #16]
 800b02a:	f003 0301 	and.w	r3, r3, #1
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d00c      	beq.n	800b04c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800b032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b034:	015a      	lsls	r2, r3, #5
 800b036:	69fb      	ldr	r3, [r7, #28]
 800b038:	4413      	add	r3, r2
 800b03a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b03e:	461a      	mov	r2, r3
 800b040:	2301      	movs	r3, #1
 800b042:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800b044:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b046:	6878      	ldr	r0, [r7, #4]
 800b048:	f000 fed0 	bl	800bdec <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800b04c:	693b      	ldr	r3, [r7, #16]
 800b04e:	f003 0308 	and.w	r3, r3, #8
 800b052:	2b00      	cmp	r3, #0
 800b054:	d00c      	beq.n	800b070 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800b056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b058:	015a      	lsls	r2, r3, #5
 800b05a:	69fb      	ldr	r3, [r7, #28]
 800b05c:	4413      	add	r3, r2
 800b05e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b062:	461a      	mov	r2, r3
 800b064:	2308      	movs	r3, #8
 800b066:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800b068:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b06a:	6878      	ldr	r0, [r7, #4]
 800b06c:	f000 ffa6 	bl	800bfbc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800b070:	693b      	ldr	r3, [r7, #16]
 800b072:	f003 0310 	and.w	r3, r3, #16
 800b076:	2b00      	cmp	r3, #0
 800b078:	d008      	beq.n	800b08c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800b07a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b07c:	015a      	lsls	r2, r3, #5
 800b07e:	69fb      	ldr	r3, [r7, #28]
 800b080:	4413      	add	r3, r2
 800b082:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b086:	461a      	mov	r2, r3
 800b088:	2310      	movs	r3, #16
 800b08a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800b08c:	693b      	ldr	r3, [r7, #16]
 800b08e:	f003 0302 	and.w	r3, r3, #2
 800b092:	2b00      	cmp	r3, #0
 800b094:	d030      	beq.n	800b0f8 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800b096:	6a3b      	ldr	r3, [r7, #32]
 800b098:	695b      	ldr	r3, [r3, #20]
 800b09a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b09e:	2b80      	cmp	r3, #128	@ 0x80
 800b0a0:	d109      	bne.n	800b0b6 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800b0a2:	69fb      	ldr	r3, [r7, #28]
 800b0a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b0a8:	685b      	ldr	r3, [r3, #4]
 800b0aa:	69fa      	ldr	r2, [r7, #28]
 800b0ac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b0b0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800b0b4:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800b0b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b0b8:	4613      	mov	r3, r2
 800b0ba:	00db      	lsls	r3, r3, #3
 800b0bc:	4413      	add	r3, r2
 800b0be:	009b      	lsls	r3, r3, #2
 800b0c0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800b0c4:	687a      	ldr	r2, [r7, #4]
 800b0c6:	4413      	add	r3, r2
 800b0c8:	3304      	adds	r3, #4
 800b0ca:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800b0cc:	697b      	ldr	r3, [r7, #20]
 800b0ce:	78db      	ldrb	r3, [r3, #3]
 800b0d0:	2b01      	cmp	r3, #1
 800b0d2:	d108      	bne.n	800b0e6 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800b0d4:	697b      	ldr	r3, [r7, #20]
 800b0d6:	2200      	movs	r2, #0
 800b0d8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800b0da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0dc:	b2db      	uxtb	r3, r3
 800b0de:	4619      	mov	r1, r3
 800b0e0:	6878      	ldr	r0, [r7, #4]
 800b0e2:	f00a fb9f 	bl	8015824 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800b0e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0e8:	015a      	lsls	r2, r3, #5
 800b0ea:	69fb      	ldr	r3, [r7, #28]
 800b0ec:	4413      	add	r3, r2
 800b0ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b0f2:	461a      	mov	r2, r3
 800b0f4:	2302      	movs	r3, #2
 800b0f6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800b0f8:	693b      	ldr	r3, [r7, #16]
 800b0fa:	f003 0320 	and.w	r3, r3, #32
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d008      	beq.n	800b114 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800b102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b104:	015a      	lsls	r2, r3, #5
 800b106:	69fb      	ldr	r3, [r7, #28]
 800b108:	4413      	add	r3, r2
 800b10a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b10e:	461a      	mov	r2, r3
 800b110:	2320      	movs	r3, #32
 800b112:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800b114:	693b      	ldr	r3, [r7, #16]
 800b116:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d009      	beq.n	800b132 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800b11e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b120:	015a      	lsls	r2, r3, #5
 800b122:	69fb      	ldr	r3, [r7, #28]
 800b124:	4413      	add	r3, r2
 800b126:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b12a:	461a      	mov	r2, r3
 800b12c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800b130:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800b132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b134:	3301      	adds	r3, #1
 800b136:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800b138:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b13a:	085b      	lsrs	r3, r3, #1
 800b13c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800b13e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b140:	2b00      	cmp	r3, #0
 800b142:	f47f af62 	bne.w	800b00a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	4618      	mov	r0, r3
 800b14c:	f007 fe2e 	bl	8012dac <USB_ReadInterrupts>
 800b150:	4603      	mov	r3, r0
 800b152:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b156:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b15a:	f040 80db 	bne.w	800b314 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	4618      	mov	r0, r3
 800b164:	f007 fe4f 	bl	8012e06 <USB_ReadDevAllInEpInterrupt>
 800b168:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800b16a:	2300      	movs	r3, #0
 800b16c:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800b16e:	e0cd      	b.n	800b30c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800b170:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b172:	f003 0301 	and.w	r3, r3, #1
 800b176:	2b00      	cmp	r3, #0
 800b178:	f000 80c2 	beq.w	800b300 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b182:	b2d2      	uxtb	r2, r2
 800b184:	4611      	mov	r1, r2
 800b186:	4618      	mov	r0, r3
 800b188:	f007 fe75 	bl	8012e76 <USB_ReadDevInEPInterrupt>
 800b18c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800b18e:	693b      	ldr	r3, [r7, #16]
 800b190:	f003 0301 	and.w	r3, r3, #1
 800b194:	2b00      	cmp	r3, #0
 800b196:	d057      	beq.n	800b248 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800b198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b19a:	f003 030f 	and.w	r3, r3, #15
 800b19e:	2201      	movs	r2, #1
 800b1a0:	fa02 f303 	lsl.w	r3, r2, r3
 800b1a4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800b1a6:	69fb      	ldr	r3, [r7, #28]
 800b1a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b1ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	43db      	mvns	r3, r3
 800b1b2:	69f9      	ldr	r1, [r7, #28]
 800b1b4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b1b8:	4013      	ands	r3, r2
 800b1ba:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800b1bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1be:	015a      	lsls	r2, r3, #5
 800b1c0:	69fb      	ldr	r3, [r7, #28]
 800b1c2:	4413      	add	r3, r2
 800b1c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b1c8:	461a      	mov	r2, r3
 800b1ca:	2301      	movs	r3, #1
 800b1cc:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	799b      	ldrb	r3, [r3, #6]
 800b1d2:	2b01      	cmp	r3, #1
 800b1d4:	d132      	bne.n	800b23c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800b1d6:	6879      	ldr	r1, [r7, #4]
 800b1d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b1da:	4613      	mov	r3, r2
 800b1dc:	00db      	lsls	r3, r3, #3
 800b1de:	4413      	add	r3, r2
 800b1e0:	009b      	lsls	r3, r3, #2
 800b1e2:	440b      	add	r3, r1
 800b1e4:	3320      	adds	r3, #32
 800b1e6:	6819      	ldr	r1, [r3, #0]
 800b1e8:	6878      	ldr	r0, [r7, #4]
 800b1ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b1ec:	4613      	mov	r3, r2
 800b1ee:	00db      	lsls	r3, r3, #3
 800b1f0:	4413      	add	r3, r2
 800b1f2:	009b      	lsls	r3, r3, #2
 800b1f4:	4403      	add	r3, r0
 800b1f6:	331c      	adds	r3, #28
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	4419      	add	r1, r3
 800b1fc:	6878      	ldr	r0, [r7, #4]
 800b1fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b200:	4613      	mov	r3, r2
 800b202:	00db      	lsls	r3, r3, #3
 800b204:	4413      	add	r3, r2
 800b206:	009b      	lsls	r3, r3, #2
 800b208:	4403      	add	r3, r0
 800b20a:	3320      	adds	r3, #32
 800b20c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800b20e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b210:	2b00      	cmp	r3, #0
 800b212:	d113      	bne.n	800b23c <HAL_PCD_IRQHandler+0x3a2>
 800b214:	6879      	ldr	r1, [r7, #4]
 800b216:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b218:	4613      	mov	r3, r2
 800b21a:	00db      	lsls	r3, r3, #3
 800b21c:	4413      	add	r3, r2
 800b21e:	009b      	lsls	r3, r3, #2
 800b220:	440b      	add	r3, r1
 800b222:	3324      	adds	r3, #36	@ 0x24
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	2b00      	cmp	r3, #0
 800b228:	d108      	bne.n	800b23c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	6818      	ldr	r0, [r3, #0]
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800b234:	461a      	mov	r2, r3
 800b236:	2101      	movs	r1, #1
 800b238:	f007 fe7e 	bl	8012f38 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800b23c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b23e:	b2db      	uxtb	r3, r3
 800b240:	4619      	mov	r1, r3
 800b242:	6878      	ldr	r0, [r7, #4]
 800b244:	f00a fa69 	bl	801571a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800b248:	693b      	ldr	r3, [r7, #16]
 800b24a:	f003 0308 	and.w	r3, r3, #8
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d008      	beq.n	800b264 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800b252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b254:	015a      	lsls	r2, r3, #5
 800b256:	69fb      	ldr	r3, [r7, #28]
 800b258:	4413      	add	r3, r2
 800b25a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b25e:	461a      	mov	r2, r3
 800b260:	2308      	movs	r3, #8
 800b262:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800b264:	693b      	ldr	r3, [r7, #16]
 800b266:	f003 0310 	and.w	r3, r3, #16
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d008      	beq.n	800b280 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800b26e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b270:	015a      	lsls	r2, r3, #5
 800b272:	69fb      	ldr	r3, [r7, #28]
 800b274:	4413      	add	r3, r2
 800b276:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b27a:	461a      	mov	r2, r3
 800b27c:	2310      	movs	r3, #16
 800b27e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800b280:	693b      	ldr	r3, [r7, #16]
 800b282:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b286:	2b00      	cmp	r3, #0
 800b288:	d008      	beq.n	800b29c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800b28a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b28c:	015a      	lsls	r2, r3, #5
 800b28e:	69fb      	ldr	r3, [r7, #28]
 800b290:	4413      	add	r3, r2
 800b292:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b296:	461a      	mov	r2, r3
 800b298:	2340      	movs	r3, #64	@ 0x40
 800b29a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800b29c:	693b      	ldr	r3, [r7, #16]
 800b29e:	f003 0302 	and.w	r3, r3, #2
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d023      	beq.n	800b2ee <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800b2a6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b2a8:	6a38      	ldr	r0, [r7, #32]
 800b2aa:	f006 fe5d 	bl	8011f68 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800b2ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b2b0:	4613      	mov	r3, r2
 800b2b2:	00db      	lsls	r3, r3, #3
 800b2b4:	4413      	add	r3, r2
 800b2b6:	009b      	lsls	r3, r3, #2
 800b2b8:	3310      	adds	r3, #16
 800b2ba:	687a      	ldr	r2, [r7, #4]
 800b2bc:	4413      	add	r3, r2
 800b2be:	3304      	adds	r3, #4
 800b2c0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800b2c2:	697b      	ldr	r3, [r7, #20]
 800b2c4:	78db      	ldrb	r3, [r3, #3]
 800b2c6:	2b01      	cmp	r3, #1
 800b2c8:	d108      	bne.n	800b2dc <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800b2ca:	697b      	ldr	r3, [r7, #20]
 800b2cc:	2200      	movs	r2, #0
 800b2ce:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800b2d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2d2:	b2db      	uxtb	r3, r3
 800b2d4:	4619      	mov	r1, r3
 800b2d6:	6878      	ldr	r0, [r7, #4]
 800b2d8:	f00a fab6 	bl	8015848 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800b2dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2de:	015a      	lsls	r2, r3, #5
 800b2e0:	69fb      	ldr	r3, [r7, #28]
 800b2e2:	4413      	add	r3, r2
 800b2e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b2e8:	461a      	mov	r2, r3
 800b2ea:	2302      	movs	r3, #2
 800b2ec:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800b2ee:	693b      	ldr	r3, [r7, #16]
 800b2f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d003      	beq.n	800b300 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800b2f8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b2fa:	6878      	ldr	r0, [r7, #4]
 800b2fc:	f000 fcea 	bl	800bcd4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800b300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b302:	3301      	adds	r3, #1
 800b304:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800b306:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b308:	085b      	lsrs	r3, r3, #1
 800b30a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800b30c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b30e:	2b00      	cmp	r3, #0
 800b310:	f47f af2e 	bne.w	800b170 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	4618      	mov	r0, r3
 800b31a:	f007 fd47 	bl	8012dac <USB_ReadInterrupts>
 800b31e:	4603      	mov	r3, r0
 800b320:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b324:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b328:	d122      	bne.n	800b370 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800b32a:	69fb      	ldr	r3, [r7, #28]
 800b32c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b330:	685b      	ldr	r3, [r3, #4]
 800b332:	69fa      	ldr	r2, [r7, #28]
 800b334:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b338:	f023 0301 	bic.w	r3, r3, #1
 800b33c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800b344:	2b01      	cmp	r3, #1
 800b346:	d108      	bne.n	800b35a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	2200      	movs	r2, #0
 800b34c:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800b350:	2100      	movs	r1, #0
 800b352:	6878      	ldr	r0, [r7, #4]
 800b354:	f000 fef4 	bl	800c140 <HAL_PCDEx_LPM_Callback>
 800b358:	e002      	b.n	800b360 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800b35a:	6878      	ldr	r0, [r7, #4]
 800b35c:	f00a fa54 	bl	8015808 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	695a      	ldr	r2, [r3, #20]
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800b36e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	4618      	mov	r0, r3
 800b376:	f007 fd19 	bl	8012dac <USB_ReadInterrupts>
 800b37a:	4603      	mov	r3, r0
 800b37c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b380:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b384:	d112      	bne.n	800b3ac <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800b386:	69fb      	ldr	r3, [r7, #28]
 800b388:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b38c:	689b      	ldr	r3, [r3, #8]
 800b38e:	f003 0301 	and.w	r3, r3, #1
 800b392:	2b01      	cmp	r3, #1
 800b394:	d102      	bne.n	800b39c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800b396:	6878      	ldr	r0, [r7, #4]
 800b398:	f00a fa10 	bl	80157bc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	695a      	ldr	r2, [r3, #20]
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800b3aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	4618      	mov	r0, r3
 800b3b2:	f007 fcfb 	bl	8012dac <USB_ReadInterrupts>
 800b3b6:	4603      	mov	r3, r0
 800b3b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b3bc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b3c0:	d121      	bne.n	800b406 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	695a      	ldr	r2, [r3, #20]
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 800b3d0:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d111      	bne.n	800b400 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	2201      	movs	r2, #1
 800b3e0:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b3ea:	089b      	lsrs	r3, r3, #2
 800b3ec:	f003 020f 	and.w	r2, r3, #15
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800b3f6:	2101      	movs	r1, #1
 800b3f8:	6878      	ldr	r0, [r7, #4]
 800b3fa:	f000 fea1 	bl	800c140 <HAL_PCDEx_LPM_Callback>
 800b3fe:	e002      	b.n	800b406 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800b400:	6878      	ldr	r0, [r7, #4]
 800b402:	f00a f9db 	bl	80157bc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	4618      	mov	r0, r3
 800b40c:	f007 fcce 	bl	8012dac <USB_ReadInterrupts>
 800b410:	4603      	mov	r3, r0
 800b412:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b416:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b41a:	f040 80b7 	bne.w	800b58c <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800b41e:	69fb      	ldr	r3, [r7, #28]
 800b420:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b424:	685b      	ldr	r3, [r3, #4]
 800b426:	69fa      	ldr	r2, [r7, #28]
 800b428:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b42c:	f023 0301 	bic.w	r3, r3, #1
 800b430:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	2110      	movs	r1, #16
 800b438:	4618      	mov	r0, r3
 800b43a:	f006 fd95 	bl	8011f68 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b43e:	2300      	movs	r3, #0
 800b440:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b442:	e046      	b.n	800b4d2 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800b444:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b446:	015a      	lsls	r2, r3, #5
 800b448:	69fb      	ldr	r3, [r7, #28]
 800b44a:	4413      	add	r3, r2
 800b44c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b450:	461a      	mov	r2, r3
 800b452:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800b456:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b458:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b45a:	015a      	lsls	r2, r3, #5
 800b45c:	69fb      	ldr	r3, [r7, #28]
 800b45e:	4413      	add	r3, r2
 800b460:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b468:	0151      	lsls	r1, r2, #5
 800b46a:	69fa      	ldr	r2, [r7, #28]
 800b46c:	440a      	add	r2, r1
 800b46e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b472:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b476:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800b478:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b47a:	015a      	lsls	r2, r3, #5
 800b47c:	69fb      	ldr	r3, [r7, #28]
 800b47e:	4413      	add	r3, r2
 800b480:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b484:	461a      	mov	r2, r3
 800b486:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800b48a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b48c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b48e:	015a      	lsls	r2, r3, #5
 800b490:	69fb      	ldr	r3, [r7, #28]
 800b492:	4413      	add	r3, r2
 800b494:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b49c:	0151      	lsls	r1, r2, #5
 800b49e:	69fa      	ldr	r2, [r7, #28]
 800b4a0:	440a      	add	r2, r1
 800b4a2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b4a6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b4aa:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800b4ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4ae:	015a      	lsls	r2, r3, #5
 800b4b0:	69fb      	ldr	r3, [r7, #28]
 800b4b2:	4413      	add	r3, r2
 800b4b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b4bc:	0151      	lsls	r1, r2, #5
 800b4be:	69fa      	ldr	r2, [r7, #28]
 800b4c0:	440a      	add	r2, r1
 800b4c2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b4c6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b4ca:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b4cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4ce:	3301      	adds	r3, #1
 800b4d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	791b      	ldrb	r3, [r3, #4]
 800b4d6:	461a      	mov	r2, r3
 800b4d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4da:	4293      	cmp	r3, r2
 800b4dc:	d3b2      	bcc.n	800b444 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800b4de:	69fb      	ldr	r3, [r7, #28]
 800b4e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b4e4:	69db      	ldr	r3, [r3, #28]
 800b4e6:	69fa      	ldr	r2, [r7, #28]
 800b4e8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b4ec:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800b4f0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	7bdb      	ldrb	r3, [r3, #15]
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d016      	beq.n	800b528 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800b4fa:	69fb      	ldr	r3, [r7, #28]
 800b4fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b500:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b504:	69fa      	ldr	r2, [r7, #28]
 800b506:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b50a:	f043 030b 	orr.w	r3, r3, #11
 800b50e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800b512:	69fb      	ldr	r3, [r7, #28]
 800b514:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b518:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b51a:	69fa      	ldr	r2, [r7, #28]
 800b51c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b520:	f043 030b 	orr.w	r3, r3, #11
 800b524:	6453      	str	r3, [r2, #68]	@ 0x44
 800b526:	e015      	b.n	800b554 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800b528:	69fb      	ldr	r3, [r7, #28]
 800b52a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b52e:	695a      	ldr	r2, [r3, #20]
 800b530:	69fb      	ldr	r3, [r7, #28]
 800b532:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b536:	4619      	mov	r1, r3
 800b538:	f242 032b 	movw	r3, #8235	@ 0x202b
 800b53c:	4313      	orrs	r3, r2
 800b53e:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800b540:	69fb      	ldr	r3, [r7, #28]
 800b542:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b546:	691b      	ldr	r3, [r3, #16]
 800b548:	69fa      	ldr	r2, [r7, #28]
 800b54a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b54e:	f043 030b 	orr.w	r3, r3, #11
 800b552:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800b554:	69fb      	ldr	r3, [r7, #28]
 800b556:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	69fa      	ldr	r2, [r7, #28]
 800b55e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b562:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800b566:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	6818      	ldr	r0, [r3, #0]
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800b576:	461a      	mov	r2, r3
 800b578:	f007 fcde 	bl	8012f38 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	695a      	ldr	r2, [r3, #20]
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800b58a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	4618      	mov	r0, r3
 800b592:	f007 fc0b 	bl	8012dac <USB_ReadInterrupts>
 800b596:	4603      	mov	r3, r0
 800b598:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b59c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b5a0:	d123      	bne.n	800b5ea <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	4618      	mov	r0, r3
 800b5a8:	f007 fca2 	bl	8012ef0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	4618      	mov	r0, r3
 800b5b2:	f006 fd52 	bl	801205a <USB_GetDevSpeed>
 800b5b6:	4603      	mov	r3, r0
 800b5b8:	461a      	mov	r2, r3
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	681c      	ldr	r4, [r3, #0]
 800b5c2:	f001 fd9d 	bl	800d100 <HAL_RCC_GetHCLKFreq>
 800b5c6:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800b5cc:	461a      	mov	r2, r3
 800b5ce:	4620      	mov	r0, r4
 800b5d0:	f006 fa5c 	bl	8011a8c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800b5d4:	6878      	ldr	r0, [r7, #4]
 800b5d6:	f00a f8c8 	bl	801576a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	695a      	ldr	r2, [r3, #20]
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800b5e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	4618      	mov	r0, r3
 800b5f0:	f007 fbdc 	bl	8012dac <USB_ReadInterrupts>
 800b5f4:	4603      	mov	r3, r0
 800b5f6:	f003 0308 	and.w	r3, r3, #8
 800b5fa:	2b08      	cmp	r3, #8
 800b5fc:	d10a      	bne.n	800b614 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800b5fe:	6878      	ldr	r0, [r7, #4]
 800b600:	f00a f8a5 	bl	801574e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	695a      	ldr	r2, [r3, #20]
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	f002 0208 	and.w	r2, r2, #8
 800b612:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	4618      	mov	r0, r3
 800b61a:	f007 fbc7 	bl	8012dac <USB_ReadInterrupts>
 800b61e:	4603      	mov	r3, r0
 800b620:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b624:	2b80      	cmp	r3, #128	@ 0x80
 800b626:	d123      	bne.n	800b670 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800b628:	6a3b      	ldr	r3, [r7, #32]
 800b62a:	699b      	ldr	r3, [r3, #24]
 800b62c:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b630:	6a3b      	ldr	r3, [r7, #32]
 800b632:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800b634:	2301      	movs	r3, #1
 800b636:	627b      	str	r3, [r7, #36]	@ 0x24
 800b638:	e014      	b.n	800b664 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800b63a:	6879      	ldr	r1, [r7, #4]
 800b63c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b63e:	4613      	mov	r3, r2
 800b640:	00db      	lsls	r3, r3, #3
 800b642:	4413      	add	r3, r2
 800b644:	009b      	lsls	r3, r3, #2
 800b646:	440b      	add	r3, r1
 800b648:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800b64c:	781b      	ldrb	r3, [r3, #0]
 800b64e:	2b01      	cmp	r3, #1
 800b650:	d105      	bne.n	800b65e <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800b652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b654:	b2db      	uxtb	r3, r3
 800b656:	4619      	mov	r1, r3
 800b658:	6878      	ldr	r0, [r7, #4]
 800b65a:	f000 fb0a 	bl	800bc72 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800b65e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b660:	3301      	adds	r3, #1
 800b662:	627b      	str	r3, [r7, #36]	@ 0x24
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	791b      	ldrb	r3, [r3, #4]
 800b668:	461a      	mov	r2, r3
 800b66a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b66c:	4293      	cmp	r3, r2
 800b66e:	d3e4      	bcc.n	800b63a <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	4618      	mov	r0, r3
 800b676:	f007 fb99 	bl	8012dac <USB_ReadInterrupts>
 800b67a:	4603      	mov	r3, r0
 800b67c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b680:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b684:	d13c      	bne.n	800b700 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800b686:	2301      	movs	r3, #1
 800b688:	627b      	str	r3, [r7, #36]	@ 0x24
 800b68a:	e02b      	b.n	800b6e4 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800b68c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b68e:	015a      	lsls	r2, r3, #5
 800b690:	69fb      	ldr	r3, [r7, #28]
 800b692:	4413      	add	r3, r2
 800b694:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800b69c:	6879      	ldr	r1, [r7, #4]
 800b69e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b6a0:	4613      	mov	r3, r2
 800b6a2:	00db      	lsls	r3, r3, #3
 800b6a4:	4413      	add	r3, r2
 800b6a6:	009b      	lsls	r3, r3, #2
 800b6a8:	440b      	add	r3, r1
 800b6aa:	3318      	adds	r3, #24
 800b6ac:	781b      	ldrb	r3, [r3, #0]
 800b6ae:	2b01      	cmp	r3, #1
 800b6b0:	d115      	bne.n	800b6de <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800b6b2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	da12      	bge.n	800b6de <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800b6b8:	6879      	ldr	r1, [r7, #4]
 800b6ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b6bc:	4613      	mov	r3, r2
 800b6be:	00db      	lsls	r3, r3, #3
 800b6c0:	4413      	add	r3, r2
 800b6c2:	009b      	lsls	r3, r3, #2
 800b6c4:	440b      	add	r3, r1
 800b6c6:	3317      	adds	r3, #23
 800b6c8:	2201      	movs	r2, #1
 800b6ca:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800b6cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6ce:	b2db      	uxtb	r3, r3
 800b6d0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800b6d4:	b2db      	uxtb	r3, r3
 800b6d6:	4619      	mov	r1, r3
 800b6d8:	6878      	ldr	r0, [r7, #4]
 800b6da:	f000 faca 	bl	800bc72 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800b6de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6e0:	3301      	adds	r3, #1
 800b6e2:	627b      	str	r3, [r7, #36]	@ 0x24
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	791b      	ldrb	r3, [r3, #4]
 800b6e8:	461a      	mov	r2, r3
 800b6ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6ec:	4293      	cmp	r3, r2
 800b6ee:	d3cd      	bcc.n	800b68c <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	695a      	ldr	r2, [r3, #20]
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800b6fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	4618      	mov	r0, r3
 800b706:	f007 fb51 	bl	8012dac <USB_ReadInterrupts>
 800b70a:	4603      	mov	r3, r0
 800b70c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b710:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b714:	d156      	bne.n	800b7c4 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800b716:	2301      	movs	r3, #1
 800b718:	627b      	str	r3, [r7, #36]	@ 0x24
 800b71a:	e045      	b.n	800b7a8 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800b71c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b71e:	015a      	lsls	r2, r3, #5
 800b720:	69fb      	ldr	r3, [r7, #28]
 800b722:	4413      	add	r3, r2
 800b724:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800b72c:	6879      	ldr	r1, [r7, #4]
 800b72e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b730:	4613      	mov	r3, r2
 800b732:	00db      	lsls	r3, r3, #3
 800b734:	4413      	add	r3, r2
 800b736:	009b      	lsls	r3, r3, #2
 800b738:	440b      	add	r3, r1
 800b73a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800b73e:	781b      	ldrb	r3, [r3, #0]
 800b740:	2b01      	cmp	r3, #1
 800b742:	d12e      	bne.n	800b7a2 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800b744:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800b746:	2b00      	cmp	r3, #0
 800b748:	da2b      	bge.n	800b7a2 <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 800b74a:	69bb      	ldr	r3, [r7, #24]
 800b74c:	0c1a      	lsrs	r2, r3, #16
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800b754:	4053      	eors	r3, r2
 800b756:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d121      	bne.n	800b7a2 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800b75e:	6879      	ldr	r1, [r7, #4]
 800b760:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b762:	4613      	mov	r3, r2
 800b764:	00db      	lsls	r3, r3, #3
 800b766:	4413      	add	r3, r2
 800b768:	009b      	lsls	r3, r3, #2
 800b76a:	440b      	add	r3, r1
 800b76c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800b770:	2201      	movs	r2, #1
 800b772:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800b774:	6a3b      	ldr	r3, [r7, #32]
 800b776:	699b      	ldr	r3, [r3, #24]
 800b778:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800b77c:	6a3b      	ldr	r3, [r7, #32]
 800b77e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800b780:	6a3b      	ldr	r3, [r7, #32]
 800b782:	695b      	ldr	r3, [r3, #20]
 800b784:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d10a      	bne.n	800b7a2 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800b78c:	69fb      	ldr	r3, [r7, #28]
 800b78e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b792:	685b      	ldr	r3, [r3, #4]
 800b794:	69fa      	ldr	r2, [r7, #28]
 800b796:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b79a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800b79e:	6053      	str	r3, [r2, #4]
            break;
 800b7a0:	e008      	b.n	800b7b4 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800b7a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7a4:	3301      	adds	r3, #1
 800b7a6:	627b      	str	r3, [r7, #36]	@ 0x24
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	791b      	ldrb	r3, [r3, #4]
 800b7ac:	461a      	mov	r2, r3
 800b7ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7b0:	4293      	cmp	r3, r2
 800b7b2:	d3b3      	bcc.n	800b71c <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	695a      	ldr	r2, [r3, #20]
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800b7c2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	4618      	mov	r0, r3
 800b7ca:	f007 faef 	bl	8012dac <USB_ReadInterrupts>
 800b7ce:	4603      	mov	r3, r0
 800b7d0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800b7d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b7d8:	d10a      	bne.n	800b7f0 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800b7da:	6878      	ldr	r0, [r7, #4]
 800b7dc:	f00a f846 	bl	801586c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	695a      	ldr	r2, [r3, #20]
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800b7ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	4618      	mov	r0, r3
 800b7f6:	f007 fad9 	bl	8012dac <USB_ReadInterrupts>
 800b7fa:	4603      	mov	r3, r0
 800b7fc:	f003 0304 	and.w	r3, r3, #4
 800b800:	2b04      	cmp	r3, #4
 800b802:	d115      	bne.n	800b830 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	685b      	ldr	r3, [r3, #4]
 800b80a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800b80c:	69bb      	ldr	r3, [r7, #24]
 800b80e:	f003 0304 	and.w	r3, r3, #4
 800b812:	2b00      	cmp	r3, #0
 800b814:	d002      	beq.n	800b81c <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800b816:	6878      	ldr	r0, [r7, #4]
 800b818:	f00a f836 	bl	8015888 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	6859      	ldr	r1, [r3, #4]
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	69ba      	ldr	r2, [r7, #24]
 800b828:	430a      	orrs	r2, r1
 800b82a:	605a      	str	r2, [r3, #4]
 800b82c:	e000      	b.n	800b830 <HAL_PCD_IRQHandler+0x996>
      return;
 800b82e:	bf00      	nop
    }
  }
}
 800b830:	3734      	adds	r7, #52	@ 0x34
 800b832:	46bd      	mov	sp, r7
 800b834:	bd90      	pop	{r4, r7, pc}

0800b836 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800b836:	b580      	push	{r7, lr}
 800b838:	b082      	sub	sp, #8
 800b83a:	af00      	add	r7, sp, #0
 800b83c:	6078      	str	r0, [r7, #4]
 800b83e:	460b      	mov	r3, r1
 800b840:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800b848:	2b01      	cmp	r3, #1
 800b84a:	d101      	bne.n	800b850 <HAL_PCD_SetAddress+0x1a>
 800b84c:	2302      	movs	r3, #2
 800b84e:	e012      	b.n	800b876 <HAL_PCD_SetAddress+0x40>
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	2201      	movs	r2, #1
 800b854:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	78fa      	ldrb	r2, [r7, #3]
 800b85c:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	78fa      	ldrb	r2, [r7, #3]
 800b864:	4611      	mov	r1, r2
 800b866:	4618      	mov	r0, r3
 800b868:	f007 fa38 	bl	8012cdc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	2200      	movs	r2, #0
 800b870:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800b874:	2300      	movs	r3, #0
}
 800b876:	4618      	mov	r0, r3
 800b878:	3708      	adds	r7, #8
 800b87a:	46bd      	mov	sp, r7
 800b87c:	bd80      	pop	{r7, pc}

0800b87e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800b87e:	b580      	push	{r7, lr}
 800b880:	b084      	sub	sp, #16
 800b882:	af00      	add	r7, sp, #0
 800b884:	6078      	str	r0, [r7, #4]
 800b886:	4608      	mov	r0, r1
 800b888:	4611      	mov	r1, r2
 800b88a:	461a      	mov	r2, r3
 800b88c:	4603      	mov	r3, r0
 800b88e:	70fb      	strb	r3, [r7, #3]
 800b890:	460b      	mov	r3, r1
 800b892:	803b      	strh	r3, [r7, #0]
 800b894:	4613      	mov	r3, r2
 800b896:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800b898:	2300      	movs	r3, #0
 800b89a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800b89c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	da0f      	bge.n	800b8c4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b8a4:	78fb      	ldrb	r3, [r7, #3]
 800b8a6:	f003 020f 	and.w	r2, r3, #15
 800b8aa:	4613      	mov	r3, r2
 800b8ac:	00db      	lsls	r3, r3, #3
 800b8ae:	4413      	add	r3, r2
 800b8b0:	009b      	lsls	r3, r3, #2
 800b8b2:	3310      	adds	r3, #16
 800b8b4:	687a      	ldr	r2, [r7, #4]
 800b8b6:	4413      	add	r3, r2
 800b8b8:	3304      	adds	r3, #4
 800b8ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	2201      	movs	r2, #1
 800b8c0:	705a      	strb	r2, [r3, #1]
 800b8c2:	e00f      	b.n	800b8e4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b8c4:	78fb      	ldrb	r3, [r7, #3]
 800b8c6:	f003 020f 	and.w	r2, r3, #15
 800b8ca:	4613      	mov	r3, r2
 800b8cc:	00db      	lsls	r3, r3, #3
 800b8ce:	4413      	add	r3, r2
 800b8d0:	009b      	lsls	r3, r3, #2
 800b8d2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800b8d6:	687a      	ldr	r2, [r7, #4]
 800b8d8:	4413      	add	r3, r2
 800b8da:	3304      	adds	r3, #4
 800b8dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	2200      	movs	r2, #0
 800b8e2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800b8e4:	78fb      	ldrb	r3, [r7, #3]
 800b8e6:	f003 030f 	and.w	r3, r3, #15
 800b8ea:	b2da      	uxtb	r2, r3
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800b8f0:	883b      	ldrh	r3, [r7, #0]
 800b8f2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	78ba      	ldrb	r2, [r7, #2]
 800b8fe:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	785b      	ldrb	r3, [r3, #1]
 800b904:	2b00      	cmp	r3, #0
 800b906:	d004      	beq.n	800b912 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	781b      	ldrb	r3, [r3, #0]
 800b90c:	461a      	mov	r2, r3
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800b912:	78bb      	ldrb	r3, [r7, #2]
 800b914:	2b02      	cmp	r3, #2
 800b916:	d102      	bne.n	800b91e <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	2200      	movs	r2, #0
 800b91c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800b924:	2b01      	cmp	r3, #1
 800b926:	d101      	bne.n	800b92c <HAL_PCD_EP_Open+0xae>
 800b928:	2302      	movs	r3, #2
 800b92a:	e00e      	b.n	800b94a <HAL_PCD_EP_Open+0xcc>
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	2201      	movs	r2, #1
 800b930:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	68f9      	ldr	r1, [r7, #12]
 800b93a:	4618      	mov	r0, r3
 800b93c:	f006 fbb2 	bl	80120a4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	2200      	movs	r2, #0
 800b944:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800b948:	7afb      	ldrb	r3, [r7, #11]
}
 800b94a:	4618      	mov	r0, r3
 800b94c:	3710      	adds	r7, #16
 800b94e:	46bd      	mov	sp, r7
 800b950:	bd80      	pop	{r7, pc}

0800b952 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b952:	b580      	push	{r7, lr}
 800b954:	b084      	sub	sp, #16
 800b956:	af00      	add	r7, sp, #0
 800b958:	6078      	str	r0, [r7, #4]
 800b95a:	460b      	mov	r3, r1
 800b95c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800b95e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b962:	2b00      	cmp	r3, #0
 800b964:	da0f      	bge.n	800b986 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b966:	78fb      	ldrb	r3, [r7, #3]
 800b968:	f003 020f 	and.w	r2, r3, #15
 800b96c:	4613      	mov	r3, r2
 800b96e:	00db      	lsls	r3, r3, #3
 800b970:	4413      	add	r3, r2
 800b972:	009b      	lsls	r3, r3, #2
 800b974:	3310      	adds	r3, #16
 800b976:	687a      	ldr	r2, [r7, #4]
 800b978:	4413      	add	r3, r2
 800b97a:	3304      	adds	r3, #4
 800b97c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	2201      	movs	r2, #1
 800b982:	705a      	strb	r2, [r3, #1]
 800b984:	e00f      	b.n	800b9a6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b986:	78fb      	ldrb	r3, [r7, #3]
 800b988:	f003 020f 	and.w	r2, r3, #15
 800b98c:	4613      	mov	r3, r2
 800b98e:	00db      	lsls	r3, r3, #3
 800b990:	4413      	add	r3, r2
 800b992:	009b      	lsls	r3, r3, #2
 800b994:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800b998:	687a      	ldr	r2, [r7, #4]
 800b99a:	4413      	add	r3, r2
 800b99c:	3304      	adds	r3, #4
 800b99e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	2200      	movs	r2, #0
 800b9a4:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800b9a6:	78fb      	ldrb	r3, [r7, #3]
 800b9a8:	f003 030f 	and.w	r3, r3, #15
 800b9ac:	b2da      	uxtb	r2, r3
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800b9b8:	2b01      	cmp	r3, #1
 800b9ba:	d101      	bne.n	800b9c0 <HAL_PCD_EP_Close+0x6e>
 800b9bc:	2302      	movs	r3, #2
 800b9be:	e00e      	b.n	800b9de <HAL_PCD_EP_Close+0x8c>
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	2201      	movs	r2, #1
 800b9c4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	68f9      	ldr	r1, [r7, #12]
 800b9ce:	4618      	mov	r0, r3
 800b9d0:	f006 fbf0 	bl	80121b4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	2200      	movs	r2, #0
 800b9d8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800b9dc:	2300      	movs	r3, #0
}
 800b9de:	4618      	mov	r0, r3
 800b9e0:	3710      	adds	r7, #16
 800b9e2:	46bd      	mov	sp, r7
 800b9e4:	bd80      	pop	{r7, pc}

0800b9e6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800b9e6:	b580      	push	{r7, lr}
 800b9e8:	b086      	sub	sp, #24
 800b9ea:	af00      	add	r7, sp, #0
 800b9ec:	60f8      	str	r0, [r7, #12]
 800b9ee:	607a      	str	r2, [r7, #4]
 800b9f0:	603b      	str	r3, [r7, #0]
 800b9f2:	460b      	mov	r3, r1
 800b9f4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b9f6:	7afb      	ldrb	r3, [r7, #11]
 800b9f8:	f003 020f 	and.w	r2, r3, #15
 800b9fc:	4613      	mov	r3, r2
 800b9fe:	00db      	lsls	r3, r3, #3
 800ba00:	4413      	add	r3, r2
 800ba02:	009b      	lsls	r3, r3, #2
 800ba04:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800ba08:	68fa      	ldr	r2, [r7, #12]
 800ba0a:	4413      	add	r3, r2
 800ba0c:	3304      	adds	r3, #4
 800ba0e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800ba10:	697b      	ldr	r3, [r7, #20]
 800ba12:	687a      	ldr	r2, [r7, #4]
 800ba14:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800ba16:	697b      	ldr	r3, [r7, #20]
 800ba18:	683a      	ldr	r2, [r7, #0]
 800ba1a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800ba1c:	697b      	ldr	r3, [r7, #20]
 800ba1e:	2200      	movs	r2, #0
 800ba20:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800ba22:	697b      	ldr	r3, [r7, #20]
 800ba24:	2200      	movs	r2, #0
 800ba26:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800ba28:	7afb      	ldrb	r3, [r7, #11]
 800ba2a:	f003 030f 	and.w	r3, r3, #15
 800ba2e:	b2da      	uxtb	r2, r3
 800ba30:	697b      	ldr	r3, [r7, #20]
 800ba32:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	799b      	ldrb	r3, [r3, #6]
 800ba38:	2b01      	cmp	r3, #1
 800ba3a:	d102      	bne.n	800ba42 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800ba3c:	687a      	ldr	r2, [r7, #4]
 800ba3e:	697b      	ldr	r3, [r7, #20]
 800ba40:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	6818      	ldr	r0, [r3, #0]
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	799b      	ldrb	r3, [r3, #6]
 800ba4a:	461a      	mov	r2, r3
 800ba4c:	6979      	ldr	r1, [r7, #20]
 800ba4e:	f006 fc8d 	bl	801236c <USB_EPStartXfer>

  return HAL_OK;
 800ba52:	2300      	movs	r3, #0
}
 800ba54:	4618      	mov	r0, r3
 800ba56:	3718      	adds	r7, #24
 800ba58:	46bd      	mov	sp, r7
 800ba5a:	bd80      	pop	{r7, pc}

0800ba5c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800ba5c:	b480      	push	{r7}
 800ba5e:	b083      	sub	sp, #12
 800ba60:	af00      	add	r7, sp, #0
 800ba62:	6078      	str	r0, [r7, #4]
 800ba64:	460b      	mov	r3, r1
 800ba66:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800ba68:	78fb      	ldrb	r3, [r7, #3]
 800ba6a:	f003 020f 	and.w	r2, r3, #15
 800ba6e:	6879      	ldr	r1, [r7, #4]
 800ba70:	4613      	mov	r3, r2
 800ba72:	00db      	lsls	r3, r3, #3
 800ba74:	4413      	add	r3, r2
 800ba76:	009b      	lsls	r3, r3, #2
 800ba78:	440b      	add	r3, r1
 800ba7a:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800ba7e:	681b      	ldr	r3, [r3, #0]
}
 800ba80:	4618      	mov	r0, r3
 800ba82:	370c      	adds	r7, #12
 800ba84:	46bd      	mov	sp, r7
 800ba86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba8a:	4770      	bx	lr

0800ba8c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800ba8c:	b580      	push	{r7, lr}
 800ba8e:	b086      	sub	sp, #24
 800ba90:	af00      	add	r7, sp, #0
 800ba92:	60f8      	str	r0, [r7, #12]
 800ba94:	607a      	str	r2, [r7, #4]
 800ba96:	603b      	str	r3, [r7, #0]
 800ba98:	460b      	mov	r3, r1
 800ba9a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ba9c:	7afb      	ldrb	r3, [r7, #11]
 800ba9e:	f003 020f 	and.w	r2, r3, #15
 800baa2:	4613      	mov	r3, r2
 800baa4:	00db      	lsls	r3, r3, #3
 800baa6:	4413      	add	r3, r2
 800baa8:	009b      	lsls	r3, r3, #2
 800baaa:	3310      	adds	r3, #16
 800baac:	68fa      	ldr	r2, [r7, #12]
 800baae:	4413      	add	r3, r2
 800bab0:	3304      	adds	r3, #4
 800bab2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800bab4:	697b      	ldr	r3, [r7, #20]
 800bab6:	687a      	ldr	r2, [r7, #4]
 800bab8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800baba:	697b      	ldr	r3, [r7, #20]
 800babc:	683a      	ldr	r2, [r7, #0]
 800babe:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800bac0:	697b      	ldr	r3, [r7, #20]
 800bac2:	2200      	movs	r2, #0
 800bac4:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800bac6:	697b      	ldr	r3, [r7, #20]
 800bac8:	2201      	movs	r2, #1
 800baca:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800bacc:	7afb      	ldrb	r3, [r7, #11]
 800bace:	f003 030f 	and.w	r3, r3, #15
 800bad2:	b2da      	uxtb	r2, r3
 800bad4:	697b      	ldr	r3, [r7, #20]
 800bad6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	799b      	ldrb	r3, [r3, #6]
 800badc:	2b01      	cmp	r3, #1
 800bade:	d102      	bne.n	800bae6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800bae0:	687a      	ldr	r2, [r7, #4]
 800bae2:	697b      	ldr	r3, [r7, #20]
 800bae4:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	6818      	ldr	r0, [r3, #0]
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	799b      	ldrb	r3, [r3, #6]
 800baee:	461a      	mov	r2, r3
 800baf0:	6979      	ldr	r1, [r7, #20]
 800baf2:	f006 fc3b 	bl	801236c <USB_EPStartXfer>

  return HAL_OK;
 800baf6:	2300      	movs	r3, #0
}
 800baf8:	4618      	mov	r0, r3
 800bafa:	3718      	adds	r7, #24
 800bafc:	46bd      	mov	sp, r7
 800bafe:	bd80      	pop	{r7, pc}

0800bb00 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800bb00:	b580      	push	{r7, lr}
 800bb02:	b084      	sub	sp, #16
 800bb04:	af00      	add	r7, sp, #0
 800bb06:	6078      	str	r0, [r7, #4]
 800bb08:	460b      	mov	r3, r1
 800bb0a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800bb0c:	78fb      	ldrb	r3, [r7, #3]
 800bb0e:	f003 030f 	and.w	r3, r3, #15
 800bb12:	687a      	ldr	r2, [r7, #4]
 800bb14:	7912      	ldrb	r2, [r2, #4]
 800bb16:	4293      	cmp	r3, r2
 800bb18:	d901      	bls.n	800bb1e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800bb1a:	2301      	movs	r3, #1
 800bb1c:	e04f      	b.n	800bbbe <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800bb1e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	da0f      	bge.n	800bb46 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800bb26:	78fb      	ldrb	r3, [r7, #3]
 800bb28:	f003 020f 	and.w	r2, r3, #15
 800bb2c:	4613      	mov	r3, r2
 800bb2e:	00db      	lsls	r3, r3, #3
 800bb30:	4413      	add	r3, r2
 800bb32:	009b      	lsls	r3, r3, #2
 800bb34:	3310      	adds	r3, #16
 800bb36:	687a      	ldr	r2, [r7, #4]
 800bb38:	4413      	add	r3, r2
 800bb3a:	3304      	adds	r3, #4
 800bb3c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	2201      	movs	r2, #1
 800bb42:	705a      	strb	r2, [r3, #1]
 800bb44:	e00d      	b.n	800bb62 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800bb46:	78fa      	ldrb	r2, [r7, #3]
 800bb48:	4613      	mov	r3, r2
 800bb4a:	00db      	lsls	r3, r3, #3
 800bb4c:	4413      	add	r3, r2
 800bb4e:	009b      	lsls	r3, r3, #2
 800bb50:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800bb54:	687a      	ldr	r2, [r7, #4]
 800bb56:	4413      	add	r3, r2
 800bb58:	3304      	adds	r3, #4
 800bb5a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	2200      	movs	r2, #0
 800bb60:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	2201      	movs	r2, #1
 800bb66:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800bb68:	78fb      	ldrb	r3, [r7, #3]
 800bb6a:	f003 030f 	and.w	r3, r3, #15
 800bb6e:	b2da      	uxtb	r2, r3
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800bb7a:	2b01      	cmp	r3, #1
 800bb7c:	d101      	bne.n	800bb82 <HAL_PCD_EP_SetStall+0x82>
 800bb7e:	2302      	movs	r3, #2
 800bb80:	e01d      	b.n	800bbbe <HAL_PCD_EP_SetStall+0xbe>
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	2201      	movs	r2, #1
 800bb86:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	68f9      	ldr	r1, [r7, #12]
 800bb90:	4618      	mov	r0, r3
 800bb92:	f006 ffcf 	bl	8012b34 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800bb96:	78fb      	ldrb	r3, [r7, #3]
 800bb98:	f003 030f 	and.w	r3, r3, #15
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d109      	bne.n	800bbb4 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	6818      	ldr	r0, [r3, #0]
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	7999      	ldrb	r1, [r3, #6]
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800bbae:	461a      	mov	r2, r3
 800bbb0:	f007 f9c2 	bl	8012f38 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	2200      	movs	r2, #0
 800bbb8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800bbbc:	2300      	movs	r3, #0
}
 800bbbe:	4618      	mov	r0, r3
 800bbc0:	3710      	adds	r7, #16
 800bbc2:	46bd      	mov	sp, r7
 800bbc4:	bd80      	pop	{r7, pc}

0800bbc6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800bbc6:	b580      	push	{r7, lr}
 800bbc8:	b084      	sub	sp, #16
 800bbca:	af00      	add	r7, sp, #0
 800bbcc:	6078      	str	r0, [r7, #4]
 800bbce:	460b      	mov	r3, r1
 800bbd0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800bbd2:	78fb      	ldrb	r3, [r7, #3]
 800bbd4:	f003 030f 	and.w	r3, r3, #15
 800bbd8:	687a      	ldr	r2, [r7, #4]
 800bbda:	7912      	ldrb	r2, [r2, #4]
 800bbdc:	4293      	cmp	r3, r2
 800bbde:	d901      	bls.n	800bbe4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800bbe0:	2301      	movs	r3, #1
 800bbe2:	e042      	b.n	800bc6a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800bbe4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	da0f      	bge.n	800bc0c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800bbec:	78fb      	ldrb	r3, [r7, #3]
 800bbee:	f003 020f 	and.w	r2, r3, #15
 800bbf2:	4613      	mov	r3, r2
 800bbf4:	00db      	lsls	r3, r3, #3
 800bbf6:	4413      	add	r3, r2
 800bbf8:	009b      	lsls	r3, r3, #2
 800bbfa:	3310      	adds	r3, #16
 800bbfc:	687a      	ldr	r2, [r7, #4]
 800bbfe:	4413      	add	r3, r2
 800bc00:	3304      	adds	r3, #4
 800bc02:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	2201      	movs	r2, #1
 800bc08:	705a      	strb	r2, [r3, #1]
 800bc0a:	e00f      	b.n	800bc2c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800bc0c:	78fb      	ldrb	r3, [r7, #3]
 800bc0e:	f003 020f 	and.w	r2, r3, #15
 800bc12:	4613      	mov	r3, r2
 800bc14:	00db      	lsls	r3, r3, #3
 800bc16:	4413      	add	r3, r2
 800bc18:	009b      	lsls	r3, r3, #2
 800bc1a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800bc1e:	687a      	ldr	r2, [r7, #4]
 800bc20:	4413      	add	r3, r2
 800bc22:	3304      	adds	r3, #4
 800bc24:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	2200      	movs	r2, #0
 800bc2a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	2200      	movs	r2, #0
 800bc30:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800bc32:	78fb      	ldrb	r3, [r7, #3]
 800bc34:	f003 030f 	and.w	r3, r3, #15
 800bc38:	b2da      	uxtb	r2, r3
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800bc44:	2b01      	cmp	r3, #1
 800bc46:	d101      	bne.n	800bc4c <HAL_PCD_EP_ClrStall+0x86>
 800bc48:	2302      	movs	r3, #2
 800bc4a:	e00e      	b.n	800bc6a <HAL_PCD_EP_ClrStall+0xa4>
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	2201      	movs	r2, #1
 800bc50:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	68f9      	ldr	r1, [r7, #12]
 800bc5a:	4618      	mov	r0, r3
 800bc5c:	f006 ffd8 	bl	8012c10 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	2200      	movs	r2, #0
 800bc64:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800bc68:	2300      	movs	r3, #0
}
 800bc6a:	4618      	mov	r0, r3
 800bc6c:	3710      	adds	r7, #16
 800bc6e:	46bd      	mov	sp, r7
 800bc70:	bd80      	pop	{r7, pc}

0800bc72 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800bc72:	b580      	push	{r7, lr}
 800bc74:	b084      	sub	sp, #16
 800bc76:	af00      	add	r7, sp, #0
 800bc78:	6078      	str	r0, [r7, #4]
 800bc7a:	460b      	mov	r3, r1
 800bc7c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800bc7e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	da0c      	bge.n	800bca0 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800bc86:	78fb      	ldrb	r3, [r7, #3]
 800bc88:	f003 020f 	and.w	r2, r3, #15
 800bc8c:	4613      	mov	r3, r2
 800bc8e:	00db      	lsls	r3, r3, #3
 800bc90:	4413      	add	r3, r2
 800bc92:	009b      	lsls	r3, r3, #2
 800bc94:	3310      	adds	r3, #16
 800bc96:	687a      	ldr	r2, [r7, #4]
 800bc98:	4413      	add	r3, r2
 800bc9a:	3304      	adds	r3, #4
 800bc9c:	60fb      	str	r3, [r7, #12]
 800bc9e:	e00c      	b.n	800bcba <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800bca0:	78fb      	ldrb	r3, [r7, #3]
 800bca2:	f003 020f 	and.w	r2, r3, #15
 800bca6:	4613      	mov	r3, r2
 800bca8:	00db      	lsls	r3, r3, #3
 800bcaa:	4413      	add	r3, r2
 800bcac:	009b      	lsls	r3, r3, #2
 800bcae:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800bcb2:	687a      	ldr	r2, [r7, #4]
 800bcb4:	4413      	add	r3, r2
 800bcb6:	3304      	adds	r3, #4
 800bcb8:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	68f9      	ldr	r1, [r7, #12]
 800bcc0:	4618      	mov	r0, r3
 800bcc2:	f006 fdf7 	bl	80128b4 <USB_EPStopXfer>
 800bcc6:	4603      	mov	r3, r0
 800bcc8:	72fb      	strb	r3, [r7, #11]

  return ret;
 800bcca:	7afb      	ldrb	r3, [r7, #11]
}
 800bccc:	4618      	mov	r0, r3
 800bcce:	3710      	adds	r7, #16
 800bcd0:	46bd      	mov	sp, r7
 800bcd2:	bd80      	pop	{r7, pc}

0800bcd4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800bcd4:	b580      	push	{r7, lr}
 800bcd6:	b08a      	sub	sp, #40	@ 0x28
 800bcd8:	af02      	add	r7, sp, #8
 800bcda:	6078      	str	r0, [r7, #4]
 800bcdc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bce4:	697b      	ldr	r3, [r7, #20]
 800bce6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800bce8:	683a      	ldr	r2, [r7, #0]
 800bcea:	4613      	mov	r3, r2
 800bcec:	00db      	lsls	r3, r3, #3
 800bcee:	4413      	add	r3, r2
 800bcf0:	009b      	lsls	r3, r3, #2
 800bcf2:	3310      	adds	r3, #16
 800bcf4:	687a      	ldr	r2, [r7, #4]
 800bcf6:	4413      	add	r3, r2
 800bcf8:	3304      	adds	r3, #4
 800bcfa:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	695a      	ldr	r2, [r3, #20]
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	691b      	ldr	r3, [r3, #16]
 800bd04:	429a      	cmp	r2, r3
 800bd06:	d901      	bls.n	800bd0c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800bd08:	2301      	movs	r3, #1
 800bd0a:	e06b      	b.n	800bde4 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	691a      	ldr	r2, [r3, #16]
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	695b      	ldr	r3, [r3, #20]
 800bd14:	1ad3      	subs	r3, r2, r3
 800bd16:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	689b      	ldr	r3, [r3, #8]
 800bd1c:	69fa      	ldr	r2, [r7, #28]
 800bd1e:	429a      	cmp	r2, r3
 800bd20:	d902      	bls.n	800bd28 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	689b      	ldr	r3, [r3, #8]
 800bd26:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800bd28:	69fb      	ldr	r3, [r7, #28]
 800bd2a:	3303      	adds	r3, #3
 800bd2c:	089b      	lsrs	r3, r3, #2
 800bd2e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800bd30:	e02a      	b.n	800bd88 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	691a      	ldr	r2, [r3, #16]
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	695b      	ldr	r3, [r3, #20]
 800bd3a:	1ad3      	subs	r3, r2, r3
 800bd3c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	689b      	ldr	r3, [r3, #8]
 800bd42:	69fa      	ldr	r2, [r7, #28]
 800bd44:	429a      	cmp	r2, r3
 800bd46:	d902      	bls.n	800bd4e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	689b      	ldr	r3, [r3, #8]
 800bd4c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800bd4e:	69fb      	ldr	r3, [r7, #28]
 800bd50:	3303      	adds	r3, #3
 800bd52:	089b      	lsrs	r3, r3, #2
 800bd54:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	68d9      	ldr	r1, [r3, #12]
 800bd5a:	683b      	ldr	r3, [r7, #0]
 800bd5c:	b2da      	uxtb	r2, r3
 800bd5e:	69fb      	ldr	r3, [r7, #28]
 800bd60:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800bd66:	9300      	str	r3, [sp, #0]
 800bd68:	4603      	mov	r3, r0
 800bd6a:	6978      	ldr	r0, [r7, #20]
 800bd6c:	f006 fe4c 	bl	8012a08 <USB_WritePacket>

    ep->xfer_buff  += len;
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	68da      	ldr	r2, [r3, #12]
 800bd74:	69fb      	ldr	r3, [r7, #28]
 800bd76:	441a      	add	r2, r3
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	695a      	ldr	r2, [r3, #20]
 800bd80:	69fb      	ldr	r3, [r7, #28]
 800bd82:	441a      	add	r2, r3
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800bd88:	683b      	ldr	r3, [r7, #0]
 800bd8a:	015a      	lsls	r2, r3, #5
 800bd8c:	693b      	ldr	r3, [r7, #16]
 800bd8e:	4413      	add	r3, r2
 800bd90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bd94:	699b      	ldr	r3, [r3, #24]
 800bd96:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800bd98:	69ba      	ldr	r2, [r7, #24]
 800bd9a:	429a      	cmp	r2, r3
 800bd9c:	d809      	bhi.n	800bdb2 <PCD_WriteEmptyTxFifo+0xde>
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	695a      	ldr	r2, [r3, #20]
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800bda6:	429a      	cmp	r2, r3
 800bda8:	d203      	bcs.n	800bdb2 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	691b      	ldr	r3, [r3, #16]
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d1bf      	bne.n	800bd32 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	691a      	ldr	r2, [r3, #16]
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	695b      	ldr	r3, [r3, #20]
 800bdba:	429a      	cmp	r2, r3
 800bdbc:	d811      	bhi.n	800bde2 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800bdbe:	683b      	ldr	r3, [r7, #0]
 800bdc0:	f003 030f 	and.w	r3, r3, #15
 800bdc4:	2201      	movs	r2, #1
 800bdc6:	fa02 f303 	lsl.w	r3, r2, r3
 800bdca:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800bdcc:	693b      	ldr	r3, [r7, #16]
 800bdce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bdd2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bdd4:	68bb      	ldr	r3, [r7, #8]
 800bdd6:	43db      	mvns	r3, r3
 800bdd8:	6939      	ldr	r1, [r7, #16]
 800bdda:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800bdde:	4013      	ands	r3, r2
 800bde0:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800bde2:	2300      	movs	r3, #0
}
 800bde4:	4618      	mov	r0, r3
 800bde6:	3720      	adds	r7, #32
 800bde8:	46bd      	mov	sp, r7
 800bdea:	bd80      	pop	{r7, pc}

0800bdec <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800bdec:	b580      	push	{r7, lr}
 800bdee:	b088      	sub	sp, #32
 800bdf0:	af00      	add	r7, sp, #0
 800bdf2:	6078      	str	r0, [r7, #4]
 800bdf4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bdfc:	69fb      	ldr	r3, [r7, #28]
 800bdfe:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800be00:	69fb      	ldr	r3, [r7, #28]
 800be02:	333c      	adds	r3, #60	@ 0x3c
 800be04:	3304      	adds	r3, #4
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800be0a:	683b      	ldr	r3, [r7, #0]
 800be0c:	015a      	lsls	r2, r3, #5
 800be0e:	69bb      	ldr	r3, [r7, #24]
 800be10:	4413      	add	r3, r2
 800be12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800be16:	689b      	ldr	r3, [r3, #8]
 800be18:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	799b      	ldrb	r3, [r3, #6]
 800be1e:	2b01      	cmp	r3, #1
 800be20:	d17b      	bne.n	800bf1a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800be22:	693b      	ldr	r3, [r7, #16]
 800be24:	f003 0308 	and.w	r3, r3, #8
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d015      	beq.n	800be58 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800be2c:	697b      	ldr	r3, [r7, #20]
 800be2e:	4a61      	ldr	r2, [pc, #388]	@ (800bfb4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800be30:	4293      	cmp	r3, r2
 800be32:	f240 80b9 	bls.w	800bfa8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800be36:	693b      	ldr	r3, [r7, #16]
 800be38:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	f000 80b3 	beq.w	800bfa8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800be42:	683b      	ldr	r3, [r7, #0]
 800be44:	015a      	lsls	r2, r3, #5
 800be46:	69bb      	ldr	r3, [r7, #24]
 800be48:	4413      	add	r3, r2
 800be4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800be4e:	461a      	mov	r2, r3
 800be50:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800be54:	6093      	str	r3, [r2, #8]
 800be56:	e0a7      	b.n	800bfa8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800be58:	693b      	ldr	r3, [r7, #16]
 800be5a:	f003 0320 	and.w	r3, r3, #32
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d009      	beq.n	800be76 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800be62:	683b      	ldr	r3, [r7, #0]
 800be64:	015a      	lsls	r2, r3, #5
 800be66:	69bb      	ldr	r3, [r7, #24]
 800be68:	4413      	add	r3, r2
 800be6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800be6e:	461a      	mov	r2, r3
 800be70:	2320      	movs	r3, #32
 800be72:	6093      	str	r3, [r2, #8]
 800be74:	e098      	b.n	800bfa8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800be76:	693b      	ldr	r3, [r7, #16]
 800be78:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	f040 8093 	bne.w	800bfa8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800be82:	697b      	ldr	r3, [r7, #20]
 800be84:	4a4b      	ldr	r2, [pc, #300]	@ (800bfb4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800be86:	4293      	cmp	r3, r2
 800be88:	d90f      	bls.n	800beaa <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800be8a:	693b      	ldr	r3, [r7, #16]
 800be8c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800be90:	2b00      	cmp	r3, #0
 800be92:	d00a      	beq.n	800beaa <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800be94:	683b      	ldr	r3, [r7, #0]
 800be96:	015a      	lsls	r2, r3, #5
 800be98:	69bb      	ldr	r3, [r7, #24]
 800be9a:	4413      	add	r3, r2
 800be9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bea0:	461a      	mov	r2, r3
 800bea2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bea6:	6093      	str	r3, [r2, #8]
 800bea8:	e07e      	b.n	800bfa8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800beaa:	683a      	ldr	r2, [r7, #0]
 800beac:	4613      	mov	r3, r2
 800beae:	00db      	lsls	r3, r3, #3
 800beb0:	4413      	add	r3, r2
 800beb2:	009b      	lsls	r3, r3, #2
 800beb4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800beb8:	687a      	ldr	r2, [r7, #4]
 800beba:	4413      	add	r3, r2
 800bebc:	3304      	adds	r3, #4
 800bebe:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	6a1a      	ldr	r2, [r3, #32]
 800bec4:	683b      	ldr	r3, [r7, #0]
 800bec6:	0159      	lsls	r1, r3, #5
 800bec8:	69bb      	ldr	r3, [r7, #24]
 800beca:	440b      	add	r3, r1
 800becc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bed0:	691b      	ldr	r3, [r3, #16]
 800bed2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bed6:	1ad2      	subs	r2, r2, r3
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800bedc:	683b      	ldr	r3, [r7, #0]
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d114      	bne.n	800bf0c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	691b      	ldr	r3, [r3, #16]
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d109      	bne.n	800befe <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	6818      	ldr	r0, [r3, #0]
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800bef4:	461a      	mov	r2, r3
 800bef6:	2101      	movs	r1, #1
 800bef8:	f007 f81e 	bl	8012f38 <USB_EP0_OutStart>
 800befc:	e006      	b.n	800bf0c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	68da      	ldr	r2, [r3, #12]
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	695b      	ldr	r3, [r3, #20]
 800bf06:	441a      	add	r2, r3
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800bf0c:	683b      	ldr	r3, [r7, #0]
 800bf0e:	b2db      	uxtb	r3, r3
 800bf10:	4619      	mov	r1, r3
 800bf12:	6878      	ldr	r0, [r7, #4]
 800bf14:	f009 fbe6 	bl	80156e4 <HAL_PCD_DataOutStageCallback>
 800bf18:	e046      	b.n	800bfa8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800bf1a:	697b      	ldr	r3, [r7, #20]
 800bf1c:	4a26      	ldr	r2, [pc, #152]	@ (800bfb8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800bf1e:	4293      	cmp	r3, r2
 800bf20:	d124      	bne.n	800bf6c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800bf22:	693b      	ldr	r3, [r7, #16]
 800bf24:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d00a      	beq.n	800bf42 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800bf2c:	683b      	ldr	r3, [r7, #0]
 800bf2e:	015a      	lsls	r2, r3, #5
 800bf30:	69bb      	ldr	r3, [r7, #24]
 800bf32:	4413      	add	r3, r2
 800bf34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bf38:	461a      	mov	r2, r3
 800bf3a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bf3e:	6093      	str	r3, [r2, #8]
 800bf40:	e032      	b.n	800bfa8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800bf42:	693b      	ldr	r3, [r7, #16]
 800bf44:	f003 0320 	and.w	r3, r3, #32
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d008      	beq.n	800bf5e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800bf4c:	683b      	ldr	r3, [r7, #0]
 800bf4e:	015a      	lsls	r2, r3, #5
 800bf50:	69bb      	ldr	r3, [r7, #24]
 800bf52:	4413      	add	r3, r2
 800bf54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bf58:	461a      	mov	r2, r3
 800bf5a:	2320      	movs	r3, #32
 800bf5c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800bf5e:	683b      	ldr	r3, [r7, #0]
 800bf60:	b2db      	uxtb	r3, r3
 800bf62:	4619      	mov	r1, r3
 800bf64:	6878      	ldr	r0, [r7, #4]
 800bf66:	f009 fbbd 	bl	80156e4 <HAL_PCD_DataOutStageCallback>
 800bf6a:	e01d      	b.n	800bfa8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800bf6c:	683b      	ldr	r3, [r7, #0]
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d114      	bne.n	800bf9c <PCD_EP_OutXfrComplete_int+0x1b0>
 800bf72:	6879      	ldr	r1, [r7, #4]
 800bf74:	683a      	ldr	r2, [r7, #0]
 800bf76:	4613      	mov	r3, r2
 800bf78:	00db      	lsls	r3, r3, #3
 800bf7a:	4413      	add	r3, r2
 800bf7c:	009b      	lsls	r3, r3, #2
 800bf7e:	440b      	add	r3, r1
 800bf80:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d108      	bne.n	800bf9c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	6818      	ldr	r0, [r3, #0]
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800bf94:	461a      	mov	r2, r3
 800bf96:	2100      	movs	r1, #0
 800bf98:	f006 ffce 	bl	8012f38 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800bf9c:	683b      	ldr	r3, [r7, #0]
 800bf9e:	b2db      	uxtb	r3, r3
 800bfa0:	4619      	mov	r1, r3
 800bfa2:	6878      	ldr	r0, [r7, #4]
 800bfa4:	f009 fb9e 	bl	80156e4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800bfa8:	2300      	movs	r3, #0
}
 800bfaa:	4618      	mov	r0, r3
 800bfac:	3720      	adds	r7, #32
 800bfae:	46bd      	mov	sp, r7
 800bfb0:	bd80      	pop	{r7, pc}
 800bfb2:	bf00      	nop
 800bfb4:	4f54300a 	.word	0x4f54300a
 800bfb8:	4f54310a 	.word	0x4f54310a

0800bfbc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800bfbc:	b580      	push	{r7, lr}
 800bfbe:	b086      	sub	sp, #24
 800bfc0:	af00      	add	r7, sp, #0
 800bfc2:	6078      	str	r0, [r7, #4]
 800bfc4:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bfcc:	697b      	ldr	r3, [r7, #20]
 800bfce:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800bfd0:	697b      	ldr	r3, [r7, #20]
 800bfd2:	333c      	adds	r3, #60	@ 0x3c
 800bfd4:	3304      	adds	r3, #4
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800bfda:	683b      	ldr	r3, [r7, #0]
 800bfdc:	015a      	lsls	r2, r3, #5
 800bfde:	693b      	ldr	r3, [r7, #16]
 800bfe0:	4413      	add	r3, r2
 800bfe2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bfe6:	689b      	ldr	r3, [r3, #8]
 800bfe8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	4a15      	ldr	r2, [pc, #84]	@ (800c044 <PCD_EP_OutSetupPacket_int+0x88>)
 800bfee:	4293      	cmp	r3, r2
 800bff0:	d90e      	bls.n	800c010 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800bff2:	68bb      	ldr	r3, [r7, #8]
 800bff4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d009      	beq.n	800c010 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800bffc:	683b      	ldr	r3, [r7, #0]
 800bffe:	015a      	lsls	r2, r3, #5
 800c000:	693b      	ldr	r3, [r7, #16]
 800c002:	4413      	add	r3, r2
 800c004:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c008:	461a      	mov	r2, r3
 800c00a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c00e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800c010:	6878      	ldr	r0, [r7, #4]
 800c012:	f009 fb55 	bl	80156c0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	4a0a      	ldr	r2, [pc, #40]	@ (800c044 <PCD_EP_OutSetupPacket_int+0x88>)
 800c01a:	4293      	cmp	r3, r2
 800c01c:	d90c      	bls.n	800c038 <PCD_EP_OutSetupPacket_int+0x7c>
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	799b      	ldrb	r3, [r3, #6]
 800c022:	2b01      	cmp	r3, #1
 800c024:	d108      	bne.n	800c038 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	6818      	ldr	r0, [r3, #0]
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800c030:	461a      	mov	r2, r3
 800c032:	2101      	movs	r1, #1
 800c034:	f006 ff80 	bl	8012f38 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800c038:	2300      	movs	r3, #0
}
 800c03a:	4618      	mov	r0, r3
 800c03c:	3718      	adds	r7, #24
 800c03e:	46bd      	mov	sp, r7
 800c040:	bd80      	pop	{r7, pc}
 800c042:	bf00      	nop
 800c044:	4f54300a 	.word	0x4f54300a

0800c048 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800c048:	b480      	push	{r7}
 800c04a:	b085      	sub	sp, #20
 800c04c:	af00      	add	r7, sp, #0
 800c04e:	6078      	str	r0, [r7, #4]
 800c050:	460b      	mov	r3, r1
 800c052:	70fb      	strb	r3, [r7, #3]
 800c054:	4613      	mov	r3, r2
 800c056:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c05e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800c060:	78fb      	ldrb	r3, [r7, #3]
 800c062:	2b00      	cmp	r3, #0
 800c064:	d107      	bne.n	800c076 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800c066:	883b      	ldrh	r3, [r7, #0]
 800c068:	0419      	lsls	r1, r3, #16
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	68ba      	ldr	r2, [r7, #8]
 800c070:	430a      	orrs	r2, r1
 800c072:	629a      	str	r2, [r3, #40]	@ 0x28
 800c074:	e028      	b.n	800c0c8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c07c:	0c1b      	lsrs	r3, r3, #16
 800c07e:	68ba      	ldr	r2, [r7, #8]
 800c080:	4413      	add	r3, r2
 800c082:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800c084:	2300      	movs	r3, #0
 800c086:	73fb      	strb	r3, [r7, #15]
 800c088:	e00d      	b.n	800c0a6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	681a      	ldr	r2, [r3, #0]
 800c08e:	7bfb      	ldrb	r3, [r7, #15]
 800c090:	3340      	adds	r3, #64	@ 0x40
 800c092:	009b      	lsls	r3, r3, #2
 800c094:	4413      	add	r3, r2
 800c096:	685b      	ldr	r3, [r3, #4]
 800c098:	0c1b      	lsrs	r3, r3, #16
 800c09a:	68ba      	ldr	r2, [r7, #8]
 800c09c:	4413      	add	r3, r2
 800c09e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800c0a0:	7bfb      	ldrb	r3, [r7, #15]
 800c0a2:	3301      	adds	r3, #1
 800c0a4:	73fb      	strb	r3, [r7, #15]
 800c0a6:	7bfa      	ldrb	r2, [r7, #15]
 800c0a8:	78fb      	ldrb	r3, [r7, #3]
 800c0aa:	3b01      	subs	r3, #1
 800c0ac:	429a      	cmp	r2, r3
 800c0ae:	d3ec      	bcc.n	800c08a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800c0b0:	883b      	ldrh	r3, [r7, #0]
 800c0b2:	0418      	lsls	r0, r3, #16
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	6819      	ldr	r1, [r3, #0]
 800c0b8:	78fb      	ldrb	r3, [r7, #3]
 800c0ba:	3b01      	subs	r3, #1
 800c0bc:	68ba      	ldr	r2, [r7, #8]
 800c0be:	4302      	orrs	r2, r0
 800c0c0:	3340      	adds	r3, #64	@ 0x40
 800c0c2:	009b      	lsls	r3, r3, #2
 800c0c4:	440b      	add	r3, r1
 800c0c6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800c0c8:	2300      	movs	r3, #0
}
 800c0ca:	4618      	mov	r0, r3
 800c0cc:	3714      	adds	r7, #20
 800c0ce:	46bd      	mov	sp, r7
 800c0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d4:	4770      	bx	lr

0800c0d6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800c0d6:	b480      	push	{r7}
 800c0d8:	b083      	sub	sp, #12
 800c0da:	af00      	add	r7, sp, #0
 800c0dc:	6078      	str	r0, [r7, #4]
 800c0de:	460b      	mov	r3, r1
 800c0e0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	887a      	ldrh	r2, [r7, #2]
 800c0e8:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800c0ea:	2300      	movs	r3, #0
}
 800c0ec:	4618      	mov	r0, r3
 800c0ee:	370c      	adds	r7, #12
 800c0f0:	46bd      	mov	sp, r7
 800c0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f6:	4770      	bx	lr

0800c0f8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800c0f8:	b480      	push	{r7}
 800c0fa:	b085      	sub	sp, #20
 800c0fc:	af00      	add	r7, sp, #0
 800c0fe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	2201      	movs	r2, #1
 800c10a:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	2200      	movs	r2, #0
 800c112:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	699b      	ldr	r3, [r3, #24]
 800c11a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c126:	4b05      	ldr	r3, [pc, #20]	@ (800c13c <HAL_PCDEx_ActivateLPM+0x44>)
 800c128:	4313      	orrs	r3, r2
 800c12a:	68fa      	ldr	r2, [r7, #12]
 800c12c:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800c12e:	2300      	movs	r3, #0
}
 800c130:	4618      	mov	r0, r3
 800c132:	3714      	adds	r7, #20
 800c134:	46bd      	mov	sp, r7
 800c136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c13a:	4770      	bx	lr
 800c13c:	10000003 	.word	0x10000003

0800c140 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800c140:	b480      	push	{r7}
 800c142:	b083      	sub	sp, #12
 800c144:	af00      	add	r7, sp, #0
 800c146:	6078      	str	r0, [r7, #4]
 800c148:	460b      	mov	r3, r1
 800c14a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800c14c:	bf00      	nop
 800c14e:	370c      	adds	r7, #12
 800c150:	46bd      	mov	sp, r7
 800c152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c156:	4770      	bx	lr

0800c158 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800c158:	b580      	push	{r7, lr}
 800c15a:	b084      	sub	sp, #16
 800c15c:	af00      	add	r7, sp, #0
 800c15e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800c160:	4b19      	ldr	r3, [pc, #100]	@ (800c1c8 <HAL_PWREx_ConfigSupply+0x70>)
 800c162:	68db      	ldr	r3, [r3, #12]
 800c164:	f003 0304 	and.w	r3, r3, #4
 800c168:	2b04      	cmp	r3, #4
 800c16a:	d00a      	beq.n	800c182 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800c16c:	4b16      	ldr	r3, [pc, #88]	@ (800c1c8 <HAL_PWREx_ConfigSupply+0x70>)
 800c16e:	68db      	ldr	r3, [r3, #12]
 800c170:	f003 0307 	and.w	r3, r3, #7
 800c174:	687a      	ldr	r2, [r7, #4]
 800c176:	429a      	cmp	r2, r3
 800c178:	d001      	beq.n	800c17e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800c17a:	2301      	movs	r3, #1
 800c17c:	e01f      	b.n	800c1be <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800c17e:	2300      	movs	r3, #0
 800c180:	e01d      	b.n	800c1be <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800c182:	4b11      	ldr	r3, [pc, #68]	@ (800c1c8 <HAL_PWREx_ConfigSupply+0x70>)
 800c184:	68db      	ldr	r3, [r3, #12]
 800c186:	f023 0207 	bic.w	r2, r3, #7
 800c18a:	490f      	ldr	r1, [pc, #60]	@ (800c1c8 <HAL_PWREx_ConfigSupply+0x70>)
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	4313      	orrs	r3, r2
 800c190:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800c192:	f7f6 f9a3 	bl	80024dc <HAL_GetTick>
 800c196:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800c198:	e009      	b.n	800c1ae <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800c19a:	f7f6 f99f 	bl	80024dc <HAL_GetTick>
 800c19e:	4602      	mov	r2, r0
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	1ad3      	subs	r3, r2, r3
 800c1a4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800c1a8:	d901      	bls.n	800c1ae <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800c1aa:	2301      	movs	r3, #1
 800c1ac:	e007      	b.n	800c1be <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800c1ae:	4b06      	ldr	r3, [pc, #24]	@ (800c1c8 <HAL_PWREx_ConfigSupply+0x70>)
 800c1b0:	685b      	ldr	r3, [r3, #4]
 800c1b2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c1b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c1ba:	d1ee      	bne.n	800c19a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800c1bc:	2300      	movs	r3, #0
}
 800c1be:	4618      	mov	r0, r3
 800c1c0:	3710      	adds	r7, #16
 800c1c2:	46bd      	mov	sp, r7
 800c1c4:	bd80      	pop	{r7, pc}
 800c1c6:	bf00      	nop
 800c1c8:	58024800 	.word	0x58024800

0800c1cc <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800c1cc:	b480      	push	{r7}
 800c1ce:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800c1d0:	4b05      	ldr	r3, [pc, #20]	@ (800c1e8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800c1d2:	68db      	ldr	r3, [r3, #12]
 800c1d4:	4a04      	ldr	r2, [pc, #16]	@ (800c1e8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800c1d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c1da:	60d3      	str	r3, [r2, #12]
}
 800c1dc:	bf00      	nop
 800c1de:	46bd      	mov	sp, r7
 800c1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e4:	4770      	bx	lr
 800c1e6:	bf00      	nop
 800c1e8:	58024800 	.word	0x58024800

0800c1ec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c1ec:	b580      	push	{r7, lr}
 800c1ee:	b08c      	sub	sp, #48	@ 0x30
 800c1f0:	af00      	add	r7, sp, #0
 800c1f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d102      	bne.n	800c200 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800c1fa:	2301      	movs	r3, #1
 800c1fc:	f000 bc48 	b.w	800ca90 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	f003 0301 	and.w	r3, r3, #1
 800c208:	2b00      	cmp	r3, #0
 800c20a:	f000 8088 	beq.w	800c31e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c20e:	4b99      	ldr	r3, [pc, #612]	@ (800c474 <HAL_RCC_OscConfig+0x288>)
 800c210:	691b      	ldr	r3, [r3, #16]
 800c212:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c216:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800c218:	4b96      	ldr	r3, [pc, #600]	@ (800c474 <HAL_RCC_OscConfig+0x288>)
 800c21a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c21c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800c21e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c220:	2b10      	cmp	r3, #16
 800c222:	d007      	beq.n	800c234 <HAL_RCC_OscConfig+0x48>
 800c224:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c226:	2b18      	cmp	r3, #24
 800c228:	d111      	bne.n	800c24e <HAL_RCC_OscConfig+0x62>
 800c22a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c22c:	f003 0303 	and.w	r3, r3, #3
 800c230:	2b02      	cmp	r3, #2
 800c232:	d10c      	bne.n	800c24e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c234:	4b8f      	ldr	r3, [pc, #572]	@ (800c474 <HAL_RCC_OscConfig+0x288>)
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d06d      	beq.n	800c31c <HAL_RCC_OscConfig+0x130>
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	685b      	ldr	r3, [r3, #4]
 800c244:	2b00      	cmp	r3, #0
 800c246:	d169      	bne.n	800c31c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800c248:	2301      	movs	r3, #1
 800c24a:	f000 bc21 	b.w	800ca90 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	685b      	ldr	r3, [r3, #4]
 800c252:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c256:	d106      	bne.n	800c266 <HAL_RCC_OscConfig+0x7a>
 800c258:	4b86      	ldr	r3, [pc, #536]	@ (800c474 <HAL_RCC_OscConfig+0x288>)
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	4a85      	ldr	r2, [pc, #532]	@ (800c474 <HAL_RCC_OscConfig+0x288>)
 800c25e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c262:	6013      	str	r3, [r2, #0]
 800c264:	e02e      	b.n	800c2c4 <HAL_RCC_OscConfig+0xd8>
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	685b      	ldr	r3, [r3, #4]
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d10c      	bne.n	800c288 <HAL_RCC_OscConfig+0x9c>
 800c26e:	4b81      	ldr	r3, [pc, #516]	@ (800c474 <HAL_RCC_OscConfig+0x288>)
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	4a80      	ldr	r2, [pc, #512]	@ (800c474 <HAL_RCC_OscConfig+0x288>)
 800c274:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c278:	6013      	str	r3, [r2, #0]
 800c27a:	4b7e      	ldr	r3, [pc, #504]	@ (800c474 <HAL_RCC_OscConfig+0x288>)
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	4a7d      	ldr	r2, [pc, #500]	@ (800c474 <HAL_RCC_OscConfig+0x288>)
 800c280:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800c284:	6013      	str	r3, [r2, #0]
 800c286:	e01d      	b.n	800c2c4 <HAL_RCC_OscConfig+0xd8>
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	685b      	ldr	r3, [r3, #4]
 800c28c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800c290:	d10c      	bne.n	800c2ac <HAL_RCC_OscConfig+0xc0>
 800c292:	4b78      	ldr	r3, [pc, #480]	@ (800c474 <HAL_RCC_OscConfig+0x288>)
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	4a77      	ldr	r2, [pc, #476]	@ (800c474 <HAL_RCC_OscConfig+0x288>)
 800c298:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800c29c:	6013      	str	r3, [r2, #0]
 800c29e:	4b75      	ldr	r3, [pc, #468]	@ (800c474 <HAL_RCC_OscConfig+0x288>)
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	4a74      	ldr	r2, [pc, #464]	@ (800c474 <HAL_RCC_OscConfig+0x288>)
 800c2a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c2a8:	6013      	str	r3, [r2, #0]
 800c2aa:	e00b      	b.n	800c2c4 <HAL_RCC_OscConfig+0xd8>
 800c2ac:	4b71      	ldr	r3, [pc, #452]	@ (800c474 <HAL_RCC_OscConfig+0x288>)
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	4a70      	ldr	r2, [pc, #448]	@ (800c474 <HAL_RCC_OscConfig+0x288>)
 800c2b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c2b6:	6013      	str	r3, [r2, #0]
 800c2b8:	4b6e      	ldr	r3, [pc, #440]	@ (800c474 <HAL_RCC_OscConfig+0x288>)
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	4a6d      	ldr	r2, [pc, #436]	@ (800c474 <HAL_RCC_OscConfig+0x288>)
 800c2be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800c2c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	685b      	ldr	r3, [r3, #4]
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d013      	beq.n	800c2f4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c2cc:	f7f6 f906 	bl	80024dc <HAL_GetTick>
 800c2d0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800c2d2:	e008      	b.n	800c2e6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c2d4:	f7f6 f902 	bl	80024dc <HAL_GetTick>
 800c2d8:	4602      	mov	r2, r0
 800c2da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2dc:	1ad3      	subs	r3, r2, r3
 800c2de:	2b64      	cmp	r3, #100	@ 0x64
 800c2e0:	d901      	bls.n	800c2e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800c2e2:	2303      	movs	r3, #3
 800c2e4:	e3d4      	b.n	800ca90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800c2e6:	4b63      	ldr	r3, [pc, #396]	@ (800c474 <HAL_RCC_OscConfig+0x288>)
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d0f0      	beq.n	800c2d4 <HAL_RCC_OscConfig+0xe8>
 800c2f2:	e014      	b.n	800c31e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c2f4:	f7f6 f8f2 	bl	80024dc <HAL_GetTick>
 800c2f8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800c2fa:	e008      	b.n	800c30e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c2fc:	f7f6 f8ee 	bl	80024dc <HAL_GetTick>
 800c300:	4602      	mov	r2, r0
 800c302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c304:	1ad3      	subs	r3, r2, r3
 800c306:	2b64      	cmp	r3, #100	@ 0x64
 800c308:	d901      	bls.n	800c30e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800c30a:	2303      	movs	r3, #3
 800c30c:	e3c0      	b.n	800ca90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800c30e:	4b59      	ldr	r3, [pc, #356]	@ (800c474 <HAL_RCC_OscConfig+0x288>)
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c316:	2b00      	cmp	r3, #0
 800c318:	d1f0      	bne.n	800c2fc <HAL_RCC_OscConfig+0x110>
 800c31a:	e000      	b.n	800c31e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c31c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	f003 0302 	and.w	r3, r3, #2
 800c326:	2b00      	cmp	r3, #0
 800c328:	f000 80ca 	beq.w	800c4c0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c32c:	4b51      	ldr	r3, [pc, #324]	@ (800c474 <HAL_RCC_OscConfig+0x288>)
 800c32e:	691b      	ldr	r3, [r3, #16]
 800c330:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c334:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800c336:	4b4f      	ldr	r3, [pc, #316]	@ (800c474 <HAL_RCC_OscConfig+0x288>)
 800c338:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c33a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800c33c:	6a3b      	ldr	r3, [r7, #32]
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d007      	beq.n	800c352 <HAL_RCC_OscConfig+0x166>
 800c342:	6a3b      	ldr	r3, [r7, #32]
 800c344:	2b18      	cmp	r3, #24
 800c346:	d156      	bne.n	800c3f6 <HAL_RCC_OscConfig+0x20a>
 800c348:	69fb      	ldr	r3, [r7, #28]
 800c34a:	f003 0303 	and.w	r3, r3, #3
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d151      	bne.n	800c3f6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c352:	4b48      	ldr	r3, [pc, #288]	@ (800c474 <HAL_RCC_OscConfig+0x288>)
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	f003 0304 	and.w	r3, r3, #4
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d005      	beq.n	800c36a <HAL_RCC_OscConfig+0x17e>
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	68db      	ldr	r3, [r3, #12]
 800c362:	2b00      	cmp	r3, #0
 800c364:	d101      	bne.n	800c36a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800c366:	2301      	movs	r3, #1
 800c368:	e392      	b.n	800ca90 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800c36a:	4b42      	ldr	r3, [pc, #264]	@ (800c474 <HAL_RCC_OscConfig+0x288>)
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	f023 0219 	bic.w	r2, r3, #25
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	68db      	ldr	r3, [r3, #12]
 800c376:	493f      	ldr	r1, [pc, #252]	@ (800c474 <HAL_RCC_OscConfig+0x288>)
 800c378:	4313      	orrs	r3, r2
 800c37a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c37c:	f7f6 f8ae 	bl	80024dc <HAL_GetTick>
 800c380:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800c382:	e008      	b.n	800c396 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c384:	f7f6 f8aa 	bl	80024dc <HAL_GetTick>
 800c388:	4602      	mov	r2, r0
 800c38a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c38c:	1ad3      	subs	r3, r2, r3
 800c38e:	2b02      	cmp	r3, #2
 800c390:	d901      	bls.n	800c396 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800c392:	2303      	movs	r3, #3
 800c394:	e37c      	b.n	800ca90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800c396:	4b37      	ldr	r3, [pc, #220]	@ (800c474 <HAL_RCC_OscConfig+0x288>)
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	f003 0304 	and.w	r3, r3, #4
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d0f0      	beq.n	800c384 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c3a2:	f7f6 f8cb 	bl	800253c <HAL_GetREVID>
 800c3a6:	4603      	mov	r3, r0
 800c3a8:	f241 0203 	movw	r2, #4099	@ 0x1003
 800c3ac:	4293      	cmp	r3, r2
 800c3ae:	d817      	bhi.n	800c3e0 <HAL_RCC_OscConfig+0x1f4>
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	691b      	ldr	r3, [r3, #16]
 800c3b4:	2b40      	cmp	r3, #64	@ 0x40
 800c3b6:	d108      	bne.n	800c3ca <HAL_RCC_OscConfig+0x1de>
 800c3b8:	4b2e      	ldr	r3, [pc, #184]	@ (800c474 <HAL_RCC_OscConfig+0x288>)
 800c3ba:	685b      	ldr	r3, [r3, #4]
 800c3bc:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800c3c0:	4a2c      	ldr	r2, [pc, #176]	@ (800c474 <HAL_RCC_OscConfig+0x288>)
 800c3c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c3c6:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c3c8:	e07a      	b.n	800c4c0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c3ca:	4b2a      	ldr	r3, [pc, #168]	@ (800c474 <HAL_RCC_OscConfig+0x288>)
 800c3cc:	685b      	ldr	r3, [r3, #4]
 800c3ce:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	691b      	ldr	r3, [r3, #16]
 800c3d6:	031b      	lsls	r3, r3, #12
 800c3d8:	4926      	ldr	r1, [pc, #152]	@ (800c474 <HAL_RCC_OscConfig+0x288>)
 800c3da:	4313      	orrs	r3, r2
 800c3dc:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c3de:	e06f      	b.n	800c4c0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c3e0:	4b24      	ldr	r3, [pc, #144]	@ (800c474 <HAL_RCC_OscConfig+0x288>)
 800c3e2:	685b      	ldr	r3, [r3, #4]
 800c3e4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	691b      	ldr	r3, [r3, #16]
 800c3ec:	061b      	lsls	r3, r3, #24
 800c3ee:	4921      	ldr	r1, [pc, #132]	@ (800c474 <HAL_RCC_OscConfig+0x288>)
 800c3f0:	4313      	orrs	r3, r2
 800c3f2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c3f4:	e064      	b.n	800c4c0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	68db      	ldr	r3, [r3, #12]
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d047      	beq.n	800c48e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800c3fe:	4b1d      	ldr	r3, [pc, #116]	@ (800c474 <HAL_RCC_OscConfig+0x288>)
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	f023 0219 	bic.w	r2, r3, #25
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	68db      	ldr	r3, [r3, #12]
 800c40a:	491a      	ldr	r1, [pc, #104]	@ (800c474 <HAL_RCC_OscConfig+0x288>)
 800c40c:	4313      	orrs	r3, r2
 800c40e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c410:	f7f6 f864 	bl	80024dc <HAL_GetTick>
 800c414:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800c416:	e008      	b.n	800c42a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c418:	f7f6 f860 	bl	80024dc <HAL_GetTick>
 800c41c:	4602      	mov	r2, r0
 800c41e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c420:	1ad3      	subs	r3, r2, r3
 800c422:	2b02      	cmp	r3, #2
 800c424:	d901      	bls.n	800c42a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800c426:	2303      	movs	r3, #3
 800c428:	e332      	b.n	800ca90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800c42a:	4b12      	ldr	r3, [pc, #72]	@ (800c474 <HAL_RCC_OscConfig+0x288>)
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	f003 0304 	and.w	r3, r3, #4
 800c432:	2b00      	cmp	r3, #0
 800c434:	d0f0      	beq.n	800c418 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c436:	f7f6 f881 	bl	800253c <HAL_GetREVID>
 800c43a:	4603      	mov	r3, r0
 800c43c:	f241 0203 	movw	r2, #4099	@ 0x1003
 800c440:	4293      	cmp	r3, r2
 800c442:	d819      	bhi.n	800c478 <HAL_RCC_OscConfig+0x28c>
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	691b      	ldr	r3, [r3, #16]
 800c448:	2b40      	cmp	r3, #64	@ 0x40
 800c44a:	d108      	bne.n	800c45e <HAL_RCC_OscConfig+0x272>
 800c44c:	4b09      	ldr	r3, [pc, #36]	@ (800c474 <HAL_RCC_OscConfig+0x288>)
 800c44e:	685b      	ldr	r3, [r3, #4]
 800c450:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800c454:	4a07      	ldr	r2, [pc, #28]	@ (800c474 <HAL_RCC_OscConfig+0x288>)
 800c456:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c45a:	6053      	str	r3, [r2, #4]
 800c45c:	e030      	b.n	800c4c0 <HAL_RCC_OscConfig+0x2d4>
 800c45e:	4b05      	ldr	r3, [pc, #20]	@ (800c474 <HAL_RCC_OscConfig+0x288>)
 800c460:	685b      	ldr	r3, [r3, #4]
 800c462:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	691b      	ldr	r3, [r3, #16]
 800c46a:	031b      	lsls	r3, r3, #12
 800c46c:	4901      	ldr	r1, [pc, #4]	@ (800c474 <HAL_RCC_OscConfig+0x288>)
 800c46e:	4313      	orrs	r3, r2
 800c470:	604b      	str	r3, [r1, #4]
 800c472:	e025      	b.n	800c4c0 <HAL_RCC_OscConfig+0x2d4>
 800c474:	58024400 	.word	0x58024400
 800c478:	4b9a      	ldr	r3, [pc, #616]	@ (800c6e4 <HAL_RCC_OscConfig+0x4f8>)
 800c47a:	685b      	ldr	r3, [r3, #4]
 800c47c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	691b      	ldr	r3, [r3, #16]
 800c484:	061b      	lsls	r3, r3, #24
 800c486:	4997      	ldr	r1, [pc, #604]	@ (800c6e4 <HAL_RCC_OscConfig+0x4f8>)
 800c488:	4313      	orrs	r3, r2
 800c48a:	604b      	str	r3, [r1, #4]
 800c48c:	e018      	b.n	800c4c0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c48e:	4b95      	ldr	r3, [pc, #596]	@ (800c6e4 <HAL_RCC_OscConfig+0x4f8>)
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	4a94      	ldr	r2, [pc, #592]	@ (800c6e4 <HAL_RCC_OscConfig+0x4f8>)
 800c494:	f023 0301 	bic.w	r3, r3, #1
 800c498:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c49a:	f7f6 f81f 	bl	80024dc <HAL_GetTick>
 800c49e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800c4a0:	e008      	b.n	800c4b4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c4a2:	f7f6 f81b 	bl	80024dc <HAL_GetTick>
 800c4a6:	4602      	mov	r2, r0
 800c4a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4aa:	1ad3      	subs	r3, r2, r3
 800c4ac:	2b02      	cmp	r3, #2
 800c4ae:	d901      	bls.n	800c4b4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800c4b0:	2303      	movs	r3, #3
 800c4b2:	e2ed      	b.n	800ca90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800c4b4:	4b8b      	ldr	r3, [pc, #556]	@ (800c6e4 <HAL_RCC_OscConfig+0x4f8>)
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	f003 0304 	and.w	r3, r3, #4
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d1f0      	bne.n	800c4a2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	f003 0310 	and.w	r3, r3, #16
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	f000 80a9 	beq.w	800c620 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c4ce:	4b85      	ldr	r3, [pc, #532]	@ (800c6e4 <HAL_RCC_OscConfig+0x4f8>)
 800c4d0:	691b      	ldr	r3, [r3, #16]
 800c4d2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c4d6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800c4d8:	4b82      	ldr	r3, [pc, #520]	@ (800c6e4 <HAL_RCC_OscConfig+0x4f8>)
 800c4da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c4dc:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800c4de:	69bb      	ldr	r3, [r7, #24]
 800c4e0:	2b08      	cmp	r3, #8
 800c4e2:	d007      	beq.n	800c4f4 <HAL_RCC_OscConfig+0x308>
 800c4e4:	69bb      	ldr	r3, [r7, #24]
 800c4e6:	2b18      	cmp	r3, #24
 800c4e8:	d13a      	bne.n	800c560 <HAL_RCC_OscConfig+0x374>
 800c4ea:	697b      	ldr	r3, [r7, #20]
 800c4ec:	f003 0303 	and.w	r3, r3, #3
 800c4f0:	2b01      	cmp	r3, #1
 800c4f2:	d135      	bne.n	800c560 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800c4f4:	4b7b      	ldr	r3, [pc, #492]	@ (800c6e4 <HAL_RCC_OscConfig+0x4f8>)
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d005      	beq.n	800c50c <HAL_RCC_OscConfig+0x320>
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	69db      	ldr	r3, [r3, #28]
 800c504:	2b80      	cmp	r3, #128	@ 0x80
 800c506:	d001      	beq.n	800c50c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800c508:	2301      	movs	r3, #1
 800c50a:	e2c1      	b.n	800ca90 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800c50c:	f7f6 f816 	bl	800253c <HAL_GetREVID>
 800c510:	4603      	mov	r3, r0
 800c512:	f241 0203 	movw	r2, #4099	@ 0x1003
 800c516:	4293      	cmp	r3, r2
 800c518:	d817      	bhi.n	800c54a <HAL_RCC_OscConfig+0x35e>
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	6a1b      	ldr	r3, [r3, #32]
 800c51e:	2b20      	cmp	r3, #32
 800c520:	d108      	bne.n	800c534 <HAL_RCC_OscConfig+0x348>
 800c522:	4b70      	ldr	r3, [pc, #448]	@ (800c6e4 <HAL_RCC_OscConfig+0x4f8>)
 800c524:	685b      	ldr	r3, [r3, #4]
 800c526:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800c52a:	4a6e      	ldr	r2, [pc, #440]	@ (800c6e4 <HAL_RCC_OscConfig+0x4f8>)
 800c52c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800c530:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800c532:	e075      	b.n	800c620 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800c534:	4b6b      	ldr	r3, [pc, #428]	@ (800c6e4 <HAL_RCC_OscConfig+0x4f8>)
 800c536:	685b      	ldr	r3, [r3, #4]
 800c538:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	6a1b      	ldr	r3, [r3, #32]
 800c540:	069b      	lsls	r3, r3, #26
 800c542:	4968      	ldr	r1, [pc, #416]	@ (800c6e4 <HAL_RCC_OscConfig+0x4f8>)
 800c544:	4313      	orrs	r3, r2
 800c546:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800c548:	e06a      	b.n	800c620 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800c54a:	4b66      	ldr	r3, [pc, #408]	@ (800c6e4 <HAL_RCC_OscConfig+0x4f8>)
 800c54c:	68db      	ldr	r3, [r3, #12]
 800c54e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	6a1b      	ldr	r3, [r3, #32]
 800c556:	061b      	lsls	r3, r3, #24
 800c558:	4962      	ldr	r1, [pc, #392]	@ (800c6e4 <HAL_RCC_OscConfig+0x4f8>)
 800c55a:	4313      	orrs	r3, r2
 800c55c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800c55e:	e05f      	b.n	800c620 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	69db      	ldr	r3, [r3, #28]
 800c564:	2b00      	cmp	r3, #0
 800c566:	d042      	beq.n	800c5ee <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800c568:	4b5e      	ldr	r3, [pc, #376]	@ (800c6e4 <HAL_RCC_OscConfig+0x4f8>)
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	4a5d      	ldr	r2, [pc, #372]	@ (800c6e4 <HAL_RCC_OscConfig+0x4f8>)
 800c56e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c572:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c574:	f7f5 ffb2 	bl	80024dc <HAL_GetTick>
 800c578:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800c57a:	e008      	b.n	800c58e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800c57c:	f7f5 ffae 	bl	80024dc <HAL_GetTick>
 800c580:	4602      	mov	r2, r0
 800c582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c584:	1ad3      	subs	r3, r2, r3
 800c586:	2b02      	cmp	r3, #2
 800c588:	d901      	bls.n	800c58e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800c58a:	2303      	movs	r3, #3
 800c58c:	e280      	b.n	800ca90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800c58e:	4b55      	ldr	r3, [pc, #340]	@ (800c6e4 <HAL_RCC_OscConfig+0x4f8>)
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c596:	2b00      	cmp	r3, #0
 800c598:	d0f0      	beq.n	800c57c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800c59a:	f7f5 ffcf 	bl	800253c <HAL_GetREVID>
 800c59e:	4603      	mov	r3, r0
 800c5a0:	f241 0203 	movw	r2, #4099	@ 0x1003
 800c5a4:	4293      	cmp	r3, r2
 800c5a6:	d817      	bhi.n	800c5d8 <HAL_RCC_OscConfig+0x3ec>
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	6a1b      	ldr	r3, [r3, #32]
 800c5ac:	2b20      	cmp	r3, #32
 800c5ae:	d108      	bne.n	800c5c2 <HAL_RCC_OscConfig+0x3d6>
 800c5b0:	4b4c      	ldr	r3, [pc, #304]	@ (800c6e4 <HAL_RCC_OscConfig+0x4f8>)
 800c5b2:	685b      	ldr	r3, [r3, #4]
 800c5b4:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800c5b8:	4a4a      	ldr	r2, [pc, #296]	@ (800c6e4 <HAL_RCC_OscConfig+0x4f8>)
 800c5ba:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800c5be:	6053      	str	r3, [r2, #4]
 800c5c0:	e02e      	b.n	800c620 <HAL_RCC_OscConfig+0x434>
 800c5c2:	4b48      	ldr	r3, [pc, #288]	@ (800c6e4 <HAL_RCC_OscConfig+0x4f8>)
 800c5c4:	685b      	ldr	r3, [r3, #4]
 800c5c6:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	6a1b      	ldr	r3, [r3, #32]
 800c5ce:	069b      	lsls	r3, r3, #26
 800c5d0:	4944      	ldr	r1, [pc, #272]	@ (800c6e4 <HAL_RCC_OscConfig+0x4f8>)
 800c5d2:	4313      	orrs	r3, r2
 800c5d4:	604b      	str	r3, [r1, #4]
 800c5d6:	e023      	b.n	800c620 <HAL_RCC_OscConfig+0x434>
 800c5d8:	4b42      	ldr	r3, [pc, #264]	@ (800c6e4 <HAL_RCC_OscConfig+0x4f8>)
 800c5da:	68db      	ldr	r3, [r3, #12]
 800c5dc:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	6a1b      	ldr	r3, [r3, #32]
 800c5e4:	061b      	lsls	r3, r3, #24
 800c5e6:	493f      	ldr	r1, [pc, #252]	@ (800c6e4 <HAL_RCC_OscConfig+0x4f8>)
 800c5e8:	4313      	orrs	r3, r2
 800c5ea:	60cb      	str	r3, [r1, #12]
 800c5ec:	e018      	b.n	800c620 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800c5ee:	4b3d      	ldr	r3, [pc, #244]	@ (800c6e4 <HAL_RCC_OscConfig+0x4f8>)
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	4a3c      	ldr	r2, [pc, #240]	@ (800c6e4 <HAL_RCC_OscConfig+0x4f8>)
 800c5f4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c5f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c5fa:	f7f5 ff6f 	bl	80024dc <HAL_GetTick>
 800c5fe:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800c600:	e008      	b.n	800c614 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800c602:	f7f5 ff6b 	bl	80024dc <HAL_GetTick>
 800c606:	4602      	mov	r2, r0
 800c608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c60a:	1ad3      	subs	r3, r2, r3
 800c60c:	2b02      	cmp	r3, #2
 800c60e:	d901      	bls.n	800c614 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800c610:	2303      	movs	r3, #3
 800c612:	e23d      	b.n	800ca90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800c614:	4b33      	ldr	r3, [pc, #204]	@ (800c6e4 <HAL_RCC_OscConfig+0x4f8>)
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d1f0      	bne.n	800c602 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	f003 0308 	and.w	r3, r3, #8
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d036      	beq.n	800c69a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	695b      	ldr	r3, [r3, #20]
 800c630:	2b00      	cmp	r3, #0
 800c632:	d019      	beq.n	800c668 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c634:	4b2b      	ldr	r3, [pc, #172]	@ (800c6e4 <HAL_RCC_OscConfig+0x4f8>)
 800c636:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c638:	4a2a      	ldr	r2, [pc, #168]	@ (800c6e4 <HAL_RCC_OscConfig+0x4f8>)
 800c63a:	f043 0301 	orr.w	r3, r3, #1
 800c63e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c640:	f7f5 ff4c 	bl	80024dc <HAL_GetTick>
 800c644:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800c646:	e008      	b.n	800c65a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c648:	f7f5 ff48 	bl	80024dc <HAL_GetTick>
 800c64c:	4602      	mov	r2, r0
 800c64e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c650:	1ad3      	subs	r3, r2, r3
 800c652:	2b02      	cmp	r3, #2
 800c654:	d901      	bls.n	800c65a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800c656:	2303      	movs	r3, #3
 800c658:	e21a      	b.n	800ca90 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800c65a:	4b22      	ldr	r3, [pc, #136]	@ (800c6e4 <HAL_RCC_OscConfig+0x4f8>)
 800c65c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c65e:	f003 0302 	and.w	r3, r3, #2
 800c662:	2b00      	cmp	r3, #0
 800c664:	d0f0      	beq.n	800c648 <HAL_RCC_OscConfig+0x45c>
 800c666:	e018      	b.n	800c69a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c668:	4b1e      	ldr	r3, [pc, #120]	@ (800c6e4 <HAL_RCC_OscConfig+0x4f8>)
 800c66a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c66c:	4a1d      	ldr	r2, [pc, #116]	@ (800c6e4 <HAL_RCC_OscConfig+0x4f8>)
 800c66e:	f023 0301 	bic.w	r3, r3, #1
 800c672:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c674:	f7f5 ff32 	bl	80024dc <HAL_GetTick>
 800c678:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800c67a:	e008      	b.n	800c68e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c67c:	f7f5 ff2e 	bl	80024dc <HAL_GetTick>
 800c680:	4602      	mov	r2, r0
 800c682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c684:	1ad3      	subs	r3, r2, r3
 800c686:	2b02      	cmp	r3, #2
 800c688:	d901      	bls.n	800c68e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800c68a:	2303      	movs	r3, #3
 800c68c:	e200      	b.n	800ca90 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800c68e:	4b15      	ldr	r3, [pc, #84]	@ (800c6e4 <HAL_RCC_OscConfig+0x4f8>)
 800c690:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c692:	f003 0302 	and.w	r3, r3, #2
 800c696:	2b00      	cmp	r3, #0
 800c698:	d1f0      	bne.n	800c67c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	f003 0320 	and.w	r3, r3, #32
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d039      	beq.n	800c71a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	699b      	ldr	r3, [r3, #24]
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d01c      	beq.n	800c6e8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800c6ae:	4b0d      	ldr	r3, [pc, #52]	@ (800c6e4 <HAL_RCC_OscConfig+0x4f8>)
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	4a0c      	ldr	r2, [pc, #48]	@ (800c6e4 <HAL_RCC_OscConfig+0x4f8>)
 800c6b4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800c6b8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800c6ba:	f7f5 ff0f 	bl	80024dc <HAL_GetTick>
 800c6be:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800c6c0:	e008      	b.n	800c6d4 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c6c2:	f7f5 ff0b 	bl	80024dc <HAL_GetTick>
 800c6c6:	4602      	mov	r2, r0
 800c6c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6ca:	1ad3      	subs	r3, r2, r3
 800c6cc:	2b02      	cmp	r3, #2
 800c6ce:	d901      	bls.n	800c6d4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800c6d0:	2303      	movs	r3, #3
 800c6d2:	e1dd      	b.n	800ca90 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800c6d4:	4b03      	ldr	r3, [pc, #12]	@ (800c6e4 <HAL_RCC_OscConfig+0x4f8>)
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d0f0      	beq.n	800c6c2 <HAL_RCC_OscConfig+0x4d6>
 800c6e0:	e01b      	b.n	800c71a <HAL_RCC_OscConfig+0x52e>
 800c6e2:	bf00      	nop
 800c6e4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800c6e8:	4b9b      	ldr	r3, [pc, #620]	@ (800c958 <HAL_RCC_OscConfig+0x76c>)
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	4a9a      	ldr	r2, [pc, #616]	@ (800c958 <HAL_RCC_OscConfig+0x76c>)
 800c6ee:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c6f2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800c6f4:	f7f5 fef2 	bl	80024dc <HAL_GetTick>
 800c6f8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800c6fa:	e008      	b.n	800c70e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c6fc:	f7f5 feee 	bl	80024dc <HAL_GetTick>
 800c700:	4602      	mov	r2, r0
 800c702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c704:	1ad3      	subs	r3, r2, r3
 800c706:	2b02      	cmp	r3, #2
 800c708:	d901      	bls.n	800c70e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800c70a:	2303      	movs	r3, #3
 800c70c:	e1c0      	b.n	800ca90 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800c70e:	4b92      	ldr	r3, [pc, #584]	@ (800c958 <HAL_RCC_OscConfig+0x76c>)
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c716:	2b00      	cmp	r3, #0
 800c718:	d1f0      	bne.n	800c6fc <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	f003 0304 	and.w	r3, r3, #4
 800c722:	2b00      	cmp	r3, #0
 800c724:	f000 8081 	beq.w	800c82a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800c728:	4b8c      	ldr	r3, [pc, #560]	@ (800c95c <HAL_RCC_OscConfig+0x770>)
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	4a8b      	ldr	r2, [pc, #556]	@ (800c95c <HAL_RCC_OscConfig+0x770>)
 800c72e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c732:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800c734:	f7f5 fed2 	bl	80024dc <HAL_GetTick>
 800c738:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c73a:	e008      	b.n	800c74e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c73c:	f7f5 fece 	bl	80024dc <HAL_GetTick>
 800c740:	4602      	mov	r2, r0
 800c742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c744:	1ad3      	subs	r3, r2, r3
 800c746:	2b64      	cmp	r3, #100	@ 0x64
 800c748:	d901      	bls.n	800c74e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800c74a:	2303      	movs	r3, #3
 800c74c:	e1a0      	b.n	800ca90 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c74e:	4b83      	ldr	r3, [pc, #524]	@ (800c95c <HAL_RCC_OscConfig+0x770>)
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c756:	2b00      	cmp	r3, #0
 800c758:	d0f0      	beq.n	800c73c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	689b      	ldr	r3, [r3, #8]
 800c75e:	2b01      	cmp	r3, #1
 800c760:	d106      	bne.n	800c770 <HAL_RCC_OscConfig+0x584>
 800c762:	4b7d      	ldr	r3, [pc, #500]	@ (800c958 <HAL_RCC_OscConfig+0x76c>)
 800c764:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c766:	4a7c      	ldr	r2, [pc, #496]	@ (800c958 <HAL_RCC_OscConfig+0x76c>)
 800c768:	f043 0301 	orr.w	r3, r3, #1
 800c76c:	6713      	str	r3, [r2, #112]	@ 0x70
 800c76e:	e02d      	b.n	800c7cc <HAL_RCC_OscConfig+0x5e0>
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	689b      	ldr	r3, [r3, #8]
 800c774:	2b00      	cmp	r3, #0
 800c776:	d10c      	bne.n	800c792 <HAL_RCC_OscConfig+0x5a6>
 800c778:	4b77      	ldr	r3, [pc, #476]	@ (800c958 <HAL_RCC_OscConfig+0x76c>)
 800c77a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c77c:	4a76      	ldr	r2, [pc, #472]	@ (800c958 <HAL_RCC_OscConfig+0x76c>)
 800c77e:	f023 0301 	bic.w	r3, r3, #1
 800c782:	6713      	str	r3, [r2, #112]	@ 0x70
 800c784:	4b74      	ldr	r3, [pc, #464]	@ (800c958 <HAL_RCC_OscConfig+0x76c>)
 800c786:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c788:	4a73      	ldr	r2, [pc, #460]	@ (800c958 <HAL_RCC_OscConfig+0x76c>)
 800c78a:	f023 0304 	bic.w	r3, r3, #4
 800c78e:	6713      	str	r3, [r2, #112]	@ 0x70
 800c790:	e01c      	b.n	800c7cc <HAL_RCC_OscConfig+0x5e0>
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	689b      	ldr	r3, [r3, #8]
 800c796:	2b05      	cmp	r3, #5
 800c798:	d10c      	bne.n	800c7b4 <HAL_RCC_OscConfig+0x5c8>
 800c79a:	4b6f      	ldr	r3, [pc, #444]	@ (800c958 <HAL_RCC_OscConfig+0x76c>)
 800c79c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c79e:	4a6e      	ldr	r2, [pc, #440]	@ (800c958 <HAL_RCC_OscConfig+0x76c>)
 800c7a0:	f043 0304 	orr.w	r3, r3, #4
 800c7a4:	6713      	str	r3, [r2, #112]	@ 0x70
 800c7a6:	4b6c      	ldr	r3, [pc, #432]	@ (800c958 <HAL_RCC_OscConfig+0x76c>)
 800c7a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c7aa:	4a6b      	ldr	r2, [pc, #428]	@ (800c958 <HAL_RCC_OscConfig+0x76c>)
 800c7ac:	f043 0301 	orr.w	r3, r3, #1
 800c7b0:	6713      	str	r3, [r2, #112]	@ 0x70
 800c7b2:	e00b      	b.n	800c7cc <HAL_RCC_OscConfig+0x5e0>
 800c7b4:	4b68      	ldr	r3, [pc, #416]	@ (800c958 <HAL_RCC_OscConfig+0x76c>)
 800c7b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c7b8:	4a67      	ldr	r2, [pc, #412]	@ (800c958 <HAL_RCC_OscConfig+0x76c>)
 800c7ba:	f023 0301 	bic.w	r3, r3, #1
 800c7be:	6713      	str	r3, [r2, #112]	@ 0x70
 800c7c0:	4b65      	ldr	r3, [pc, #404]	@ (800c958 <HAL_RCC_OscConfig+0x76c>)
 800c7c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c7c4:	4a64      	ldr	r2, [pc, #400]	@ (800c958 <HAL_RCC_OscConfig+0x76c>)
 800c7c6:	f023 0304 	bic.w	r3, r3, #4
 800c7ca:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	689b      	ldr	r3, [r3, #8]
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d015      	beq.n	800c800 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c7d4:	f7f5 fe82 	bl	80024dc <HAL_GetTick>
 800c7d8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c7da:	e00a      	b.n	800c7f2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c7dc:	f7f5 fe7e 	bl	80024dc <HAL_GetTick>
 800c7e0:	4602      	mov	r2, r0
 800c7e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7e4:	1ad3      	subs	r3, r2, r3
 800c7e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c7ea:	4293      	cmp	r3, r2
 800c7ec:	d901      	bls.n	800c7f2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800c7ee:	2303      	movs	r3, #3
 800c7f0:	e14e      	b.n	800ca90 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c7f2:	4b59      	ldr	r3, [pc, #356]	@ (800c958 <HAL_RCC_OscConfig+0x76c>)
 800c7f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c7f6:	f003 0302 	and.w	r3, r3, #2
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d0ee      	beq.n	800c7dc <HAL_RCC_OscConfig+0x5f0>
 800c7fe:	e014      	b.n	800c82a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c800:	f7f5 fe6c 	bl	80024dc <HAL_GetTick>
 800c804:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800c806:	e00a      	b.n	800c81e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c808:	f7f5 fe68 	bl	80024dc <HAL_GetTick>
 800c80c:	4602      	mov	r2, r0
 800c80e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c810:	1ad3      	subs	r3, r2, r3
 800c812:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c816:	4293      	cmp	r3, r2
 800c818:	d901      	bls.n	800c81e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800c81a:	2303      	movs	r3, #3
 800c81c:	e138      	b.n	800ca90 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800c81e:	4b4e      	ldr	r3, [pc, #312]	@ (800c958 <HAL_RCC_OscConfig+0x76c>)
 800c820:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c822:	f003 0302 	and.w	r3, r3, #2
 800c826:	2b00      	cmp	r3, #0
 800c828:	d1ee      	bne.n	800c808 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c82e:	2b00      	cmp	r3, #0
 800c830:	f000 812d 	beq.w	800ca8e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800c834:	4b48      	ldr	r3, [pc, #288]	@ (800c958 <HAL_RCC_OscConfig+0x76c>)
 800c836:	691b      	ldr	r3, [r3, #16]
 800c838:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c83c:	2b18      	cmp	r3, #24
 800c83e:	f000 80bd 	beq.w	800c9bc <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c846:	2b02      	cmp	r3, #2
 800c848:	f040 809e 	bne.w	800c988 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c84c:	4b42      	ldr	r3, [pc, #264]	@ (800c958 <HAL_RCC_OscConfig+0x76c>)
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	4a41      	ldr	r2, [pc, #260]	@ (800c958 <HAL_RCC_OscConfig+0x76c>)
 800c852:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800c856:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c858:	f7f5 fe40 	bl	80024dc <HAL_GetTick>
 800c85c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800c85e:	e008      	b.n	800c872 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c860:	f7f5 fe3c 	bl	80024dc <HAL_GetTick>
 800c864:	4602      	mov	r2, r0
 800c866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c868:	1ad3      	subs	r3, r2, r3
 800c86a:	2b02      	cmp	r3, #2
 800c86c:	d901      	bls.n	800c872 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800c86e:	2303      	movs	r3, #3
 800c870:	e10e      	b.n	800ca90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800c872:	4b39      	ldr	r3, [pc, #228]	@ (800c958 <HAL_RCC_OscConfig+0x76c>)
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d1f0      	bne.n	800c860 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c87e:	4b36      	ldr	r3, [pc, #216]	@ (800c958 <HAL_RCC_OscConfig+0x76c>)
 800c880:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c882:	4b37      	ldr	r3, [pc, #220]	@ (800c960 <HAL_RCC_OscConfig+0x774>)
 800c884:	4013      	ands	r3, r2
 800c886:	687a      	ldr	r2, [r7, #4]
 800c888:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800c88a:	687a      	ldr	r2, [r7, #4]
 800c88c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800c88e:	0112      	lsls	r2, r2, #4
 800c890:	430a      	orrs	r2, r1
 800c892:	4931      	ldr	r1, [pc, #196]	@ (800c958 <HAL_RCC_OscConfig+0x76c>)
 800c894:	4313      	orrs	r3, r2
 800c896:	628b      	str	r3, [r1, #40]	@ 0x28
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c89c:	3b01      	subs	r3, #1
 800c89e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c8a6:	3b01      	subs	r3, #1
 800c8a8:	025b      	lsls	r3, r3, #9
 800c8aa:	b29b      	uxth	r3, r3
 800c8ac:	431a      	orrs	r2, r3
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c8b2:	3b01      	subs	r3, #1
 800c8b4:	041b      	lsls	r3, r3, #16
 800c8b6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800c8ba:	431a      	orrs	r2, r3
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c8c0:	3b01      	subs	r3, #1
 800c8c2:	061b      	lsls	r3, r3, #24
 800c8c4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800c8c8:	4923      	ldr	r1, [pc, #140]	@ (800c958 <HAL_RCC_OscConfig+0x76c>)
 800c8ca:	4313      	orrs	r3, r2
 800c8cc:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800c8ce:	4b22      	ldr	r3, [pc, #136]	@ (800c958 <HAL_RCC_OscConfig+0x76c>)
 800c8d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c8d2:	4a21      	ldr	r2, [pc, #132]	@ (800c958 <HAL_RCC_OscConfig+0x76c>)
 800c8d4:	f023 0301 	bic.w	r3, r3, #1
 800c8d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800c8da:	4b1f      	ldr	r3, [pc, #124]	@ (800c958 <HAL_RCC_OscConfig+0x76c>)
 800c8dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c8de:	4b21      	ldr	r3, [pc, #132]	@ (800c964 <HAL_RCC_OscConfig+0x778>)
 800c8e0:	4013      	ands	r3, r2
 800c8e2:	687a      	ldr	r2, [r7, #4]
 800c8e4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800c8e6:	00d2      	lsls	r2, r2, #3
 800c8e8:	491b      	ldr	r1, [pc, #108]	@ (800c958 <HAL_RCC_OscConfig+0x76c>)
 800c8ea:	4313      	orrs	r3, r2
 800c8ec:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800c8ee:	4b1a      	ldr	r3, [pc, #104]	@ (800c958 <HAL_RCC_OscConfig+0x76c>)
 800c8f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c8f2:	f023 020c 	bic.w	r2, r3, #12
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c8fa:	4917      	ldr	r1, [pc, #92]	@ (800c958 <HAL_RCC_OscConfig+0x76c>)
 800c8fc:	4313      	orrs	r3, r2
 800c8fe:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800c900:	4b15      	ldr	r3, [pc, #84]	@ (800c958 <HAL_RCC_OscConfig+0x76c>)
 800c902:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c904:	f023 0202 	bic.w	r2, r3, #2
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c90c:	4912      	ldr	r1, [pc, #72]	@ (800c958 <HAL_RCC_OscConfig+0x76c>)
 800c90e:	4313      	orrs	r3, r2
 800c910:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800c912:	4b11      	ldr	r3, [pc, #68]	@ (800c958 <HAL_RCC_OscConfig+0x76c>)
 800c914:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c916:	4a10      	ldr	r2, [pc, #64]	@ (800c958 <HAL_RCC_OscConfig+0x76c>)
 800c918:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c91c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c91e:	4b0e      	ldr	r3, [pc, #56]	@ (800c958 <HAL_RCC_OscConfig+0x76c>)
 800c920:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c922:	4a0d      	ldr	r2, [pc, #52]	@ (800c958 <HAL_RCC_OscConfig+0x76c>)
 800c924:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c928:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800c92a:	4b0b      	ldr	r3, [pc, #44]	@ (800c958 <HAL_RCC_OscConfig+0x76c>)
 800c92c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c92e:	4a0a      	ldr	r2, [pc, #40]	@ (800c958 <HAL_RCC_OscConfig+0x76c>)
 800c930:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800c934:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800c936:	4b08      	ldr	r3, [pc, #32]	@ (800c958 <HAL_RCC_OscConfig+0x76c>)
 800c938:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c93a:	4a07      	ldr	r2, [pc, #28]	@ (800c958 <HAL_RCC_OscConfig+0x76c>)
 800c93c:	f043 0301 	orr.w	r3, r3, #1
 800c940:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c942:	4b05      	ldr	r3, [pc, #20]	@ (800c958 <HAL_RCC_OscConfig+0x76c>)
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	4a04      	ldr	r2, [pc, #16]	@ (800c958 <HAL_RCC_OscConfig+0x76c>)
 800c948:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c94c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c94e:	f7f5 fdc5 	bl	80024dc <HAL_GetTick>
 800c952:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800c954:	e011      	b.n	800c97a <HAL_RCC_OscConfig+0x78e>
 800c956:	bf00      	nop
 800c958:	58024400 	.word	0x58024400
 800c95c:	58024800 	.word	0x58024800
 800c960:	fffffc0c 	.word	0xfffffc0c
 800c964:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c968:	f7f5 fdb8 	bl	80024dc <HAL_GetTick>
 800c96c:	4602      	mov	r2, r0
 800c96e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c970:	1ad3      	subs	r3, r2, r3
 800c972:	2b02      	cmp	r3, #2
 800c974:	d901      	bls.n	800c97a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800c976:	2303      	movs	r3, #3
 800c978:	e08a      	b.n	800ca90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800c97a:	4b47      	ldr	r3, [pc, #284]	@ (800ca98 <HAL_RCC_OscConfig+0x8ac>)
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c982:	2b00      	cmp	r3, #0
 800c984:	d0f0      	beq.n	800c968 <HAL_RCC_OscConfig+0x77c>
 800c986:	e082      	b.n	800ca8e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c988:	4b43      	ldr	r3, [pc, #268]	@ (800ca98 <HAL_RCC_OscConfig+0x8ac>)
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	4a42      	ldr	r2, [pc, #264]	@ (800ca98 <HAL_RCC_OscConfig+0x8ac>)
 800c98e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800c992:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c994:	f7f5 fda2 	bl	80024dc <HAL_GetTick>
 800c998:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800c99a:	e008      	b.n	800c9ae <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c99c:	f7f5 fd9e 	bl	80024dc <HAL_GetTick>
 800c9a0:	4602      	mov	r2, r0
 800c9a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9a4:	1ad3      	subs	r3, r2, r3
 800c9a6:	2b02      	cmp	r3, #2
 800c9a8:	d901      	bls.n	800c9ae <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800c9aa:	2303      	movs	r3, #3
 800c9ac:	e070      	b.n	800ca90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800c9ae:	4b3a      	ldr	r3, [pc, #232]	@ (800ca98 <HAL_RCC_OscConfig+0x8ac>)
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d1f0      	bne.n	800c99c <HAL_RCC_OscConfig+0x7b0>
 800c9ba:	e068      	b.n	800ca8e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800c9bc:	4b36      	ldr	r3, [pc, #216]	@ (800ca98 <HAL_RCC_OscConfig+0x8ac>)
 800c9be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c9c0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800c9c2:	4b35      	ldr	r3, [pc, #212]	@ (800ca98 <HAL_RCC_OscConfig+0x8ac>)
 800c9c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c9c6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c9cc:	2b01      	cmp	r3, #1
 800c9ce:	d031      	beq.n	800ca34 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c9d0:	693b      	ldr	r3, [r7, #16]
 800c9d2:	f003 0203 	and.w	r2, r3, #3
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c9da:	429a      	cmp	r2, r3
 800c9dc:	d12a      	bne.n	800ca34 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800c9de:	693b      	ldr	r3, [r7, #16]
 800c9e0:	091b      	lsrs	r3, r3, #4
 800c9e2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c9ea:	429a      	cmp	r2, r3
 800c9ec:	d122      	bne.n	800ca34 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c9f8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800c9fa:	429a      	cmp	r2, r3
 800c9fc:	d11a      	bne.n	800ca34 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	0a5b      	lsrs	r3, r3, #9
 800ca02:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ca0a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800ca0c:	429a      	cmp	r2, r3
 800ca0e:	d111      	bne.n	800ca34 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	0c1b      	lsrs	r3, r3, #16
 800ca14:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ca1c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800ca1e:	429a      	cmp	r2, r3
 800ca20:	d108      	bne.n	800ca34 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	0e1b      	lsrs	r3, r3, #24
 800ca26:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ca2e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800ca30:	429a      	cmp	r2, r3
 800ca32:	d001      	beq.n	800ca38 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800ca34:	2301      	movs	r3, #1
 800ca36:	e02b      	b.n	800ca90 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800ca38:	4b17      	ldr	r3, [pc, #92]	@ (800ca98 <HAL_RCC_OscConfig+0x8ac>)
 800ca3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ca3c:	08db      	lsrs	r3, r3, #3
 800ca3e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ca42:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ca48:	693a      	ldr	r2, [r7, #16]
 800ca4a:	429a      	cmp	r2, r3
 800ca4c:	d01f      	beq.n	800ca8e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800ca4e:	4b12      	ldr	r3, [pc, #72]	@ (800ca98 <HAL_RCC_OscConfig+0x8ac>)
 800ca50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca52:	4a11      	ldr	r2, [pc, #68]	@ (800ca98 <HAL_RCC_OscConfig+0x8ac>)
 800ca54:	f023 0301 	bic.w	r3, r3, #1
 800ca58:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800ca5a:	f7f5 fd3f 	bl	80024dc <HAL_GetTick>
 800ca5e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800ca60:	bf00      	nop
 800ca62:	f7f5 fd3b 	bl	80024dc <HAL_GetTick>
 800ca66:	4602      	mov	r2, r0
 800ca68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca6a:	4293      	cmp	r3, r2
 800ca6c:	d0f9      	beq.n	800ca62 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800ca6e:	4b0a      	ldr	r3, [pc, #40]	@ (800ca98 <HAL_RCC_OscConfig+0x8ac>)
 800ca70:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ca72:	4b0a      	ldr	r3, [pc, #40]	@ (800ca9c <HAL_RCC_OscConfig+0x8b0>)
 800ca74:	4013      	ands	r3, r2
 800ca76:	687a      	ldr	r2, [r7, #4]
 800ca78:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800ca7a:	00d2      	lsls	r2, r2, #3
 800ca7c:	4906      	ldr	r1, [pc, #24]	@ (800ca98 <HAL_RCC_OscConfig+0x8ac>)
 800ca7e:	4313      	orrs	r3, r2
 800ca80:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800ca82:	4b05      	ldr	r3, [pc, #20]	@ (800ca98 <HAL_RCC_OscConfig+0x8ac>)
 800ca84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca86:	4a04      	ldr	r2, [pc, #16]	@ (800ca98 <HAL_RCC_OscConfig+0x8ac>)
 800ca88:	f043 0301 	orr.w	r3, r3, #1
 800ca8c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800ca8e:	2300      	movs	r3, #0
}
 800ca90:	4618      	mov	r0, r3
 800ca92:	3730      	adds	r7, #48	@ 0x30
 800ca94:	46bd      	mov	sp, r7
 800ca96:	bd80      	pop	{r7, pc}
 800ca98:	58024400 	.word	0x58024400
 800ca9c:	ffff0007 	.word	0xffff0007

0800caa0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800caa0:	b580      	push	{r7, lr}
 800caa2:	b086      	sub	sp, #24
 800caa4:	af00      	add	r7, sp, #0
 800caa6:	6078      	str	r0, [r7, #4]
 800caa8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	2b00      	cmp	r3, #0
 800caae:	d101      	bne.n	800cab4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800cab0:	2301      	movs	r3, #1
 800cab2:	e19c      	b.n	800cdee <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800cab4:	4b8a      	ldr	r3, [pc, #552]	@ (800cce0 <HAL_RCC_ClockConfig+0x240>)
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	f003 030f 	and.w	r3, r3, #15
 800cabc:	683a      	ldr	r2, [r7, #0]
 800cabe:	429a      	cmp	r2, r3
 800cac0:	d910      	bls.n	800cae4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cac2:	4b87      	ldr	r3, [pc, #540]	@ (800cce0 <HAL_RCC_ClockConfig+0x240>)
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	f023 020f 	bic.w	r2, r3, #15
 800caca:	4985      	ldr	r1, [pc, #532]	@ (800cce0 <HAL_RCC_ClockConfig+0x240>)
 800cacc:	683b      	ldr	r3, [r7, #0]
 800cace:	4313      	orrs	r3, r2
 800cad0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800cad2:	4b83      	ldr	r3, [pc, #524]	@ (800cce0 <HAL_RCC_ClockConfig+0x240>)
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	f003 030f 	and.w	r3, r3, #15
 800cada:	683a      	ldr	r2, [r7, #0]
 800cadc:	429a      	cmp	r2, r3
 800cade:	d001      	beq.n	800cae4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800cae0:	2301      	movs	r3, #1
 800cae2:	e184      	b.n	800cdee <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	f003 0304 	and.w	r3, r3, #4
 800caec:	2b00      	cmp	r3, #0
 800caee:	d010      	beq.n	800cb12 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	691a      	ldr	r2, [r3, #16]
 800caf4:	4b7b      	ldr	r3, [pc, #492]	@ (800cce4 <HAL_RCC_ClockConfig+0x244>)
 800caf6:	699b      	ldr	r3, [r3, #24]
 800caf8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800cafc:	429a      	cmp	r2, r3
 800cafe:	d908      	bls.n	800cb12 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800cb00:	4b78      	ldr	r3, [pc, #480]	@ (800cce4 <HAL_RCC_ClockConfig+0x244>)
 800cb02:	699b      	ldr	r3, [r3, #24]
 800cb04:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	691b      	ldr	r3, [r3, #16]
 800cb0c:	4975      	ldr	r1, [pc, #468]	@ (800cce4 <HAL_RCC_ClockConfig+0x244>)
 800cb0e:	4313      	orrs	r3, r2
 800cb10:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	f003 0308 	and.w	r3, r3, #8
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d010      	beq.n	800cb40 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	695a      	ldr	r2, [r3, #20]
 800cb22:	4b70      	ldr	r3, [pc, #448]	@ (800cce4 <HAL_RCC_ClockConfig+0x244>)
 800cb24:	69db      	ldr	r3, [r3, #28]
 800cb26:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800cb2a:	429a      	cmp	r2, r3
 800cb2c:	d908      	bls.n	800cb40 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800cb2e:	4b6d      	ldr	r3, [pc, #436]	@ (800cce4 <HAL_RCC_ClockConfig+0x244>)
 800cb30:	69db      	ldr	r3, [r3, #28]
 800cb32:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	695b      	ldr	r3, [r3, #20]
 800cb3a:	496a      	ldr	r1, [pc, #424]	@ (800cce4 <HAL_RCC_ClockConfig+0x244>)
 800cb3c:	4313      	orrs	r3, r2
 800cb3e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	f003 0310 	and.w	r3, r3, #16
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d010      	beq.n	800cb6e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	699a      	ldr	r2, [r3, #24]
 800cb50:	4b64      	ldr	r3, [pc, #400]	@ (800cce4 <HAL_RCC_ClockConfig+0x244>)
 800cb52:	69db      	ldr	r3, [r3, #28]
 800cb54:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800cb58:	429a      	cmp	r2, r3
 800cb5a:	d908      	bls.n	800cb6e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800cb5c:	4b61      	ldr	r3, [pc, #388]	@ (800cce4 <HAL_RCC_ClockConfig+0x244>)
 800cb5e:	69db      	ldr	r3, [r3, #28]
 800cb60:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	699b      	ldr	r3, [r3, #24]
 800cb68:	495e      	ldr	r1, [pc, #376]	@ (800cce4 <HAL_RCC_ClockConfig+0x244>)
 800cb6a:	4313      	orrs	r3, r2
 800cb6c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	f003 0320 	and.w	r3, r3, #32
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d010      	beq.n	800cb9c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	69da      	ldr	r2, [r3, #28]
 800cb7e:	4b59      	ldr	r3, [pc, #356]	@ (800cce4 <HAL_RCC_ClockConfig+0x244>)
 800cb80:	6a1b      	ldr	r3, [r3, #32]
 800cb82:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800cb86:	429a      	cmp	r2, r3
 800cb88:	d908      	bls.n	800cb9c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800cb8a:	4b56      	ldr	r3, [pc, #344]	@ (800cce4 <HAL_RCC_ClockConfig+0x244>)
 800cb8c:	6a1b      	ldr	r3, [r3, #32]
 800cb8e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	69db      	ldr	r3, [r3, #28]
 800cb96:	4953      	ldr	r1, [pc, #332]	@ (800cce4 <HAL_RCC_ClockConfig+0x244>)
 800cb98:	4313      	orrs	r3, r2
 800cb9a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	f003 0302 	and.w	r3, r3, #2
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d010      	beq.n	800cbca <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	68da      	ldr	r2, [r3, #12]
 800cbac:	4b4d      	ldr	r3, [pc, #308]	@ (800cce4 <HAL_RCC_ClockConfig+0x244>)
 800cbae:	699b      	ldr	r3, [r3, #24]
 800cbb0:	f003 030f 	and.w	r3, r3, #15
 800cbb4:	429a      	cmp	r2, r3
 800cbb6:	d908      	bls.n	800cbca <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800cbb8:	4b4a      	ldr	r3, [pc, #296]	@ (800cce4 <HAL_RCC_ClockConfig+0x244>)
 800cbba:	699b      	ldr	r3, [r3, #24]
 800cbbc:	f023 020f 	bic.w	r2, r3, #15
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	68db      	ldr	r3, [r3, #12]
 800cbc4:	4947      	ldr	r1, [pc, #284]	@ (800cce4 <HAL_RCC_ClockConfig+0x244>)
 800cbc6:	4313      	orrs	r3, r2
 800cbc8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	f003 0301 	and.w	r3, r3, #1
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d055      	beq.n	800cc82 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800cbd6:	4b43      	ldr	r3, [pc, #268]	@ (800cce4 <HAL_RCC_ClockConfig+0x244>)
 800cbd8:	699b      	ldr	r3, [r3, #24]
 800cbda:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	689b      	ldr	r3, [r3, #8]
 800cbe2:	4940      	ldr	r1, [pc, #256]	@ (800cce4 <HAL_RCC_ClockConfig+0x244>)
 800cbe4:	4313      	orrs	r3, r2
 800cbe6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	685b      	ldr	r3, [r3, #4]
 800cbec:	2b02      	cmp	r3, #2
 800cbee:	d107      	bne.n	800cc00 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800cbf0:	4b3c      	ldr	r3, [pc, #240]	@ (800cce4 <HAL_RCC_ClockConfig+0x244>)
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d121      	bne.n	800cc40 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800cbfc:	2301      	movs	r3, #1
 800cbfe:	e0f6      	b.n	800cdee <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	685b      	ldr	r3, [r3, #4]
 800cc04:	2b03      	cmp	r3, #3
 800cc06:	d107      	bne.n	800cc18 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800cc08:	4b36      	ldr	r3, [pc, #216]	@ (800cce4 <HAL_RCC_ClockConfig+0x244>)
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d115      	bne.n	800cc40 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800cc14:	2301      	movs	r3, #1
 800cc16:	e0ea      	b.n	800cdee <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	685b      	ldr	r3, [r3, #4]
 800cc1c:	2b01      	cmp	r3, #1
 800cc1e:	d107      	bne.n	800cc30 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800cc20:	4b30      	ldr	r3, [pc, #192]	@ (800cce4 <HAL_RCC_ClockConfig+0x244>)
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d109      	bne.n	800cc40 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800cc2c:	2301      	movs	r3, #1
 800cc2e:	e0de      	b.n	800cdee <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800cc30:	4b2c      	ldr	r3, [pc, #176]	@ (800cce4 <HAL_RCC_ClockConfig+0x244>)
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	f003 0304 	and.w	r3, r3, #4
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d101      	bne.n	800cc40 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800cc3c:	2301      	movs	r3, #1
 800cc3e:	e0d6      	b.n	800cdee <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800cc40:	4b28      	ldr	r3, [pc, #160]	@ (800cce4 <HAL_RCC_ClockConfig+0x244>)
 800cc42:	691b      	ldr	r3, [r3, #16]
 800cc44:	f023 0207 	bic.w	r2, r3, #7
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	685b      	ldr	r3, [r3, #4]
 800cc4c:	4925      	ldr	r1, [pc, #148]	@ (800cce4 <HAL_RCC_ClockConfig+0x244>)
 800cc4e:	4313      	orrs	r3, r2
 800cc50:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cc52:	f7f5 fc43 	bl	80024dc <HAL_GetTick>
 800cc56:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cc58:	e00a      	b.n	800cc70 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800cc5a:	f7f5 fc3f 	bl	80024dc <HAL_GetTick>
 800cc5e:	4602      	mov	r2, r0
 800cc60:	697b      	ldr	r3, [r7, #20]
 800cc62:	1ad3      	subs	r3, r2, r3
 800cc64:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cc68:	4293      	cmp	r3, r2
 800cc6a:	d901      	bls.n	800cc70 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800cc6c:	2303      	movs	r3, #3
 800cc6e:	e0be      	b.n	800cdee <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cc70:	4b1c      	ldr	r3, [pc, #112]	@ (800cce4 <HAL_RCC_ClockConfig+0x244>)
 800cc72:	691b      	ldr	r3, [r3, #16]
 800cc74:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	685b      	ldr	r3, [r3, #4]
 800cc7c:	00db      	lsls	r3, r3, #3
 800cc7e:	429a      	cmp	r2, r3
 800cc80:	d1eb      	bne.n	800cc5a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	f003 0302 	and.w	r3, r3, #2
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d010      	beq.n	800ccb0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	68da      	ldr	r2, [r3, #12]
 800cc92:	4b14      	ldr	r3, [pc, #80]	@ (800cce4 <HAL_RCC_ClockConfig+0x244>)
 800cc94:	699b      	ldr	r3, [r3, #24]
 800cc96:	f003 030f 	and.w	r3, r3, #15
 800cc9a:	429a      	cmp	r2, r3
 800cc9c:	d208      	bcs.n	800ccb0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800cc9e:	4b11      	ldr	r3, [pc, #68]	@ (800cce4 <HAL_RCC_ClockConfig+0x244>)
 800cca0:	699b      	ldr	r3, [r3, #24]
 800cca2:	f023 020f 	bic.w	r2, r3, #15
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	68db      	ldr	r3, [r3, #12]
 800ccaa:	490e      	ldr	r1, [pc, #56]	@ (800cce4 <HAL_RCC_ClockConfig+0x244>)
 800ccac:	4313      	orrs	r3, r2
 800ccae:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800ccb0:	4b0b      	ldr	r3, [pc, #44]	@ (800cce0 <HAL_RCC_ClockConfig+0x240>)
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	f003 030f 	and.w	r3, r3, #15
 800ccb8:	683a      	ldr	r2, [r7, #0]
 800ccba:	429a      	cmp	r2, r3
 800ccbc:	d214      	bcs.n	800cce8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ccbe:	4b08      	ldr	r3, [pc, #32]	@ (800cce0 <HAL_RCC_ClockConfig+0x240>)
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	f023 020f 	bic.w	r2, r3, #15
 800ccc6:	4906      	ldr	r1, [pc, #24]	@ (800cce0 <HAL_RCC_ClockConfig+0x240>)
 800ccc8:	683b      	ldr	r3, [r7, #0]
 800ccca:	4313      	orrs	r3, r2
 800cccc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ccce:	4b04      	ldr	r3, [pc, #16]	@ (800cce0 <HAL_RCC_ClockConfig+0x240>)
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	f003 030f 	and.w	r3, r3, #15
 800ccd6:	683a      	ldr	r2, [r7, #0]
 800ccd8:	429a      	cmp	r2, r3
 800ccda:	d005      	beq.n	800cce8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800ccdc:	2301      	movs	r3, #1
 800ccde:	e086      	b.n	800cdee <HAL_RCC_ClockConfig+0x34e>
 800cce0:	52002000 	.word	0x52002000
 800cce4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	f003 0304 	and.w	r3, r3, #4
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d010      	beq.n	800cd16 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	691a      	ldr	r2, [r3, #16]
 800ccf8:	4b3f      	ldr	r3, [pc, #252]	@ (800cdf8 <HAL_RCC_ClockConfig+0x358>)
 800ccfa:	699b      	ldr	r3, [r3, #24]
 800ccfc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800cd00:	429a      	cmp	r2, r3
 800cd02:	d208      	bcs.n	800cd16 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800cd04:	4b3c      	ldr	r3, [pc, #240]	@ (800cdf8 <HAL_RCC_ClockConfig+0x358>)
 800cd06:	699b      	ldr	r3, [r3, #24]
 800cd08:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	691b      	ldr	r3, [r3, #16]
 800cd10:	4939      	ldr	r1, [pc, #228]	@ (800cdf8 <HAL_RCC_ClockConfig+0x358>)
 800cd12:	4313      	orrs	r3, r2
 800cd14:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	f003 0308 	and.w	r3, r3, #8
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d010      	beq.n	800cd44 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	695a      	ldr	r2, [r3, #20]
 800cd26:	4b34      	ldr	r3, [pc, #208]	@ (800cdf8 <HAL_RCC_ClockConfig+0x358>)
 800cd28:	69db      	ldr	r3, [r3, #28]
 800cd2a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800cd2e:	429a      	cmp	r2, r3
 800cd30:	d208      	bcs.n	800cd44 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800cd32:	4b31      	ldr	r3, [pc, #196]	@ (800cdf8 <HAL_RCC_ClockConfig+0x358>)
 800cd34:	69db      	ldr	r3, [r3, #28]
 800cd36:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	695b      	ldr	r3, [r3, #20]
 800cd3e:	492e      	ldr	r1, [pc, #184]	@ (800cdf8 <HAL_RCC_ClockConfig+0x358>)
 800cd40:	4313      	orrs	r3, r2
 800cd42:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	f003 0310 	and.w	r3, r3, #16
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d010      	beq.n	800cd72 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	699a      	ldr	r2, [r3, #24]
 800cd54:	4b28      	ldr	r3, [pc, #160]	@ (800cdf8 <HAL_RCC_ClockConfig+0x358>)
 800cd56:	69db      	ldr	r3, [r3, #28]
 800cd58:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800cd5c:	429a      	cmp	r2, r3
 800cd5e:	d208      	bcs.n	800cd72 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800cd60:	4b25      	ldr	r3, [pc, #148]	@ (800cdf8 <HAL_RCC_ClockConfig+0x358>)
 800cd62:	69db      	ldr	r3, [r3, #28]
 800cd64:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	699b      	ldr	r3, [r3, #24]
 800cd6c:	4922      	ldr	r1, [pc, #136]	@ (800cdf8 <HAL_RCC_ClockConfig+0x358>)
 800cd6e:	4313      	orrs	r3, r2
 800cd70:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	f003 0320 	and.w	r3, r3, #32
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d010      	beq.n	800cda0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	69da      	ldr	r2, [r3, #28]
 800cd82:	4b1d      	ldr	r3, [pc, #116]	@ (800cdf8 <HAL_RCC_ClockConfig+0x358>)
 800cd84:	6a1b      	ldr	r3, [r3, #32]
 800cd86:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800cd8a:	429a      	cmp	r2, r3
 800cd8c:	d208      	bcs.n	800cda0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800cd8e:	4b1a      	ldr	r3, [pc, #104]	@ (800cdf8 <HAL_RCC_ClockConfig+0x358>)
 800cd90:	6a1b      	ldr	r3, [r3, #32]
 800cd92:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	69db      	ldr	r3, [r3, #28]
 800cd9a:	4917      	ldr	r1, [pc, #92]	@ (800cdf8 <HAL_RCC_ClockConfig+0x358>)
 800cd9c:	4313      	orrs	r3, r2
 800cd9e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800cda0:	f000 f834 	bl	800ce0c <HAL_RCC_GetSysClockFreq>
 800cda4:	4602      	mov	r2, r0
 800cda6:	4b14      	ldr	r3, [pc, #80]	@ (800cdf8 <HAL_RCC_ClockConfig+0x358>)
 800cda8:	699b      	ldr	r3, [r3, #24]
 800cdaa:	0a1b      	lsrs	r3, r3, #8
 800cdac:	f003 030f 	and.w	r3, r3, #15
 800cdb0:	4912      	ldr	r1, [pc, #72]	@ (800cdfc <HAL_RCC_ClockConfig+0x35c>)
 800cdb2:	5ccb      	ldrb	r3, [r1, r3]
 800cdb4:	f003 031f 	and.w	r3, r3, #31
 800cdb8:	fa22 f303 	lsr.w	r3, r2, r3
 800cdbc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800cdbe:	4b0e      	ldr	r3, [pc, #56]	@ (800cdf8 <HAL_RCC_ClockConfig+0x358>)
 800cdc0:	699b      	ldr	r3, [r3, #24]
 800cdc2:	f003 030f 	and.w	r3, r3, #15
 800cdc6:	4a0d      	ldr	r2, [pc, #52]	@ (800cdfc <HAL_RCC_ClockConfig+0x35c>)
 800cdc8:	5cd3      	ldrb	r3, [r2, r3]
 800cdca:	f003 031f 	and.w	r3, r3, #31
 800cdce:	693a      	ldr	r2, [r7, #16]
 800cdd0:	fa22 f303 	lsr.w	r3, r2, r3
 800cdd4:	4a0a      	ldr	r2, [pc, #40]	@ (800ce00 <HAL_RCC_ClockConfig+0x360>)
 800cdd6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800cdd8:	4a0a      	ldr	r2, [pc, #40]	@ (800ce04 <HAL_RCC_ClockConfig+0x364>)
 800cdda:	693b      	ldr	r3, [r7, #16]
 800cddc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800cdde:	4b0a      	ldr	r3, [pc, #40]	@ (800ce08 <HAL_RCC_ClockConfig+0x368>)
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	4618      	mov	r0, r3
 800cde4:	f7f5 fb30 	bl	8002448 <HAL_InitTick>
 800cde8:	4603      	mov	r3, r0
 800cdea:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800cdec:	7bfb      	ldrb	r3, [r7, #15]
}
 800cdee:	4618      	mov	r0, r3
 800cdf0:	3718      	adds	r7, #24
 800cdf2:	46bd      	mov	sp, r7
 800cdf4:	bd80      	pop	{r7, pc}
 800cdf6:	bf00      	nop
 800cdf8:	58024400 	.word	0x58024400
 800cdfc:	08016764 	.word	0x08016764
 800ce00:	24000008 	.word	0x24000008
 800ce04:	24000004 	.word	0x24000004
 800ce08:	2400000c 	.word	0x2400000c

0800ce0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ce0c:	b480      	push	{r7}
 800ce0e:	b089      	sub	sp, #36	@ 0x24
 800ce10:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ce12:	4bb3      	ldr	r3, [pc, #716]	@ (800d0e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ce14:	691b      	ldr	r3, [r3, #16]
 800ce16:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ce1a:	2b18      	cmp	r3, #24
 800ce1c:	f200 8155 	bhi.w	800d0ca <HAL_RCC_GetSysClockFreq+0x2be>
 800ce20:	a201      	add	r2, pc, #4	@ (adr r2, 800ce28 <HAL_RCC_GetSysClockFreq+0x1c>)
 800ce22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce26:	bf00      	nop
 800ce28:	0800ce8d 	.word	0x0800ce8d
 800ce2c:	0800d0cb 	.word	0x0800d0cb
 800ce30:	0800d0cb 	.word	0x0800d0cb
 800ce34:	0800d0cb 	.word	0x0800d0cb
 800ce38:	0800d0cb 	.word	0x0800d0cb
 800ce3c:	0800d0cb 	.word	0x0800d0cb
 800ce40:	0800d0cb 	.word	0x0800d0cb
 800ce44:	0800d0cb 	.word	0x0800d0cb
 800ce48:	0800ceb3 	.word	0x0800ceb3
 800ce4c:	0800d0cb 	.word	0x0800d0cb
 800ce50:	0800d0cb 	.word	0x0800d0cb
 800ce54:	0800d0cb 	.word	0x0800d0cb
 800ce58:	0800d0cb 	.word	0x0800d0cb
 800ce5c:	0800d0cb 	.word	0x0800d0cb
 800ce60:	0800d0cb 	.word	0x0800d0cb
 800ce64:	0800d0cb 	.word	0x0800d0cb
 800ce68:	0800ceb9 	.word	0x0800ceb9
 800ce6c:	0800d0cb 	.word	0x0800d0cb
 800ce70:	0800d0cb 	.word	0x0800d0cb
 800ce74:	0800d0cb 	.word	0x0800d0cb
 800ce78:	0800d0cb 	.word	0x0800d0cb
 800ce7c:	0800d0cb 	.word	0x0800d0cb
 800ce80:	0800d0cb 	.word	0x0800d0cb
 800ce84:	0800d0cb 	.word	0x0800d0cb
 800ce88:	0800cebf 	.word	0x0800cebf
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ce8c:	4b94      	ldr	r3, [pc, #592]	@ (800d0e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	f003 0320 	and.w	r3, r3, #32
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d009      	beq.n	800ceac <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ce98:	4b91      	ldr	r3, [pc, #580]	@ (800d0e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	08db      	lsrs	r3, r3, #3
 800ce9e:	f003 0303 	and.w	r3, r3, #3
 800cea2:	4a90      	ldr	r2, [pc, #576]	@ (800d0e4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800cea4:	fa22 f303 	lsr.w	r3, r2, r3
 800cea8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800ceaa:	e111      	b.n	800d0d0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800ceac:	4b8d      	ldr	r3, [pc, #564]	@ (800d0e4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800ceae:	61bb      	str	r3, [r7, #24]
      break;
 800ceb0:	e10e      	b.n	800d0d0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800ceb2:	4b8d      	ldr	r3, [pc, #564]	@ (800d0e8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800ceb4:	61bb      	str	r3, [r7, #24]
      break;
 800ceb6:	e10b      	b.n	800d0d0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800ceb8:	4b8c      	ldr	r3, [pc, #560]	@ (800d0ec <HAL_RCC_GetSysClockFreq+0x2e0>)
 800ceba:	61bb      	str	r3, [r7, #24]
      break;
 800cebc:	e108      	b.n	800d0d0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cebe:	4b88      	ldr	r3, [pc, #544]	@ (800d0e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800cec0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cec2:	f003 0303 	and.w	r3, r3, #3
 800cec6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800cec8:	4b85      	ldr	r3, [pc, #532]	@ (800d0e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ceca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cecc:	091b      	lsrs	r3, r3, #4
 800cece:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ced2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800ced4:	4b82      	ldr	r3, [pc, #520]	@ (800d0e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ced6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ced8:	f003 0301 	and.w	r3, r3, #1
 800cedc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800cede:	4b80      	ldr	r3, [pc, #512]	@ (800d0e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800cee0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cee2:	08db      	lsrs	r3, r3, #3
 800cee4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cee8:	68fa      	ldr	r2, [r7, #12]
 800ceea:	fb02 f303 	mul.w	r3, r2, r3
 800ceee:	ee07 3a90 	vmov	s15, r3
 800cef2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cef6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800cefa:	693b      	ldr	r3, [r7, #16]
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	f000 80e1 	beq.w	800d0c4 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 800cf02:	697b      	ldr	r3, [r7, #20]
 800cf04:	2b02      	cmp	r3, #2
 800cf06:	f000 8083 	beq.w	800d010 <HAL_RCC_GetSysClockFreq+0x204>
 800cf0a:	697b      	ldr	r3, [r7, #20]
 800cf0c:	2b02      	cmp	r3, #2
 800cf0e:	f200 80a1 	bhi.w	800d054 <HAL_RCC_GetSysClockFreq+0x248>
 800cf12:	697b      	ldr	r3, [r7, #20]
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d003      	beq.n	800cf20 <HAL_RCC_GetSysClockFreq+0x114>
 800cf18:	697b      	ldr	r3, [r7, #20]
 800cf1a:	2b01      	cmp	r3, #1
 800cf1c:	d056      	beq.n	800cfcc <HAL_RCC_GetSysClockFreq+0x1c0>
 800cf1e:	e099      	b.n	800d054 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cf20:	4b6f      	ldr	r3, [pc, #444]	@ (800d0e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	f003 0320 	and.w	r3, r3, #32
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d02d      	beq.n	800cf88 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cf2c:	4b6c      	ldr	r3, [pc, #432]	@ (800d0e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	08db      	lsrs	r3, r3, #3
 800cf32:	f003 0303 	and.w	r3, r3, #3
 800cf36:	4a6b      	ldr	r2, [pc, #428]	@ (800d0e4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800cf38:	fa22 f303 	lsr.w	r3, r2, r3
 800cf3c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	ee07 3a90 	vmov	s15, r3
 800cf44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cf48:	693b      	ldr	r3, [r7, #16]
 800cf4a:	ee07 3a90 	vmov	s15, r3
 800cf4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cf56:	4b62      	ldr	r3, [pc, #392]	@ (800d0e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800cf58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cf5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf5e:	ee07 3a90 	vmov	s15, r3
 800cf62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cf66:	ed97 6a02 	vldr	s12, [r7, #8]
 800cf6a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800d0f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800cf6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cf72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cf76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cf7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cf7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cf82:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800cf86:	e087      	b.n	800d098 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cf88:	693b      	ldr	r3, [r7, #16]
 800cf8a:	ee07 3a90 	vmov	s15, r3
 800cf8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf92:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800d0f4 <HAL_RCC_GetSysClockFreq+0x2e8>
 800cf96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cf9a:	4b51      	ldr	r3, [pc, #324]	@ (800d0e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800cf9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cf9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cfa2:	ee07 3a90 	vmov	s15, r3
 800cfa6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cfaa:	ed97 6a02 	vldr	s12, [r7, #8]
 800cfae:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800d0f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800cfb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cfb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cfba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cfbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cfc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cfc6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800cfca:	e065      	b.n	800d098 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cfcc:	693b      	ldr	r3, [r7, #16]
 800cfce:	ee07 3a90 	vmov	s15, r3
 800cfd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cfd6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800d0f8 <HAL_RCC_GetSysClockFreq+0x2ec>
 800cfda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cfde:	4b40      	ldr	r3, [pc, #256]	@ (800d0e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800cfe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cfe2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cfe6:	ee07 3a90 	vmov	s15, r3
 800cfea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cfee:	ed97 6a02 	vldr	s12, [r7, #8]
 800cff2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800d0f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800cff6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cffa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cffe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d002:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d006:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d00a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800d00e:	e043      	b.n	800d098 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d010:	693b      	ldr	r3, [r7, #16]
 800d012:	ee07 3a90 	vmov	s15, r3
 800d016:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d01a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800d0fc <HAL_RCC_GetSysClockFreq+0x2f0>
 800d01e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d022:	4b2f      	ldr	r3, [pc, #188]	@ (800d0e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d026:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d02a:	ee07 3a90 	vmov	s15, r3
 800d02e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d032:	ed97 6a02 	vldr	s12, [r7, #8]
 800d036:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800d0f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800d03a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d03e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d042:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d046:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d04a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d04e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800d052:	e021      	b.n	800d098 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d054:	693b      	ldr	r3, [r7, #16]
 800d056:	ee07 3a90 	vmov	s15, r3
 800d05a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d05e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800d0f8 <HAL_RCC_GetSysClockFreq+0x2ec>
 800d062:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d066:	4b1e      	ldr	r3, [pc, #120]	@ (800d0e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d06a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d06e:	ee07 3a90 	vmov	s15, r3
 800d072:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d076:	ed97 6a02 	vldr	s12, [r7, #8]
 800d07a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800d0f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800d07e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d082:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d086:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d08a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d08e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d092:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800d096:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800d098:	4b11      	ldr	r3, [pc, #68]	@ (800d0e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d09a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d09c:	0a5b      	lsrs	r3, r3, #9
 800d09e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d0a2:	3301      	adds	r3, #1
 800d0a4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800d0a6:	683b      	ldr	r3, [r7, #0]
 800d0a8:	ee07 3a90 	vmov	s15, r3
 800d0ac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800d0b0:	edd7 6a07 	vldr	s13, [r7, #28]
 800d0b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d0b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d0bc:	ee17 3a90 	vmov	r3, s15
 800d0c0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800d0c2:	e005      	b.n	800d0d0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800d0c4:	2300      	movs	r3, #0
 800d0c6:	61bb      	str	r3, [r7, #24]
      break;
 800d0c8:	e002      	b.n	800d0d0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800d0ca:	4b07      	ldr	r3, [pc, #28]	@ (800d0e8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800d0cc:	61bb      	str	r3, [r7, #24]
      break;
 800d0ce:	bf00      	nop
  }

  return sysclockfreq;
 800d0d0:	69bb      	ldr	r3, [r7, #24]
}
 800d0d2:	4618      	mov	r0, r3
 800d0d4:	3724      	adds	r7, #36	@ 0x24
 800d0d6:	46bd      	mov	sp, r7
 800d0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0dc:	4770      	bx	lr
 800d0de:	bf00      	nop
 800d0e0:	58024400 	.word	0x58024400
 800d0e4:	03d09000 	.word	0x03d09000
 800d0e8:	003d0900 	.word	0x003d0900
 800d0ec:	017d7840 	.word	0x017d7840
 800d0f0:	46000000 	.word	0x46000000
 800d0f4:	4c742400 	.word	0x4c742400
 800d0f8:	4a742400 	.word	0x4a742400
 800d0fc:	4bbebc20 	.word	0x4bbebc20

0800d100 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800d100:	b580      	push	{r7, lr}
 800d102:	b082      	sub	sp, #8
 800d104:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800d106:	f7ff fe81 	bl	800ce0c <HAL_RCC_GetSysClockFreq>
 800d10a:	4602      	mov	r2, r0
 800d10c:	4b10      	ldr	r3, [pc, #64]	@ (800d150 <HAL_RCC_GetHCLKFreq+0x50>)
 800d10e:	699b      	ldr	r3, [r3, #24]
 800d110:	0a1b      	lsrs	r3, r3, #8
 800d112:	f003 030f 	and.w	r3, r3, #15
 800d116:	490f      	ldr	r1, [pc, #60]	@ (800d154 <HAL_RCC_GetHCLKFreq+0x54>)
 800d118:	5ccb      	ldrb	r3, [r1, r3]
 800d11a:	f003 031f 	and.w	r3, r3, #31
 800d11e:	fa22 f303 	lsr.w	r3, r2, r3
 800d122:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800d124:	4b0a      	ldr	r3, [pc, #40]	@ (800d150 <HAL_RCC_GetHCLKFreq+0x50>)
 800d126:	699b      	ldr	r3, [r3, #24]
 800d128:	f003 030f 	and.w	r3, r3, #15
 800d12c:	4a09      	ldr	r2, [pc, #36]	@ (800d154 <HAL_RCC_GetHCLKFreq+0x54>)
 800d12e:	5cd3      	ldrb	r3, [r2, r3]
 800d130:	f003 031f 	and.w	r3, r3, #31
 800d134:	687a      	ldr	r2, [r7, #4]
 800d136:	fa22 f303 	lsr.w	r3, r2, r3
 800d13a:	4a07      	ldr	r2, [pc, #28]	@ (800d158 <HAL_RCC_GetHCLKFreq+0x58>)
 800d13c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800d13e:	4a07      	ldr	r2, [pc, #28]	@ (800d15c <HAL_RCC_GetHCLKFreq+0x5c>)
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800d144:	4b04      	ldr	r3, [pc, #16]	@ (800d158 <HAL_RCC_GetHCLKFreq+0x58>)
 800d146:	681b      	ldr	r3, [r3, #0]
}
 800d148:	4618      	mov	r0, r3
 800d14a:	3708      	adds	r7, #8
 800d14c:	46bd      	mov	sp, r7
 800d14e:	bd80      	pop	{r7, pc}
 800d150:	58024400 	.word	0x58024400
 800d154:	08016764 	.word	0x08016764
 800d158:	24000008 	.word	0x24000008
 800d15c:	24000004 	.word	0x24000004

0800d160 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800d160:	b580      	push	{r7, lr}
 800d162:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800d164:	f7ff ffcc 	bl	800d100 <HAL_RCC_GetHCLKFreq>
 800d168:	4602      	mov	r2, r0
 800d16a:	4b06      	ldr	r3, [pc, #24]	@ (800d184 <HAL_RCC_GetPCLK1Freq+0x24>)
 800d16c:	69db      	ldr	r3, [r3, #28]
 800d16e:	091b      	lsrs	r3, r3, #4
 800d170:	f003 0307 	and.w	r3, r3, #7
 800d174:	4904      	ldr	r1, [pc, #16]	@ (800d188 <HAL_RCC_GetPCLK1Freq+0x28>)
 800d176:	5ccb      	ldrb	r3, [r1, r3]
 800d178:	f003 031f 	and.w	r3, r3, #31
 800d17c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800d180:	4618      	mov	r0, r3
 800d182:	bd80      	pop	{r7, pc}
 800d184:	58024400 	.word	0x58024400
 800d188:	08016764 	.word	0x08016764

0800d18c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800d18c:	b580      	push	{r7, lr}
 800d18e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800d190:	f7ff ffb6 	bl	800d100 <HAL_RCC_GetHCLKFreq>
 800d194:	4602      	mov	r2, r0
 800d196:	4b06      	ldr	r3, [pc, #24]	@ (800d1b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800d198:	69db      	ldr	r3, [r3, #28]
 800d19a:	0a1b      	lsrs	r3, r3, #8
 800d19c:	f003 0307 	and.w	r3, r3, #7
 800d1a0:	4904      	ldr	r1, [pc, #16]	@ (800d1b4 <HAL_RCC_GetPCLK2Freq+0x28>)
 800d1a2:	5ccb      	ldrb	r3, [r1, r3]
 800d1a4:	f003 031f 	and.w	r3, r3, #31
 800d1a8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800d1ac:	4618      	mov	r0, r3
 800d1ae:	bd80      	pop	{r7, pc}
 800d1b0:	58024400 	.word	0x58024400
 800d1b4:	08016764 	.word	0x08016764

0800d1b8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800d1b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d1bc:	b0ca      	sub	sp, #296	@ 0x128
 800d1be:	af00      	add	r7, sp, #0
 800d1c0:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800d1c4:	2300      	movs	r3, #0
 800d1c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800d1ca:	2300      	movs	r3, #0
 800d1cc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800d1d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d1d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1d8:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800d1dc:	2500      	movs	r5, #0
 800d1de:	ea54 0305 	orrs.w	r3, r4, r5
 800d1e2:	d049      	beq.n	800d278 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800d1e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d1e8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d1ea:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800d1ee:	d02f      	beq.n	800d250 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800d1f0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800d1f4:	d828      	bhi.n	800d248 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800d1f6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d1fa:	d01a      	beq.n	800d232 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800d1fc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d200:	d822      	bhi.n	800d248 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800d202:	2b00      	cmp	r3, #0
 800d204:	d003      	beq.n	800d20e <HAL_RCCEx_PeriphCLKConfig+0x56>
 800d206:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d20a:	d007      	beq.n	800d21c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800d20c:	e01c      	b.n	800d248 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d20e:	4bb8      	ldr	r3, [pc, #736]	@ (800d4f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d210:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d212:	4ab7      	ldr	r2, [pc, #732]	@ (800d4f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d214:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d218:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800d21a:	e01a      	b.n	800d252 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800d21c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d220:	3308      	adds	r3, #8
 800d222:	2102      	movs	r1, #2
 800d224:	4618      	mov	r0, r3
 800d226:	f001 fc8f 	bl	800eb48 <RCCEx_PLL2_Config>
 800d22a:	4603      	mov	r3, r0
 800d22c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800d230:	e00f      	b.n	800d252 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d232:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d236:	3328      	adds	r3, #40	@ 0x28
 800d238:	2102      	movs	r1, #2
 800d23a:	4618      	mov	r0, r3
 800d23c:	f001 fd36 	bl	800ecac <RCCEx_PLL3_Config>
 800d240:	4603      	mov	r3, r0
 800d242:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800d246:	e004      	b.n	800d252 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d248:	2301      	movs	r3, #1
 800d24a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d24e:	e000      	b.n	800d252 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800d250:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d252:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d256:	2b00      	cmp	r3, #0
 800d258:	d10a      	bne.n	800d270 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800d25a:	4ba5      	ldr	r3, [pc, #660]	@ (800d4f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d25c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d25e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800d262:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d266:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d268:	4aa1      	ldr	r2, [pc, #644]	@ (800d4f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d26a:	430b      	orrs	r3, r1
 800d26c:	6513      	str	r3, [r2, #80]	@ 0x50
 800d26e:	e003      	b.n	800d278 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d270:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d274:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800d278:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d27c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d280:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800d284:	f04f 0900 	mov.w	r9, #0
 800d288:	ea58 0309 	orrs.w	r3, r8, r9
 800d28c:	d047      	beq.n	800d31e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800d28e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d292:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d294:	2b04      	cmp	r3, #4
 800d296:	d82a      	bhi.n	800d2ee <HAL_RCCEx_PeriphCLKConfig+0x136>
 800d298:	a201      	add	r2, pc, #4	@ (adr r2, 800d2a0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800d29a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d29e:	bf00      	nop
 800d2a0:	0800d2b5 	.word	0x0800d2b5
 800d2a4:	0800d2c3 	.word	0x0800d2c3
 800d2a8:	0800d2d9 	.word	0x0800d2d9
 800d2ac:	0800d2f7 	.word	0x0800d2f7
 800d2b0:	0800d2f7 	.word	0x0800d2f7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d2b4:	4b8e      	ldr	r3, [pc, #568]	@ (800d4f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d2b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d2b8:	4a8d      	ldr	r2, [pc, #564]	@ (800d4f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d2ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d2be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800d2c0:	e01a      	b.n	800d2f8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d2c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d2c6:	3308      	adds	r3, #8
 800d2c8:	2100      	movs	r1, #0
 800d2ca:	4618      	mov	r0, r3
 800d2cc:	f001 fc3c 	bl	800eb48 <RCCEx_PLL2_Config>
 800d2d0:	4603      	mov	r3, r0
 800d2d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800d2d6:	e00f      	b.n	800d2f8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800d2d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d2dc:	3328      	adds	r3, #40	@ 0x28
 800d2de:	2100      	movs	r1, #0
 800d2e0:	4618      	mov	r0, r3
 800d2e2:	f001 fce3 	bl	800ecac <RCCEx_PLL3_Config>
 800d2e6:	4603      	mov	r3, r0
 800d2e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800d2ec:	e004      	b.n	800d2f8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d2ee:	2301      	movs	r3, #1
 800d2f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d2f4:	e000      	b.n	800d2f8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800d2f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d2f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d10a      	bne.n	800d316 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800d300:	4b7b      	ldr	r3, [pc, #492]	@ (800d4f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d302:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d304:	f023 0107 	bic.w	r1, r3, #7
 800d308:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d30c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d30e:	4a78      	ldr	r2, [pc, #480]	@ (800d4f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d310:	430b      	orrs	r3, r1
 800d312:	6513      	str	r3, [r2, #80]	@ 0x50
 800d314:	e003      	b.n	800d31e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d316:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d31a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800d31e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d322:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d326:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800d32a:	f04f 0b00 	mov.w	fp, #0
 800d32e:	ea5a 030b 	orrs.w	r3, sl, fp
 800d332:	d04c      	beq.n	800d3ce <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800d334:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d338:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d33a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d33e:	d030      	beq.n	800d3a2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800d340:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d344:	d829      	bhi.n	800d39a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800d346:	2bc0      	cmp	r3, #192	@ 0xc0
 800d348:	d02d      	beq.n	800d3a6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800d34a:	2bc0      	cmp	r3, #192	@ 0xc0
 800d34c:	d825      	bhi.n	800d39a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800d34e:	2b80      	cmp	r3, #128	@ 0x80
 800d350:	d018      	beq.n	800d384 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800d352:	2b80      	cmp	r3, #128	@ 0x80
 800d354:	d821      	bhi.n	800d39a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800d356:	2b00      	cmp	r3, #0
 800d358:	d002      	beq.n	800d360 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800d35a:	2b40      	cmp	r3, #64	@ 0x40
 800d35c:	d007      	beq.n	800d36e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800d35e:	e01c      	b.n	800d39a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d360:	4b63      	ldr	r3, [pc, #396]	@ (800d4f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d362:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d364:	4a62      	ldr	r2, [pc, #392]	@ (800d4f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d366:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d36a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800d36c:	e01c      	b.n	800d3a8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d36e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d372:	3308      	adds	r3, #8
 800d374:	2100      	movs	r1, #0
 800d376:	4618      	mov	r0, r3
 800d378:	f001 fbe6 	bl	800eb48 <RCCEx_PLL2_Config>
 800d37c:	4603      	mov	r3, r0
 800d37e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800d382:	e011      	b.n	800d3a8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800d384:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d388:	3328      	adds	r3, #40	@ 0x28
 800d38a:	2100      	movs	r1, #0
 800d38c:	4618      	mov	r0, r3
 800d38e:	f001 fc8d 	bl	800ecac <RCCEx_PLL3_Config>
 800d392:	4603      	mov	r3, r0
 800d394:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800d398:	e006      	b.n	800d3a8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d39a:	2301      	movs	r3, #1
 800d39c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d3a0:	e002      	b.n	800d3a8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800d3a2:	bf00      	nop
 800d3a4:	e000      	b.n	800d3a8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800d3a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d3a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d10a      	bne.n	800d3c6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800d3b0:	4b4f      	ldr	r3, [pc, #316]	@ (800d4f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d3b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d3b4:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800d3b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d3bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d3be:	4a4c      	ldr	r2, [pc, #304]	@ (800d4f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d3c0:	430b      	orrs	r3, r1
 800d3c2:	6513      	str	r3, [r2, #80]	@ 0x50
 800d3c4:	e003      	b.n	800d3ce <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d3c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d3ca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800d3ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d3d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3d6:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800d3da:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800d3de:	2300      	movs	r3, #0
 800d3e0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800d3e4:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800d3e8:	460b      	mov	r3, r1
 800d3ea:	4313      	orrs	r3, r2
 800d3ec:	d053      	beq.n	800d496 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800d3ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d3f2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800d3f6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800d3fa:	d035      	beq.n	800d468 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800d3fc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800d400:	d82e      	bhi.n	800d460 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800d402:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800d406:	d031      	beq.n	800d46c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800d408:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800d40c:	d828      	bhi.n	800d460 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800d40e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800d412:	d01a      	beq.n	800d44a <HAL_RCCEx_PeriphCLKConfig+0x292>
 800d414:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800d418:	d822      	bhi.n	800d460 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d003      	beq.n	800d426 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800d41e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d422:	d007      	beq.n	800d434 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800d424:	e01c      	b.n	800d460 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d426:	4b32      	ldr	r3, [pc, #200]	@ (800d4f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d428:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d42a:	4a31      	ldr	r2, [pc, #196]	@ (800d4f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d42c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d430:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800d432:	e01c      	b.n	800d46e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d434:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d438:	3308      	adds	r3, #8
 800d43a:	2100      	movs	r1, #0
 800d43c:	4618      	mov	r0, r3
 800d43e:	f001 fb83 	bl	800eb48 <RCCEx_PLL2_Config>
 800d442:	4603      	mov	r3, r0
 800d444:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800d448:	e011      	b.n	800d46e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800d44a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d44e:	3328      	adds	r3, #40	@ 0x28
 800d450:	2100      	movs	r1, #0
 800d452:	4618      	mov	r0, r3
 800d454:	f001 fc2a 	bl	800ecac <RCCEx_PLL3_Config>
 800d458:	4603      	mov	r3, r0
 800d45a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800d45e:	e006      	b.n	800d46e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800d460:	2301      	movs	r3, #1
 800d462:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d466:	e002      	b.n	800d46e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800d468:	bf00      	nop
 800d46a:	e000      	b.n	800d46e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800d46c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d46e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d472:	2b00      	cmp	r3, #0
 800d474:	d10b      	bne.n	800d48e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800d476:	4b1e      	ldr	r3, [pc, #120]	@ (800d4f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d478:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d47a:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800d47e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d482:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800d486:	4a1a      	ldr	r2, [pc, #104]	@ (800d4f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d488:	430b      	orrs	r3, r1
 800d48a:	6593      	str	r3, [r2, #88]	@ 0x58
 800d48c:	e003      	b.n	800d496 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d48e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d492:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800d496:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d49a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d49e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800d4a2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800d4a6:	2300      	movs	r3, #0
 800d4a8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800d4ac:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800d4b0:	460b      	mov	r3, r1
 800d4b2:	4313      	orrs	r3, r2
 800d4b4:	d056      	beq.n	800d564 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800d4b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d4ba:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800d4be:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800d4c2:	d038      	beq.n	800d536 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800d4c4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800d4c8:	d831      	bhi.n	800d52e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800d4ca:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800d4ce:	d034      	beq.n	800d53a <HAL_RCCEx_PeriphCLKConfig+0x382>
 800d4d0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800d4d4:	d82b      	bhi.n	800d52e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800d4d6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d4da:	d01d      	beq.n	800d518 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800d4dc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d4e0:	d825      	bhi.n	800d52e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d006      	beq.n	800d4f4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800d4e6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d4ea:	d00a      	beq.n	800d502 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800d4ec:	e01f      	b.n	800d52e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800d4ee:	bf00      	nop
 800d4f0:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d4f4:	4ba2      	ldr	r3, [pc, #648]	@ (800d780 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d4f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d4f8:	4aa1      	ldr	r2, [pc, #644]	@ (800d780 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d4fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d4fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800d500:	e01c      	b.n	800d53c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d502:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d506:	3308      	adds	r3, #8
 800d508:	2100      	movs	r1, #0
 800d50a:	4618      	mov	r0, r3
 800d50c:	f001 fb1c 	bl	800eb48 <RCCEx_PLL2_Config>
 800d510:	4603      	mov	r3, r0
 800d512:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800d516:	e011      	b.n	800d53c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800d518:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d51c:	3328      	adds	r3, #40	@ 0x28
 800d51e:	2100      	movs	r1, #0
 800d520:	4618      	mov	r0, r3
 800d522:	f001 fbc3 	bl	800ecac <RCCEx_PLL3_Config>
 800d526:	4603      	mov	r3, r0
 800d528:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800d52c:	e006      	b.n	800d53c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800d52e:	2301      	movs	r3, #1
 800d530:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d534:	e002      	b.n	800d53c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800d536:	bf00      	nop
 800d538:	e000      	b.n	800d53c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800d53a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d53c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d540:	2b00      	cmp	r3, #0
 800d542:	d10b      	bne.n	800d55c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800d544:	4b8e      	ldr	r3, [pc, #568]	@ (800d780 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d546:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d548:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800d54c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d550:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800d554:	4a8a      	ldr	r2, [pc, #552]	@ (800d780 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d556:	430b      	orrs	r3, r1
 800d558:	6593      	str	r3, [r2, #88]	@ 0x58
 800d55a:	e003      	b.n	800d564 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d55c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d560:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800d564:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d56c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800d570:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800d574:	2300      	movs	r3, #0
 800d576:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800d57a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800d57e:	460b      	mov	r3, r1
 800d580:	4313      	orrs	r3, r2
 800d582:	d03a      	beq.n	800d5fa <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800d584:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d588:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d58a:	2b30      	cmp	r3, #48	@ 0x30
 800d58c:	d01f      	beq.n	800d5ce <HAL_RCCEx_PeriphCLKConfig+0x416>
 800d58e:	2b30      	cmp	r3, #48	@ 0x30
 800d590:	d819      	bhi.n	800d5c6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800d592:	2b20      	cmp	r3, #32
 800d594:	d00c      	beq.n	800d5b0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800d596:	2b20      	cmp	r3, #32
 800d598:	d815      	bhi.n	800d5c6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d019      	beq.n	800d5d2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800d59e:	2b10      	cmp	r3, #16
 800d5a0:	d111      	bne.n	800d5c6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d5a2:	4b77      	ldr	r3, [pc, #476]	@ (800d780 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d5a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d5a6:	4a76      	ldr	r2, [pc, #472]	@ (800d780 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d5a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d5ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800d5ae:	e011      	b.n	800d5d4 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800d5b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d5b4:	3308      	adds	r3, #8
 800d5b6:	2102      	movs	r1, #2
 800d5b8:	4618      	mov	r0, r3
 800d5ba:	f001 fac5 	bl	800eb48 <RCCEx_PLL2_Config>
 800d5be:	4603      	mov	r3, r0
 800d5c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800d5c4:	e006      	b.n	800d5d4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800d5c6:	2301      	movs	r3, #1
 800d5c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d5cc:	e002      	b.n	800d5d4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800d5ce:	bf00      	nop
 800d5d0:	e000      	b.n	800d5d4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800d5d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d5d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d10a      	bne.n	800d5f2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800d5dc:	4b68      	ldr	r3, [pc, #416]	@ (800d780 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d5de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d5e0:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800d5e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d5e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d5ea:	4a65      	ldr	r2, [pc, #404]	@ (800d780 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d5ec:	430b      	orrs	r3, r1
 800d5ee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800d5f0:	e003      	b.n	800d5fa <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d5f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d5f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800d5fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d5fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d602:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800d606:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800d60a:	2300      	movs	r3, #0
 800d60c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800d610:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800d614:	460b      	mov	r3, r1
 800d616:	4313      	orrs	r3, r2
 800d618:	d051      	beq.n	800d6be <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800d61a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d61e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d620:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d624:	d035      	beq.n	800d692 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800d626:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d62a:	d82e      	bhi.n	800d68a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800d62c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800d630:	d031      	beq.n	800d696 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800d632:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800d636:	d828      	bhi.n	800d68a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800d638:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d63c:	d01a      	beq.n	800d674 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800d63e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d642:	d822      	bhi.n	800d68a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800d644:	2b00      	cmp	r3, #0
 800d646:	d003      	beq.n	800d650 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800d648:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d64c:	d007      	beq.n	800d65e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800d64e:	e01c      	b.n	800d68a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d650:	4b4b      	ldr	r3, [pc, #300]	@ (800d780 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d652:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d654:	4a4a      	ldr	r2, [pc, #296]	@ (800d780 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d656:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d65a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800d65c:	e01c      	b.n	800d698 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d65e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d662:	3308      	adds	r3, #8
 800d664:	2100      	movs	r1, #0
 800d666:	4618      	mov	r0, r3
 800d668:	f001 fa6e 	bl	800eb48 <RCCEx_PLL2_Config>
 800d66c:	4603      	mov	r3, r0
 800d66e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800d672:	e011      	b.n	800d698 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800d674:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d678:	3328      	adds	r3, #40	@ 0x28
 800d67a:	2100      	movs	r1, #0
 800d67c:	4618      	mov	r0, r3
 800d67e:	f001 fb15 	bl	800ecac <RCCEx_PLL3_Config>
 800d682:	4603      	mov	r3, r0
 800d684:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800d688:	e006      	b.n	800d698 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d68a:	2301      	movs	r3, #1
 800d68c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d690:	e002      	b.n	800d698 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800d692:	bf00      	nop
 800d694:	e000      	b.n	800d698 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800d696:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d698:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d10a      	bne.n	800d6b6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800d6a0:	4b37      	ldr	r3, [pc, #220]	@ (800d780 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d6a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d6a4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800d6a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d6ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d6ae:	4a34      	ldr	r2, [pc, #208]	@ (800d780 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d6b0:	430b      	orrs	r3, r1
 800d6b2:	6513      	str	r3, [r2, #80]	@ 0x50
 800d6b4:	e003      	b.n	800d6be <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d6b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d6ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800d6be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d6c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6c6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800d6ca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800d6ce:	2300      	movs	r3, #0
 800d6d0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800d6d4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800d6d8:	460b      	mov	r3, r1
 800d6da:	4313      	orrs	r3, r2
 800d6dc:	d056      	beq.n	800d78c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800d6de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d6e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d6e4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800d6e8:	d033      	beq.n	800d752 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800d6ea:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800d6ee:	d82c      	bhi.n	800d74a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800d6f0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800d6f4:	d02f      	beq.n	800d756 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800d6f6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800d6fa:	d826      	bhi.n	800d74a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800d6fc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800d700:	d02b      	beq.n	800d75a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800d702:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800d706:	d820      	bhi.n	800d74a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800d708:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d70c:	d012      	beq.n	800d734 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800d70e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d712:	d81a      	bhi.n	800d74a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800d714:	2b00      	cmp	r3, #0
 800d716:	d022      	beq.n	800d75e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800d718:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d71c:	d115      	bne.n	800d74a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d71e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d722:	3308      	adds	r3, #8
 800d724:	2101      	movs	r1, #1
 800d726:	4618      	mov	r0, r3
 800d728:	f001 fa0e 	bl	800eb48 <RCCEx_PLL2_Config>
 800d72c:	4603      	mov	r3, r0
 800d72e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800d732:	e015      	b.n	800d760 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d734:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d738:	3328      	adds	r3, #40	@ 0x28
 800d73a:	2101      	movs	r1, #1
 800d73c:	4618      	mov	r0, r3
 800d73e:	f001 fab5 	bl	800ecac <RCCEx_PLL3_Config>
 800d742:	4603      	mov	r3, r0
 800d744:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800d748:	e00a      	b.n	800d760 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d74a:	2301      	movs	r3, #1
 800d74c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d750:	e006      	b.n	800d760 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800d752:	bf00      	nop
 800d754:	e004      	b.n	800d760 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800d756:	bf00      	nop
 800d758:	e002      	b.n	800d760 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800d75a:	bf00      	nop
 800d75c:	e000      	b.n	800d760 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800d75e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d760:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d764:	2b00      	cmp	r3, #0
 800d766:	d10d      	bne.n	800d784 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800d768:	4b05      	ldr	r3, [pc, #20]	@ (800d780 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d76a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d76c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800d770:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d774:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d776:	4a02      	ldr	r2, [pc, #8]	@ (800d780 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d778:	430b      	orrs	r3, r1
 800d77a:	6513      	str	r3, [r2, #80]	@ 0x50
 800d77c:	e006      	b.n	800d78c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800d77e:	bf00      	nop
 800d780:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d784:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d788:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800d78c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d790:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d794:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800d798:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800d79c:	2300      	movs	r3, #0
 800d79e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800d7a2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800d7a6:	460b      	mov	r3, r1
 800d7a8:	4313      	orrs	r3, r2
 800d7aa:	d055      	beq.n	800d858 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800d7ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d7b0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800d7b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d7b8:	d033      	beq.n	800d822 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800d7ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d7be:	d82c      	bhi.n	800d81a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800d7c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d7c4:	d02f      	beq.n	800d826 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800d7c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d7ca:	d826      	bhi.n	800d81a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800d7cc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800d7d0:	d02b      	beq.n	800d82a <HAL_RCCEx_PeriphCLKConfig+0x672>
 800d7d2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800d7d6:	d820      	bhi.n	800d81a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800d7d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d7dc:	d012      	beq.n	800d804 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800d7de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d7e2:	d81a      	bhi.n	800d81a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d022      	beq.n	800d82e <HAL_RCCEx_PeriphCLKConfig+0x676>
 800d7e8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d7ec:	d115      	bne.n	800d81a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d7ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d7f2:	3308      	adds	r3, #8
 800d7f4:	2101      	movs	r1, #1
 800d7f6:	4618      	mov	r0, r3
 800d7f8:	f001 f9a6 	bl	800eb48 <RCCEx_PLL2_Config>
 800d7fc:	4603      	mov	r3, r0
 800d7fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800d802:	e015      	b.n	800d830 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d804:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d808:	3328      	adds	r3, #40	@ 0x28
 800d80a:	2101      	movs	r1, #1
 800d80c:	4618      	mov	r0, r3
 800d80e:	f001 fa4d 	bl	800ecac <RCCEx_PLL3_Config>
 800d812:	4603      	mov	r3, r0
 800d814:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800d818:	e00a      	b.n	800d830 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800d81a:	2301      	movs	r3, #1
 800d81c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d820:	e006      	b.n	800d830 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800d822:	bf00      	nop
 800d824:	e004      	b.n	800d830 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800d826:	bf00      	nop
 800d828:	e002      	b.n	800d830 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800d82a:	bf00      	nop
 800d82c:	e000      	b.n	800d830 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800d82e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d830:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d834:	2b00      	cmp	r3, #0
 800d836:	d10b      	bne.n	800d850 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800d838:	4ba3      	ldr	r3, [pc, #652]	@ (800dac8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d83a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d83c:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800d840:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d844:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800d848:	4a9f      	ldr	r2, [pc, #636]	@ (800dac8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d84a:	430b      	orrs	r3, r1
 800d84c:	6593      	str	r3, [r2, #88]	@ 0x58
 800d84e:	e003      	b.n	800d858 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d850:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d854:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800d858:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d85c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d860:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800d864:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800d868:	2300      	movs	r3, #0
 800d86a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800d86e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800d872:	460b      	mov	r3, r1
 800d874:	4313      	orrs	r3, r2
 800d876:	d037      	beq.n	800d8e8 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800d878:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d87c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d87e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d882:	d00e      	beq.n	800d8a2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800d884:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d888:	d816      	bhi.n	800d8b8 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d018      	beq.n	800d8c0 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800d88e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d892:	d111      	bne.n	800d8b8 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d894:	4b8c      	ldr	r3, [pc, #560]	@ (800dac8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d896:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d898:	4a8b      	ldr	r2, [pc, #556]	@ (800dac8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d89a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d89e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800d8a0:	e00f      	b.n	800d8c2 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d8a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d8a6:	3308      	adds	r3, #8
 800d8a8:	2101      	movs	r1, #1
 800d8aa:	4618      	mov	r0, r3
 800d8ac:	f001 f94c 	bl	800eb48 <RCCEx_PLL2_Config>
 800d8b0:	4603      	mov	r3, r0
 800d8b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800d8b6:	e004      	b.n	800d8c2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d8b8:	2301      	movs	r3, #1
 800d8ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d8be:	e000      	b.n	800d8c2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800d8c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d8c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d10a      	bne.n	800d8e0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800d8ca:	4b7f      	ldr	r3, [pc, #508]	@ (800dac8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d8cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d8ce:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800d8d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d8d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d8d8:	4a7b      	ldr	r2, [pc, #492]	@ (800dac8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d8da:	430b      	orrs	r3, r1
 800d8dc:	6513      	str	r3, [r2, #80]	@ 0x50
 800d8de:	e003      	b.n	800d8e8 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d8e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d8e4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800d8e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d8ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8f0:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800d8f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800d8f8:	2300      	movs	r3, #0
 800d8fa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800d8fe:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800d902:	460b      	mov	r3, r1
 800d904:	4313      	orrs	r3, r2
 800d906:	d039      	beq.n	800d97c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800d908:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d90c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d90e:	2b03      	cmp	r3, #3
 800d910:	d81c      	bhi.n	800d94c <HAL_RCCEx_PeriphCLKConfig+0x794>
 800d912:	a201      	add	r2, pc, #4	@ (adr r2, 800d918 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800d914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d918:	0800d955 	.word	0x0800d955
 800d91c:	0800d929 	.word	0x0800d929
 800d920:	0800d937 	.word	0x0800d937
 800d924:	0800d955 	.word	0x0800d955
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d928:	4b67      	ldr	r3, [pc, #412]	@ (800dac8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d92a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d92c:	4a66      	ldr	r2, [pc, #408]	@ (800dac8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d92e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d932:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800d934:	e00f      	b.n	800d956 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800d936:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d93a:	3308      	adds	r3, #8
 800d93c:	2102      	movs	r1, #2
 800d93e:	4618      	mov	r0, r3
 800d940:	f001 f902 	bl	800eb48 <RCCEx_PLL2_Config>
 800d944:	4603      	mov	r3, r0
 800d946:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800d94a:	e004      	b.n	800d956 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800d94c:	2301      	movs	r3, #1
 800d94e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d952:	e000      	b.n	800d956 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800d954:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d956:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d10a      	bne.n	800d974 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800d95e:	4b5a      	ldr	r3, [pc, #360]	@ (800dac8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d960:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d962:	f023 0103 	bic.w	r1, r3, #3
 800d966:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d96a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d96c:	4a56      	ldr	r2, [pc, #344]	@ (800dac8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d96e:	430b      	orrs	r3, r1
 800d970:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800d972:	e003      	b.n	800d97c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d974:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d978:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800d97c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d980:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d984:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800d988:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800d98c:	2300      	movs	r3, #0
 800d98e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800d992:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800d996:	460b      	mov	r3, r1
 800d998:	4313      	orrs	r3, r2
 800d99a:	f000 809f 	beq.w	800dadc <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800d99e:	4b4b      	ldr	r3, [pc, #300]	@ (800dacc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	4a4a      	ldr	r2, [pc, #296]	@ (800dacc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800d9a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d9a8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800d9aa:	f7f4 fd97 	bl	80024dc <HAL_GetTick>
 800d9ae:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d9b2:	e00b      	b.n	800d9cc <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d9b4:	f7f4 fd92 	bl	80024dc <HAL_GetTick>
 800d9b8:	4602      	mov	r2, r0
 800d9ba:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800d9be:	1ad3      	subs	r3, r2, r3
 800d9c0:	2b64      	cmp	r3, #100	@ 0x64
 800d9c2:	d903      	bls.n	800d9cc <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800d9c4:	2303      	movs	r3, #3
 800d9c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d9ca:	e005      	b.n	800d9d8 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d9cc:	4b3f      	ldr	r3, [pc, #252]	@ (800dacc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d0ed      	beq.n	800d9b4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800d9d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d179      	bne.n	800dad4 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800d9e0:	4b39      	ldr	r3, [pc, #228]	@ (800dac8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d9e2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800d9e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d9e8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800d9ec:	4053      	eors	r3, r2
 800d9ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d015      	beq.n	800da22 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800d9f6:	4b34      	ldr	r3, [pc, #208]	@ (800dac8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d9f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d9fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d9fe:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800da02:	4b31      	ldr	r3, [pc, #196]	@ (800dac8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800da04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800da06:	4a30      	ldr	r2, [pc, #192]	@ (800dac8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800da08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800da0c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800da0e:	4b2e      	ldr	r3, [pc, #184]	@ (800dac8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800da10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800da12:	4a2d      	ldr	r2, [pc, #180]	@ (800dac8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800da14:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800da18:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800da1a:	4a2b      	ldr	r2, [pc, #172]	@ (800dac8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800da1c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800da20:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800da22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800da26:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800da2a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800da2e:	d118      	bne.n	800da62 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800da30:	f7f4 fd54 	bl	80024dc <HAL_GetTick>
 800da34:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800da38:	e00d      	b.n	800da56 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800da3a:	f7f4 fd4f 	bl	80024dc <HAL_GetTick>
 800da3e:	4602      	mov	r2, r0
 800da40:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800da44:	1ad2      	subs	r2, r2, r3
 800da46:	f241 3388 	movw	r3, #5000	@ 0x1388
 800da4a:	429a      	cmp	r2, r3
 800da4c:	d903      	bls.n	800da56 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800da4e:	2303      	movs	r3, #3
 800da50:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 800da54:	e005      	b.n	800da62 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800da56:	4b1c      	ldr	r3, [pc, #112]	@ (800dac8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800da58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800da5a:	f003 0302 	and.w	r3, r3, #2
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d0eb      	beq.n	800da3a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800da62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800da66:	2b00      	cmp	r3, #0
 800da68:	d129      	bne.n	800dabe <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800da6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800da6e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800da72:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800da76:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800da7a:	d10e      	bne.n	800da9a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800da7c:	4b12      	ldr	r3, [pc, #72]	@ (800dac8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800da7e:	691b      	ldr	r3, [r3, #16]
 800da80:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800da84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800da88:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800da8c:	091a      	lsrs	r2, r3, #4
 800da8e:	4b10      	ldr	r3, [pc, #64]	@ (800dad0 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800da90:	4013      	ands	r3, r2
 800da92:	4a0d      	ldr	r2, [pc, #52]	@ (800dac8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800da94:	430b      	orrs	r3, r1
 800da96:	6113      	str	r3, [r2, #16]
 800da98:	e005      	b.n	800daa6 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800da9a:	4b0b      	ldr	r3, [pc, #44]	@ (800dac8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800da9c:	691b      	ldr	r3, [r3, #16]
 800da9e:	4a0a      	ldr	r2, [pc, #40]	@ (800dac8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800daa0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800daa4:	6113      	str	r3, [r2, #16]
 800daa6:	4b08      	ldr	r3, [pc, #32]	@ (800dac8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800daa8:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800daaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800daae:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800dab2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800dab6:	4a04      	ldr	r2, [pc, #16]	@ (800dac8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800dab8:	430b      	orrs	r3, r1
 800daba:	6713      	str	r3, [r2, #112]	@ 0x70
 800dabc:	e00e      	b.n	800dadc <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800dabe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800dac2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800dac6:	e009      	b.n	800dadc <HAL_RCCEx_PeriphCLKConfig+0x924>
 800dac8:	58024400 	.word	0x58024400
 800dacc:	58024800 	.word	0x58024800
 800dad0:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dad4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800dad8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800dadc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dae4:	f002 0301 	and.w	r3, r2, #1
 800dae8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800daec:	2300      	movs	r3, #0
 800daee:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800daf2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800daf6:	460b      	mov	r3, r1
 800daf8:	4313      	orrs	r3, r2
 800dafa:	f000 8089 	beq.w	800dc10 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800dafe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800db02:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800db04:	2b28      	cmp	r3, #40	@ 0x28
 800db06:	d86b      	bhi.n	800dbe0 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800db08:	a201      	add	r2, pc, #4	@ (adr r2, 800db10 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800db0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db0e:	bf00      	nop
 800db10:	0800dbe9 	.word	0x0800dbe9
 800db14:	0800dbe1 	.word	0x0800dbe1
 800db18:	0800dbe1 	.word	0x0800dbe1
 800db1c:	0800dbe1 	.word	0x0800dbe1
 800db20:	0800dbe1 	.word	0x0800dbe1
 800db24:	0800dbe1 	.word	0x0800dbe1
 800db28:	0800dbe1 	.word	0x0800dbe1
 800db2c:	0800dbe1 	.word	0x0800dbe1
 800db30:	0800dbb5 	.word	0x0800dbb5
 800db34:	0800dbe1 	.word	0x0800dbe1
 800db38:	0800dbe1 	.word	0x0800dbe1
 800db3c:	0800dbe1 	.word	0x0800dbe1
 800db40:	0800dbe1 	.word	0x0800dbe1
 800db44:	0800dbe1 	.word	0x0800dbe1
 800db48:	0800dbe1 	.word	0x0800dbe1
 800db4c:	0800dbe1 	.word	0x0800dbe1
 800db50:	0800dbcb 	.word	0x0800dbcb
 800db54:	0800dbe1 	.word	0x0800dbe1
 800db58:	0800dbe1 	.word	0x0800dbe1
 800db5c:	0800dbe1 	.word	0x0800dbe1
 800db60:	0800dbe1 	.word	0x0800dbe1
 800db64:	0800dbe1 	.word	0x0800dbe1
 800db68:	0800dbe1 	.word	0x0800dbe1
 800db6c:	0800dbe1 	.word	0x0800dbe1
 800db70:	0800dbe9 	.word	0x0800dbe9
 800db74:	0800dbe1 	.word	0x0800dbe1
 800db78:	0800dbe1 	.word	0x0800dbe1
 800db7c:	0800dbe1 	.word	0x0800dbe1
 800db80:	0800dbe1 	.word	0x0800dbe1
 800db84:	0800dbe1 	.word	0x0800dbe1
 800db88:	0800dbe1 	.word	0x0800dbe1
 800db8c:	0800dbe1 	.word	0x0800dbe1
 800db90:	0800dbe9 	.word	0x0800dbe9
 800db94:	0800dbe1 	.word	0x0800dbe1
 800db98:	0800dbe1 	.word	0x0800dbe1
 800db9c:	0800dbe1 	.word	0x0800dbe1
 800dba0:	0800dbe1 	.word	0x0800dbe1
 800dba4:	0800dbe1 	.word	0x0800dbe1
 800dba8:	0800dbe1 	.word	0x0800dbe1
 800dbac:	0800dbe1 	.word	0x0800dbe1
 800dbb0:	0800dbe9 	.word	0x0800dbe9
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800dbb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dbb8:	3308      	adds	r3, #8
 800dbba:	2101      	movs	r1, #1
 800dbbc:	4618      	mov	r0, r3
 800dbbe:	f000 ffc3 	bl	800eb48 <RCCEx_PLL2_Config>
 800dbc2:	4603      	mov	r3, r0
 800dbc4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800dbc8:	e00f      	b.n	800dbea <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800dbca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dbce:	3328      	adds	r3, #40	@ 0x28
 800dbd0:	2101      	movs	r1, #1
 800dbd2:	4618      	mov	r0, r3
 800dbd4:	f001 f86a 	bl	800ecac <RCCEx_PLL3_Config>
 800dbd8:	4603      	mov	r3, r0
 800dbda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800dbde:	e004      	b.n	800dbea <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800dbe0:	2301      	movs	r3, #1
 800dbe2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800dbe6:	e000      	b.n	800dbea <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800dbe8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dbea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d10a      	bne.n	800dc08 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800dbf2:	4bbf      	ldr	r3, [pc, #764]	@ (800def0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800dbf4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dbf6:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800dbfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dbfe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800dc00:	4abb      	ldr	r2, [pc, #748]	@ (800def0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800dc02:	430b      	orrs	r3, r1
 800dc04:	6553      	str	r3, [r2, #84]	@ 0x54
 800dc06:	e003      	b.n	800dc10 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dc08:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800dc0c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800dc10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dc14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc18:	f002 0302 	and.w	r3, r2, #2
 800dc1c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800dc20:	2300      	movs	r3, #0
 800dc22:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800dc26:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800dc2a:	460b      	mov	r3, r1
 800dc2c:	4313      	orrs	r3, r2
 800dc2e:	d041      	beq.n	800dcb4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800dc30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dc34:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800dc36:	2b05      	cmp	r3, #5
 800dc38:	d824      	bhi.n	800dc84 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800dc3a:	a201      	add	r2, pc, #4	@ (adr r2, 800dc40 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800dc3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc40:	0800dc8d 	.word	0x0800dc8d
 800dc44:	0800dc59 	.word	0x0800dc59
 800dc48:	0800dc6f 	.word	0x0800dc6f
 800dc4c:	0800dc8d 	.word	0x0800dc8d
 800dc50:	0800dc8d 	.word	0x0800dc8d
 800dc54:	0800dc8d 	.word	0x0800dc8d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800dc58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dc5c:	3308      	adds	r3, #8
 800dc5e:	2101      	movs	r1, #1
 800dc60:	4618      	mov	r0, r3
 800dc62:	f000 ff71 	bl	800eb48 <RCCEx_PLL2_Config>
 800dc66:	4603      	mov	r3, r0
 800dc68:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800dc6c:	e00f      	b.n	800dc8e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800dc6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dc72:	3328      	adds	r3, #40	@ 0x28
 800dc74:	2101      	movs	r1, #1
 800dc76:	4618      	mov	r0, r3
 800dc78:	f001 f818 	bl	800ecac <RCCEx_PLL3_Config>
 800dc7c:	4603      	mov	r3, r0
 800dc7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800dc82:	e004      	b.n	800dc8e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800dc84:	2301      	movs	r3, #1
 800dc86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800dc8a:	e000      	b.n	800dc8e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800dc8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dc8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d10a      	bne.n	800dcac <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800dc96:	4b96      	ldr	r3, [pc, #600]	@ (800def0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800dc98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dc9a:	f023 0107 	bic.w	r1, r3, #7
 800dc9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dca2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800dca4:	4a92      	ldr	r2, [pc, #584]	@ (800def0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800dca6:	430b      	orrs	r3, r1
 800dca8:	6553      	str	r3, [r2, #84]	@ 0x54
 800dcaa:	e003      	b.n	800dcb4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dcac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800dcb0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800dcb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dcb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcbc:	f002 0304 	and.w	r3, r2, #4
 800dcc0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800dcc4:	2300      	movs	r3, #0
 800dcc6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800dcca:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800dcce:	460b      	mov	r3, r1
 800dcd0:	4313      	orrs	r3, r2
 800dcd2:	d044      	beq.n	800dd5e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800dcd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dcd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800dcdc:	2b05      	cmp	r3, #5
 800dcde:	d825      	bhi.n	800dd2c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800dce0:	a201      	add	r2, pc, #4	@ (adr r2, 800dce8 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800dce2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dce6:	bf00      	nop
 800dce8:	0800dd35 	.word	0x0800dd35
 800dcec:	0800dd01 	.word	0x0800dd01
 800dcf0:	0800dd17 	.word	0x0800dd17
 800dcf4:	0800dd35 	.word	0x0800dd35
 800dcf8:	0800dd35 	.word	0x0800dd35
 800dcfc:	0800dd35 	.word	0x0800dd35
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800dd00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dd04:	3308      	adds	r3, #8
 800dd06:	2101      	movs	r1, #1
 800dd08:	4618      	mov	r0, r3
 800dd0a:	f000 ff1d 	bl	800eb48 <RCCEx_PLL2_Config>
 800dd0e:	4603      	mov	r3, r0
 800dd10:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800dd14:	e00f      	b.n	800dd36 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800dd16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dd1a:	3328      	adds	r3, #40	@ 0x28
 800dd1c:	2101      	movs	r1, #1
 800dd1e:	4618      	mov	r0, r3
 800dd20:	f000 ffc4 	bl	800ecac <RCCEx_PLL3_Config>
 800dd24:	4603      	mov	r3, r0
 800dd26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800dd2a:	e004      	b.n	800dd36 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800dd2c:	2301      	movs	r3, #1
 800dd2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800dd32:	e000      	b.n	800dd36 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800dd34:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dd36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d10b      	bne.n	800dd56 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800dd3e:	4b6c      	ldr	r3, [pc, #432]	@ (800def0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800dd40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dd42:	f023 0107 	bic.w	r1, r3, #7
 800dd46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dd4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800dd4e:	4a68      	ldr	r2, [pc, #416]	@ (800def0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800dd50:	430b      	orrs	r3, r1
 800dd52:	6593      	str	r3, [r2, #88]	@ 0x58
 800dd54:	e003      	b.n	800dd5e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dd56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800dd5a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800dd5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dd62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd66:	f002 0320 	and.w	r3, r2, #32
 800dd6a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800dd6e:	2300      	movs	r3, #0
 800dd70:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800dd74:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800dd78:	460b      	mov	r3, r1
 800dd7a:	4313      	orrs	r3, r2
 800dd7c:	d055      	beq.n	800de2a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800dd7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dd82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800dd86:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800dd8a:	d033      	beq.n	800ddf4 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800dd8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800dd90:	d82c      	bhi.n	800ddec <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800dd92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dd96:	d02f      	beq.n	800ddf8 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800dd98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dd9c:	d826      	bhi.n	800ddec <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800dd9e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800dda2:	d02b      	beq.n	800ddfc <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800dda4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800dda8:	d820      	bhi.n	800ddec <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800ddaa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ddae:	d012      	beq.n	800ddd6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800ddb0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ddb4:	d81a      	bhi.n	800ddec <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d022      	beq.n	800de00 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800ddba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ddbe:	d115      	bne.n	800ddec <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ddc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ddc4:	3308      	adds	r3, #8
 800ddc6:	2100      	movs	r1, #0
 800ddc8:	4618      	mov	r0, r3
 800ddca:	f000 febd 	bl	800eb48 <RCCEx_PLL2_Config>
 800ddce:	4603      	mov	r3, r0
 800ddd0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800ddd4:	e015      	b.n	800de02 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ddd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ddda:	3328      	adds	r3, #40	@ 0x28
 800dddc:	2102      	movs	r1, #2
 800ddde:	4618      	mov	r0, r3
 800dde0:	f000 ff64 	bl	800ecac <RCCEx_PLL3_Config>
 800dde4:	4603      	mov	r3, r0
 800dde6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800ddea:	e00a      	b.n	800de02 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ddec:	2301      	movs	r3, #1
 800ddee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800ddf2:	e006      	b.n	800de02 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800ddf4:	bf00      	nop
 800ddf6:	e004      	b.n	800de02 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800ddf8:	bf00      	nop
 800ddfa:	e002      	b.n	800de02 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800ddfc:	bf00      	nop
 800ddfe:	e000      	b.n	800de02 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800de00:	bf00      	nop
    }

    if (ret == HAL_OK)
 800de02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800de06:	2b00      	cmp	r3, #0
 800de08:	d10b      	bne.n	800de22 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800de0a:	4b39      	ldr	r3, [pc, #228]	@ (800def0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800de0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800de0e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800de12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800de16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800de1a:	4a35      	ldr	r2, [pc, #212]	@ (800def0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800de1c:	430b      	orrs	r3, r1
 800de1e:	6553      	str	r3, [r2, #84]	@ 0x54
 800de20:	e003      	b.n	800de2a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800de22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800de26:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800de2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800de2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de32:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800de36:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800de3a:	2300      	movs	r3, #0
 800de3c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800de40:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800de44:	460b      	mov	r3, r1
 800de46:	4313      	orrs	r3, r2
 800de48:	d058      	beq.n	800defc <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800de4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800de4e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800de52:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800de56:	d033      	beq.n	800dec0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800de58:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800de5c:	d82c      	bhi.n	800deb8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800de5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800de62:	d02f      	beq.n	800dec4 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800de64:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800de68:	d826      	bhi.n	800deb8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800de6a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800de6e:	d02b      	beq.n	800dec8 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800de70:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800de74:	d820      	bhi.n	800deb8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800de76:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800de7a:	d012      	beq.n	800dea2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800de7c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800de80:	d81a      	bhi.n	800deb8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800de82:	2b00      	cmp	r3, #0
 800de84:	d022      	beq.n	800decc <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800de86:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800de8a:	d115      	bne.n	800deb8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800de8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800de90:	3308      	adds	r3, #8
 800de92:	2100      	movs	r1, #0
 800de94:	4618      	mov	r0, r3
 800de96:	f000 fe57 	bl	800eb48 <RCCEx_PLL2_Config>
 800de9a:	4603      	mov	r3, r0
 800de9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800dea0:	e015      	b.n	800dece <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800dea2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dea6:	3328      	adds	r3, #40	@ 0x28
 800dea8:	2102      	movs	r1, #2
 800deaa:	4618      	mov	r0, r3
 800deac:	f000 fefe 	bl	800ecac <RCCEx_PLL3_Config>
 800deb0:	4603      	mov	r3, r0
 800deb2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800deb6:	e00a      	b.n	800dece <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800deb8:	2301      	movs	r3, #1
 800deba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800debe:	e006      	b.n	800dece <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800dec0:	bf00      	nop
 800dec2:	e004      	b.n	800dece <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800dec4:	bf00      	nop
 800dec6:	e002      	b.n	800dece <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800dec8:	bf00      	nop
 800deca:	e000      	b.n	800dece <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800decc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dece:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	d10e      	bne.n	800def4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800ded6:	4b06      	ldr	r3, [pc, #24]	@ (800def0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800ded8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800deda:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800dede:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dee2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800dee6:	4a02      	ldr	r2, [pc, #8]	@ (800def0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800dee8:	430b      	orrs	r3, r1
 800deea:	6593      	str	r3, [r2, #88]	@ 0x58
 800deec:	e006      	b.n	800defc <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800deee:	bf00      	nop
 800def0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800def4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800def8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800defc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800df00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df04:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800df08:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800df0c:	2300      	movs	r3, #0
 800df0e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800df12:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800df16:	460b      	mov	r3, r1
 800df18:	4313      	orrs	r3, r2
 800df1a:	d055      	beq.n	800dfc8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800df1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800df20:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800df24:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800df28:	d033      	beq.n	800df92 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800df2a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800df2e:	d82c      	bhi.n	800df8a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800df30:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800df34:	d02f      	beq.n	800df96 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800df36:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800df3a:	d826      	bhi.n	800df8a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800df3c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800df40:	d02b      	beq.n	800df9a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800df42:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800df46:	d820      	bhi.n	800df8a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800df48:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800df4c:	d012      	beq.n	800df74 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800df4e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800df52:	d81a      	bhi.n	800df8a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800df54:	2b00      	cmp	r3, #0
 800df56:	d022      	beq.n	800df9e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800df58:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800df5c:	d115      	bne.n	800df8a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800df5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800df62:	3308      	adds	r3, #8
 800df64:	2100      	movs	r1, #0
 800df66:	4618      	mov	r0, r3
 800df68:	f000 fdee 	bl	800eb48 <RCCEx_PLL2_Config>
 800df6c:	4603      	mov	r3, r0
 800df6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800df72:	e015      	b.n	800dfa0 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800df74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800df78:	3328      	adds	r3, #40	@ 0x28
 800df7a:	2102      	movs	r1, #2
 800df7c:	4618      	mov	r0, r3
 800df7e:	f000 fe95 	bl	800ecac <RCCEx_PLL3_Config>
 800df82:	4603      	mov	r3, r0
 800df84:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800df88:	e00a      	b.n	800dfa0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800df8a:	2301      	movs	r3, #1
 800df8c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800df90:	e006      	b.n	800dfa0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800df92:	bf00      	nop
 800df94:	e004      	b.n	800dfa0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800df96:	bf00      	nop
 800df98:	e002      	b.n	800dfa0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800df9a:	bf00      	nop
 800df9c:	e000      	b.n	800dfa0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800df9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dfa0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	d10b      	bne.n	800dfc0 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800dfa8:	4ba1      	ldr	r3, [pc, #644]	@ (800e230 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800dfaa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dfac:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800dfb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dfb4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800dfb8:	4a9d      	ldr	r2, [pc, #628]	@ (800e230 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800dfba:	430b      	orrs	r3, r1
 800dfbc:	6593      	str	r3, [r2, #88]	@ 0x58
 800dfbe:	e003      	b.n	800dfc8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dfc0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800dfc4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800dfc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dfcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfd0:	f002 0308 	and.w	r3, r2, #8
 800dfd4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800dfd8:	2300      	movs	r3, #0
 800dfda:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800dfde:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800dfe2:	460b      	mov	r3, r1
 800dfe4:	4313      	orrs	r3, r2
 800dfe6:	d01e      	beq.n	800e026 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800dfe8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dfec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800dff0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800dff4:	d10c      	bne.n	800e010 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800dff6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dffa:	3328      	adds	r3, #40	@ 0x28
 800dffc:	2102      	movs	r1, #2
 800dffe:	4618      	mov	r0, r3
 800e000:	f000 fe54 	bl	800ecac <RCCEx_PLL3_Config>
 800e004:	4603      	mov	r3, r0
 800e006:	2b00      	cmp	r3, #0
 800e008:	d002      	beq.n	800e010 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800e00a:	2301      	movs	r3, #1
 800e00c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800e010:	4b87      	ldr	r3, [pc, #540]	@ (800e230 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e012:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e014:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800e018:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e01c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e020:	4a83      	ldr	r2, [pc, #524]	@ (800e230 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e022:	430b      	orrs	r3, r1
 800e024:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800e026:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e02a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e02e:	f002 0310 	and.w	r3, r2, #16
 800e032:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800e036:	2300      	movs	r3, #0
 800e038:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800e03c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800e040:	460b      	mov	r3, r1
 800e042:	4313      	orrs	r3, r2
 800e044:	d01e      	beq.n	800e084 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800e046:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e04a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800e04e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e052:	d10c      	bne.n	800e06e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800e054:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e058:	3328      	adds	r3, #40	@ 0x28
 800e05a:	2102      	movs	r1, #2
 800e05c:	4618      	mov	r0, r3
 800e05e:	f000 fe25 	bl	800ecac <RCCEx_PLL3_Config>
 800e062:	4603      	mov	r3, r0
 800e064:	2b00      	cmp	r3, #0
 800e066:	d002      	beq.n	800e06e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800e068:	2301      	movs	r3, #1
 800e06a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800e06e:	4b70      	ldr	r3, [pc, #448]	@ (800e230 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e070:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e072:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800e076:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e07a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800e07e:	4a6c      	ldr	r2, [pc, #432]	@ (800e230 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e080:	430b      	orrs	r3, r1
 800e082:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800e084:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e08c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800e090:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800e094:	2300      	movs	r3, #0
 800e096:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800e09a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800e09e:	460b      	mov	r3, r1
 800e0a0:	4313      	orrs	r3, r2
 800e0a2:	d03e      	beq.n	800e122 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800e0a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e0a8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800e0ac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e0b0:	d022      	beq.n	800e0f8 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800e0b2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e0b6:	d81b      	bhi.n	800e0f0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	d003      	beq.n	800e0c4 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800e0bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e0c0:	d00b      	beq.n	800e0da <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800e0c2:	e015      	b.n	800e0f0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e0c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e0c8:	3308      	adds	r3, #8
 800e0ca:	2100      	movs	r1, #0
 800e0cc:	4618      	mov	r0, r3
 800e0ce:	f000 fd3b 	bl	800eb48 <RCCEx_PLL2_Config>
 800e0d2:	4603      	mov	r3, r0
 800e0d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800e0d8:	e00f      	b.n	800e0fa <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800e0da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e0de:	3328      	adds	r3, #40	@ 0x28
 800e0e0:	2102      	movs	r1, #2
 800e0e2:	4618      	mov	r0, r3
 800e0e4:	f000 fde2 	bl	800ecac <RCCEx_PLL3_Config>
 800e0e8:	4603      	mov	r3, r0
 800e0ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800e0ee:	e004      	b.n	800e0fa <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e0f0:	2301      	movs	r3, #1
 800e0f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e0f6:	e000      	b.n	800e0fa <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800e0f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e0fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d10b      	bne.n	800e11a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800e102:	4b4b      	ldr	r3, [pc, #300]	@ (800e230 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e104:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e106:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800e10a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e10e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800e112:	4a47      	ldr	r2, [pc, #284]	@ (800e230 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e114:	430b      	orrs	r3, r1
 800e116:	6593      	str	r3, [r2, #88]	@ 0x58
 800e118:	e003      	b.n	800e122 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e11a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e11e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800e122:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e12a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800e12e:	67bb      	str	r3, [r7, #120]	@ 0x78
 800e130:	2300      	movs	r3, #0
 800e132:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800e134:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800e138:	460b      	mov	r3, r1
 800e13a:	4313      	orrs	r3, r2
 800e13c:	d03b      	beq.n	800e1b6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800e13e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e142:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e146:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800e14a:	d01f      	beq.n	800e18c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800e14c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800e150:	d818      	bhi.n	800e184 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800e152:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e156:	d003      	beq.n	800e160 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800e158:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800e15c:	d007      	beq.n	800e16e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800e15e:	e011      	b.n	800e184 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e160:	4b33      	ldr	r3, [pc, #204]	@ (800e230 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e162:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e164:	4a32      	ldr	r2, [pc, #200]	@ (800e230 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e166:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e16a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800e16c:	e00f      	b.n	800e18e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e16e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e172:	3328      	adds	r3, #40	@ 0x28
 800e174:	2101      	movs	r1, #1
 800e176:	4618      	mov	r0, r3
 800e178:	f000 fd98 	bl	800ecac <RCCEx_PLL3_Config>
 800e17c:	4603      	mov	r3, r0
 800e17e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800e182:	e004      	b.n	800e18e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e184:	2301      	movs	r3, #1
 800e186:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e18a:	e000      	b.n	800e18e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800e18c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e18e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e192:	2b00      	cmp	r3, #0
 800e194:	d10b      	bne.n	800e1ae <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800e196:	4b26      	ldr	r3, [pc, #152]	@ (800e230 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e198:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e19a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800e19e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e1a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e1a6:	4a22      	ldr	r2, [pc, #136]	@ (800e230 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e1a8:	430b      	orrs	r3, r1
 800e1aa:	6553      	str	r3, [r2, #84]	@ 0x54
 800e1ac:	e003      	b.n	800e1b6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e1ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e1b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800e1b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e1ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1be:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800e1c2:	673b      	str	r3, [r7, #112]	@ 0x70
 800e1c4:	2300      	movs	r3, #0
 800e1c6:	677b      	str	r3, [r7, #116]	@ 0x74
 800e1c8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800e1cc:	460b      	mov	r3, r1
 800e1ce:	4313      	orrs	r3, r2
 800e1d0:	d034      	beq.n	800e23c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800e1d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e1d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	d003      	beq.n	800e1e4 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800e1dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e1e0:	d007      	beq.n	800e1f2 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800e1e2:	e011      	b.n	800e208 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e1e4:	4b12      	ldr	r3, [pc, #72]	@ (800e230 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e1e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e1e8:	4a11      	ldr	r2, [pc, #68]	@ (800e230 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e1ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e1ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800e1f0:	e00e      	b.n	800e210 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800e1f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e1f6:	3308      	adds	r3, #8
 800e1f8:	2102      	movs	r1, #2
 800e1fa:	4618      	mov	r0, r3
 800e1fc:	f000 fca4 	bl	800eb48 <RCCEx_PLL2_Config>
 800e200:	4603      	mov	r3, r0
 800e202:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800e206:	e003      	b.n	800e210 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800e208:	2301      	movs	r3, #1
 800e20a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e20e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e210:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e214:	2b00      	cmp	r3, #0
 800e216:	d10d      	bne.n	800e234 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800e218:	4b05      	ldr	r3, [pc, #20]	@ (800e230 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e21a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e21c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800e220:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e224:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e226:	4a02      	ldr	r2, [pc, #8]	@ (800e230 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e228:	430b      	orrs	r3, r1
 800e22a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800e22c:	e006      	b.n	800e23c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800e22e:	bf00      	nop
 800e230:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e234:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e238:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800e23c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e240:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e244:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800e248:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e24a:	2300      	movs	r3, #0
 800e24c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800e24e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800e252:	460b      	mov	r3, r1
 800e254:	4313      	orrs	r3, r2
 800e256:	d00c      	beq.n	800e272 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800e258:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e25c:	3328      	adds	r3, #40	@ 0x28
 800e25e:	2102      	movs	r1, #2
 800e260:	4618      	mov	r0, r3
 800e262:	f000 fd23 	bl	800ecac <RCCEx_PLL3_Config>
 800e266:	4603      	mov	r3, r0
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d002      	beq.n	800e272 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800e26c:	2301      	movs	r3, #1
 800e26e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800e272:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e27a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800e27e:	663b      	str	r3, [r7, #96]	@ 0x60
 800e280:	2300      	movs	r3, #0
 800e282:	667b      	str	r3, [r7, #100]	@ 0x64
 800e284:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800e288:	460b      	mov	r3, r1
 800e28a:	4313      	orrs	r3, r2
 800e28c:	d038      	beq.n	800e300 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800e28e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e292:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e296:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e29a:	d018      	beq.n	800e2ce <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800e29c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e2a0:	d811      	bhi.n	800e2c6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800e2a2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e2a6:	d014      	beq.n	800e2d2 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800e2a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e2ac:	d80b      	bhi.n	800e2c6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d011      	beq.n	800e2d6 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800e2b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e2b6:	d106      	bne.n	800e2c6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e2b8:	4bc3      	ldr	r3, [pc, #780]	@ (800e5c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e2ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e2bc:	4ac2      	ldr	r2, [pc, #776]	@ (800e5c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e2be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e2c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800e2c4:	e008      	b.n	800e2d8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e2c6:	2301      	movs	r3, #1
 800e2c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e2cc:	e004      	b.n	800e2d8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800e2ce:	bf00      	nop
 800e2d0:	e002      	b.n	800e2d8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800e2d2:	bf00      	nop
 800e2d4:	e000      	b.n	800e2d8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800e2d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e2d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	d10b      	bne.n	800e2f8 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800e2e0:	4bb9      	ldr	r3, [pc, #740]	@ (800e5c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e2e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e2e4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800e2e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e2ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e2f0:	4ab5      	ldr	r2, [pc, #724]	@ (800e5c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e2f2:	430b      	orrs	r3, r1
 800e2f4:	6553      	str	r3, [r2, #84]	@ 0x54
 800e2f6:	e003      	b.n	800e300 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e2f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e2fc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800e300:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e304:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e308:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800e30c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e30e:	2300      	movs	r3, #0
 800e310:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e312:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800e316:	460b      	mov	r3, r1
 800e318:	4313      	orrs	r3, r2
 800e31a:	d009      	beq.n	800e330 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800e31c:	4baa      	ldr	r3, [pc, #680]	@ (800e5c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e31e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e320:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800e324:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e328:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e32a:	4aa7      	ldr	r2, [pc, #668]	@ (800e5c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e32c:	430b      	orrs	r3, r1
 800e32e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800e330:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e334:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e338:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800e33c:	653b      	str	r3, [r7, #80]	@ 0x50
 800e33e:	2300      	movs	r3, #0
 800e340:	657b      	str	r3, [r7, #84]	@ 0x54
 800e342:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800e346:	460b      	mov	r3, r1
 800e348:	4313      	orrs	r3, r2
 800e34a:	d00a      	beq.n	800e362 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800e34c:	4b9e      	ldr	r3, [pc, #632]	@ (800e5c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e34e:	691b      	ldr	r3, [r3, #16]
 800e350:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800e354:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e358:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800e35c:	4a9a      	ldr	r2, [pc, #616]	@ (800e5c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e35e:	430b      	orrs	r3, r1
 800e360:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800e362:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e36a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800e36e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e370:	2300      	movs	r3, #0
 800e372:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e374:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800e378:	460b      	mov	r3, r1
 800e37a:	4313      	orrs	r3, r2
 800e37c:	d009      	beq.n	800e392 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800e37e:	4b92      	ldr	r3, [pc, #584]	@ (800e5c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e380:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e382:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800e386:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e38a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e38c:	4a8e      	ldr	r2, [pc, #568]	@ (800e5c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e38e:	430b      	orrs	r3, r1
 800e390:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800e392:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e39a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800e39e:	643b      	str	r3, [r7, #64]	@ 0x40
 800e3a0:	2300      	movs	r3, #0
 800e3a2:	647b      	str	r3, [r7, #68]	@ 0x44
 800e3a4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800e3a8:	460b      	mov	r3, r1
 800e3aa:	4313      	orrs	r3, r2
 800e3ac:	d00e      	beq.n	800e3cc <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800e3ae:	4b86      	ldr	r3, [pc, #536]	@ (800e5c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e3b0:	691b      	ldr	r3, [r3, #16]
 800e3b2:	4a85      	ldr	r2, [pc, #532]	@ (800e5c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e3b4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800e3b8:	6113      	str	r3, [r2, #16]
 800e3ba:	4b83      	ldr	r3, [pc, #524]	@ (800e5c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e3bc:	6919      	ldr	r1, [r3, #16]
 800e3be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e3c2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800e3c6:	4a80      	ldr	r2, [pc, #512]	@ (800e5c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e3c8:	430b      	orrs	r3, r1
 800e3ca:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800e3cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e3d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3d4:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800e3d8:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e3da:	2300      	movs	r3, #0
 800e3dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e3de:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800e3e2:	460b      	mov	r3, r1
 800e3e4:	4313      	orrs	r3, r2
 800e3e6:	d009      	beq.n	800e3fc <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800e3e8:	4b77      	ldr	r3, [pc, #476]	@ (800e5c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e3ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e3ec:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800e3f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e3f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e3f6:	4a74      	ldr	r2, [pc, #464]	@ (800e5c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e3f8:	430b      	orrs	r3, r1
 800e3fa:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800e3fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e400:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e404:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800e408:	633b      	str	r3, [r7, #48]	@ 0x30
 800e40a:	2300      	movs	r3, #0
 800e40c:	637b      	str	r3, [r7, #52]	@ 0x34
 800e40e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800e412:	460b      	mov	r3, r1
 800e414:	4313      	orrs	r3, r2
 800e416:	d00a      	beq.n	800e42e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800e418:	4b6b      	ldr	r3, [pc, #428]	@ (800e5c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e41a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e41c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800e420:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e424:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e428:	4a67      	ldr	r2, [pc, #412]	@ (800e5c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e42a:	430b      	orrs	r3, r1
 800e42c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800e42e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e432:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e436:	2100      	movs	r1, #0
 800e438:	62b9      	str	r1, [r7, #40]	@ 0x28
 800e43a:	f003 0301 	and.w	r3, r3, #1
 800e43e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e440:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800e444:	460b      	mov	r3, r1
 800e446:	4313      	orrs	r3, r2
 800e448:	d011      	beq.n	800e46e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e44a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e44e:	3308      	adds	r3, #8
 800e450:	2100      	movs	r1, #0
 800e452:	4618      	mov	r0, r3
 800e454:	f000 fb78 	bl	800eb48 <RCCEx_PLL2_Config>
 800e458:	4603      	mov	r3, r0
 800e45a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800e45e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e462:	2b00      	cmp	r3, #0
 800e464:	d003      	beq.n	800e46e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e466:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e46a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800e46e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e472:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e476:	2100      	movs	r1, #0
 800e478:	6239      	str	r1, [r7, #32]
 800e47a:	f003 0302 	and.w	r3, r3, #2
 800e47e:	627b      	str	r3, [r7, #36]	@ 0x24
 800e480:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800e484:	460b      	mov	r3, r1
 800e486:	4313      	orrs	r3, r2
 800e488:	d011      	beq.n	800e4ae <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e48a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e48e:	3308      	adds	r3, #8
 800e490:	2101      	movs	r1, #1
 800e492:	4618      	mov	r0, r3
 800e494:	f000 fb58 	bl	800eb48 <RCCEx_PLL2_Config>
 800e498:	4603      	mov	r3, r0
 800e49a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800e49e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	d003      	beq.n	800e4ae <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e4a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e4aa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800e4ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e4b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4b6:	2100      	movs	r1, #0
 800e4b8:	61b9      	str	r1, [r7, #24]
 800e4ba:	f003 0304 	and.w	r3, r3, #4
 800e4be:	61fb      	str	r3, [r7, #28]
 800e4c0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800e4c4:	460b      	mov	r3, r1
 800e4c6:	4313      	orrs	r3, r2
 800e4c8:	d011      	beq.n	800e4ee <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800e4ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e4ce:	3308      	adds	r3, #8
 800e4d0:	2102      	movs	r1, #2
 800e4d2:	4618      	mov	r0, r3
 800e4d4:	f000 fb38 	bl	800eb48 <RCCEx_PLL2_Config>
 800e4d8:	4603      	mov	r3, r0
 800e4da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800e4de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d003      	beq.n	800e4ee <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e4e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e4ea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800e4ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e4f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4f6:	2100      	movs	r1, #0
 800e4f8:	6139      	str	r1, [r7, #16]
 800e4fa:	f003 0308 	and.w	r3, r3, #8
 800e4fe:	617b      	str	r3, [r7, #20]
 800e500:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800e504:	460b      	mov	r3, r1
 800e506:	4313      	orrs	r3, r2
 800e508:	d011      	beq.n	800e52e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800e50a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e50e:	3328      	adds	r3, #40	@ 0x28
 800e510:	2100      	movs	r1, #0
 800e512:	4618      	mov	r0, r3
 800e514:	f000 fbca 	bl	800ecac <RCCEx_PLL3_Config>
 800e518:	4603      	mov	r3, r0
 800e51a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800e51e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e522:	2b00      	cmp	r3, #0
 800e524:	d003      	beq.n	800e52e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e526:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e52a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800e52e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e532:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e536:	2100      	movs	r1, #0
 800e538:	60b9      	str	r1, [r7, #8]
 800e53a:	f003 0310 	and.w	r3, r3, #16
 800e53e:	60fb      	str	r3, [r7, #12]
 800e540:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800e544:	460b      	mov	r3, r1
 800e546:	4313      	orrs	r3, r2
 800e548:	d011      	beq.n	800e56e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e54a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e54e:	3328      	adds	r3, #40	@ 0x28
 800e550:	2101      	movs	r1, #1
 800e552:	4618      	mov	r0, r3
 800e554:	f000 fbaa 	bl	800ecac <RCCEx_PLL3_Config>
 800e558:	4603      	mov	r3, r0
 800e55a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800e55e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e562:	2b00      	cmp	r3, #0
 800e564:	d003      	beq.n	800e56e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e566:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e56a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800e56e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e572:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e576:	2100      	movs	r1, #0
 800e578:	6039      	str	r1, [r7, #0]
 800e57a:	f003 0320 	and.w	r3, r3, #32
 800e57e:	607b      	str	r3, [r7, #4]
 800e580:	e9d7 1200 	ldrd	r1, r2, [r7]
 800e584:	460b      	mov	r3, r1
 800e586:	4313      	orrs	r3, r2
 800e588:	d011      	beq.n	800e5ae <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800e58a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e58e:	3328      	adds	r3, #40	@ 0x28
 800e590:	2102      	movs	r1, #2
 800e592:	4618      	mov	r0, r3
 800e594:	f000 fb8a 	bl	800ecac <RCCEx_PLL3_Config>
 800e598:	4603      	mov	r3, r0
 800e59a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800e59e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	d003      	beq.n	800e5ae <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e5a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e5aa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800e5ae:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	d101      	bne.n	800e5ba <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800e5b6:	2300      	movs	r3, #0
 800e5b8:	e000      	b.n	800e5bc <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800e5ba:	2301      	movs	r3, #1
}
 800e5bc:	4618      	mov	r0, r3
 800e5be:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800e5c2:	46bd      	mov	sp, r7
 800e5c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e5c8:	58024400 	.word	0x58024400

0800e5cc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800e5cc:	b580      	push	{r7, lr}
 800e5ce:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800e5d0:	f7fe fd96 	bl	800d100 <HAL_RCC_GetHCLKFreq>
 800e5d4:	4602      	mov	r2, r0
 800e5d6:	4b06      	ldr	r3, [pc, #24]	@ (800e5f0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800e5d8:	6a1b      	ldr	r3, [r3, #32]
 800e5da:	091b      	lsrs	r3, r3, #4
 800e5dc:	f003 0307 	and.w	r3, r3, #7
 800e5e0:	4904      	ldr	r1, [pc, #16]	@ (800e5f4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800e5e2:	5ccb      	ldrb	r3, [r1, r3]
 800e5e4:	f003 031f 	and.w	r3, r3, #31
 800e5e8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800e5ec:	4618      	mov	r0, r3
 800e5ee:	bd80      	pop	{r7, pc}
 800e5f0:	58024400 	.word	0x58024400
 800e5f4:	08016764 	.word	0x08016764

0800e5f8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800e5f8:	b480      	push	{r7}
 800e5fa:	b089      	sub	sp, #36	@ 0x24
 800e5fc:	af00      	add	r7, sp, #0
 800e5fe:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800e600:	4ba1      	ldr	r3, [pc, #644]	@ (800e888 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e602:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e604:	f003 0303 	and.w	r3, r3, #3
 800e608:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800e60a:	4b9f      	ldr	r3, [pc, #636]	@ (800e888 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e60c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e60e:	0b1b      	lsrs	r3, r3, #12
 800e610:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e614:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800e616:	4b9c      	ldr	r3, [pc, #624]	@ (800e888 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e618:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e61a:	091b      	lsrs	r3, r3, #4
 800e61c:	f003 0301 	and.w	r3, r3, #1
 800e620:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800e622:	4b99      	ldr	r3, [pc, #612]	@ (800e888 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e624:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e626:	08db      	lsrs	r3, r3, #3
 800e628:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e62c:	693a      	ldr	r2, [r7, #16]
 800e62e:	fb02 f303 	mul.w	r3, r2, r3
 800e632:	ee07 3a90 	vmov	s15, r3
 800e636:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e63a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800e63e:	697b      	ldr	r3, [r7, #20]
 800e640:	2b00      	cmp	r3, #0
 800e642:	f000 8111 	beq.w	800e868 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800e646:	69bb      	ldr	r3, [r7, #24]
 800e648:	2b02      	cmp	r3, #2
 800e64a:	f000 8083 	beq.w	800e754 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800e64e:	69bb      	ldr	r3, [r7, #24]
 800e650:	2b02      	cmp	r3, #2
 800e652:	f200 80a1 	bhi.w	800e798 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800e656:	69bb      	ldr	r3, [r7, #24]
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d003      	beq.n	800e664 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800e65c:	69bb      	ldr	r3, [r7, #24]
 800e65e:	2b01      	cmp	r3, #1
 800e660:	d056      	beq.n	800e710 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800e662:	e099      	b.n	800e798 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e664:	4b88      	ldr	r3, [pc, #544]	@ (800e888 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e666:	681b      	ldr	r3, [r3, #0]
 800e668:	f003 0320 	and.w	r3, r3, #32
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d02d      	beq.n	800e6cc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e670:	4b85      	ldr	r3, [pc, #532]	@ (800e888 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e672:	681b      	ldr	r3, [r3, #0]
 800e674:	08db      	lsrs	r3, r3, #3
 800e676:	f003 0303 	and.w	r3, r3, #3
 800e67a:	4a84      	ldr	r2, [pc, #528]	@ (800e88c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800e67c:	fa22 f303 	lsr.w	r3, r2, r3
 800e680:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800e682:	68bb      	ldr	r3, [r7, #8]
 800e684:	ee07 3a90 	vmov	s15, r3
 800e688:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e68c:	697b      	ldr	r3, [r7, #20]
 800e68e:	ee07 3a90 	vmov	s15, r3
 800e692:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e696:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e69a:	4b7b      	ldr	r3, [pc, #492]	@ (800e888 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e69c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e69e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e6a2:	ee07 3a90 	vmov	s15, r3
 800e6a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e6aa:	ed97 6a03 	vldr	s12, [r7, #12]
 800e6ae:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800e890 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800e6b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e6b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e6ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e6be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e6c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e6c6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800e6ca:	e087      	b.n	800e7dc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800e6cc:	697b      	ldr	r3, [r7, #20]
 800e6ce:	ee07 3a90 	vmov	s15, r3
 800e6d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e6d6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800e894 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800e6da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e6de:	4b6a      	ldr	r3, [pc, #424]	@ (800e888 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e6e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e6e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e6e6:	ee07 3a90 	vmov	s15, r3
 800e6ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e6ee:	ed97 6a03 	vldr	s12, [r7, #12]
 800e6f2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800e890 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800e6f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e6fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e6fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e702:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e706:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e70a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e70e:	e065      	b.n	800e7dc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800e710:	697b      	ldr	r3, [r7, #20]
 800e712:	ee07 3a90 	vmov	s15, r3
 800e716:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e71a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800e898 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800e71e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e722:	4b59      	ldr	r3, [pc, #356]	@ (800e888 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e724:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e726:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e72a:	ee07 3a90 	vmov	s15, r3
 800e72e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e732:	ed97 6a03 	vldr	s12, [r7, #12]
 800e736:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800e890 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800e73a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e73e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e742:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e746:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e74a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e74e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e752:	e043      	b.n	800e7dc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800e754:	697b      	ldr	r3, [r7, #20]
 800e756:	ee07 3a90 	vmov	s15, r3
 800e75a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e75e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800e89c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800e762:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e766:	4b48      	ldr	r3, [pc, #288]	@ (800e888 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e768:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e76a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e76e:	ee07 3a90 	vmov	s15, r3
 800e772:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e776:	ed97 6a03 	vldr	s12, [r7, #12]
 800e77a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800e890 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800e77e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e782:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e786:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e78a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e78e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e792:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e796:	e021      	b.n	800e7dc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800e798:	697b      	ldr	r3, [r7, #20]
 800e79a:	ee07 3a90 	vmov	s15, r3
 800e79e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e7a2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800e898 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800e7a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e7aa:	4b37      	ldr	r3, [pc, #220]	@ (800e888 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e7ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e7ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e7b2:	ee07 3a90 	vmov	s15, r3
 800e7b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e7ba:	ed97 6a03 	vldr	s12, [r7, #12]
 800e7be:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800e890 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800e7c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e7c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e7ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e7ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e7d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e7d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e7da:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800e7dc:	4b2a      	ldr	r3, [pc, #168]	@ (800e888 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e7de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e7e0:	0a5b      	lsrs	r3, r3, #9
 800e7e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e7e6:	ee07 3a90 	vmov	s15, r3
 800e7ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e7ee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e7f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e7f6:	edd7 6a07 	vldr	s13, [r7, #28]
 800e7fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e7fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e802:	ee17 2a90 	vmov	r2, s15
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800e80a:	4b1f      	ldr	r3, [pc, #124]	@ (800e888 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e80c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e80e:	0c1b      	lsrs	r3, r3, #16
 800e810:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e814:	ee07 3a90 	vmov	s15, r3
 800e818:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e81c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e820:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e824:	edd7 6a07 	vldr	s13, [r7, #28]
 800e828:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e82c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e830:	ee17 2a90 	vmov	r2, s15
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800e838:	4b13      	ldr	r3, [pc, #76]	@ (800e888 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e83a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e83c:	0e1b      	lsrs	r3, r3, #24
 800e83e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e842:	ee07 3a90 	vmov	s15, r3
 800e846:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e84a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e84e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e852:	edd7 6a07 	vldr	s13, [r7, #28]
 800e856:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e85a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e85e:	ee17 2a90 	vmov	r2, s15
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800e866:	e008      	b.n	800e87a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	2200      	movs	r2, #0
 800e86c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	2200      	movs	r2, #0
 800e872:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	2200      	movs	r2, #0
 800e878:	609a      	str	r2, [r3, #8]
}
 800e87a:	bf00      	nop
 800e87c:	3724      	adds	r7, #36	@ 0x24
 800e87e:	46bd      	mov	sp, r7
 800e880:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e884:	4770      	bx	lr
 800e886:	bf00      	nop
 800e888:	58024400 	.word	0x58024400
 800e88c:	03d09000 	.word	0x03d09000
 800e890:	46000000 	.word	0x46000000
 800e894:	4c742400 	.word	0x4c742400
 800e898:	4a742400 	.word	0x4a742400
 800e89c:	4bbebc20 	.word	0x4bbebc20

0800e8a0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800e8a0:	b480      	push	{r7}
 800e8a2:	b089      	sub	sp, #36	@ 0x24
 800e8a4:	af00      	add	r7, sp, #0
 800e8a6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800e8a8:	4ba1      	ldr	r3, [pc, #644]	@ (800eb30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e8aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e8ac:	f003 0303 	and.w	r3, r3, #3
 800e8b0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800e8b2:	4b9f      	ldr	r3, [pc, #636]	@ (800eb30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e8b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e8b6:	0d1b      	lsrs	r3, r3, #20
 800e8b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e8bc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800e8be:	4b9c      	ldr	r3, [pc, #624]	@ (800eb30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e8c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e8c2:	0a1b      	lsrs	r3, r3, #8
 800e8c4:	f003 0301 	and.w	r3, r3, #1
 800e8c8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800e8ca:	4b99      	ldr	r3, [pc, #612]	@ (800eb30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e8cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e8ce:	08db      	lsrs	r3, r3, #3
 800e8d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e8d4:	693a      	ldr	r2, [r7, #16]
 800e8d6:	fb02 f303 	mul.w	r3, r2, r3
 800e8da:	ee07 3a90 	vmov	s15, r3
 800e8de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e8e2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800e8e6:	697b      	ldr	r3, [r7, #20]
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	f000 8111 	beq.w	800eb10 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800e8ee:	69bb      	ldr	r3, [r7, #24]
 800e8f0:	2b02      	cmp	r3, #2
 800e8f2:	f000 8083 	beq.w	800e9fc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800e8f6:	69bb      	ldr	r3, [r7, #24]
 800e8f8:	2b02      	cmp	r3, #2
 800e8fa:	f200 80a1 	bhi.w	800ea40 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800e8fe:	69bb      	ldr	r3, [r7, #24]
 800e900:	2b00      	cmp	r3, #0
 800e902:	d003      	beq.n	800e90c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800e904:	69bb      	ldr	r3, [r7, #24]
 800e906:	2b01      	cmp	r3, #1
 800e908:	d056      	beq.n	800e9b8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800e90a:	e099      	b.n	800ea40 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e90c:	4b88      	ldr	r3, [pc, #544]	@ (800eb30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e90e:	681b      	ldr	r3, [r3, #0]
 800e910:	f003 0320 	and.w	r3, r3, #32
 800e914:	2b00      	cmp	r3, #0
 800e916:	d02d      	beq.n	800e974 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e918:	4b85      	ldr	r3, [pc, #532]	@ (800eb30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e91a:	681b      	ldr	r3, [r3, #0]
 800e91c:	08db      	lsrs	r3, r3, #3
 800e91e:	f003 0303 	and.w	r3, r3, #3
 800e922:	4a84      	ldr	r2, [pc, #528]	@ (800eb34 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800e924:	fa22 f303 	lsr.w	r3, r2, r3
 800e928:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800e92a:	68bb      	ldr	r3, [r7, #8]
 800e92c:	ee07 3a90 	vmov	s15, r3
 800e930:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e934:	697b      	ldr	r3, [r7, #20]
 800e936:	ee07 3a90 	vmov	s15, r3
 800e93a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e93e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e942:	4b7b      	ldr	r3, [pc, #492]	@ (800eb30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e946:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e94a:	ee07 3a90 	vmov	s15, r3
 800e94e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e952:	ed97 6a03 	vldr	s12, [r7, #12]
 800e956:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800eb38 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800e95a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e95e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e962:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e966:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e96a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e96e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800e972:	e087      	b.n	800ea84 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800e974:	697b      	ldr	r3, [r7, #20]
 800e976:	ee07 3a90 	vmov	s15, r3
 800e97a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e97e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800eb3c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800e982:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e986:	4b6a      	ldr	r3, [pc, #424]	@ (800eb30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e98a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e98e:	ee07 3a90 	vmov	s15, r3
 800e992:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e996:	ed97 6a03 	vldr	s12, [r7, #12]
 800e99a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800eb38 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800e99e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e9a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e9a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e9aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e9ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e9b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e9b6:	e065      	b.n	800ea84 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800e9b8:	697b      	ldr	r3, [r7, #20]
 800e9ba:	ee07 3a90 	vmov	s15, r3
 800e9be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e9c2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800eb40 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800e9c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e9ca:	4b59      	ldr	r3, [pc, #356]	@ (800eb30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e9cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e9ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e9d2:	ee07 3a90 	vmov	s15, r3
 800e9d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e9da:	ed97 6a03 	vldr	s12, [r7, #12]
 800e9de:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800eb38 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800e9e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e9e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e9ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e9ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e9f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e9f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e9fa:	e043      	b.n	800ea84 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800e9fc:	697b      	ldr	r3, [r7, #20]
 800e9fe:	ee07 3a90 	vmov	s15, r3
 800ea02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ea06:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800eb44 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800ea0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ea0e:	4b48      	ldr	r3, [pc, #288]	@ (800eb30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ea10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ea12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ea16:	ee07 3a90 	vmov	s15, r3
 800ea1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ea1e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ea22:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800eb38 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ea26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ea2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ea2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ea32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ea36:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ea3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ea3e:	e021      	b.n	800ea84 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ea40:	697b      	ldr	r3, [r7, #20]
 800ea42:	ee07 3a90 	vmov	s15, r3
 800ea46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ea4a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800eb40 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ea4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ea52:	4b37      	ldr	r3, [pc, #220]	@ (800eb30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ea54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ea56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ea5a:	ee07 3a90 	vmov	s15, r3
 800ea5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ea62:	ed97 6a03 	vldr	s12, [r7, #12]
 800ea66:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800eb38 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ea6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ea6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ea72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ea76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ea7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ea7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ea82:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800ea84:	4b2a      	ldr	r3, [pc, #168]	@ (800eb30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ea86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ea88:	0a5b      	lsrs	r3, r3, #9
 800ea8a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ea8e:	ee07 3a90 	vmov	s15, r3
 800ea92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ea96:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ea9a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ea9e:	edd7 6a07 	vldr	s13, [r7, #28]
 800eaa2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800eaa6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800eaaa:	ee17 2a90 	vmov	r2, s15
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800eab2:	4b1f      	ldr	r3, [pc, #124]	@ (800eb30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800eab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eab6:	0c1b      	lsrs	r3, r3, #16
 800eab8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800eabc:	ee07 3a90 	vmov	s15, r3
 800eac0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800eac4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800eac8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800eacc:	edd7 6a07 	vldr	s13, [r7, #28]
 800ead0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ead4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ead8:	ee17 2a90 	vmov	r2, s15
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800eae0:	4b13      	ldr	r3, [pc, #76]	@ (800eb30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800eae2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eae4:	0e1b      	lsrs	r3, r3, #24
 800eae6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800eaea:	ee07 3a90 	vmov	s15, r3
 800eaee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800eaf2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800eaf6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800eafa:	edd7 6a07 	vldr	s13, [r7, #28]
 800eafe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800eb02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800eb06:	ee17 2a90 	vmov	r2, s15
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800eb0e:	e008      	b.n	800eb22 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	2200      	movs	r2, #0
 800eb14:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	2200      	movs	r2, #0
 800eb1a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	2200      	movs	r2, #0
 800eb20:	609a      	str	r2, [r3, #8]
}
 800eb22:	bf00      	nop
 800eb24:	3724      	adds	r7, #36	@ 0x24
 800eb26:	46bd      	mov	sp, r7
 800eb28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb2c:	4770      	bx	lr
 800eb2e:	bf00      	nop
 800eb30:	58024400 	.word	0x58024400
 800eb34:	03d09000 	.word	0x03d09000
 800eb38:	46000000 	.word	0x46000000
 800eb3c:	4c742400 	.word	0x4c742400
 800eb40:	4a742400 	.word	0x4a742400
 800eb44:	4bbebc20 	.word	0x4bbebc20

0800eb48 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800eb48:	b580      	push	{r7, lr}
 800eb4a:	b084      	sub	sp, #16
 800eb4c:	af00      	add	r7, sp, #0
 800eb4e:	6078      	str	r0, [r7, #4]
 800eb50:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800eb52:	2300      	movs	r3, #0
 800eb54:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800eb56:	4b53      	ldr	r3, [pc, #332]	@ (800eca4 <RCCEx_PLL2_Config+0x15c>)
 800eb58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eb5a:	f003 0303 	and.w	r3, r3, #3
 800eb5e:	2b03      	cmp	r3, #3
 800eb60:	d101      	bne.n	800eb66 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800eb62:	2301      	movs	r3, #1
 800eb64:	e099      	b.n	800ec9a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800eb66:	4b4f      	ldr	r3, [pc, #316]	@ (800eca4 <RCCEx_PLL2_Config+0x15c>)
 800eb68:	681b      	ldr	r3, [r3, #0]
 800eb6a:	4a4e      	ldr	r2, [pc, #312]	@ (800eca4 <RCCEx_PLL2_Config+0x15c>)
 800eb6c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800eb70:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800eb72:	f7f3 fcb3 	bl	80024dc <HAL_GetTick>
 800eb76:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800eb78:	e008      	b.n	800eb8c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800eb7a:	f7f3 fcaf 	bl	80024dc <HAL_GetTick>
 800eb7e:	4602      	mov	r2, r0
 800eb80:	68bb      	ldr	r3, [r7, #8]
 800eb82:	1ad3      	subs	r3, r2, r3
 800eb84:	2b02      	cmp	r3, #2
 800eb86:	d901      	bls.n	800eb8c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800eb88:	2303      	movs	r3, #3
 800eb8a:	e086      	b.n	800ec9a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800eb8c:	4b45      	ldr	r3, [pc, #276]	@ (800eca4 <RCCEx_PLL2_Config+0x15c>)
 800eb8e:	681b      	ldr	r3, [r3, #0]
 800eb90:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	d1f0      	bne.n	800eb7a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800eb98:	4b42      	ldr	r3, [pc, #264]	@ (800eca4 <RCCEx_PLL2_Config+0x15c>)
 800eb9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eb9c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	681b      	ldr	r3, [r3, #0]
 800eba4:	031b      	lsls	r3, r3, #12
 800eba6:	493f      	ldr	r1, [pc, #252]	@ (800eca4 <RCCEx_PLL2_Config+0x15c>)
 800eba8:	4313      	orrs	r3, r2
 800ebaa:	628b      	str	r3, [r1, #40]	@ 0x28
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	685b      	ldr	r3, [r3, #4]
 800ebb0:	3b01      	subs	r3, #1
 800ebb2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	689b      	ldr	r3, [r3, #8]
 800ebba:	3b01      	subs	r3, #1
 800ebbc:	025b      	lsls	r3, r3, #9
 800ebbe:	b29b      	uxth	r3, r3
 800ebc0:	431a      	orrs	r2, r3
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	68db      	ldr	r3, [r3, #12]
 800ebc6:	3b01      	subs	r3, #1
 800ebc8:	041b      	lsls	r3, r3, #16
 800ebca:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800ebce:	431a      	orrs	r2, r3
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	691b      	ldr	r3, [r3, #16]
 800ebd4:	3b01      	subs	r3, #1
 800ebd6:	061b      	lsls	r3, r3, #24
 800ebd8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800ebdc:	4931      	ldr	r1, [pc, #196]	@ (800eca4 <RCCEx_PLL2_Config+0x15c>)
 800ebde:	4313      	orrs	r3, r2
 800ebe0:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800ebe2:	4b30      	ldr	r3, [pc, #192]	@ (800eca4 <RCCEx_PLL2_Config+0x15c>)
 800ebe4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ebe6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	695b      	ldr	r3, [r3, #20]
 800ebee:	492d      	ldr	r1, [pc, #180]	@ (800eca4 <RCCEx_PLL2_Config+0x15c>)
 800ebf0:	4313      	orrs	r3, r2
 800ebf2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800ebf4:	4b2b      	ldr	r3, [pc, #172]	@ (800eca4 <RCCEx_PLL2_Config+0x15c>)
 800ebf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ebf8:	f023 0220 	bic.w	r2, r3, #32
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	699b      	ldr	r3, [r3, #24]
 800ec00:	4928      	ldr	r1, [pc, #160]	@ (800eca4 <RCCEx_PLL2_Config+0x15c>)
 800ec02:	4313      	orrs	r3, r2
 800ec04:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800ec06:	4b27      	ldr	r3, [pc, #156]	@ (800eca4 <RCCEx_PLL2_Config+0x15c>)
 800ec08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ec0a:	4a26      	ldr	r2, [pc, #152]	@ (800eca4 <RCCEx_PLL2_Config+0x15c>)
 800ec0c:	f023 0310 	bic.w	r3, r3, #16
 800ec10:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800ec12:	4b24      	ldr	r3, [pc, #144]	@ (800eca4 <RCCEx_PLL2_Config+0x15c>)
 800ec14:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ec16:	4b24      	ldr	r3, [pc, #144]	@ (800eca8 <RCCEx_PLL2_Config+0x160>)
 800ec18:	4013      	ands	r3, r2
 800ec1a:	687a      	ldr	r2, [r7, #4]
 800ec1c:	69d2      	ldr	r2, [r2, #28]
 800ec1e:	00d2      	lsls	r2, r2, #3
 800ec20:	4920      	ldr	r1, [pc, #128]	@ (800eca4 <RCCEx_PLL2_Config+0x15c>)
 800ec22:	4313      	orrs	r3, r2
 800ec24:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800ec26:	4b1f      	ldr	r3, [pc, #124]	@ (800eca4 <RCCEx_PLL2_Config+0x15c>)
 800ec28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ec2a:	4a1e      	ldr	r2, [pc, #120]	@ (800eca4 <RCCEx_PLL2_Config+0x15c>)
 800ec2c:	f043 0310 	orr.w	r3, r3, #16
 800ec30:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800ec32:	683b      	ldr	r3, [r7, #0]
 800ec34:	2b00      	cmp	r3, #0
 800ec36:	d106      	bne.n	800ec46 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800ec38:	4b1a      	ldr	r3, [pc, #104]	@ (800eca4 <RCCEx_PLL2_Config+0x15c>)
 800ec3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ec3c:	4a19      	ldr	r2, [pc, #100]	@ (800eca4 <RCCEx_PLL2_Config+0x15c>)
 800ec3e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ec42:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800ec44:	e00f      	b.n	800ec66 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800ec46:	683b      	ldr	r3, [r7, #0]
 800ec48:	2b01      	cmp	r3, #1
 800ec4a:	d106      	bne.n	800ec5a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800ec4c:	4b15      	ldr	r3, [pc, #84]	@ (800eca4 <RCCEx_PLL2_Config+0x15c>)
 800ec4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ec50:	4a14      	ldr	r2, [pc, #80]	@ (800eca4 <RCCEx_PLL2_Config+0x15c>)
 800ec52:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ec56:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800ec58:	e005      	b.n	800ec66 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800ec5a:	4b12      	ldr	r3, [pc, #72]	@ (800eca4 <RCCEx_PLL2_Config+0x15c>)
 800ec5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ec5e:	4a11      	ldr	r2, [pc, #68]	@ (800eca4 <RCCEx_PLL2_Config+0x15c>)
 800ec60:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800ec64:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800ec66:	4b0f      	ldr	r3, [pc, #60]	@ (800eca4 <RCCEx_PLL2_Config+0x15c>)
 800ec68:	681b      	ldr	r3, [r3, #0]
 800ec6a:	4a0e      	ldr	r2, [pc, #56]	@ (800eca4 <RCCEx_PLL2_Config+0x15c>)
 800ec6c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800ec70:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ec72:	f7f3 fc33 	bl	80024dc <HAL_GetTick>
 800ec76:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ec78:	e008      	b.n	800ec8c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800ec7a:	f7f3 fc2f 	bl	80024dc <HAL_GetTick>
 800ec7e:	4602      	mov	r2, r0
 800ec80:	68bb      	ldr	r3, [r7, #8]
 800ec82:	1ad3      	subs	r3, r2, r3
 800ec84:	2b02      	cmp	r3, #2
 800ec86:	d901      	bls.n	800ec8c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800ec88:	2303      	movs	r3, #3
 800ec8a:	e006      	b.n	800ec9a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ec8c:	4b05      	ldr	r3, [pc, #20]	@ (800eca4 <RCCEx_PLL2_Config+0x15c>)
 800ec8e:	681b      	ldr	r3, [r3, #0]
 800ec90:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ec94:	2b00      	cmp	r3, #0
 800ec96:	d0f0      	beq.n	800ec7a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800ec98:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec9a:	4618      	mov	r0, r3
 800ec9c:	3710      	adds	r7, #16
 800ec9e:	46bd      	mov	sp, r7
 800eca0:	bd80      	pop	{r7, pc}
 800eca2:	bf00      	nop
 800eca4:	58024400 	.word	0x58024400
 800eca8:	ffff0007 	.word	0xffff0007

0800ecac <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800ecac:	b580      	push	{r7, lr}
 800ecae:	b084      	sub	sp, #16
 800ecb0:	af00      	add	r7, sp, #0
 800ecb2:	6078      	str	r0, [r7, #4]
 800ecb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ecb6:	2300      	movs	r3, #0
 800ecb8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ecba:	4b53      	ldr	r3, [pc, #332]	@ (800ee08 <RCCEx_PLL3_Config+0x15c>)
 800ecbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ecbe:	f003 0303 	and.w	r3, r3, #3
 800ecc2:	2b03      	cmp	r3, #3
 800ecc4:	d101      	bne.n	800ecca <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800ecc6:	2301      	movs	r3, #1
 800ecc8:	e099      	b.n	800edfe <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800ecca:	4b4f      	ldr	r3, [pc, #316]	@ (800ee08 <RCCEx_PLL3_Config+0x15c>)
 800eccc:	681b      	ldr	r3, [r3, #0]
 800ecce:	4a4e      	ldr	r2, [pc, #312]	@ (800ee08 <RCCEx_PLL3_Config+0x15c>)
 800ecd0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ecd4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ecd6:	f7f3 fc01 	bl	80024dc <HAL_GetTick>
 800ecda:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ecdc:	e008      	b.n	800ecf0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800ecde:	f7f3 fbfd 	bl	80024dc <HAL_GetTick>
 800ece2:	4602      	mov	r2, r0
 800ece4:	68bb      	ldr	r3, [r7, #8]
 800ece6:	1ad3      	subs	r3, r2, r3
 800ece8:	2b02      	cmp	r3, #2
 800ecea:	d901      	bls.n	800ecf0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800ecec:	2303      	movs	r3, #3
 800ecee:	e086      	b.n	800edfe <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ecf0:	4b45      	ldr	r3, [pc, #276]	@ (800ee08 <RCCEx_PLL3_Config+0x15c>)
 800ecf2:	681b      	ldr	r3, [r3, #0]
 800ecf4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d1f0      	bne.n	800ecde <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800ecfc:	4b42      	ldr	r3, [pc, #264]	@ (800ee08 <RCCEx_PLL3_Config+0x15c>)
 800ecfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ed00:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	681b      	ldr	r3, [r3, #0]
 800ed08:	051b      	lsls	r3, r3, #20
 800ed0a:	493f      	ldr	r1, [pc, #252]	@ (800ee08 <RCCEx_PLL3_Config+0x15c>)
 800ed0c:	4313      	orrs	r3, r2
 800ed0e:	628b      	str	r3, [r1, #40]	@ 0x28
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	685b      	ldr	r3, [r3, #4]
 800ed14:	3b01      	subs	r3, #1
 800ed16:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	689b      	ldr	r3, [r3, #8]
 800ed1e:	3b01      	subs	r3, #1
 800ed20:	025b      	lsls	r3, r3, #9
 800ed22:	b29b      	uxth	r3, r3
 800ed24:	431a      	orrs	r2, r3
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	68db      	ldr	r3, [r3, #12]
 800ed2a:	3b01      	subs	r3, #1
 800ed2c:	041b      	lsls	r3, r3, #16
 800ed2e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800ed32:	431a      	orrs	r2, r3
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	691b      	ldr	r3, [r3, #16]
 800ed38:	3b01      	subs	r3, #1
 800ed3a:	061b      	lsls	r3, r3, #24
 800ed3c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800ed40:	4931      	ldr	r1, [pc, #196]	@ (800ee08 <RCCEx_PLL3_Config+0x15c>)
 800ed42:	4313      	orrs	r3, r2
 800ed44:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800ed46:	4b30      	ldr	r3, [pc, #192]	@ (800ee08 <RCCEx_PLL3_Config+0x15c>)
 800ed48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed4a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	695b      	ldr	r3, [r3, #20]
 800ed52:	492d      	ldr	r1, [pc, #180]	@ (800ee08 <RCCEx_PLL3_Config+0x15c>)
 800ed54:	4313      	orrs	r3, r2
 800ed56:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800ed58:	4b2b      	ldr	r3, [pc, #172]	@ (800ee08 <RCCEx_PLL3_Config+0x15c>)
 800ed5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed5c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	699b      	ldr	r3, [r3, #24]
 800ed64:	4928      	ldr	r1, [pc, #160]	@ (800ee08 <RCCEx_PLL3_Config+0x15c>)
 800ed66:	4313      	orrs	r3, r2
 800ed68:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800ed6a:	4b27      	ldr	r3, [pc, #156]	@ (800ee08 <RCCEx_PLL3_Config+0x15c>)
 800ed6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed6e:	4a26      	ldr	r2, [pc, #152]	@ (800ee08 <RCCEx_PLL3_Config+0x15c>)
 800ed70:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ed74:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800ed76:	4b24      	ldr	r3, [pc, #144]	@ (800ee08 <RCCEx_PLL3_Config+0x15c>)
 800ed78:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ed7a:	4b24      	ldr	r3, [pc, #144]	@ (800ee0c <RCCEx_PLL3_Config+0x160>)
 800ed7c:	4013      	ands	r3, r2
 800ed7e:	687a      	ldr	r2, [r7, #4]
 800ed80:	69d2      	ldr	r2, [r2, #28]
 800ed82:	00d2      	lsls	r2, r2, #3
 800ed84:	4920      	ldr	r1, [pc, #128]	@ (800ee08 <RCCEx_PLL3_Config+0x15c>)
 800ed86:	4313      	orrs	r3, r2
 800ed88:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800ed8a:	4b1f      	ldr	r3, [pc, #124]	@ (800ee08 <RCCEx_PLL3_Config+0x15c>)
 800ed8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed8e:	4a1e      	ldr	r2, [pc, #120]	@ (800ee08 <RCCEx_PLL3_Config+0x15c>)
 800ed90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ed94:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800ed96:	683b      	ldr	r3, [r7, #0]
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	d106      	bne.n	800edaa <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800ed9c:	4b1a      	ldr	r3, [pc, #104]	@ (800ee08 <RCCEx_PLL3_Config+0x15c>)
 800ed9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eda0:	4a19      	ldr	r2, [pc, #100]	@ (800ee08 <RCCEx_PLL3_Config+0x15c>)
 800eda2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800eda6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800eda8:	e00f      	b.n	800edca <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800edaa:	683b      	ldr	r3, [r7, #0]
 800edac:	2b01      	cmp	r3, #1
 800edae:	d106      	bne.n	800edbe <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800edb0:	4b15      	ldr	r3, [pc, #84]	@ (800ee08 <RCCEx_PLL3_Config+0x15c>)
 800edb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800edb4:	4a14      	ldr	r2, [pc, #80]	@ (800ee08 <RCCEx_PLL3_Config+0x15c>)
 800edb6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800edba:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800edbc:	e005      	b.n	800edca <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800edbe:	4b12      	ldr	r3, [pc, #72]	@ (800ee08 <RCCEx_PLL3_Config+0x15c>)
 800edc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800edc2:	4a11      	ldr	r2, [pc, #68]	@ (800ee08 <RCCEx_PLL3_Config+0x15c>)
 800edc4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800edc8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800edca:	4b0f      	ldr	r3, [pc, #60]	@ (800ee08 <RCCEx_PLL3_Config+0x15c>)
 800edcc:	681b      	ldr	r3, [r3, #0]
 800edce:	4a0e      	ldr	r2, [pc, #56]	@ (800ee08 <RCCEx_PLL3_Config+0x15c>)
 800edd0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800edd4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800edd6:	f7f3 fb81 	bl	80024dc <HAL_GetTick>
 800edda:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800eddc:	e008      	b.n	800edf0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800edde:	f7f3 fb7d 	bl	80024dc <HAL_GetTick>
 800ede2:	4602      	mov	r2, r0
 800ede4:	68bb      	ldr	r3, [r7, #8]
 800ede6:	1ad3      	subs	r3, r2, r3
 800ede8:	2b02      	cmp	r3, #2
 800edea:	d901      	bls.n	800edf0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800edec:	2303      	movs	r3, #3
 800edee:	e006      	b.n	800edfe <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800edf0:	4b05      	ldr	r3, [pc, #20]	@ (800ee08 <RCCEx_PLL3_Config+0x15c>)
 800edf2:	681b      	ldr	r3, [r3, #0]
 800edf4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800edf8:	2b00      	cmp	r3, #0
 800edfa:	d0f0      	beq.n	800edde <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800edfc:	7bfb      	ldrb	r3, [r7, #15]
}
 800edfe:	4618      	mov	r0, r3
 800ee00:	3710      	adds	r7, #16
 800ee02:	46bd      	mov	sp, r7
 800ee04:	bd80      	pop	{r7, pc}
 800ee06:	bf00      	nop
 800ee08:	58024400 	.word	0x58024400
 800ee0c:	ffff0007 	.word	0xffff0007

0800ee10 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ee10:	b580      	push	{r7, lr}
 800ee12:	b084      	sub	sp, #16
 800ee14:	af00      	add	r7, sp, #0
 800ee16:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	2b00      	cmp	r3, #0
 800ee1c:	d101      	bne.n	800ee22 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ee1e:	2301      	movs	r3, #1
 800ee20:	e10f      	b.n	800f042 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	2200      	movs	r2, #0
 800ee26:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	681b      	ldr	r3, [r3, #0]
 800ee2c:	4a87      	ldr	r2, [pc, #540]	@ (800f04c <HAL_SPI_Init+0x23c>)
 800ee2e:	4293      	cmp	r3, r2
 800ee30:	d00f      	beq.n	800ee52 <HAL_SPI_Init+0x42>
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	681b      	ldr	r3, [r3, #0]
 800ee36:	4a86      	ldr	r2, [pc, #536]	@ (800f050 <HAL_SPI_Init+0x240>)
 800ee38:	4293      	cmp	r3, r2
 800ee3a:	d00a      	beq.n	800ee52 <HAL_SPI_Init+0x42>
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	681b      	ldr	r3, [r3, #0]
 800ee40:	4a84      	ldr	r2, [pc, #528]	@ (800f054 <HAL_SPI_Init+0x244>)
 800ee42:	4293      	cmp	r3, r2
 800ee44:	d005      	beq.n	800ee52 <HAL_SPI_Init+0x42>
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	68db      	ldr	r3, [r3, #12]
 800ee4a:	2b0f      	cmp	r3, #15
 800ee4c:	d901      	bls.n	800ee52 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800ee4e:	2301      	movs	r3, #1
 800ee50:	e0f7      	b.n	800f042 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800ee52:	6878      	ldr	r0, [r7, #4]
 800ee54:	f000 f900 	bl	800f058 <SPI_GetPacketSize>
 800ee58:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	681b      	ldr	r3, [r3, #0]
 800ee5e:	4a7b      	ldr	r2, [pc, #492]	@ (800f04c <HAL_SPI_Init+0x23c>)
 800ee60:	4293      	cmp	r3, r2
 800ee62:	d00c      	beq.n	800ee7e <HAL_SPI_Init+0x6e>
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	681b      	ldr	r3, [r3, #0]
 800ee68:	4a79      	ldr	r2, [pc, #484]	@ (800f050 <HAL_SPI_Init+0x240>)
 800ee6a:	4293      	cmp	r3, r2
 800ee6c:	d007      	beq.n	800ee7e <HAL_SPI_Init+0x6e>
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	681b      	ldr	r3, [r3, #0]
 800ee72:	4a78      	ldr	r2, [pc, #480]	@ (800f054 <HAL_SPI_Init+0x244>)
 800ee74:	4293      	cmp	r3, r2
 800ee76:	d002      	beq.n	800ee7e <HAL_SPI_Init+0x6e>
 800ee78:	68fb      	ldr	r3, [r7, #12]
 800ee7a:	2b08      	cmp	r3, #8
 800ee7c:	d811      	bhi.n	800eea2 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800ee82:	4a72      	ldr	r2, [pc, #456]	@ (800f04c <HAL_SPI_Init+0x23c>)
 800ee84:	4293      	cmp	r3, r2
 800ee86:	d009      	beq.n	800ee9c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	681b      	ldr	r3, [r3, #0]
 800ee8c:	4a70      	ldr	r2, [pc, #448]	@ (800f050 <HAL_SPI_Init+0x240>)
 800ee8e:	4293      	cmp	r3, r2
 800ee90:	d004      	beq.n	800ee9c <HAL_SPI_Init+0x8c>
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	681b      	ldr	r3, [r3, #0]
 800ee96:	4a6f      	ldr	r2, [pc, #444]	@ (800f054 <HAL_SPI_Init+0x244>)
 800ee98:	4293      	cmp	r3, r2
 800ee9a:	d104      	bne.n	800eea6 <HAL_SPI_Init+0x96>
 800ee9c:	68fb      	ldr	r3, [r7, #12]
 800ee9e:	2b10      	cmp	r3, #16
 800eea0:	d901      	bls.n	800eea6 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800eea2:	2301      	movs	r3, #1
 800eea4:	e0cd      	b.n	800f042 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800eeac:	b2db      	uxtb	r3, r3
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	d106      	bne.n	800eec0 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	2200      	movs	r2, #0
 800eeb6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800eeba:	6878      	ldr	r0, [r7, #4]
 800eebc:	f7f2 fe8a 	bl	8001bd4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	2202      	movs	r2, #2
 800eec4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	681b      	ldr	r3, [r3, #0]
 800eecc:	681a      	ldr	r2, [r3, #0]
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	681b      	ldr	r3, [r3, #0]
 800eed2:	f022 0201 	bic.w	r2, r2, #1
 800eed6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	681b      	ldr	r3, [r3, #0]
 800eedc:	689b      	ldr	r3, [r3, #8]
 800eede:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800eee2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	699b      	ldr	r3, [r3, #24]
 800eee8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800eeec:	d119      	bne.n	800ef22 <HAL_SPI_Init+0x112>
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	685b      	ldr	r3, [r3, #4]
 800eef2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800eef6:	d103      	bne.n	800ef00 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800eefc:	2b00      	cmp	r3, #0
 800eefe:	d008      	beq.n	800ef12 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800ef04:	2b00      	cmp	r3, #0
 800ef06:	d10c      	bne.n	800ef22 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800ef0c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ef10:	d107      	bne.n	800ef22 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	681b      	ldr	r3, [r3, #0]
 800ef16:	681a      	ldr	r2, [r3, #0]
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	681b      	ldr	r3, [r3, #0]
 800ef1c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800ef20:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	685b      	ldr	r3, [r3, #4]
 800ef26:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	d00f      	beq.n	800ef4e <HAL_SPI_Init+0x13e>
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	68db      	ldr	r3, [r3, #12]
 800ef32:	2b06      	cmp	r3, #6
 800ef34:	d90b      	bls.n	800ef4e <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	681b      	ldr	r3, [r3, #0]
 800ef3a:	681b      	ldr	r3, [r3, #0]
 800ef3c:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	681b      	ldr	r3, [r3, #0]
 800ef48:	430a      	orrs	r2, r1
 800ef4a:	601a      	str	r2, [r3, #0]
 800ef4c:	e007      	b.n	800ef5e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	681b      	ldr	r3, [r3, #0]
 800ef52:	681a      	ldr	r2, [r3, #0]
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	681b      	ldr	r3, [r3, #0]
 800ef58:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800ef5c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	69da      	ldr	r2, [r3, #28]
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ef66:	431a      	orrs	r2, r3
 800ef68:	68bb      	ldr	r3, [r7, #8]
 800ef6a:	431a      	orrs	r2, r3
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ef70:	ea42 0103 	orr.w	r1, r2, r3
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	68da      	ldr	r2, [r3, #12]
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	681b      	ldr	r3, [r3, #0]
 800ef7c:	430a      	orrs	r2, r1
 800ef7e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ef88:	431a      	orrs	r2, r3
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ef8e:	431a      	orrs	r2, r3
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	699b      	ldr	r3, [r3, #24]
 800ef94:	431a      	orrs	r2, r3
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	691b      	ldr	r3, [r3, #16]
 800ef9a:	431a      	orrs	r2, r3
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	695b      	ldr	r3, [r3, #20]
 800efa0:	431a      	orrs	r2, r3
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	6a1b      	ldr	r3, [r3, #32]
 800efa6:	431a      	orrs	r2, r3
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	685b      	ldr	r3, [r3, #4]
 800efac:	431a      	orrs	r2, r3
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800efb2:	431a      	orrs	r2, r3
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	689b      	ldr	r3, [r3, #8]
 800efb8:	431a      	orrs	r2, r3
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800efbe:	ea42 0103 	orr.w	r1, r2, r3
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	681b      	ldr	r3, [r3, #0]
 800efca:	430a      	orrs	r2, r1
 800efcc:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	685b      	ldr	r3, [r3, #4]
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	d113      	bne.n	800effe <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	681b      	ldr	r3, [r3, #0]
 800efda:	689b      	ldr	r3, [r3, #8]
 800efdc:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	681b      	ldr	r3, [r3, #0]
 800efe4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800efe8:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	681b      	ldr	r3, [r3, #0]
 800efee:	689b      	ldr	r3, [r3, #8]
 800eff0:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	681b      	ldr	r3, [r3, #0]
 800eff8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800effc:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	681b      	ldr	r3, [r3, #0]
 800f002:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	681b      	ldr	r3, [r3, #0]
 800f008:	f022 0201 	bic.w	r2, r2, #1
 800f00c:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	685b      	ldr	r3, [r3, #4]
 800f012:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800f016:	2b00      	cmp	r3, #0
 800f018:	d00a      	beq.n	800f030 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	681b      	ldr	r3, [r3, #0]
 800f01e:	68db      	ldr	r3, [r3, #12]
 800f020:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	681b      	ldr	r3, [r3, #0]
 800f02c:	430a      	orrs	r2, r1
 800f02e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	2200      	movs	r2, #0
 800f034:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	2201      	movs	r2, #1
 800f03c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800f040:	2300      	movs	r3, #0
}
 800f042:	4618      	mov	r0, r3
 800f044:	3710      	adds	r7, #16
 800f046:	46bd      	mov	sp, r7
 800f048:	bd80      	pop	{r7, pc}
 800f04a:	bf00      	nop
 800f04c:	40013000 	.word	0x40013000
 800f050:	40003800 	.word	0x40003800
 800f054:	40003c00 	.word	0x40003c00

0800f058 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800f058:	b480      	push	{r7}
 800f05a:	b085      	sub	sp, #20
 800f05c:	af00      	add	r7, sp, #0
 800f05e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f064:	095b      	lsrs	r3, r3, #5
 800f066:	3301      	adds	r3, #1
 800f068:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	68db      	ldr	r3, [r3, #12]
 800f06e:	3301      	adds	r3, #1
 800f070:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800f072:	68bb      	ldr	r3, [r7, #8]
 800f074:	3307      	adds	r3, #7
 800f076:	08db      	lsrs	r3, r3, #3
 800f078:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800f07a:	68bb      	ldr	r3, [r7, #8]
 800f07c:	68fa      	ldr	r2, [r7, #12]
 800f07e:	fb02 f303 	mul.w	r3, r2, r3
}
 800f082:	4618      	mov	r0, r3
 800f084:	3714      	adds	r7, #20
 800f086:	46bd      	mov	sp, r7
 800f088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f08c:	4770      	bx	lr

0800f08e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800f08e:	b580      	push	{r7, lr}
 800f090:	b082      	sub	sp, #8
 800f092:	af00      	add	r7, sp, #0
 800f094:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	2b00      	cmp	r3, #0
 800f09a:	d101      	bne.n	800f0a0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800f09c:	2301      	movs	r3, #1
 800f09e:	e049      	b.n	800f134 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f0a6:	b2db      	uxtb	r3, r3
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	d106      	bne.n	800f0ba <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	2200      	movs	r2, #0
 800f0b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800f0b4:	6878      	ldr	r0, [r7, #4]
 800f0b6:	f7f2 fe81 	bl	8001dbc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	2202      	movs	r2, #2
 800f0be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	681a      	ldr	r2, [r3, #0]
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	3304      	adds	r3, #4
 800f0ca:	4619      	mov	r1, r3
 800f0cc:	4610      	mov	r0, r2
 800f0ce:	f000 fbe9 	bl	800f8a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	2201      	movs	r2, #1
 800f0d6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	2201      	movs	r2, #1
 800f0de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	2201      	movs	r2, #1
 800f0e6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	2201      	movs	r2, #1
 800f0ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	2201      	movs	r2, #1
 800f0f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	2201      	movs	r2, #1
 800f0fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	2201      	movs	r2, #1
 800f106:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	2201      	movs	r2, #1
 800f10e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	2201      	movs	r2, #1
 800f116:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	2201      	movs	r2, #1
 800f11e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	2201      	movs	r2, #1
 800f126:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	2201      	movs	r2, #1
 800f12e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800f132:	2300      	movs	r3, #0
}
 800f134:	4618      	mov	r0, r3
 800f136:	3708      	adds	r7, #8
 800f138:	46bd      	mov	sp, r7
 800f13a:	bd80      	pop	{r7, pc}

0800f13c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800f13c:	b580      	push	{r7, lr}
 800f13e:	b082      	sub	sp, #8
 800f140:	af00      	add	r7, sp, #0
 800f142:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	2b00      	cmp	r3, #0
 800f148:	d101      	bne.n	800f14e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800f14a:	2301      	movs	r3, #1
 800f14c:	e049      	b.n	800f1e2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f154:	b2db      	uxtb	r3, r3
 800f156:	2b00      	cmp	r3, #0
 800f158:	d106      	bne.n	800f168 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	2200      	movs	r2, #0
 800f15e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800f162:	6878      	ldr	r0, [r7, #4]
 800f164:	f7f2 fdc4 	bl	8001cf0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	2202      	movs	r2, #2
 800f16c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	681a      	ldr	r2, [r3, #0]
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	3304      	adds	r3, #4
 800f178:	4619      	mov	r1, r3
 800f17a:	4610      	mov	r0, r2
 800f17c:	f000 fb92 	bl	800f8a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	2201      	movs	r2, #1
 800f184:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	2201      	movs	r2, #1
 800f18c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	2201      	movs	r2, #1
 800f194:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	2201      	movs	r2, #1
 800f19c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	2201      	movs	r2, #1
 800f1a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	2201      	movs	r2, #1
 800f1ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	2201      	movs	r2, #1
 800f1b4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	2201      	movs	r2, #1
 800f1bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	2201      	movs	r2, #1
 800f1c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	2201      	movs	r2, #1
 800f1cc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	2201      	movs	r2, #1
 800f1d4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	2201      	movs	r2, #1
 800f1dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800f1e0:	2300      	movs	r3, #0
}
 800f1e2:	4618      	mov	r0, r3
 800f1e4:	3708      	adds	r7, #8
 800f1e6:	46bd      	mov	sp, r7
 800f1e8:	bd80      	pop	{r7, pc}
	...

0800f1ec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f1ec:	b580      	push	{r7, lr}
 800f1ee:	b084      	sub	sp, #16
 800f1f0:	af00      	add	r7, sp, #0
 800f1f2:	6078      	str	r0, [r7, #4]
 800f1f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800f1f6:	683b      	ldr	r3, [r7, #0]
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	d109      	bne.n	800f210 <HAL_TIM_PWM_Start+0x24>
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800f202:	b2db      	uxtb	r3, r3
 800f204:	2b01      	cmp	r3, #1
 800f206:	bf14      	ite	ne
 800f208:	2301      	movne	r3, #1
 800f20a:	2300      	moveq	r3, #0
 800f20c:	b2db      	uxtb	r3, r3
 800f20e:	e03c      	b.n	800f28a <HAL_TIM_PWM_Start+0x9e>
 800f210:	683b      	ldr	r3, [r7, #0]
 800f212:	2b04      	cmp	r3, #4
 800f214:	d109      	bne.n	800f22a <HAL_TIM_PWM_Start+0x3e>
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800f21c:	b2db      	uxtb	r3, r3
 800f21e:	2b01      	cmp	r3, #1
 800f220:	bf14      	ite	ne
 800f222:	2301      	movne	r3, #1
 800f224:	2300      	moveq	r3, #0
 800f226:	b2db      	uxtb	r3, r3
 800f228:	e02f      	b.n	800f28a <HAL_TIM_PWM_Start+0x9e>
 800f22a:	683b      	ldr	r3, [r7, #0]
 800f22c:	2b08      	cmp	r3, #8
 800f22e:	d109      	bne.n	800f244 <HAL_TIM_PWM_Start+0x58>
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f236:	b2db      	uxtb	r3, r3
 800f238:	2b01      	cmp	r3, #1
 800f23a:	bf14      	ite	ne
 800f23c:	2301      	movne	r3, #1
 800f23e:	2300      	moveq	r3, #0
 800f240:	b2db      	uxtb	r3, r3
 800f242:	e022      	b.n	800f28a <HAL_TIM_PWM_Start+0x9e>
 800f244:	683b      	ldr	r3, [r7, #0]
 800f246:	2b0c      	cmp	r3, #12
 800f248:	d109      	bne.n	800f25e <HAL_TIM_PWM_Start+0x72>
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f250:	b2db      	uxtb	r3, r3
 800f252:	2b01      	cmp	r3, #1
 800f254:	bf14      	ite	ne
 800f256:	2301      	movne	r3, #1
 800f258:	2300      	moveq	r3, #0
 800f25a:	b2db      	uxtb	r3, r3
 800f25c:	e015      	b.n	800f28a <HAL_TIM_PWM_Start+0x9e>
 800f25e:	683b      	ldr	r3, [r7, #0]
 800f260:	2b10      	cmp	r3, #16
 800f262:	d109      	bne.n	800f278 <HAL_TIM_PWM_Start+0x8c>
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800f26a:	b2db      	uxtb	r3, r3
 800f26c:	2b01      	cmp	r3, #1
 800f26e:	bf14      	ite	ne
 800f270:	2301      	movne	r3, #1
 800f272:	2300      	moveq	r3, #0
 800f274:	b2db      	uxtb	r3, r3
 800f276:	e008      	b.n	800f28a <HAL_TIM_PWM_Start+0x9e>
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800f27e:	b2db      	uxtb	r3, r3
 800f280:	2b01      	cmp	r3, #1
 800f282:	bf14      	ite	ne
 800f284:	2301      	movne	r3, #1
 800f286:	2300      	moveq	r3, #0
 800f288:	b2db      	uxtb	r3, r3
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	d001      	beq.n	800f292 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800f28e:	2301      	movs	r3, #1
 800f290:	e0a1      	b.n	800f3d6 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800f292:	683b      	ldr	r3, [r7, #0]
 800f294:	2b00      	cmp	r3, #0
 800f296:	d104      	bne.n	800f2a2 <HAL_TIM_PWM_Start+0xb6>
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	2202      	movs	r2, #2
 800f29c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800f2a0:	e023      	b.n	800f2ea <HAL_TIM_PWM_Start+0xfe>
 800f2a2:	683b      	ldr	r3, [r7, #0]
 800f2a4:	2b04      	cmp	r3, #4
 800f2a6:	d104      	bne.n	800f2b2 <HAL_TIM_PWM_Start+0xc6>
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	2202      	movs	r2, #2
 800f2ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800f2b0:	e01b      	b.n	800f2ea <HAL_TIM_PWM_Start+0xfe>
 800f2b2:	683b      	ldr	r3, [r7, #0]
 800f2b4:	2b08      	cmp	r3, #8
 800f2b6:	d104      	bne.n	800f2c2 <HAL_TIM_PWM_Start+0xd6>
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	2202      	movs	r2, #2
 800f2bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800f2c0:	e013      	b.n	800f2ea <HAL_TIM_PWM_Start+0xfe>
 800f2c2:	683b      	ldr	r3, [r7, #0]
 800f2c4:	2b0c      	cmp	r3, #12
 800f2c6:	d104      	bne.n	800f2d2 <HAL_TIM_PWM_Start+0xe6>
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	2202      	movs	r2, #2
 800f2cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800f2d0:	e00b      	b.n	800f2ea <HAL_TIM_PWM_Start+0xfe>
 800f2d2:	683b      	ldr	r3, [r7, #0]
 800f2d4:	2b10      	cmp	r3, #16
 800f2d6:	d104      	bne.n	800f2e2 <HAL_TIM_PWM_Start+0xf6>
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	2202      	movs	r2, #2
 800f2dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800f2e0:	e003      	b.n	800f2ea <HAL_TIM_PWM_Start+0xfe>
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	2202      	movs	r2, #2
 800f2e6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	681b      	ldr	r3, [r3, #0]
 800f2ee:	2201      	movs	r2, #1
 800f2f0:	6839      	ldr	r1, [r7, #0]
 800f2f2:	4618      	mov	r0, r3
 800f2f4:	f000 fe4c 	bl	800ff90 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	681b      	ldr	r3, [r3, #0]
 800f2fc:	4a38      	ldr	r2, [pc, #224]	@ (800f3e0 <HAL_TIM_PWM_Start+0x1f4>)
 800f2fe:	4293      	cmp	r3, r2
 800f300:	d013      	beq.n	800f32a <HAL_TIM_PWM_Start+0x13e>
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	681b      	ldr	r3, [r3, #0]
 800f306:	4a37      	ldr	r2, [pc, #220]	@ (800f3e4 <HAL_TIM_PWM_Start+0x1f8>)
 800f308:	4293      	cmp	r3, r2
 800f30a:	d00e      	beq.n	800f32a <HAL_TIM_PWM_Start+0x13e>
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	681b      	ldr	r3, [r3, #0]
 800f310:	4a35      	ldr	r2, [pc, #212]	@ (800f3e8 <HAL_TIM_PWM_Start+0x1fc>)
 800f312:	4293      	cmp	r3, r2
 800f314:	d009      	beq.n	800f32a <HAL_TIM_PWM_Start+0x13e>
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	681b      	ldr	r3, [r3, #0]
 800f31a:	4a34      	ldr	r2, [pc, #208]	@ (800f3ec <HAL_TIM_PWM_Start+0x200>)
 800f31c:	4293      	cmp	r3, r2
 800f31e:	d004      	beq.n	800f32a <HAL_TIM_PWM_Start+0x13e>
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	681b      	ldr	r3, [r3, #0]
 800f324:	4a32      	ldr	r2, [pc, #200]	@ (800f3f0 <HAL_TIM_PWM_Start+0x204>)
 800f326:	4293      	cmp	r3, r2
 800f328:	d101      	bne.n	800f32e <HAL_TIM_PWM_Start+0x142>
 800f32a:	2301      	movs	r3, #1
 800f32c:	e000      	b.n	800f330 <HAL_TIM_PWM_Start+0x144>
 800f32e:	2300      	movs	r3, #0
 800f330:	2b00      	cmp	r3, #0
 800f332:	d007      	beq.n	800f344 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	681b      	ldr	r3, [r3, #0]
 800f338:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	681b      	ldr	r3, [r3, #0]
 800f33e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800f342:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	681b      	ldr	r3, [r3, #0]
 800f348:	4a25      	ldr	r2, [pc, #148]	@ (800f3e0 <HAL_TIM_PWM_Start+0x1f4>)
 800f34a:	4293      	cmp	r3, r2
 800f34c:	d022      	beq.n	800f394 <HAL_TIM_PWM_Start+0x1a8>
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	681b      	ldr	r3, [r3, #0]
 800f352:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f356:	d01d      	beq.n	800f394 <HAL_TIM_PWM_Start+0x1a8>
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	681b      	ldr	r3, [r3, #0]
 800f35c:	4a25      	ldr	r2, [pc, #148]	@ (800f3f4 <HAL_TIM_PWM_Start+0x208>)
 800f35e:	4293      	cmp	r3, r2
 800f360:	d018      	beq.n	800f394 <HAL_TIM_PWM_Start+0x1a8>
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	681b      	ldr	r3, [r3, #0]
 800f366:	4a24      	ldr	r2, [pc, #144]	@ (800f3f8 <HAL_TIM_PWM_Start+0x20c>)
 800f368:	4293      	cmp	r3, r2
 800f36a:	d013      	beq.n	800f394 <HAL_TIM_PWM_Start+0x1a8>
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	681b      	ldr	r3, [r3, #0]
 800f370:	4a22      	ldr	r2, [pc, #136]	@ (800f3fc <HAL_TIM_PWM_Start+0x210>)
 800f372:	4293      	cmp	r3, r2
 800f374:	d00e      	beq.n	800f394 <HAL_TIM_PWM_Start+0x1a8>
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	681b      	ldr	r3, [r3, #0]
 800f37a:	4a1a      	ldr	r2, [pc, #104]	@ (800f3e4 <HAL_TIM_PWM_Start+0x1f8>)
 800f37c:	4293      	cmp	r3, r2
 800f37e:	d009      	beq.n	800f394 <HAL_TIM_PWM_Start+0x1a8>
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	681b      	ldr	r3, [r3, #0]
 800f384:	4a1e      	ldr	r2, [pc, #120]	@ (800f400 <HAL_TIM_PWM_Start+0x214>)
 800f386:	4293      	cmp	r3, r2
 800f388:	d004      	beq.n	800f394 <HAL_TIM_PWM_Start+0x1a8>
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	681b      	ldr	r3, [r3, #0]
 800f38e:	4a16      	ldr	r2, [pc, #88]	@ (800f3e8 <HAL_TIM_PWM_Start+0x1fc>)
 800f390:	4293      	cmp	r3, r2
 800f392:	d115      	bne.n	800f3c0 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	681b      	ldr	r3, [r3, #0]
 800f398:	689a      	ldr	r2, [r3, #8]
 800f39a:	4b1a      	ldr	r3, [pc, #104]	@ (800f404 <HAL_TIM_PWM_Start+0x218>)
 800f39c:	4013      	ands	r3, r2
 800f39e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f3a0:	68fb      	ldr	r3, [r7, #12]
 800f3a2:	2b06      	cmp	r3, #6
 800f3a4:	d015      	beq.n	800f3d2 <HAL_TIM_PWM_Start+0x1e6>
 800f3a6:	68fb      	ldr	r3, [r7, #12]
 800f3a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f3ac:	d011      	beq.n	800f3d2 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	681b      	ldr	r3, [r3, #0]
 800f3b2:	681a      	ldr	r2, [r3, #0]
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	681b      	ldr	r3, [r3, #0]
 800f3b8:	f042 0201 	orr.w	r2, r2, #1
 800f3bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f3be:	e008      	b.n	800f3d2 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	681b      	ldr	r3, [r3, #0]
 800f3c4:	681a      	ldr	r2, [r3, #0]
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	681b      	ldr	r3, [r3, #0]
 800f3ca:	f042 0201 	orr.w	r2, r2, #1
 800f3ce:	601a      	str	r2, [r3, #0]
 800f3d0:	e000      	b.n	800f3d4 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f3d2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800f3d4:	2300      	movs	r3, #0
}
 800f3d6:	4618      	mov	r0, r3
 800f3d8:	3710      	adds	r7, #16
 800f3da:	46bd      	mov	sp, r7
 800f3dc:	bd80      	pop	{r7, pc}
 800f3de:	bf00      	nop
 800f3e0:	40010000 	.word	0x40010000
 800f3e4:	40010400 	.word	0x40010400
 800f3e8:	40014000 	.word	0x40014000
 800f3ec:	40014400 	.word	0x40014400
 800f3f0:	40014800 	.word	0x40014800
 800f3f4:	40000400 	.word	0x40000400
 800f3f8:	40000800 	.word	0x40000800
 800f3fc:	40000c00 	.word	0x40000c00
 800f400:	40001800 	.word	0x40001800
 800f404:	00010007 	.word	0x00010007

0800f408 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800f408:	b580      	push	{r7, lr}
 800f40a:	b084      	sub	sp, #16
 800f40c:	af00      	add	r7, sp, #0
 800f40e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	681b      	ldr	r3, [r3, #0]
 800f414:	68db      	ldr	r3, [r3, #12]
 800f416:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	681b      	ldr	r3, [r3, #0]
 800f41c:	691b      	ldr	r3, [r3, #16]
 800f41e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800f420:	68bb      	ldr	r3, [r7, #8]
 800f422:	f003 0302 	and.w	r3, r3, #2
 800f426:	2b00      	cmp	r3, #0
 800f428:	d020      	beq.n	800f46c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800f42a:	68fb      	ldr	r3, [r7, #12]
 800f42c:	f003 0302 	and.w	r3, r3, #2
 800f430:	2b00      	cmp	r3, #0
 800f432:	d01b      	beq.n	800f46c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	681b      	ldr	r3, [r3, #0]
 800f438:	f06f 0202 	mvn.w	r2, #2
 800f43c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	2201      	movs	r2, #1
 800f442:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	681b      	ldr	r3, [r3, #0]
 800f448:	699b      	ldr	r3, [r3, #24]
 800f44a:	f003 0303 	and.w	r3, r3, #3
 800f44e:	2b00      	cmp	r3, #0
 800f450:	d003      	beq.n	800f45a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800f452:	6878      	ldr	r0, [r7, #4]
 800f454:	f000 fa08 	bl	800f868 <HAL_TIM_IC_CaptureCallback>
 800f458:	e005      	b.n	800f466 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800f45a:	6878      	ldr	r0, [r7, #4]
 800f45c:	f000 f9fa 	bl	800f854 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f460:	6878      	ldr	r0, [r7, #4]
 800f462:	f000 fa0b 	bl	800f87c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	2200      	movs	r2, #0
 800f46a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800f46c:	68bb      	ldr	r3, [r7, #8]
 800f46e:	f003 0304 	and.w	r3, r3, #4
 800f472:	2b00      	cmp	r3, #0
 800f474:	d020      	beq.n	800f4b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800f476:	68fb      	ldr	r3, [r7, #12]
 800f478:	f003 0304 	and.w	r3, r3, #4
 800f47c:	2b00      	cmp	r3, #0
 800f47e:	d01b      	beq.n	800f4b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	681b      	ldr	r3, [r3, #0]
 800f484:	f06f 0204 	mvn.w	r2, #4
 800f488:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	2202      	movs	r2, #2
 800f48e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	681b      	ldr	r3, [r3, #0]
 800f494:	699b      	ldr	r3, [r3, #24]
 800f496:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800f49a:	2b00      	cmp	r3, #0
 800f49c:	d003      	beq.n	800f4a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f49e:	6878      	ldr	r0, [r7, #4]
 800f4a0:	f000 f9e2 	bl	800f868 <HAL_TIM_IC_CaptureCallback>
 800f4a4:	e005      	b.n	800f4b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f4a6:	6878      	ldr	r0, [r7, #4]
 800f4a8:	f000 f9d4 	bl	800f854 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f4ac:	6878      	ldr	r0, [r7, #4]
 800f4ae:	f000 f9e5 	bl	800f87c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	2200      	movs	r2, #0
 800f4b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800f4b8:	68bb      	ldr	r3, [r7, #8]
 800f4ba:	f003 0308 	and.w	r3, r3, #8
 800f4be:	2b00      	cmp	r3, #0
 800f4c0:	d020      	beq.n	800f504 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800f4c2:	68fb      	ldr	r3, [r7, #12]
 800f4c4:	f003 0308 	and.w	r3, r3, #8
 800f4c8:	2b00      	cmp	r3, #0
 800f4ca:	d01b      	beq.n	800f504 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	681b      	ldr	r3, [r3, #0]
 800f4d0:	f06f 0208 	mvn.w	r2, #8
 800f4d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	2204      	movs	r2, #4
 800f4da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	681b      	ldr	r3, [r3, #0]
 800f4e0:	69db      	ldr	r3, [r3, #28]
 800f4e2:	f003 0303 	and.w	r3, r3, #3
 800f4e6:	2b00      	cmp	r3, #0
 800f4e8:	d003      	beq.n	800f4f2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f4ea:	6878      	ldr	r0, [r7, #4]
 800f4ec:	f000 f9bc 	bl	800f868 <HAL_TIM_IC_CaptureCallback>
 800f4f0:	e005      	b.n	800f4fe <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f4f2:	6878      	ldr	r0, [r7, #4]
 800f4f4:	f000 f9ae 	bl	800f854 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f4f8:	6878      	ldr	r0, [r7, #4]
 800f4fa:	f000 f9bf 	bl	800f87c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	2200      	movs	r2, #0
 800f502:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800f504:	68bb      	ldr	r3, [r7, #8]
 800f506:	f003 0310 	and.w	r3, r3, #16
 800f50a:	2b00      	cmp	r3, #0
 800f50c:	d020      	beq.n	800f550 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800f50e:	68fb      	ldr	r3, [r7, #12]
 800f510:	f003 0310 	and.w	r3, r3, #16
 800f514:	2b00      	cmp	r3, #0
 800f516:	d01b      	beq.n	800f550 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	681b      	ldr	r3, [r3, #0]
 800f51c:	f06f 0210 	mvn.w	r2, #16
 800f520:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	2208      	movs	r2, #8
 800f526:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	681b      	ldr	r3, [r3, #0]
 800f52c:	69db      	ldr	r3, [r3, #28]
 800f52e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800f532:	2b00      	cmp	r3, #0
 800f534:	d003      	beq.n	800f53e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f536:	6878      	ldr	r0, [r7, #4]
 800f538:	f000 f996 	bl	800f868 <HAL_TIM_IC_CaptureCallback>
 800f53c:	e005      	b.n	800f54a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f53e:	6878      	ldr	r0, [r7, #4]
 800f540:	f000 f988 	bl	800f854 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f544:	6878      	ldr	r0, [r7, #4]
 800f546:	f000 f999 	bl	800f87c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	2200      	movs	r2, #0
 800f54e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800f550:	68bb      	ldr	r3, [r7, #8]
 800f552:	f003 0301 	and.w	r3, r3, #1
 800f556:	2b00      	cmp	r3, #0
 800f558:	d00c      	beq.n	800f574 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800f55a:	68fb      	ldr	r3, [r7, #12]
 800f55c:	f003 0301 	and.w	r3, r3, #1
 800f560:	2b00      	cmp	r3, #0
 800f562:	d007      	beq.n	800f574 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	681b      	ldr	r3, [r3, #0]
 800f568:	f06f 0201 	mvn.w	r2, #1
 800f56c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f56e:	6878      	ldr	r0, [r7, #4]
 800f570:	f000 f966 	bl	800f840 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800f574:	68bb      	ldr	r3, [r7, #8]
 800f576:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f57a:	2b00      	cmp	r3, #0
 800f57c:	d104      	bne.n	800f588 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800f57e:	68bb      	ldr	r3, [r7, #8]
 800f580:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800f584:	2b00      	cmp	r3, #0
 800f586:	d00c      	beq.n	800f5a2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800f588:	68fb      	ldr	r3, [r7, #12]
 800f58a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f58e:	2b00      	cmp	r3, #0
 800f590:	d007      	beq.n	800f5a2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	681b      	ldr	r3, [r3, #0]
 800f596:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800f59a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800f59c:	6878      	ldr	r0, [r7, #4]
 800f59e:	f000 fe33 	bl	8010208 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800f5a2:	68bb      	ldr	r3, [r7, #8]
 800f5a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	d00c      	beq.n	800f5c6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800f5ac:	68fb      	ldr	r3, [r7, #12]
 800f5ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f5b2:	2b00      	cmp	r3, #0
 800f5b4:	d007      	beq.n	800f5c6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	681b      	ldr	r3, [r3, #0]
 800f5ba:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800f5be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800f5c0:	6878      	ldr	r0, [r7, #4]
 800f5c2:	f000 fe2b 	bl	801021c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800f5c6:	68bb      	ldr	r3, [r7, #8]
 800f5c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f5cc:	2b00      	cmp	r3, #0
 800f5ce:	d00c      	beq.n	800f5ea <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800f5d0:	68fb      	ldr	r3, [r7, #12]
 800f5d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f5d6:	2b00      	cmp	r3, #0
 800f5d8:	d007      	beq.n	800f5ea <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	681b      	ldr	r3, [r3, #0]
 800f5de:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800f5e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800f5e4:	6878      	ldr	r0, [r7, #4]
 800f5e6:	f000 f953 	bl	800f890 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800f5ea:	68bb      	ldr	r3, [r7, #8]
 800f5ec:	f003 0320 	and.w	r3, r3, #32
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	d00c      	beq.n	800f60e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800f5f4:	68fb      	ldr	r3, [r7, #12]
 800f5f6:	f003 0320 	and.w	r3, r3, #32
 800f5fa:	2b00      	cmp	r3, #0
 800f5fc:	d007      	beq.n	800f60e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	681b      	ldr	r3, [r3, #0]
 800f602:	f06f 0220 	mvn.w	r2, #32
 800f606:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800f608:	6878      	ldr	r0, [r7, #4]
 800f60a:	f000 fdf3 	bl	80101f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f60e:	bf00      	nop
 800f610:	3710      	adds	r7, #16
 800f612:	46bd      	mov	sp, r7
 800f614:	bd80      	pop	{r7, pc}
	...

0800f618 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800f618:	b580      	push	{r7, lr}
 800f61a:	b086      	sub	sp, #24
 800f61c:	af00      	add	r7, sp, #0
 800f61e:	60f8      	str	r0, [r7, #12]
 800f620:	60b9      	str	r1, [r7, #8]
 800f622:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f624:	2300      	movs	r3, #0
 800f626:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800f628:	68fb      	ldr	r3, [r7, #12]
 800f62a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f62e:	2b01      	cmp	r3, #1
 800f630:	d101      	bne.n	800f636 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800f632:	2302      	movs	r3, #2
 800f634:	e0ff      	b.n	800f836 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800f636:	68fb      	ldr	r3, [r7, #12]
 800f638:	2201      	movs	r2, #1
 800f63a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	2b14      	cmp	r3, #20
 800f642:	f200 80f0 	bhi.w	800f826 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800f646:	a201      	add	r2, pc, #4	@ (adr r2, 800f64c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800f648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f64c:	0800f6a1 	.word	0x0800f6a1
 800f650:	0800f827 	.word	0x0800f827
 800f654:	0800f827 	.word	0x0800f827
 800f658:	0800f827 	.word	0x0800f827
 800f65c:	0800f6e1 	.word	0x0800f6e1
 800f660:	0800f827 	.word	0x0800f827
 800f664:	0800f827 	.word	0x0800f827
 800f668:	0800f827 	.word	0x0800f827
 800f66c:	0800f723 	.word	0x0800f723
 800f670:	0800f827 	.word	0x0800f827
 800f674:	0800f827 	.word	0x0800f827
 800f678:	0800f827 	.word	0x0800f827
 800f67c:	0800f763 	.word	0x0800f763
 800f680:	0800f827 	.word	0x0800f827
 800f684:	0800f827 	.word	0x0800f827
 800f688:	0800f827 	.word	0x0800f827
 800f68c:	0800f7a5 	.word	0x0800f7a5
 800f690:	0800f827 	.word	0x0800f827
 800f694:	0800f827 	.word	0x0800f827
 800f698:	0800f827 	.word	0x0800f827
 800f69c:	0800f7e5 	.word	0x0800f7e5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800f6a0:	68fb      	ldr	r3, [r7, #12]
 800f6a2:	681b      	ldr	r3, [r3, #0]
 800f6a4:	68b9      	ldr	r1, [r7, #8]
 800f6a6:	4618      	mov	r0, r3
 800f6a8:	f000 f99c 	bl	800f9e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800f6ac:	68fb      	ldr	r3, [r7, #12]
 800f6ae:	681b      	ldr	r3, [r3, #0]
 800f6b0:	699a      	ldr	r2, [r3, #24]
 800f6b2:	68fb      	ldr	r3, [r7, #12]
 800f6b4:	681b      	ldr	r3, [r3, #0]
 800f6b6:	f042 0208 	orr.w	r2, r2, #8
 800f6ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800f6bc:	68fb      	ldr	r3, [r7, #12]
 800f6be:	681b      	ldr	r3, [r3, #0]
 800f6c0:	699a      	ldr	r2, [r3, #24]
 800f6c2:	68fb      	ldr	r3, [r7, #12]
 800f6c4:	681b      	ldr	r3, [r3, #0]
 800f6c6:	f022 0204 	bic.w	r2, r2, #4
 800f6ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800f6cc:	68fb      	ldr	r3, [r7, #12]
 800f6ce:	681b      	ldr	r3, [r3, #0]
 800f6d0:	6999      	ldr	r1, [r3, #24]
 800f6d2:	68bb      	ldr	r3, [r7, #8]
 800f6d4:	691a      	ldr	r2, [r3, #16]
 800f6d6:	68fb      	ldr	r3, [r7, #12]
 800f6d8:	681b      	ldr	r3, [r3, #0]
 800f6da:	430a      	orrs	r2, r1
 800f6dc:	619a      	str	r2, [r3, #24]
      break;
 800f6de:	e0a5      	b.n	800f82c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800f6e0:	68fb      	ldr	r3, [r7, #12]
 800f6e2:	681b      	ldr	r3, [r3, #0]
 800f6e4:	68b9      	ldr	r1, [r7, #8]
 800f6e6:	4618      	mov	r0, r3
 800f6e8:	f000 fa0c 	bl	800fb04 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800f6ec:	68fb      	ldr	r3, [r7, #12]
 800f6ee:	681b      	ldr	r3, [r3, #0]
 800f6f0:	699a      	ldr	r2, [r3, #24]
 800f6f2:	68fb      	ldr	r3, [r7, #12]
 800f6f4:	681b      	ldr	r3, [r3, #0]
 800f6f6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800f6fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800f6fc:	68fb      	ldr	r3, [r7, #12]
 800f6fe:	681b      	ldr	r3, [r3, #0]
 800f700:	699a      	ldr	r2, [r3, #24]
 800f702:	68fb      	ldr	r3, [r7, #12]
 800f704:	681b      	ldr	r3, [r3, #0]
 800f706:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800f70a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800f70c:	68fb      	ldr	r3, [r7, #12]
 800f70e:	681b      	ldr	r3, [r3, #0]
 800f710:	6999      	ldr	r1, [r3, #24]
 800f712:	68bb      	ldr	r3, [r7, #8]
 800f714:	691b      	ldr	r3, [r3, #16]
 800f716:	021a      	lsls	r2, r3, #8
 800f718:	68fb      	ldr	r3, [r7, #12]
 800f71a:	681b      	ldr	r3, [r3, #0]
 800f71c:	430a      	orrs	r2, r1
 800f71e:	619a      	str	r2, [r3, #24]
      break;
 800f720:	e084      	b.n	800f82c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800f722:	68fb      	ldr	r3, [r7, #12]
 800f724:	681b      	ldr	r3, [r3, #0]
 800f726:	68b9      	ldr	r1, [r7, #8]
 800f728:	4618      	mov	r0, r3
 800f72a:	f000 fa75 	bl	800fc18 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800f72e:	68fb      	ldr	r3, [r7, #12]
 800f730:	681b      	ldr	r3, [r3, #0]
 800f732:	69da      	ldr	r2, [r3, #28]
 800f734:	68fb      	ldr	r3, [r7, #12]
 800f736:	681b      	ldr	r3, [r3, #0]
 800f738:	f042 0208 	orr.w	r2, r2, #8
 800f73c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800f73e:	68fb      	ldr	r3, [r7, #12]
 800f740:	681b      	ldr	r3, [r3, #0]
 800f742:	69da      	ldr	r2, [r3, #28]
 800f744:	68fb      	ldr	r3, [r7, #12]
 800f746:	681b      	ldr	r3, [r3, #0]
 800f748:	f022 0204 	bic.w	r2, r2, #4
 800f74c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800f74e:	68fb      	ldr	r3, [r7, #12]
 800f750:	681b      	ldr	r3, [r3, #0]
 800f752:	69d9      	ldr	r1, [r3, #28]
 800f754:	68bb      	ldr	r3, [r7, #8]
 800f756:	691a      	ldr	r2, [r3, #16]
 800f758:	68fb      	ldr	r3, [r7, #12]
 800f75a:	681b      	ldr	r3, [r3, #0]
 800f75c:	430a      	orrs	r2, r1
 800f75e:	61da      	str	r2, [r3, #28]
      break;
 800f760:	e064      	b.n	800f82c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800f762:	68fb      	ldr	r3, [r7, #12]
 800f764:	681b      	ldr	r3, [r3, #0]
 800f766:	68b9      	ldr	r1, [r7, #8]
 800f768:	4618      	mov	r0, r3
 800f76a:	f000 fadd 	bl	800fd28 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800f76e:	68fb      	ldr	r3, [r7, #12]
 800f770:	681b      	ldr	r3, [r3, #0]
 800f772:	69da      	ldr	r2, [r3, #28]
 800f774:	68fb      	ldr	r3, [r7, #12]
 800f776:	681b      	ldr	r3, [r3, #0]
 800f778:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800f77c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800f77e:	68fb      	ldr	r3, [r7, #12]
 800f780:	681b      	ldr	r3, [r3, #0]
 800f782:	69da      	ldr	r2, [r3, #28]
 800f784:	68fb      	ldr	r3, [r7, #12]
 800f786:	681b      	ldr	r3, [r3, #0]
 800f788:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800f78c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800f78e:	68fb      	ldr	r3, [r7, #12]
 800f790:	681b      	ldr	r3, [r3, #0]
 800f792:	69d9      	ldr	r1, [r3, #28]
 800f794:	68bb      	ldr	r3, [r7, #8]
 800f796:	691b      	ldr	r3, [r3, #16]
 800f798:	021a      	lsls	r2, r3, #8
 800f79a:	68fb      	ldr	r3, [r7, #12]
 800f79c:	681b      	ldr	r3, [r3, #0]
 800f79e:	430a      	orrs	r2, r1
 800f7a0:	61da      	str	r2, [r3, #28]
      break;
 800f7a2:	e043      	b.n	800f82c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800f7a4:	68fb      	ldr	r3, [r7, #12]
 800f7a6:	681b      	ldr	r3, [r3, #0]
 800f7a8:	68b9      	ldr	r1, [r7, #8]
 800f7aa:	4618      	mov	r0, r3
 800f7ac:	f000 fb26 	bl	800fdfc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800f7b0:	68fb      	ldr	r3, [r7, #12]
 800f7b2:	681b      	ldr	r3, [r3, #0]
 800f7b4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800f7b6:	68fb      	ldr	r3, [r7, #12]
 800f7b8:	681b      	ldr	r3, [r3, #0]
 800f7ba:	f042 0208 	orr.w	r2, r2, #8
 800f7be:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800f7c0:	68fb      	ldr	r3, [r7, #12]
 800f7c2:	681b      	ldr	r3, [r3, #0]
 800f7c4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800f7c6:	68fb      	ldr	r3, [r7, #12]
 800f7c8:	681b      	ldr	r3, [r3, #0]
 800f7ca:	f022 0204 	bic.w	r2, r2, #4
 800f7ce:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800f7d0:	68fb      	ldr	r3, [r7, #12]
 800f7d2:	681b      	ldr	r3, [r3, #0]
 800f7d4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800f7d6:	68bb      	ldr	r3, [r7, #8]
 800f7d8:	691a      	ldr	r2, [r3, #16]
 800f7da:	68fb      	ldr	r3, [r7, #12]
 800f7dc:	681b      	ldr	r3, [r3, #0]
 800f7de:	430a      	orrs	r2, r1
 800f7e0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800f7e2:	e023      	b.n	800f82c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800f7e4:	68fb      	ldr	r3, [r7, #12]
 800f7e6:	681b      	ldr	r3, [r3, #0]
 800f7e8:	68b9      	ldr	r1, [r7, #8]
 800f7ea:	4618      	mov	r0, r3
 800f7ec:	f000 fb6a 	bl	800fec4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800f7f0:	68fb      	ldr	r3, [r7, #12]
 800f7f2:	681b      	ldr	r3, [r3, #0]
 800f7f4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800f7f6:	68fb      	ldr	r3, [r7, #12]
 800f7f8:	681b      	ldr	r3, [r3, #0]
 800f7fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800f7fe:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800f800:	68fb      	ldr	r3, [r7, #12]
 800f802:	681b      	ldr	r3, [r3, #0]
 800f804:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800f806:	68fb      	ldr	r3, [r7, #12]
 800f808:	681b      	ldr	r3, [r3, #0]
 800f80a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800f80e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800f810:	68fb      	ldr	r3, [r7, #12]
 800f812:	681b      	ldr	r3, [r3, #0]
 800f814:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800f816:	68bb      	ldr	r3, [r7, #8]
 800f818:	691b      	ldr	r3, [r3, #16]
 800f81a:	021a      	lsls	r2, r3, #8
 800f81c:	68fb      	ldr	r3, [r7, #12]
 800f81e:	681b      	ldr	r3, [r3, #0]
 800f820:	430a      	orrs	r2, r1
 800f822:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800f824:	e002      	b.n	800f82c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800f826:	2301      	movs	r3, #1
 800f828:	75fb      	strb	r3, [r7, #23]
      break;
 800f82a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800f82c:	68fb      	ldr	r3, [r7, #12]
 800f82e:	2200      	movs	r2, #0
 800f830:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800f834:	7dfb      	ldrb	r3, [r7, #23]
}
 800f836:	4618      	mov	r0, r3
 800f838:	3718      	adds	r7, #24
 800f83a:	46bd      	mov	sp, r7
 800f83c:	bd80      	pop	{r7, pc}
 800f83e:	bf00      	nop

0800f840 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f840:	b480      	push	{r7}
 800f842:	b083      	sub	sp, #12
 800f844:	af00      	add	r7, sp, #0
 800f846:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800f848:	bf00      	nop
 800f84a:	370c      	adds	r7, #12
 800f84c:	46bd      	mov	sp, r7
 800f84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f852:	4770      	bx	lr

0800f854 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f854:	b480      	push	{r7}
 800f856:	b083      	sub	sp, #12
 800f858:	af00      	add	r7, sp, #0
 800f85a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800f85c:	bf00      	nop
 800f85e:	370c      	adds	r7, #12
 800f860:	46bd      	mov	sp, r7
 800f862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f866:	4770      	bx	lr

0800f868 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f868:	b480      	push	{r7}
 800f86a:	b083      	sub	sp, #12
 800f86c:	af00      	add	r7, sp, #0
 800f86e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f870:	bf00      	nop
 800f872:	370c      	adds	r7, #12
 800f874:	46bd      	mov	sp, r7
 800f876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f87a:	4770      	bx	lr

0800f87c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f87c:	b480      	push	{r7}
 800f87e:	b083      	sub	sp, #12
 800f880:	af00      	add	r7, sp, #0
 800f882:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f884:	bf00      	nop
 800f886:	370c      	adds	r7, #12
 800f888:	46bd      	mov	sp, r7
 800f88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f88e:	4770      	bx	lr

0800f890 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f890:	b480      	push	{r7}
 800f892:	b083      	sub	sp, #12
 800f894:	af00      	add	r7, sp, #0
 800f896:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f898:	bf00      	nop
 800f89a:	370c      	adds	r7, #12
 800f89c:	46bd      	mov	sp, r7
 800f89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8a2:	4770      	bx	lr

0800f8a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800f8a4:	b480      	push	{r7}
 800f8a6:	b085      	sub	sp, #20
 800f8a8:	af00      	add	r7, sp, #0
 800f8aa:	6078      	str	r0, [r7, #4]
 800f8ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	681b      	ldr	r3, [r3, #0]
 800f8b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	4a43      	ldr	r2, [pc, #268]	@ (800f9c4 <TIM_Base_SetConfig+0x120>)
 800f8b8:	4293      	cmp	r3, r2
 800f8ba:	d013      	beq.n	800f8e4 <TIM_Base_SetConfig+0x40>
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f8c2:	d00f      	beq.n	800f8e4 <TIM_Base_SetConfig+0x40>
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	4a40      	ldr	r2, [pc, #256]	@ (800f9c8 <TIM_Base_SetConfig+0x124>)
 800f8c8:	4293      	cmp	r3, r2
 800f8ca:	d00b      	beq.n	800f8e4 <TIM_Base_SetConfig+0x40>
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	4a3f      	ldr	r2, [pc, #252]	@ (800f9cc <TIM_Base_SetConfig+0x128>)
 800f8d0:	4293      	cmp	r3, r2
 800f8d2:	d007      	beq.n	800f8e4 <TIM_Base_SetConfig+0x40>
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	4a3e      	ldr	r2, [pc, #248]	@ (800f9d0 <TIM_Base_SetConfig+0x12c>)
 800f8d8:	4293      	cmp	r3, r2
 800f8da:	d003      	beq.n	800f8e4 <TIM_Base_SetConfig+0x40>
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	4a3d      	ldr	r2, [pc, #244]	@ (800f9d4 <TIM_Base_SetConfig+0x130>)
 800f8e0:	4293      	cmp	r3, r2
 800f8e2:	d108      	bne.n	800f8f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f8e4:	68fb      	ldr	r3, [r7, #12]
 800f8e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f8ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f8ec:	683b      	ldr	r3, [r7, #0]
 800f8ee:	685b      	ldr	r3, [r3, #4]
 800f8f0:	68fa      	ldr	r2, [r7, #12]
 800f8f2:	4313      	orrs	r3, r2
 800f8f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	4a32      	ldr	r2, [pc, #200]	@ (800f9c4 <TIM_Base_SetConfig+0x120>)
 800f8fa:	4293      	cmp	r3, r2
 800f8fc:	d01f      	beq.n	800f93e <TIM_Base_SetConfig+0x9a>
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f904:	d01b      	beq.n	800f93e <TIM_Base_SetConfig+0x9a>
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	4a2f      	ldr	r2, [pc, #188]	@ (800f9c8 <TIM_Base_SetConfig+0x124>)
 800f90a:	4293      	cmp	r3, r2
 800f90c:	d017      	beq.n	800f93e <TIM_Base_SetConfig+0x9a>
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	4a2e      	ldr	r2, [pc, #184]	@ (800f9cc <TIM_Base_SetConfig+0x128>)
 800f912:	4293      	cmp	r3, r2
 800f914:	d013      	beq.n	800f93e <TIM_Base_SetConfig+0x9a>
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	4a2d      	ldr	r2, [pc, #180]	@ (800f9d0 <TIM_Base_SetConfig+0x12c>)
 800f91a:	4293      	cmp	r3, r2
 800f91c:	d00f      	beq.n	800f93e <TIM_Base_SetConfig+0x9a>
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	4a2c      	ldr	r2, [pc, #176]	@ (800f9d4 <TIM_Base_SetConfig+0x130>)
 800f922:	4293      	cmp	r3, r2
 800f924:	d00b      	beq.n	800f93e <TIM_Base_SetConfig+0x9a>
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	4a2b      	ldr	r2, [pc, #172]	@ (800f9d8 <TIM_Base_SetConfig+0x134>)
 800f92a:	4293      	cmp	r3, r2
 800f92c:	d007      	beq.n	800f93e <TIM_Base_SetConfig+0x9a>
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	4a2a      	ldr	r2, [pc, #168]	@ (800f9dc <TIM_Base_SetConfig+0x138>)
 800f932:	4293      	cmp	r3, r2
 800f934:	d003      	beq.n	800f93e <TIM_Base_SetConfig+0x9a>
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	4a29      	ldr	r2, [pc, #164]	@ (800f9e0 <TIM_Base_SetConfig+0x13c>)
 800f93a:	4293      	cmp	r3, r2
 800f93c:	d108      	bne.n	800f950 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f93e:	68fb      	ldr	r3, [r7, #12]
 800f940:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f944:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f946:	683b      	ldr	r3, [r7, #0]
 800f948:	68db      	ldr	r3, [r3, #12]
 800f94a:	68fa      	ldr	r2, [r7, #12]
 800f94c:	4313      	orrs	r3, r2
 800f94e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f950:	68fb      	ldr	r3, [r7, #12]
 800f952:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800f956:	683b      	ldr	r3, [r7, #0]
 800f958:	695b      	ldr	r3, [r3, #20]
 800f95a:	4313      	orrs	r3, r2
 800f95c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f95e:	683b      	ldr	r3, [r7, #0]
 800f960:	689a      	ldr	r2, [r3, #8]
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f966:	683b      	ldr	r3, [r7, #0]
 800f968:	681a      	ldr	r2, [r3, #0]
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	4a14      	ldr	r2, [pc, #80]	@ (800f9c4 <TIM_Base_SetConfig+0x120>)
 800f972:	4293      	cmp	r3, r2
 800f974:	d00f      	beq.n	800f996 <TIM_Base_SetConfig+0xf2>
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	4a16      	ldr	r2, [pc, #88]	@ (800f9d4 <TIM_Base_SetConfig+0x130>)
 800f97a:	4293      	cmp	r3, r2
 800f97c:	d00b      	beq.n	800f996 <TIM_Base_SetConfig+0xf2>
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	4a15      	ldr	r2, [pc, #84]	@ (800f9d8 <TIM_Base_SetConfig+0x134>)
 800f982:	4293      	cmp	r3, r2
 800f984:	d007      	beq.n	800f996 <TIM_Base_SetConfig+0xf2>
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	4a14      	ldr	r2, [pc, #80]	@ (800f9dc <TIM_Base_SetConfig+0x138>)
 800f98a:	4293      	cmp	r3, r2
 800f98c:	d003      	beq.n	800f996 <TIM_Base_SetConfig+0xf2>
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	4a13      	ldr	r2, [pc, #76]	@ (800f9e0 <TIM_Base_SetConfig+0x13c>)
 800f992:	4293      	cmp	r3, r2
 800f994:	d103      	bne.n	800f99e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f996:	683b      	ldr	r3, [r7, #0]
 800f998:	691a      	ldr	r2, [r3, #16]
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	681b      	ldr	r3, [r3, #0]
 800f9a2:	f043 0204 	orr.w	r2, r3, #4
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	2201      	movs	r2, #1
 800f9ae:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	68fa      	ldr	r2, [r7, #12]
 800f9b4:	601a      	str	r2, [r3, #0]
}
 800f9b6:	bf00      	nop
 800f9b8:	3714      	adds	r7, #20
 800f9ba:	46bd      	mov	sp, r7
 800f9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9c0:	4770      	bx	lr
 800f9c2:	bf00      	nop
 800f9c4:	40010000 	.word	0x40010000
 800f9c8:	40000400 	.word	0x40000400
 800f9cc:	40000800 	.word	0x40000800
 800f9d0:	40000c00 	.word	0x40000c00
 800f9d4:	40010400 	.word	0x40010400
 800f9d8:	40014000 	.word	0x40014000
 800f9dc:	40014400 	.word	0x40014400
 800f9e0:	40014800 	.word	0x40014800

0800f9e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f9e4:	b480      	push	{r7}
 800f9e6:	b087      	sub	sp, #28
 800f9e8:	af00      	add	r7, sp, #0
 800f9ea:	6078      	str	r0, [r7, #4]
 800f9ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	6a1b      	ldr	r3, [r3, #32]
 800f9f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	6a1b      	ldr	r3, [r3, #32]
 800f9f8:	f023 0201 	bic.w	r2, r3, #1
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	685b      	ldr	r3, [r3, #4]
 800fa04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	699b      	ldr	r3, [r3, #24]
 800fa0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800fa0c:	68fa      	ldr	r2, [r7, #12]
 800fa0e:	4b37      	ldr	r3, [pc, #220]	@ (800faec <TIM_OC1_SetConfig+0x108>)
 800fa10:	4013      	ands	r3, r2
 800fa12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800fa14:	68fb      	ldr	r3, [r7, #12]
 800fa16:	f023 0303 	bic.w	r3, r3, #3
 800fa1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fa1c:	683b      	ldr	r3, [r7, #0]
 800fa1e:	681b      	ldr	r3, [r3, #0]
 800fa20:	68fa      	ldr	r2, [r7, #12]
 800fa22:	4313      	orrs	r3, r2
 800fa24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800fa26:	697b      	ldr	r3, [r7, #20]
 800fa28:	f023 0302 	bic.w	r3, r3, #2
 800fa2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800fa2e:	683b      	ldr	r3, [r7, #0]
 800fa30:	689b      	ldr	r3, [r3, #8]
 800fa32:	697a      	ldr	r2, [r7, #20]
 800fa34:	4313      	orrs	r3, r2
 800fa36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	4a2d      	ldr	r2, [pc, #180]	@ (800faf0 <TIM_OC1_SetConfig+0x10c>)
 800fa3c:	4293      	cmp	r3, r2
 800fa3e:	d00f      	beq.n	800fa60 <TIM_OC1_SetConfig+0x7c>
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	4a2c      	ldr	r2, [pc, #176]	@ (800faf4 <TIM_OC1_SetConfig+0x110>)
 800fa44:	4293      	cmp	r3, r2
 800fa46:	d00b      	beq.n	800fa60 <TIM_OC1_SetConfig+0x7c>
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	4a2b      	ldr	r2, [pc, #172]	@ (800faf8 <TIM_OC1_SetConfig+0x114>)
 800fa4c:	4293      	cmp	r3, r2
 800fa4e:	d007      	beq.n	800fa60 <TIM_OC1_SetConfig+0x7c>
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	4a2a      	ldr	r2, [pc, #168]	@ (800fafc <TIM_OC1_SetConfig+0x118>)
 800fa54:	4293      	cmp	r3, r2
 800fa56:	d003      	beq.n	800fa60 <TIM_OC1_SetConfig+0x7c>
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	4a29      	ldr	r2, [pc, #164]	@ (800fb00 <TIM_OC1_SetConfig+0x11c>)
 800fa5c:	4293      	cmp	r3, r2
 800fa5e:	d10c      	bne.n	800fa7a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800fa60:	697b      	ldr	r3, [r7, #20]
 800fa62:	f023 0308 	bic.w	r3, r3, #8
 800fa66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800fa68:	683b      	ldr	r3, [r7, #0]
 800fa6a:	68db      	ldr	r3, [r3, #12]
 800fa6c:	697a      	ldr	r2, [r7, #20]
 800fa6e:	4313      	orrs	r3, r2
 800fa70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800fa72:	697b      	ldr	r3, [r7, #20]
 800fa74:	f023 0304 	bic.w	r3, r3, #4
 800fa78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	4a1c      	ldr	r2, [pc, #112]	@ (800faf0 <TIM_OC1_SetConfig+0x10c>)
 800fa7e:	4293      	cmp	r3, r2
 800fa80:	d00f      	beq.n	800faa2 <TIM_OC1_SetConfig+0xbe>
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	4a1b      	ldr	r2, [pc, #108]	@ (800faf4 <TIM_OC1_SetConfig+0x110>)
 800fa86:	4293      	cmp	r3, r2
 800fa88:	d00b      	beq.n	800faa2 <TIM_OC1_SetConfig+0xbe>
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	4a1a      	ldr	r2, [pc, #104]	@ (800faf8 <TIM_OC1_SetConfig+0x114>)
 800fa8e:	4293      	cmp	r3, r2
 800fa90:	d007      	beq.n	800faa2 <TIM_OC1_SetConfig+0xbe>
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	4a19      	ldr	r2, [pc, #100]	@ (800fafc <TIM_OC1_SetConfig+0x118>)
 800fa96:	4293      	cmp	r3, r2
 800fa98:	d003      	beq.n	800faa2 <TIM_OC1_SetConfig+0xbe>
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	4a18      	ldr	r2, [pc, #96]	@ (800fb00 <TIM_OC1_SetConfig+0x11c>)
 800fa9e:	4293      	cmp	r3, r2
 800faa0:	d111      	bne.n	800fac6 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800faa2:	693b      	ldr	r3, [r7, #16]
 800faa4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800faa8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800faaa:	693b      	ldr	r3, [r7, #16]
 800faac:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800fab0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800fab2:	683b      	ldr	r3, [r7, #0]
 800fab4:	695b      	ldr	r3, [r3, #20]
 800fab6:	693a      	ldr	r2, [r7, #16]
 800fab8:	4313      	orrs	r3, r2
 800faba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800fabc:	683b      	ldr	r3, [r7, #0]
 800fabe:	699b      	ldr	r3, [r3, #24]
 800fac0:	693a      	ldr	r2, [r7, #16]
 800fac2:	4313      	orrs	r3, r2
 800fac4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	693a      	ldr	r2, [r7, #16]
 800faca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	68fa      	ldr	r2, [r7, #12]
 800fad0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800fad2:	683b      	ldr	r3, [r7, #0]
 800fad4:	685a      	ldr	r2, [r3, #4]
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	697a      	ldr	r2, [r7, #20]
 800fade:	621a      	str	r2, [r3, #32]
}
 800fae0:	bf00      	nop
 800fae2:	371c      	adds	r7, #28
 800fae4:	46bd      	mov	sp, r7
 800fae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faea:	4770      	bx	lr
 800faec:	fffeff8f 	.word	0xfffeff8f
 800faf0:	40010000 	.word	0x40010000
 800faf4:	40010400 	.word	0x40010400
 800faf8:	40014000 	.word	0x40014000
 800fafc:	40014400 	.word	0x40014400
 800fb00:	40014800 	.word	0x40014800

0800fb04 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800fb04:	b480      	push	{r7}
 800fb06:	b087      	sub	sp, #28
 800fb08:	af00      	add	r7, sp, #0
 800fb0a:	6078      	str	r0, [r7, #4]
 800fb0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	6a1b      	ldr	r3, [r3, #32]
 800fb12:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	6a1b      	ldr	r3, [r3, #32]
 800fb18:	f023 0210 	bic.w	r2, r3, #16
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	685b      	ldr	r3, [r3, #4]
 800fb24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	699b      	ldr	r3, [r3, #24]
 800fb2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800fb2c:	68fa      	ldr	r2, [r7, #12]
 800fb2e:	4b34      	ldr	r3, [pc, #208]	@ (800fc00 <TIM_OC2_SetConfig+0xfc>)
 800fb30:	4013      	ands	r3, r2
 800fb32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800fb34:	68fb      	ldr	r3, [r7, #12]
 800fb36:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800fb3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fb3c:	683b      	ldr	r3, [r7, #0]
 800fb3e:	681b      	ldr	r3, [r3, #0]
 800fb40:	021b      	lsls	r3, r3, #8
 800fb42:	68fa      	ldr	r2, [r7, #12]
 800fb44:	4313      	orrs	r3, r2
 800fb46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800fb48:	697b      	ldr	r3, [r7, #20]
 800fb4a:	f023 0320 	bic.w	r3, r3, #32
 800fb4e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800fb50:	683b      	ldr	r3, [r7, #0]
 800fb52:	689b      	ldr	r3, [r3, #8]
 800fb54:	011b      	lsls	r3, r3, #4
 800fb56:	697a      	ldr	r2, [r7, #20]
 800fb58:	4313      	orrs	r3, r2
 800fb5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	4a29      	ldr	r2, [pc, #164]	@ (800fc04 <TIM_OC2_SetConfig+0x100>)
 800fb60:	4293      	cmp	r3, r2
 800fb62:	d003      	beq.n	800fb6c <TIM_OC2_SetConfig+0x68>
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	4a28      	ldr	r2, [pc, #160]	@ (800fc08 <TIM_OC2_SetConfig+0x104>)
 800fb68:	4293      	cmp	r3, r2
 800fb6a:	d10d      	bne.n	800fb88 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800fb6c:	697b      	ldr	r3, [r7, #20]
 800fb6e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800fb72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800fb74:	683b      	ldr	r3, [r7, #0]
 800fb76:	68db      	ldr	r3, [r3, #12]
 800fb78:	011b      	lsls	r3, r3, #4
 800fb7a:	697a      	ldr	r2, [r7, #20]
 800fb7c:	4313      	orrs	r3, r2
 800fb7e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800fb80:	697b      	ldr	r3, [r7, #20]
 800fb82:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800fb86:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	4a1e      	ldr	r2, [pc, #120]	@ (800fc04 <TIM_OC2_SetConfig+0x100>)
 800fb8c:	4293      	cmp	r3, r2
 800fb8e:	d00f      	beq.n	800fbb0 <TIM_OC2_SetConfig+0xac>
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	4a1d      	ldr	r2, [pc, #116]	@ (800fc08 <TIM_OC2_SetConfig+0x104>)
 800fb94:	4293      	cmp	r3, r2
 800fb96:	d00b      	beq.n	800fbb0 <TIM_OC2_SetConfig+0xac>
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	4a1c      	ldr	r2, [pc, #112]	@ (800fc0c <TIM_OC2_SetConfig+0x108>)
 800fb9c:	4293      	cmp	r3, r2
 800fb9e:	d007      	beq.n	800fbb0 <TIM_OC2_SetConfig+0xac>
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	4a1b      	ldr	r2, [pc, #108]	@ (800fc10 <TIM_OC2_SetConfig+0x10c>)
 800fba4:	4293      	cmp	r3, r2
 800fba6:	d003      	beq.n	800fbb0 <TIM_OC2_SetConfig+0xac>
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	4a1a      	ldr	r2, [pc, #104]	@ (800fc14 <TIM_OC2_SetConfig+0x110>)
 800fbac:	4293      	cmp	r3, r2
 800fbae:	d113      	bne.n	800fbd8 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800fbb0:	693b      	ldr	r3, [r7, #16]
 800fbb2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800fbb6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800fbb8:	693b      	ldr	r3, [r7, #16]
 800fbba:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800fbbe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800fbc0:	683b      	ldr	r3, [r7, #0]
 800fbc2:	695b      	ldr	r3, [r3, #20]
 800fbc4:	009b      	lsls	r3, r3, #2
 800fbc6:	693a      	ldr	r2, [r7, #16]
 800fbc8:	4313      	orrs	r3, r2
 800fbca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800fbcc:	683b      	ldr	r3, [r7, #0]
 800fbce:	699b      	ldr	r3, [r3, #24]
 800fbd0:	009b      	lsls	r3, r3, #2
 800fbd2:	693a      	ldr	r2, [r7, #16]
 800fbd4:	4313      	orrs	r3, r2
 800fbd6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	693a      	ldr	r2, [r7, #16]
 800fbdc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	68fa      	ldr	r2, [r7, #12]
 800fbe2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800fbe4:	683b      	ldr	r3, [r7, #0]
 800fbe6:	685a      	ldr	r2, [r3, #4]
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	697a      	ldr	r2, [r7, #20]
 800fbf0:	621a      	str	r2, [r3, #32]
}
 800fbf2:	bf00      	nop
 800fbf4:	371c      	adds	r7, #28
 800fbf6:	46bd      	mov	sp, r7
 800fbf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbfc:	4770      	bx	lr
 800fbfe:	bf00      	nop
 800fc00:	feff8fff 	.word	0xfeff8fff
 800fc04:	40010000 	.word	0x40010000
 800fc08:	40010400 	.word	0x40010400
 800fc0c:	40014000 	.word	0x40014000
 800fc10:	40014400 	.word	0x40014400
 800fc14:	40014800 	.word	0x40014800

0800fc18 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800fc18:	b480      	push	{r7}
 800fc1a:	b087      	sub	sp, #28
 800fc1c:	af00      	add	r7, sp, #0
 800fc1e:	6078      	str	r0, [r7, #4]
 800fc20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	6a1b      	ldr	r3, [r3, #32]
 800fc26:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	6a1b      	ldr	r3, [r3, #32]
 800fc2c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	685b      	ldr	r3, [r3, #4]
 800fc38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	69db      	ldr	r3, [r3, #28]
 800fc3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800fc40:	68fa      	ldr	r2, [r7, #12]
 800fc42:	4b33      	ldr	r3, [pc, #204]	@ (800fd10 <TIM_OC3_SetConfig+0xf8>)
 800fc44:	4013      	ands	r3, r2
 800fc46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800fc48:	68fb      	ldr	r3, [r7, #12]
 800fc4a:	f023 0303 	bic.w	r3, r3, #3
 800fc4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fc50:	683b      	ldr	r3, [r7, #0]
 800fc52:	681b      	ldr	r3, [r3, #0]
 800fc54:	68fa      	ldr	r2, [r7, #12]
 800fc56:	4313      	orrs	r3, r2
 800fc58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800fc5a:	697b      	ldr	r3, [r7, #20]
 800fc5c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800fc60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800fc62:	683b      	ldr	r3, [r7, #0]
 800fc64:	689b      	ldr	r3, [r3, #8]
 800fc66:	021b      	lsls	r3, r3, #8
 800fc68:	697a      	ldr	r2, [r7, #20]
 800fc6a:	4313      	orrs	r3, r2
 800fc6c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	4a28      	ldr	r2, [pc, #160]	@ (800fd14 <TIM_OC3_SetConfig+0xfc>)
 800fc72:	4293      	cmp	r3, r2
 800fc74:	d003      	beq.n	800fc7e <TIM_OC3_SetConfig+0x66>
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	4a27      	ldr	r2, [pc, #156]	@ (800fd18 <TIM_OC3_SetConfig+0x100>)
 800fc7a:	4293      	cmp	r3, r2
 800fc7c:	d10d      	bne.n	800fc9a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800fc7e:	697b      	ldr	r3, [r7, #20]
 800fc80:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800fc84:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800fc86:	683b      	ldr	r3, [r7, #0]
 800fc88:	68db      	ldr	r3, [r3, #12]
 800fc8a:	021b      	lsls	r3, r3, #8
 800fc8c:	697a      	ldr	r2, [r7, #20]
 800fc8e:	4313      	orrs	r3, r2
 800fc90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800fc92:	697b      	ldr	r3, [r7, #20]
 800fc94:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800fc98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	4a1d      	ldr	r2, [pc, #116]	@ (800fd14 <TIM_OC3_SetConfig+0xfc>)
 800fc9e:	4293      	cmp	r3, r2
 800fca0:	d00f      	beq.n	800fcc2 <TIM_OC3_SetConfig+0xaa>
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	4a1c      	ldr	r2, [pc, #112]	@ (800fd18 <TIM_OC3_SetConfig+0x100>)
 800fca6:	4293      	cmp	r3, r2
 800fca8:	d00b      	beq.n	800fcc2 <TIM_OC3_SetConfig+0xaa>
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	4a1b      	ldr	r2, [pc, #108]	@ (800fd1c <TIM_OC3_SetConfig+0x104>)
 800fcae:	4293      	cmp	r3, r2
 800fcb0:	d007      	beq.n	800fcc2 <TIM_OC3_SetConfig+0xaa>
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	4a1a      	ldr	r2, [pc, #104]	@ (800fd20 <TIM_OC3_SetConfig+0x108>)
 800fcb6:	4293      	cmp	r3, r2
 800fcb8:	d003      	beq.n	800fcc2 <TIM_OC3_SetConfig+0xaa>
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	4a19      	ldr	r2, [pc, #100]	@ (800fd24 <TIM_OC3_SetConfig+0x10c>)
 800fcbe:	4293      	cmp	r3, r2
 800fcc0:	d113      	bne.n	800fcea <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800fcc2:	693b      	ldr	r3, [r7, #16]
 800fcc4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800fcc8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800fcca:	693b      	ldr	r3, [r7, #16]
 800fccc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800fcd0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800fcd2:	683b      	ldr	r3, [r7, #0]
 800fcd4:	695b      	ldr	r3, [r3, #20]
 800fcd6:	011b      	lsls	r3, r3, #4
 800fcd8:	693a      	ldr	r2, [r7, #16]
 800fcda:	4313      	orrs	r3, r2
 800fcdc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800fcde:	683b      	ldr	r3, [r7, #0]
 800fce0:	699b      	ldr	r3, [r3, #24]
 800fce2:	011b      	lsls	r3, r3, #4
 800fce4:	693a      	ldr	r2, [r7, #16]
 800fce6:	4313      	orrs	r3, r2
 800fce8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	693a      	ldr	r2, [r7, #16]
 800fcee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	68fa      	ldr	r2, [r7, #12]
 800fcf4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800fcf6:	683b      	ldr	r3, [r7, #0]
 800fcf8:	685a      	ldr	r2, [r3, #4]
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	697a      	ldr	r2, [r7, #20]
 800fd02:	621a      	str	r2, [r3, #32]
}
 800fd04:	bf00      	nop
 800fd06:	371c      	adds	r7, #28
 800fd08:	46bd      	mov	sp, r7
 800fd0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd0e:	4770      	bx	lr
 800fd10:	fffeff8f 	.word	0xfffeff8f
 800fd14:	40010000 	.word	0x40010000
 800fd18:	40010400 	.word	0x40010400
 800fd1c:	40014000 	.word	0x40014000
 800fd20:	40014400 	.word	0x40014400
 800fd24:	40014800 	.word	0x40014800

0800fd28 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800fd28:	b480      	push	{r7}
 800fd2a:	b087      	sub	sp, #28
 800fd2c:	af00      	add	r7, sp, #0
 800fd2e:	6078      	str	r0, [r7, #4]
 800fd30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	6a1b      	ldr	r3, [r3, #32]
 800fd36:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	6a1b      	ldr	r3, [r3, #32]
 800fd3c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	685b      	ldr	r3, [r3, #4]
 800fd48:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	69db      	ldr	r3, [r3, #28]
 800fd4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800fd50:	68fa      	ldr	r2, [r7, #12]
 800fd52:	4b24      	ldr	r3, [pc, #144]	@ (800fde4 <TIM_OC4_SetConfig+0xbc>)
 800fd54:	4013      	ands	r3, r2
 800fd56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800fd58:	68fb      	ldr	r3, [r7, #12]
 800fd5a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800fd5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fd60:	683b      	ldr	r3, [r7, #0]
 800fd62:	681b      	ldr	r3, [r3, #0]
 800fd64:	021b      	lsls	r3, r3, #8
 800fd66:	68fa      	ldr	r2, [r7, #12]
 800fd68:	4313      	orrs	r3, r2
 800fd6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800fd6c:	693b      	ldr	r3, [r7, #16]
 800fd6e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800fd72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800fd74:	683b      	ldr	r3, [r7, #0]
 800fd76:	689b      	ldr	r3, [r3, #8]
 800fd78:	031b      	lsls	r3, r3, #12
 800fd7a:	693a      	ldr	r2, [r7, #16]
 800fd7c:	4313      	orrs	r3, r2
 800fd7e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	4a19      	ldr	r2, [pc, #100]	@ (800fde8 <TIM_OC4_SetConfig+0xc0>)
 800fd84:	4293      	cmp	r3, r2
 800fd86:	d00f      	beq.n	800fda8 <TIM_OC4_SetConfig+0x80>
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	4a18      	ldr	r2, [pc, #96]	@ (800fdec <TIM_OC4_SetConfig+0xc4>)
 800fd8c:	4293      	cmp	r3, r2
 800fd8e:	d00b      	beq.n	800fda8 <TIM_OC4_SetConfig+0x80>
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	4a17      	ldr	r2, [pc, #92]	@ (800fdf0 <TIM_OC4_SetConfig+0xc8>)
 800fd94:	4293      	cmp	r3, r2
 800fd96:	d007      	beq.n	800fda8 <TIM_OC4_SetConfig+0x80>
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	4a16      	ldr	r2, [pc, #88]	@ (800fdf4 <TIM_OC4_SetConfig+0xcc>)
 800fd9c:	4293      	cmp	r3, r2
 800fd9e:	d003      	beq.n	800fda8 <TIM_OC4_SetConfig+0x80>
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	4a15      	ldr	r2, [pc, #84]	@ (800fdf8 <TIM_OC4_SetConfig+0xd0>)
 800fda4:	4293      	cmp	r3, r2
 800fda6:	d109      	bne.n	800fdbc <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800fda8:	697b      	ldr	r3, [r7, #20]
 800fdaa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800fdae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800fdb0:	683b      	ldr	r3, [r7, #0]
 800fdb2:	695b      	ldr	r3, [r3, #20]
 800fdb4:	019b      	lsls	r3, r3, #6
 800fdb6:	697a      	ldr	r2, [r7, #20]
 800fdb8:	4313      	orrs	r3, r2
 800fdba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	697a      	ldr	r2, [r7, #20]
 800fdc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	68fa      	ldr	r2, [r7, #12]
 800fdc6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800fdc8:	683b      	ldr	r3, [r7, #0]
 800fdca:	685a      	ldr	r2, [r3, #4]
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	693a      	ldr	r2, [r7, #16]
 800fdd4:	621a      	str	r2, [r3, #32]
}
 800fdd6:	bf00      	nop
 800fdd8:	371c      	adds	r7, #28
 800fdda:	46bd      	mov	sp, r7
 800fddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fde0:	4770      	bx	lr
 800fde2:	bf00      	nop
 800fde4:	feff8fff 	.word	0xfeff8fff
 800fde8:	40010000 	.word	0x40010000
 800fdec:	40010400 	.word	0x40010400
 800fdf0:	40014000 	.word	0x40014000
 800fdf4:	40014400 	.word	0x40014400
 800fdf8:	40014800 	.word	0x40014800

0800fdfc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800fdfc:	b480      	push	{r7}
 800fdfe:	b087      	sub	sp, #28
 800fe00:	af00      	add	r7, sp, #0
 800fe02:	6078      	str	r0, [r7, #4]
 800fe04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	6a1b      	ldr	r3, [r3, #32]
 800fe0a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	6a1b      	ldr	r3, [r3, #32]
 800fe10:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	685b      	ldr	r3, [r3, #4]
 800fe1c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fe22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800fe24:	68fa      	ldr	r2, [r7, #12]
 800fe26:	4b21      	ldr	r3, [pc, #132]	@ (800feac <TIM_OC5_SetConfig+0xb0>)
 800fe28:	4013      	ands	r3, r2
 800fe2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fe2c:	683b      	ldr	r3, [r7, #0]
 800fe2e:	681b      	ldr	r3, [r3, #0]
 800fe30:	68fa      	ldr	r2, [r7, #12]
 800fe32:	4313      	orrs	r3, r2
 800fe34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800fe36:	693b      	ldr	r3, [r7, #16]
 800fe38:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800fe3c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800fe3e:	683b      	ldr	r3, [r7, #0]
 800fe40:	689b      	ldr	r3, [r3, #8]
 800fe42:	041b      	lsls	r3, r3, #16
 800fe44:	693a      	ldr	r2, [r7, #16]
 800fe46:	4313      	orrs	r3, r2
 800fe48:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	4a18      	ldr	r2, [pc, #96]	@ (800feb0 <TIM_OC5_SetConfig+0xb4>)
 800fe4e:	4293      	cmp	r3, r2
 800fe50:	d00f      	beq.n	800fe72 <TIM_OC5_SetConfig+0x76>
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	4a17      	ldr	r2, [pc, #92]	@ (800feb4 <TIM_OC5_SetConfig+0xb8>)
 800fe56:	4293      	cmp	r3, r2
 800fe58:	d00b      	beq.n	800fe72 <TIM_OC5_SetConfig+0x76>
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	4a16      	ldr	r2, [pc, #88]	@ (800feb8 <TIM_OC5_SetConfig+0xbc>)
 800fe5e:	4293      	cmp	r3, r2
 800fe60:	d007      	beq.n	800fe72 <TIM_OC5_SetConfig+0x76>
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	4a15      	ldr	r2, [pc, #84]	@ (800febc <TIM_OC5_SetConfig+0xc0>)
 800fe66:	4293      	cmp	r3, r2
 800fe68:	d003      	beq.n	800fe72 <TIM_OC5_SetConfig+0x76>
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	4a14      	ldr	r2, [pc, #80]	@ (800fec0 <TIM_OC5_SetConfig+0xc4>)
 800fe6e:	4293      	cmp	r3, r2
 800fe70:	d109      	bne.n	800fe86 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800fe72:	697b      	ldr	r3, [r7, #20]
 800fe74:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800fe78:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800fe7a:	683b      	ldr	r3, [r7, #0]
 800fe7c:	695b      	ldr	r3, [r3, #20]
 800fe7e:	021b      	lsls	r3, r3, #8
 800fe80:	697a      	ldr	r2, [r7, #20]
 800fe82:	4313      	orrs	r3, r2
 800fe84:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	697a      	ldr	r2, [r7, #20]
 800fe8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	68fa      	ldr	r2, [r7, #12]
 800fe90:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800fe92:	683b      	ldr	r3, [r7, #0]
 800fe94:	685a      	ldr	r2, [r3, #4]
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	693a      	ldr	r2, [r7, #16]
 800fe9e:	621a      	str	r2, [r3, #32]
}
 800fea0:	bf00      	nop
 800fea2:	371c      	adds	r7, #28
 800fea4:	46bd      	mov	sp, r7
 800fea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feaa:	4770      	bx	lr
 800feac:	fffeff8f 	.word	0xfffeff8f
 800feb0:	40010000 	.word	0x40010000
 800feb4:	40010400 	.word	0x40010400
 800feb8:	40014000 	.word	0x40014000
 800febc:	40014400 	.word	0x40014400
 800fec0:	40014800 	.word	0x40014800

0800fec4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800fec4:	b480      	push	{r7}
 800fec6:	b087      	sub	sp, #28
 800fec8:	af00      	add	r7, sp, #0
 800feca:	6078      	str	r0, [r7, #4]
 800fecc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	6a1b      	ldr	r3, [r3, #32]
 800fed2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	6a1b      	ldr	r3, [r3, #32]
 800fed8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	685b      	ldr	r3, [r3, #4]
 800fee4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800feea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800feec:	68fa      	ldr	r2, [r7, #12]
 800feee:	4b22      	ldr	r3, [pc, #136]	@ (800ff78 <TIM_OC6_SetConfig+0xb4>)
 800fef0:	4013      	ands	r3, r2
 800fef2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fef4:	683b      	ldr	r3, [r7, #0]
 800fef6:	681b      	ldr	r3, [r3, #0]
 800fef8:	021b      	lsls	r3, r3, #8
 800fefa:	68fa      	ldr	r2, [r7, #12]
 800fefc:	4313      	orrs	r3, r2
 800fefe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ff00:	693b      	ldr	r3, [r7, #16]
 800ff02:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800ff06:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800ff08:	683b      	ldr	r3, [r7, #0]
 800ff0a:	689b      	ldr	r3, [r3, #8]
 800ff0c:	051b      	lsls	r3, r3, #20
 800ff0e:	693a      	ldr	r2, [r7, #16]
 800ff10:	4313      	orrs	r3, r2
 800ff12:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	4a19      	ldr	r2, [pc, #100]	@ (800ff7c <TIM_OC6_SetConfig+0xb8>)
 800ff18:	4293      	cmp	r3, r2
 800ff1a:	d00f      	beq.n	800ff3c <TIM_OC6_SetConfig+0x78>
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	4a18      	ldr	r2, [pc, #96]	@ (800ff80 <TIM_OC6_SetConfig+0xbc>)
 800ff20:	4293      	cmp	r3, r2
 800ff22:	d00b      	beq.n	800ff3c <TIM_OC6_SetConfig+0x78>
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	4a17      	ldr	r2, [pc, #92]	@ (800ff84 <TIM_OC6_SetConfig+0xc0>)
 800ff28:	4293      	cmp	r3, r2
 800ff2a:	d007      	beq.n	800ff3c <TIM_OC6_SetConfig+0x78>
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	4a16      	ldr	r2, [pc, #88]	@ (800ff88 <TIM_OC6_SetConfig+0xc4>)
 800ff30:	4293      	cmp	r3, r2
 800ff32:	d003      	beq.n	800ff3c <TIM_OC6_SetConfig+0x78>
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	4a15      	ldr	r2, [pc, #84]	@ (800ff8c <TIM_OC6_SetConfig+0xc8>)
 800ff38:	4293      	cmp	r3, r2
 800ff3a:	d109      	bne.n	800ff50 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800ff3c:	697b      	ldr	r3, [r7, #20]
 800ff3e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800ff42:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ff44:	683b      	ldr	r3, [r7, #0]
 800ff46:	695b      	ldr	r3, [r3, #20]
 800ff48:	029b      	lsls	r3, r3, #10
 800ff4a:	697a      	ldr	r2, [r7, #20]
 800ff4c:	4313      	orrs	r3, r2
 800ff4e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	697a      	ldr	r2, [r7, #20]
 800ff54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	68fa      	ldr	r2, [r7, #12]
 800ff5a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ff5c:	683b      	ldr	r3, [r7, #0]
 800ff5e:	685a      	ldr	r2, [r3, #4]
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	693a      	ldr	r2, [r7, #16]
 800ff68:	621a      	str	r2, [r3, #32]
}
 800ff6a:	bf00      	nop
 800ff6c:	371c      	adds	r7, #28
 800ff6e:	46bd      	mov	sp, r7
 800ff70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff74:	4770      	bx	lr
 800ff76:	bf00      	nop
 800ff78:	feff8fff 	.word	0xfeff8fff
 800ff7c:	40010000 	.word	0x40010000
 800ff80:	40010400 	.word	0x40010400
 800ff84:	40014000 	.word	0x40014000
 800ff88:	40014400 	.word	0x40014400
 800ff8c:	40014800 	.word	0x40014800

0800ff90 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ff90:	b480      	push	{r7}
 800ff92:	b087      	sub	sp, #28
 800ff94:	af00      	add	r7, sp, #0
 800ff96:	60f8      	str	r0, [r7, #12]
 800ff98:	60b9      	str	r1, [r7, #8]
 800ff9a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ff9c:	68bb      	ldr	r3, [r7, #8]
 800ff9e:	f003 031f 	and.w	r3, r3, #31
 800ffa2:	2201      	movs	r2, #1
 800ffa4:	fa02 f303 	lsl.w	r3, r2, r3
 800ffa8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ffaa:	68fb      	ldr	r3, [r7, #12]
 800ffac:	6a1a      	ldr	r2, [r3, #32]
 800ffae:	697b      	ldr	r3, [r7, #20]
 800ffb0:	43db      	mvns	r3, r3
 800ffb2:	401a      	ands	r2, r3
 800ffb4:	68fb      	ldr	r3, [r7, #12]
 800ffb6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ffb8:	68fb      	ldr	r3, [r7, #12]
 800ffba:	6a1a      	ldr	r2, [r3, #32]
 800ffbc:	68bb      	ldr	r3, [r7, #8]
 800ffbe:	f003 031f 	and.w	r3, r3, #31
 800ffc2:	6879      	ldr	r1, [r7, #4]
 800ffc4:	fa01 f303 	lsl.w	r3, r1, r3
 800ffc8:	431a      	orrs	r2, r3
 800ffca:	68fb      	ldr	r3, [r7, #12]
 800ffcc:	621a      	str	r2, [r3, #32]
}
 800ffce:	bf00      	nop
 800ffd0:	371c      	adds	r7, #28
 800ffd2:	46bd      	mov	sp, r7
 800ffd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffd8:	4770      	bx	lr
	...

0800ffdc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ffdc:	b480      	push	{r7}
 800ffde:	b085      	sub	sp, #20
 800ffe0:	af00      	add	r7, sp, #0
 800ffe2:	6078      	str	r0, [r7, #4]
 800ffe4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ffec:	2b01      	cmp	r3, #1
 800ffee:	d101      	bne.n	800fff4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800fff0:	2302      	movs	r3, #2
 800fff2:	e06d      	b.n	80100d0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	2201      	movs	r2, #1
 800fff8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	2202      	movs	r2, #2
 8010000:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	681b      	ldr	r3, [r3, #0]
 8010008:	685b      	ldr	r3, [r3, #4]
 801000a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	681b      	ldr	r3, [r3, #0]
 8010010:	689b      	ldr	r3, [r3, #8]
 8010012:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	681b      	ldr	r3, [r3, #0]
 8010018:	4a30      	ldr	r2, [pc, #192]	@ (80100dc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 801001a:	4293      	cmp	r3, r2
 801001c:	d004      	beq.n	8010028 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	681b      	ldr	r3, [r3, #0]
 8010022:	4a2f      	ldr	r2, [pc, #188]	@ (80100e0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8010024:	4293      	cmp	r3, r2
 8010026:	d108      	bne.n	801003a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8010028:	68fb      	ldr	r3, [r7, #12]
 801002a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 801002e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8010030:	683b      	ldr	r3, [r7, #0]
 8010032:	685b      	ldr	r3, [r3, #4]
 8010034:	68fa      	ldr	r2, [r7, #12]
 8010036:	4313      	orrs	r3, r2
 8010038:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801003a:	68fb      	ldr	r3, [r7, #12]
 801003c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010040:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8010042:	683b      	ldr	r3, [r7, #0]
 8010044:	681b      	ldr	r3, [r3, #0]
 8010046:	68fa      	ldr	r2, [r7, #12]
 8010048:	4313      	orrs	r3, r2
 801004a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	681b      	ldr	r3, [r3, #0]
 8010050:	68fa      	ldr	r2, [r7, #12]
 8010052:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	681b      	ldr	r3, [r3, #0]
 8010058:	4a20      	ldr	r2, [pc, #128]	@ (80100dc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 801005a:	4293      	cmp	r3, r2
 801005c:	d022      	beq.n	80100a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	681b      	ldr	r3, [r3, #0]
 8010062:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010066:	d01d      	beq.n	80100a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	681b      	ldr	r3, [r3, #0]
 801006c:	4a1d      	ldr	r2, [pc, #116]	@ (80100e4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 801006e:	4293      	cmp	r3, r2
 8010070:	d018      	beq.n	80100a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	681b      	ldr	r3, [r3, #0]
 8010076:	4a1c      	ldr	r2, [pc, #112]	@ (80100e8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8010078:	4293      	cmp	r3, r2
 801007a:	d013      	beq.n	80100a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	681b      	ldr	r3, [r3, #0]
 8010080:	4a1a      	ldr	r2, [pc, #104]	@ (80100ec <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8010082:	4293      	cmp	r3, r2
 8010084:	d00e      	beq.n	80100a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	681b      	ldr	r3, [r3, #0]
 801008a:	4a15      	ldr	r2, [pc, #84]	@ (80100e0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 801008c:	4293      	cmp	r3, r2
 801008e:	d009      	beq.n	80100a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	681b      	ldr	r3, [r3, #0]
 8010094:	4a16      	ldr	r2, [pc, #88]	@ (80100f0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8010096:	4293      	cmp	r3, r2
 8010098:	d004      	beq.n	80100a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	681b      	ldr	r3, [r3, #0]
 801009e:	4a15      	ldr	r2, [pc, #84]	@ (80100f4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80100a0:	4293      	cmp	r3, r2
 80100a2:	d10c      	bne.n	80100be <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80100a4:	68bb      	ldr	r3, [r7, #8]
 80100a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80100aa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80100ac:	683b      	ldr	r3, [r7, #0]
 80100ae:	689b      	ldr	r3, [r3, #8]
 80100b0:	68ba      	ldr	r2, [r7, #8]
 80100b2:	4313      	orrs	r3, r2
 80100b4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	681b      	ldr	r3, [r3, #0]
 80100ba:	68ba      	ldr	r2, [r7, #8]
 80100bc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	2201      	movs	r2, #1
 80100c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	2200      	movs	r2, #0
 80100ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80100ce:	2300      	movs	r3, #0
}
 80100d0:	4618      	mov	r0, r3
 80100d2:	3714      	adds	r7, #20
 80100d4:	46bd      	mov	sp, r7
 80100d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100da:	4770      	bx	lr
 80100dc:	40010000 	.word	0x40010000
 80100e0:	40010400 	.word	0x40010400
 80100e4:	40000400 	.word	0x40000400
 80100e8:	40000800 	.word	0x40000800
 80100ec:	40000c00 	.word	0x40000c00
 80100f0:	40001800 	.word	0x40001800
 80100f4:	40014000 	.word	0x40014000

080100f8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80100f8:	b480      	push	{r7}
 80100fa:	b085      	sub	sp, #20
 80100fc:	af00      	add	r7, sp, #0
 80100fe:	6078      	str	r0, [r7, #4]
 8010100:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8010102:	2300      	movs	r3, #0
 8010104:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801010c:	2b01      	cmp	r3, #1
 801010e:	d101      	bne.n	8010114 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8010110:	2302      	movs	r3, #2
 8010112:	e065      	b.n	80101e0 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	2201      	movs	r2, #1
 8010118:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 801011c:	68fb      	ldr	r3, [r7, #12]
 801011e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8010122:	683b      	ldr	r3, [r7, #0]
 8010124:	68db      	ldr	r3, [r3, #12]
 8010126:	4313      	orrs	r3, r2
 8010128:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 801012a:	68fb      	ldr	r3, [r7, #12]
 801012c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8010130:	683b      	ldr	r3, [r7, #0]
 8010132:	689b      	ldr	r3, [r3, #8]
 8010134:	4313      	orrs	r3, r2
 8010136:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8010138:	68fb      	ldr	r3, [r7, #12]
 801013a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 801013e:	683b      	ldr	r3, [r7, #0]
 8010140:	685b      	ldr	r3, [r3, #4]
 8010142:	4313      	orrs	r3, r2
 8010144:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8010146:	68fb      	ldr	r3, [r7, #12]
 8010148:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 801014c:	683b      	ldr	r3, [r7, #0]
 801014e:	681b      	ldr	r3, [r3, #0]
 8010150:	4313      	orrs	r3, r2
 8010152:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8010154:	68fb      	ldr	r3, [r7, #12]
 8010156:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 801015a:	683b      	ldr	r3, [r7, #0]
 801015c:	691b      	ldr	r3, [r3, #16]
 801015e:	4313      	orrs	r3, r2
 8010160:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8010162:	68fb      	ldr	r3, [r7, #12]
 8010164:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8010168:	683b      	ldr	r3, [r7, #0]
 801016a:	695b      	ldr	r3, [r3, #20]
 801016c:	4313      	orrs	r3, r2
 801016e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8010170:	68fb      	ldr	r3, [r7, #12]
 8010172:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8010176:	683b      	ldr	r3, [r7, #0]
 8010178:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801017a:	4313      	orrs	r3, r2
 801017c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 801017e:	68fb      	ldr	r3, [r7, #12]
 8010180:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8010184:	683b      	ldr	r3, [r7, #0]
 8010186:	699b      	ldr	r3, [r3, #24]
 8010188:	041b      	lsls	r3, r3, #16
 801018a:	4313      	orrs	r3, r2
 801018c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	681b      	ldr	r3, [r3, #0]
 8010192:	4a16      	ldr	r2, [pc, #88]	@ (80101ec <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8010194:	4293      	cmp	r3, r2
 8010196:	d004      	beq.n	80101a2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	681b      	ldr	r3, [r3, #0]
 801019c:	4a14      	ldr	r2, [pc, #80]	@ (80101f0 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 801019e:	4293      	cmp	r3, r2
 80101a0:	d115      	bne.n	80101ce <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80101a2:	68fb      	ldr	r3, [r7, #12]
 80101a4:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80101a8:	683b      	ldr	r3, [r7, #0]
 80101aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80101ac:	051b      	lsls	r3, r3, #20
 80101ae:	4313      	orrs	r3, r2
 80101b0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80101b2:	68fb      	ldr	r3, [r7, #12]
 80101b4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80101b8:	683b      	ldr	r3, [r7, #0]
 80101ba:	69db      	ldr	r3, [r3, #28]
 80101bc:	4313      	orrs	r3, r2
 80101be:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80101c0:	68fb      	ldr	r3, [r7, #12]
 80101c2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80101c6:	683b      	ldr	r3, [r7, #0]
 80101c8:	6a1b      	ldr	r3, [r3, #32]
 80101ca:	4313      	orrs	r3, r2
 80101cc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	681b      	ldr	r3, [r3, #0]
 80101d2:	68fa      	ldr	r2, [r7, #12]
 80101d4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	2200      	movs	r2, #0
 80101da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80101de:	2300      	movs	r3, #0
}
 80101e0:	4618      	mov	r0, r3
 80101e2:	3714      	adds	r7, #20
 80101e4:	46bd      	mov	sp, r7
 80101e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101ea:	4770      	bx	lr
 80101ec:	40010000 	.word	0x40010000
 80101f0:	40010400 	.word	0x40010400

080101f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80101f4:	b480      	push	{r7}
 80101f6:	b083      	sub	sp, #12
 80101f8:	af00      	add	r7, sp, #0
 80101fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80101fc:	bf00      	nop
 80101fe:	370c      	adds	r7, #12
 8010200:	46bd      	mov	sp, r7
 8010202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010206:	4770      	bx	lr

08010208 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8010208:	b480      	push	{r7}
 801020a:	b083      	sub	sp, #12
 801020c:	af00      	add	r7, sp, #0
 801020e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8010210:	bf00      	nop
 8010212:	370c      	adds	r7, #12
 8010214:	46bd      	mov	sp, r7
 8010216:	f85d 7b04 	ldr.w	r7, [sp], #4
 801021a:	4770      	bx	lr

0801021c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 801021c:	b480      	push	{r7}
 801021e:	b083      	sub	sp, #12
 8010220:	af00      	add	r7, sp, #0
 8010222:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8010224:	bf00      	nop
 8010226:	370c      	adds	r7, #12
 8010228:	46bd      	mov	sp, r7
 801022a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801022e:	4770      	bx	lr

08010230 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8010230:	b580      	push	{r7, lr}
 8010232:	b082      	sub	sp, #8
 8010234:	af00      	add	r7, sp, #0
 8010236:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	2b00      	cmp	r3, #0
 801023c:	d101      	bne.n	8010242 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801023e:	2301      	movs	r3, #1
 8010240:	e042      	b.n	80102c8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010248:	2b00      	cmp	r3, #0
 801024a:	d106      	bne.n	801025a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	2200      	movs	r2, #0
 8010250:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8010254:	6878      	ldr	r0, [r7, #4]
 8010256:	f7f1 feb3 	bl	8001fc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	2224      	movs	r2, #36	@ 0x24
 801025e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	681b      	ldr	r3, [r3, #0]
 8010266:	681a      	ldr	r2, [r3, #0]
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	681b      	ldr	r3, [r3, #0]
 801026c:	f022 0201 	bic.w	r2, r2, #1
 8010270:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010276:	2b00      	cmp	r3, #0
 8010278:	d002      	beq.n	8010280 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 801027a:	6878      	ldr	r0, [r7, #4]
 801027c:	f000 fe94 	bl	8010fa8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8010280:	6878      	ldr	r0, [r7, #4]
 8010282:	f000 f929 	bl	80104d8 <UART_SetConfig>
 8010286:	4603      	mov	r3, r0
 8010288:	2b01      	cmp	r3, #1
 801028a:	d101      	bne.n	8010290 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 801028c:	2301      	movs	r3, #1
 801028e:	e01b      	b.n	80102c8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	681b      	ldr	r3, [r3, #0]
 8010294:	685a      	ldr	r2, [r3, #4]
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	681b      	ldr	r3, [r3, #0]
 801029a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 801029e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	681b      	ldr	r3, [r3, #0]
 80102a4:	689a      	ldr	r2, [r3, #8]
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	681b      	ldr	r3, [r3, #0]
 80102aa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80102ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	681b      	ldr	r3, [r3, #0]
 80102b4:	681a      	ldr	r2, [r3, #0]
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	681b      	ldr	r3, [r3, #0]
 80102ba:	f042 0201 	orr.w	r2, r2, #1
 80102be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80102c0:	6878      	ldr	r0, [r7, #4]
 80102c2:	f000 ff13 	bl	80110ec <UART_CheckIdleState>
 80102c6:	4603      	mov	r3, r0
}
 80102c8:	4618      	mov	r0, r3
 80102ca:	3708      	adds	r7, #8
 80102cc:	46bd      	mov	sp, r7
 80102ce:	bd80      	pop	{r7, pc}

080102d0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80102d0:	b580      	push	{r7, lr}
 80102d2:	b08a      	sub	sp, #40	@ 0x28
 80102d4:	af02      	add	r7, sp, #8
 80102d6:	60f8      	str	r0, [r7, #12]
 80102d8:	60b9      	str	r1, [r7, #8]
 80102da:	603b      	str	r3, [r7, #0]
 80102dc:	4613      	mov	r3, r2
 80102de:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80102e0:	68fb      	ldr	r3, [r7, #12]
 80102e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80102e6:	2b20      	cmp	r3, #32
 80102e8:	d17b      	bne.n	80103e2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80102ea:	68bb      	ldr	r3, [r7, #8]
 80102ec:	2b00      	cmp	r3, #0
 80102ee:	d002      	beq.n	80102f6 <HAL_UART_Transmit+0x26>
 80102f0:	88fb      	ldrh	r3, [r7, #6]
 80102f2:	2b00      	cmp	r3, #0
 80102f4:	d101      	bne.n	80102fa <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80102f6:	2301      	movs	r3, #1
 80102f8:	e074      	b.n	80103e4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80102fa:	68fb      	ldr	r3, [r7, #12]
 80102fc:	2200      	movs	r2, #0
 80102fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8010302:	68fb      	ldr	r3, [r7, #12]
 8010304:	2221      	movs	r2, #33	@ 0x21
 8010306:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801030a:	f7f2 f8e7 	bl	80024dc <HAL_GetTick>
 801030e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8010310:	68fb      	ldr	r3, [r7, #12]
 8010312:	88fa      	ldrh	r2, [r7, #6]
 8010314:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8010318:	68fb      	ldr	r3, [r7, #12]
 801031a:	88fa      	ldrh	r2, [r7, #6]
 801031c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010320:	68fb      	ldr	r3, [r7, #12]
 8010322:	689b      	ldr	r3, [r3, #8]
 8010324:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010328:	d108      	bne.n	801033c <HAL_UART_Transmit+0x6c>
 801032a:	68fb      	ldr	r3, [r7, #12]
 801032c:	691b      	ldr	r3, [r3, #16]
 801032e:	2b00      	cmp	r3, #0
 8010330:	d104      	bne.n	801033c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8010332:	2300      	movs	r3, #0
 8010334:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8010336:	68bb      	ldr	r3, [r7, #8]
 8010338:	61bb      	str	r3, [r7, #24]
 801033a:	e003      	b.n	8010344 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 801033c:	68bb      	ldr	r3, [r7, #8]
 801033e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8010340:	2300      	movs	r3, #0
 8010342:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8010344:	e030      	b.n	80103a8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8010346:	683b      	ldr	r3, [r7, #0]
 8010348:	9300      	str	r3, [sp, #0]
 801034a:	697b      	ldr	r3, [r7, #20]
 801034c:	2200      	movs	r2, #0
 801034e:	2180      	movs	r1, #128	@ 0x80
 8010350:	68f8      	ldr	r0, [r7, #12]
 8010352:	f000 ff75 	bl	8011240 <UART_WaitOnFlagUntilTimeout>
 8010356:	4603      	mov	r3, r0
 8010358:	2b00      	cmp	r3, #0
 801035a:	d005      	beq.n	8010368 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 801035c:	68fb      	ldr	r3, [r7, #12]
 801035e:	2220      	movs	r2, #32
 8010360:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8010364:	2303      	movs	r3, #3
 8010366:	e03d      	b.n	80103e4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8010368:	69fb      	ldr	r3, [r7, #28]
 801036a:	2b00      	cmp	r3, #0
 801036c:	d10b      	bne.n	8010386 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 801036e:	69bb      	ldr	r3, [r7, #24]
 8010370:	881b      	ldrh	r3, [r3, #0]
 8010372:	461a      	mov	r2, r3
 8010374:	68fb      	ldr	r3, [r7, #12]
 8010376:	681b      	ldr	r3, [r3, #0]
 8010378:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801037c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 801037e:	69bb      	ldr	r3, [r7, #24]
 8010380:	3302      	adds	r3, #2
 8010382:	61bb      	str	r3, [r7, #24]
 8010384:	e007      	b.n	8010396 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8010386:	69fb      	ldr	r3, [r7, #28]
 8010388:	781a      	ldrb	r2, [r3, #0]
 801038a:	68fb      	ldr	r3, [r7, #12]
 801038c:	681b      	ldr	r3, [r3, #0]
 801038e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8010390:	69fb      	ldr	r3, [r7, #28]
 8010392:	3301      	adds	r3, #1
 8010394:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8010396:	68fb      	ldr	r3, [r7, #12]
 8010398:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 801039c:	b29b      	uxth	r3, r3
 801039e:	3b01      	subs	r3, #1
 80103a0:	b29a      	uxth	r2, r3
 80103a2:	68fb      	ldr	r3, [r7, #12]
 80103a4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80103a8:	68fb      	ldr	r3, [r7, #12]
 80103aa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80103ae:	b29b      	uxth	r3, r3
 80103b0:	2b00      	cmp	r3, #0
 80103b2:	d1c8      	bne.n	8010346 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80103b4:	683b      	ldr	r3, [r7, #0]
 80103b6:	9300      	str	r3, [sp, #0]
 80103b8:	697b      	ldr	r3, [r7, #20]
 80103ba:	2200      	movs	r2, #0
 80103bc:	2140      	movs	r1, #64	@ 0x40
 80103be:	68f8      	ldr	r0, [r7, #12]
 80103c0:	f000 ff3e 	bl	8011240 <UART_WaitOnFlagUntilTimeout>
 80103c4:	4603      	mov	r3, r0
 80103c6:	2b00      	cmp	r3, #0
 80103c8:	d005      	beq.n	80103d6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80103ca:	68fb      	ldr	r3, [r7, #12]
 80103cc:	2220      	movs	r2, #32
 80103ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80103d2:	2303      	movs	r3, #3
 80103d4:	e006      	b.n	80103e4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80103d6:	68fb      	ldr	r3, [r7, #12]
 80103d8:	2220      	movs	r2, #32
 80103da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80103de:	2300      	movs	r3, #0
 80103e0:	e000      	b.n	80103e4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80103e2:	2302      	movs	r3, #2
  }
}
 80103e4:	4618      	mov	r0, r3
 80103e6:	3720      	adds	r7, #32
 80103e8:	46bd      	mov	sp, r7
 80103ea:	bd80      	pop	{r7, pc}

080103ec <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80103ec:	b580      	push	{r7, lr}
 80103ee:	b08a      	sub	sp, #40	@ 0x28
 80103f0:	af00      	add	r7, sp, #0
 80103f2:	60f8      	str	r0, [r7, #12]
 80103f4:	60b9      	str	r1, [r7, #8]
 80103f6:	4613      	mov	r3, r2
 80103f8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80103fa:	68fb      	ldr	r3, [r7, #12]
 80103fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010400:	2b20      	cmp	r3, #32
 8010402:	d137      	bne.n	8010474 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8010404:	68bb      	ldr	r3, [r7, #8]
 8010406:	2b00      	cmp	r3, #0
 8010408:	d002      	beq.n	8010410 <HAL_UART_Receive_DMA+0x24>
 801040a:	88fb      	ldrh	r3, [r7, #6]
 801040c:	2b00      	cmp	r3, #0
 801040e:	d101      	bne.n	8010414 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8010410:	2301      	movs	r3, #1
 8010412:	e030      	b.n	8010476 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010414:	68fb      	ldr	r3, [r7, #12]
 8010416:	2200      	movs	r2, #0
 8010418:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801041a:	68fb      	ldr	r3, [r7, #12]
 801041c:	681b      	ldr	r3, [r3, #0]
 801041e:	4a18      	ldr	r2, [pc, #96]	@ (8010480 <HAL_UART_Receive_DMA+0x94>)
 8010420:	4293      	cmp	r3, r2
 8010422:	d01f      	beq.n	8010464 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8010424:	68fb      	ldr	r3, [r7, #12]
 8010426:	681b      	ldr	r3, [r3, #0]
 8010428:	685b      	ldr	r3, [r3, #4]
 801042a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801042e:	2b00      	cmp	r3, #0
 8010430:	d018      	beq.n	8010464 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8010432:	68fb      	ldr	r3, [r7, #12]
 8010434:	681b      	ldr	r3, [r3, #0]
 8010436:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010438:	697b      	ldr	r3, [r7, #20]
 801043a:	e853 3f00 	ldrex	r3, [r3]
 801043e:	613b      	str	r3, [r7, #16]
   return(result);
 8010440:	693b      	ldr	r3, [r7, #16]
 8010442:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8010446:	627b      	str	r3, [r7, #36]	@ 0x24
 8010448:	68fb      	ldr	r3, [r7, #12]
 801044a:	681b      	ldr	r3, [r3, #0]
 801044c:	461a      	mov	r2, r3
 801044e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010450:	623b      	str	r3, [r7, #32]
 8010452:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010454:	69f9      	ldr	r1, [r7, #28]
 8010456:	6a3a      	ldr	r2, [r7, #32]
 8010458:	e841 2300 	strex	r3, r2, [r1]
 801045c:	61bb      	str	r3, [r7, #24]
   return(result);
 801045e:	69bb      	ldr	r3, [r7, #24]
 8010460:	2b00      	cmp	r3, #0
 8010462:	d1e6      	bne.n	8010432 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8010464:	88fb      	ldrh	r3, [r7, #6]
 8010466:	461a      	mov	r2, r3
 8010468:	68b9      	ldr	r1, [r7, #8]
 801046a:	68f8      	ldr	r0, [r7, #12]
 801046c:	f000 ff56 	bl	801131c <UART_Start_Receive_DMA>
 8010470:	4603      	mov	r3, r0
 8010472:	e000      	b.n	8010476 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8010474:	2302      	movs	r3, #2
  }
}
 8010476:	4618      	mov	r0, r3
 8010478:	3728      	adds	r7, #40	@ 0x28
 801047a:	46bd      	mov	sp, r7
 801047c:	bd80      	pop	{r7, pc}
 801047e:	bf00      	nop
 8010480:	58000c00 	.word	0x58000c00

08010484 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8010484:	b480      	push	{r7}
 8010486:	b083      	sub	sp, #12
 8010488:	af00      	add	r7, sp, #0
 801048a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 801048c:	bf00      	nop
 801048e:	370c      	adds	r7, #12
 8010490:	46bd      	mov	sp, r7
 8010492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010496:	4770      	bx	lr

08010498 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8010498:	b480      	push	{r7}
 801049a:	b083      	sub	sp, #12
 801049c:	af00      	add	r7, sp, #0
 801049e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80104a0:	bf00      	nop
 80104a2:	370c      	adds	r7, #12
 80104a4:	46bd      	mov	sp, r7
 80104a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104aa:	4770      	bx	lr

080104ac <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80104ac:	b480      	push	{r7}
 80104ae:	b083      	sub	sp, #12
 80104b0:	af00      	add	r7, sp, #0
 80104b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80104b4:	bf00      	nop
 80104b6:	370c      	adds	r7, #12
 80104b8:	46bd      	mov	sp, r7
 80104ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104be:	4770      	bx	lr

080104c0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80104c0:	b480      	push	{r7}
 80104c2:	b083      	sub	sp, #12
 80104c4:	af00      	add	r7, sp, #0
 80104c6:	6078      	str	r0, [r7, #4]
 80104c8:	460b      	mov	r3, r1
 80104ca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80104cc:	bf00      	nop
 80104ce:	370c      	adds	r7, #12
 80104d0:	46bd      	mov	sp, r7
 80104d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104d6:	4770      	bx	lr

080104d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80104d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80104dc:	b092      	sub	sp, #72	@ 0x48
 80104de:	af00      	add	r7, sp, #0
 80104e0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80104e2:	2300      	movs	r3, #0
 80104e4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80104e8:	697b      	ldr	r3, [r7, #20]
 80104ea:	689a      	ldr	r2, [r3, #8]
 80104ec:	697b      	ldr	r3, [r7, #20]
 80104ee:	691b      	ldr	r3, [r3, #16]
 80104f0:	431a      	orrs	r2, r3
 80104f2:	697b      	ldr	r3, [r7, #20]
 80104f4:	695b      	ldr	r3, [r3, #20]
 80104f6:	431a      	orrs	r2, r3
 80104f8:	697b      	ldr	r3, [r7, #20]
 80104fa:	69db      	ldr	r3, [r3, #28]
 80104fc:	4313      	orrs	r3, r2
 80104fe:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8010500:	697b      	ldr	r3, [r7, #20]
 8010502:	681b      	ldr	r3, [r3, #0]
 8010504:	681a      	ldr	r2, [r3, #0]
 8010506:	4bbe      	ldr	r3, [pc, #760]	@ (8010800 <UART_SetConfig+0x328>)
 8010508:	4013      	ands	r3, r2
 801050a:	697a      	ldr	r2, [r7, #20]
 801050c:	6812      	ldr	r2, [r2, #0]
 801050e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8010510:	430b      	orrs	r3, r1
 8010512:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010514:	697b      	ldr	r3, [r7, #20]
 8010516:	681b      	ldr	r3, [r3, #0]
 8010518:	685b      	ldr	r3, [r3, #4]
 801051a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 801051e:	697b      	ldr	r3, [r7, #20]
 8010520:	68da      	ldr	r2, [r3, #12]
 8010522:	697b      	ldr	r3, [r7, #20]
 8010524:	681b      	ldr	r3, [r3, #0]
 8010526:	430a      	orrs	r2, r1
 8010528:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801052a:	697b      	ldr	r3, [r7, #20]
 801052c:	699b      	ldr	r3, [r3, #24]
 801052e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8010530:	697b      	ldr	r3, [r7, #20]
 8010532:	681b      	ldr	r3, [r3, #0]
 8010534:	4ab3      	ldr	r2, [pc, #716]	@ (8010804 <UART_SetConfig+0x32c>)
 8010536:	4293      	cmp	r3, r2
 8010538:	d004      	beq.n	8010544 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801053a:	697b      	ldr	r3, [r7, #20]
 801053c:	6a1b      	ldr	r3, [r3, #32]
 801053e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010540:	4313      	orrs	r3, r2
 8010542:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8010544:	697b      	ldr	r3, [r7, #20]
 8010546:	681b      	ldr	r3, [r3, #0]
 8010548:	689a      	ldr	r2, [r3, #8]
 801054a:	4baf      	ldr	r3, [pc, #700]	@ (8010808 <UART_SetConfig+0x330>)
 801054c:	4013      	ands	r3, r2
 801054e:	697a      	ldr	r2, [r7, #20]
 8010550:	6812      	ldr	r2, [r2, #0]
 8010552:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8010554:	430b      	orrs	r3, r1
 8010556:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8010558:	697b      	ldr	r3, [r7, #20]
 801055a:	681b      	ldr	r3, [r3, #0]
 801055c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801055e:	f023 010f 	bic.w	r1, r3, #15
 8010562:	697b      	ldr	r3, [r7, #20]
 8010564:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010566:	697b      	ldr	r3, [r7, #20]
 8010568:	681b      	ldr	r3, [r3, #0]
 801056a:	430a      	orrs	r2, r1
 801056c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801056e:	697b      	ldr	r3, [r7, #20]
 8010570:	681b      	ldr	r3, [r3, #0]
 8010572:	4aa6      	ldr	r2, [pc, #664]	@ (801080c <UART_SetConfig+0x334>)
 8010574:	4293      	cmp	r3, r2
 8010576:	d177      	bne.n	8010668 <UART_SetConfig+0x190>
 8010578:	4ba5      	ldr	r3, [pc, #660]	@ (8010810 <UART_SetConfig+0x338>)
 801057a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801057c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8010580:	2b28      	cmp	r3, #40	@ 0x28
 8010582:	d86d      	bhi.n	8010660 <UART_SetConfig+0x188>
 8010584:	a201      	add	r2, pc, #4	@ (adr r2, 801058c <UART_SetConfig+0xb4>)
 8010586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801058a:	bf00      	nop
 801058c:	08010631 	.word	0x08010631
 8010590:	08010661 	.word	0x08010661
 8010594:	08010661 	.word	0x08010661
 8010598:	08010661 	.word	0x08010661
 801059c:	08010661 	.word	0x08010661
 80105a0:	08010661 	.word	0x08010661
 80105a4:	08010661 	.word	0x08010661
 80105a8:	08010661 	.word	0x08010661
 80105ac:	08010639 	.word	0x08010639
 80105b0:	08010661 	.word	0x08010661
 80105b4:	08010661 	.word	0x08010661
 80105b8:	08010661 	.word	0x08010661
 80105bc:	08010661 	.word	0x08010661
 80105c0:	08010661 	.word	0x08010661
 80105c4:	08010661 	.word	0x08010661
 80105c8:	08010661 	.word	0x08010661
 80105cc:	08010641 	.word	0x08010641
 80105d0:	08010661 	.word	0x08010661
 80105d4:	08010661 	.word	0x08010661
 80105d8:	08010661 	.word	0x08010661
 80105dc:	08010661 	.word	0x08010661
 80105e0:	08010661 	.word	0x08010661
 80105e4:	08010661 	.word	0x08010661
 80105e8:	08010661 	.word	0x08010661
 80105ec:	08010649 	.word	0x08010649
 80105f0:	08010661 	.word	0x08010661
 80105f4:	08010661 	.word	0x08010661
 80105f8:	08010661 	.word	0x08010661
 80105fc:	08010661 	.word	0x08010661
 8010600:	08010661 	.word	0x08010661
 8010604:	08010661 	.word	0x08010661
 8010608:	08010661 	.word	0x08010661
 801060c:	08010651 	.word	0x08010651
 8010610:	08010661 	.word	0x08010661
 8010614:	08010661 	.word	0x08010661
 8010618:	08010661 	.word	0x08010661
 801061c:	08010661 	.word	0x08010661
 8010620:	08010661 	.word	0x08010661
 8010624:	08010661 	.word	0x08010661
 8010628:	08010661 	.word	0x08010661
 801062c:	08010659 	.word	0x08010659
 8010630:	2301      	movs	r3, #1
 8010632:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010636:	e222      	b.n	8010a7e <UART_SetConfig+0x5a6>
 8010638:	2304      	movs	r3, #4
 801063a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801063e:	e21e      	b.n	8010a7e <UART_SetConfig+0x5a6>
 8010640:	2308      	movs	r3, #8
 8010642:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010646:	e21a      	b.n	8010a7e <UART_SetConfig+0x5a6>
 8010648:	2310      	movs	r3, #16
 801064a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801064e:	e216      	b.n	8010a7e <UART_SetConfig+0x5a6>
 8010650:	2320      	movs	r3, #32
 8010652:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010656:	e212      	b.n	8010a7e <UART_SetConfig+0x5a6>
 8010658:	2340      	movs	r3, #64	@ 0x40
 801065a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801065e:	e20e      	b.n	8010a7e <UART_SetConfig+0x5a6>
 8010660:	2380      	movs	r3, #128	@ 0x80
 8010662:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010666:	e20a      	b.n	8010a7e <UART_SetConfig+0x5a6>
 8010668:	697b      	ldr	r3, [r7, #20]
 801066a:	681b      	ldr	r3, [r3, #0]
 801066c:	4a69      	ldr	r2, [pc, #420]	@ (8010814 <UART_SetConfig+0x33c>)
 801066e:	4293      	cmp	r3, r2
 8010670:	d130      	bne.n	80106d4 <UART_SetConfig+0x1fc>
 8010672:	4b67      	ldr	r3, [pc, #412]	@ (8010810 <UART_SetConfig+0x338>)
 8010674:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010676:	f003 0307 	and.w	r3, r3, #7
 801067a:	2b05      	cmp	r3, #5
 801067c:	d826      	bhi.n	80106cc <UART_SetConfig+0x1f4>
 801067e:	a201      	add	r2, pc, #4	@ (adr r2, 8010684 <UART_SetConfig+0x1ac>)
 8010680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010684:	0801069d 	.word	0x0801069d
 8010688:	080106a5 	.word	0x080106a5
 801068c:	080106ad 	.word	0x080106ad
 8010690:	080106b5 	.word	0x080106b5
 8010694:	080106bd 	.word	0x080106bd
 8010698:	080106c5 	.word	0x080106c5
 801069c:	2300      	movs	r3, #0
 801069e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80106a2:	e1ec      	b.n	8010a7e <UART_SetConfig+0x5a6>
 80106a4:	2304      	movs	r3, #4
 80106a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80106aa:	e1e8      	b.n	8010a7e <UART_SetConfig+0x5a6>
 80106ac:	2308      	movs	r3, #8
 80106ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80106b2:	e1e4      	b.n	8010a7e <UART_SetConfig+0x5a6>
 80106b4:	2310      	movs	r3, #16
 80106b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80106ba:	e1e0      	b.n	8010a7e <UART_SetConfig+0x5a6>
 80106bc:	2320      	movs	r3, #32
 80106be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80106c2:	e1dc      	b.n	8010a7e <UART_SetConfig+0x5a6>
 80106c4:	2340      	movs	r3, #64	@ 0x40
 80106c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80106ca:	e1d8      	b.n	8010a7e <UART_SetConfig+0x5a6>
 80106cc:	2380      	movs	r3, #128	@ 0x80
 80106ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80106d2:	e1d4      	b.n	8010a7e <UART_SetConfig+0x5a6>
 80106d4:	697b      	ldr	r3, [r7, #20]
 80106d6:	681b      	ldr	r3, [r3, #0]
 80106d8:	4a4f      	ldr	r2, [pc, #316]	@ (8010818 <UART_SetConfig+0x340>)
 80106da:	4293      	cmp	r3, r2
 80106dc:	d130      	bne.n	8010740 <UART_SetConfig+0x268>
 80106de:	4b4c      	ldr	r3, [pc, #304]	@ (8010810 <UART_SetConfig+0x338>)
 80106e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80106e2:	f003 0307 	and.w	r3, r3, #7
 80106e6:	2b05      	cmp	r3, #5
 80106e8:	d826      	bhi.n	8010738 <UART_SetConfig+0x260>
 80106ea:	a201      	add	r2, pc, #4	@ (adr r2, 80106f0 <UART_SetConfig+0x218>)
 80106ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80106f0:	08010709 	.word	0x08010709
 80106f4:	08010711 	.word	0x08010711
 80106f8:	08010719 	.word	0x08010719
 80106fc:	08010721 	.word	0x08010721
 8010700:	08010729 	.word	0x08010729
 8010704:	08010731 	.word	0x08010731
 8010708:	2300      	movs	r3, #0
 801070a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801070e:	e1b6      	b.n	8010a7e <UART_SetConfig+0x5a6>
 8010710:	2304      	movs	r3, #4
 8010712:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010716:	e1b2      	b.n	8010a7e <UART_SetConfig+0x5a6>
 8010718:	2308      	movs	r3, #8
 801071a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801071e:	e1ae      	b.n	8010a7e <UART_SetConfig+0x5a6>
 8010720:	2310      	movs	r3, #16
 8010722:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010726:	e1aa      	b.n	8010a7e <UART_SetConfig+0x5a6>
 8010728:	2320      	movs	r3, #32
 801072a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801072e:	e1a6      	b.n	8010a7e <UART_SetConfig+0x5a6>
 8010730:	2340      	movs	r3, #64	@ 0x40
 8010732:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010736:	e1a2      	b.n	8010a7e <UART_SetConfig+0x5a6>
 8010738:	2380      	movs	r3, #128	@ 0x80
 801073a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801073e:	e19e      	b.n	8010a7e <UART_SetConfig+0x5a6>
 8010740:	697b      	ldr	r3, [r7, #20]
 8010742:	681b      	ldr	r3, [r3, #0]
 8010744:	4a35      	ldr	r2, [pc, #212]	@ (801081c <UART_SetConfig+0x344>)
 8010746:	4293      	cmp	r3, r2
 8010748:	d130      	bne.n	80107ac <UART_SetConfig+0x2d4>
 801074a:	4b31      	ldr	r3, [pc, #196]	@ (8010810 <UART_SetConfig+0x338>)
 801074c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801074e:	f003 0307 	and.w	r3, r3, #7
 8010752:	2b05      	cmp	r3, #5
 8010754:	d826      	bhi.n	80107a4 <UART_SetConfig+0x2cc>
 8010756:	a201      	add	r2, pc, #4	@ (adr r2, 801075c <UART_SetConfig+0x284>)
 8010758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801075c:	08010775 	.word	0x08010775
 8010760:	0801077d 	.word	0x0801077d
 8010764:	08010785 	.word	0x08010785
 8010768:	0801078d 	.word	0x0801078d
 801076c:	08010795 	.word	0x08010795
 8010770:	0801079d 	.word	0x0801079d
 8010774:	2300      	movs	r3, #0
 8010776:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801077a:	e180      	b.n	8010a7e <UART_SetConfig+0x5a6>
 801077c:	2304      	movs	r3, #4
 801077e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010782:	e17c      	b.n	8010a7e <UART_SetConfig+0x5a6>
 8010784:	2308      	movs	r3, #8
 8010786:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801078a:	e178      	b.n	8010a7e <UART_SetConfig+0x5a6>
 801078c:	2310      	movs	r3, #16
 801078e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010792:	e174      	b.n	8010a7e <UART_SetConfig+0x5a6>
 8010794:	2320      	movs	r3, #32
 8010796:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801079a:	e170      	b.n	8010a7e <UART_SetConfig+0x5a6>
 801079c:	2340      	movs	r3, #64	@ 0x40
 801079e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80107a2:	e16c      	b.n	8010a7e <UART_SetConfig+0x5a6>
 80107a4:	2380      	movs	r3, #128	@ 0x80
 80107a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80107aa:	e168      	b.n	8010a7e <UART_SetConfig+0x5a6>
 80107ac:	697b      	ldr	r3, [r7, #20]
 80107ae:	681b      	ldr	r3, [r3, #0]
 80107b0:	4a1b      	ldr	r2, [pc, #108]	@ (8010820 <UART_SetConfig+0x348>)
 80107b2:	4293      	cmp	r3, r2
 80107b4:	d142      	bne.n	801083c <UART_SetConfig+0x364>
 80107b6:	4b16      	ldr	r3, [pc, #88]	@ (8010810 <UART_SetConfig+0x338>)
 80107b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80107ba:	f003 0307 	and.w	r3, r3, #7
 80107be:	2b05      	cmp	r3, #5
 80107c0:	d838      	bhi.n	8010834 <UART_SetConfig+0x35c>
 80107c2:	a201      	add	r2, pc, #4	@ (adr r2, 80107c8 <UART_SetConfig+0x2f0>)
 80107c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80107c8:	080107e1 	.word	0x080107e1
 80107cc:	080107e9 	.word	0x080107e9
 80107d0:	080107f1 	.word	0x080107f1
 80107d4:	080107f9 	.word	0x080107f9
 80107d8:	08010825 	.word	0x08010825
 80107dc:	0801082d 	.word	0x0801082d
 80107e0:	2300      	movs	r3, #0
 80107e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80107e6:	e14a      	b.n	8010a7e <UART_SetConfig+0x5a6>
 80107e8:	2304      	movs	r3, #4
 80107ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80107ee:	e146      	b.n	8010a7e <UART_SetConfig+0x5a6>
 80107f0:	2308      	movs	r3, #8
 80107f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80107f6:	e142      	b.n	8010a7e <UART_SetConfig+0x5a6>
 80107f8:	2310      	movs	r3, #16
 80107fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80107fe:	e13e      	b.n	8010a7e <UART_SetConfig+0x5a6>
 8010800:	cfff69f3 	.word	0xcfff69f3
 8010804:	58000c00 	.word	0x58000c00
 8010808:	11fff4ff 	.word	0x11fff4ff
 801080c:	40011000 	.word	0x40011000
 8010810:	58024400 	.word	0x58024400
 8010814:	40004400 	.word	0x40004400
 8010818:	40004800 	.word	0x40004800
 801081c:	40004c00 	.word	0x40004c00
 8010820:	40005000 	.word	0x40005000
 8010824:	2320      	movs	r3, #32
 8010826:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801082a:	e128      	b.n	8010a7e <UART_SetConfig+0x5a6>
 801082c:	2340      	movs	r3, #64	@ 0x40
 801082e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010832:	e124      	b.n	8010a7e <UART_SetConfig+0x5a6>
 8010834:	2380      	movs	r3, #128	@ 0x80
 8010836:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801083a:	e120      	b.n	8010a7e <UART_SetConfig+0x5a6>
 801083c:	697b      	ldr	r3, [r7, #20]
 801083e:	681b      	ldr	r3, [r3, #0]
 8010840:	4acb      	ldr	r2, [pc, #812]	@ (8010b70 <UART_SetConfig+0x698>)
 8010842:	4293      	cmp	r3, r2
 8010844:	d176      	bne.n	8010934 <UART_SetConfig+0x45c>
 8010846:	4bcb      	ldr	r3, [pc, #812]	@ (8010b74 <UART_SetConfig+0x69c>)
 8010848:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801084a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801084e:	2b28      	cmp	r3, #40	@ 0x28
 8010850:	d86c      	bhi.n	801092c <UART_SetConfig+0x454>
 8010852:	a201      	add	r2, pc, #4	@ (adr r2, 8010858 <UART_SetConfig+0x380>)
 8010854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010858:	080108fd 	.word	0x080108fd
 801085c:	0801092d 	.word	0x0801092d
 8010860:	0801092d 	.word	0x0801092d
 8010864:	0801092d 	.word	0x0801092d
 8010868:	0801092d 	.word	0x0801092d
 801086c:	0801092d 	.word	0x0801092d
 8010870:	0801092d 	.word	0x0801092d
 8010874:	0801092d 	.word	0x0801092d
 8010878:	08010905 	.word	0x08010905
 801087c:	0801092d 	.word	0x0801092d
 8010880:	0801092d 	.word	0x0801092d
 8010884:	0801092d 	.word	0x0801092d
 8010888:	0801092d 	.word	0x0801092d
 801088c:	0801092d 	.word	0x0801092d
 8010890:	0801092d 	.word	0x0801092d
 8010894:	0801092d 	.word	0x0801092d
 8010898:	0801090d 	.word	0x0801090d
 801089c:	0801092d 	.word	0x0801092d
 80108a0:	0801092d 	.word	0x0801092d
 80108a4:	0801092d 	.word	0x0801092d
 80108a8:	0801092d 	.word	0x0801092d
 80108ac:	0801092d 	.word	0x0801092d
 80108b0:	0801092d 	.word	0x0801092d
 80108b4:	0801092d 	.word	0x0801092d
 80108b8:	08010915 	.word	0x08010915
 80108bc:	0801092d 	.word	0x0801092d
 80108c0:	0801092d 	.word	0x0801092d
 80108c4:	0801092d 	.word	0x0801092d
 80108c8:	0801092d 	.word	0x0801092d
 80108cc:	0801092d 	.word	0x0801092d
 80108d0:	0801092d 	.word	0x0801092d
 80108d4:	0801092d 	.word	0x0801092d
 80108d8:	0801091d 	.word	0x0801091d
 80108dc:	0801092d 	.word	0x0801092d
 80108e0:	0801092d 	.word	0x0801092d
 80108e4:	0801092d 	.word	0x0801092d
 80108e8:	0801092d 	.word	0x0801092d
 80108ec:	0801092d 	.word	0x0801092d
 80108f0:	0801092d 	.word	0x0801092d
 80108f4:	0801092d 	.word	0x0801092d
 80108f8:	08010925 	.word	0x08010925
 80108fc:	2301      	movs	r3, #1
 80108fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010902:	e0bc      	b.n	8010a7e <UART_SetConfig+0x5a6>
 8010904:	2304      	movs	r3, #4
 8010906:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801090a:	e0b8      	b.n	8010a7e <UART_SetConfig+0x5a6>
 801090c:	2308      	movs	r3, #8
 801090e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010912:	e0b4      	b.n	8010a7e <UART_SetConfig+0x5a6>
 8010914:	2310      	movs	r3, #16
 8010916:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801091a:	e0b0      	b.n	8010a7e <UART_SetConfig+0x5a6>
 801091c:	2320      	movs	r3, #32
 801091e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010922:	e0ac      	b.n	8010a7e <UART_SetConfig+0x5a6>
 8010924:	2340      	movs	r3, #64	@ 0x40
 8010926:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801092a:	e0a8      	b.n	8010a7e <UART_SetConfig+0x5a6>
 801092c:	2380      	movs	r3, #128	@ 0x80
 801092e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010932:	e0a4      	b.n	8010a7e <UART_SetConfig+0x5a6>
 8010934:	697b      	ldr	r3, [r7, #20]
 8010936:	681b      	ldr	r3, [r3, #0]
 8010938:	4a8f      	ldr	r2, [pc, #572]	@ (8010b78 <UART_SetConfig+0x6a0>)
 801093a:	4293      	cmp	r3, r2
 801093c:	d130      	bne.n	80109a0 <UART_SetConfig+0x4c8>
 801093e:	4b8d      	ldr	r3, [pc, #564]	@ (8010b74 <UART_SetConfig+0x69c>)
 8010940:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010942:	f003 0307 	and.w	r3, r3, #7
 8010946:	2b05      	cmp	r3, #5
 8010948:	d826      	bhi.n	8010998 <UART_SetConfig+0x4c0>
 801094a:	a201      	add	r2, pc, #4	@ (adr r2, 8010950 <UART_SetConfig+0x478>)
 801094c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010950:	08010969 	.word	0x08010969
 8010954:	08010971 	.word	0x08010971
 8010958:	08010979 	.word	0x08010979
 801095c:	08010981 	.word	0x08010981
 8010960:	08010989 	.word	0x08010989
 8010964:	08010991 	.word	0x08010991
 8010968:	2300      	movs	r3, #0
 801096a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801096e:	e086      	b.n	8010a7e <UART_SetConfig+0x5a6>
 8010970:	2304      	movs	r3, #4
 8010972:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010976:	e082      	b.n	8010a7e <UART_SetConfig+0x5a6>
 8010978:	2308      	movs	r3, #8
 801097a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801097e:	e07e      	b.n	8010a7e <UART_SetConfig+0x5a6>
 8010980:	2310      	movs	r3, #16
 8010982:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010986:	e07a      	b.n	8010a7e <UART_SetConfig+0x5a6>
 8010988:	2320      	movs	r3, #32
 801098a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801098e:	e076      	b.n	8010a7e <UART_SetConfig+0x5a6>
 8010990:	2340      	movs	r3, #64	@ 0x40
 8010992:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010996:	e072      	b.n	8010a7e <UART_SetConfig+0x5a6>
 8010998:	2380      	movs	r3, #128	@ 0x80
 801099a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801099e:	e06e      	b.n	8010a7e <UART_SetConfig+0x5a6>
 80109a0:	697b      	ldr	r3, [r7, #20]
 80109a2:	681b      	ldr	r3, [r3, #0]
 80109a4:	4a75      	ldr	r2, [pc, #468]	@ (8010b7c <UART_SetConfig+0x6a4>)
 80109a6:	4293      	cmp	r3, r2
 80109a8:	d130      	bne.n	8010a0c <UART_SetConfig+0x534>
 80109aa:	4b72      	ldr	r3, [pc, #456]	@ (8010b74 <UART_SetConfig+0x69c>)
 80109ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80109ae:	f003 0307 	and.w	r3, r3, #7
 80109b2:	2b05      	cmp	r3, #5
 80109b4:	d826      	bhi.n	8010a04 <UART_SetConfig+0x52c>
 80109b6:	a201      	add	r2, pc, #4	@ (adr r2, 80109bc <UART_SetConfig+0x4e4>)
 80109b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80109bc:	080109d5 	.word	0x080109d5
 80109c0:	080109dd 	.word	0x080109dd
 80109c4:	080109e5 	.word	0x080109e5
 80109c8:	080109ed 	.word	0x080109ed
 80109cc:	080109f5 	.word	0x080109f5
 80109d0:	080109fd 	.word	0x080109fd
 80109d4:	2300      	movs	r3, #0
 80109d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80109da:	e050      	b.n	8010a7e <UART_SetConfig+0x5a6>
 80109dc:	2304      	movs	r3, #4
 80109de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80109e2:	e04c      	b.n	8010a7e <UART_SetConfig+0x5a6>
 80109e4:	2308      	movs	r3, #8
 80109e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80109ea:	e048      	b.n	8010a7e <UART_SetConfig+0x5a6>
 80109ec:	2310      	movs	r3, #16
 80109ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80109f2:	e044      	b.n	8010a7e <UART_SetConfig+0x5a6>
 80109f4:	2320      	movs	r3, #32
 80109f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80109fa:	e040      	b.n	8010a7e <UART_SetConfig+0x5a6>
 80109fc:	2340      	movs	r3, #64	@ 0x40
 80109fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010a02:	e03c      	b.n	8010a7e <UART_SetConfig+0x5a6>
 8010a04:	2380      	movs	r3, #128	@ 0x80
 8010a06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010a0a:	e038      	b.n	8010a7e <UART_SetConfig+0x5a6>
 8010a0c:	697b      	ldr	r3, [r7, #20]
 8010a0e:	681b      	ldr	r3, [r3, #0]
 8010a10:	4a5b      	ldr	r2, [pc, #364]	@ (8010b80 <UART_SetConfig+0x6a8>)
 8010a12:	4293      	cmp	r3, r2
 8010a14:	d130      	bne.n	8010a78 <UART_SetConfig+0x5a0>
 8010a16:	4b57      	ldr	r3, [pc, #348]	@ (8010b74 <UART_SetConfig+0x69c>)
 8010a18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010a1a:	f003 0307 	and.w	r3, r3, #7
 8010a1e:	2b05      	cmp	r3, #5
 8010a20:	d826      	bhi.n	8010a70 <UART_SetConfig+0x598>
 8010a22:	a201      	add	r2, pc, #4	@ (adr r2, 8010a28 <UART_SetConfig+0x550>)
 8010a24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a28:	08010a41 	.word	0x08010a41
 8010a2c:	08010a49 	.word	0x08010a49
 8010a30:	08010a51 	.word	0x08010a51
 8010a34:	08010a59 	.word	0x08010a59
 8010a38:	08010a61 	.word	0x08010a61
 8010a3c:	08010a69 	.word	0x08010a69
 8010a40:	2302      	movs	r3, #2
 8010a42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010a46:	e01a      	b.n	8010a7e <UART_SetConfig+0x5a6>
 8010a48:	2304      	movs	r3, #4
 8010a4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010a4e:	e016      	b.n	8010a7e <UART_SetConfig+0x5a6>
 8010a50:	2308      	movs	r3, #8
 8010a52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010a56:	e012      	b.n	8010a7e <UART_SetConfig+0x5a6>
 8010a58:	2310      	movs	r3, #16
 8010a5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010a5e:	e00e      	b.n	8010a7e <UART_SetConfig+0x5a6>
 8010a60:	2320      	movs	r3, #32
 8010a62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010a66:	e00a      	b.n	8010a7e <UART_SetConfig+0x5a6>
 8010a68:	2340      	movs	r3, #64	@ 0x40
 8010a6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010a6e:	e006      	b.n	8010a7e <UART_SetConfig+0x5a6>
 8010a70:	2380      	movs	r3, #128	@ 0x80
 8010a72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010a76:	e002      	b.n	8010a7e <UART_SetConfig+0x5a6>
 8010a78:	2380      	movs	r3, #128	@ 0x80
 8010a7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8010a7e:	697b      	ldr	r3, [r7, #20]
 8010a80:	681b      	ldr	r3, [r3, #0]
 8010a82:	4a3f      	ldr	r2, [pc, #252]	@ (8010b80 <UART_SetConfig+0x6a8>)
 8010a84:	4293      	cmp	r3, r2
 8010a86:	f040 80f8 	bne.w	8010c7a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8010a8a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8010a8e:	2b20      	cmp	r3, #32
 8010a90:	dc46      	bgt.n	8010b20 <UART_SetConfig+0x648>
 8010a92:	2b02      	cmp	r3, #2
 8010a94:	f2c0 8082 	blt.w	8010b9c <UART_SetConfig+0x6c4>
 8010a98:	3b02      	subs	r3, #2
 8010a9a:	2b1e      	cmp	r3, #30
 8010a9c:	d87e      	bhi.n	8010b9c <UART_SetConfig+0x6c4>
 8010a9e:	a201      	add	r2, pc, #4	@ (adr r2, 8010aa4 <UART_SetConfig+0x5cc>)
 8010aa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010aa4:	08010b27 	.word	0x08010b27
 8010aa8:	08010b9d 	.word	0x08010b9d
 8010aac:	08010b2f 	.word	0x08010b2f
 8010ab0:	08010b9d 	.word	0x08010b9d
 8010ab4:	08010b9d 	.word	0x08010b9d
 8010ab8:	08010b9d 	.word	0x08010b9d
 8010abc:	08010b3f 	.word	0x08010b3f
 8010ac0:	08010b9d 	.word	0x08010b9d
 8010ac4:	08010b9d 	.word	0x08010b9d
 8010ac8:	08010b9d 	.word	0x08010b9d
 8010acc:	08010b9d 	.word	0x08010b9d
 8010ad0:	08010b9d 	.word	0x08010b9d
 8010ad4:	08010b9d 	.word	0x08010b9d
 8010ad8:	08010b9d 	.word	0x08010b9d
 8010adc:	08010b4f 	.word	0x08010b4f
 8010ae0:	08010b9d 	.word	0x08010b9d
 8010ae4:	08010b9d 	.word	0x08010b9d
 8010ae8:	08010b9d 	.word	0x08010b9d
 8010aec:	08010b9d 	.word	0x08010b9d
 8010af0:	08010b9d 	.word	0x08010b9d
 8010af4:	08010b9d 	.word	0x08010b9d
 8010af8:	08010b9d 	.word	0x08010b9d
 8010afc:	08010b9d 	.word	0x08010b9d
 8010b00:	08010b9d 	.word	0x08010b9d
 8010b04:	08010b9d 	.word	0x08010b9d
 8010b08:	08010b9d 	.word	0x08010b9d
 8010b0c:	08010b9d 	.word	0x08010b9d
 8010b10:	08010b9d 	.word	0x08010b9d
 8010b14:	08010b9d 	.word	0x08010b9d
 8010b18:	08010b9d 	.word	0x08010b9d
 8010b1c:	08010b8f 	.word	0x08010b8f
 8010b20:	2b40      	cmp	r3, #64	@ 0x40
 8010b22:	d037      	beq.n	8010b94 <UART_SetConfig+0x6bc>
 8010b24:	e03a      	b.n	8010b9c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8010b26:	f7fd fd51 	bl	800e5cc <HAL_RCCEx_GetD3PCLK1Freq>
 8010b2a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8010b2c:	e03c      	b.n	8010ba8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010b2e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010b32:	4618      	mov	r0, r3
 8010b34:	f7fd fd60 	bl	800e5f8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010b38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010b3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010b3c:	e034      	b.n	8010ba8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010b3e:	f107 0318 	add.w	r3, r7, #24
 8010b42:	4618      	mov	r0, r3
 8010b44:	f7fd feac 	bl	800e8a0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010b48:	69fb      	ldr	r3, [r7, #28]
 8010b4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010b4c:	e02c      	b.n	8010ba8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010b4e:	4b09      	ldr	r3, [pc, #36]	@ (8010b74 <UART_SetConfig+0x69c>)
 8010b50:	681b      	ldr	r3, [r3, #0]
 8010b52:	f003 0320 	and.w	r3, r3, #32
 8010b56:	2b00      	cmp	r3, #0
 8010b58:	d016      	beq.n	8010b88 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010b5a:	4b06      	ldr	r3, [pc, #24]	@ (8010b74 <UART_SetConfig+0x69c>)
 8010b5c:	681b      	ldr	r3, [r3, #0]
 8010b5e:	08db      	lsrs	r3, r3, #3
 8010b60:	f003 0303 	and.w	r3, r3, #3
 8010b64:	4a07      	ldr	r2, [pc, #28]	@ (8010b84 <UART_SetConfig+0x6ac>)
 8010b66:	fa22 f303 	lsr.w	r3, r2, r3
 8010b6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010b6c:	e01c      	b.n	8010ba8 <UART_SetConfig+0x6d0>
 8010b6e:	bf00      	nop
 8010b70:	40011400 	.word	0x40011400
 8010b74:	58024400 	.word	0x58024400
 8010b78:	40007800 	.word	0x40007800
 8010b7c:	40007c00 	.word	0x40007c00
 8010b80:	58000c00 	.word	0x58000c00
 8010b84:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8010b88:	4b9d      	ldr	r3, [pc, #628]	@ (8010e00 <UART_SetConfig+0x928>)
 8010b8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010b8c:	e00c      	b.n	8010ba8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010b8e:	4b9d      	ldr	r3, [pc, #628]	@ (8010e04 <UART_SetConfig+0x92c>)
 8010b90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010b92:	e009      	b.n	8010ba8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010b94:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010b98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010b9a:	e005      	b.n	8010ba8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8010b9c:	2300      	movs	r3, #0
 8010b9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8010ba0:	2301      	movs	r3, #1
 8010ba2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8010ba6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8010ba8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010baa:	2b00      	cmp	r3, #0
 8010bac:	f000 81de 	beq.w	8010f6c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8010bb0:	697b      	ldr	r3, [r7, #20]
 8010bb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010bb4:	4a94      	ldr	r2, [pc, #592]	@ (8010e08 <UART_SetConfig+0x930>)
 8010bb6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010bba:	461a      	mov	r2, r3
 8010bbc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010bbe:	fbb3 f3f2 	udiv	r3, r3, r2
 8010bc2:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010bc4:	697b      	ldr	r3, [r7, #20]
 8010bc6:	685a      	ldr	r2, [r3, #4]
 8010bc8:	4613      	mov	r3, r2
 8010bca:	005b      	lsls	r3, r3, #1
 8010bcc:	4413      	add	r3, r2
 8010bce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010bd0:	429a      	cmp	r2, r3
 8010bd2:	d305      	bcc.n	8010be0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8010bd4:	697b      	ldr	r3, [r7, #20]
 8010bd6:	685b      	ldr	r3, [r3, #4]
 8010bd8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010bda:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010bdc:	429a      	cmp	r2, r3
 8010bde:	d903      	bls.n	8010be8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8010be0:	2301      	movs	r3, #1
 8010be2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8010be6:	e1c1      	b.n	8010f6c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010be8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010bea:	2200      	movs	r2, #0
 8010bec:	60bb      	str	r3, [r7, #8]
 8010bee:	60fa      	str	r2, [r7, #12]
 8010bf0:	697b      	ldr	r3, [r7, #20]
 8010bf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010bf4:	4a84      	ldr	r2, [pc, #528]	@ (8010e08 <UART_SetConfig+0x930>)
 8010bf6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010bfa:	b29b      	uxth	r3, r3
 8010bfc:	2200      	movs	r2, #0
 8010bfe:	603b      	str	r3, [r7, #0]
 8010c00:	607a      	str	r2, [r7, #4]
 8010c02:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010c06:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8010c0a:	f7ef fbc1 	bl	8000390 <__aeabi_uldivmod>
 8010c0e:	4602      	mov	r2, r0
 8010c10:	460b      	mov	r3, r1
 8010c12:	4610      	mov	r0, r2
 8010c14:	4619      	mov	r1, r3
 8010c16:	f04f 0200 	mov.w	r2, #0
 8010c1a:	f04f 0300 	mov.w	r3, #0
 8010c1e:	020b      	lsls	r3, r1, #8
 8010c20:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8010c24:	0202      	lsls	r2, r0, #8
 8010c26:	6979      	ldr	r1, [r7, #20]
 8010c28:	6849      	ldr	r1, [r1, #4]
 8010c2a:	0849      	lsrs	r1, r1, #1
 8010c2c:	2000      	movs	r0, #0
 8010c2e:	460c      	mov	r4, r1
 8010c30:	4605      	mov	r5, r0
 8010c32:	eb12 0804 	adds.w	r8, r2, r4
 8010c36:	eb43 0905 	adc.w	r9, r3, r5
 8010c3a:	697b      	ldr	r3, [r7, #20]
 8010c3c:	685b      	ldr	r3, [r3, #4]
 8010c3e:	2200      	movs	r2, #0
 8010c40:	469a      	mov	sl, r3
 8010c42:	4693      	mov	fp, r2
 8010c44:	4652      	mov	r2, sl
 8010c46:	465b      	mov	r3, fp
 8010c48:	4640      	mov	r0, r8
 8010c4a:	4649      	mov	r1, r9
 8010c4c:	f7ef fba0 	bl	8000390 <__aeabi_uldivmod>
 8010c50:	4602      	mov	r2, r0
 8010c52:	460b      	mov	r3, r1
 8010c54:	4613      	mov	r3, r2
 8010c56:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8010c58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c5a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8010c5e:	d308      	bcc.n	8010c72 <UART_SetConfig+0x79a>
 8010c60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c62:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8010c66:	d204      	bcs.n	8010c72 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8010c68:	697b      	ldr	r3, [r7, #20]
 8010c6a:	681b      	ldr	r3, [r3, #0]
 8010c6c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010c6e:	60da      	str	r2, [r3, #12]
 8010c70:	e17c      	b.n	8010f6c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8010c72:	2301      	movs	r3, #1
 8010c74:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8010c78:	e178      	b.n	8010f6c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010c7a:	697b      	ldr	r3, [r7, #20]
 8010c7c:	69db      	ldr	r3, [r3, #28]
 8010c7e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8010c82:	f040 80c5 	bne.w	8010e10 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8010c86:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8010c8a:	2b20      	cmp	r3, #32
 8010c8c:	dc48      	bgt.n	8010d20 <UART_SetConfig+0x848>
 8010c8e:	2b00      	cmp	r3, #0
 8010c90:	db7b      	blt.n	8010d8a <UART_SetConfig+0x8b2>
 8010c92:	2b20      	cmp	r3, #32
 8010c94:	d879      	bhi.n	8010d8a <UART_SetConfig+0x8b2>
 8010c96:	a201      	add	r2, pc, #4	@ (adr r2, 8010c9c <UART_SetConfig+0x7c4>)
 8010c98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c9c:	08010d27 	.word	0x08010d27
 8010ca0:	08010d2f 	.word	0x08010d2f
 8010ca4:	08010d8b 	.word	0x08010d8b
 8010ca8:	08010d8b 	.word	0x08010d8b
 8010cac:	08010d37 	.word	0x08010d37
 8010cb0:	08010d8b 	.word	0x08010d8b
 8010cb4:	08010d8b 	.word	0x08010d8b
 8010cb8:	08010d8b 	.word	0x08010d8b
 8010cbc:	08010d47 	.word	0x08010d47
 8010cc0:	08010d8b 	.word	0x08010d8b
 8010cc4:	08010d8b 	.word	0x08010d8b
 8010cc8:	08010d8b 	.word	0x08010d8b
 8010ccc:	08010d8b 	.word	0x08010d8b
 8010cd0:	08010d8b 	.word	0x08010d8b
 8010cd4:	08010d8b 	.word	0x08010d8b
 8010cd8:	08010d8b 	.word	0x08010d8b
 8010cdc:	08010d57 	.word	0x08010d57
 8010ce0:	08010d8b 	.word	0x08010d8b
 8010ce4:	08010d8b 	.word	0x08010d8b
 8010ce8:	08010d8b 	.word	0x08010d8b
 8010cec:	08010d8b 	.word	0x08010d8b
 8010cf0:	08010d8b 	.word	0x08010d8b
 8010cf4:	08010d8b 	.word	0x08010d8b
 8010cf8:	08010d8b 	.word	0x08010d8b
 8010cfc:	08010d8b 	.word	0x08010d8b
 8010d00:	08010d8b 	.word	0x08010d8b
 8010d04:	08010d8b 	.word	0x08010d8b
 8010d08:	08010d8b 	.word	0x08010d8b
 8010d0c:	08010d8b 	.word	0x08010d8b
 8010d10:	08010d8b 	.word	0x08010d8b
 8010d14:	08010d8b 	.word	0x08010d8b
 8010d18:	08010d8b 	.word	0x08010d8b
 8010d1c:	08010d7d 	.word	0x08010d7d
 8010d20:	2b40      	cmp	r3, #64	@ 0x40
 8010d22:	d02e      	beq.n	8010d82 <UART_SetConfig+0x8aa>
 8010d24:	e031      	b.n	8010d8a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010d26:	f7fc fa1b 	bl	800d160 <HAL_RCC_GetPCLK1Freq>
 8010d2a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8010d2c:	e033      	b.n	8010d96 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010d2e:	f7fc fa2d 	bl	800d18c <HAL_RCC_GetPCLK2Freq>
 8010d32:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8010d34:	e02f      	b.n	8010d96 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010d36:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010d3a:	4618      	mov	r0, r3
 8010d3c:	f7fd fc5c 	bl	800e5f8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010d40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010d42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010d44:	e027      	b.n	8010d96 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010d46:	f107 0318 	add.w	r3, r7, #24
 8010d4a:	4618      	mov	r0, r3
 8010d4c:	f7fd fda8 	bl	800e8a0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010d50:	69fb      	ldr	r3, [r7, #28]
 8010d52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010d54:	e01f      	b.n	8010d96 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010d56:	4b2d      	ldr	r3, [pc, #180]	@ (8010e0c <UART_SetConfig+0x934>)
 8010d58:	681b      	ldr	r3, [r3, #0]
 8010d5a:	f003 0320 	and.w	r3, r3, #32
 8010d5e:	2b00      	cmp	r3, #0
 8010d60:	d009      	beq.n	8010d76 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010d62:	4b2a      	ldr	r3, [pc, #168]	@ (8010e0c <UART_SetConfig+0x934>)
 8010d64:	681b      	ldr	r3, [r3, #0]
 8010d66:	08db      	lsrs	r3, r3, #3
 8010d68:	f003 0303 	and.w	r3, r3, #3
 8010d6c:	4a24      	ldr	r2, [pc, #144]	@ (8010e00 <UART_SetConfig+0x928>)
 8010d6e:	fa22 f303 	lsr.w	r3, r2, r3
 8010d72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010d74:	e00f      	b.n	8010d96 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8010d76:	4b22      	ldr	r3, [pc, #136]	@ (8010e00 <UART_SetConfig+0x928>)
 8010d78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010d7a:	e00c      	b.n	8010d96 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010d7c:	4b21      	ldr	r3, [pc, #132]	@ (8010e04 <UART_SetConfig+0x92c>)
 8010d7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010d80:	e009      	b.n	8010d96 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010d82:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010d86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010d88:	e005      	b.n	8010d96 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8010d8a:	2300      	movs	r3, #0
 8010d8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8010d8e:	2301      	movs	r3, #1
 8010d90:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8010d94:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8010d96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010d98:	2b00      	cmp	r3, #0
 8010d9a:	f000 80e7 	beq.w	8010f6c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010d9e:	697b      	ldr	r3, [r7, #20]
 8010da0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010da2:	4a19      	ldr	r2, [pc, #100]	@ (8010e08 <UART_SetConfig+0x930>)
 8010da4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010da8:	461a      	mov	r2, r3
 8010daa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010dac:	fbb3 f3f2 	udiv	r3, r3, r2
 8010db0:	005a      	lsls	r2, r3, #1
 8010db2:	697b      	ldr	r3, [r7, #20]
 8010db4:	685b      	ldr	r3, [r3, #4]
 8010db6:	085b      	lsrs	r3, r3, #1
 8010db8:	441a      	add	r2, r3
 8010dba:	697b      	ldr	r3, [r7, #20]
 8010dbc:	685b      	ldr	r3, [r3, #4]
 8010dbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8010dc2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010dc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010dc6:	2b0f      	cmp	r3, #15
 8010dc8:	d916      	bls.n	8010df8 <UART_SetConfig+0x920>
 8010dca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010dcc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010dd0:	d212      	bcs.n	8010df8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8010dd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010dd4:	b29b      	uxth	r3, r3
 8010dd6:	f023 030f 	bic.w	r3, r3, #15
 8010dda:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8010ddc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010dde:	085b      	lsrs	r3, r3, #1
 8010de0:	b29b      	uxth	r3, r3
 8010de2:	f003 0307 	and.w	r3, r3, #7
 8010de6:	b29a      	uxth	r2, r3
 8010de8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8010dea:	4313      	orrs	r3, r2
 8010dec:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8010dee:	697b      	ldr	r3, [r7, #20]
 8010df0:	681b      	ldr	r3, [r3, #0]
 8010df2:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8010df4:	60da      	str	r2, [r3, #12]
 8010df6:	e0b9      	b.n	8010f6c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8010df8:	2301      	movs	r3, #1
 8010dfa:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8010dfe:	e0b5      	b.n	8010f6c <UART_SetConfig+0xa94>
 8010e00:	03d09000 	.word	0x03d09000
 8010e04:	003d0900 	.word	0x003d0900
 8010e08:	080169dc 	.word	0x080169dc
 8010e0c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8010e10:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8010e14:	2b20      	cmp	r3, #32
 8010e16:	dc49      	bgt.n	8010eac <UART_SetConfig+0x9d4>
 8010e18:	2b00      	cmp	r3, #0
 8010e1a:	db7c      	blt.n	8010f16 <UART_SetConfig+0xa3e>
 8010e1c:	2b20      	cmp	r3, #32
 8010e1e:	d87a      	bhi.n	8010f16 <UART_SetConfig+0xa3e>
 8010e20:	a201      	add	r2, pc, #4	@ (adr r2, 8010e28 <UART_SetConfig+0x950>)
 8010e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e26:	bf00      	nop
 8010e28:	08010eb3 	.word	0x08010eb3
 8010e2c:	08010ebb 	.word	0x08010ebb
 8010e30:	08010f17 	.word	0x08010f17
 8010e34:	08010f17 	.word	0x08010f17
 8010e38:	08010ec3 	.word	0x08010ec3
 8010e3c:	08010f17 	.word	0x08010f17
 8010e40:	08010f17 	.word	0x08010f17
 8010e44:	08010f17 	.word	0x08010f17
 8010e48:	08010ed3 	.word	0x08010ed3
 8010e4c:	08010f17 	.word	0x08010f17
 8010e50:	08010f17 	.word	0x08010f17
 8010e54:	08010f17 	.word	0x08010f17
 8010e58:	08010f17 	.word	0x08010f17
 8010e5c:	08010f17 	.word	0x08010f17
 8010e60:	08010f17 	.word	0x08010f17
 8010e64:	08010f17 	.word	0x08010f17
 8010e68:	08010ee3 	.word	0x08010ee3
 8010e6c:	08010f17 	.word	0x08010f17
 8010e70:	08010f17 	.word	0x08010f17
 8010e74:	08010f17 	.word	0x08010f17
 8010e78:	08010f17 	.word	0x08010f17
 8010e7c:	08010f17 	.word	0x08010f17
 8010e80:	08010f17 	.word	0x08010f17
 8010e84:	08010f17 	.word	0x08010f17
 8010e88:	08010f17 	.word	0x08010f17
 8010e8c:	08010f17 	.word	0x08010f17
 8010e90:	08010f17 	.word	0x08010f17
 8010e94:	08010f17 	.word	0x08010f17
 8010e98:	08010f17 	.word	0x08010f17
 8010e9c:	08010f17 	.word	0x08010f17
 8010ea0:	08010f17 	.word	0x08010f17
 8010ea4:	08010f17 	.word	0x08010f17
 8010ea8:	08010f09 	.word	0x08010f09
 8010eac:	2b40      	cmp	r3, #64	@ 0x40
 8010eae:	d02e      	beq.n	8010f0e <UART_SetConfig+0xa36>
 8010eb0:	e031      	b.n	8010f16 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010eb2:	f7fc f955 	bl	800d160 <HAL_RCC_GetPCLK1Freq>
 8010eb6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8010eb8:	e033      	b.n	8010f22 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010eba:	f7fc f967 	bl	800d18c <HAL_RCC_GetPCLK2Freq>
 8010ebe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8010ec0:	e02f      	b.n	8010f22 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010ec2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010ec6:	4618      	mov	r0, r3
 8010ec8:	f7fd fb96 	bl	800e5f8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010ecc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010ece:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010ed0:	e027      	b.n	8010f22 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010ed2:	f107 0318 	add.w	r3, r7, #24
 8010ed6:	4618      	mov	r0, r3
 8010ed8:	f7fd fce2 	bl	800e8a0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010edc:	69fb      	ldr	r3, [r7, #28]
 8010ede:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010ee0:	e01f      	b.n	8010f22 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010ee2:	4b2d      	ldr	r3, [pc, #180]	@ (8010f98 <UART_SetConfig+0xac0>)
 8010ee4:	681b      	ldr	r3, [r3, #0]
 8010ee6:	f003 0320 	and.w	r3, r3, #32
 8010eea:	2b00      	cmp	r3, #0
 8010eec:	d009      	beq.n	8010f02 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010eee:	4b2a      	ldr	r3, [pc, #168]	@ (8010f98 <UART_SetConfig+0xac0>)
 8010ef0:	681b      	ldr	r3, [r3, #0]
 8010ef2:	08db      	lsrs	r3, r3, #3
 8010ef4:	f003 0303 	and.w	r3, r3, #3
 8010ef8:	4a28      	ldr	r2, [pc, #160]	@ (8010f9c <UART_SetConfig+0xac4>)
 8010efa:	fa22 f303 	lsr.w	r3, r2, r3
 8010efe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010f00:	e00f      	b.n	8010f22 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8010f02:	4b26      	ldr	r3, [pc, #152]	@ (8010f9c <UART_SetConfig+0xac4>)
 8010f04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010f06:	e00c      	b.n	8010f22 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010f08:	4b25      	ldr	r3, [pc, #148]	@ (8010fa0 <UART_SetConfig+0xac8>)
 8010f0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010f0c:	e009      	b.n	8010f22 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010f0e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010f12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010f14:	e005      	b.n	8010f22 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8010f16:	2300      	movs	r3, #0
 8010f18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8010f1a:	2301      	movs	r3, #1
 8010f1c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8010f20:	bf00      	nop
    }

    if (pclk != 0U)
 8010f22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010f24:	2b00      	cmp	r3, #0
 8010f26:	d021      	beq.n	8010f6c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010f28:	697b      	ldr	r3, [r7, #20]
 8010f2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010f2c:	4a1d      	ldr	r2, [pc, #116]	@ (8010fa4 <UART_SetConfig+0xacc>)
 8010f2e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010f32:	461a      	mov	r2, r3
 8010f34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010f36:	fbb3 f2f2 	udiv	r2, r3, r2
 8010f3a:	697b      	ldr	r3, [r7, #20]
 8010f3c:	685b      	ldr	r3, [r3, #4]
 8010f3e:	085b      	lsrs	r3, r3, #1
 8010f40:	441a      	add	r2, r3
 8010f42:	697b      	ldr	r3, [r7, #20]
 8010f44:	685b      	ldr	r3, [r3, #4]
 8010f46:	fbb2 f3f3 	udiv	r3, r2, r3
 8010f4a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010f4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f4e:	2b0f      	cmp	r3, #15
 8010f50:	d909      	bls.n	8010f66 <UART_SetConfig+0xa8e>
 8010f52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010f58:	d205      	bcs.n	8010f66 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8010f5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f5c:	b29a      	uxth	r2, r3
 8010f5e:	697b      	ldr	r3, [r7, #20]
 8010f60:	681b      	ldr	r3, [r3, #0]
 8010f62:	60da      	str	r2, [r3, #12]
 8010f64:	e002      	b.n	8010f6c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8010f66:	2301      	movs	r3, #1
 8010f68:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8010f6c:	697b      	ldr	r3, [r7, #20]
 8010f6e:	2201      	movs	r2, #1
 8010f70:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8010f74:	697b      	ldr	r3, [r7, #20]
 8010f76:	2201      	movs	r2, #1
 8010f78:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8010f7c:	697b      	ldr	r3, [r7, #20]
 8010f7e:	2200      	movs	r2, #0
 8010f80:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8010f82:	697b      	ldr	r3, [r7, #20]
 8010f84:	2200      	movs	r2, #0
 8010f86:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8010f88:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8010f8c:	4618      	mov	r0, r3
 8010f8e:	3748      	adds	r7, #72	@ 0x48
 8010f90:	46bd      	mov	sp, r7
 8010f92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8010f96:	bf00      	nop
 8010f98:	58024400 	.word	0x58024400
 8010f9c:	03d09000 	.word	0x03d09000
 8010fa0:	003d0900 	.word	0x003d0900
 8010fa4:	080169dc 	.word	0x080169dc

08010fa8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8010fa8:	b480      	push	{r7}
 8010faa:	b083      	sub	sp, #12
 8010fac:	af00      	add	r7, sp, #0
 8010fae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010fb4:	f003 0308 	and.w	r3, r3, #8
 8010fb8:	2b00      	cmp	r3, #0
 8010fba:	d00a      	beq.n	8010fd2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8010fbc:	687b      	ldr	r3, [r7, #4]
 8010fbe:	681b      	ldr	r3, [r3, #0]
 8010fc0:	685b      	ldr	r3, [r3, #4]
 8010fc2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8010fc6:	687b      	ldr	r3, [r7, #4]
 8010fc8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010fca:	687b      	ldr	r3, [r7, #4]
 8010fcc:	681b      	ldr	r3, [r3, #0]
 8010fce:	430a      	orrs	r2, r1
 8010fd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010fd6:	f003 0301 	and.w	r3, r3, #1
 8010fda:	2b00      	cmp	r3, #0
 8010fdc:	d00a      	beq.n	8010ff4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8010fde:	687b      	ldr	r3, [r7, #4]
 8010fe0:	681b      	ldr	r3, [r3, #0]
 8010fe2:	685b      	ldr	r3, [r3, #4]
 8010fe4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010fec:	687b      	ldr	r3, [r7, #4]
 8010fee:	681b      	ldr	r3, [r3, #0]
 8010ff0:	430a      	orrs	r2, r1
 8010ff2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010ff8:	f003 0302 	and.w	r3, r3, #2
 8010ffc:	2b00      	cmp	r3, #0
 8010ffe:	d00a      	beq.n	8011016 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	681b      	ldr	r3, [r3, #0]
 8011004:	685b      	ldr	r3, [r3, #4]
 8011006:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801100e:	687b      	ldr	r3, [r7, #4]
 8011010:	681b      	ldr	r3, [r3, #0]
 8011012:	430a      	orrs	r2, r1
 8011014:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801101a:	f003 0304 	and.w	r3, r3, #4
 801101e:	2b00      	cmp	r3, #0
 8011020:	d00a      	beq.n	8011038 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	681b      	ldr	r3, [r3, #0]
 8011026:	685b      	ldr	r3, [r3, #4]
 8011028:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011030:	687b      	ldr	r3, [r7, #4]
 8011032:	681b      	ldr	r3, [r3, #0]
 8011034:	430a      	orrs	r2, r1
 8011036:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8011038:	687b      	ldr	r3, [r7, #4]
 801103a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801103c:	f003 0310 	and.w	r3, r3, #16
 8011040:	2b00      	cmp	r3, #0
 8011042:	d00a      	beq.n	801105a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8011044:	687b      	ldr	r3, [r7, #4]
 8011046:	681b      	ldr	r3, [r3, #0]
 8011048:	689b      	ldr	r3, [r3, #8]
 801104a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 801104e:	687b      	ldr	r3, [r7, #4]
 8011050:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8011052:	687b      	ldr	r3, [r7, #4]
 8011054:	681b      	ldr	r3, [r3, #0]
 8011056:	430a      	orrs	r2, r1
 8011058:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801105e:	f003 0320 	and.w	r3, r3, #32
 8011062:	2b00      	cmp	r3, #0
 8011064:	d00a      	beq.n	801107c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	681b      	ldr	r3, [r3, #0]
 801106a:	689b      	ldr	r3, [r3, #8]
 801106c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8011074:	687b      	ldr	r3, [r7, #4]
 8011076:	681b      	ldr	r3, [r3, #0]
 8011078:	430a      	orrs	r2, r1
 801107a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801107c:	687b      	ldr	r3, [r7, #4]
 801107e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011080:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011084:	2b00      	cmp	r3, #0
 8011086:	d01a      	beq.n	80110be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8011088:	687b      	ldr	r3, [r7, #4]
 801108a:	681b      	ldr	r3, [r3, #0]
 801108c:	685b      	ldr	r3, [r3, #4]
 801108e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011096:	687b      	ldr	r3, [r7, #4]
 8011098:	681b      	ldr	r3, [r3, #0]
 801109a:	430a      	orrs	r2, r1
 801109c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80110a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80110a6:	d10a      	bne.n	80110be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	681b      	ldr	r3, [r3, #0]
 80110ac:	685b      	ldr	r3, [r3, #4]
 80110ae:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80110b2:	687b      	ldr	r3, [r7, #4]
 80110b4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80110b6:	687b      	ldr	r3, [r7, #4]
 80110b8:	681b      	ldr	r3, [r3, #0]
 80110ba:	430a      	orrs	r2, r1
 80110bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80110c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80110c6:	2b00      	cmp	r3, #0
 80110c8:	d00a      	beq.n	80110e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	681b      	ldr	r3, [r3, #0]
 80110ce:	685b      	ldr	r3, [r3, #4]
 80110d0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80110d8:	687b      	ldr	r3, [r7, #4]
 80110da:	681b      	ldr	r3, [r3, #0]
 80110dc:	430a      	orrs	r2, r1
 80110de:	605a      	str	r2, [r3, #4]
  }
}
 80110e0:	bf00      	nop
 80110e2:	370c      	adds	r7, #12
 80110e4:	46bd      	mov	sp, r7
 80110e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110ea:	4770      	bx	lr

080110ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80110ec:	b580      	push	{r7, lr}
 80110ee:	b098      	sub	sp, #96	@ 0x60
 80110f0:	af02      	add	r7, sp, #8
 80110f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	2200      	movs	r2, #0
 80110f8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80110fc:	f7f1 f9ee 	bl	80024dc <HAL_GetTick>
 8011100:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8011102:	687b      	ldr	r3, [r7, #4]
 8011104:	681b      	ldr	r3, [r3, #0]
 8011106:	681b      	ldr	r3, [r3, #0]
 8011108:	f003 0308 	and.w	r3, r3, #8
 801110c:	2b08      	cmp	r3, #8
 801110e:	d12f      	bne.n	8011170 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011110:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8011114:	9300      	str	r3, [sp, #0]
 8011116:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011118:	2200      	movs	r2, #0
 801111a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 801111e:	6878      	ldr	r0, [r7, #4]
 8011120:	f000 f88e 	bl	8011240 <UART_WaitOnFlagUntilTimeout>
 8011124:	4603      	mov	r3, r0
 8011126:	2b00      	cmp	r3, #0
 8011128:	d022      	beq.n	8011170 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 801112a:	687b      	ldr	r3, [r7, #4]
 801112c:	681b      	ldr	r3, [r3, #0]
 801112e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011130:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011132:	e853 3f00 	ldrex	r3, [r3]
 8011136:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8011138:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801113a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801113e:	653b      	str	r3, [r7, #80]	@ 0x50
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	681b      	ldr	r3, [r3, #0]
 8011144:	461a      	mov	r2, r3
 8011146:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011148:	647b      	str	r3, [r7, #68]	@ 0x44
 801114a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801114c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801114e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011150:	e841 2300 	strex	r3, r2, [r1]
 8011154:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8011156:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011158:	2b00      	cmp	r3, #0
 801115a:	d1e6      	bne.n	801112a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	2220      	movs	r2, #32
 8011160:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8011164:	687b      	ldr	r3, [r7, #4]
 8011166:	2200      	movs	r2, #0
 8011168:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801116c:	2303      	movs	r3, #3
 801116e:	e063      	b.n	8011238 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	681b      	ldr	r3, [r3, #0]
 8011174:	681b      	ldr	r3, [r3, #0]
 8011176:	f003 0304 	and.w	r3, r3, #4
 801117a:	2b04      	cmp	r3, #4
 801117c:	d149      	bne.n	8011212 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801117e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8011182:	9300      	str	r3, [sp, #0]
 8011184:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011186:	2200      	movs	r2, #0
 8011188:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 801118c:	6878      	ldr	r0, [r7, #4]
 801118e:	f000 f857 	bl	8011240 <UART_WaitOnFlagUntilTimeout>
 8011192:	4603      	mov	r3, r0
 8011194:	2b00      	cmp	r3, #0
 8011196:	d03c      	beq.n	8011212 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	681b      	ldr	r3, [r3, #0]
 801119c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801119e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80111a0:	e853 3f00 	ldrex	r3, [r3]
 80111a4:	623b      	str	r3, [r7, #32]
   return(result);
 80111a6:	6a3b      	ldr	r3, [r7, #32]
 80111a8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80111ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	681b      	ldr	r3, [r3, #0]
 80111b2:	461a      	mov	r2, r3
 80111b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80111b6:	633b      	str	r3, [r7, #48]	@ 0x30
 80111b8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80111ba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80111bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80111be:	e841 2300 	strex	r3, r2, [r1]
 80111c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80111c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80111c6:	2b00      	cmp	r3, #0
 80111c8:	d1e6      	bne.n	8011198 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80111ca:	687b      	ldr	r3, [r7, #4]
 80111cc:	681b      	ldr	r3, [r3, #0]
 80111ce:	3308      	adds	r3, #8
 80111d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80111d2:	693b      	ldr	r3, [r7, #16]
 80111d4:	e853 3f00 	ldrex	r3, [r3]
 80111d8:	60fb      	str	r3, [r7, #12]
   return(result);
 80111da:	68fb      	ldr	r3, [r7, #12]
 80111dc:	f023 0301 	bic.w	r3, r3, #1
 80111e0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	681b      	ldr	r3, [r3, #0]
 80111e6:	3308      	adds	r3, #8
 80111e8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80111ea:	61fa      	str	r2, [r7, #28]
 80111ec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80111ee:	69b9      	ldr	r1, [r7, #24]
 80111f0:	69fa      	ldr	r2, [r7, #28]
 80111f2:	e841 2300 	strex	r3, r2, [r1]
 80111f6:	617b      	str	r3, [r7, #20]
   return(result);
 80111f8:	697b      	ldr	r3, [r7, #20]
 80111fa:	2b00      	cmp	r3, #0
 80111fc:	d1e5      	bne.n	80111ca <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	2220      	movs	r2, #32
 8011202:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8011206:	687b      	ldr	r3, [r7, #4]
 8011208:	2200      	movs	r2, #0
 801120a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801120e:	2303      	movs	r3, #3
 8011210:	e012      	b.n	8011238 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	2220      	movs	r2, #32
 8011216:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	2220      	movs	r2, #32
 801121e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	2200      	movs	r2, #0
 8011226:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	2200      	movs	r2, #0
 801122c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	2200      	movs	r2, #0
 8011232:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8011236:	2300      	movs	r3, #0
}
 8011238:	4618      	mov	r0, r3
 801123a:	3758      	adds	r7, #88	@ 0x58
 801123c:	46bd      	mov	sp, r7
 801123e:	bd80      	pop	{r7, pc}

08011240 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8011240:	b580      	push	{r7, lr}
 8011242:	b084      	sub	sp, #16
 8011244:	af00      	add	r7, sp, #0
 8011246:	60f8      	str	r0, [r7, #12]
 8011248:	60b9      	str	r1, [r7, #8]
 801124a:	603b      	str	r3, [r7, #0]
 801124c:	4613      	mov	r3, r2
 801124e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011250:	e04f      	b.n	80112f2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011252:	69bb      	ldr	r3, [r7, #24]
 8011254:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011258:	d04b      	beq.n	80112f2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801125a:	f7f1 f93f 	bl	80024dc <HAL_GetTick>
 801125e:	4602      	mov	r2, r0
 8011260:	683b      	ldr	r3, [r7, #0]
 8011262:	1ad3      	subs	r3, r2, r3
 8011264:	69ba      	ldr	r2, [r7, #24]
 8011266:	429a      	cmp	r2, r3
 8011268:	d302      	bcc.n	8011270 <UART_WaitOnFlagUntilTimeout+0x30>
 801126a:	69bb      	ldr	r3, [r7, #24]
 801126c:	2b00      	cmp	r3, #0
 801126e:	d101      	bne.n	8011274 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8011270:	2303      	movs	r3, #3
 8011272:	e04e      	b.n	8011312 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8011274:	68fb      	ldr	r3, [r7, #12]
 8011276:	681b      	ldr	r3, [r3, #0]
 8011278:	681b      	ldr	r3, [r3, #0]
 801127a:	f003 0304 	and.w	r3, r3, #4
 801127e:	2b00      	cmp	r3, #0
 8011280:	d037      	beq.n	80112f2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8011282:	68bb      	ldr	r3, [r7, #8]
 8011284:	2b80      	cmp	r3, #128	@ 0x80
 8011286:	d034      	beq.n	80112f2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8011288:	68bb      	ldr	r3, [r7, #8]
 801128a:	2b40      	cmp	r3, #64	@ 0x40
 801128c:	d031      	beq.n	80112f2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801128e:	68fb      	ldr	r3, [r7, #12]
 8011290:	681b      	ldr	r3, [r3, #0]
 8011292:	69db      	ldr	r3, [r3, #28]
 8011294:	f003 0308 	and.w	r3, r3, #8
 8011298:	2b08      	cmp	r3, #8
 801129a:	d110      	bne.n	80112be <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801129c:	68fb      	ldr	r3, [r7, #12]
 801129e:	681b      	ldr	r3, [r3, #0]
 80112a0:	2208      	movs	r2, #8
 80112a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80112a4:	68f8      	ldr	r0, [r7, #12]
 80112a6:	f000 f921 	bl	80114ec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80112aa:	68fb      	ldr	r3, [r7, #12]
 80112ac:	2208      	movs	r2, #8
 80112ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80112b2:	68fb      	ldr	r3, [r7, #12]
 80112b4:	2200      	movs	r2, #0
 80112b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80112ba:	2301      	movs	r3, #1
 80112bc:	e029      	b.n	8011312 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80112be:	68fb      	ldr	r3, [r7, #12]
 80112c0:	681b      	ldr	r3, [r3, #0]
 80112c2:	69db      	ldr	r3, [r3, #28]
 80112c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80112c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80112cc:	d111      	bne.n	80112f2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80112ce:	68fb      	ldr	r3, [r7, #12]
 80112d0:	681b      	ldr	r3, [r3, #0]
 80112d2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80112d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80112d8:	68f8      	ldr	r0, [r7, #12]
 80112da:	f000 f907 	bl	80114ec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80112de:	68fb      	ldr	r3, [r7, #12]
 80112e0:	2220      	movs	r2, #32
 80112e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80112e6:	68fb      	ldr	r3, [r7, #12]
 80112e8:	2200      	movs	r2, #0
 80112ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80112ee:	2303      	movs	r3, #3
 80112f0:	e00f      	b.n	8011312 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80112f2:	68fb      	ldr	r3, [r7, #12]
 80112f4:	681b      	ldr	r3, [r3, #0]
 80112f6:	69da      	ldr	r2, [r3, #28]
 80112f8:	68bb      	ldr	r3, [r7, #8]
 80112fa:	4013      	ands	r3, r2
 80112fc:	68ba      	ldr	r2, [r7, #8]
 80112fe:	429a      	cmp	r2, r3
 8011300:	bf0c      	ite	eq
 8011302:	2301      	moveq	r3, #1
 8011304:	2300      	movne	r3, #0
 8011306:	b2db      	uxtb	r3, r3
 8011308:	461a      	mov	r2, r3
 801130a:	79fb      	ldrb	r3, [r7, #7]
 801130c:	429a      	cmp	r2, r3
 801130e:	d0a0      	beq.n	8011252 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8011310:	2300      	movs	r3, #0
}
 8011312:	4618      	mov	r0, r3
 8011314:	3710      	adds	r7, #16
 8011316:	46bd      	mov	sp, r7
 8011318:	bd80      	pop	{r7, pc}
	...

0801131c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801131c:	b580      	push	{r7, lr}
 801131e:	b096      	sub	sp, #88	@ 0x58
 8011320:	af00      	add	r7, sp, #0
 8011322:	60f8      	str	r0, [r7, #12]
 8011324:	60b9      	str	r1, [r7, #8]
 8011326:	4613      	mov	r3, r2
 8011328:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 801132a:	68fb      	ldr	r3, [r7, #12]
 801132c:	68ba      	ldr	r2, [r7, #8]
 801132e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8011330:	68fb      	ldr	r3, [r7, #12]
 8011332:	88fa      	ldrh	r2, [r7, #6]
 8011334:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011338:	68fb      	ldr	r3, [r7, #12]
 801133a:	2200      	movs	r2, #0
 801133c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8011340:	68fb      	ldr	r3, [r7, #12]
 8011342:	2222      	movs	r2, #34	@ 0x22
 8011344:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8011348:	68fb      	ldr	r3, [r7, #12]
 801134a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801134e:	2b00      	cmp	r3, #0
 8011350:	d02d      	beq.n	80113ae <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8011352:	68fb      	ldr	r3, [r7, #12]
 8011354:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011358:	4a40      	ldr	r2, [pc, #256]	@ (801145c <UART_Start_Receive_DMA+0x140>)
 801135a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 801135c:	68fb      	ldr	r3, [r7, #12]
 801135e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011362:	4a3f      	ldr	r2, [pc, #252]	@ (8011460 <UART_Start_Receive_DMA+0x144>)
 8011364:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8011366:	68fb      	ldr	r3, [r7, #12]
 8011368:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801136c:	4a3d      	ldr	r2, [pc, #244]	@ (8011464 <UART_Start_Receive_DMA+0x148>)
 801136e:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8011370:	68fb      	ldr	r3, [r7, #12]
 8011372:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011376:	2200      	movs	r2, #0
 8011378:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 801137a:	68fb      	ldr	r3, [r7, #12]
 801137c:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8011380:	68fb      	ldr	r3, [r7, #12]
 8011382:	681b      	ldr	r3, [r3, #0]
 8011384:	3324      	adds	r3, #36	@ 0x24
 8011386:	4619      	mov	r1, r3
 8011388:	68fb      	ldr	r3, [r7, #12]
 801138a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801138c:	461a      	mov	r2, r3
 801138e:	88fb      	ldrh	r3, [r7, #6]
 8011390:	f7f2 f8b0 	bl	80034f4 <HAL_DMA_Start_IT>
 8011394:	4603      	mov	r3, r0
 8011396:	2b00      	cmp	r3, #0
 8011398:	d009      	beq.n	80113ae <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 801139a:	68fb      	ldr	r3, [r7, #12]
 801139c:	2210      	movs	r2, #16
 801139e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80113a2:	68fb      	ldr	r3, [r7, #12]
 80113a4:	2220      	movs	r2, #32
 80113a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 80113aa:	2301      	movs	r3, #1
 80113ac:	e051      	b.n	8011452 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80113ae:	68fb      	ldr	r3, [r7, #12]
 80113b0:	691b      	ldr	r3, [r3, #16]
 80113b2:	2b00      	cmp	r3, #0
 80113b4:	d018      	beq.n	80113e8 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80113b6:	68fb      	ldr	r3, [r7, #12]
 80113b8:	681b      	ldr	r3, [r3, #0]
 80113ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80113bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80113be:	e853 3f00 	ldrex	r3, [r3]
 80113c2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80113c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80113c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80113ca:	657b      	str	r3, [r7, #84]	@ 0x54
 80113cc:	68fb      	ldr	r3, [r7, #12]
 80113ce:	681b      	ldr	r3, [r3, #0]
 80113d0:	461a      	mov	r2, r3
 80113d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80113d4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80113d6:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80113d8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80113da:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80113dc:	e841 2300 	strex	r3, r2, [r1]
 80113e0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80113e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80113e4:	2b00      	cmp	r3, #0
 80113e6:	d1e6      	bne.n	80113b6 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80113e8:	68fb      	ldr	r3, [r7, #12]
 80113ea:	681b      	ldr	r3, [r3, #0]
 80113ec:	3308      	adds	r3, #8
 80113ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80113f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80113f2:	e853 3f00 	ldrex	r3, [r3]
 80113f6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80113f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80113fa:	f043 0301 	orr.w	r3, r3, #1
 80113fe:	653b      	str	r3, [r7, #80]	@ 0x50
 8011400:	68fb      	ldr	r3, [r7, #12]
 8011402:	681b      	ldr	r3, [r3, #0]
 8011404:	3308      	adds	r3, #8
 8011406:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011408:	637a      	str	r2, [r7, #52]	@ 0x34
 801140a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801140c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801140e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011410:	e841 2300 	strex	r3, r2, [r1]
 8011414:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8011416:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011418:	2b00      	cmp	r3, #0
 801141a:	d1e5      	bne.n	80113e8 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801141c:	68fb      	ldr	r3, [r7, #12]
 801141e:	681b      	ldr	r3, [r3, #0]
 8011420:	3308      	adds	r3, #8
 8011422:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011424:	697b      	ldr	r3, [r7, #20]
 8011426:	e853 3f00 	ldrex	r3, [r3]
 801142a:	613b      	str	r3, [r7, #16]
   return(result);
 801142c:	693b      	ldr	r3, [r7, #16]
 801142e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011432:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011434:	68fb      	ldr	r3, [r7, #12]
 8011436:	681b      	ldr	r3, [r3, #0]
 8011438:	3308      	adds	r3, #8
 801143a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801143c:	623a      	str	r2, [r7, #32]
 801143e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011440:	69f9      	ldr	r1, [r7, #28]
 8011442:	6a3a      	ldr	r2, [r7, #32]
 8011444:	e841 2300 	strex	r3, r2, [r1]
 8011448:	61bb      	str	r3, [r7, #24]
   return(result);
 801144a:	69bb      	ldr	r3, [r7, #24]
 801144c:	2b00      	cmp	r3, #0
 801144e:	d1e5      	bne.n	801141c <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8011450:	2300      	movs	r3, #0
}
 8011452:	4618      	mov	r0, r3
 8011454:	3758      	adds	r7, #88	@ 0x58
 8011456:	46bd      	mov	sp, r7
 8011458:	bd80      	pop	{r7, pc}
 801145a:	bf00      	nop
 801145c:	080115b9 	.word	0x080115b9
 8011460:	080116e1 	.word	0x080116e1
 8011464:	0801171f 	.word	0x0801171f

08011468 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8011468:	b480      	push	{r7}
 801146a:	b08f      	sub	sp, #60	@ 0x3c
 801146c:	af00      	add	r7, sp, #0
 801146e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8011470:	687b      	ldr	r3, [r7, #4]
 8011472:	681b      	ldr	r3, [r3, #0]
 8011474:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011476:	6a3b      	ldr	r3, [r7, #32]
 8011478:	e853 3f00 	ldrex	r3, [r3]
 801147c:	61fb      	str	r3, [r7, #28]
   return(result);
 801147e:	69fb      	ldr	r3, [r7, #28]
 8011480:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8011484:	637b      	str	r3, [r7, #52]	@ 0x34
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	681b      	ldr	r3, [r3, #0]
 801148a:	461a      	mov	r2, r3
 801148c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801148e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011490:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011492:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011494:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011496:	e841 2300 	strex	r3, r2, [r1]
 801149a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801149c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801149e:	2b00      	cmp	r3, #0
 80114a0:	d1e6      	bne.n	8011470 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	681b      	ldr	r3, [r3, #0]
 80114a6:	3308      	adds	r3, #8
 80114a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80114aa:	68fb      	ldr	r3, [r7, #12]
 80114ac:	e853 3f00 	ldrex	r3, [r3]
 80114b0:	60bb      	str	r3, [r7, #8]
   return(result);
 80114b2:	68bb      	ldr	r3, [r7, #8]
 80114b4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80114b8:	633b      	str	r3, [r7, #48]	@ 0x30
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	681b      	ldr	r3, [r3, #0]
 80114be:	3308      	adds	r3, #8
 80114c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80114c2:	61ba      	str	r2, [r7, #24]
 80114c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80114c6:	6979      	ldr	r1, [r7, #20]
 80114c8:	69ba      	ldr	r2, [r7, #24]
 80114ca:	e841 2300 	strex	r3, r2, [r1]
 80114ce:	613b      	str	r3, [r7, #16]
   return(result);
 80114d0:	693b      	ldr	r3, [r7, #16]
 80114d2:	2b00      	cmp	r3, #0
 80114d4:	d1e5      	bne.n	80114a2 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80114d6:	687b      	ldr	r3, [r7, #4]
 80114d8:	2220      	movs	r2, #32
 80114da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 80114de:	bf00      	nop
 80114e0:	373c      	adds	r7, #60	@ 0x3c
 80114e2:	46bd      	mov	sp, r7
 80114e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114e8:	4770      	bx	lr
	...

080114ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80114ec:	b480      	push	{r7}
 80114ee:	b095      	sub	sp, #84	@ 0x54
 80114f0:	af00      	add	r7, sp, #0
 80114f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80114f4:	687b      	ldr	r3, [r7, #4]
 80114f6:	681b      	ldr	r3, [r3, #0]
 80114f8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80114fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80114fc:	e853 3f00 	ldrex	r3, [r3]
 8011500:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8011502:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011504:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8011508:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801150a:	687b      	ldr	r3, [r7, #4]
 801150c:	681b      	ldr	r3, [r3, #0]
 801150e:	461a      	mov	r2, r3
 8011510:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011512:	643b      	str	r3, [r7, #64]	@ 0x40
 8011514:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011516:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8011518:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801151a:	e841 2300 	strex	r3, r2, [r1]
 801151e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8011520:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011522:	2b00      	cmp	r3, #0
 8011524:	d1e6      	bne.n	80114f4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011526:	687b      	ldr	r3, [r7, #4]
 8011528:	681b      	ldr	r3, [r3, #0]
 801152a:	3308      	adds	r3, #8
 801152c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801152e:	6a3b      	ldr	r3, [r7, #32]
 8011530:	e853 3f00 	ldrex	r3, [r3]
 8011534:	61fb      	str	r3, [r7, #28]
   return(result);
 8011536:	69fa      	ldr	r2, [r7, #28]
 8011538:	4b1e      	ldr	r3, [pc, #120]	@ (80115b4 <UART_EndRxTransfer+0xc8>)
 801153a:	4013      	ands	r3, r2
 801153c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801153e:	687b      	ldr	r3, [r7, #4]
 8011540:	681b      	ldr	r3, [r3, #0]
 8011542:	3308      	adds	r3, #8
 8011544:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8011546:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8011548:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801154a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801154c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801154e:	e841 2300 	strex	r3, r2, [r1]
 8011552:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8011554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011556:	2b00      	cmp	r3, #0
 8011558:	d1e5      	bne.n	8011526 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801155a:	687b      	ldr	r3, [r7, #4]
 801155c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801155e:	2b01      	cmp	r3, #1
 8011560:	d118      	bne.n	8011594 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011562:	687b      	ldr	r3, [r7, #4]
 8011564:	681b      	ldr	r3, [r3, #0]
 8011566:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011568:	68fb      	ldr	r3, [r7, #12]
 801156a:	e853 3f00 	ldrex	r3, [r3]
 801156e:	60bb      	str	r3, [r7, #8]
   return(result);
 8011570:	68bb      	ldr	r3, [r7, #8]
 8011572:	f023 0310 	bic.w	r3, r3, #16
 8011576:	647b      	str	r3, [r7, #68]	@ 0x44
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	681b      	ldr	r3, [r3, #0]
 801157c:	461a      	mov	r2, r3
 801157e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011580:	61bb      	str	r3, [r7, #24]
 8011582:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011584:	6979      	ldr	r1, [r7, #20]
 8011586:	69ba      	ldr	r2, [r7, #24]
 8011588:	e841 2300 	strex	r3, r2, [r1]
 801158c:	613b      	str	r3, [r7, #16]
   return(result);
 801158e:	693b      	ldr	r3, [r7, #16]
 8011590:	2b00      	cmp	r3, #0
 8011592:	d1e6      	bne.n	8011562 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8011594:	687b      	ldr	r3, [r7, #4]
 8011596:	2220      	movs	r2, #32
 8011598:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801159c:	687b      	ldr	r3, [r7, #4]
 801159e:	2200      	movs	r2, #0
 80115a0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80115a2:	687b      	ldr	r3, [r7, #4]
 80115a4:	2200      	movs	r2, #0
 80115a6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80115a8:	bf00      	nop
 80115aa:	3754      	adds	r7, #84	@ 0x54
 80115ac:	46bd      	mov	sp, r7
 80115ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115b2:	4770      	bx	lr
 80115b4:	effffffe 	.word	0xeffffffe

080115b8 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80115b8:	b580      	push	{r7, lr}
 80115ba:	b09c      	sub	sp, #112	@ 0x70
 80115bc:	af00      	add	r7, sp, #0
 80115be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80115c4:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80115c6:	687b      	ldr	r3, [r7, #4]
 80115c8:	69db      	ldr	r3, [r3, #28]
 80115ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80115ce:	d071      	beq.n	80116b4 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 80115d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80115d2:	2200      	movs	r2, #0
 80115d4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80115d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80115da:	681b      	ldr	r3, [r3, #0]
 80115dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80115de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80115e0:	e853 3f00 	ldrex	r3, [r3]
 80115e4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80115e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80115e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80115ec:	66bb      	str	r3, [r7, #104]	@ 0x68
 80115ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80115f0:	681b      	ldr	r3, [r3, #0]
 80115f2:	461a      	mov	r2, r3
 80115f4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80115f6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80115f8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80115fa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80115fc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80115fe:	e841 2300 	strex	r3, r2, [r1]
 8011602:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8011604:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011606:	2b00      	cmp	r3, #0
 8011608:	d1e6      	bne.n	80115d8 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801160a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801160c:	681b      	ldr	r3, [r3, #0]
 801160e:	3308      	adds	r3, #8
 8011610:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011612:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011614:	e853 3f00 	ldrex	r3, [r3]
 8011618:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 801161a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801161c:	f023 0301 	bic.w	r3, r3, #1
 8011620:	667b      	str	r3, [r7, #100]	@ 0x64
 8011622:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011624:	681b      	ldr	r3, [r3, #0]
 8011626:	3308      	adds	r3, #8
 8011628:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 801162a:	647a      	str	r2, [r7, #68]	@ 0x44
 801162c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801162e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8011630:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011632:	e841 2300 	strex	r3, r2, [r1]
 8011636:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8011638:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801163a:	2b00      	cmp	r3, #0
 801163c:	d1e5      	bne.n	801160a <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801163e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011640:	681b      	ldr	r3, [r3, #0]
 8011642:	3308      	adds	r3, #8
 8011644:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011648:	e853 3f00 	ldrex	r3, [r3]
 801164c:	623b      	str	r3, [r7, #32]
   return(result);
 801164e:	6a3b      	ldr	r3, [r7, #32]
 8011650:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011654:	663b      	str	r3, [r7, #96]	@ 0x60
 8011656:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011658:	681b      	ldr	r3, [r3, #0]
 801165a:	3308      	adds	r3, #8
 801165c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801165e:	633a      	str	r2, [r7, #48]	@ 0x30
 8011660:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011662:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011664:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011666:	e841 2300 	strex	r3, r2, [r1]
 801166a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801166c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801166e:	2b00      	cmp	r3, #0
 8011670:	d1e5      	bne.n	801163e <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8011672:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011674:	2220      	movs	r2, #32
 8011676:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801167a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801167c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801167e:	2b01      	cmp	r3, #1
 8011680:	d118      	bne.n	80116b4 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011682:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011684:	681b      	ldr	r3, [r3, #0]
 8011686:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011688:	693b      	ldr	r3, [r7, #16]
 801168a:	e853 3f00 	ldrex	r3, [r3]
 801168e:	60fb      	str	r3, [r7, #12]
   return(result);
 8011690:	68fb      	ldr	r3, [r7, #12]
 8011692:	f023 0310 	bic.w	r3, r3, #16
 8011696:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8011698:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801169a:	681b      	ldr	r3, [r3, #0]
 801169c:	461a      	mov	r2, r3
 801169e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80116a0:	61fb      	str	r3, [r7, #28]
 80116a2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80116a4:	69b9      	ldr	r1, [r7, #24]
 80116a6:	69fa      	ldr	r2, [r7, #28]
 80116a8:	e841 2300 	strex	r3, r2, [r1]
 80116ac:	617b      	str	r3, [r7, #20]
   return(result);
 80116ae:	697b      	ldr	r3, [r7, #20]
 80116b0:	2b00      	cmp	r3, #0
 80116b2:	d1e6      	bne.n	8011682 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80116b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80116b6:	2200      	movs	r2, #0
 80116b8:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80116ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80116bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80116be:	2b01      	cmp	r3, #1
 80116c0:	d107      	bne.n	80116d2 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80116c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80116c4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80116c8:	4619      	mov	r1, r3
 80116ca:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80116cc:	f7fe fef8 	bl	80104c0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80116d0:	e002      	b.n	80116d8 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 80116d2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80116d4:	f7fe fed6 	bl	8010484 <HAL_UART_RxCpltCallback>
}
 80116d8:	bf00      	nop
 80116da:	3770      	adds	r7, #112	@ 0x70
 80116dc:	46bd      	mov	sp, r7
 80116de:	bd80      	pop	{r7, pc}

080116e0 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80116e0:	b580      	push	{r7, lr}
 80116e2:	b084      	sub	sp, #16
 80116e4:	af00      	add	r7, sp, #0
 80116e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80116ec:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80116ee:	68fb      	ldr	r3, [r7, #12]
 80116f0:	2201      	movs	r2, #1
 80116f2:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80116f4:	68fb      	ldr	r3, [r7, #12]
 80116f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80116f8:	2b01      	cmp	r3, #1
 80116fa:	d109      	bne.n	8011710 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80116fc:	68fb      	ldr	r3, [r7, #12]
 80116fe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8011702:	085b      	lsrs	r3, r3, #1
 8011704:	b29b      	uxth	r3, r3
 8011706:	4619      	mov	r1, r3
 8011708:	68f8      	ldr	r0, [r7, #12]
 801170a:	f7fe fed9 	bl	80104c0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801170e:	e002      	b.n	8011716 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8011710:	68f8      	ldr	r0, [r7, #12]
 8011712:	f7fe fec1 	bl	8010498 <HAL_UART_RxHalfCpltCallback>
}
 8011716:	bf00      	nop
 8011718:	3710      	adds	r7, #16
 801171a:	46bd      	mov	sp, r7
 801171c:	bd80      	pop	{r7, pc}

0801171e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 801171e:	b580      	push	{r7, lr}
 8011720:	b086      	sub	sp, #24
 8011722:	af00      	add	r7, sp, #0
 8011724:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011726:	687b      	ldr	r3, [r7, #4]
 8011728:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801172a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 801172c:	697b      	ldr	r3, [r7, #20]
 801172e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011732:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8011734:	697b      	ldr	r3, [r7, #20]
 8011736:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801173a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 801173c:	697b      	ldr	r3, [r7, #20]
 801173e:	681b      	ldr	r3, [r3, #0]
 8011740:	689b      	ldr	r3, [r3, #8]
 8011742:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011746:	2b80      	cmp	r3, #128	@ 0x80
 8011748:	d109      	bne.n	801175e <UART_DMAError+0x40>
 801174a:	693b      	ldr	r3, [r7, #16]
 801174c:	2b21      	cmp	r3, #33	@ 0x21
 801174e:	d106      	bne.n	801175e <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8011750:	697b      	ldr	r3, [r7, #20]
 8011752:	2200      	movs	r2, #0
 8011754:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8011758:	6978      	ldr	r0, [r7, #20]
 801175a:	f7ff fe85 	bl	8011468 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 801175e:	697b      	ldr	r3, [r7, #20]
 8011760:	681b      	ldr	r3, [r3, #0]
 8011762:	689b      	ldr	r3, [r3, #8]
 8011764:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011768:	2b40      	cmp	r3, #64	@ 0x40
 801176a:	d109      	bne.n	8011780 <UART_DMAError+0x62>
 801176c:	68fb      	ldr	r3, [r7, #12]
 801176e:	2b22      	cmp	r3, #34	@ 0x22
 8011770:	d106      	bne.n	8011780 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8011772:	697b      	ldr	r3, [r7, #20]
 8011774:	2200      	movs	r2, #0
 8011776:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 801177a:	6978      	ldr	r0, [r7, #20]
 801177c:	f7ff feb6 	bl	80114ec <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8011780:	697b      	ldr	r3, [r7, #20]
 8011782:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011786:	f043 0210 	orr.w	r2, r3, #16
 801178a:	697b      	ldr	r3, [r7, #20]
 801178c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8011790:	6978      	ldr	r0, [r7, #20]
 8011792:	f7fe fe8b 	bl	80104ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011796:	bf00      	nop
 8011798:	3718      	adds	r7, #24
 801179a:	46bd      	mov	sp, r7
 801179c:	bd80      	pop	{r7, pc}

0801179e <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 801179e:	b580      	push	{r7, lr}
 80117a0:	b084      	sub	sp, #16
 80117a2:	af00      	add	r7, sp, #0
 80117a4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80117a6:	687b      	ldr	r3, [r7, #4]
 80117a8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80117ac:	2b01      	cmp	r3, #1
 80117ae:	d101      	bne.n	80117b4 <HAL_UARTEx_EnableFifoMode+0x16>
 80117b0:	2302      	movs	r3, #2
 80117b2:	e02b      	b.n	801180c <HAL_UARTEx_EnableFifoMode+0x6e>
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	2201      	movs	r2, #1
 80117b8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80117bc:	687b      	ldr	r3, [r7, #4]
 80117be:	2224      	movs	r2, #36	@ 0x24
 80117c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	681b      	ldr	r3, [r3, #0]
 80117c8:	681b      	ldr	r3, [r3, #0]
 80117ca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	681b      	ldr	r3, [r3, #0]
 80117d0:	681a      	ldr	r2, [r3, #0]
 80117d2:	687b      	ldr	r3, [r7, #4]
 80117d4:	681b      	ldr	r3, [r3, #0]
 80117d6:	f022 0201 	bic.w	r2, r2, #1
 80117da:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 80117dc:	68fb      	ldr	r3, [r7, #12]
 80117de:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80117e2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 80117e4:	687b      	ldr	r3, [r7, #4]
 80117e6:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80117ea:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80117ec:	687b      	ldr	r3, [r7, #4]
 80117ee:	681b      	ldr	r3, [r3, #0]
 80117f0:	68fa      	ldr	r2, [r7, #12]
 80117f2:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80117f4:	6878      	ldr	r0, [r7, #4]
 80117f6:	f000 f889 	bl	801190c <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 80117fa:	687b      	ldr	r3, [r7, #4]
 80117fc:	2220      	movs	r2, #32
 80117fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011802:	687b      	ldr	r3, [r7, #4]
 8011804:	2200      	movs	r2, #0
 8011806:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801180a:	2300      	movs	r3, #0
}
 801180c:	4618      	mov	r0, r3
 801180e:	3710      	adds	r7, #16
 8011810:	46bd      	mov	sp, r7
 8011812:	bd80      	pop	{r7, pc}

08011814 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011814:	b580      	push	{r7, lr}
 8011816:	b084      	sub	sp, #16
 8011818:	af00      	add	r7, sp, #0
 801181a:	6078      	str	r0, [r7, #4]
 801181c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801181e:	687b      	ldr	r3, [r7, #4]
 8011820:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8011824:	2b01      	cmp	r3, #1
 8011826:	d101      	bne.n	801182c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8011828:	2302      	movs	r3, #2
 801182a:	e02d      	b.n	8011888 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801182c:	687b      	ldr	r3, [r7, #4]
 801182e:	2201      	movs	r2, #1
 8011830:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011834:	687b      	ldr	r3, [r7, #4]
 8011836:	2224      	movs	r2, #36	@ 0x24
 8011838:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	681b      	ldr	r3, [r3, #0]
 8011840:	681b      	ldr	r3, [r3, #0]
 8011842:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011844:	687b      	ldr	r3, [r7, #4]
 8011846:	681b      	ldr	r3, [r3, #0]
 8011848:	681a      	ldr	r2, [r3, #0]
 801184a:	687b      	ldr	r3, [r7, #4]
 801184c:	681b      	ldr	r3, [r3, #0]
 801184e:	f022 0201 	bic.w	r2, r2, #1
 8011852:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8011854:	687b      	ldr	r3, [r7, #4]
 8011856:	681b      	ldr	r3, [r3, #0]
 8011858:	689b      	ldr	r3, [r3, #8]
 801185a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 801185e:	687b      	ldr	r3, [r7, #4]
 8011860:	681b      	ldr	r3, [r3, #0]
 8011862:	683a      	ldr	r2, [r7, #0]
 8011864:	430a      	orrs	r2, r1
 8011866:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011868:	6878      	ldr	r0, [r7, #4]
 801186a:	f000 f84f 	bl	801190c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801186e:	687b      	ldr	r3, [r7, #4]
 8011870:	681b      	ldr	r3, [r3, #0]
 8011872:	68fa      	ldr	r2, [r7, #12]
 8011874:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011876:	687b      	ldr	r3, [r7, #4]
 8011878:	2220      	movs	r2, #32
 801187a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801187e:	687b      	ldr	r3, [r7, #4]
 8011880:	2200      	movs	r2, #0
 8011882:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8011886:	2300      	movs	r3, #0
}
 8011888:	4618      	mov	r0, r3
 801188a:	3710      	adds	r7, #16
 801188c:	46bd      	mov	sp, r7
 801188e:	bd80      	pop	{r7, pc}

08011890 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011890:	b580      	push	{r7, lr}
 8011892:	b084      	sub	sp, #16
 8011894:	af00      	add	r7, sp, #0
 8011896:	6078      	str	r0, [r7, #4]
 8011898:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801189a:	687b      	ldr	r3, [r7, #4]
 801189c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80118a0:	2b01      	cmp	r3, #1
 80118a2:	d101      	bne.n	80118a8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80118a4:	2302      	movs	r3, #2
 80118a6:	e02d      	b.n	8011904 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80118a8:	687b      	ldr	r3, [r7, #4]
 80118aa:	2201      	movs	r2, #1
 80118ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	2224      	movs	r2, #36	@ 0x24
 80118b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80118b8:	687b      	ldr	r3, [r7, #4]
 80118ba:	681b      	ldr	r3, [r3, #0]
 80118bc:	681b      	ldr	r3, [r3, #0]
 80118be:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	681b      	ldr	r3, [r3, #0]
 80118c4:	681a      	ldr	r2, [r3, #0]
 80118c6:	687b      	ldr	r3, [r7, #4]
 80118c8:	681b      	ldr	r3, [r3, #0]
 80118ca:	f022 0201 	bic.w	r2, r2, #1
 80118ce:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80118d0:	687b      	ldr	r3, [r7, #4]
 80118d2:	681b      	ldr	r3, [r3, #0]
 80118d4:	689b      	ldr	r3, [r3, #8]
 80118d6:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80118da:	687b      	ldr	r3, [r7, #4]
 80118dc:	681b      	ldr	r3, [r3, #0]
 80118de:	683a      	ldr	r2, [r7, #0]
 80118e0:	430a      	orrs	r2, r1
 80118e2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80118e4:	6878      	ldr	r0, [r7, #4]
 80118e6:	f000 f811 	bl	801190c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	681b      	ldr	r3, [r3, #0]
 80118ee:	68fa      	ldr	r2, [r7, #12]
 80118f0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80118f2:	687b      	ldr	r3, [r7, #4]
 80118f4:	2220      	movs	r2, #32
 80118f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80118fa:	687b      	ldr	r3, [r7, #4]
 80118fc:	2200      	movs	r2, #0
 80118fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8011902:	2300      	movs	r3, #0
}
 8011904:	4618      	mov	r0, r3
 8011906:	3710      	adds	r7, #16
 8011908:	46bd      	mov	sp, r7
 801190a:	bd80      	pop	{r7, pc}

0801190c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 801190c:	b480      	push	{r7}
 801190e:	b085      	sub	sp, #20
 8011910:	af00      	add	r7, sp, #0
 8011912:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8011914:	687b      	ldr	r3, [r7, #4]
 8011916:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011918:	2b00      	cmp	r3, #0
 801191a:	d108      	bne.n	801192e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 801191c:	687b      	ldr	r3, [r7, #4]
 801191e:	2201      	movs	r2, #1
 8011920:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	2201      	movs	r2, #1
 8011928:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 801192c:	e031      	b.n	8011992 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801192e:	2310      	movs	r3, #16
 8011930:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8011932:	2310      	movs	r3, #16
 8011934:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8011936:	687b      	ldr	r3, [r7, #4]
 8011938:	681b      	ldr	r3, [r3, #0]
 801193a:	689b      	ldr	r3, [r3, #8]
 801193c:	0e5b      	lsrs	r3, r3, #25
 801193e:	b2db      	uxtb	r3, r3
 8011940:	f003 0307 	and.w	r3, r3, #7
 8011944:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8011946:	687b      	ldr	r3, [r7, #4]
 8011948:	681b      	ldr	r3, [r3, #0]
 801194a:	689b      	ldr	r3, [r3, #8]
 801194c:	0f5b      	lsrs	r3, r3, #29
 801194e:	b2db      	uxtb	r3, r3
 8011950:	f003 0307 	and.w	r3, r3, #7
 8011954:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011956:	7bbb      	ldrb	r3, [r7, #14]
 8011958:	7b3a      	ldrb	r2, [r7, #12]
 801195a:	4911      	ldr	r1, [pc, #68]	@ (80119a0 <UARTEx_SetNbDataToProcess+0x94>)
 801195c:	5c8a      	ldrb	r2, [r1, r2]
 801195e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8011962:	7b3a      	ldrb	r2, [r7, #12]
 8011964:	490f      	ldr	r1, [pc, #60]	@ (80119a4 <UARTEx_SetNbDataToProcess+0x98>)
 8011966:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011968:	fb93 f3f2 	sdiv	r3, r3, r2
 801196c:	b29a      	uxth	r2, r3
 801196e:	687b      	ldr	r3, [r7, #4]
 8011970:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011974:	7bfb      	ldrb	r3, [r7, #15]
 8011976:	7b7a      	ldrb	r2, [r7, #13]
 8011978:	4909      	ldr	r1, [pc, #36]	@ (80119a0 <UARTEx_SetNbDataToProcess+0x94>)
 801197a:	5c8a      	ldrb	r2, [r1, r2]
 801197c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8011980:	7b7a      	ldrb	r2, [r7, #13]
 8011982:	4908      	ldr	r1, [pc, #32]	@ (80119a4 <UARTEx_SetNbDataToProcess+0x98>)
 8011984:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011986:	fb93 f3f2 	sdiv	r3, r3, r2
 801198a:	b29a      	uxth	r2, r3
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8011992:	bf00      	nop
 8011994:	3714      	adds	r7, #20
 8011996:	46bd      	mov	sp, r7
 8011998:	f85d 7b04 	ldr.w	r7, [sp], #4
 801199c:	4770      	bx	lr
 801199e:	bf00      	nop
 80119a0:	080169f4 	.word	0x080169f4
 80119a4:	080169fc 	.word	0x080169fc

080119a8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80119a8:	b084      	sub	sp, #16
 80119aa:	b580      	push	{r7, lr}
 80119ac:	b084      	sub	sp, #16
 80119ae:	af00      	add	r7, sp, #0
 80119b0:	6078      	str	r0, [r7, #4]
 80119b2:	f107 001c 	add.w	r0, r7, #28
 80119b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80119ba:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80119be:	2b01      	cmp	r3, #1
 80119c0:	d121      	bne.n	8011a06 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80119c6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	68da      	ldr	r2, [r3, #12]
 80119d2:	4b2c      	ldr	r3, [pc, #176]	@ (8011a84 <USB_CoreInit+0xdc>)
 80119d4:	4013      	ands	r3, r2
 80119d6:	687a      	ldr	r2, [r7, #4]
 80119d8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80119da:	687b      	ldr	r3, [r7, #4]
 80119dc:	68db      	ldr	r3, [r3, #12]
 80119de:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80119e2:	687b      	ldr	r3, [r7, #4]
 80119e4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80119e6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80119ea:	2b01      	cmp	r3, #1
 80119ec:	d105      	bne.n	80119fa <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80119ee:	687b      	ldr	r3, [r7, #4]
 80119f0:	68db      	ldr	r3, [r3, #12]
 80119f2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80119fa:	6878      	ldr	r0, [r7, #4]
 80119fc:	f001 fafa 	bl	8012ff4 <USB_CoreReset>
 8011a00:	4603      	mov	r3, r0
 8011a02:	73fb      	strb	r3, [r7, #15]
 8011a04:	e01b      	b.n	8011a3e <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8011a06:	687b      	ldr	r3, [r7, #4]
 8011a08:	68db      	ldr	r3, [r3, #12]
 8011a0a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8011a0e:	687b      	ldr	r3, [r7, #4]
 8011a10:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8011a12:	6878      	ldr	r0, [r7, #4]
 8011a14:	f001 faee 	bl	8012ff4 <USB_CoreReset>
 8011a18:	4603      	mov	r3, r0
 8011a1a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8011a1c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8011a20:	2b00      	cmp	r3, #0
 8011a22:	d106      	bne.n	8011a32 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8011a24:	687b      	ldr	r3, [r7, #4]
 8011a26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011a28:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	639a      	str	r2, [r3, #56]	@ 0x38
 8011a30:	e005      	b.n	8011a3e <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8011a32:	687b      	ldr	r3, [r7, #4]
 8011a34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011a36:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8011a3e:	7fbb      	ldrb	r3, [r7, #30]
 8011a40:	2b01      	cmp	r3, #1
 8011a42:	d116      	bne.n	8011a72 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8011a44:	687b      	ldr	r3, [r7, #4]
 8011a46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011a48:	b29a      	uxth	r2, r3
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8011a4e:	687b      	ldr	r3, [r7, #4]
 8011a50:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8011a52:	4b0d      	ldr	r3, [pc, #52]	@ (8011a88 <USB_CoreInit+0xe0>)
 8011a54:	4313      	orrs	r3, r2
 8011a56:	687a      	ldr	r2, [r7, #4]
 8011a58:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8011a5a:	687b      	ldr	r3, [r7, #4]
 8011a5c:	689b      	ldr	r3, [r3, #8]
 8011a5e:	f043 0206 	orr.w	r2, r3, #6
 8011a62:	687b      	ldr	r3, [r7, #4]
 8011a64:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8011a66:	687b      	ldr	r3, [r7, #4]
 8011a68:	689b      	ldr	r3, [r3, #8]
 8011a6a:	f043 0220 	orr.w	r2, r3, #32
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8011a72:	7bfb      	ldrb	r3, [r7, #15]
}
 8011a74:	4618      	mov	r0, r3
 8011a76:	3710      	adds	r7, #16
 8011a78:	46bd      	mov	sp, r7
 8011a7a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8011a7e:	b004      	add	sp, #16
 8011a80:	4770      	bx	lr
 8011a82:	bf00      	nop
 8011a84:	ffbdffbf 	.word	0xffbdffbf
 8011a88:	03ee0000 	.word	0x03ee0000

08011a8c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8011a8c:	b480      	push	{r7}
 8011a8e:	b087      	sub	sp, #28
 8011a90:	af00      	add	r7, sp, #0
 8011a92:	60f8      	str	r0, [r7, #12]
 8011a94:	60b9      	str	r1, [r7, #8]
 8011a96:	4613      	mov	r3, r2
 8011a98:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8011a9a:	79fb      	ldrb	r3, [r7, #7]
 8011a9c:	2b02      	cmp	r3, #2
 8011a9e:	d165      	bne.n	8011b6c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8011aa0:	68bb      	ldr	r3, [r7, #8]
 8011aa2:	4a41      	ldr	r2, [pc, #260]	@ (8011ba8 <USB_SetTurnaroundTime+0x11c>)
 8011aa4:	4293      	cmp	r3, r2
 8011aa6:	d906      	bls.n	8011ab6 <USB_SetTurnaroundTime+0x2a>
 8011aa8:	68bb      	ldr	r3, [r7, #8]
 8011aaa:	4a40      	ldr	r2, [pc, #256]	@ (8011bac <USB_SetTurnaroundTime+0x120>)
 8011aac:	4293      	cmp	r3, r2
 8011aae:	d202      	bcs.n	8011ab6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8011ab0:	230f      	movs	r3, #15
 8011ab2:	617b      	str	r3, [r7, #20]
 8011ab4:	e062      	b.n	8011b7c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8011ab6:	68bb      	ldr	r3, [r7, #8]
 8011ab8:	4a3c      	ldr	r2, [pc, #240]	@ (8011bac <USB_SetTurnaroundTime+0x120>)
 8011aba:	4293      	cmp	r3, r2
 8011abc:	d306      	bcc.n	8011acc <USB_SetTurnaroundTime+0x40>
 8011abe:	68bb      	ldr	r3, [r7, #8]
 8011ac0:	4a3b      	ldr	r2, [pc, #236]	@ (8011bb0 <USB_SetTurnaroundTime+0x124>)
 8011ac2:	4293      	cmp	r3, r2
 8011ac4:	d202      	bcs.n	8011acc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8011ac6:	230e      	movs	r3, #14
 8011ac8:	617b      	str	r3, [r7, #20]
 8011aca:	e057      	b.n	8011b7c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8011acc:	68bb      	ldr	r3, [r7, #8]
 8011ace:	4a38      	ldr	r2, [pc, #224]	@ (8011bb0 <USB_SetTurnaroundTime+0x124>)
 8011ad0:	4293      	cmp	r3, r2
 8011ad2:	d306      	bcc.n	8011ae2 <USB_SetTurnaroundTime+0x56>
 8011ad4:	68bb      	ldr	r3, [r7, #8]
 8011ad6:	4a37      	ldr	r2, [pc, #220]	@ (8011bb4 <USB_SetTurnaroundTime+0x128>)
 8011ad8:	4293      	cmp	r3, r2
 8011ada:	d202      	bcs.n	8011ae2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8011adc:	230d      	movs	r3, #13
 8011ade:	617b      	str	r3, [r7, #20]
 8011ae0:	e04c      	b.n	8011b7c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8011ae2:	68bb      	ldr	r3, [r7, #8]
 8011ae4:	4a33      	ldr	r2, [pc, #204]	@ (8011bb4 <USB_SetTurnaroundTime+0x128>)
 8011ae6:	4293      	cmp	r3, r2
 8011ae8:	d306      	bcc.n	8011af8 <USB_SetTurnaroundTime+0x6c>
 8011aea:	68bb      	ldr	r3, [r7, #8]
 8011aec:	4a32      	ldr	r2, [pc, #200]	@ (8011bb8 <USB_SetTurnaroundTime+0x12c>)
 8011aee:	4293      	cmp	r3, r2
 8011af0:	d802      	bhi.n	8011af8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8011af2:	230c      	movs	r3, #12
 8011af4:	617b      	str	r3, [r7, #20]
 8011af6:	e041      	b.n	8011b7c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8011af8:	68bb      	ldr	r3, [r7, #8]
 8011afa:	4a2f      	ldr	r2, [pc, #188]	@ (8011bb8 <USB_SetTurnaroundTime+0x12c>)
 8011afc:	4293      	cmp	r3, r2
 8011afe:	d906      	bls.n	8011b0e <USB_SetTurnaroundTime+0x82>
 8011b00:	68bb      	ldr	r3, [r7, #8]
 8011b02:	4a2e      	ldr	r2, [pc, #184]	@ (8011bbc <USB_SetTurnaroundTime+0x130>)
 8011b04:	4293      	cmp	r3, r2
 8011b06:	d802      	bhi.n	8011b0e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8011b08:	230b      	movs	r3, #11
 8011b0a:	617b      	str	r3, [r7, #20]
 8011b0c:	e036      	b.n	8011b7c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8011b0e:	68bb      	ldr	r3, [r7, #8]
 8011b10:	4a2a      	ldr	r2, [pc, #168]	@ (8011bbc <USB_SetTurnaroundTime+0x130>)
 8011b12:	4293      	cmp	r3, r2
 8011b14:	d906      	bls.n	8011b24 <USB_SetTurnaroundTime+0x98>
 8011b16:	68bb      	ldr	r3, [r7, #8]
 8011b18:	4a29      	ldr	r2, [pc, #164]	@ (8011bc0 <USB_SetTurnaroundTime+0x134>)
 8011b1a:	4293      	cmp	r3, r2
 8011b1c:	d802      	bhi.n	8011b24 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8011b1e:	230a      	movs	r3, #10
 8011b20:	617b      	str	r3, [r7, #20]
 8011b22:	e02b      	b.n	8011b7c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8011b24:	68bb      	ldr	r3, [r7, #8]
 8011b26:	4a26      	ldr	r2, [pc, #152]	@ (8011bc0 <USB_SetTurnaroundTime+0x134>)
 8011b28:	4293      	cmp	r3, r2
 8011b2a:	d906      	bls.n	8011b3a <USB_SetTurnaroundTime+0xae>
 8011b2c:	68bb      	ldr	r3, [r7, #8]
 8011b2e:	4a25      	ldr	r2, [pc, #148]	@ (8011bc4 <USB_SetTurnaroundTime+0x138>)
 8011b30:	4293      	cmp	r3, r2
 8011b32:	d202      	bcs.n	8011b3a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8011b34:	2309      	movs	r3, #9
 8011b36:	617b      	str	r3, [r7, #20]
 8011b38:	e020      	b.n	8011b7c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8011b3a:	68bb      	ldr	r3, [r7, #8]
 8011b3c:	4a21      	ldr	r2, [pc, #132]	@ (8011bc4 <USB_SetTurnaroundTime+0x138>)
 8011b3e:	4293      	cmp	r3, r2
 8011b40:	d306      	bcc.n	8011b50 <USB_SetTurnaroundTime+0xc4>
 8011b42:	68bb      	ldr	r3, [r7, #8]
 8011b44:	4a20      	ldr	r2, [pc, #128]	@ (8011bc8 <USB_SetTurnaroundTime+0x13c>)
 8011b46:	4293      	cmp	r3, r2
 8011b48:	d802      	bhi.n	8011b50 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8011b4a:	2308      	movs	r3, #8
 8011b4c:	617b      	str	r3, [r7, #20]
 8011b4e:	e015      	b.n	8011b7c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8011b50:	68bb      	ldr	r3, [r7, #8]
 8011b52:	4a1d      	ldr	r2, [pc, #116]	@ (8011bc8 <USB_SetTurnaroundTime+0x13c>)
 8011b54:	4293      	cmp	r3, r2
 8011b56:	d906      	bls.n	8011b66 <USB_SetTurnaroundTime+0xda>
 8011b58:	68bb      	ldr	r3, [r7, #8]
 8011b5a:	4a1c      	ldr	r2, [pc, #112]	@ (8011bcc <USB_SetTurnaroundTime+0x140>)
 8011b5c:	4293      	cmp	r3, r2
 8011b5e:	d202      	bcs.n	8011b66 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8011b60:	2307      	movs	r3, #7
 8011b62:	617b      	str	r3, [r7, #20]
 8011b64:	e00a      	b.n	8011b7c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8011b66:	2306      	movs	r3, #6
 8011b68:	617b      	str	r3, [r7, #20]
 8011b6a:	e007      	b.n	8011b7c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8011b6c:	79fb      	ldrb	r3, [r7, #7]
 8011b6e:	2b00      	cmp	r3, #0
 8011b70:	d102      	bne.n	8011b78 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8011b72:	2309      	movs	r3, #9
 8011b74:	617b      	str	r3, [r7, #20]
 8011b76:	e001      	b.n	8011b7c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8011b78:	2309      	movs	r3, #9
 8011b7a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8011b7c:	68fb      	ldr	r3, [r7, #12]
 8011b7e:	68db      	ldr	r3, [r3, #12]
 8011b80:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8011b84:	68fb      	ldr	r3, [r7, #12]
 8011b86:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8011b88:	68fb      	ldr	r3, [r7, #12]
 8011b8a:	68da      	ldr	r2, [r3, #12]
 8011b8c:	697b      	ldr	r3, [r7, #20]
 8011b8e:	029b      	lsls	r3, r3, #10
 8011b90:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8011b94:	431a      	orrs	r2, r3
 8011b96:	68fb      	ldr	r3, [r7, #12]
 8011b98:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8011b9a:	2300      	movs	r3, #0
}
 8011b9c:	4618      	mov	r0, r3
 8011b9e:	371c      	adds	r7, #28
 8011ba0:	46bd      	mov	sp, r7
 8011ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ba6:	4770      	bx	lr
 8011ba8:	00d8acbf 	.word	0x00d8acbf
 8011bac:	00e4e1c0 	.word	0x00e4e1c0
 8011bb0:	00f42400 	.word	0x00f42400
 8011bb4:	01067380 	.word	0x01067380
 8011bb8:	011a499f 	.word	0x011a499f
 8011bbc:	01312cff 	.word	0x01312cff
 8011bc0:	014ca43f 	.word	0x014ca43f
 8011bc4:	016e3600 	.word	0x016e3600
 8011bc8:	01a6ab1f 	.word	0x01a6ab1f
 8011bcc:	01e84800 	.word	0x01e84800

08011bd0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8011bd0:	b480      	push	{r7}
 8011bd2:	b083      	sub	sp, #12
 8011bd4:	af00      	add	r7, sp, #0
 8011bd6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8011bd8:	687b      	ldr	r3, [r7, #4]
 8011bda:	689b      	ldr	r3, [r3, #8]
 8011bdc:	f043 0201 	orr.w	r2, r3, #1
 8011be0:	687b      	ldr	r3, [r7, #4]
 8011be2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8011be4:	2300      	movs	r3, #0
}
 8011be6:	4618      	mov	r0, r3
 8011be8:	370c      	adds	r7, #12
 8011bea:	46bd      	mov	sp, r7
 8011bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bf0:	4770      	bx	lr

08011bf2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8011bf2:	b480      	push	{r7}
 8011bf4:	b083      	sub	sp, #12
 8011bf6:	af00      	add	r7, sp, #0
 8011bf8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8011bfa:	687b      	ldr	r3, [r7, #4]
 8011bfc:	689b      	ldr	r3, [r3, #8]
 8011bfe:	f023 0201 	bic.w	r2, r3, #1
 8011c02:	687b      	ldr	r3, [r7, #4]
 8011c04:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8011c06:	2300      	movs	r3, #0
}
 8011c08:	4618      	mov	r0, r3
 8011c0a:	370c      	adds	r7, #12
 8011c0c:	46bd      	mov	sp, r7
 8011c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c12:	4770      	bx	lr

08011c14 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8011c14:	b580      	push	{r7, lr}
 8011c16:	b084      	sub	sp, #16
 8011c18:	af00      	add	r7, sp, #0
 8011c1a:	6078      	str	r0, [r7, #4]
 8011c1c:	460b      	mov	r3, r1
 8011c1e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8011c20:	2300      	movs	r3, #0
 8011c22:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8011c24:	687b      	ldr	r3, [r7, #4]
 8011c26:	68db      	ldr	r3, [r3, #12]
 8011c28:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8011c2c:	687b      	ldr	r3, [r7, #4]
 8011c2e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8011c30:	78fb      	ldrb	r3, [r7, #3]
 8011c32:	2b01      	cmp	r3, #1
 8011c34:	d115      	bne.n	8011c62 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8011c36:	687b      	ldr	r3, [r7, #4]
 8011c38:	68db      	ldr	r3, [r3, #12]
 8011c3a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8011c3e:	687b      	ldr	r3, [r7, #4]
 8011c40:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8011c42:	200a      	movs	r0, #10
 8011c44:	f7f0 fc56 	bl	80024f4 <HAL_Delay>
      ms += 10U;
 8011c48:	68fb      	ldr	r3, [r7, #12]
 8011c4a:	330a      	adds	r3, #10
 8011c4c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8011c4e:	6878      	ldr	r0, [r7, #4]
 8011c50:	f001 f93f 	bl	8012ed2 <USB_GetMode>
 8011c54:	4603      	mov	r3, r0
 8011c56:	2b01      	cmp	r3, #1
 8011c58:	d01e      	beq.n	8011c98 <USB_SetCurrentMode+0x84>
 8011c5a:	68fb      	ldr	r3, [r7, #12]
 8011c5c:	2bc7      	cmp	r3, #199	@ 0xc7
 8011c5e:	d9f0      	bls.n	8011c42 <USB_SetCurrentMode+0x2e>
 8011c60:	e01a      	b.n	8011c98 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8011c62:	78fb      	ldrb	r3, [r7, #3]
 8011c64:	2b00      	cmp	r3, #0
 8011c66:	d115      	bne.n	8011c94 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8011c68:	687b      	ldr	r3, [r7, #4]
 8011c6a:	68db      	ldr	r3, [r3, #12]
 8011c6c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8011c70:	687b      	ldr	r3, [r7, #4]
 8011c72:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8011c74:	200a      	movs	r0, #10
 8011c76:	f7f0 fc3d 	bl	80024f4 <HAL_Delay>
      ms += 10U;
 8011c7a:	68fb      	ldr	r3, [r7, #12]
 8011c7c:	330a      	adds	r3, #10
 8011c7e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8011c80:	6878      	ldr	r0, [r7, #4]
 8011c82:	f001 f926 	bl	8012ed2 <USB_GetMode>
 8011c86:	4603      	mov	r3, r0
 8011c88:	2b00      	cmp	r3, #0
 8011c8a:	d005      	beq.n	8011c98 <USB_SetCurrentMode+0x84>
 8011c8c:	68fb      	ldr	r3, [r7, #12]
 8011c8e:	2bc7      	cmp	r3, #199	@ 0xc7
 8011c90:	d9f0      	bls.n	8011c74 <USB_SetCurrentMode+0x60>
 8011c92:	e001      	b.n	8011c98 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8011c94:	2301      	movs	r3, #1
 8011c96:	e005      	b.n	8011ca4 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8011c98:	68fb      	ldr	r3, [r7, #12]
 8011c9a:	2bc8      	cmp	r3, #200	@ 0xc8
 8011c9c:	d101      	bne.n	8011ca2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8011c9e:	2301      	movs	r3, #1
 8011ca0:	e000      	b.n	8011ca4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8011ca2:	2300      	movs	r3, #0
}
 8011ca4:	4618      	mov	r0, r3
 8011ca6:	3710      	adds	r7, #16
 8011ca8:	46bd      	mov	sp, r7
 8011caa:	bd80      	pop	{r7, pc}

08011cac <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8011cac:	b084      	sub	sp, #16
 8011cae:	b580      	push	{r7, lr}
 8011cb0:	b086      	sub	sp, #24
 8011cb2:	af00      	add	r7, sp, #0
 8011cb4:	6078      	str	r0, [r7, #4]
 8011cb6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8011cba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8011cbe:	2300      	movs	r3, #0
 8011cc0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8011cc6:	2300      	movs	r3, #0
 8011cc8:	613b      	str	r3, [r7, #16]
 8011cca:	e009      	b.n	8011ce0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8011ccc:	687a      	ldr	r2, [r7, #4]
 8011cce:	693b      	ldr	r3, [r7, #16]
 8011cd0:	3340      	adds	r3, #64	@ 0x40
 8011cd2:	009b      	lsls	r3, r3, #2
 8011cd4:	4413      	add	r3, r2
 8011cd6:	2200      	movs	r2, #0
 8011cd8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8011cda:	693b      	ldr	r3, [r7, #16]
 8011cdc:	3301      	adds	r3, #1
 8011cde:	613b      	str	r3, [r7, #16]
 8011ce0:	693b      	ldr	r3, [r7, #16]
 8011ce2:	2b0e      	cmp	r3, #14
 8011ce4:	d9f2      	bls.n	8011ccc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8011ce6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8011cea:	2b00      	cmp	r3, #0
 8011cec:	d11c      	bne.n	8011d28 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8011cee:	68fb      	ldr	r3, [r7, #12]
 8011cf0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011cf4:	685b      	ldr	r3, [r3, #4]
 8011cf6:	68fa      	ldr	r2, [r7, #12]
 8011cf8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8011cfc:	f043 0302 	orr.w	r3, r3, #2
 8011d00:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011d06:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8011d0e:	687b      	ldr	r3, [r7, #4]
 8011d10:	681b      	ldr	r3, [r3, #0]
 8011d12:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8011d16:	687b      	ldr	r3, [r7, #4]
 8011d18:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8011d1a:	687b      	ldr	r3, [r7, #4]
 8011d1c:	681b      	ldr	r3, [r3, #0]
 8011d1e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8011d22:	687b      	ldr	r3, [r7, #4]
 8011d24:	601a      	str	r2, [r3, #0]
 8011d26:	e005      	b.n	8011d34 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8011d28:	687b      	ldr	r3, [r7, #4]
 8011d2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011d2c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8011d30:	687b      	ldr	r3, [r7, #4]
 8011d32:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8011d34:	68fb      	ldr	r3, [r7, #12]
 8011d36:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8011d3a:	461a      	mov	r2, r3
 8011d3c:	2300      	movs	r3, #0
 8011d3e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8011d40:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8011d44:	2b01      	cmp	r3, #1
 8011d46:	d10d      	bne.n	8011d64 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8011d48:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011d4c:	2b00      	cmp	r3, #0
 8011d4e:	d104      	bne.n	8011d5a <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8011d50:	2100      	movs	r1, #0
 8011d52:	6878      	ldr	r0, [r7, #4]
 8011d54:	f000 f968 	bl	8012028 <USB_SetDevSpeed>
 8011d58:	e008      	b.n	8011d6c <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8011d5a:	2101      	movs	r1, #1
 8011d5c:	6878      	ldr	r0, [r7, #4]
 8011d5e:	f000 f963 	bl	8012028 <USB_SetDevSpeed>
 8011d62:	e003      	b.n	8011d6c <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8011d64:	2103      	movs	r1, #3
 8011d66:	6878      	ldr	r0, [r7, #4]
 8011d68:	f000 f95e 	bl	8012028 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8011d6c:	2110      	movs	r1, #16
 8011d6e:	6878      	ldr	r0, [r7, #4]
 8011d70:	f000 f8fa 	bl	8011f68 <USB_FlushTxFifo>
 8011d74:	4603      	mov	r3, r0
 8011d76:	2b00      	cmp	r3, #0
 8011d78:	d001      	beq.n	8011d7e <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8011d7a:	2301      	movs	r3, #1
 8011d7c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8011d7e:	6878      	ldr	r0, [r7, #4]
 8011d80:	f000 f924 	bl	8011fcc <USB_FlushRxFifo>
 8011d84:	4603      	mov	r3, r0
 8011d86:	2b00      	cmp	r3, #0
 8011d88:	d001      	beq.n	8011d8e <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8011d8a:	2301      	movs	r3, #1
 8011d8c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8011d8e:	68fb      	ldr	r3, [r7, #12]
 8011d90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011d94:	461a      	mov	r2, r3
 8011d96:	2300      	movs	r3, #0
 8011d98:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8011d9a:	68fb      	ldr	r3, [r7, #12]
 8011d9c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011da0:	461a      	mov	r2, r3
 8011da2:	2300      	movs	r3, #0
 8011da4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8011da6:	68fb      	ldr	r3, [r7, #12]
 8011da8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011dac:	461a      	mov	r2, r3
 8011dae:	2300      	movs	r3, #0
 8011db0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8011db2:	2300      	movs	r3, #0
 8011db4:	613b      	str	r3, [r7, #16]
 8011db6:	e043      	b.n	8011e40 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8011db8:	693b      	ldr	r3, [r7, #16]
 8011dba:	015a      	lsls	r2, r3, #5
 8011dbc:	68fb      	ldr	r3, [r7, #12]
 8011dbe:	4413      	add	r3, r2
 8011dc0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011dc4:	681b      	ldr	r3, [r3, #0]
 8011dc6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8011dca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8011dce:	d118      	bne.n	8011e02 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8011dd0:	693b      	ldr	r3, [r7, #16]
 8011dd2:	2b00      	cmp	r3, #0
 8011dd4:	d10a      	bne.n	8011dec <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8011dd6:	693b      	ldr	r3, [r7, #16]
 8011dd8:	015a      	lsls	r2, r3, #5
 8011dda:	68fb      	ldr	r3, [r7, #12]
 8011ddc:	4413      	add	r3, r2
 8011dde:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011de2:	461a      	mov	r2, r3
 8011de4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8011de8:	6013      	str	r3, [r2, #0]
 8011dea:	e013      	b.n	8011e14 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8011dec:	693b      	ldr	r3, [r7, #16]
 8011dee:	015a      	lsls	r2, r3, #5
 8011df0:	68fb      	ldr	r3, [r7, #12]
 8011df2:	4413      	add	r3, r2
 8011df4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011df8:	461a      	mov	r2, r3
 8011dfa:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8011dfe:	6013      	str	r3, [r2, #0]
 8011e00:	e008      	b.n	8011e14 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8011e02:	693b      	ldr	r3, [r7, #16]
 8011e04:	015a      	lsls	r2, r3, #5
 8011e06:	68fb      	ldr	r3, [r7, #12]
 8011e08:	4413      	add	r3, r2
 8011e0a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011e0e:	461a      	mov	r2, r3
 8011e10:	2300      	movs	r3, #0
 8011e12:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8011e14:	693b      	ldr	r3, [r7, #16]
 8011e16:	015a      	lsls	r2, r3, #5
 8011e18:	68fb      	ldr	r3, [r7, #12]
 8011e1a:	4413      	add	r3, r2
 8011e1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011e20:	461a      	mov	r2, r3
 8011e22:	2300      	movs	r3, #0
 8011e24:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8011e26:	693b      	ldr	r3, [r7, #16]
 8011e28:	015a      	lsls	r2, r3, #5
 8011e2a:	68fb      	ldr	r3, [r7, #12]
 8011e2c:	4413      	add	r3, r2
 8011e2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011e32:	461a      	mov	r2, r3
 8011e34:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8011e38:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8011e3a:	693b      	ldr	r3, [r7, #16]
 8011e3c:	3301      	adds	r3, #1
 8011e3e:	613b      	str	r3, [r7, #16]
 8011e40:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8011e44:	461a      	mov	r2, r3
 8011e46:	693b      	ldr	r3, [r7, #16]
 8011e48:	4293      	cmp	r3, r2
 8011e4a:	d3b5      	bcc.n	8011db8 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8011e4c:	2300      	movs	r3, #0
 8011e4e:	613b      	str	r3, [r7, #16]
 8011e50:	e043      	b.n	8011eda <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8011e52:	693b      	ldr	r3, [r7, #16]
 8011e54:	015a      	lsls	r2, r3, #5
 8011e56:	68fb      	ldr	r3, [r7, #12]
 8011e58:	4413      	add	r3, r2
 8011e5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011e5e:	681b      	ldr	r3, [r3, #0]
 8011e60:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8011e64:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8011e68:	d118      	bne.n	8011e9c <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8011e6a:	693b      	ldr	r3, [r7, #16]
 8011e6c:	2b00      	cmp	r3, #0
 8011e6e:	d10a      	bne.n	8011e86 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8011e70:	693b      	ldr	r3, [r7, #16]
 8011e72:	015a      	lsls	r2, r3, #5
 8011e74:	68fb      	ldr	r3, [r7, #12]
 8011e76:	4413      	add	r3, r2
 8011e78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011e7c:	461a      	mov	r2, r3
 8011e7e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8011e82:	6013      	str	r3, [r2, #0]
 8011e84:	e013      	b.n	8011eae <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8011e86:	693b      	ldr	r3, [r7, #16]
 8011e88:	015a      	lsls	r2, r3, #5
 8011e8a:	68fb      	ldr	r3, [r7, #12]
 8011e8c:	4413      	add	r3, r2
 8011e8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011e92:	461a      	mov	r2, r3
 8011e94:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8011e98:	6013      	str	r3, [r2, #0]
 8011e9a:	e008      	b.n	8011eae <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8011e9c:	693b      	ldr	r3, [r7, #16]
 8011e9e:	015a      	lsls	r2, r3, #5
 8011ea0:	68fb      	ldr	r3, [r7, #12]
 8011ea2:	4413      	add	r3, r2
 8011ea4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011ea8:	461a      	mov	r2, r3
 8011eaa:	2300      	movs	r3, #0
 8011eac:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8011eae:	693b      	ldr	r3, [r7, #16]
 8011eb0:	015a      	lsls	r2, r3, #5
 8011eb2:	68fb      	ldr	r3, [r7, #12]
 8011eb4:	4413      	add	r3, r2
 8011eb6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011eba:	461a      	mov	r2, r3
 8011ebc:	2300      	movs	r3, #0
 8011ebe:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8011ec0:	693b      	ldr	r3, [r7, #16]
 8011ec2:	015a      	lsls	r2, r3, #5
 8011ec4:	68fb      	ldr	r3, [r7, #12]
 8011ec6:	4413      	add	r3, r2
 8011ec8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011ecc:	461a      	mov	r2, r3
 8011ece:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8011ed2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8011ed4:	693b      	ldr	r3, [r7, #16]
 8011ed6:	3301      	adds	r3, #1
 8011ed8:	613b      	str	r3, [r7, #16]
 8011eda:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8011ede:	461a      	mov	r2, r3
 8011ee0:	693b      	ldr	r3, [r7, #16]
 8011ee2:	4293      	cmp	r3, r2
 8011ee4:	d3b5      	bcc.n	8011e52 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8011ee6:	68fb      	ldr	r3, [r7, #12]
 8011ee8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011eec:	691b      	ldr	r3, [r3, #16]
 8011eee:	68fa      	ldr	r2, [r7, #12]
 8011ef0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8011ef4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8011ef8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8011efa:	687b      	ldr	r3, [r7, #4]
 8011efc:	2200      	movs	r2, #0
 8011efe:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8011f00:	687b      	ldr	r3, [r7, #4]
 8011f02:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8011f06:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8011f08:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8011f0c:	2b00      	cmp	r3, #0
 8011f0e:	d105      	bne.n	8011f1c <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8011f10:	687b      	ldr	r3, [r7, #4]
 8011f12:	699b      	ldr	r3, [r3, #24]
 8011f14:	f043 0210 	orr.w	r2, r3, #16
 8011f18:	687b      	ldr	r3, [r7, #4]
 8011f1a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8011f1c:	687b      	ldr	r3, [r7, #4]
 8011f1e:	699a      	ldr	r2, [r3, #24]
 8011f20:	4b0f      	ldr	r3, [pc, #60]	@ (8011f60 <USB_DevInit+0x2b4>)
 8011f22:	4313      	orrs	r3, r2
 8011f24:	687a      	ldr	r2, [r7, #4]
 8011f26:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8011f28:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8011f2c:	2b00      	cmp	r3, #0
 8011f2e:	d005      	beq.n	8011f3c <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8011f30:	687b      	ldr	r3, [r7, #4]
 8011f32:	699b      	ldr	r3, [r3, #24]
 8011f34:	f043 0208 	orr.w	r2, r3, #8
 8011f38:	687b      	ldr	r3, [r7, #4]
 8011f3a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8011f3c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8011f40:	2b01      	cmp	r3, #1
 8011f42:	d105      	bne.n	8011f50 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8011f44:	687b      	ldr	r3, [r7, #4]
 8011f46:	699a      	ldr	r2, [r3, #24]
 8011f48:	4b06      	ldr	r3, [pc, #24]	@ (8011f64 <USB_DevInit+0x2b8>)
 8011f4a:	4313      	orrs	r3, r2
 8011f4c:	687a      	ldr	r2, [r7, #4]
 8011f4e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8011f50:	7dfb      	ldrb	r3, [r7, #23]
}
 8011f52:	4618      	mov	r0, r3
 8011f54:	3718      	adds	r7, #24
 8011f56:	46bd      	mov	sp, r7
 8011f58:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8011f5c:	b004      	add	sp, #16
 8011f5e:	4770      	bx	lr
 8011f60:	803c3800 	.word	0x803c3800
 8011f64:	40000004 	.word	0x40000004

08011f68 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8011f68:	b480      	push	{r7}
 8011f6a:	b085      	sub	sp, #20
 8011f6c:	af00      	add	r7, sp, #0
 8011f6e:	6078      	str	r0, [r7, #4]
 8011f70:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8011f72:	2300      	movs	r3, #0
 8011f74:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8011f76:	68fb      	ldr	r3, [r7, #12]
 8011f78:	3301      	adds	r3, #1
 8011f7a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8011f7c:	68fb      	ldr	r3, [r7, #12]
 8011f7e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8011f82:	d901      	bls.n	8011f88 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8011f84:	2303      	movs	r3, #3
 8011f86:	e01b      	b.n	8011fc0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8011f88:	687b      	ldr	r3, [r7, #4]
 8011f8a:	691b      	ldr	r3, [r3, #16]
 8011f8c:	2b00      	cmp	r3, #0
 8011f8e:	daf2      	bge.n	8011f76 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8011f90:	2300      	movs	r3, #0
 8011f92:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8011f94:	683b      	ldr	r3, [r7, #0]
 8011f96:	019b      	lsls	r3, r3, #6
 8011f98:	f043 0220 	orr.w	r2, r3, #32
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8011fa0:	68fb      	ldr	r3, [r7, #12]
 8011fa2:	3301      	adds	r3, #1
 8011fa4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8011fa6:	68fb      	ldr	r3, [r7, #12]
 8011fa8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8011fac:	d901      	bls.n	8011fb2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8011fae:	2303      	movs	r3, #3
 8011fb0:	e006      	b.n	8011fc0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8011fb2:	687b      	ldr	r3, [r7, #4]
 8011fb4:	691b      	ldr	r3, [r3, #16]
 8011fb6:	f003 0320 	and.w	r3, r3, #32
 8011fba:	2b20      	cmp	r3, #32
 8011fbc:	d0f0      	beq.n	8011fa0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8011fbe:	2300      	movs	r3, #0
}
 8011fc0:	4618      	mov	r0, r3
 8011fc2:	3714      	adds	r7, #20
 8011fc4:	46bd      	mov	sp, r7
 8011fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fca:	4770      	bx	lr

08011fcc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8011fcc:	b480      	push	{r7}
 8011fce:	b085      	sub	sp, #20
 8011fd0:	af00      	add	r7, sp, #0
 8011fd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8011fd4:	2300      	movs	r3, #0
 8011fd6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8011fd8:	68fb      	ldr	r3, [r7, #12]
 8011fda:	3301      	adds	r3, #1
 8011fdc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8011fde:	68fb      	ldr	r3, [r7, #12]
 8011fe0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8011fe4:	d901      	bls.n	8011fea <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8011fe6:	2303      	movs	r3, #3
 8011fe8:	e018      	b.n	801201c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8011fea:	687b      	ldr	r3, [r7, #4]
 8011fec:	691b      	ldr	r3, [r3, #16]
 8011fee:	2b00      	cmp	r3, #0
 8011ff0:	daf2      	bge.n	8011fd8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8011ff2:	2300      	movs	r3, #0
 8011ff4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8011ff6:	687b      	ldr	r3, [r7, #4]
 8011ff8:	2210      	movs	r2, #16
 8011ffa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8011ffc:	68fb      	ldr	r3, [r7, #12]
 8011ffe:	3301      	adds	r3, #1
 8012000:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8012002:	68fb      	ldr	r3, [r7, #12]
 8012004:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8012008:	d901      	bls.n	801200e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 801200a:	2303      	movs	r3, #3
 801200c:	e006      	b.n	801201c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 801200e:	687b      	ldr	r3, [r7, #4]
 8012010:	691b      	ldr	r3, [r3, #16]
 8012012:	f003 0310 	and.w	r3, r3, #16
 8012016:	2b10      	cmp	r3, #16
 8012018:	d0f0      	beq.n	8011ffc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 801201a:	2300      	movs	r3, #0
}
 801201c:	4618      	mov	r0, r3
 801201e:	3714      	adds	r7, #20
 8012020:	46bd      	mov	sp, r7
 8012022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012026:	4770      	bx	lr

08012028 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8012028:	b480      	push	{r7}
 801202a:	b085      	sub	sp, #20
 801202c:	af00      	add	r7, sp, #0
 801202e:	6078      	str	r0, [r7, #4]
 8012030:	460b      	mov	r3, r1
 8012032:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012034:	687b      	ldr	r3, [r7, #4]
 8012036:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8012038:	68fb      	ldr	r3, [r7, #12]
 801203a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801203e:	681a      	ldr	r2, [r3, #0]
 8012040:	78fb      	ldrb	r3, [r7, #3]
 8012042:	68f9      	ldr	r1, [r7, #12]
 8012044:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8012048:	4313      	orrs	r3, r2
 801204a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 801204c:	2300      	movs	r3, #0
}
 801204e:	4618      	mov	r0, r3
 8012050:	3714      	adds	r7, #20
 8012052:	46bd      	mov	sp, r7
 8012054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012058:	4770      	bx	lr

0801205a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 801205a:	b480      	push	{r7}
 801205c:	b087      	sub	sp, #28
 801205e:	af00      	add	r7, sp, #0
 8012060:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012062:	687b      	ldr	r3, [r7, #4]
 8012064:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8012066:	693b      	ldr	r3, [r7, #16]
 8012068:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801206c:	689b      	ldr	r3, [r3, #8]
 801206e:	f003 0306 	and.w	r3, r3, #6
 8012072:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8012074:	68fb      	ldr	r3, [r7, #12]
 8012076:	2b00      	cmp	r3, #0
 8012078:	d102      	bne.n	8012080 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 801207a:	2300      	movs	r3, #0
 801207c:	75fb      	strb	r3, [r7, #23]
 801207e:	e00a      	b.n	8012096 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8012080:	68fb      	ldr	r3, [r7, #12]
 8012082:	2b02      	cmp	r3, #2
 8012084:	d002      	beq.n	801208c <USB_GetDevSpeed+0x32>
 8012086:	68fb      	ldr	r3, [r7, #12]
 8012088:	2b06      	cmp	r3, #6
 801208a:	d102      	bne.n	8012092 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 801208c:	2302      	movs	r3, #2
 801208e:	75fb      	strb	r3, [r7, #23]
 8012090:	e001      	b.n	8012096 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8012092:	230f      	movs	r3, #15
 8012094:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8012096:	7dfb      	ldrb	r3, [r7, #23]
}
 8012098:	4618      	mov	r0, r3
 801209a:	371c      	adds	r7, #28
 801209c:	46bd      	mov	sp, r7
 801209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120a2:	4770      	bx	lr

080120a4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80120a4:	b480      	push	{r7}
 80120a6:	b085      	sub	sp, #20
 80120a8:	af00      	add	r7, sp, #0
 80120aa:	6078      	str	r0, [r7, #4]
 80120ac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80120ae:	687b      	ldr	r3, [r7, #4]
 80120b0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80120b2:	683b      	ldr	r3, [r7, #0]
 80120b4:	781b      	ldrb	r3, [r3, #0]
 80120b6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80120b8:	683b      	ldr	r3, [r7, #0]
 80120ba:	785b      	ldrb	r3, [r3, #1]
 80120bc:	2b01      	cmp	r3, #1
 80120be:	d139      	bne.n	8012134 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80120c0:	68fb      	ldr	r3, [r7, #12]
 80120c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80120c6:	69da      	ldr	r2, [r3, #28]
 80120c8:	683b      	ldr	r3, [r7, #0]
 80120ca:	781b      	ldrb	r3, [r3, #0]
 80120cc:	f003 030f 	and.w	r3, r3, #15
 80120d0:	2101      	movs	r1, #1
 80120d2:	fa01 f303 	lsl.w	r3, r1, r3
 80120d6:	b29b      	uxth	r3, r3
 80120d8:	68f9      	ldr	r1, [r7, #12]
 80120da:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80120de:	4313      	orrs	r3, r2
 80120e0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80120e2:	68bb      	ldr	r3, [r7, #8]
 80120e4:	015a      	lsls	r2, r3, #5
 80120e6:	68fb      	ldr	r3, [r7, #12]
 80120e8:	4413      	add	r3, r2
 80120ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80120ee:	681b      	ldr	r3, [r3, #0]
 80120f0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80120f4:	2b00      	cmp	r3, #0
 80120f6:	d153      	bne.n	80121a0 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80120f8:	68bb      	ldr	r3, [r7, #8]
 80120fa:	015a      	lsls	r2, r3, #5
 80120fc:	68fb      	ldr	r3, [r7, #12]
 80120fe:	4413      	add	r3, r2
 8012100:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012104:	681a      	ldr	r2, [r3, #0]
 8012106:	683b      	ldr	r3, [r7, #0]
 8012108:	689b      	ldr	r3, [r3, #8]
 801210a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801210e:	683b      	ldr	r3, [r7, #0]
 8012110:	791b      	ldrb	r3, [r3, #4]
 8012112:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8012114:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8012116:	68bb      	ldr	r3, [r7, #8]
 8012118:	059b      	lsls	r3, r3, #22
 801211a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801211c:	431a      	orrs	r2, r3
 801211e:	68bb      	ldr	r3, [r7, #8]
 8012120:	0159      	lsls	r1, r3, #5
 8012122:	68fb      	ldr	r3, [r7, #12]
 8012124:	440b      	add	r3, r1
 8012126:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801212a:	4619      	mov	r1, r3
 801212c:	4b20      	ldr	r3, [pc, #128]	@ (80121b0 <USB_ActivateEndpoint+0x10c>)
 801212e:	4313      	orrs	r3, r2
 8012130:	600b      	str	r3, [r1, #0]
 8012132:	e035      	b.n	80121a0 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8012134:	68fb      	ldr	r3, [r7, #12]
 8012136:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801213a:	69da      	ldr	r2, [r3, #28]
 801213c:	683b      	ldr	r3, [r7, #0]
 801213e:	781b      	ldrb	r3, [r3, #0]
 8012140:	f003 030f 	and.w	r3, r3, #15
 8012144:	2101      	movs	r1, #1
 8012146:	fa01 f303 	lsl.w	r3, r1, r3
 801214a:	041b      	lsls	r3, r3, #16
 801214c:	68f9      	ldr	r1, [r7, #12]
 801214e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8012152:	4313      	orrs	r3, r2
 8012154:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8012156:	68bb      	ldr	r3, [r7, #8]
 8012158:	015a      	lsls	r2, r3, #5
 801215a:	68fb      	ldr	r3, [r7, #12]
 801215c:	4413      	add	r3, r2
 801215e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012162:	681b      	ldr	r3, [r3, #0]
 8012164:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8012168:	2b00      	cmp	r3, #0
 801216a:	d119      	bne.n	80121a0 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 801216c:	68bb      	ldr	r3, [r7, #8]
 801216e:	015a      	lsls	r2, r3, #5
 8012170:	68fb      	ldr	r3, [r7, #12]
 8012172:	4413      	add	r3, r2
 8012174:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012178:	681a      	ldr	r2, [r3, #0]
 801217a:	683b      	ldr	r3, [r7, #0]
 801217c:	689b      	ldr	r3, [r3, #8]
 801217e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8012182:	683b      	ldr	r3, [r7, #0]
 8012184:	791b      	ldrb	r3, [r3, #4]
 8012186:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8012188:	430b      	orrs	r3, r1
 801218a:	431a      	orrs	r2, r3
 801218c:	68bb      	ldr	r3, [r7, #8]
 801218e:	0159      	lsls	r1, r3, #5
 8012190:	68fb      	ldr	r3, [r7, #12]
 8012192:	440b      	add	r3, r1
 8012194:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012198:	4619      	mov	r1, r3
 801219a:	4b05      	ldr	r3, [pc, #20]	@ (80121b0 <USB_ActivateEndpoint+0x10c>)
 801219c:	4313      	orrs	r3, r2
 801219e:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80121a0:	2300      	movs	r3, #0
}
 80121a2:	4618      	mov	r0, r3
 80121a4:	3714      	adds	r7, #20
 80121a6:	46bd      	mov	sp, r7
 80121a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121ac:	4770      	bx	lr
 80121ae:	bf00      	nop
 80121b0:	10008000 	.word	0x10008000

080121b4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80121b4:	b480      	push	{r7}
 80121b6:	b085      	sub	sp, #20
 80121b8:	af00      	add	r7, sp, #0
 80121ba:	6078      	str	r0, [r7, #4]
 80121bc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80121be:	687b      	ldr	r3, [r7, #4]
 80121c0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80121c2:	683b      	ldr	r3, [r7, #0]
 80121c4:	781b      	ldrb	r3, [r3, #0]
 80121c6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80121c8:	683b      	ldr	r3, [r7, #0]
 80121ca:	785b      	ldrb	r3, [r3, #1]
 80121cc:	2b01      	cmp	r3, #1
 80121ce:	d161      	bne.n	8012294 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80121d0:	68bb      	ldr	r3, [r7, #8]
 80121d2:	015a      	lsls	r2, r3, #5
 80121d4:	68fb      	ldr	r3, [r7, #12]
 80121d6:	4413      	add	r3, r2
 80121d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80121dc:	681b      	ldr	r3, [r3, #0]
 80121de:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80121e2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80121e6:	d11f      	bne.n	8012228 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80121e8:	68bb      	ldr	r3, [r7, #8]
 80121ea:	015a      	lsls	r2, r3, #5
 80121ec:	68fb      	ldr	r3, [r7, #12]
 80121ee:	4413      	add	r3, r2
 80121f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80121f4:	681b      	ldr	r3, [r3, #0]
 80121f6:	68ba      	ldr	r2, [r7, #8]
 80121f8:	0151      	lsls	r1, r2, #5
 80121fa:	68fa      	ldr	r2, [r7, #12]
 80121fc:	440a      	add	r2, r1
 80121fe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8012202:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8012206:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8012208:	68bb      	ldr	r3, [r7, #8]
 801220a:	015a      	lsls	r2, r3, #5
 801220c:	68fb      	ldr	r3, [r7, #12]
 801220e:	4413      	add	r3, r2
 8012210:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012214:	681b      	ldr	r3, [r3, #0]
 8012216:	68ba      	ldr	r2, [r7, #8]
 8012218:	0151      	lsls	r1, r2, #5
 801221a:	68fa      	ldr	r2, [r7, #12]
 801221c:	440a      	add	r2, r1
 801221e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8012222:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8012226:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8012228:	68fb      	ldr	r3, [r7, #12]
 801222a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801222e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8012230:	683b      	ldr	r3, [r7, #0]
 8012232:	781b      	ldrb	r3, [r3, #0]
 8012234:	f003 030f 	and.w	r3, r3, #15
 8012238:	2101      	movs	r1, #1
 801223a:	fa01 f303 	lsl.w	r3, r1, r3
 801223e:	b29b      	uxth	r3, r3
 8012240:	43db      	mvns	r3, r3
 8012242:	68f9      	ldr	r1, [r7, #12]
 8012244:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8012248:	4013      	ands	r3, r2
 801224a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 801224c:	68fb      	ldr	r3, [r7, #12]
 801224e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012252:	69da      	ldr	r2, [r3, #28]
 8012254:	683b      	ldr	r3, [r7, #0]
 8012256:	781b      	ldrb	r3, [r3, #0]
 8012258:	f003 030f 	and.w	r3, r3, #15
 801225c:	2101      	movs	r1, #1
 801225e:	fa01 f303 	lsl.w	r3, r1, r3
 8012262:	b29b      	uxth	r3, r3
 8012264:	43db      	mvns	r3, r3
 8012266:	68f9      	ldr	r1, [r7, #12]
 8012268:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 801226c:	4013      	ands	r3, r2
 801226e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8012270:	68bb      	ldr	r3, [r7, #8]
 8012272:	015a      	lsls	r2, r3, #5
 8012274:	68fb      	ldr	r3, [r7, #12]
 8012276:	4413      	add	r3, r2
 8012278:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801227c:	681a      	ldr	r2, [r3, #0]
 801227e:	68bb      	ldr	r3, [r7, #8]
 8012280:	0159      	lsls	r1, r3, #5
 8012282:	68fb      	ldr	r3, [r7, #12]
 8012284:	440b      	add	r3, r1
 8012286:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801228a:	4619      	mov	r1, r3
 801228c:	4b35      	ldr	r3, [pc, #212]	@ (8012364 <USB_DeactivateEndpoint+0x1b0>)
 801228e:	4013      	ands	r3, r2
 8012290:	600b      	str	r3, [r1, #0]
 8012292:	e060      	b.n	8012356 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8012294:	68bb      	ldr	r3, [r7, #8]
 8012296:	015a      	lsls	r2, r3, #5
 8012298:	68fb      	ldr	r3, [r7, #12]
 801229a:	4413      	add	r3, r2
 801229c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80122a0:	681b      	ldr	r3, [r3, #0]
 80122a2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80122a6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80122aa:	d11f      	bne.n	80122ec <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80122ac:	68bb      	ldr	r3, [r7, #8]
 80122ae:	015a      	lsls	r2, r3, #5
 80122b0:	68fb      	ldr	r3, [r7, #12]
 80122b2:	4413      	add	r3, r2
 80122b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80122b8:	681b      	ldr	r3, [r3, #0]
 80122ba:	68ba      	ldr	r2, [r7, #8]
 80122bc:	0151      	lsls	r1, r2, #5
 80122be:	68fa      	ldr	r2, [r7, #12]
 80122c0:	440a      	add	r2, r1
 80122c2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80122c6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80122ca:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80122cc:	68bb      	ldr	r3, [r7, #8]
 80122ce:	015a      	lsls	r2, r3, #5
 80122d0:	68fb      	ldr	r3, [r7, #12]
 80122d2:	4413      	add	r3, r2
 80122d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80122d8:	681b      	ldr	r3, [r3, #0]
 80122da:	68ba      	ldr	r2, [r7, #8]
 80122dc:	0151      	lsls	r1, r2, #5
 80122de:	68fa      	ldr	r2, [r7, #12]
 80122e0:	440a      	add	r2, r1
 80122e2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80122e6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80122ea:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80122ec:	68fb      	ldr	r3, [r7, #12]
 80122ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80122f2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80122f4:	683b      	ldr	r3, [r7, #0]
 80122f6:	781b      	ldrb	r3, [r3, #0]
 80122f8:	f003 030f 	and.w	r3, r3, #15
 80122fc:	2101      	movs	r1, #1
 80122fe:	fa01 f303 	lsl.w	r3, r1, r3
 8012302:	041b      	lsls	r3, r3, #16
 8012304:	43db      	mvns	r3, r3
 8012306:	68f9      	ldr	r1, [r7, #12]
 8012308:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 801230c:	4013      	ands	r3, r2
 801230e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8012310:	68fb      	ldr	r3, [r7, #12]
 8012312:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012316:	69da      	ldr	r2, [r3, #28]
 8012318:	683b      	ldr	r3, [r7, #0]
 801231a:	781b      	ldrb	r3, [r3, #0]
 801231c:	f003 030f 	and.w	r3, r3, #15
 8012320:	2101      	movs	r1, #1
 8012322:	fa01 f303 	lsl.w	r3, r1, r3
 8012326:	041b      	lsls	r3, r3, #16
 8012328:	43db      	mvns	r3, r3
 801232a:	68f9      	ldr	r1, [r7, #12]
 801232c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8012330:	4013      	ands	r3, r2
 8012332:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8012334:	68bb      	ldr	r3, [r7, #8]
 8012336:	015a      	lsls	r2, r3, #5
 8012338:	68fb      	ldr	r3, [r7, #12]
 801233a:	4413      	add	r3, r2
 801233c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012340:	681a      	ldr	r2, [r3, #0]
 8012342:	68bb      	ldr	r3, [r7, #8]
 8012344:	0159      	lsls	r1, r3, #5
 8012346:	68fb      	ldr	r3, [r7, #12]
 8012348:	440b      	add	r3, r1
 801234a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801234e:	4619      	mov	r1, r3
 8012350:	4b05      	ldr	r3, [pc, #20]	@ (8012368 <USB_DeactivateEndpoint+0x1b4>)
 8012352:	4013      	ands	r3, r2
 8012354:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8012356:	2300      	movs	r3, #0
}
 8012358:	4618      	mov	r0, r3
 801235a:	3714      	adds	r7, #20
 801235c:	46bd      	mov	sp, r7
 801235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012362:	4770      	bx	lr
 8012364:	ec337800 	.word	0xec337800
 8012368:	eff37800 	.word	0xeff37800

0801236c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 801236c:	b580      	push	{r7, lr}
 801236e:	b08a      	sub	sp, #40	@ 0x28
 8012370:	af02      	add	r7, sp, #8
 8012372:	60f8      	str	r0, [r7, #12]
 8012374:	60b9      	str	r1, [r7, #8]
 8012376:	4613      	mov	r3, r2
 8012378:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801237a:	68fb      	ldr	r3, [r7, #12]
 801237c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 801237e:	68bb      	ldr	r3, [r7, #8]
 8012380:	781b      	ldrb	r3, [r3, #0]
 8012382:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8012384:	68bb      	ldr	r3, [r7, #8]
 8012386:	785b      	ldrb	r3, [r3, #1]
 8012388:	2b01      	cmp	r3, #1
 801238a:	f040 8185 	bne.w	8012698 <USB_EPStartXfer+0x32c>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 801238e:	68bb      	ldr	r3, [r7, #8]
 8012390:	691b      	ldr	r3, [r3, #16]
 8012392:	2b00      	cmp	r3, #0
 8012394:	d132      	bne.n	80123fc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8012396:	69bb      	ldr	r3, [r7, #24]
 8012398:	015a      	lsls	r2, r3, #5
 801239a:	69fb      	ldr	r3, [r7, #28]
 801239c:	4413      	add	r3, r2
 801239e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80123a2:	691a      	ldr	r2, [r3, #16]
 80123a4:	69bb      	ldr	r3, [r7, #24]
 80123a6:	0159      	lsls	r1, r3, #5
 80123a8:	69fb      	ldr	r3, [r7, #28]
 80123aa:	440b      	add	r3, r1
 80123ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80123b0:	4619      	mov	r1, r3
 80123b2:	4ba7      	ldr	r3, [pc, #668]	@ (8012650 <USB_EPStartXfer+0x2e4>)
 80123b4:	4013      	ands	r3, r2
 80123b6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80123b8:	69bb      	ldr	r3, [r7, #24]
 80123ba:	015a      	lsls	r2, r3, #5
 80123bc:	69fb      	ldr	r3, [r7, #28]
 80123be:	4413      	add	r3, r2
 80123c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80123c4:	691b      	ldr	r3, [r3, #16]
 80123c6:	69ba      	ldr	r2, [r7, #24]
 80123c8:	0151      	lsls	r1, r2, #5
 80123ca:	69fa      	ldr	r2, [r7, #28]
 80123cc:	440a      	add	r2, r1
 80123ce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80123d2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80123d6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80123d8:	69bb      	ldr	r3, [r7, #24]
 80123da:	015a      	lsls	r2, r3, #5
 80123dc:	69fb      	ldr	r3, [r7, #28]
 80123de:	4413      	add	r3, r2
 80123e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80123e4:	691a      	ldr	r2, [r3, #16]
 80123e6:	69bb      	ldr	r3, [r7, #24]
 80123e8:	0159      	lsls	r1, r3, #5
 80123ea:	69fb      	ldr	r3, [r7, #28]
 80123ec:	440b      	add	r3, r1
 80123ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80123f2:	4619      	mov	r1, r3
 80123f4:	4b97      	ldr	r3, [pc, #604]	@ (8012654 <USB_EPStartXfer+0x2e8>)
 80123f6:	4013      	ands	r3, r2
 80123f8:	610b      	str	r3, [r1, #16]
 80123fa:	e097      	b.n	801252c <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80123fc:	69bb      	ldr	r3, [r7, #24]
 80123fe:	015a      	lsls	r2, r3, #5
 8012400:	69fb      	ldr	r3, [r7, #28]
 8012402:	4413      	add	r3, r2
 8012404:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012408:	691a      	ldr	r2, [r3, #16]
 801240a:	69bb      	ldr	r3, [r7, #24]
 801240c:	0159      	lsls	r1, r3, #5
 801240e:	69fb      	ldr	r3, [r7, #28]
 8012410:	440b      	add	r3, r1
 8012412:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012416:	4619      	mov	r1, r3
 8012418:	4b8e      	ldr	r3, [pc, #568]	@ (8012654 <USB_EPStartXfer+0x2e8>)
 801241a:	4013      	ands	r3, r2
 801241c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801241e:	69bb      	ldr	r3, [r7, #24]
 8012420:	015a      	lsls	r2, r3, #5
 8012422:	69fb      	ldr	r3, [r7, #28]
 8012424:	4413      	add	r3, r2
 8012426:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801242a:	691a      	ldr	r2, [r3, #16]
 801242c:	69bb      	ldr	r3, [r7, #24]
 801242e:	0159      	lsls	r1, r3, #5
 8012430:	69fb      	ldr	r3, [r7, #28]
 8012432:	440b      	add	r3, r1
 8012434:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012438:	4619      	mov	r1, r3
 801243a:	4b85      	ldr	r3, [pc, #532]	@ (8012650 <USB_EPStartXfer+0x2e4>)
 801243c:	4013      	ands	r3, r2
 801243e:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8012440:	69bb      	ldr	r3, [r7, #24]
 8012442:	2b00      	cmp	r3, #0
 8012444:	d11a      	bne.n	801247c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8012446:	68bb      	ldr	r3, [r7, #8]
 8012448:	691a      	ldr	r2, [r3, #16]
 801244a:	68bb      	ldr	r3, [r7, #8]
 801244c:	689b      	ldr	r3, [r3, #8]
 801244e:	429a      	cmp	r2, r3
 8012450:	d903      	bls.n	801245a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8012452:	68bb      	ldr	r3, [r7, #8]
 8012454:	689a      	ldr	r2, [r3, #8]
 8012456:	68bb      	ldr	r3, [r7, #8]
 8012458:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801245a:	69bb      	ldr	r3, [r7, #24]
 801245c:	015a      	lsls	r2, r3, #5
 801245e:	69fb      	ldr	r3, [r7, #28]
 8012460:	4413      	add	r3, r2
 8012462:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012466:	691b      	ldr	r3, [r3, #16]
 8012468:	69ba      	ldr	r2, [r7, #24]
 801246a:	0151      	lsls	r1, r2, #5
 801246c:	69fa      	ldr	r2, [r7, #28]
 801246e:	440a      	add	r2, r1
 8012470:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8012474:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8012478:	6113      	str	r3, [r2, #16]
 801247a:	e044      	b.n	8012506 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 801247c:	68bb      	ldr	r3, [r7, #8]
 801247e:	691a      	ldr	r2, [r3, #16]
 8012480:	68bb      	ldr	r3, [r7, #8]
 8012482:	689b      	ldr	r3, [r3, #8]
 8012484:	4413      	add	r3, r2
 8012486:	1e5a      	subs	r2, r3, #1
 8012488:	68bb      	ldr	r3, [r7, #8]
 801248a:	689b      	ldr	r3, [r3, #8]
 801248c:	fbb2 f3f3 	udiv	r3, r2, r3
 8012490:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8012492:	69bb      	ldr	r3, [r7, #24]
 8012494:	015a      	lsls	r2, r3, #5
 8012496:	69fb      	ldr	r3, [r7, #28]
 8012498:	4413      	add	r3, r2
 801249a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801249e:	691a      	ldr	r2, [r3, #16]
 80124a0:	8afb      	ldrh	r3, [r7, #22]
 80124a2:	04d9      	lsls	r1, r3, #19
 80124a4:	4b6c      	ldr	r3, [pc, #432]	@ (8012658 <USB_EPStartXfer+0x2ec>)
 80124a6:	400b      	ands	r3, r1
 80124a8:	69b9      	ldr	r1, [r7, #24]
 80124aa:	0148      	lsls	r0, r1, #5
 80124ac:	69f9      	ldr	r1, [r7, #28]
 80124ae:	4401      	add	r1, r0
 80124b0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80124b4:	4313      	orrs	r3, r2
 80124b6:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 80124b8:	68bb      	ldr	r3, [r7, #8]
 80124ba:	791b      	ldrb	r3, [r3, #4]
 80124bc:	2b01      	cmp	r3, #1
 80124be:	d122      	bne.n	8012506 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80124c0:	69bb      	ldr	r3, [r7, #24]
 80124c2:	015a      	lsls	r2, r3, #5
 80124c4:	69fb      	ldr	r3, [r7, #28]
 80124c6:	4413      	add	r3, r2
 80124c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80124cc:	691b      	ldr	r3, [r3, #16]
 80124ce:	69ba      	ldr	r2, [r7, #24]
 80124d0:	0151      	lsls	r1, r2, #5
 80124d2:	69fa      	ldr	r2, [r7, #28]
 80124d4:	440a      	add	r2, r1
 80124d6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80124da:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80124de:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 80124e0:	69bb      	ldr	r3, [r7, #24]
 80124e2:	015a      	lsls	r2, r3, #5
 80124e4:	69fb      	ldr	r3, [r7, #28]
 80124e6:	4413      	add	r3, r2
 80124e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80124ec:	691a      	ldr	r2, [r3, #16]
 80124ee:	8afb      	ldrh	r3, [r7, #22]
 80124f0:	075b      	lsls	r3, r3, #29
 80124f2:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80124f6:	69b9      	ldr	r1, [r7, #24]
 80124f8:	0148      	lsls	r0, r1, #5
 80124fa:	69f9      	ldr	r1, [r7, #28]
 80124fc:	4401      	add	r1, r0
 80124fe:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8012502:	4313      	orrs	r3, r2
 8012504:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8012506:	69bb      	ldr	r3, [r7, #24]
 8012508:	015a      	lsls	r2, r3, #5
 801250a:	69fb      	ldr	r3, [r7, #28]
 801250c:	4413      	add	r3, r2
 801250e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012512:	691a      	ldr	r2, [r3, #16]
 8012514:	68bb      	ldr	r3, [r7, #8]
 8012516:	691b      	ldr	r3, [r3, #16]
 8012518:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801251c:	69b9      	ldr	r1, [r7, #24]
 801251e:	0148      	lsls	r0, r1, #5
 8012520:	69f9      	ldr	r1, [r7, #28]
 8012522:	4401      	add	r1, r0
 8012524:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8012528:	4313      	orrs	r3, r2
 801252a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 801252c:	79fb      	ldrb	r3, [r7, #7]
 801252e:	2b01      	cmp	r3, #1
 8012530:	d14b      	bne.n	80125ca <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8012532:	68bb      	ldr	r3, [r7, #8]
 8012534:	69db      	ldr	r3, [r3, #28]
 8012536:	2b00      	cmp	r3, #0
 8012538:	d009      	beq.n	801254e <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 801253a:	69bb      	ldr	r3, [r7, #24]
 801253c:	015a      	lsls	r2, r3, #5
 801253e:	69fb      	ldr	r3, [r7, #28]
 8012540:	4413      	add	r3, r2
 8012542:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012546:	461a      	mov	r2, r3
 8012548:	68bb      	ldr	r3, [r7, #8]
 801254a:	69db      	ldr	r3, [r3, #28]
 801254c:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 801254e:	68bb      	ldr	r3, [r7, #8]
 8012550:	791b      	ldrb	r3, [r3, #4]
 8012552:	2b01      	cmp	r3, #1
 8012554:	d128      	bne.n	80125a8 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8012556:	69fb      	ldr	r3, [r7, #28]
 8012558:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801255c:	689b      	ldr	r3, [r3, #8]
 801255e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8012562:	2b00      	cmp	r3, #0
 8012564:	d110      	bne.n	8012588 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8012566:	69bb      	ldr	r3, [r7, #24]
 8012568:	015a      	lsls	r2, r3, #5
 801256a:	69fb      	ldr	r3, [r7, #28]
 801256c:	4413      	add	r3, r2
 801256e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012572:	681b      	ldr	r3, [r3, #0]
 8012574:	69ba      	ldr	r2, [r7, #24]
 8012576:	0151      	lsls	r1, r2, #5
 8012578:	69fa      	ldr	r2, [r7, #28]
 801257a:	440a      	add	r2, r1
 801257c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8012580:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8012584:	6013      	str	r3, [r2, #0]
 8012586:	e00f      	b.n	80125a8 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8012588:	69bb      	ldr	r3, [r7, #24]
 801258a:	015a      	lsls	r2, r3, #5
 801258c:	69fb      	ldr	r3, [r7, #28]
 801258e:	4413      	add	r3, r2
 8012590:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012594:	681b      	ldr	r3, [r3, #0]
 8012596:	69ba      	ldr	r2, [r7, #24]
 8012598:	0151      	lsls	r1, r2, #5
 801259a:	69fa      	ldr	r2, [r7, #28]
 801259c:	440a      	add	r2, r1
 801259e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80125a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80125a6:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80125a8:	69bb      	ldr	r3, [r7, #24]
 80125aa:	015a      	lsls	r2, r3, #5
 80125ac:	69fb      	ldr	r3, [r7, #28]
 80125ae:	4413      	add	r3, r2
 80125b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80125b4:	681b      	ldr	r3, [r3, #0]
 80125b6:	69ba      	ldr	r2, [r7, #24]
 80125b8:	0151      	lsls	r1, r2, #5
 80125ba:	69fa      	ldr	r2, [r7, #28]
 80125bc:	440a      	add	r2, r1
 80125be:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80125c2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80125c6:	6013      	str	r3, [r2, #0]
 80125c8:	e169      	b.n	801289e <USB_EPStartXfer+0x532>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80125ca:	69bb      	ldr	r3, [r7, #24]
 80125cc:	015a      	lsls	r2, r3, #5
 80125ce:	69fb      	ldr	r3, [r7, #28]
 80125d0:	4413      	add	r3, r2
 80125d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80125d6:	681b      	ldr	r3, [r3, #0]
 80125d8:	69ba      	ldr	r2, [r7, #24]
 80125da:	0151      	lsls	r1, r2, #5
 80125dc:	69fa      	ldr	r2, [r7, #28]
 80125de:	440a      	add	r2, r1
 80125e0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80125e4:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80125e8:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80125ea:	68bb      	ldr	r3, [r7, #8]
 80125ec:	791b      	ldrb	r3, [r3, #4]
 80125ee:	2b01      	cmp	r3, #1
 80125f0:	d015      	beq.n	801261e <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80125f2:	68bb      	ldr	r3, [r7, #8]
 80125f4:	691b      	ldr	r3, [r3, #16]
 80125f6:	2b00      	cmp	r3, #0
 80125f8:	f000 8151 	beq.w	801289e <USB_EPStartXfer+0x532>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80125fc:	69fb      	ldr	r3, [r7, #28]
 80125fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012602:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8012604:	68bb      	ldr	r3, [r7, #8]
 8012606:	781b      	ldrb	r3, [r3, #0]
 8012608:	f003 030f 	and.w	r3, r3, #15
 801260c:	2101      	movs	r1, #1
 801260e:	fa01 f303 	lsl.w	r3, r1, r3
 8012612:	69f9      	ldr	r1, [r7, #28]
 8012614:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8012618:	4313      	orrs	r3, r2
 801261a:	634b      	str	r3, [r1, #52]	@ 0x34
 801261c:	e13f      	b.n	801289e <USB_EPStartXfer+0x532>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801261e:	69fb      	ldr	r3, [r7, #28]
 8012620:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012624:	689b      	ldr	r3, [r3, #8]
 8012626:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801262a:	2b00      	cmp	r3, #0
 801262c:	d116      	bne.n	801265c <USB_EPStartXfer+0x2f0>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 801262e:	69bb      	ldr	r3, [r7, #24]
 8012630:	015a      	lsls	r2, r3, #5
 8012632:	69fb      	ldr	r3, [r7, #28]
 8012634:	4413      	add	r3, r2
 8012636:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801263a:	681b      	ldr	r3, [r3, #0]
 801263c:	69ba      	ldr	r2, [r7, #24]
 801263e:	0151      	lsls	r1, r2, #5
 8012640:	69fa      	ldr	r2, [r7, #28]
 8012642:	440a      	add	r2, r1
 8012644:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8012648:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 801264c:	6013      	str	r3, [r2, #0]
 801264e:	e015      	b.n	801267c <USB_EPStartXfer+0x310>
 8012650:	e007ffff 	.word	0xe007ffff
 8012654:	fff80000 	.word	0xfff80000
 8012658:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801265c:	69bb      	ldr	r3, [r7, #24]
 801265e:	015a      	lsls	r2, r3, #5
 8012660:	69fb      	ldr	r3, [r7, #28]
 8012662:	4413      	add	r3, r2
 8012664:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012668:	681b      	ldr	r3, [r3, #0]
 801266a:	69ba      	ldr	r2, [r7, #24]
 801266c:	0151      	lsls	r1, r2, #5
 801266e:	69fa      	ldr	r2, [r7, #28]
 8012670:	440a      	add	r2, r1
 8012672:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8012676:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801267a:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 801267c:	68bb      	ldr	r3, [r7, #8]
 801267e:	68d9      	ldr	r1, [r3, #12]
 8012680:	68bb      	ldr	r3, [r7, #8]
 8012682:	781a      	ldrb	r2, [r3, #0]
 8012684:	68bb      	ldr	r3, [r7, #8]
 8012686:	691b      	ldr	r3, [r3, #16]
 8012688:	b298      	uxth	r0, r3
 801268a:	79fb      	ldrb	r3, [r7, #7]
 801268c:	9300      	str	r3, [sp, #0]
 801268e:	4603      	mov	r3, r0
 8012690:	68f8      	ldr	r0, [r7, #12]
 8012692:	f000 f9b9 	bl	8012a08 <USB_WritePacket>
 8012696:	e102      	b.n	801289e <USB_EPStartXfer+0x532>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8012698:	69bb      	ldr	r3, [r7, #24]
 801269a:	015a      	lsls	r2, r3, #5
 801269c:	69fb      	ldr	r3, [r7, #28]
 801269e:	4413      	add	r3, r2
 80126a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80126a4:	691a      	ldr	r2, [r3, #16]
 80126a6:	69bb      	ldr	r3, [r7, #24]
 80126a8:	0159      	lsls	r1, r3, #5
 80126aa:	69fb      	ldr	r3, [r7, #28]
 80126ac:	440b      	add	r3, r1
 80126ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80126b2:	4619      	mov	r1, r3
 80126b4:	4b7c      	ldr	r3, [pc, #496]	@ (80128a8 <USB_EPStartXfer+0x53c>)
 80126b6:	4013      	ands	r3, r2
 80126b8:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80126ba:	69bb      	ldr	r3, [r7, #24]
 80126bc:	015a      	lsls	r2, r3, #5
 80126be:	69fb      	ldr	r3, [r7, #28]
 80126c0:	4413      	add	r3, r2
 80126c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80126c6:	691a      	ldr	r2, [r3, #16]
 80126c8:	69bb      	ldr	r3, [r7, #24]
 80126ca:	0159      	lsls	r1, r3, #5
 80126cc:	69fb      	ldr	r3, [r7, #28]
 80126ce:	440b      	add	r3, r1
 80126d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80126d4:	4619      	mov	r1, r3
 80126d6:	4b75      	ldr	r3, [pc, #468]	@ (80128ac <USB_EPStartXfer+0x540>)
 80126d8:	4013      	ands	r3, r2
 80126da:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 80126dc:	69bb      	ldr	r3, [r7, #24]
 80126de:	2b00      	cmp	r3, #0
 80126e0:	d12f      	bne.n	8012742 <USB_EPStartXfer+0x3d6>
    {
      if (ep->xfer_len > 0U)
 80126e2:	68bb      	ldr	r3, [r7, #8]
 80126e4:	691b      	ldr	r3, [r3, #16]
 80126e6:	2b00      	cmp	r3, #0
 80126e8:	d003      	beq.n	80126f2 <USB_EPStartXfer+0x386>
      {
        ep->xfer_len = ep->maxpacket;
 80126ea:	68bb      	ldr	r3, [r7, #8]
 80126ec:	689a      	ldr	r2, [r3, #8]
 80126ee:	68bb      	ldr	r3, [r7, #8]
 80126f0:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80126f2:	68bb      	ldr	r3, [r7, #8]
 80126f4:	689a      	ldr	r2, [r3, #8]
 80126f6:	68bb      	ldr	r3, [r7, #8]
 80126f8:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80126fa:	69bb      	ldr	r3, [r7, #24]
 80126fc:	015a      	lsls	r2, r3, #5
 80126fe:	69fb      	ldr	r3, [r7, #28]
 8012700:	4413      	add	r3, r2
 8012702:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012706:	691a      	ldr	r2, [r3, #16]
 8012708:	68bb      	ldr	r3, [r7, #8]
 801270a:	6a1b      	ldr	r3, [r3, #32]
 801270c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012710:	69b9      	ldr	r1, [r7, #24]
 8012712:	0148      	lsls	r0, r1, #5
 8012714:	69f9      	ldr	r1, [r7, #28]
 8012716:	4401      	add	r1, r0
 8012718:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 801271c:	4313      	orrs	r3, r2
 801271e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8012720:	69bb      	ldr	r3, [r7, #24]
 8012722:	015a      	lsls	r2, r3, #5
 8012724:	69fb      	ldr	r3, [r7, #28]
 8012726:	4413      	add	r3, r2
 8012728:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801272c:	691b      	ldr	r3, [r3, #16]
 801272e:	69ba      	ldr	r2, [r7, #24]
 8012730:	0151      	lsls	r1, r2, #5
 8012732:	69fa      	ldr	r2, [r7, #28]
 8012734:	440a      	add	r2, r1
 8012736:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801273a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801273e:	6113      	str	r3, [r2, #16]
 8012740:	e05f      	b.n	8012802 <USB_EPStartXfer+0x496>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8012742:	68bb      	ldr	r3, [r7, #8]
 8012744:	691b      	ldr	r3, [r3, #16]
 8012746:	2b00      	cmp	r3, #0
 8012748:	d123      	bne.n	8012792 <USB_EPStartXfer+0x426>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 801274a:	69bb      	ldr	r3, [r7, #24]
 801274c:	015a      	lsls	r2, r3, #5
 801274e:	69fb      	ldr	r3, [r7, #28]
 8012750:	4413      	add	r3, r2
 8012752:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012756:	691a      	ldr	r2, [r3, #16]
 8012758:	68bb      	ldr	r3, [r7, #8]
 801275a:	689b      	ldr	r3, [r3, #8]
 801275c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012760:	69b9      	ldr	r1, [r7, #24]
 8012762:	0148      	lsls	r0, r1, #5
 8012764:	69f9      	ldr	r1, [r7, #28]
 8012766:	4401      	add	r1, r0
 8012768:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 801276c:	4313      	orrs	r3, r2
 801276e:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8012770:	69bb      	ldr	r3, [r7, #24]
 8012772:	015a      	lsls	r2, r3, #5
 8012774:	69fb      	ldr	r3, [r7, #28]
 8012776:	4413      	add	r3, r2
 8012778:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801277c:	691b      	ldr	r3, [r3, #16]
 801277e:	69ba      	ldr	r2, [r7, #24]
 8012780:	0151      	lsls	r1, r2, #5
 8012782:	69fa      	ldr	r2, [r7, #28]
 8012784:	440a      	add	r2, r1
 8012786:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801278a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801278e:	6113      	str	r3, [r2, #16]
 8012790:	e037      	b.n	8012802 <USB_EPStartXfer+0x496>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8012792:	68bb      	ldr	r3, [r7, #8]
 8012794:	691a      	ldr	r2, [r3, #16]
 8012796:	68bb      	ldr	r3, [r7, #8]
 8012798:	689b      	ldr	r3, [r3, #8]
 801279a:	4413      	add	r3, r2
 801279c:	1e5a      	subs	r2, r3, #1
 801279e:	68bb      	ldr	r3, [r7, #8]
 80127a0:	689b      	ldr	r3, [r3, #8]
 80127a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80127a6:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80127a8:	68bb      	ldr	r3, [r7, #8]
 80127aa:	689b      	ldr	r3, [r3, #8]
 80127ac:	8afa      	ldrh	r2, [r7, #22]
 80127ae:	fb03 f202 	mul.w	r2, r3, r2
 80127b2:	68bb      	ldr	r3, [r7, #8]
 80127b4:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80127b6:	69bb      	ldr	r3, [r7, #24]
 80127b8:	015a      	lsls	r2, r3, #5
 80127ba:	69fb      	ldr	r3, [r7, #28]
 80127bc:	4413      	add	r3, r2
 80127be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80127c2:	691a      	ldr	r2, [r3, #16]
 80127c4:	8afb      	ldrh	r3, [r7, #22]
 80127c6:	04d9      	lsls	r1, r3, #19
 80127c8:	4b39      	ldr	r3, [pc, #228]	@ (80128b0 <USB_EPStartXfer+0x544>)
 80127ca:	400b      	ands	r3, r1
 80127cc:	69b9      	ldr	r1, [r7, #24]
 80127ce:	0148      	lsls	r0, r1, #5
 80127d0:	69f9      	ldr	r1, [r7, #28]
 80127d2:	4401      	add	r1, r0
 80127d4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80127d8:	4313      	orrs	r3, r2
 80127da:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80127dc:	69bb      	ldr	r3, [r7, #24]
 80127de:	015a      	lsls	r2, r3, #5
 80127e0:	69fb      	ldr	r3, [r7, #28]
 80127e2:	4413      	add	r3, r2
 80127e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80127e8:	691a      	ldr	r2, [r3, #16]
 80127ea:	68bb      	ldr	r3, [r7, #8]
 80127ec:	6a1b      	ldr	r3, [r3, #32]
 80127ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80127f2:	69b9      	ldr	r1, [r7, #24]
 80127f4:	0148      	lsls	r0, r1, #5
 80127f6:	69f9      	ldr	r1, [r7, #28]
 80127f8:	4401      	add	r1, r0
 80127fa:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80127fe:	4313      	orrs	r3, r2
 8012800:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8012802:	79fb      	ldrb	r3, [r7, #7]
 8012804:	2b01      	cmp	r3, #1
 8012806:	d10d      	bne.n	8012824 <USB_EPStartXfer+0x4b8>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8012808:	68bb      	ldr	r3, [r7, #8]
 801280a:	68db      	ldr	r3, [r3, #12]
 801280c:	2b00      	cmp	r3, #0
 801280e:	d009      	beq.n	8012824 <USB_EPStartXfer+0x4b8>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8012810:	68bb      	ldr	r3, [r7, #8]
 8012812:	68d9      	ldr	r1, [r3, #12]
 8012814:	69bb      	ldr	r3, [r7, #24]
 8012816:	015a      	lsls	r2, r3, #5
 8012818:	69fb      	ldr	r3, [r7, #28]
 801281a:	4413      	add	r3, r2
 801281c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012820:	460a      	mov	r2, r1
 8012822:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8012824:	68bb      	ldr	r3, [r7, #8]
 8012826:	791b      	ldrb	r3, [r3, #4]
 8012828:	2b01      	cmp	r3, #1
 801282a:	d128      	bne.n	801287e <USB_EPStartXfer+0x512>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801282c:	69fb      	ldr	r3, [r7, #28]
 801282e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012832:	689b      	ldr	r3, [r3, #8]
 8012834:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8012838:	2b00      	cmp	r3, #0
 801283a:	d110      	bne.n	801285e <USB_EPStartXfer+0x4f2>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 801283c:	69bb      	ldr	r3, [r7, #24]
 801283e:	015a      	lsls	r2, r3, #5
 8012840:	69fb      	ldr	r3, [r7, #28]
 8012842:	4413      	add	r3, r2
 8012844:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012848:	681b      	ldr	r3, [r3, #0]
 801284a:	69ba      	ldr	r2, [r7, #24]
 801284c:	0151      	lsls	r1, r2, #5
 801284e:	69fa      	ldr	r2, [r7, #28]
 8012850:	440a      	add	r2, r1
 8012852:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8012856:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 801285a:	6013      	str	r3, [r2, #0]
 801285c:	e00f      	b.n	801287e <USB_EPStartXfer+0x512>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 801285e:	69bb      	ldr	r3, [r7, #24]
 8012860:	015a      	lsls	r2, r3, #5
 8012862:	69fb      	ldr	r3, [r7, #28]
 8012864:	4413      	add	r3, r2
 8012866:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801286a:	681b      	ldr	r3, [r3, #0]
 801286c:	69ba      	ldr	r2, [r7, #24]
 801286e:	0151      	lsls	r1, r2, #5
 8012870:	69fa      	ldr	r2, [r7, #28]
 8012872:	440a      	add	r2, r1
 8012874:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8012878:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801287c:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 801287e:	69bb      	ldr	r3, [r7, #24]
 8012880:	015a      	lsls	r2, r3, #5
 8012882:	69fb      	ldr	r3, [r7, #28]
 8012884:	4413      	add	r3, r2
 8012886:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801288a:	681b      	ldr	r3, [r3, #0]
 801288c:	69ba      	ldr	r2, [r7, #24]
 801288e:	0151      	lsls	r1, r2, #5
 8012890:	69fa      	ldr	r2, [r7, #28]
 8012892:	440a      	add	r2, r1
 8012894:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8012898:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 801289c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801289e:	2300      	movs	r3, #0
}
 80128a0:	4618      	mov	r0, r3
 80128a2:	3720      	adds	r7, #32
 80128a4:	46bd      	mov	sp, r7
 80128a6:	bd80      	pop	{r7, pc}
 80128a8:	fff80000 	.word	0xfff80000
 80128ac:	e007ffff 	.word	0xe007ffff
 80128b0:	1ff80000 	.word	0x1ff80000

080128b4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80128b4:	b480      	push	{r7}
 80128b6:	b087      	sub	sp, #28
 80128b8:	af00      	add	r7, sp, #0
 80128ba:	6078      	str	r0, [r7, #4]
 80128bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80128be:	2300      	movs	r3, #0
 80128c0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80128c2:	2300      	movs	r3, #0
 80128c4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80128c6:	687b      	ldr	r3, [r7, #4]
 80128c8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80128ca:	683b      	ldr	r3, [r7, #0]
 80128cc:	785b      	ldrb	r3, [r3, #1]
 80128ce:	2b01      	cmp	r3, #1
 80128d0:	d14a      	bne.n	8012968 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80128d2:	683b      	ldr	r3, [r7, #0]
 80128d4:	781b      	ldrb	r3, [r3, #0]
 80128d6:	015a      	lsls	r2, r3, #5
 80128d8:	693b      	ldr	r3, [r7, #16]
 80128da:	4413      	add	r3, r2
 80128dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80128e0:	681b      	ldr	r3, [r3, #0]
 80128e2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80128e6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80128ea:	f040 8086 	bne.w	80129fa <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80128ee:	683b      	ldr	r3, [r7, #0]
 80128f0:	781b      	ldrb	r3, [r3, #0]
 80128f2:	015a      	lsls	r2, r3, #5
 80128f4:	693b      	ldr	r3, [r7, #16]
 80128f6:	4413      	add	r3, r2
 80128f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80128fc:	681b      	ldr	r3, [r3, #0]
 80128fe:	683a      	ldr	r2, [r7, #0]
 8012900:	7812      	ldrb	r2, [r2, #0]
 8012902:	0151      	lsls	r1, r2, #5
 8012904:	693a      	ldr	r2, [r7, #16]
 8012906:	440a      	add	r2, r1
 8012908:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801290c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8012910:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8012912:	683b      	ldr	r3, [r7, #0]
 8012914:	781b      	ldrb	r3, [r3, #0]
 8012916:	015a      	lsls	r2, r3, #5
 8012918:	693b      	ldr	r3, [r7, #16]
 801291a:	4413      	add	r3, r2
 801291c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012920:	681b      	ldr	r3, [r3, #0]
 8012922:	683a      	ldr	r2, [r7, #0]
 8012924:	7812      	ldrb	r2, [r2, #0]
 8012926:	0151      	lsls	r1, r2, #5
 8012928:	693a      	ldr	r2, [r7, #16]
 801292a:	440a      	add	r2, r1
 801292c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8012930:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8012934:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8012936:	68fb      	ldr	r3, [r7, #12]
 8012938:	3301      	adds	r3, #1
 801293a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 801293c:	68fb      	ldr	r3, [r7, #12]
 801293e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8012942:	4293      	cmp	r3, r2
 8012944:	d902      	bls.n	801294c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8012946:	2301      	movs	r3, #1
 8012948:	75fb      	strb	r3, [r7, #23]
          break;
 801294a:	e056      	b.n	80129fa <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 801294c:	683b      	ldr	r3, [r7, #0]
 801294e:	781b      	ldrb	r3, [r3, #0]
 8012950:	015a      	lsls	r2, r3, #5
 8012952:	693b      	ldr	r3, [r7, #16]
 8012954:	4413      	add	r3, r2
 8012956:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801295a:	681b      	ldr	r3, [r3, #0]
 801295c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8012960:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8012964:	d0e7      	beq.n	8012936 <USB_EPStopXfer+0x82>
 8012966:	e048      	b.n	80129fa <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8012968:	683b      	ldr	r3, [r7, #0]
 801296a:	781b      	ldrb	r3, [r3, #0]
 801296c:	015a      	lsls	r2, r3, #5
 801296e:	693b      	ldr	r3, [r7, #16]
 8012970:	4413      	add	r3, r2
 8012972:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012976:	681b      	ldr	r3, [r3, #0]
 8012978:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801297c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8012980:	d13b      	bne.n	80129fa <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8012982:	683b      	ldr	r3, [r7, #0]
 8012984:	781b      	ldrb	r3, [r3, #0]
 8012986:	015a      	lsls	r2, r3, #5
 8012988:	693b      	ldr	r3, [r7, #16]
 801298a:	4413      	add	r3, r2
 801298c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012990:	681b      	ldr	r3, [r3, #0]
 8012992:	683a      	ldr	r2, [r7, #0]
 8012994:	7812      	ldrb	r2, [r2, #0]
 8012996:	0151      	lsls	r1, r2, #5
 8012998:	693a      	ldr	r2, [r7, #16]
 801299a:	440a      	add	r2, r1
 801299c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80129a0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80129a4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80129a6:	683b      	ldr	r3, [r7, #0]
 80129a8:	781b      	ldrb	r3, [r3, #0]
 80129aa:	015a      	lsls	r2, r3, #5
 80129ac:	693b      	ldr	r3, [r7, #16]
 80129ae:	4413      	add	r3, r2
 80129b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80129b4:	681b      	ldr	r3, [r3, #0]
 80129b6:	683a      	ldr	r2, [r7, #0]
 80129b8:	7812      	ldrb	r2, [r2, #0]
 80129ba:	0151      	lsls	r1, r2, #5
 80129bc:	693a      	ldr	r2, [r7, #16]
 80129be:	440a      	add	r2, r1
 80129c0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80129c4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80129c8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80129ca:	68fb      	ldr	r3, [r7, #12]
 80129cc:	3301      	adds	r3, #1
 80129ce:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80129d0:	68fb      	ldr	r3, [r7, #12]
 80129d2:	f242 7210 	movw	r2, #10000	@ 0x2710
 80129d6:	4293      	cmp	r3, r2
 80129d8:	d902      	bls.n	80129e0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80129da:	2301      	movs	r3, #1
 80129dc:	75fb      	strb	r3, [r7, #23]
          break;
 80129de:	e00c      	b.n	80129fa <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80129e0:	683b      	ldr	r3, [r7, #0]
 80129e2:	781b      	ldrb	r3, [r3, #0]
 80129e4:	015a      	lsls	r2, r3, #5
 80129e6:	693b      	ldr	r3, [r7, #16]
 80129e8:	4413      	add	r3, r2
 80129ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80129ee:	681b      	ldr	r3, [r3, #0]
 80129f0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80129f4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80129f8:	d0e7      	beq.n	80129ca <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80129fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80129fc:	4618      	mov	r0, r3
 80129fe:	371c      	adds	r7, #28
 8012a00:	46bd      	mov	sp, r7
 8012a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a06:	4770      	bx	lr

08012a08 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8012a08:	b480      	push	{r7}
 8012a0a:	b089      	sub	sp, #36	@ 0x24
 8012a0c:	af00      	add	r7, sp, #0
 8012a0e:	60f8      	str	r0, [r7, #12]
 8012a10:	60b9      	str	r1, [r7, #8]
 8012a12:	4611      	mov	r1, r2
 8012a14:	461a      	mov	r2, r3
 8012a16:	460b      	mov	r3, r1
 8012a18:	71fb      	strb	r3, [r7, #7]
 8012a1a:	4613      	mov	r3, r2
 8012a1c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012a1e:	68fb      	ldr	r3, [r7, #12]
 8012a20:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8012a22:	68bb      	ldr	r3, [r7, #8]
 8012a24:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8012a26:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8012a2a:	2b00      	cmp	r3, #0
 8012a2c:	d123      	bne.n	8012a76 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8012a2e:	88bb      	ldrh	r3, [r7, #4]
 8012a30:	3303      	adds	r3, #3
 8012a32:	089b      	lsrs	r3, r3, #2
 8012a34:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8012a36:	2300      	movs	r3, #0
 8012a38:	61bb      	str	r3, [r7, #24]
 8012a3a:	e018      	b.n	8012a6e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8012a3c:	79fb      	ldrb	r3, [r7, #7]
 8012a3e:	031a      	lsls	r2, r3, #12
 8012a40:	697b      	ldr	r3, [r7, #20]
 8012a42:	4413      	add	r3, r2
 8012a44:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8012a48:	461a      	mov	r2, r3
 8012a4a:	69fb      	ldr	r3, [r7, #28]
 8012a4c:	681b      	ldr	r3, [r3, #0]
 8012a4e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8012a50:	69fb      	ldr	r3, [r7, #28]
 8012a52:	3301      	adds	r3, #1
 8012a54:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8012a56:	69fb      	ldr	r3, [r7, #28]
 8012a58:	3301      	adds	r3, #1
 8012a5a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8012a5c:	69fb      	ldr	r3, [r7, #28]
 8012a5e:	3301      	adds	r3, #1
 8012a60:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8012a62:	69fb      	ldr	r3, [r7, #28]
 8012a64:	3301      	adds	r3, #1
 8012a66:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8012a68:	69bb      	ldr	r3, [r7, #24]
 8012a6a:	3301      	adds	r3, #1
 8012a6c:	61bb      	str	r3, [r7, #24]
 8012a6e:	69ba      	ldr	r2, [r7, #24]
 8012a70:	693b      	ldr	r3, [r7, #16]
 8012a72:	429a      	cmp	r2, r3
 8012a74:	d3e2      	bcc.n	8012a3c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8012a76:	2300      	movs	r3, #0
}
 8012a78:	4618      	mov	r0, r3
 8012a7a:	3724      	adds	r7, #36	@ 0x24
 8012a7c:	46bd      	mov	sp, r7
 8012a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a82:	4770      	bx	lr

08012a84 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8012a84:	b480      	push	{r7}
 8012a86:	b08b      	sub	sp, #44	@ 0x2c
 8012a88:	af00      	add	r7, sp, #0
 8012a8a:	60f8      	str	r0, [r7, #12]
 8012a8c:	60b9      	str	r1, [r7, #8]
 8012a8e:	4613      	mov	r3, r2
 8012a90:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012a92:	68fb      	ldr	r3, [r7, #12]
 8012a94:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8012a96:	68bb      	ldr	r3, [r7, #8]
 8012a98:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8012a9a:	88fb      	ldrh	r3, [r7, #6]
 8012a9c:	089b      	lsrs	r3, r3, #2
 8012a9e:	b29b      	uxth	r3, r3
 8012aa0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8012aa2:	88fb      	ldrh	r3, [r7, #6]
 8012aa4:	f003 0303 	and.w	r3, r3, #3
 8012aa8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8012aaa:	2300      	movs	r3, #0
 8012aac:	623b      	str	r3, [r7, #32]
 8012aae:	e014      	b.n	8012ada <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8012ab0:	69bb      	ldr	r3, [r7, #24]
 8012ab2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8012ab6:	681a      	ldr	r2, [r3, #0]
 8012ab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012aba:	601a      	str	r2, [r3, #0]
    pDest++;
 8012abc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012abe:	3301      	adds	r3, #1
 8012ac0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8012ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012ac4:	3301      	adds	r3, #1
 8012ac6:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8012ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012aca:	3301      	adds	r3, #1
 8012acc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8012ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012ad0:	3301      	adds	r3, #1
 8012ad2:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8012ad4:	6a3b      	ldr	r3, [r7, #32]
 8012ad6:	3301      	adds	r3, #1
 8012ad8:	623b      	str	r3, [r7, #32]
 8012ada:	6a3a      	ldr	r2, [r7, #32]
 8012adc:	697b      	ldr	r3, [r7, #20]
 8012ade:	429a      	cmp	r2, r3
 8012ae0:	d3e6      	bcc.n	8012ab0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8012ae2:	8bfb      	ldrh	r3, [r7, #30]
 8012ae4:	2b00      	cmp	r3, #0
 8012ae6:	d01e      	beq.n	8012b26 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8012ae8:	2300      	movs	r3, #0
 8012aea:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8012aec:	69bb      	ldr	r3, [r7, #24]
 8012aee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8012af2:	461a      	mov	r2, r3
 8012af4:	f107 0310 	add.w	r3, r7, #16
 8012af8:	6812      	ldr	r2, [r2, #0]
 8012afa:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8012afc:	693a      	ldr	r2, [r7, #16]
 8012afe:	6a3b      	ldr	r3, [r7, #32]
 8012b00:	b2db      	uxtb	r3, r3
 8012b02:	00db      	lsls	r3, r3, #3
 8012b04:	fa22 f303 	lsr.w	r3, r2, r3
 8012b08:	b2da      	uxtb	r2, r3
 8012b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012b0c:	701a      	strb	r2, [r3, #0]
      i++;
 8012b0e:	6a3b      	ldr	r3, [r7, #32]
 8012b10:	3301      	adds	r3, #1
 8012b12:	623b      	str	r3, [r7, #32]
      pDest++;
 8012b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012b16:	3301      	adds	r3, #1
 8012b18:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8012b1a:	8bfb      	ldrh	r3, [r7, #30]
 8012b1c:	3b01      	subs	r3, #1
 8012b1e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8012b20:	8bfb      	ldrh	r3, [r7, #30]
 8012b22:	2b00      	cmp	r3, #0
 8012b24:	d1ea      	bne.n	8012afc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8012b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8012b28:	4618      	mov	r0, r3
 8012b2a:	372c      	adds	r7, #44	@ 0x2c
 8012b2c:	46bd      	mov	sp, r7
 8012b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b32:	4770      	bx	lr

08012b34 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8012b34:	b480      	push	{r7}
 8012b36:	b085      	sub	sp, #20
 8012b38:	af00      	add	r7, sp, #0
 8012b3a:	6078      	str	r0, [r7, #4]
 8012b3c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012b3e:	687b      	ldr	r3, [r7, #4]
 8012b40:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8012b42:	683b      	ldr	r3, [r7, #0]
 8012b44:	781b      	ldrb	r3, [r3, #0]
 8012b46:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8012b48:	683b      	ldr	r3, [r7, #0]
 8012b4a:	785b      	ldrb	r3, [r3, #1]
 8012b4c:	2b01      	cmp	r3, #1
 8012b4e:	d12c      	bne.n	8012baa <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8012b50:	68bb      	ldr	r3, [r7, #8]
 8012b52:	015a      	lsls	r2, r3, #5
 8012b54:	68fb      	ldr	r3, [r7, #12]
 8012b56:	4413      	add	r3, r2
 8012b58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012b5c:	681b      	ldr	r3, [r3, #0]
 8012b5e:	2b00      	cmp	r3, #0
 8012b60:	db12      	blt.n	8012b88 <USB_EPSetStall+0x54>
 8012b62:	68bb      	ldr	r3, [r7, #8]
 8012b64:	2b00      	cmp	r3, #0
 8012b66:	d00f      	beq.n	8012b88 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8012b68:	68bb      	ldr	r3, [r7, #8]
 8012b6a:	015a      	lsls	r2, r3, #5
 8012b6c:	68fb      	ldr	r3, [r7, #12]
 8012b6e:	4413      	add	r3, r2
 8012b70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012b74:	681b      	ldr	r3, [r3, #0]
 8012b76:	68ba      	ldr	r2, [r7, #8]
 8012b78:	0151      	lsls	r1, r2, #5
 8012b7a:	68fa      	ldr	r2, [r7, #12]
 8012b7c:	440a      	add	r2, r1
 8012b7e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8012b82:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8012b86:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8012b88:	68bb      	ldr	r3, [r7, #8]
 8012b8a:	015a      	lsls	r2, r3, #5
 8012b8c:	68fb      	ldr	r3, [r7, #12]
 8012b8e:	4413      	add	r3, r2
 8012b90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012b94:	681b      	ldr	r3, [r3, #0]
 8012b96:	68ba      	ldr	r2, [r7, #8]
 8012b98:	0151      	lsls	r1, r2, #5
 8012b9a:	68fa      	ldr	r2, [r7, #12]
 8012b9c:	440a      	add	r2, r1
 8012b9e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8012ba2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8012ba6:	6013      	str	r3, [r2, #0]
 8012ba8:	e02b      	b.n	8012c02 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8012baa:	68bb      	ldr	r3, [r7, #8]
 8012bac:	015a      	lsls	r2, r3, #5
 8012bae:	68fb      	ldr	r3, [r7, #12]
 8012bb0:	4413      	add	r3, r2
 8012bb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012bb6:	681b      	ldr	r3, [r3, #0]
 8012bb8:	2b00      	cmp	r3, #0
 8012bba:	db12      	blt.n	8012be2 <USB_EPSetStall+0xae>
 8012bbc:	68bb      	ldr	r3, [r7, #8]
 8012bbe:	2b00      	cmp	r3, #0
 8012bc0:	d00f      	beq.n	8012be2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8012bc2:	68bb      	ldr	r3, [r7, #8]
 8012bc4:	015a      	lsls	r2, r3, #5
 8012bc6:	68fb      	ldr	r3, [r7, #12]
 8012bc8:	4413      	add	r3, r2
 8012bca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012bce:	681b      	ldr	r3, [r3, #0]
 8012bd0:	68ba      	ldr	r2, [r7, #8]
 8012bd2:	0151      	lsls	r1, r2, #5
 8012bd4:	68fa      	ldr	r2, [r7, #12]
 8012bd6:	440a      	add	r2, r1
 8012bd8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8012bdc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8012be0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8012be2:	68bb      	ldr	r3, [r7, #8]
 8012be4:	015a      	lsls	r2, r3, #5
 8012be6:	68fb      	ldr	r3, [r7, #12]
 8012be8:	4413      	add	r3, r2
 8012bea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012bee:	681b      	ldr	r3, [r3, #0]
 8012bf0:	68ba      	ldr	r2, [r7, #8]
 8012bf2:	0151      	lsls	r1, r2, #5
 8012bf4:	68fa      	ldr	r2, [r7, #12]
 8012bf6:	440a      	add	r2, r1
 8012bf8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8012bfc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8012c00:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8012c02:	2300      	movs	r3, #0
}
 8012c04:	4618      	mov	r0, r3
 8012c06:	3714      	adds	r7, #20
 8012c08:	46bd      	mov	sp, r7
 8012c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c0e:	4770      	bx	lr

08012c10 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8012c10:	b480      	push	{r7}
 8012c12:	b085      	sub	sp, #20
 8012c14:	af00      	add	r7, sp, #0
 8012c16:	6078      	str	r0, [r7, #4]
 8012c18:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012c1a:	687b      	ldr	r3, [r7, #4]
 8012c1c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8012c1e:	683b      	ldr	r3, [r7, #0]
 8012c20:	781b      	ldrb	r3, [r3, #0]
 8012c22:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8012c24:	683b      	ldr	r3, [r7, #0]
 8012c26:	785b      	ldrb	r3, [r3, #1]
 8012c28:	2b01      	cmp	r3, #1
 8012c2a:	d128      	bne.n	8012c7e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8012c2c:	68bb      	ldr	r3, [r7, #8]
 8012c2e:	015a      	lsls	r2, r3, #5
 8012c30:	68fb      	ldr	r3, [r7, #12]
 8012c32:	4413      	add	r3, r2
 8012c34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012c38:	681b      	ldr	r3, [r3, #0]
 8012c3a:	68ba      	ldr	r2, [r7, #8]
 8012c3c:	0151      	lsls	r1, r2, #5
 8012c3e:	68fa      	ldr	r2, [r7, #12]
 8012c40:	440a      	add	r2, r1
 8012c42:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8012c46:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8012c4a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8012c4c:	683b      	ldr	r3, [r7, #0]
 8012c4e:	791b      	ldrb	r3, [r3, #4]
 8012c50:	2b03      	cmp	r3, #3
 8012c52:	d003      	beq.n	8012c5c <USB_EPClearStall+0x4c>
 8012c54:	683b      	ldr	r3, [r7, #0]
 8012c56:	791b      	ldrb	r3, [r3, #4]
 8012c58:	2b02      	cmp	r3, #2
 8012c5a:	d138      	bne.n	8012cce <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8012c5c:	68bb      	ldr	r3, [r7, #8]
 8012c5e:	015a      	lsls	r2, r3, #5
 8012c60:	68fb      	ldr	r3, [r7, #12]
 8012c62:	4413      	add	r3, r2
 8012c64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012c68:	681b      	ldr	r3, [r3, #0]
 8012c6a:	68ba      	ldr	r2, [r7, #8]
 8012c6c:	0151      	lsls	r1, r2, #5
 8012c6e:	68fa      	ldr	r2, [r7, #12]
 8012c70:	440a      	add	r2, r1
 8012c72:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8012c76:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8012c7a:	6013      	str	r3, [r2, #0]
 8012c7c:	e027      	b.n	8012cce <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8012c7e:	68bb      	ldr	r3, [r7, #8]
 8012c80:	015a      	lsls	r2, r3, #5
 8012c82:	68fb      	ldr	r3, [r7, #12]
 8012c84:	4413      	add	r3, r2
 8012c86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012c8a:	681b      	ldr	r3, [r3, #0]
 8012c8c:	68ba      	ldr	r2, [r7, #8]
 8012c8e:	0151      	lsls	r1, r2, #5
 8012c90:	68fa      	ldr	r2, [r7, #12]
 8012c92:	440a      	add	r2, r1
 8012c94:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8012c98:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8012c9c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8012c9e:	683b      	ldr	r3, [r7, #0]
 8012ca0:	791b      	ldrb	r3, [r3, #4]
 8012ca2:	2b03      	cmp	r3, #3
 8012ca4:	d003      	beq.n	8012cae <USB_EPClearStall+0x9e>
 8012ca6:	683b      	ldr	r3, [r7, #0]
 8012ca8:	791b      	ldrb	r3, [r3, #4]
 8012caa:	2b02      	cmp	r3, #2
 8012cac:	d10f      	bne.n	8012cce <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8012cae:	68bb      	ldr	r3, [r7, #8]
 8012cb0:	015a      	lsls	r2, r3, #5
 8012cb2:	68fb      	ldr	r3, [r7, #12]
 8012cb4:	4413      	add	r3, r2
 8012cb6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012cba:	681b      	ldr	r3, [r3, #0]
 8012cbc:	68ba      	ldr	r2, [r7, #8]
 8012cbe:	0151      	lsls	r1, r2, #5
 8012cc0:	68fa      	ldr	r2, [r7, #12]
 8012cc2:	440a      	add	r2, r1
 8012cc4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8012cc8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8012ccc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8012cce:	2300      	movs	r3, #0
}
 8012cd0:	4618      	mov	r0, r3
 8012cd2:	3714      	adds	r7, #20
 8012cd4:	46bd      	mov	sp, r7
 8012cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cda:	4770      	bx	lr

08012cdc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8012cdc:	b480      	push	{r7}
 8012cde:	b085      	sub	sp, #20
 8012ce0:	af00      	add	r7, sp, #0
 8012ce2:	6078      	str	r0, [r7, #4]
 8012ce4:	460b      	mov	r3, r1
 8012ce6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012ce8:	687b      	ldr	r3, [r7, #4]
 8012cea:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8012cec:	68fb      	ldr	r3, [r7, #12]
 8012cee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012cf2:	681b      	ldr	r3, [r3, #0]
 8012cf4:	68fa      	ldr	r2, [r7, #12]
 8012cf6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8012cfa:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8012cfe:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8012d00:	68fb      	ldr	r3, [r7, #12]
 8012d02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012d06:	681a      	ldr	r2, [r3, #0]
 8012d08:	78fb      	ldrb	r3, [r7, #3]
 8012d0a:	011b      	lsls	r3, r3, #4
 8012d0c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8012d10:	68f9      	ldr	r1, [r7, #12]
 8012d12:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8012d16:	4313      	orrs	r3, r2
 8012d18:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8012d1a:	2300      	movs	r3, #0
}
 8012d1c:	4618      	mov	r0, r3
 8012d1e:	3714      	adds	r7, #20
 8012d20:	46bd      	mov	sp, r7
 8012d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d26:	4770      	bx	lr

08012d28 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8012d28:	b480      	push	{r7}
 8012d2a:	b085      	sub	sp, #20
 8012d2c:	af00      	add	r7, sp, #0
 8012d2e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012d30:	687b      	ldr	r3, [r7, #4]
 8012d32:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8012d34:	68fb      	ldr	r3, [r7, #12]
 8012d36:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8012d3a:	681b      	ldr	r3, [r3, #0]
 8012d3c:	68fa      	ldr	r2, [r7, #12]
 8012d3e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8012d42:	f023 0303 	bic.w	r3, r3, #3
 8012d46:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8012d48:	68fb      	ldr	r3, [r7, #12]
 8012d4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012d4e:	685b      	ldr	r3, [r3, #4]
 8012d50:	68fa      	ldr	r2, [r7, #12]
 8012d52:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8012d56:	f023 0302 	bic.w	r3, r3, #2
 8012d5a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8012d5c:	2300      	movs	r3, #0
}
 8012d5e:	4618      	mov	r0, r3
 8012d60:	3714      	adds	r7, #20
 8012d62:	46bd      	mov	sp, r7
 8012d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d68:	4770      	bx	lr

08012d6a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8012d6a:	b480      	push	{r7}
 8012d6c:	b085      	sub	sp, #20
 8012d6e:	af00      	add	r7, sp, #0
 8012d70:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012d72:	687b      	ldr	r3, [r7, #4]
 8012d74:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8012d76:	68fb      	ldr	r3, [r7, #12]
 8012d78:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8012d7c:	681b      	ldr	r3, [r3, #0]
 8012d7e:	68fa      	ldr	r2, [r7, #12]
 8012d80:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8012d84:	f023 0303 	bic.w	r3, r3, #3
 8012d88:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8012d8a:	68fb      	ldr	r3, [r7, #12]
 8012d8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012d90:	685b      	ldr	r3, [r3, #4]
 8012d92:	68fa      	ldr	r2, [r7, #12]
 8012d94:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8012d98:	f043 0302 	orr.w	r3, r3, #2
 8012d9c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8012d9e:	2300      	movs	r3, #0
}
 8012da0:	4618      	mov	r0, r3
 8012da2:	3714      	adds	r7, #20
 8012da4:	46bd      	mov	sp, r7
 8012da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012daa:	4770      	bx	lr

08012dac <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8012dac:	b480      	push	{r7}
 8012dae:	b085      	sub	sp, #20
 8012db0:	af00      	add	r7, sp, #0
 8012db2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8012db4:	687b      	ldr	r3, [r7, #4]
 8012db6:	695b      	ldr	r3, [r3, #20]
 8012db8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8012dba:	687b      	ldr	r3, [r7, #4]
 8012dbc:	699b      	ldr	r3, [r3, #24]
 8012dbe:	68fa      	ldr	r2, [r7, #12]
 8012dc0:	4013      	ands	r3, r2
 8012dc2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8012dc4:	68fb      	ldr	r3, [r7, #12]
}
 8012dc6:	4618      	mov	r0, r3
 8012dc8:	3714      	adds	r7, #20
 8012dca:	46bd      	mov	sp, r7
 8012dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dd0:	4770      	bx	lr

08012dd2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8012dd2:	b480      	push	{r7}
 8012dd4:	b085      	sub	sp, #20
 8012dd6:	af00      	add	r7, sp, #0
 8012dd8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012dda:	687b      	ldr	r3, [r7, #4]
 8012ddc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8012dde:	68fb      	ldr	r3, [r7, #12]
 8012de0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012de4:	699b      	ldr	r3, [r3, #24]
 8012de6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8012de8:	68fb      	ldr	r3, [r7, #12]
 8012dea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012dee:	69db      	ldr	r3, [r3, #28]
 8012df0:	68ba      	ldr	r2, [r7, #8]
 8012df2:	4013      	ands	r3, r2
 8012df4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8012df6:	68bb      	ldr	r3, [r7, #8]
 8012df8:	0c1b      	lsrs	r3, r3, #16
}
 8012dfa:	4618      	mov	r0, r3
 8012dfc:	3714      	adds	r7, #20
 8012dfe:	46bd      	mov	sp, r7
 8012e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e04:	4770      	bx	lr

08012e06 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8012e06:	b480      	push	{r7}
 8012e08:	b085      	sub	sp, #20
 8012e0a:	af00      	add	r7, sp, #0
 8012e0c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012e0e:	687b      	ldr	r3, [r7, #4]
 8012e10:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8012e12:	68fb      	ldr	r3, [r7, #12]
 8012e14:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012e18:	699b      	ldr	r3, [r3, #24]
 8012e1a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8012e1c:	68fb      	ldr	r3, [r7, #12]
 8012e1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012e22:	69db      	ldr	r3, [r3, #28]
 8012e24:	68ba      	ldr	r2, [r7, #8]
 8012e26:	4013      	ands	r3, r2
 8012e28:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8012e2a:	68bb      	ldr	r3, [r7, #8]
 8012e2c:	b29b      	uxth	r3, r3
}
 8012e2e:	4618      	mov	r0, r3
 8012e30:	3714      	adds	r7, #20
 8012e32:	46bd      	mov	sp, r7
 8012e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e38:	4770      	bx	lr

08012e3a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8012e3a:	b480      	push	{r7}
 8012e3c:	b085      	sub	sp, #20
 8012e3e:	af00      	add	r7, sp, #0
 8012e40:	6078      	str	r0, [r7, #4]
 8012e42:	460b      	mov	r3, r1
 8012e44:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012e46:	687b      	ldr	r3, [r7, #4]
 8012e48:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8012e4a:	78fb      	ldrb	r3, [r7, #3]
 8012e4c:	015a      	lsls	r2, r3, #5
 8012e4e:	68fb      	ldr	r3, [r7, #12]
 8012e50:	4413      	add	r3, r2
 8012e52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012e56:	689b      	ldr	r3, [r3, #8]
 8012e58:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8012e5a:	68fb      	ldr	r3, [r7, #12]
 8012e5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012e60:	695b      	ldr	r3, [r3, #20]
 8012e62:	68ba      	ldr	r2, [r7, #8]
 8012e64:	4013      	ands	r3, r2
 8012e66:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8012e68:	68bb      	ldr	r3, [r7, #8]
}
 8012e6a:	4618      	mov	r0, r3
 8012e6c:	3714      	adds	r7, #20
 8012e6e:	46bd      	mov	sp, r7
 8012e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e74:	4770      	bx	lr

08012e76 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8012e76:	b480      	push	{r7}
 8012e78:	b087      	sub	sp, #28
 8012e7a:	af00      	add	r7, sp, #0
 8012e7c:	6078      	str	r0, [r7, #4]
 8012e7e:	460b      	mov	r3, r1
 8012e80:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012e82:	687b      	ldr	r3, [r7, #4]
 8012e84:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8012e86:	697b      	ldr	r3, [r7, #20]
 8012e88:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012e8c:	691b      	ldr	r3, [r3, #16]
 8012e8e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8012e90:	697b      	ldr	r3, [r7, #20]
 8012e92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012e96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012e98:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8012e9a:	78fb      	ldrb	r3, [r7, #3]
 8012e9c:	f003 030f 	and.w	r3, r3, #15
 8012ea0:	68fa      	ldr	r2, [r7, #12]
 8012ea2:	fa22 f303 	lsr.w	r3, r2, r3
 8012ea6:	01db      	lsls	r3, r3, #7
 8012ea8:	b2db      	uxtb	r3, r3
 8012eaa:	693a      	ldr	r2, [r7, #16]
 8012eac:	4313      	orrs	r3, r2
 8012eae:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8012eb0:	78fb      	ldrb	r3, [r7, #3]
 8012eb2:	015a      	lsls	r2, r3, #5
 8012eb4:	697b      	ldr	r3, [r7, #20]
 8012eb6:	4413      	add	r3, r2
 8012eb8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012ebc:	689b      	ldr	r3, [r3, #8]
 8012ebe:	693a      	ldr	r2, [r7, #16]
 8012ec0:	4013      	ands	r3, r2
 8012ec2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8012ec4:	68bb      	ldr	r3, [r7, #8]
}
 8012ec6:	4618      	mov	r0, r3
 8012ec8:	371c      	adds	r7, #28
 8012eca:	46bd      	mov	sp, r7
 8012ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ed0:	4770      	bx	lr

08012ed2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8012ed2:	b480      	push	{r7}
 8012ed4:	b083      	sub	sp, #12
 8012ed6:	af00      	add	r7, sp, #0
 8012ed8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8012eda:	687b      	ldr	r3, [r7, #4]
 8012edc:	695b      	ldr	r3, [r3, #20]
 8012ede:	f003 0301 	and.w	r3, r3, #1
}
 8012ee2:	4618      	mov	r0, r3
 8012ee4:	370c      	adds	r7, #12
 8012ee6:	46bd      	mov	sp, r7
 8012ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012eec:	4770      	bx	lr
	...

08012ef0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8012ef0:	b480      	push	{r7}
 8012ef2:	b085      	sub	sp, #20
 8012ef4:	af00      	add	r7, sp, #0
 8012ef6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012ef8:	687b      	ldr	r3, [r7, #4]
 8012efa:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8012efc:	68fb      	ldr	r3, [r7, #12]
 8012efe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012f02:	681a      	ldr	r2, [r3, #0]
 8012f04:	68fb      	ldr	r3, [r7, #12]
 8012f06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012f0a:	4619      	mov	r1, r3
 8012f0c:	4b09      	ldr	r3, [pc, #36]	@ (8012f34 <USB_ActivateSetup+0x44>)
 8012f0e:	4013      	ands	r3, r2
 8012f10:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8012f12:	68fb      	ldr	r3, [r7, #12]
 8012f14:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012f18:	685b      	ldr	r3, [r3, #4]
 8012f1a:	68fa      	ldr	r2, [r7, #12]
 8012f1c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8012f20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8012f24:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8012f26:	2300      	movs	r3, #0
}
 8012f28:	4618      	mov	r0, r3
 8012f2a:	3714      	adds	r7, #20
 8012f2c:	46bd      	mov	sp, r7
 8012f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f32:	4770      	bx	lr
 8012f34:	fffff800 	.word	0xfffff800

08012f38 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8012f38:	b480      	push	{r7}
 8012f3a:	b087      	sub	sp, #28
 8012f3c:	af00      	add	r7, sp, #0
 8012f3e:	60f8      	str	r0, [r7, #12]
 8012f40:	460b      	mov	r3, r1
 8012f42:	607a      	str	r2, [r7, #4]
 8012f44:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012f46:	68fb      	ldr	r3, [r7, #12]
 8012f48:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8012f4a:	68fb      	ldr	r3, [r7, #12]
 8012f4c:	333c      	adds	r3, #60	@ 0x3c
 8012f4e:	3304      	adds	r3, #4
 8012f50:	681b      	ldr	r3, [r3, #0]
 8012f52:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8012f54:	693b      	ldr	r3, [r7, #16]
 8012f56:	4a26      	ldr	r2, [pc, #152]	@ (8012ff0 <USB_EP0_OutStart+0xb8>)
 8012f58:	4293      	cmp	r3, r2
 8012f5a:	d90a      	bls.n	8012f72 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8012f5c:	697b      	ldr	r3, [r7, #20]
 8012f5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012f62:	681b      	ldr	r3, [r3, #0]
 8012f64:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8012f68:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8012f6c:	d101      	bne.n	8012f72 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8012f6e:	2300      	movs	r3, #0
 8012f70:	e037      	b.n	8012fe2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8012f72:	697b      	ldr	r3, [r7, #20]
 8012f74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012f78:	461a      	mov	r2, r3
 8012f7a:	2300      	movs	r3, #0
 8012f7c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8012f7e:	697b      	ldr	r3, [r7, #20]
 8012f80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012f84:	691b      	ldr	r3, [r3, #16]
 8012f86:	697a      	ldr	r2, [r7, #20]
 8012f88:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8012f8c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8012f90:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8012f92:	697b      	ldr	r3, [r7, #20]
 8012f94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012f98:	691b      	ldr	r3, [r3, #16]
 8012f9a:	697a      	ldr	r2, [r7, #20]
 8012f9c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8012fa0:	f043 0318 	orr.w	r3, r3, #24
 8012fa4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8012fa6:	697b      	ldr	r3, [r7, #20]
 8012fa8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012fac:	691b      	ldr	r3, [r3, #16]
 8012fae:	697a      	ldr	r2, [r7, #20]
 8012fb0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8012fb4:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8012fb8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8012fba:	7afb      	ldrb	r3, [r7, #11]
 8012fbc:	2b01      	cmp	r3, #1
 8012fbe:	d10f      	bne.n	8012fe0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8012fc0:	697b      	ldr	r3, [r7, #20]
 8012fc2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012fc6:	461a      	mov	r2, r3
 8012fc8:	687b      	ldr	r3, [r7, #4]
 8012fca:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8012fcc:	697b      	ldr	r3, [r7, #20]
 8012fce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012fd2:	681b      	ldr	r3, [r3, #0]
 8012fd4:	697a      	ldr	r2, [r7, #20]
 8012fd6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8012fda:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8012fde:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8012fe0:	2300      	movs	r3, #0
}
 8012fe2:	4618      	mov	r0, r3
 8012fe4:	371c      	adds	r7, #28
 8012fe6:	46bd      	mov	sp, r7
 8012fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fec:	4770      	bx	lr
 8012fee:	bf00      	nop
 8012ff0:	4f54300a 	.word	0x4f54300a

08012ff4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8012ff4:	b480      	push	{r7}
 8012ff6:	b085      	sub	sp, #20
 8012ff8:	af00      	add	r7, sp, #0
 8012ffa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8012ffc:	2300      	movs	r3, #0
 8012ffe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8013000:	68fb      	ldr	r3, [r7, #12]
 8013002:	3301      	adds	r3, #1
 8013004:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8013006:	68fb      	ldr	r3, [r7, #12]
 8013008:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 801300c:	d901      	bls.n	8013012 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 801300e:	2303      	movs	r3, #3
 8013010:	e01b      	b.n	801304a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8013012:	687b      	ldr	r3, [r7, #4]
 8013014:	691b      	ldr	r3, [r3, #16]
 8013016:	2b00      	cmp	r3, #0
 8013018:	daf2      	bge.n	8013000 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 801301a:	2300      	movs	r3, #0
 801301c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 801301e:	687b      	ldr	r3, [r7, #4]
 8013020:	691b      	ldr	r3, [r3, #16]
 8013022:	f043 0201 	orr.w	r2, r3, #1
 8013026:	687b      	ldr	r3, [r7, #4]
 8013028:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 801302a:	68fb      	ldr	r3, [r7, #12]
 801302c:	3301      	adds	r3, #1
 801302e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8013030:	68fb      	ldr	r3, [r7, #12]
 8013032:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8013036:	d901      	bls.n	801303c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8013038:	2303      	movs	r3, #3
 801303a:	e006      	b.n	801304a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 801303c:	687b      	ldr	r3, [r7, #4]
 801303e:	691b      	ldr	r3, [r3, #16]
 8013040:	f003 0301 	and.w	r3, r3, #1
 8013044:	2b01      	cmp	r3, #1
 8013046:	d0f0      	beq.n	801302a <USB_CoreReset+0x36>

  return HAL_OK;
 8013048:	2300      	movs	r3, #0
}
 801304a:	4618      	mov	r0, r3
 801304c:	3714      	adds	r7, #20
 801304e:	46bd      	mov	sp, r7
 8013050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013054:	4770      	bx	lr

08013056 <XBEE_Init>:
#include "XBEE.h"

// FUNCTION IMPLEMENTEATIONS
// ------------------------------------------------------------------------------------

uint8_t XBEE_Init(XBEE_HandleTypeDef *hxbee) {
 8013056:	b580      	push	{r7, lr}
 8013058:	b082      	sub	sp, #8
 801305a:	af00      	add	r7, sp, #0
 801305c:	6078      	str	r0, [r7, #4]
	// Set up the variables
	hxbee->pkt_DMAHead   = 0;
 801305e:	687b      	ldr	r3, [r7, #4]
 8013060:	2200      	movs	r2, #0
 8013062:	741a      	strb	r2, [r3, #16]
	hxbee->pktRx_state   = 0;
 8013064:	687b      	ldr	r3, [r7, #4]
 8013066:	2200      	movs	r2, #0
 8013068:	745a      	strb	r2, [r3, #17]
	hxbee->pktTx_state   = 0;
 801306a:	687b      	ldr	r3, [r7, #4]
 801306c:	2200      	movs	r2, #0
 801306e:	76da      	strb	r2, [r3, #27]
	hxbee->pktRx_idxPush = 0;
 8013070:	687b      	ldr	r3, [r7, #4]
 8013072:	2200      	movs	r2, #0
 8013074:	765a      	strb	r2, [r3, #25]
	hxbee->pktRx_idxPop  = 0;
 8013076:	687b      	ldr	r3, [r7, #4]
 8013078:	2200      	movs	r2, #0
 801307a:	769a      	strb	r2, [r3, #26]
	hxbee->pktTx_idxPush = 0;
 801307c:	687b      	ldr	r3, [r7, #4]
 801307e:	2200      	movs	r2, #0
 8013080:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
	hxbee->pktTx_idxPop  = 0;
 8013084:	687b      	ldr	r3, [r7, #4]
 8013086:	2200      	movs	r2, #0
 8013088:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

	// Allocate mem
	hxbee->pkt_bufDMA  = malloc(PKT_RAWSIZE);
 801308c:	2044      	movs	r0, #68	@ 0x44
 801308e:	f002 fddb 	bl	8015c48 <malloc>
 8013092:	4603      	mov	r3, r0
 8013094:	461a      	mov	r2, r3
 8013096:	687b      	ldr	r3, [r7, #4]
 8013098:	609a      	str	r2, [r3, #8]
	hxbee->pkt_bufPart = malloc(PKT_RAWSIZE);
 801309a:	2044      	movs	r0, #68	@ 0x44
 801309c:	f002 fdd4 	bl	8015c48 <malloc>
 80130a0:	4603      	mov	r3, r0
 80130a2:	461a      	mov	r2, r3
 80130a4:	687b      	ldr	r3, [r7, #4]
 80130a6:	60da      	str	r2, [r3, #12]
	hxbee->pktRx_mem   = malloc(hxbee->pktRx_max*PKT_RAWSIZE);
 80130a8:	687b      	ldr	r3, [r7, #4]
 80130aa:	7e1b      	ldrb	r3, [r3, #24]
 80130ac:	461a      	mov	r2, r3
 80130ae:	4613      	mov	r3, r2
 80130b0:	011b      	lsls	r3, r3, #4
 80130b2:	4413      	add	r3, r2
 80130b4:	009b      	lsls	r3, r3, #2
 80130b6:	4618      	mov	r0, r3
 80130b8:	f002 fdc6 	bl	8015c48 <malloc>
 80130bc:	4603      	mov	r3, r0
 80130be:	461a      	mov	r2, r3
 80130c0:	687b      	ldr	r3, [r7, #4]
 80130c2:	615a      	str	r2, [r3, #20]
	hxbee->pktTx_mem   = malloc(hxbee->pktTx_max*PKT_RAWSIZE);
 80130c4:	687b      	ldr	r3, [r7, #4]
 80130c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80130ca:	461a      	mov	r2, r3
 80130cc:	4613      	mov	r3, r2
 80130ce:	011b      	lsls	r3, r3, #4
 80130d0:	4413      	add	r3, r2
 80130d2:	009b      	lsls	r3, r3, #2
 80130d4:	4618      	mov	r0, r3
 80130d6:	f002 fdb7 	bl	8015c48 <malloc>
 80130da:	4603      	mov	r3, r0
 80130dc:	461a      	mov	r2, r3
 80130de:	687b      	ldr	r3, [r7, #4]
 80130e0:	61da      	str	r2, [r3, #28]

	// Begin the cyclic UART capture
	// Make sure the DMA is circular
	return HAL_UART_Receive_DMA(hxbee->uart_handle, hxbee->pkt_bufDMA, PKT_RAWSIZE);
 80130e2:	687b      	ldr	r3, [r7, #4]
 80130e4:	6818      	ldr	r0, [r3, #0]
 80130e6:	687b      	ldr	r3, [r7, #4]
 80130e8:	689b      	ldr	r3, [r3, #8]
 80130ea:	2244      	movs	r2, #68	@ 0x44
 80130ec:	4619      	mov	r1, r3
 80130ee:	f7fd f97d 	bl	80103ec <HAL_UART_Receive_DMA>
 80130f2:	4603      	mov	r3, r0
}
 80130f4:	4618      	mov	r0, r3
 80130f6:	3708      	adds	r7, #8
 80130f8:	46bd      	mov	sp, r7
 80130fa:	bd80      	pop	{r7, pc}

080130fc <XBEE_TXPacket>:
	hxbee->pktRx_idxPop %= hxbee->pktRx_max;

	return 0;
}

uint8_t XBEE_TXPacket(XBEE_HandleTypeDef *hxbee, uint8_t *pTxBuffer, uint16_t pkt_num) {
 80130fc:	b580      	push	{r7, lr}
 80130fe:	b086      	sub	sp, #24
 8013100:	af00      	add	r7, sp, #0
 8013102:	60f8      	str	r0, [r7, #12]
 8013104:	60b9      	str	r1, [r7, #8]
 8013106:	4613      	mov	r3, r2
 8013108:	80fb      	strh	r3, [r7, #6]
	// Attempt to increment the packet buffer index
	// Note: We don't actually increment the index until the end of the function in case something goes wrong
	uint8_t pkt_idx = hxbee->pktTx_idxPush + 1;
 801310a:	68fb      	ldr	r3, [r7, #12]
 801310c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8013110:	3301      	adds	r3, #1
 8013112:	75fb      	strb	r3, [r7, #23]
	pkt_idx %= hxbee->pktTx_max;
 8013114:	68fb      	ldr	r3, [r7, #12]
 8013116:	f893 2020 	ldrb.w	r2, [r3, #32]
 801311a:	7dfb      	ldrb	r3, [r7, #23]
 801311c:	fbb3 f1f2 	udiv	r1, r3, r2
 8013120:	fb01 f202 	mul.w	r2, r1, r2
 8013124:	1a9b      	subs	r3, r3, r2
 8013126:	75fb      	strb	r3, [r7, #23]

	// No space left in the buffer, we have to drop this packet
	if (pkt_idx == hxbee->pktTx_idxPop) return 1;
 8013128:	68fb      	ldr	r3, [r7, #12]
 801312a:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 801312e:	7dfa      	ldrb	r2, [r7, #23]
 8013130:	429a      	cmp	r2, r3
 8013132:	d101      	bne.n	8013138 <XBEE_TXPacket+0x3c>
 8013134:	2301      	movs	r3, #1
 8013136:	e02c      	b.n	8013192 <XBEE_TXPacket+0x96>

	// Get a reference to this memory location
	uint8_t *newPkt = hxbee->pktTx_mem + hxbee->pktTx_idxPush*PKT_RAWSIZE;
 8013138:	68fb      	ldr	r3, [r7, #12]
 801313a:	69da      	ldr	r2, [r3, #28]
 801313c:	68fb      	ldr	r3, [r7, #12]
 801313e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8013142:	4619      	mov	r1, r3
 8013144:	460b      	mov	r3, r1
 8013146:	011b      	lsls	r3, r3, #4
 8013148:	440b      	add	r3, r1
 801314a:	009b      	lsls	r3, r3, #2
 801314c:	4413      	add	r3, r2
 801314e:	613b      	str	r3, [r7, #16]

	// Construct the packet
	newPkt[0] = PKT_DELIMETER;
 8013150:	693b      	ldr	r3, [r7, #16]
 8013152:	22aa      	movs	r2, #170	@ 0xaa
 8013154:	701a      	strb	r2, [r3, #0]
	newPkt[1] = pkt_num >> 8;
 8013156:	88fb      	ldrh	r3, [r7, #6]
 8013158:	0a1b      	lsrs	r3, r3, #8
 801315a:	b29a      	uxth	r2, r3
 801315c:	693b      	ldr	r3, [r7, #16]
 801315e:	3301      	adds	r3, #1
 8013160:	b2d2      	uxtb	r2, r2
 8013162:	701a      	strb	r2, [r3, #0]
	newPkt[2] = pkt_num & 0x00FF;
 8013164:	693b      	ldr	r3, [r7, #16]
 8013166:	3302      	adds	r3, #2
 8013168:	88fa      	ldrh	r2, [r7, #6]
 801316a:	b2d2      	uxtb	r2, r2
 801316c:	701a      	strb	r2, [r3, #0]
	newPkt[3] = 0x00; // TODO: Checksum
 801316e:	693b      	ldr	r3, [r7, #16]
 8013170:	3303      	adds	r3, #3
 8013172:	2200      	movs	r2, #0
 8013174:	701a      	strb	r2, [r3, #0]
	memcpy(newPkt + 4, pTxBuffer, PKT_DATASIZE);
 8013176:	693b      	ldr	r3, [r7, #16]
 8013178:	3304      	adds	r3, #4
 801317a:	2240      	movs	r2, #64	@ 0x40
 801317c:	68b9      	ldr	r1, [r7, #8]
 801317e:	4618      	mov	r0, r3
 8013180:	f002 fe7e 	bl	8015e80 <memcpy>

	// Try and immediately send the packet
	// TODO: Make this a DMA process
	// TODO: Set the bust state, interrupts
	// TODO: Make sure there's adequate delay between TX (5ms for 68B packet)
	HAL_UART_Transmit(hxbee->uart_handle, newPkt, PKT_RAWSIZE, 30);	// Transmit the buffer
 8013184:	68fb      	ldr	r3, [r7, #12]
 8013186:	6818      	ldr	r0, [r3, #0]
 8013188:	231e      	movs	r3, #30
 801318a:	2244      	movs	r2, #68	@ 0x44
 801318c:	6939      	ldr	r1, [r7, #16]
 801318e:	f7fd f89f 	bl	80102d0 <HAL_UART_Transmit>
}
 8013192:	4618      	mov	r0, r3
 8013194:	3718      	adds	r7, #24
 8013196:	46bd      	mov	sp, r7
 8013198:	bd80      	pop	{r7, pc}
	...

0801319c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801319c:	b580      	push	{r7, lr}
 801319e:	b084      	sub	sp, #16
 80131a0:	af00      	add	r7, sp, #0
 80131a2:	6078      	str	r0, [r7, #4]
 80131a4:	460b      	mov	r3, r1
 80131a6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80131a8:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80131ac:	f002 fd08 	bl	8015bc0 <USBD_static_malloc>
 80131b0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80131b2:	68fb      	ldr	r3, [r7, #12]
 80131b4:	2b00      	cmp	r3, #0
 80131b6:	d109      	bne.n	80131cc <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80131b8:	687b      	ldr	r3, [r7, #4]
 80131ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80131be:	687b      	ldr	r3, [r7, #4]
 80131c0:	32b0      	adds	r2, #176	@ 0xb0
 80131c2:	2100      	movs	r1, #0
 80131c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80131c8:	2302      	movs	r3, #2
 80131ca:	e0d4      	b.n	8013376 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80131cc:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80131d0:	2100      	movs	r1, #0
 80131d2:	68f8      	ldr	r0, [r7, #12]
 80131d4:	f002 fe10 	bl	8015df8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80131d8:	687b      	ldr	r3, [r7, #4]
 80131da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80131de:	687b      	ldr	r3, [r7, #4]
 80131e0:	32b0      	adds	r2, #176	@ 0xb0
 80131e2:	68f9      	ldr	r1, [r7, #12]
 80131e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80131e8:	687b      	ldr	r3, [r7, #4]
 80131ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80131ee:	687b      	ldr	r3, [r7, #4]
 80131f0:	32b0      	adds	r2, #176	@ 0xb0
 80131f2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80131f6:	687b      	ldr	r3, [r7, #4]
 80131f8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80131fc:	687b      	ldr	r3, [r7, #4]
 80131fe:	7c1b      	ldrb	r3, [r3, #16]
 8013200:	2b00      	cmp	r3, #0
 8013202:	d138      	bne.n	8013276 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8013204:	4b5e      	ldr	r3, [pc, #376]	@ (8013380 <USBD_CDC_Init+0x1e4>)
 8013206:	7819      	ldrb	r1, [r3, #0]
 8013208:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801320c:	2202      	movs	r2, #2
 801320e:	6878      	ldr	r0, [r7, #4]
 8013210:	f002 fbb3 	bl	801597a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8013214:	4b5a      	ldr	r3, [pc, #360]	@ (8013380 <USBD_CDC_Init+0x1e4>)
 8013216:	781b      	ldrb	r3, [r3, #0]
 8013218:	f003 020f 	and.w	r2, r3, #15
 801321c:	6879      	ldr	r1, [r7, #4]
 801321e:	4613      	mov	r3, r2
 8013220:	009b      	lsls	r3, r3, #2
 8013222:	4413      	add	r3, r2
 8013224:	009b      	lsls	r3, r3, #2
 8013226:	440b      	add	r3, r1
 8013228:	3324      	adds	r3, #36	@ 0x24
 801322a:	2201      	movs	r2, #1
 801322c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 801322e:	4b55      	ldr	r3, [pc, #340]	@ (8013384 <USBD_CDC_Init+0x1e8>)
 8013230:	7819      	ldrb	r1, [r3, #0]
 8013232:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8013236:	2202      	movs	r2, #2
 8013238:	6878      	ldr	r0, [r7, #4]
 801323a:	f002 fb9e 	bl	801597a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 801323e:	4b51      	ldr	r3, [pc, #324]	@ (8013384 <USBD_CDC_Init+0x1e8>)
 8013240:	781b      	ldrb	r3, [r3, #0]
 8013242:	f003 020f 	and.w	r2, r3, #15
 8013246:	6879      	ldr	r1, [r7, #4]
 8013248:	4613      	mov	r3, r2
 801324a:	009b      	lsls	r3, r3, #2
 801324c:	4413      	add	r3, r2
 801324e:	009b      	lsls	r3, r3, #2
 8013250:	440b      	add	r3, r1
 8013252:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8013256:	2201      	movs	r2, #1
 8013258:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 801325a:	4b4b      	ldr	r3, [pc, #300]	@ (8013388 <USBD_CDC_Init+0x1ec>)
 801325c:	781b      	ldrb	r3, [r3, #0]
 801325e:	f003 020f 	and.w	r2, r3, #15
 8013262:	6879      	ldr	r1, [r7, #4]
 8013264:	4613      	mov	r3, r2
 8013266:	009b      	lsls	r3, r3, #2
 8013268:	4413      	add	r3, r2
 801326a:	009b      	lsls	r3, r3, #2
 801326c:	440b      	add	r3, r1
 801326e:	3326      	adds	r3, #38	@ 0x26
 8013270:	2210      	movs	r2, #16
 8013272:	801a      	strh	r2, [r3, #0]
 8013274:	e035      	b.n	80132e2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8013276:	4b42      	ldr	r3, [pc, #264]	@ (8013380 <USBD_CDC_Init+0x1e4>)
 8013278:	7819      	ldrb	r1, [r3, #0]
 801327a:	2340      	movs	r3, #64	@ 0x40
 801327c:	2202      	movs	r2, #2
 801327e:	6878      	ldr	r0, [r7, #4]
 8013280:	f002 fb7b 	bl	801597a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8013284:	4b3e      	ldr	r3, [pc, #248]	@ (8013380 <USBD_CDC_Init+0x1e4>)
 8013286:	781b      	ldrb	r3, [r3, #0]
 8013288:	f003 020f 	and.w	r2, r3, #15
 801328c:	6879      	ldr	r1, [r7, #4]
 801328e:	4613      	mov	r3, r2
 8013290:	009b      	lsls	r3, r3, #2
 8013292:	4413      	add	r3, r2
 8013294:	009b      	lsls	r3, r3, #2
 8013296:	440b      	add	r3, r1
 8013298:	3324      	adds	r3, #36	@ 0x24
 801329a:	2201      	movs	r2, #1
 801329c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 801329e:	4b39      	ldr	r3, [pc, #228]	@ (8013384 <USBD_CDC_Init+0x1e8>)
 80132a0:	7819      	ldrb	r1, [r3, #0]
 80132a2:	2340      	movs	r3, #64	@ 0x40
 80132a4:	2202      	movs	r2, #2
 80132a6:	6878      	ldr	r0, [r7, #4]
 80132a8:	f002 fb67 	bl	801597a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80132ac:	4b35      	ldr	r3, [pc, #212]	@ (8013384 <USBD_CDC_Init+0x1e8>)
 80132ae:	781b      	ldrb	r3, [r3, #0]
 80132b0:	f003 020f 	and.w	r2, r3, #15
 80132b4:	6879      	ldr	r1, [r7, #4]
 80132b6:	4613      	mov	r3, r2
 80132b8:	009b      	lsls	r3, r3, #2
 80132ba:	4413      	add	r3, r2
 80132bc:	009b      	lsls	r3, r3, #2
 80132be:	440b      	add	r3, r1
 80132c0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80132c4:	2201      	movs	r2, #1
 80132c6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80132c8:	4b2f      	ldr	r3, [pc, #188]	@ (8013388 <USBD_CDC_Init+0x1ec>)
 80132ca:	781b      	ldrb	r3, [r3, #0]
 80132cc:	f003 020f 	and.w	r2, r3, #15
 80132d0:	6879      	ldr	r1, [r7, #4]
 80132d2:	4613      	mov	r3, r2
 80132d4:	009b      	lsls	r3, r3, #2
 80132d6:	4413      	add	r3, r2
 80132d8:	009b      	lsls	r3, r3, #2
 80132da:	440b      	add	r3, r1
 80132dc:	3326      	adds	r3, #38	@ 0x26
 80132de:	2210      	movs	r2, #16
 80132e0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80132e2:	4b29      	ldr	r3, [pc, #164]	@ (8013388 <USBD_CDC_Init+0x1ec>)
 80132e4:	7819      	ldrb	r1, [r3, #0]
 80132e6:	2308      	movs	r3, #8
 80132e8:	2203      	movs	r2, #3
 80132ea:	6878      	ldr	r0, [r7, #4]
 80132ec:	f002 fb45 	bl	801597a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80132f0:	4b25      	ldr	r3, [pc, #148]	@ (8013388 <USBD_CDC_Init+0x1ec>)
 80132f2:	781b      	ldrb	r3, [r3, #0]
 80132f4:	f003 020f 	and.w	r2, r3, #15
 80132f8:	6879      	ldr	r1, [r7, #4]
 80132fa:	4613      	mov	r3, r2
 80132fc:	009b      	lsls	r3, r3, #2
 80132fe:	4413      	add	r3, r2
 8013300:	009b      	lsls	r3, r3, #2
 8013302:	440b      	add	r3, r1
 8013304:	3324      	adds	r3, #36	@ 0x24
 8013306:	2201      	movs	r2, #1
 8013308:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 801330a:	68fb      	ldr	r3, [r7, #12]
 801330c:	2200      	movs	r2, #0
 801330e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8013312:	687b      	ldr	r3, [r7, #4]
 8013314:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8013318:	687a      	ldr	r2, [r7, #4]
 801331a:	33b0      	adds	r3, #176	@ 0xb0
 801331c:	009b      	lsls	r3, r3, #2
 801331e:	4413      	add	r3, r2
 8013320:	685b      	ldr	r3, [r3, #4]
 8013322:	681b      	ldr	r3, [r3, #0]
 8013324:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8013326:	68fb      	ldr	r3, [r7, #12]
 8013328:	2200      	movs	r2, #0
 801332a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 801332e:	68fb      	ldr	r3, [r7, #12]
 8013330:	2200      	movs	r2, #0
 8013332:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8013336:	68fb      	ldr	r3, [r7, #12]
 8013338:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 801333c:	2b00      	cmp	r3, #0
 801333e:	d101      	bne.n	8013344 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8013340:	2302      	movs	r3, #2
 8013342:	e018      	b.n	8013376 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013344:	687b      	ldr	r3, [r7, #4]
 8013346:	7c1b      	ldrb	r3, [r3, #16]
 8013348:	2b00      	cmp	r3, #0
 801334a:	d10a      	bne.n	8013362 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801334c:	4b0d      	ldr	r3, [pc, #52]	@ (8013384 <USBD_CDC_Init+0x1e8>)
 801334e:	7819      	ldrb	r1, [r3, #0]
 8013350:	68fb      	ldr	r3, [r7, #12]
 8013352:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8013356:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801335a:	6878      	ldr	r0, [r7, #4]
 801335c:	f002 fbfc 	bl	8015b58 <USBD_LL_PrepareReceive>
 8013360:	e008      	b.n	8013374 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8013362:	4b08      	ldr	r3, [pc, #32]	@ (8013384 <USBD_CDC_Init+0x1e8>)
 8013364:	7819      	ldrb	r1, [r3, #0]
 8013366:	68fb      	ldr	r3, [r7, #12]
 8013368:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 801336c:	2340      	movs	r3, #64	@ 0x40
 801336e:	6878      	ldr	r0, [r7, #4]
 8013370:	f002 fbf2 	bl	8015b58 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8013374:	2300      	movs	r3, #0
}
 8013376:	4618      	mov	r0, r3
 8013378:	3710      	adds	r7, #16
 801337a:	46bd      	mov	sp, r7
 801337c:	bd80      	pop	{r7, pc}
 801337e:	bf00      	nop
 8013380:	2400009b 	.word	0x2400009b
 8013384:	2400009c 	.word	0x2400009c
 8013388:	2400009d 	.word	0x2400009d

0801338c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801338c:	b580      	push	{r7, lr}
 801338e:	b082      	sub	sp, #8
 8013390:	af00      	add	r7, sp, #0
 8013392:	6078      	str	r0, [r7, #4]
 8013394:	460b      	mov	r3, r1
 8013396:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8013398:	4b3a      	ldr	r3, [pc, #232]	@ (8013484 <USBD_CDC_DeInit+0xf8>)
 801339a:	781b      	ldrb	r3, [r3, #0]
 801339c:	4619      	mov	r1, r3
 801339e:	6878      	ldr	r0, [r7, #4]
 80133a0:	f002 fb11 	bl	80159c6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80133a4:	4b37      	ldr	r3, [pc, #220]	@ (8013484 <USBD_CDC_DeInit+0xf8>)
 80133a6:	781b      	ldrb	r3, [r3, #0]
 80133a8:	f003 020f 	and.w	r2, r3, #15
 80133ac:	6879      	ldr	r1, [r7, #4]
 80133ae:	4613      	mov	r3, r2
 80133b0:	009b      	lsls	r3, r3, #2
 80133b2:	4413      	add	r3, r2
 80133b4:	009b      	lsls	r3, r3, #2
 80133b6:	440b      	add	r3, r1
 80133b8:	3324      	adds	r3, #36	@ 0x24
 80133ba:	2200      	movs	r2, #0
 80133bc:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80133be:	4b32      	ldr	r3, [pc, #200]	@ (8013488 <USBD_CDC_DeInit+0xfc>)
 80133c0:	781b      	ldrb	r3, [r3, #0]
 80133c2:	4619      	mov	r1, r3
 80133c4:	6878      	ldr	r0, [r7, #4]
 80133c6:	f002 fafe 	bl	80159c6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80133ca:	4b2f      	ldr	r3, [pc, #188]	@ (8013488 <USBD_CDC_DeInit+0xfc>)
 80133cc:	781b      	ldrb	r3, [r3, #0]
 80133ce:	f003 020f 	and.w	r2, r3, #15
 80133d2:	6879      	ldr	r1, [r7, #4]
 80133d4:	4613      	mov	r3, r2
 80133d6:	009b      	lsls	r3, r3, #2
 80133d8:	4413      	add	r3, r2
 80133da:	009b      	lsls	r3, r3, #2
 80133dc:	440b      	add	r3, r1
 80133de:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80133e2:	2200      	movs	r2, #0
 80133e4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80133e6:	4b29      	ldr	r3, [pc, #164]	@ (801348c <USBD_CDC_DeInit+0x100>)
 80133e8:	781b      	ldrb	r3, [r3, #0]
 80133ea:	4619      	mov	r1, r3
 80133ec:	6878      	ldr	r0, [r7, #4]
 80133ee:	f002 faea 	bl	80159c6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80133f2:	4b26      	ldr	r3, [pc, #152]	@ (801348c <USBD_CDC_DeInit+0x100>)
 80133f4:	781b      	ldrb	r3, [r3, #0]
 80133f6:	f003 020f 	and.w	r2, r3, #15
 80133fa:	6879      	ldr	r1, [r7, #4]
 80133fc:	4613      	mov	r3, r2
 80133fe:	009b      	lsls	r3, r3, #2
 8013400:	4413      	add	r3, r2
 8013402:	009b      	lsls	r3, r3, #2
 8013404:	440b      	add	r3, r1
 8013406:	3324      	adds	r3, #36	@ 0x24
 8013408:	2200      	movs	r2, #0
 801340a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 801340c:	4b1f      	ldr	r3, [pc, #124]	@ (801348c <USBD_CDC_DeInit+0x100>)
 801340e:	781b      	ldrb	r3, [r3, #0]
 8013410:	f003 020f 	and.w	r2, r3, #15
 8013414:	6879      	ldr	r1, [r7, #4]
 8013416:	4613      	mov	r3, r2
 8013418:	009b      	lsls	r3, r3, #2
 801341a:	4413      	add	r3, r2
 801341c:	009b      	lsls	r3, r3, #2
 801341e:	440b      	add	r3, r1
 8013420:	3326      	adds	r3, #38	@ 0x26
 8013422:	2200      	movs	r2, #0
 8013424:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8013426:	687b      	ldr	r3, [r7, #4]
 8013428:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801342c:	687b      	ldr	r3, [r7, #4]
 801342e:	32b0      	adds	r2, #176	@ 0xb0
 8013430:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013434:	2b00      	cmp	r3, #0
 8013436:	d01f      	beq.n	8013478 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8013438:	687b      	ldr	r3, [r7, #4]
 801343a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801343e:	687a      	ldr	r2, [r7, #4]
 8013440:	33b0      	adds	r3, #176	@ 0xb0
 8013442:	009b      	lsls	r3, r3, #2
 8013444:	4413      	add	r3, r2
 8013446:	685b      	ldr	r3, [r3, #4]
 8013448:	685b      	ldr	r3, [r3, #4]
 801344a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 801344c:	687b      	ldr	r3, [r7, #4]
 801344e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013452:	687b      	ldr	r3, [r7, #4]
 8013454:	32b0      	adds	r2, #176	@ 0xb0
 8013456:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801345a:	4618      	mov	r0, r3
 801345c:	f002 fbbe 	bl	8015bdc <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8013460:	687b      	ldr	r3, [r7, #4]
 8013462:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013466:	687b      	ldr	r3, [r7, #4]
 8013468:	32b0      	adds	r2, #176	@ 0xb0
 801346a:	2100      	movs	r1, #0
 801346c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8013470:	687b      	ldr	r3, [r7, #4]
 8013472:	2200      	movs	r2, #0
 8013474:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8013478:	2300      	movs	r3, #0
}
 801347a:	4618      	mov	r0, r3
 801347c:	3708      	adds	r7, #8
 801347e:	46bd      	mov	sp, r7
 8013480:	bd80      	pop	{r7, pc}
 8013482:	bf00      	nop
 8013484:	2400009b 	.word	0x2400009b
 8013488:	2400009c 	.word	0x2400009c
 801348c:	2400009d 	.word	0x2400009d

08013490 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8013490:	b580      	push	{r7, lr}
 8013492:	b086      	sub	sp, #24
 8013494:	af00      	add	r7, sp, #0
 8013496:	6078      	str	r0, [r7, #4]
 8013498:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801349a:	687b      	ldr	r3, [r7, #4]
 801349c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80134a0:	687b      	ldr	r3, [r7, #4]
 80134a2:	32b0      	adds	r2, #176	@ 0xb0
 80134a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80134a8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80134aa:	2300      	movs	r3, #0
 80134ac:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80134ae:	2300      	movs	r3, #0
 80134b0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80134b2:	2300      	movs	r3, #0
 80134b4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80134b6:	693b      	ldr	r3, [r7, #16]
 80134b8:	2b00      	cmp	r3, #0
 80134ba:	d101      	bne.n	80134c0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80134bc:	2303      	movs	r3, #3
 80134be:	e0bf      	b.n	8013640 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80134c0:	683b      	ldr	r3, [r7, #0]
 80134c2:	781b      	ldrb	r3, [r3, #0]
 80134c4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80134c8:	2b00      	cmp	r3, #0
 80134ca:	d050      	beq.n	801356e <USBD_CDC_Setup+0xde>
 80134cc:	2b20      	cmp	r3, #32
 80134ce:	f040 80af 	bne.w	8013630 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80134d2:	683b      	ldr	r3, [r7, #0]
 80134d4:	88db      	ldrh	r3, [r3, #6]
 80134d6:	2b00      	cmp	r3, #0
 80134d8:	d03a      	beq.n	8013550 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80134da:	683b      	ldr	r3, [r7, #0]
 80134dc:	781b      	ldrb	r3, [r3, #0]
 80134de:	b25b      	sxtb	r3, r3
 80134e0:	2b00      	cmp	r3, #0
 80134e2:	da1b      	bge.n	801351c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80134e4:	687b      	ldr	r3, [r7, #4]
 80134e6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80134ea:	687a      	ldr	r2, [r7, #4]
 80134ec:	33b0      	adds	r3, #176	@ 0xb0
 80134ee:	009b      	lsls	r3, r3, #2
 80134f0:	4413      	add	r3, r2
 80134f2:	685b      	ldr	r3, [r3, #4]
 80134f4:	689b      	ldr	r3, [r3, #8]
 80134f6:	683a      	ldr	r2, [r7, #0]
 80134f8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80134fa:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80134fc:	683a      	ldr	r2, [r7, #0]
 80134fe:	88d2      	ldrh	r2, [r2, #6]
 8013500:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8013502:	683b      	ldr	r3, [r7, #0]
 8013504:	88db      	ldrh	r3, [r3, #6]
 8013506:	2b07      	cmp	r3, #7
 8013508:	bf28      	it	cs
 801350a:	2307      	movcs	r3, #7
 801350c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 801350e:	693b      	ldr	r3, [r7, #16]
 8013510:	89fa      	ldrh	r2, [r7, #14]
 8013512:	4619      	mov	r1, r3
 8013514:	6878      	ldr	r0, [r7, #4]
 8013516:	f001 fdbd 	bl	8015094 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 801351a:	e090      	b.n	801363e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 801351c:	683b      	ldr	r3, [r7, #0]
 801351e:	785a      	ldrb	r2, [r3, #1]
 8013520:	693b      	ldr	r3, [r7, #16]
 8013522:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8013526:	683b      	ldr	r3, [r7, #0]
 8013528:	88db      	ldrh	r3, [r3, #6]
 801352a:	2b3f      	cmp	r3, #63	@ 0x3f
 801352c:	d803      	bhi.n	8013536 <USBD_CDC_Setup+0xa6>
 801352e:	683b      	ldr	r3, [r7, #0]
 8013530:	88db      	ldrh	r3, [r3, #6]
 8013532:	b2da      	uxtb	r2, r3
 8013534:	e000      	b.n	8013538 <USBD_CDC_Setup+0xa8>
 8013536:	2240      	movs	r2, #64	@ 0x40
 8013538:	693b      	ldr	r3, [r7, #16]
 801353a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 801353e:	6939      	ldr	r1, [r7, #16]
 8013540:	693b      	ldr	r3, [r7, #16]
 8013542:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8013546:	461a      	mov	r2, r3
 8013548:	6878      	ldr	r0, [r7, #4]
 801354a:	f001 fdcf 	bl	80150ec <USBD_CtlPrepareRx>
      break;
 801354e:	e076      	b.n	801363e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8013550:	687b      	ldr	r3, [r7, #4]
 8013552:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8013556:	687a      	ldr	r2, [r7, #4]
 8013558:	33b0      	adds	r3, #176	@ 0xb0
 801355a:	009b      	lsls	r3, r3, #2
 801355c:	4413      	add	r3, r2
 801355e:	685b      	ldr	r3, [r3, #4]
 8013560:	689b      	ldr	r3, [r3, #8]
 8013562:	683a      	ldr	r2, [r7, #0]
 8013564:	7850      	ldrb	r0, [r2, #1]
 8013566:	2200      	movs	r2, #0
 8013568:	6839      	ldr	r1, [r7, #0]
 801356a:	4798      	blx	r3
      break;
 801356c:	e067      	b.n	801363e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801356e:	683b      	ldr	r3, [r7, #0]
 8013570:	785b      	ldrb	r3, [r3, #1]
 8013572:	2b0b      	cmp	r3, #11
 8013574:	d851      	bhi.n	801361a <USBD_CDC_Setup+0x18a>
 8013576:	a201      	add	r2, pc, #4	@ (adr r2, 801357c <USBD_CDC_Setup+0xec>)
 8013578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801357c:	080135ad 	.word	0x080135ad
 8013580:	08013629 	.word	0x08013629
 8013584:	0801361b 	.word	0x0801361b
 8013588:	0801361b 	.word	0x0801361b
 801358c:	0801361b 	.word	0x0801361b
 8013590:	0801361b 	.word	0x0801361b
 8013594:	0801361b 	.word	0x0801361b
 8013598:	0801361b 	.word	0x0801361b
 801359c:	0801361b 	.word	0x0801361b
 80135a0:	0801361b 	.word	0x0801361b
 80135a4:	080135d7 	.word	0x080135d7
 80135a8:	08013601 	.word	0x08013601
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80135ac:	687b      	ldr	r3, [r7, #4]
 80135ae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80135b2:	b2db      	uxtb	r3, r3
 80135b4:	2b03      	cmp	r3, #3
 80135b6:	d107      	bne.n	80135c8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80135b8:	f107 030a 	add.w	r3, r7, #10
 80135bc:	2202      	movs	r2, #2
 80135be:	4619      	mov	r1, r3
 80135c0:	6878      	ldr	r0, [r7, #4]
 80135c2:	f001 fd67 	bl	8015094 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80135c6:	e032      	b.n	801362e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80135c8:	6839      	ldr	r1, [r7, #0]
 80135ca:	6878      	ldr	r0, [r7, #4]
 80135cc:	f001 fce5 	bl	8014f9a <USBD_CtlError>
            ret = USBD_FAIL;
 80135d0:	2303      	movs	r3, #3
 80135d2:	75fb      	strb	r3, [r7, #23]
          break;
 80135d4:	e02b      	b.n	801362e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80135d6:	687b      	ldr	r3, [r7, #4]
 80135d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80135dc:	b2db      	uxtb	r3, r3
 80135de:	2b03      	cmp	r3, #3
 80135e0:	d107      	bne.n	80135f2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80135e2:	f107 030d 	add.w	r3, r7, #13
 80135e6:	2201      	movs	r2, #1
 80135e8:	4619      	mov	r1, r3
 80135ea:	6878      	ldr	r0, [r7, #4]
 80135ec:	f001 fd52 	bl	8015094 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80135f0:	e01d      	b.n	801362e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80135f2:	6839      	ldr	r1, [r7, #0]
 80135f4:	6878      	ldr	r0, [r7, #4]
 80135f6:	f001 fcd0 	bl	8014f9a <USBD_CtlError>
            ret = USBD_FAIL;
 80135fa:	2303      	movs	r3, #3
 80135fc:	75fb      	strb	r3, [r7, #23]
          break;
 80135fe:	e016      	b.n	801362e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8013600:	687b      	ldr	r3, [r7, #4]
 8013602:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013606:	b2db      	uxtb	r3, r3
 8013608:	2b03      	cmp	r3, #3
 801360a:	d00f      	beq.n	801362c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 801360c:	6839      	ldr	r1, [r7, #0]
 801360e:	6878      	ldr	r0, [r7, #4]
 8013610:	f001 fcc3 	bl	8014f9a <USBD_CtlError>
            ret = USBD_FAIL;
 8013614:	2303      	movs	r3, #3
 8013616:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8013618:	e008      	b.n	801362c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 801361a:	6839      	ldr	r1, [r7, #0]
 801361c:	6878      	ldr	r0, [r7, #4]
 801361e:	f001 fcbc 	bl	8014f9a <USBD_CtlError>
          ret = USBD_FAIL;
 8013622:	2303      	movs	r3, #3
 8013624:	75fb      	strb	r3, [r7, #23]
          break;
 8013626:	e002      	b.n	801362e <USBD_CDC_Setup+0x19e>
          break;
 8013628:	bf00      	nop
 801362a:	e008      	b.n	801363e <USBD_CDC_Setup+0x1ae>
          break;
 801362c:	bf00      	nop
      }
      break;
 801362e:	e006      	b.n	801363e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8013630:	6839      	ldr	r1, [r7, #0]
 8013632:	6878      	ldr	r0, [r7, #4]
 8013634:	f001 fcb1 	bl	8014f9a <USBD_CtlError>
      ret = USBD_FAIL;
 8013638:	2303      	movs	r3, #3
 801363a:	75fb      	strb	r3, [r7, #23]
      break;
 801363c:	bf00      	nop
  }

  return (uint8_t)ret;
 801363e:	7dfb      	ldrb	r3, [r7, #23]
}
 8013640:	4618      	mov	r0, r3
 8013642:	3718      	adds	r7, #24
 8013644:	46bd      	mov	sp, r7
 8013646:	bd80      	pop	{r7, pc}

08013648 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8013648:	b580      	push	{r7, lr}
 801364a:	b084      	sub	sp, #16
 801364c:	af00      	add	r7, sp, #0
 801364e:	6078      	str	r0, [r7, #4]
 8013650:	460b      	mov	r3, r1
 8013652:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8013654:	687b      	ldr	r3, [r7, #4]
 8013656:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801365a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 801365c:	687b      	ldr	r3, [r7, #4]
 801365e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013662:	687b      	ldr	r3, [r7, #4]
 8013664:	32b0      	adds	r2, #176	@ 0xb0
 8013666:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801366a:	2b00      	cmp	r3, #0
 801366c:	d101      	bne.n	8013672 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 801366e:	2303      	movs	r3, #3
 8013670:	e065      	b.n	801373e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013672:	687b      	ldr	r3, [r7, #4]
 8013674:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013678:	687b      	ldr	r3, [r7, #4]
 801367a:	32b0      	adds	r2, #176	@ 0xb0
 801367c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013680:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8013682:	78fb      	ldrb	r3, [r7, #3]
 8013684:	f003 020f 	and.w	r2, r3, #15
 8013688:	6879      	ldr	r1, [r7, #4]
 801368a:	4613      	mov	r3, r2
 801368c:	009b      	lsls	r3, r3, #2
 801368e:	4413      	add	r3, r2
 8013690:	009b      	lsls	r3, r3, #2
 8013692:	440b      	add	r3, r1
 8013694:	3318      	adds	r3, #24
 8013696:	681b      	ldr	r3, [r3, #0]
 8013698:	2b00      	cmp	r3, #0
 801369a:	d02f      	beq.n	80136fc <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 801369c:	78fb      	ldrb	r3, [r7, #3]
 801369e:	f003 020f 	and.w	r2, r3, #15
 80136a2:	6879      	ldr	r1, [r7, #4]
 80136a4:	4613      	mov	r3, r2
 80136a6:	009b      	lsls	r3, r3, #2
 80136a8:	4413      	add	r3, r2
 80136aa:	009b      	lsls	r3, r3, #2
 80136ac:	440b      	add	r3, r1
 80136ae:	3318      	adds	r3, #24
 80136b0:	681a      	ldr	r2, [r3, #0]
 80136b2:	78fb      	ldrb	r3, [r7, #3]
 80136b4:	f003 010f 	and.w	r1, r3, #15
 80136b8:	68f8      	ldr	r0, [r7, #12]
 80136ba:	460b      	mov	r3, r1
 80136bc:	00db      	lsls	r3, r3, #3
 80136be:	440b      	add	r3, r1
 80136c0:	009b      	lsls	r3, r3, #2
 80136c2:	4403      	add	r3, r0
 80136c4:	331c      	adds	r3, #28
 80136c6:	681b      	ldr	r3, [r3, #0]
 80136c8:	fbb2 f1f3 	udiv	r1, r2, r3
 80136cc:	fb01 f303 	mul.w	r3, r1, r3
 80136d0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80136d2:	2b00      	cmp	r3, #0
 80136d4:	d112      	bne.n	80136fc <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80136d6:	78fb      	ldrb	r3, [r7, #3]
 80136d8:	f003 020f 	and.w	r2, r3, #15
 80136dc:	6879      	ldr	r1, [r7, #4]
 80136de:	4613      	mov	r3, r2
 80136e0:	009b      	lsls	r3, r3, #2
 80136e2:	4413      	add	r3, r2
 80136e4:	009b      	lsls	r3, r3, #2
 80136e6:	440b      	add	r3, r1
 80136e8:	3318      	adds	r3, #24
 80136ea:	2200      	movs	r2, #0
 80136ec:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80136ee:	78f9      	ldrb	r1, [r7, #3]
 80136f0:	2300      	movs	r3, #0
 80136f2:	2200      	movs	r2, #0
 80136f4:	6878      	ldr	r0, [r7, #4]
 80136f6:	f002 fa0e 	bl	8015b16 <USBD_LL_Transmit>
 80136fa:	e01f      	b.n	801373c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80136fc:	68bb      	ldr	r3, [r7, #8]
 80136fe:	2200      	movs	r2, #0
 8013700:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8013704:	687b      	ldr	r3, [r7, #4]
 8013706:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801370a:	687a      	ldr	r2, [r7, #4]
 801370c:	33b0      	adds	r3, #176	@ 0xb0
 801370e:	009b      	lsls	r3, r3, #2
 8013710:	4413      	add	r3, r2
 8013712:	685b      	ldr	r3, [r3, #4]
 8013714:	691b      	ldr	r3, [r3, #16]
 8013716:	2b00      	cmp	r3, #0
 8013718:	d010      	beq.n	801373c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 801371a:	687b      	ldr	r3, [r7, #4]
 801371c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8013720:	687a      	ldr	r2, [r7, #4]
 8013722:	33b0      	adds	r3, #176	@ 0xb0
 8013724:	009b      	lsls	r3, r3, #2
 8013726:	4413      	add	r3, r2
 8013728:	685b      	ldr	r3, [r3, #4]
 801372a:	691b      	ldr	r3, [r3, #16]
 801372c:	68ba      	ldr	r2, [r7, #8]
 801372e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8013732:	68ba      	ldr	r2, [r7, #8]
 8013734:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8013738:	78fa      	ldrb	r2, [r7, #3]
 801373a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 801373c:	2300      	movs	r3, #0
}
 801373e:	4618      	mov	r0, r3
 8013740:	3710      	adds	r7, #16
 8013742:	46bd      	mov	sp, r7
 8013744:	bd80      	pop	{r7, pc}

08013746 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8013746:	b580      	push	{r7, lr}
 8013748:	b084      	sub	sp, #16
 801374a:	af00      	add	r7, sp, #0
 801374c:	6078      	str	r0, [r7, #4]
 801374e:	460b      	mov	r3, r1
 8013750:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013752:	687b      	ldr	r3, [r7, #4]
 8013754:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013758:	687b      	ldr	r3, [r7, #4]
 801375a:	32b0      	adds	r2, #176	@ 0xb0
 801375c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013760:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8013762:	687b      	ldr	r3, [r7, #4]
 8013764:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013768:	687b      	ldr	r3, [r7, #4]
 801376a:	32b0      	adds	r2, #176	@ 0xb0
 801376c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013770:	2b00      	cmp	r3, #0
 8013772:	d101      	bne.n	8013778 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8013774:	2303      	movs	r3, #3
 8013776:	e01a      	b.n	80137ae <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8013778:	78fb      	ldrb	r3, [r7, #3]
 801377a:	4619      	mov	r1, r3
 801377c:	6878      	ldr	r0, [r7, #4]
 801377e:	f002 fa0c 	bl	8015b9a <USBD_LL_GetRxDataSize>
 8013782:	4602      	mov	r2, r0
 8013784:	68fb      	ldr	r3, [r7, #12]
 8013786:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 801378a:	687b      	ldr	r3, [r7, #4]
 801378c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8013790:	687a      	ldr	r2, [r7, #4]
 8013792:	33b0      	adds	r3, #176	@ 0xb0
 8013794:	009b      	lsls	r3, r3, #2
 8013796:	4413      	add	r3, r2
 8013798:	685b      	ldr	r3, [r3, #4]
 801379a:	68db      	ldr	r3, [r3, #12]
 801379c:	68fa      	ldr	r2, [r7, #12]
 801379e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80137a2:	68fa      	ldr	r2, [r7, #12]
 80137a4:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80137a8:	4611      	mov	r1, r2
 80137aa:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80137ac:	2300      	movs	r3, #0
}
 80137ae:	4618      	mov	r0, r3
 80137b0:	3710      	adds	r7, #16
 80137b2:	46bd      	mov	sp, r7
 80137b4:	bd80      	pop	{r7, pc}

080137b6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80137b6:	b580      	push	{r7, lr}
 80137b8:	b084      	sub	sp, #16
 80137ba:	af00      	add	r7, sp, #0
 80137bc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80137be:	687b      	ldr	r3, [r7, #4]
 80137c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80137c4:	687b      	ldr	r3, [r7, #4]
 80137c6:	32b0      	adds	r2, #176	@ 0xb0
 80137c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80137cc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80137ce:	68fb      	ldr	r3, [r7, #12]
 80137d0:	2b00      	cmp	r3, #0
 80137d2:	d101      	bne.n	80137d8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80137d4:	2303      	movs	r3, #3
 80137d6:	e024      	b.n	8013822 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80137d8:	687b      	ldr	r3, [r7, #4]
 80137da:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80137de:	687a      	ldr	r2, [r7, #4]
 80137e0:	33b0      	adds	r3, #176	@ 0xb0
 80137e2:	009b      	lsls	r3, r3, #2
 80137e4:	4413      	add	r3, r2
 80137e6:	685b      	ldr	r3, [r3, #4]
 80137e8:	2b00      	cmp	r3, #0
 80137ea:	d019      	beq.n	8013820 <USBD_CDC_EP0_RxReady+0x6a>
 80137ec:	68fb      	ldr	r3, [r7, #12]
 80137ee:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80137f2:	2bff      	cmp	r3, #255	@ 0xff
 80137f4:	d014      	beq.n	8013820 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80137f6:	687b      	ldr	r3, [r7, #4]
 80137f8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80137fc:	687a      	ldr	r2, [r7, #4]
 80137fe:	33b0      	adds	r3, #176	@ 0xb0
 8013800:	009b      	lsls	r3, r3, #2
 8013802:	4413      	add	r3, r2
 8013804:	685b      	ldr	r3, [r3, #4]
 8013806:	689b      	ldr	r3, [r3, #8]
 8013808:	68fa      	ldr	r2, [r7, #12]
 801380a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 801380e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8013810:	68fa      	ldr	r2, [r7, #12]
 8013812:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8013816:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8013818:	68fb      	ldr	r3, [r7, #12]
 801381a:	22ff      	movs	r2, #255	@ 0xff
 801381c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8013820:	2300      	movs	r3, #0
}
 8013822:	4618      	mov	r0, r3
 8013824:	3710      	adds	r7, #16
 8013826:	46bd      	mov	sp, r7
 8013828:	bd80      	pop	{r7, pc}
	...

0801382c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 801382c:	b580      	push	{r7, lr}
 801382e:	b086      	sub	sp, #24
 8013830:	af00      	add	r7, sp, #0
 8013832:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8013834:	2182      	movs	r1, #130	@ 0x82
 8013836:	4818      	ldr	r0, [pc, #96]	@ (8013898 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8013838:	f000 fd4f 	bl	80142da <USBD_GetEpDesc>
 801383c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801383e:	2101      	movs	r1, #1
 8013840:	4815      	ldr	r0, [pc, #84]	@ (8013898 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8013842:	f000 fd4a 	bl	80142da <USBD_GetEpDesc>
 8013846:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8013848:	2181      	movs	r1, #129	@ 0x81
 801384a:	4813      	ldr	r0, [pc, #76]	@ (8013898 <USBD_CDC_GetFSCfgDesc+0x6c>)
 801384c:	f000 fd45 	bl	80142da <USBD_GetEpDesc>
 8013850:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8013852:	697b      	ldr	r3, [r7, #20]
 8013854:	2b00      	cmp	r3, #0
 8013856:	d002      	beq.n	801385e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8013858:	697b      	ldr	r3, [r7, #20]
 801385a:	2210      	movs	r2, #16
 801385c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801385e:	693b      	ldr	r3, [r7, #16]
 8013860:	2b00      	cmp	r3, #0
 8013862:	d006      	beq.n	8013872 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8013864:	693b      	ldr	r3, [r7, #16]
 8013866:	2200      	movs	r2, #0
 8013868:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801386c:	711a      	strb	r2, [r3, #4]
 801386e:	2200      	movs	r2, #0
 8013870:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8013872:	68fb      	ldr	r3, [r7, #12]
 8013874:	2b00      	cmp	r3, #0
 8013876:	d006      	beq.n	8013886 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8013878:	68fb      	ldr	r3, [r7, #12]
 801387a:	2200      	movs	r2, #0
 801387c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8013880:	711a      	strb	r2, [r3, #4]
 8013882:	2200      	movs	r2, #0
 8013884:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8013886:	687b      	ldr	r3, [r7, #4]
 8013888:	2243      	movs	r2, #67	@ 0x43
 801388a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 801388c:	4b02      	ldr	r3, [pc, #8]	@ (8013898 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 801388e:	4618      	mov	r0, r3
 8013890:	3718      	adds	r7, #24
 8013892:	46bd      	mov	sp, r7
 8013894:	bd80      	pop	{r7, pc}
 8013896:	bf00      	nop
 8013898:	24000058 	.word	0x24000058

0801389c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 801389c:	b580      	push	{r7, lr}
 801389e:	b086      	sub	sp, #24
 80138a0:	af00      	add	r7, sp, #0
 80138a2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80138a4:	2182      	movs	r1, #130	@ 0x82
 80138a6:	4818      	ldr	r0, [pc, #96]	@ (8013908 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80138a8:	f000 fd17 	bl	80142da <USBD_GetEpDesc>
 80138ac:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80138ae:	2101      	movs	r1, #1
 80138b0:	4815      	ldr	r0, [pc, #84]	@ (8013908 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80138b2:	f000 fd12 	bl	80142da <USBD_GetEpDesc>
 80138b6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80138b8:	2181      	movs	r1, #129	@ 0x81
 80138ba:	4813      	ldr	r0, [pc, #76]	@ (8013908 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80138bc:	f000 fd0d 	bl	80142da <USBD_GetEpDesc>
 80138c0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80138c2:	697b      	ldr	r3, [r7, #20]
 80138c4:	2b00      	cmp	r3, #0
 80138c6:	d002      	beq.n	80138ce <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80138c8:	697b      	ldr	r3, [r7, #20]
 80138ca:	2210      	movs	r2, #16
 80138cc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80138ce:	693b      	ldr	r3, [r7, #16]
 80138d0:	2b00      	cmp	r3, #0
 80138d2:	d006      	beq.n	80138e2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80138d4:	693b      	ldr	r3, [r7, #16]
 80138d6:	2200      	movs	r2, #0
 80138d8:	711a      	strb	r2, [r3, #4]
 80138da:	2200      	movs	r2, #0
 80138dc:	f042 0202 	orr.w	r2, r2, #2
 80138e0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80138e2:	68fb      	ldr	r3, [r7, #12]
 80138e4:	2b00      	cmp	r3, #0
 80138e6:	d006      	beq.n	80138f6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80138e8:	68fb      	ldr	r3, [r7, #12]
 80138ea:	2200      	movs	r2, #0
 80138ec:	711a      	strb	r2, [r3, #4]
 80138ee:	2200      	movs	r2, #0
 80138f0:	f042 0202 	orr.w	r2, r2, #2
 80138f4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80138f6:	687b      	ldr	r3, [r7, #4]
 80138f8:	2243      	movs	r2, #67	@ 0x43
 80138fa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80138fc:	4b02      	ldr	r3, [pc, #8]	@ (8013908 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80138fe:	4618      	mov	r0, r3
 8013900:	3718      	adds	r7, #24
 8013902:	46bd      	mov	sp, r7
 8013904:	bd80      	pop	{r7, pc}
 8013906:	bf00      	nop
 8013908:	24000058 	.word	0x24000058

0801390c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 801390c:	b580      	push	{r7, lr}
 801390e:	b086      	sub	sp, #24
 8013910:	af00      	add	r7, sp, #0
 8013912:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8013914:	2182      	movs	r1, #130	@ 0x82
 8013916:	4818      	ldr	r0, [pc, #96]	@ (8013978 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8013918:	f000 fcdf 	bl	80142da <USBD_GetEpDesc>
 801391c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801391e:	2101      	movs	r1, #1
 8013920:	4815      	ldr	r0, [pc, #84]	@ (8013978 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8013922:	f000 fcda 	bl	80142da <USBD_GetEpDesc>
 8013926:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8013928:	2181      	movs	r1, #129	@ 0x81
 801392a:	4813      	ldr	r0, [pc, #76]	@ (8013978 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 801392c:	f000 fcd5 	bl	80142da <USBD_GetEpDesc>
 8013930:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8013932:	697b      	ldr	r3, [r7, #20]
 8013934:	2b00      	cmp	r3, #0
 8013936:	d002      	beq.n	801393e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8013938:	697b      	ldr	r3, [r7, #20]
 801393a:	2210      	movs	r2, #16
 801393c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801393e:	693b      	ldr	r3, [r7, #16]
 8013940:	2b00      	cmp	r3, #0
 8013942:	d006      	beq.n	8013952 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8013944:	693b      	ldr	r3, [r7, #16]
 8013946:	2200      	movs	r2, #0
 8013948:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801394c:	711a      	strb	r2, [r3, #4]
 801394e:	2200      	movs	r2, #0
 8013950:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8013952:	68fb      	ldr	r3, [r7, #12]
 8013954:	2b00      	cmp	r3, #0
 8013956:	d006      	beq.n	8013966 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8013958:	68fb      	ldr	r3, [r7, #12]
 801395a:	2200      	movs	r2, #0
 801395c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8013960:	711a      	strb	r2, [r3, #4]
 8013962:	2200      	movs	r2, #0
 8013964:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8013966:	687b      	ldr	r3, [r7, #4]
 8013968:	2243      	movs	r2, #67	@ 0x43
 801396a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 801396c:	4b02      	ldr	r3, [pc, #8]	@ (8013978 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 801396e:	4618      	mov	r0, r3
 8013970:	3718      	adds	r7, #24
 8013972:	46bd      	mov	sp, r7
 8013974:	bd80      	pop	{r7, pc}
 8013976:	bf00      	nop
 8013978:	24000058 	.word	0x24000058

0801397c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 801397c:	b480      	push	{r7}
 801397e:	b083      	sub	sp, #12
 8013980:	af00      	add	r7, sp, #0
 8013982:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8013984:	687b      	ldr	r3, [r7, #4]
 8013986:	220a      	movs	r2, #10
 8013988:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 801398a:	4b03      	ldr	r3, [pc, #12]	@ (8013998 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 801398c:	4618      	mov	r0, r3
 801398e:	370c      	adds	r7, #12
 8013990:	46bd      	mov	sp, r7
 8013992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013996:	4770      	bx	lr
 8013998:	24000014 	.word	0x24000014

0801399c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 801399c:	b480      	push	{r7}
 801399e:	b083      	sub	sp, #12
 80139a0:	af00      	add	r7, sp, #0
 80139a2:	6078      	str	r0, [r7, #4]
 80139a4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80139a6:	683b      	ldr	r3, [r7, #0]
 80139a8:	2b00      	cmp	r3, #0
 80139aa:	d101      	bne.n	80139b0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80139ac:	2303      	movs	r3, #3
 80139ae:	e009      	b.n	80139c4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80139b0:	687b      	ldr	r3, [r7, #4]
 80139b2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80139b6:	687a      	ldr	r2, [r7, #4]
 80139b8:	33b0      	adds	r3, #176	@ 0xb0
 80139ba:	009b      	lsls	r3, r3, #2
 80139bc:	4413      	add	r3, r2
 80139be:	683a      	ldr	r2, [r7, #0]
 80139c0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80139c2:	2300      	movs	r3, #0
}
 80139c4:	4618      	mov	r0, r3
 80139c6:	370c      	adds	r7, #12
 80139c8:	46bd      	mov	sp, r7
 80139ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139ce:	4770      	bx	lr

080139d0 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80139d0:	b480      	push	{r7}
 80139d2:	b087      	sub	sp, #28
 80139d4:	af00      	add	r7, sp, #0
 80139d6:	60f8      	str	r0, [r7, #12]
 80139d8:	60b9      	str	r1, [r7, #8]
 80139da:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80139dc:	68fb      	ldr	r3, [r7, #12]
 80139de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80139e2:	68fb      	ldr	r3, [r7, #12]
 80139e4:	32b0      	adds	r2, #176	@ 0xb0
 80139e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80139ea:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80139ec:	697b      	ldr	r3, [r7, #20]
 80139ee:	2b00      	cmp	r3, #0
 80139f0:	d101      	bne.n	80139f6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80139f2:	2303      	movs	r3, #3
 80139f4:	e008      	b.n	8013a08 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80139f6:	697b      	ldr	r3, [r7, #20]
 80139f8:	68ba      	ldr	r2, [r7, #8]
 80139fa:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80139fe:	697b      	ldr	r3, [r7, #20]
 8013a00:	687a      	ldr	r2, [r7, #4]
 8013a02:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8013a06:	2300      	movs	r3, #0
}
 8013a08:	4618      	mov	r0, r3
 8013a0a:	371c      	adds	r7, #28
 8013a0c:	46bd      	mov	sp, r7
 8013a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a12:	4770      	bx	lr

08013a14 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8013a14:	b480      	push	{r7}
 8013a16:	b085      	sub	sp, #20
 8013a18:	af00      	add	r7, sp, #0
 8013a1a:	6078      	str	r0, [r7, #4]
 8013a1c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013a1e:	687b      	ldr	r3, [r7, #4]
 8013a20:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013a24:	687b      	ldr	r3, [r7, #4]
 8013a26:	32b0      	adds	r2, #176	@ 0xb0
 8013a28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013a2c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8013a2e:	68fb      	ldr	r3, [r7, #12]
 8013a30:	2b00      	cmp	r3, #0
 8013a32:	d101      	bne.n	8013a38 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8013a34:	2303      	movs	r3, #3
 8013a36:	e004      	b.n	8013a42 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8013a38:	68fb      	ldr	r3, [r7, #12]
 8013a3a:	683a      	ldr	r2, [r7, #0]
 8013a3c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8013a40:	2300      	movs	r3, #0
}
 8013a42:	4618      	mov	r0, r3
 8013a44:	3714      	adds	r7, #20
 8013a46:	46bd      	mov	sp, r7
 8013a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a4c:	4770      	bx	lr
	...

08013a50 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8013a50:	b580      	push	{r7, lr}
 8013a52:	b084      	sub	sp, #16
 8013a54:	af00      	add	r7, sp, #0
 8013a56:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013a58:	687b      	ldr	r3, [r7, #4]
 8013a5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013a5e:	687b      	ldr	r3, [r7, #4]
 8013a60:	32b0      	adds	r2, #176	@ 0xb0
 8013a62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013a66:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8013a68:	2301      	movs	r3, #1
 8013a6a:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8013a6c:	68bb      	ldr	r3, [r7, #8]
 8013a6e:	2b00      	cmp	r3, #0
 8013a70:	d101      	bne.n	8013a76 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8013a72:	2303      	movs	r3, #3
 8013a74:	e025      	b.n	8013ac2 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8013a76:	68bb      	ldr	r3, [r7, #8]
 8013a78:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8013a7c:	2b00      	cmp	r3, #0
 8013a7e:	d11f      	bne.n	8013ac0 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8013a80:	68bb      	ldr	r3, [r7, #8]
 8013a82:	2201      	movs	r2, #1
 8013a84:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8013a88:	4b10      	ldr	r3, [pc, #64]	@ (8013acc <USBD_CDC_TransmitPacket+0x7c>)
 8013a8a:	781b      	ldrb	r3, [r3, #0]
 8013a8c:	f003 020f 	and.w	r2, r3, #15
 8013a90:	68bb      	ldr	r3, [r7, #8]
 8013a92:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8013a96:	6878      	ldr	r0, [r7, #4]
 8013a98:	4613      	mov	r3, r2
 8013a9a:	009b      	lsls	r3, r3, #2
 8013a9c:	4413      	add	r3, r2
 8013a9e:	009b      	lsls	r3, r3, #2
 8013aa0:	4403      	add	r3, r0
 8013aa2:	3318      	adds	r3, #24
 8013aa4:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8013aa6:	4b09      	ldr	r3, [pc, #36]	@ (8013acc <USBD_CDC_TransmitPacket+0x7c>)
 8013aa8:	7819      	ldrb	r1, [r3, #0]
 8013aaa:	68bb      	ldr	r3, [r7, #8]
 8013aac:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8013ab0:	68bb      	ldr	r3, [r7, #8]
 8013ab2:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8013ab6:	6878      	ldr	r0, [r7, #4]
 8013ab8:	f002 f82d 	bl	8015b16 <USBD_LL_Transmit>

    ret = USBD_OK;
 8013abc:	2300      	movs	r3, #0
 8013abe:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8013ac0:	7bfb      	ldrb	r3, [r7, #15]
}
 8013ac2:	4618      	mov	r0, r3
 8013ac4:	3710      	adds	r7, #16
 8013ac6:	46bd      	mov	sp, r7
 8013ac8:	bd80      	pop	{r7, pc}
 8013aca:	bf00      	nop
 8013acc:	2400009b 	.word	0x2400009b

08013ad0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8013ad0:	b580      	push	{r7, lr}
 8013ad2:	b084      	sub	sp, #16
 8013ad4:	af00      	add	r7, sp, #0
 8013ad6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013ad8:	687b      	ldr	r3, [r7, #4]
 8013ada:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013ade:	687b      	ldr	r3, [r7, #4]
 8013ae0:	32b0      	adds	r2, #176	@ 0xb0
 8013ae2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013ae6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8013ae8:	687b      	ldr	r3, [r7, #4]
 8013aea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013aee:	687b      	ldr	r3, [r7, #4]
 8013af0:	32b0      	adds	r2, #176	@ 0xb0
 8013af2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013af6:	2b00      	cmp	r3, #0
 8013af8:	d101      	bne.n	8013afe <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8013afa:	2303      	movs	r3, #3
 8013afc:	e018      	b.n	8013b30 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013afe:	687b      	ldr	r3, [r7, #4]
 8013b00:	7c1b      	ldrb	r3, [r3, #16]
 8013b02:	2b00      	cmp	r3, #0
 8013b04:	d10a      	bne.n	8013b1c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8013b06:	4b0c      	ldr	r3, [pc, #48]	@ (8013b38 <USBD_CDC_ReceivePacket+0x68>)
 8013b08:	7819      	ldrb	r1, [r3, #0]
 8013b0a:	68fb      	ldr	r3, [r7, #12]
 8013b0c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8013b10:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8013b14:	6878      	ldr	r0, [r7, #4]
 8013b16:	f002 f81f 	bl	8015b58 <USBD_LL_PrepareReceive>
 8013b1a:	e008      	b.n	8013b2e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8013b1c:	4b06      	ldr	r3, [pc, #24]	@ (8013b38 <USBD_CDC_ReceivePacket+0x68>)
 8013b1e:	7819      	ldrb	r1, [r3, #0]
 8013b20:	68fb      	ldr	r3, [r7, #12]
 8013b22:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8013b26:	2340      	movs	r3, #64	@ 0x40
 8013b28:	6878      	ldr	r0, [r7, #4]
 8013b2a:	f002 f815 	bl	8015b58 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8013b2e:	2300      	movs	r3, #0
}
 8013b30:	4618      	mov	r0, r3
 8013b32:	3710      	adds	r7, #16
 8013b34:	46bd      	mov	sp, r7
 8013b36:	bd80      	pop	{r7, pc}
 8013b38:	2400009c 	.word	0x2400009c

08013b3c <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8013b3c:	b580      	push	{r7, lr}
 8013b3e:	b086      	sub	sp, #24
 8013b40:	af00      	add	r7, sp, #0
 8013b42:	60f8      	str	r0, [r7, #12]
 8013b44:	60b9      	str	r1, [r7, #8]
 8013b46:	4613      	mov	r3, r2
 8013b48:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8013b4a:	68fb      	ldr	r3, [r7, #12]
 8013b4c:	2b00      	cmp	r3, #0
 8013b4e:	d101      	bne.n	8013b54 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8013b50:	2303      	movs	r3, #3
 8013b52:	e01f      	b.n	8013b94 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8013b54:	68fb      	ldr	r3, [r7, #12]
 8013b56:	2200      	movs	r2, #0
 8013b58:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8013b5c:	68fb      	ldr	r3, [r7, #12]
 8013b5e:	2200      	movs	r2, #0
 8013b60:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8013b64:	68fb      	ldr	r3, [r7, #12]
 8013b66:	2200      	movs	r2, #0
 8013b68:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8013b6c:	68bb      	ldr	r3, [r7, #8]
 8013b6e:	2b00      	cmp	r3, #0
 8013b70:	d003      	beq.n	8013b7a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8013b72:	68fb      	ldr	r3, [r7, #12]
 8013b74:	68ba      	ldr	r2, [r7, #8]
 8013b76:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013b7a:	68fb      	ldr	r3, [r7, #12]
 8013b7c:	2201      	movs	r2, #1
 8013b7e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8013b82:	68fb      	ldr	r3, [r7, #12]
 8013b84:	79fa      	ldrb	r2, [r7, #7]
 8013b86:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8013b88:	68f8      	ldr	r0, [r7, #12]
 8013b8a:	f001 fe8b 	bl	80158a4 <USBD_LL_Init>
 8013b8e:	4603      	mov	r3, r0
 8013b90:	75fb      	strb	r3, [r7, #23]

  return ret;
 8013b92:	7dfb      	ldrb	r3, [r7, #23]
}
 8013b94:	4618      	mov	r0, r3
 8013b96:	3718      	adds	r7, #24
 8013b98:	46bd      	mov	sp, r7
 8013b9a:	bd80      	pop	{r7, pc}

08013b9c <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8013b9c:	b580      	push	{r7, lr}
 8013b9e:	b084      	sub	sp, #16
 8013ba0:	af00      	add	r7, sp, #0
 8013ba2:	6078      	str	r0, [r7, #4]
 8013ba4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8013ba6:	2300      	movs	r3, #0
 8013ba8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8013baa:	683b      	ldr	r3, [r7, #0]
 8013bac:	2b00      	cmp	r3, #0
 8013bae:	d101      	bne.n	8013bb4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8013bb0:	2303      	movs	r3, #3
 8013bb2:	e025      	b.n	8013c00 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8013bb4:	687b      	ldr	r3, [r7, #4]
 8013bb6:	683a      	ldr	r2, [r7, #0]
 8013bb8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8013bbc:	687b      	ldr	r3, [r7, #4]
 8013bbe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013bc2:	687b      	ldr	r3, [r7, #4]
 8013bc4:	32ae      	adds	r2, #174	@ 0xae
 8013bc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013bca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013bcc:	2b00      	cmp	r3, #0
 8013bce:	d00f      	beq.n	8013bf0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8013bd0:	687b      	ldr	r3, [r7, #4]
 8013bd2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013bd6:	687b      	ldr	r3, [r7, #4]
 8013bd8:	32ae      	adds	r2, #174	@ 0xae
 8013bda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013bde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013be0:	f107 020e 	add.w	r2, r7, #14
 8013be4:	4610      	mov	r0, r2
 8013be6:	4798      	blx	r3
 8013be8:	4602      	mov	r2, r0
 8013bea:	687b      	ldr	r3, [r7, #4]
 8013bec:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8013bf0:	687b      	ldr	r3, [r7, #4]
 8013bf2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8013bf6:	1c5a      	adds	r2, r3, #1
 8013bf8:	687b      	ldr	r3, [r7, #4]
 8013bfa:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8013bfe:	2300      	movs	r3, #0
}
 8013c00:	4618      	mov	r0, r3
 8013c02:	3710      	adds	r7, #16
 8013c04:	46bd      	mov	sp, r7
 8013c06:	bd80      	pop	{r7, pc}

08013c08 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8013c08:	b580      	push	{r7, lr}
 8013c0a:	b082      	sub	sp, #8
 8013c0c:	af00      	add	r7, sp, #0
 8013c0e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8013c10:	6878      	ldr	r0, [r7, #4]
 8013c12:	f001 fe97 	bl	8015944 <USBD_LL_Start>
 8013c16:	4603      	mov	r3, r0
}
 8013c18:	4618      	mov	r0, r3
 8013c1a:	3708      	adds	r7, #8
 8013c1c:	46bd      	mov	sp, r7
 8013c1e:	bd80      	pop	{r7, pc}

08013c20 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8013c20:	b480      	push	{r7}
 8013c22:	b083      	sub	sp, #12
 8013c24:	af00      	add	r7, sp, #0
 8013c26:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8013c28:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8013c2a:	4618      	mov	r0, r3
 8013c2c:	370c      	adds	r7, #12
 8013c2e:	46bd      	mov	sp, r7
 8013c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c34:	4770      	bx	lr

08013c36 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013c36:	b580      	push	{r7, lr}
 8013c38:	b084      	sub	sp, #16
 8013c3a:	af00      	add	r7, sp, #0
 8013c3c:	6078      	str	r0, [r7, #4]
 8013c3e:	460b      	mov	r3, r1
 8013c40:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8013c42:	2300      	movs	r3, #0
 8013c44:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8013c46:	687b      	ldr	r3, [r7, #4]
 8013c48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013c4c:	2b00      	cmp	r3, #0
 8013c4e:	d009      	beq.n	8013c64 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8013c50:	687b      	ldr	r3, [r7, #4]
 8013c52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013c56:	681b      	ldr	r3, [r3, #0]
 8013c58:	78fa      	ldrb	r2, [r7, #3]
 8013c5a:	4611      	mov	r1, r2
 8013c5c:	6878      	ldr	r0, [r7, #4]
 8013c5e:	4798      	blx	r3
 8013c60:	4603      	mov	r3, r0
 8013c62:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8013c64:	7bfb      	ldrb	r3, [r7, #15]
}
 8013c66:	4618      	mov	r0, r3
 8013c68:	3710      	adds	r7, #16
 8013c6a:	46bd      	mov	sp, r7
 8013c6c:	bd80      	pop	{r7, pc}

08013c6e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013c6e:	b580      	push	{r7, lr}
 8013c70:	b084      	sub	sp, #16
 8013c72:	af00      	add	r7, sp, #0
 8013c74:	6078      	str	r0, [r7, #4]
 8013c76:	460b      	mov	r3, r1
 8013c78:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8013c7a:	2300      	movs	r3, #0
 8013c7c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8013c7e:	687b      	ldr	r3, [r7, #4]
 8013c80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013c84:	685b      	ldr	r3, [r3, #4]
 8013c86:	78fa      	ldrb	r2, [r7, #3]
 8013c88:	4611      	mov	r1, r2
 8013c8a:	6878      	ldr	r0, [r7, #4]
 8013c8c:	4798      	blx	r3
 8013c8e:	4603      	mov	r3, r0
 8013c90:	2b00      	cmp	r3, #0
 8013c92:	d001      	beq.n	8013c98 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8013c94:	2303      	movs	r3, #3
 8013c96:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8013c98:	7bfb      	ldrb	r3, [r7, #15]
}
 8013c9a:	4618      	mov	r0, r3
 8013c9c:	3710      	adds	r7, #16
 8013c9e:	46bd      	mov	sp, r7
 8013ca0:	bd80      	pop	{r7, pc}

08013ca2 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8013ca2:	b580      	push	{r7, lr}
 8013ca4:	b084      	sub	sp, #16
 8013ca6:	af00      	add	r7, sp, #0
 8013ca8:	6078      	str	r0, [r7, #4]
 8013caa:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8013cac:	687b      	ldr	r3, [r7, #4]
 8013cae:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8013cb2:	6839      	ldr	r1, [r7, #0]
 8013cb4:	4618      	mov	r0, r3
 8013cb6:	f001 f936 	bl	8014f26 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8013cba:	687b      	ldr	r3, [r7, #4]
 8013cbc:	2201      	movs	r2, #1
 8013cbe:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8013cc2:	687b      	ldr	r3, [r7, #4]
 8013cc4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8013cc8:	461a      	mov	r2, r3
 8013cca:	687b      	ldr	r3, [r7, #4]
 8013ccc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8013cd0:	687b      	ldr	r3, [r7, #4]
 8013cd2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8013cd6:	f003 031f 	and.w	r3, r3, #31
 8013cda:	2b02      	cmp	r3, #2
 8013cdc:	d01a      	beq.n	8013d14 <USBD_LL_SetupStage+0x72>
 8013cde:	2b02      	cmp	r3, #2
 8013ce0:	d822      	bhi.n	8013d28 <USBD_LL_SetupStage+0x86>
 8013ce2:	2b00      	cmp	r3, #0
 8013ce4:	d002      	beq.n	8013cec <USBD_LL_SetupStage+0x4a>
 8013ce6:	2b01      	cmp	r3, #1
 8013ce8:	d00a      	beq.n	8013d00 <USBD_LL_SetupStage+0x5e>
 8013cea:	e01d      	b.n	8013d28 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8013cec:	687b      	ldr	r3, [r7, #4]
 8013cee:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8013cf2:	4619      	mov	r1, r3
 8013cf4:	6878      	ldr	r0, [r7, #4]
 8013cf6:	f000 fb63 	bl	80143c0 <USBD_StdDevReq>
 8013cfa:	4603      	mov	r3, r0
 8013cfc:	73fb      	strb	r3, [r7, #15]
      break;
 8013cfe:	e020      	b.n	8013d42 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8013d00:	687b      	ldr	r3, [r7, #4]
 8013d02:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8013d06:	4619      	mov	r1, r3
 8013d08:	6878      	ldr	r0, [r7, #4]
 8013d0a:	f000 fbcb 	bl	80144a4 <USBD_StdItfReq>
 8013d0e:	4603      	mov	r3, r0
 8013d10:	73fb      	strb	r3, [r7, #15]
      break;
 8013d12:	e016      	b.n	8013d42 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8013d14:	687b      	ldr	r3, [r7, #4]
 8013d16:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8013d1a:	4619      	mov	r1, r3
 8013d1c:	6878      	ldr	r0, [r7, #4]
 8013d1e:	f000 fc2d 	bl	801457c <USBD_StdEPReq>
 8013d22:	4603      	mov	r3, r0
 8013d24:	73fb      	strb	r3, [r7, #15]
      break;
 8013d26:	e00c      	b.n	8013d42 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8013d28:	687b      	ldr	r3, [r7, #4]
 8013d2a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8013d2e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8013d32:	b2db      	uxtb	r3, r3
 8013d34:	4619      	mov	r1, r3
 8013d36:	6878      	ldr	r0, [r7, #4]
 8013d38:	f001 fe64 	bl	8015a04 <USBD_LL_StallEP>
 8013d3c:	4603      	mov	r3, r0
 8013d3e:	73fb      	strb	r3, [r7, #15]
      break;
 8013d40:	bf00      	nop
  }

  return ret;
 8013d42:	7bfb      	ldrb	r3, [r7, #15]
}
 8013d44:	4618      	mov	r0, r3
 8013d46:	3710      	adds	r7, #16
 8013d48:	46bd      	mov	sp, r7
 8013d4a:	bd80      	pop	{r7, pc}

08013d4c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8013d4c:	b580      	push	{r7, lr}
 8013d4e:	b086      	sub	sp, #24
 8013d50:	af00      	add	r7, sp, #0
 8013d52:	60f8      	str	r0, [r7, #12]
 8013d54:	460b      	mov	r3, r1
 8013d56:	607a      	str	r2, [r7, #4]
 8013d58:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8013d5a:	2300      	movs	r3, #0
 8013d5c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8013d5e:	7afb      	ldrb	r3, [r7, #11]
 8013d60:	2b00      	cmp	r3, #0
 8013d62:	d16e      	bne.n	8013e42 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8013d64:	68fb      	ldr	r3, [r7, #12]
 8013d66:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8013d6a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8013d6c:	68fb      	ldr	r3, [r7, #12]
 8013d6e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8013d72:	2b03      	cmp	r3, #3
 8013d74:	f040 8098 	bne.w	8013ea8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8013d78:	693b      	ldr	r3, [r7, #16]
 8013d7a:	689a      	ldr	r2, [r3, #8]
 8013d7c:	693b      	ldr	r3, [r7, #16]
 8013d7e:	68db      	ldr	r3, [r3, #12]
 8013d80:	429a      	cmp	r2, r3
 8013d82:	d913      	bls.n	8013dac <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8013d84:	693b      	ldr	r3, [r7, #16]
 8013d86:	689a      	ldr	r2, [r3, #8]
 8013d88:	693b      	ldr	r3, [r7, #16]
 8013d8a:	68db      	ldr	r3, [r3, #12]
 8013d8c:	1ad2      	subs	r2, r2, r3
 8013d8e:	693b      	ldr	r3, [r7, #16]
 8013d90:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8013d92:	693b      	ldr	r3, [r7, #16]
 8013d94:	68da      	ldr	r2, [r3, #12]
 8013d96:	693b      	ldr	r3, [r7, #16]
 8013d98:	689b      	ldr	r3, [r3, #8]
 8013d9a:	4293      	cmp	r3, r2
 8013d9c:	bf28      	it	cs
 8013d9e:	4613      	movcs	r3, r2
 8013da0:	461a      	mov	r2, r3
 8013da2:	6879      	ldr	r1, [r7, #4]
 8013da4:	68f8      	ldr	r0, [r7, #12]
 8013da6:	f001 f9be 	bl	8015126 <USBD_CtlContinueRx>
 8013daa:	e07d      	b.n	8013ea8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8013dac:	68fb      	ldr	r3, [r7, #12]
 8013dae:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8013db2:	f003 031f 	and.w	r3, r3, #31
 8013db6:	2b02      	cmp	r3, #2
 8013db8:	d014      	beq.n	8013de4 <USBD_LL_DataOutStage+0x98>
 8013dba:	2b02      	cmp	r3, #2
 8013dbc:	d81d      	bhi.n	8013dfa <USBD_LL_DataOutStage+0xae>
 8013dbe:	2b00      	cmp	r3, #0
 8013dc0:	d002      	beq.n	8013dc8 <USBD_LL_DataOutStage+0x7c>
 8013dc2:	2b01      	cmp	r3, #1
 8013dc4:	d003      	beq.n	8013dce <USBD_LL_DataOutStage+0x82>
 8013dc6:	e018      	b.n	8013dfa <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8013dc8:	2300      	movs	r3, #0
 8013dca:	75bb      	strb	r3, [r7, #22]
            break;
 8013dcc:	e018      	b.n	8013e00 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8013dce:	68fb      	ldr	r3, [r7, #12]
 8013dd0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8013dd4:	b2db      	uxtb	r3, r3
 8013dd6:	4619      	mov	r1, r3
 8013dd8:	68f8      	ldr	r0, [r7, #12]
 8013dda:	f000 fa64 	bl	80142a6 <USBD_CoreFindIF>
 8013dde:	4603      	mov	r3, r0
 8013de0:	75bb      	strb	r3, [r7, #22]
            break;
 8013de2:	e00d      	b.n	8013e00 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8013de4:	68fb      	ldr	r3, [r7, #12]
 8013de6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8013dea:	b2db      	uxtb	r3, r3
 8013dec:	4619      	mov	r1, r3
 8013dee:	68f8      	ldr	r0, [r7, #12]
 8013df0:	f000 fa66 	bl	80142c0 <USBD_CoreFindEP>
 8013df4:	4603      	mov	r3, r0
 8013df6:	75bb      	strb	r3, [r7, #22]
            break;
 8013df8:	e002      	b.n	8013e00 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8013dfa:	2300      	movs	r3, #0
 8013dfc:	75bb      	strb	r3, [r7, #22]
            break;
 8013dfe:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8013e00:	7dbb      	ldrb	r3, [r7, #22]
 8013e02:	2b00      	cmp	r3, #0
 8013e04:	d119      	bne.n	8013e3a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013e06:	68fb      	ldr	r3, [r7, #12]
 8013e08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013e0c:	b2db      	uxtb	r3, r3
 8013e0e:	2b03      	cmp	r3, #3
 8013e10:	d113      	bne.n	8013e3a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8013e12:	7dba      	ldrb	r2, [r7, #22]
 8013e14:	68fb      	ldr	r3, [r7, #12]
 8013e16:	32ae      	adds	r2, #174	@ 0xae
 8013e18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013e1c:	691b      	ldr	r3, [r3, #16]
 8013e1e:	2b00      	cmp	r3, #0
 8013e20:	d00b      	beq.n	8013e3a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8013e22:	7dba      	ldrb	r2, [r7, #22]
 8013e24:	68fb      	ldr	r3, [r7, #12]
 8013e26:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8013e2a:	7dba      	ldrb	r2, [r7, #22]
 8013e2c:	68fb      	ldr	r3, [r7, #12]
 8013e2e:	32ae      	adds	r2, #174	@ 0xae
 8013e30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013e34:	691b      	ldr	r3, [r3, #16]
 8013e36:	68f8      	ldr	r0, [r7, #12]
 8013e38:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8013e3a:	68f8      	ldr	r0, [r7, #12]
 8013e3c:	f001 f984 	bl	8015148 <USBD_CtlSendStatus>
 8013e40:	e032      	b.n	8013ea8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8013e42:	7afb      	ldrb	r3, [r7, #11]
 8013e44:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013e48:	b2db      	uxtb	r3, r3
 8013e4a:	4619      	mov	r1, r3
 8013e4c:	68f8      	ldr	r0, [r7, #12]
 8013e4e:	f000 fa37 	bl	80142c0 <USBD_CoreFindEP>
 8013e52:	4603      	mov	r3, r0
 8013e54:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8013e56:	7dbb      	ldrb	r3, [r7, #22]
 8013e58:	2bff      	cmp	r3, #255	@ 0xff
 8013e5a:	d025      	beq.n	8013ea8 <USBD_LL_DataOutStage+0x15c>
 8013e5c:	7dbb      	ldrb	r3, [r7, #22]
 8013e5e:	2b00      	cmp	r3, #0
 8013e60:	d122      	bne.n	8013ea8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013e62:	68fb      	ldr	r3, [r7, #12]
 8013e64:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013e68:	b2db      	uxtb	r3, r3
 8013e6a:	2b03      	cmp	r3, #3
 8013e6c:	d117      	bne.n	8013e9e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8013e6e:	7dba      	ldrb	r2, [r7, #22]
 8013e70:	68fb      	ldr	r3, [r7, #12]
 8013e72:	32ae      	adds	r2, #174	@ 0xae
 8013e74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013e78:	699b      	ldr	r3, [r3, #24]
 8013e7a:	2b00      	cmp	r3, #0
 8013e7c:	d00f      	beq.n	8013e9e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8013e7e:	7dba      	ldrb	r2, [r7, #22]
 8013e80:	68fb      	ldr	r3, [r7, #12]
 8013e82:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8013e86:	7dba      	ldrb	r2, [r7, #22]
 8013e88:	68fb      	ldr	r3, [r7, #12]
 8013e8a:	32ae      	adds	r2, #174	@ 0xae
 8013e8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013e90:	699b      	ldr	r3, [r3, #24]
 8013e92:	7afa      	ldrb	r2, [r7, #11]
 8013e94:	4611      	mov	r1, r2
 8013e96:	68f8      	ldr	r0, [r7, #12]
 8013e98:	4798      	blx	r3
 8013e9a:	4603      	mov	r3, r0
 8013e9c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8013e9e:	7dfb      	ldrb	r3, [r7, #23]
 8013ea0:	2b00      	cmp	r3, #0
 8013ea2:	d001      	beq.n	8013ea8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8013ea4:	7dfb      	ldrb	r3, [r7, #23]
 8013ea6:	e000      	b.n	8013eaa <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8013ea8:	2300      	movs	r3, #0
}
 8013eaa:	4618      	mov	r0, r3
 8013eac:	3718      	adds	r7, #24
 8013eae:	46bd      	mov	sp, r7
 8013eb0:	bd80      	pop	{r7, pc}

08013eb2 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8013eb2:	b580      	push	{r7, lr}
 8013eb4:	b086      	sub	sp, #24
 8013eb6:	af00      	add	r7, sp, #0
 8013eb8:	60f8      	str	r0, [r7, #12]
 8013eba:	460b      	mov	r3, r1
 8013ebc:	607a      	str	r2, [r7, #4]
 8013ebe:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8013ec0:	7afb      	ldrb	r3, [r7, #11]
 8013ec2:	2b00      	cmp	r3, #0
 8013ec4:	d16f      	bne.n	8013fa6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8013ec6:	68fb      	ldr	r3, [r7, #12]
 8013ec8:	3314      	adds	r3, #20
 8013eca:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8013ecc:	68fb      	ldr	r3, [r7, #12]
 8013ece:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8013ed2:	2b02      	cmp	r3, #2
 8013ed4:	d15a      	bne.n	8013f8c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8013ed6:	693b      	ldr	r3, [r7, #16]
 8013ed8:	689a      	ldr	r2, [r3, #8]
 8013eda:	693b      	ldr	r3, [r7, #16]
 8013edc:	68db      	ldr	r3, [r3, #12]
 8013ede:	429a      	cmp	r2, r3
 8013ee0:	d914      	bls.n	8013f0c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8013ee2:	693b      	ldr	r3, [r7, #16]
 8013ee4:	689a      	ldr	r2, [r3, #8]
 8013ee6:	693b      	ldr	r3, [r7, #16]
 8013ee8:	68db      	ldr	r3, [r3, #12]
 8013eea:	1ad2      	subs	r2, r2, r3
 8013eec:	693b      	ldr	r3, [r7, #16]
 8013eee:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8013ef0:	693b      	ldr	r3, [r7, #16]
 8013ef2:	689b      	ldr	r3, [r3, #8]
 8013ef4:	461a      	mov	r2, r3
 8013ef6:	6879      	ldr	r1, [r7, #4]
 8013ef8:	68f8      	ldr	r0, [r7, #12]
 8013efa:	f001 f8e6 	bl	80150ca <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8013efe:	2300      	movs	r3, #0
 8013f00:	2200      	movs	r2, #0
 8013f02:	2100      	movs	r1, #0
 8013f04:	68f8      	ldr	r0, [r7, #12]
 8013f06:	f001 fe27 	bl	8015b58 <USBD_LL_PrepareReceive>
 8013f0a:	e03f      	b.n	8013f8c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8013f0c:	693b      	ldr	r3, [r7, #16]
 8013f0e:	68da      	ldr	r2, [r3, #12]
 8013f10:	693b      	ldr	r3, [r7, #16]
 8013f12:	689b      	ldr	r3, [r3, #8]
 8013f14:	429a      	cmp	r2, r3
 8013f16:	d11c      	bne.n	8013f52 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8013f18:	693b      	ldr	r3, [r7, #16]
 8013f1a:	685a      	ldr	r2, [r3, #4]
 8013f1c:	693b      	ldr	r3, [r7, #16]
 8013f1e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8013f20:	429a      	cmp	r2, r3
 8013f22:	d316      	bcc.n	8013f52 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8013f24:	693b      	ldr	r3, [r7, #16]
 8013f26:	685a      	ldr	r2, [r3, #4]
 8013f28:	68fb      	ldr	r3, [r7, #12]
 8013f2a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8013f2e:	429a      	cmp	r2, r3
 8013f30:	d20f      	bcs.n	8013f52 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8013f32:	2200      	movs	r2, #0
 8013f34:	2100      	movs	r1, #0
 8013f36:	68f8      	ldr	r0, [r7, #12]
 8013f38:	f001 f8c7 	bl	80150ca <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8013f3c:	68fb      	ldr	r3, [r7, #12]
 8013f3e:	2200      	movs	r2, #0
 8013f40:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8013f44:	2300      	movs	r3, #0
 8013f46:	2200      	movs	r2, #0
 8013f48:	2100      	movs	r1, #0
 8013f4a:	68f8      	ldr	r0, [r7, #12]
 8013f4c:	f001 fe04 	bl	8015b58 <USBD_LL_PrepareReceive>
 8013f50:	e01c      	b.n	8013f8c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013f52:	68fb      	ldr	r3, [r7, #12]
 8013f54:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013f58:	b2db      	uxtb	r3, r3
 8013f5a:	2b03      	cmp	r3, #3
 8013f5c:	d10f      	bne.n	8013f7e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8013f5e:	68fb      	ldr	r3, [r7, #12]
 8013f60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013f64:	68db      	ldr	r3, [r3, #12]
 8013f66:	2b00      	cmp	r3, #0
 8013f68:	d009      	beq.n	8013f7e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8013f6a:	68fb      	ldr	r3, [r7, #12]
 8013f6c:	2200      	movs	r2, #0
 8013f6e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8013f72:	68fb      	ldr	r3, [r7, #12]
 8013f74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013f78:	68db      	ldr	r3, [r3, #12]
 8013f7a:	68f8      	ldr	r0, [r7, #12]
 8013f7c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8013f7e:	2180      	movs	r1, #128	@ 0x80
 8013f80:	68f8      	ldr	r0, [r7, #12]
 8013f82:	f001 fd3f 	bl	8015a04 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8013f86:	68f8      	ldr	r0, [r7, #12]
 8013f88:	f001 f8f1 	bl	801516e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8013f8c:	68fb      	ldr	r3, [r7, #12]
 8013f8e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8013f92:	2b00      	cmp	r3, #0
 8013f94:	d03a      	beq.n	801400c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8013f96:	68f8      	ldr	r0, [r7, #12]
 8013f98:	f7ff fe42 	bl	8013c20 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8013f9c:	68fb      	ldr	r3, [r7, #12]
 8013f9e:	2200      	movs	r2, #0
 8013fa0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8013fa4:	e032      	b.n	801400c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8013fa6:	7afb      	ldrb	r3, [r7, #11]
 8013fa8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8013fac:	b2db      	uxtb	r3, r3
 8013fae:	4619      	mov	r1, r3
 8013fb0:	68f8      	ldr	r0, [r7, #12]
 8013fb2:	f000 f985 	bl	80142c0 <USBD_CoreFindEP>
 8013fb6:	4603      	mov	r3, r0
 8013fb8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8013fba:	7dfb      	ldrb	r3, [r7, #23]
 8013fbc:	2bff      	cmp	r3, #255	@ 0xff
 8013fbe:	d025      	beq.n	801400c <USBD_LL_DataInStage+0x15a>
 8013fc0:	7dfb      	ldrb	r3, [r7, #23]
 8013fc2:	2b00      	cmp	r3, #0
 8013fc4:	d122      	bne.n	801400c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013fc6:	68fb      	ldr	r3, [r7, #12]
 8013fc8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013fcc:	b2db      	uxtb	r3, r3
 8013fce:	2b03      	cmp	r3, #3
 8013fd0:	d11c      	bne.n	801400c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8013fd2:	7dfa      	ldrb	r2, [r7, #23]
 8013fd4:	68fb      	ldr	r3, [r7, #12]
 8013fd6:	32ae      	adds	r2, #174	@ 0xae
 8013fd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013fdc:	695b      	ldr	r3, [r3, #20]
 8013fde:	2b00      	cmp	r3, #0
 8013fe0:	d014      	beq.n	801400c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8013fe2:	7dfa      	ldrb	r2, [r7, #23]
 8013fe4:	68fb      	ldr	r3, [r7, #12]
 8013fe6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8013fea:	7dfa      	ldrb	r2, [r7, #23]
 8013fec:	68fb      	ldr	r3, [r7, #12]
 8013fee:	32ae      	adds	r2, #174	@ 0xae
 8013ff0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013ff4:	695b      	ldr	r3, [r3, #20]
 8013ff6:	7afa      	ldrb	r2, [r7, #11]
 8013ff8:	4611      	mov	r1, r2
 8013ffa:	68f8      	ldr	r0, [r7, #12]
 8013ffc:	4798      	blx	r3
 8013ffe:	4603      	mov	r3, r0
 8014000:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8014002:	7dbb      	ldrb	r3, [r7, #22]
 8014004:	2b00      	cmp	r3, #0
 8014006:	d001      	beq.n	801400c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8014008:	7dbb      	ldrb	r3, [r7, #22]
 801400a:	e000      	b.n	801400e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 801400c:	2300      	movs	r3, #0
}
 801400e:	4618      	mov	r0, r3
 8014010:	3718      	adds	r7, #24
 8014012:	46bd      	mov	sp, r7
 8014014:	bd80      	pop	{r7, pc}

08014016 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8014016:	b580      	push	{r7, lr}
 8014018:	b084      	sub	sp, #16
 801401a:	af00      	add	r7, sp, #0
 801401c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 801401e:	2300      	movs	r3, #0
 8014020:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8014022:	687b      	ldr	r3, [r7, #4]
 8014024:	2201      	movs	r2, #1
 8014026:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 801402a:	687b      	ldr	r3, [r7, #4]
 801402c:	2200      	movs	r2, #0
 801402e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8014032:	687b      	ldr	r3, [r7, #4]
 8014034:	2200      	movs	r2, #0
 8014036:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8014038:	687b      	ldr	r3, [r7, #4]
 801403a:	2200      	movs	r2, #0
 801403c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8014040:	687b      	ldr	r3, [r7, #4]
 8014042:	2200      	movs	r2, #0
 8014044:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8014048:	687b      	ldr	r3, [r7, #4]
 801404a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801404e:	2b00      	cmp	r3, #0
 8014050:	d014      	beq.n	801407c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8014052:	687b      	ldr	r3, [r7, #4]
 8014054:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014058:	685b      	ldr	r3, [r3, #4]
 801405a:	2b00      	cmp	r3, #0
 801405c:	d00e      	beq.n	801407c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 801405e:	687b      	ldr	r3, [r7, #4]
 8014060:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014064:	685b      	ldr	r3, [r3, #4]
 8014066:	687a      	ldr	r2, [r7, #4]
 8014068:	6852      	ldr	r2, [r2, #4]
 801406a:	b2d2      	uxtb	r2, r2
 801406c:	4611      	mov	r1, r2
 801406e:	6878      	ldr	r0, [r7, #4]
 8014070:	4798      	blx	r3
 8014072:	4603      	mov	r3, r0
 8014074:	2b00      	cmp	r3, #0
 8014076:	d001      	beq.n	801407c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8014078:	2303      	movs	r3, #3
 801407a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801407c:	2340      	movs	r3, #64	@ 0x40
 801407e:	2200      	movs	r2, #0
 8014080:	2100      	movs	r1, #0
 8014082:	6878      	ldr	r0, [r7, #4]
 8014084:	f001 fc79 	bl	801597a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8014088:	687b      	ldr	r3, [r7, #4]
 801408a:	2201      	movs	r2, #1
 801408c:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8014090:	687b      	ldr	r3, [r7, #4]
 8014092:	2240      	movs	r2, #64	@ 0x40
 8014094:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8014098:	2340      	movs	r3, #64	@ 0x40
 801409a:	2200      	movs	r2, #0
 801409c:	2180      	movs	r1, #128	@ 0x80
 801409e:	6878      	ldr	r0, [r7, #4]
 80140a0:	f001 fc6b 	bl	801597a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80140a4:	687b      	ldr	r3, [r7, #4]
 80140a6:	2201      	movs	r2, #1
 80140a8:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80140aa:	687b      	ldr	r3, [r7, #4]
 80140ac:	2240      	movs	r2, #64	@ 0x40
 80140ae:	621a      	str	r2, [r3, #32]

  return ret;
 80140b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80140b2:	4618      	mov	r0, r3
 80140b4:	3710      	adds	r7, #16
 80140b6:	46bd      	mov	sp, r7
 80140b8:	bd80      	pop	{r7, pc}

080140ba <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80140ba:	b480      	push	{r7}
 80140bc:	b083      	sub	sp, #12
 80140be:	af00      	add	r7, sp, #0
 80140c0:	6078      	str	r0, [r7, #4]
 80140c2:	460b      	mov	r3, r1
 80140c4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80140c6:	687b      	ldr	r3, [r7, #4]
 80140c8:	78fa      	ldrb	r2, [r7, #3]
 80140ca:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80140cc:	2300      	movs	r3, #0
}
 80140ce:	4618      	mov	r0, r3
 80140d0:	370c      	adds	r7, #12
 80140d2:	46bd      	mov	sp, r7
 80140d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140d8:	4770      	bx	lr

080140da <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80140da:	b480      	push	{r7}
 80140dc:	b083      	sub	sp, #12
 80140de:	af00      	add	r7, sp, #0
 80140e0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80140e2:	687b      	ldr	r3, [r7, #4]
 80140e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80140e8:	b2db      	uxtb	r3, r3
 80140ea:	2b04      	cmp	r3, #4
 80140ec:	d006      	beq.n	80140fc <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80140ee:	687b      	ldr	r3, [r7, #4]
 80140f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80140f4:	b2da      	uxtb	r2, r3
 80140f6:	687b      	ldr	r3, [r7, #4]
 80140f8:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80140fc:	687b      	ldr	r3, [r7, #4]
 80140fe:	2204      	movs	r2, #4
 8014100:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8014104:	2300      	movs	r3, #0
}
 8014106:	4618      	mov	r0, r3
 8014108:	370c      	adds	r7, #12
 801410a:	46bd      	mov	sp, r7
 801410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014110:	4770      	bx	lr

08014112 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8014112:	b480      	push	{r7}
 8014114:	b083      	sub	sp, #12
 8014116:	af00      	add	r7, sp, #0
 8014118:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801411a:	687b      	ldr	r3, [r7, #4]
 801411c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014120:	b2db      	uxtb	r3, r3
 8014122:	2b04      	cmp	r3, #4
 8014124:	d106      	bne.n	8014134 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8014126:	687b      	ldr	r3, [r7, #4]
 8014128:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 801412c:	b2da      	uxtb	r2, r3
 801412e:	687b      	ldr	r3, [r7, #4]
 8014130:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8014134:	2300      	movs	r3, #0
}
 8014136:	4618      	mov	r0, r3
 8014138:	370c      	adds	r7, #12
 801413a:	46bd      	mov	sp, r7
 801413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014140:	4770      	bx	lr

08014142 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8014142:	b580      	push	{r7, lr}
 8014144:	b082      	sub	sp, #8
 8014146:	af00      	add	r7, sp, #0
 8014148:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801414a:	687b      	ldr	r3, [r7, #4]
 801414c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014150:	b2db      	uxtb	r3, r3
 8014152:	2b03      	cmp	r3, #3
 8014154:	d110      	bne.n	8014178 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8014156:	687b      	ldr	r3, [r7, #4]
 8014158:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801415c:	2b00      	cmp	r3, #0
 801415e:	d00b      	beq.n	8014178 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8014160:	687b      	ldr	r3, [r7, #4]
 8014162:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014166:	69db      	ldr	r3, [r3, #28]
 8014168:	2b00      	cmp	r3, #0
 801416a:	d005      	beq.n	8014178 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 801416c:	687b      	ldr	r3, [r7, #4]
 801416e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014172:	69db      	ldr	r3, [r3, #28]
 8014174:	6878      	ldr	r0, [r7, #4]
 8014176:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8014178:	2300      	movs	r3, #0
}
 801417a:	4618      	mov	r0, r3
 801417c:	3708      	adds	r7, #8
 801417e:	46bd      	mov	sp, r7
 8014180:	bd80      	pop	{r7, pc}

08014182 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8014182:	b580      	push	{r7, lr}
 8014184:	b082      	sub	sp, #8
 8014186:	af00      	add	r7, sp, #0
 8014188:	6078      	str	r0, [r7, #4]
 801418a:	460b      	mov	r3, r1
 801418c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 801418e:	687b      	ldr	r3, [r7, #4]
 8014190:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014194:	687b      	ldr	r3, [r7, #4]
 8014196:	32ae      	adds	r2, #174	@ 0xae
 8014198:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801419c:	2b00      	cmp	r3, #0
 801419e:	d101      	bne.n	80141a4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80141a0:	2303      	movs	r3, #3
 80141a2:	e01c      	b.n	80141de <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80141a4:	687b      	ldr	r3, [r7, #4]
 80141a6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80141aa:	b2db      	uxtb	r3, r3
 80141ac:	2b03      	cmp	r3, #3
 80141ae:	d115      	bne.n	80141dc <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80141b0:	687b      	ldr	r3, [r7, #4]
 80141b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80141b6:	687b      	ldr	r3, [r7, #4]
 80141b8:	32ae      	adds	r2, #174	@ 0xae
 80141ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80141be:	6a1b      	ldr	r3, [r3, #32]
 80141c0:	2b00      	cmp	r3, #0
 80141c2:	d00b      	beq.n	80141dc <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80141c4:	687b      	ldr	r3, [r7, #4]
 80141c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80141ca:	687b      	ldr	r3, [r7, #4]
 80141cc:	32ae      	adds	r2, #174	@ 0xae
 80141ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80141d2:	6a1b      	ldr	r3, [r3, #32]
 80141d4:	78fa      	ldrb	r2, [r7, #3]
 80141d6:	4611      	mov	r1, r2
 80141d8:	6878      	ldr	r0, [r7, #4]
 80141da:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80141dc:	2300      	movs	r3, #0
}
 80141de:	4618      	mov	r0, r3
 80141e0:	3708      	adds	r7, #8
 80141e2:	46bd      	mov	sp, r7
 80141e4:	bd80      	pop	{r7, pc}

080141e6 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80141e6:	b580      	push	{r7, lr}
 80141e8:	b082      	sub	sp, #8
 80141ea:	af00      	add	r7, sp, #0
 80141ec:	6078      	str	r0, [r7, #4]
 80141ee:	460b      	mov	r3, r1
 80141f0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80141f2:	687b      	ldr	r3, [r7, #4]
 80141f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80141f8:	687b      	ldr	r3, [r7, #4]
 80141fa:	32ae      	adds	r2, #174	@ 0xae
 80141fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014200:	2b00      	cmp	r3, #0
 8014202:	d101      	bne.n	8014208 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8014204:	2303      	movs	r3, #3
 8014206:	e01c      	b.n	8014242 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014208:	687b      	ldr	r3, [r7, #4]
 801420a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801420e:	b2db      	uxtb	r3, r3
 8014210:	2b03      	cmp	r3, #3
 8014212:	d115      	bne.n	8014240 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8014214:	687b      	ldr	r3, [r7, #4]
 8014216:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801421a:	687b      	ldr	r3, [r7, #4]
 801421c:	32ae      	adds	r2, #174	@ 0xae
 801421e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014222:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014224:	2b00      	cmp	r3, #0
 8014226:	d00b      	beq.n	8014240 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8014228:	687b      	ldr	r3, [r7, #4]
 801422a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801422e:	687b      	ldr	r3, [r7, #4]
 8014230:	32ae      	adds	r2, #174	@ 0xae
 8014232:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014236:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014238:	78fa      	ldrb	r2, [r7, #3]
 801423a:	4611      	mov	r1, r2
 801423c:	6878      	ldr	r0, [r7, #4]
 801423e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8014240:	2300      	movs	r3, #0
}
 8014242:	4618      	mov	r0, r3
 8014244:	3708      	adds	r7, #8
 8014246:	46bd      	mov	sp, r7
 8014248:	bd80      	pop	{r7, pc}

0801424a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 801424a:	b480      	push	{r7}
 801424c:	b083      	sub	sp, #12
 801424e:	af00      	add	r7, sp, #0
 8014250:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8014252:	2300      	movs	r3, #0
}
 8014254:	4618      	mov	r0, r3
 8014256:	370c      	adds	r7, #12
 8014258:	46bd      	mov	sp, r7
 801425a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801425e:	4770      	bx	lr

08014260 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8014260:	b580      	push	{r7, lr}
 8014262:	b084      	sub	sp, #16
 8014264:	af00      	add	r7, sp, #0
 8014266:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8014268:	2300      	movs	r3, #0
 801426a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801426c:	687b      	ldr	r3, [r7, #4]
 801426e:	2201      	movs	r2, #1
 8014270:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8014274:	687b      	ldr	r3, [r7, #4]
 8014276:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801427a:	2b00      	cmp	r3, #0
 801427c:	d00e      	beq.n	801429c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 801427e:	687b      	ldr	r3, [r7, #4]
 8014280:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014284:	685b      	ldr	r3, [r3, #4]
 8014286:	687a      	ldr	r2, [r7, #4]
 8014288:	6852      	ldr	r2, [r2, #4]
 801428a:	b2d2      	uxtb	r2, r2
 801428c:	4611      	mov	r1, r2
 801428e:	6878      	ldr	r0, [r7, #4]
 8014290:	4798      	blx	r3
 8014292:	4603      	mov	r3, r0
 8014294:	2b00      	cmp	r3, #0
 8014296:	d001      	beq.n	801429c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8014298:	2303      	movs	r3, #3
 801429a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 801429c:	7bfb      	ldrb	r3, [r7, #15]
}
 801429e:	4618      	mov	r0, r3
 80142a0:	3710      	adds	r7, #16
 80142a2:	46bd      	mov	sp, r7
 80142a4:	bd80      	pop	{r7, pc}

080142a6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80142a6:	b480      	push	{r7}
 80142a8:	b083      	sub	sp, #12
 80142aa:	af00      	add	r7, sp, #0
 80142ac:	6078      	str	r0, [r7, #4]
 80142ae:	460b      	mov	r3, r1
 80142b0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80142b2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80142b4:	4618      	mov	r0, r3
 80142b6:	370c      	adds	r7, #12
 80142b8:	46bd      	mov	sp, r7
 80142ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142be:	4770      	bx	lr

080142c0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80142c0:	b480      	push	{r7}
 80142c2:	b083      	sub	sp, #12
 80142c4:	af00      	add	r7, sp, #0
 80142c6:	6078      	str	r0, [r7, #4]
 80142c8:	460b      	mov	r3, r1
 80142ca:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80142cc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80142ce:	4618      	mov	r0, r3
 80142d0:	370c      	adds	r7, #12
 80142d2:	46bd      	mov	sp, r7
 80142d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142d8:	4770      	bx	lr

080142da <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80142da:	b580      	push	{r7, lr}
 80142dc:	b086      	sub	sp, #24
 80142de:	af00      	add	r7, sp, #0
 80142e0:	6078      	str	r0, [r7, #4]
 80142e2:	460b      	mov	r3, r1
 80142e4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80142e6:	687b      	ldr	r3, [r7, #4]
 80142e8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80142ea:	687b      	ldr	r3, [r7, #4]
 80142ec:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80142ee:	2300      	movs	r3, #0
 80142f0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80142f2:	68fb      	ldr	r3, [r7, #12]
 80142f4:	885b      	ldrh	r3, [r3, #2]
 80142f6:	b29b      	uxth	r3, r3
 80142f8:	68fa      	ldr	r2, [r7, #12]
 80142fa:	7812      	ldrb	r2, [r2, #0]
 80142fc:	4293      	cmp	r3, r2
 80142fe:	d91f      	bls.n	8014340 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8014300:	68fb      	ldr	r3, [r7, #12]
 8014302:	781b      	ldrb	r3, [r3, #0]
 8014304:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8014306:	e013      	b.n	8014330 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8014308:	f107 030a 	add.w	r3, r7, #10
 801430c:	4619      	mov	r1, r3
 801430e:	6978      	ldr	r0, [r7, #20]
 8014310:	f000 f81b 	bl	801434a <USBD_GetNextDesc>
 8014314:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8014316:	697b      	ldr	r3, [r7, #20]
 8014318:	785b      	ldrb	r3, [r3, #1]
 801431a:	2b05      	cmp	r3, #5
 801431c:	d108      	bne.n	8014330 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 801431e:	697b      	ldr	r3, [r7, #20]
 8014320:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8014322:	693b      	ldr	r3, [r7, #16]
 8014324:	789b      	ldrb	r3, [r3, #2]
 8014326:	78fa      	ldrb	r2, [r7, #3]
 8014328:	429a      	cmp	r2, r3
 801432a:	d008      	beq.n	801433e <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 801432c:	2300      	movs	r3, #0
 801432e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8014330:	68fb      	ldr	r3, [r7, #12]
 8014332:	885b      	ldrh	r3, [r3, #2]
 8014334:	b29a      	uxth	r2, r3
 8014336:	897b      	ldrh	r3, [r7, #10]
 8014338:	429a      	cmp	r2, r3
 801433a:	d8e5      	bhi.n	8014308 <USBD_GetEpDesc+0x2e>
 801433c:	e000      	b.n	8014340 <USBD_GetEpDesc+0x66>
          break;
 801433e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8014340:	693b      	ldr	r3, [r7, #16]
}
 8014342:	4618      	mov	r0, r3
 8014344:	3718      	adds	r7, #24
 8014346:	46bd      	mov	sp, r7
 8014348:	bd80      	pop	{r7, pc}

0801434a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 801434a:	b480      	push	{r7}
 801434c:	b085      	sub	sp, #20
 801434e:	af00      	add	r7, sp, #0
 8014350:	6078      	str	r0, [r7, #4]
 8014352:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8014354:	687b      	ldr	r3, [r7, #4]
 8014356:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8014358:	683b      	ldr	r3, [r7, #0]
 801435a:	881b      	ldrh	r3, [r3, #0]
 801435c:	68fa      	ldr	r2, [r7, #12]
 801435e:	7812      	ldrb	r2, [r2, #0]
 8014360:	4413      	add	r3, r2
 8014362:	b29a      	uxth	r2, r3
 8014364:	683b      	ldr	r3, [r7, #0]
 8014366:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8014368:	68fb      	ldr	r3, [r7, #12]
 801436a:	781b      	ldrb	r3, [r3, #0]
 801436c:	461a      	mov	r2, r3
 801436e:	687b      	ldr	r3, [r7, #4]
 8014370:	4413      	add	r3, r2
 8014372:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8014374:	68fb      	ldr	r3, [r7, #12]
}
 8014376:	4618      	mov	r0, r3
 8014378:	3714      	adds	r7, #20
 801437a:	46bd      	mov	sp, r7
 801437c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014380:	4770      	bx	lr

08014382 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8014382:	b480      	push	{r7}
 8014384:	b087      	sub	sp, #28
 8014386:	af00      	add	r7, sp, #0
 8014388:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 801438a:	687b      	ldr	r3, [r7, #4]
 801438c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 801438e:	697b      	ldr	r3, [r7, #20]
 8014390:	781b      	ldrb	r3, [r3, #0]
 8014392:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8014394:	697b      	ldr	r3, [r7, #20]
 8014396:	3301      	adds	r3, #1
 8014398:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 801439a:	697b      	ldr	r3, [r7, #20]
 801439c:	781b      	ldrb	r3, [r3, #0]
 801439e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80143a0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80143a4:	021b      	lsls	r3, r3, #8
 80143a6:	b21a      	sxth	r2, r3
 80143a8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80143ac:	4313      	orrs	r3, r2
 80143ae:	b21b      	sxth	r3, r3
 80143b0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80143b2:	89fb      	ldrh	r3, [r7, #14]
}
 80143b4:	4618      	mov	r0, r3
 80143b6:	371c      	adds	r7, #28
 80143b8:	46bd      	mov	sp, r7
 80143ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143be:	4770      	bx	lr

080143c0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80143c0:	b580      	push	{r7, lr}
 80143c2:	b084      	sub	sp, #16
 80143c4:	af00      	add	r7, sp, #0
 80143c6:	6078      	str	r0, [r7, #4]
 80143c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80143ca:	2300      	movs	r3, #0
 80143cc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80143ce:	683b      	ldr	r3, [r7, #0]
 80143d0:	781b      	ldrb	r3, [r3, #0]
 80143d2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80143d6:	2b40      	cmp	r3, #64	@ 0x40
 80143d8:	d005      	beq.n	80143e6 <USBD_StdDevReq+0x26>
 80143da:	2b40      	cmp	r3, #64	@ 0x40
 80143dc:	d857      	bhi.n	801448e <USBD_StdDevReq+0xce>
 80143de:	2b00      	cmp	r3, #0
 80143e0:	d00f      	beq.n	8014402 <USBD_StdDevReq+0x42>
 80143e2:	2b20      	cmp	r3, #32
 80143e4:	d153      	bne.n	801448e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80143e6:	687b      	ldr	r3, [r7, #4]
 80143e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80143ec:	687b      	ldr	r3, [r7, #4]
 80143ee:	32ae      	adds	r2, #174	@ 0xae
 80143f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80143f4:	689b      	ldr	r3, [r3, #8]
 80143f6:	6839      	ldr	r1, [r7, #0]
 80143f8:	6878      	ldr	r0, [r7, #4]
 80143fa:	4798      	blx	r3
 80143fc:	4603      	mov	r3, r0
 80143fe:	73fb      	strb	r3, [r7, #15]
      break;
 8014400:	e04a      	b.n	8014498 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8014402:	683b      	ldr	r3, [r7, #0]
 8014404:	785b      	ldrb	r3, [r3, #1]
 8014406:	2b09      	cmp	r3, #9
 8014408:	d83b      	bhi.n	8014482 <USBD_StdDevReq+0xc2>
 801440a:	a201      	add	r2, pc, #4	@ (adr r2, 8014410 <USBD_StdDevReq+0x50>)
 801440c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014410:	08014465 	.word	0x08014465
 8014414:	08014479 	.word	0x08014479
 8014418:	08014483 	.word	0x08014483
 801441c:	0801446f 	.word	0x0801446f
 8014420:	08014483 	.word	0x08014483
 8014424:	08014443 	.word	0x08014443
 8014428:	08014439 	.word	0x08014439
 801442c:	08014483 	.word	0x08014483
 8014430:	0801445b 	.word	0x0801445b
 8014434:	0801444d 	.word	0x0801444d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8014438:	6839      	ldr	r1, [r7, #0]
 801443a:	6878      	ldr	r0, [r7, #4]
 801443c:	f000 fa3c 	bl	80148b8 <USBD_GetDescriptor>
          break;
 8014440:	e024      	b.n	801448c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8014442:	6839      	ldr	r1, [r7, #0]
 8014444:	6878      	ldr	r0, [r7, #4]
 8014446:	f000 fbcb 	bl	8014be0 <USBD_SetAddress>
          break;
 801444a:	e01f      	b.n	801448c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 801444c:	6839      	ldr	r1, [r7, #0]
 801444e:	6878      	ldr	r0, [r7, #4]
 8014450:	f000 fc0a 	bl	8014c68 <USBD_SetConfig>
 8014454:	4603      	mov	r3, r0
 8014456:	73fb      	strb	r3, [r7, #15]
          break;
 8014458:	e018      	b.n	801448c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801445a:	6839      	ldr	r1, [r7, #0]
 801445c:	6878      	ldr	r0, [r7, #4]
 801445e:	f000 fcad 	bl	8014dbc <USBD_GetConfig>
          break;
 8014462:	e013      	b.n	801448c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8014464:	6839      	ldr	r1, [r7, #0]
 8014466:	6878      	ldr	r0, [r7, #4]
 8014468:	f000 fcde 	bl	8014e28 <USBD_GetStatus>
          break;
 801446c:	e00e      	b.n	801448c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801446e:	6839      	ldr	r1, [r7, #0]
 8014470:	6878      	ldr	r0, [r7, #4]
 8014472:	f000 fd0d 	bl	8014e90 <USBD_SetFeature>
          break;
 8014476:	e009      	b.n	801448c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8014478:	6839      	ldr	r1, [r7, #0]
 801447a:	6878      	ldr	r0, [r7, #4]
 801447c:	f000 fd31 	bl	8014ee2 <USBD_ClrFeature>
          break;
 8014480:	e004      	b.n	801448c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8014482:	6839      	ldr	r1, [r7, #0]
 8014484:	6878      	ldr	r0, [r7, #4]
 8014486:	f000 fd88 	bl	8014f9a <USBD_CtlError>
          break;
 801448a:	bf00      	nop
      }
      break;
 801448c:	e004      	b.n	8014498 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 801448e:	6839      	ldr	r1, [r7, #0]
 8014490:	6878      	ldr	r0, [r7, #4]
 8014492:	f000 fd82 	bl	8014f9a <USBD_CtlError>
      break;
 8014496:	bf00      	nop
  }

  return ret;
 8014498:	7bfb      	ldrb	r3, [r7, #15]
}
 801449a:	4618      	mov	r0, r3
 801449c:	3710      	adds	r7, #16
 801449e:	46bd      	mov	sp, r7
 80144a0:	bd80      	pop	{r7, pc}
 80144a2:	bf00      	nop

080144a4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80144a4:	b580      	push	{r7, lr}
 80144a6:	b084      	sub	sp, #16
 80144a8:	af00      	add	r7, sp, #0
 80144aa:	6078      	str	r0, [r7, #4]
 80144ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80144ae:	2300      	movs	r3, #0
 80144b0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80144b2:	683b      	ldr	r3, [r7, #0]
 80144b4:	781b      	ldrb	r3, [r3, #0]
 80144b6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80144ba:	2b40      	cmp	r3, #64	@ 0x40
 80144bc:	d005      	beq.n	80144ca <USBD_StdItfReq+0x26>
 80144be:	2b40      	cmp	r3, #64	@ 0x40
 80144c0:	d852      	bhi.n	8014568 <USBD_StdItfReq+0xc4>
 80144c2:	2b00      	cmp	r3, #0
 80144c4:	d001      	beq.n	80144ca <USBD_StdItfReq+0x26>
 80144c6:	2b20      	cmp	r3, #32
 80144c8:	d14e      	bne.n	8014568 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80144ca:	687b      	ldr	r3, [r7, #4]
 80144cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80144d0:	b2db      	uxtb	r3, r3
 80144d2:	3b01      	subs	r3, #1
 80144d4:	2b02      	cmp	r3, #2
 80144d6:	d840      	bhi.n	801455a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80144d8:	683b      	ldr	r3, [r7, #0]
 80144da:	889b      	ldrh	r3, [r3, #4]
 80144dc:	b2db      	uxtb	r3, r3
 80144de:	2b01      	cmp	r3, #1
 80144e0:	d836      	bhi.n	8014550 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80144e2:	683b      	ldr	r3, [r7, #0]
 80144e4:	889b      	ldrh	r3, [r3, #4]
 80144e6:	b2db      	uxtb	r3, r3
 80144e8:	4619      	mov	r1, r3
 80144ea:	6878      	ldr	r0, [r7, #4]
 80144ec:	f7ff fedb 	bl	80142a6 <USBD_CoreFindIF>
 80144f0:	4603      	mov	r3, r0
 80144f2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80144f4:	7bbb      	ldrb	r3, [r7, #14]
 80144f6:	2bff      	cmp	r3, #255	@ 0xff
 80144f8:	d01d      	beq.n	8014536 <USBD_StdItfReq+0x92>
 80144fa:	7bbb      	ldrb	r3, [r7, #14]
 80144fc:	2b00      	cmp	r3, #0
 80144fe:	d11a      	bne.n	8014536 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8014500:	7bba      	ldrb	r2, [r7, #14]
 8014502:	687b      	ldr	r3, [r7, #4]
 8014504:	32ae      	adds	r2, #174	@ 0xae
 8014506:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801450a:	689b      	ldr	r3, [r3, #8]
 801450c:	2b00      	cmp	r3, #0
 801450e:	d00f      	beq.n	8014530 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8014510:	7bba      	ldrb	r2, [r7, #14]
 8014512:	687b      	ldr	r3, [r7, #4]
 8014514:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8014518:	7bba      	ldrb	r2, [r7, #14]
 801451a:	687b      	ldr	r3, [r7, #4]
 801451c:	32ae      	adds	r2, #174	@ 0xae
 801451e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014522:	689b      	ldr	r3, [r3, #8]
 8014524:	6839      	ldr	r1, [r7, #0]
 8014526:	6878      	ldr	r0, [r7, #4]
 8014528:	4798      	blx	r3
 801452a:	4603      	mov	r3, r0
 801452c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 801452e:	e004      	b.n	801453a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8014530:	2303      	movs	r3, #3
 8014532:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8014534:	e001      	b.n	801453a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8014536:	2303      	movs	r3, #3
 8014538:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801453a:	683b      	ldr	r3, [r7, #0]
 801453c:	88db      	ldrh	r3, [r3, #6]
 801453e:	2b00      	cmp	r3, #0
 8014540:	d110      	bne.n	8014564 <USBD_StdItfReq+0xc0>
 8014542:	7bfb      	ldrb	r3, [r7, #15]
 8014544:	2b00      	cmp	r3, #0
 8014546:	d10d      	bne.n	8014564 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8014548:	6878      	ldr	r0, [r7, #4]
 801454a:	f000 fdfd 	bl	8015148 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 801454e:	e009      	b.n	8014564 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8014550:	6839      	ldr	r1, [r7, #0]
 8014552:	6878      	ldr	r0, [r7, #4]
 8014554:	f000 fd21 	bl	8014f9a <USBD_CtlError>
          break;
 8014558:	e004      	b.n	8014564 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 801455a:	6839      	ldr	r1, [r7, #0]
 801455c:	6878      	ldr	r0, [r7, #4]
 801455e:	f000 fd1c 	bl	8014f9a <USBD_CtlError>
          break;
 8014562:	e000      	b.n	8014566 <USBD_StdItfReq+0xc2>
          break;
 8014564:	bf00      	nop
      }
      break;
 8014566:	e004      	b.n	8014572 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8014568:	6839      	ldr	r1, [r7, #0]
 801456a:	6878      	ldr	r0, [r7, #4]
 801456c:	f000 fd15 	bl	8014f9a <USBD_CtlError>
      break;
 8014570:	bf00      	nop
  }

  return ret;
 8014572:	7bfb      	ldrb	r3, [r7, #15]
}
 8014574:	4618      	mov	r0, r3
 8014576:	3710      	adds	r7, #16
 8014578:	46bd      	mov	sp, r7
 801457a:	bd80      	pop	{r7, pc}

0801457c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801457c:	b580      	push	{r7, lr}
 801457e:	b084      	sub	sp, #16
 8014580:	af00      	add	r7, sp, #0
 8014582:	6078      	str	r0, [r7, #4]
 8014584:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8014586:	2300      	movs	r3, #0
 8014588:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 801458a:	683b      	ldr	r3, [r7, #0]
 801458c:	889b      	ldrh	r3, [r3, #4]
 801458e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014590:	683b      	ldr	r3, [r7, #0]
 8014592:	781b      	ldrb	r3, [r3, #0]
 8014594:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8014598:	2b40      	cmp	r3, #64	@ 0x40
 801459a:	d007      	beq.n	80145ac <USBD_StdEPReq+0x30>
 801459c:	2b40      	cmp	r3, #64	@ 0x40
 801459e:	f200 817f 	bhi.w	80148a0 <USBD_StdEPReq+0x324>
 80145a2:	2b00      	cmp	r3, #0
 80145a4:	d02a      	beq.n	80145fc <USBD_StdEPReq+0x80>
 80145a6:	2b20      	cmp	r3, #32
 80145a8:	f040 817a 	bne.w	80148a0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80145ac:	7bbb      	ldrb	r3, [r7, #14]
 80145ae:	4619      	mov	r1, r3
 80145b0:	6878      	ldr	r0, [r7, #4]
 80145b2:	f7ff fe85 	bl	80142c0 <USBD_CoreFindEP>
 80145b6:	4603      	mov	r3, r0
 80145b8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80145ba:	7b7b      	ldrb	r3, [r7, #13]
 80145bc:	2bff      	cmp	r3, #255	@ 0xff
 80145be:	f000 8174 	beq.w	80148aa <USBD_StdEPReq+0x32e>
 80145c2:	7b7b      	ldrb	r3, [r7, #13]
 80145c4:	2b00      	cmp	r3, #0
 80145c6:	f040 8170 	bne.w	80148aa <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80145ca:	7b7a      	ldrb	r2, [r7, #13]
 80145cc:	687b      	ldr	r3, [r7, #4]
 80145ce:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80145d2:	7b7a      	ldrb	r2, [r7, #13]
 80145d4:	687b      	ldr	r3, [r7, #4]
 80145d6:	32ae      	adds	r2, #174	@ 0xae
 80145d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80145dc:	689b      	ldr	r3, [r3, #8]
 80145de:	2b00      	cmp	r3, #0
 80145e0:	f000 8163 	beq.w	80148aa <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80145e4:	7b7a      	ldrb	r2, [r7, #13]
 80145e6:	687b      	ldr	r3, [r7, #4]
 80145e8:	32ae      	adds	r2, #174	@ 0xae
 80145ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80145ee:	689b      	ldr	r3, [r3, #8]
 80145f0:	6839      	ldr	r1, [r7, #0]
 80145f2:	6878      	ldr	r0, [r7, #4]
 80145f4:	4798      	blx	r3
 80145f6:	4603      	mov	r3, r0
 80145f8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80145fa:	e156      	b.n	80148aa <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80145fc:	683b      	ldr	r3, [r7, #0]
 80145fe:	785b      	ldrb	r3, [r3, #1]
 8014600:	2b03      	cmp	r3, #3
 8014602:	d008      	beq.n	8014616 <USBD_StdEPReq+0x9a>
 8014604:	2b03      	cmp	r3, #3
 8014606:	f300 8145 	bgt.w	8014894 <USBD_StdEPReq+0x318>
 801460a:	2b00      	cmp	r3, #0
 801460c:	f000 809b 	beq.w	8014746 <USBD_StdEPReq+0x1ca>
 8014610:	2b01      	cmp	r3, #1
 8014612:	d03c      	beq.n	801468e <USBD_StdEPReq+0x112>
 8014614:	e13e      	b.n	8014894 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8014616:	687b      	ldr	r3, [r7, #4]
 8014618:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801461c:	b2db      	uxtb	r3, r3
 801461e:	2b02      	cmp	r3, #2
 8014620:	d002      	beq.n	8014628 <USBD_StdEPReq+0xac>
 8014622:	2b03      	cmp	r3, #3
 8014624:	d016      	beq.n	8014654 <USBD_StdEPReq+0xd8>
 8014626:	e02c      	b.n	8014682 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014628:	7bbb      	ldrb	r3, [r7, #14]
 801462a:	2b00      	cmp	r3, #0
 801462c:	d00d      	beq.n	801464a <USBD_StdEPReq+0xce>
 801462e:	7bbb      	ldrb	r3, [r7, #14]
 8014630:	2b80      	cmp	r3, #128	@ 0x80
 8014632:	d00a      	beq.n	801464a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8014634:	7bbb      	ldrb	r3, [r7, #14]
 8014636:	4619      	mov	r1, r3
 8014638:	6878      	ldr	r0, [r7, #4]
 801463a:	f001 f9e3 	bl	8015a04 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801463e:	2180      	movs	r1, #128	@ 0x80
 8014640:	6878      	ldr	r0, [r7, #4]
 8014642:	f001 f9df 	bl	8015a04 <USBD_LL_StallEP>
 8014646:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8014648:	e020      	b.n	801468c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 801464a:	6839      	ldr	r1, [r7, #0]
 801464c:	6878      	ldr	r0, [r7, #4]
 801464e:	f000 fca4 	bl	8014f9a <USBD_CtlError>
              break;
 8014652:	e01b      	b.n	801468c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8014654:	683b      	ldr	r3, [r7, #0]
 8014656:	885b      	ldrh	r3, [r3, #2]
 8014658:	2b00      	cmp	r3, #0
 801465a:	d10e      	bne.n	801467a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 801465c:	7bbb      	ldrb	r3, [r7, #14]
 801465e:	2b00      	cmp	r3, #0
 8014660:	d00b      	beq.n	801467a <USBD_StdEPReq+0xfe>
 8014662:	7bbb      	ldrb	r3, [r7, #14]
 8014664:	2b80      	cmp	r3, #128	@ 0x80
 8014666:	d008      	beq.n	801467a <USBD_StdEPReq+0xfe>
 8014668:	683b      	ldr	r3, [r7, #0]
 801466a:	88db      	ldrh	r3, [r3, #6]
 801466c:	2b00      	cmp	r3, #0
 801466e:	d104      	bne.n	801467a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8014670:	7bbb      	ldrb	r3, [r7, #14]
 8014672:	4619      	mov	r1, r3
 8014674:	6878      	ldr	r0, [r7, #4]
 8014676:	f001 f9c5 	bl	8015a04 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 801467a:	6878      	ldr	r0, [r7, #4]
 801467c:	f000 fd64 	bl	8015148 <USBD_CtlSendStatus>

              break;
 8014680:	e004      	b.n	801468c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8014682:	6839      	ldr	r1, [r7, #0]
 8014684:	6878      	ldr	r0, [r7, #4]
 8014686:	f000 fc88 	bl	8014f9a <USBD_CtlError>
              break;
 801468a:	bf00      	nop
          }
          break;
 801468c:	e107      	b.n	801489e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801468e:	687b      	ldr	r3, [r7, #4]
 8014690:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014694:	b2db      	uxtb	r3, r3
 8014696:	2b02      	cmp	r3, #2
 8014698:	d002      	beq.n	80146a0 <USBD_StdEPReq+0x124>
 801469a:	2b03      	cmp	r3, #3
 801469c:	d016      	beq.n	80146cc <USBD_StdEPReq+0x150>
 801469e:	e04b      	b.n	8014738 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80146a0:	7bbb      	ldrb	r3, [r7, #14]
 80146a2:	2b00      	cmp	r3, #0
 80146a4:	d00d      	beq.n	80146c2 <USBD_StdEPReq+0x146>
 80146a6:	7bbb      	ldrb	r3, [r7, #14]
 80146a8:	2b80      	cmp	r3, #128	@ 0x80
 80146aa:	d00a      	beq.n	80146c2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80146ac:	7bbb      	ldrb	r3, [r7, #14]
 80146ae:	4619      	mov	r1, r3
 80146b0:	6878      	ldr	r0, [r7, #4]
 80146b2:	f001 f9a7 	bl	8015a04 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80146b6:	2180      	movs	r1, #128	@ 0x80
 80146b8:	6878      	ldr	r0, [r7, #4]
 80146ba:	f001 f9a3 	bl	8015a04 <USBD_LL_StallEP>
 80146be:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80146c0:	e040      	b.n	8014744 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80146c2:	6839      	ldr	r1, [r7, #0]
 80146c4:	6878      	ldr	r0, [r7, #4]
 80146c6:	f000 fc68 	bl	8014f9a <USBD_CtlError>
              break;
 80146ca:	e03b      	b.n	8014744 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80146cc:	683b      	ldr	r3, [r7, #0]
 80146ce:	885b      	ldrh	r3, [r3, #2]
 80146d0:	2b00      	cmp	r3, #0
 80146d2:	d136      	bne.n	8014742 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80146d4:	7bbb      	ldrb	r3, [r7, #14]
 80146d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80146da:	2b00      	cmp	r3, #0
 80146dc:	d004      	beq.n	80146e8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80146de:	7bbb      	ldrb	r3, [r7, #14]
 80146e0:	4619      	mov	r1, r3
 80146e2:	6878      	ldr	r0, [r7, #4]
 80146e4:	f001 f9ad 	bl	8015a42 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80146e8:	6878      	ldr	r0, [r7, #4]
 80146ea:	f000 fd2d 	bl	8015148 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80146ee:	7bbb      	ldrb	r3, [r7, #14]
 80146f0:	4619      	mov	r1, r3
 80146f2:	6878      	ldr	r0, [r7, #4]
 80146f4:	f7ff fde4 	bl	80142c0 <USBD_CoreFindEP>
 80146f8:	4603      	mov	r3, r0
 80146fa:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80146fc:	7b7b      	ldrb	r3, [r7, #13]
 80146fe:	2bff      	cmp	r3, #255	@ 0xff
 8014700:	d01f      	beq.n	8014742 <USBD_StdEPReq+0x1c6>
 8014702:	7b7b      	ldrb	r3, [r7, #13]
 8014704:	2b00      	cmp	r3, #0
 8014706:	d11c      	bne.n	8014742 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8014708:	7b7a      	ldrb	r2, [r7, #13]
 801470a:	687b      	ldr	r3, [r7, #4]
 801470c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8014710:	7b7a      	ldrb	r2, [r7, #13]
 8014712:	687b      	ldr	r3, [r7, #4]
 8014714:	32ae      	adds	r2, #174	@ 0xae
 8014716:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801471a:	689b      	ldr	r3, [r3, #8]
 801471c:	2b00      	cmp	r3, #0
 801471e:	d010      	beq.n	8014742 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8014720:	7b7a      	ldrb	r2, [r7, #13]
 8014722:	687b      	ldr	r3, [r7, #4]
 8014724:	32ae      	adds	r2, #174	@ 0xae
 8014726:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801472a:	689b      	ldr	r3, [r3, #8]
 801472c:	6839      	ldr	r1, [r7, #0]
 801472e:	6878      	ldr	r0, [r7, #4]
 8014730:	4798      	blx	r3
 8014732:	4603      	mov	r3, r0
 8014734:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8014736:	e004      	b.n	8014742 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8014738:	6839      	ldr	r1, [r7, #0]
 801473a:	6878      	ldr	r0, [r7, #4]
 801473c:	f000 fc2d 	bl	8014f9a <USBD_CtlError>
              break;
 8014740:	e000      	b.n	8014744 <USBD_StdEPReq+0x1c8>
              break;
 8014742:	bf00      	nop
          }
          break;
 8014744:	e0ab      	b.n	801489e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8014746:	687b      	ldr	r3, [r7, #4]
 8014748:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801474c:	b2db      	uxtb	r3, r3
 801474e:	2b02      	cmp	r3, #2
 8014750:	d002      	beq.n	8014758 <USBD_StdEPReq+0x1dc>
 8014752:	2b03      	cmp	r3, #3
 8014754:	d032      	beq.n	80147bc <USBD_StdEPReq+0x240>
 8014756:	e097      	b.n	8014888 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014758:	7bbb      	ldrb	r3, [r7, #14]
 801475a:	2b00      	cmp	r3, #0
 801475c:	d007      	beq.n	801476e <USBD_StdEPReq+0x1f2>
 801475e:	7bbb      	ldrb	r3, [r7, #14]
 8014760:	2b80      	cmp	r3, #128	@ 0x80
 8014762:	d004      	beq.n	801476e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8014764:	6839      	ldr	r1, [r7, #0]
 8014766:	6878      	ldr	r0, [r7, #4]
 8014768:	f000 fc17 	bl	8014f9a <USBD_CtlError>
                break;
 801476c:	e091      	b.n	8014892 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801476e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014772:	2b00      	cmp	r3, #0
 8014774:	da0b      	bge.n	801478e <USBD_StdEPReq+0x212>
 8014776:	7bbb      	ldrb	r3, [r7, #14]
 8014778:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801477c:	4613      	mov	r3, r2
 801477e:	009b      	lsls	r3, r3, #2
 8014780:	4413      	add	r3, r2
 8014782:	009b      	lsls	r3, r3, #2
 8014784:	3310      	adds	r3, #16
 8014786:	687a      	ldr	r2, [r7, #4]
 8014788:	4413      	add	r3, r2
 801478a:	3304      	adds	r3, #4
 801478c:	e00b      	b.n	80147a6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801478e:	7bbb      	ldrb	r3, [r7, #14]
 8014790:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014794:	4613      	mov	r3, r2
 8014796:	009b      	lsls	r3, r3, #2
 8014798:	4413      	add	r3, r2
 801479a:	009b      	lsls	r3, r3, #2
 801479c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80147a0:	687a      	ldr	r2, [r7, #4]
 80147a2:	4413      	add	r3, r2
 80147a4:	3304      	adds	r3, #4
 80147a6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80147a8:	68bb      	ldr	r3, [r7, #8]
 80147aa:	2200      	movs	r2, #0
 80147ac:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80147ae:	68bb      	ldr	r3, [r7, #8]
 80147b0:	2202      	movs	r2, #2
 80147b2:	4619      	mov	r1, r3
 80147b4:	6878      	ldr	r0, [r7, #4]
 80147b6:	f000 fc6d 	bl	8015094 <USBD_CtlSendData>
              break;
 80147ba:	e06a      	b.n	8014892 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80147bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80147c0:	2b00      	cmp	r3, #0
 80147c2:	da11      	bge.n	80147e8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80147c4:	7bbb      	ldrb	r3, [r7, #14]
 80147c6:	f003 020f 	and.w	r2, r3, #15
 80147ca:	6879      	ldr	r1, [r7, #4]
 80147cc:	4613      	mov	r3, r2
 80147ce:	009b      	lsls	r3, r3, #2
 80147d0:	4413      	add	r3, r2
 80147d2:	009b      	lsls	r3, r3, #2
 80147d4:	440b      	add	r3, r1
 80147d6:	3324      	adds	r3, #36	@ 0x24
 80147d8:	881b      	ldrh	r3, [r3, #0]
 80147da:	2b00      	cmp	r3, #0
 80147dc:	d117      	bne.n	801480e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80147de:	6839      	ldr	r1, [r7, #0]
 80147e0:	6878      	ldr	r0, [r7, #4]
 80147e2:	f000 fbda 	bl	8014f9a <USBD_CtlError>
                  break;
 80147e6:	e054      	b.n	8014892 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80147e8:	7bbb      	ldrb	r3, [r7, #14]
 80147ea:	f003 020f 	and.w	r2, r3, #15
 80147ee:	6879      	ldr	r1, [r7, #4]
 80147f0:	4613      	mov	r3, r2
 80147f2:	009b      	lsls	r3, r3, #2
 80147f4:	4413      	add	r3, r2
 80147f6:	009b      	lsls	r3, r3, #2
 80147f8:	440b      	add	r3, r1
 80147fa:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80147fe:	881b      	ldrh	r3, [r3, #0]
 8014800:	2b00      	cmp	r3, #0
 8014802:	d104      	bne.n	801480e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8014804:	6839      	ldr	r1, [r7, #0]
 8014806:	6878      	ldr	r0, [r7, #4]
 8014808:	f000 fbc7 	bl	8014f9a <USBD_CtlError>
                  break;
 801480c:	e041      	b.n	8014892 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801480e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014812:	2b00      	cmp	r3, #0
 8014814:	da0b      	bge.n	801482e <USBD_StdEPReq+0x2b2>
 8014816:	7bbb      	ldrb	r3, [r7, #14]
 8014818:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801481c:	4613      	mov	r3, r2
 801481e:	009b      	lsls	r3, r3, #2
 8014820:	4413      	add	r3, r2
 8014822:	009b      	lsls	r3, r3, #2
 8014824:	3310      	adds	r3, #16
 8014826:	687a      	ldr	r2, [r7, #4]
 8014828:	4413      	add	r3, r2
 801482a:	3304      	adds	r3, #4
 801482c:	e00b      	b.n	8014846 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801482e:	7bbb      	ldrb	r3, [r7, #14]
 8014830:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014834:	4613      	mov	r3, r2
 8014836:	009b      	lsls	r3, r3, #2
 8014838:	4413      	add	r3, r2
 801483a:	009b      	lsls	r3, r3, #2
 801483c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8014840:	687a      	ldr	r2, [r7, #4]
 8014842:	4413      	add	r3, r2
 8014844:	3304      	adds	r3, #4
 8014846:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8014848:	7bbb      	ldrb	r3, [r7, #14]
 801484a:	2b00      	cmp	r3, #0
 801484c:	d002      	beq.n	8014854 <USBD_StdEPReq+0x2d8>
 801484e:	7bbb      	ldrb	r3, [r7, #14]
 8014850:	2b80      	cmp	r3, #128	@ 0x80
 8014852:	d103      	bne.n	801485c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8014854:	68bb      	ldr	r3, [r7, #8]
 8014856:	2200      	movs	r2, #0
 8014858:	601a      	str	r2, [r3, #0]
 801485a:	e00e      	b.n	801487a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 801485c:	7bbb      	ldrb	r3, [r7, #14]
 801485e:	4619      	mov	r1, r3
 8014860:	6878      	ldr	r0, [r7, #4]
 8014862:	f001 f90d 	bl	8015a80 <USBD_LL_IsStallEP>
 8014866:	4603      	mov	r3, r0
 8014868:	2b00      	cmp	r3, #0
 801486a:	d003      	beq.n	8014874 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 801486c:	68bb      	ldr	r3, [r7, #8]
 801486e:	2201      	movs	r2, #1
 8014870:	601a      	str	r2, [r3, #0]
 8014872:	e002      	b.n	801487a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8014874:	68bb      	ldr	r3, [r7, #8]
 8014876:	2200      	movs	r2, #0
 8014878:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801487a:	68bb      	ldr	r3, [r7, #8]
 801487c:	2202      	movs	r2, #2
 801487e:	4619      	mov	r1, r3
 8014880:	6878      	ldr	r0, [r7, #4]
 8014882:	f000 fc07 	bl	8015094 <USBD_CtlSendData>
              break;
 8014886:	e004      	b.n	8014892 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8014888:	6839      	ldr	r1, [r7, #0]
 801488a:	6878      	ldr	r0, [r7, #4]
 801488c:	f000 fb85 	bl	8014f9a <USBD_CtlError>
              break;
 8014890:	bf00      	nop
          }
          break;
 8014892:	e004      	b.n	801489e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8014894:	6839      	ldr	r1, [r7, #0]
 8014896:	6878      	ldr	r0, [r7, #4]
 8014898:	f000 fb7f 	bl	8014f9a <USBD_CtlError>
          break;
 801489c:	bf00      	nop
      }
      break;
 801489e:	e005      	b.n	80148ac <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80148a0:	6839      	ldr	r1, [r7, #0]
 80148a2:	6878      	ldr	r0, [r7, #4]
 80148a4:	f000 fb79 	bl	8014f9a <USBD_CtlError>
      break;
 80148a8:	e000      	b.n	80148ac <USBD_StdEPReq+0x330>
      break;
 80148aa:	bf00      	nop
  }

  return ret;
 80148ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80148ae:	4618      	mov	r0, r3
 80148b0:	3710      	adds	r7, #16
 80148b2:	46bd      	mov	sp, r7
 80148b4:	bd80      	pop	{r7, pc}
	...

080148b8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80148b8:	b580      	push	{r7, lr}
 80148ba:	b084      	sub	sp, #16
 80148bc:	af00      	add	r7, sp, #0
 80148be:	6078      	str	r0, [r7, #4]
 80148c0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80148c2:	2300      	movs	r3, #0
 80148c4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80148c6:	2300      	movs	r3, #0
 80148c8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80148ca:	2300      	movs	r3, #0
 80148cc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80148ce:	683b      	ldr	r3, [r7, #0]
 80148d0:	885b      	ldrh	r3, [r3, #2]
 80148d2:	0a1b      	lsrs	r3, r3, #8
 80148d4:	b29b      	uxth	r3, r3
 80148d6:	3b01      	subs	r3, #1
 80148d8:	2b0e      	cmp	r3, #14
 80148da:	f200 8152 	bhi.w	8014b82 <USBD_GetDescriptor+0x2ca>
 80148de:	a201      	add	r2, pc, #4	@ (adr r2, 80148e4 <USBD_GetDescriptor+0x2c>)
 80148e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80148e4:	08014955 	.word	0x08014955
 80148e8:	0801496d 	.word	0x0801496d
 80148ec:	080149ad 	.word	0x080149ad
 80148f0:	08014b83 	.word	0x08014b83
 80148f4:	08014b83 	.word	0x08014b83
 80148f8:	08014b23 	.word	0x08014b23
 80148fc:	08014b4f 	.word	0x08014b4f
 8014900:	08014b83 	.word	0x08014b83
 8014904:	08014b83 	.word	0x08014b83
 8014908:	08014b83 	.word	0x08014b83
 801490c:	08014b83 	.word	0x08014b83
 8014910:	08014b83 	.word	0x08014b83
 8014914:	08014b83 	.word	0x08014b83
 8014918:	08014b83 	.word	0x08014b83
 801491c:	08014921 	.word	0x08014921
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8014920:	687b      	ldr	r3, [r7, #4]
 8014922:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014926:	69db      	ldr	r3, [r3, #28]
 8014928:	2b00      	cmp	r3, #0
 801492a:	d00b      	beq.n	8014944 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 801492c:	687b      	ldr	r3, [r7, #4]
 801492e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014932:	69db      	ldr	r3, [r3, #28]
 8014934:	687a      	ldr	r2, [r7, #4]
 8014936:	7c12      	ldrb	r2, [r2, #16]
 8014938:	f107 0108 	add.w	r1, r7, #8
 801493c:	4610      	mov	r0, r2
 801493e:	4798      	blx	r3
 8014940:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014942:	e126      	b.n	8014b92 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8014944:	6839      	ldr	r1, [r7, #0]
 8014946:	6878      	ldr	r0, [r7, #4]
 8014948:	f000 fb27 	bl	8014f9a <USBD_CtlError>
        err++;
 801494c:	7afb      	ldrb	r3, [r7, #11]
 801494e:	3301      	adds	r3, #1
 8014950:	72fb      	strb	r3, [r7, #11]
      break;
 8014952:	e11e      	b.n	8014b92 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8014954:	687b      	ldr	r3, [r7, #4]
 8014956:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801495a:	681b      	ldr	r3, [r3, #0]
 801495c:	687a      	ldr	r2, [r7, #4]
 801495e:	7c12      	ldrb	r2, [r2, #16]
 8014960:	f107 0108 	add.w	r1, r7, #8
 8014964:	4610      	mov	r0, r2
 8014966:	4798      	blx	r3
 8014968:	60f8      	str	r0, [r7, #12]
      break;
 801496a:	e112      	b.n	8014b92 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801496c:	687b      	ldr	r3, [r7, #4]
 801496e:	7c1b      	ldrb	r3, [r3, #16]
 8014970:	2b00      	cmp	r3, #0
 8014972:	d10d      	bne.n	8014990 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8014974:	687b      	ldr	r3, [r7, #4]
 8014976:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801497a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801497c:	f107 0208 	add.w	r2, r7, #8
 8014980:	4610      	mov	r0, r2
 8014982:	4798      	blx	r3
 8014984:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8014986:	68fb      	ldr	r3, [r7, #12]
 8014988:	3301      	adds	r3, #1
 801498a:	2202      	movs	r2, #2
 801498c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801498e:	e100      	b.n	8014b92 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8014990:	687b      	ldr	r3, [r7, #4]
 8014992:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014996:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014998:	f107 0208 	add.w	r2, r7, #8
 801499c:	4610      	mov	r0, r2
 801499e:	4798      	blx	r3
 80149a0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80149a2:	68fb      	ldr	r3, [r7, #12]
 80149a4:	3301      	adds	r3, #1
 80149a6:	2202      	movs	r2, #2
 80149a8:	701a      	strb	r2, [r3, #0]
      break;
 80149aa:	e0f2      	b.n	8014b92 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80149ac:	683b      	ldr	r3, [r7, #0]
 80149ae:	885b      	ldrh	r3, [r3, #2]
 80149b0:	b2db      	uxtb	r3, r3
 80149b2:	2b05      	cmp	r3, #5
 80149b4:	f200 80ac 	bhi.w	8014b10 <USBD_GetDescriptor+0x258>
 80149b8:	a201      	add	r2, pc, #4	@ (adr r2, 80149c0 <USBD_GetDescriptor+0x108>)
 80149ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80149be:	bf00      	nop
 80149c0:	080149d9 	.word	0x080149d9
 80149c4:	08014a0d 	.word	0x08014a0d
 80149c8:	08014a41 	.word	0x08014a41
 80149cc:	08014a75 	.word	0x08014a75
 80149d0:	08014aa9 	.word	0x08014aa9
 80149d4:	08014add 	.word	0x08014add
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80149d8:	687b      	ldr	r3, [r7, #4]
 80149da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80149de:	685b      	ldr	r3, [r3, #4]
 80149e0:	2b00      	cmp	r3, #0
 80149e2:	d00b      	beq.n	80149fc <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80149e4:	687b      	ldr	r3, [r7, #4]
 80149e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80149ea:	685b      	ldr	r3, [r3, #4]
 80149ec:	687a      	ldr	r2, [r7, #4]
 80149ee:	7c12      	ldrb	r2, [r2, #16]
 80149f0:	f107 0108 	add.w	r1, r7, #8
 80149f4:	4610      	mov	r0, r2
 80149f6:	4798      	blx	r3
 80149f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80149fa:	e091      	b.n	8014b20 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80149fc:	6839      	ldr	r1, [r7, #0]
 80149fe:	6878      	ldr	r0, [r7, #4]
 8014a00:	f000 facb 	bl	8014f9a <USBD_CtlError>
            err++;
 8014a04:	7afb      	ldrb	r3, [r7, #11]
 8014a06:	3301      	adds	r3, #1
 8014a08:	72fb      	strb	r3, [r7, #11]
          break;
 8014a0a:	e089      	b.n	8014b20 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8014a0c:	687b      	ldr	r3, [r7, #4]
 8014a0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014a12:	689b      	ldr	r3, [r3, #8]
 8014a14:	2b00      	cmp	r3, #0
 8014a16:	d00b      	beq.n	8014a30 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8014a18:	687b      	ldr	r3, [r7, #4]
 8014a1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014a1e:	689b      	ldr	r3, [r3, #8]
 8014a20:	687a      	ldr	r2, [r7, #4]
 8014a22:	7c12      	ldrb	r2, [r2, #16]
 8014a24:	f107 0108 	add.w	r1, r7, #8
 8014a28:	4610      	mov	r0, r2
 8014a2a:	4798      	blx	r3
 8014a2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014a2e:	e077      	b.n	8014b20 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014a30:	6839      	ldr	r1, [r7, #0]
 8014a32:	6878      	ldr	r0, [r7, #4]
 8014a34:	f000 fab1 	bl	8014f9a <USBD_CtlError>
            err++;
 8014a38:	7afb      	ldrb	r3, [r7, #11]
 8014a3a:	3301      	adds	r3, #1
 8014a3c:	72fb      	strb	r3, [r7, #11]
          break;
 8014a3e:	e06f      	b.n	8014b20 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8014a40:	687b      	ldr	r3, [r7, #4]
 8014a42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014a46:	68db      	ldr	r3, [r3, #12]
 8014a48:	2b00      	cmp	r3, #0
 8014a4a:	d00b      	beq.n	8014a64 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8014a4c:	687b      	ldr	r3, [r7, #4]
 8014a4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014a52:	68db      	ldr	r3, [r3, #12]
 8014a54:	687a      	ldr	r2, [r7, #4]
 8014a56:	7c12      	ldrb	r2, [r2, #16]
 8014a58:	f107 0108 	add.w	r1, r7, #8
 8014a5c:	4610      	mov	r0, r2
 8014a5e:	4798      	blx	r3
 8014a60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014a62:	e05d      	b.n	8014b20 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014a64:	6839      	ldr	r1, [r7, #0]
 8014a66:	6878      	ldr	r0, [r7, #4]
 8014a68:	f000 fa97 	bl	8014f9a <USBD_CtlError>
            err++;
 8014a6c:	7afb      	ldrb	r3, [r7, #11]
 8014a6e:	3301      	adds	r3, #1
 8014a70:	72fb      	strb	r3, [r7, #11]
          break;
 8014a72:	e055      	b.n	8014b20 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8014a74:	687b      	ldr	r3, [r7, #4]
 8014a76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014a7a:	691b      	ldr	r3, [r3, #16]
 8014a7c:	2b00      	cmp	r3, #0
 8014a7e:	d00b      	beq.n	8014a98 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8014a80:	687b      	ldr	r3, [r7, #4]
 8014a82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014a86:	691b      	ldr	r3, [r3, #16]
 8014a88:	687a      	ldr	r2, [r7, #4]
 8014a8a:	7c12      	ldrb	r2, [r2, #16]
 8014a8c:	f107 0108 	add.w	r1, r7, #8
 8014a90:	4610      	mov	r0, r2
 8014a92:	4798      	blx	r3
 8014a94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014a96:	e043      	b.n	8014b20 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014a98:	6839      	ldr	r1, [r7, #0]
 8014a9a:	6878      	ldr	r0, [r7, #4]
 8014a9c:	f000 fa7d 	bl	8014f9a <USBD_CtlError>
            err++;
 8014aa0:	7afb      	ldrb	r3, [r7, #11]
 8014aa2:	3301      	adds	r3, #1
 8014aa4:	72fb      	strb	r3, [r7, #11]
          break;
 8014aa6:	e03b      	b.n	8014b20 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8014aa8:	687b      	ldr	r3, [r7, #4]
 8014aaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014aae:	695b      	ldr	r3, [r3, #20]
 8014ab0:	2b00      	cmp	r3, #0
 8014ab2:	d00b      	beq.n	8014acc <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8014ab4:	687b      	ldr	r3, [r7, #4]
 8014ab6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014aba:	695b      	ldr	r3, [r3, #20]
 8014abc:	687a      	ldr	r2, [r7, #4]
 8014abe:	7c12      	ldrb	r2, [r2, #16]
 8014ac0:	f107 0108 	add.w	r1, r7, #8
 8014ac4:	4610      	mov	r0, r2
 8014ac6:	4798      	blx	r3
 8014ac8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014aca:	e029      	b.n	8014b20 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014acc:	6839      	ldr	r1, [r7, #0]
 8014ace:	6878      	ldr	r0, [r7, #4]
 8014ad0:	f000 fa63 	bl	8014f9a <USBD_CtlError>
            err++;
 8014ad4:	7afb      	ldrb	r3, [r7, #11]
 8014ad6:	3301      	adds	r3, #1
 8014ad8:	72fb      	strb	r3, [r7, #11]
          break;
 8014ada:	e021      	b.n	8014b20 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8014adc:	687b      	ldr	r3, [r7, #4]
 8014ade:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014ae2:	699b      	ldr	r3, [r3, #24]
 8014ae4:	2b00      	cmp	r3, #0
 8014ae6:	d00b      	beq.n	8014b00 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8014ae8:	687b      	ldr	r3, [r7, #4]
 8014aea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014aee:	699b      	ldr	r3, [r3, #24]
 8014af0:	687a      	ldr	r2, [r7, #4]
 8014af2:	7c12      	ldrb	r2, [r2, #16]
 8014af4:	f107 0108 	add.w	r1, r7, #8
 8014af8:	4610      	mov	r0, r2
 8014afa:	4798      	blx	r3
 8014afc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014afe:	e00f      	b.n	8014b20 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014b00:	6839      	ldr	r1, [r7, #0]
 8014b02:	6878      	ldr	r0, [r7, #4]
 8014b04:	f000 fa49 	bl	8014f9a <USBD_CtlError>
            err++;
 8014b08:	7afb      	ldrb	r3, [r7, #11]
 8014b0a:	3301      	adds	r3, #1
 8014b0c:	72fb      	strb	r3, [r7, #11]
          break;
 8014b0e:	e007      	b.n	8014b20 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8014b10:	6839      	ldr	r1, [r7, #0]
 8014b12:	6878      	ldr	r0, [r7, #4]
 8014b14:	f000 fa41 	bl	8014f9a <USBD_CtlError>
          err++;
 8014b18:	7afb      	ldrb	r3, [r7, #11]
 8014b1a:	3301      	adds	r3, #1
 8014b1c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8014b1e:	bf00      	nop
      }
      break;
 8014b20:	e037      	b.n	8014b92 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014b22:	687b      	ldr	r3, [r7, #4]
 8014b24:	7c1b      	ldrb	r3, [r3, #16]
 8014b26:	2b00      	cmp	r3, #0
 8014b28:	d109      	bne.n	8014b3e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8014b2a:	687b      	ldr	r3, [r7, #4]
 8014b2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014b30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014b32:	f107 0208 	add.w	r2, r7, #8
 8014b36:	4610      	mov	r0, r2
 8014b38:	4798      	blx	r3
 8014b3a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014b3c:	e029      	b.n	8014b92 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8014b3e:	6839      	ldr	r1, [r7, #0]
 8014b40:	6878      	ldr	r0, [r7, #4]
 8014b42:	f000 fa2a 	bl	8014f9a <USBD_CtlError>
        err++;
 8014b46:	7afb      	ldrb	r3, [r7, #11]
 8014b48:	3301      	adds	r3, #1
 8014b4a:	72fb      	strb	r3, [r7, #11]
      break;
 8014b4c:	e021      	b.n	8014b92 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014b4e:	687b      	ldr	r3, [r7, #4]
 8014b50:	7c1b      	ldrb	r3, [r3, #16]
 8014b52:	2b00      	cmp	r3, #0
 8014b54:	d10d      	bne.n	8014b72 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8014b56:	687b      	ldr	r3, [r7, #4]
 8014b58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014b5e:	f107 0208 	add.w	r2, r7, #8
 8014b62:	4610      	mov	r0, r2
 8014b64:	4798      	blx	r3
 8014b66:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8014b68:	68fb      	ldr	r3, [r7, #12]
 8014b6a:	3301      	adds	r3, #1
 8014b6c:	2207      	movs	r2, #7
 8014b6e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014b70:	e00f      	b.n	8014b92 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8014b72:	6839      	ldr	r1, [r7, #0]
 8014b74:	6878      	ldr	r0, [r7, #4]
 8014b76:	f000 fa10 	bl	8014f9a <USBD_CtlError>
        err++;
 8014b7a:	7afb      	ldrb	r3, [r7, #11]
 8014b7c:	3301      	adds	r3, #1
 8014b7e:	72fb      	strb	r3, [r7, #11]
      break;
 8014b80:	e007      	b.n	8014b92 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8014b82:	6839      	ldr	r1, [r7, #0]
 8014b84:	6878      	ldr	r0, [r7, #4]
 8014b86:	f000 fa08 	bl	8014f9a <USBD_CtlError>
      err++;
 8014b8a:	7afb      	ldrb	r3, [r7, #11]
 8014b8c:	3301      	adds	r3, #1
 8014b8e:	72fb      	strb	r3, [r7, #11]
      break;
 8014b90:	bf00      	nop
  }

  if (err != 0U)
 8014b92:	7afb      	ldrb	r3, [r7, #11]
 8014b94:	2b00      	cmp	r3, #0
 8014b96:	d11e      	bne.n	8014bd6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8014b98:	683b      	ldr	r3, [r7, #0]
 8014b9a:	88db      	ldrh	r3, [r3, #6]
 8014b9c:	2b00      	cmp	r3, #0
 8014b9e:	d016      	beq.n	8014bce <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8014ba0:	893b      	ldrh	r3, [r7, #8]
 8014ba2:	2b00      	cmp	r3, #0
 8014ba4:	d00e      	beq.n	8014bc4 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8014ba6:	683b      	ldr	r3, [r7, #0]
 8014ba8:	88da      	ldrh	r2, [r3, #6]
 8014baa:	893b      	ldrh	r3, [r7, #8]
 8014bac:	4293      	cmp	r3, r2
 8014bae:	bf28      	it	cs
 8014bb0:	4613      	movcs	r3, r2
 8014bb2:	b29b      	uxth	r3, r3
 8014bb4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8014bb6:	893b      	ldrh	r3, [r7, #8]
 8014bb8:	461a      	mov	r2, r3
 8014bba:	68f9      	ldr	r1, [r7, #12]
 8014bbc:	6878      	ldr	r0, [r7, #4]
 8014bbe:	f000 fa69 	bl	8015094 <USBD_CtlSendData>
 8014bc2:	e009      	b.n	8014bd8 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8014bc4:	6839      	ldr	r1, [r7, #0]
 8014bc6:	6878      	ldr	r0, [r7, #4]
 8014bc8:	f000 f9e7 	bl	8014f9a <USBD_CtlError>
 8014bcc:	e004      	b.n	8014bd8 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8014bce:	6878      	ldr	r0, [r7, #4]
 8014bd0:	f000 faba 	bl	8015148 <USBD_CtlSendStatus>
 8014bd4:	e000      	b.n	8014bd8 <USBD_GetDescriptor+0x320>
    return;
 8014bd6:	bf00      	nop
  }
}
 8014bd8:	3710      	adds	r7, #16
 8014bda:	46bd      	mov	sp, r7
 8014bdc:	bd80      	pop	{r7, pc}
 8014bde:	bf00      	nop

08014be0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014be0:	b580      	push	{r7, lr}
 8014be2:	b084      	sub	sp, #16
 8014be4:	af00      	add	r7, sp, #0
 8014be6:	6078      	str	r0, [r7, #4]
 8014be8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8014bea:	683b      	ldr	r3, [r7, #0]
 8014bec:	889b      	ldrh	r3, [r3, #4]
 8014bee:	2b00      	cmp	r3, #0
 8014bf0:	d131      	bne.n	8014c56 <USBD_SetAddress+0x76>
 8014bf2:	683b      	ldr	r3, [r7, #0]
 8014bf4:	88db      	ldrh	r3, [r3, #6]
 8014bf6:	2b00      	cmp	r3, #0
 8014bf8:	d12d      	bne.n	8014c56 <USBD_SetAddress+0x76>
 8014bfa:	683b      	ldr	r3, [r7, #0]
 8014bfc:	885b      	ldrh	r3, [r3, #2]
 8014bfe:	2b7f      	cmp	r3, #127	@ 0x7f
 8014c00:	d829      	bhi.n	8014c56 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8014c02:	683b      	ldr	r3, [r7, #0]
 8014c04:	885b      	ldrh	r3, [r3, #2]
 8014c06:	b2db      	uxtb	r3, r3
 8014c08:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014c0c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014c0e:	687b      	ldr	r3, [r7, #4]
 8014c10:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014c14:	b2db      	uxtb	r3, r3
 8014c16:	2b03      	cmp	r3, #3
 8014c18:	d104      	bne.n	8014c24 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8014c1a:	6839      	ldr	r1, [r7, #0]
 8014c1c:	6878      	ldr	r0, [r7, #4]
 8014c1e:	f000 f9bc 	bl	8014f9a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014c22:	e01d      	b.n	8014c60 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8014c24:	687b      	ldr	r3, [r7, #4]
 8014c26:	7bfa      	ldrb	r2, [r7, #15]
 8014c28:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8014c2c:	7bfb      	ldrb	r3, [r7, #15]
 8014c2e:	4619      	mov	r1, r3
 8014c30:	6878      	ldr	r0, [r7, #4]
 8014c32:	f000 ff51 	bl	8015ad8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8014c36:	6878      	ldr	r0, [r7, #4]
 8014c38:	f000 fa86 	bl	8015148 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8014c3c:	7bfb      	ldrb	r3, [r7, #15]
 8014c3e:	2b00      	cmp	r3, #0
 8014c40:	d004      	beq.n	8014c4c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8014c42:	687b      	ldr	r3, [r7, #4]
 8014c44:	2202      	movs	r2, #2
 8014c46:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014c4a:	e009      	b.n	8014c60 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8014c4c:	687b      	ldr	r3, [r7, #4]
 8014c4e:	2201      	movs	r2, #1
 8014c50:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014c54:	e004      	b.n	8014c60 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8014c56:	6839      	ldr	r1, [r7, #0]
 8014c58:	6878      	ldr	r0, [r7, #4]
 8014c5a:	f000 f99e 	bl	8014f9a <USBD_CtlError>
  }
}
 8014c5e:	bf00      	nop
 8014c60:	bf00      	nop
 8014c62:	3710      	adds	r7, #16
 8014c64:	46bd      	mov	sp, r7
 8014c66:	bd80      	pop	{r7, pc}

08014c68 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014c68:	b580      	push	{r7, lr}
 8014c6a:	b084      	sub	sp, #16
 8014c6c:	af00      	add	r7, sp, #0
 8014c6e:	6078      	str	r0, [r7, #4]
 8014c70:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8014c72:	2300      	movs	r3, #0
 8014c74:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8014c76:	683b      	ldr	r3, [r7, #0]
 8014c78:	885b      	ldrh	r3, [r3, #2]
 8014c7a:	b2da      	uxtb	r2, r3
 8014c7c:	4b4e      	ldr	r3, [pc, #312]	@ (8014db8 <USBD_SetConfig+0x150>)
 8014c7e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8014c80:	4b4d      	ldr	r3, [pc, #308]	@ (8014db8 <USBD_SetConfig+0x150>)
 8014c82:	781b      	ldrb	r3, [r3, #0]
 8014c84:	2b01      	cmp	r3, #1
 8014c86:	d905      	bls.n	8014c94 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8014c88:	6839      	ldr	r1, [r7, #0]
 8014c8a:	6878      	ldr	r0, [r7, #4]
 8014c8c:	f000 f985 	bl	8014f9a <USBD_CtlError>
    return USBD_FAIL;
 8014c90:	2303      	movs	r3, #3
 8014c92:	e08c      	b.n	8014dae <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8014c94:	687b      	ldr	r3, [r7, #4]
 8014c96:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014c9a:	b2db      	uxtb	r3, r3
 8014c9c:	2b02      	cmp	r3, #2
 8014c9e:	d002      	beq.n	8014ca6 <USBD_SetConfig+0x3e>
 8014ca0:	2b03      	cmp	r3, #3
 8014ca2:	d029      	beq.n	8014cf8 <USBD_SetConfig+0x90>
 8014ca4:	e075      	b.n	8014d92 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8014ca6:	4b44      	ldr	r3, [pc, #272]	@ (8014db8 <USBD_SetConfig+0x150>)
 8014ca8:	781b      	ldrb	r3, [r3, #0]
 8014caa:	2b00      	cmp	r3, #0
 8014cac:	d020      	beq.n	8014cf0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8014cae:	4b42      	ldr	r3, [pc, #264]	@ (8014db8 <USBD_SetConfig+0x150>)
 8014cb0:	781b      	ldrb	r3, [r3, #0]
 8014cb2:	461a      	mov	r2, r3
 8014cb4:	687b      	ldr	r3, [r7, #4]
 8014cb6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8014cb8:	4b3f      	ldr	r3, [pc, #252]	@ (8014db8 <USBD_SetConfig+0x150>)
 8014cba:	781b      	ldrb	r3, [r3, #0]
 8014cbc:	4619      	mov	r1, r3
 8014cbe:	6878      	ldr	r0, [r7, #4]
 8014cc0:	f7fe ffb9 	bl	8013c36 <USBD_SetClassConfig>
 8014cc4:	4603      	mov	r3, r0
 8014cc6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8014cc8:	7bfb      	ldrb	r3, [r7, #15]
 8014cca:	2b00      	cmp	r3, #0
 8014ccc:	d008      	beq.n	8014ce0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8014cce:	6839      	ldr	r1, [r7, #0]
 8014cd0:	6878      	ldr	r0, [r7, #4]
 8014cd2:	f000 f962 	bl	8014f9a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8014cd6:	687b      	ldr	r3, [r7, #4]
 8014cd8:	2202      	movs	r2, #2
 8014cda:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8014cde:	e065      	b.n	8014dac <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8014ce0:	6878      	ldr	r0, [r7, #4]
 8014ce2:	f000 fa31 	bl	8015148 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8014ce6:	687b      	ldr	r3, [r7, #4]
 8014ce8:	2203      	movs	r2, #3
 8014cea:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8014cee:	e05d      	b.n	8014dac <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8014cf0:	6878      	ldr	r0, [r7, #4]
 8014cf2:	f000 fa29 	bl	8015148 <USBD_CtlSendStatus>
      break;
 8014cf6:	e059      	b.n	8014dac <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8014cf8:	4b2f      	ldr	r3, [pc, #188]	@ (8014db8 <USBD_SetConfig+0x150>)
 8014cfa:	781b      	ldrb	r3, [r3, #0]
 8014cfc:	2b00      	cmp	r3, #0
 8014cfe:	d112      	bne.n	8014d26 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8014d00:	687b      	ldr	r3, [r7, #4]
 8014d02:	2202      	movs	r2, #2
 8014d04:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8014d08:	4b2b      	ldr	r3, [pc, #172]	@ (8014db8 <USBD_SetConfig+0x150>)
 8014d0a:	781b      	ldrb	r3, [r3, #0]
 8014d0c:	461a      	mov	r2, r3
 8014d0e:	687b      	ldr	r3, [r7, #4]
 8014d10:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8014d12:	4b29      	ldr	r3, [pc, #164]	@ (8014db8 <USBD_SetConfig+0x150>)
 8014d14:	781b      	ldrb	r3, [r3, #0]
 8014d16:	4619      	mov	r1, r3
 8014d18:	6878      	ldr	r0, [r7, #4]
 8014d1a:	f7fe ffa8 	bl	8013c6e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8014d1e:	6878      	ldr	r0, [r7, #4]
 8014d20:	f000 fa12 	bl	8015148 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8014d24:	e042      	b.n	8014dac <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8014d26:	4b24      	ldr	r3, [pc, #144]	@ (8014db8 <USBD_SetConfig+0x150>)
 8014d28:	781b      	ldrb	r3, [r3, #0]
 8014d2a:	461a      	mov	r2, r3
 8014d2c:	687b      	ldr	r3, [r7, #4]
 8014d2e:	685b      	ldr	r3, [r3, #4]
 8014d30:	429a      	cmp	r2, r3
 8014d32:	d02a      	beq.n	8014d8a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8014d34:	687b      	ldr	r3, [r7, #4]
 8014d36:	685b      	ldr	r3, [r3, #4]
 8014d38:	b2db      	uxtb	r3, r3
 8014d3a:	4619      	mov	r1, r3
 8014d3c:	6878      	ldr	r0, [r7, #4]
 8014d3e:	f7fe ff96 	bl	8013c6e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8014d42:	4b1d      	ldr	r3, [pc, #116]	@ (8014db8 <USBD_SetConfig+0x150>)
 8014d44:	781b      	ldrb	r3, [r3, #0]
 8014d46:	461a      	mov	r2, r3
 8014d48:	687b      	ldr	r3, [r7, #4]
 8014d4a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8014d4c:	4b1a      	ldr	r3, [pc, #104]	@ (8014db8 <USBD_SetConfig+0x150>)
 8014d4e:	781b      	ldrb	r3, [r3, #0]
 8014d50:	4619      	mov	r1, r3
 8014d52:	6878      	ldr	r0, [r7, #4]
 8014d54:	f7fe ff6f 	bl	8013c36 <USBD_SetClassConfig>
 8014d58:	4603      	mov	r3, r0
 8014d5a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8014d5c:	7bfb      	ldrb	r3, [r7, #15]
 8014d5e:	2b00      	cmp	r3, #0
 8014d60:	d00f      	beq.n	8014d82 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8014d62:	6839      	ldr	r1, [r7, #0]
 8014d64:	6878      	ldr	r0, [r7, #4]
 8014d66:	f000 f918 	bl	8014f9a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8014d6a:	687b      	ldr	r3, [r7, #4]
 8014d6c:	685b      	ldr	r3, [r3, #4]
 8014d6e:	b2db      	uxtb	r3, r3
 8014d70:	4619      	mov	r1, r3
 8014d72:	6878      	ldr	r0, [r7, #4]
 8014d74:	f7fe ff7b 	bl	8013c6e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8014d78:	687b      	ldr	r3, [r7, #4]
 8014d7a:	2202      	movs	r2, #2
 8014d7c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8014d80:	e014      	b.n	8014dac <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8014d82:	6878      	ldr	r0, [r7, #4]
 8014d84:	f000 f9e0 	bl	8015148 <USBD_CtlSendStatus>
      break;
 8014d88:	e010      	b.n	8014dac <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8014d8a:	6878      	ldr	r0, [r7, #4]
 8014d8c:	f000 f9dc 	bl	8015148 <USBD_CtlSendStatus>
      break;
 8014d90:	e00c      	b.n	8014dac <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8014d92:	6839      	ldr	r1, [r7, #0]
 8014d94:	6878      	ldr	r0, [r7, #4]
 8014d96:	f000 f900 	bl	8014f9a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8014d9a:	4b07      	ldr	r3, [pc, #28]	@ (8014db8 <USBD_SetConfig+0x150>)
 8014d9c:	781b      	ldrb	r3, [r3, #0]
 8014d9e:	4619      	mov	r1, r3
 8014da0:	6878      	ldr	r0, [r7, #4]
 8014da2:	f7fe ff64 	bl	8013c6e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8014da6:	2303      	movs	r3, #3
 8014da8:	73fb      	strb	r3, [r7, #15]
      break;
 8014daa:	bf00      	nop
  }

  return ret;
 8014dac:	7bfb      	ldrb	r3, [r7, #15]
}
 8014dae:	4618      	mov	r0, r3
 8014db0:	3710      	adds	r7, #16
 8014db2:	46bd      	mov	sp, r7
 8014db4:	bd80      	pop	{r7, pc}
 8014db6:	bf00      	nop
 8014db8:	24009c94 	.word	0x24009c94

08014dbc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014dbc:	b580      	push	{r7, lr}
 8014dbe:	b082      	sub	sp, #8
 8014dc0:	af00      	add	r7, sp, #0
 8014dc2:	6078      	str	r0, [r7, #4]
 8014dc4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8014dc6:	683b      	ldr	r3, [r7, #0]
 8014dc8:	88db      	ldrh	r3, [r3, #6]
 8014dca:	2b01      	cmp	r3, #1
 8014dcc:	d004      	beq.n	8014dd8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8014dce:	6839      	ldr	r1, [r7, #0]
 8014dd0:	6878      	ldr	r0, [r7, #4]
 8014dd2:	f000 f8e2 	bl	8014f9a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8014dd6:	e023      	b.n	8014e20 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8014dd8:	687b      	ldr	r3, [r7, #4]
 8014dda:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014dde:	b2db      	uxtb	r3, r3
 8014de0:	2b02      	cmp	r3, #2
 8014de2:	dc02      	bgt.n	8014dea <USBD_GetConfig+0x2e>
 8014de4:	2b00      	cmp	r3, #0
 8014de6:	dc03      	bgt.n	8014df0 <USBD_GetConfig+0x34>
 8014de8:	e015      	b.n	8014e16 <USBD_GetConfig+0x5a>
 8014dea:	2b03      	cmp	r3, #3
 8014dec:	d00b      	beq.n	8014e06 <USBD_GetConfig+0x4a>
 8014dee:	e012      	b.n	8014e16 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8014df0:	687b      	ldr	r3, [r7, #4]
 8014df2:	2200      	movs	r2, #0
 8014df4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8014df6:	687b      	ldr	r3, [r7, #4]
 8014df8:	3308      	adds	r3, #8
 8014dfa:	2201      	movs	r2, #1
 8014dfc:	4619      	mov	r1, r3
 8014dfe:	6878      	ldr	r0, [r7, #4]
 8014e00:	f000 f948 	bl	8015094 <USBD_CtlSendData>
        break;
 8014e04:	e00c      	b.n	8014e20 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8014e06:	687b      	ldr	r3, [r7, #4]
 8014e08:	3304      	adds	r3, #4
 8014e0a:	2201      	movs	r2, #1
 8014e0c:	4619      	mov	r1, r3
 8014e0e:	6878      	ldr	r0, [r7, #4]
 8014e10:	f000 f940 	bl	8015094 <USBD_CtlSendData>
        break;
 8014e14:	e004      	b.n	8014e20 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8014e16:	6839      	ldr	r1, [r7, #0]
 8014e18:	6878      	ldr	r0, [r7, #4]
 8014e1a:	f000 f8be 	bl	8014f9a <USBD_CtlError>
        break;
 8014e1e:	bf00      	nop
}
 8014e20:	bf00      	nop
 8014e22:	3708      	adds	r7, #8
 8014e24:	46bd      	mov	sp, r7
 8014e26:	bd80      	pop	{r7, pc}

08014e28 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014e28:	b580      	push	{r7, lr}
 8014e2a:	b082      	sub	sp, #8
 8014e2c:	af00      	add	r7, sp, #0
 8014e2e:	6078      	str	r0, [r7, #4]
 8014e30:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8014e32:	687b      	ldr	r3, [r7, #4]
 8014e34:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014e38:	b2db      	uxtb	r3, r3
 8014e3a:	3b01      	subs	r3, #1
 8014e3c:	2b02      	cmp	r3, #2
 8014e3e:	d81e      	bhi.n	8014e7e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8014e40:	683b      	ldr	r3, [r7, #0]
 8014e42:	88db      	ldrh	r3, [r3, #6]
 8014e44:	2b02      	cmp	r3, #2
 8014e46:	d004      	beq.n	8014e52 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8014e48:	6839      	ldr	r1, [r7, #0]
 8014e4a:	6878      	ldr	r0, [r7, #4]
 8014e4c:	f000 f8a5 	bl	8014f9a <USBD_CtlError>
        break;
 8014e50:	e01a      	b.n	8014e88 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8014e52:	687b      	ldr	r3, [r7, #4]
 8014e54:	2201      	movs	r2, #1
 8014e56:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8014e58:	687b      	ldr	r3, [r7, #4]
 8014e5a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8014e5e:	2b00      	cmp	r3, #0
 8014e60:	d005      	beq.n	8014e6e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8014e62:	687b      	ldr	r3, [r7, #4]
 8014e64:	68db      	ldr	r3, [r3, #12]
 8014e66:	f043 0202 	orr.w	r2, r3, #2
 8014e6a:	687b      	ldr	r3, [r7, #4]
 8014e6c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8014e6e:	687b      	ldr	r3, [r7, #4]
 8014e70:	330c      	adds	r3, #12
 8014e72:	2202      	movs	r2, #2
 8014e74:	4619      	mov	r1, r3
 8014e76:	6878      	ldr	r0, [r7, #4]
 8014e78:	f000 f90c 	bl	8015094 <USBD_CtlSendData>
      break;
 8014e7c:	e004      	b.n	8014e88 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8014e7e:	6839      	ldr	r1, [r7, #0]
 8014e80:	6878      	ldr	r0, [r7, #4]
 8014e82:	f000 f88a 	bl	8014f9a <USBD_CtlError>
      break;
 8014e86:	bf00      	nop
  }
}
 8014e88:	bf00      	nop
 8014e8a:	3708      	adds	r7, #8
 8014e8c:	46bd      	mov	sp, r7
 8014e8e:	bd80      	pop	{r7, pc}

08014e90 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014e90:	b580      	push	{r7, lr}
 8014e92:	b082      	sub	sp, #8
 8014e94:	af00      	add	r7, sp, #0
 8014e96:	6078      	str	r0, [r7, #4]
 8014e98:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8014e9a:	683b      	ldr	r3, [r7, #0]
 8014e9c:	885b      	ldrh	r3, [r3, #2]
 8014e9e:	2b01      	cmp	r3, #1
 8014ea0:	d107      	bne.n	8014eb2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8014ea2:	687b      	ldr	r3, [r7, #4]
 8014ea4:	2201      	movs	r2, #1
 8014ea6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8014eaa:	6878      	ldr	r0, [r7, #4]
 8014eac:	f000 f94c 	bl	8015148 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8014eb0:	e013      	b.n	8014eda <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8014eb2:	683b      	ldr	r3, [r7, #0]
 8014eb4:	885b      	ldrh	r3, [r3, #2]
 8014eb6:	2b02      	cmp	r3, #2
 8014eb8:	d10b      	bne.n	8014ed2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8014eba:	683b      	ldr	r3, [r7, #0]
 8014ebc:	889b      	ldrh	r3, [r3, #4]
 8014ebe:	0a1b      	lsrs	r3, r3, #8
 8014ec0:	b29b      	uxth	r3, r3
 8014ec2:	b2da      	uxtb	r2, r3
 8014ec4:	687b      	ldr	r3, [r7, #4]
 8014ec6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8014eca:	6878      	ldr	r0, [r7, #4]
 8014ecc:	f000 f93c 	bl	8015148 <USBD_CtlSendStatus>
}
 8014ed0:	e003      	b.n	8014eda <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8014ed2:	6839      	ldr	r1, [r7, #0]
 8014ed4:	6878      	ldr	r0, [r7, #4]
 8014ed6:	f000 f860 	bl	8014f9a <USBD_CtlError>
}
 8014eda:	bf00      	nop
 8014edc:	3708      	adds	r7, #8
 8014ede:	46bd      	mov	sp, r7
 8014ee0:	bd80      	pop	{r7, pc}

08014ee2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014ee2:	b580      	push	{r7, lr}
 8014ee4:	b082      	sub	sp, #8
 8014ee6:	af00      	add	r7, sp, #0
 8014ee8:	6078      	str	r0, [r7, #4]
 8014eea:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8014eec:	687b      	ldr	r3, [r7, #4]
 8014eee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014ef2:	b2db      	uxtb	r3, r3
 8014ef4:	3b01      	subs	r3, #1
 8014ef6:	2b02      	cmp	r3, #2
 8014ef8:	d80b      	bhi.n	8014f12 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8014efa:	683b      	ldr	r3, [r7, #0]
 8014efc:	885b      	ldrh	r3, [r3, #2]
 8014efe:	2b01      	cmp	r3, #1
 8014f00:	d10c      	bne.n	8014f1c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8014f02:	687b      	ldr	r3, [r7, #4]
 8014f04:	2200      	movs	r2, #0
 8014f06:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8014f0a:	6878      	ldr	r0, [r7, #4]
 8014f0c:	f000 f91c 	bl	8015148 <USBD_CtlSendStatus>
      }
      break;
 8014f10:	e004      	b.n	8014f1c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8014f12:	6839      	ldr	r1, [r7, #0]
 8014f14:	6878      	ldr	r0, [r7, #4]
 8014f16:	f000 f840 	bl	8014f9a <USBD_CtlError>
      break;
 8014f1a:	e000      	b.n	8014f1e <USBD_ClrFeature+0x3c>
      break;
 8014f1c:	bf00      	nop
  }
}
 8014f1e:	bf00      	nop
 8014f20:	3708      	adds	r7, #8
 8014f22:	46bd      	mov	sp, r7
 8014f24:	bd80      	pop	{r7, pc}

08014f26 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8014f26:	b580      	push	{r7, lr}
 8014f28:	b084      	sub	sp, #16
 8014f2a:	af00      	add	r7, sp, #0
 8014f2c:	6078      	str	r0, [r7, #4]
 8014f2e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8014f30:	683b      	ldr	r3, [r7, #0]
 8014f32:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8014f34:	68fb      	ldr	r3, [r7, #12]
 8014f36:	781a      	ldrb	r2, [r3, #0]
 8014f38:	687b      	ldr	r3, [r7, #4]
 8014f3a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8014f3c:	68fb      	ldr	r3, [r7, #12]
 8014f3e:	3301      	adds	r3, #1
 8014f40:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8014f42:	68fb      	ldr	r3, [r7, #12]
 8014f44:	781a      	ldrb	r2, [r3, #0]
 8014f46:	687b      	ldr	r3, [r7, #4]
 8014f48:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8014f4a:	68fb      	ldr	r3, [r7, #12]
 8014f4c:	3301      	adds	r3, #1
 8014f4e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8014f50:	68f8      	ldr	r0, [r7, #12]
 8014f52:	f7ff fa16 	bl	8014382 <SWAPBYTE>
 8014f56:	4603      	mov	r3, r0
 8014f58:	461a      	mov	r2, r3
 8014f5a:	687b      	ldr	r3, [r7, #4]
 8014f5c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8014f5e:	68fb      	ldr	r3, [r7, #12]
 8014f60:	3301      	adds	r3, #1
 8014f62:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8014f64:	68fb      	ldr	r3, [r7, #12]
 8014f66:	3301      	adds	r3, #1
 8014f68:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8014f6a:	68f8      	ldr	r0, [r7, #12]
 8014f6c:	f7ff fa09 	bl	8014382 <SWAPBYTE>
 8014f70:	4603      	mov	r3, r0
 8014f72:	461a      	mov	r2, r3
 8014f74:	687b      	ldr	r3, [r7, #4]
 8014f76:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8014f78:	68fb      	ldr	r3, [r7, #12]
 8014f7a:	3301      	adds	r3, #1
 8014f7c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8014f7e:	68fb      	ldr	r3, [r7, #12]
 8014f80:	3301      	adds	r3, #1
 8014f82:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8014f84:	68f8      	ldr	r0, [r7, #12]
 8014f86:	f7ff f9fc 	bl	8014382 <SWAPBYTE>
 8014f8a:	4603      	mov	r3, r0
 8014f8c:	461a      	mov	r2, r3
 8014f8e:	687b      	ldr	r3, [r7, #4]
 8014f90:	80da      	strh	r2, [r3, #6]
}
 8014f92:	bf00      	nop
 8014f94:	3710      	adds	r7, #16
 8014f96:	46bd      	mov	sp, r7
 8014f98:	bd80      	pop	{r7, pc}

08014f9a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014f9a:	b580      	push	{r7, lr}
 8014f9c:	b082      	sub	sp, #8
 8014f9e:	af00      	add	r7, sp, #0
 8014fa0:	6078      	str	r0, [r7, #4]
 8014fa2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8014fa4:	2180      	movs	r1, #128	@ 0x80
 8014fa6:	6878      	ldr	r0, [r7, #4]
 8014fa8:	f000 fd2c 	bl	8015a04 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8014fac:	2100      	movs	r1, #0
 8014fae:	6878      	ldr	r0, [r7, #4]
 8014fb0:	f000 fd28 	bl	8015a04 <USBD_LL_StallEP>
}
 8014fb4:	bf00      	nop
 8014fb6:	3708      	adds	r7, #8
 8014fb8:	46bd      	mov	sp, r7
 8014fba:	bd80      	pop	{r7, pc}

08014fbc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8014fbc:	b580      	push	{r7, lr}
 8014fbe:	b086      	sub	sp, #24
 8014fc0:	af00      	add	r7, sp, #0
 8014fc2:	60f8      	str	r0, [r7, #12]
 8014fc4:	60b9      	str	r1, [r7, #8]
 8014fc6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8014fc8:	2300      	movs	r3, #0
 8014fca:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8014fcc:	68fb      	ldr	r3, [r7, #12]
 8014fce:	2b00      	cmp	r3, #0
 8014fd0:	d042      	beq.n	8015058 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8014fd2:	68fb      	ldr	r3, [r7, #12]
 8014fd4:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8014fd6:	6938      	ldr	r0, [r7, #16]
 8014fd8:	f000 f842 	bl	8015060 <USBD_GetLen>
 8014fdc:	4603      	mov	r3, r0
 8014fde:	3301      	adds	r3, #1
 8014fe0:	005b      	lsls	r3, r3, #1
 8014fe2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014fe6:	d808      	bhi.n	8014ffa <USBD_GetString+0x3e>
 8014fe8:	6938      	ldr	r0, [r7, #16]
 8014fea:	f000 f839 	bl	8015060 <USBD_GetLen>
 8014fee:	4603      	mov	r3, r0
 8014ff0:	3301      	adds	r3, #1
 8014ff2:	b29b      	uxth	r3, r3
 8014ff4:	005b      	lsls	r3, r3, #1
 8014ff6:	b29a      	uxth	r2, r3
 8014ff8:	e001      	b.n	8014ffe <USBD_GetString+0x42>
 8014ffa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014ffe:	687b      	ldr	r3, [r7, #4]
 8015000:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8015002:	7dfb      	ldrb	r3, [r7, #23]
 8015004:	68ba      	ldr	r2, [r7, #8]
 8015006:	4413      	add	r3, r2
 8015008:	687a      	ldr	r2, [r7, #4]
 801500a:	7812      	ldrb	r2, [r2, #0]
 801500c:	701a      	strb	r2, [r3, #0]
  idx++;
 801500e:	7dfb      	ldrb	r3, [r7, #23]
 8015010:	3301      	adds	r3, #1
 8015012:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8015014:	7dfb      	ldrb	r3, [r7, #23]
 8015016:	68ba      	ldr	r2, [r7, #8]
 8015018:	4413      	add	r3, r2
 801501a:	2203      	movs	r2, #3
 801501c:	701a      	strb	r2, [r3, #0]
  idx++;
 801501e:	7dfb      	ldrb	r3, [r7, #23]
 8015020:	3301      	adds	r3, #1
 8015022:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8015024:	e013      	b.n	801504e <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8015026:	7dfb      	ldrb	r3, [r7, #23]
 8015028:	68ba      	ldr	r2, [r7, #8]
 801502a:	4413      	add	r3, r2
 801502c:	693a      	ldr	r2, [r7, #16]
 801502e:	7812      	ldrb	r2, [r2, #0]
 8015030:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8015032:	693b      	ldr	r3, [r7, #16]
 8015034:	3301      	adds	r3, #1
 8015036:	613b      	str	r3, [r7, #16]
    idx++;
 8015038:	7dfb      	ldrb	r3, [r7, #23]
 801503a:	3301      	adds	r3, #1
 801503c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 801503e:	7dfb      	ldrb	r3, [r7, #23]
 8015040:	68ba      	ldr	r2, [r7, #8]
 8015042:	4413      	add	r3, r2
 8015044:	2200      	movs	r2, #0
 8015046:	701a      	strb	r2, [r3, #0]
    idx++;
 8015048:	7dfb      	ldrb	r3, [r7, #23]
 801504a:	3301      	adds	r3, #1
 801504c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 801504e:	693b      	ldr	r3, [r7, #16]
 8015050:	781b      	ldrb	r3, [r3, #0]
 8015052:	2b00      	cmp	r3, #0
 8015054:	d1e7      	bne.n	8015026 <USBD_GetString+0x6a>
 8015056:	e000      	b.n	801505a <USBD_GetString+0x9e>
    return;
 8015058:	bf00      	nop
  }
}
 801505a:	3718      	adds	r7, #24
 801505c:	46bd      	mov	sp, r7
 801505e:	bd80      	pop	{r7, pc}

08015060 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8015060:	b480      	push	{r7}
 8015062:	b085      	sub	sp, #20
 8015064:	af00      	add	r7, sp, #0
 8015066:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8015068:	2300      	movs	r3, #0
 801506a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 801506c:	687b      	ldr	r3, [r7, #4]
 801506e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8015070:	e005      	b.n	801507e <USBD_GetLen+0x1e>
  {
    len++;
 8015072:	7bfb      	ldrb	r3, [r7, #15]
 8015074:	3301      	adds	r3, #1
 8015076:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8015078:	68bb      	ldr	r3, [r7, #8]
 801507a:	3301      	adds	r3, #1
 801507c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 801507e:	68bb      	ldr	r3, [r7, #8]
 8015080:	781b      	ldrb	r3, [r3, #0]
 8015082:	2b00      	cmp	r3, #0
 8015084:	d1f5      	bne.n	8015072 <USBD_GetLen+0x12>
  }

  return len;
 8015086:	7bfb      	ldrb	r3, [r7, #15]
}
 8015088:	4618      	mov	r0, r3
 801508a:	3714      	adds	r7, #20
 801508c:	46bd      	mov	sp, r7
 801508e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015092:	4770      	bx	lr

08015094 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8015094:	b580      	push	{r7, lr}
 8015096:	b084      	sub	sp, #16
 8015098:	af00      	add	r7, sp, #0
 801509a:	60f8      	str	r0, [r7, #12]
 801509c:	60b9      	str	r1, [r7, #8]
 801509e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80150a0:	68fb      	ldr	r3, [r7, #12]
 80150a2:	2202      	movs	r2, #2
 80150a4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80150a8:	68fb      	ldr	r3, [r7, #12]
 80150aa:	687a      	ldr	r2, [r7, #4]
 80150ac:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80150ae:	68fb      	ldr	r3, [r7, #12]
 80150b0:	687a      	ldr	r2, [r7, #4]
 80150b2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80150b4:	687b      	ldr	r3, [r7, #4]
 80150b6:	68ba      	ldr	r2, [r7, #8]
 80150b8:	2100      	movs	r1, #0
 80150ba:	68f8      	ldr	r0, [r7, #12]
 80150bc:	f000 fd2b 	bl	8015b16 <USBD_LL_Transmit>

  return USBD_OK;
 80150c0:	2300      	movs	r3, #0
}
 80150c2:	4618      	mov	r0, r3
 80150c4:	3710      	adds	r7, #16
 80150c6:	46bd      	mov	sp, r7
 80150c8:	bd80      	pop	{r7, pc}

080150ca <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80150ca:	b580      	push	{r7, lr}
 80150cc:	b084      	sub	sp, #16
 80150ce:	af00      	add	r7, sp, #0
 80150d0:	60f8      	str	r0, [r7, #12]
 80150d2:	60b9      	str	r1, [r7, #8]
 80150d4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80150d6:	687b      	ldr	r3, [r7, #4]
 80150d8:	68ba      	ldr	r2, [r7, #8]
 80150da:	2100      	movs	r1, #0
 80150dc:	68f8      	ldr	r0, [r7, #12]
 80150de:	f000 fd1a 	bl	8015b16 <USBD_LL_Transmit>

  return USBD_OK;
 80150e2:	2300      	movs	r3, #0
}
 80150e4:	4618      	mov	r0, r3
 80150e6:	3710      	adds	r7, #16
 80150e8:	46bd      	mov	sp, r7
 80150ea:	bd80      	pop	{r7, pc}

080150ec <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80150ec:	b580      	push	{r7, lr}
 80150ee:	b084      	sub	sp, #16
 80150f0:	af00      	add	r7, sp, #0
 80150f2:	60f8      	str	r0, [r7, #12]
 80150f4:	60b9      	str	r1, [r7, #8]
 80150f6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80150f8:	68fb      	ldr	r3, [r7, #12]
 80150fa:	2203      	movs	r2, #3
 80150fc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8015100:	68fb      	ldr	r3, [r7, #12]
 8015102:	687a      	ldr	r2, [r7, #4]
 8015104:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8015108:	68fb      	ldr	r3, [r7, #12]
 801510a:	687a      	ldr	r2, [r7, #4]
 801510c:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8015110:	687b      	ldr	r3, [r7, #4]
 8015112:	68ba      	ldr	r2, [r7, #8]
 8015114:	2100      	movs	r1, #0
 8015116:	68f8      	ldr	r0, [r7, #12]
 8015118:	f000 fd1e 	bl	8015b58 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801511c:	2300      	movs	r3, #0
}
 801511e:	4618      	mov	r0, r3
 8015120:	3710      	adds	r7, #16
 8015122:	46bd      	mov	sp, r7
 8015124:	bd80      	pop	{r7, pc}

08015126 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8015126:	b580      	push	{r7, lr}
 8015128:	b084      	sub	sp, #16
 801512a:	af00      	add	r7, sp, #0
 801512c:	60f8      	str	r0, [r7, #12]
 801512e:	60b9      	str	r1, [r7, #8]
 8015130:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8015132:	687b      	ldr	r3, [r7, #4]
 8015134:	68ba      	ldr	r2, [r7, #8]
 8015136:	2100      	movs	r1, #0
 8015138:	68f8      	ldr	r0, [r7, #12]
 801513a:	f000 fd0d 	bl	8015b58 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801513e:	2300      	movs	r3, #0
}
 8015140:	4618      	mov	r0, r3
 8015142:	3710      	adds	r7, #16
 8015144:	46bd      	mov	sp, r7
 8015146:	bd80      	pop	{r7, pc}

08015148 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8015148:	b580      	push	{r7, lr}
 801514a:	b082      	sub	sp, #8
 801514c:	af00      	add	r7, sp, #0
 801514e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8015150:	687b      	ldr	r3, [r7, #4]
 8015152:	2204      	movs	r2, #4
 8015154:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8015158:	2300      	movs	r3, #0
 801515a:	2200      	movs	r2, #0
 801515c:	2100      	movs	r1, #0
 801515e:	6878      	ldr	r0, [r7, #4]
 8015160:	f000 fcd9 	bl	8015b16 <USBD_LL_Transmit>

  return USBD_OK;
 8015164:	2300      	movs	r3, #0
}
 8015166:	4618      	mov	r0, r3
 8015168:	3708      	adds	r7, #8
 801516a:	46bd      	mov	sp, r7
 801516c:	bd80      	pop	{r7, pc}

0801516e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801516e:	b580      	push	{r7, lr}
 8015170:	b082      	sub	sp, #8
 8015172:	af00      	add	r7, sp, #0
 8015174:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8015176:	687b      	ldr	r3, [r7, #4]
 8015178:	2205      	movs	r2, #5
 801517a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801517e:	2300      	movs	r3, #0
 8015180:	2200      	movs	r2, #0
 8015182:	2100      	movs	r1, #0
 8015184:	6878      	ldr	r0, [r7, #4]
 8015186:	f000 fce7 	bl	8015b58 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801518a:	2300      	movs	r3, #0
}
 801518c:	4618      	mov	r0, r3
 801518e:	3708      	adds	r7, #8
 8015190:	46bd      	mov	sp, r7
 8015192:	bd80      	pop	{r7, pc}

08015194 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8015194:	b580      	push	{r7, lr}
 8015196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8015198:	2200      	movs	r2, #0
 801519a:	4918      	ldr	r1, [pc, #96]	@ (80151fc <MX_USB_DEVICE_Init+0x68>)
 801519c:	4818      	ldr	r0, [pc, #96]	@ (8015200 <MX_USB_DEVICE_Init+0x6c>)
 801519e:	f7fe fccd 	bl	8013b3c <USBD_Init>
 80151a2:	4603      	mov	r3, r0
 80151a4:	2b00      	cmp	r3, #0
 80151a6:	d001      	beq.n	80151ac <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80151a8:	f7ec fa96 	bl	80016d8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80151ac:	4915      	ldr	r1, [pc, #84]	@ (8015204 <MX_USB_DEVICE_Init+0x70>)
 80151ae:	4814      	ldr	r0, [pc, #80]	@ (8015200 <MX_USB_DEVICE_Init+0x6c>)
 80151b0:	f7fe fcf4 	bl	8013b9c <USBD_RegisterClass>
 80151b4:	4603      	mov	r3, r0
 80151b6:	2b00      	cmp	r3, #0
 80151b8:	d001      	beq.n	80151be <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80151ba:	f7ec fa8d 	bl	80016d8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80151be:	4912      	ldr	r1, [pc, #72]	@ (8015208 <MX_USB_DEVICE_Init+0x74>)
 80151c0:	480f      	ldr	r0, [pc, #60]	@ (8015200 <MX_USB_DEVICE_Init+0x6c>)
 80151c2:	f7fe fbeb 	bl	801399c <USBD_CDC_RegisterInterface>
 80151c6:	4603      	mov	r3, r0
 80151c8:	2b00      	cmp	r3, #0
 80151ca:	d001      	beq.n	80151d0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80151cc:	f7ec fa84 	bl	80016d8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80151d0:	480b      	ldr	r0, [pc, #44]	@ (8015200 <MX_USB_DEVICE_Init+0x6c>)
 80151d2:	f7fe fd19 	bl	8013c08 <USBD_Start>
 80151d6:	4603      	mov	r3, r0
 80151d8:	2b00      	cmp	r3, #0
 80151da:	d001      	beq.n	80151e0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80151dc:	f7ec fa7c 	bl	80016d8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 80151e0:	f7f6 fff4 	bl	800c1cc <HAL_PWREx_EnableUSBVoltageDetector>

  hcdc = (USBD_CDC_HandleTypeDef *)hUsbDeviceFS.pClassDataCmsit[hUsbDeviceFS.classId];
 80151e4:	4b06      	ldr	r3, [pc, #24]	@ (8015200 <MX_USB_DEVICE_Init+0x6c>)
 80151e6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80151ea:	4a05      	ldr	r2, [pc, #20]	@ (8015200 <MX_USB_DEVICE_Init+0x6c>)
 80151ec:	33b0      	adds	r3, #176	@ 0xb0
 80151ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80151f2:	4a06      	ldr	r2, [pc, #24]	@ (801520c <MX_USB_DEVICE_Init+0x78>)
 80151f4:	6013      	str	r3, [r2, #0]

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80151f6:	bf00      	nop
 80151f8:	bd80      	pop	{r7, pc}
 80151fa:	bf00      	nop
 80151fc:	240000b4 	.word	0x240000b4
 8015200:	24009c98 	.word	0x24009c98
 8015204:	24000020 	.word	0x24000020
 8015208:	240000a0 	.word	0x240000a0
 801520c:	24009f74 	.word	0x24009f74

08015210 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8015210:	b580      	push	{r7, lr}
 8015212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8015214:	2200      	movs	r2, #0
 8015216:	4905      	ldr	r1, [pc, #20]	@ (801522c <CDC_Init_FS+0x1c>)
 8015218:	4805      	ldr	r0, [pc, #20]	@ (8015230 <CDC_Init_FS+0x20>)
 801521a:	f7fe fbd9 	bl	80139d0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801521e:	4905      	ldr	r1, [pc, #20]	@ (8015234 <CDC_Init_FS+0x24>)
 8015220:	4803      	ldr	r0, [pc, #12]	@ (8015230 <CDC_Init_FS+0x20>)
 8015222:	f7fe fbf7 	bl	8013a14 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8015226:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8015228:	4618      	mov	r0, r3
 801522a:	bd80      	pop	{r7, pc}
 801522c:	2400a778 	.word	0x2400a778
 8015230:	24009c98 	.word	0x24009c98
 8015234:	24009f78 	.word	0x24009f78

08015238 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8015238:	b480      	push	{r7}
 801523a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801523c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801523e:	4618      	mov	r0, r3
 8015240:	46bd      	mov	sp, r7
 8015242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015246:	4770      	bx	lr

08015248 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8015248:	b480      	push	{r7}
 801524a:	b083      	sub	sp, #12
 801524c:	af00      	add	r7, sp, #0
 801524e:	4603      	mov	r3, r0
 8015250:	6039      	str	r1, [r7, #0]
 8015252:	71fb      	strb	r3, [r7, #7]
 8015254:	4613      	mov	r3, r2
 8015256:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8015258:	79fb      	ldrb	r3, [r7, #7]
 801525a:	2b23      	cmp	r3, #35	@ 0x23
 801525c:	d84a      	bhi.n	80152f4 <CDC_Control_FS+0xac>
 801525e:	a201      	add	r2, pc, #4	@ (adr r2, 8015264 <CDC_Control_FS+0x1c>)
 8015260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015264:	080152f5 	.word	0x080152f5
 8015268:	080152f5 	.word	0x080152f5
 801526c:	080152f5 	.word	0x080152f5
 8015270:	080152f5 	.word	0x080152f5
 8015274:	080152f5 	.word	0x080152f5
 8015278:	080152f5 	.word	0x080152f5
 801527c:	080152f5 	.word	0x080152f5
 8015280:	080152f5 	.word	0x080152f5
 8015284:	080152f5 	.word	0x080152f5
 8015288:	080152f5 	.word	0x080152f5
 801528c:	080152f5 	.word	0x080152f5
 8015290:	080152f5 	.word	0x080152f5
 8015294:	080152f5 	.word	0x080152f5
 8015298:	080152f5 	.word	0x080152f5
 801529c:	080152f5 	.word	0x080152f5
 80152a0:	080152f5 	.word	0x080152f5
 80152a4:	080152f5 	.word	0x080152f5
 80152a8:	080152f5 	.word	0x080152f5
 80152ac:	080152f5 	.word	0x080152f5
 80152b0:	080152f5 	.word	0x080152f5
 80152b4:	080152f5 	.word	0x080152f5
 80152b8:	080152f5 	.word	0x080152f5
 80152bc:	080152f5 	.word	0x080152f5
 80152c0:	080152f5 	.word	0x080152f5
 80152c4:	080152f5 	.word	0x080152f5
 80152c8:	080152f5 	.word	0x080152f5
 80152cc:	080152f5 	.word	0x080152f5
 80152d0:	080152f5 	.word	0x080152f5
 80152d4:	080152f5 	.word	0x080152f5
 80152d8:	080152f5 	.word	0x080152f5
 80152dc:	080152f5 	.word	0x080152f5
 80152e0:	080152f5 	.word	0x080152f5
 80152e4:	080152f5 	.word	0x080152f5
 80152e8:	080152f5 	.word	0x080152f5
 80152ec:	080152f5 	.word	0x080152f5
 80152f0:	080152f5 	.word	0x080152f5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80152f4:	bf00      	nop
  }

  return (USBD_OK);
 80152f6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80152f8:	4618      	mov	r0, r3
 80152fa:	370c      	adds	r7, #12
 80152fc:	46bd      	mov	sp, r7
 80152fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015302:	4770      	bx	lr

08015304 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8015304:	b580      	push	{r7, lr}
 8015306:	b082      	sub	sp, #8
 8015308:	af00      	add	r7, sp, #0
 801530a:	6078      	str	r0, [r7, #4]
 801530c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801530e:	6879      	ldr	r1, [r7, #4]
 8015310:	480a      	ldr	r0, [pc, #40]	@ (801533c <CDC_Receive_FS+0x38>)
 8015312:	f7fe fb7f 	bl	8013a14 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8015316:	4809      	ldr	r0, [pc, #36]	@ (801533c <CDC_Receive_FS+0x38>)
 8015318:	f7fe fbda 	bl	8013ad0 <USBD_CDC_ReceivePacket>
	usb_device_rxFlag = 0x01;
 801531c:	4b08      	ldr	r3, [pc, #32]	@ (8015340 <CDC_Receive_FS+0x3c>)
 801531e:	2201      	movs	r2, #1
 8015320:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, Buf, *Len, 100);
 8015322:	683b      	ldr	r3, [r7, #0]
 8015324:	681b      	ldr	r3, [r3, #0]
 8015326:	b29a      	uxth	r2, r3
 8015328:	2364      	movs	r3, #100	@ 0x64
 801532a:	6879      	ldr	r1, [r7, #4]
 801532c:	4805      	ldr	r0, [pc, #20]	@ (8015344 <CDC_Receive_FS+0x40>)
 801532e:	f7fa ffcf 	bl	80102d0 <HAL_UART_Transmit>

	//CDC_Transmit_FS(Buf,*Len);
	return (USBD_OK);
 8015332:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8015334:	4618      	mov	r0, r3
 8015336:	3708      	adds	r7, #8
 8015338:	46bd      	mov	sp, r7
 801533a:	bd80      	pop	{r7, pc}
 801533c:	24009c98 	.word	0x24009c98
 8015340:	240006bc 	.word	0x240006bc
 8015344:	240005c4 	.word	0x240005c4

08015348 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8015348:	b580      	push	{r7, lr}
 801534a:	b084      	sub	sp, #16
 801534c:	af00      	add	r7, sp, #0
 801534e:	6078      	str	r0, [r7, #4]
 8015350:	460b      	mov	r3, r1
 8015352:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8015354:	2300      	movs	r3, #0
 8015356:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8015358:	4b0d      	ldr	r3, [pc, #52]	@ (8015390 <CDC_Transmit_FS+0x48>)
 801535a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 801535e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8015360:	68bb      	ldr	r3, [r7, #8]
 8015362:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8015366:	2b00      	cmp	r3, #0
 8015368:	d001      	beq.n	801536e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 801536a:	2301      	movs	r3, #1
 801536c:	e00b      	b.n	8015386 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801536e:	887b      	ldrh	r3, [r7, #2]
 8015370:	461a      	mov	r2, r3
 8015372:	6879      	ldr	r1, [r7, #4]
 8015374:	4806      	ldr	r0, [pc, #24]	@ (8015390 <CDC_Transmit_FS+0x48>)
 8015376:	f7fe fb2b 	bl	80139d0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801537a:	4805      	ldr	r0, [pc, #20]	@ (8015390 <CDC_Transmit_FS+0x48>)
 801537c:	f7fe fb68 	bl	8013a50 <USBD_CDC_TransmitPacket>
 8015380:	4603      	mov	r3, r0
 8015382:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8015384:	7bfb      	ldrb	r3, [r7, #15]
}
 8015386:	4618      	mov	r0, r3
 8015388:	3710      	adds	r7, #16
 801538a:	46bd      	mov	sp, r7
 801538c:	bd80      	pop	{r7, pc}
 801538e:	bf00      	nop
 8015390:	24009c98 	.word	0x24009c98

08015394 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8015394:	b480      	push	{r7}
 8015396:	b087      	sub	sp, #28
 8015398:	af00      	add	r7, sp, #0
 801539a:	60f8      	str	r0, [r7, #12]
 801539c:	60b9      	str	r1, [r7, #8]
 801539e:	4613      	mov	r3, r2
 80153a0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80153a2:	2300      	movs	r3, #0
 80153a4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80153a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80153aa:	4618      	mov	r0, r3
 80153ac:	371c      	adds	r7, #28
 80153ae:	46bd      	mov	sp, r7
 80153b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153b4:	4770      	bx	lr
	...

080153b8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80153b8:	b480      	push	{r7}
 80153ba:	b083      	sub	sp, #12
 80153bc:	af00      	add	r7, sp, #0
 80153be:	4603      	mov	r3, r0
 80153c0:	6039      	str	r1, [r7, #0]
 80153c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80153c4:	683b      	ldr	r3, [r7, #0]
 80153c6:	2212      	movs	r2, #18
 80153c8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80153ca:	4b03      	ldr	r3, [pc, #12]	@ (80153d8 <USBD_FS_DeviceDescriptor+0x20>)
}
 80153cc:	4618      	mov	r0, r3
 80153ce:	370c      	adds	r7, #12
 80153d0:	46bd      	mov	sp, r7
 80153d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153d6:	4770      	bx	lr
 80153d8:	240000d4 	.word	0x240000d4

080153dc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80153dc:	b480      	push	{r7}
 80153de:	b083      	sub	sp, #12
 80153e0:	af00      	add	r7, sp, #0
 80153e2:	4603      	mov	r3, r0
 80153e4:	6039      	str	r1, [r7, #0]
 80153e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80153e8:	683b      	ldr	r3, [r7, #0]
 80153ea:	2204      	movs	r2, #4
 80153ec:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80153ee:	4b03      	ldr	r3, [pc, #12]	@ (80153fc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80153f0:	4618      	mov	r0, r3
 80153f2:	370c      	adds	r7, #12
 80153f4:	46bd      	mov	sp, r7
 80153f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153fa:	4770      	bx	lr
 80153fc:	240000e8 	.word	0x240000e8

08015400 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015400:	b580      	push	{r7, lr}
 8015402:	b082      	sub	sp, #8
 8015404:	af00      	add	r7, sp, #0
 8015406:	4603      	mov	r3, r0
 8015408:	6039      	str	r1, [r7, #0]
 801540a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801540c:	79fb      	ldrb	r3, [r7, #7]
 801540e:	2b00      	cmp	r3, #0
 8015410:	d105      	bne.n	801541e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8015412:	683a      	ldr	r2, [r7, #0]
 8015414:	4907      	ldr	r1, [pc, #28]	@ (8015434 <USBD_FS_ProductStrDescriptor+0x34>)
 8015416:	4808      	ldr	r0, [pc, #32]	@ (8015438 <USBD_FS_ProductStrDescriptor+0x38>)
 8015418:	f7ff fdd0 	bl	8014fbc <USBD_GetString>
 801541c:	e004      	b.n	8015428 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801541e:	683a      	ldr	r2, [r7, #0]
 8015420:	4904      	ldr	r1, [pc, #16]	@ (8015434 <USBD_FS_ProductStrDescriptor+0x34>)
 8015422:	4805      	ldr	r0, [pc, #20]	@ (8015438 <USBD_FS_ProductStrDescriptor+0x38>)
 8015424:	f7ff fdca 	bl	8014fbc <USBD_GetString>
  }
  return USBD_StrDesc;
 8015428:	4b02      	ldr	r3, [pc, #8]	@ (8015434 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801542a:	4618      	mov	r0, r3
 801542c:	3708      	adds	r7, #8
 801542e:	46bd      	mov	sp, r7
 8015430:	bd80      	pop	{r7, pc}
 8015432:	bf00      	nop
 8015434:	2400af78 	.word	0x2400af78
 8015438:	0801671c 	.word	0x0801671c

0801543c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801543c:	b580      	push	{r7, lr}
 801543e:	b082      	sub	sp, #8
 8015440:	af00      	add	r7, sp, #0
 8015442:	4603      	mov	r3, r0
 8015444:	6039      	str	r1, [r7, #0]
 8015446:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8015448:	683a      	ldr	r2, [r7, #0]
 801544a:	4904      	ldr	r1, [pc, #16]	@ (801545c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 801544c:	4804      	ldr	r0, [pc, #16]	@ (8015460 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801544e:	f7ff fdb5 	bl	8014fbc <USBD_GetString>
  return USBD_StrDesc;
 8015452:	4b02      	ldr	r3, [pc, #8]	@ (801545c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8015454:	4618      	mov	r0, r3
 8015456:	3708      	adds	r7, #8
 8015458:	46bd      	mov	sp, r7
 801545a:	bd80      	pop	{r7, pc}
 801545c:	2400af78 	.word	0x2400af78
 8015460:	08016734 	.word	0x08016734

08015464 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015464:	b580      	push	{r7, lr}
 8015466:	b082      	sub	sp, #8
 8015468:	af00      	add	r7, sp, #0
 801546a:	4603      	mov	r3, r0
 801546c:	6039      	str	r1, [r7, #0]
 801546e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8015470:	683b      	ldr	r3, [r7, #0]
 8015472:	221a      	movs	r2, #26
 8015474:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8015476:	f000 f843 	bl	8015500 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801547a:	4b02      	ldr	r3, [pc, #8]	@ (8015484 <USBD_FS_SerialStrDescriptor+0x20>)
}
 801547c:	4618      	mov	r0, r3
 801547e:	3708      	adds	r7, #8
 8015480:	46bd      	mov	sp, r7
 8015482:	bd80      	pop	{r7, pc}
 8015484:	240000ec 	.word	0x240000ec

08015488 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015488:	b580      	push	{r7, lr}
 801548a:	b082      	sub	sp, #8
 801548c:	af00      	add	r7, sp, #0
 801548e:	4603      	mov	r3, r0
 8015490:	6039      	str	r1, [r7, #0]
 8015492:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8015494:	79fb      	ldrb	r3, [r7, #7]
 8015496:	2b00      	cmp	r3, #0
 8015498:	d105      	bne.n	80154a6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801549a:	683a      	ldr	r2, [r7, #0]
 801549c:	4907      	ldr	r1, [pc, #28]	@ (80154bc <USBD_FS_ConfigStrDescriptor+0x34>)
 801549e:	4808      	ldr	r0, [pc, #32]	@ (80154c0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80154a0:	f7ff fd8c 	bl	8014fbc <USBD_GetString>
 80154a4:	e004      	b.n	80154b0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80154a6:	683a      	ldr	r2, [r7, #0]
 80154a8:	4904      	ldr	r1, [pc, #16]	@ (80154bc <USBD_FS_ConfigStrDescriptor+0x34>)
 80154aa:	4805      	ldr	r0, [pc, #20]	@ (80154c0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80154ac:	f7ff fd86 	bl	8014fbc <USBD_GetString>
  }
  return USBD_StrDesc;
 80154b0:	4b02      	ldr	r3, [pc, #8]	@ (80154bc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80154b2:	4618      	mov	r0, r3
 80154b4:	3708      	adds	r7, #8
 80154b6:	46bd      	mov	sp, r7
 80154b8:	bd80      	pop	{r7, pc}
 80154ba:	bf00      	nop
 80154bc:	2400af78 	.word	0x2400af78
 80154c0:	08016748 	.word	0x08016748

080154c4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80154c4:	b580      	push	{r7, lr}
 80154c6:	b082      	sub	sp, #8
 80154c8:	af00      	add	r7, sp, #0
 80154ca:	4603      	mov	r3, r0
 80154cc:	6039      	str	r1, [r7, #0]
 80154ce:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80154d0:	79fb      	ldrb	r3, [r7, #7]
 80154d2:	2b00      	cmp	r3, #0
 80154d4:	d105      	bne.n	80154e2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80154d6:	683a      	ldr	r2, [r7, #0]
 80154d8:	4907      	ldr	r1, [pc, #28]	@ (80154f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80154da:	4808      	ldr	r0, [pc, #32]	@ (80154fc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80154dc:	f7ff fd6e 	bl	8014fbc <USBD_GetString>
 80154e0:	e004      	b.n	80154ec <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80154e2:	683a      	ldr	r2, [r7, #0]
 80154e4:	4904      	ldr	r1, [pc, #16]	@ (80154f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80154e6:	4805      	ldr	r0, [pc, #20]	@ (80154fc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80154e8:	f7ff fd68 	bl	8014fbc <USBD_GetString>
  }
  return USBD_StrDesc;
 80154ec:	4b02      	ldr	r3, [pc, #8]	@ (80154f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80154ee:	4618      	mov	r0, r3
 80154f0:	3708      	adds	r7, #8
 80154f2:	46bd      	mov	sp, r7
 80154f4:	bd80      	pop	{r7, pc}
 80154f6:	bf00      	nop
 80154f8:	2400af78 	.word	0x2400af78
 80154fc:	08016754 	.word	0x08016754

08015500 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8015500:	b580      	push	{r7, lr}
 8015502:	b084      	sub	sp, #16
 8015504:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8015506:	4b0f      	ldr	r3, [pc, #60]	@ (8015544 <Get_SerialNum+0x44>)
 8015508:	681b      	ldr	r3, [r3, #0]
 801550a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801550c:	4b0e      	ldr	r3, [pc, #56]	@ (8015548 <Get_SerialNum+0x48>)
 801550e:	681b      	ldr	r3, [r3, #0]
 8015510:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8015512:	4b0e      	ldr	r3, [pc, #56]	@ (801554c <Get_SerialNum+0x4c>)
 8015514:	681b      	ldr	r3, [r3, #0]
 8015516:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8015518:	68fa      	ldr	r2, [r7, #12]
 801551a:	687b      	ldr	r3, [r7, #4]
 801551c:	4413      	add	r3, r2
 801551e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8015520:	68fb      	ldr	r3, [r7, #12]
 8015522:	2b00      	cmp	r3, #0
 8015524:	d009      	beq.n	801553a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8015526:	2208      	movs	r2, #8
 8015528:	4909      	ldr	r1, [pc, #36]	@ (8015550 <Get_SerialNum+0x50>)
 801552a:	68f8      	ldr	r0, [r7, #12]
 801552c:	f000 f814 	bl	8015558 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8015530:	2204      	movs	r2, #4
 8015532:	4908      	ldr	r1, [pc, #32]	@ (8015554 <Get_SerialNum+0x54>)
 8015534:	68b8      	ldr	r0, [r7, #8]
 8015536:	f000 f80f 	bl	8015558 <IntToUnicode>
  }
}
 801553a:	bf00      	nop
 801553c:	3710      	adds	r7, #16
 801553e:	46bd      	mov	sp, r7
 8015540:	bd80      	pop	{r7, pc}
 8015542:	bf00      	nop
 8015544:	1ff1e800 	.word	0x1ff1e800
 8015548:	1ff1e804 	.word	0x1ff1e804
 801554c:	1ff1e808 	.word	0x1ff1e808
 8015550:	240000ee 	.word	0x240000ee
 8015554:	240000fe 	.word	0x240000fe

08015558 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8015558:	b480      	push	{r7}
 801555a:	b087      	sub	sp, #28
 801555c:	af00      	add	r7, sp, #0
 801555e:	60f8      	str	r0, [r7, #12]
 8015560:	60b9      	str	r1, [r7, #8]
 8015562:	4613      	mov	r3, r2
 8015564:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8015566:	2300      	movs	r3, #0
 8015568:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801556a:	2300      	movs	r3, #0
 801556c:	75fb      	strb	r3, [r7, #23]
 801556e:	e027      	b.n	80155c0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8015570:	68fb      	ldr	r3, [r7, #12]
 8015572:	0f1b      	lsrs	r3, r3, #28
 8015574:	2b09      	cmp	r3, #9
 8015576:	d80b      	bhi.n	8015590 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8015578:	68fb      	ldr	r3, [r7, #12]
 801557a:	0f1b      	lsrs	r3, r3, #28
 801557c:	b2da      	uxtb	r2, r3
 801557e:	7dfb      	ldrb	r3, [r7, #23]
 8015580:	005b      	lsls	r3, r3, #1
 8015582:	4619      	mov	r1, r3
 8015584:	68bb      	ldr	r3, [r7, #8]
 8015586:	440b      	add	r3, r1
 8015588:	3230      	adds	r2, #48	@ 0x30
 801558a:	b2d2      	uxtb	r2, r2
 801558c:	701a      	strb	r2, [r3, #0]
 801558e:	e00a      	b.n	80155a6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8015590:	68fb      	ldr	r3, [r7, #12]
 8015592:	0f1b      	lsrs	r3, r3, #28
 8015594:	b2da      	uxtb	r2, r3
 8015596:	7dfb      	ldrb	r3, [r7, #23]
 8015598:	005b      	lsls	r3, r3, #1
 801559a:	4619      	mov	r1, r3
 801559c:	68bb      	ldr	r3, [r7, #8]
 801559e:	440b      	add	r3, r1
 80155a0:	3237      	adds	r2, #55	@ 0x37
 80155a2:	b2d2      	uxtb	r2, r2
 80155a4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80155a6:	68fb      	ldr	r3, [r7, #12]
 80155a8:	011b      	lsls	r3, r3, #4
 80155aa:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80155ac:	7dfb      	ldrb	r3, [r7, #23]
 80155ae:	005b      	lsls	r3, r3, #1
 80155b0:	3301      	adds	r3, #1
 80155b2:	68ba      	ldr	r2, [r7, #8]
 80155b4:	4413      	add	r3, r2
 80155b6:	2200      	movs	r2, #0
 80155b8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80155ba:	7dfb      	ldrb	r3, [r7, #23]
 80155bc:	3301      	adds	r3, #1
 80155be:	75fb      	strb	r3, [r7, #23]
 80155c0:	7dfa      	ldrb	r2, [r7, #23]
 80155c2:	79fb      	ldrb	r3, [r7, #7]
 80155c4:	429a      	cmp	r2, r3
 80155c6:	d3d3      	bcc.n	8015570 <IntToUnicode+0x18>
  }
}
 80155c8:	bf00      	nop
 80155ca:	bf00      	nop
 80155cc:	371c      	adds	r7, #28
 80155ce:	46bd      	mov	sp, r7
 80155d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155d4:	4770      	bx	lr
	...

080155d8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80155d8:	b580      	push	{r7, lr}
 80155da:	b0ba      	sub	sp, #232	@ 0xe8
 80155dc:	af00      	add	r7, sp, #0
 80155de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80155e0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80155e4:	2200      	movs	r2, #0
 80155e6:	601a      	str	r2, [r3, #0]
 80155e8:	605a      	str	r2, [r3, #4]
 80155ea:	609a      	str	r2, [r3, #8]
 80155ec:	60da      	str	r2, [r3, #12]
 80155ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80155f0:	f107 0310 	add.w	r3, r7, #16
 80155f4:	22c0      	movs	r2, #192	@ 0xc0
 80155f6:	2100      	movs	r1, #0
 80155f8:	4618      	mov	r0, r3
 80155fa:	f000 fbfd 	bl	8015df8 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 80155fe:	687b      	ldr	r3, [r7, #4]
 8015600:	681b      	ldr	r3, [r3, #0]
 8015602:	4a2c      	ldr	r2, [pc, #176]	@ (80156b4 <HAL_PCD_MspInit+0xdc>)
 8015604:	4293      	cmp	r3, r2
 8015606:	d151      	bne.n	80156ac <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8015608:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 801560c:	f04f 0300 	mov.w	r3, #0
 8015610:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8015614:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8015618:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801561c:	f107 0310 	add.w	r3, r7, #16
 8015620:	4618      	mov	r0, r3
 8015622:	f7f7 fdc9 	bl	800d1b8 <HAL_RCCEx_PeriphCLKConfig>
 8015626:	4603      	mov	r3, r0
 8015628:	2b00      	cmp	r3, #0
 801562a:	d001      	beq.n	8015630 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 801562c:	f7ec f854 	bl	80016d8 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8015630:	f7f6 fdcc 	bl	800c1cc <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8015634:	4b20      	ldr	r3, [pc, #128]	@ (80156b8 <HAL_PCD_MspInit+0xe0>)
 8015636:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801563a:	4a1f      	ldr	r2, [pc, #124]	@ (80156b8 <HAL_PCD_MspInit+0xe0>)
 801563c:	f043 0301 	orr.w	r3, r3, #1
 8015640:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8015644:	4b1c      	ldr	r3, [pc, #112]	@ (80156b8 <HAL_PCD_MspInit+0xe0>)
 8015646:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801564a:	f003 0301 	and.w	r3, r3, #1
 801564e:	60fb      	str	r3, [r7, #12]
 8015650:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8015652:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8015656:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801565a:	2302      	movs	r3, #2
 801565c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015660:	2300      	movs	r3, #0
 8015662:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8015666:	2300      	movs	r3, #0
 8015668:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 801566c:	230a      	movs	r3, #10
 801566e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8015672:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8015676:	4619      	mov	r1, r3
 8015678:	4810      	ldr	r0, [pc, #64]	@ (80156bc <HAL_PCD_MspInit+0xe4>)
 801567a:	f7f0 fed9 	bl	8006430 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801567e:	4b0e      	ldr	r3, [pc, #56]	@ (80156b8 <HAL_PCD_MspInit+0xe0>)
 8015680:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8015684:	4a0c      	ldr	r2, [pc, #48]	@ (80156b8 <HAL_PCD_MspInit+0xe0>)
 8015686:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 801568a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 801568e:	4b0a      	ldr	r3, [pc, #40]	@ (80156b8 <HAL_PCD_MspInit+0xe0>)
 8015690:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8015694:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8015698:	60bb      	str	r3, [r7, #8]
 801569a:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 801569c:	2200      	movs	r2, #0
 801569e:	2100      	movs	r1, #0
 80156a0:	2065      	movs	r0, #101	@ 0x65
 80156a2:	f7ed f832 	bl	800270a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80156a6:	2065      	movs	r0, #101	@ 0x65
 80156a8:	f7ed f849 	bl	800273e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80156ac:	bf00      	nop
 80156ae:	37e8      	adds	r7, #232	@ 0xe8
 80156b0:	46bd      	mov	sp, r7
 80156b2:	bd80      	pop	{r7, pc}
 80156b4:	40080000 	.word	0x40080000
 80156b8:	58024400 	.word	0x58024400
 80156bc:	58020000 	.word	0x58020000

080156c0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80156c0:	b580      	push	{r7, lr}
 80156c2:	b082      	sub	sp, #8
 80156c4:	af00      	add	r7, sp, #0
 80156c6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80156c8:	687b      	ldr	r3, [r7, #4]
 80156ca:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 80156ce:	687b      	ldr	r3, [r7, #4]
 80156d0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80156d4:	4619      	mov	r1, r3
 80156d6:	4610      	mov	r0, r2
 80156d8:	f7fe fae3 	bl	8013ca2 <USBD_LL_SetupStage>
}
 80156dc:	bf00      	nop
 80156de:	3708      	adds	r7, #8
 80156e0:	46bd      	mov	sp, r7
 80156e2:	bd80      	pop	{r7, pc}

080156e4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80156e4:	b580      	push	{r7, lr}
 80156e6:	b082      	sub	sp, #8
 80156e8:	af00      	add	r7, sp, #0
 80156ea:	6078      	str	r0, [r7, #4]
 80156ec:	460b      	mov	r3, r1
 80156ee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80156f0:	687b      	ldr	r3, [r7, #4]
 80156f2:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80156f6:	78fa      	ldrb	r2, [r7, #3]
 80156f8:	6879      	ldr	r1, [r7, #4]
 80156fa:	4613      	mov	r3, r2
 80156fc:	00db      	lsls	r3, r3, #3
 80156fe:	4413      	add	r3, r2
 8015700:	009b      	lsls	r3, r3, #2
 8015702:	440b      	add	r3, r1
 8015704:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8015708:	681a      	ldr	r2, [r3, #0]
 801570a:	78fb      	ldrb	r3, [r7, #3]
 801570c:	4619      	mov	r1, r3
 801570e:	f7fe fb1d 	bl	8013d4c <USBD_LL_DataOutStage>
}
 8015712:	bf00      	nop
 8015714:	3708      	adds	r7, #8
 8015716:	46bd      	mov	sp, r7
 8015718:	bd80      	pop	{r7, pc}

0801571a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801571a:	b580      	push	{r7, lr}
 801571c:	b082      	sub	sp, #8
 801571e:	af00      	add	r7, sp, #0
 8015720:	6078      	str	r0, [r7, #4]
 8015722:	460b      	mov	r3, r1
 8015724:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8015726:	687b      	ldr	r3, [r7, #4]
 8015728:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 801572c:	78fa      	ldrb	r2, [r7, #3]
 801572e:	6879      	ldr	r1, [r7, #4]
 8015730:	4613      	mov	r3, r2
 8015732:	00db      	lsls	r3, r3, #3
 8015734:	4413      	add	r3, r2
 8015736:	009b      	lsls	r3, r3, #2
 8015738:	440b      	add	r3, r1
 801573a:	3320      	adds	r3, #32
 801573c:	681a      	ldr	r2, [r3, #0]
 801573e:	78fb      	ldrb	r3, [r7, #3]
 8015740:	4619      	mov	r1, r3
 8015742:	f7fe fbb6 	bl	8013eb2 <USBD_LL_DataInStage>
}
 8015746:	bf00      	nop
 8015748:	3708      	adds	r7, #8
 801574a:	46bd      	mov	sp, r7
 801574c:	bd80      	pop	{r7, pc}

0801574e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801574e:	b580      	push	{r7, lr}
 8015750:	b082      	sub	sp, #8
 8015752:	af00      	add	r7, sp, #0
 8015754:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8015756:	687b      	ldr	r3, [r7, #4]
 8015758:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801575c:	4618      	mov	r0, r3
 801575e:	f7fe fcf0 	bl	8014142 <USBD_LL_SOF>
}
 8015762:	bf00      	nop
 8015764:	3708      	adds	r7, #8
 8015766:	46bd      	mov	sp, r7
 8015768:	bd80      	pop	{r7, pc}

0801576a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801576a:	b580      	push	{r7, lr}
 801576c:	b084      	sub	sp, #16
 801576e:	af00      	add	r7, sp, #0
 8015770:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8015772:	2301      	movs	r3, #1
 8015774:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8015776:	687b      	ldr	r3, [r7, #4]
 8015778:	79db      	ldrb	r3, [r3, #7]
 801577a:	2b00      	cmp	r3, #0
 801577c:	d102      	bne.n	8015784 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801577e:	2300      	movs	r3, #0
 8015780:	73fb      	strb	r3, [r7, #15]
 8015782:	e008      	b.n	8015796 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8015784:	687b      	ldr	r3, [r7, #4]
 8015786:	79db      	ldrb	r3, [r3, #7]
 8015788:	2b02      	cmp	r3, #2
 801578a:	d102      	bne.n	8015792 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801578c:	2301      	movs	r3, #1
 801578e:	73fb      	strb	r3, [r7, #15]
 8015790:	e001      	b.n	8015796 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8015792:	f7eb ffa1 	bl	80016d8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8015796:	687b      	ldr	r3, [r7, #4]
 8015798:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801579c:	7bfa      	ldrb	r2, [r7, #15]
 801579e:	4611      	mov	r1, r2
 80157a0:	4618      	mov	r0, r3
 80157a2:	f7fe fc8a 	bl	80140ba <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80157a6:	687b      	ldr	r3, [r7, #4]
 80157a8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80157ac:	4618      	mov	r0, r3
 80157ae:	f7fe fc32 	bl	8014016 <USBD_LL_Reset>
}
 80157b2:	bf00      	nop
 80157b4:	3710      	adds	r7, #16
 80157b6:	46bd      	mov	sp, r7
 80157b8:	bd80      	pop	{r7, pc}
	...

080157bc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80157bc:	b580      	push	{r7, lr}
 80157be:	b082      	sub	sp, #8
 80157c0:	af00      	add	r7, sp, #0
 80157c2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80157c4:	687b      	ldr	r3, [r7, #4]
 80157c6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80157ca:	4618      	mov	r0, r3
 80157cc:	f7fe fc85 	bl	80140da <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80157d0:	687b      	ldr	r3, [r7, #4]
 80157d2:	681b      	ldr	r3, [r3, #0]
 80157d4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80157d8:	681b      	ldr	r3, [r3, #0]
 80157da:	687a      	ldr	r2, [r7, #4]
 80157dc:	6812      	ldr	r2, [r2, #0]
 80157de:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80157e2:	f043 0301 	orr.w	r3, r3, #1
 80157e6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80157e8:	687b      	ldr	r3, [r7, #4]
 80157ea:	7adb      	ldrb	r3, [r3, #11]
 80157ec:	2b00      	cmp	r3, #0
 80157ee:	d005      	beq.n	80157fc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80157f0:	4b04      	ldr	r3, [pc, #16]	@ (8015804 <HAL_PCD_SuspendCallback+0x48>)
 80157f2:	691b      	ldr	r3, [r3, #16]
 80157f4:	4a03      	ldr	r2, [pc, #12]	@ (8015804 <HAL_PCD_SuspendCallback+0x48>)
 80157f6:	f043 0306 	orr.w	r3, r3, #6
 80157fa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80157fc:	bf00      	nop
 80157fe:	3708      	adds	r7, #8
 8015800:	46bd      	mov	sp, r7
 8015802:	bd80      	pop	{r7, pc}
 8015804:	e000ed00 	.word	0xe000ed00

08015808 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015808:	b580      	push	{r7, lr}
 801580a:	b082      	sub	sp, #8
 801580c:	af00      	add	r7, sp, #0
 801580e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8015810:	687b      	ldr	r3, [r7, #4]
 8015812:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8015816:	4618      	mov	r0, r3
 8015818:	f7fe fc7b 	bl	8014112 <USBD_LL_Resume>
}
 801581c:	bf00      	nop
 801581e:	3708      	adds	r7, #8
 8015820:	46bd      	mov	sp, r7
 8015822:	bd80      	pop	{r7, pc}

08015824 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015824:	b580      	push	{r7, lr}
 8015826:	b082      	sub	sp, #8
 8015828:	af00      	add	r7, sp, #0
 801582a:	6078      	str	r0, [r7, #4]
 801582c:	460b      	mov	r3, r1
 801582e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8015830:	687b      	ldr	r3, [r7, #4]
 8015832:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8015836:	78fa      	ldrb	r2, [r7, #3]
 8015838:	4611      	mov	r1, r2
 801583a:	4618      	mov	r0, r3
 801583c:	f7fe fcd3 	bl	80141e6 <USBD_LL_IsoOUTIncomplete>
}
 8015840:	bf00      	nop
 8015842:	3708      	adds	r7, #8
 8015844:	46bd      	mov	sp, r7
 8015846:	bd80      	pop	{r7, pc}

08015848 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015848:	b580      	push	{r7, lr}
 801584a:	b082      	sub	sp, #8
 801584c:	af00      	add	r7, sp, #0
 801584e:	6078      	str	r0, [r7, #4]
 8015850:	460b      	mov	r3, r1
 8015852:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8015854:	687b      	ldr	r3, [r7, #4]
 8015856:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801585a:	78fa      	ldrb	r2, [r7, #3]
 801585c:	4611      	mov	r1, r2
 801585e:	4618      	mov	r0, r3
 8015860:	f7fe fc8f 	bl	8014182 <USBD_LL_IsoINIncomplete>
}
 8015864:	bf00      	nop
 8015866:	3708      	adds	r7, #8
 8015868:	46bd      	mov	sp, r7
 801586a:	bd80      	pop	{r7, pc}

0801586c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801586c:	b580      	push	{r7, lr}
 801586e:	b082      	sub	sp, #8
 8015870:	af00      	add	r7, sp, #0
 8015872:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8015874:	687b      	ldr	r3, [r7, #4]
 8015876:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801587a:	4618      	mov	r0, r3
 801587c:	f7fe fce5 	bl	801424a <USBD_LL_DevConnected>
}
 8015880:	bf00      	nop
 8015882:	3708      	adds	r7, #8
 8015884:	46bd      	mov	sp, r7
 8015886:	bd80      	pop	{r7, pc}

08015888 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015888:	b580      	push	{r7, lr}
 801588a:	b082      	sub	sp, #8
 801588c:	af00      	add	r7, sp, #0
 801588e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8015890:	687b      	ldr	r3, [r7, #4]
 8015892:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8015896:	4618      	mov	r0, r3
 8015898:	f7fe fce2 	bl	8014260 <USBD_LL_DevDisconnected>
}
 801589c:	bf00      	nop
 801589e:	3708      	adds	r7, #8
 80158a0:	46bd      	mov	sp, r7
 80158a2:	bd80      	pop	{r7, pc}

080158a4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80158a4:	b580      	push	{r7, lr}
 80158a6:	b082      	sub	sp, #8
 80158a8:	af00      	add	r7, sp, #0
 80158aa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80158ac:	687b      	ldr	r3, [r7, #4]
 80158ae:	781b      	ldrb	r3, [r3, #0]
 80158b0:	2b00      	cmp	r3, #0
 80158b2:	d13e      	bne.n	8015932 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80158b4:	4a21      	ldr	r2, [pc, #132]	@ (801593c <USBD_LL_Init+0x98>)
 80158b6:	687b      	ldr	r3, [r7, #4]
 80158b8:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 80158bc:	687b      	ldr	r3, [r7, #4]
 80158be:	4a1f      	ldr	r2, [pc, #124]	@ (801593c <USBD_LL_Init+0x98>)
 80158c0:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80158c4:	4b1d      	ldr	r3, [pc, #116]	@ (801593c <USBD_LL_Init+0x98>)
 80158c6:	4a1e      	ldr	r2, [pc, #120]	@ (8015940 <USBD_LL_Init+0x9c>)
 80158c8:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80158ca:	4b1c      	ldr	r3, [pc, #112]	@ (801593c <USBD_LL_Init+0x98>)
 80158cc:	2209      	movs	r2, #9
 80158ce:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80158d0:	4b1a      	ldr	r3, [pc, #104]	@ (801593c <USBD_LL_Init+0x98>)
 80158d2:	2202      	movs	r2, #2
 80158d4:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80158d6:	4b19      	ldr	r3, [pc, #100]	@ (801593c <USBD_LL_Init+0x98>)
 80158d8:	2200      	movs	r2, #0
 80158da:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80158dc:	4b17      	ldr	r3, [pc, #92]	@ (801593c <USBD_LL_Init+0x98>)
 80158de:	2202      	movs	r2, #2
 80158e0:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80158e2:	4b16      	ldr	r3, [pc, #88]	@ (801593c <USBD_LL_Init+0x98>)
 80158e4:	2200      	movs	r2, #0
 80158e6:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80158e8:	4b14      	ldr	r3, [pc, #80]	@ (801593c <USBD_LL_Init+0x98>)
 80158ea:	2200      	movs	r2, #0
 80158ec:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80158ee:	4b13      	ldr	r3, [pc, #76]	@ (801593c <USBD_LL_Init+0x98>)
 80158f0:	2200      	movs	r2, #0
 80158f2:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80158f4:	4b11      	ldr	r3, [pc, #68]	@ (801593c <USBD_LL_Init+0x98>)
 80158f6:	2200      	movs	r2, #0
 80158f8:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80158fa:	4b10      	ldr	r3, [pc, #64]	@ (801593c <USBD_LL_Init+0x98>)
 80158fc:	2200      	movs	r2, #0
 80158fe:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8015900:	4b0e      	ldr	r3, [pc, #56]	@ (801593c <USBD_LL_Init+0x98>)
 8015902:	2200      	movs	r2, #0
 8015904:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8015906:	480d      	ldr	r0, [pc, #52]	@ (801593c <USBD_LL_Init+0x98>)
 8015908:	f7f5 f986 	bl	800ac18 <HAL_PCD_Init>
 801590c:	4603      	mov	r3, r0
 801590e:	2b00      	cmp	r3, #0
 8015910:	d001      	beq.n	8015916 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8015912:	f7eb fee1 	bl	80016d8 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8015916:	2180      	movs	r1, #128	@ 0x80
 8015918:	4808      	ldr	r0, [pc, #32]	@ (801593c <USBD_LL_Init+0x98>)
 801591a:	f7f6 fbdc 	bl	800c0d6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801591e:	2240      	movs	r2, #64	@ 0x40
 8015920:	2100      	movs	r1, #0
 8015922:	4806      	ldr	r0, [pc, #24]	@ (801593c <USBD_LL_Init+0x98>)
 8015924:	f7f6 fb90 	bl	800c048 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8015928:	2280      	movs	r2, #128	@ 0x80
 801592a:	2101      	movs	r1, #1
 801592c:	4803      	ldr	r0, [pc, #12]	@ (801593c <USBD_LL_Init+0x98>)
 801592e:	f7f6 fb8b 	bl	800c048 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 8015932:	2300      	movs	r3, #0
}
 8015934:	4618      	mov	r0, r3
 8015936:	3708      	adds	r7, #8
 8015938:	46bd      	mov	sp, r7
 801593a:	bd80      	pop	{r7, pc}
 801593c:	2400b178 	.word	0x2400b178
 8015940:	40080000 	.word	0x40080000

08015944 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8015944:	b580      	push	{r7, lr}
 8015946:	b084      	sub	sp, #16
 8015948:	af00      	add	r7, sp, #0
 801594a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801594c:	2300      	movs	r3, #0
 801594e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015950:	2300      	movs	r3, #0
 8015952:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8015954:	687b      	ldr	r3, [r7, #4]
 8015956:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801595a:	4618      	mov	r0, r3
 801595c:	f7f5 fa68 	bl	800ae30 <HAL_PCD_Start>
 8015960:	4603      	mov	r3, r0
 8015962:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015964:	7bfb      	ldrb	r3, [r7, #15]
 8015966:	4618      	mov	r0, r3
 8015968:	f000 f942 	bl	8015bf0 <USBD_Get_USB_Status>
 801596c:	4603      	mov	r3, r0
 801596e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015970:	7bbb      	ldrb	r3, [r7, #14]
}
 8015972:	4618      	mov	r0, r3
 8015974:	3710      	adds	r7, #16
 8015976:	46bd      	mov	sp, r7
 8015978:	bd80      	pop	{r7, pc}

0801597a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801597a:	b580      	push	{r7, lr}
 801597c:	b084      	sub	sp, #16
 801597e:	af00      	add	r7, sp, #0
 8015980:	6078      	str	r0, [r7, #4]
 8015982:	4608      	mov	r0, r1
 8015984:	4611      	mov	r1, r2
 8015986:	461a      	mov	r2, r3
 8015988:	4603      	mov	r3, r0
 801598a:	70fb      	strb	r3, [r7, #3]
 801598c:	460b      	mov	r3, r1
 801598e:	70bb      	strb	r3, [r7, #2]
 8015990:	4613      	mov	r3, r2
 8015992:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015994:	2300      	movs	r3, #0
 8015996:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015998:	2300      	movs	r3, #0
 801599a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801599c:	687b      	ldr	r3, [r7, #4]
 801599e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80159a2:	78bb      	ldrb	r3, [r7, #2]
 80159a4:	883a      	ldrh	r2, [r7, #0]
 80159a6:	78f9      	ldrb	r1, [r7, #3]
 80159a8:	f7f5 ff69 	bl	800b87e <HAL_PCD_EP_Open>
 80159ac:	4603      	mov	r3, r0
 80159ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80159b0:	7bfb      	ldrb	r3, [r7, #15]
 80159b2:	4618      	mov	r0, r3
 80159b4:	f000 f91c 	bl	8015bf0 <USBD_Get_USB_Status>
 80159b8:	4603      	mov	r3, r0
 80159ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80159bc:	7bbb      	ldrb	r3, [r7, #14]
}
 80159be:	4618      	mov	r0, r3
 80159c0:	3710      	adds	r7, #16
 80159c2:	46bd      	mov	sp, r7
 80159c4:	bd80      	pop	{r7, pc}

080159c6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80159c6:	b580      	push	{r7, lr}
 80159c8:	b084      	sub	sp, #16
 80159ca:	af00      	add	r7, sp, #0
 80159cc:	6078      	str	r0, [r7, #4]
 80159ce:	460b      	mov	r3, r1
 80159d0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80159d2:	2300      	movs	r3, #0
 80159d4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80159d6:	2300      	movs	r3, #0
 80159d8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80159da:	687b      	ldr	r3, [r7, #4]
 80159dc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80159e0:	78fa      	ldrb	r2, [r7, #3]
 80159e2:	4611      	mov	r1, r2
 80159e4:	4618      	mov	r0, r3
 80159e6:	f7f5 ffb4 	bl	800b952 <HAL_PCD_EP_Close>
 80159ea:	4603      	mov	r3, r0
 80159ec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80159ee:	7bfb      	ldrb	r3, [r7, #15]
 80159f0:	4618      	mov	r0, r3
 80159f2:	f000 f8fd 	bl	8015bf0 <USBD_Get_USB_Status>
 80159f6:	4603      	mov	r3, r0
 80159f8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80159fa:	7bbb      	ldrb	r3, [r7, #14]
}
 80159fc:	4618      	mov	r0, r3
 80159fe:	3710      	adds	r7, #16
 8015a00:	46bd      	mov	sp, r7
 8015a02:	bd80      	pop	{r7, pc}

08015a04 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015a04:	b580      	push	{r7, lr}
 8015a06:	b084      	sub	sp, #16
 8015a08:	af00      	add	r7, sp, #0
 8015a0a:	6078      	str	r0, [r7, #4]
 8015a0c:	460b      	mov	r3, r1
 8015a0e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015a10:	2300      	movs	r3, #0
 8015a12:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015a14:	2300      	movs	r3, #0
 8015a16:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8015a18:	687b      	ldr	r3, [r7, #4]
 8015a1a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8015a1e:	78fa      	ldrb	r2, [r7, #3]
 8015a20:	4611      	mov	r1, r2
 8015a22:	4618      	mov	r0, r3
 8015a24:	f7f6 f86c 	bl	800bb00 <HAL_PCD_EP_SetStall>
 8015a28:	4603      	mov	r3, r0
 8015a2a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015a2c:	7bfb      	ldrb	r3, [r7, #15]
 8015a2e:	4618      	mov	r0, r3
 8015a30:	f000 f8de 	bl	8015bf0 <USBD_Get_USB_Status>
 8015a34:	4603      	mov	r3, r0
 8015a36:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015a38:	7bbb      	ldrb	r3, [r7, #14]
}
 8015a3a:	4618      	mov	r0, r3
 8015a3c:	3710      	adds	r7, #16
 8015a3e:	46bd      	mov	sp, r7
 8015a40:	bd80      	pop	{r7, pc}

08015a42 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015a42:	b580      	push	{r7, lr}
 8015a44:	b084      	sub	sp, #16
 8015a46:	af00      	add	r7, sp, #0
 8015a48:	6078      	str	r0, [r7, #4]
 8015a4a:	460b      	mov	r3, r1
 8015a4c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015a4e:	2300      	movs	r3, #0
 8015a50:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015a52:	2300      	movs	r3, #0
 8015a54:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8015a56:	687b      	ldr	r3, [r7, #4]
 8015a58:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8015a5c:	78fa      	ldrb	r2, [r7, #3]
 8015a5e:	4611      	mov	r1, r2
 8015a60:	4618      	mov	r0, r3
 8015a62:	f7f6 f8b0 	bl	800bbc6 <HAL_PCD_EP_ClrStall>
 8015a66:	4603      	mov	r3, r0
 8015a68:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015a6a:	7bfb      	ldrb	r3, [r7, #15]
 8015a6c:	4618      	mov	r0, r3
 8015a6e:	f000 f8bf 	bl	8015bf0 <USBD_Get_USB_Status>
 8015a72:	4603      	mov	r3, r0
 8015a74:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015a76:	7bbb      	ldrb	r3, [r7, #14]
}
 8015a78:	4618      	mov	r0, r3
 8015a7a:	3710      	adds	r7, #16
 8015a7c:	46bd      	mov	sp, r7
 8015a7e:	bd80      	pop	{r7, pc}

08015a80 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015a80:	b480      	push	{r7}
 8015a82:	b085      	sub	sp, #20
 8015a84:	af00      	add	r7, sp, #0
 8015a86:	6078      	str	r0, [r7, #4]
 8015a88:	460b      	mov	r3, r1
 8015a8a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8015a8c:	687b      	ldr	r3, [r7, #4]
 8015a8e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8015a92:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8015a94:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8015a98:	2b00      	cmp	r3, #0
 8015a9a:	da0b      	bge.n	8015ab4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8015a9c:	78fb      	ldrb	r3, [r7, #3]
 8015a9e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8015aa2:	68f9      	ldr	r1, [r7, #12]
 8015aa4:	4613      	mov	r3, r2
 8015aa6:	00db      	lsls	r3, r3, #3
 8015aa8:	4413      	add	r3, r2
 8015aaa:	009b      	lsls	r3, r3, #2
 8015aac:	440b      	add	r3, r1
 8015aae:	3316      	adds	r3, #22
 8015ab0:	781b      	ldrb	r3, [r3, #0]
 8015ab2:	e00b      	b.n	8015acc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8015ab4:	78fb      	ldrb	r3, [r7, #3]
 8015ab6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8015aba:	68f9      	ldr	r1, [r7, #12]
 8015abc:	4613      	mov	r3, r2
 8015abe:	00db      	lsls	r3, r3, #3
 8015ac0:	4413      	add	r3, r2
 8015ac2:	009b      	lsls	r3, r3, #2
 8015ac4:	440b      	add	r3, r1
 8015ac6:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8015aca:	781b      	ldrb	r3, [r3, #0]
  }
}
 8015acc:	4618      	mov	r0, r3
 8015ace:	3714      	adds	r7, #20
 8015ad0:	46bd      	mov	sp, r7
 8015ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ad6:	4770      	bx	lr

08015ad8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8015ad8:	b580      	push	{r7, lr}
 8015ada:	b084      	sub	sp, #16
 8015adc:	af00      	add	r7, sp, #0
 8015ade:	6078      	str	r0, [r7, #4]
 8015ae0:	460b      	mov	r3, r1
 8015ae2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015ae4:	2300      	movs	r3, #0
 8015ae6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015ae8:	2300      	movs	r3, #0
 8015aea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8015aec:	687b      	ldr	r3, [r7, #4]
 8015aee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8015af2:	78fa      	ldrb	r2, [r7, #3]
 8015af4:	4611      	mov	r1, r2
 8015af6:	4618      	mov	r0, r3
 8015af8:	f7f5 fe9d 	bl	800b836 <HAL_PCD_SetAddress>
 8015afc:	4603      	mov	r3, r0
 8015afe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015b00:	7bfb      	ldrb	r3, [r7, #15]
 8015b02:	4618      	mov	r0, r3
 8015b04:	f000 f874 	bl	8015bf0 <USBD_Get_USB_Status>
 8015b08:	4603      	mov	r3, r0
 8015b0a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015b0c:	7bbb      	ldrb	r3, [r7, #14]
}
 8015b0e:	4618      	mov	r0, r3
 8015b10:	3710      	adds	r7, #16
 8015b12:	46bd      	mov	sp, r7
 8015b14:	bd80      	pop	{r7, pc}

08015b16 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8015b16:	b580      	push	{r7, lr}
 8015b18:	b086      	sub	sp, #24
 8015b1a:	af00      	add	r7, sp, #0
 8015b1c:	60f8      	str	r0, [r7, #12]
 8015b1e:	607a      	str	r2, [r7, #4]
 8015b20:	603b      	str	r3, [r7, #0]
 8015b22:	460b      	mov	r3, r1
 8015b24:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015b26:	2300      	movs	r3, #0
 8015b28:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015b2a:	2300      	movs	r3, #0
 8015b2c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8015b2e:	68fb      	ldr	r3, [r7, #12]
 8015b30:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8015b34:	7af9      	ldrb	r1, [r7, #11]
 8015b36:	683b      	ldr	r3, [r7, #0]
 8015b38:	687a      	ldr	r2, [r7, #4]
 8015b3a:	f7f5 ffa7 	bl	800ba8c <HAL_PCD_EP_Transmit>
 8015b3e:	4603      	mov	r3, r0
 8015b40:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015b42:	7dfb      	ldrb	r3, [r7, #23]
 8015b44:	4618      	mov	r0, r3
 8015b46:	f000 f853 	bl	8015bf0 <USBD_Get_USB_Status>
 8015b4a:	4603      	mov	r3, r0
 8015b4c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8015b4e:	7dbb      	ldrb	r3, [r7, #22]
}
 8015b50:	4618      	mov	r0, r3
 8015b52:	3718      	adds	r7, #24
 8015b54:	46bd      	mov	sp, r7
 8015b56:	bd80      	pop	{r7, pc}

08015b58 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8015b58:	b580      	push	{r7, lr}
 8015b5a:	b086      	sub	sp, #24
 8015b5c:	af00      	add	r7, sp, #0
 8015b5e:	60f8      	str	r0, [r7, #12]
 8015b60:	607a      	str	r2, [r7, #4]
 8015b62:	603b      	str	r3, [r7, #0]
 8015b64:	460b      	mov	r3, r1
 8015b66:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015b68:	2300      	movs	r3, #0
 8015b6a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015b6c:	2300      	movs	r3, #0
 8015b6e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8015b70:	68fb      	ldr	r3, [r7, #12]
 8015b72:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8015b76:	7af9      	ldrb	r1, [r7, #11]
 8015b78:	683b      	ldr	r3, [r7, #0]
 8015b7a:	687a      	ldr	r2, [r7, #4]
 8015b7c:	f7f5 ff33 	bl	800b9e6 <HAL_PCD_EP_Receive>
 8015b80:	4603      	mov	r3, r0
 8015b82:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015b84:	7dfb      	ldrb	r3, [r7, #23]
 8015b86:	4618      	mov	r0, r3
 8015b88:	f000 f832 	bl	8015bf0 <USBD_Get_USB_Status>
 8015b8c:	4603      	mov	r3, r0
 8015b8e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8015b90:	7dbb      	ldrb	r3, [r7, #22]
}
 8015b92:	4618      	mov	r0, r3
 8015b94:	3718      	adds	r7, #24
 8015b96:	46bd      	mov	sp, r7
 8015b98:	bd80      	pop	{r7, pc}

08015b9a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015b9a:	b580      	push	{r7, lr}
 8015b9c:	b082      	sub	sp, #8
 8015b9e:	af00      	add	r7, sp, #0
 8015ba0:	6078      	str	r0, [r7, #4]
 8015ba2:	460b      	mov	r3, r1
 8015ba4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8015ba6:	687b      	ldr	r3, [r7, #4]
 8015ba8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8015bac:	78fa      	ldrb	r2, [r7, #3]
 8015bae:	4611      	mov	r1, r2
 8015bb0:	4618      	mov	r0, r3
 8015bb2:	f7f5 ff53 	bl	800ba5c <HAL_PCD_EP_GetRxCount>
 8015bb6:	4603      	mov	r3, r0
}
 8015bb8:	4618      	mov	r0, r3
 8015bba:	3708      	adds	r7, #8
 8015bbc:	46bd      	mov	sp, r7
 8015bbe:	bd80      	pop	{r7, pc}

08015bc0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8015bc0:	b480      	push	{r7}
 8015bc2:	b083      	sub	sp, #12
 8015bc4:	af00      	add	r7, sp, #0
 8015bc6:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8015bc8:	4b03      	ldr	r3, [pc, #12]	@ (8015bd8 <USBD_static_malloc+0x18>)
}
 8015bca:	4618      	mov	r0, r3
 8015bcc:	370c      	adds	r7, #12
 8015bce:	46bd      	mov	sp, r7
 8015bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bd4:	4770      	bx	lr
 8015bd6:	bf00      	nop
 8015bd8:	2400b65c 	.word	0x2400b65c

08015bdc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8015bdc:	b480      	push	{r7}
 8015bde:	b083      	sub	sp, #12
 8015be0:	af00      	add	r7, sp, #0
 8015be2:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8015be4:	bf00      	nop
 8015be6:	370c      	adds	r7, #12
 8015be8:	46bd      	mov	sp, r7
 8015bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bee:	4770      	bx	lr

08015bf0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8015bf0:	b480      	push	{r7}
 8015bf2:	b085      	sub	sp, #20
 8015bf4:	af00      	add	r7, sp, #0
 8015bf6:	4603      	mov	r3, r0
 8015bf8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015bfa:	2300      	movs	r3, #0
 8015bfc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8015bfe:	79fb      	ldrb	r3, [r7, #7]
 8015c00:	2b03      	cmp	r3, #3
 8015c02:	d817      	bhi.n	8015c34 <USBD_Get_USB_Status+0x44>
 8015c04:	a201      	add	r2, pc, #4	@ (adr r2, 8015c0c <USBD_Get_USB_Status+0x1c>)
 8015c06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015c0a:	bf00      	nop
 8015c0c:	08015c1d 	.word	0x08015c1d
 8015c10:	08015c23 	.word	0x08015c23
 8015c14:	08015c29 	.word	0x08015c29
 8015c18:	08015c2f 	.word	0x08015c2f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8015c1c:	2300      	movs	r3, #0
 8015c1e:	73fb      	strb	r3, [r7, #15]
    break;
 8015c20:	e00b      	b.n	8015c3a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8015c22:	2303      	movs	r3, #3
 8015c24:	73fb      	strb	r3, [r7, #15]
    break;
 8015c26:	e008      	b.n	8015c3a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8015c28:	2301      	movs	r3, #1
 8015c2a:	73fb      	strb	r3, [r7, #15]
    break;
 8015c2c:	e005      	b.n	8015c3a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8015c2e:	2303      	movs	r3, #3
 8015c30:	73fb      	strb	r3, [r7, #15]
    break;
 8015c32:	e002      	b.n	8015c3a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8015c34:	2303      	movs	r3, #3
 8015c36:	73fb      	strb	r3, [r7, #15]
    break;
 8015c38:	bf00      	nop
  }
  return usb_status;
 8015c3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8015c3c:	4618      	mov	r0, r3
 8015c3e:	3714      	adds	r7, #20
 8015c40:	46bd      	mov	sp, r7
 8015c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c46:	4770      	bx	lr

08015c48 <malloc>:
 8015c48:	4b02      	ldr	r3, [pc, #8]	@ (8015c54 <malloc+0xc>)
 8015c4a:	4601      	mov	r1, r0
 8015c4c:	6818      	ldr	r0, [r3, #0]
 8015c4e:	f000 b825 	b.w	8015c9c <_malloc_r>
 8015c52:	bf00      	nop
 8015c54:	24000108 	.word	0x24000108

08015c58 <sbrk_aligned>:
 8015c58:	b570      	push	{r4, r5, r6, lr}
 8015c5a:	4e0f      	ldr	r6, [pc, #60]	@ (8015c98 <sbrk_aligned+0x40>)
 8015c5c:	460c      	mov	r4, r1
 8015c5e:	6831      	ldr	r1, [r6, #0]
 8015c60:	4605      	mov	r5, r0
 8015c62:	b911      	cbnz	r1, 8015c6a <sbrk_aligned+0x12>
 8015c64:	f000 f8d0 	bl	8015e08 <_sbrk_r>
 8015c68:	6030      	str	r0, [r6, #0]
 8015c6a:	4621      	mov	r1, r4
 8015c6c:	4628      	mov	r0, r5
 8015c6e:	f000 f8cb 	bl	8015e08 <_sbrk_r>
 8015c72:	1c43      	adds	r3, r0, #1
 8015c74:	d103      	bne.n	8015c7e <sbrk_aligned+0x26>
 8015c76:	f04f 34ff 	mov.w	r4, #4294967295
 8015c7a:	4620      	mov	r0, r4
 8015c7c:	bd70      	pop	{r4, r5, r6, pc}
 8015c7e:	1cc4      	adds	r4, r0, #3
 8015c80:	f024 0403 	bic.w	r4, r4, #3
 8015c84:	42a0      	cmp	r0, r4
 8015c86:	d0f8      	beq.n	8015c7a <sbrk_aligned+0x22>
 8015c88:	1a21      	subs	r1, r4, r0
 8015c8a:	4628      	mov	r0, r5
 8015c8c:	f000 f8bc 	bl	8015e08 <_sbrk_r>
 8015c90:	3001      	adds	r0, #1
 8015c92:	d1f2      	bne.n	8015c7a <sbrk_aligned+0x22>
 8015c94:	e7ef      	b.n	8015c76 <sbrk_aligned+0x1e>
 8015c96:	bf00      	nop
 8015c98:	2400b87c 	.word	0x2400b87c

08015c9c <_malloc_r>:
 8015c9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015ca0:	1ccd      	adds	r5, r1, #3
 8015ca2:	f025 0503 	bic.w	r5, r5, #3
 8015ca6:	3508      	adds	r5, #8
 8015ca8:	2d0c      	cmp	r5, #12
 8015caa:	bf38      	it	cc
 8015cac:	250c      	movcc	r5, #12
 8015cae:	2d00      	cmp	r5, #0
 8015cb0:	4606      	mov	r6, r0
 8015cb2:	db01      	blt.n	8015cb8 <_malloc_r+0x1c>
 8015cb4:	42a9      	cmp	r1, r5
 8015cb6:	d904      	bls.n	8015cc2 <_malloc_r+0x26>
 8015cb8:	230c      	movs	r3, #12
 8015cba:	6033      	str	r3, [r6, #0]
 8015cbc:	2000      	movs	r0, #0
 8015cbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015cc2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8015d98 <_malloc_r+0xfc>
 8015cc6:	f000 f869 	bl	8015d9c <__malloc_lock>
 8015cca:	f8d8 3000 	ldr.w	r3, [r8]
 8015cce:	461c      	mov	r4, r3
 8015cd0:	bb44      	cbnz	r4, 8015d24 <_malloc_r+0x88>
 8015cd2:	4629      	mov	r1, r5
 8015cd4:	4630      	mov	r0, r6
 8015cd6:	f7ff ffbf 	bl	8015c58 <sbrk_aligned>
 8015cda:	1c43      	adds	r3, r0, #1
 8015cdc:	4604      	mov	r4, r0
 8015cde:	d158      	bne.n	8015d92 <_malloc_r+0xf6>
 8015ce0:	f8d8 4000 	ldr.w	r4, [r8]
 8015ce4:	4627      	mov	r7, r4
 8015ce6:	2f00      	cmp	r7, #0
 8015ce8:	d143      	bne.n	8015d72 <_malloc_r+0xd6>
 8015cea:	2c00      	cmp	r4, #0
 8015cec:	d04b      	beq.n	8015d86 <_malloc_r+0xea>
 8015cee:	6823      	ldr	r3, [r4, #0]
 8015cf0:	4639      	mov	r1, r7
 8015cf2:	4630      	mov	r0, r6
 8015cf4:	eb04 0903 	add.w	r9, r4, r3
 8015cf8:	f000 f886 	bl	8015e08 <_sbrk_r>
 8015cfc:	4581      	cmp	r9, r0
 8015cfe:	d142      	bne.n	8015d86 <_malloc_r+0xea>
 8015d00:	6821      	ldr	r1, [r4, #0]
 8015d02:	1a6d      	subs	r5, r5, r1
 8015d04:	4629      	mov	r1, r5
 8015d06:	4630      	mov	r0, r6
 8015d08:	f7ff ffa6 	bl	8015c58 <sbrk_aligned>
 8015d0c:	3001      	adds	r0, #1
 8015d0e:	d03a      	beq.n	8015d86 <_malloc_r+0xea>
 8015d10:	6823      	ldr	r3, [r4, #0]
 8015d12:	442b      	add	r3, r5
 8015d14:	6023      	str	r3, [r4, #0]
 8015d16:	f8d8 3000 	ldr.w	r3, [r8]
 8015d1a:	685a      	ldr	r2, [r3, #4]
 8015d1c:	bb62      	cbnz	r2, 8015d78 <_malloc_r+0xdc>
 8015d1e:	f8c8 7000 	str.w	r7, [r8]
 8015d22:	e00f      	b.n	8015d44 <_malloc_r+0xa8>
 8015d24:	6822      	ldr	r2, [r4, #0]
 8015d26:	1b52      	subs	r2, r2, r5
 8015d28:	d420      	bmi.n	8015d6c <_malloc_r+0xd0>
 8015d2a:	2a0b      	cmp	r2, #11
 8015d2c:	d917      	bls.n	8015d5e <_malloc_r+0xc2>
 8015d2e:	1961      	adds	r1, r4, r5
 8015d30:	42a3      	cmp	r3, r4
 8015d32:	6025      	str	r5, [r4, #0]
 8015d34:	bf18      	it	ne
 8015d36:	6059      	strne	r1, [r3, #4]
 8015d38:	6863      	ldr	r3, [r4, #4]
 8015d3a:	bf08      	it	eq
 8015d3c:	f8c8 1000 	streq.w	r1, [r8]
 8015d40:	5162      	str	r2, [r4, r5]
 8015d42:	604b      	str	r3, [r1, #4]
 8015d44:	4630      	mov	r0, r6
 8015d46:	f000 f82f 	bl	8015da8 <__malloc_unlock>
 8015d4a:	f104 000b 	add.w	r0, r4, #11
 8015d4e:	1d23      	adds	r3, r4, #4
 8015d50:	f020 0007 	bic.w	r0, r0, #7
 8015d54:	1ac2      	subs	r2, r0, r3
 8015d56:	bf1c      	itt	ne
 8015d58:	1a1b      	subne	r3, r3, r0
 8015d5a:	50a3      	strne	r3, [r4, r2]
 8015d5c:	e7af      	b.n	8015cbe <_malloc_r+0x22>
 8015d5e:	6862      	ldr	r2, [r4, #4]
 8015d60:	42a3      	cmp	r3, r4
 8015d62:	bf0c      	ite	eq
 8015d64:	f8c8 2000 	streq.w	r2, [r8]
 8015d68:	605a      	strne	r2, [r3, #4]
 8015d6a:	e7eb      	b.n	8015d44 <_malloc_r+0xa8>
 8015d6c:	4623      	mov	r3, r4
 8015d6e:	6864      	ldr	r4, [r4, #4]
 8015d70:	e7ae      	b.n	8015cd0 <_malloc_r+0x34>
 8015d72:	463c      	mov	r4, r7
 8015d74:	687f      	ldr	r7, [r7, #4]
 8015d76:	e7b6      	b.n	8015ce6 <_malloc_r+0x4a>
 8015d78:	461a      	mov	r2, r3
 8015d7a:	685b      	ldr	r3, [r3, #4]
 8015d7c:	42a3      	cmp	r3, r4
 8015d7e:	d1fb      	bne.n	8015d78 <_malloc_r+0xdc>
 8015d80:	2300      	movs	r3, #0
 8015d82:	6053      	str	r3, [r2, #4]
 8015d84:	e7de      	b.n	8015d44 <_malloc_r+0xa8>
 8015d86:	230c      	movs	r3, #12
 8015d88:	6033      	str	r3, [r6, #0]
 8015d8a:	4630      	mov	r0, r6
 8015d8c:	f000 f80c 	bl	8015da8 <__malloc_unlock>
 8015d90:	e794      	b.n	8015cbc <_malloc_r+0x20>
 8015d92:	6005      	str	r5, [r0, #0]
 8015d94:	e7d6      	b.n	8015d44 <_malloc_r+0xa8>
 8015d96:	bf00      	nop
 8015d98:	2400b880 	.word	0x2400b880

08015d9c <__malloc_lock>:
 8015d9c:	4801      	ldr	r0, [pc, #4]	@ (8015da4 <__malloc_lock+0x8>)
 8015d9e:	f000 b86d 	b.w	8015e7c <__retarget_lock_acquire_recursive>
 8015da2:	bf00      	nop
 8015da4:	2400b9c0 	.word	0x2400b9c0

08015da8 <__malloc_unlock>:
 8015da8:	4801      	ldr	r0, [pc, #4]	@ (8015db0 <__malloc_unlock+0x8>)
 8015daa:	f000 b868 	b.w	8015e7e <__retarget_lock_release_recursive>
 8015dae:	bf00      	nop
 8015db0:	2400b9c0 	.word	0x2400b9c0

08015db4 <siprintf>:
 8015db4:	b40e      	push	{r1, r2, r3}
 8015db6:	b510      	push	{r4, lr}
 8015db8:	b09d      	sub	sp, #116	@ 0x74
 8015dba:	ab1f      	add	r3, sp, #124	@ 0x7c
 8015dbc:	9002      	str	r0, [sp, #8]
 8015dbe:	9006      	str	r0, [sp, #24]
 8015dc0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8015dc4:	480a      	ldr	r0, [pc, #40]	@ (8015df0 <siprintf+0x3c>)
 8015dc6:	9107      	str	r1, [sp, #28]
 8015dc8:	9104      	str	r1, [sp, #16]
 8015dca:	490a      	ldr	r1, [pc, #40]	@ (8015df4 <siprintf+0x40>)
 8015dcc:	f853 2b04 	ldr.w	r2, [r3], #4
 8015dd0:	9105      	str	r1, [sp, #20]
 8015dd2:	2400      	movs	r4, #0
 8015dd4:	a902      	add	r1, sp, #8
 8015dd6:	6800      	ldr	r0, [r0, #0]
 8015dd8:	9301      	str	r3, [sp, #4]
 8015dda:	941b      	str	r4, [sp, #108]	@ 0x6c
 8015ddc:	f000 f904 	bl	8015fe8 <_svfiprintf_r>
 8015de0:	9b02      	ldr	r3, [sp, #8]
 8015de2:	701c      	strb	r4, [r3, #0]
 8015de4:	b01d      	add	sp, #116	@ 0x74
 8015de6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015dea:	b003      	add	sp, #12
 8015dec:	4770      	bx	lr
 8015dee:	bf00      	nop
 8015df0:	24000108 	.word	0x24000108
 8015df4:	ffff0208 	.word	0xffff0208

08015df8 <memset>:
 8015df8:	4402      	add	r2, r0
 8015dfa:	4603      	mov	r3, r0
 8015dfc:	4293      	cmp	r3, r2
 8015dfe:	d100      	bne.n	8015e02 <memset+0xa>
 8015e00:	4770      	bx	lr
 8015e02:	f803 1b01 	strb.w	r1, [r3], #1
 8015e06:	e7f9      	b.n	8015dfc <memset+0x4>

08015e08 <_sbrk_r>:
 8015e08:	b538      	push	{r3, r4, r5, lr}
 8015e0a:	4d06      	ldr	r5, [pc, #24]	@ (8015e24 <_sbrk_r+0x1c>)
 8015e0c:	2300      	movs	r3, #0
 8015e0e:	4604      	mov	r4, r0
 8015e10:	4608      	mov	r0, r1
 8015e12:	602b      	str	r3, [r5, #0]
 8015e14:	f7ec f9c2 	bl	800219c <_sbrk>
 8015e18:	1c43      	adds	r3, r0, #1
 8015e1a:	d102      	bne.n	8015e22 <_sbrk_r+0x1a>
 8015e1c:	682b      	ldr	r3, [r5, #0]
 8015e1e:	b103      	cbz	r3, 8015e22 <_sbrk_r+0x1a>
 8015e20:	6023      	str	r3, [r4, #0]
 8015e22:	bd38      	pop	{r3, r4, r5, pc}
 8015e24:	2400b9bc 	.word	0x2400b9bc

08015e28 <__errno>:
 8015e28:	4b01      	ldr	r3, [pc, #4]	@ (8015e30 <__errno+0x8>)
 8015e2a:	6818      	ldr	r0, [r3, #0]
 8015e2c:	4770      	bx	lr
 8015e2e:	bf00      	nop
 8015e30:	24000108 	.word	0x24000108

08015e34 <__libc_init_array>:
 8015e34:	b570      	push	{r4, r5, r6, lr}
 8015e36:	4d0d      	ldr	r5, [pc, #52]	@ (8015e6c <__libc_init_array+0x38>)
 8015e38:	4c0d      	ldr	r4, [pc, #52]	@ (8015e70 <__libc_init_array+0x3c>)
 8015e3a:	1b64      	subs	r4, r4, r5
 8015e3c:	10a4      	asrs	r4, r4, #2
 8015e3e:	2600      	movs	r6, #0
 8015e40:	42a6      	cmp	r6, r4
 8015e42:	d109      	bne.n	8015e58 <__libc_init_array+0x24>
 8015e44:	4d0b      	ldr	r5, [pc, #44]	@ (8015e74 <__libc_init_array+0x40>)
 8015e46:	4c0c      	ldr	r4, [pc, #48]	@ (8015e78 <__libc_init_array+0x44>)
 8015e48:	f000 fba6 	bl	8016598 <_init>
 8015e4c:	1b64      	subs	r4, r4, r5
 8015e4e:	10a4      	asrs	r4, r4, #2
 8015e50:	2600      	movs	r6, #0
 8015e52:	42a6      	cmp	r6, r4
 8015e54:	d105      	bne.n	8015e62 <__libc_init_array+0x2e>
 8015e56:	bd70      	pop	{r4, r5, r6, pc}
 8015e58:	f855 3b04 	ldr.w	r3, [r5], #4
 8015e5c:	4798      	blx	r3
 8015e5e:	3601      	adds	r6, #1
 8015e60:	e7ee      	b.n	8015e40 <__libc_init_array+0xc>
 8015e62:	f855 3b04 	ldr.w	r3, [r5], #4
 8015e66:	4798      	blx	r3
 8015e68:	3601      	adds	r6, #1
 8015e6a:	e7f2      	b.n	8015e52 <__libc_init_array+0x1e>
 8015e6c:	08016a40 	.word	0x08016a40
 8015e70:	08016a40 	.word	0x08016a40
 8015e74:	08016a40 	.word	0x08016a40
 8015e78:	08016a44 	.word	0x08016a44

08015e7c <__retarget_lock_acquire_recursive>:
 8015e7c:	4770      	bx	lr

08015e7e <__retarget_lock_release_recursive>:
 8015e7e:	4770      	bx	lr

08015e80 <memcpy>:
 8015e80:	440a      	add	r2, r1
 8015e82:	4291      	cmp	r1, r2
 8015e84:	f100 33ff 	add.w	r3, r0, #4294967295
 8015e88:	d100      	bne.n	8015e8c <memcpy+0xc>
 8015e8a:	4770      	bx	lr
 8015e8c:	b510      	push	{r4, lr}
 8015e8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015e92:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015e96:	4291      	cmp	r1, r2
 8015e98:	d1f9      	bne.n	8015e8e <memcpy+0xe>
 8015e9a:	bd10      	pop	{r4, pc}

08015e9c <_free_r>:
 8015e9c:	b538      	push	{r3, r4, r5, lr}
 8015e9e:	4605      	mov	r5, r0
 8015ea0:	2900      	cmp	r1, #0
 8015ea2:	d041      	beq.n	8015f28 <_free_r+0x8c>
 8015ea4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015ea8:	1f0c      	subs	r4, r1, #4
 8015eaa:	2b00      	cmp	r3, #0
 8015eac:	bfb8      	it	lt
 8015eae:	18e4      	addlt	r4, r4, r3
 8015eb0:	f7ff ff74 	bl	8015d9c <__malloc_lock>
 8015eb4:	4a1d      	ldr	r2, [pc, #116]	@ (8015f2c <_free_r+0x90>)
 8015eb6:	6813      	ldr	r3, [r2, #0]
 8015eb8:	b933      	cbnz	r3, 8015ec8 <_free_r+0x2c>
 8015eba:	6063      	str	r3, [r4, #4]
 8015ebc:	6014      	str	r4, [r2, #0]
 8015ebe:	4628      	mov	r0, r5
 8015ec0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015ec4:	f7ff bf70 	b.w	8015da8 <__malloc_unlock>
 8015ec8:	42a3      	cmp	r3, r4
 8015eca:	d908      	bls.n	8015ede <_free_r+0x42>
 8015ecc:	6820      	ldr	r0, [r4, #0]
 8015ece:	1821      	adds	r1, r4, r0
 8015ed0:	428b      	cmp	r3, r1
 8015ed2:	bf01      	itttt	eq
 8015ed4:	6819      	ldreq	r1, [r3, #0]
 8015ed6:	685b      	ldreq	r3, [r3, #4]
 8015ed8:	1809      	addeq	r1, r1, r0
 8015eda:	6021      	streq	r1, [r4, #0]
 8015edc:	e7ed      	b.n	8015eba <_free_r+0x1e>
 8015ede:	461a      	mov	r2, r3
 8015ee0:	685b      	ldr	r3, [r3, #4]
 8015ee2:	b10b      	cbz	r3, 8015ee8 <_free_r+0x4c>
 8015ee4:	42a3      	cmp	r3, r4
 8015ee6:	d9fa      	bls.n	8015ede <_free_r+0x42>
 8015ee8:	6811      	ldr	r1, [r2, #0]
 8015eea:	1850      	adds	r0, r2, r1
 8015eec:	42a0      	cmp	r0, r4
 8015eee:	d10b      	bne.n	8015f08 <_free_r+0x6c>
 8015ef0:	6820      	ldr	r0, [r4, #0]
 8015ef2:	4401      	add	r1, r0
 8015ef4:	1850      	adds	r0, r2, r1
 8015ef6:	4283      	cmp	r3, r0
 8015ef8:	6011      	str	r1, [r2, #0]
 8015efa:	d1e0      	bne.n	8015ebe <_free_r+0x22>
 8015efc:	6818      	ldr	r0, [r3, #0]
 8015efe:	685b      	ldr	r3, [r3, #4]
 8015f00:	6053      	str	r3, [r2, #4]
 8015f02:	4408      	add	r0, r1
 8015f04:	6010      	str	r0, [r2, #0]
 8015f06:	e7da      	b.n	8015ebe <_free_r+0x22>
 8015f08:	d902      	bls.n	8015f10 <_free_r+0x74>
 8015f0a:	230c      	movs	r3, #12
 8015f0c:	602b      	str	r3, [r5, #0]
 8015f0e:	e7d6      	b.n	8015ebe <_free_r+0x22>
 8015f10:	6820      	ldr	r0, [r4, #0]
 8015f12:	1821      	adds	r1, r4, r0
 8015f14:	428b      	cmp	r3, r1
 8015f16:	bf04      	itt	eq
 8015f18:	6819      	ldreq	r1, [r3, #0]
 8015f1a:	685b      	ldreq	r3, [r3, #4]
 8015f1c:	6063      	str	r3, [r4, #4]
 8015f1e:	bf04      	itt	eq
 8015f20:	1809      	addeq	r1, r1, r0
 8015f22:	6021      	streq	r1, [r4, #0]
 8015f24:	6054      	str	r4, [r2, #4]
 8015f26:	e7ca      	b.n	8015ebe <_free_r+0x22>
 8015f28:	bd38      	pop	{r3, r4, r5, pc}
 8015f2a:	bf00      	nop
 8015f2c:	2400b880 	.word	0x2400b880

08015f30 <__ssputs_r>:
 8015f30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015f34:	688e      	ldr	r6, [r1, #8]
 8015f36:	461f      	mov	r7, r3
 8015f38:	42be      	cmp	r6, r7
 8015f3a:	680b      	ldr	r3, [r1, #0]
 8015f3c:	4682      	mov	sl, r0
 8015f3e:	460c      	mov	r4, r1
 8015f40:	4690      	mov	r8, r2
 8015f42:	d82d      	bhi.n	8015fa0 <__ssputs_r+0x70>
 8015f44:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8015f48:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8015f4c:	d026      	beq.n	8015f9c <__ssputs_r+0x6c>
 8015f4e:	6965      	ldr	r5, [r4, #20]
 8015f50:	6909      	ldr	r1, [r1, #16]
 8015f52:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015f56:	eba3 0901 	sub.w	r9, r3, r1
 8015f5a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8015f5e:	1c7b      	adds	r3, r7, #1
 8015f60:	444b      	add	r3, r9
 8015f62:	106d      	asrs	r5, r5, #1
 8015f64:	429d      	cmp	r5, r3
 8015f66:	bf38      	it	cc
 8015f68:	461d      	movcc	r5, r3
 8015f6a:	0553      	lsls	r3, r2, #21
 8015f6c:	d527      	bpl.n	8015fbe <__ssputs_r+0x8e>
 8015f6e:	4629      	mov	r1, r5
 8015f70:	f7ff fe94 	bl	8015c9c <_malloc_r>
 8015f74:	4606      	mov	r6, r0
 8015f76:	b360      	cbz	r0, 8015fd2 <__ssputs_r+0xa2>
 8015f78:	6921      	ldr	r1, [r4, #16]
 8015f7a:	464a      	mov	r2, r9
 8015f7c:	f7ff ff80 	bl	8015e80 <memcpy>
 8015f80:	89a3      	ldrh	r3, [r4, #12]
 8015f82:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8015f86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8015f8a:	81a3      	strh	r3, [r4, #12]
 8015f8c:	6126      	str	r6, [r4, #16]
 8015f8e:	6165      	str	r5, [r4, #20]
 8015f90:	444e      	add	r6, r9
 8015f92:	eba5 0509 	sub.w	r5, r5, r9
 8015f96:	6026      	str	r6, [r4, #0]
 8015f98:	60a5      	str	r5, [r4, #8]
 8015f9a:	463e      	mov	r6, r7
 8015f9c:	42be      	cmp	r6, r7
 8015f9e:	d900      	bls.n	8015fa2 <__ssputs_r+0x72>
 8015fa0:	463e      	mov	r6, r7
 8015fa2:	6820      	ldr	r0, [r4, #0]
 8015fa4:	4632      	mov	r2, r6
 8015fa6:	4641      	mov	r1, r8
 8015fa8:	f000 faa6 	bl	80164f8 <memmove>
 8015fac:	68a3      	ldr	r3, [r4, #8]
 8015fae:	1b9b      	subs	r3, r3, r6
 8015fb0:	60a3      	str	r3, [r4, #8]
 8015fb2:	6823      	ldr	r3, [r4, #0]
 8015fb4:	4433      	add	r3, r6
 8015fb6:	6023      	str	r3, [r4, #0]
 8015fb8:	2000      	movs	r0, #0
 8015fba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015fbe:	462a      	mov	r2, r5
 8015fc0:	f000 fab4 	bl	801652c <_realloc_r>
 8015fc4:	4606      	mov	r6, r0
 8015fc6:	2800      	cmp	r0, #0
 8015fc8:	d1e0      	bne.n	8015f8c <__ssputs_r+0x5c>
 8015fca:	6921      	ldr	r1, [r4, #16]
 8015fcc:	4650      	mov	r0, sl
 8015fce:	f7ff ff65 	bl	8015e9c <_free_r>
 8015fd2:	230c      	movs	r3, #12
 8015fd4:	f8ca 3000 	str.w	r3, [sl]
 8015fd8:	89a3      	ldrh	r3, [r4, #12]
 8015fda:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015fde:	81a3      	strh	r3, [r4, #12]
 8015fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8015fe4:	e7e9      	b.n	8015fba <__ssputs_r+0x8a>
	...

08015fe8 <_svfiprintf_r>:
 8015fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015fec:	4698      	mov	r8, r3
 8015fee:	898b      	ldrh	r3, [r1, #12]
 8015ff0:	061b      	lsls	r3, r3, #24
 8015ff2:	b09d      	sub	sp, #116	@ 0x74
 8015ff4:	4607      	mov	r7, r0
 8015ff6:	460d      	mov	r5, r1
 8015ff8:	4614      	mov	r4, r2
 8015ffa:	d510      	bpl.n	801601e <_svfiprintf_r+0x36>
 8015ffc:	690b      	ldr	r3, [r1, #16]
 8015ffe:	b973      	cbnz	r3, 801601e <_svfiprintf_r+0x36>
 8016000:	2140      	movs	r1, #64	@ 0x40
 8016002:	f7ff fe4b 	bl	8015c9c <_malloc_r>
 8016006:	6028      	str	r0, [r5, #0]
 8016008:	6128      	str	r0, [r5, #16]
 801600a:	b930      	cbnz	r0, 801601a <_svfiprintf_r+0x32>
 801600c:	230c      	movs	r3, #12
 801600e:	603b      	str	r3, [r7, #0]
 8016010:	f04f 30ff 	mov.w	r0, #4294967295
 8016014:	b01d      	add	sp, #116	@ 0x74
 8016016:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801601a:	2340      	movs	r3, #64	@ 0x40
 801601c:	616b      	str	r3, [r5, #20]
 801601e:	2300      	movs	r3, #0
 8016020:	9309      	str	r3, [sp, #36]	@ 0x24
 8016022:	2320      	movs	r3, #32
 8016024:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8016028:	f8cd 800c 	str.w	r8, [sp, #12]
 801602c:	2330      	movs	r3, #48	@ 0x30
 801602e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80161cc <_svfiprintf_r+0x1e4>
 8016032:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8016036:	f04f 0901 	mov.w	r9, #1
 801603a:	4623      	mov	r3, r4
 801603c:	469a      	mov	sl, r3
 801603e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016042:	b10a      	cbz	r2, 8016048 <_svfiprintf_r+0x60>
 8016044:	2a25      	cmp	r2, #37	@ 0x25
 8016046:	d1f9      	bne.n	801603c <_svfiprintf_r+0x54>
 8016048:	ebba 0b04 	subs.w	fp, sl, r4
 801604c:	d00b      	beq.n	8016066 <_svfiprintf_r+0x7e>
 801604e:	465b      	mov	r3, fp
 8016050:	4622      	mov	r2, r4
 8016052:	4629      	mov	r1, r5
 8016054:	4638      	mov	r0, r7
 8016056:	f7ff ff6b 	bl	8015f30 <__ssputs_r>
 801605a:	3001      	adds	r0, #1
 801605c:	f000 80a7 	beq.w	80161ae <_svfiprintf_r+0x1c6>
 8016060:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016062:	445a      	add	r2, fp
 8016064:	9209      	str	r2, [sp, #36]	@ 0x24
 8016066:	f89a 3000 	ldrb.w	r3, [sl]
 801606a:	2b00      	cmp	r3, #0
 801606c:	f000 809f 	beq.w	80161ae <_svfiprintf_r+0x1c6>
 8016070:	2300      	movs	r3, #0
 8016072:	f04f 32ff 	mov.w	r2, #4294967295
 8016076:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801607a:	f10a 0a01 	add.w	sl, sl, #1
 801607e:	9304      	str	r3, [sp, #16]
 8016080:	9307      	str	r3, [sp, #28]
 8016082:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8016086:	931a      	str	r3, [sp, #104]	@ 0x68
 8016088:	4654      	mov	r4, sl
 801608a:	2205      	movs	r2, #5
 801608c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016090:	484e      	ldr	r0, [pc, #312]	@ (80161cc <_svfiprintf_r+0x1e4>)
 8016092:	f7ea f92d 	bl	80002f0 <memchr>
 8016096:	9a04      	ldr	r2, [sp, #16]
 8016098:	b9d8      	cbnz	r0, 80160d2 <_svfiprintf_r+0xea>
 801609a:	06d0      	lsls	r0, r2, #27
 801609c:	bf44      	itt	mi
 801609e:	2320      	movmi	r3, #32
 80160a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80160a4:	0711      	lsls	r1, r2, #28
 80160a6:	bf44      	itt	mi
 80160a8:	232b      	movmi	r3, #43	@ 0x2b
 80160aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80160ae:	f89a 3000 	ldrb.w	r3, [sl]
 80160b2:	2b2a      	cmp	r3, #42	@ 0x2a
 80160b4:	d015      	beq.n	80160e2 <_svfiprintf_r+0xfa>
 80160b6:	9a07      	ldr	r2, [sp, #28]
 80160b8:	4654      	mov	r4, sl
 80160ba:	2000      	movs	r0, #0
 80160bc:	f04f 0c0a 	mov.w	ip, #10
 80160c0:	4621      	mov	r1, r4
 80160c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80160c6:	3b30      	subs	r3, #48	@ 0x30
 80160c8:	2b09      	cmp	r3, #9
 80160ca:	d94b      	bls.n	8016164 <_svfiprintf_r+0x17c>
 80160cc:	b1b0      	cbz	r0, 80160fc <_svfiprintf_r+0x114>
 80160ce:	9207      	str	r2, [sp, #28]
 80160d0:	e014      	b.n	80160fc <_svfiprintf_r+0x114>
 80160d2:	eba0 0308 	sub.w	r3, r0, r8
 80160d6:	fa09 f303 	lsl.w	r3, r9, r3
 80160da:	4313      	orrs	r3, r2
 80160dc:	9304      	str	r3, [sp, #16]
 80160de:	46a2      	mov	sl, r4
 80160e0:	e7d2      	b.n	8016088 <_svfiprintf_r+0xa0>
 80160e2:	9b03      	ldr	r3, [sp, #12]
 80160e4:	1d19      	adds	r1, r3, #4
 80160e6:	681b      	ldr	r3, [r3, #0]
 80160e8:	9103      	str	r1, [sp, #12]
 80160ea:	2b00      	cmp	r3, #0
 80160ec:	bfbb      	ittet	lt
 80160ee:	425b      	neglt	r3, r3
 80160f0:	f042 0202 	orrlt.w	r2, r2, #2
 80160f4:	9307      	strge	r3, [sp, #28]
 80160f6:	9307      	strlt	r3, [sp, #28]
 80160f8:	bfb8      	it	lt
 80160fa:	9204      	strlt	r2, [sp, #16]
 80160fc:	7823      	ldrb	r3, [r4, #0]
 80160fe:	2b2e      	cmp	r3, #46	@ 0x2e
 8016100:	d10a      	bne.n	8016118 <_svfiprintf_r+0x130>
 8016102:	7863      	ldrb	r3, [r4, #1]
 8016104:	2b2a      	cmp	r3, #42	@ 0x2a
 8016106:	d132      	bne.n	801616e <_svfiprintf_r+0x186>
 8016108:	9b03      	ldr	r3, [sp, #12]
 801610a:	1d1a      	adds	r2, r3, #4
 801610c:	681b      	ldr	r3, [r3, #0]
 801610e:	9203      	str	r2, [sp, #12]
 8016110:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8016114:	3402      	adds	r4, #2
 8016116:	9305      	str	r3, [sp, #20]
 8016118:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80161dc <_svfiprintf_r+0x1f4>
 801611c:	7821      	ldrb	r1, [r4, #0]
 801611e:	2203      	movs	r2, #3
 8016120:	4650      	mov	r0, sl
 8016122:	f7ea f8e5 	bl	80002f0 <memchr>
 8016126:	b138      	cbz	r0, 8016138 <_svfiprintf_r+0x150>
 8016128:	9b04      	ldr	r3, [sp, #16]
 801612a:	eba0 000a 	sub.w	r0, r0, sl
 801612e:	2240      	movs	r2, #64	@ 0x40
 8016130:	4082      	lsls	r2, r0
 8016132:	4313      	orrs	r3, r2
 8016134:	3401      	adds	r4, #1
 8016136:	9304      	str	r3, [sp, #16]
 8016138:	f814 1b01 	ldrb.w	r1, [r4], #1
 801613c:	4824      	ldr	r0, [pc, #144]	@ (80161d0 <_svfiprintf_r+0x1e8>)
 801613e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8016142:	2206      	movs	r2, #6
 8016144:	f7ea f8d4 	bl	80002f0 <memchr>
 8016148:	2800      	cmp	r0, #0
 801614a:	d036      	beq.n	80161ba <_svfiprintf_r+0x1d2>
 801614c:	4b21      	ldr	r3, [pc, #132]	@ (80161d4 <_svfiprintf_r+0x1ec>)
 801614e:	bb1b      	cbnz	r3, 8016198 <_svfiprintf_r+0x1b0>
 8016150:	9b03      	ldr	r3, [sp, #12]
 8016152:	3307      	adds	r3, #7
 8016154:	f023 0307 	bic.w	r3, r3, #7
 8016158:	3308      	adds	r3, #8
 801615a:	9303      	str	r3, [sp, #12]
 801615c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801615e:	4433      	add	r3, r6
 8016160:	9309      	str	r3, [sp, #36]	@ 0x24
 8016162:	e76a      	b.n	801603a <_svfiprintf_r+0x52>
 8016164:	fb0c 3202 	mla	r2, ip, r2, r3
 8016168:	460c      	mov	r4, r1
 801616a:	2001      	movs	r0, #1
 801616c:	e7a8      	b.n	80160c0 <_svfiprintf_r+0xd8>
 801616e:	2300      	movs	r3, #0
 8016170:	3401      	adds	r4, #1
 8016172:	9305      	str	r3, [sp, #20]
 8016174:	4619      	mov	r1, r3
 8016176:	f04f 0c0a 	mov.w	ip, #10
 801617a:	4620      	mov	r0, r4
 801617c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016180:	3a30      	subs	r2, #48	@ 0x30
 8016182:	2a09      	cmp	r2, #9
 8016184:	d903      	bls.n	801618e <_svfiprintf_r+0x1a6>
 8016186:	2b00      	cmp	r3, #0
 8016188:	d0c6      	beq.n	8016118 <_svfiprintf_r+0x130>
 801618a:	9105      	str	r1, [sp, #20]
 801618c:	e7c4      	b.n	8016118 <_svfiprintf_r+0x130>
 801618e:	fb0c 2101 	mla	r1, ip, r1, r2
 8016192:	4604      	mov	r4, r0
 8016194:	2301      	movs	r3, #1
 8016196:	e7f0      	b.n	801617a <_svfiprintf_r+0x192>
 8016198:	ab03      	add	r3, sp, #12
 801619a:	9300      	str	r3, [sp, #0]
 801619c:	462a      	mov	r2, r5
 801619e:	4b0e      	ldr	r3, [pc, #56]	@ (80161d8 <_svfiprintf_r+0x1f0>)
 80161a0:	a904      	add	r1, sp, #16
 80161a2:	4638      	mov	r0, r7
 80161a4:	f3af 8000 	nop.w
 80161a8:	1c42      	adds	r2, r0, #1
 80161aa:	4606      	mov	r6, r0
 80161ac:	d1d6      	bne.n	801615c <_svfiprintf_r+0x174>
 80161ae:	89ab      	ldrh	r3, [r5, #12]
 80161b0:	065b      	lsls	r3, r3, #25
 80161b2:	f53f af2d 	bmi.w	8016010 <_svfiprintf_r+0x28>
 80161b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80161b8:	e72c      	b.n	8016014 <_svfiprintf_r+0x2c>
 80161ba:	ab03      	add	r3, sp, #12
 80161bc:	9300      	str	r3, [sp, #0]
 80161be:	462a      	mov	r2, r5
 80161c0:	4b05      	ldr	r3, [pc, #20]	@ (80161d8 <_svfiprintf_r+0x1f0>)
 80161c2:	a904      	add	r1, sp, #16
 80161c4:	4638      	mov	r0, r7
 80161c6:	f000 f879 	bl	80162bc <_printf_i>
 80161ca:	e7ed      	b.n	80161a8 <_svfiprintf_r+0x1c0>
 80161cc:	08016a04 	.word	0x08016a04
 80161d0:	08016a0e 	.word	0x08016a0e
 80161d4:	00000000 	.word	0x00000000
 80161d8:	08015f31 	.word	0x08015f31
 80161dc:	08016a0a 	.word	0x08016a0a

080161e0 <_printf_common>:
 80161e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80161e4:	4616      	mov	r6, r2
 80161e6:	4698      	mov	r8, r3
 80161e8:	688a      	ldr	r2, [r1, #8]
 80161ea:	690b      	ldr	r3, [r1, #16]
 80161ec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80161f0:	4293      	cmp	r3, r2
 80161f2:	bfb8      	it	lt
 80161f4:	4613      	movlt	r3, r2
 80161f6:	6033      	str	r3, [r6, #0]
 80161f8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80161fc:	4607      	mov	r7, r0
 80161fe:	460c      	mov	r4, r1
 8016200:	b10a      	cbz	r2, 8016206 <_printf_common+0x26>
 8016202:	3301      	adds	r3, #1
 8016204:	6033      	str	r3, [r6, #0]
 8016206:	6823      	ldr	r3, [r4, #0]
 8016208:	0699      	lsls	r1, r3, #26
 801620a:	bf42      	ittt	mi
 801620c:	6833      	ldrmi	r3, [r6, #0]
 801620e:	3302      	addmi	r3, #2
 8016210:	6033      	strmi	r3, [r6, #0]
 8016212:	6825      	ldr	r5, [r4, #0]
 8016214:	f015 0506 	ands.w	r5, r5, #6
 8016218:	d106      	bne.n	8016228 <_printf_common+0x48>
 801621a:	f104 0a19 	add.w	sl, r4, #25
 801621e:	68e3      	ldr	r3, [r4, #12]
 8016220:	6832      	ldr	r2, [r6, #0]
 8016222:	1a9b      	subs	r3, r3, r2
 8016224:	42ab      	cmp	r3, r5
 8016226:	dc26      	bgt.n	8016276 <_printf_common+0x96>
 8016228:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801622c:	6822      	ldr	r2, [r4, #0]
 801622e:	3b00      	subs	r3, #0
 8016230:	bf18      	it	ne
 8016232:	2301      	movne	r3, #1
 8016234:	0692      	lsls	r2, r2, #26
 8016236:	d42b      	bmi.n	8016290 <_printf_common+0xb0>
 8016238:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801623c:	4641      	mov	r1, r8
 801623e:	4638      	mov	r0, r7
 8016240:	47c8      	blx	r9
 8016242:	3001      	adds	r0, #1
 8016244:	d01e      	beq.n	8016284 <_printf_common+0xa4>
 8016246:	6823      	ldr	r3, [r4, #0]
 8016248:	6922      	ldr	r2, [r4, #16]
 801624a:	f003 0306 	and.w	r3, r3, #6
 801624e:	2b04      	cmp	r3, #4
 8016250:	bf02      	ittt	eq
 8016252:	68e5      	ldreq	r5, [r4, #12]
 8016254:	6833      	ldreq	r3, [r6, #0]
 8016256:	1aed      	subeq	r5, r5, r3
 8016258:	68a3      	ldr	r3, [r4, #8]
 801625a:	bf0c      	ite	eq
 801625c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016260:	2500      	movne	r5, #0
 8016262:	4293      	cmp	r3, r2
 8016264:	bfc4      	itt	gt
 8016266:	1a9b      	subgt	r3, r3, r2
 8016268:	18ed      	addgt	r5, r5, r3
 801626a:	2600      	movs	r6, #0
 801626c:	341a      	adds	r4, #26
 801626e:	42b5      	cmp	r5, r6
 8016270:	d11a      	bne.n	80162a8 <_printf_common+0xc8>
 8016272:	2000      	movs	r0, #0
 8016274:	e008      	b.n	8016288 <_printf_common+0xa8>
 8016276:	2301      	movs	r3, #1
 8016278:	4652      	mov	r2, sl
 801627a:	4641      	mov	r1, r8
 801627c:	4638      	mov	r0, r7
 801627e:	47c8      	blx	r9
 8016280:	3001      	adds	r0, #1
 8016282:	d103      	bne.n	801628c <_printf_common+0xac>
 8016284:	f04f 30ff 	mov.w	r0, #4294967295
 8016288:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801628c:	3501      	adds	r5, #1
 801628e:	e7c6      	b.n	801621e <_printf_common+0x3e>
 8016290:	18e1      	adds	r1, r4, r3
 8016292:	1c5a      	adds	r2, r3, #1
 8016294:	2030      	movs	r0, #48	@ 0x30
 8016296:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801629a:	4422      	add	r2, r4
 801629c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80162a0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80162a4:	3302      	adds	r3, #2
 80162a6:	e7c7      	b.n	8016238 <_printf_common+0x58>
 80162a8:	2301      	movs	r3, #1
 80162aa:	4622      	mov	r2, r4
 80162ac:	4641      	mov	r1, r8
 80162ae:	4638      	mov	r0, r7
 80162b0:	47c8      	blx	r9
 80162b2:	3001      	adds	r0, #1
 80162b4:	d0e6      	beq.n	8016284 <_printf_common+0xa4>
 80162b6:	3601      	adds	r6, #1
 80162b8:	e7d9      	b.n	801626e <_printf_common+0x8e>
	...

080162bc <_printf_i>:
 80162bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80162c0:	7e0f      	ldrb	r7, [r1, #24]
 80162c2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80162c4:	2f78      	cmp	r7, #120	@ 0x78
 80162c6:	4691      	mov	r9, r2
 80162c8:	4680      	mov	r8, r0
 80162ca:	460c      	mov	r4, r1
 80162cc:	469a      	mov	sl, r3
 80162ce:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80162d2:	d807      	bhi.n	80162e4 <_printf_i+0x28>
 80162d4:	2f62      	cmp	r7, #98	@ 0x62
 80162d6:	d80a      	bhi.n	80162ee <_printf_i+0x32>
 80162d8:	2f00      	cmp	r7, #0
 80162da:	f000 80d1 	beq.w	8016480 <_printf_i+0x1c4>
 80162de:	2f58      	cmp	r7, #88	@ 0x58
 80162e0:	f000 80b8 	beq.w	8016454 <_printf_i+0x198>
 80162e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80162e8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80162ec:	e03a      	b.n	8016364 <_printf_i+0xa8>
 80162ee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80162f2:	2b15      	cmp	r3, #21
 80162f4:	d8f6      	bhi.n	80162e4 <_printf_i+0x28>
 80162f6:	a101      	add	r1, pc, #4	@ (adr r1, 80162fc <_printf_i+0x40>)
 80162f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80162fc:	08016355 	.word	0x08016355
 8016300:	08016369 	.word	0x08016369
 8016304:	080162e5 	.word	0x080162e5
 8016308:	080162e5 	.word	0x080162e5
 801630c:	080162e5 	.word	0x080162e5
 8016310:	080162e5 	.word	0x080162e5
 8016314:	08016369 	.word	0x08016369
 8016318:	080162e5 	.word	0x080162e5
 801631c:	080162e5 	.word	0x080162e5
 8016320:	080162e5 	.word	0x080162e5
 8016324:	080162e5 	.word	0x080162e5
 8016328:	08016467 	.word	0x08016467
 801632c:	08016393 	.word	0x08016393
 8016330:	08016421 	.word	0x08016421
 8016334:	080162e5 	.word	0x080162e5
 8016338:	080162e5 	.word	0x080162e5
 801633c:	08016489 	.word	0x08016489
 8016340:	080162e5 	.word	0x080162e5
 8016344:	08016393 	.word	0x08016393
 8016348:	080162e5 	.word	0x080162e5
 801634c:	080162e5 	.word	0x080162e5
 8016350:	08016429 	.word	0x08016429
 8016354:	6833      	ldr	r3, [r6, #0]
 8016356:	1d1a      	adds	r2, r3, #4
 8016358:	681b      	ldr	r3, [r3, #0]
 801635a:	6032      	str	r2, [r6, #0]
 801635c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8016360:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8016364:	2301      	movs	r3, #1
 8016366:	e09c      	b.n	80164a2 <_printf_i+0x1e6>
 8016368:	6833      	ldr	r3, [r6, #0]
 801636a:	6820      	ldr	r0, [r4, #0]
 801636c:	1d19      	adds	r1, r3, #4
 801636e:	6031      	str	r1, [r6, #0]
 8016370:	0606      	lsls	r6, r0, #24
 8016372:	d501      	bpl.n	8016378 <_printf_i+0xbc>
 8016374:	681d      	ldr	r5, [r3, #0]
 8016376:	e003      	b.n	8016380 <_printf_i+0xc4>
 8016378:	0645      	lsls	r5, r0, #25
 801637a:	d5fb      	bpl.n	8016374 <_printf_i+0xb8>
 801637c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8016380:	2d00      	cmp	r5, #0
 8016382:	da03      	bge.n	801638c <_printf_i+0xd0>
 8016384:	232d      	movs	r3, #45	@ 0x2d
 8016386:	426d      	negs	r5, r5
 8016388:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801638c:	4858      	ldr	r0, [pc, #352]	@ (80164f0 <_printf_i+0x234>)
 801638e:	230a      	movs	r3, #10
 8016390:	e011      	b.n	80163b6 <_printf_i+0xfa>
 8016392:	6821      	ldr	r1, [r4, #0]
 8016394:	6833      	ldr	r3, [r6, #0]
 8016396:	0608      	lsls	r0, r1, #24
 8016398:	f853 5b04 	ldr.w	r5, [r3], #4
 801639c:	d402      	bmi.n	80163a4 <_printf_i+0xe8>
 801639e:	0649      	lsls	r1, r1, #25
 80163a0:	bf48      	it	mi
 80163a2:	b2ad      	uxthmi	r5, r5
 80163a4:	2f6f      	cmp	r7, #111	@ 0x6f
 80163a6:	4852      	ldr	r0, [pc, #328]	@ (80164f0 <_printf_i+0x234>)
 80163a8:	6033      	str	r3, [r6, #0]
 80163aa:	bf14      	ite	ne
 80163ac:	230a      	movne	r3, #10
 80163ae:	2308      	moveq	r3, #8
 80163b0:	2100      	movs	r1, #0
 80163b2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80163b6:	6866      	ldr	r6, [r4, #4]
 80163b8:	60a6      	str	r6, [r4, #8]
 80163ba:	2e00      	cmp	r6, #0
 80163bc:	db05      	blt.n	80163ca <_printf_i+0x10e>
 80163be:	6821      	ldr	r1, [r4, #0]
 80163c0:	432e      	orrs	r6, r5
 80163c2:	f021 0104 	bic.w	r1, r1, #4
 80163c6:	6021      	str	r1, [r4, #0]
 80163c8:	d04b      	beq.n	8016462 <_printf_i+0x1a6>
 80163ca:	4616      	mov	r6, r2
 80163cc:	fbb5 f1f3 	udiv	r1, r5, r3
 80163d0:	fb03 5711 	mls	r7, r3, r1, r5
 80163d4:	5dc7      	ldrb	r7, [r0, r7]
 80163d6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80163da:	462f      	mov	r7, r5
 80163dc:	42bb      	cmp	r3, r7
 80163de:	460d      	mov	r5, r1
 80163e0:	d9f4      	bls.n	80163cc <_printf_i+0x110>
 80163e2:	2b08      	cmp	r3, #8
 80163e4:	d10b      	bne.n	80163fe <_printf_i+0x142>
 80163e6:	6823      	ldr	r3, [r4, #0]
 80163e8:	07df      	lsls	r7, r3, #31
 80163ea:	d508      	bpl.n	80163fe <_printf_i+0x142>
 80163ec:	6923      	ldr	r3, [r4, #16]
 80163ee:	6861      	ldr	r1, [r4, #4]
 80163f0:	4299      	cmp	r1, r3
 80163f2:	bfde      	ittt	le
 80163f4:	2330      	movle	r3, #48	@ 0x30
 80163f6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80163fa:	f106 36ff 	addle.w	r6, r6, #4294967295
 80163fe:	1b92      	subs	r2, r2, r6
 8016400:	6122      	str	r2, [r4, #16]
 8016402:	f8cd a000 	str.w	sl, [sp]
 8016406:	464b      	mov	r3, r9
 8016408:	aa03      	add	r2, sp, #12
 801640a:	4621      	mov	r1, r4
 801640c:	4640      	mov	r0, r8
 801640e:	f7ff fee7 	bl	80161e0 <_printf_common>
 8016412:	3001      	adds	r0, #1
 8016414:	d14a      	bne.n	80164ac <_printf_i+0x1f0>
 8016416:	f04f 30ff 	mov.w	r0, #4294967295
 801641a:	b004      	add	sp, #16
 801641c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016420:	6823      	ldr	r3, [r4, #0]
 8016422:	f043 0320 	orr.w	r3, r3, #32
 8016426:	6023      	str	r3, [r4, #0]
 8016428:	4832      	ldr	r0, [pc, #200]	@ (80164f4 <_printf_i+0x238>)
 801642a:	2778      	movs	r7, #120	@ 0x78
 801642c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8016430:	6823      	ldr	r3, [r4, #0]
 8016432:	6831      	ldr	r1, [r6, #0]
 8016434:	061f      	lsls	r7, r3, #24
 8016436:	f851 5b04 	ldr.w	r5, [r1], #4
 801643a:	d402      	bmi.n	8016442 <_printf_i+0x186>
 801643c:	065f      	lsls	r7, r3, #25
 801643e:	bf48      	it	mi
 8016440:	b2ad      	uxthmi	r5, r5
 8016442:	6031      	str	r1, [r6, #0]
 8016444:	07d9      	lsls	r1, r3, #31
 8016446:	bf44      	itt	mi
 8016448:	f043 0320 	orrmi.w	r3, r3, #32
 801644c:	6023      	strmi	r3, [r4, #0]
 801644e:	b11d      	cbz	r5, 8016458 <_printf_i+0x19c>
 8016450:	2310      	movs	r3, #16
 8016452:	e7ad      	b.n	80163b0 <_printf_i+0xf4>
 8016454:	4826      	ldr	r0, [pc, #152]	@ (80164f0 <_printf_i+0x234>)
 8016456:	e7e9      	b.n	801642c <_printf_i+0x170>
 8016458:	6823      	ldr	r3, [r4, #0]
 801645a:	f023 0320 	bic.w	r3, r3, #32
 801645e:	6023      	str	r3, [r4, #0]
 8016460:	e7f6      	b.n	8016450 <_printf_i+0x194>
 8016462:	4616      	mov	r6, r2
 8016464:	e7bd      	b.n	80163e2 <_printf_i+0x126>
 8016466:	6833      	ldr	r3, [r6, #0]
 8016468:	6825      	ldr	r5, [r4, #0]
 801646a:	6961      	ldr	r1, [r4, #20]
 801646c:	1d18      	adds	r0, r3, #4
 801646e:	6030      	str	r0, [r6, #0]
 8016470:	062e      	lsls	r6, r5, #24
 8016472:	681b      	ldr	r3, [r3, #0]
 8016474:	d501      	bpl.n	801647a <_printf_i+0x1be>
 8016476:	6019      	str	r1, [r3, #0]
 8016478:	e002      	b.n	8016480 <_printf_i+0x1c4>
 801647a:	0668      	lsls	r0, r5, #25
 801647c:	d5fb      	bpl.n	8016476 <_printf_i+0x1ba>
 801647e:	8019      	strh	r1, [r3, #0]
 8016480:	2300      	movs	r3, #0
 8016482:	6123      	str	r3, [r4, #16]
 8016484:	4616      	mov	r6, r2
 8016486:	e7bc      	b.n	8016402 <_printf_i+0x146>
 8016488:	6833      	ldr	r3, [r6, #0]
 801648a:	1d1a      	adds	r2, r3, #4
 801648c:	6032      	str	r2, [r6, #0]
 801648e:	681e      	ldr	r6, [r3, #0]
 8016490:	6862      	ldr	r2, [r4, #4]
 8016492:	2100      	movs	r1, #0
 8016494:	4630      	mov	r0, r6
 8016496:	f7e9 ff2b 	bl	80002f0 <memchr>
 801649a:	b108      	cbz	r0, 80164a0 <_printf_i+0x1e4>
 801649c:	1b80      	subs	r0, r0, r6
 801649e:	6060      	str	r0, [r4, #4]
 80164a0:	6863      	ldr	r3, [r4, #4]
 80164a2:	6123      	str	r3, [r4, #16]
 80164a4:	2300      	movs	r3, #0
 80164a6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80164aa:	e7aa      	b.n	8016402 <_printf_i+0x146>
 80164ac:	6923      	ldr	r3, [r4, #16]
 80164ae:	4632      	mov	r2, r6
 80164b0:	4649      	mov	r1, r9
 80164b2:	4640      	mov	r0, r8
 80164b4:	47d0      	blx	sl
 80164b6:	3001      	adds	r0, #1
 80164b8:	d0ad      	beq.n	8016416 <_printf_i+0x15a>
 80164ba:	6823      	ldr	r3, [r4, #0]
 80164bc:	079b      	lsls	r3, r3, #30
 80164be:	d413      	bmi.n	80164e8 <_printf_i+0x22c>
 80164c0:	68e0      	ldr	r0, [r4, #12]
 80164c2:	9b03      	ldr	r3, [sp, #12]
 80164c4:	4298      	cmp	r0, r3
 80164c6:	bfb8      	it	lt
 80164c8:	4618      	movlt	r0, r3
 80164ca:	e7a6      	b.n	801641a <_printf_i+0x15e>
 80164cc:	2301      	movs	r3, #1
 80164ce:	4632      	mov	r2, r6
 80164d0:	4649      	mov	r1, r9
 80164d2:	4640      	mov	r0, r8
 80164d4:	47d0      	blx	sl
 80164d6:	3001      	adds	r0, #1
 80164d8:	d09d      	beq.n	8016416 <_printf_i+0x15a>
 80164da:	3501      	adds	r5, #1
 80164dc:	68e3      	ldr	r3, [r4, #12]
 80164de:	9903      	ldr	r1, [sp, #12]
 80164e0:	1a5b      	subs	r3, r3, r1
 80164e2:	42ab      	cmp	r3, r5
 80164e4:	dcf2      	bgt.n	80164cc <_printf_i+0x210>
 80164e6:	e7eb      	b.n	80164c0 <_printf_i+0x204>
 80164e8:	2500      	movs	r5, #0
 80164ea:	f104 0619 	add.w	r6, r4, #25
 80164ee:	e7f5      	b.n	80164dc <_printf_i+0x220>
 80164f0:	08016a15 	.word	0x08016a15
 80164f4:	08016a26 	.word	0x08016a26

080164f8 <memmove>:
 80164f8:	4288      	cmp	r0, r1
 80164fa:	b510      	push	{r4, lr}
 80164fc:	eb01 0402 	add.w	r4, r1, r2
 8016500:	d902      	bls.n	8016508 <memmove+0x10>
 8016502:	4284      	cmp	r4, r0
 8016504:	4623      	mov	r3, r4
 8016506:	d807      	bhi.n	8016518 <memmove+0x20>
 8016508:	1e43      	subs	r3, r0, #1
 801650a:	42a1      	cmp	r1, r4
 801650c:	d008      	beq.n	8016520 <memmove+0x28>
 801650e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016512:	f803 2f01 	strb.w	r2, [r3, #1]!
 8016516:	e7f8      	b.n	801650a <memmove+0x12>
 8016518:	4402      	add	r2, r0
 801651a:	4601      	mov	r1, r0
 801651c:	428a      	cmp	r2, r1
 801651e:	d100      	bne.n	8016522 <memmove+0x2a>
 8016520:	bd10      	pop	{r4, pc}
 8016522:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8016526:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801652a:	e7f7      	b.n	801651c <memmove+0x24>

0801652c <_realloc_r>:
 801652c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016530:	4607      	mov	r7, r0
 8016532:	4614      	mov	r4, r2
 8016534:	460d      	mov	r5, r1
 8016536:	b921      	cbnz	r1, 8016542 <_realloc_r+0x16>
 8016538:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801653c:	4611      	mov	r1, r2
 801653e:	f7ff bbad 	b.w	8015c9c <_malloc_r>
 8016542:	b92a      	cbnz	r2, 8016550 <_realloc_r+0x24>
 8016544:	f7ff fcaa 	bl	8015e9c <_free_r>
 8016548:	4625      	mov	r5, r4
 801654a:	4628      	mov	r0, r5
 801654c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016550:	f000 f81a 	bl	8016588 <_malloc_usable_size_r>
 8016554:	4284      	cmp	r4, r0
 8016556:	4606      	mov	r6, r0
 8016558:	d802      	bhi.n	8016560 <_realloc_r+0x34>
 801655a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801655e:	d8f4      	bhi.n	801654a <_realloc_r+0x1e>
 8016560:	4621      	mov	r1, r4
 8016562:	4638      	mov	r0, r7
 8016564:	f7ff fb9a 	bl	8015c9c <_malloc_r>
 8016568:	4680      	mov	r8, r0
 801656a:	b908      	cbnz	r0, 8016570 <_realloc_r+0x44>
 801656c:	4645      	mov	r5, r8
 801656e:	e7ec      	b.n	801654a <_realloc_r+0x1e>
 8016570:	42b4      	cmp	r4, r6
 8016572:	4622      	mov	r2, r4
 8016574:	4629      	mov	r1, r5
 8016576:	bf28      	it	cs
 8016578:	4632      	movcs	r2, r6
 801657a:	f7ff fc81 	bl	8015e80 <memcpy>
 801657e:	4629      	mov	r1, r5
 8016580:	4638      	mov	r0, r7
 8016582:	f7ff fc8b 	bl	8015e9c <_free_r>
 8016586:	e7f1      	b.n	801656c <_realloc_r+0x40>

08016588 <_malloc_usable_size_r>:
 8016588:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801658c:	1f18      	subs	r0, r3, #4
 801658e:	2b00      	cmp	r3, #0
 8016590:	bfbc      	itt	lt
 8016592:	580b      	ldrlt	r3, [r1, r0]
 8016594:	18c0      	addlt	r0, r0, r3
 8016596:	4770      	bx	lr

08016598 <_init>:
 8016598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801659a:	bf00      	nop
 801659c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801659e:	bc08      	pop	{r3}
 80165a0:	469e      	mov	lr, r3
 80165a2:	4770      	bx	lr

080165a4 <_fini>:
 80165a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80165a6:	bf00      	nop
 80165a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80165aa:	bc08      	pop	{r3}
 80165ac:	469e      	mov	lr, r3
 80165ae:	4770      	bx	lr
