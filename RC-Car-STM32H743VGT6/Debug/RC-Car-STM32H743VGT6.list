
RC-Car-STM32H743VGT6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001af18  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000914  0801b1b8  0801b1b8  0001c1b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801bacc  0801bacc  0001cacc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801bad4  0801bad4  0001cad4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0801bad8  0801bad8  0001cad8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000002e4  24000000  0801badc  0001d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000277b8  240002e4  0801bdc0  0001d2e4  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24027a9c  0801bdc0  0001da9c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0001d2e4  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002f9af  00000000  00000000  0001d312  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005933  00000000  00000000  0004ccc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000022b8  00000000  00000000  000525f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001b12  00000000  00000000  000548b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003e074  00000000  00000000  000563c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00032171  00000000  00000000  00094436  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00172f23  00000000  00000000  000c65a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  002394ca  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000a440  00000000  00000000  00239510  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000074  00000000  00000000  00243950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240002e4 	.word	0x240002e4
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801b1a0 	.word	0x0801b1a0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240002e8 	.word	0x240002e8
 80002dc:	0801b1a0 	.word	0x0801b1a0

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b988 	b.w	80006b8 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	468e      	mov	lr, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	4688      	mov	r8, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d962      	bls.n	800049c <__udivmoddi4+0xdc>
 80003d6:	fab2 f682 	clz	r6, r2
 80003da:	b14e      	cbz	r6, 80003f0 <__udivmoddi4+0x30>
 80003dc:	f1c6 0320 	rsb	r3, r6, #32
 80003e0:	fa01 f806 	lsl.w	r8, r1, r6
 80003e4:	fa20 f303 	lsr.w	r3, r0, r3
 80003e8:	40b7      	lsls	r7, r6
 80003ea:	ea43 0808 	orr.w	r8, r3, r8
 80003ee:	40b4      	lsls	r4, r6
 80003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f4:	fa1f fc87 	uxth.w	ip, r7
 80003f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003fc:	0c23      	lsrs	r3, r4, #16
 80003fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000402:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000406:	fb01 f20c 	mul.w	r2, r1, ip
 800040a:	429a      	cmp	r2, r3
 800040c:	d909      	bls.n	8000422 <__udivmoddi4+0x62>
 800040e:	18fb      	adds	r3, r7, r3
 8000410:	f101 30ff 	add.w	r0, r1, #4294967295
 8000414:	f080 80ea 	bcs.w	80005ec <__udivmoddi4+0x22c>
 8000418:	429a      	cmp	r2, r3
 800041a:	f240 80e7 	bls.w	80005ec <__udivmoddi4+0x22c>
 800041e:	3902      	subs	r1, #2
 8000420:	443b      	add	r3, r7
 8000422:	1a9a      	subs	r2, r3, r2
 8000424:	b2a3      	uxth	r3, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000432:	fb00 fc0c 	mul.w	ip, r0, ip
 8000436:	459c      	cmp	ip, r3
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x8e>
 800043a:	18fb      	adds	r3, r7, r3
 800043c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000440:	f080 80d6 	bcs.w	80005f0 <__udivmoddi4+0x230>
 8000444:	459c      	cmp	ip, r3
 8000446:	f240 80d3 	bls.w	80005f0 <__udivmoddi4+0x230>
 800044a:	443b      	add	r3, r7
 800044c:	3802      	subs	r0, #2
 800044e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000452:	eba3 030c 	sub.w	r3, r3, ip
 8000456:	2100      	movs	r1, #0
 8000458:	b11d      	cbz	r5, 8000462 <__udivmoddi4+0xa2>
 800045a:	40f3      	lsrs	r3, r6
 800045c:	2200      	movs	r2, #0
 800045e:	e9c5 3200 	strd	r3, r2, [r5]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d905      	bls.n	8000476 <__udivmoddi4+0xb6>
 800046a:	b10d      	cbz	r5, 8000470 <__udivmoddi4+0xb0>
 800046c:	e9c5 0100 	strd	r0, r1, [r5]
 8000470:	2100      	movs	r1, #0
 8000472:	4608      	mov	r0, r1
 8000474:	e7f5      	b.n	8000462 <__udivmoddi4+0xa2>
 8000476:	fab3 f183 	clz	r1, r3
 800047a:	2900      	cmp	r1, #0
 800047c:	d146      	bne.n	800050c <__udivmoddi4+0x14c>
 800047e:	4573      	cmp	r3, lr
 8000480:	d302      	bcc.n	8000488 <__udivmoddi4+0xc8>
 8000482:	4282      	cmp	r2, r0
 8000484:	f200 8105 	bhi.w	8000692 <__udivmoddi4+0x2d2>
 8000488:	1a84      	subs	r4, r0, r2
 800048a:	eb6e 0203 	sbc.w	r2, lr, r3
 800048e:	2001      	movs	r0, #1
 8000490:	4690      	mov	r8, r2
 8000492:	2d00      	cmp	r5, #0
 8000494:	d0e5      	beq.n	8000462 <__udivmoddi4+0xa2>
 8000496:	e9c5 4800 	strd	r4, r8, [r5]
 800049a:	e7e2      	b.n	8000462 <__udivmoddi4+0xa2>
 800049c:	2a00      	cmp	r2, #0
 800049e:	f000 8090 	beq.w	80005c2 <__udivmoddi4+0x202>
 80004a2:	fab2 f682 	clz	r6, r2
 80004a6:	2e00      	cmp	r6, #0
 80004a8:	f040 80a4 	bne.w	80005f4 <__udivmoddi4+0x234>
 80004ac:	1a8a      	subs	r2, r1, r2
 80004ae:	0c03      	lsrs	r3, r0, #16
 80004b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b4:	b280      	uxth	r0, r0
 80004b6:	b2bc      	uxth	r4, r7
 80004b8:	2101      	movs	r1, #1
 80004ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80004be:	fb0e 221c 	mls	r2, lr, ip, r2
 80004c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004c6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ca:	429a      	cmp	r2, r3
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x11e>
 80004ce:	18fb      	adds	r3, r7, r3
 80004d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004d4:	d202      	bcs.n	80004dc <__udivmoddi4+0x11c>
 80004d6:	429a      	cmp	r2, r3
 80004d8:	f200 80e0 	bhi.w	800069c <__udivmoddi4+0x2dc>
 80004dc:	46c4      	mov	ip, r8
 80004de:	1a9b      	subs	r3, r3, r2
 80004e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004ec:	fb02 f404 	mul.w	r4, r2, r4
 80004f0:	429c      	cmp	r4, r3
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x144>
 80004f4:	18fb      	adds	r3, r7, r3
 80004f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x142>
 80004fc:	429c      	cmp	r4, r3
 80004fe:	f200 80ca 	bhi.w	8000696 <__udivmoddi4+0x2d6>
 8000502:	4602      	mov	r2, r0
 8000504:	1b1b      	subs	r3, r3, r4
 8000506:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800050a:	e7a5      	b.n	8000458 <__udivmoddi4+0x98>
 800050c:	f1c1 0620 	rsb	r6, r1, #32
 8000510:	408b      	lsls	r3, r1
 8000512:	fa22 f706 	lsr.w	r7, r2, r6
 8000516:	431f      	orrs	r7, r3
 8000518:	fa0e f401 	lsl.w	r4, lr, r1
 800051c:	fa20 f306 	lsr.w	r3, r0, r6
 8000520:	fa2e fe06 	lsr.w	lr, lr, r6
 8000524:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000528:	4323      	orrs	r3, r4
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	fa1f fc87 	uxth.w	ip, r7
 8000532:	fbbe f0f9 	udiv	r0, lr, r9
 8000536:	0c1c      	lsrs	r4, r3, #16
 8000538:	fb09 ee10 	mls	lr, r9, r0, lr
 800053c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000540:	fb00 fe0c 	mul.w	lr, r0, ip
 8000544:	45a6      	cmp	lr, r4
 8000546:	fa02 f201 	lsl.w	r2, r2, r1
 800054a:	d909      	bls.n	8000560 <__udivmoddi4+0x1a0>
 800054c:	193c      	adds	r4, r7, r4
 800054e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000552:	f080 809c 	bcs.w	800068e <__udivmoddi4+0x2ce>
 8000556:	45a6      	cmp	lr, r4
 8000558:	f240 8099 	bls.w	800068e <__udivmoddi4+0x2ce>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	eba4 040e 	sub.w	r4, r4, lr
 8000564:	fa1f fe83 	uxth.w	lr, r3
 8000568:	fbb4 f3f9 	udiv	r3, r4, r9
 800056c:	fb09 4413 	mls	r4, r9, r3, r4
 8000570:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000574:	fb03 fc0c 	mul.w	ip, r3, ip
 8000578:	45a4      	cmp	ip, r4
 800057a:	d908      	bls.n	800058e <__udivmoddi4+0x1ce>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000582:	f080 8082 	bcs.w	800068a <__udivmoddi4+0x2ca>
 8000586:	45a4      	cmp	ip, r4
 8000588:	d97f      	bls.n	800068a <__udivmoddi4+0x2ca>
 800058a:	3b02      	subs	r3, #2
 800058c:	443c      	add	r4, r7
 800058e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000592:	eba4 040c 	sub.w	r4, r4, ip
 8000596:	fba0 ec02 	umull	lr, ip, r0, r2
 800059a:	4564      	cmp	r4, ip
 800059c:	4673      	mov	r3, lr
 800059e:	46e1      	mov	r9, ip
 80005a0:	d362      	bcc.n	8000668 <__udivmoddi4+0x2a8>
 80005a2:	d05f      	beq.n	8000664 <__udivmoddi4+0x2a4>
 80005a4:	b15d      	cbz	r5, 80005be <__udivmoddi4+0x1fe>
 80005a6:	ebb8 0203 	subs.w	r2, r8, r3
 80005aa:	eb64 0409 	sbc.w	r4, r4, r9
 80005ae:	fa04 f606 	lsl.w	r6, r4, r6
 80005b2:	fa22 f301 	lsr.w	r3, r2, r1
 80005b6:	431e      	orrs	r6, r3
 80005b8:	40cc      	lsrs	r4, r1
 80005ba:	e9c5 6400 	strd	r6, r4, [r5]
 80005be:	2100      	movs	r1, #0
 80005c0:	e74f      	b.n	8000462 <__udivmoddi4+0xa2>
 80005c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005c6:	0c01      	lsrs	r1, r0, #16
 80005c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005cc:	b280      	uxth	r0, r0
 80005ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005d2:	463b      	mov	r3, r7
 80005d4:	4638      	mov	r0, r7
 80005d6:	463c      	mov	r4, r7
 80005d8:	46b8      	mov	r8, r7
 80005da:	46be      	mov	lr, r7
 80005dc:	2620      	movs	r6, #32
 80005de:	fbb1 f1f7 	udiv	r1, r1, r7
 80005e2:	eba2 0208 	sub.w	r2, r2, r8
 80005e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005ea:	e766      	b.n	80004ba <__udivmoddi4+0xfa>
 80005ec:	4601      	mov	r1, r0
 80005ee:	e718      	b.n	8000422 <__udivmoddi4+0x62>
 80005f0:	4610      	mov	r0, r2
 80005f2:	e72c      	b.n	800044e <__udivmoddi4+0x8e>
 80005f4:	f1c6 0220 	rsb	r2, r6, #32
 80005f8:	fa2e f302 	lsr.w	r3, lr, r2
 80005fc:	40b7      	lsls	r7, r6
 80005fe:	40b1      	lsls	r1, r6
 8000600:	fa20 f202 	lsr.w	r2, r0, r2
 8000604:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000608:	430a      	orrs	r2, r1
 800060a:	fbb3 f8fe 	udiv	r8, r3, lr
 800060e:	b2bc      	uxth	r4, r7
 8000610:	fb0e 3318 	mls	r3, lr, r8, r3
 8000614:	0c11      	lsrs	r1, r2, #16
 8000616:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800061a:	fb08 f904 	mul.w	r9, r8, r4
 800061e:	40b0      	lsls	r0, r6
 8000620:	4589      	cmp	r9, r1
 8000622:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000626:	b280      	uxth	r0, r0
 8000628:	d93e      	bls.n	80006a8 <__udivmoddi4+0x2e8>
 800062a:	1879      	adds	r1, r7, r1
 800062c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000630:	d201      	bcs.n	8000636 <__udivmoddi4+0x276>
 8000632:	4589      	cmp	r9, r1
 8000634:	d81f      	bhi.n	8000676 <__udivmoddi4+0x2b6>
 8000636:	eba1 0109 	sub.w	r1, r1, r9
 800063a:	fbb1 f9fe 	udiv	r9, r1, lr
 800063e:	fb09 f804 	mul.w	r8, r9, r4
 8000642:	fb0e 1119 	mls	r1, lr, r9, r1
 8000646:	b292      	uxth	r2, r2
 8000648:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800064c:	4542      	cmp	r2, r8
 800064e:	d229      	bcs.n	80006a4 <__udivmoddi4+0x2e4>
 8000650:	18ba      	adds	r2, r7, r2
 8000652:	f109 31ff 	add.w	r1, r9, #4294967295
 8000656:	d2c4      	bcs.n	80005e2 <__udivmoddi4+0x222>
 8000658:	4542      	cmp	r2, r8
 800065a:	d2c2      	bcs.n	80005e2 <__udivmoddi4+0x222>
 800065c:	f1a9 0102 	sub.w	r1, r9, #2
 8000660:	443a      	add	r2, r7
 8000662:	e7be      	b.n	80005e2 <__udivmoddi4+0x222>
 8000664:	45f0      	cmp	r8, lr
 8000666:	d29d      	bcs.n	80005a4 <__udivmoddi4+0x1e4>
 8000668:	ebbe 0302 	subs.w	r3, lr, r2
 800066c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000670:	3801      	subs	r0, #1
 8000672:	46e1      	mov	r9, ip
 8000674:	e796      	b.n	80005a4 <__udivmoddi4+0x1e4>
 8000676:	eba7 0909 	sub.w	r9, r7, r9
 800067a:	4449      	add	r1, r9
 800067c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000680:	fbb1 f9fe 	udiv	r9, r1, lr
 8000684:	fb09 f804 	mul.w	r8, r9, r4
 8000688:	e7db      	b.n	8000642 <__udivmoddi4+0x282>
 800068a:	4673      	mov	r3, lr
 800068c:	e77f      	b.n	800058e <__udivmoddi4+0x1ce>
 800068e:	4650      	mov	r0, sl
 8000690:	e766      	b.n	8000560 <__udivmoddi4+0x1a0>
 8000692:	4608      	mov	r0, r1
 8000694:	e6fd      	b.n	8000492 <__udivmoddi4+0xd2>
 8000696:	443b      	add	r3, r7
 8000698:	3a02      	subs	r2, #2
 800069a:	e733      	b.n	8000504 <__udivmoddi4+0x144>
 800069c:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a0:	443b      	add	r3, r7
 80006a2:	e71c      	b.n	80004de <__udivmoddi4+0x11e>
 80006a4:	4649      	mov	r1, r9
 80006a6:	e79c      	b.n	80005e2 <__udivmoddi4+0x222>
 80006a8:	eba1 0109 	sub.w	r1, r1, r9
 80006ac:	46c4      	mov	ip, r8
 80006ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b2:	fb09 f804 	mul.w	r8, r9, r4
 80006b6:	e7c4      	b.n	8000642 <__udivmoddi4+0x282>

080006b8 <__aeabi_idiv0>:
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop

080006bc <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80006c0:	f3bf 8f4f 	dsb	sy
}
 80006c4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80006c6:	4b06      	ldr	r3, [pc, #24]	@ (80006e0 <__NVIC_SystemReset+0x24>)
 80006c8:	68db      	ldr	r3, [r3, #12]
 80006ca:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80006ce:	4904      	ldr	r1, [pc, #16]	@ (80006e0 <__NVIC_SystemReset+0x24>)
 80006d0:	4b04      	ldr	r3, [pc, #16]	@ (80006e4 <__NVIC_SystemReset+0x28>)
 80006d2:	4313      	orrs	r3, r2
 80006d4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80006d6:	f3bf 8f4f 	dsb	sy
}
 80006da:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80006dc:	bf00      	nop
 80006de:	e7fd      	b.n	80006dc <__NVIC_SystemReset+0x20>
 80006e0:	e000ed00 	.word	0xe000ed00
 80006e4:	05fa0004 	.word	0x05fa0004

080006e8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */

	/* USER CODE END 1 */

	/* MPU Configuration--------------------------------------------------------*/
	MPU_Config();
 80006ee:	f001 fdcd 	bl	800228c <MPU_Config>

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80006f2:	f002 fe69 	bl	80033c8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80006f6:	f000 f93d 	bl	8000974 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80006fa:	f000 fda5 	bl	8001248 <MX_GPIO_Init>
	MX_DMA_Init();
 80006fe:	f000 fd4b 	bl	8001198 <MX_DMA_Init>
	MX_MDMA_Init();
 8000702:	f000 fd81 	bl	8001208 <MX_MDMA_Init>
	MX_USART1_UART_Init();
 8000706:	f000 fcf5 	bl	80010f4 <MX_USART1_UART_Init>
	MX_USB_DEVICE_Init();
 800070a:	f017 f9e7 	bl	8017adc <MX_USB_DEVICE_Init>
	MX_DCMI_Init();
 800070e:	f000 f9ab 	bl	8000a68 <MX_DCMI_Init>
	MX_I2C2_Init();
 8000712:	f000 f9df 	bl	8000ad4 <MX_I2C2_Init>
	MX_TIM14_Init();
 8000716:	f000 fca1 	bl	800105c <MX_TIM14_Init>
	MX_TIM2_Init();
 800071a:	f000 fb13 	bl	8000d44 <MX_TIM2_Init>
	MX_TIM4_Init();
 800071e:	f000 fbe7 	bl	8000ef0 <MX_TIM4_Init>
	MX_TIM1_Init();
 8000722:	f000 fa81 	bl	8000c28 <MX_TIM1_Init>
	MX_TIM3_Init();
 8000726:	f000 fb7d 	bl	8000e24 <MX_TIM3_Init>
	MX_JPEG_Init();
 800072a:	f000 fa13 	bl	8000b54 <MX_JPEG_Init>
	MX_SPI2_Init();
 800072e:	f000 fa25 	bl	8000b7c <MX_SPI2_Init>
	MX_TIM5_Init();
 8000732:	f000 fc43 	bl	8000fbc <MX_TIM5_Init>
//			  //sprintf(usb_msg, "err\r\n");
//			  //HAL_UART_Transmit(&huart1, usb_msg, strlen(usb_msg), 1000);
//		  }
//	}
	// ------------------------------------------------------------ SETUP INA229 -- //
	hina229.spi_handle = &hspi2;
 8000736:	4b78      	ldr	r3, [pc, #480]	@ (8000918 <main+0x230>)
 8000738:	4a78      	ldr	r2, [pc, #480]	@ (800091c <main+0x234>)
 800073a:	601a      	str	r2, [r3, #0]
	hina229.cs_gpio_handle = INA_CS_GPIO_Port;
 800073c:	4b76      	ldr	r3, [pc, #472]	@ (8000918 <main+0x230>)
 800073e:	4a78      	ldr	r2, [pc, #480]	@ (8000920 <main+0x238>)
 8000740:	605a      	str	r2, [r3, #4]
	hina229.cs_gpio_pin = INA_CS_Pin;
 8000742:	4b75      	ldr	r3, [pc, #468]	@ (8000918 <main+0x230>)
 8000744:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000748:	811a      	strh	r2, [r3, #8]

	if (INA229_Init(&hina229)) {
 800074a:	4873      	ldr	r0, [pc, #460]	@ (8000918 <main+0x230>)
 800074c:	f002 fda9 	bl	80032a2 <INA229_Init>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d00e      	beq.n	8000774 <main+0x8c>
		sprintf(ssd_msg, " Failed to Init INA229");
 8000756:	4973      	ldr	r1, [pc, #460]	@ (8000924 <main+0x23c>)
 8000758:	4873      	ldr	r0, [pc, #460]	@ (8000928 <main+0x240>)
 800075a:	f018 fd15 	bl	8019188 <siprintf>
		WriteDebug(ssd_msg, strlen(ssd_msg));
 800075e:	4872      	ldr	r0, [pc, #456]	@ (8000928 <main+0x240>)
 8000760:	f7ff fe0e 	bl	8000380 <strlen>
 8000764:	4603      	mov	r3, r0
 8000766:	b2db      	uxtb	r3, r3
 8000768:	4619      	mov	r1, r3
 800076a:	486f      	ldr	r0, [pc, #444]	@ (8000928 <main+0x240>)
 800076c:	f001 fbbd 	bl	8001eea <WriteDebug>
		// This state is non-functional, reset
		NVIC_SystemReset();
 8000770:	f7ff ffa4 	bl	80006bc <__NVIC_SystemReset>
	}

	// ------------------------------------------------------------ SETUP CAMERA INTERFACE -- //
	HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);// XCLK - Start the camera's core clock
 8000774:	2100      	movs	r1, #0
 8000776:	486d      	ldr	r0, [pc, #436]	@ (800092c <main+0x244>)
 8000778:	f010 fad0 	bl	8010d1c <HAL_TIM_PWM_Start>
	// X 		  COM15 [6] = 1 (Data range [00-FF])
	// X 		  COM15 [5] = 0 (RGB 565)
	// X 		  COM15 [4] = 1 (RGB 565)
	uint8_t cam_regCache;

	cam_regCache = 0b00001000;
 800077c:	2308      	movs	r3, #8
 800077e:	71fb      	strb	r3, [r7, #7]
	while (CAM_SetRegister(0x0C, cam_regCache, 0)) {
 8000780:	bf00      	nop
 8000782:	79fb      	ldrb	r3, [r7, #7]
 8000784:	2200      	movs	r2, #0
 8000786:	4619      	mov	r1, r3
 8000788:	200c      	movs	r0, #12
 800078a:	f001 fc37 	bl	8001ffc <CAM_SetRegister>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d1f6      	bne.n	8000782 <main+0x9a>
	}

	cam_regCache = 0b00010000;
 8000794:	2310      	movs	r3, #16
 8000796:	71fb      	strb	r3, [r7, #7]
	while (CAM_SetRegister(0x12, cam_regCache, 0)) {
 8000798:	bf00      	nop
 800079a:	79fb      	ldrb	r3, [r7, #7]
 800079c:	2200      	movs	r2, #0
 800079e:	4619      	mov	r1, r3
 80007a0:	2012      	movs	r0, #18
 80007a2:	f001 fc2b 	bl	8001ffc <CAM_SetRegister>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d1f6      	bne.n	800079a <main+0xb2>
	}

	cam_regCache = 0b10000110;
 80007ac:	2386      	movs	r3, #134	@ 0x86
 80007ae:	71fb      	strb	r3, [r7, #7]
	while (CAM_SetRegister(0x32, cam_regCache, 0)) {
 80007b0:	bf00      	nop
 80007b2:	79fb      	ldrb	r3, [r7, #7]
 80007b4:	2200      	movs	r2, #0
 80007b6:	4619      	mov	r1, r3
 80007b8:	2032      	movs	r0, #50	@ 0x32
 80007ba:	f001 fc1f 	bl	8001ffc <CAM_SetRegister>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d1f6      	bne.n	80007b2 <main+0xca>
	//while (CAM_SetRegister(0x40, cam_regCache, 0)) {}

	// ------------------------------------------------------------ SETUP JPEG ENCODING -- //
	// Set the CONFIG
	JPEG_ConfTypeDef *jpeg_config;
	jpeg_config->ColorSpace = JPEG_GRAYSCALE_COLORSPACE;
 80007c4:	683b      	ldr	r3, [r7, #0]
 80007c6:	2200      	movs	r2, #0
 80007c8:	601a      	str	r2, [r3, #0]
	//jpeg_config->ColorSpace = JPEG_YCBCR_COLORSPACE;
	//jpeg_config->ChromaSubsampling = JPEG_422_SUBSAMPLING;
	jpeg_config->ImageWidth = jpeg_mcu_widths[jpeg_quality] * 8;
 80007ca:	4b59      	ldr	r3, [pc, #356]	@ (8000930 <main+0x248>)
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	461a      	mov	r2, r3
 80007d0:	4b58      	ldr	r3, [pc, #352]	@ (8000934 <main+0x24c>)
 80007d2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80007d6:	00db      	lsls	r3, r3, #3
 80007d8:	461a      	mov	r2, r3
 80007da:	683b      	ldr	r3, [r7, #0]
 80007dc:	60da      	str	r2, [r3, #12]
	jpeg_config->ImageHeight = jpeg_mcu_heights[jpeg_quality] * 8;
 80007de:	4b54      	ldr	r3, [pc, #336]	@ (8000930 <main+0x248>)
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	461a      	mov	r2, r3
 80007e4:	4b54      	ldr	r3, [pc, #336]	@ (8000938 <main+0x250>)
 80007e6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80007ea:	00db      	lsls	r3, r3, #3
 80007ec:	461a      	mov	r2, r3
 80007ee:	683b      	ldr	r3, [r7, #0]
 80007f0:	609a      	str	r2, [r3, #8]
	jpeg_config->ImageQuality = JPEG_QUALITY;
 80007f2:	683b      	ldr	r3, [r7, #0]
 80007f4:	2214      	movs	r2, #20
 80007f6:	611a      	str	r2, [r3, #16]
	HAL_JPEG_ConfigEncoding(&hjpeg, jpeg_config);
 80007f8:	6839      	ldr	r1, [r7, #0]
 80007fa:	4850      	ldr	r0, [pc, #320]	@ (800093c <main+0x254>)
 80007fc:	f008 fd2c 	bl	8009258 <HAL_JPEG_ConfigEncoding>

	// ------------------------------------------------------------ SETUP WATCHDOG TIMER-- //
	if (HAL_TIM_Base_Start_IT(&htim5) != HAL_OK) {
 8000800:	484f      	ldr	r0, [pc, #316]	@ (8000940 <main+0x258>)
 8000802:	f010 f9bb 	bl	8010b7c <HAL_TIM_Base_Start_IT>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d00e      	beq.n	800082a <main+0x142>
		sprintf(ssd_msg, " Failed to Start Watchdog");
 800080c:	494d      	ldr	r1, [pc, #308]	@ (8000944 <main+0x25c>)
 800080e:	4846      	ldr	r0, [pc, #280]	@ (8000928 <main+0x240>)
 8000810:	f018 fcba 	bl	8019188 <siprintf>
		WriteDebug(ssd_msg, strlen(ssd_msg));
 8000814:	4844      	ldr	r0, [pc, #272]	@ (8000928 <main+0x240>)
 8000816:	f7ff fdb3 	bl	8000380 <strlen>
 800081a:	4603      	mov	r3, r0
 800081c:	b2db      	uxtb	r3, r3
 800081e:	4619      	mov	r1, r3
 8000820:	4841      	ldr	r0, [pc, #260]	@ (8000928 <main+0x240>)
 8000822:	f001 fb62 	bl	8001eea <WriteDebug>
		// This state is non-functional, reset
		NVIC_SystemReset();
 8000826:	f7ff ff49 	bl	80006bc <__NVIC_SystemReset>
		while (1) {
		}
	}

	// ------------------------------------------------------------ SETUP XBEE -- //
	hxbee.uart_handle = &huart1;
 800082a:	4b47      	ldr	r3, [pc, #284]	@ (8000948 <main+0x260>)
 800082c:	4a47      	ldr	r2, [pc, #284]	@ (800094c <main+0x264>)
 800082e:	601a      	str	r2, [r3, #0]
	hxbee.pktRx_max = 2;
 8000830:	4b45      	ldr	r3, [pc, #276]	@ (8000948 <main+0x260>)
 8000832:	2202      	movs	r2, #2
 8000834:	761a      	strb	r2, [r3, #24]
	hxbee.pktTx_max = 2;
 8000836:	4b44      	ldr	r3, [pc, #272]	@ (8000948 <main+0x260>)
 8000838:	2202      	movs	r2, #2
 800083a:	f883 2020 	strb.w	r2, [r3, #32]

	if (XBEE_Init(&hxbee)) {
 800083e:	4842      	ldr	r0, [pc, #264]	@ (8000948 <main+0x260>)
 8000840:	f014 ff69 	bl	8015716 <XBEE_Init>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d00e      	beq.n	8000868 <main+0x180>
		sprintf(ssd_msg, " Failed to Init XBEE");
 800084a:	4941      	ldr	r1, [pc, #260]	@ (8000950 <main+0x268>)
 800084c:	4836      	ldr	r0, [pc, #216]	@ (8000928 <main+0x240>)
 800084e:	f018 fc9b 	bl	8019188 <siprintf>
		WriteDebug(ssd_msg, strlen(ssd_msg));
 8000852:	4835      	ldr	r0, [pc, #212]	@ (8000928 <main+0x240>)
 8000854:	f7ff fd94 	bl	8000380 <strlen>
 8000858:	4603      	mov	r3, r0
 800085a:	b2db      	uxtb	r3, r3
 800085c:	4619      	mov	r1, r3
 800085e:	4832      	ldr	r0, [pc, #200]	@ (8000928 <main+0x240>)
 8000860:	f001 fb43 	bl	8001eea <WriteDebug>
		// This state is non-functional, reset
		NVIC_SystemReset();
 8000864:	f7ff ff2a 	bl	80006bc <__NVIC_SystemReset>
	}

	// SETUP MOTOR
	TIM2->CCR1 = 0;
 8000868:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800086c:	2200      	movs	r2, #0
 800086e:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM2->CCR2 = 0;
 8000870:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000874:	2200      	movs	r2, #0
 8000876:	639a      	str	r2, [r3, #56]	@ 0x38

	TIM4->CCR4 = 0;
 8000878:	4b36      	ldr	r3, [pc, #216]	@ (8000954 <main+0x26c>)
 800087a:	2200      	movs	r2, #0
 800087c:	641a      	str	r2, [r3, #64]	@ 0x40
	TIM4->CCR3 = 0;
 800087e:	4b35      	ldr	r3, [pc, #212]	@ (8000954 <main+0x26c>)
 8000880:	2200      	movs	r2, #0
 8000882:	63da      	str	r2, [r3, #60]	@ 0x3c
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); // LEFT_PWM_1
 8000884:	2100      	movs	r1, #0
 8000886:	4834      	ldr	r0, [pc, #208]	@ (8000958 <main+0x270>)
 8000888:	f010 fa48 	bl	8010d1c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2); // RIGHT_PWM_1
 800088c:	2104      	movs	r1, #4
 800088e:	4832      	ldr	r0, [pc, #200]	@ (8000958 <main+0x270>)
 8000890:	f010 fa44 	bl	8010d1c <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4); // LEFT_PWM_2
 8000894:	210c      	movs	r1, #12
 8000896:	4831      	ldr	r0, [pc, #196]	@ (800095c <main+0x274>)
 8000898:	f010 fa40 	bl	8010d1c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3); // RIGHT_PWM_2
 800089c:	2108      	movs	r1, #8
 800089e:	482f      	ldr	r0, [pc, #188]	@ (800095c <main+0x274>)
 80008a0:	f010 fa3c 	bl	8010d1c <HAL_TIM_PWM_Start>

	// Setup lights
	TIM1->CCR4 = 1000; // 0 - 2000
 80008a4:	4b2e      	ldr	r3, [pc, #184]	@ (8000960 <main+0x278>)
 80008a6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80008aa:	641a      	str	r2, [r3, #64]	@ 0x40
	TIM3->CCR4 = 1000;
 80008ac:	4b2d      	ldr	r3, [pc, #180]	@ (8000964 <main+0x27c>)
 80008ae:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80008b2:	641a      	str	r2, [r3, #64]	@ 0x40
	TIM3->CCR3 = 1000;
 80008b4:	4b2b      	ldr	r3, [pc, #172]	@ (8000964 <main+0x27c>)
 80008b6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80008ba:	63da      	str	r2, [r3, #60]	@ 0x3c
	TIM2->CCR4 = 1000;
 80008bc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80008c0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80008c4:	641a      	str	r2, [r3, #64]	@ 0x40
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4); // LIGHTS_PWM_1
 80008c6:	210c      	movs	r1, #12
 80008c8:	4827      	ldr	r0, [pc, #156]	@ (8000968 <main+0x280>)
 80008ca:	f010 fa27 	bl	8010d1c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4); // LIGHTS_PWM_2
 80008ce:	210c      	movs	r1, #12
 80008d0:	4826      	ldr	r0, [pc, #152]	@ (800096c <main+0x284>)
 80008d2:	f010 fa23 	bl	8010d1c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3); // LIGHTS_PWM_3
 80008d6:	2108      	movs	r1, #8
 80008d8:	4824      	ldr	r0, [pc, #144]	@ (800096c <main+0x284>)
 80008da:	f010 fa1f 	bl	8010d1c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3); // LIGHTS_PWM_4
 80008de:	2108      	movs	r1, #8
 80008e0:	481d      	ldr	r0, [pc, #116]	@ (8000958 <main+0x270>)
 80008e2:	f010 fa1b 	bl	8010d1c <HAL_TIM_PWM_Start>

	// Delay for goofiness
	HAL_Delay(1000);
 80008e6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80008ea:	f002 fdff 	bl	80034ec <HAL_Delay>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET); // Motor_en
 80008ee:	2200      	movs	r2, #0
 80008f0:	2108      	movs	r1, #8
 80008f2:	481f      	ldr	r0, [pc, #124]	@ (8000970 <main+0x288>)
 80008f4:	f006 ff48 	bl	8007788 <HAL_GPIO_WritePin>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		SCH_XBeeRX();	// Handle radio recieve
 80008f8:	f000 fd66 	bl	80013c8 <SCH_XBeeRX>
		SCH_CTRL();		// Handle control signals
 80008fc:	f000 ff0c 	bl	8001718 <SCH_CTRL>
		SCH_PowerMon();	// Power Monitoring
 8000900:	f001 f88a 	bl	8001a18 <SCH_PowerMon>
		SCH_Camera();	// Take a picture if camera idle
 8000904:	f001 f8d8 	bl	8001ab8 <SCH_Camera>
		SCH_JPEG();		// Convert JPEG if camera ready to present
 8000908:	f001 f916 	bl	8001b38 <SCH_JPEG>
		SCH_XBeeTX();	// Transmit JPEG if JPEG ready
 800090c:	f000 fe6a 	bl	80015e4 <SCH_XBeeTX>

		SCH_DEBUG();
 8000910:	f001 f952 	bl	8001bb8 <SCH_DEBUG>
		SCH_XBeeRX();	// Handle radio recieve
 8000914:	bf00      	nop
 8000916:	e7ef      	b.n	80008f8 <main+0x210>
 8000918:	24000944 	.word	0x24000944
 800091c:	2400054c 	.word	0x2400054c
 8000920:	58020800 	.word	0x58020800
 8000924:	0801b1b8 	.word	0x0801b1b8
 8000928:	240008dc 	.word	0x240008dc
 800092c:	24000750 	.word	0x24000750
 8000930:	24025d34 	.word	0x24025d34
 8000934:	24000004 	.word	0x24000004
 8000938:	2400000c 	.word	0x2400000c
 800093c:	2400041c 	.word	0x2400041c
 8000940:	24000704 	.word	0x24000704
 8000944:	0801b1d0 	.word	0x0801b1d0
 8000948:	24025d38 	.word	0x24025d38
 800094c:	2400079c 	.word	0x2400079c
 8000950:	0801b1ec 	.word	0x0801b1ec
 8000954:	40000800 	.word	0x40000800
 8000958:	24000620 	.word	0x24000620
 800095c:	240006b8 	.word	0x240006b8
 8000960:	40010000 	.word	0x40010000
 8000964:	40000400 	.word	0x40000400
 8000968:	240005d4 	.word	0x240005d4
 800096c:	2400066c 	.word	0x2400066c
 8000970:	58020000 	.word	0x58020000

08000974 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000974:	b580      	push	{r7, lr}
 8000976:	b09c      	sub	sp, #112	@ 0x70
 8000978:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800097a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800097e:	224c      	movs	r2, #76	@ 0x4c
 8000980:	2100      	movs	r1, #0
 8000982:	4618      	mov	r0, r3
 8000984:	f018 fc65 	bl	8019252 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000988:	1d3b      	adds	r3, r7, #4
 800098a:	2220      	movs	r2, #32
 800098c:	2100      	movs	r1, #0
 800098e:	4618      	mov	r0, r3
 8000990:	f018 fc5f 	bl	8019252 <memset>

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000994:	2002      	movs	r0, #2
 8000996:	f00c fbd1 	bl	800d13c <HAL_PWREx_ConfigSupply>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800099a:	2300      	movs	r3, #0
 800099c:	603b      	str	r3, [r7, #0]
 800099e:	4b30      	ldr	r3, [pc, #192]	@ (8000a60 <SystemClock_Config+0xec>)
 80009a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009a2:	4a2f      	ldr	r2, [pc, #188]	@ (8000a60 <SystemClock_Config+0xec>)
 80009a4:	f023 0301 	bic.w	r3, r3, #1
 80009a8:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80009aa:	4b2d      	ldr	r3, [pc, #180]	@ (8000a60 <SystemClock_Config+0xec>)
 80009ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009ae:	f003 0301 	and.w	r3, r3, #1
 80009b2:	603b      	str	r3, [r7, #0]
 80009b4:	4b2b      	ldr	r3, [pc, #172]	@ (8000a64 <SystemClock_Config+0xf0>)
 80009b6:	699b      	ldr	r3, [r3, #24]
 80009b8:	4a2a      	ldr	r2, [pc, #168]	@ (8000a64 <SystemClock_Config+0xf0>)
 80009ba:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80009be:	6193      	str	r3, [r2, #24]
 80009c0:	4b28      	ldr	r3, [pc, #160]	@ (8000a64 <SystemClock_Config+0xf0>)
 80009c2:	699b      	ldr	r3, [r3, #24]
 80009c4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80009c8:	603b      	str	r3, [r7, #0]
 80009ca:	683b      	ldr	r3, [r7, #0]

	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {
 80009cc:	bf00      	nop
 80009ce:	4b25      	ldr	r3, [pc, #148]	@ (8000a64 <SystemClock_Config+0xf0>)
 80009d0:	699b      	ldr	r3, [r3, #24]
 80009d2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80009d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80009da:	d1f8      	bne.n	80009ce <SystemClock_Config+0x5a>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009dc:	2301      	movs	r3, #1
 80009de:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009e0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80009e4:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009e6:	2302      	movs	r3, #2
 80009e8:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009ea:	2302      	movs	r3, #2
 80009ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLM = 2;
 80009ee:	2302      	movs	r3, #2
 80009f0:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLN = 24;
 80009f2:	2318      	movs	r3, #24
 80009f4:	657b      	str	r3, [r7, #84]	@ 0x54
	RCC_OscInitStruct.PLL.PLLP = 2;
 80009f6:	2302      	movs	r3, #2
 80009f8:	65bb      	str	r3, [r7, #88]	@ 0x58
	RCC_OscInitStruct.PLL.PLLQ = 6;
 80009fa:	2306      	movs	r3, #6
 80009fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 80009fe:	2302      	movs	r3, #2
 8000a00:	663b      	str	r3, [r7, #96]	@ 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000a02:	230c      	movs	r3, #12
 8000a04:	667b      	str	r3, [r7, #100]	@ 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000a06:	2300      	movs	r3, #0
 8000a08:	66bb      	str	r3, [r7, #104]	@ 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	66fb      	str	r3, [r7, #108]	@ 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000a0e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a12:	4618      	mov	r0, r3
 8000a14:	f00c fbdc 	bl	800d1d0 <HAL_RCC_OscConfig>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <SystemClock_Config+0xae>
		Error_Handler();
 8000a1e:	f001 fc61 	bl	80022e4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000a22:	233f      	movs	r3, #63	@ 0x3f
 8000a24:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1
			| RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a26:	2303      	movs	r3, #3
 8000a28:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000a32:	2340      	movs	r3, #64	@ 0x40
 8000a34:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000a36:	2340      	movs	r3, #64	@ 0x40
 8000a38:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000a3a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a3e:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000a40:	2340      	movs	r3, #64	@ 0x40
 8000a42:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000a44:	1d3b      	adds	r3, r7, #4
 8000a46:	2102      	movs	r1, #2
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f00d f81b 	bl	800da84 <HAL_RCC_ClockConfig>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <SystemClock_Config+0xe4>
		Error_Handler();
 8000a54:	f001 fc46 	bl	80022e4 <Error_Handler>
	}
}
 8000a58:	bf00      	nop
 8000a5a:	3770      	adds	r7, #112	@ 0x70
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	58000400 	.word	0x58000400
 8000a64:	58024800 	.word	0x58024800

08000a68 <MX_DCMI_Init>:
/**
 * @brief DCMI Initialization Function
 * @param None
 * @retval None
 */
static void MX_DCMI_Init(void) {
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
	/* USER CODE END DCMI_Init 0 */

	/* USER CODE BEGIN DCMI_Init 1 */

	/* USER CODE END DCMI_Init 1 */
	hdcmi.Instance = DCMI;
 8000a6c:	4b17      	ldr	r3, [pc, #92]	@ (8000acc <MX_DCMI_Init+0x64>)
 8000a6e:	4a18      	ldr	r2, [pc, #96]	@ (8000ad0 <MX_DCMI_Init+0x68>)
 8000a70:	601a      	str	r2, [r3, #0]
	hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8000a72:	4b16      	ldr	r3, [pc, #88]	@ (8000acc <MX_DCMI_Init+0x64>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	605a      	str	r2, [r3, #4]
	hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 8000a78:	4b14      	ldr	r3, [pc, #80]	@ (8000acc <MX_DCMI_Init+0x64>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	609a      	str	r2, [r3, #8]
	hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_HIGH;
 8000a7e:	4b13      	ldr	r3, [pc, #76]	@ (8000acc <MX_DCMI_Init+0x64>)
 8000a80:	2280      	movs	r2, #128	@ 0x80
 8000a82:	60da      	str	r2, [r3, #12]
	hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8000a84:	4b11      	ldr	r3, [pc, #68]	@ (8000acc <MX_DCMI_Init+0x64>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	611a      	str	r2, [r3, #16]
	hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8000a8a:	4b10      	ldr	r3, [pc, #64]	@ (8000acc <MX_DCMI_Init+0x64>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	615a      	str	r2, [r3, #20]
	hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000a90:	4b0e      	ldr	r3, [pc, #56]	@ (8000acc <MX_DCMI_Init+0x64>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	619a      	str	r2, [r3, #24]
	hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8000a96:	4b0d      	ldr	r3, [pc, #52]	@ (8000acc <MX_DCMI_Init+0x64>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	621a      	str	r2, [r3, #32]
	hdcmi.Init.ByteSelectMode = DCMI_BSM_OTHER;
 8000a9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000acc <MX_DCMI_Init+0x64>)
 8000a9e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000aa2:	625a      	str	r2, [r3, #36]	@ 0x24
	hdcmi.Init.ByteSelectStart = DCMI_OEBS_EVEN;
 8000aa4:	4b09      	ldr	r3, [pc, #36]	@ (8000acc <MX_DCMI_Init+0x64>)
 8000aa6:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000aaa:	629a      	str	r2, [r3, #40]	@ 0x28
	hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8000aac:	4b07      	ldr	r3, [pc, #28]	@ (8000acc <MX_DCMI_Init+0x64>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	62da      	str	r2, [r3, #44]	@ 0x2c
	hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8000ab2:	4b06      	ldr	r3, [pc, #24]	@ (8000acc <MX_DCMI_Init+0x64>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	631a      	str	r2, [r3, #48]	@ 0x30
	if (HAL_DCMI_Init(&hdcmi) != HAL_OK) {
 8000ab8:	4804      	ldr	r0, [pc, #16]	@ (8000acc <MX_DCMI_Init+0x64>)
 8000aba:	f002 fecf 	bl	800385c <HAL_DCMI_Init>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <MX_DCMI_Init+0x60>
		Error_Handler();
 8000ac4:	f001 fc0e 	bl	80022e4 <Error_Handler>
	}
	/* USER CODE BEGIN DCMI_Init 2 */

	/* USER CODE END DCMI_Init 2 */

}
 8000ac8:	bf00      	nop
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	24000300 	.word	0x24000300
 8000ad0:	48020000 	.word	0x48020000

08000ad4 <MX_I2C2_Init>:
/**
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void) {
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 8000ad8:	4b1b      	ldr	r3, [pc, #108]	@ (8000b48 <MX_I2C2_Init+0x74>)
 8000ada:	4a1c      	ldr	r2, [pc, #112]	@ (8000b4c <MX_I2C2_Init+0x78>)
 8000adc:	601a      	str	r2, [r3, #0]
	hi2c2.Init.Timing = 0x00C0EAFF;
 8000ade:	4b1a      	ldr	r3, [pc, #104]	@ (8000b48 <MX_I2C2_Init+0x74>)
 8000ae0:	4a1b      	ldr	r2, [pc, #108]	@ (8000b50 <MX_I2C2_Init+0x7c>)
 8000ae2:	605a      	str	r2, [r3, #4]
	hi2c2.Init.OwnAddress1 = 0;
 8000ae4:	4b18      	ldr	r3, [pc, #96]	@ (8000b48 <MX_I2C2_Init+0x74>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	609a      	str	r2, [r3, #8]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000aea:	4b17      	ldr	r3, [pc, #92]	@ (8000b48 <MX_I2C2_Init+0x74>)
 8000aec:	2201      	movs	r2, #1
 8000aee:	60da      	str	r2, [r3, #12]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000af0:	4b15      	ldr	r3, [pc, #84]	@ (8000b48 <MX_I2C2_Init+0x74>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	611a      	str	r2, [r3, #16]
	hi2c2.Init.OwnAddress2 = 0;
 8000af6:	4b14      	ldr	r3, [pc, #80]	@ (8000b48 <MX_I2C2_Init+0x74>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000afc:	4b12      	ldr	r3, [pc, #72]	@ (8000b48 <MX_I2C2_Init+0x74>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b02:	4b11      	ldr	r3, [pc, #68]	@ (8000b48 <MX_I2C2_Init+0x74>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b08:	4b0f      	ldr	r3, [pc, #60]	@ (8000b48 <MX_I2C2_Init+0x74>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 8000b0e:	480e      	ldr	r0, [pc, #56]	@ (8000b48 <MX_I2C2_Init+0x74>)
 8000b10:	f006 fe54 	bl	80077bc <HAL_I2C_Init>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <MX_I2C2_Init+0x4a>
		Error_Handler();
 8000b1a:	f001 fbe3 	bl	80022e4 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE)
 8000b1e:	2100      	movs	r1, #0
 8000b20:	4809      	ldr	r0, [pc, #36]	@ (8000b48 <MX_I2C2_Init+0x74>)
 8000b22:	f008 fa7f 	bl	8009024 <HAL_I2CEx_ConfigAnalogFilter>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <MX_I2C2_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 8000b2c:	f001 fbda 	bl	80022e4 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK) {
 8000b30:	2100      	movs	r1, #0
 8000b32:	4805      	ldr	r0, [pc, #20]	@ (8000b48 <MX_I2C2_Init+0x74>)
 8000b34:	f008 fac1 	bl	80090ba <HAL_I2CEx_ConfigDigitalFilter>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <MX_I2C2_Init+0x6e>
		Error_Handler();
 8000b3e:	f001 fbd1 	bl	80022e4 <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 8000b42:	bf00      	nop
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	240003c8 	.word	0x240003c8
 8000b4c:	40005800 	.word	0x40005800
 8000b50:	00c0eaff 	.word	0x00c0eaff

08000b54 <MX_JPEG_Init>:
/**
 * @brief JPEG Initialization Function
 * @param None
 * @retval None
 */
static void MX_JPEG_Init(void) {
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
	/* USER CODE END JPEG_Init 0 */

	/* USER CODE BEGIN JPEG_Init 1 */

	/* USER CODE END JPEG_Init 1 */
	hjpeg.Instance = JPEG;
 8000b58:	4b06      	ldr	r3, [pc, #24]	@ (8000b74 <MX_JPEG_Init+0x20>)
 8000b5a:	4a07      	ldr	r2, [pc, #28]	@ (8000b78 <MX_JPEG_Init+0x24>)
 8000b5c:	601a      	str	r2, [r3, #0]
	if (HAL_JPEG_Init(&hjpeg) != HAL_OK) {
 8000b5e:	4805      	ldr	r0, [pc, #20]	@ (8000b74 <MX_JPEG_Init+0x20>)
 8000b60:	f008 faf8 	bl	8009154 <HAL_JPEG_Init>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <MX_JPEG_Init+0x1a>
		Error_Handler();
 8000b6a:	f001 fbbb 	bl	80022e4 <Error_Handler>
	}
	/* USER CODE BEGIN JPEG_Init 2 */

	/* USER CODE END JPEG_Init 2 */

}
 8000b6e:	bf00      	nop
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	2400041c 	.word	0x2400041c
 8000b78:	52003000 	.word	0x52003000

08000b7c <MX_SPI2_Init>:
/**
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void) {
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 8000b80:	4b27      	ldr	r3, [pc, #156]	@ (8000c20 <MX_SPI2_Init+0xa4>)
 8000b82:	4a28      	ldr	r2, [pc, #160]	@ (8000c24 <MX_SPI2_Init+0xa8>)
 8000b84:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 8000b86:	4b26      	ldr	r3, [pc, #152]	@ (8000c20 <MX_SPI2_Init+0xa4>)
 8000b88:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000b8c:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000b8e:	4b24      	ldr	r3, [pc, #144]	@ (8000c20 <MX_SPI2_Init+0xa4>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b94:	4b22      	ldr	r3, [pc, #136]	@ (8000c20 <MX_SPI2_Init+0xa4>)
 8000b96:	2207      	movs	r2, #7
 8000b98:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000b9a:	4b21      	ldr	r3, [pc, #132]	@ (8000c20 <MX_SPI2_Init+0xa4>)
 8000b9c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000ba0:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ba2:	4b1f      	ldr	r3, [pc, #124]	@ (8000c20 <MX_SPI2_Init+0xa4>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 8000ba8:	4b1d      	ldr	r3, [pc, #116]	@ (8000c20 <MX_SPI2_Init+0xa4>)
 8000baa:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000bae:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000bb0:	4b1b      	ldr	r3, [pc, #108]	@ (8000c20 <MX_SPI2_Init+0xa4>)
 8000bb2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000bb6:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bb8:	4b19      	ldr	r3, [pc, #100]	@ (8000c20 <MX_SPI2_Init+0xa4>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bbe:	4b18      	ldr	r3, [pc, #96]	@ (8000c20 <MX_SPI2_Init+0xa4>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bc4:	4b16      	ldr	r3, [pc, #88]	@ (8000c20 <MX_SPI2_Init+0xa4>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi2.Init.CRCPolynomial = 0x0;
 8000bca:	4b15      	ldr	r3, [pc, #84]	@ (8000c20 <MX_SPI2_Init+0xa4>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	62da      	str	r2, [r3, #44]	@ 0x2c
	hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000bd0:	4b13      	ldr	r3, [pc, #76]	@ (8000c20 <MX_SPI2_Init+0xa4>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	635a      	str	r2, [r3, #52]	@ 0x34
	hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000bd6:	4b12      	ldr	r3, [pc, #72]	@ (8000c20 <MX_SPI2_Init+0xa4>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	639a      	str	r2, [r3, #56]	@ 0x38
	hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000bdc:	4b10      	ldr	r3, [pc, #64]	@ (8000c20 <MX_SPI2_Init+0xa4>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	63da      	str	r2, [r3, #60]	@ 0x3c
	hspi2.Init.TxCRCInitializationPattern =
 8000be2:	4b0f      	ldr	r3, [pc, #60]	@ (8000c20 <MX_SPI2_Init+0xa4>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	641a      	str	r2, [r3, #64]	@ 0x40
			SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
	hspi2.Init.RxCRCInitializationPattern =
 8000be8:	4b0d      	ldr	r3, [pc, #52]	@ (8000c20 <MX_SPI2_Init+0xa4>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	645a      	str	r2, [r3, #68]	@ 0x44
			SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
	hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000bee:	4b0c      	ldr	r3, [pc, #48]	@ (8000c20 <MX_SPI2_Init+0xa4>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	649a      	str	r2, [r3, #72]	@ 0x48
	hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000bf4:	4b0a      	ldr	r3, [pc, #40]	@ (8000c20 <MX_SPI2_Init+0xa4>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	64da      	str	r2, [r3, #76]	@ 0x4c
	hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000bfa:	4b09      	ldr	r3, [pc, #36]	@ (8000c20 <MX_SPI2_Init+0xa4>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	651a      	str	r2, [r3, #80]	@ 0x50
	hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000c00:	4b07      	ldr	r3, [pc, #28]	@ (8000c20 <MX_SPI2_Init+0xa4>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	655a      	str	r2, [r3, #84]	@ 0x54
	hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000c06:	4b06      	ldr	r3, [pc, #24]	@ (8000c20 <MX_SPI2_Init+0xa4>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	659a      	str	r2, [r3, #88]	@ 0x58
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 8000c0c:	4804      	ldr	r0, [pc, #16]	@ (8000c20 <MX_SPI2_Init+0xa4>)
 8000c0e:	f00f f8f1 	bl	800fdf4 <HAL_SPI_Init>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <MX_SPI2_Init+0xa0>
		Error_Handler();
 8000c18:	f001 fb64 	bl	80022e4 <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 8000c1c:	bf00      	nop
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	2400054c 	.word	0x2400054c
 8000c24:	40003800 	.word	0x40003800

08000c28 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b096      	sub	sp, #88	@ 0x58
 8000c2c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000c2e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000c32:	2200      	movs	r2, #0
 8000c34:	601a      	str	r2, [r3, #0]
 8000c36:	605a      	str	r2, [r3, #4]
 8000c38:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000c3a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000c3e:	2200      	movs	r2, #0
 8000c40:	601a      	str	r2, [r3, #0]
 8000c42:	605a      	str	r2, [r3, #4]
 8000c44:	609a      	str	r2, [r3, #8]
 8000c46:	60da      	str	r2, [r3, #12]
 8000c48:	611a      	str	r2, [r3, #16]
 8000c4a:	615a      	str	r2, [r3, #20]
 8000c4c:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8000c4e:	1d3b      	adds	r3, r7, #4
 8000c50:	222c      	movs	r2, #44	@ 0x2c
 8000c52:	2100      	movs	r1, #0
 8000c54:	4618      	mov	r0, r3
 8000c56:	f018 fafc 	bl	8019252 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8000c5a:	4b38      	ldr	r3, [pc, #224]	@ (8000d3c <MX_TIM1_Init+0x114>)
 8000c5c:	4a38      	ldr	r2, [pc, #224]	@ (8000d40 <MX_TIM1_Init+0x118>)
 8000c5e:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 8000c60:	4b36      	ldr	r3, [pc, #216]	@ (8000d3c <MX_TIM1_Init+0x114>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c66:	4b35      	ldr	r3, [pc, #212]	@ (8000d3c <MX_TIM1_Init+0x114>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 2000;
 8000c6c:	4b33      	ldr	r3, [pc, #204]	@ (8000d3c <MX_TIM1_Init+0x114>)
 8000c6e:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000c72:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c74:	4b31      	ldr	r3, [pc, #196]	@ (8000d3c <MX_TIM1_Init+0x114>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8000c7a:	4b30      	ldr	r3, [pc, #192]	@ (8000d3c <MX_TIM1_Init+0x114>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c80:	4b2e      	ldr	r3, [pc, #184]	@ (8000d3c <MX_TIM1_Init+0x114>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 8000c86:	482d      	ldr	r0, [pc, #180]	@ (8000d3c <MX_TIM1_Init+0x114>)
 8000c88:	f00f fff0 	bl	8010c6c <HAL_TIM_PWM_Init>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <MX_TIM1_Init+0x6e>
		Error_Handler();
 8000c92:	f001 fb27 	bl	80022e4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c96:	2300      	movs	r3, #0
 8000c98:	64fb      	str	r3, [r7, #76]	@ 0x4c
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	653b      	str	r3, [r7, #80]	@ 0x50
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	657b      	str	r3, [r7, #84]	@ 0x54
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8000ca2:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	4824      	ldr	r0, [pc, #144]	@ (8000d3c <MX_TIM1_Init+0x114>)
 8000caa:	f011 f8c5 	bl	8011e38 <HAL_TIMEx_MasterConfigSynchronization>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d001      	beq.n	8000cb8 <MX_TIM1_Init+0x90>
			!= HAL_OK) {
		Error_Handler();
 8000cb4:	f001 fb16 	bl	80022e4 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cb8:	2360      	movs	r3, #96	@ 0x60
 8000cba:	633b      	str	r3, [r7, #48]	@ 0x30
	sConfigOC.Pulse = 0;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	637b      	str	r3, [r7, #52]	@ 0x34
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	63bb      	str	r3, [r7, #56]	@ 0x38
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	643b      	str	r3, [r7, #64]	@ 0x40
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	647b      	str	r3, [r7, #68]	@ 0x44
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	64bb      	str	r3, [r7, #72]	@ 0x48
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4)
 8000cd0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000cd4:	220c      	movs	r2, #12
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	4818      	ldr	r0, [pc, #96]	@ (8000d3c <MX_TIM1_Init+0x114>)
 8000cda:	f010 fa35 	bl	8011148 <HAL_TIM_PWM_ConfigChannel>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <MX_TIM1_Init+0xc0>
			!= HAL_OK) {
		Error_Handler();
 8000ce4:	f001 fafe 	bl	80022e4 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000cec:	2300      	movs	r3, #0
 8000cee:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000cfc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d00:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8000d02:	2300      	movs	r3, #0
 8000d04:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000d06:	2300      	movs	r3, #0
 8000d08:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000d0a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000d0e:	627b      	str	r3, [r7, #36]	@ 0x24
	sBreakDeadTimeConfig.Break2Filter = 0;
 8000d10:	2300      	movs	r3, #0
 8000d12:	62bb      	str	r3, [r7, #40]	@ 0x28
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000d14:	2300      	movs	r3, #0
 8000d16:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 8000d18:	1d3b      	adds	r3, r7, #4
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	4807      	ldr	r0, [pc, #28]	@ (8000d3c <MX_TIM1_Init+0x114>)
 8000d1e:	f011 f919 	bl	8011f54 <HAL_TIMEx_ConfigBreakDeadTime>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d001      	beq.n	8000d2c <MX_TIM1_Init+0x104>
			!= HAL_OK) {
		Error_Handler();
 8000d28:	f001 fadc 	bl	80022e4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8000d2c:	4803      	ldr	r0, [pc, #12]	@ (8000d3c <MX_TIM1_Init+0x114>)
 8000d2e:	f001 fe93 	bl	8002a58 <HAL_TIM_MspPostInit>

}
 8000d32:	bf00      	nop
 8000d34:	3758      	adds	r7, #88	@ 0x58
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	240005d4 	.word	0x240005d4
 8000d40:	40010000 	.word	0x40010000

08000d44 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b08a      	sub	sp, #40	@ 0x28
 8000d48:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000d4a:	f107 031c 	add.w	r3, r7, #28
 8000d4e:	2200      	movs	r2, #0
 8000d50:	601a      	str	r2, [r3, #0]
 8000d52:	605a      	str	r2, [r3, #4]
 8000d54:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000d56:	463b      	mov	r3, r7
 8000d58:	2200      	movs	r2, #0
 8000d5a:	601a      	str	r2, [r3, #0]
 8000d5c:	605a      	str	r2, [r3, #4]
 8000d5e:	609a      	str	r2, [r3, #8]
 8000d60:	60da      	str	r2, [r3, #12]
 8000d62:	611a      	str	r2, [r3, #16]
 8000d64:	615a      	str	r2, [r3, #20]
 8000d66:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8000d68:	4b2d      	ldr	r3, [pc, #180]	@ (8000e20 <MX_TIM2_Init+0xdc>)
 8000d6a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d6e:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 7;
 8000d70:	4b2b      	ldr	r3, [pc, #172]	@ (8000e20 <MX_TIM2_Init+0xdc>)
 8000d72:	2207      	movs	r2, #7
 8000d74:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d76:	4b2a      	ldr	r3, [pc, #168]	@ (8000e20 <MX_TIM2_Init+0xdc>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 2000;
 8000d7c:	4b28      	ldr	r3, [pc, #160]	@ (8000e20 <MX_TIM2_Init+0xdc>)
 8000d7e:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000d82:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d84:	4b26      	ldr	r3, [pc, #152]	@ (8000e20 <MX_TIM2_Init+0xdc>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d8a:	4b25      	ldr	r3, [pc, #148]	@ (8000e20 <MX_TIM2_Init+0xdc>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 8000d90:	4823      	ldr	r0, [pc, #140]	@ (8000e20 <MX_TIM2_Init+0xdc>)
 8000d92:	f00f ff6b 	bl	8010c6c <HAL_TIM_PWM_Init>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d001      	beq.n	8000da0 <MX_TIM2_Init+0x5c>
		Error_Handler();
 8000d9c:	f001 faa2 	bl	80022e4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000da0:	2300      	movs	r3, #0
 8000da2:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000da4:	2300      	movs	r3, #0
 8000da6:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8000da8:	f107 031c 	add.w	r3, r7, #28
 8000dac:	4619      	mov	r1, r3
 8000dae:	481c      	ldr	r0, [pc, #112]	@ (8000e20 <MX_TIM2_Init+0xdc>)
 8000db0:	f011 f842 	bl	8011e38 <HAL_TIMEx_MasterConfigSynchronization>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <MX_TIM2_Init+0x7a>
			!= HAL_OK) {
		Error_Handler();
 8000dba:	f001 fa93 	bl	80022e4 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000dbe:	2360      	movs	r3, #96	@ 0x60
 8000dc0:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1)
 8000dce:	463b      	mov	r3, r7
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	4812      	ldr	r0, [pc, #72]	@ (8000e20 <MX_TIM2_Init+0xdc>)
 8000dd6:	f010 f9b7 	bl	8011148 <HAL_TIM_PWM_ConfigChannel>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d001      	beq.n	8000de4 <MX_TIM2_Init+0xa0>
			!= HAL_OK) {
		Error_Handler();
 8000de0:	f001 fa80 	bl	80022e4 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2)
 8000de4:	463b      	mov	r3, r7
 8000de6:	2204      	movs	r2, #4
 8000de8:	4619      	mov	r1, r3
 8000dea:	480d      	ldr	r0, [pc, #52]	@ (8000e20 <MX_TIM2_Init+0xdc>)
 8000dec:	f010 f9ac 	bl	8011148 <HAL_TIM_PWM_ConfigChannel>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <MX_TIM2_Init+0xb6>
			!= HAL_OK) {
		Error_Handler();
 8000df6:	f001 fa75 	bl	80022e4 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3)
 8000dfa:	463b      	mov	r3, r7
 8000dfc:	2208      	movs	r2, #8
 8000dfe:	4619      	mov	r1, r3
 8000e00:	4807      	ldr	r0, [pc, #28]	@ (8000e20 <MX_TIM2_Init+0xdc>)
 8000e02:	f010 f9a1 	bl	8011148 <HAL_TIM_PWM_ConfigChannel>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <MX_TIM2_Init+0xcc>
			!= HAL_OK) {
		Error_Handler();
 8000e0c:	f001 fa6a 	bl	80022e4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 8000e10:	4803      	ldr	r0, [pc, #12]	@ (8000e20 <MX_TIM2_Init+0xdc>)
 8000e12:	f001 fe21 	bl	8002a58 <HAL_TIM_MspPostInit>

}
 8000e16:	bf00      	nop
 8000e18:	3728      	adds	r7, #40	@ 0x28
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	24000620 	.word	0x24000620

08000e24 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b08a      	sub	sp, #40	@ 0x28
 8000e28:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000e2a:	f107 031c 	add.w	r3, r7, #28
 8000e2e:	2200      	movs	r2, #0
 8000e30:	601a      	str	r2, [r3, #0]
 8000e32:	605a      	str	r2, [r3, #4]
 8000e34:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000e36:	463b      	mov	r3, r7
 8000e38:	2200      	movs	r2, #0
 8000e3a:	601a      	str	r2, [r3, #0]
 8000e3c:	605a      	str	r2, [r3, #4]
 8000e3e:	609a      	str	r2, [r3, #8]
 8000e40:	60da      	str	r2, [r3, #12]
 8000e42:	611a      	str	r2, [r3, #16]
 8000e44:	615a      	str	r2, [r3, #20]
 8000e46:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8000e48:	4b27      	ldr	r3, [pc, #156]	@ (8000ee8 <MX_TIM3_Init+0xc4>)
 8000e4a:	4a28      	ldr	r2, [pc, #160]	@ (8000eec <MX_TIM3_Init+0xc8>)
 8000e4c:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8000e4e:	4b26      	ldr	r3, [pc, #152]	@ (8000ee8 <MX_TIM3_Init+0xc4>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e54:	4b24      	ldr	r3, [pc, #144]	@ (8000ee8 <MX_TIM3_Init+0xc4>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 2000;
 8000e5a:	4b23      	ldr	r3, [pc, #140]	@ (8000ee8 <MX_TIM3_Init+0xc4>)
 8000e5c:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000e60:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e62:	4b21      	ldr	r3, [pc, #132]	@ (8000ee8 <MX_TIM3_Init+0xc4>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e68:	4b1f      	ldr	r3, [pc, #124]	@ (8000ee8 <MX_TIM3_Init+0xc4>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 8000e6e:	481e      	ldr	r0, [pc, #120]	@ (8000ee8 <MX_TIM3_Init+0xc4>)
 8000e70:	f00f fefc 	bl	8010c6c <HAL_TIM_PWM_Init>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <MX_TIM3_Init+0x5a>
		Error_Handler();
 8000e7a:	f001 fa33 	bl	80022e4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e82:	2300      	movs	r3, #0
 8000e84:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8000e86:	f107 031c 	add.w	r3, r7, #28
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	4816      	ldr	r0, [pc, #88]	@ (8000ee8 <MX_TIM3_Init+0xc4>)
 8000e8e:	f010 ffd3 	bl	8011e38 <HAL_TIMEx_MasterConfigSynchronization>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <MX_TIM3_Init+0x78>
			!= HAL_OK) {
		Error_Handler();
 8000e98:	f001 fa24 	bl	80022e4 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e9c:	2360      	movs	r3, #96	@ 0x60
 8000e9e:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3)
 8000eac:	463b      	mov	r3, r7
 8000eae:	2208      	movs	r2, #8
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	480d      	ldr	r0, [pc, #52]	@ (8000ee8 <MX_TIM3_Init+0xc4>)
 8000eb4:	f010 f948 	bl	8011148 <HAL_TIM_PWM_ConfigChannel>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <MX_TIM3_Init+0x9e>
			!= HAL_OK) {
		Error_Handler();
 8000ebe:	f001 fa11 	bl	80022e4 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4)
 8000ec2:	463b      	mov	r3, r7
 8000ec4:	220c      	movs	r2, #12
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	4807      	ldr	r0, [pc, #28]	@ (8000ee8 <MX_TIM3_Init+0xc4>)
 8000eca:	f010 f93d 	bl	8011148 <HAL_TIM_PWM_ConfigChannel>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <MX_TIM3_Init+0xb4>
			!= HAL_OK) {
		Error_Handler();
 8000ed4:	f001 fa06 	bl	80022e4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 8000ed8:	4803      	ldr	r0, [pc, #12]	@ (8000ee8 <MX_TIM3_Init+0xc4>)
 8000eda:	f001 fdbd 	bl	8002a58 <HAL_TIM_MspPostInit>

}
 8000ede:	bf00      	nop
 8000ee0:	3728      	adds	r7, #40	@ 0x28
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	2400066c 	.word	0x2400066c
 8000eec:	40000400 	.word	0x40000400

08000ef0 <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b08a      	sub	sp, #40	@ 0x28
 8000ef4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000ef6:	f107 031c 	add.w	r3, r7, #28
 8000efa:	2200      	movs	r2, #0
 8000efc:	601a      	str	r2, [r3, #0]
 8000efe:	605a      	str	r2, [r3, #4]
 8000f00:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000f02:	463b      	mov	r3, r7
 8000f04:	2200      	movs	r2, #0
 8000f06:	601a      	str	r2, [r3, #0]
 8000f08:	605a      	str	r2, [r3, #4]
 8000f0a:	609a      	str	r2, [r3, #8]
 8000f0c:	60da      	str	r2, [r3, #12]
 8000f0e:	611a      	str	r2, [r3, #16]
 8000f10:	615a      	str	r2, [r3, #20]
 8000f12:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8000f14:	4b27      	ldr	r3, [pc, #156]	@ (8000fb4 <MX_TIM4_Init+0xc4>)
 8000f16:	4a28      	ldr	r2, [pc, #160]	@ (8000fb8 <MX_TIM4_Init+0xc8>)
 8000f18:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 7;
 8000f1a:	4b26      	ldr	r3, [pc, #152]	@ (8000fb4 <MX_TIM4_Init+0xc4>)
 8000f1c:	2207      	movs	r2, #7
 8000f1e:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f20:	4b24      	ldr	r3, [pc, #144]	@ (8000fb4 <MX_TIM4_Init+0xc4>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 2000;
 8000f26:	4b23      	ldr	r3, [pc, #140]	@ (8000fb4 <MX_TIM4_Init+0xc4>)
 8000f28:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000f2c:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f2e:	4b21      	ldr	r3, [pc, #132]	@ (8000fb4 <MX_TIM4_Init+0xc4>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f34:	4b1f      	ldr	r3, [pc, #124]	@ (8000fb4 <MX_TIM4_Init+0xc4>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim4) != HAL_OK) {
 8000f3a:	481e      	ldr	r0, [pc, #120]	@ (8000fb4 <MX_TIM4_Init+0xc4>)
 8000f3c:	f00f fe96 	bl	8010c6c <HAL_TIM_PWM_Init>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <MX_TIM4_Init+0x5a>
		Error_Handler();
 8000f46:	f001 f9cd 	bl	80022e4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 8000f52:	f107 031c 	add.w	r3, r7, #28
 8000f56:	4619      	mov	r1, r3
 8000f58:	4816      	ldr	r0, [pc, #88]	@ (8000fb4 <MX_TIM4_Init+0xc4>)
 8000f5a:	f010 ff6d 	bl	8011e38 <HAL_TIMEx_MasterConfigSynchronization>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <MX_TIM4_Init+0x78>
			!= HAL_OK) {
		Error_Handler();
 8000f64:	f001 f9be 	bl	80022e4 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f68:	2360      	movs	r3, #96	@ 0x60
 8000f6a:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f70:	2300      	movs	r3, #0
 8000f72:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f74:	2300      	movs	r3, #0
 8000f76:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3)
 8000f78:	463b      	mov	r3, r7
 8000f7a:	2208      	movs	r2, #8
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	480d      	ldr	r0, [pc, #52]	@ (8000fb4 <MX_TIM4_Init+0xc4>)
 8000f80:	f010 f8e2 	bl	8011148 <HAL_TIM_PWM_ConfigChannel>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <MX_TIM4_Init+0x9e>
			!= HAL_OK) {
		Error_Handler();
 8000f8a:	f001 f9ab 	bl	80022e4 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4)
 8000f8e:	463b      	mov	r3, r7
 8000f90:	220c      	movs	r2, #12
 8000f92:	4619      	mov	r1, r3
 8000f94:	4807      	ldr	r0, [pc, #28]	@ (8000fb4 <MX_TIM4_Init+0xc4>)
 8000f96:	f010 f8d7 	bl	8011148 <HAL_TIM_PWM_ConfigChannel>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <MX_TIM4_Init+0xb4>
			!= HAL_OK) {
		Error_Handler();
 8000fa0:	f001 f9a0 	bl	80022e4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */
	HAL_TIM_MspPostInit(&htim4);
 8000fa4:	4803      	ldr	r0, [pc, #12]	@ (8000fb4 <MX_TIM4_Init+0xc4>)
 8000fa6:	f001 fd57 	bl	8002a58 <HAL_TIM_MspPostInit>

}
 8000faa:	bf00      	nop
 8000fac:	3728      	adds	r7, #40	@ 0x28
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	240006b8 	.word	0x240006b8
 8000fb8:	40000800 	.word	0x40000800

08000fbc <MX_TIM5_Init>:
/**
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void) {
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b088      	sub	sp, #32
 8000fc0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM5_Init 0 */

	/* USER CODE END TIM5_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000fc2:	f107 0310 	add.w	r3, r7, #16
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	601a      	str	r2, [r3, #0]
 8000fca:	605a      	str	r2, [r3, #4]
 8000fcc:	609a      	str	r2, [r3, #8]
 8000fce:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000fd0:	1d3b      	adds	r3, r7, #4
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	601a      	str	r2, [r3, #0]
 8000fd6:	605a      	str	r2, [r3, #4]
 8000fd8:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM5_Init 1 */

	/* USER CODE END TIM5_Init 1 */
	htim5.Instance = TIM5;
 8000fda:	4b1d      	ldr	r3, [pc, #116]	@ (8001050 <MX_TIM5_Init+0x94>)
 8000fdc:	4a1d      	ldr	r2, [pc, #116]	@ (8001054 <MX_TIM5_Init+0x98>)
 8000fde:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = 0;
 8000fe0:	4b1b      	ldr	r3, [pc, #108]	@ (8001050 <MX_TIM5_Init+0x94>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fe6:	4b1a      	ldr	r3, [pc, #104]	@ (8001050 <MX_TIM5_Init+0x94>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = 7499998;
 8000fec:	4b18      	ldr	r3, [pc, #96]	@ (8001050 <MX_TIM5_Init+0x94>)
 8000fee:	4a1a      	ldr	r2, [pc, #104]	@ (8001058 <MX_TIM5_Init+0x9c>)
 8000ff0:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ff2:	4b17      	ldr	r3, [pc, #92]	@ (8001050 <MX_TIM5_Init+0x94>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ff8:	4b15      	ldr	r3, [pc, #84]	@ (8001050 <MX_TIM5_Init+0x94>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim5) != HAL_OK) {
 8000ffe:	4814      	ldr	r0, [pc, #80]	@ (8001050 <MX_TIM5_Init+0x94>)
 8001000:	f00f fd65 	bl	8010ace <HAL_TIM_Base_Init>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <MX_TIM5_Init+0x52>
		Error_Handler();
 800100a:	f001 f96b 	bl	80022e4 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800100e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001012:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK) {
 8001014:	f107 0310 	add.w	r3, r7, #16
 8001018:	4619      	mov	r1, r3
 800101a:	480d      	ldr	r0, [pc, #52]	@ (8001050 <MX_TIM5_Init+0x94>)
 800101c:	f010 f9a8 	bl	8011370 <HAL_TIM_ConfigClockSource>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <MX_TIM5_Init+0x6e>
		Error_Handler();
 8001026:	f001 f95d 	bl	80022e4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800102a:	2300      	movs	r3, #0
 800102c:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800102e:	2300      	movs	r3, #0
 8001030:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig)
 8001032:	1d3b      	adds	r3, r7, #4
 8001034:	4619      	mov	r1, r3
 8001036:	4806      	ldr	r0, [pc, #24]	@ (8001050 <MX_TIM5_Init+0x94>)
 8001038:	f010 fefe 	bl	8011e38 <HAL_TIMEx_MasterConfigSynchronization>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <MX_TIM5_Init+0x8a>
			!= HAL_OK) {
		Error_Handler();
 8001042:	f001 f94f 	bl	80022e4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM5_Init 2 */

	/* USER CODE END TIM5_Init 2 */

}
 8001046:	bf00      	nop
 8001048:	3720      	adds	r7, #32
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	24000704 	.word	0x24000704
 8001054:	40000c00 	.word	0x40000c00
 8001058:	007270de 	.word	0x007270de

0800105c <MX_TIM14_Init>:
/**
 * @brief TIM14 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM14_Init(void) {
 800105c:	b580      	push	{r7, lr}
 800105e:	b088      	sub	sp, #32
 8001060:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM14_Init 0 */

	/* USER CODE END TIM14_Init 0 */

	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001062:	1d3b      	adds	r3, r7, #4
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]
 8001068:	605a      	str	r2, [r3, #4]
 800106a:	609a      	str	r2, [r3, #8]
 800106c:	60da      	str	r2, [r3, #12]
 800106e:	611a      	str	r2, [r3, #16]
 8001070:	615a      	str	r2, [r3, #20]
 8001072:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM14_Init 1 */

	/* USER CODE END TIM14_Init 1 */
	htim14.Instance = TIM14;
 8001074:	4b1d      	ldr	r3, [pc, #116]	@ (80010ec <MX_TIM14_Init+0x90>)
 8001076:	4a1e      	ldr	r2, [pc, #120]	@ (80010f0 <MX_TIM14_Init+0x94>)
 8001078:	601a      	str	r2, [r3, #0]
	htim14.Init.Prescaler = 0;
 800107a:	4b1c      	ldr	r3, [pc, #112]	@ (80010ec <MX_TIM14_Init+0x90>)
 800107c:	2200      	movs	r2, #0
 800107e:	605a      	str	r2, [r3, #4]
	htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001080:	4b1a      	ldr	r3, [pc, #104]	@ (80010ec <MX_TIM14_Init+0x90>)
 8001082:	2200      	movs	r2, #0
 8001084:	609a      	str	r2, [r3, #8]
	htim14.Init.Period = 5;
 8001086:	4b19      	ldr	r3, [pc, #100]	@ (80010ec <MX_TIM14_Init+0x90>)
 8001088:	2205      	movs	r2, #5
 800108a:	60da      	str	r2, [r3, #12]
	htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800108c:	4b17      	ldr	r3, [pc, #92]	@ (80010ec <MX_TIM14_Init+0x90>)
 800108e:	2200      	movs	r2, #0
 8001090:	611a      	str	r2, [r3, #16]
	htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001092:	4b16      	ldr	r3, [pc, #88]	@ (80010ec <MX_TIM14_Init+0x90>)
 8001094:	2280      	movs	r2, #128	@ 0x80
 8001096:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim14) != HAL_OK) {
 8001098:	4814      	ldr	r0, [pc, #80]	@ (80010ec <MX_TIM14_Init+0x90>)
 800109a:	f00f fd18 	bl	8010ace <HAL_TIM_Base_Init>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <MX_TIM14_Init+0x4c>
		Error_Handler();
 80010a4:	f001 f91e 	bl	80022e4 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim14) != HAL_OK) {
 80010a8:	4810      	ldr	r0, [pc, #64]	@ (80010ec <MX_TIM14_Init+0x90>)
 80010aa:	f00f fddf 	bl	8010c6c <HAL_TIM_PWM_Init>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <MX_TIM14_Init+0x5c>
		Error_Handler();
 80010b4:	f001 f916 	bl	80022e4 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010b8:	2360      	movs	r3, #96	@ 0x60
 80010ba:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 3;
 80010bc:	2303      	movs	r3, #3
 80010be:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010c0:	2300      	movs	r3, #0
 80010c2:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80010c4:	2304      	movs	r3, #4
 80010c6:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1)
 80010c8:	1d3b      	adds	r3, r7, #4
 80010ca:	2200      	movs	r2, #0
 80010cc:	4619      	mov	r1, r3
 80010ce:	4807      	ldr	r0, [pc, #28]	@ (80010ec <MX_TIM14_Init+0x90>)
 80010d0:	f010 f83a 	bl	8011148 <HAL_TIM_PWM_ConfigChannel>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <MX_TIM14_Init+0x82>
			!= HAL_OK) {
		Error_Handler();
 80010da:	f001 f903 	bl	80022e4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM14_Init 2 */

	/* USER CODE END TIM14_Init 2 */
	HAL_TIM_MspPostInit(&htim14);
 80010de:	4803      	ldr	r0, [pc, #12]	@ (80010ec <MX_TIM14_Init+0x90>)
 80010e0:	f001 fcba 	bl	8002a58 <HAL_TIM_MspPostInit>

}
 80010e4:	bf00      	nop
 80010e6:	3720      	adds	r7, #32
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	24000750 	.word	0x24000750
 80010f0:	40002000 	.word	0x40002000

080010f4 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80010f8:	4b24      	ldr	r3, [pc, #144]	@ (800118c <MX_USART1_UART_Init+0x98>)
 80010fa:	4a25      	ldr	r2, [pc, #148]	@ (8001190 <MX_USART1_UART_Init+0x9c>)
 80010fc:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 111111;
 80010fe:	4b23      	ldr	r3, [pc, #140]	@ (800118c <MX_USART1_UART_Init+0x98>)
 8001100:	4a24      	ldr	r2, [pc, #144]	@ (8001194 <MX_USART1_UART_Init+0xa0>)
 8001102:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001104:	4b21      	ldr	r3, [pc, #132]	@ (800118c <MX_USART1_UART_Init+0x98>)
 8001106:	2200      	movs	r2, #0
 8001108:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 800110a:	4b20      	ldr	r3, [pc, #128]	@ (800118c <MX_USART1_UART_Init+0x98>)
 800110c:	2200      	movs	r2, #0
 800110e:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001110:	4b1e      	ldr	r3, [pc, #120]	@ (800118c <MX_USART1_UART_Init+0x98>)
 8001112:	2200      	movs	r2, #0
 8001114:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001116:	4b1d      	ldr	r3, [pc, #116]	@ (800118c <MX_USART1_UART_Init+0x98>)
 8001118:	220c      	movs	r2, #12
 800111a:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800111c:	4b1b      	ldr	r3, [pc, #108]	@ (800118c <MX_USART1_UART_Init+0x98>)
 800111e:	2200      	movs	r2, #0
 8001120:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001122:	4b1a      	ldr	r3, [pc, #104]	@ (800118c <MX_USART1_UART_Init+0x98>)
 8001124:	2200      	movs	r2, #0
 8001126:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001128:	4b18      	ldr	r3, [pc, #96]	@ (800118c <MX_USART1_UART_Init+0x98>)
 800112a:	2200      	movs	r2, #0
 800112c:	621a      	str	r2, [r3, #32]
	huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800112e:	4b17      	ldr	r3, [pc, #92]	@ (800118c <MX_USART1_UART_Init+0x98>)
 8001130:	2200      	movs	r2, #0
 8001132:	625a      	str	r2, [r3, #36]	@ 0x24
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8001134:	4b15      	ldr	r3, [pc, #84]	@ (800118c <MX_USART1_UART_Init+0x98>)
 8001136:	2220      	movs	r2, #32
 8001138:	629a      	str	r2, [r3, #40]	@ 0x28
	huart1.AdvancedInit.DMADisableonRxError =
 800113a:	4b14      	ldr	r3, [pc, #80]	@ (800118c <MX_USART1_UART_Init+0x98>)
 800113c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001140:	641a      	str	r2, [r3, #64]	@ 0x40
			UART_ADVFEATURE_DMA_DISABLEONRXERROR;
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8001142:	4812      	ldr	r0, [pc, #72]	@ (800118c <MX_USART1_UART_Init+0x98>)
 8001144:	f010 ffa2 	bl	801208c <HAL_UART_Init>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <MX_USART1_UART_Init+0x5e>
		Error_Handler();
 800114e:	f001 f8c9 	bl	80022e4 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8)
 8001152:	2100      	movs	r1, #0
 8001154:	480d      	ldr	r0, [pc, #52]	@ (800118c <MX_USART1_UART_Init+0x98>)
 8001156:	f012 febc 	bl	8013ed2 <HAL_UARTEx_SetTxFifoThreshold>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <MX_USART1_UART_Init+0x70>
			!= HAL_OK) {
		Error_Handler();
 8001160:	f001 f8c0 	bl	80022e4 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8)
 8001164:	2100      	movs	r1, #0
 8001166:	4809      	ldr	r0, [pc, #36]	@ (800118c <MX_USART1_UART_Init+0x98>)
 8001168:	f012 fef1 	bl	8013f4e <HAL_UARTEx_SetRxFifoThreshold>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <MX_USART1_UART_Init+0x82>
			!= HAL_OK) {
		Error_Handler();
 8001172:	f001 f8b7 	bl	80022e4 <Error_Handler>
	}
	if (HAL_UARTEx_EnableFifoMode(&huart1) != HAL_OK) {
 8001176:	4805      	ldr	r0, [pc, #20]	@ (800118c <MX_USART1_UART_Init+0x98>)
 8001178:	f012 fe70 	bl	8013e5c <HAL_UARTEx_EnableFifoMode>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <MX_USART1_UART_Init+0x92>
		Error_Handler();
 8001182:	f001 f8af 	bl	80022e4 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8001186:	bf00      	nop
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	2400079c 	.word	0x2400079c
 8001190:	40011000 	.word	0x40011000
 8001194:	0001b207 	.word	0x0001b207

08001198 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 800119e:	4b19      	ldr	r3, [pc, #100]	@ (8001204 <MX_DMA_Init+0x6c>)
 80011a0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80011a4:	4a17      	ldr	r2, [pc, #92]	@ (8001204 <MX_DMA_Init+0x6c>)
 80011a6:	f043 0301 	orr.w	r3, r3, #1
 80011aa:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80011ae:	4b15      	ldr	r3, [pc, #84]	@ (8001204 <MX_DMA_Init+0x6c>)
 80011b0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80011b4:	f003 0301 	and.w	r3, r3, #1
 80011b8:	607b      	str	r3, [r7, #4]
 80011ba:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_DMA2_CLK_ENABLE();
 80011bc:	4b11      	ldr	r3, [pc, #68]	@ (8001204 <MX_DMA_Init+0x6c>)
 80011be:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80011c2:	4a10      	ldr	r2, [pc, #64]	@ (8001204 <MX_DMA_Init+0x6c>)
 80011c4:	f043 0302 	orr.w	r3, r3, #2
 80011c8:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80011cc:	4b0d      	ldr	r3, [pc, #52]	@ (8001204 <MX_DMA_Init+0x6c>)
 80011ce:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80011d2:	f003 0302 	and.w	r3, r3, #2
 80011d6:	603b      	str	r3, [r7, #0]
 80011d8:	683b      	ldr	r3, [r7, #0]

	/* DMA interrupt init */
	/* DMA1_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80011da:	2200      	movs	r2, #0
 80011dc:	2100      	movs	r1, #0
 80011de:	200b      	movs	r0, #11
 80011e0:	f002 fa8f 	bl	8003702 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80011e4:	200b      	movs	r0, #11
 80011e6:	f002 faa6 	bl	8003736 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80011ea:	2200      	movs	r2, #0
 80011ec:	2100      	movs	r1, #0
 80011ee:	2038      	movs	r0, #56	@ 0x38
 80011f0:	f002 fa87 	bl	8003702 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80011f4:	2038      	movs	r0, #56	@ 0x38
 80011f6:	f002 fa9e 	bl	8003736 <HAL_NVIC_EnableIRQ>

}
 80011fa:	bf00      	nop
 80011fc:	3708      	adds	r7, #8
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	58024400 	.word	0x58024400

08001208 <MX_MDMA_Init>:

/**
 * Enable MDMA controller clock
 */
static void MX_MDMA_Init(void) {
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0

	/* MDMA controller clock enable */
	__HAL_RCC_MDMA_CLK_ENABLE();
 800120e:	4b0d      	ldr	r3, [pc, #52]	@ (8001244 <MX_MDMA_Init+0x3c>)
 8001210:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001214:	4a0b      	ldr	r2, [pc, #44]	@ (8001244 <MX_MDMA_Init+0x3c>)
 8001216:	f043 0301 	orr.w	r3, r3, #1
 800121a:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 800121e:	4b09      	ldr	r3, [pc, #36]	@ (8001244 <MX_MDMA_Init+0x3c>)
 8001220:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001224:	f003 0301 	and.w	r3, r3, #1
 8001228:	607b      	str	r3, [r7, #4]
 800122a:	687b      	ldr	r3, [r7, #4]
	/* Local variables */

	/* MDMA interrupt initialization */
	/* MDMA_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(MDMA_IRQn, 0, 0);
 800122c:	2200      	movs	r2, #0
 800122e:	2100      	movs	r1, #0
 8001230:	207a      	movs	r0, #122	@ 0x7a
 8001232:	f002 fa66 	bl	8003702 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(MDMA_IRQn);
 8001236:	207a      	movs	r0, #122	@ 0x7a
 8001238:	f002 fa7d 	bl	8003736 <HAL_NVIC_EnableIRQ>

}
 800123c:	bf00      	nop
 800123e:	3708      	adds	r7, #8
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	58024400 	.word	0x58024400

08001248 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001248:	b580      	push	{r7, lr}
 800124a:	b08c      	sub	sp, #48	@ 0x30
 800124c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800124e:	f107 031c 	add.w	r3, r7, #28
 8001252:	2200      	movs	r2, #0
 8001254:	601a      	str	r2, [r3, #0]
 8001256:	605a      	str	r2, [r3, #4]
 8001258:	609a      	str	r2, [r3, #8]
 800125a:	60da      	str	r2, [r3, #12]
 800125c:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */

	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 800125e:	4b52      	ldr	r3, [pc, #328]	@ (80013a8 <MX_GPIO_Init+0x160>)
 8001260:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001264:	4a50      	ldr	r2, [pc, #320]	@ (80013a8 <MX_GPIO_Init+0x160>)
 8001266:	f043 0310 	orr.w	r3, r3, #16
 800126a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800126e:	4b4e      	ldr	r3, [pc, #312]	@ (80013a8 <MX_GPIO_Init+0x160>)
 8001270:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001274:	f003 0310 	and.w	r3, r3, #16
 8001278:	61bb      	str	r3, [r7, #24]
 800127a:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800127c:	4b4a      	ldr	r3, [pc, #296]	@ (80013a8 <MX_GPIO_Init+0x160>)
 800127e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001282:	4a49      	ldr	r2, [pc, #292]	@ (80013a8 <MX_GPIO_Init+0x160>)
 8001284:	f043 0304 	orr.w	r3, r3, #4
 8001288:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800128c:	4b46      	ldr	r3, [pc, #280]	@ (80013a8 <MX_GPIO_Init+0x160>)
 800128e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001292:	f003 0304 	and.w	r3, r3, #4
 8001296:	617b      	str	r3, [r7, #20]
 8001298:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800129a:	4b43      	ldr	r3, [pc, #268]	@ (80013a8 <MX_GPIO_Init+0x160>)
 800129c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012a0:	4a41      	ldr	r2, [pc, #260]	@ (80013a8 <MX_GPIO_Init+0x160>)
 80012a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80012a6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012aa:	4b3f      	ldr	r3, [pc, #252]	@ (80013a8 <MX_GPIO_Init+0x160>)
 80012ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012b4:	613b      	str	r3, [r7, #16]
 80012b6:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80012b8:	4b3b      	ldr	r3, [pc, #236]	@ (80013a8 <MX_GPIO_Init+0x160>)
 80012ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012be:	4a3a      	ldr	r2, [pc, #232]	@ (80013a8 <MX_GPIO_Init+0x160>)
 80012c0:	f043 0301 	orr.w	r3, r3, #1
 80012c4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012c8:	4b37      	ldr	r3, [pc, #220]	@ (80013a8 <MX_GPIO_Init+0x160>)
 80012ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012ce:	f003 0301 	and.w	r3, r3, #1
 80012d2:	60fb      	str	r3, [r7, #12]
 80012d4:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80012d6:	4b34      	ldr	r3, [pc, #208]	@ (80013a8 <MX_GPIO_Init+0x160>)
 80012d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012dc:	4a32      	ldr	r2, [pc, #200]	@ (80013a8 <MX_GPIO_Init+0x160>)
 80012de:	f043 0302 	orr.w	r3, r3, #2
 80012e2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012e6:	4b30      	ldr	r3, [pc, #192]	@ (80013a8 <MX_GPIO_Init+0x160>)
 80012e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012ec:	f003 0302 	and.w	r3, r3, #2
 80012f0:	60bb      	str	r3, [r7, #8]
 80012f2:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80012f4:	4b2c      	ldr	r3, [pc, #176]	@ (80013a8 <MX_GPIO_Init+0x160>)
 80012f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012fa:	4a2b      	ldr	r2, [pc, #172]	@ (80013a8 <MX_GPIO_Init+0x160>)
 80012fc:	f043 0308 	orr.w	r3, r3, #8
 8001300:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001304:	4b28      	ldr	r3, [pc, #160]	@ (80013a8 <MX_GPIO_Init+0x160>)
 8001306:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800130a:	f003 0308 	and.w	r3, r3, #8
 800130e:	607b      	str	r3, [r7, #4]
 8001310:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, ADC_CS_Pin | INA_CS_Pin, GPIO_PIN_SET);
 8001312:	2201      	movs	r2, #1
 8001314:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8001318:	4824      	ldr	r0, [pc, #144]	@ (80013ac <MX_GPIO_Init+0x164>)
 800131a:	f006 fa35 	bl	8007788 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 800131e:	2201      	movs	r2, #1
 8001320:	2108      	movs	r1, #8
 8001322:	4823      	ldr	r0, [pc, #140]	@ (80013b0 <MX_GPIO_Init+0x168>)
 8001324:	f006 fa30 	bl	8007788 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);
 8001328:	2200      	movs	r2, #0
 800132a:	2101      	movs	r1, #1
 800132c:	4821      	ldr	r0, [pc, #132]	@ (80013b4 <MX_GPIO_Init+0x16c>)
 800132e:	f006 fa2b 	bl	8007788 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : ADC_CS_Pin INA_CS_Pin */
	GPIO_InitStruct.Pin = ADC_CS_Pin | INA_CS_Pin;
 8001332:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001336:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001338:	2301      	movs	r3, #1
 800133a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133c:	2300      	movs	r3, #0
 800133e:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001340:	2300      	movs	r3, #0
 8001342:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001344:	f107 031c 	add.w	r3, r7, #28
 8001348:	4619      	mov	r1, r3
 800134a:	4818      	ldr	r0, [pc, #96]	@ (80013ac <MX_GPIO_Init+0x164>)
 800134c:	f006 f86c 	bl	8007428 <HAL_GPIO_Init>

	/*Configure GPIO pin : PC0 */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001350:	2301      	movs	r3, #1
 8001352:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001354:	2300      	movs	r3, #0
 8001356:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001358:	2300      	movs	r3, #0
 800135a:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800135c:	f107 031c 	add.w	r3, r7, #28
 8001360:	4619      	mov	r1, r3
 8001362:	4812      	ldr	r0, [pc, #72]	@ (80013ac <MX_GPIO_Init+0x164>)
 8001364:	f006 f860 	bl	8007428 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA3 */
	GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001368:	2308      	movs	r3, #8
 800136a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800136c:	2301      	movs	r3, #1
 800136e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001370:	2300      	movs	r3, #0
 8001372:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001374:	2300      	movs	r3, #0
 8001376:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001378:	f107 031c 	add.w	r3, r7, #28
 800137c:	4619      	mov	r1, r3
 800137e:	480c      	ldr	r0, [pc, #48]	@ (80013b0 <MX_GPIO_Init+0x168>)
 8001380:	f006 f852 	bl	8007428 <HAL_GPIO_Init>

	/*Configure GPIO pin : PD0 */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001384:	2301      	movs	r3, #1
 8001386:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001388:	2301      	movs	r3, #1
 800138a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138c:	2300      	movs	r3, #0
 800138e:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001390:	2300      	movs	r3, #0
 8001392:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001394:	f107 031c 	add.w	r3, r7, #28
 8001398:	4619      	mov	r1, r3
 800139a:	4806      	ldr	r0, [pc, #24]	@ (80013b4 <MX_GPIO_Init+0x16c>)
 800139c:	f006 f844 	bl	8007428 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */

	/* USER CODE END MX_GPIO_Init_2 */
}
 80013a0:	bf00      	nop
 80013a2:	3730      	adds	r7, #48	@ 0x30
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	58024400 	.word	0x58024400
 80013ac:	58020800 	.word	0x58020800
 80013b0:	58020000 	.word	0x58020000
 80013b4:	58020c00 	.word	0x58020c00

080013b8 <NetworkTimeout>:

/* USER CODE BEGIN 4 */

// Watchdog Fucntions
void NetworkTimeout() {
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
	// TEMPORARY: DISABLE THIS FOR TESTING
	return;
 80013bc:	bf00      	nop
			// DEBUG
			sprintf(ssd_msg, "Network Dead!\n");
			WriteDebug(ssd_msg, strlen(ssd_msg));
		}
	}
}
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
	...

080013c8 <SCH_XBeeRX>:

// ------------------------------------------------------------ SCHEDULING FUNCTIONS -- //
void SCH_XBeeRX() {
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
	uint8_t *packet;
	uint16_t byte_num;
	if (XBEE_RXPacket(&hxbee, &packet, &byte_num)) {
 80013ce:	1cba      	adds	r2, r7, #2
 80013d0:	1d3b      	adds	r3, r7, #4
 80013d2:	4619      	mov	r1, r3
 80013d4:	4876      	ldr	r0, [pc, #472]	@ (80015b0 <SCH_XBeeRX+0x1e8>)
 80013d6:	f014 f9f1 	bl	80157bc <XBEE_RXPacket>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	f040 80dd 	bne.w	800159c <SCH_XBeeRX+0x1d4>
		return;
	}

	// Network active, reset the watchdog
	if (wdog_network >= WDOG_NETWORK_CUTOFF) {
 80013e2:	4b74      	ldr	r3, [pc, #464]	@ (80015b4 <SCH_XBeeRX+0x1ec>)
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	2b03      	cmp	r3, #3
 80013e8:	d90c      	bls.n	8001404 <SCH_XBeeRX+0x3c>
		//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET); // Motor_en
		// DEBUG
		sprintf(ssd_msg, "Network Alive!\n");
 80013ea:	4973      	ldr	r1, [pc, #460]	@ (80015b8 <SCH_XBeeRX+0x1f0>)
 80013ec:	4873      	ldr	r0, [pc, #460]	@ (80015bc <SCH_XBeeRX+0x1f4>)
 80013ee:	f017 fecb 	bl	8019188 <siprintf>
		WriteDebug(ssd_msg, strlen(ssd_msg));
 80013f2:	4872      	ldr	r0, [pc, #456]	@ (80015bc <SCH_XBeeRX+0x1f4>)
 80013f4:	f7fe ffc4 	bl	8000380 <strlen>
 80013f8:	4603      	mov	r3, r0
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	4619      	mov	r1, r3
 80013fe:	486f      	ldr	r0, [pc, #444]	@ (80015bc <SCH_XBeeRX+0x1f4>)
 8001400:	f000 fd73 	bl	8001eea <WriteDebug>
	}
	wdog_network = 0;
 8001404:	4b6b      	ldr	r3, [pc, #428]	@ (80015b4 <SCH_XBeeRX+0x1ec>)
 8001406:	2200      	movs	r2, #0
 8001408:	701a      	strb	r2, [r3, #0]

	// Parse the packet
	if (byte_num == 0xFFFF) {
 800140a:	887b      	ldrh	r3, [r7, #2]
 800140c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001410:	4293      	cmp	r3, r2
 8001412:	f040 80c4 	bne.w	800159e <SCH_XBeeRX+0x1d6>
		// Configuration Packet
		if (packet[1] != jpeg_quality) {
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	3301      	adds	r3, #1
 800141a:	781a      	ldrb	r2, [r3, #0]
 800141c:	4b68      	ldr	r3, [pc, #416]	@ (80015c0 <SCH_XBeeRX+0x1f8>)
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	429a      	cmp	r2, r3
 8001422:	d027      	beq.n	8001474 <SCH_XBeeRX+0xac>
			// JPEG QUALITY CHANGED
			jpeg_quality = packet[1];
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	785a      	ldrb	r2, [r3, #1]
 8001428:	4b65      	ldr	r3, [pc, #404]	@ (80015c0 <SCH_XBeeRX+0x1f8>)
 800142a:	701a      	strb	r2, [r3, #0]
			// Reconfigure the JPEG HW
			JPEG_ConfTypeDef *jpeg_config;
			jpeg_config->ColorSpace = JPEG_GRAYSCALE_COLORSPACE;
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	2200      	movs	r2, #0
 8001430:	601a      	str	r2, [r3, #0]
			jpeg_config->ImageWidth = jpeg_mcu_widths[jpeg_quality] * 8;
 8001432:	4b63      	ldr	r3, [pc, #396]	@ (80015c0 <SCH_XBeeRX+0x1f8>)
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	461a      	mov	r2, r3
 8001438:	4b62      	ldr	r3, [pc, #392]	@ (80015c4 <SCH_XBeeRX+0x1fc>)
 800143a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800143e:	00db      	lsls	r3, r3, #3
 8001440:	461a      	mov	r2, r3
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	60da      	str	r2, [r3, #12]
			jpeg_config->ImageHeight = jpeg_mcu_heights[jpeg_quality] * 8;
 8001446:	4b5e      	ldr	r3, [pc, #376]	@ (80015c0 <SCH_XBeeRX+0x1f8>)
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	461a      	mov	r2, r3
 800144c:	4b5e      	ldr	r3, [pc, #376]	@ (80015c8 <SCH_XBeeRX+0x200>)
 800144e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001452:	00db      	lsls	r3, r3, #3
 8001454:	461a      	mov	r2, r3
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	609a      	str	r2, [r3, #8]
			jpeg_config->ImageQuality = JPEG_QUALITY;
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	2214      	movs	r2, #20
 800145e:	611a      	str	r2, [r3, #16]
			HAL_JPEG_ConfigEncoding(&hjpeg, jpeg_config);
 8001460:	68f9      	ldr	r1, [r7, #12]
 8001462:	485a      	ldr	r0, [pc, #360]	@ (80015cc <SCH_XBeeRX+0x204>)
 8001464:	f007 fef8 	bl	8009258 <HAL_JPEG_ConfigEncoding>

			jpeg_state = 0;	// Invalidate current JPEG
 8001468:	4b59      	ldr	r3, [pc, #356]	@ (80015d0 <SCH_XBeeRX+0x208>)
 800146a:	2200      	movs	r2, #0
 800146c:	701a      	strb	r2, [r3, #0]
			tx_state = 2;	// Flag a header re-transmit
 800146e:	4b59      	ldr	r3, [pc, #356]	@ (80015d4 <SCH_XBeeRX+0x20c>)
 8001470:	2202      	movs	r2, #2
 8001472:	701a      	strb	r2, [r3, #0]
		}

		// LIGHTS (0-2000)
		TIM1->CCR4 = packet[3] * 500; // L1
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	3303      	adds	r3, #3
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	461a      	mov	r2, r3
 800147c:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001480:	fb03 f202 	mul.w	r2, r3, r2
 8001484:	4b54      	ldr	r3, [pc, #336]	@ (80015d8 <SCH_XBeeRX+0x210>)
 8001486:	641a      	str	r2, [r3, #64]	@ 0x40
		TIM3->CCR4 = packet[4] * 500; // L2
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	3304      	adds	r3, #4
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	461a      	mov	r2, r3
 8001490:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001494:	fb03 f202 	mul.w	r2, r3, r2
 8001498:	4b50      	ldr	r3, [pc, #320]	@ (80015dc <SCH_XBeeRX+0x214>)
 800149a:	641a      	str	r2, [r3, #64]	@ 0x40
		TIM3->CCR3 = packet[5] * 500; // L3
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	3305      	adds	r3, #5
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	461a      	mov	r2, r3
 80014a4:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80014a8:	fb03 f202 	mul.w	r2, r3, r2
 80014ac:	4b4b      	ldr	r3, [pc, #300]	@ (80015dc <SCH_XBeeRX+0x214>)
 80014ae:	63da      	str	r2, [r3, #60]	@ 0x3c
		TIM2->CCR4 = packet[6] * 500; // L4
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	3306      	adds	r3, #6
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	461a      	mov	r2, r3
 80014b8:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80014bc:	fb03 f202 	mul.w	r2, r3, r2
 80014c0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80014c4:	641a      	str	r2, [r3, #64]	@ 0x40

		// TANK CONTROL (THIS IS EXTREMELY IMPORTANT)
		uint8_t motor1_dir = packet[0x0A];	// DIR_LEFT
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	7a9b      	ldrb	r3, [r3, #10]
 80014ca:	72fb      	strb	r3, [r7, #11]
		uint8_t motor2_dir = packet[0x09];	// DIR_RIGHT
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	7a5b      	ldrb	r3, [r3, #9]
 80014d0:	72bb      	strb	r3, [r7, #10]

		// Use the direction to set the desired power output
		// 0-255 >> REMAP >> 0-2000
		if (motor1_dir)
 80014d2:	7afb      	ldrb	r3, [r7, #11]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d018      	beq.n	800150a <SCH_XBeeRX+0x142>
			ctrl_input[0] = -((float) packet[0x08]) * 20.0 / 2.55;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	3308      	adds	r3, #8
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	ee07 3a90 	vmov	s15, r3
 80014e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014e6:	eef1 7a67 	vneg.f32	s15, s15
 80014ea:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80014ee:	eeb3 6b04 	vmov.f64	d6, #52	@ 0x41a00000  20.0
 80014f2:	ee27 6b06 	vmul.f64	d6, d7, d6
 80014f6:	ed9f 5b2c 	vldr	d5, [pc, #176]	@ 80015a8 <SCH_XBeeRX+0x1e0>
 80014fa:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80014fe:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001502:	4b37      	ldr	r3, [pc, #220]	@ (80015e0 <SCH_XBeeRX+0x218>)
 8001504:	edc3 7a00 	vstr	s15, [r3]
 8001508:	e015      	b.n	8001536 <SCH_XBeeRX+0x16e>
		else
			ctrl_input[0] = ((float) packet[0x08]) * 20.0 / 2.55;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	3308      	adds	r3, #8
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	ee07 3a90 	vmov	s15, r3
 8001514:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001518:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800151c:	eeb3 6b04 	vmov.f64	d6, #52	@ 0x41a00000  20.0
 8001520:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001524:	ed9f 5b20 	vldr	d5, [pc, #128]	@ 80015a8 <SCH_XBeeRX+0x1e0>
 8001528:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800152c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001530:	4b2b      	ldr	r3, [pc, #172]	@ (80015e0 <SCH_XBeeRX+0x218>)
 8001532:	edc3 7a00 	vstr	s15, [r3]

		if (motor2_dir)
 8001536:	7abb      	ldrb	r3, [r7, #10]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d016      	beq.n	800156a <SCH_XBeeRX+0x1a2>
			ctrl_input[1] = ((float) packet[0x07]) * 20.0 / 2.55;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	3307      	adds	r3, #7
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	ee07 3a90 	vmov	s15, r3
 8001546:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800154a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800154e:	eeb3 6b04 	vmov.f64	d6, #52	@ 0x41a00000  20.0
 8001552:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001556:	ed9f 5b14 	vldr	d5, [pc, #80]	@ 80015a8 <SCH_XBeeRX+0x1e0>
 800155a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800155e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001562:	4b1f      	ldr	r3, [pc, #124]	@ (80015e0 <SCH_XBeeRX+0x218>)
 8001564:	edc3 7a01 	vstr	s15, [r3, #4]
 8001568:	e019      	b.n	800159e <SCH_XBeeRX+0x1d6>
		else
			ctrl_input[1] = -((float) packet[0x07]) * 20.0 / 2.55;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	3307      	adds	r3, #7
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	ee07 3a90 	vmov	s15, r3
 8001574:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001578:	eef1 7a67 	vneg.f32	s15, s15
 800157c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001580:	eeb3 6b04 	vmov.f64	d6, #52	@ 0x41a00000  20.0
 8001584:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001588:	ed9f 5b07 	vldr	d5, [pc, #28]	@ 80015a8 <SCH_XBeeRX+0x1e0>
 800158c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001590:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001594:	4b12      	ldr	r3, [pc, #72]	@ (80015e0 <SCH_XBeeRX+0x218>)
 8001596:	edc3 7a01 	vstr	s15, [r3, #4]
 800159a:	e000      	b.n	800159e <SCH_XBeeRX+0x1d6>
		return;
 800159c:	bf00      	nop
	}
}
 800159e:	3710      	adds	r7, #16
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	f3af 8000 	nop.w
 80015a8:	66666666 	.word	0x66666666
 80015ac:	40046666 	.word	0x40046666
 80015b0:	24025d38 	.word	0x24025d38
 80015b4:	240008a8 	.word	0x240008a8
 80015b8:	0801b204 	.word	0x0801b204
 80015bc:	240008dc 	.word	0x240008dc
 80015c0:	24025d34 	.word	0x24025d34
 80015c4:	24000004 	.word	0x24000004
 80015c8:	2400000c 	.word	0x2400000c
 80015cc:	2400041c 	.word	0x2400041c
 80015d0:	24025d2e 	.word	0x24025d2e
 80015d4:	24025d5e 	.word	0x24025d5e
 80015d8:	40010000 	.word	0x40010000
 80015dc:	40000400 	.word	0x40000400
 80015e0:	240008c4 	.word	0x240008c4

080015e4 <SCH_XBeeTX>:

void SCH_XBeeTX() {
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0

	// Early exit if the JPEG isn't ready, nothing to transmit
	if (jpeg_state != 2)
 80015ea:	4b44      	ldr	r3, [pc, #272]	@ (80016fc <SCH_XBeeTX+0x118>)
 80015ec:	781b      	ldrb	r3, [r3, #0]
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	2b02      	cmp	r3, #2
 80015f2:	d17a      	bne.n	80016ea <SCH_XBeeTX+0x106>
		return;

	// Get delta time, there has to be a delay for the TX to work properly
	uint32_t delta_t = DeltaTime(sch_tim_tx);
 80015f4:	4b42      	ldr	r3, [pc, #264]	@ (8001700 <SCH_XBeeTX+0x11c>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4618      	mov	r0, r3
 80015fa:	f000 fc5f 	bl	8001ebc <DeltaTime>
 80015fe:	6078      	str	r0, [r7, #4]
	if (delta_t < SCH_MS_TX)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2b04      	cmp	r3, #4
 8001604:	d973      	bls.n	80016ee <SCH_XBeeTX+0x10a>
		return;

	if (tx_state == 0)
 8001606:	4b3f      	ldr	r3, [pc, #252]	@ (8001704 <SCH_XBeeTX+0x120>)
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	b2db      	uxtb	r3, r3
 800160c:	2b00      	cmp	r3, #0
 800160e:	d102      	bne.n	8001616 <SCH_XBeeTX+0x32>
		tx_state = 1;	// If Idle, Flag as transmitting IMAGE
 8001610:	4b3c      	ldr	r3, [pc, #240]	@ (8001704 <SCH_XBeeTX+0x120>)
 8001612:	2201      	movs	r2, #1
 8001614:	701a      	strb	r2, [r3, #0]

	if (tx_state == 1) {
 8001616:	4b3b      	ldr	r3, [pc, #236]	@ (8001704 <SCH_XBeeTX+0x120>)
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	b2db      	uxtb	r3, r3
 800161c:	2b01      	cmp	r3, #1
 800161e:	d112      	bne.n	8001646 <SCH_XBeeTX+0x62>
		// Send an IMAGE packet
		// Image packet numbers:  0000, 0001, 0002, ...
		if (XBEE_TXPacket(&hxbee,
				jpeg_out + tx_byte * UART_TXSIZE + JPEG_HEADERSIZE, tx_byte)) {
 8001620:	4b39      	ldr	r3, [pc, #228]	@ (8001708 <SCH_XBeeTX+0x124>)
 8001622:	881b      	ldrh	r3, [r3, #0]
 8001624:	b29b      	uxth	r3, r3
 8001626:	019b      	lsls	r3, r3, #6
 8001628:	f203 230e 	addw	r3, r3, #526	@ 0x20e
		if (XBEE_TXPacket(&hxbee,
 800162c:	4a37      	ldr	r2, [pc, #220]	@ (800170c <SCH_XBeeTX+0x128>)
 800162e:	4413      	add	r3, r2
 8001630:	4a35      	ldr	r2, [pc, #212]	@ (8001708 <SCH_XBeeTX+0x124>)
 8001632:	8812      	ldrh	r2, [r2, #0]
 8001634:	b292      	uxth	r2, r2
 8001636:	4619      	mov	r1, r3
 8001638:	4835      	ldr	r0, [pc, #212]	@ (8001710 <SCH_XBeeTX+0x12c>)
 800163a:	f014 f92f 	bl	801589c <XBEE_TXPacket>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d01a      	beq.n	800167a <SCH_XBeeTX+0x96>
			return;
 8001644:	e056      	b.n	80016f4 <SCH_XBeeTX+0x110>
		}
	} else if (tx_state == 2) {
 8001646:	4b2f      	ldr	r3, [pc, #188]	@ (8001704 <SCH_XBeeTX+0x120>)
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	b2db      	uxtb	r3, r3
 800164c:	2b02      	cmp	r3, #2
 800164e:	d114      	bne.n	800167a <SCH_XBeeTX+0x96>
		// Send a HEADER packet
		// Header packet numbers: FFFE, FFFD, FFFC, ...
		if (XBEE_TXPacket(&hxbee, jpeg_out + tx_byte * UART_TXSIZE,
 8001650:	4b2d      	ldr	r3, [pc, #180]	@ (8001708 <SCH_XBeeTX+0x124>)
 8001652:	881b      	ldrh	r3, [r3, #0]
 8001654:	b29b      	uxth	r3, r3
 8001656:	019b      	lsls	r3, r3, #6
 8001658:	461a      	mov	r2, r3
 800165a:	4b2c      	ldr	r3, [pc, #176]	@ (800170c <SCH_XBeeTX+0x128>)
 800165c:	18d1      	adds	r1, r2, r3
 800165e:	4b2a      	ldr	r3, [pc, #168]	@ (8001708 <SCH_XBeeTX+0x124>)
 8001660:	881b      	ldrh	r3, [r3, #0]
 8001662:	b29a      	uxth	r2, r3
 8001664:	f06f 0301 	mvn.w	r3, #1
 8001668:	1a9b      	subs	r3, r3, r2
 800166a:	b29b      	uxth	r3, r3
 800166c:	461a      	mov	r2, r3
 800166e:	4828      	ldr	r0, [pc, #160]	@ (8001710 <SCH_XBeeTX+0x12c>)
 8001670:	f014 f914 	bl	801589c <XBEE_TXPacket>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d13b      	bne.n	80016f2 <SCH_XBeeTX+0x10e>
			return;
		}
	}

	// Update the timer for the next DT period
	sch_tim_tx = HAL_GetTick();
 800167a:	f001 ff2b 	bl	80034d4 <HAL_GetTick>
 800167e:	4603      	mov	r3, r0
 8001680:	4a1f      	ldr	r2, [pc, #124]	@ (8001700 <SCH_XBeeTX+0x11c>)
 8001682:	6013      	str	r3, [r2, #0]
	tx_byte++;
 8001684:	4b20      	ldr	r3, [pc, #128]	@ (8001708 <SCH_XBeeTX+0x124>)
 8001686:	881b      	ldrh	r3, [r3, #0]
 8001688:	b29b      	uxth	r3, r3
 800168a:	3301      	adds	r3, #1
 800168c:	b29a      	uxth	r2, r3
 800168e:	4b1e      	ldr	r3, [pc, #120]	@ (8001708 <SCH_XBeeTX+0x124>)
 8001690:	801a      	strh	r2, [r3, #0]

	// IMAGE Transmission complete
	if (tx_state == 1
 8001692:	4b1c      	ldr	r3, [pc, #112]	@ (8001704 <SCH_XBeeTX+0x120>)
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	b2db      	uxtb	r3, r3
 8001698:	2b01      	cmp	r3, #1
 800169a:	d115      	bne.n	80016c8 <SCH_XBeeTX+0xe4>
			&& tx_byte > (jpeg_size - JPEG_HEADERSIZE) / UART_TXSIZE + 1) {
 800169c:	4b1a      	ldr	r3, [pc, #104]	@ (8001708 <SCH_XBeeTX+0x124>)
 800169e:	881b      	ldrh	r3, [r3, #0]
 80016a0:	b29b      	uxth	r3, r3
 80016a2:	461a      	mov	r2, r3
 80016a4:	4b1b      	ldr	r3, [pc, #108]	@ (8001714 <SCH_XBeeTX+0x130>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f2a3 230e 	subw	r3, r3, #526	@ 0x20e
 80016ac:	099b      	lsrs	r3, r3, #6
 80016ae:	3301      	adds	r3, #1
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d909      	bls.n	80016c8 <SCH_XBeeTX+0xe4>
		tx_state = 0;	// Flag the radio as idle
 80016b4:	4b13      	ldr	r3, [pc, #76]	@ (8001704 <SCH_XBeeTX+0x120>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	701a      	strb	r2, [r3, #0]
		tx_byte = 0;	// Reset the packet counter to 0
 80016ba:	4b13      	ldr	r3, [pc, #76]	@ (8001708 <SCH_XBeeTX+0x124>)
 80016bc:	2200      	movs	r2, #0
 80016be:	801a      	strh	r2, [r3, #0]
		jpeg_state = 0;	// Flag the JPEG as idle
 80016c0:	4b0e      	ldr	r3, [pc, #56]	@ (80016fc <SCH_XBeeTX+0x118>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	701a      	strb	r2, [r3, #0]
		return;
 80016c6:	e015      	b.n	80016f4 <SCH_XBeeTX+0x110>
	}

	// HEADER Transmission complete
	if (tx_state == 2 && tx_byte > JPEG_HEADERSIZE / UART_TXSIZE + 1) {
 80016c8:	4b0e      	ldr	r3, [pc, #56]	@ (8001704 <SCH_XBeeTX+0x120>)
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	b2db      	uxtb	r3, r3
 80016ce:	2b02      	cmp	r3, #2
 80016d0:	d110      	bne.n	80016f4 <SCH_XBeeTX+0x110>
 80016d2:	4b0d      	ldr	r3, [pc, #52]	@ (8001708 <SCH_XBeeTX+0x124>)
 80016d4:	881b      	ldrh	r3, [r3, #0]
 80016d6:	b29b      	uxth	r3, r3
 80016d8:	2b09      	cmp	r3, #9
 80016da:	d90b      	bls.n	80016f4 <SCH_XBeeTX+0x110>
		tx_state = 0;	// Flag the radio as idle
 80016dc:	4b09      	ldr	r3, [pc, #36]	@ (8001704 <SCH_XBeeTX+0x120>)
 80016de:	2200      	movs	r2, #0
 80016e0:	701a      	strb	r2, [r3, #0]
		tx_byte = 0;	// Reset the packet counter to 0
 80016e2:	4b09      	ldr	r3, [pc, #36]	@ (8001708 <SCH_XBeeTX+0x124>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	801a      	strh	r2, [r3, #0]
		return;
 80016e8:	e004      	b.n	80016f4 <SCH_XBeeTX+0x110>
		return;
 80016ea:	bf00      	nop
 80016ec:	e002      	b.n	80016f4 <SCH_XBeeTX+0x110>
		return;
 80016ee:	bf00      	nop
 80016f0:	e000      	b.n	80016f4 <SCH_XBeeTX+0x110>
			return;
 80016f2:	bf00      	nop

//	for (uint16_t i = 0; i < ((jpeg_size - JPEG_HEADERSIZE) / UART_TXSIZE) + 1; i++) {
//		XBEE_TXPacket(&hxbee, jpeg_out + i*UART_TXSIZE + JPEG_HEADERSIZE, i);
//		HAL_Delay(5);
//	}
}
 80016f4:	3708      	adds	r7, #8
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	24025d2e 	.word	0x24025d2e
 8001700:	240008b4 	.word	0x240008b4
 8001704:	24025d5e 	.word	0x24025d5e
 8001708:	24025d5c 	.word	0x24025d5c
 800170c:	24013368 	.word	0x24013368
 8001710:	24025d38 	.word	0x24025d38
 8001714:	24025d30 	.word	0x24025d30

08001718 <SCH_CTRL>:

void SCH_CTRL() {
 8001718:	b580      	push	{r7, lr}
 800171a:	b086      	sub	sp, #24
 800171c:	af00      	add	r7, sp, #0
	uint32_t delta_t = DeltaTime(sch_tim_ctrl);
 800171e:	4bb2      	ldr	r3, [pc, #712]	@ (80019e8 <SCH_CTRL+0x2d0>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4618      	mov	r0, r3
 8001724:	f000 fbca 	bl	8001ebc <DeltaTime>
 8001728:	6138      	str	r0, [r7, #16]
	sch_tim_ctrl = HAL_GetTick();
 800172a:	f001 fed3 	bl	80034d4 <HAL_GetTick>
 800172e:	4603      	mov	r3, r0
 8001730:	4aad      	ldr	r2, [pc, #692]	@ (80019e8 <SCH_CTRL+0x2d0>)
 8001732:	6013      	str	r3, [r2, #0]

	float ctrl_override[2] = { 0, 0 };
 8001734:	f04f 0300 	mov.w	r3, #0
 8001738:	603b      	str	r3, [r7, #0]
 800173a:	f04f 0300 	mov.w	r3, #0
 800173e:	607b      	str	r3, [r7, #4]
	ctrl_override[0] = ctrl_input[0];
 8001740:	4baa      	ldr	r3, [pc, #680]	@ (80019ec <SCH_CTRL+0x2d4>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	603b      	str	r3, [r7, #0]
	ctrl_override[1] = ctrl_input[1];
 8001746:	4ba9      	ldr	r3, [pc, #676]	@ (80019ec <SCH_CTRL+0x2d4>)
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	607b      	str	r3, [r7, #4]

	if (error_overcurrent || error_undervolt) {
 800174c:	4ba8      	ldr	r3, [pc, #672]	@ (80019f0 <SCH_CTRL+0x2d8>)
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d103      	bne.n	800175c <SCH_CTRL+0x44>
 8001754:	4ba7      	ldr	r3, [pc, #668]	@ (80019f4 <SCH_CTRL+0x2dc>)
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d005      	beq.n	8001768 <SCH_CTRL+0x50>
		ctrl_override[0] = 0;
 800175c:	f04f 0300 	mov.w	r3, #0
 8001760:	603b      	str	r3, [r7, #0]
		ctrl_override[1] = 0;
 8001762:	f04f 0300 	mov.w	r3, #0
 8001766:	607b      	str	r3, [r7, #4]
	}

	// This is how much the power level of the motors can change right now
	float maxAllowablePwrDelta = CTRL_MAX_PWRDELTA_PERSECOND
			* (((float) delta_t) / 1000.0);
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	ee07 3a90 	vmov	s15, r3
 800176e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001772:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001776:	ed9f 5b98 	vldr	d5, [pc, #608]	@ 80019d8 <SCH_CTRL+0x2c0>
 800177a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800177e:	ed9f 6b98 	vldr	d6, [pc, #608]	@ 80019e0 <SCH_CTRL+0x2c8>
 8001782:	ee27 7b06 	vmul.f64	d7, d7, d6
	float maxAllowablePwrDelta = CTRL_MAX_PWRDELTA_PERSECOND
 8001786:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800178a:	edc7 7a03 	vstr	s15, [r7, #12]
	for (uint8_t i = 0; i < 2; i++) {
 800178e:	2300      	movs	r3, #0
 8001790:	75fb      	strb	r3, [r7, #23]
 8001792:	e0ef      	b.n	8001974 <SCH_CTRL+0x25c>
		// Correct the control signals if they somehow go out of bounds
		if (ctrl_override[i] > 2000.0)
 8001794:	7dfb      	ldrb	r3, [r7, #23]
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	3318      	adds	r3, #24
 800179a:	443b      	add	r3, r7
 800179c:	3b18      	subs	r3, #24
 800179e:	edd3 7a00 	vldr	s15, [r3]
 80017a2:	ed9f 7a95 	vldr	s14, [pc, #596]	@ 80019f8 <SCH_CTRL+0x2e0>
 80017a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017ae:	dd06      	ble.n	80017be <SCH_CTRL+0xa6>
			ctrl_override[i] = 2000.0;
 80017b0:	7dfb      	ldrb	r3, [r7, #23]
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	3318      	adds	r3, #24
 80017b6:	443b      	add	r3, r7
 80017b8:	3b18      	subs	r3, #24
 80017ba:	4a90      	ldr	r2, [pc, #576]	@ (80019fc <SCH_CTRL+0x2e4>)
 80017bc:	601a      	str	r2, [r3, #0]
		if (ctrl_override[i] < -2000.0)
 80017be:	7dfb      	ldrb	r3, [r7, #23]
 80017c0:	009b      	lsls	r3, r3, #2
 80017c2:	3318      	adds	r3, #24
 80017c4:	443b      	add	r3, r7
 80017c6:	3b18      	subs	r3, #24
 80017c8:	edd3 7a00 	vldr	s15, [r3]
 80017cc:	ed9f 7a8c 	vldr	s14, [pc, #560]	@ 8001a00 <SCH_CTRL+0x2e8>
 80017d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017d8:	d506      	bpl.n	80017e8 <SCH_CTRL+0xd0>
			ctrl_override[i] = -2000.0;
 80017da:	7dfb      	ldrb	r3, [r7, #23]
 80017dc:	009b      	lsls	r3, r3, #2
 80017de:	3318      	adds	r3, #24
 80017e0:	443b      	add	r3, r7
 80017e2:	3b18      	subs	r3, #24
 80017e4:	4a87      	ldr	r2, [pc, #540]	@ (8001a04 <SCH_CTRL+0x2ec>)
 80017e6:	601a      	str	r2, [r3, #0]

		float delta = ctrl_override[i] - ctrl_output[i];
 80017e8:	7dfb      	ldrb	r3, [r7, #23]
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	3318      	adds	r3, #24
 80017ee:	443b      	add	r3, r7
 80017f0:	3b18      	subs	r3, #24
 80017f2:	ed93 7a00 	vldr	s14, [r3]
 80017f6:	7dfb      	ldrb	r3, [r7, #23]
 80017f8:	4a83      	ldr	r2, [pc, #524]	@ (8001a08 <SCH_CTRL+0x2f0>)
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	4413      	add	r3, r2
 80017fe:	edd3 7a00 	vldr	s15, [r3]
 8001802:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001806:	edc7 7a02 	vstr	s15, [r7, #8]
		if (delta > 0) {
 800180a:	edd7 7a02 	vldr	s15, [r7, #8]
 800180e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001812:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001816:	dd25      	ble.n	8001864 <SCH_CTRL+0x14c>
			if (maxAllowablePwrDelta >= delta)
 8001818:	ed97 7a03 	vldr	s14, [r7, #12]
 800181c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001820:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001824:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001828:	db0b      	blt.n	8001842 <SCH_CTRL+0x12a>
				ctrl_output[i] = ctrl_override[i];
 800182a:	7dfa      	ldrb	r2, [r7, #23]
 800182c:	7dfb      	ldrb	r3, [r7, #23]
 800182e:	0092      	lsls	r2, r2, #2
 8001830:	3218      	adds	r2, #24
 8001832:	443a      	add	r2, r7
 8001834:	3a18      	subs	r2, #24
 8001836:	6812      	ldr	r2, [r2, #0]
 8001838:	4973      	ldr	r1, [pc, #460]	@ (8001a08 <SCH_CTRL+0x2f0>)
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	440b      	add	r3, r1
 800183e:	601a      	str	r2, [r3, #0]
 8001840:	e037      	b.n	80018b2 <SCH_CTRL+0x19a>
			else
				ctrl_output[i] += maxAllowablePwrDelta;
 8001842:	7dfb      	ldrb	r3, [r7, #23]
 8001844:	4a70      	ldr	r2, [pc, #448]	@ (8001a08 <SCH_CTRL+0x2f0>)
 8001846:	009b      	lsls	r3, r3, #2
 8001848:	4413      	add	r3, r2
 800184a:	ed93 7a00 	vldr	s14, [r3]
 800184e:	7dfb      	ldrb	r3, [r7, #23]
 8001850:	edd7 7a03 	vldr	s15, [r7, #12]
 8001854:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001858:	4a6b      	ldr	r2, [pc, #428]	@ (8001a08 <SCH_CTRL+0x2f0>)
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	4413      	add	r3, r2
 800185e:	edc3 7a00 	vstr	s15, [r3]
 8001862:	e026      	b.n	80018b2 <SCH_CTRL+0x19a>
		} else {
			if (maxAllowablePwrDelta >= -delta)
 8001864:	edd7 7a02 	vldr	s15, [r7, #8]
 8001868:	eef1 7a67 	vneg.f32	s15, s15
 800186c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001870:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001874:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001878:	db0b      	blt.n	8001892 <SCH_CTRL+0x17a>
				ctrl_output[i] = ctrl_override[i];
 800187a:	7dfa      	ldrb	r2, [r7, #23]
 800187c:	7dfb      	ldrb	r3, [r7, #23]
 800187e:	0092      	lsls	r2, r2, #2
 8001880:	3218      	adds	r2, #24
 8001882:	443a      	add	r2, r7
 8001884:	3a18      	subs	r2, #24
 8001886:	6812      	ldr	r2, [r2, #0]
 8001888:	495f      	ldr	r1, [pc, #380]	@ (8001a08 <SCH_CTRL+0x2f0>)
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	440b      	add	r3, r1
 800188e:	601a      	str	r2, [r3, #0]
 8001890:	e00f      	b.n	80018b2 <SCH_CTRL+0x19a>
			else
				ctrl_output[i] -= maxAllowablePwrDelta;
 8001892:	7dfb      	ldrb	r3, [r7, #23]
 8001894:	4a5c      	ldr	r2, [pc, #368]	@ (8001a08 <SCH_CTRL+0x2f0>)
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	4413      	add	r3, r2
 800189a:	ed93 7a00 	vldr	s14, [r3]
 800189e:	7dfb      	ldrb	r3, [r7, #23]
 80018a0:	edd7 7a03 	vldr	s15, [r7, #12]
 80018a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018a8:	4a57      	ldr	r2, [pc, #348]	@ (8001a08 <SCH_CTRL+0x2f0>)
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	4413      	add	r3, r2
 80018ae:	edc3 7a00 	vstr	s15, [r3]
		}

		// Correct the output signals if they somehow go out of bounds
		if (ctrl_output[i] > 2000.0)
 80018b2:	7dfb      	ldrb	r3, [r7, #23]
 80018b4:	4a54      	ldr	r2, [pc, #336]	@ (8001a08 <SCH_CTRL+0x2f0>)
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	4413      	add	r3, r2
 80018ba:	edd3 7a00 	vldr	s15, [r3]
 80018be:	ed9f 7a4e 	vldr	s14, [pc, #312]	@ 80019f8 <SCH_CTRL+0x2e0>
 80018c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018ca:	dd05      	ble.n	80018d8 <SCH_CTRL+0x1c0>
			ctrl_output[i] = 2000.0;
 80018cc:	7dfb      	ldrb	r3, [r7, #23]
 80018ce:	4a4e      	ldr	r2, [pc, #312]	@ (8001a08 <SCH_CTRL+0x2f0>)
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	4413      	add	r3, r2
 80018d4:	4a49      	ldr	r2, [pc, #292]	@ (80019fc <SCH_CTRL+0x2e4>)
 80018d6:	601a      	str	r2, [r3, #0]
		if (ctrl_output[i] < -2000.0)
 80018d8:	7dfb      	ldrb	r3, [r7, #23]
 80018da:	4a4b      	ldr	r2, [pc, #300]	@ (8001a08 <SCH_CTRL+0x2f0>)
 80018dc:	009b      	lsls	r3, r3, #2
 80018de:	4413      	add	r3, r2
 80018e0:	edd3 7a00 	vldr	s15, [r3]
 80018e4:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 8001a00 <SCH_CTRL+0x2e8>
 80018e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018f0:	d505      	bpl.n	80018fe <SCH_CTRL+0x1e6>
			ctrl_output[i] = -2000.0;
 80018f2:	7dfb      	ldrb	r3, [r7, #23]
 80018f4:	4a44      	ldr	r2, [pc, #272]	@ (8001a08 <SCH_CTRL+0x2f0>)
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	4413      	add	r3, r2
 80018fa:	4a42      	ldr	r2, [pc, #264]	@ (8001a04 <SCH_CTRL+0x2ec>)
 80018fc:	601a      	str	r2, [r3, #0]

		// Turn the interpolated values into actual PWM levels
		ctrl_output_dir[i] = ctrl_output[i] >= 0;
 80018fe:	7dfb      	ldrb	r3, [r7, #23]
 8001900:	4a41      	ldr	r2, [pc, #260]	@ (8001a08 <SCH_CTRL+0x2f0>)
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	4413      	add	r3, r2
 8001906:	edd3 7a00 	vldr	s15, [r3]
 800190a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800190e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001912:	bfac      	ite	ge
 8001914:	2301      	movge	r3, #1
 8001916:	2300      	movlt	r3, #0
 8001918:	b2da      	uxtb	r2, r3
 800191a:	7dfb      	ldrb	r3, [r7, #23]
 800191c:	4611      	mov	r1, r2
 800191e:	4a3b      	ldr	r2, [pc, #236]	@ (8001a0c <SCH_CTRL+0x2f4>)
 8001920:	54d1      	strb	r1, [r2, r3]
		if (ctrl_output_dir[i])
 8001922:	7dfb      	ldrb	r3, [r7, #23]
 8001924:	4a39      	ldr	r2, [pc, #228]	@ (8001a0c <SCH_CTRL+0x2f4>)
 8001926:	5cd3      	ldrb	r3, [r2, r3]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d00f      	beq.n	800194c <SCH_CTRL+0x234>
			ctrl_output_mag[i] = (uint16_t) (ctrl_output[i]);
 800192c:	7dfb      	ldrb	r3, [r7, #23]
 800192e:	4a36      	ldr	r2, [pc, #216]	@ (8001a08 <SCH_CTRL+0x2f0>)
 8001930:	009b      	lsls	r3, r3, #2
 8001932:	4413      	add	r3, r2
 8001934:	edd3 7a00 	vldr	s15, [r3]
 8001938:	7dfb      	ldrb	r3, [r7, #23]
 800193a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800193e:	ee17 2a90 	vmov	r2, s15
 8001942:	b291      	uxth	r1, r2
 8001944:	4a32      	ldr	r2, [pc, #200]	@ (8001a10 <SCH_CTRL+0x2f8>)
 8001946:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800194a:	e010      	b.n	800196e <SCH_CTRL+0x256>
		else
			ctrl_output_mag[i] = (uint16_t) (-ctrl_output[i]);
 800194c:	7dfb      	ldrb	r3, [r7, #23]
 800194e:	4a2e      	ldr	r2, [pc, #184]	@ (8001a08 <SCH_CTRL+0x2f0>)
 8001950:	009b      	lsls	r3, r3, #2
 8001952:	4413      	add	r3, r2
 8001954:	edd3 7a00 	vldr	s15, [r3]
 8001958:	eef1 7a67 	vneg.f32	s15, s15
 800195c:	7dfb      	ldrb	r3, [r7, #23]
 800195e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001962:	ee17 2a90 	vmov	r2, s15
 8001966:	b291      	uxth	r1, r2
 8001968:	4a29      	ldr	r2, [pc, #164]	@ (8001a10 <SCH_CTRL+0x2f8>)
 800196a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (uint8_t i = 0; i < 2; i++) {
 800196e:	7dfb      	ldrb	r3, [r7, #23]
 8001970:	3301      	adds	r3, #1
 8001972:	75fb      	strb	r3, [r7, #23]
 8001974:	7dfb      	ldrb	r3, [r7, #23]
 8001976:	2b01      	cmp	r3, #1
 8001978:	f67f af0c 	bls.w	8001794 <SCH_CTRL+0x7c>
	}

	// Toggle the motors
	if (ctrl_output_dir[0]) {
 800197c:	4b23      	ldr	r3, [pc, #140]	@ (8001a0c <SCH_CTRL+0x2f4>)
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d009      	beq.n	8001998 <SCH_CTRL+0x280>
		TIM2->CCR1 = 0;
 8001984:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001988:	2200      	movs	r2, #0
 800198a:	635a      	str	r2, [r3, #52]	@ 0x34
		TIM2->CCR2 = ctrl_output_mag[0];
 800198c:	4b20      	ldr	r3, [pc, #128]	@ (8001a10 <SCH_CTRL+0x2f8>)
 800198e:	881a      	ldrh	r2, [r3, #0]
 8001990:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001994:	639a      	str	r2, [r3, #56]	@ 0x38
 8001996:	e008      	b.n	80019aa <SCH_CTRL+0x292>
	} else {
		TIM2->CCR1 = ctrl_output_mag[0];
 8001998:	4b1d      	ldr	r3, [pc, #116]	@ (8001a10 <SCH_CTRL+0x2f8>)
 800199a:	881a      	ldrh	r2, [r3, #0]
 800199c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80019a0:	635a      	str	r2, [r3, #52]	@ 0x34
		TIM2->CCR2 = 0;
 80019a2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80019a6:	2200      	movs	r2, #0
 80019a8:	639a      	str	r2, [r3, #56]	@ 0x38
	}

	if (ctrl_output_dir[1]) {
 80019aa:	4b18      	ldr	r3, [pc, #96]	@ (8001a0c <SCH_CTRL+0x2f4>)
 80019ac:	785b      	ldrb	r3, [r3, #1]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d007      	beq.n	80019c2 <SCH_CTRL+0x2aa>
		TIM4->CCR3 = 0;
 80019b2:	4b18      	ldr	r3, [pc, #96]	@ (8001a14 <SCH_CTRL+0x2fc>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	63da      	str	r2, [r3, #60]	@ 0x3c
		TIM4->CCR4 = ctrl_output_mag[1];
 80019b8:	4b15      	ldr	r3, [pc, #84]	@ (8001a10 <SCH_CTRL+0x2f8>)
 80019ba:	885a      	ldrh	r2, [r3, #2]
 80019bc:	4b15      	ldr	r3, [pc, #84]	@ (8001a14 <SCH_CTRL+0x2fc>)
 80019be:	641a      	str	r2, [r3, #64]	@ 0x40
	} else {
		TIM4->CCR3 = ctrl_output_mag[1];
		TIM4->CCR4 = 0;
	}
}
 80019c0:	e006      	b.n	80019d0 <SCH_CTRL+0x2b8>
		TIM4->CCR3 = ctrl_output_mag[1];
 80019c2:	4b13      	ldr	r3, [pc, #76]	@ (8001a10 <SCH_CTRL+0x2f8>)
 80019c4:	885a      	ldrh	r2, [r3, #2]
 80019c6:	4b13      	ldr	r3, [pc, #76]	@ (8001a14 <SCH_CTRL+0x2fc>)
 80019c8:	63da      	str	r2, [r3, #60]	@ 0x3c
		TIM4->CCR4 = 0;
 80019ca:	4b12      	ldr	r3, [pc, #72]	@ (8001a14 <SCH_CTRL+0x2fc>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80019d0:	bf00      	nop
 80019d2:	3718      	adds	r7, #24
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	00000000 	.word	0x00000000
 80019dc:	408f4000 	.word	0x408f4000
 80019e0:	00000000 	.word	0x00000000
 80019e4:	409f4000 	.word	0x409f4000
 80019e8:	240008b8 	.word	0x240008b8
 80019ec:	240008c4 	.word	0x240008c4
 80019f0:	240008a9 	.word	0x240008a9
 80019f4:	240008aa 	.word	0x240008aa
 80019f8:	44fa0000 	.word	0x44fa0000
 80019fc:	44fa0000 	.word	0x44fa0000
 8001a00:	c4fa0000 	.word	0xc4fa0000
 8001a04:	c4fa0000 	.word	0xc4fa0000
 8001a08:	240008cc 	.word	0x240008cc
 8001a0c:	240008d8 	.word	0x240008d8
 8001a10:	240008d4 	.word	0x240008d4
 8001a14:	40000800 	.word	0x40000800

08001a18 <SCH_PowerMon>:

void SCH_PowerMon() {
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
	INA229_Get(&hina229);
 8001a1c:	4821      	ldr	r0, [pc, #132]	@ (8001aa4 <SCH_PowerMon+0x8c>)
 8001a1e:	f001 fc6f 	bl	8003300 <INA229_Get>

	if (hina229.voltage > debug_peakVoltage)
 8001a22:	4b20      	ldr	r3, [pc, #128]	@ (8001aa4 <SCH_PowerMon+0x8c>)
 8001a24:	ed93 7a03 	vldr	s14, [r3, #12]
 8001a28:	4b1f      	ldr	r3, [pc, #124]	@ (8001aa8 <SCH_PowerMon+0x90>)
 8001a2a:	edd3 7a00 	vldr	s15, [r3]
 8001a2e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a36:	dd03      	ble.n	8001a40 <SCH_PowerMon+0x28>
		debug_peakVoltage = hina229.voltage;
 8001a38:	4b1a      	ldr	r3, [pc, #104]	@ (8001aa4 <SCH_PowerMon+0x8c>)
 8001a3a:	68db      	ldr	r3, [r3, #12]
 8001a3c:	4a1a      	ldr	r2, [pc, #104]	@ (8001aa8 <SCH_PowerMon+0x90>)
 8001a3e:	6013      	str	r3, [r2, #0]
	if (hina229.current > debug_peakCurrent)
 8001a40:	4b18      	ldr	r3, [pc, #96]	@ (8001aa4 <SCH_PowerMon+0x8c>)
 8001a42:	ed93 7a04 	vldr	s14, [r3, #16]
 8001a46:	4b19      	ldr	r3, [pc, #100]	@ (8001aac <SCH_PowerMon+0x94>)
 8001a48:	edd3 7a00 	vldr	s15, [r3]
 8001a4c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a54:	dd03      	ble.n	8001a5e <SCH_PowerMon+0x46>
		debug_peakCurrent = hina229.current;
 8001a56:	4b13      	ldr	r3, [pc, #76]	@ (8001aa4 <SCH_PowerMon+0x8c>)
 8001a58:	691b      	ldr	r3, [r3, #16]
 8001a5a:	4a14      	ldr	r2, [pc, #80]	@ (8001aac <SCH_PowerMon+0x94>)
 8001a5c:	6013      	str	r3, [r2, #0]

	error_overcurrent = hina229.current >= OVERCURRENT_PROTLIMIT;
 8001a5e:	4b11      	ldr	r3, [pc, #68]	@ (8001aa4 <SCH_PowerMon+0x8c>)
 8001a60:	edd3 7a04 	vldr	s15, [r3, #16]
 8001a64:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8001a68:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a70:	bfac      	ite	ge
 8001a72:	2301      	movge	r3, #1
 8001a74:	2300      	movlt	r3, #0
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	461a      	mov	r2, r3
 8001a7a:	4b0d      	ldr	r3, [pc, #52]	@ (8001ab0 <SCH_PowerMon+0x98>)
 8001a7c:	701a      	strb	r2, [r3, #0]
	error_undervolt =   hina229.voltage <= UNDERVOLT_PROTLIMIT;
 8001a7e:	4b09      	ldr	r3, [pc, #36]	@ (8001aa4 <SCH_PowerMon+0x8c>)
 8001a80:	edd3 7a03 	vldr	s15, [r3, #12]
 8001a84:	eeb3 7a05 	vmov.f32	s14, #53	@ 0x41a80000  21.0
 8001a88:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a90:	bf94      	ite	ls
 8001a92:	2301      	movls	r3, #1
 8001a94:	2300      	movhi	r3, #0
 8001a96:	b2db      	uxtb	r3, r3
 8001a98:	461a      	mov	r2, r3
 8001a9a:	4b06      	ldr	r3, [pc, #24]	@ (8001ab4 <SCH_PowerMon+0x9c>)
 8001a9c:	701a      	strb	r2, [r3, #0]
}
 8001a9e:	bf00      	nop
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	24000944 	.word	0x24000944
 8001aa8:	240008ac 	.word	0x240008ac
 8001aac:	240008b0 	.word	0x240008b0
 8001ab0:	240008a9 	.word	0x240008a9
 8001ab4:	240008aa 	.word	0x240008aa

08001ab8 <SCH_Camera>:

void SCH_Camera() {
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
	if (camera_state != 0)
 8001abe:	4b18      	ldr	r3, [pc, #96]	@ (8001b20 <SCH_Camera+0x68>)
 8001ac0:	781b      	ldrb	r3, [r3, #0]
 8001ac2:	b2db      	uxtb	r3, r3
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d124      	bne.n	8001b12 <SCH_Camera+0x5a>
		return;	// Exit if the camera is capturing, queued, or has un-encoded data
	if (jpeg_state != 0)
 8001ac8:	4b16      	ldr	r3, [pc, #88]	@ (8001b24 <SCH_Camera+0x6c>)
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d121      	bne.n	8001b16 <SCH_Camera+0x5e>
		return;	// Exit if the JPEG is processing (camera DMA can corrupt the working buffer of JPEG)

	// Take a snapshot
	uint8_t ovStat = HAL_DCMI_Start_DMA(&hdcmi, DCMI_MODE_SNAPSHOT, camera_mem,
 8001ad2:	4a15      	ldr	r2, [pc, #84]	@ (8001b28 <SCH_Camera+0x70>)
 8001ad4:	f644 2371 	movw	r3, #19057	@ 0x4a71
 8001ad8:	2102      	movs	r1, #2
 8001ada:	4814      	ldr	r0, [pc, #80]	@ (8001b2c <SCH_Camera+0x74>)
 8001adc:	f001 ff38 	bl	8003950 <HAL_DCMI_Start_DMA>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	71fb      	strb	r3, [r7, #7]
			CAM_GRAYSIZE / 4);
	if (ovStat) {
 8001ae4:	79fb      	ldrb	r3, [r7, #7]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d00f      	beq.n	8001b0a <SCH_Camera+0x52>
		sprintf(ssd_msg, "DCMI/DMA ERROR - Code 0x%X\r\n", ovStat);
 8001aea:	79fb      	ldrb	r3, [r7, #7]
 8001aec:	461a      	mov	r2, r3
 8001aee:	4910      	ldr	r1, [pc, #64]	@ (8001b30 <SCH_Camera+0x78>)
 8001af0:	4810      	ldr	r0, [pc, #64]	@ (8001b34 <SCH_Camera+0x7c>)
 8001af2:	f017 fb49 	bl	8019188 <siprintf>
		WriteDebug(ssd_msg, strlen(ssd_msg));
 8001af6:	480f      	ldr	r0, [pc, #60]	@ (8001b34 <SCH_Camera+0x7c>)
 8001af8:	f7fe fc42 	bl	8000380 <strlen>
 8001afc:	4603      	mov	r3, r0
 8001afe:	b2db      	uxtb	r3, r3
 8001b00:	4619      	mov	r1, r3
 8001b02:	480c      	ldr	r0, [pc, #48]	@ (8001b34 <SCH_Camera+0x7c>)
 8001b04:	f000 f9f1 	bl	8001eea <WriteDebug>
		return;
 8001b08:	e006      	b.n	8001b18 <SCH_Camera+0x60>
	}

	camera_state = 1;	// Flag Camera as DMA Queued
 8001b0a:	4b05      	ldr	r3, [pc, #20]	@ (8001b20 <SCH_Camera+0x68>)
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	701a      	strb	r2, [r3, #0]
 8001b10:	e002      	b.n	8001b18 <SCH_Camera+0x60>
		return;	// Exit if the camera is capturing, queued, or has un-encoded data
 8001b12:	bf00      	nop
 8001b14:	e000      	b.n	8001b18 <SCH_Camera+0x60>
		return;	// Exit if the JPEG is processing (camera DMA can corrupt the working buffer of JPEG)
 8001b16:	bf00      	nop
}
 8001b18:	3708      	adds	r7, #8
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	24013322 	.word	0x24013322
 8001b24:	24025d2e 	.word	0x24025d2e
 8001b28:	2400095c 	.word	0x2400095c
 8001b2c:	24000300 	.word	0x24000300
 8001b30:	0801b214 	.word	0x0801b214
 8001b34:	240008dc 	.word	0x240008dc

08001b38 <SCH_JPEG>:

void SCH_JPEG() {
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af02      	add	r7, sp, #8

	if (jpeg_state != 0)
 8001b3e:	4b16      	ldr	r3, [pc, #88]	@ (8001b98 <SCH_JPEG+0x60>)
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d120      	bne.n	8001b8a <SCH_JPEG+0x52>
		return;	// Exit if the JPEG is already processing
	if (camera_state != 3)
 8001b48:	4b14      	ldr	r3, [pc, #80]	@ (8001b9c <SCH_JPEG+0x64>)
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	2b03      	cmp	r3, #3
 8001b50:	d11d      	bne.n	8001b8e <SCH_JPEG+0x56>
		return;	// Exit if the camera does not have a new image to present
	if (tx_state == 1)
 8001b52:	4b13      	ldr	r3, [pc, #76]	@ (8001ba0 <SCH_JPEG+0x68>)
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	b2db      	uxtb	r3, r3
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d01a      	beq.n	8001b92 <SCH_JPEG+0x5a>
		return;		// Exit if the radio is transmitting

	camera_state = 0;// flag the camera as idle, it won't start again until the JPEG is done
 8001b5c:	4b0f      	ldr	r3, [pc, #60]	@ (8001b9c <SCH_JPEG+0x64>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	701a      	strb	r2, [r3, #0]
	jpeg_state = 1;		// flag JPG as encoding
 8001b62:	4b0d      	ldr	r3, [pc, #52]	@ (8001b98 <SCH_JPEG+0x60>)
 8001b64:	2201      	movs	r2, #1
 8001b66:	701a      	strb	r2, [r3, #0]

	jpeg_block = 0;		// Reset the JEPG block idx
 8001b68:	4b0e      	ldr	r3, [pc, #56]	@ (8001ba4 <SCH_JPEG+0x6c>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	601a      	str	r2, [r3, #0]
	jpeg_size = 0;		// Reset the JPEG size counter
 8001b6e:	4b0e      	ldr	r3, [pc, #56]	@ (8001ba8 <SCH_JPEG+0x70>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	601a      	str	r2, [r3, #0]

	GenerateJPEGMCUBlock();
 8001b74:	f000 fae8 	bl	8002148 <GenerateJPEGMCUBlock>
	HAL_JPEG_Encode_DMA(&hjpeg, jpeg_mcu, 64, jpeg_out, JPEG_OUTBUF_SIZE);
 8001b78:	2340      	movs	r3, #64	@ 0x40
 8001b7a:	9300      	str	r3, [sp, #0]
 8001b7c:	4b0b      	ldr	r3, [pc, #44]	@ (8001bac <SCH_JPEG+0x74>)
 8001b7e:	2240      	movs	r2, #64	@ 0x40
 8001b80:	490b      	ldr	r1, [pc, #44]	@ (8001bb0 <SCH_JPEG+0x78>)
 8001b82:	480c      	ldr	r0, [pc, #48]	@ (8001bb4 <SCH_JPEG+0x7c>)
 8001b84:	f007 fda0 	bl	80096c8 <HAL_JPEG_Encode_DMA>
 8001b88:	e004      	b.n	8001b94 <SCH_JPEG+0x5c>
		return;	// Exit if the JPEG is already processing
 8001b8a:	bf00      	nop
 8001b8c:	e002      	b.n	8001b94 <SCH_JPEG+0x5c>
		return;	// Exit if the camera does not have a new image to present
 8001b8e:	bf00      	nop
 8001b90:	e000      	b.n	8001b94 <SCH_JPEG+0x5c>
		return;		// Exit if the radio is transmitting
 8001b92:	bf00      	nop
}
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	24025d2e 	.word	0x24025d2e
 8001b9c:	24013322 	.word	0x24013322
 8001ba0:	24025d5e 	.word	0x24025d5e
 8001ba4:	24013364 	.word	0x24013364
 8001ba8:	24025d30 	.word	0x24025d30
 8001bac:	24013368 	.word	0x24013368
 8001bb0:	24013324 	.word	0x24013324
 8001bb4:	2400041c 	.word	0x2400041c

08001bb8 <SCH_DEBUG>:

void SCH_DEBUG() {
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b088      	sub	sp, #32
 8001bbc:	af04      	add	r7, sp, #16
	uint32_t delta_t = DeltaTime(sch_tim_debug);
 8001bbe:	4b59      	ldr	r3, [pc, #356]	@ (8001d24 <SCH_DEBUG+0x16c>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f000 f97a 	bl	8001ebc <DeltaTime>
 8001bc8:	60b8      	str	r0, [r7, #8]
	if (delta_t < SCH_MS_DEBUG)
 8001bca:	68bb      	ldr	r3, [r7, #8]
 8001bcc:	2b31      	cmp	r3, #49	@ 0x31
 8001bce:	f240 80a4 	bls.w	8001d1a <SCH_DEBUG+0x162>
		return;

	debug_ctr++;
 8001bd2:	4b55      	ldr	r3, [pc, #340]	@ (8001d28 <SCH_DEBUG+0x170>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	3301      	adds	r3, #1
 8001bd8:	4a53      	ldr	r2, [pc, #332]	@ (8001d28 <SCH_DEBUG+0x170>)
 8001bda:	6013      	str	r3, [r2, #0]

	if (debug_ctr >= 60) {
 8001bdc:	4b52      	ldr	r3, [pc, #328]	@ (8001d28 <SCH_DEBUG+0x170>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	2b3b      	cmp	r3, #59	@ 0x3b
 8001be2:	d94a      	bls.n	8001c7a <SCH_DEBUG+0xc2>
		debug_ctr = 0;
 8001be4:	4b50      	ldr	r3, [pc, #320]	@ (8001d28 <SCH_DEBUG+0x170>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	601a      	str	r2, [r3, #0]
		for (uint8_t i = 0; i < 2; i++) {
 8001bea:	2300      	movs	r3, #0
 8001bec:	73fb      	strb	r3, [r7, #15]
 8001bee:	e041      	b.n	8001c74 <SCH_DEBUG+0xbc>
			uint8_t polarity = rand() % 2;
 8001bf0:	f016 fd94 	bl	801871c <rand>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	f003 0301 	and.w	r3, r3, #1
 8001bfc:	bfb8      	it	lt
 8001bfe:	425b      	neglt	r3, r3
 8001c00:	71fb      	strb	r3, [r7, #7]
			if (polarity)
 8001c02:	79fb      	ldrb	r3, [r7, #7]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d018      	beq.n	8001c3a <SCH_DEBUG+0x82>
				ctrl_input[i] = (float) (rand() % 2000);
 8001c08:	f016 fd88 	bl	801871c <rand>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	4a47      	ldr	r2, [pc, #284]	@ (8001d2c <SCH_DEBUG+0x174>)
 8001c10:	fb82 1203 	smull	r1, r2, r2, r3
 8001c14:	11d1      	asrs	r1, r2, #7
 8001c16:	17da      	asrs	r2, r3, #31
 8001c18:	1a8a      	subs	r2, r1, r2
 8001c1a:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8001c1e:	fb01 f202 	mul.w	r2, r1, r2
 8001c22:	1a9a      	subs	r2, r3, r2
 8001c24:	7bfb      	ldrb	r3, [r7, #15]
 8001c26:	ee07 2a90 	vmov	s15, r2
 8001c2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c2e:	4a40      	ldr	r2, [pc, #256]	@ (8001d30 <SCH_DEBUG+0x178>)
 8001c30:	009b      	lsls	r3, r3, #2
 8001c32:	4413      	add	r3, r2
 8001c34:	edc3 7a00 	vstr	s15, [r3]
 8001c38:	e019      	b.n	8001c6e <SCH_DEBUG+0xb6>
			else
				ctrl_input[i] = -(float) (rand() % 2000);
 8001c3a:	f016 fd6f 	bl	801871c <rand>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	4a3a      	ldr	r2, [pc, #232]	@ (8001d2c <SCH_DEBUG+0x174>)
 8001c42:	fb82 1203 	smull	r1, r2, r2, r3
 8001c46:	11d1      	asrs	r1, r2, #7
 8001c48:	17da      	asrs	r2, r3, #31
 8001c4a:	1a8a      	subs	r2, r1, r2
 8001c4c:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8001c50:	fb01 f202 	mul.w	r2, r1, r2
 8001c54:	1a9a      	subs	r2, r3, r2
 8001c56:	ee07 2a90 	vmov	s15, r2
 8001c5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c5e:	7bfb      	ldrb	r3, [r7, #15]
 8001c60:	eef1 7a67 	vneg.f32	s15, s15
 8001c64:	4a32      	ldr	r2, [pc, #200]	@ (8001d30 <SCH_DEBUG+0x178>)
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	4413      	add	r3, r2
 8001c6a:	edc3 7a00 	vstr	s15, [r3]
		for (uint8_t i = 0; i < 2; i++) {
 8001c6e:	7bfb      	ldrb	r3, [r7, #15]
 8001c70:	3301      	adds	r3, #1
 8001c72:	73fb      	strb	r3, [r7, #15]
 8001c74:	7bfb      	ldrb	r3, [r7, #15]
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d9ba      	bls.n	8001bf0 <SCH_DEBUG+0x38>
			//ctrl_inputLast[i] = ctrl_input[i];
		}
	}

	// Print Motor CTRL states
	if (error_undervolt)
 8001c7a:	4b2e      	ldr	r3, [pc, #184]	@ (8001d34 <SCH_DEBUG+0x17c>)
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d00b      	beq.n	8001c9a <SCH_DEBUG+0xe2>
		sprintf(ssd_msg, "!! UNDERVOLT (%.2f) !!\n----------\n",
 8001c82:	4b2d      	ldr	r3, [pc, #180]	@ (8001d38 <SCH_DEBUG+0x180>)
 8001c84:	edd3 7a00 	vldr	s15, [r3]
 8001c88:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001c8c:	ec53 2b17 	vmov	r2, r3, d7
 8001c90:	492a      	ldr	r1, [pc, #168]	@ (8001d3c <SCH_DEBUG+0x184>)
 8001c92:	482b      	ldr	r0, [pc, #172]	@ (8001d40 <SCH_DEBUG+0x188>)
 8001c94:	f017 fa78 	bl	8019188 <siprintf>
 8001c98:	e028      	b.n	8001cec <SCH_DEBUG+0x134>
				debug_peakVoltage);
	else if (error_overcurrent)
 8001c9a:	4b2a      	ldr	r3, [pc, #168]	@ (8001d44 <SCH_DEBUG+0x18c>)
 8001c9c:	781b      	ldrb	r3, [r3, #0]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d00b      	beq.n	8001cba <SCH_DEBUG+0x102>
		sprintf(ssd_msg, "!! OVERCURRENT (%.2f) !!\n----------\n",
 8001ca2:	4b29      	ldr	r3, [pc, #164]	@ (8001d48 <SCH_DEBUG+0x190>)
 8001ca4:	edd3 7a00 	vldr	s15, [r3]
 8001ca8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001cac:	ec53 2b17 	vmov	r2, r3, d7
 8001cb0:	4926      	ldr	r1, [pc, #152]	@ (8001d4c <SCH_DEBUG+0x194>)
 8001cb2:	4823      	ldr	r0, [pc, #140]	@ (8001d40 <SCH_DEBUG+0x188>)
 8001cb4:	f017 fa68 	bl	8019188 <siprintf>
 8001cb8:	e018      	b.n	8001cec <SCH_DEBUG+0x134>
				debug_peakCurrent);
	else
		sprintf(ssd_msg, "L: %04d - R: %04d | V: %.2f, A: %.2f\n----------\n",
				ctrl_output_mag[0], ctrl_output_mag[1], debug_peakVoltage,
 8001cba:	4b25      	ldr	r3, [pc, #148]	@ (8001d50 <SCH_DEBUG+0x198>)
 8001cbc:	881b      	ldrh	r3, [r3, #0]
		sprintf(ssd_msg, "L: %04d - R: %04d | V: %.2f, A: %.2f\n----------\n",
 8001cbe:	461a      	mov	r2, r3
				ctrl_output_mag[0], ctrl_output_mag[1], debug_peakVoltage,
 8001cc0:	4b23      	ldr	r3, [pc, #140]	@ (8001d50 <SCH_DEBUG+0x198>)
 8001cc2:	885b      	ldrh	r3, [r3, #2]
		sprintf(ssd_msg, "L: %04d - R: %04d | V: %.2f, A: %.2f\n----------\n",
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	4b1c      	ldr	r3, [pc, #112]	@ (8001d38 <SCH_DEBUG+0x180>)
 8001cc8:	edd3 7a00 	vldr	s15, [r3]
 8001ccc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001cd0:	4b1d      	ldr	r3, [pc, #116]	@ (8001d48 <SCH_DEBUG+0x190>)
 8001cd2:	edd3 6a00 	vldr	s13, [r3]
 8001cd6:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8001cda:	ed8d 6b02 	vstr	d6, [sp, #8]
 8001cde:	ed8d 7b00 	vstr	d7, [sp]
 8001ce2:	460b      	mov	r3, r1
 8001ce4:	491b      	ldr	r1, [pc, #108]	@ (8001d54 <SCH_DEBUG+0x19c>)
 8001ce6:	4816      	ldr	r0, [pc, #88]	@ (8001d40 <SCH_DEBUG+0x188>)
 8001ce8:	f017 fa4e 	bl	8019188 <siprintf>
				debug_peakCurrent);
	// Print Power levels
	//sprintf(ssd_msg, "V: %.2f, A: %f\n", hina229.voltage, hina229.current);
	WriteDebug(ssd_msg, strlen(ssd_msg));
 8001cec:	4814      	ldr	r0, [pc, #80]	@ (8001d40 <SCH_DEBUG+0x188>)
 8001cee:	f7fe fb47 	bl	8000380 <strlen>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	4811      	ldr	r0, [pc, #68]	@ (8001d40 <SCH_DEBUG+0x188>)
 8001cfa:	f000 f8f6 	bl	8001eea <WriteDebug>

	debug_peakVoltage = 0;
 8001cfe:	4b0e      	ldr	r3, [pc, #56]	@ (8001d38 <SCH_DEBUG+0x180>)
 8001d00:	f04f 0200 	mov.w	r2, #0
 8001d04:	601a      	str	r2, [r3, #0]
	debug_peakCurrent = 0;
 8001d06:	4b10      	ldr	r3, [pc, #64]	@ (8001d48 <SCH_DEBUG+0x190>)
 8001d08:	f04f 0200 	mov.w	r2, #0
 8001d0c:	601a      	str	r2, [r3, #0]

	sch_tim_debug = HAL_GetTick();
 8001d0e:	f001 fbe1 	bl	80034d4 <HAL_GetTick>
 8001d12:	4603      	mov	r3, r0
 8001d14:	4a03      	ldr	r2, [pc, #12]	@ (8001d24 <SCH_DEBUG+0x16c>)
 8001d16:	6013      	str	r3, [r2, #0]
 8001d18:	e000      	b.n	8001d1c <SCH_DEBUG+0x164>
		return;
 8001d1a:	bf00      	nop
}
 8001d1c:	3710      	adds	r7, #16
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	240008bc 	.word	0x240008bc
 8001d28:	240008c0 	.word	0x240008c0
 8001d2c:	10624dd3 	.word	0x10624dd3
 8001d30:	240008c4 	.word	0x240008c4
 8001d34:	240008aa 	.word	0x240008aa
 8001d38:	240008ac 	.word	0x240008ac
 8001d3c:	0801b234 	.word	0x0801b234
 8001d40:	240008dc 	.word	0x240008dc
 8001d44:	240008a9 	.word	0x240008a9
 8001d48:	240008b0 	.word	0x240008b0
 8001d4c:	0801b258 	.word	0x0801b258
 8001d50:	240008d4 	.word	0x240008d4
 8001d54:	0801b280 	.word	0x0801b280

08001d58 <HAL_DCMI_VsyncEventCallback>:

// ------------------------------------------------------------ OVERRIDE CALLBACKS -- //
// Frame captured event, called when the DMA buffer is full of new frame data
void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi) {
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
	if (!camera_state)
 8001d60:	4b0e      	ldr	r3, [pc, #56]	@ (8001d9c <HAL_DCMI_VsyncEventCallback+0x44>)
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d014      	beq.n	8001d94 <HAL_DCMI_VsyncEventCallback+0x3c>
		return;	// Do nothing if the camera is IDLE

	if (camera_state == 1) {	// Transition flag to CAPTURING
 8001d6a:	4b0c      	ldr	r3, [pc, #48]	@ (8001d9c <HAL_DCMI_VsyncEventCallback+0x44>)
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	b2db      	uxtb	r3, r3
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d103      	bne.n	8001d7c <HAL_DCMI_VsyncEventCallback+0x24>
		camera_state = 2;
 8001d74:	4b09      	ldr	r3, [pc, #36]	@ (8001d9c <HAL_DCMI_VsyncEventCallback+0x44>)
 8001d76:	2202      	movs	r2, #2
 8001d78:	701a      	strb	r2, [r3, #0]
		return;
 8001d7a:	e00c      	b.n	8001d96 <HAL_DCMI_VsyncEventCallback+0x3e>
	}

	if (camera_state == 2) {	// Transition flag to READY
 8001d7c:	4b07      	ldr	r3, [pc, #28]	@ (8001d9c <HAL_DCMI_VsyncEventCallback+0x44>)
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	2b02      	cmp	r3, #2
 8001d84:	d107      	bne.n	8001d96 <HAL_DCMI_VsyncEventCallback+0x3e>
		HAL_DCMI_Stop(hdcmi);
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	f001 fea4 	bl	8003ad4 <HAL_DCMI_Stop>
		camera_state = 3;
 8001d8c:	4b03      	ldr	r3, [pc, #12]	@ (8001d9c <HAL_DCMI_VsyncEventCallback+0x44>)
 8001d8e:	2203      	movs	r2, #3
 8001d90:	701a      	strb	r2, [r3, #0]
		return;
 8001d92:	e000      	b.n	8001d96 <HAL_DCMI_VsyncEventCallback+0x3e>
		return;	// Do nothing if the camera is IDLE
 8001d94:	bf00      	nop
	}
}
 8001d96:	3708      	adds	r7, #8
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	24013322 	.word	0x24013322

08001da0 <HAL_UART_RxCpltCallback>:

// ------------------------------------------------------------ OVERRIDE UART DMA CALLBACKS -- //
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
	XBEE_RX_DMACallback(&hxbee);
 8001da8:	4803      	ldr	r0, [pc, #12]	@ (8001db8 <HAL_UART_RxCpltCallback+0x18>)
 8001daa:	f013 fde1 	bl	8015970 <XBEE_RX_DMACallback>
}
 8001dae:	bf00      	nop
 8001db0:	3708      	adds	r7, #8
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	24025d38 	.word	0x24025d38

08001dbc <HAL_JPEG_GetDataCallback>:

// JPEG hardware is requesting the next MCU block
void HAL_JPEG_GetDataCallback(JPEG_HandleTypeDef *hjpeg, uint32_t NbDecodedData) {
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b082      	sub	sp, #8
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	6039      	str	r1, [r7, #0]

	// Restock the input buffer with new MCU
	if (GenerateJPEGMCUBlock()) {
 8001dc6:	f000 f9bf 	bl	8002148 <GenerateJPEGMCUBlock>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d013      	beq.n	8001df8 <HAL_JPEG_GetDataCallback+0x3c>
		// ERROR while generating MCU, probable memory leak - recover JPEG peripheral by restarting
		jpeg_state = 0;	// Flag JPEG as idle
 8001dd0:	4b0e      	ldr	r3, [pc, #56]	@ (8001e0c <HAL_JPEG_GetDataCallback+0x50>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	701a      	strb	r2, [r3, #0]
		jpeg_block = 0;	// Reset the JPEG block IDX
 8001dd6:	4b0e      	ldr	r3, [pc, #56]	@ (8001e10 <HAL_JPEG_GetDataCallback+0x54>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	601a      	str	r2, [r3, #0]

		sprintf(ssd_msg, "JPEG OVERRUN\n");
 8001ddc:	490d      	ldr	r1, [pc, #52]	@ (8001e14 <HAL_JPEG_GetDataCallback+0x58>)
 8001dde:	480e      	ldr	r0, [pc, #56]	@ (8001e18 <HAL_JPEG_GetDataCallback+0x5c>)
 8001de0:	f017 f9d2 	bl	8019188 <siprintf>
		WriteDebug(ssd_msg, strlen(ssd_msg));
 8001de4:	480c      	ldr	r0, [pc, #48]	@ (8001e18 <HAL_JPEG_GetDataCallback+0x5c>)
 8001de6:	f7fe facb 	bl	8000380 <strlen>
 8001dea:	4603      	mov	r3, r0
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	4619      	mov	r1, r3
 8001df0:	4809      	ldr	r0, [pc, #36]	@ (8001e18 <HAL_JPEG_GetDataCallback+0x5c>)
 8001df2:	f000 f87a 	bl	8001eea <WriteDebug>
	} else {
		// Configure the buffer to be the same as before, it's contents have changed
		HAL_JPEG_ConfigInputBuffer(hjpeg, jpeg_mcu, 64);
	}
}
 8001df6:	e004      	b.n	8001e02 <HAL_JPEG_GetDataCallback+0x46>
		HAL_JPEG_ConfigInputBuffer(hjpeg, jpeg_mcu, 64);
 8001df8:	2240      	movs	r2, #64	@ 0x40
 8001dfa:	4908      	ldr	r1, [pc, #32]	@ (8001e1c <HAL_JPEG_GetDataCallback+0x60>)
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	f007 fd2b 	bl	8009858 <HAL_JPEG_ConfigInputBuffer>
}
 8001e02:	bf00      	nop
 8001e04:	3708      	adds	r7, #8
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	24025d2e 	.word	0x24025d2e
 8001e10:	24013364 	.word	0x24013364
 8001e14:	0801b2b4 	.word	0x0801b2b4
 8001e18:	240008dc 	.word	0x240008dc
 8001e1c:	24013324 	.word	0x24013324

08001e20 <HAL_JPEG_DataReadyCallback>:

// JPEG hardware is requesting a larger output buffer.
// This is done to manage JPEG output size, give it a buffer only as large as required
void HAL_JPEG_DataReadyCallback(JPEG_HandleTypeDef *hjpeg, uint8_t *pDataOut,
		uint32_t OutDataLength) {
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b084      	sub	sp, #16
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	60f8      	str	r0, [r7, #12]
 8001e28:	60b9      	str	r1, [r7, #8]
 8001e2a:	607a      	str	r2, [r7, #4]
	// Setup new output buffer location (part of contiguous super-buffer)
	jpeg_size += JPEG_OUTBUF_SIZE;
 8001e2c:	4b08      	ldr	r3, [pc, #32]	@ (8001e50 <HAL_JPEG_DataReadyCallback+0x30>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	3340      	adds	r3, #64	@ 0x40
 8001e32:	4a07      	ldr	r2, [pc, #28]	@ (8001e50 <HAL_JPEG_DataReadyCallback+0x30>)
 8001e34:	6013      	str	r3, [r2, #0]
	HAL_JPEG_ConfigOutputBuffer(hjpeg, jpeg_out + jpeg_size, JPEG_OUTBUF_SIZE);
 8001e36:	4b06      	ldr	r3, [pc, #24]	@ (8001e50 <HAL_JPEG_DataReadyCallback+0x30>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a06      	ldr	r2, [pc, #24]	@ (8001e54 <HAL_JPEG_DataReadyCallback+0x34>)
 8001e3c:	4413      	add	r3, r2
 8001e3e:	2240      	movs	r2, #64	@ 0x40
 8001e40:	4619      	mov	r1, r3
 8001e42:	68f8      	ldr	r0, [r7, #12]
 8001e44:	f007 fd1a 	bl	800987c <HAL_JPEG_ConfigOutputBuffer>
}
 8001e48:	bf00      	nop
 8001e4a:	3710      	adds	r7, #16
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	24025d30 	.word	0x24025d30
 8001e54:	24013368 	.word	0x24013368

08001e58 <HAL_JPEG_EncodeCpltCallback>:

// JPEG hardware has completed the current image
void HAL_JPEG_EncodeCpltCallback(JPEG_HandleTypeDef *hjpeg) {
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
	jpeg_state = 2;	// Flag JPEG as ready
 8001e60:	4b05      	ldr	r3, [pc, #20]	@ (8001e78 <HAL_JPEG_EncodeCpltCallback+0x20>)
 8001e62:	2202      	movs	r2, #2
 8001e64:	701a      	strb	r2, [r3, #0]
	jpeg_block = 0;	// Reset the JPEG block IDX
 8001e66:	4b05      	ldr	r3, [pc, #20]	@ (8001e7c <HAL_JPEG_EncodeCpltCallback+0x24>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	601a      	str	r2, [r3, #0]
//	sprintf(ssd_msg, "JPEG DONE\n");
//	WriteDebug(ssd_msg, strlen(ssd_msg));
}
 8001e6c:	bf00      	nop
 8001e6e:	370c      	adds	r7, #12
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr
 8001e78:	24025d2e 	.word	0x24025d2e
 8001e7c:	24013364 	.word	0x24013364

08001e80 <HAL_JPEG_ErrorCallback>:

// JPEG hardware encountered an error
void HAL_JPEG_ErrorCallback(JPEG_HandleTypeDef *hjpeg) {
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
	sprintf(ssd_msg, " JPEG ERROR");
 8001e88:	4909      	ldr	r1, [pc, #36]	@ (8001eb0 <HAL_JPEG_ErrorCallback+0x30>)
 8001e8a:	480a      	ldr	r0, [pc, #40]	@ (8001eb4 <HAL_JPEG_ErrorCallback+0x34>)
 8001e8c:	f017 f97c 	bl	8019188 <siprintf>
	WriteDebug(ssd_msg, strlen(ssd_msg));
 8001e90:	4808      	ldr	r0, [pc, #32]	@ (8001eb4 <HAL_JPEG_ErrorCallback+0x34>)
 8001e92:	f7fe fa75 	bl	8000380 <strlen>
 8001e96:	4603      	mov	r3, r0
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	4805      	ldr	r0, [pc, #20]	@ (8001eb4 <HAL_JPEG_ErrorCallback+0x34>)
 8001e9e:	f000 f824 	bl	8001eea <WriteDebug>
	//HAL_JPEG_Abort(&hjpeg);
	jpeg_state = 0;	// Flag JPEG as idle
 8001ea2:	4b05      	ldr	r3, [pc, #20]	@ (8001eb8 <HAL_JPEG_ErrorCallback+0x38>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	701a      	strb	r2, [r3, #0]
}
 8001ea8:	bf00      	nop
 8001eaa:	3708      	adds	r7, #8
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	0801b2c4 	.word	0x0801b2c4
 8001eb4:	240008dc 	.word	0x240008dc
 8001eb8:	24025d2e 	.word	0x24025d2e

08001ebc <DeltaTime>:

// ------------------------------------------------------------ UTILITY FUNCTIONS -- //
uint32_t DeltaTime(uint32_t start_t) {
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b084      	sub	sp, #16
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
	uint32_t now_t = HAL_GetTick();
 8001ec4:	f001 fb06 	bl	80034d4 <HAL_GetTick>
 8001ec8:	60f8      	str	r0, [r7, #12]
	if (now_t < start_t) {
 8001eca:	68fa      	ldr	r2, [r7, #12]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	429a      	cmp	r2, r3
 8001ed0:	d204      	bcs.n	8001edc <DeltaTime+0x20>
		// Overflow has occurred
		return (0xFFFFFFFF - start_t) + now_t;
 8001ed2:	68fa      	ldr	r2, [r7, #12]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	1ad3      	subs	r3, r2, r3
 8001ed8:	3b01      	subs	r3, #1
 8001eda:	e002      	b.n	8001ee2 <DeltaTime+0x26>
	}

	return now_t - start_t;
 8001edc:	68fa      	ldr	r2, [r7, #12]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	1ad3      	subs	r3, r2, r3
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3710      	adds	r7, #16
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}

08001eea <WriteDebug>:

// Transmit wrapper, this is for continuity across Controller project which debugs by printing to OLEDs
void WriteDebug(uint8_t *str_ptr, uint8_t str_len) {
 8001eea:	b580      	push	{r7, lr}
 8001eec:	b082      	sub	sp, #8
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	6078      	str	r0, [r7, #4]
 8001ef2:	460b      	mov	r3, r1
 8001ef4:	70fb      	strb	r3, [r7, #3]
	CDC_Transmit_FS(str_ptr, str_len);
 8001ef6:	78fb      	ldrb	r3, [r7, #3]
 8001ef8:	4619      	mov	r1, r3
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f015 fed8 	bl	8017cb0 <CDC_Transmit_FS>
}
 8001f00:	bf00      	nop
 8001f02:	3708      	adds	r7, #8
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}

08001f08 <CAM_GetRegister>:

HAL_StatusTypeDef CAM_GetRegister(uint8_t addr, uint8_t *pData,
		uint8_t haltOnError) {
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b09e      	sub	sp, #120	@ 0x78
 8001f0c:	af02      	add	r7, sp, #8
 8001f0e:	4603      	mov	r3, r0
 8001f10:	6039      	str	r1, [r7, #0]
 8001f12:	71fb      	strb	r3, [r7, #7]
 8001f14:	4613      	mov	r3, r2
 8001f16:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef ov_result;
	uint8_t usb_msg[100] = { 0 };
 8001f18:	f107 0308 	add.w	r3, r7, #8
 8001f1c:	2264      	movs	r2, #100	@ 0x64
 8001f1e:	2100      	movs	r1, #0
 8001f20:	4618      	mov	r0, r3
 8001f22:	f017 f996 	bl	8019252 <memset>

	ov_result = HAL_I2C_Master_Transmit(&hi2c2, OV7670_ADDR_READ, &addr, 1,
 8001f26:	1dfa      	adds	r2, r7, #7
 8001f28:	2364      	movs	r3, #100	@ 0x64
 8001f2a:	9300      	str	r3, [sp, #0]
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	2143      	movs	r1, #67	@ 0x43
 8001f30:	482f      	ldr	r0, [pc, #188]	@ (8001ff0 <CAM_GetRegister+0xe8>)
 8001f32:	f005 fcdf 	bl	80078f4 <HAL_I2C_Master_Transmit>
 8001f36:	4603      	mov	r3, r0
 8001f38:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
			100);
	if (ov_result) {
 8001f3c:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d020      	beq.n	8001f86 <CAM_GetRegister+0x7e>
		if (haltOnError) {
 8001f44:	79bb      	ldrb	r3, [r7, #6]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d01a      	beq.n	8001f80 <CAM_GetRegister+0x78>
			sprintf(usb_msg,
 8001f4a:	79fb      	ldrb	r3, [r7, #7]
 8001f4c:	461a      	mov	r2, r3
 8001f4e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001f52:	f107 0008 	add.w	r0, r7, #8
 8001f56:	4927      	ldr	r1, [pc, #156]	@ (8001ff4 <CAM_GetRegister+0xec>)
 8001f58:	f017 f916 	bl	8019188 <siprintf>
					"TX ERROR: Cannot read camera register 0x%X - Code 0x%X\r\n",
					addr, ov_result);
			while (1) {
				CDC_Transmit_FS(usb_msg, strlen(usb_msg));
 8001f5c:	f107 0308 	add.w	r3, r7, #8
 8001f60:	4618      	mov	r0, r3
 8001f62:	f7fe fa0d 	bl	8000380 <strlen>
 8001f66:	4602      	mov	r2, r0
 8001f68:	f107 0308 	add.w	r3, r7, #8
 8001f6c:	4611      	mov	r1, r2
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f015 fe9e 	bl	8017cb0 <CDC_Transmit_FS>
				HAL_Delay(1000);
 8001f74:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001f78:	f001 fab8 	bl	80034ec <HAL_Delay>
			while (1) {
 8001f7c:	bf00      	nop
 8001f7e:	e7ed      	b.n	8001f5c <CAM_GetRegister+0x54>
			}
		}
		return ov_result;
 8001f80:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001f84:	e030      	b.n	8001fe8 <CAM_GetRegister+0xe0>
	}

	ov_result = HAL_I2C_Master_Receive(&hi2c2, OV7670_ADDR_READ, pData, 1, 100);
 8001f86:	2364      	movs	r3, #100	@ 0x64
 8001f88:	9300      	str	r3, [sp, #0]
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	683a      	ldr	r2, [r7, #0]
 8001f8e:	2143      	movs	r1, #67	@ 0x43
 8001f90:	4817      	ldr	r0, [pc, #92]	@ (8001ff0 <CAM_GetRegister+0xe8>)
 8001f92:	f005 fdc7 	bl	8007b24 <HAL_I2C_Master_Receive>
 8001f96:	4603      	mov	r3, r0
 8001f98:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	if (ov_result) {
 8001f9c:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d020      	beq.n	8001fe6 <CAM_GetRegister+0xde>
		if (haltOnError) {
 8001fa4:	79bb      	ldrb	r3, [r7, #6]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d01a      	beq.n	8001fe0 <CAM_GetRegister+0xd8>
			sprintf(usb_msg,
 8001faa:	79fb      	ldrb	r3, [r7, #7]
 8001fac:	461a      	mov	r2, r3
 8001fae:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001fb2:	f107 0008 	add.w	r0, r7, #8
 8001fb6:	4910      	ldr	r1, [pc, #64]	@ (8001ff8 <CAM_GetRegister+0xf0>)
 8001fb8:	f017 f8e6 	bl	8019188 <siprintf>
					"RX ERROR: Cannot read camera register 0x%X - Code 0x%X\r\n",
					addr, ov_result);
			while (1) {
				CDC_Transmit_FS(usb_msg, strlen(usb_msg));
 8001fbc:	f107 0308 	add.w	r3, r7, #8
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f7fe f9dd 	bl	8000380 <strlen>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	f107 0308 	add.w	r3, r7, #8
 8001fcc:	4611      	mov	r1, r2
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f015 fe6e 	bl	8017cb0 <CDC_Transmit_FS>
				HAL_Delay(1000);
 8001fd4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001fd8:	f001 fa88 	bl	80034ec <HAL_Delay>
			while (1) {
 8001fdc:	bf00      	nop
 8001fde:	e7ed      	b.n	8001fbc <CAM_GetRegister+0xb4>
			}
		}
		return ov_result;
 8001fe0:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001fe4:	e000      	b.n	8001fe8 <CAM_GetRegister+0xe0>
	}

	return HAL_OK;
 8001fe6:	2300      	movs	r3, #0
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	3770      	adds	r7, #112	@ 0x70
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	240003c8 	.word	0x240003c8
 8001ff4:	0801b2d0 	.word	0x0801b2d0
 8001ff8:	0801b30c 	.word	0x0801b30c

08001ffc <CAM_SetRegister>:

HAL_StatusTypeDef CAM_SetRegister(uint8_t addr, uint8_t data,
		uint8_t haltOnError) {
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b0a0      	sub	sp, #128	@ 0x80
 8002000:	af02      	add	r7, sp, #8
 8002002:	4603      	mov	r3, r0
 8002004:	71fb      	strb	r3, [r7, #7]
 8002006:	460b      	mov	r3, r1
 8002008:	71bb      	strb	r3, [r7, #6]
 800200a:	4613      	mov	r3, r2
 800200c:	717b      	strb	r3, [r7, #5]
	HAL_StatusTypeDef ov_result;
	uint8_t usb_msg[100] = { 0 };
 800200e:	f107 0310 	add.w	r3, r7, #16
 8002012:	2264      	movs	r2, #100	@ 0x64
 8002014:	2100      	movs	r1, #0
 8002016:	4618      	mov	r0, r3
 8002018:	f017 f91b 	bl	8019252 <memset>

	uint8_t reg_set[2] = { addr, data };
 800201c:	79fb      	ldrb	r3, [r7, #7]
 800201e:	733b      	strb	r3, [r7, #12]
 8002020:	79bb      	ldrb	r3, [r7, #6]
 8002022:	737b      	strb	r3, [r7, #13]

	ov_result = HAL_I2C_Master_Transmit(&hi2c2, OV7670_ADDR_WRITE, reg_set, 2,
 8002024:	f107 020c 	add.w	r2, r7, #12
 8002028:	2364      	movs	r3, #100	@ 0x64
 800202a:	9300      	str	r3, [sp, #0]
 800202c:	2302      	movs	r3, #2
 800202e:	2142      	movs	r1, #66	@ 0x42
 8002030:	4841      	ldr	r0, [pc, #260]	@ (8002138 <CAM_SetRegister+0x13c>)
 8002032:	f005 fc5f 	bl	80078f4 <HAL_I2C_Master_Transmit>
 8002036:	4603      	mov	r3, r0
 8002038:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
			100);
	if (ov_result) {
 800203c:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8002040:	2b00      	cmp	r3, #0
 8002042:	d01f      	beq.n	8002084 <CAM_SetRegister+0x88>
		if (haltOnError) {
 8002044:	797b      	ldrb	r3, [r7, #5]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d019      	beq.n	800207e <CAM_SetRegister+0x82>
			sprintf(usb_msg,
 800204a:	79fa      	ldrb	r2, [r7, #7]
 800204c:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8002050:	f107 0010 	add.w	r0, r7, #16
 8002054:	4939      	ldr	r1, [pc, #228]	@ (800213c <CAM_SetRegister+0x140>)
 8002056:	f017 f897 	bl	8019188 <siprintf>
					"TX ERROR: Cannot write camera register 0x%X - Code 0x%X\r\n",
					addr, ov_result);
			while (1) {
				CDC_Transmit_FS(usb_msg, strlen(usb_msg));
 800205a:	f107 0310 	add.w	r3, r7, #16
 800205e:	4618      	mov	r0, r3
 8002060:	f7fe f98e 	bl	8000380 <strlen>
 8002064:	4602      	mov	r2, r0
 8002066:	f107 0310 	add.w	r3, r7, #16
 800206a:	4611      	mov	r1, r2
 800206c:	4618      	mov	r0, r3
 800206e:	f015 fe1f 	bl	8017cb0 <CDC_Transmit_FS>
				HAL_Delay(1000);
 8002072:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002076:	f001 fa39 	bl	80034ec <HAL_Delay>
			while (1) {
 800207a:	bf00      	nop
 800207c:	e7ed      	b.n	800205a <CAM_SetRegister+0x5e>
			}
		}
		return ov_result;
 800207e:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8002082:	e054      	b.n	800212e <CAM_SetRegister+0x132>
	}

	// Confirm write
	uint8_t reg_get = 0x00;
 8002084:	2300      	movs	r3, #0
 8002086:	72fb      	strb	r3, [r7, #11]
	ov_result = CAM_GetRegister(addr, &reg_get, 1);
 8002088:	f107 010b 	add.w	r1, r7, #11
 800208c:	79fb      	ldrb	r3, [r7, #7]
 800208e:	2201      	movs	r2, #1
 8002090:	4618      	mov	r0, r3
 8002092:	f7ff ff39 	bl	8001f08 <CAM_GetRegister>
 8002096:	4603      	mov	r3, r0
 8002098:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
	if (ov_result) {
 800209c:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d01f      	beq.n	80020e4 <CAM_SetRegister+0xe8>
		if (haltOnError) {
 80020a4:	797b      	ldrb	r3, [r7, #5]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d019      	beq.n	80020de <CAM_SetRegister+0xe2>
			sprintf(usb_msg,
 80020aa:	79fa      	ldrb	r2, [r7, #7]
 80020ac:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80020b0:	f107 0010 	add.w	r0, r7, #16
 80020b4:	4922      	ldr	r1, [pc, #136]	@ (8002140 <CAM_SetRegister+0x144>)
 80020b6:	f017 f867 	bl	8019188 <siprintf>
					"CF ERROR: Cannot confirm camera register 0x%X - Code 0x%X\r\n",
					addr, ov_result);
			while (1) {
				CDC_Transmit_FS(usb_msg, strlen(usb_msg));
 80020ba:	f107 0310 	add.w	r3, r7, #16
 80020be:	4618      	mov	r0, r3
 80020c0:	f7fe f95e 	bl	8000380 <strlen>
 80020c4:	4602      	mov	r2, r0
 80020c6:	f107 0310 	add.w	r3, r7, #16
 80020ca:	4611      	mov	r1, r2
 80020cc:	4618      	mov	r0, r3
 80020ce:	f015 fdef 	bl	8017cb0 <CDC_Transmit_FS>
				HAL_Delay(1000);
 80020d2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80020d6:	f001 fa09 	bl	80034ec <HAL_Delay>
			while (1) {
 80020da:	bf00      	nop
 80020dc:	e7ed      	b.n	80020ba <CAM_SetRegister+0xbe>
			}
		} else {
			return ov_result;
 80020de:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80020e2:	e024      	b.n	800212e <CAM_SetRegister+0x132>
		}
	}

	if (reg_get != data) {
 80020e4:	7afb      	ldrb	r3, [r7, #11]
 80020e6:	79ba      	ldrb	r2, [r7, #6]
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d01f      	beq.n	800212c <CAM_SetRegister+0x130>
		// Error, bad write
		if (haltOnError) {
 80020ec:	797b      	ldrb	r3, [r7, #5]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d01a      	beq.n	8002128 <CAM_SetRegister+0x12c>
			sprintf(usb_msg,
 80020f2:	79fa      	ldrb	r2, [r7, #7]
 80020f4:	79bb      	ldrb	r3, [r7, #6]
 80020f6:	7af9      	ldrb	r1, [r7, #11]
 80020f8:	f107 0010 	add.w	r0, r7, #16
 80020fc:	9100      	str	r1, [sp, #0]
 80020fe:	4911      	ldr	r1, [pc, #68]	@ (8002144 <CAM_SetRegister+0x148>)
 8002100:	f017 f842 	bl	8019188 <siprintf>
					"CF ERROR: Bad write to register 0x%X - EXPECTED 0x%X, GOT 0x%X\r\n",
					addr, data, reg_get);
			while (1) {
				CDC_Transmit_FS(usb_msg, strlen(usb_msg));
 8002104:	f107 0310 	add.w	r3, r7, #16
 8002108:	4618      	mov	r0, r3
 800210a:	f7fe f939 	bl	8000380 <strlen>
 800210e:	4602      	mov	r2, r0
 8002110:	f107 0310 	add.w	r3, r7, #16
 8002114:	4611      	mov	r1, r2
 8002116:	4618      	mov	r0, r3
 8002118:	f015 fdca 	bl	8017cb0 <CDC_Transmit_FS>
				HAL_Delay(1000);
 800211c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002120:	f001 f9e4 	bl	80034ec <HAL_Delay>
			while (1) {
 8002124:	bf00      	nop
 8002126:	e7ed      	b.n	8002104 <CAM_SetRegister+0x108>
			}
		}
		return HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	e000      	b.n	800212e <CAM_SetRegister+0x132>
	}

	return HAL_OK;
 800212c:	2300      	movs	r3, #0
}
 800212e:	4618      	mov	r0, r3
 8002130:	3778      	adds	r7, #120	@ 0x78
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	240003c8 	.word	0x240003c8
 800213c:	0801b348 	.word	0x0801b348
 8002140:	0801b384 	.word	0x0801b384
 8002144:	0801b3c0 	.word	0x0801b3c0

08002148 <GenerateJPEGMCUBlock>:

// GENERATE JPEG MCU BLOCK
uint8_t GenerateJPEGMCUBlock() {
 8002148:	b480      	push	{r7}
 800214a:	b087      	sub	sp, #28
 800214c:	af00      	add	r7, sp, #0
	// Don't go over the bounds of the specified MCU area
	if (jpeg_block
			> jpeg_mcu_widths[jpeg_quality] * jpeg_mcu_heights[jpeg_quality]) {
 800214e:	4b47      	ldr	r3, [pc, #284]	@ (800226c <GenerateJPEGMCUBlock+0x124>)
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	461a      	mov	r2, r3
 8002154:	4b46      	ldr	r3, [pc, #280]	@ (8002270 <GenerateJPEGMCUBlock+0x128>)
 8002156:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800215a:	461a      	mov	r2, r3
 800215c:	4b43      	ldr	r3, [pc, #268]	@ (800226c <GenerateJPEGMCUBlock+0x124>)
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	4619      	mov	r1, r3
 8002162:	4b44      	ldr	r3, [pc, #272]	@ (8002274 <GenerateJPEGMCUBlock+0x12c>)
 8002164:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8002168:	fb02 f303 	mul.w	r3, r2, r3
 800216c:	461a      	mov	r2, r3
 800216e:	4b42      	ldr	r3, [pc, #264]	@ (8002278 <GenerateJPEGMCUBlock+0x130>)
 8002170:	681b      	ldr	r3, [r3, #0]
	if (jpeg_block
 8002172:	429a      	cmp	r2, r3
 8002174:	d201      	bcs.n	800217a <GenerateJPEGMCUBlock+0x32>
		return 1;
 8002176:	2301      	movs	r3, #1
 8002178:	e072      	b.n	8002260 <GenerateJPEGMCUBlock+0x118>
	}

	int xStart = (jpeg_block % jpeg_mcu_widths[jpeg_quality]) * 8;
 800217a:	4b3f      	ldr	r3, [pc, #252]	@ (8002278 <GenerateJPEGMCUBlock+0x130>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a3b      	ldr	r2, [pc, #236]	@ (800226c <GenerateJPEGMCUBlock+0x124>)
 8002180:	7812      	ldrb	r2, [r2, #0]
 8002182:	4611      	mov	r1, r2
 8002184:	4a3a      	ldr	r2, [pc, #232]	@ (8002270 <GenerateJPEGMCUBlock+0x128>)
 8002186:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 800218a:	fbb3 f1f2 	udiv	r1, r3, r2
 800218e:	fb01 f202 	mul.w	r2, r1, r2
 8002192:	1a9b      	subs	r3, r3, r2
 8002194:	00db      	lsls	r3, r3, #3
 8002196:	60bb      	str	r3, [r7, #8]
	int yStart = (jpeg_block / jpeg_mcu_widths[jpeg_quality]) * 8;
 8002198:	4b37      	ldr	r3, [pc, #220]	@ (8002278 <GenerateJPEGMCUBlock+0x130>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a33      	ldr	r2, [pc, #204]	@ (800226c <GenerateJPEGMCUBlock+0x124>)
 800219e:	7812      	ldrb	r2, [r2, #0]
 80021a0:	4611      	mov	r1, r2
 80021a2:	4a33      	ldr	r2, [pc, #204]	@ (8002270 <GenerateJPEGMCUBlock+0x128>)
 80021a4:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 80021a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80021ac:	00db      	lsls	r3, r3, #3
 80021ae:	607b      	str	r3, [r7, #4]
	int i = 0;
 80021b0:	2300      	movs	r3, #0
 80021b2:	617b      	str	r3, [r7, #20]
	for (int y = yStart; y < yStart + 8; y++) {
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	613b      	str	r3, [r7, #16]
 80021b8:	e047      	b.n	800224a <GenerateJPEGMCUBlock+0x102>
		uint16_t cached_y = y * jpeg_scaleFactors[jpeg_quality];
 80021ba:	4b2c      	ldr	r3, [pc, #176]	@ (800226c <GenerateJPEGMCUBlock+0x124>)
 80021bc:	781b      	ldrb	r3, [r3, #0]
 80021be:	461a      	mov	r2, r3
 80021c0:	4b2e      	ldr	r3, [pc, #184]	@ (800227c <GenerateJPEGMCUBlock+0x134>)
 80021c2:	5c9b      	ldrb	r3, [r3, r2]
 80021c4:	461a      	mov	r2, r3
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	b29b      	uxth	r3, r3
 80021ca:	fb12 f303 	smulbb	r3, r2, r3
 80021ce:	807b      	strh	r3, [r7, #2]

		for (int x = xStart; x < xStart + 8; x++) {
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	60fb      	str	r3, [r7, #12]
 80021d4:	e031      	b.n	800223a <GenerateJPEGMCUBlock+0xf2>
			uint16_t cached_x = x * jpeg_scaleFactors[jpeg_quality]
 80021d6:	4b25      	ldr	r3, [pc, #148]	@ (800226c <GenerateJPEGMCUBlock+0x124>)
 80021d8:	781b      	ldrb	r3, [r3, #0]
 80021da:	461a      	mov	r2, r3
 80021dc:	4b27      	ldr	r3, [pc, #156]	@ (800227c <GenerateJPEGMCUBlock+0x134>)
 80021de:	5c9b      	ldrb	r3, [r3, r2]
					+ camera_vshift;
 80021e0:	461a      	mov	r2, r3
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	b29b      	uxth	r3, r3
 80021e6:	fb12 f303 	smulbb	r3, r2, r3
 80021ea:	b29a      	uxth	r2, r3
 80021ec:	4b24      	ldr	r3, [pc, #144]	@ (8002280 <GenerateJPEGMCUBlock+0x138>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	b29b      	uxth	r3, r3
			uint16_t cached_x = x * jpeg_scaleFactors[jpeg_quality]
 80021f2:	4413      	add	r3, r2
 80021f4:	803b      	strh	r3, [r7, #0]
			// Pad to 8x8
			if (cached_x >= CAM_WIDTH || cached_y >= CAM_HEIGHT) {
 80021f6:	883b      	ldrh	r3, [r7, #0]
 80021f8:	f5b3 7f9d 	cmp.w	r3, #314	@ 0x13a
 80021fc:	d802      	bhi.n	8002204 <GenerateJPEGMCUBlock+0xbc>
 80021fe:	887b      	ldrh	r3, [r7, #2]
 8002200:	2bf1      	cmp	r3, #241	@ 0xf1
 8002202:	d905      	bls.n	8002210 <GenerateJPEGMCUBlock+0xc8>
				jpeg_mcu[i] = 0x00;
 8002204:	4a1f      	ldr	r2, [pc, #124]	@ (8002284 <GenerateJPEGMCUBlock+0x13c>)
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	4413      	add	r3, r2
 800220a:	2200      	movs	r2, #0
 800220c:	701a      	strb	r2, [r3, #0]
 800220e:	e00e      	b.n	800222e <GenerateJPEGMCUBlock+0xe6>
			} else {
				jpeg_mcu[i] = camera_mem[cached_x + cached_y * CAM_WIDTH];
 8002210:	8839      	ldrh	r1, [r7, #0]
 8002212:	887a      	ldrh	r2, [r7, #2]
 8002214:	4613      	mov	r3, r2
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	4413      	add	r3, r2
 800221a:	019a      	lsls	r2, r3, #6
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	440b      	add	r3, r1
 8002220:	4a19      	ldr	r2, [pc, #100]	@ (8002288 <GenerateJPEGMCUBlock+0x140>)
 8002222:	5cd1      	ldrb	r1, [r2, r3]
 8002224:	4a17      	ldr	r2, [pc, #92]	@ (8002284 <GenerateJPEGMCUBlock+0x13c>)
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	4413      	add	r3, r2
 800222a:	460a      	mov	r2, r1
 800222c:	701a      	strb	r2, [r3, #0]
			}
			i++;
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	3301      	adds	r3, #1
 8002232:	617b      	str	r3, [r7, #20]
		for (int x = xStart; x < xStart + 8; x++) {
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	3301      	adds	r3, #1
 8002238:	60fb      	str	r3, [r7, #12]
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	3307      	adds	r3, #7
 800223e:	68fa      	ldr	r2, [r7, #12]
 8002240:	429a      	cmp	r2, r3
 8002242:	ddc8      	ble.n	80021d6 <GenerateJPEGMCUBlock+0x8e>
	for (int y = yStart; y < yStart + 8; y++) {
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	3301      	adds	r3, #1
 8002248:	613b      	str	r3, [r7, #16]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	3307      	adds	r3, #7
 800224e:	693a      	ldr	r2, [r7, #16]
 8002250:	429a      	cmp	r2, r3
 8002252:	ddb2      	ble.n	80021ba <GenerateJPEGMCUBlock+0x72>
		}
	}
	jpeg_block++;
 8002254:	4b08      	ldr	r3, [pc, #32]	@ (8002278 <GenerateJPEGMCUBlock+0x130>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	3301      	adds	r3, #1
 800225a:	4a07      	ldr	r2, [pc, #28]	@ (8002278 <GenerateJPEGMCUBlock+0x130>)
 800225c:	6013      	str	r3, [r2, #0]
	return 0;
 800225e:	2300      	movs	r3, #0
}
 8002260:	4618      	mov	r0, r3
 8002262:	371c      	adds	r7, #28
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr
 800226c:	24025d34 	.word	0x24025d34
 8002270:	24000004 	.word	0x24000004
 8002274:	2400000c 	.word	0x2400000c
 8002278:	24013364 	.word	0x24013364
 800227c:	24000014 	.word	0x24000014
 8002280:	24000000 	.word	0x24000000
 8002284:	24013324 	.word	0x24013324
 8002288:	2400095c 	.word	0x2400095c

0800228c <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void) {
 800228c:	b580      	push	{r7, lr}
 800228e:	b084      	sub	sp, #16
 8002290:	af00      	add	r7, sp, #0
	MPU_Region_InitTypeDef MPU_InitStruct = { 0 };
 8002292:	463b      	mov	r3, r7
 8002294:	2200      	movs	r2, #0
 8002296:	601a      	str	r2, [r3, #0]
 8002298:	605a      	str	r2, [r3, #4]
 800229a:	609a      	str	r2, [r3, #8]
 800229c:	60da      	str	r2, [r3, #12]

	/* Disables the MPU */
	HAL_MPU_Disable();
 800229e:	f001 fa65 	bl	800376c <HAL_MPU_Disable>

	/** Initializes and configures the Region and the memory to be protected
	 */
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80022a2:	2301      	movs	r3, #1
 80022a4:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80022a6:	2300      	movs	r3, #0
 80022a8:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.BaseAddress = 0x0;
 80022aa:	2300      	movs	r3, #0
 80022ac:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80022ae:	231f      	movs	r3, #31
 80022b0:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.SubRegionDisable = 0x87;
 80022b2:	2387      	movs	r3, #135	@ 0x87
 80022b4:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80022b6:	2300      	movs	r3, #0
 80022b8:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80022ba:	2300      	movs	r3, #0
 80022bc:	72fb      	strb	r3, [r7, #11]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80022be:	2301      	movs	r3, #1
 80022c0:	733b      	strb	r3, [r7, #12]
	MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80022c2:	2301      	movs	r3, #1
 80022c4:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80022c6:	2300      	movs	r3, #0
 80022c8:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80022ca:	2300      	movs	r3, #0
 80022cc:	73fb      	strb	r3, [r7, #15]

	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80022ce:	463b      	mov	r3, r7
 80022d0:	4618      	mov	r0, r3
 80022d2:	f001 fa83 	bl	80037dc <HAL_MPU_ConfigRegion>
	/* Enables the MPU */
	HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80022d6:	2004      	movs	r0, #4
 80022d8:	f001 fa60 	bl	800379c <HAL_MPU_Enable>

}
 80022dc:	bf00      	nop
 80022de:	3710      	adds	r7, #16
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}

080022e4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80022e4:	b480      	push	{r7}
 80022e6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80022e8:	b672      	cpsid	i
}
 80022ea:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80022ec:	bf00      	nop
 80022ee:	e7fd      	b.n	80022ec <Error_Handler+0x8>

080022f0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022f6:	4b0a      	ldr	r3, [pc, #40]	@ (8002320 <HAL_MspInit+0x30>)
 80022f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80022fc:	4a08      	ldr	r2, [pc, #32]	@ (8002320 <HAL_MspInit+0x30>)
 80022fe:	f043 0302 	orr.w	r3, r3, #2
 8002302:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002306:	4b06      	ldr	r3, [pc, #24]	@ (8002320 <HAL_MspInit+0x30>)
 8002308:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800230c:	f003 0302 	and.w	r3, r3, #2
 8002310:	607b      	str	r3, [r7, #4]
 8002312:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002314:	bf00      	nop
 8002316:	370c      	adds	r7, #12
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr
 8002320:	58024400 	.word	0x58024400

08002324 <HAL_DCMI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdcmi: DCMI handle pointer
  * @retval None
  */
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b08e      	sub	sp, #56	@ 0x38
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800232c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002330:	2200      	movs	r2, #0
 8002332:	601a      	str	r2, [r3, #0]
 8002334:	605a      	str	r2, [r3, #4]
 8002336:	609a      	str	r2, [r3, #8]
 8002338:	60da      	str	r2, [r3, #12]
 800233a:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a79      	ldr	r2, [pc, #484]	@ (8002528 <HAL_DCMI_MspInit+0x204>)
 8002342:	4293      	cmp	r3, r2
 8002344:	f040 80ec 	bne.w	8002520 <HAL_DCMI_MspInit+0x1fc>
  {
    /* USER CODE BEGIN DCMI_MspInit 0 */

    /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8002348:	4b78      	ldr	r3, [pc, #480]	@ (800252c <HAL_DCMI_MspInit+0x208>)
 800234a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800234e:	4a77      	ldr	r2, [pc, #476]	@ (800252c <HAL_DCMI_MspInit+0x208>)
 8002350:	f043 0301 	orr.w	r3, r3, #1
 8002354:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8002358:	4b74      	ldr	r3, [pc, #464]	@ (800252c <HAL_DCMI_MspInit+0x208>)
 800235a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800235e:	f003 0301 	and.w	r3, r3, #1
 8002362:	623b      	str	r3, [r7, #32]
 8002364:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002366:	4b71      	ldr	r3, [pc, #452]	@ (800252c <HAL_DCMI_MspInit+0x208>)
 8002368:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800236c:	4a6f      	ldr	r2, [pc, #444]	@ (800252c <HAL_DCMI_MspInit+0x208>)
 800236e:	f043 0310 	orr.w	r3, r3, #16
 8002372:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002376:	4b6d      	ldr	r3, [pc, #436]	@ (800252c <HAL_DCMI_MspInit+0x208>)
 8002378:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800237c:	f003 0310 	and.w	r3, r3, #16
 8002380:	61fb      	str	r3, [r7, #28]
 8002382:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002384:	4b69      	ldr	r3, [pc, #420]	@ (800252c <HAL_DCMI_MspInit+0x208>)
 8002386:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800238a:	4a68      	ldr	r2, [pc, #416]	@ (800252c <HAL_DCMI_MspInit+0x208>)
 800238c:	f043 0301 	orr.w	r3, r3, #1
 8002390:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002394:	4b65      	ldr	r3, [pc, #404]	@ (800252c <HAL_DCMI_MspInit+0x208>)
 8002396:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800239a:	f003 0301 	and.w	r3, r3, #1
 800239e:	61bb      	str	r3, [r7, #24]
 80023a0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023a2:	4b62      	ldr	r3, [pc, #392]	@ (800252c <HAL_DCMI_MspInit+0x208>)
 80023a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023a8:	4a60      	ldr	r2, [pc, #384]	@ (800252c <HAL_DCMI_MspInit+0x208>)
 80023aa:	f043 0304 	orr.w	r3, r3, #4
 80023ae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80023b2:	4b5e      	ldr	r3, [pc, #376]	@ (800252c <HAL_DCMI_MspInit+0x208>)
 80023b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023b8:	f003 0304 	and.w	r3, r3, #4
 80023bc:	617b      	str	r3, [r7, #20]
 80023be:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80023c0:	4b5a      	ldr	r3, [pc, #360]	@ (800252c <HAL_DCMI_MspInit+0x208>)
 80023c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023c6:	4a59      	ldr	r2, [pc, #356]	@ (800252c <HAL_DCMI_MspInit+0x208>)
 80023c8:	f043 0308 	orr.w	r3, r3, #8
 80023cc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80023d0:	4b56      	ldr	r3, [pc, #344]	@ (800252c <HAL_DCMI_MspInit+0x208>)
 80023d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023d6:	f003 0308 	and.w	r3, r3, #8
 80023da:	613b      	str	r3, [r7, #16]
 80023dc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023de:	4b53      	ldr	r3, [pc, #332]	@ (800252c <HAL_DCMI_MspInit+0x208>)
 80023e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023e4:	4a51      	ldr	r2, [pc, #324]	@ (800252c <HAL_DCMI_MspInit+0x208>)
 80023e6:	f043 0302 	orr.w	r3, r3, #2
 80023ea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80023ee:	4b4f      	ldr	r3, [pc, #316]	@ (800252c <HAL_DCMI_MspInit+0x208>)
 80023f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023f4:	f003 0302 	and.w	r3, r3, #2
 80023f8:	60fb      	str	r3, [r7, #12]
 80023fa:	68fb      	ldr	r3, [r7, #12]
    PD3     ------> DCMI_D5
    PB7     ------> DCMI_VSYNC
    PE0     ------> DCMI_D2
    PE1     ------> DCMI_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_0
 80023fc:	2373      	movs	r3, #115	@ 0x73
 80023fe:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002400:	2302      	movs	r3, #2
 8002402:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002404:	2300      	movs	r3, #0
 8002406:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002408:	2300      	movs	r3, #0
 800240a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800240c:	230d      	movs	r3, #13
 800240e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002410:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002414:	4619      	mov	r1, r3
 8002416:	4846      	ldr	r0, [pc, #280]	@ (8002530 <HAL_DCMI_MspInit+0x20c>)
 8002418:	f005 f806 	bl	8007428 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 800241c:	2350      	movs	r3, #80	@ 0x50
 800241e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002420:	2302      	movs	r3, #2
 8002422:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002424:	2300      	movs	r3, #0
 8002426:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002428:	2300      	movs	r3, #0
 800242a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800242c:	230d      	movs	r3, #13
 800242e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002430:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002434:	4619      	mov	r1, r3
 8002436:	483f      	ldr	r0, [pc, #252]	@ (8002534 <HAL_DCMI_MspInit+0x210>)
 8002438:	f004 fff6 	bl	8007428 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800243c:	23c0      	movs	r3, #192	@ 0xc0
 800243e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002440:	2302      	movs	r3, #2
 8002442:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002444:	2300      	movs	r3, #0
 8002446:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002448:	2300      	movs	r3, #0
 800244a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800244c:	230d      	movs	r3, #13
 800244e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002450:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002454:	4619      	mov	r1, r3
 8002456:	4838      	ldr	r0, [pc, #224]	@ (8002538 <HAL_DCMI_MspInit+0x214>)
 8002458:	f004 ffe6 	bl	8007428 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800245c:	2308      	movs	r3, #8
 800245e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002460:	2302      	movs	r3, #2
 8002462:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002464:	2300      	movs	r3, #0
 8002466:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002468:	2300      	movs	r3, #0
 800246a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800246c:	230d      	movs	r3, #13
 800246e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002470:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002474:	4619      	mov	r1, r3
 8002476:	4831      	ldr	r0, [pc, #196]	@ (800253c <HAL_DCMI_MspInit+0x218>)
 8002478:	f004 ffd6 	bl	8007428 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800247c:	2380      	movs	r3, #128	@ 0x80
 800247e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002480:	2302      	movs	r3, #2
 8002482:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002484:	2300      	movs	r3, #0
 8002486:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002488:	2300      	movs	r3, #0
 800248a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800248c:	230d      	movs	r3, #13
 800248e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002490:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002494:	4619      	mov	r1, r3
 8002496:	482a      	ldr	r0, [pc, #168]	@ (8002540 <HAL_DCMI_MspInit+0x21c>)
 8002498:	f004 ffc6 	bl	8007428 <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA1_Stream0;
 800249c:	4b29      	ldr	r3, [pc, #164]	@ (8002544 <HAL_DCMI_MspInit+0x220>)
 800249e:	4a2a      	ldr	r2, [pc, #168]	@ (8002548 <HAL_DCMI_MspInit+0x224>)
 80024a0:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Request = DMA_REQUEST_DCMI;
 80024a2:	4b28      	ldr	r3, [pc, #160]	@ (8002544 <HAL_DCMI_MspInit+0x220>)
 80024a4:	224b      	movs	r2, #75	@ 0x4b
 80024a6:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80024a8:	4b26      	ldr	r3, [pc, #152]	@ (8002544 <HAL_DCMI_MspInit+0x220>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 80024ae:	4b25      	ldr	r3, [pc, #148]	@ (8002544 <HAL_DCMI_MspInit+0x220>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 80024b4:	4b23      	ldr	r3, [pc, #140]	@ (8002544 <HAL_DCMI_MspInit+0x220>)
 80024b6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80024ba:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80024bc:	4b21      	ldr	r3, [pc, #132]	@ (8002544 <HAL_DCMI_MspInit+0x220>)
 80024be:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80024c2:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80024c4:	4b1f      	ldr	r3, [pc, #124]	@ (8002544 <HAL_DCMI_MspInit+0x220>)
 80024c6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80024ca:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_CIRCULAR;
 80024cc:	4b1d      	ldr	r3, [pc, #116]	@ (8002544 <HAL_DCMI_MspInit+0x220>)
 80024ce:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80024d2:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_HIGH;
 80024d4:	4b1b      	ldr	r3, [pc, #108]	@ (8002544 <HAL_DCMI_MspInit+0x220>)
 80024d6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80024da:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80024dc:	4b19      	ldr	r3, [pc, #100]	@ (8002544 <HAL_DCMI_MspInit+0x220>)
 80024de:	2204      	movs	r2, #4
 80024e0:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_dcmi.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80024e2:	4b18      	ldr	r3, [pc, #96]	@ (8002544 <HAL_DCMI_MspInit+0x220>)
 80024e4:	2203      	movs	r2, #3
 80024e6:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_dcmi.Init.MemBurst = DMA_MBURST_SINGLE;
 80024e8:	4b16      	ldr	r3, [pc, #88]	@ (8002544 <HAL_DCMI_MspInit+0x220>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_dcmi.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80024ee:	4b15      	ldr	r3, [pc, #84]	@ (8002544 <HAL_DCMI_MspInit+0x220>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 80024f4:	4813      	ldr	r0, [pc, #76]	@ (8002544 <HAL_DCMI_MspInit+0x220>)
 80024f6:	f001 fc9d 	bl	8003e34 <HAL_DMA_Init>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d001      	beq.n	8002504 <HAL_DCMI_MspInit+0x1e0>
    {
      Error_Handler();
 8002500:	f7ff fef0 	bl	80022e4 <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	4a0f      	ldr	r2, [pc, #60]	@ (8002544 <HAL_DCMI_MspInit+0x220>)
 8002508:	649a      	str	r2, [r3, #72]	@ 0x48
 800250a:	4a0e      	ldr	r2, [pc, #56]	@ (8002544 <HAL_DCMI_MspInit+0x220>)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 0, 0);
 8002510:	2200      	movs	r2, #0
 8002512:	2100      	movs	r1, #0
 8002514:	204e      	movs	r0, #78	@ 0x4e
 8002516:	f001 f8f4 	bl	8003702 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 800251a:	204e      	movs	r0, #78	@ 0x4e
 800251c:	f001 f90b 	bl	8003736 <HAL_NVIC_EnableIRQ>

    /* USER CODE END DCMI_MspInit 1 */

  }

}
 8002520:	bf00      	nop
 8002522:	3738      	adds	r7, #56	@ 0x38
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}
 8002528:	48020000 	.word	0x48020000
 800252c:	58024400 	.word	0x58024400
 8002530:	58021000 	.word	0x58021000
 8002534:	58020000 	.word	0x58020000
 8002538:	58020800 	.word	0x58020800
 800253c:	58020c00 	.word	0x58020c00
 8002540:	58020400 	.word	0x58020400
 8002544:	24000350 	.word	0x24000350
 8002548:	40020010 	.word	0x40020010

0800254c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b0ba      	sub	sp, #232	@ 0xe8
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002554:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002558:	2200      	movs	r2, #0
 800255a:	601a      	str	r2, [r3, #0]
 800255c:	605a      	str	r2, [r3, #4]
 800255e:	609a      	str	r2, [r3, #8]
 8002560:	60da      	str	r2, [r3, #12]
 8002562:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002564:	f107 0310 	add.w	r3, r7, #16
 8002568:	22c0      	movs	r2, #192	@ 0xc0
 800256a:	2100      	movs	r1, #0
 800256c:	4618      	mov	r0, r3
 800256e:	f016 fe70 	bl	8019252 <memset>
  if(hi2c->Instance==I2C2)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a38      	ldr	r2, [pc, #224]	@ (8002658 <HAL_I2C_MspInit+0x10c>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d169      	bne.n	8002650 <HAL_I2C_MspInit+0x104>

    /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800257c:	f04f 0208 	mov.w	r2, #8
 8002580:	f04f 0300 	mov.w	r3, #0
 8002584:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 2;
 8002588:	2302      	movs	r3, #2
 800258a:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 12;
 800258c:	230c      	movs	r3, #12
 800258e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8002590:	2302      	movs	r3, #2
 8002592:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8002594:	2302      	movs	r3, #2
 8002596:	647b      	str	r3, [r7, #68]	@ 0x44
    PeriphClkInitStruct.PLL3.PLL3R = 3;
 8002598:	2303      	movs	r3, #3
 800259a:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 800259c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80025a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 80025a2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80025a6:	653b      	str	r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 80025a8:	2300      	movs	r3, #0
 80025aa:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_PLL3;
 80025ac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80025b0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80025b4:	f107 0310 	add.w	r3, r7, #16
 80025b8:	4618      	mov	r0, r3
 80025ba:	f00b fdef 	bl	800e19c <HAL_RCCEx_PeriphCLKConfig>
 80025be:	4603      	mov	r3, r0
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d001      	beq.n	80025c8 <HAL_I2C_MspInit+0x7c>
    {
      Error_Handler();
 80025c4:	f7ff fe8e 	bl	80022e4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025c8:	4b24      	ldr	r3, [pc, #144]	@ (800265c <HAL_I2C_MspInit+0x110>)
 80025ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80025ce:	4a23      	ldr	r2, [pc, #140]	@ (800265c <HAL_I2C_MspInit+0x110>)
 80025d0:	f043 0302 	orr.w	r3, r3, #2
 80025d4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80025d8:	4b20      	ldr	r3, [pc, #128]	@ (800265c <HAL_I2C_MspInit+0x110>)
 80025da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80025de:	f003 0302 	and.w	r3, r3, #2
 80025e2:	60fb      	str	r3, [r7, #12]
 80025e4:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80025e6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80025ea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025ee:	2312      	movs	r3, #18
 80025f0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025f4:	2301      	movs	r3, #1
 80025f6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025fa:	2303      	movs	r3, #3
 80025fc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002600:	2304      	movs	r3, #4
 8002602:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002606:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800260a:	4619      	mov	r1, r3
 800260c:	4814      	ldr	r0, [pc, #80]	@ (8002660 <HAL_I2C_MspInit+0x114>)
 800260e:	f004 ff0b 	bl	8007428 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002612:	4b12      	ldr	r3, [pc, #72]	@ (800265c <HAL_I2C_MspInit+0x110>)
 8002614:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002618:	4a10      	ldr	r2, [pc, #64]	@ (800265c <HAL_I2C_MspInit+0x110>)
 800261a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800261e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002622:	4b0e      	ldr	r3, [pc, #56]	@ (800265c <HAL_I2C_MspInit+0x110>)
 8002624:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002628:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800262c:	60bb      	str	r3, [r7, #8]
 800262e:	68bb      	ldr	r3, [r7, #8]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8002630:	2200      	movs	r2, #0
 8002632:	2100      	movs	r1, #0
 8002634:	2021      	movs	r0, #33	@ 0x21
 8002636:	f001 f864 	bl	8003702 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 800263a:	2021      	movs	r0, #33	@ 0x21
 800263c:	f001 f87b 	bl	8003736 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8002640:	2200      	movs	r2, #0
 8002642:	2100      	movs	r1, #0
 8002644:	2022      	movs	r0, #34	@ 0x22
 8002646:	f001 f85c 	bl	8003702 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 800264a:	2022      	movs	r0, #34	@ 0x22
 800264c:	f001 f873 	bl	8003736 <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 8002650:	bf00      	nop
 8002652:	37e8      	adds	r7, #232	@ 0xe8
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}
 8002658:	40005800 	.word	0x40005800
 800265c:	58024400 	.word	0x58024400
 8002660:	58020400 	.word	0x58020400

08002664 <HAL_JPEG_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hjpeg: JPEG handle pointer
  * @retval None
  */
void HAL_JPEG_MspInit(JPEG_HandleTypeDef* hjpeg)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b084      	sub	sp, #16
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  if(hjpeg->Instance==JPEG)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a55      	ldr	r2, [pc, #340]	@ (80027c8 <HAL_JPEG_MspInit+0x164>)
 8002672:	4293      	cmp	r3, r2
 8002674:	f040 80a3 	bne.w	80027be <HAL_JPEG_MspInit+0x15a>
  {
    /* USER CODE BEGIN JPEG_MspInit 0 */

    /* USER CODE END JPEG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_JPEG_CLK_ENABLE();
 8002678:	4b54      	ldr	r3, [pc, #336]	@ (80027cc <HAL_JPEG_MspInit+0x168>)
 800267a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800267e:	4a53      	ldr	r2, [pc, #332]	@ (80027cc <HAL_JPEG_MspInit+0x168>)
 8002680:	f043 0320 	orr.w	r3, r3, #32
 8002684:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8002688:	4b50      	ldr	r3, [pc, #320]	@ (80027cc <HAL_JPEG_MspInit+0x168>)
 800268a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800268e:	f003 0320 	and.w	r3, r3, #32
 8002692:	60fb      	str	r3, [r7, #12]
 8002694:	68fb      	ldr	r3, [r7, #12]

    /* JPEG MDMA Init */
    /* JPEG_INFIFO_TH Init */
    hmdma_jpeg_infifo_th.Instance = MDMA_Channel0;
 8002696:	4b4e      	ldr	r3, [pc, #312]	@ (80027d0 <HAL_JPEG_MspInit+0x16c>)
 8002698:	4a4e      	ldr	r2, [pc, #312]	@ (80027d4 <HAL_JPEG_MspInit+0x170>)
 800269a:	601a      	str	r2, [r3, #0]
    hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
 800269c:	4b4c      	ldr	r3, [pc, #304]	@ (80027d0 <HAL_JPEG_MspInit+0x16c>)
 800269e:	2211      	movs	r2, #17
 80026a0:	605a      	str	r2, [r3, #4]
    hmdma_jpeg_infifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
 80026a2:	4b4b      	ldr	r3, [pc, #300]	@ (80027d0 <HAL_JPEG_MspInit+0x16c>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	609a      	str	r2, [r3, #8]
    hmdma_jpeg_infifo_th.Init.Priority = MDMA_PRIORITY_MEDIUM;
 80026a8:	4b49      	ldr	r3, [pc, #292]	@ (80027d0 <HAL_JPEG_MspInit+0x16c>)
 80026aa:	2240      	movs	r2, #64	@ 0x40
 80026ac:	60da      	str	r2, [r3, #12]
    hmdma_jpeg_infifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 80026ae:	4b48      	ldr	r3, [pc, #288]	@ (80027d0 <HAL_JPEG_MspInit+0x16c>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	611a      	str	r2, [r3, #16]
    hmdma_jpeg_infifo_th.Init.SourceInc = MDMA_SRC_INC_BYTE;
 80026b4:	4b46      	ldr	r3, [pc, #280]	@ (80027d0 <HAL_JPEG_MspInit+0x16c>)
 80026b6:	2202      	movs	r2, #2
 80026b8:	615a      	str	r2, [r3, #20]
    hmdma_jpeg_infifo_th.Init.DestinationInc = MDMA_DEST_INC_DISABLE;
 80026ba:	4b45      	ldr	r3, [pc, #276]	@ (80027d0 <HAL_JPEG_MspInit+0x16c>)
 80026bc:	2200      	movs	r2, #0
 80026be:	619a      	str	r2, [r3, #24]
    hmdma_jpeg_infifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_BYTE;
 80026c0:	4b43      	ldr	r3, [pc, #268]	@ (80027d0 <HAL_JPEG_MspInit+0x16c>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	61da      	str	r2, [r3, #28]
    hmdma_jpeg_infifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
 80026c6:	4b42      	ldr	r3, [pc, #264]	@ (80027d0 <HAL_JPEG_MspInit+0x16c>)
 80026c8:	2280      	movs	r2, #128	@ 0x80
 80026ca:	621a      	str	r2, [r3, #32]
    hmdma_jpeg_infifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 80026cc:	4b40      	ldr	r3, [pc, #256]	@ (80027d0 <HAL_JPEG_MspInit+0x16c>)
 80026ce:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80026d2:	625a      	str	r2, [r3, #36]	@ 0x24
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
 80026d4:	4b3e      	ldr	r3, [pc, #248]	@ (80027d0 <HAL_JPEG_MspInit+0x16c>)
 80026d6:	2220      	movs	r2, #32
 80026d8:	629a      	str	r2, [r3, #40]	@ 0x28
    hmdma_jpeg_infifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 80026da:	4b3d      	ldr	r3, [pc, #244]	@ (80027d0 <HAL_JPEG_MspInit+0x16c>)
 80026dc:	2200      	movs	r2, #0
 80026de:	62da      	str	r2, [r3, #44]	@ 0x2c
    hmdma_jpeg_infifo_th.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 80026e0:	4b3b      	ldr	r3, [pc, #236]	@ (80027d0 <HAL_JPEG_MspInit+0x16c>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	631a      	str	r2, [r3, #48]	@ 0x30
    hmdma_jpeg_infifo_th.Init.SourceBlockAddressOffset = 0;
 80026e6:	4b3a      	ldr	r3, [pc, #232]	@ (80027d0 <HAL_JPEG_MspInit+0x16c>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	635a      	str	r2, [r3, #52]	@ 0x34
    hmdma_jpeg_infifo_th.Init.DestBlockAddressOffset = 0;
 80026ec:	4b38      	ldr	r3, [pc, #224]	@ (80027d0 <HAL_JPEG_MspInit+0x16c>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	639a      	str	r2, [r3, #56]	@ 0x38
    if (HAL_MDMA_Init(&hmdma_jpeg_infifo_th) != HAL_OK)
 80026f2:	4837      	ldr	r0, [pc, #220]	@ (80027d0 <HAL_JPEG_MspInit+0x16c>)
 80026f4:	f008 fee0 	bl	800b4b8 <HAL_MDMA_Init>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d001      	beq.n	8002702 <HAL_JPEG_MspInit+0x9e>
    {
      Error_Handler();
 80026fe:	f7ff fdf1 	bl	80022e4 <Error_Handler>
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_infifo_th, 0, 0) != HAL_OK)
 8002702:	2200      	movs	r2, #0
 8002704:	2100      	movs	r1, #0
 8002706:	4832      	ldr	r0, [pc, #200]	@ (80027d0 <HAL_JPEG_MspInit+0x16c>)
 8002708:	f008 ff22 	bl	800b550 <HAL_MDMA_ConfigPostRequestMask>
 800270c:	4603      	mov	r3, r0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d001      	beq.n	8002716 <HAL_JPEG_MspInit+0xb2>
    {
      Error_Handler();
 8002712:	f7ff fde7 	bl	80022e4 <Error_Handler>
    }

    __HAL_LINKDMA(hjpeg,hdmain,hmdma_jpeg_infifo_th);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4a2d      	ldr	r2, [pc, #180]	@ (80027d0 <HAL_JPEG_MspInit+0x16c>)
 800271a:	631a      	str	r2, [r3, #48]	@ 0x30
 800271c:	4a2c      	ldr	r2, [pc, #176]	@ (80027d0 <HAL_JPEG_MspInit+0x16c>)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6413      	str	r3, [r2, #64]	@ 0x40

    /* JPEG_OUTFIFO_NE Init */
    hmdma_jpeg_outfifo_ne.Instance = MDMA_Channel1;
 8002722:	4b2d      	ldr	r3, [pc, #180]	@ (80027d8 <HAL_JPEG_MspInit+0x174>)
 8002724:	4a2d      	ldr	r2, [pc, #180]	@ (80027dc <HAL_JPEG_MspInit+0x178>)
 8002726:	601a      	str	r2, [r3, #0]
    hmdma_jpeg_outfifo_ne.Init.Request = MDMA_REQUEST_JPEG_OUTFIFO_NE;
 8002728:	4b2b      	ldr	r3, [pc, #172]	@ (80027d8 <HAL_JPEG_MspInit+0x174>)
 800272a:	2214      	movs	r2, #20
 800272c:	605a      	str	r2, [r3, #4]
    hmdma_jpeg_outfifo_ne.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
 800272e:	4b2a      	ldr	r3, [pc, #168]	@ (80027d8 <HAL_JPEG_MspInit+0x174>)
 8002730:	2200      	movs	r2, #0
 8002732:	609a      	str	r2, [r3, #8]
    hmdma_jpeg_outfifo_ne.Init.Priority = MDMA_PRIORITY_MEDIUM;
 8002734:	4b28      	ldr	r3, [pc, #160]	@ (80027d8 <HAL_JPEG_MspInit+0x174>)
 8002736:	2240      	movs	r2, #64	@ 0x40
 8002738:	60da      	str	r2, [r3, #12]
    hmdma_jpeg_outfifo_ne.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 800273a:	4b27      	ldr	r3, [pc, #156]	@ (80027d8 <HAL_JPEG_MspInit+0x174>)
 800273c:	2200      	movs	r2, #0
 800273e:	611a      	str	r2, [r3, #16]
    hmdma_jpeg_outfifo_ne.Init.SourceInc = MDMA_SRC_INC_DISABLE;
 8002740:	4b25      	ldr	r3, [pc, #148]	@ (80027d8 <HAL_JPEG_MspInit+0x174>)
 8002742:	2200      	movs	r2, #0
 8002744:	615a      	str	r2, [r3, #20]
    hmdma_jpeg_outfifo_ne.Init.DestinationInc = MDMA_DEST_INC_BYTE;
 8002746:	4b24      	ldr	r3, [pc, #144]	@ (80027d8 <HAL_JPEG_MspInit+0x174>)
 8002748:	2208      	movs	r2, #8
 800274a:	619a      	str	r2, [r3, #24]
    hmdma_jpeg_outfifo_ne.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 800274c:	4b22      	ldr	r3, [pc, #136]	@ (80027d8 <HAL_JPEG_MspInit+0x174>)
 800274e:	2220      	movs	r2, #32
 8002750:	61da      	str	r2, [r3, #28]
    hmdma_jpeg_outfifo_ne.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
 8002752:	4b21      	ldr	r3, [pc, #132]	@ (80027d8 <HAL_JPEG_MspInit+0x174>)
 8002754:	2200      	movs	r2, #0
 8002756:	621a      	str	r2, [r3, #32]
    hmdma_jpeg_outfifo_ne.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8002758:	4b1f      	ldr	r3, [pc, #124]	@ (80027d8 <HAL_JPEG_MspInit+0x174>)
 800275a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800275e:	625a      	str	r2, [r3, #36]	@ 0x24
    hmdma_jpeg_outfifo_ne.Init.BufferTransferLength = 4;
 8002760:	4b1d      	ldr	r3, [pc, #116]	@ (80027d8 <HAL_JPEG_MspInit+0x174>)
 8002762:	2204      	movs	r2, #4
 8002764:	629a      	str	r2, [r3, #40]	@ 0x28
    hmdma_jpeg_outfifo_ne.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 8002766:	4b1c      	ldr	r3, [pc, #112]	@ (80027d8 <HAL_JPEG_MspInit+0x174>)
 8002768:	2200      	movs	r2, #0
 800276a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hmdma_jpeg_outfifo_ne.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 800276c:	4b1a      	ldr	r3, [pc, #104]	@ (80027d8 <HAL_JPEG_MspInit+0x174>)
 800276e:	2200      	movs	r2, #0
 8002770:	631a      	str	r2, [r3, #48]	@ 0x30
    hmdma_jpeg_outfifo_ne.Init.SourceBlockAddressOffset = 0;
 8002772:	4b19      	ldr	r3, [pc, #100]	@ (80027d8 <HAL_JPEG_MspInit+0x174>)
 8002774:	2200      	movs	r2, #0
 8002776:	635a      	str	r2, [r3, #52]	@ 0x34
    hmdma_jpeg_outfifo_ne.Init.DestBlockAddressOffset = 0;
 8002778:	4b17      	ldr	r3, [pc, #92]	@ (80027d8 <HAL_JPEG_MspInit+0x174>)
 800277a:	2200      	movs	r2, #0
 800277c:	639a      	str	r2, [r3, #56]	@ 0x38
    if (HAL_MDMA_Init(&hmdma_jpeg_outfifo_ne) != HAL_OK)
 800277e:	4816      	ldr	r0, [pc, #88]	@ (80027d8 <HAL_JPEG_MspInit+0x174>)
 8002780:	f008 fe9a 	bl	800b4b8 <HAL_MDMA_Init>
 8002784:	4603      	mov	r3, r0
 8002786:	2b00      	cmp	r3, #0
 8002788:	d001      	beq.n	800278e <HAL_JPEG_MspInit+0x12a>
    {
      Error_Handler();
 800278a:	f7ff fdab 	bl	80022e4 <Error_Handler>
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_outfifo_ne, 0, 0) != HAL_OK)
 800278e:	2200      	movs	r2, #0
 8002790:	2100      	movs	r1, #0
 8002792:	4811      	ldr	r0, [pc, #68]	@ (80027d8 <HAL_JPEG_MspInit+0x174>)
 8002794:	f008 fedc 	bl	800b550 <HAL_MDMA_ConfigPostRequestMask>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d001      	beq.n	80027a2 <HAL_JPEG_MspInit+0x13e>
    {
      Error_Handler();
 800279e:	f7ff fda1 	bl	80022e4 <Error_Handler>
    }

    __HAL_LINKDMA(hjpeg,hdmaout,hmdma_jpeg_outfifo_ne);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	4a0c      	ldr	r2, [pc, #48]	@ (80027d8 <HAL_JPEG_MspInit+0x174>)
 80027a6:	635a      	str	r2, [r3, #52]	@ 0x34
 80027a8:	4a0b      	ldr	r2, [pc, #44]	@ (80027d8 <HAL_JPEG_MspInit+0x174>)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6413      	str	r3, [r2, #64]	@ 0x40

    /* JPEG interrupt Init */
    HAL_NVIC_SetPriority(JPEG_IRQn, 0, 0);
 80027ae:	2200      	movs	r2, #0
 80027b0:	2100      	movs	r1, #0
 80027b2:	2079      	movs	r0, #121	@ 0x79
 80027b4:	f000 ffa5 	bl	8003702 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(JPEG_IRQn);
 80027b8:	2079      	movs	r0, #121	@ 0x79
 80027ba:	f000 ffbc 	bl	8003736 <HAL_NVIC_EnableIRQ>

    /* USER CODE END JPEG_MspInit 1 */

  }

}
 80027be:	bf00      	nop
 80027c0:	3710      	adds	r7, #16
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	52003000 	.word	0x52003000
 80027cc:	58024400 	.word	0x58024400
 80027d0:	24000474 	.word	0x24000474
 80027d4:	52000040 	.word	0x52000040
 80027d8:	240004e0 	.word	0x240004e0
 80027dc:	52000080 	.word	0x52000080

080027e0 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b0bc      	sub	sp, #240	@ 0xf0
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027e8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80027ec:	2200      	movs	r2, #0
 80027ee:	601a      	str	r2, [r3, #0]
 80027f0:	605a      	str	r2, [r3, #4]
 80027f2:	609a      	str	r2, [r3, #8]
 80027f4:	60da      	str	r2, [r3, #12]
 80027f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80027f8:	f107 0318 	add.w	r3, r7, #24
 80027fc:	22c0      	movs	r2, #192	@ 0xc0
 80027fe:	2100      	movs	r1, #0
 8002800:	4618      	mov	r0, r3
 8002802:	f016 fd26 	bl	8019252 <memset>
  if(hspi->Instance==SPI2)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a38      	ldr	r2, [pc, #224]	@ (80028ec <HAL_SPI_MspInit+0x10c>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d169      	bne.n	80028e4 <HAL_SPI_MspInit+0x104>

    /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8002810:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002814:	f04f 0300 	mov.w	r3, #0
 8002818:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800281c:	2300      	movs	r3, #0
 800281e:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002820:	f107 0318 	add.w	r3, r7, #24
 8002824:	4618      	mov	r0, r3
 8002826:	f00b fcb9 	bl	800e19c <HAL_RCCEx_PeriphCLKConfig>
 800282a:	4603      	mov	r3, r0
 800282c:	2b00      	cmp	r3, #0
 800282e:	d001      	beq.n	8002834 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8002830:	f7ff fd58 	bl	80022e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002834:	4b2e      	ldr	r3, [pc, #184]	@ (80028f0 <HAL_SPI_MspInit+0x110>)
 8002836:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800283a:	4a2d      	ldr	r2, [pc, #180]	@ (80028f0 <HAL_SPI_MspInit+0x110>)
 800283c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002840:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002844:	4b2a      	ldr	r3, [pc, #168]	@ (80028f0 <HAL_SPI_MspInit+0x110>)
 8002846:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800284a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800284e:	617b      	str	r3, [r7, #20]
 8002850:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002852:	4b27      	ldr	r3, [pc, #156]	@ (80028f0 <HAL_SPI_MspInit+0x110>)
 8002854:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002858:	4a25      	ldr	r2, [pc, #148]	@ (80028f0 <HAL_SPI_MspInit+0x110>)
 800285a:	f043 0304 	orr.w	r3, r3, #4
 800285e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002862:	4b23      	ldr	r3, [pc, #140]	@ (80028f0 <HAL_SPI_MspInit+0x110>)
 8002864:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002868:	f003 0304 	and.w	r3, r3, #4
 800286c:	613b      	str	r3, [r7, #16]
 800286e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002870:	4b1f      	ldr	r3, [pc, #124]	@ (80028f0 <HAL_SPI_MspInit+0x110>)
 8002872:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002876:	4a1e      	ldr	r2, [pc, #120]	@ (80028f0 <HAL_SPI_MspInit+0x110>)
 8002878:	f043 0302 	orr.w	r3, r3, #2
 800287c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002880:	4b1b      	ldr	r3, [pc, #108]	@ (80028f0 <HAL_SPI_MspInit+0x110>)
 8002882:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002886:	f003 0302 	and.w	r3, r3, #2
 800288a:	60fb      	str	r3, [r7, #12]
 800288c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PC2_C     ------> SPI2_MISO
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 800288e:	2306      	movs	r3, #6
 8002890:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002894:	2302      	movs	r3, #2
 8002896:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800289a:	2300      	movs	r3, #0
 800289c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028a0:	2300      	movs	r3, #0
 80028a2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80028a6:	2305      	movs	r3, #5
 80028a8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028ac:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80028b0:	4619      	mov	r1, r3
 80028b2:	4810      	ldr	r0, [pc, #64]	@ (80028f4 <HAL_SPI_MspInit+0x114>)
 80028b4:	f004 fdb8 	bl	8007428 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80028b8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80028bc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028c0:	2302      	movs	r3, #2
 80028c2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c6:	2300      	movs	r3, #0
 80028c8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028cc:	2300      	movs	r3, #0
 80028ce:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80028d2:	2305      	movs	r3, #5
 80028d4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028d8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80028dc:	4619      	mov	r1, r3
 80028de:	4806      	ldr	r0, [pc, #24]	@ (80028f8 <HAL_SPI_MspInit+0x118>)
 80028e0:	f004 fda2 	bl	8007428 <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 80028e4:	bf00      	nop
 80028e6:	37f0      	adds	r7, #240	@ 0xf0
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	40003800 	.word	0x40003800
 80028f0:	58024400 	.word	0x58024400
 80028f4:	58020800 	.word	0x58020800
 80028f8:	58020400 	.word	0x58020400

080028fc <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b087      	sub	sp, #28
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a2b      	ldr	r2, [pc, #172]	@ (80029b8 <HAL_TIM_PWM_MspInit+0xbc>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d10f      	bne.n	800292e <HAL_TIM_PWM_MspInit+0x32>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800290e:	4b2b      	ldr	r3, [pc, #172]	@ (80029bc <HAL_TIM_PWM_MspInit+0xc0>)
 8002910:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002914:	4a29      	ldr	r2, [pc, #164]	@ (80029bc <HAL_TIM_PWM_MspInit+0xc0>)
 8002916:	f043 0301 	orr.w	r3, r3, #1
 800291a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800291e:	4b27      	ldr	r3, [pc, #156]	@ (80029bc <HAL_TIM_PWM_MspInit+0xc0>)
 8002920:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002924:	f003 0301 	and.w	r3, r3, #1
 8002928:	617b      	str	r3, [r7, #20]
 800292a:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 800292c:	e03d      	b.n	80029aa <HAL_TIM_PWM_MspInit+0xae>
  else if(htim_pwm->Instance==TIM2)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002936:	d10f      	bne.n	8002958 <HAL_TIM_PWM_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002938:	4b20      	ldr	r3, [pc, #128]	@ (80029bc <HAL_TIM_PWM_MspInit+0xc0>)
 800293a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800293e:	4a1f      	ldr	r2, [pc, #124]	@ (80029bc <HAL_TIM_PWM_MspInit+0xc0>)
 8002940:	f043 0301 	orr.w	r3, r3, #1
 8002944:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002948:	4b1c      	ldr	r3, [pc, #112]	@ (80029bc <HAL_TIM_PWM_MspInit+0xc0>)
 800294a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800294e:	f003 0301 	and.w	r3, r3, #1
 8002952:	613b      	str	r3, [r7, #16]
 8002954:	693b      	ldr	r3, [r7, #16]
}
 8002956:	e028      	b.n	80029aa <HAL_TIM_PWM_MspInit+0xae>
  else if(htim_pwm->Instance==TIM3)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a18      	ldr	r2, [pc, #96]	@ (80029c0 <HAL_TIM_PWM_MspInit+0xc4>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d10f      	bne.n	8002982 <HAL_TIM_PWM_MspInit+0x86>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002962:	4b16      	ldr	r3, [pc, #88]	@ (80029bc <HAL_TIM_PWM_MspInit+0xc0>)
 8002964:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002968:	4a14      	ldr	r2, [pc, #80]	@ (80029bc <HAL_TIM_PWM_MspInit+0xc0>)
 800296a:	f043 0302 	orr.w	r3, r3, #2
 800296e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002972:	4b12      	ldr	r3, [pc, #72]	@ (80029bc <HAL_TIM_PWM_MspInit+0xc0>)
 8002974:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002978:	f003 0302 	and.w	r3, r3, #2
 800297c:	60fb      	str	r3, [r7, #12]
 800297e:	68fb      	ldr	r3, [r7, #12]
}
 8002980:	e013      	b.n	80029aa <HAL_TIM_PWM_MspInit+0xae>
  else if(htim_pwm->Instance==TIM4)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a0f      	ldr	r2, [pc, #60]	@ (80029c4 <HAL_TIM_PWM_MspInit+0xc8>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d10e      	bne.n	80029aa <HAL_TIM_PWM_MspInit+0xae>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800298c:	4b0b      	ldr	r3, [pc, #44]	@ (80029bc <HAL_TIM_PWM_MspInit+0xc0>)
 800298e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002992:	4a0a      	ldr	r2, [pc, #40]	@ (80029bc <HAL_TIM_PWM_MspInit+0xc0>)
 8002994:	f043 0304 	orr.w	r3, r3, #4
 8002998:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800299c:	4b07      	ldr	r3, [pc, #28]	@ (80029bc <HAL_TIM_PWM_MspInit+0xc0>)
 800299e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80029a2:	f003 0304 	and.w	r3, r3, #4
 80029a6:	60bb      	str	r3, [r7, #8]
 80029a8:	68bb      	ldr	r3, [r7, #8]
}
 80029aa:	bf00      	nop
 80029ac:	371c      	adds	r7, #28
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr
 80029b6:	bf00      	nop
 80029b8:	40010000 	.word	0x40010000
 80029bc:	58024400 	.word	0x58024400
 80029c0:	40000400 	.word	0x40000400
 80029c4:	40000800 	.word	0x40000800

080029c8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b084      	sub	sp, #16
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a1d      	ldr	r2, [pc, #116]	@ (8002a4c <HAL_TIM_Base_MspInit+0x84>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d117      	bne.n	8002a0a <HAL_TIM_Base_MspInit+0x42>
  {
    /* USER CODE BEGIN TIM5_MspInit 0 */

    /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 80029da:	4b1d      	ldr	r3, [pc, #116]	@ (8002a50 <HAL_TIM_Base_MspInit+0x88>)
 80029dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80029e0:	4a1b      	ldr	r2, [pc, #108]	@ (8002a50 <HAL_TIM_Base_MspInit+0x88>)
 80029e2:	f043 0308 	orr.w	r3, r3, #8
 80029e6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80029ea:	4b19      	ldr	r3, [pc, #100]	@ (8002a50 <HAL_TIM_Base_MspInit+0x88>)
 80029ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80029f0:	f003 0308 	and.w	r3, r3, #8
 80029f4:	60fb      	str	r3, [r7, #12]
 80029f6:	68fb      	ldr	r3, [r7, #12]
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80029f8:	2200      	movs	r2, #0
 80029fa:	2100      	movs	r1, #0
 80029fc:	2032      	movs	r0, #50	@ 0x32
 80029fe:	f000 fe80 	bl	8003702 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002a02:	2032      	movs	r0, #50	@ 0x32
 8002a04:	f000 fe97 	bl	8003736 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM14_MspInit 1 */

    /* USER CODE END TIM14_MspInit 1 */
  }

}
 8002a08:	e01b      	b.n	8002a42 <HAL_TIM_Base_MspInit+0x7a>
  else if(htim_base->Instance==TIM14)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a11      	ldr	r2, [pc, #68]	@ (8002a54 <HAL_TIM_Base_MspInit+0x8c>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d116      	bne.n	8002a42 <HAL_TIM_Base_MspInit+0x7a>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002a14:	4b0e      	ldr	r3, [pc, #56]	@ (8002a50 <HAL_TIM_Base_MspInit+0x88>)
 8002a16:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002a1a:	4a0d      	ldr	r2, [pc, #52]	@ (8002a50 <HAL_TIM_Base_MspInit+0x88>)
 8002a1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a20:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002a24:	4b0a      	ldr	r3, [pc, #40]	@ (8002a50 <HAL_TIM_Base_MspInit+0x88>)
 8002a26:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002a2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a2e:	60bb      	str	r3, [r7, #8]
 8002a30:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8002a32:	2200      	movs	r2, #0
 8002a34:	2100      	movs	r1, #0
 8002a36:	202d      	movs	r0, #45	@ 0x2d
 8002a38:	f000 fe63 	bl	8003702 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8002a3c:	202d      	movs	r0, #45	@ 0x2d
 8002a3e:	f000 fe7a 	bl	8003736 <HAL_NVIC_EnableIRQ>
}
 8002a42:	bf00      	nop
 8002a44:	3710      	adds	r7, #16
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	40000c00 	.word	0x40000c00
 8002a50:	58024400 	.word	0x58024400
 8002a54:	40002000 	.word	0x40002000

08002a58 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b08c      	sub	sp, #48	@ 0x30
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a60:	f107 031c 	add.w	r3, r7, #28
 8002a64:	2200      	movs	r2, #0
 8002a66:	601a      	str	r2, [r3, #0]
 8002a68:	605a      	str	r2, [r3, #4]
 8002a6a:	609a      	str	r2, [r3, #8]
 8002a6c:	60da      	str	r2, [r3, #12]
 8002a6e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a5d      	ldr	r2, [pc, #372]	@ (8002bec <HAL_TIM_MspPostInit+0x194>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d120      	bne.n	8002abc <HAL_TIM_MspPostInit+0x64>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002a7a:	4b5d      	ldr	r3, [pc, #372]	@ (8002bf0 <HAL_TIM_MspPostInit+0x198>)
 8002a7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a80:	4a5b      	ldr	r2, [pc, #364]	@ (8002bf0 <HAL_TIM_MspPostInit+0x198>)
 8002a82:	f043 0310 	orr.w	r3, r3, #16
 8002a86:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002a8a:	4b59      	ldr	r3, [pc, #356]	@ (8002bf0 <HAL_TIM_MspPostInit+0x198>)
 8002a8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a90:	f003 0310 	and.w	r3, r3, #16
 8002a94:	61bb      	str	r3, [r7, #24]
 8002a96:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002a98:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002a9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a9e:	2302      	movs	r3, #2
 8002aa0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002aae:	f107 031c 	add.w	r3, r7, #28
 8002ab2:	4619      	mov	r1, r3
 8002ab4:	484f      	ldr	r0, [pc, #316]	@ (8002bf4 <HAL_TIM_MspPostInit+0x19c>)
 8002ab6:	f004 fcb7 	bl	8007428 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM14_MspPostInit 1 */

    /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8002aba:	e093      	b.n	8002be4 <HAL_TIM_MspPostInit+0x18c>
  else if(htim->Instance==TIM2)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ac4:	d11f      	bne.n	8002b06 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ac6:	4b4a      	ldr	r3, [pc, #296]	@ (8002bf0 <HAL_TIM_MspPostInit+0x198>)
 8002ac8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002acc:	4a48      	ldr	r2, [pc, #288]	@ (8002bf0 <HAL_TIM_MspPostInit+0x198>)
 8002ace:	f043 0301 	orr.w	r3, r3, #1
 8002ad2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002ad6:	4b46      	ldr	r3, [pc, #280]	@ (8002bf0 <HAL_TIM_MspPostInit+0x198>)
 8002ad8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002adc:	f003 0301 	and.w	r3, r3, #1
 8002ae0:	617b      	str	r3, [r7, #20]
 8002ae2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8002ae4:	2307      	movs	r3, #7
 8002ae6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ae8:	2302      	movs	r3, #2
 8002aea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aec:	2300      	movs	r3, #0
 8002aee:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002af0:	2300      	movs	r3, #0
 8002af2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002af4:	2301      	movs	r3, #1
 8002af6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002af8:	f107 031c 	add.w	r3, r7, #28
 8002afc:	4619      	mov	r1, r3
 8002afe:	483e      	ldr	r0, [pc, #248]	@ (8002bf8 <HAL_TIM_MspPostInit+0x1a0>)
 8002b00:	f004 fc92 	bl	8007428 <HAL_GPIO_Init>
}
 8002b04:	e06e      	b.n	8002be4 <HAL_TIM_MspPostInit+0x18c>
  else if(htim->Instance==TIM3)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a3c      	ldr	r2, [pc, #240]	@ (8002bfc <HAL_TIM_MspPostInit+0x1a4>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d11f      	bne.n	8002b50 <HAL_TIM_MspPostInit+0xf8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b10:	4b37      	ldr	r3, [pc, #220]	@ (8002bf0 <HAL_TIM_MspPostInit+0x198>)
 8002b12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b16:	4a36      	ldr	r2, [pc, #216]	@ (8002bf0 <HAL_TIM_MspPostInit+0x198>)
 8002b18:	f043 0302 	orr.w	r3, r3, #2
 8002b1c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002b20:	4b33      	ldr	r3, [pc, #204]	@ (8002bf0 <HAL_TIM_MspPostInit+0x198>)
 8002b22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b26:	f003 0302 	and.w	r3, r3, #2
 8002b2a:	613b      	str	r3, [r7, #16]
 8002b2c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b32:	2302      	movs	r3, #2
 8002b34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b36:	2300      	movs	r3, #0
 8002b38:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002b3e:	2302      	movs	r3, #2
 8002b40:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b42:	f107 031c 	add.w	r3, r7, #28
 8002b46:	4619      	mov	r1, r3
 8002b48:	482d      	ldr	r0, [pc, #180]	@ (8002c00 <HAL_TIM_MspPostInit+0x1a8>)
 8002b4a:	f004 fc6d 	bl	8007428 <HAL_GPIO_Init>
}
 8002b4e:	e049      	b.n	8002be4 <HAL_TIM_MspPostInit+0x18c>
  else if(htim->Instance==TIM4)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a2b      	ldr	r2, [pc, #172]	@ (8002c04 <HAL_TIM_MspPostInit+0x1ac>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d120      	bne.n	8002b9c <HAL_TIM_MspPostInit+0x144>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b5a:	4b25      	ldr	r3, [pc, #148]	@ (8002bf0 <HAL_TIM_MspPostInit+0x198>)
 8002b5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b60:	4a23      	ldr	r2, [pc, #140]	@ (8002bf0 <HAL_TIM_MspPostInit+0x198>)
 8002b62:	f043 0302 	orr.w	r3, r3, #2
 8002b66:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002b6a:	4b21      	ldr	r3, [pc, #132]	@ (8002bf0 <HAL_TIM_MspPostInit+0x198>)
 8002b6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b70:	f003 0302 	and.w	r3, r3, #2
 8002b74:	60fb      	str	r3, [r7, #12]
 8002b76:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002b78:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002b7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b7e:	2302      	movs	r3, #2
 8002b80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b82:	2300      	movs	r3, #0
 8002b84:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b86:	2300      	movs	r3, #0
 8002b88:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002b8a:	2302      	movs	r3, #2
 8002b8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b8e:	f107 031c 	add.w	r3, r7, #28
 8002b92:	4619      	mov	r1, r3
 8002b94:	481a      	ldr	r0, [pc, #104]	@ (8002c00 <HAL_TIM_MspPostInit+0x1a8>)
 8002b96:	f004 fc47 	bl	8007428 <HAL_GPIO_Init>
}
 8002b9a:	e023      	b.n	8002be4 <HAL_TIM_MspPostInit+0x18c>
  else if(htim->Instance==TIM14)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a19      	ldr	r2, [pc, #100]	@ (8002c08 <HAL_TIM_MspPostInit+0x1b0>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d11e      	bne.n	8002be4 <HAL_TIM_MspPostInit+0x18c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ba6:	4b12      	ldr	r3, [pc, #72]	@ (8002bf0 <HAL_TIM_MspPostInit+0x198>)
 8002ba8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002bac:	4a10      	ldr	r2, [pc, #64]	@ (8002bf0 <HAL_TIM_MspPostInit+0x198>)
 8002bae:	f043 0301 	orr.w	r3, r3, #1
 8002bb2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002bb6:	4b0e      	ldr	r3, [pc, #56]	@ (8002bf0 <HAL_TIM_MspPostInit+0x198>)
 8002bb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002bbc:	f003 0301 	and.w	r3, r3, #1
 8002bc0:	60bb      	str	r3, [r7, #8]
 8002bc2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002bc4:	2380      	movs	r3, #128	@ 0x80
 8002bc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bc8:	2302      	movs	r3, #2
 8002bca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8002bd4:	2309      	movs	r3, #9
 8002bd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bd8:	f107 031c 	add.w	r3, r7, #28
 8002bdc:	4619      	mov	r1, r3
 8002bde:	4806      	ldr	r0, [pc, #24]	@ (8002bf8 <HAL_TIM_MspPostInit+0x1a0>)
 8002be0:	f004 fc22 	bl	8007428 <HAL_GPIO_Init>
}
 8002be4:	bf00      	nop
 8002be6:	3730      	adds	r7, #48	@ 0x30
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}
 8002bec:	40010000 	.word	0x40010000
 8002bf0:	58024400 	.word	0x58024400
 8002bf4:	58021000 	.word	0x58021000
 8002bf8:	58020000 	.word	0x58020000
 8002bfc:	40000400 	.word	0x40000400
 8002c00:	58020400 	.word	0x58020400
 8002c04:	40000800 	.word	0x40000800
 8002c08:	40002000 	.word	0x40002000

08002c0c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b0ba      	sub	sp, #232	@ 0xe8
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c14:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002c18:	2200      	movs	r2, #0
 8002c1a:	601a      	str	r2, [r3, #0]
 8002c1c:	605a      	str	r2, [r3, #4]
 8002c1e:	609a      	str	r2, [r3, #8]
 8002c20:	60da      	str	r2, [r3, #12]
 8002c22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002c24:	f107 0310 	add.w	r3, r7, #16
 8002c28:	22c0      	movs	r2, #192	@ 0xc0
 8002c2a:	2100      	movs	r1, #0
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f016 fb10 	bl	8019252 <memset>
  if(huart->Instance==USART1)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a43      	ldr	r2, [pc, #268]	@ (8002d44 <HAL_UART_MspInit+0x138>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d17e      	bne.n	8002d3a <HAL_UART_MspInit+0x12e>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002c3c:	f04f 0201 	mov.w	r2, #1
 8002c40:	f04f 0300 	mov.w	r3, #0
 8002c44:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c4e:	f107 0310 	add.w	r3, r7, #16
 8002c52:	4618      	mov	r0, r3
 8002c54:	f00b faa2 	bl	800e19c <HAL_RCCEx_PeriphCLKConfig>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d001      	beq.n	8002c62 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002c5e:	f7ff fb41 	bl	80022e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002c62:	4b39      	ldr	r3, [pc, #228]	@ (8002d48 <HAL_UART_MspInit+0x13c>)
 8002c64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002c68:	4a37      	ldr	r2, [pc, #220]	@ (8002d48 <HAL_UART_MspInit+0x13c>)
 8002c6a:	f043 0310 	orr.w	r3, r3, #16
 8002c6e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002c72:	4b35      	ldr	r3, [pc, #212]	@ (8002d48 <HAL_UART_MspInit+0x13c>)
 8002c74:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002c78:	f003 0310 	and.w	r3, r3, #16
 8002c7c:	60fb      	str	r3, [r7, #12]
 8002c7e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c80:	4b31      	ldr	r3, [pc, #196]	@ (8002d48 <HAL_UART_MspInit+0x13c>)
 8002c82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002c86:	4a30      	ldr	r2, [pc, #192]	@ (8002d48 <HAL_UART_MspInit+0x13c>)
 8002c88:	f043 0302 	orr.w	r3, r3, #2
 8002c8c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002c90:	4b2d      	ldr	r3, [pc, #180]	@ (8002d48 <HAL_UART_MspInit+0x13c>)
 8002c92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002c96:	f003 0302 	and.w	r3, r3, #2
 8002c9a:	60bb      	str	r3, [r7, #8]
 8002c9c:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002c9e:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002ca2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ca6:	2302      	movs	r3, #2
 8002ca8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cac:	2300      	movs	r3, #0
 8002cae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8002cb8:	2304      	movs	r3, #4
 8002cba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cbe:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002cc2:	4619      	mov	r1, r3
 8002cc4:	4821      	ldr	r0, [pc, #132]	@ (8002d4c <HAL_UART_MspInit+0x140>)
 8002cc6:	f004 fbaf 	bl	8007428 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream0;
 8002cca:	4b21      	ldr	r3, [pc, #132]	@ (8002d50 <HAL_UART_MspInit+0x144>)
 8002ccc:	4a21      	ldr	r2, [pc, #132]	@ (8002d54 <HAL_UART_MspInit+0x148>)
 8002cce:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8002cd0:	4b1f      	ldr	r3, [pc, #124]	@ (8002d50 <HAL_UART_MspInit+0x144>)
 8002cd2:	2229      	movs	r2, #41	@ 0x29
 8002cd4:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002cd6:	4b1e      	ldr	r3, [pc, #120]	@ (8002d50 <HAL_UART_MspInit+0x144>)
 8002cd8:	2200      	movs	r2, #0
 8002cda:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002cdc:	4b1c      	ldr	r3, [pc, #112]	@ (8002d50 <HAL_UART_MspInit+0x144>)
 8002cde:	2200      	movs	r2, #0
 8002ce0:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002ce2:	4b1b      	ldr	r3, [pc, #108]	@ (8002d50 <HAL_UART_MspInit+0x144>)
 8002ce4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002ce8:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002cea:	4b19      	ldr	r3, [pc, #100]	@ (8002d50 <HAL_UART_MspInit+0x144>)
 8002cec:	2200      	movs	r2, #0
 8002cee:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002cf0:	4b17      	ldr	r3, [pc, #92]	@ (8002d50 <HAL_UART_MspInit+0x144>)
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002cf6:	4b16      	ldr	r3, [pc, #88]	@ (8002d50 <HAL_UART_MspInit+0x144>)
 8002cf8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002cfc:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002cfe:	4b14      	ldr	r3, [pc, #80]	@ (8002d50 <HAL_UART_MspInit+0x144>)
 8002d00:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002d04:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d06:	4b12      	ldr	r3, [pc, #72]	@ (8002d50 <HAL_UART_MspInit+0x144>)
 8002d08:	2200      	movs	r2, #0
 8002d0a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002d0c:	4810      	ldr	r0, [pc, #64]	@ (8002d50 <HAL_UART_MspInit+0x144>)
 8002d0e:	f001 f891 	bl	8003e34 <HAL_DMA_Init>
 8002d12:	4603      	mov	r3, r0
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d001      	beq.n	8002d1c <HAL_UART_MspInit+0x110>
    {
      Error_Handler();
 8002d18:	f7ff fae4 	bl	80022e4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	4a0c      	ldr	r2, [pc, #48]	@ (8002d50 <HAL_UART_MspInit+0x144>)
 8002d20:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8002d24:	4a0a      	ldr	r2, [pc, #40]	@ (8002d50 <HAL_UART_MspInit+0x144>)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	2100      	movs	r1, #0
 8002d2e:	2025      	movs	r0, #37	@ 0x25
 8002d30:	f000 fce7 	bl	8003702 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002d34:	2025      	movs	r0, #37	@ 0x25
 8002d36:	f000 fcfe 	bl	8003736 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8002d3a:	bf00      	nop
 8002d3c:	37e8      	adds	r7, #232	@ 0xe8
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	40011000 	.word	0x40011000
 8002d48:	58024400 	.word	0x58024400
 8002d4c:	58020400 	.word	0x58020400
 8002d50:	24000830 	.word	0x24000830
 8002d54:	40020410 	.word	0x40020410

08002d58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002d5c:	bf00      	nop
 8002d5e:	e7fd      	b.n	8002d5c <NMI_Handler+0x4>

08002d60 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d60:	b480      	push	{r7}
 8002d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d64:	bf00      	nop
 8002d66:	e7fd      	b.n	8002d64 <HardFault_Handler+0x4>

08002d68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d6c:	bf00      	nop
 8002d6e:	e7fd      	b.n	8002d6c <MemManage_Handler+0x4>

08002d70 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d70:	b480      	push	{r7}
 8002d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d74:	bf00      	nop
 8002d76:	e7fd      	b.n	8002d74 <BusFault_Handler+0x4>

08002d78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d7c:	bf00      	nop
 8002d7e:	e7fd      	b.n	8002d7c <UsageFault_Handler+0x4>

08002d80 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d80:	b480      	push	{r7}
 8002d82:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d84:	bf00      	nop
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr

08002d8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d8e:	b480      	push	{r7}
 8002d90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d92:	bf00      	nop
 8002d94:	46bd      	mov	sp, r7
 8002d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9a:	4770      	bx	lr

08002d9c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002da0:	bf00      	nop
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr

08002daa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002daa:	b580      	push	{r7, lr}
 8002dac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002dae:	f000 fb7d 	bl	80034ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002db2:	bf00      	nop
 8002db4:	bd80      	pop	{r7, pc}
	...

08002db8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 8002dbc:	4802      	ldr	r0, [pc, #8]	@ (8002dc8 <DMA1_Stream0_IRQHandler+0x10>)
 8002dbe:	f002 fb63 	bl	8005488 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002dc2:	bf00      	nop
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	24000350 	.word	0x24000350

08002dcc <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8002dd0:	4802      	ldr	r0, [pc, #8]	@ (8002ddc <I2C2_EV_IRQHandler+0x10>)
 8002dd2:	f004 ff9d 	bl	8007d10 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8002dd6:	bf00      	nop
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	240003c8 	.word	0x240003c8

08002de0 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8002de4:	4802      	ldr	r0, [pc, #8]	@ (8002df0 <I2C2_ER_IRQHandler+0x10>)
 8002de6:	f004 ffad 	bl	8007d44 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8002dea:	bf00      	nop
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	bf00      	nop
 8002df0:	240003c8 	.word	0x240003c8

08002df4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002df8:	4802      	ldr	r0, [pc, #8]	@ (8002e04 <USART1_IRQHandler+0x10>)
 8002dfa:	f00f fa71 	bl	80122e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002dfe:	bf00      	nop
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop
 8002e04:	2400079c 	.word	0x2400079c

08002e08 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8002e0c:	4802      	ldr	r0, [pc, #8]	@ (8002e18 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8002e0e:	f00e f893 	bl	8010f38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8002e12:	bf00      	nop
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	24000750 	.word	0x24000750

08002e1c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
  NetworkTimeout();
 8002e20:	f7fe faca 	bl	80013b8 <NetworkTimeout>
  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002e24:	4802      	ldr	r0, [pc, #8]	@ (8002e30 <TIM5_IRQHandler+0x14>)
 8002e26:	f00e f887 	bl	8010f38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002e2a:	bf00      	nop
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	24000704 	.word	0x24000704

08002e34 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002e38:	4802      	ldr	r0, [pc, #8]	@ (8002e44 <DMA2_Stream0_IRQHandler+0x10>)
 8002e3a:	f002 fb25 	bl	8005488 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002e3e:	bf00      	nop
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	bf00      	nop
 8002e44:	24000830 	.word	0x24000830

08002e48 <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 8002e4c:	4802      	ldr	r0, [pc, #8]	@ (8002e58 <DCMI_IRQHandler+0x10>)
 8002e4e:	f000 fea1 	bl	8003b94 <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  /* USER CODE END DCMI_IRQn 1 */
}
 8002e52:	bf00      	nop
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	24000300 	.word	0x24000300

08002e5c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002e60:	4802      	ldr	r0, [pc, #8]	@ (8002e6c <OTG_FS_IRQHandler+0x10>)
 8002e62:	f009 f80c 	bl	800be7e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002e66:	bf00      	nop
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	2402724c 	.word	0x2402724c

08002e70 <JPEG_IRQHandler>:

/**
  * @brief This function handles JPEG global interrupt.
  */
void JPEG_IRQHandler(void)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN JPEG_IRQn 0 */

  /* USER CODE END JPEG_IRQn 0 */
  HAL_JPEG_IRQHandler(&hjpeg);
 8002e74:	4802      	ldr	r0, [pc, #8]	@ (8002e80 <JPEG_IRQHandler+0x10>)
 8002e76:	f006 fd28 	bl	80098ca <HAL_JPEG_IRQHandler>
  /* USER CODE BEGIN JPEG_IRQn 1 */

  /* USER CODE END JPEG_IRQn 1 */
}
 8002e7a:	bf00      	nop
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	2400041c 	.word	0x2400041c

08002e84 <MDMA_IRQHandler>:

/**
  * @brief This function handles MDMA global interrupt.
  */
void MDMA_IRQHandler(void)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MDMA_IRQn 0 */

  /* USER CODE END MDMA_IRQn 0 */
  HAL_MDMA_IRQHandler(&hmdma_jpeg_infifo_th);
 8002e88:	4803      	ldr	r0, [pc, #12]	@ (8002e98 <MDMA_IRQHandler+0x14>)
 8002e8a:	f008 fc5b 	bl	800b744 <HAL_MDMA_IRQHandler>
  HAL_MDMA_IRQHandler(&hmdma_jpeg_outfifo_ne);
 8002e8e:	4803      	ldr	r0, [pc, #12]	@ (8002e9c <MDMA_IRQHandler+0x18>)
 8002e90:	f008 fc58 	bl	800b744 <HAL_MDMA_IRQHandler>
  /* USER CODE BEGIN MDMA_IRQn 1 */

  /* USER CODE END MDMA_IRQn 1 */
}
 8002e94:	bf00      	nop
 8002e96:	bd80      	pop	{r7, pc}
 8002e98:	24000474 	.word	0x24000474
 8002e9c:	240004e0 	.word	0x240004e0

08002ea0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	af00      	add	r7, sp, #0
  return 1;
 8002ea4:	2301      	movs	r3, #1
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eae:	4770      	bx	lr

08002eb0 <_kill>:

int _kill(int pid, int sig)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b082      	sub	sp, #8
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
 8002eb8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002eba:	f016 fa2d 	bl	8019318 <__errno>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	2216      	movs	r2, #22
 8002ec2:	601a      	str	r2, [r3, #0]
  return -1;
 8002ec4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	3708      	adds	r7, #8
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}

08002ed0 <_exit>:

void _exit (int status)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b082      	sub	sp, #8
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002ed8:	f04f 31ff 	mov.w	r1, #4294967295
 8002edc:	6878      	ldr	r0, [r7, #4]
 8002ede:	f7ff ffe7 	bl	8002eb0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002ee2:	bf00      	nop
 8002ee4:	e7fd      	b.n	8002ee2 <_exit+0x12>

08002ee6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002ee6:	b580      	push	{r7, lr}
 8002ee8:	b086      	sub	sp, #24
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	60f8      	str	r0, [r7, #12]
 8002eee:	60b9      	str	r1, [r7, #8]
 8002ef0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	617b      	str	r3, [r7, #20]
 8002ef6:	e00a      	b.n	8002f0e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002ef8:	f3af 8000 	nop.w
 8002efc:	4601      	mov	r1, r0
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	1c5a      	adds	r2, r3, #1
 8002f02:	60ba      	str	r2, [r7, #8]
 8002f04:	b2ca      	uxtb	r2, r1
 8002f06:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	3301      	adds	r3, #1
 8002f0c:	617b      	str	r3, [r7, #20]
 8002f0e:	697a      	ldr	r2, [r7, #20]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	429a      	cmp	r2, r3
 8002f14:	dbf0      	blt.n	8002ef8 <_read+0x12>
  }

  return len;
 8002f16:	687b      	ldr	r3, [r7, #4]
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3718      	adds	r7, #24
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}

08002f20 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b086      	sub	sp, #24
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	60f8      	str	r0, [r7, #12]
 8002f28:	60b9      	str	r1, [r7, #8]
 8002f2a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	617b      	str	r3, [r7, #20]
 8002f30:	e009      	b.n	8002f46 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	1c5a      	adds	r2, r3, #1
 8002f36:	60ba      	str	r2, [r7, #8]
 8002f38:	781b      	ldrb	r3, [r3, #0]
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	3301      	adds	r3, #1
 8002f44:	617b      	str	r3, [r7, #20]
 8002f46:	697a      	ldr	r2, [r7, #20]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	429a      	cmp	r2, r3
 8002f4c:	dbf1      	blt.n	8002f32 <_write+0x12>
  }
  return len;
 8002f4e:	687b      	ldr	r3, [r7, #4]
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	3718      	adds	r7, #24
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}

08002f58 <_close>:

int _close(int file)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b083      	sub	sp, #12
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002f60:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	370c      	adds	r7, #12
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6e:	4770      	bx	lr

08002f70 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b083      	sub	sp, #12
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
 8002f78:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002f80:	605a      	str	r2, [r3, #4]
  return 0;
 8002f82:	2300      	movs	r3, #0
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	370c      	adds	r7, #12
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr

08002f90 <_isatty>:

int _isatty(int file)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b083      	sub	sp, #12
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002f98:	2301      	movs	r3, #1
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	370c      	adds	r7, #12
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr

08002fa6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002fa6:	b480      	push	{r7}
 8002fa8:	b085      	sub	sp, #20
 8002faa:	af00      	add	r7, sp, #0
 8002fac:	60f8      	str	r0, [r7, #12]
 8002fae:	60b9      	str	r1, [r7, #8]
 8002fb0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002fb2:	2300      	movs	r3, #0
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3714      	adds	r7, #20
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbe:	4770      	bx	lr

08002fc0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b086      	sub	sp, #24
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002fc8:	4a14      	ldr	r2, [pc, #80]	@ (800301c <_sbrk+0x5c>)
 8002fca:	4b15      	ldr	r3, [pc, #84]	@ (8003020 <_sbrk+0x60>)
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002fd4:	4b13      	ldr	r3, [pc, #76]	@ (8003024 <_sbrk+0x64>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d102      	bne.n	8002fe2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002fdc:	4b11      	ldr	r3, [pc, #68]	@ (8003024 <_sbrk+0x64>)
 8002fde:	4a12      	ldr	r2, [pc, #72]	@ (8003028 <_sbrk+0x68>)
 8002fe0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002fe2:	4b10      	ldr	r3, [pc, #64]	@ (8003024 <_sbrk+0x64>)
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	4413      	add	r3, r2
 8002fea:	693a      	ldr	r2, [r7, #16]
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d207      	bcs.n	8003000 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ff0:	f016 f992 	bl	8019318 <__errno>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	220c      	movs	r2, #12
 8002ff8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002ffa:	f04f 33ff 	mov.w	r3, #4294967295
 8002ffe:	e009      	b.n	8003014 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003000:	4b08      	ldr	r3, [pc, #32]	@ (8003024 <_sbrk+0x64>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003006:	4b07      	ldr	r3, [pc, #28]	@ (8003024 <_sbrk+0x64>)
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	4413      	add	r3, r2
 800300e:	4a05      	ldr	r2, [pc, #20]	@ (8003024 <_sbrk+0x64>)
 8003010:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003012:	68fb      	ldr	r3, [r7, #12]
}
 8003014:	4618      	mov	r0, r3
 8003016:	3718      	adds	r7, #24
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}
 800301c:	24080000 	.word	0x24080000
 8003020:	00000400 	.word	0x00000400
 8003024:	24025d60 	.word	0x24025d60
 8003028:	24027aa0 	.word	0x24027aa0

0800302c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800302c:	b480      	push	{r7}
 800302e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003030:	4b43      	ldr	r3, [pc, #268]	@ (8003140 <SystemInit+0x114>)
 8003032:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003036:	4a42      	ldr	r2, [pc, #264]	@ (8003140 <SystemInit+0x114>)
 8003038:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800303c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003040:	4b40      	ldr	r3, [pc, #256]	@ (8003144 <SystemInit+0x118>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f003 030f 	and.w	r3, r3, #15
 8003048:	2b06      	cmp	r3, #6
 800304a:	d807      	bhi.n	800305c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800304c:	4b3d      	ldr	r3, [pc, #244]	@ (8003144 <SystemInit+0x118>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f023 030f 	bic.w	r3, r3, #15
 8003054:	4a3b      	ldr	r2, [pc, #236]	@ (8003144 <SystemInit+0x118>)
 8003056:	f043 0307 	orr.w	r3, r3, #7
 800305a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800305c:	4b3a      	ldr	r3, [pc, #232]	@ (8003148 <SystemInit+0x11c>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a39      	ldr	r2, [pc, #228]	@ (8003148 <SystemInit+0x11c>)
 8003062:	f043 0301 	orr.w	r3, r3, #1
 8003066:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003068:	4b37      	ldr	r3, [pc, #220]	@ (8003148 <SystemInit+0x11c>)
 800306a:	2200      	movs	r2, #0
 800306c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800306e:	4b36      	ldr	r3, [pc, #216]	@ (8003148 <SystemInit+0x11c>)
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	4935      	ldr	r1, [pc, #212]	@ (8003148 <SystemInit+0x11c>)
 8003074:	4b35      	ldr	r3, [pc, #212]	@ (800314c <SystemInit+0x120>)
 8003076:	4013      	ands	r3, r2
 8003078:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800307a:	4b32      	ldr	r3, [pc, #200]	@ (8003144 <SystemInit+0x118>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 0308 	and.w	r3, r3, #8
 8003082:	2b00      	cmp	r3, #0
 8003084:	d007      	beq.n	8003096 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003086:	4b2f      	ldr	r3, [pc, #188]	@ (8003144 <SystemInit+0x118>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f023 030f 	bic.w	r3, r3, #15
 800308e:	4a2d      	ldr	r2, [pc, #180]	@ (8003144 <SystemInit+0x118>)
 8003090:	f043 0307 	orr.w	r3, r3, #7
 8003094:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8003096:	4b2c      	ldr	r3, [pc, #176]	@ (8003148 <SystemInit+0x11c>)
 8003098:	2200      	movs	r2, #0
 800309a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800309c:	4b2a      	ldr	r3, [pc, #168]	@ (8003148 <SystemInit+0x11c>)
 800309e:	2200      	movs	r2, #0
 80030a0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80030a2:	4b29      	ldr	r3, [pc, #164]	@ (8003148 <SystemInit+0x11c>)
 80030a4:	2200      	movs	r2, #0
 80030a6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80030a8:	4b27      	ldr	r3, [pc, #156]	@ (8003148 <SystemInit+0x11c>)
 80030aa:	4a29      	ldr	r2, [pc, #164]	@ (8003150 <SystemInit+0x124>)
 80030ac:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80030ae:	4b26      	ldr	r3, [pc, #152]	@ (8003148 <SystemInit+0x11c>)
 80030b0:	4a28      	ldr	r2, [pc, #160]	@ (8003154 <SystemInit+0x128>)
 80030b2:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80030b4:	4b24      	ldr	r3, [pc, #144]	@ (8003148 <SystemInit+0x11c>)
 80030b6:	4a28      	ldr	r2, [pc, #160]	@ (8003158 <SystemInit+0x12c>)
 80030b8:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80030ba:	4b23      	ldr	r3, [pc, #140]	@ (8003148 <SystemInit+0x11c>)
 80030bc:	2200      	movs	r2, #0
 80030be:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80030c0:	4b21      	ldr	r3, [pc, #132]	@ (8003148 <SystemInit+0x11c>)
 80030c2:	4a25      	ldr	r2, [pc, #148]	@ (8003158 <SystemInit+0x12c>)
 80030c4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80030c6:	4b20      	ldr	r3, [pc, #128]	@ (8003148 <SystemInit+0x11c>)
 80030c8:	2200      	movs	r2, #0
 80030ca:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80030cc:	4b1e      	ldr	r3, [pc, #120]	@ (8003148 <SystemInit+0x11c>)
 80030ce:	4a22      	ldr	r2, [pc, #136]	@ (8003158 <SystemInit+0x12c>)
 80030d0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80030d2:	4b1d      	ldr	r3, [pc, #116]	@ (8003148 <SystemInit+0x11c>)
 80030d4:	2200      	movs	r2, #0
 80030d6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80030d8:	4b1b      	ldr	r3, [pc, #108]	@ (8003148 <SystemInit+0x11c>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a1a      	ldr	r2, [pc, #104]	@ (8003148 <SystemInit+0x11c>)
 80030de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80030e2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80030e4:	4b18      	ldr	r3, [pc, #96]	@ (8003148 <SystemInit+0x11c>)
 80030e6:	2200      	movs	r2, #0
 80030e8:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80030ea:	4b1c      	ldr	r3, [pc, #112]	@ (800315c <SystemInit+0x130>)
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	4b1c      	ldr	r3, [pc, #112]	@ (8003160 <SystemInit+0x134>)
 80030f0:	4013      	ands	r3, r2
 80030f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80030f6:	d202      	bcs.n	80030fe <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80030f8:	4b1a      	ldr	r3, [pc, #104]	@ (8003164 <SystemInit+0x138>)
 80030fa:	2201      	movs	r2, #1
 80030fc:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80030fe:	4b12      	ldr	r3, [pc, #72]	@ (8003148 <SystemInit+0x11c>)
 8003100:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8003104:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003108:	2b00      	cmp	r3, #0
 800310a:	d113      	bne.n	8003134 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 800310c:	4b0e      	ldr	r3, [pc, #56]	@ (8003148 <SystemInit+0x11c>)
 800310e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8003112:	4a0d      	ldr	r2, [pc, #52]	@ (8003148 <SystemInit+0x11c>)
 8003114:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003118:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800311c:	4b12      	ldr	r3, [pc, #72]	@ (8003168 <SystemInit+0x13c>)
 800311e:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8003122:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8003124:	4b08      	ldr	r3, [pc, #32]	@ (8003148 <SystemInit+0x11c>)
 8003126:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800312a:	4a07      	ldr	r2, [pc, #28]	@ (8003148 <SystemInit+0x11c>)
 800312c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003130:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8003134:	bf00      	nop
 8003136:	46bd      	mov	sp, r7
 8003138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313c:	4770      	bx	lr
 800313e:	bf00      	nop
 8003140:	e000ed00 	.word	0xe000ed00
 8003144:	52002000 	.word	0x52002000
 8003148:	58024400 	.word	0x58024400
 800314c:	eaf6ed7f 	.word	0xeaf6ed7f
 8003150:	02020200 	.word	0x02020200
 8003154:	01ff0000 	.word	0x01ff0000
 8003158:	01010280 	.word	0x01010280
 800315c:	5c001000 	.word	0x5c001000
 8003160:	ffff0000 	.word	0xffff0000
 8003164:	51008108 	.word	0x51008108
 8003168:	52004000 	.word	0x52004000

0800316c <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 800316c:	b480      	push	{r7}
 800316e:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8003170:	4b09      	ldr	r3, [pc, #36]	@ (8003198 <ExitRun0Mode+0x2c>)
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	4a08      	ldr	r2, [pc, #32]	@ (8003198 <ExitRun0Mode+0x2c>)
 8003176:	f043 0302 	orr.w	r3, r3, #2
 800317a:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 800317c:	bf00      	nop
 800317e:	4b06      	ldr	r3, [pc, #24]	@ (8003198 <ExitRun0Mode+0x2c>)
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003186:	2b00      	cmp	r3, #0
 8003188:	d0f9      	beq.n	800317e <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 800318a:	bf00      	nop
 800318c:	bf00      	nop
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr
 8003196:	bf00      	nop
 8003198:	58024800 	.word	0x58024800

0800319c <Reset_Handler>:
 800319c:	f8df d038 	ldr.w	sp, [pc, #56]	@ 80031d8 <LoopFillZerobss+0xe>
 80031a0:	f7ff ffe4 	bl	800316c <ExitRun0Mode>
 80031a4:	f7ff ff42 	bl	800302c <SystemInit>
 80031a8:	480c      	ldr	r0, [pc, #48]	@ (80031dc <LoopFillZerobss+0x12>)
 80031aa:	490d      	ldr	r1, [pc, #52]	@ (80031e0 <LoopFillZerobss+0x16>)
 80031ac:	4a0d      	ldr	r2, [pc, #52]	@ (80031e4 <LoopFillZerobss+0x1a>)
 80031ae:	2300      	movs	r3, #0
 80031b0:	e002      	b.n	80031b8 <LoopCopyDataInit>

080031b2 <CopyDataInit>:
 80031b2:	58d4      	ldr	r4, [r2, r3]
 80031b4:	50c4      	str	r4, [r0, r3]
 80031b6:	3304      	adds	r3, #4

080031b8 <LoopCopyDataInit>:
 80031b8:	18c4      	adds	r4, r0, r3
 80031ba:	428c      	cmp	r4, r1
 80031bc:	d3f9      	bcc.n	80031b2 <CopyDataInit>
 80031be:	4a0a      	ldr	r2, [pc, #40]	@ (80031e8 <LoopFillZerobss+0x1e>)
 80031c0:	4c0a      	ldr	r4, [pc, #40]	@ (80031ec <LoopFillZerobss+0x22>)
 80031c2:	2300      	movs	r3, #0
 80031c4:	e001      	b.n	80031ca <LoopFillZerobss>

080031c6 <FillZerobss>:
 80031c6:	6013      	str	r3, [r2, #0]
 80031c8:	3204      	adds	r2, #4

080031ca <LoopFillZerobss>:
 80031ca:	42a2      	cmp	r2, r4
 80031cc:	d3fb      	bcc.n	80031c6 <FillZerobss>
 80031ce:	f016 f8a9 	bl	8019324 <__libc_init_array>
 80031d2:	f7fd fa89 	bl	80006e8 <main>
 80031d6:	4770      	bx	lr
 80031d8:	24080000 	.word	0x24080000
 80031dc:	24000000 	.word	0x24000000
 80031e0:	240002e4 	.word	0x240002e4
 80031e4:	0801badc 	.word	0x0801badc
 80031e8:	240002e4 	.word	0x240002e4
 80031ec:	24027a9c 	.word	0x24027a9c

080031f0 <ADC3_IRQHandler>:
 80031f0:	e7fe      	b.n	80031f0 <ADC3_IRQHandler>

080031f2 <INA229_ReadRegister>:
// ------------------------------------------------------------------------------------

// FUNCTION IMPLEMENTEATIONS
// ------------------------------------------------------------------------------------

uint8_t INA229_ReadRegister(INA229_HandleTypeDef *ina229, uint8_t addr, uint8_t *pRead, uint8_t len) {
 80031f2:	b580      	push	{r7, lr}
 80031f4:	b086      	sub	sp, #24
 80031f6:	af00      	add	r7, sp, #0
 80031f8:	60f8      	str	r0, [r7, #12]
 80031fa:	607a      	str	r2, [r7, #4]
 80031fc:	461a      	mov	r2, r3
 80031fe:	460b      	mov	r3, r1
 8003200:	72fb      	strb	r3, [r7, #11]
 8003202:	4613      	mov	r3, r2
 8003204:	72bb      	strb	r3, [r7, #10]
	// A5 A4 A3 A2 A1 A0 XX RR
	uint8_t dataToWrite = (addr << 2) | 0b1;
 8003206:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	b25b      	sxtb	r3, r3
 800320e:	f043 0301 	orr.w	r3, r3, #1
 8003212:	b25b      	sxtb	r3, r3
 8003214:	b2db      	uxtb	r3, r3
 8003216:	75bb      	strb	r3, [r7, #22]
	uint8_t ret = 0;
 8003218:	2300      	movs	r3, #0
 800321a:	75fb      	strb	r3, [r7, #23]

	// Assert the CS low
	HAL_GPIO_WritePin(ina229->cs_gpio_handle, ina229->cs_gpio_pin, GPIO_PIN_RESET);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	6858      	ldr	r0, [r3, #4]
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	891b      	ldrh	r3, [r3, #8]
 8003224:	2200      	movs	r2, #0
 8003226:	4619      	mov	r1, r3
 8003228:	f004 faae 	bl	8007788 <HAL_GPIO_WritePin>

	ret = HAL_SPI_Transmit(ina229->spi_handle, &dataToWrite, 1, 100);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	6818      	ldr	r0, [r3, #0]
 8003230:	f107 0116 	add.w	r1, r7, #22
 8003234:	2364      	movs	r3, #100	@ 0x64
 8003236:	2201      	movs	r2, #1
 8003238:	f00c ff00 	bl	801003c <HAL_SPI_Transmit>
 800323c:	4603      	mov	r3, r0
 800323e:	75fb      	strb	r3, [r7, #23]
	if (ret) {
 8003240:	7dfb      	ldrb	r3, [r7, #23]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d009      	beq.n	800325a <INA229_ReadRegister+0x68>
		// Release the CS
		HAL_GPIO_WritePin(ina229->cs_gpio_handle, ina229->cs_gpio_pin, GPIO_PIN_SET);
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	6858      	ldr	r0, [r3, #4]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	891b      	ldrh	r3, [r3, #8]
 800324e:	2201      	movs	r2, #1
 8003250:	4619      	mov	r1, r3
 8003252:	f004 fa99 	bl	8007788 <HAL_GPIO_WritePin>
		return ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e01f      	b.n	800329a <INA229_ReadRegister+0xa8>
	}

	ret = HAL_SPI_Receive(ina229->spi_handle, pRead, len, 100);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	6818      	ldr	r0, [r3, #0]
 800325e:	7abb      	ldrb	r3, [r7, #10]
 8003260:	b29a      	uxth	r2, r3
 8003262:	2364      	movs	r3, #100	@ 0x64
 8003264:	6879      	ldr	r1, [r7, #4]
 8003266:	f00d f8d7 	bl	8010418 <HAL_SPI_Receive>
 800326a:	4603      	mov	r3, r0
 800326c:	75fb      	strb	r3, [r7, #23]
	if (ret) {
 800326e:	7dfb      	ldrb	r3, [r7, #23]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d009      	beq.n	8003288 <INA229_ReadRegister+0x96>
		// Release the CS
		HAL_GPIO_WritePin(ina229->cs_gpio_handle, ina229->cs_gpio_pin, GPIO_PIN_SET);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	6858      	ldr	r0, [r3, #4]
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	891b      	ldrh	r3, [r3, #8]
 800327c:	2201      	movs	r2, #1
 800327e:	4619      	mov	r1, r3
 8003280:	f004 fa82 	bl	8007788 <HAL_GPIO_WritePin>
		return  ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	e008      	b.n	800329a <INA229_ReadRegister+0xa8>
	}

	// Release the CS
	HAL_GPIO_WritePin(ina229->cs_gpio_handle, ina229->cs_gpio_pin, GPIO_PIN_SET);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	6858      	ldr	r0, [r3, #4]
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	891b      	ldrh	r3, [r3, #8]
 8003290:	2201      	movs	r2, #1
 8003292:	4619      	mov	r1, r3
 8003294:	f004 fa78 	bl	8007788 <HAL_GPIO_WritePin>

	return SUCCESS;
 8003298:	2300      	movs	r3, #0
}
 800329a:	4618      	mov	r0, r3
 800329c:	3718      	adds	r7, #24
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}

080032a2 <INA229_Init>:
	HAL_GPIO_WritePin(ina229->cs_gpio_handle, ina229->cs_gpio_pin, GPIO_PIN_SET);

	return SUCCESS;
}

uint8_t INA229_Init(INA229_HandleTypeDef *ina229) {
 80032a2:	b480      	push	{r7}
 80032a4:	b083      	sub	sp, #12
 80032a6:	af00      	add	r7, sp, #0
 80032a8:	6078      	str	r0, [r7, #4]
	// SHUNT_CAL = 0x1000 at start, this is correct for R_shunt of 0.002 OHMs

	//uint8_t readVal[2];
	//INA229_ReadRegister(ina229, 0x01, readVal, 2);

	return SUCCESS;
 80032aa:	2300      	movs	r3, #0
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	370c      	adds	r7, #12
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr

080032b8 <Register24_Int32>:

uint32_t Register24_Int32(uint8_t* pData) {
 80032b8:	b480      	push	{r7}
 80032ba:	b085      	sub	sp, #20
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
	uint32_t out = 0;
 80032c0:	2300      	movs	r3, #0
 80032c2:	60fb      	str	r3, [r7, #12]
	// Switch endianess from result
	out |= (uint32_t)(pData[2]);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	3302      	adds	r3, #2
 80032c8:	781b      	ldrb	r3, [r3, #0]
 80032ca:	461a      	mov	r2, r3
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	4313      	orrs	r3, r2
 80032d0:	60fb      	str	r3, [r7, #12]
	out |= (uint32_t)(pData[1]) << 8;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	3301      	adds	r3, #1
 80032d6:	781b      	ldrb	r3, [r3, #0]
 80032d8:	021b      	lsls	r3, r3, #8
 80032da:	68fa      	ldr	r2, [r7, #12]
 80032dc:	4313      	orrs	r3, r2
 80032de:	60fb      	str	r3, [r7, #12]
	out |= (uint32_t)(pData[0]) << 16;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	781b      	ldrb	r3, [r3, #0]
 80032e4:	041b      	lsls	r3, r3, #16
 80032e6:	68fa      	ldr	r2, [r7, #12]
 80032e8:	4313      	orrs	r3, r2
 80032ea:	60fb      	str	r3, [r7, #12]

	return out;
 80032ec:	68fb      	ldr	r3, [r7, #12]
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	3714      	adds	r7, #20
 80032f2:	46bd      	mov	sp, r7
 80032f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f8:	4770      	bx	lr
 80032fa:	0000      	movs	r0, r0
 80032fc:	0000      	movs	r0, r0
	...

08003300 <INA229_Get>:

uint8_t INA229_Get(INA229_HandleTypeDef *ina229) {
 8003300:	b580      	push	{r7, lr}
 8003302:	b088      	sub	sp, #32
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
	// Get all the power variables
	uint8_t ret = 0;
 8003308:	2300      	movs	r3, #0
 800330a:	77fb      	strb	r3, [r7, #31]

	// ----- VOLTAGE ----- //

	// Get the VBUS register value, 24 bit
	uint8_t vbus_reg[3];
	ret = INA229_ReadRegister(ina229, 0x05, vbus_reg, 3);
 800330c:	f107 020c 	add.w	r2, r7, #12
 8003310:	2303      	movs	r3, #3
 8003312:	2105      	movs	r1, #5
 8003314:	6878      	ldr	r0, [r7, #4]
 8003316:	f7ff ff6c 	bl	80031f2 <INA229_ReadRegister>
 800331a:	4603      	mov	r3, r0
 800331c:	77fb      	strb	r3, [r7, #31]

	// Covnert register raw to uint
	uint32_t vbus_raw = Register24_Int32(vbus_reg);
 800331e:	f107 030c 	add.w	r3, r7, #12
 8003322:	4618      	mov	r0, r3
 8003324:	f7ff ffc8 	bl	80032b8 <Register24_Int32>
 8003328:	61b8      	str	r0, [r7, #24]
	vbus_raw >>= 4;	// Shift out the reserved bits
 800332a:	69bb      	ldr	r3, [r7, #24]
 800332c:	091b      	lsrs	r3, r3, #4
 800332e:	61bb      	str	r3, [r7, #24]

	// Conversion factor
	ina229->voltage = vbus_raw * 0.0001953125;
 8003330:	69bb      	ldr	r3, [r7, #24]
 8003332:	ee07 3a90 	vmov	s15, r3
 8003336:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800333a:	ed9f 6b1f 	vldr	d6, [pc, #124]	@ 80033b8 <INA229_Get+0xb8>
 800333e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003342:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	edc3 7a03 	vstr	s15, [r3, #12]

	// ----- CURRENT ----- //

	// Get the VBUS register value, 24 bit
	uint8_t cur_reg[3];
	ret = INA229_ReadRegister(ina229, 0x07, cur_reg, 3);
 800334c:	f107 0208 	add.w	r2, r7, #8
 8003350:	2303      	movs	r3, #3
 8003352:	2107      	movs	r1, #7
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	f7ff ff4c 	bl	80031f2 <INA229_ReadRegister>
 800335a:	4603      	mov	r3, r0
 800335c:	77fb      	strb	r3, [r7, #31]

	// Covnert register raw to uint
	uint32_t cur_raw = Register24_Int32(cur_reg);
 800335e:	f107 0308 	add.w	r3, r7, #8
 8003362:	4618      	mov	r0, r3
 8003364:	f7ff ffa8 	bl	80032b8 <Register24_Int32>
 8003368:	6178      	str	r0, [r7, #20]

	int32_t cur_signed = (cur_raw << 8) | 0b111111111111;	// Pad LSBs with 1's for 2's compliment to be acurate
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	021a      	lsls	r2, r3, #8
 800336e:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8003372:	4313      	orrs	r3, r2
 8003374:	613b      	str	r3, [r7, #16]
	cur_signed /= 4096;										// Shift out the reserved bits while respecting negativity (equiv. >> 12)
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	2b00      	cmp	r3, #0
 800337a:	da01      	bge.n	8003380 <INA229_Get+0x80>
 800337c:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 8003380:	131b      	asrs	r3, r3, #12
 8003382:	613b      	str	r3, [r7, #16]

	// Conversion factor
	ina229->current = cur_signed * 0.00015625;
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	ee07 3a90 	vmov	s15, r3
 800338a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800338e:	ed9f 6b0c 	vldr	d6, [pc, #48]	@ 80033c0 <INA229_Get+0xc0>
 8003392:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003396:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	edc3 7a04 	vstr	s15, [r3, #16]

	if (ret) return ret;
 80033a0:	7ffb      	ldrb	r3, [r7, #31]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d001      	beq.n	80033aa <INA229_Get+0xaa>
 80033a6:	7ffb      	ldrb	r3, [r7, #31]
 80033a8:	e7ff      	b.n	80033aa <INA229_Get+0xaa>
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3720      	adds	r7, #32
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	bf00      	nop
 80033b4:	f3af 8000 	nop.w
 80033b8:	9999999a 	.word	0x9999999a
 80033bc:	3f299999 	.word	0x3f299999
 80033c0:	47ae147b 	.word	0x47ae147b
 80033c4:	3f247ae1 	.word	0x3f247ae1

080033c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b082      	sub	sp, #8
 80033cc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80033ce:	2003      	movs	r0, #3
 80033d0:	f000 f98c 	bl	80036ec <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80033d4:	f00a fd0c 	bl	800ddf0 <HAL_RCC_GetSysClockFreq>
 80033d8:	4602      	mov	r2, r0
 80033da:	4b15      	ldr	r3, [pc, #84]	@ (8003430 <HAL_Init+0x68>)
 80033dc:	699b      	ldr	r3, [r3, #24]
 80033de:	0a1b      	lsrs	r3, r3, #8
 80033e0:	f003 030f 	and.w	r3, r3, #15
 80033e4:	4913      	ldr	r1, [pc, #76]	@ (8003434 <HAL_Init+0x6c>)
 80033e6:	5ccb      	ldrb	r3, [r1, r3]
 80033e8:	f003 031f 	and.w	r3, r3, #31
 80033ec:	fa22 f303 	lsr.w	r3, r2, r3
 80033f0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80033f2:	4b0f      	ldr	r3, [pc, #60]	@ (8003430 <HAL_Init+0x68>)
 80033f4:	699b      	ldr	r3, [r3, #24]
 80033f6:	f003 030f 	and.w	r3, r3, #15
 80033fa:	4a0e      	ldr	r2, [pc, #56]	@ (8003434 <HAL_Init+0x6c>)
 80033fc:	5cd3      	ldrb	r3, [r2, r3]
 80033fe:	f003 031f 	and.w	r3, r3, #31
 8003402:	687a      	ldr	r2, [r7, #4]
 8003404:	fa22 f303 	lsr.w	r3, r2, r3
 8003408:	4a0b      	ldr	r2, [pc, #44]	@ (8003438 <HAL_Init+0x70>)
 800340a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800340c:	4a0b      	ldr	r2, [pc, #44]	@ (800343c <HAL_Init+0x74>)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003412:	200f      	movs	r0, #15
 8003414:	f000 f814 	bl	8003440 <HAL_InitTick>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d001      	beq.n	8003422 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e002      	b.n	8003428 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003422:	f7fe ff65 	bl	80022f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003426:	2300      	movs	r3, #0
}
 8003428:	4618      	mov	r0, r3
 800342a:	3708      	adds	r7, #8
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}
 8003430:	58024400 	.word	0x58024400
 8003434:	0801b45c 	.word	0x0801b45c
 8003438:	2400001c 	.word	0x2400001c
 800343c:	24000018 	.word	0x24000018

08003440 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b082      	sub	sp, #8
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003448:	4b15      	ldr	r3, [pc, #84]	@ (80034a0 <HAL_InitTick+0x60>)
 800344a:	781b      	ldrb	r3, [r3, #0]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d101      	bne.n	8003454 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	e021      	b.n	8003498 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003454:	4b13      	ldr	r3, [pc, #76]	@ (80034a4 <HAL_InitTick+0x64>)
 8003456:	681a      	ldr	r2, [r3, #0]
 8003458:	4b11      	ldr	r3, [pc, #68]	@ (80034a0 <HAL_InitTick+0x60>)
 800345a:	781b      	ldrb	r3, [r3, #0]
 800345c:	4619      	mov	r1, r3
 800345e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003462:	fbb3 f3f1 	udiv	r3, r3, r1
 8003466:	fbb2 f3f3 	udiv	r3, r2, r3
 800346a:	4618      	mov	r0, r3
 800346c:	f000 f971 	bl	8003752 <HAL_SYSTICK_Config>
 8003470:	4603      	mov	r3, r0
 8003472:	2b00      	cmp	r3, #0
 8003474:	d001      	beq.n	800347a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e00e      	b.n	8003498 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2b0f      	cmp	r3, #15
 800347e:	d80a      	bhi.n	8003496 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003480:	2200      	movs	r2, #0
 8003482:	6879      	ldr	r1, [r7, #4]
 8003484:	f04f 30ff 	mov.w	r0, #4294967295
 8003488:	f000 f93b 	bl	8003702 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800348c:	4a06      	ldr	r2, [pc, #24]	@ (80034a8 <HAL_InitTick+0x68>)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003492:	2300      	movs	r3, #0
 8003494:	e000      	b.n	8003498 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
}
 8003498:	4618      	mov	r0, r3
 800349a:	3708      	adds	r7, #8
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}
 80034a0:	24000024 	.word	0x24000024
 80034a4:	24000018 	.word	0x24000018
 80034a8:	24000020 	.word	0x24000020

080034ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80034ac:	b480      	push	{r7}
 80034ae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80034b0:	4b06      	ldr	r3, [pc, #24]	@ (80034cc <HAL_IncTick+0x20>)
 80034b2:	781b      	ldrb	r3, [r3, #0]
 80034b4:	461a      	mov	r2, r3
 80034b6:	4b06      	ldr	r3, [pc, #24]	@ (80034d0 <HAL_IncTick+0x24>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4413      	add	r3, r2
 80034bc:	4a04      	ldr	r2, [pc, #16]	@ (80034d0 <HAL_IncTick+0x24>)
 80034be:	6013      	str	r3, [r2, #0]
}
 80034c0:	bf00      	nop
 80034c2:	46bd      	mov	sp, r7
 80034c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c8:	4770      	bx	lr
 80034ca:	bf00      	nop
 80034cc:	24000024 	.word	0x24000024
 80034d0:	24025d64 	.word	0x24025d64

080034d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80034d4:	b480      	push	{r7}
 80034d6:	af00      	add	r7, sp, #0
  return uwTick;
 80034d8:	4b03      	ldr	r3, [pc, #12]	@ (80034e8 <HAL_GetTick+0x14>)
 80034da:	681b      	ldr	r3, [r3, #0]
}
 80034dc:	4618      	mov	r0, r3
 80034de:	46bd      	mov	sp, r7
 80034e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e4:	4770      	bx	lr
 80034e6:	bf00      	nop
 80034e8:	24025d64 	.word	0x24025d64

080034ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b084      	sub	sp, #16
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80034f4:	f7ff ffee 	bl	80034d4 <HAL_GetTick>
 80034f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003504:	d005      	beq.n	8003512 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003506:	4b0a      	ldr	r3, [pc, #40]	@ (8003530 <HAL_Delay+0x44>)
 8003508:	781b      	ldrb	r3, [r3, #0]
 800350a:	461a      	mov	r2, r3
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	4413      	add	r3, r2
 8003510:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003512:	bf00      	nop
 8003514:	f7ff ffde 	bl	80034d4 <HAL_GetTick>
 8003518:	4602      	mov	r2, r0
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	68fa      	ldr	r2, [r7, #12]
 8003520:	429a      	cmp	r2, r3
 8003522:	d8f7      	bhi.n	8003514 <HAL_Delay+0x28>
  {
  }
}
 8003524:	bf00      	nop
 8003526:	bf00      	nop
 8003528:	3710      	adds	r7, #16
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}
 800352e:	bf00      	nop
 8003530:	24000024 	.word	0x24000024

08003534 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003534:	b480      	push	{r7}
 8003536:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003538:	4b03      	ldr	r3, [pc, #12]	@ (8003548 <HAL_GetREVID+0x14>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	0c1b      	lsrs	r3, r3, #16
}
 800353e:	4618      	mov	r0, r3
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr
 8003548:	5c001000 	.word	0x5c001000

0800354c <__NVIC_SetPriorityGrouping>:
{
 800354c:	b480      	push	{r7}
 800354e:	b085      	sub	sp, #20
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	f003 0307 	and.w	r3, r3, #7
 800355a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800355c:	4b0b      	ldr	r3, [pc, #44]	@ (800358c <__NVIC_SetPriorityGrouping+0x40>)
 800355e:	68db      	ldr	r3, [r3, #12]
 8003560:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003562:	68ba      	ldr	r2, [r7, #8]
 8003564:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003568:	4013      	ands	r3, r2
 800356a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003574:	4b06      	ldr	r3, [pc, #24]	@ (8003590 <__NVIC_SetPriorityGrouping+0x44>)
 8003576:	4313      	orrs	r3, r2
 8003578:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800357a:	4a04      	ldr	r2, [pc, #16]	@ (800358c <__NVIC_SetPriorityGrouping+0x40>)
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	60d3      	str	r3, [r2, #12]
}
 8003580:	bf00      	nop
 8003582:	3714      	adds	r7, #20
 8003584:	46bd      	mov	sp, r7
 8003586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358a:	4770      	bx	lr
 800358c:	e000ed00 	.word	0xe000ed00
 8003590:	05fa0000 	.word	0x05fa0000

08003594 <__NVIC_GetPriorityGrouping>:
{
 8003594:	b480      	push	{r7}
 8003596:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003598:	4b04      	ldr	r3, [pc, #16]	@ (80035ac <__NVIC_GetPriorityGrouping+0x18>)
 800359a:	68db      	ldr	r3, [r3, #12]
 800359c:	0a1b      	lsrs	r3, r3, #8
 800359e:	f003 0307 	and.w	r3, r3, #7
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	46bd      	mov	sp, r7
 80035a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035aa:	4770      	bx	lr
 80035ac:	e000ed00 	.word	0xe000ed00

080035b0 <__NVIC_EnableIRQ>:
{
 80035b0:	b480      	push	{r7}
 80035b2:	b083      	sub	sp, #12
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	4603      	mov	r3, r0
 80035b8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80035ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	db0b      	blt.n	80035da <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035c2:	88fb      	ldrh	r3, [r7, #6]
 80035c4:	f003 021f 	and.w	r2, r3, #31
 80035c8:	4907      	ldr	r1, [pc, #28]	@ (80035e8 <__NVIC_EnableIRQ+0x38>)
 80035ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80035ce:	095b      	lsrs	r3, r3, #5
 80035d0:	2001      	movs	r0, #1
 80035d2:	fa00 f202 	lsl.w	r2, r0, r2
 80035d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80035da:	bf00      	nop
 80035dc:	370c      	adds	r7, #12
 80035de:	46bd      	mov	sp, r7
 80035e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e4:	4770      	bx	lr
 80035e6:	bf00      	nop
 80035e8:	e000e100 	.word	0xe000e100

080035ec <__NVIC_SetPriority>:
{
 80035ec:	b480      	push	{r7}
 80035ee:	b083      	sub	sp, #12
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	4603      	mov	r3, r0
 80035f4:	6039      	str	r1, [r7, #0]
 80035f6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80035f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	db0a      	blt.n	8003616 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	b2da      	uxtb	r2, r3
 8003604:	490c      	ldr	r1, [pc, #48]	@ (8003638 <__NVIC_SetPriority+0x4c>)
 8003606:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800360a:	0112      	lsls	r2, r2, #4
 800360c:	b2d2      	uxtb	r2, r2
 800360e:	440b      	add	r3, r1
 8003610:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003614:	e00a      	b.n	800362c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	b2da      	uxtb	r2, r3
 800361a:	4908      	ldr	r1, [pc, #32]	@ (800363c <__NVIC_SetPriority+0x50>)
 800361c:	88fb      	ldrh	r3, [r7, #6]
 800361e:	f003 030f 	and.w	r3, r3, #15
 8003622:	3b04      	subs	r3, #4
 8003624:	0112      	lsls	r2, r2, #4
 8003626:	b2d2      	uxtb	r2, r2
 8003628:	440b      	add	r3, r1
 800362a:	761a      	strb	r2, [r3, #24]
}
 800362c:	bf00      	nop
 800362e:	370c      	adds	r7, #12
 8003630:	46bd      	mov	sp, r7
 8003632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003636:	4770      	bx	lr
 8003638:	e000e100 	.word	0xe000e100
 800363c:	e000ed00 	.word	0xe000ed00

08003640 <NVIC_EncodePriority>:
{
 8003640:	b480      	push	{r7}
 8003642:	b089      	sub	sp, #36	@ 0x24
 8003644:	af00      	add	r7, sp, #0
 8003646:	60f8      	str	r0, [r7, #12]
 8003648:	60b9      	str	r1, [r7, #8]
 800364a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	f003 0307 	and.w	r3, r3, #7
 8003652:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003654:	69fb      	ldr	r3, [r7, #28]
 8003656:	f1c3 0307 	rsb	r3, r3, #7
 800365a:	2b04      	cmp	r3, #4
 800365c:	bf28      	it	cs
 800365e:	2304      	movcs	r3, #4
 8003660:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003662:	69fb      	ldr	r3, [r7, #28]
 8003664:	3304      	adds	r3, #4
 8003666:	2b06      	cmp	r3, #6
 8003668:	d902      	bls.n	8003670 <NVIC_EncodePriority+0x30>
 800366a:	69fb      	ldr	r3, [r7, #28]
 800366c:	3b03      	subs	r3, #3
 800366e:	e000      	b.n	8003672 <NVIC_EncodePriority+0x32>
 8003670:	2300      	movs	r3, #0
 8003672:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003674:	f04f 32ff 	mov.w	r2, #4294967295
 8003678:	69bb      	ldr	r3, [r7, #24]
 800367a:	fa02 f303 	lsl.w	r3, r2, r3
 800367e:	43da      	mvns	r2, r3
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	401a      	ands	r2, r3
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003688:	f04f 31ff 	mov.w	r1, #4294967295
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	fa01 f303 	lsl.w	r3, r1, r3
 8003692:	43d9      	mvns	r1, r3
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003698:	4313      	orrs	r3, r2
}
 800369a:	4618      	mov	r0, r3
 800369c:	3724      	adds	r7, #36	@ 0x24
 800369e:	46bd      	mov	sp, r7
 80036a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a4:	4770      	bx	lr
	...

080036a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b082      	sub	sp, #8
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	3b01      	subs	r3, #1
 80036b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80036b8:	d301      	bcc.n	80036be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80036ba:	2301      	movs	r3, #1
 80036bc:	e00f      	b.n	80036de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80036be:	4a0a      	ldr	r2, [pc, #40]	@ (80036e8 <SysTick_Config+0x40>)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	3b01      	subs	r3, #1
 80036c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80036c6:	210f      	movs	r1, #15
 80036c8:	f04f 30ff 	mov.w	r0, #4294967295
 80036cc:	f7ff ff8e 	bl	80035ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036d0:	4b05      	ldr	r3, [pc, #20]	@ (80036e8 <SysTick_Config+0x40>)
 80036d2:	2200      	movs	r2, #0
 80036d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036d6:	4b04      	ldr	r3, [pc, #16]	@ (80036e8 <SysTick_Config+0x40>)
 80036d8:	2207      	movs	r2, #7
 80036da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80036dc:	2300      	movs	r3, #0
}
 80036de:	4618      	mov	r0, r3
 80036e0:	3708      	adds	r7, #8
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	bf00      	nop
 80036e8:	e000e010 	.word	0xe000e010

080036ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b082      	sub	sp, #8
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80036f4:	6878      	ldr	r0, [r7, #4]
 80036f6:	f7ff ff29 	bl	800354c <__NVIC_SetPriorityGrouping>
}
 80036fa:	bf00      	nop
 80036fc:	3708      	adds	r7, #8
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}

08003702 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003702:	b580      	push	{r7, lr}
 8003704:	b086      	sub	sp, #24
 8003706:	af00      	add	r7, sp, #0
 8003708:	4603      	mov	r3, r0
 800370a:	60b9      	str	r1, [r7, #8]
 800370c:	607a      	str	r2, [r7, #4]
 800370e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003710:	f7ff ff40 	bl	8003594 <__NVIC_GetPriorityGrouping>
 8003714:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003716:	687a      	ldr	r2, [r7, #4]
 8003718:	68b9      	ldr	r1, [r7, #8]
 800371a:	6978      	ldr	r0, [r7, #20]
 800371c:	f7ff ff90 	bl	8003640 <NVIC_EncodePriority>
 8003720:	4602      	mov	r2, r0
 8003722:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003726:	4611      	mov	r1, r2
 8003728:	4618      	mov	r0, r3
 800372a:	f7ff ff5f 	bl	80035ec <__NVIC_SetPriority>
}
 800372e:	bf00      	nop
 8003730:	3718      	adds	r7, #24
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}

08003736 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003736:	b580      	push	{r7, lr}
 8003738:	b082      	sub	sp, #8
 800373a:	af00      	add	r7, sp, #0
 800373c:	4603      	mov	r3, r0
 800373e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003740:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003744:	4618      	mov	r0, r3
 8003746:	f7ff ff33 	bl	80035b0 <__NVIC_EnableIRQ>
}
 800374a:	bf00      	nop
 800374c:	3708      	adds	r7, #8
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}

08003752 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003752:	b580      	push	{r7, lr}
 8003754:	b082      	sub	sp, #8
 8003756:	af00      	add	r7, sp, #0
 8003758:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f7ff ffa4 	bl	80036a8 <SysTick_Config>
 8003760:	4603      	mov	r3, r0
}
 8003762:	4618      	mov	r0, r3
 8003764:	3708      	adds	r7, #8
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}
	...

0800376c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800376c:	b480      	push	{r7}
 800376e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8003770:	f3bf 8f5f 	dmb	sy
}
 8003774:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8003776:	4b07      	ldr	r3, [pc, #28]	@ (8003794 <HAL_MPU_Disable+0x28>)
 8003778:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800377a:	4a06      	ldr	r2, [pc, #24]	@ (8003794 <HAL_MPU_Disable+0x28>)
 800377c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003780:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8003782:	4b05      	ldr	r3, [pc, #20]	@ (8003798 <HAL_MPU_Disable+0x2c>)
 8003784:	2200      	movs	r2, #0
 8003786:	605a      	str	r2, [r3, #4]
}
 8003788:	bf00      	nop
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr
 8003792:	bf00      	nop
 8003794:	e000ed00 	.word	0xe000ed00
 8003798:	e000ed90 	.word	0xe000ed90

0800379c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800379c:	b480      	push	{r7}
 800379e:	b083      	sub	sp, #12
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80037a4:	4a0b      	ldr	r2, [pc, #44]	@ (80037d4 <HAL_MPU_Enable+0x38>)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	f043 0301 	orr.w	r3, r3, #1
 80037ac:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80037ae:	4b0a      	ldr	r3, [pc, #40]	@ (80037d8 <HAL_MPU_Enable+0x3c>)
 80037b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037b2:	4a09      	ldr	r2, [pc, #36]	@ (80037d8 <HAL_MPU_Enable+0x3c>)
 80037b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037b8:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80037ba:	f3bf 8f4f 	dsb	sy
}
 80037be:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80037c0:	f3bf 8f6f 	isb	sy
}
 80037c4:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80037c6:	bf00      	nop
 80037c8:	370c      	adds	r7, #12
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr
 80037d2:	bf00      	nop
 80037d4:	e000ed90 	.word	0xe000ed90
 80037d8:	e000ed00 	.word	0xe000ed00

080037dc <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 80037dc:	b480      	push	{r7}
 80037de:	b083      	sub	sp, #12
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	785a      	ldrb	r2, [r3, #1]
 80037e8:	4b1b      	ldr	r3, [pc, #108]	@ (8003858 <HAL_MPU_ConfigRegion+0x7c>)
 80037ea:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80037ec:	4b1a      	ldr	r3, [pc, #104]	@ (8003858 <HAL_MPU_ConfigRegion+0x7c>)
 80037ee:	691b      	ldr	r3, [r3, #16]
 80037f0:	4a19      	ldr	r2, [pc, #100]	@ (8003858 <HAL_MPU_ConfigRegion+0x7c>)
 80037f2:	f023 0301 	bic.w	r3, r3, #1
 80037f6:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80037f8:	4a17      	ldr	r2, [pc, #92]	@ (8003858 <HAL_MPU_ConfigRegion+0x7c>)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	7b1b      	ldrb	r3, [r3, #12]
 8003804:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	7adb      	ldrb	r3, [r3, #11]
 800380a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800380c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	7a9b      	ldrb	r3, [r3, #10]
 8003812:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003814:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	7b5b      	ldrb	r3, [r3, #13]
 800381a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800381c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	7b9b      	ldrb	r3, [r3, #14]
 8003822:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003824:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	7bdb      	ldrb	r3, [r3, #15]
 800382a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800382c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	7a5b      	ldrb	r3, [r3, #9]
 8003832:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003834:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	7a1b      	ldrb	r3, [r3, #8]
 800383a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800383c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800383e:	687a      	ldr	r2, [r7, #4]
 8003840:	7812      	ldrb	r2, [r2, #0]
 8003842:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003844:	4a04      	ldr	r2, [pc, #16]	@ (8003858 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003846:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003848:	6113      	str	r3, [r2, #16]
}
 800384a:	bf00      	nop
 800384c:	370c      	adds	r7, #12
 800384e:	46bd      	mov	sp, r7
 8003850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003854:	4770      	bx	lr
 8003856:	bf00      	nop
 8003858:	e000ed90 	.word	0xe000ed90

0800385c <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b082      	sub	sp, #8
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d101      	bne.n	800386e <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e069      	b.n	8003942 <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003874:	b2db      	uxtb	r3, r3
 8003876:	2b00      	cmp	r3, #0
 8003878:	d102      	bne.n	8003880 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f7fe fd52 	bl	8002324 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2202      	movs	r2, #2
 8003884:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	699b      	ldr	r3, [r3, #24]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d002      	beq.n	8003896 <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2200      	movs	r2, #0
 8003894:	625a      	str	r2, [r3, #36]	@ 0x24
  }
  /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	6819      	ldr	r1, [r3, #0]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	4b2a      	ldr	r3, [pc, #168]	@ (800394c <HAL_DCMI_Init+0xf0>)
 80038a2:	400b      	ands	r3, r1
 80038a4:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	6819      	ldr	r1, [r3, #0]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	685a      	ldr	r2, [r3, #4]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	695b      	ldr	r3, [r3, #20]
 80038b4:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80038ba:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	691b      	ldr	r3, [r3, #16]
 80038c0:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80038c6:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	699b      	ldr	r3, [r3, #24]
 80038cc:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80038d2:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038d8:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80038de:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038e4:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80038ea:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	430a      	orrs	r2, r1
 80038f2:	601a      	str	r2, [r3, #0]

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	2b10      	cmp	r3, #16
 80038fa:	d112      	bne.n	8003922 <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	7f1b      	ldrb	r3, [r3, #28]
 8003900:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	7f5b      	ldrb	r3, [r3, #29]
 8003906:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8003908:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	7f9b      	ldrb	r3, [r3, #30]
 800390e:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8003910:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	7fdb      	ldrb	r3, [r3, #31]
 8003918:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 800391e:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8003920:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	68da      	ldr	r2, [r3, #12]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f042 021e 	orr.w	r2, r2, #30
 8003930:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2200      	movs	r2, #0
 8003936:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2201      	movs	r2, #1
 800393c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003940:	2300      	movs	r3, #0
}
 8003942:	4618      	mov	r0, r3
 8003944:	3708      	adds	r7, #8
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}
 800394a:	bf00      	nop
 800394c:	ffe0f007 	.word	0xffe0f007

08003950 <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef *hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b088      	sub	sp, #32
 8003954:	af02      	add	r7, sp, #8
 8003956:	60f8      	str	r0, [r7, #12]
 8003958:	60b9      	str	r1, [r7, #8]
 800395a:	607a      	str	r2, [r7, #4]
 800395c:	603b      	str	r3, [r7, #0]

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003964:	2b01      	cmp	r3, #1
 8003966:	d101      	bne.n	800396c <HAL_DCMI_Start_DMA+0x1c>
 8003968:	2302      	movs	r3, #2
 800396a:	e0ab      	b.n	8003ac4 <HAL_DCMI_Start_DMA+0x174>
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2201      	movs	r2, #1
 8003970:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2202      	movs	r2, #2
 8003978:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800398a:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f022 0202 	bic.w	r2, r2, #2
 800399a:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |= (uint32_t)(DCMI_Mode);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	6819      	ldr	r1, [r3, #0]
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	68ba      	ldr	r2, [r7, #8]
 80039a8:	430a      	orrs	r2, r1
 80039aa:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039b0:	4a46      	ldr	r2, [pc, #280]	@ (8003acc <HAL_DCMI_Start_DMA+0x17c>)
 80039b2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039b8:	4a45      	ldr	r2, [pc, #276]	@ (8003ad0 <HAL_DCMI_Start_DMA+0x180>)
 80039ba:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039c0:	2200      	movs	r2, #0
 80039c2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Reset transfer counters value */
  hdcmi->XferCount = 0;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2200      	movs	r2, #0
 80039c8:	639a      	str	r2, [r3, #56]	@ 0x38
  hdcmi->XferTransferNumber = 0;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2200      	movs	r2, #0
 80039ce:	641a      	str	r2, [r3, #64]	@ 0x40
  hdcmi->XferSize = 0;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2200      	movs	r2, #0
 80039d4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdcmi->pBuffPtr = 0;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2200      	movs	r2, #0
 80039da:	645a      	str	r2, [r3, #68]	@ 0x44

  if (Length <= 0xFFFFU)
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039e2:	d219      	bcs.n	8003a18 <HAL_DCMI_Start_DMA+0xc8>
  {
    /* Enable the DMA Stream */
    if (HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length) != HAL_OK)
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	3328      	adds	r3, #40	@ 0x28
 80039ee:	4619      	mov	r1, r3
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	687a      	ldr	r2, [r7, #4]
 80039f4:	f000 fd7a 	bl	80044ec <HAL_DMA_Start_IT>
 80039f8:	4603      	mov	r3, r0
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d055      	beq.n	8003aaa <HAL_DCMI_Start_DMA+0x15a>
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2240      	movs	r2, #64	@ 0x40
 8003a02:	64da      	str	r2, [r3, #76]	@ 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2201      	movs	r2, #1
 8003a08:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      /* Return function status */
      return HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	e055      	b.n	8003ac4 <HAL_DCMI_Start_DMA+0x174>
    }
  }
  else /* DCMI_DOUBLE_BUFFER Mode */
  {
    /* Set the DMA memory1 conversion complete callback */
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a1c:	4a2b      	ldr	r2, [pc, #172]	@ (8003acc <HAL_DCMI_Start_DMA+0x17c>)
 8003a1e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2201      	movs	r2, #1
 8003a24:	639a      	str	r2, [r3, #56]	@ 0x38
    hdcmi->XferSize = Length;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	683a      	ldr	r2, [r7, #0]
 8003a2a:	63da      	str	r2, [r3, #60]	@ 0x3c
    hdcmi->pBuffPtr = pData;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	687a      	ldr	r2, [r7, #4]
 8003a30:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Get the number of buffer */
    while (hdcmi->XferSize > 0xFFFFU)
 8003a32:	e009      	b.n	8003a48 <HAL_DCMI_Start_DMA+0xf8>
    {
      hdcmi->XferSize = (hdcmi->XferSize / 2U);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a38:	085a      	lsrs	r2, r3, #1
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	63da      	str	r2, [r3, #60]	@ 0x3c
      hdcmi->XferCount = hdcmi->XferCount * 2U;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a42:	005a      	lsls	r2, r3, #1
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	639a      	str	r2, [r3, #56]	@ 0x38
    while (hdcmi->XferSize > 0xFFFFU)
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a50:	d2f0      	bcs.n	8003a34 <HAL_DCMI_Start_DMA+0xe4>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a56:	1e9a      	subs	r2, r3, #2
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	639a      	str	r2, [r3, #56]	@ 0x38
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Update second memory address */
    SecondMemAddress = (uint32_t)(pData + (4U * hdcmi->XferSize));
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a68:	009b      	lsls	r3, r3, #2
 8003a6a:	687a      	ldr	r2, [r7, #4]
 8003a6c:	4413      	add	r3, r2
 8003a6e:	617b      	str	r3, [r7, #20]

    /* Start DMA multi buffer transfer */
    if (HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize) != HAL_OK)
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	3328      	adds	r3, #40	@ 0x28
 8003a7a:	4619      	mov	r1, r3
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a80:	9300      	str	r3, [sp, #0]
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	687a      	ldr	r2, [r7, #4]
 8003a86:	f003 f81f 	bl	8006ac8 <HAL_DMAEx_MultiBufferStart_IT>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d00c      	beq.n	8003aaa <HAL_DCMI_Start_DMA+0x15a>
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2240      	movs	r2, #64	@ 0x40
 8003a94:	64da      	str	r2, [r3, #76]	@ 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2201      	movs	r2, #1
 8003a9a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      /* Return function status */
      return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e00c      	b.n	8003ac4 <HAL_DCMI_Start_DMA+0x174>
    }
  }

  /* Enable Capture */
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f042 0201 	orr.w	r2, r2, #1
 8003ab8:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2200      	movs	r2, #0
 8003abe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Return function status */
  return HAL_OK;
 8003ac2:	2300      	movs	r3, #0
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	3718      	adds	r7, #24
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}
 8003acc:	08003cd5 	.word	0x08003cd5
 8003ad0:	08003dfb 	.word	0x08003dfb

08003ad4 <HAL_DCMI_Stop>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Stop(DCMI_HandleTypeDef *hdcmi)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b084      	sub	sp, #16
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 8003adc:	4b2b      	ldr	r3, [pc, #172]	@ (8003b8c <HAL_DCMI_Stop+0xb8>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a2b      	ldr	r2, [pc, #172]	@ (8003b90 <HAL_DCMI_Stop+0xbc>)
 8003ae2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ae6:	0a5b      	lsrs	r3, r3, #9
 8003ae8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003aec:	fb02 f303 	mul.w	r3, r2, r3
 8003af0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8003af2:	2300      	movs	r3, #0
 8003af4:	72fb      	strb	r3, [r7, #11]

  /* Process locked */
  __HAL_LOCK(hdcmi);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	d101      	bne.n	8003b04 <HAL_DCMI_Stop+0x30>
 8003b00:	2302      	movs	r3, #2
 8003b02:	e03f      	b.n	8003b84 <HAL_DCMI_Stop+0xb0>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2201      	movs	r2, #1
 8003b08:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2202      	movs	r2, #2
 8003b10:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Disable Capture */
  hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f022 0201 	bic.w	r2, r2, #1
 8003b22:	601a      	str	r2, [r3, #0]

  /* Check if the DCMI capture effectively disabled */
  do
  {
    count-- ;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	3b01      	subs	r3, #1
 8003b28:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d108      	bne.n	8003b42 <HAL_DCMI_Stop+0x6e>
    {
      /* Update error code */
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b34:	f043 0220 	orr.w	r2, r3, #32
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	64da      	str	r2, [r3, #76]	@ 0x4c

      status = HAL_TIMEOUT;
 8003b3c:	2303      	movs	r3, #3
 8003b3e:	72fb      	strb	r3, [r7, #11]
      break;
 8003b40:	e006      	b.n	8003b50 <HAL_DCMI_Stop+0x7c>
    }
  }
  while ((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 0301 	and.w	r3, r3, #1
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d1e9      	bne.n	8003b24 <HAL_DCMI_Stop+0x50>

  /* Disable the DCMI */
  __HAL_DCMI_DISABLE(hdcmi);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003b5e:	601a      	str	r2, [r3, #0]

  /* Disable the DMA */
  (void)HAL_DMA_Abort(hdcmi->DMA_Handle);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b64:	4618      	mov	r0, r3
 8003b66:	f000 ff2b 	bl	80049c0 <HAL_DMA_Abort>

  /* Update error code */
  hdcmi->ErrorCode |= HAL_DCMI_ERROR_NONE;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Change DCMI state */
  hdcmi->State = HAL_DCMI_STATE_READY;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2201      	movs	r2, #1
 8003b76:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Return function status */
  return status;
 8003b82:	7afb      	ldrb	r3, [r7, #11]
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	3710      	adds	r7, #16
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}
 8003b8c:	24000018 	.word	0x24000018
 8003b90:	10624dd3 	.word	0x10624dd3

08003b94 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b084      	sub	sp, #16
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	691b      	ldr	r3, [r3, #16]
 8003ba2:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if ((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	f003 0304 	and.w	r3, r3, #4
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d016      	beq.n	8003bdc <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	2204      	movs	r2, #4
 8003bb4:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bba:	f043 0202 	orr.w	r2, r3, #2
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2204      	movs	r2, #4
 8003bc6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bce:	4a31      	ldr	r2, [pc, #196]	@ (8003c94 <HAL_DCMI_IRQHandler+0x100>)
 8003bd0:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f001 fa10 	bl	8004ffc <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if ((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	f003 0302 	and.w	r3, r3, #2
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d016      	beq.n	8003c14 <HAL_DCMI_IRQHandler+0x80>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	2202      	movs	r2, #2
 8003bec:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bf2:	f043 0201 	orr.w	r2, r3, #1
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2204      	movs	r2, #4
 8003bfe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c06:	4a23      	ldr	r2, [pc, #140]	@ (8003c94 <HAL_DCMI_IRQHandler+0x100>)
 8003c08:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f001 f9f4 	bl	8004ffc <HAL_DMA_Abort_IT>
  }
  /* Line Interrupt management ************************************************/
  if ((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	f003 0310 	and.w	r3, r3, #16
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d006      	beq.n	8003c2c <HAL_DCMI_IRQHandler+0x98>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	2210      	movs	r2, #16
 8003c24:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else
    HAL_DCMI_LineEventCallback(hdcmi);
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f000 f840 	bl	8003cac <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* VSYNC interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	f003 0308 	and.w	r3, r3, #8
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d006      	beq.n	8003c44 <HAL_DCMI_IRQHandler+0xb0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	2208      	movs	r2, #8
 8003c3c:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f7fe f88a 	bl	8001d58 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* FRAME interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	f003 0301 	and.w	r3, r3, #1
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d01d      	beq.n	8003c8a <HAL_DCMI_IRQHandler+0xf6>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f003 0302 	and.w	r3, r3, #2
 8003c58:	2b02      	cmp	r3, #2
 8003c5a:	d107      	bne.n	8003c6c <HAL_DCMI_IRQHandler+0xd8>
    {
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	68da      	ldr	r2, [r3, #12]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f022 021e 	bic.w	r2, r2, #30
 8003c6a:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	68da      	ldr	r2, [r3, #12]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f022 0201 	bic.w	r2, r2, #1
 8003c7a:	60da      	str	r2, [r3, #12]

    /* Clear the End of Frame flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	2201      	movs	r2, #1
 8003c82:	615a      	str	r2, [r3, #20]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else
    HAL_DCMI_FrameEventCallback(hdcmi);
 8003c84:	6878      	ldr	r0, [r7, #4]
 8003c86:	f000 f81b 	bl	8003cc0 <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
}
 8003c8a:	bf00      	nop
 8003c8c:	3710      	adds	r7, #16
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}
 8003c92:	bf00      	nop
 8003c94:	08003dfb 	.word	0x08003dfb

08003c98 <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b083      	sub	sp, #12
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 8003ca0:	bf00      	nop
 8003ca2:	370c      	adds	r7, #12
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003caa:	4770      	bx	lr

08003cac <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b083      	sub	sp, #12
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 8003cb4:	bf00      	nop
 8003cb6:	370c      	adds	r7, #12
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr

08003cc0 <HAL_DCMI_FrameEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b083      	sub	sp, #12
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_FrameEventCallback could be implemented in the user file
   */
}
 8003cc8:	bf00      	nop
 8003cca:	370c      	adds	r7, #12
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr

08003cd4 <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b084      	sub	sp, #16
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  uint32_t tmp ;

  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ce0:	60fb      	str	r3, [r7, #12]

  if (hdcmi->XferCount != 0U)
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d043      	beq.n	8003d72 <DCMI_DMAXferCplt+0x9e>
  {
    /* Update memory 0 address location */
    tmp = ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR) & DMA_SxCR_CT);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003cf6:	60bb      	str	r3, [r7, #8]
    if (((hdcmi->XferCount % 2U) == 0U) && (tmp != 0U))
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cfc:	f003 0301 	and.w	r3, r3, #1
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d118      	bne.n	8003d36 <DCMI_DMAXferCplt+0x62>
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d015      	beq.n	8003d36 <DCMI_DMAXferCplt+0x62>
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	68db      	ldr	r3, [r3, #12]
 8003d12:	60bb      	str	r3, [r7, #8]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY0);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d1c:	00da      	lsls	r2, r3, #3
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	4413      	add	r3, r2
 8003d22:	2200      	movs	r2, #0
 8003d24:	4619      	mov	r1, r3
 8003d26:	f003 fa2d 	bl	8007184 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d2e:	1e5a      	subs	r2, r3, #1
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	639a      	str	r2, [r3, #56]	@ 0x38
 8003d34:	e044      	b.n	8003dc0 <DCMI_DMAXferCplt+0xec>
    }
    /* Update memory 1 address location */
    else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d13c      	bne.n	8003dc0 <DCMI_DMAXferCplt+0xec>
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	691b      	ldr	r3, [r3, #16]
 8003d4e:	60bb      	str	r3, [r7, #8]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY1);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d58:	00da      	lsls	r2, r3, #3
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	4413      	add	r3, r2
 8003d5e:	2201      	movs	r2, #1
 8003d60:	4619      	mov	r1, r3
 8003d62:	f003 fa0f 	bl	8007184 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d6a:	1e5a      	subs	r2, r3, #1
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	639a      	str	r2, [r3, #56]	@ 0x38
 8003d70:	e026      	b.n	8003dc0 <DCMI_DMAXferCplt+0xec>
    {
      /* Nothing to do */
    }
  }
  /* Update memory 0 address location */
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) != 0U)
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d006      	beq.n	8003d90 <DCMI_DMAXferCplt+0xbc>
  {
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR = hdcmi->pBuffPtr;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	68fa      	ldr	r2, [r7, #12]
 8003d8a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003d8c:	60da      	str	r2, [r3, #12]
 8003d8e:	e017      	b.n	8003dc0 <DCMI_DMAXferCplt+0xec>
  }
  /* Update memory 1 address location */
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d10f      	bne.n	8003dc0 <DCMI_DMAXferCplt+0xec>
  {
    tmp = hdcmi->pBuffPtr;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003da4:	60bb      	str	r3, [r7, #8]
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR = (tmp + (4U * hdcmi->XferSize));
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003daa:	0099      	lsls	r1, r3, #2
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	68ba      	ldr	r2, [r7, #8]
 8003db4:	440a      	add	r2, r1
 8003db6:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	639a      	str	r2, [r3, #56]	@ 0x38
  {
    /* Nothing to do */
  }

  /* Check if the frame is transferred */
  if (hdcmi->XferCount == hdcmi->XferTransferNumber)
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d112      	bne.n	8003df2 <DCMI_DMAXferCplt+0x11e>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	68da      	ldr	r2, [r3, #12]
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f042 0201 	orr.w	r2, r2, #1
 8003dda:	60da      	str	r2, [r3, #12]

    /* When snapshot mode, set dcmi state to ready */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 0302 	and.w	r3, r3, #2
 8003de6:	2b02      	cmp	r3, #2
 8003de8:	d103      	bne.n	8003df2 <DCMI_DMAXferCplt+0x11e>
    {
      hdcmi->State = HAL_DCMI_STATE_READY;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2201      	movs	r2, #1
 8003dee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    }
  }
}
 8003df2:	bf00      	nop
 8003df4:	3710      	adds	r7, #16
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}

08003dfa <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 8003dfa:	b580      	push	{r7, lr}
 8003dfc:	b084      	sub	sp, #16
 8003dfe:	af00      	add	r7, sp, #0
 8003e00:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e06:	60fb      	str	r3, [r7, #12]

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e0e:	2b02      	cmp	r3, #2
 8003e10:	d009      	beq.n	8003e26 <DCMI_DMAError+0x2c>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2201      	movs	r2, #1
 8003e16:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e1e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 8003e26:	68f8      	ldr	r0, [r7, #12]
 8003e28:	f7ff ff36 	bl	8003c98 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
}
 8003e2c:	bf00      	nop
 8003e2e:	3710      	adds	r7, #16
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}

08003e34 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b086      	sub	sp, #24
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003e3c:	f7ff fb4a 	bl	80034d4 <HAL_GetTick>
 8003e40:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d101      	bne.n	8003e4c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	e316      	b.n	800447a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a66      	ldr	r2, [pc, #408]	@ (8003fec <HAL_DMA_Init+0x1b8>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d04a      	beq.n	8003eec <HAL_DMA_Init+0xb8>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a65      	ldr	r2, [pc, #404]	@ (8003ff0 <HAL_DMA_Init+0x1bc>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d045      	beq.n	8003eec <HAL_DMA_Init+0xb8>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a63      	ldr	r2, [pc, #396]	@ (8003ff4 <HAL_DMA_Init+0x1c0>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d040      	beq.n	8003eec <HAL_DMA_Init+0xb8>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a62      	ldr	r2, [pc, #392]	@ (8003ff8 <HAL_DMA_Init+0x1c4>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d03b      	beq.n	8003eec <HAL_DMA_Init+0xb8>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a60      	ldr	r2, [pc, #384]	@ (8003ffc <HAL_DMA_Init+0x1c8>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d036      	beq.n	8003eec <HAL_DMA_Init+0xb8>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a5f      	ldr	r2, [pc, #380]	@ (8004000 <HAL_DMA_Init+0x1cc>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d031      	beq.n	8003eec <HAL_DMA_Init+0xb8>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a5d      	ldr	r2, [pc, #372]	@ (8004004 <HAL_DMA_Init+0x1d0>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d02c      	beq.n	8003eec <HAL_DMA_Init+0xb8>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a5c      	ldr	r2, [pc, #368]	@ (8004008 <HAL_DMA_Init+0x1d4>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d027      	beq.n	8003eec <HAL_DMA_Init+0xb8>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a5a      	ldr	r2, [pc, #360]	@ (800400c <HAL_DMA_Init+0x1d8>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d022      	beq.n	8003eec <HAL_DMA_Init+0xb8>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a59      	ldr	r2, [pc, #356]	@ (8004010 <HAL_DMA_Init+0x1dc>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d01d      	beq.n	8003eec <HAL_DMA_Init+0xb8>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a57      	ldr	r2, [pc, #348]	@ (8004014 <HAL_DMA_Init+0x1e0>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d018      	beq.n	8003eec <HAL_DMA_Init+0xb8>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a56      	ldr	r2, [pc, #344]	@ (8004018 <HAL_DMA_Init+0x1e4>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d013      	beq.n	8003eec <HAL_DMA_Init+0xb8>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a54      	ldr	r2, [pc, #336]	@ (800401c <HAL_DMA_Init+0x1e8>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d00e      	beq.n	8003eec <HAL_DMA_Init+0xb8>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a53      	ldr	r2, [pc, #332]	@ (8004020 <HAL_DMA_Init+0x1ec>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d009      	beq.n	8003eec <HAL_DMA_Init+0xb8>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a51      	ldr	r2, [pc, #324]	@ (8004024 <HAL_DMA_Init+0x1f0>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d004      	beq.n	8003eec <HAL_DMA_Init+0xb8>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a50      	ldr	r2, [pc, #320]	@ (8004028 <HAL_DMA_Init+0x1f4>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d101      	bne.n	8003ef0 <HAL_DMA_Init+0xbc>
 8003eec:	2301      	movs	r3, #1
 8003eee:	e000      	b.n	8003ef2 <HAL_DMA_Init+0xbe>
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	f000 813b 	beq.w	800416e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2202      	movs	r2, #2
 8003efc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2200      	movs	r2, #0
 8003f04:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a37      	ldr	r2, [pc, #220]	@ (8003fec <HAL_DMA_Init+0x1b8>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d04a      	beq.n	8003fa8 <HAL_DMA_Init+0x174>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a36      	ldr	r2, [pc, #216]	@ (8003ff0 <HAL_DMA_Init+0x1bc>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d045      	beq.n	8003fa8 <HAL_DMA_Init+0x174>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a34      	ldr	r2, [pc, #208]	@ (8003ff4 <HAL_DMA_Init+0x1c0>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d040      	beq.n	8003fa8 <HAL_DMA_Init+0x174>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a33      	ldr	r2, [pc, #204]	@ (8003ff8 <HAL_DMA_Init+0x1c4>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d03b      	beq.n	8003fa8 <HAL_DMA_Init+0x174>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a31      	ldr	r2, [pc, #196]	@ (8003ffc <HAL_DMA_Init+0x1c8>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d036      	beq.n	8003fa8 <HAL_DMA_Init+0x174>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a30      	ldr	r2, [pc, #192]	@ (8004000 <HAL_DMA_Init+0x1cc>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d031      	beq.n	8003fa8 <HAL_DMA_Init+0x174>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a2e      	ldr	r2, [pc, #184]	@ (8004004 <HAL_DMA_Init+0x1d0>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d02c      	beq.n	8003fa8 <HAL_DMA_Init+0x174>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a2d      	ldr	r2, [pc, #180]	@ (8004008 <HAL_DMA_Init+0x1d4>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d027      	beq.n	8003fa8 <HAL_DMA_Init+0x174>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a2b      	ldr	r2, [pc, #172]	@ (800400c <HAL_DMA_Init+0x1d8>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d022      	beq.n	8003fa8 <HAL_DMA_Init+0x174>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a2a      	ldr	r2, [pc, #168]	@ (8004010 <HAL_DMA_Init+0x1dc>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d01d      	beq.n	8003fa8 <HAL_DMA_Init+0x174>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a28      	ldr	r2, [pc, #160]	@ (8004014 <HAL_DMA_Init+0x1e0>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d018      	beq.n	8003fa8 <HAL_DMA_Init+0x174>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a27      	ldr	r2, [pc, #156]	@ (8004018 <HAL_DMA_Init+0x1e4>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d013      	beq.n	8003fa8 <HAL_DMA_Init+0x174>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a25      	ldr	r2, [pc, #148]	@ (800401c <HAL_DMA_Init+0x1e8>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d00e      	beq.n	8003fa8 <HAL_DMA_Init+0x174>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a24      	ldr	r2, [pc, #144]	@ (8004020 <HAL_DMA_Init+0x1ec>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d009      	beq.n	8003fa8 <HAL_DMA_Init+0x174>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a22      	ldr	r2, [pc, #136]	@ (8004024 <HAL_DMA_Init+0x1f0>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d004      	beq.n	8003fa8 <HAL_DMA_Init+0x174>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a21      	ldr	r2, [pc, #132]	@ (8004028 <HAL_DMA_Init+0x1f4>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d108      	bne.n	8003fba <HAL_DMA_Init+0x186>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f022 0201 	bic.w	r2, r2, #1
 8003fb6:	601a      	str	r2, [r3, #0]
 8003fb8:	e007      	b.n	8003fca <HAL_DMA_Init+0x196>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f022 0201 	bic.w	r2, r2, #1
 8003fc8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003fca:	e02f      	b.n	800402c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003fcc:	f7ff fa82 	bl	80034d4 <HAL_GetTick>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	1ad3      	subs	r3, r2, r3
 8003fd6:	2b05      	cmp	r3, #5
 8003fd8:	d928      	bls.n	800402c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2220      	movs	r2, #32
 8003fde:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2203      	movs	r2, #3
 8003fe4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	e246      	b.n	800447a <HAL_DMA_Init+0x646>
 8003fec:	40020010 	.word	0x40020010
 8003ff0:	40020028 	.word	0x40020028
 8003ff4:	40020040 	.word	0x40020040
 8003ff8:	40020058 	.word	0x40020058
 8003ffc:	40020070 	.word	0x40020070
 8004000:	40020088 	.word	0x40020088
 8004004:	400200a0 	.word	0x400200a0
 8004008:	400200b8 	.word	0x400200b8
 800400c:	40020410 	.word	0x40020410
 8004010:	40020428 	.word	0x40020428
 8004014:	40020440 	.word	0x40020440
 8004018:	40020458 	.word	0x40020458
 800401c:	40020470 	.word	0x40020470
 8004020:	40020488 	.word	0x40020488
 8004024:	400204a0 	.word	0x400204a0
 8004028:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 0301 	and.w	r3, r3, #1
 8004036:	2b00      	cmp	r3, #0
 8004038:	d1c8      	bne.n	8003fcc <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004042:	697a      	ldr	r2, [r7, #20]
 8004044:	4b83      	ldr	r3, [pc, #524]	@ (8004254 <HAL_DMA_Init+0x420>)
 8004046:	4013      	ands	r3, r2
 8004048:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004052:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	691b      	ldr	r3, [r3, #16]
 8004058:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800405e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	699b      	ldr	r3, [r3, #24]
 8004064:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800406a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6a1b      	ldr	r3, [r3, #32]
 8004070:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004072:	697a      	ldr	r2, [r7, #20]
 8004074:	4313      	orrs	r3, r2
 8004076:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800407c:	2b04      	cmp	r3, #4
 800407e:	d107      	bne.n	8004090 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004088:	4313      	orrs	r3, r2
 800408a:	697a      	ldr	r2, [r7, #20]
 800408c:	4313      	orrs	r3, r2
 800408e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004090:	4b71      	ldr	r3, [pc, #452]	@ (8004258 <HAL_DMA_Init+0x424>)
 8004092:	681a      	ldr	r2, [r3, #0]
 8004094:	4b71      	ldr	r3, [pc, #452]	@ (800425c <HAL_DMA_Init+0x428>)
 8004096:	4013      	ands	r3, r2
 8004098:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800409c:	d328      	bcc.n	80040f0 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	2b28      	cmp	r3, #40	@ 0x28
 80040a4:	d903      	bls.n	80040ae <HAL_DMA_Init+0x27a>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	2b2e      	cmp	r3, #46	@ 0x2e
 80040ac:	d917      	bls.n	80040de <HAL_DMA_Init+0x2aa>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	2b3e      	cmp	r3, #62	@ 0x3e
 80040b4:	d903      	bls.n	80040be <HAL_DMA_Init+0x28a>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	2b42      	cmp	r3, #66	@ 0x42
 80040bc:	d90f      	bls.n	80040de <HAL_DMA_Init+0x2aa>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	2b46      	cmp	r3, #70	@ 0x46
 80040c4:	d903      	bls.n	80040ce <HAL_DMA_Init+0x29a>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	2b48      	cmp	r3, #72	@ 0x48
 80040cc:	d907      	bls.n	80040de <HAL_DMA_Init+0x2aa>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	2b4e      	cmp	r3, #78	@ 0x4e
 80040d4:	d905      	bls.n	80040e2 <HAL_DMA_Init+0x2ae>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	2b52      	cmp	r3, #82	@ 0x52
 80040dc:	d801      	bhi.n	80040e2 <HAL_DMA_Init+0x2ae>
 80040de:	2301      	movs	r3, #1
 80040e0:	e000      	b.n	80040e4 <HAL_DMA_Init+0x2b0>
 80040e2:	2300      	movs	r3, #0
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d003      	beq.n	80040f0 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80040ee:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	697a      	ldr	r2, [r7, #20]
 80040f6:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	695b      	ldr	r3, [r3, #20]
 80040fe:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	f023 0307 	bic.w	r3, r3, #7
 8004106:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800410c:	697a      	ldr	r2, [r7, #20]
 800410e:	4313      	orrs	r3, r2
 8004110:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004116:	2b04      	cmp	r3, #4
 8004118:	d117      	bne.n	800414a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800411e:	697a      	ldr	r2, [r7, #20]
 8004120:	4313      	orrs	r3, r2
 8004122:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004128:	2b00      	cmp	r3, #0
 800412a:	d00e      	beq.n	800414a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800412c:	6878      	ldr	r0, [r7, #4]
 800412e:	f002 fb41 	bl	80067b4 <DMA_CheckFifoParam>
 8004132:	4603      	mov	r3, r0
 8004134:	2b00      	cmp	r3, #0
 8004136:	d008      	beq.n	800414a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2240      	movs	r2, #64	@ 0x40
 800413c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2201      	movs	r2, #1
 8004142:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	e197      	b.n	800447a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	697a      	ldr	r2, [r7, #20]
 8004150:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f002 fa7c 	bl	8006650 <DMA_CalcBaseAndBitshift>
 8004158:	4603      	mov	r3, r0
 800415a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004160:	f003 031f 	and.w	r3, r3, #31
 8004164:	223f      	movs	r2, #63	@ 0x3f
 8004166:	409a      	lsls	r2, r3
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	609a      	str	r2, [r3, #8]
 800416c:	e0cd      	b.n	800430a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a3b      	ldr	r2, [pc, #236]	@ (8004260 <HAL_DMA_Init+0x42c>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d022      	beq.n	80041be <HAL_DMA_Init+0x38a>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a39      	ldr	r2, [pc, #228]	@ (8004264 <HAL_DMA_Init+0x430>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d01d      	beq.n	80041be <HAL_DMA_Init+0x38a>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a38      	ldr	r2, [pc, #224]	@ (8004268 <HAL_DMA_Init+0x434>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d018      	beq.n	80041be <HAL_DMA_Init+0x38a>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a36      	ldr	r2, [pc, #216]	@ (800426c <HAL_DMA_Init+0x438>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d013      	beq.n	80041be <HAL_DMA_Init+0x38a>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a35      	ldr	r2, [pc, #212]	@ (8004270 <HAL_DMA_Init+0x43c>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d00e      	beq.n	80041be <HAL_DMA_Init+0x38a>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a33      	ldr	r2, [pc, #204]	@ (8004274 <HAL_DMA_Init+0x440>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d009      	beq.n	80041be <HAL_DMA_Init+0x38a>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a32      	ldr	r2, [pc, #200]	@ (8004278 <HAL_DMA_Init+0x444>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d004      	beq.n	80041be <HAL_DMA_Init+0x38a>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a30      	ldr	r2, [pc, #192]	@ (800427c <HAL_DMA_Init+0x448>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d101      	bne.n	80041c2 <HAL_DMA_Init+0x38e>
 80041be:	2301      	movs	r3, #1
 80041c0:	e000      	b.n	80041c4 <HAL_DMA_Init+0x390>
 80041c2:	2300      	movs	r3, #0
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	f000 8097 	beq.w	80042f8 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a24      	ldr	r2, [pc, #144]	@ (8004260 <HAL_DMA_Init+0x42c>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d021      	beq.n	8004218 <HAL_DMA_Init+0x3e4>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a22      	ldr	r2, [pc, #136]	@ (8004264 <HAL_DMA_Init+0x430>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d01c      	beq.n	8004218 <HAL_DMA_Init+0x3e4>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a21      	ldr	r2, [pc, #132]	@ (8004268 <HAL_DMA_Init+0x434>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d017      	beq.n	8004218 <HAL_DMA_Init+0x3e4>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a1f      	ldr	r2, [pc, #124]	@ (800426c <HAL_DMA_Init+0x438>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d012      	beq.n	8004218 <HAL_DMA_Init+0x3e4>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a1e      	ldr	r2, [pc, #120]	@ (8004270 <HAL_DMA_Init+0x43c>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d00d      	beq.n	8004218 <HAL_DMA_Init+0x3e4>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a1c      	ldr	r2, [pc, #112]	@ (8004274 <HAL_DMA_Init+0x440>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d008      	beq.n	8004218 <HAL_DMA_Init+0x3e4>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a1b      	ldr	r2, [pc, #108]	@ (8004278 <HAL_DMA_Init+0x444>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d003      	beq.n	8004218 <HAL_DMA_Init+0x3e4>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a19      	ldr	r2, [pc, #100]	@ (800427c <HAL_DMA_Init+0x448>)
 8004216:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2202      	movs	r2, #2
 800421c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2200      	movs	r2, #0
 8004224:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004230:	697a      	ldr	r2, [r7, #20]
 8004232:	4b13      	ldr	r3, [pc, #76]	@ (8004280 <HAL_DMA_Init+0x44c>)
 8004234:	4013      	ands	r3, r2
 8004236:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	2b40      	cmp	r3, #64	@ 0x40
 800423e:	d021      	beq.n	8004284 <HAL_DMA_Init+0x450>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	2b80      	cmp	r3, #128	@ 0x80
 8004246:	d102      	bne.n	800424e <HAL_DMA_Init+0x41a>
 8004248:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800424c:	e01b      	b.n	8004286 <HAL_DMA_Init+0x452>
 800424e:	2300      	movs	r3, #0
 8004250:	e019      	b.n	8004286 <HAL_DMA_Init+0x452>
 8004252:	bf00      	nop
 8004254:	fe10803f 	.word	0xfe10803f
 8004258:	5c001000 	.word	0x5c001000
 800425c:	ffff0000 	.word	0xffff0000
 8004260:	58025408 	.word	0x58025408
 8004264:	5802541c 	.word	0x5802541c
 8004268:	58025430 	.word	0x58025430
 800426c:	58025444 	.word	0x58025444
 8004270:	58025458 	.word	0x58025458
 8004274:	5802546c 	.word	0x5802546c
 8004278:	58025480 	.word	0x58025480
 800427c:	58025494 	.word	0x58025494
 8004280:	fffe000f 	.word	0xfffe000f
 8004284:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004286:	687a      	ldr	r2, [r7, #4]
 8004288:	68d2      	ldr	r2, [r2, #12]
 800428a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800428c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	691b      	ldr	r3, [r3, #16]
 8004292:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004294:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	695b      	ldr	r3, [r3, #20]
 800429a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800429c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	699b      	ldr	r3, [r3, #24]
 80042a2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80042a4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	69db      	ldr	r3, [r3, #28]
 80042aa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80042ac:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6a1b      	ldr	r3, [r3, #32]
 80042b2:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80042b4:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80042b6:	697a      	ldr	r2, [r7, #20]
 80042b8:	4313      	orrs	r3, r2
 80042ba:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	697a      	ldr	r2, [r7, #20]
 80042c2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	461a      	mov	r2, r3
 80042ca:	4b6e      	ldr	r3, [pc, #440]	@ (8004484 <HAL_DMA_Init+0x650>)
 80042cc:	4413      	add	r3, r2
 80042ce:	4a6e      	ldr	r2, [pc, #440]	@ (8004488 <HAL_DMA_Init+0x654>)
 80042d0:	fba2 2303 	umull	r2, r3, r2, r3
 80042d4:	091b      	lsrs	r3, r3, #4
 80042d6:	009a      	lsls	r2, r3, #2
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80042dc:	6878      	ldr	r0, [r7, #4]
 80042de:	f002 f9b7 	bl	8006650 <DMA_CalcBaseAndBitshift>
 80042e2:	4603      	mov	r3, r0
 80042e4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042ea:	f003 031f 	and.w	r3, r3, #31
 80042ee:	2201      	movs	r2, #1
 80042f0:	409a      	lsls	r2, r3
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	605a      	str	r2, [r3, #4]
 80042f6:	e008      	b.n	800430a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2240      	movs	r2, #64	@ 0x40
 80042fc:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2203      	movs	r2, #3
 8004302:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	e0b7      	b.n	800447a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a5f      	ldr	r2, [pc, #380]	@ (800448c <HAL_DMA_Init+0x658>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d072      	beq.n	80043fa <HAL_DMA_Init+0x5c6>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a5d      	ldr	r2, [pc, #372]	@ (8004490 <HAL_DMA_Init+0x65c>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d06d      	beq.n	80043fa <HAL_DMA_Init+0x5c6>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a5c      	ldr	r2, [pc, #368]	@ (8004494 <HAL_DMA_Init+0x660>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d068      	beq.n	80043fa <HAL_DMA_Init+0x5c6>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a5a      	ldr	r2, [pc, #360]	@ (8004498 <HAL_DMA_Init+0x664>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d063      	beq.n	80043fa <HAL_DMA_Init+0x5c6>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a59      	ldr	r2, [pc, #356]	@ (800449c <HAL_DMA_Init+0x668>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d05e      	beq.n	80043fa <HAL_DMA_Init+0x5c6>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a57      	ldr	r2, [pc, #348]	@ (80044a0 <HAL_DMA_Init+0x66c>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d059      	beq.n	80043fa <HAL_DMA_Init+0x5c6>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a56      	ldr	r2, [pc, #344]	@ (80044a4 <HAL_DMA_Init+0x670>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d054      	beq.n	80043fa <HAL_DMA_Init+0x5c6>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a54      	ldr	r2, [pc, #336]	@ (80044a8 <HAL_DMA_Init+0x674>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d04f      	beq.n	80043fa <HAL_DMA_Init+0x5c6>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a53      	ldr	r2, [pc, #332]	@ (80044ac <HAL_DMA_Init+0x678>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d04a      	beq.n	80043fa <HAL_DMA_Init+0x5c6>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a51      	ldr	r2, [pc, #324]	@ (80044b0 <HAL_DMA_Init+0x67c>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d045      	beq.n	80043fa <HAL_DMA_Init+0x5c6>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a50      	ldr	r2, [pc, #320]	@ (80044b4 <HAL_DMA_Init+0x680>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d040      	beq.n	80043fa <HAL_DMA_Init+0x5c6>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a4e      	ldr	r2, [pc, #312]	@ (80044b8 <HAL_DMA_Init+0x684>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d03b      	beq.n	80043fa <HAL_DMA_Init+0x5c6>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a4d      	ldr	r2, [pc, #308]	@ (80044bc <HAL_DMA_Init+0x688>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d036      	beq.n	80043fa <HAL_DMA_Init+0x5c6>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a4b      	ldr	r2, [pc, #300]	@ (80044c0 <HAL_DMA_Init+0x68c>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d031      	beq.n	80043fa <HAL_DMA_Init+0x5c6>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a4a      	ldr	r2, [pc, #296]	@ (80044c4 <HAL_DMA_Init+0x690>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d02c      	beq.n	80043fa <HAL_DMA_Init+0x5c6>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a48      	ldr	r2, [pc, #288]	@ (80044c8 <HAL_DMA_Init+0x694>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d027      	beq.n	80043fa <HAL_DMA_Init+0x5c6>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a47      	ldr	r2, [pc, #284]	@ (80044cc <HAL_DMA_Init+0x698>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d022      	beq.n	80043fa <HAL_DMA_Init+0x5c6>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a45      	ldr	r2, [pc, #276]	@ (80044d0 <HAL_DMA_Init+0x69c>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d01d      	beq.n	80043fa <HAL_DMA_Init+0x5c6>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a44      	ldr	r2, [pc, #272]	@ (80044d4 <HAL_DMA_Init+0x6a0>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d018      	beq.n	80043fa <HAL_DMA_Init+0x5c6>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a42      	ldr	r2, [pc, #264]	@ (80044d8 <HAL_DMA_Init+0x6a4>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d013      	beq.n	80043fa <HAL_DMA_Init+0x5c6>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a41      	ldr	r2, [pc, #260]	@ (80044dc <HAL_DMA_Init+0x6a8>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d00e      	beq.n	80043fa <HAL_DMA_Init+0x5c6>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a3f      	ldr	r2, [pc, #252]	@ (80044e0 <HAL_DMA_Init+0x6ac>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d009      	beq.n	80043fa <HAL_DMA_Init+0x5c6>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a3e      	ldr	r2, [pc, #248]	@ (80044e4 <HAL_DMA_Init+0x6b0>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d004      	beq.n	80043fa <HAL_DMA_Init+0x5c6>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a3c      	ldr	r2, [pc, #240]	@ (80044e8 <HAL_DMA_Init+0x6b4>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d101      	bne.n	80043fe <HAL_DMA_Init+0x5ca>
 80043fa:	2301      	movs	r3, #1
 80043fc:	e000      	b.n	8004400 <HAL_DMA_Init+0x5cc>
 80043fe:	2300      	movs	r3, #0
 8004400:	2b00      	cmp	r3, #0
 8004402:	d032      	beq.n	800446a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004404:	6878      	ldr	r0, [r7, #4]
 8004406:	f002 fa51 	bl	80068ac <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	2b80      	cmp	r3, #128	@ 0x80
 8004410:	d102      	bne.n	8004418 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2200      	movs	r2, #0
 8004416:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	685a      	ldr	r2, [r3, #4]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004420:	b2d2      	uxtb	r2, r2
 8004422:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004428:	687a      	ldr	r2, [r7, #4]
 800442a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800442c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d010      	beq.n	8004458 <HAL_DMA_Init+0x624>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	2b08      	cmp	r3, #8
 800443c:	d80c      	bhi.n	8004458 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f002 face 	bl	80069e0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004448:	2200      	movs	r2, #0
 800444a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004450:	687a      	ldr	r2, [r7, #4]
 8004452:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004454:	605a      	str	r2, [r3, #4]
 8004456:	e008      	b.n	800446a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2200      	movs	r2, #0
 800445c:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2200      	movs	r2, #0
 8004462:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2200      	movs	r2, #0
 8004468:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2200      	movs	r2, #0
 800446e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2201      	movs	r2, #1
 8004474:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004478:	2300      	movs	r3, #0
}
 800447a:	4618      	mov	r0, r3
 800447c:	3718      	adds	r7, #24
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
 8004482:	bf00      	nop
 8004484:	a7fdabf8 	.word	0xa7fdabf8
 8004488:	cccccccd 	.word	0xcccccccd
 800448c:	40020010 	.word	0x40020010
 8004490:	40020028 	.word	0x40020028
 8004494:	40020040 	.word	0x40020040
 8004498:	40020058 	.word	0x40020058
 800449c:	40020070 	.word	0x40020070
 80044a0:	40020088 	.word	0x40020088
 80044a4:	400200a0 	.word	0x400200a0
 80044a8:	400200b8 	.word	0x400200b8
 80044ac:	40020410 	.word	0x40020410
 80044b0:	40020428 	.word	0x40020428
 80044b4:	40020440 	.word	0x40020440
 80044b8:	40020458 	.word	0x40020458
 80044bc:	40020470 	.word	0x40020470
 80044c0:	40020488 	.word	0x40020488
 80044c4:	400204a0 	.word	0x400204a0
 80044c8:	400204b8 	.word	0x400204b8
 80044cc:	58025408 	.word	0x58025408
 80044d0:	5802541c 	.word	0x5802541c
 80044d4:	58025430 	.word	0x58025430
 80044d8:	58025444 	.word	0x58025444
 80044dc:	58025458 	.word	0x58025458
 80044e0:	5802546c 	.word	0x5802546c
 80044e4:	58025480 	.word	0x58025480
 80044e8:	58025494 	.word	0x58025494

080044ec <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b086      	sub	sp, #24
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	60f8      	str	r0, [r7, #12]
 80044f4:	60b9      	str	r1, [r7, #8]
 80044f6:	607a      	str	r2, [r7, #4]
 80044f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80044fa:	2300      	movs	r3, #0
 80044fc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d101      	bne.n	8004508 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8004504:	2301      	movs	r3, #1
 8004506:	e226      	b.n	8004956 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800450e:	2b01      	cmp	r3, #1
 8004510:	d101      	bne.n	8004516 <HAL_DMA_Start_IT+0x2a>
 8004512:	2302      	movs	r3, #2
 8004514:	e21f      	b.n	8004956 <HAL_DMA_Start_IT+0x46a>
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2201      	movs	r2, #1
 800451a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004524:	b2db      	uxtb	r3, r3
 8004526:	2b01      	cmp	r3, #1
 8004528:	f040 820a 	bne.w	8004940 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2202      	movs	r2, #2
 8004530:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2200      	movs	r2, #0
 8004538:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a68      	ldr	r2, [pc, #416]	@ (80046e0 <HAL_DMA_Start_IT+0x1f4>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d04a      	beq.n	80045da <HAL_DMA_Start_IT+0xee>
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a66      	ldr	r2, [pc, #408]	@ (80046e4 <HAL_DMA_Start_IT+0x1f8>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d045      	beq.n	80045da <HAL_DMA_Start_IT+0xee>
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a65      	ldr	r2, [pc, #404]	@ (80046e8 <HAL_DMA_Start_IT+0x1fc>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d040      	beq.n	80045da <HAL_DMA_Start_IT+0xee>
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a63      	ldr	r2, [pc, #396]	@ (80046ec <HAL_DMA_Start_IT+0x200>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d03b      	beq.n	80045da <HAL_DMA_Start_IT+0xee>
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a62      	ldr	r2, [pc, #392]	@ (80046f0 <HAL_DMA_Start_IT+0x204>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d036      	beq.n	80045da <HAL_DMA_Start_IT+0xee>
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a60      	ldr	r2, [pc, #384]	@ (80046f4 <HAL_DMA_Start_IT+0x208>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d031      	beq.n	80045da <HAL_DMA_Start_IT+0xee>
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a5f      	ldr	r2, [pc, #380]	@ (80046f8 <HAL_DMA_Start_IT+0x20c>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d02c      	beq.n	80045da <HAL_DMA_Start_IT+0xee>
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a5d      	ldr	r2, [pc, #372]	@ (80046fc <HAL_DMA_Start_IT+0x210>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d027      	beq.n	80045da <HAL_DMA_Start_IT+0xee>
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a5c      	ldr	r2, [pc, #368]	@ (8004700 <HAL_DMA_Start_IT+0x214>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d022      	beq.n	80045da <HAL_DMA_Start_IT+0xee>
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a5a      	ldr	r2, [pc, #360]	@ (8004704 <HAL_DMA_Start_IT+0x218>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d01d      	beq.n	80045da <HAL_DMA_Start_IT+0xee>
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a59      	ldr	r2, [pc, #356]	@ (8004708 <HAL_DMA_Start_IT+0x21c>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d018      	beq.n	80045da <HAL_DMA_Start_IT+0xee>
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a57      	ldr	r2, [pc, #348]	@ (800470c <HAL_DMA_Start_IT+0x220>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d013      	beq.n	80045da <HAL_DMA_Start_IT+0xee>
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a56      	ldr	r2, [pc, #344]	@ (8004710 <HAL_DMA_Start_IT+0x224>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d00e      	beq.n	80045da <HAL_DMA_Start_IT+0xee>
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a54      	ldr	r2, [pc, #336]	@ (8004714 <HAL_DMA_Start_IT+0x228>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d009      	beq.n	80045da <HAL_DMA_Start_IT+0xee>
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a53      	ldr	r2, [pc, #332]	@ (8004718 <HAL_DMA_Start_IT+0x22c>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d004      	beq.n	80045da <HAL_DMA_Start_IT+0xee>
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a51      	ldr	r2, [pc, #324]	@ (800471c <HAL_DMA_Start_IT+0x230>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d108      	bne.n	80045ec <HAL_DMA_Start_IT+0x100>
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	681a      	ldr	r2, [r3, #0]
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f022 0201 	bic.w	r2, r2, #1
 80045e8:	601a      	str	r2, [r3, #0]
 80045ea:	e007      	b.n	80045fc <HAL_DMA_Start_IT+0x110>
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	681a      	ldr	r2, [r3, #0]
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f022 0201 	bic.w	r2, r2, #1
 80045fa:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	687a      	ldr	r2, [r7, #4]
 8004600:	68b9      	ldr	r1, [r7, #8]
 8004602:	68f8      	ldr	r0, [r7, #12]
 8004604:	f001 fe78 	bl	80062f8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a34      	ldr	r2, [pc, #208]	@ (80046e0 <HAL_DMA_Start_IT+0x1f4>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d04a      	beq.n	80046a8 <HAL_DMA_Start_IT+0x1bc>
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a33      	ldr	r2, [pc, #204]	@ (80046e4 <HAL_DMA_Start_IT+0x1f8>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d045      	beq.n	80046a8 <HAL_DMA_Start_IT+0x1bc>
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a31      	ldr	r2, [pc, #196]	@ (80046e8 <HAL_DMA_Start_IT+0x1fc>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d040      	beq.n	80046a8 <HAL_DMA_Start_IT+0x1bc>
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a30      	ldr	r2, [pc, #192]	@ (80046ec <HAL_DMA_Start_IT+0x200>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d03b      	beq.n	80046a8 <HAL_DMA_Start_IT+0x1bc>
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a2e      	ldr	r2, [pc, #184]	@ (80046f0 <HAL_DMA_Start_IT+0x204>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d036      	beq.n	80046a8 <HAL_DMA_Start_IT+0x1bc>
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a2d      	ldr	r2, [pc, #180]	@ (80046f4 <HAL_DMA_Start_IT+0x208>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d031      	beq.n	80046a8 <HAL_DMA_Start_IT+0x1bc>
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a2b      	ldr	r2, [pc, #172]	@ (80046f8 <HAL_DMA_Start_IT+0x20c>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d02c      	beq.n	80046a8 <HAL_DMA_Start_IT+0x1bc>
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a2a      	ldr	r2, [pc, #168]	@ (80046fc <HAL_DMA_Start_IT+0x210>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d027      	beq.n	80046a8 <HAL_DMA_Start_IT+0x1bc>
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a28      	ldr	r2, [pc, #160]	@ (8004700 <HAL_DMA_Start_IT+0x214>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d022      	beq.n	80046a8 <HAL_DMA_Start_IT+0x1bc>
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a27      	ldr	r2, [pc, #156]	@ (8004704 <HAL_DMA_Start_IT+0x218>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d01d      	beq.n	80046a8 <HAL_DMA_Start_IT+0x1bc>
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a25      	ldr	r2, [pc, #148]	@ (8004708 <HAL_DMA_Start_IT+0x21c>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d018      	beq.n	80046a8 <HAL_DMA_Start_IT+0x1bc>
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a24      	ldr	r2, [pc, #144]	@ (800470c <HAL_DMA_Start_IT+0x220>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d013      	beq.n	80046a8 <HAL_DMA_Start_IT+0x1bc>
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a22      	ldr	r2, [pc, #136]	@ (8004710 <HAL_DMA_Start_IT+0x224>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d00e      	beq.n	80046a8 <HAL_DMA_Start_IT+0x1bc>
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a21      	ldr	r2, [pc, #132]	@ (8004714 <HAL_DMA_Start_IT+0x228>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d009      	beq.n	80046a8 <HAL_DMA_Start_IT+0x1bc>
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a1f      	ldr	r2, [pc, #124]	@ (8004718 <HAL_DMA_Start_IT+0x22c>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d004      	beq.n	80046a8 <HAL_DMA_Start_IT+0x1bc>
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a1e      	ldr	r2, [pc, #120]	@ (800471c <HAL_DMA_Start_IT+0x230>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d101      	bne.n	80046ac <HAL_DMA_Start_IT+0x1c0>
 80046a8:	2301      	movs	r3, #1
 80046aa:	e000      	b.n	80046ae <HAL_DMA_Start_IT+0x1c2>
 80046ac:	2300      	movs	r3, #0
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d036      	beq.n	8004720 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f023 021e 	bic.w	r2, r3, #30
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f042 0216 	orr.w	r2, r2, #22
 80046c4:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d03e      	beq.n	800474c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	681a      	ldr	r2, [r3, #0]
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f042 0208 	orr.w	r2, r2, #8
 80046dc:	601a      	str	r2, [r3, #0]
 80046de:	e035      	b.n	800474c <HAL_DMA_Start_IT+0x260>
 80046e0:	40020010 	.word	0x40020010
 80046e4:	40020028 	.word	0x40020028
 80046e8:	40020040 	.word	0x40020040
 80046ec:	40020058 	.word	0x40020058
 80046f0:	40020070 	.word	0x40020070
 80046f4:	40020088 	.word	0x40020088
 80046f8:	400200a0 	.word	0x400200a0
 80046fc:	400200b8 	.word	0x400200b8
 8004700:	40020410 	.word	0x40020410
 8004704:	40020428 	.word	0x40020428
 8004708:	40020440 	.word	0x40020440
 800470c:	40020458 	.word	0x40020458
 8004710:	40020470 	.word	0x40020470
 8004714:	40020488 	.word	0x40020488
 8004718:	400204a0 	.word	0x400204a0
 800471c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f023 020e 	bic.w	r2, r3, #14
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f042 020a 	orr.w	r2, r2, #10
 8004732:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004738:	2b00      	cmp	r3, #0
 800473a:	d007      	beq.n	800474c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f042 0204 	orr.w	r2, r2, #4
 800474a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a83      	ldr	r2, [pc, #524]	@ (8004960 <HAL_DMA_Start_IT+0x474>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d072      	beq.n	800483c <HAL_DMA_Start_IT+0x350>
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a82      	ldr	r2, [pc, #520]	@ (8004964 <HAL_DMA_Start_IT+0x478>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d06d      	beq.n	800483c <HAL_DMA_Start_IT+0x350>
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a80      	ldr	r2, [pc, #512]	@ (8004968 <HAL_DMA_Start_IT+0x47c>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d068      	beq.n	800483c <HAL_DMA_Start_IT+0x350>
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a7f      	ldr	r2, [pc, #508]	@ (800496c <HAL_DMA_Start_IT+0x480>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d063      	beq.n	800483c <HAL_DMA_Start_IT+0x350>
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a7d      	ldr	r2, [pc, #500]	@ (8004970 <HAL_DMA_Start_IT+0x484>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d05e      	beq.n	800483c <HAL_DMA_Start_IT+0x350>
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a7c      	ldr	r2, [pc, #496]	@ (8004974 <HAL_DMA_Start_IT+0x488>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d059      	beq.n	800483c <HAL_DMA_Start_IT+0x350>
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a7a      	ldr	r2, [pc, #488]	@ (8004978 <HAL_DMA_Start_IT+0x48c>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d054      	beq.n	800483c <HAL_DMA_Start_IT+0x350>
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a79      	ldr	r2, [pc, #484]	@ (800497c <HAL_DMA_Start_IT+0x490>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d04f      	beq.n	800483c <HAL_DMA_Start_IT+0x350>
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a77      	ldr	r2, [pc, #476]	@ (8004980 <HAL_DMA_Start_IT+0x494>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d04a      	beq.n	800483c <HAL_DMA_Start_IT+0x350>
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a76      	ldr	r2, [pc, #472]	@ (8004984 <HAL_DMA_Start_IT+0x498>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d045      	beq.n	800483c <HAL_DMA_Start_IT+0x350>
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a74      	ldr	r2, [pc, #464]	@ (8004988 <HAL_DMA_Start_IT+0x49c>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d040      	beq.n	800483c <HAL_DMA_Start_IT+0x350>
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a73      	ldr	r2, [pc, #460]	@ (800498c <HAL_DMA_Start_IT+0x4a0>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d03b      	beq.n	800483c <HAL_DMA_Start_IT+0x350>
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a71      	ldr	r2, [pc, #452]	@ (8004990 <HAL_DMA_Start_IT+0x4a4>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d036      	beq.n	800483c <HAL_DMA_Start_IT+0x350>
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a70      	ldr	r2, [pc, #448]	@ (8004994 <HAL_DMA_Start_IT+0x4a8>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d031      	beq.n	800483c <HAL_DMA_Start_IT+0x350>
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a6e      	ldr	r2, [pc, #440]	@ (8004998 <HAL_DMA_Start_IT+0x4ac>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d02c      	beq.n	800483c <HAL_DMA_Start_IT+0x350>
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a6d      	ldr	r2, [pc, #436]	@ (800499c <HAL_DMA_Start_IT+0x4b0>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d027      	beq.n	800483c <HAL_DMA_Start_IT+0x350>
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a6b      	ldr	r2, [pc, #428]	@ (80049a0 <HAL_DMA_Start_IT+0x4b4>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d022      	beq.n	800483c <HAL_DMA_Start_IT+0x350>
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a6a      	ldr	r2, [pc, #424]	@ (80049a4 <HAL_DMA_Start_IT+0x4b8>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d01d      	beq.n	800483c <HAL_DMA_Start_IT+0x350>
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a68      	ldr	r2, [pc, #416]	@ (80049a8 <HAL_DMA_Start_IT+0x4bc>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d018      	beq.n	800483c <HAL_DMA_Start_IT+0x350>
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a67      	ldr	r2, [pc, #412]	@ (80049ac <HAL_DMA_Start_IT+0x4c0>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d013      	beq.n	800483c <HAL_DMA_Start_IT+0x350>
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a65      	ldr	r2, [pc, #404]	@ (80049b0 <HAL_DMA_Start_IT+0x4c4>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d00e      	beq.n	800483c <HAL_DMA_Start_IT+0x350>
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a64      	ldr	r2, [pc, #400]	@ (80049b4 <HAL_DMA_Start_IT+0x4c8>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d009      	beq.n	800483c <HAL_DMA_Start_IT+0x350>
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a62      	ldr	r2, [pc, #392]	@ (80049b8 <HAL_DMA_Start_IT+0x4cc>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d004      	beq.n	800483c <HAL_DMA_Start_IT+0x350>
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a61      	ldr	r2, [pc, #388]	@ (80049bc <HAL_DMA_Start_IT+0x4d0>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d101      	bne.n	8004840 <HAL_DMA_Start_IT+0x354>
 800483c:	2301      	movs	r3, #1
 800483e:	e000      	b.n	8004842 <HAL_DMA_Start_IT+0x356>
 8004840:	2300      	movs	r3, #0
 8004842:	2b00      	cmp	r3, #0
 8004844:	d01a      	beq.n	800487c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004850:	2b00      	cmp	r3, #0
 8004852:	d007      	beq.n	8004864 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004858:	681a      	ldr	r2, [r3, #0]
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800485e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004862:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004868:	2b00      	cmp	r3, #0
 800486a:	d007      	beq.n	800487c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004870:	681a      	ldr	r2, [r3, #0]
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004876:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800487a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a37      	ldr	r2, [pc, #220]	@ (8004960 <HAL_DMA_Start_IT+0x474>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d04a      	beq.n	800491c <HAL_DMA_Start_IT+0x430>
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a36      	ldr	r2, [pc, #216]	@ (8004964 <HAL_DMA_Start_IT+0x478>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d045      	beq.n	800491c <HAL_DMA_Start_IT+0x430>
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a34      	ldr	r2, [pc, #208]	@ (8004968 <HAL_DMA_Start_IT+0x47c>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d040      	beq.n	800491c <HAL_DMA_Start_IT+0x430>
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a33      	ldr	r2, [pc, #204]	@ (800496c <HAL_DMA_Start_IT+0x480>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d03b      	beq.n	800491c <HAL_DMA_Start_IT+0x430>
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a31      	ldr	r2, [pc, #196]	@ (8004970 <HAL_DMA_Start_IT+0x484>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d036      	beq.n	800491c <HAL_DMA_Start_IT+0x430>
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a30      	ldr	r2, [pc, #192]	@ (8004974 <HAL_DMA_Start_IT+0x488>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d031      	beq.n	800491c <HAL_DMA_Start_IT+0x430>
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a2e      	ldr	r2, [pc, #184]	@ (8004978 <HAL_DMA_Start_IT+0x48c>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d02c      	beq.n	800491c <HAL_DMA_Start_IT+0x430>
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a2d      	ldr	r2, [pc, #180]	@ (800497c <HAL_DMA_Start_IT+0x490>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d027      	beq.n	800491c <HAL_DMA_Start_IT+0x430>
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a2b      	ldr	r2, [pc, #172]	@ (8004980 <HAL_DMA_Start_IT+0x494>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d022      	beq.n	800491c <HAL_DMA_Start_IT+0x430>
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a2a      	ldr	r2, [pc, #168]	@ (8004984 <HAL_DMA_Start_IT+0x498>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d01d      	beq.n	800491c <HAL_DMA_Start_IT+0x430>
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a28      	ldr	r2, [pc, #160]	@ (8004988 <HAL_DMA_Start_IT+0x49c>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d018      	beq.n	800491c <HAL_DMA_Start_IT+0x430>
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a27      	ldr	r2, [pc, #156]	@ (800498c <HAL_DMA_Start_IT+0x4a0>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d013      	beq.n	800491c <HAL_DMA_Start_IT+0x430>
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a25      	ldr	r2, [pc, #148]	@ (8004990 <HAL_DMA_Start_IT+0x4a4>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d00e      	beq.n	800491c <HAL_DMA_Start_IT+0x430>
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a24      	ldr	r2, [pc, #144]	@ (8004994 <HAL_DMA_Start_IT+0x4a8>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d009      	beq.n	800491c <HAL_DMA_Start_IT+0x430>
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a22      	ldr	r2, [pc, #136]	@ (8004998 <HAL_DMA_Start_IT+0x4ac>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d004      	beq.n	800491c <HAL_DMA_Start_IT+0x430>
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a21      	ldr	r2, [pc, #132]	@ (800499c <HAL_DMA_Start_IT+0x4b0>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d108      	bne.n	800492e <HAL_DMA_Start_IT+0x442>
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f042 0201 	orr.w	r2, r2, #1
 800492a:	601a      	str	r2, [r3, #0]
 800492c:	e012      	b.n	8004954 <HAL_DMA_Start_IT+0x468>
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	681a      	ldr	r2, [r3, #0]
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f042 0201 	orr.w	r2, r2, #1
 800493c:	601a      	str	r2, [r3, #0]
 800493e:	e009      	b.n	8004954 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004946:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2200      	movs	r2, #0
 800494c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8004950:	2301      	movs	r3, #1
 8004952:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004954:	7dfb      	ldrb	r3, [r7, #23]
}
 8004956:	4618      	mov	r0, r3
 8004958:	3718      	adds	r7, #24
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}
 800495e:	bf00      	nop
 8004960:	40020010 	.word	0x40020010
 8004964:	40020028 	.word	0x40020028
 8004968:	40020040 	.word	0x40020040
 800496c:	40020058 	.word	0x40020058
 8004970:	40020070 	.word	0x40020070
 8004974:	40020088 	.word	0x40020088
 8004978:	400200a0 	.word	0x400200a0
 800497c:	400200b8 	.word	0x400200b8
 8004980:	40020410 	.word	0x40020410
 8004984:	40020428 	.word	0x40020428
 8004988:	40020440 	.word	0x40020440
 800498c:	40020458 	.word	0x40020458
 8004990:	40020470 	.word	0x40020470
 8004994:	40020488 	.word	0x40020488
 8004998:	400204a0 	.word	0x400204a0
 800499c:	400204b8 	.word	0x400204b8
 80049a0:	58025408 	.word	0x58025408
 80049a4:	5802541c 	.word	0x5802541c
 80049a8:	58025430 	.word	0x58025430
 80049ac:	58025444 	.word	0x58025444
 80049b0:	58025458 	.word	0x58025458
 80049b4:	5802546c 	.word	0x5802546c
 80049b8:	58025480 	.word	0x58025480
 80049bc:	58025494 	.word	0x58025494

080049c0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b086      	sub	sp, #24
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80049c8:	f7fe fd84 	bl	80034d4 <HAL_GetTick>
 80049cc:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d101      	bne.n	80049d8 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80049d4:	2301      	movs	r3, #1
 80049d6:	e2dc      	b.n	8004f92 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80049de:	b2db      	uxtb	r3, r3
 80049e0:	2b02      	cmp	r3, #2
 80049e2:	d008      	beq.n	80049f6 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2280      	movs	r2, #128	@ 0x80
 80049e8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2200      	movs	r2, #0
 80049ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80049f2:	2301      	movs	r3, #1
 80049f4:	e2cd      	b.n	8004f92 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a76      	ldr	r2, [pc, #472]	@ (8004bd4 <HAL_DMA_Abort+0x214>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d04a      	beq.n	8004a96 <HAL_DMA_Abort+0xd6>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a74      	ldr	r2, [pc, #464]	@ (8004bd8 <HAL_DMA_Abort+0x218>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d045      	beq.n	8004a96 <HAL_DMA_Abort+0xd6>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a73      	ldr	r2, [pc, #460]	@ (8004bdc <HAL_DMA_Abort+0x21c>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d040      	beq.n	8004a96 <HAL_DMA_Abort+0xd6>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a71      	ldr	r2, [pc, #452]	@ (8004be0 <HAL_DMA_Abort+0x220>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d03b      	beq.n	8004a96 <HAL_DMA_Abort+0xd6>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a70      	ldr	r2, [pc, #448]	@ (8004be4 <HAL_DMA_Abort+0x224>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d036      	beq.n	8004a96 <HAL_DMA_Abort+0xd6>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a6e      	ldr	r2, [pc, #440]	@ (8004be8 <HAL_DMA_Abort+0x228>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d031      	beq.n	8004a96 <HAL_DMA_Abort+0xd6>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a6d      	ldr	r2, [pc, #436]	@ (8004bec <HAL_DMA_Abort+0x22c>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d02c      	beq.n	8004a96 <HAL_DMA_Abort+0xd6>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a6b      	ldr	r2, [pc, #428]	@ (8004bf0 <HAL_DMA_Abort+0x230>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d027      	beq.n	8004a96 <HAL_DMA_Abort+0xd6>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a6a      	ldr	r2, [pc, #424]	@ (8004bf4 <HAL_DMA_Abort+0x234>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d022      	beq.n	8004a96 <HAL_DMA_Abort+0xd6>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a68      	ldr	r2, [pc, #416]	@ (8004bf8 <HAL_DMA_Abort+0x238>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d01d      	beq.n	8004a96 <HAL_DMA_Abort+0xd6>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a67      	ldr	r2, [pc, #412]	@ (8004bfc <HAL_DMA_Abort+0x23c>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d018      	beq.n	8004a96 <HAL_DMA_Abort+0xd6>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a65      	ldr	r2, [pc, #404]	@ (8004c00 <HAL_DMA_Abort+0x240>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d013      	beq.n	8004a96 <HAL_DMA_Abort+0xd6>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a64      	ldr	r2, [pc, #400]	@ (8004c04 <HAL_DMA_Abort+0x244>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d00e      	beq.n	8004a96 <HAL_DMA_Abort+0xd6>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a62      	ldr	r2, [pc, #392]	@ (8004c08 <HAL_DMA_Abort+0x248>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d009      	beq.n	8004a96 <HAL_DMA_Abort+0xd6>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a61      	ldr	r2, [pc, #388]	@ (8004c0c <HAL_DMA_Abort+0x24c>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d004      	beq.n	8004a96 <HAL_DMA_Abort+0xd6>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a5f      	ldr	r2, [pc, #380]	@ (8004c10 <HAL_DMA_Abort+0x250>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d101      	bne.n	8004a9a <HAL_DMA_Abort+0xda>
 8004a96:	2301      	movs	r3, #1
 8004a98:	e000      	b.n	8004a9c <HAL_DMA_Abort+0xdc>
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d013      	beq.n	8004ac8 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	681a      	ldr	r2, [r3, #0]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f022 021e 	bic.w	r2, r2, #30
 8004aae:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	695a      	ldr	r2, [r3, #20]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004abe:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	617b      	str	r3, [r7, #20]
 8004ac6:	e00a      	b.n	8004ade <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	681a      	ldr	r2, [r3, #0]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f022 020e 	bic.w	r2, r2, #14
 8004ad6:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a3c      	ldr	r2, [pc, #240]	@ (8004bd4 <HAL_DMA_Abort+0x214>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d072      	beq.n	8004bce <HAL_DMA_Abort+0x20e>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a3a      	ldr	r2, [pc, #232]	@ (8004bd8 <HAL_DMA_Abort+0x218>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d06d      	beq.n	8004bce <HAL_DMA_Abort+0x20e>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a39      	ldr	r2, [pc, #228]	@ (8004bdc <HAL_DMA_Abort+0x21c>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d068      	beq.n	8004bce <HAL_DMA_Abort+0x20e>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a37      	ldr	r2, [pc, #220]	@ (8004be0 <HAL_DMA_Abort+0x220>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d063      	beq.n	8004bce <HAL_DMA_Abort+0x20e>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a36      	ldr	r2, [pc, #216]	@ (8004be4 <HAL_DMA_Abort+0x224>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d05e      	beq.n	8004bce <HAL_DMA_Abort+0x20e>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a34      	ldr	r2, [pc, #208]	@ (8004be8 <HAL_DMA_Abort+0x228>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d059      	beq.n	8004bce <HAL_DMA_Abort+0x20e>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a33      	ldr	r2, [pc, #204]	@ (8004bec <HAL_DMA_Abort+0x22c>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d054      	beq.n	8004bce <HAL_DMA_Abort+0x20e>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a31      	ldr	r2, [pc, #196]	@ (8004bf0 <HAL_DMA_Abort+0x230>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d04f      	beq.n	8004bce <HAL_DMA_Abort+0x20e>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a30      	ldr	r2, [pc, #192]	@ (8004bf4 <HAL_DMA_Abort+0x234>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d04a      	beq.n	8004bce <HAL_DMA_Abort+0x20e>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a2e      	ldr	r2, [pc, #184]	@ (8004bf8 <HAL_DMA_Abort+0x238>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d045      	beq.n	8004bce <HAL_DMA_Abort+0x20e>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a2d      	ldr	r2, [pc, #180]	@ (8004bfc <HAL_DMA_Abort+0x23c>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d040      	beq.n	8004bce <HAL_DMA_Abort+0x20e>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a2b      	ldr	r2, [pc, #172]	@ (8004c00 <HAL_DMA_Abort+0x240>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d03b      	beq.n	8004bce <HAL_DMA_Abort+0x20e>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a2a      	ldr	r2, [pc, #168]	@ (8004c04 <HAL_DMA_Abort+0x244>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d036      	beq.n	8004bce <HAL_DMA_Abort+0x20e>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a28      	ldr	r2, [pc, #160]	@ (8004c08 <HAL_DMA_Abort+0x248>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d031      	beq.n	8004bce <HAL_DMA_Abort+0x20e>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a27      	ldr	r2, [pc, #156]	@ (8004c0c <HAL_DMA_Abort+0x24c>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d02c      	beq.n	8004bce <HAL_DMA_Abort+0x20e>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a25      	ldr	r2, [pc, #148]	@ (8004c10 <HAL_DMA_Abort+0x250>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d027      	beq.n	8004bce <HAL_DMA_Abort+0x20e>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a24      	ldr	r2, [pc, #144]	@ (8004c14 <HAL_DMA_Abort+0x254>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d022      	beq.n	8004bce <HAL_DMA_Abort+0x20e>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a22      	ldr	r2, [pc, #136]	@ (8004c18 <HAL_DMA_Abort+0x258>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d01d      	beq.n	8004bce <HAL_DMA_Abort+0x20e>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a21      	ldr	r2, [pc, #132]	@ (8004c1c <HAL_DMA_Abort+0x25c>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d018      	beq.n	8004bce <HAL_DMA_Abort+0x20e>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a1f      	ldr	r2, [pc, #124]	@ (8004c20 <HAL_DMA_Abort+0x260>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d013      	beq.n	8004bce <HAL_DMA_Abort+0x20e>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a1e      	ldr	r2, [pc, #120]	@ (8004c24 <HAL_DMA_Abort+0x264>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d00e      	beq.n	8004bce <HAL_DMA_Abort+0x20e>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a1c      	ldr	r2, [pc, #112]	@ (8004c28 <HAL_DMA_Abort+0x268>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d009      	beq.n	8004bce <HAL_DMA_Abort+0x20e>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a1b      	ldr	r2, [pc, #108]	@ (8004c2c <HAL_DMA_Abort+0x26c>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d004      	beq.n	8004bce <HAL_DMA_Abort+0x20e>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a19      	ldr	r2, [pc, #100]	@ (8004c30 <HAL_DMA_Abort+0x270>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d132      	bne.n	8004c34 <HAL_DMA_Abort+0x274>
 8004bce:	2301      	movs	r3, #1
 8004bd0:	e031      	b.n	8004c36 <HAL_DMA_Abort+0x276>
 8004bd2:	bf00      	nop
 8004bd4:	40020010 	.word	0x40020010
 8004bd8:	40020028 	.word	0x40020028
 8004bdc:	40020040 	.word	0x40020040
 8004be0:	40020058 	.word	0x40020058
 8004be4:	40020070 	.word	0x40020070
 8004be8:	40020088 	.word	0x40020088
 8004bec:	400200a0 	.word	0x400200a0
 8004bf0:	400200b8 	.word	0x400200b8
 8004bf4:	40020410 	.word	0x40020410
 8004bf8:	40020428 	.word	0x40020428
 8004bfc:	40020440 	.word	0x40020440
 8004c00:	40020458 	.word	0x40020458
 8004c04:	40020470 	.word	0x40020470
 8004c08:	40020488 	.word	0x40020488
 8004c0c:	400204a0 	.word	0x400204a0
 8004c10:	400204b8 	.word	0x400204b8
 8004c14:	58025408 	.word	0x58025408
 8004c18:	5802541c 	.word	0x5802541c
 8004c1c:	58025430 	.word	0x58025430
 8004c20:	58025444 	.word	0x58025444
 8004c24:	58025458 	.word	0x58025458
 8004c28:	5802546c 	.word	0x5802546c
 8004c2c:	58025480 	.word	0x58025480
 8004c30:	58025494 	.word	0x58025494
 8004c34:	2300      	movs	r3, #0
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d007      	beq.n	8004c4a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c44:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004c48:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a6d      	ldr	r2, [pc, #436]	@ (8004e04 <HAL_DMA_Abort+0x444>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d04a      	beq.n	8004cea <HAL_DMA_Abort+0x32a>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a6b      	ldr	r2, [pc, #428]	@ (8004e08 <HAL_DMA_Abort+0x448>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d045      	beq.n	8004cea <HAL_DMA_Abort+0x32a>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a6a      	ldr	r2, [pc, #424]	@ (8004e0c <HAL_DMA_Abort+0x44c>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d040      	beq.n	8004cea <HAL_DMA_Abort+0x32a>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a68      	ldr	r2, [pc, #416]	@ (8004e10 <HAL_DMA_Abort+0x450>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d03b      	beq.n	8004cea <HAL_DMA_Abort+0x32a>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a67      	ldr	r2, [pc, #412]	@ (8004e14 <HAL_DMA_Abort+0x454>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d036      	beq.n	8004cea <HAL_DMA_Abort+0x32a>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a65      	ldr	r2, [pc, #404]	@ (8004e18 <HAL_DMA_Abort+0x458>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d031      	beq.n	8004cea <HAL_DMA_Abort+0x32a>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a64      	ldr	r2, [pc, #400]	@ (8004e1c <HAL_DMA_Abort+0x45c>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d02c      	beq.n	8004cea <HAL_DMA_Abort+0x32a>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a62      	ldr	r2, [pc, #392]	@ (8004e20 <HAL_DMA_Abort+0x460>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d027      	beq.n	8004cea <HAL_DMA_Abort+0x32a>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a61      	ldr	r2, [pc, #388]	@ (8004e24 <HAL_DMA_Abort+0x464>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d022      	beq.n	8004cea <HAL_DMA_Abort+0x32a>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a5f      	ldr	r2, [pc, #380]	@ (8004e28 <HAL_DMA_Abort+0x468>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d01d      	beq.n	8004cea <HAL_DMA_Abort+0x32a>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a5e      	ldr	r2, [pc, #376]	@ (8004e2c <HAL_DMA_Abort+0x46c>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d018      	beq.n	8004cea <HAL_DMA_Abort+0x32a>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a5c      	ldr	r2, [pc, #368]	@ (8004e30 <HAL_DMA_Abort+0x470>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d013      	beq.n	8004cea <HAL_DMA_Abort+0x32a>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a5b      	ldr	r2, [pc, #364]	@ (8004e34 <HAL_DMA_Abort+0x474>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d00e      	beq.n	8004cea <HAL_DMA_Abort+0x32a>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a59      	ldr	r2, [pc, #356]	@ (8004e38 <HAL_DMA_Abort+0x478>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d009      	beq.n	8004cea <HAL_DMA_Abort+0x32a>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a58      	ldr	r2, [pc, #352]	@ (8004e3c <HAL_DMA_Abort+0x47c>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d004      	beq.n	8004cea <HAL_DMA_Abort+0x32a>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a56      	ldr	r2, [pc, #344]	@ (8004e40 <HAL_DMA_Abort+0x480>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d108      	bne.n	8004cfc <HAL_DMA_Abort+0x33c>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	681a      	ldr	r2, [r3, #0]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f022 0201 	bic.w	r2, r2, #1
 8004cf8:	601a      	str	r2, [r3, #0]
 8004cfa:	e007      	b.n	8004d0c <HAL_DMA_Abort+0x34c>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	681a      	ldr	r2, [r3, #0]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f022 0201 	bic.w	r2, r2, #1
 8004d0a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004d0c:	e013      	b.n	8004d36 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004d0e:	f7fe fbe1 	bl	80034d4 <HAL_GetTick>
 8004d12:	4602      	mov	r2, r0
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	1ad3      	subs	r3, r2, r3
 8004d18:	2b05      	cmp	r3, #5
 8004d1a:	d90c      	bls.n	8004d36 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2220      	movs	r2, #32
 8004d20:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2203      	movs	r2, #3
 8004d26:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	e12d      	b.n	8004f92 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f003 0301 	and.w	r3, r3, #1
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d1e5      	bne.n	8004d0e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a2f      	ldr	r2, [pc, #188]	@ (8004e04 <HAL_DMA_Abort+0x444>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d04a      	beq.n	8004de2 <HAL_DMA_Abort+0x422>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a2d      	ldr	r2, [pc, #180]	@ (8004e08 <HAL_DMA_Abort+0x448>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d045      	beq.n	8004de2 <HAL_DMA_Abort+0x422>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a2c      	ldr	r2, [pc, #176]	@ (8004e0c <HAL_DMA_Abort+0x44c>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d040      	beq.n	8004de2 <HAL_DMA_Abort+0x422>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a2a      	ldr	r2, [pc, #168]	@ (8004e10 <HAL_DMA_Abort+0x450>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d03b      	beq.n	8004de2 <HAL_DMA_Abort+0x422>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a29      	ldr	r2, [pc, #164]	@ (8004e14 <HAL_DMA_Abort+0x454>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d036      	beq.n	8004de2 <HAL_DMA_Abort+0x422>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a27      	ldr	r2, [pc, #156]	@ (8004e18 <HAL_DMA_Abort+0x458>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d031      	beq.n	8004de2 <HAL_DMA_Abort+0x422>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a26      	ldr	r2, [pc, #152]	@ (8004e1c <HAL_DMA_Abort+0x45c>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d02c      	beq.n	8004de2 <HAL_DMA_Abort+0x422>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4a24      	ldr	r2, [pc, #144]	@ (8004e20 <HAL_DMA_Abort+0x460>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d027      	beq.n	8004de2 <HAL_DMA_Abort+0x422>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a23      	ldr	r2, [pc, #140]	@ (8004e24 <HAL_DMA_Abort+0x464>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d022      	beq.n	8004de2 <HAL_DMA_Abort+0x422>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a21      	ldr	r2, [pc, #132]	@ (8004e28 <HAL_DMA_Abort+0x468>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d01d      	beq.n	8004de2 <HAL_DMA_Abort+0x422>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a20      	ldr	r2, [pc, #128]	@ (8004e2c <HAL_DMA_Abort+0x46c>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d018      	beq.n	8004de2 <HAL_DMA_Abort+0x422>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a1e      	ldr	r2, [pc, #120]	@ (8004e30 <HAL_DMA_Abort+0x470>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d013      	beq.n	8004de2 <HAL_DMA_Abort+0x422>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a1d      	ldr	r2, [pc, #116]	@ (8004e34 <HAL_DMA_Abort+0x474>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d00e      	beq.n	8004de2 <HAL_DMA_Abort+0x422>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a1b      	ldr	r2, [pc, #108]	@ (8004e38 <HAL_DMA_Abort+0x478>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d009      	beq.n	8004de2 <HAL_DMA_Abort+0x422>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a1a      	ldr	r2, [pc, #104]	@ (8004e3c <HAL_DMA_Abort+0x47c>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d004      	beq.n	8004de2 <HAL_DMA_Abort+0x422>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a18      	ldr	r2, [pc, #96]	@ (8004e40 <HAL_DMA_Abort+0x480>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d101      	bne.n	8004de6 <HAL_DMA_Abort+0x426>
 8004de2:	2301      	movs	r3, #1
 8004de4:	e000      	b.n	8004de8 <HAL_DMA_Abort+0x428>
 8004de6:	2300      	movs	r3, #0
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d02b      	beq.n	8004e44 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004df0:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004df6:	f003 031f 	and.w	r3, r3, #31
 8004dfa:	223f      	movs	r2, #63	@ 0x3f
 8004dfc:	409a      	lsls	r2, r3
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	609a      	str	r2, [r3, #8]
 8004e02:	e02a      	b.n	8004e5a <HAL_DMA_Abort+0x49a>
 8004e04:	40020010 	.word	0x40020010
 8004e08:	40020028 	.word	0x40020028
 8004e0c:	40020040 	.word	0x40020040
 8004e10:	40020058 	.word	0x40020058
 8004e14:	40020070 	.word	0x40020070
 8004e18:	40020088 	.word	0x40020088
 8004e1c:	400200a0 	.word	0x400200a0
 8004e20:	400200b8 	.word	0x400200b8
 8004e24:	40020410 	.word	0x40020410
 8004e28:	40020428 	.word	0x40020428
 8004e2c:	40020440 	.word	0x40020440
 8004e30:	40020458 	.word	0x40020458
 8004e34:	40020470 	.word	0x40020470
 8004e38:	40020488 	.word	0x40020488
 8004e3c:	400204a0 	.word	0x400204a0
 8004e40:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e48:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e4e:	f003 031f 	and.w	r3, r3, #31
 8004e52:	2201      	movs	r2, #1
 8004e54:	409a      	lsls	r2, r3
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a4f      	ldr	r2, [pc, #316]	@ (8004f9c <HAL_DMA_Abort+0x5dc>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d072      	beq.n	8004f4a <HAL_DMA_Abort+0x58a>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a4d      	ldr	r2, [pc, #308]	@ (8004fa0 <HAL_DMA_Abort+0x5e0>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d06d      	beq.n	8004f4a <HAL_DMA_Abort+0x58a>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a4c      	ldr	r2, [pc, #304]	@ (8004fa4 <HAL_DMA_Abort+0x5e4>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d068      	beq.n	8004f4a <HAL_DMA_Abort+0x58a>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a4a      	ldr	r2, [pc, #296]	@ (8004fa8 <HAL_DMA_Abort+0x5e8>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d063      	beq.n	8004f4a <HAL_DMA_Abort+0x58a>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a49      	ldr	r2, [pc, #292]	@ (8004fac <HAL_DMA_Abort+0x5ec>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d05e      	beq.n	8004f4a <HAL_DMA_Abort+0x58a>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a47      	ldr	r2, [pc, #284]	@ (8004fb0 <HAL_DMA_Abort+0x5f0>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d059      	beq.n	8004f4a <HAL_DMA_Abort+0x58a>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a46      	ldr	r2, [pc, #280]	@ (8004fb4 <HAL_DMA_Abort+0x5f4>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d054      	beq.n	8004f4a <HAL_DMA_Abort+0x58a>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a44      	ldr	r2, [pc, #272]	@ (8004fb8 <HAL_DMA_Abort+0x5f8>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d04f      	beq.n	8004f4a <HAL_DMA_Abort+0x58a>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a43      	ldr	r2, [pc, #268]	@ (8004fbc <HAL_DMA_Abort+0x5fc>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d04a      	beq.n	8004f4a <HAL_DMA_Abort+0x58a>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a41      	ldr	r2, [pc, #260]	@ (8004fc0 <HAL_DMA_Abort+0x600>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d045      	beq.n	8004f4a <HAL_DMA_Abort+0x58a>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a40      	ldr	r2, [pc, #256]	@ (8004fc4 <HAL_DMA_Abort+0x604>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d040      	beq.n	8004f4a <HAL_DMA_Abort+0x58a>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a3e      	ldr	r2, [pc, #248]	@ (8004fc8 <HAL_DMA_Abort+0x608>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d03b      	beq.n	8004f4a <HAL_DMA_Abort+0x58a>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a3d      	ldr	r2, [pc, #244]	@ (8004fcc <HAL_DMA_Abort+0x60c>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d036      	beq.n	8004f4a <HAL_DMA_Abort+0x58a>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a3b      	ldr	r2, [pc, #236]	@ (8004fd0 <HAL_DMA_Abort+0x610>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d031      	beq.n	8004f4a <HAL_DMA_Abort+0x58a>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a3a      	ldr	r2, [pc, #232]	@ (8004fd4 <HAL_DMA_Abort+0x614>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d02c      	beq.n	8004f4a <HAL_DMA_Abort+0x58a>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a38      	ldr	r2, [pc, #224]	@ (8004fd8 <HAL_DMA_Abort+0x618>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d027      	beq.n	8004f4a <HAL_DMA_Abort+0x58a>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a37      	ldr	r2, [pc, #220]	@ (8004fdc <HAL_DMA_Abort+0x61c>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d022      	beq.n	8004f4a <HAL_DMA_Abort+0x58a>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a35      	ldr	r2, [pc, #212]	@ (8004fe0 <HAL_DMA_Abort+0x620>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d01d      	beq.n	8004f4a <HAL_DMA_Abort+0x58a>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a34      	ldr	r2, [pc, #208]	@ (8004fe4 <HAL_DMA_Abort+0x624>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d018      	beq.n	8004f4a <HAL_DMA_Abort+0x58a>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a32      	ldr	r2, [pc, #200]	@ (8004fe8 <HAL_DMA_Abort+0x628>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d013      	beq.n	8004f4a <HAL_DMA_Abort+0x58a>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a31      	ldr	r2, [pc, #196]	@ (8004fec <HAL_DMA_Abort+0x62c>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d00e      	beq.n	8004f4a <HAL_DMA_Abort+0x58a>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a2f      	ldr	r2, [pc, #188]	@ (8004ff0 <HAL_DMA_Abort+0x630>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d009      	beq.n	8004f4a <HAL_DMA_Abort+0x58a>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a2e      	ldr	r2, [pc, #184]	@ (8004ff4 <HAL_DMA_Abort+0x634>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d004      	beq.n	8004f4a <HAL_DMA_Abort+0x58a>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a2c      	ldr	r2, [pc, #176]	@ (8004ff8 <HAL_DMA_Abort+0x638>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d101      	bne.n	8004f4e <HAL_DMA_Abort+0x58e>
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	e000      	b.n	8004f50 <HAL_DMA_Abort+0x590>
 8004f4e:	2300      	movs	r3, #0
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d015      	beq.n	8004f80 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004f58:	687a      	ldr	r2, [r7, #4]
 8004f5a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004f5c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d00c      	beq.n	8004f80 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004f6a:	681a      	ldr	r2, [r3, #0]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004f70:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004f74:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f7a:	687a      	ldr	r2, [r7, #4]
 8004f7c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004f7e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2201      	movs	r2, #1
 8004f84:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8004f90:	2300      	movs	r3, #0
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	3718      	adds	r7, #24
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}
 8004f9a:	bf00      	nop
 8004f9c:	40020010 	.word	0x40020010
 8004fa0:	40020028 	.word	0x40020028
 8004fa4:	40020040 	.word	0x40020040
 8004fa8:	40020058 	.word	0x40020058
 8004fac:	40020070 	.word	0x40020070
 8004fb0:	40020088 	.word	0x40020088
 8004fb4:	400200a0 	.word	0x400200a0
 8004fb8:	400200b8 	.word	0x400200b8
 8004fbc:	40020410 	.word	0x40020410
 8004fc0:	40020428 	.word	0x40020428
 8004fc4:	40020440 	.word	0x40020440
 8004fc8:	40020458 	.word	0x40020458
 8004fcc:	40020470 	.word	0x40020470
 8004fd0:	40020488 	.word	0x40020488
 8004fd4:	400204a0 	.word	0x400204a0
 8004fd8:	400204b8 	.word	0x400204b8
 8004fdc:	58025408 	.word	0x58025408
 8004fe0:	5802541c 	.word	0x5802541c
 8004fe4:	58025430 	.word	0x58025430
 8004fe8:	58025444 	.word	0x58025444
 8004fec:	58025458 	.word	0x58025458
 8004ff0:	5802546c 	.word	0x5802546c
 8004ff4:	58025480 	.word	0x58025480
 8004ff8:	58025494 	.word	0x58025494

08004ffc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b084      	sub	sp, #16
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d101      	bne.n	800500e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800500a:	2301      	movs	r3, #1
 800500c:	e237      	b.n	800547e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005014:	b2db      	uxtb	r3, r3
 8005016:	2b02      	cmp	r3, #2
 8005018:	d004      	beq.n	8005024 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2280      	movs	r2, #128	@ 0x80
 800501e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8005020:	2301      	movs	r3, #1
 8005022:	e22c      	b.n	800547e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a5c      	ldr	r2, [pc, #368]	@ (800519c <HAL_DMA_Abort_IT+0x1a0>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d04a      	beq.n	80050c4 <HAL_DMA_Abort_IT+0xc8>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a5b      	ldr	r2, [pc, #364]	@ (80051a0 <HAL_DMA_Abort_IT+0x1a4>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d045      	beq.n	80050c4 <HAL_DMA_Abort_IT+0xc8>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a59      	ldr	r2, [pc, #356]	@ (80051a4 <HAL_DMA_Abort_IT+0x1a8>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d040      	beq.n	80050c4 <HAL_DMA_Abort_IT+0xc8>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a58      	ldr	r2, [pc, #352]	@ (80051a8 <HAL_DMA_Abort_IT+0x1ac>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d03b      	beq.n	80050c4 <HAL_DMA_Abort_IT+0xc8>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a56      	ldr	r2, [pc, #344]	@ (80051ac <HAL_DMA_Abort_IT+0x1b0>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d036      	beq.n	80050c4 <HAL_DMA_Abort_IT+0xc8>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a55      	ldr	r2, [pc, #340]	@ (80051b0 <HAL_DMA_Abort_IT+0x1b4>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d031      	beq.n	80050c4 <HAL_DMA_Abort_IT+0xc8>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a53      	ldr	r2, [pc, #332]	@ (80051b4 <HAL_DMA_Abort_IT+0x1b8>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d02c      	beq.n	80050c4 <HAL_DMA_Abort_IT+0xc8>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a52      	ldr	r2, [pc, #328]	@ (80051b8 <HAL_DMA_Abort_IT+0x1bc>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d027      	beq.n	80050c4 <HAL_DMA_Abort_IT+0xc8>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a50      	ldr	r2, [pc, #320]	@ (80051bc <HAL_DMA_Abort_IT+0x1c0>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d022      	beq.n	80050c4 <HAL_DMA_Abort_IT+0xc8>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a4f      	ldr	r2, [pc, #316]	@ (80051c0 <HAL_DMA_Abort_IT+0x1c4>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d01d      	beq.n	80050c4 <HAL_DMA_Abort_IT+0xc8>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a4d      	ldr	r2, [pc, #308]	@ (80051c4 <HAL_DMA_Abort_IT+0x1c8>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d018      	beq.n	80050c4 <HAL_DMA_Abort_IT+0xc8>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a4c      	ldr	r2, [pc, #304]	@ (80051c8 <HAL_DMA_Abort_IT+0x1cc>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d013      	beq.n	80050c4 <HAL_DMA_Abort_IT+0xc8>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a4a      	ldr	r2, [pc, #296]	@ (80051cc <HAL_DMA_Abort_IT+0x1d0>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d00e      	beq.n	80050c4 <HAL_DMA_Abort_IT+0xc8>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a49      	ldr	r2, [pc, #292]	@ (80051d0 <HAL_DMA_Abort_IT+0x1d4>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d009      	beq.n	80050c4 <HAL_DMA_Abort_IT+0xc8>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a47      	ldr	r2, [pc, #284]	@ (80051d4 <HAL_DMA_Abort_IT+0x1d8>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d004      	beq.n	80050c4 <HAL_DMA_Abort_IT+0xc8>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a46      	ldr	r2, [pc, #280]	@ (80051d8 <HAL_DMA_Abort_IT+0x1dc>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d101      	bne.n	80050c8 <HAL_DMA_Abort_IT+0xcc>
 80050c4:	2301      	movs	r3, #1
 80050c6:	e000      	b.n	80050ca <HAL_DMA_Abort_IT+0xce>
 80050c8:	2300      	movs	r3, #0
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	f000 8086 	beq.w	80051dc <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2204      	movs	r2, #4
 80050d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a2f      	ldr	r2, [pc, #188]	@ (800519c <HAL_DMA_Abort_IT+0x1a0>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d04a      	beq.n	8005178 <HAL_DMA_Abort_IT+0x17c>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a2e      	ldr	r2, [pc, #184]	@ (80051a0 <HAL_DMA_Abort_IT+0x1a4>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d045      	beq.n	8005178 <HAL_DMA_Abort_IT+0x17c>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a2c      	ldr	r2, [pc, #176]	@ (80051a4 <HAL_DMA_Abort_IT+0x1a8>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d040      	beq.n	8005178 <HAL_DMA_Abort_IT+0x17c>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a2b      	ldr	r2, [pc, #172]	@ (80051a8 <HAL_DMA_Abort_IT+0x1ac>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d03b      	beq.n	8005178 <HAL_DMA_Abort_IT+0x17c>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a29      	ldr	r2, [pc, #164]	@ (80051ac <HAL_DMA_Abort_IT+0x1b0>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d036      	beq.n	8005178 <HAL_DMA_Abort_IT+0x17c>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a28      	ldr	r2, [pc, #160]	@ (80051b0 <HAL_DMA_Abort_IT+0x1b4>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d031      	beq.n	8005178 <HAL_DMA_Abort_IT+0x17c>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a26      	ldr	r2, [pc, #152]	@ (80051b4 <HAL_DMA_Abort_IT+0x1b8>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d02c      	beq.n	8005178 <HAL_DMA_Abort_IT+0x17c>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a25      	ldr	r2, [pc, #148]	@ (80051b8 <HAL_DMA_Abort_IT+0x1bc>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d027      	beq.n	8005178 <HAL_DMA_Abort_IT+0x17c>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a23      	ldr	r2, [pc, #140]	@ (80051bc <HAL_DMA_Abort_IT+0x1c0>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d022      	beq.n	8005178 <HAL_DMA_Abort_IT+0x17c>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a22      	ldr	r2, [pc, #136]	@ (80051c0 <HAL_DMA_Abort_IT+0x1c4>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d01d      	beq.n	8005178 <HAL_DMA_Abort_IT+0x17c>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a20      	ldr	r2, [pc, #128]	@ (80051c4 <HAL_DMA_Abort_IT+0x1c8>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d018      	beq.n	8005178 <HAL_DMA_Abort_IT+0x17c>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a1f      	ldr	r2, [pc, #124]	@ (80051c8 <HAL_DMA_Abort_IT+0x1cc>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d013      	beq.n	8005178 <HAL_DMA_Abort_IT+0x17c>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a1d      	ldr	r2, [pc, #116]	@ (80051cc <HAL_DMA_Abort_IT+0x1d0>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d00e      	beq.n	8005178 <HAL_DMA_Abort_IT+0x17c>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a1c      	ldr	r2, [pc, #112]	@ (80051d0 <HAL_DMA_Abort_IT+0x1d4>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d009      	beq.n	8005178 <HAL_DMA_Abort_IT+0x17c>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a1a      	ldr	r2, [pc, #104]	@ (80051d4 <HAL_DMA_Abort_IT+0x1d8>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d004      	beq.n	8005178 <HAL_DMA_Abort_IT+0x17c>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a19      	ldr	r2, [pc, #100]	@ (80051d8 <HAL_DMA_Abort_IT+0x1dc>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d108      	bne.n	800518a <HAL_DMA_Abort_IT+0x18e>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	681a      	ldr	r2, [r3, #0]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f022 0201 	bic.w	r2, r2, #1
 8005186:	601a      	str	r2, [r3, #0]
 8005188:	e178      	b.n	800547c <HAL_DMA_Abort_IT+0x480>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	681a      	ldr	r2, [r3, #0]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f022 0201 	bic.w	r2, r2, #1
 8005198:	601a      	str	r2, [r3, #0]
 800519a:	e16f      	b.n	800547c <HAL_DMA_Abort_IT+0x480>
 800519c:	40020010 	.word	0x40020010
 80051a0:	40020028 	.word	0x40020028
 80051a4:	40020040 	.word	0x40020040
 80051a8:	40020058 	.word	0x40020058
 80051ac:	40020070 	.word	0x40020070
 80051b0:	40020088 	.word	0x40020088
 80051b4:	400200a0 	.word	0x400200a0
 80051b8:	400200b8 	.word	0x400200b8
 80051bc:	40020410 	.word	0x40020410
 80051c0:	40020428 	.word	0x40020428
 80051c4:	40020440 	.word	0x40020440
 80051c8:	40020458 	.word	0x40020458
 80051cc:	40020470 	.word	0x40020470
 80051d0:	40020488 	.word	0x40020488
 80051d4:	400204a0 	.word	0x400204a0
 80051d8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	681a      	ldr	r2, [r3, #0]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f022 020e 	bic.w	r2, r2, #14
 80051ea:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a6c      	ldr	r2, [pc, #432]	@ (80053a4 <HAL_DMA_Abort_IT+0x3a8>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d04a      	beq.n	800528c <HAL_DMA_Abort_IT+0x290>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4a6b      	ldr	r2, [pc, #428]	@ (80053a8 <HAL_DMA_Abort_IT+0x3ac>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d045      	beq.n	800528c <HAL_DMA_Abort_IT+0x290>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a69      	ldr	r2, [pc, #420]	@ (80053ac <HAL_DMA_Abort_IT+0x3b0>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d040      	beq.n	800528c <HAL_DMA_Abort_IT+0x290>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a68      	ldr	r2, [pc, #416]	@ (80053b0 <HAL_DMA_Abort_IT+0x3b4>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d03b      	beq.n	800528c <HAL_DMA_Abort_IT+0x290>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a66      	ldr	r2, [pc, #408]	@ (80053b4 <HAL_DMA_Abort_IT+0x3b8>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d036      	beq.n	800528c <HAL_DMA_Abort_IT+0x290>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4a65      	ldr	r2, [pc, #404]	@ (80053b8 <HAL_DMA_Abort_IT+0x3bc>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d031      	beq.n	800528c <HAL_DMA_Abort_IT+0x290>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a63      	ldr	r2, [pc, #396]	@ (80053bc <HAL_DMA_Abort_IT+0x3c0>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d02c      	beq.n	800528c <HAL_DMA_Abort_IT+0x290>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a62      	ldr	r2, [pc, #392]	@ (80053c0 <HAL_DMA_Abort_IT+0x3c4>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d027      	beq.n	800528c <HAL_DMA_Abort_IT+0x290>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a60      	ldr	r2, [pc, #384]	@ (80053c4 <HAL_DMA_Abort_IT+0x3c8>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d022      	beq.n	800528c <HAL_DMA_Abort_IT+0x290>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a5f      	ldr	r2, [pc, #380]	@ (80053c8 <HAL_DMA_Abort_IT+0x3cc>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d01d      	beq.n	800528c <HAL_DMA_Abort_IT+0x290>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a5d      	ldr	r2, [pc, #372]	@ (80053cc <HAL_DMA_Abort_IT+0x3d0>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d018      	beq.n	800528c <HAL_DMA_Abort_IT+0x290>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a5c      	ldr	r2, [pc, #368]	@ (80053d0 <HAL_DMA_Abort_IT+0x3d4>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d013      	beq.n	800528c <HAL_DMA_Abort_IT+0x290>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a5a      	ldr	r2, [pc, #360]	@ (80053d4 <HAL_DMA_Abort_IT+0x3d8>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d00e      	beq.n	800528c <HAL_DMA_Abort_IT+0x290>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a59      	ldr	r2, [pc, #356]	@ (80053d8 <HAL_DMA_Abort_IT+0x3dc>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d009      	beq.n	800528c <HAL_DMA_Abort_IT+0x290>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a57      	ldr	r2, [pc, #348]	@ (80053dc <HAL_DMA_Abort_IT+0x3e0>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d004      	beq.n	800528c <HAL_DMA_Abort_IT+0x290>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a56      	ldr	r2, [pc, #344]	@ (80053e0 <HAL_DMA_Abort_IT+0x3e4>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d108      	bne.n	800529e <HAL_DMA_Abort_IT+0x2a2>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	681a      	ldr	r2, [r3, #0]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f022 0201 	bic.w	r2, r2, #1
 800529a:	601a      	str	r2, [r3, #0]
 800529c:	e007      	b.n	80052ae <HAL_DMA_Abort_IT+0x2b2>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	681a      	ldr	r2, [r3, #0]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f022 0201 	bic.w	r2, r2, #1
 80052ac:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a3c      	ldr	r2, [pc, #240]	@ (80053a4 <HAL_DMA_Abort_IT+0x3a8>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d072      	beq.n	800539e <HAL_DMA_Abort_IT+0x3a2>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a3a      	ldr	r2, [pc, #232]	@ (80053a8 <HAL_DMA_Abort_IT+0x3ac>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d06d      	beq.n	800539e <HAL_DMA_Abort_IT+0x3a2>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a39      	ldr	r2, [pc, #228]	@ (80053ac <HAL_DMA_Abort_IT+0x3b0>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d068      	beq.n	800539e <HAL_DMA_Abort_IT+0x3a2>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a37      	ldr	r2, [pc, #220]	@ (80053b0 <HAL_DMA_Abort_IT+0x3b4>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d063      	beq.n	800539e <HAL_DMA_Abort_IT+0x3a2>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a36      	ldr	r2, [pc, #216]	@ (80053b4 <HAL_DMA_Abort_IT+0x3b8>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d05e      	beq.n	800539e <HAL_DMA_Abort_IT+0x3a2>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a34      	ldr	r2, [pc, #208]	@ (80053b8 <HAL_DMA_Abort_IT+0x3bc>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d059      	beq.n	800539e <HAL_DMA_Abort_IT+0x3a2>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a33      	ldr	r2, [pc, #204]	@ (80053bc <HAL_DMA_Abort_IT+0x3c0>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d054      	beq.n	800539e <HAL_DMA_Abort_IT+0x3a2>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a31      	ldr	r2, [pc, #196]	@ (80053c0 <HAL_DMA_Abort_IT+0x3c4>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d04f      	beq.n	800539e <HAL_DMA_Abort_IT+0x3a2>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a30      	ldr	r2, [pc, #192]	@ (80053c4 <HAL_DMA_Abort_IT+0x3c8>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d04a      	beq.n	800539e <HAL_DMA_Abort_IT+0x3a2>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a2e      	ldr	r2, [pc, #184]	@ (80053c8 <HAL_DMA_Abort_IT+0x3cc>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d045      	beq.n	800539e <HAL_DMA_Abort_IT+0x3a2>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a2d      	ldr	r2, [pc, #180]	@ (80053cc <HAL_DMA_Abort_IT+0x3d0>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d040      	beq.n	800539e <HAL_DMA_Abort_IT+0x3a2>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a2b      	ldr	r2, [pc, #172]	@ (80053d0 <HAL_DMA_Abort_IT+0x3d4>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d03b      	beq.n	800539e <HAL_DMA_Abort_IT+0x3a2>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a2a      	ldr	r2, [pc, #168]	@ (80053d4 <HAL_DMA_Abort_IT+0x3d8>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d036      	beq.n	800539e <HAL_DMA_Abort_IT+0x3a2>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a28      	ldr	r2, [pc, #160]	@ (80053d8 <HAL_DMA_Abort_IT+0x3dc>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d031      	beq.n	800539e <HAL_DMA_Abort_IT+0x3a2>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4a27      	ldr	r2, [pc, #156]	@ (80053dc <HAL_DMA_Abort_IT+0x3e0>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d02c      	beq.n	800539e <HAL_DMA_Abort_IT+0x3a2>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a25      	ldr	r2, [pc, #148]	@ (80053e0 <HAL_DMA_Abort_IT+0x3e4>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d027      	beq.n	800539e <HAL_DMA_Abort_IT+0x3a2>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4a24      	ldr	r2, [pc, #144]	@ (80053e4 <HAL_DMA_Abort_IT+0x3e8>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d022      	beq.n	800539e <HAL_DMA_Abort_IT+0x3a2>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a22      	ldr	r2, [pc, #136]	@ (80053e8 <HAL_DMA_Abort_IT+0x3ec>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d01d      	beq.n	800539e <HAL_DMA_Abort_IT+0x3a2>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a21      	ldr	r2, [pc, #132]	@ (80053ec <HAL_DMA_Abort_IT+0x3f0>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d018      	beq.n	800539e <HAL_DMA_Abort_IT+0x3a2>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a1f      	ldr	r2, [pc, #124]	@ (80053f0 <HAL_DMA_Abort_IT+0x3f4>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d013      	beq.n	800539e <HAL_DMA_Abort_IT+0x3a2>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a1e      	ldr	r2, [pc, #120]	@ (80053f4 <HAL_DMA_Abort_IT+0x3f8>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d00e      	beq.n	800539e <HAL_DMA_Abort_IT+0x3a2>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a1c      	ldr	r2, [pc, #112]	@ (80053f8 <HAL_DMA_Abort_IT+0x3fc>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d009      	beq.n	800539e <HAL_DMA_Abort_IT+0x3a2>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a1b      	ldr	r2, [pc, #108]	@ (80053fc <HAL_DMA_Abort_IT+0x400>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d004      	beq.n	800539e <HAL_DMA_Abort_IT+0x3a2>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a19      	ldr	r2, [pc, #100]	@ (8005400 <HAL_DMA_Abort_IT+0x404>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d132      	bne.n	8005404 <HAL_DMA_Abort_IT+0x408>
 800539e:	2301      	movs	r3, #1
 80053a0:	e031      	b.n	8005406 <HAL_DMA_Abort_IT+0x40a>
 80053a2:	bf00      	nop
 80053a4:	40020010 	.word	0x40020010
 80053a8:	40020028 	.word	0x40020028
 80053ac:	40020040 	.word	0x40020040
 80053b0:	40020058 	.word	0x40020058
 80053b4:	40020070 	.word	0x40020070
 80053b8:	40020088 	.word	0x40020088
 80053bc:	400200a0 	.word	0x400200a0
 80053c0:	400200b8 	.word	0x400200b8
 80053c4:	40020410 	.word	0x40020410
 80053c8:	40020428 	.word	0x40020428
 80053cc:	40020440 	.word	0x40020440
 80053d0:	40020458 	.word	0x40020458
 80053d4:	40020470 	.word	0x40020470
 80053d8:	40020488 	.word	0x40020488
 80053dc:	400204a0 	.word	0x400204a0
 80053e0:	400204b8 	.word	0x400204b8
 80053e4:	58025408 	.word	0x58025408
 80053e8:	5802541c 	.word	0x5802541c
 80053ec:	58025430 	.word	0x58025430
 80053f0:	58025444 	.word	0x58025444
 80053f4:	58025458 	.word	0x58025458
 80053f8:	5802546c 	.word	0x5802546c
 80053fc:	58025480 	.word	0x58025480
 8005400:	58025494 	.word	0x58025494
 8005404:	2300      	movs	r3, #0
 8005406:	2b00      	cmp	r3, #0
 8005408:	d028      	beq.n	800545c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800540e:	681a      	ldr	r2, [r3, #0]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005414:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005418:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800541e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005424:	f003 031f 	and.w	r3, r3, #31
 8005428:	2201      	movs	r2, #1
 800542a:	409a      	lsls	r2, r3
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005434:	687a      	ldr	r2, [r7, #4]
 8005436:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005438:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800543e:	2b00      	cmp	r3, #0
 8005440:	d00c      	beq.n	800545c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005446:	681a      	ldr	r2, [r3, #0]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800544c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005450:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005456:	687a      	ldr	r2, [r7, #4]
 8005458:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800545a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2201      	movs	r2, #1
 8005460:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2200      	movs	r2, #0
 8005468:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005470:	2b00      	cmp	r3, #0
 8005472:	d003      	beq.n	800547c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800547c:	2300      	movs	r3, #0
}
 800547e:	4618      	mov	r0, r3
 8005480:	3710      	adds	r7, #16
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}
 8005486:	bf00      	nop

08005488 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b08a      	sub	sp, #40	@ 0x28
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005490:	2300      	movs	r3, #0
 8005492:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005494:	4b67      	ldr	r3, [pc, #412]	@ (8005634 <HAL_DMA_IRQHandler+0x1ac>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a67      	ldr	r2, [pc, #412]	@ (8005638 <HAL_DMA_IRQHandler+0x1b0>)
 800549a:	fba2 2303 	umull	r2, r3, r2, r3
 800549e:	0a9b      	lsrs	r3, r3, #10
 80054a0:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054a6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054ac:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80054ae:	6a3b      	ldr	r3, [r7, #32]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80054b4:	69fb      	ldr	r3, [r7, #28]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a5f      	ldr	r2, [pc, #380]	@ (800563c <HAL_DMA_IRQHandler+0x1b4>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d04a      	beq.n	800555a <HAL_DMA_IRQHandler+0xd2>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a5d      	ldr	r2, [pc, #372]	@ (8005640 <HAL_DMA_IRQHandler+0x1b8>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d045      	beq.n	800555a <HAL_DMA_IRQHandler+0xd2>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a5c      	ldr	r2, [pc, #368]	@ (8005644 <HAL_DMA_IRQHandler+0x1bc>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d040      	beq.n	800555a <HAL_DMA_IRQHandler+0xd2>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a5a      	ldr	r2, [pc, #360]	@ (8005648 <HAL_DMA_IRQHandler+0x1c0>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d03b      	beq.n	800555a <HAL_DMA_IRQHandler+0xd2>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a59      	ldr	r2, [pc, #356]	@ (800564c <HAL_DMA_IRQHandler+0x1c4>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d036      	beq.n	800555a <HAL_DMA_IRQHandler+0xd2>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a57      	ldr	r2, [pc, #348]	@ (8005650 <HAL_DMA_IRQHandler+0x1c8>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d031      	beq.n	800555a <HAL_DMA_IRQHandler+0xd2>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a56      	ldr	r2, [pc, #344]	@ (8005654 <HAL_DMA_IRQHandler+0x1cc>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d02c      	beq.n	800555a <HAL_DMA_IRQHandler+0xd2>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a54      	ldr	r2, [pc, #336]	@ (8005658 <HAL_DMA_IRQHandler+0x1d0>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d027      	beq.n	800555a <HAL_DMA_IRQHandler+0xd2>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a53      	ldr	r2, [pc, #332]	@ (800565c <HAL_DMA_IRQHandler+0x1d4>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d022      	beq.n	800555a <HAL_DMA_IRQHandler+0xd2>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a51      	ldr	r2, [pc, #324]	@ (8005660 <HAL_DMA_IRQHandler+0x1d8>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d01d      	beq.n	800555a <HAL_DMA_IRQHandler+0xd2>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4a50      	ldr	r2, [pc, #320]	@ (8005664 <HAL_DMA_IRQHandler+0x1dc>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d018      	beq.n	800555a <HAL_DMA_IRQHandler+0xd2>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a4e      	ldr	r2, [pc, #312]	@ (8005668 <HAL_DMA_IRQHandler+0x1e0>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d013      	beq.n	800555a <HAL_DMA_IRQHandler+0xd2>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a4d      	ldr	r2, [pc, #308]	@ (800566c <HAL_DMA_IRQHandler+0x1e4>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d00e      	beq.n	800555a <HAL_DMA_IRQHandler+0xd2>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a4b      	ldr	r2, [pc, #300]	@ (8005670 <HAL_DMA_IRQHandler+0x1e8>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d009      	beq.n	800555a <HAL_DMA_IRQHandler+0xd2>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a4a      	ldr	r2, [pc, #296]	@ (8005674 <HAL_DMA_IRQHandler+0x1ec>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d004      	beq.n	800555a <HAL_DMA_IRQHandler+0xd2>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a48      	ldr	r2, [pc, #288]	@ (8005678 <HAL_DMA_IRQHandler+0x1f0>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d101      	bne.n	800555e <HAL_DMA_IRQHandler+0xd6>
 800555a:	2301      	movs	r3, #1
 800555c:	e000      	b.n	8005560 <HAL_DMA_IRQHandler+0xd8>
 800555e:	2300      	movs	r3, #0
 8005560:	2b00      	cmp	r3, #0
 8005562:	f000 842b 	beq.w	8005dbc <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800556a:	f003 031f 	and.w	r3, r3, #31
 800556e:	2208      	movs	r2, #8
 8005570:	409a      	lsls	r2, r3
 8005572:	69bb      	ldr	r3, [r7, #24]
 8005574:	4013      	ands	r3, r2
 8005576:	2b00      	cmp	r3, #0
 8005578:	f000 80a2 	beq.w	80056c0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a2e      	ldr	r2, [pc, #184]	@ (800563c <HAL_DMA_IRQHandler+0x1b4>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d04a      	beq.n	800561c <HAL_DMA_IRQHandler+0x194>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a2d      	ldr	r2, [pc, #180]	@ (8005640 <HAL_DMA_IRQHandler+0x1b8>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d045      	beq.n	800561c <HAL_DMA_IRQHandler+0x194>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a2b      	ldr	r2, [pc, #172]	@ (8005644 <HAL_DMA_IRQHandler+0x1bc>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d040      	beq.n	800561c <HAL_DMA_IRQHandler+0x194>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a2a      	ldr	r2, [pc, #168]	@ (8005648 <HAL_DMA_IRQHandler+0x1c0>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d03b      	beq.n	800561c <HAL_DMA_IRQHandler+0x194>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a28      	ldr	r2, [pc, #160]	@ (800564c <HAL_DMA_IRQHandler+0x1c4>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d036      	beq.n	800561c <HAL_DMA_IRQHandler+0x194>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4a27      	ldr	r2, [pc, #156]	@ (8005650 <HAL_DMA_IRQHandler+0x1c8>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d031      	beq.n	800561c <HAL_DMA_IRQHandler+0x194>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a25      	ldr	r2, [pc, #148]	@ (8005654 <HAL_DMA_IRQHandler+0x1cc>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d02c      	beq.n	800561c <HAL_DMA_IRQHandler+0x194>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a24      	ldr	r2, [pc, #144]	@ (8005658 <HAL_DMA_IRQHandler+0x1d0>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d027      	beq.n	800561c <HAL_DMA_IRQHandler+0x194>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4a22      	ldr	r2, [pc, #136]	@ (800565c <HAL_DMA_IRQHandler+0x1d4>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d022      	beq.n	800561c <HAL_DMA_IRQHandler+0x194>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4a21      	ldr	r2, [pc, #132]	@ (8005660 <HAL_DMA_IRQHandler+0x1d8>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d01d      	beq.n	800561c <HAL_DMA_IRQHandler+0x194>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4a1f      	ldr	r2, [pc, #124]	@ (8005664 <HAL_DMA_IRQHandler+0x1dc>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d018      	beq.n	800561c <HAL_DMA_IRQHandler+0x194>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4a1e      	ldr	r2, [pc, #120]	@ (8005668 <HAL_DMA_IRQHandler+0x1e0>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d013      	beq.n	800561c <HAL_DMA_IRQHandler+0x194>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4a1c      	ldr	r2, [pc, #112]	@ (800566c <HAL_DMA_IRQHandler+0x1e4>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d00e      	beq.n	800561c <HAL_DMA_IRQHandler+0x194>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4a1b      	ldr	r2, [pc, #108]	@ (8005670 <HAL_DMA_IRQHandler+0x1e8>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d009      	beq.n	800561c <HAL_DMA_IRQHandler+0x194>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a19      	ldr	r2, [pc, #100]	@ (8005674 <HAL_DMA_IRQHandler+0x1ec>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d004      	beq.n	800561c <HAL_DMA_IRQHandler+0x194>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4a18      	ldr	r2, [pc, #96]	@ (8005678 <HAL_DMA_IRQHandler+0x1f0>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d12f      	bne.n	800567c <HAL_DMA_IRQHandler+0x1f4>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f003 0304 	and.w	r3, r3, #4
 8005626:	2b00      	cmp	r3, #0
 8005628:	bf14      	ite	ne
 800562a:	2301      	movne	r3, #1
 800562c:	2300      	moveq	r3, #0
 800562e:	b2db      	uxtb	r3, r3
 8005630:	e02e      	b.n	8005690 <HAL_DMA_IRQHandler+0x208>
 8005632:	bf00      	nop
 8005634:	24000018 	.word	0x24000018
 8005638:	1b4e81b5 	.word	0x1b4e81b5
 800563c:	40020010 	.word	0x40020010
 8005640:	40020028 	.word	0x40020028
 8005644:	40020040 	.word	0x40020040
 8005648:	40020058 	.word	0x40020058
 800564c:	40020070 	.word	0x40020070
 8005650:	40020088 	.word	0x40020088
 8005654:	400200a0 	.word	0x400200a0
 8005658:	400200b8 	.word	0x400200b8
 800565c:	40020410 	.word	0x40020410
 8005660:	40020428 	.word	0x40020428
 8005664:	40020440 	.word	0x40020440
 8005668:	40020458 	.word	0x40020458
 800566c:	40020470 	.word	0x40020470
 8005670:	40020488 	.word	0x40020488
 8005674:	400204a0 	.word	0x400204a0
 8005678:	400204b8 	.word	0x400204b8
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f003 0308 	and.w	r3, r3, #8
 8005686:	2b00      	cmp	r3, #0
 8005688:	bf14      	ite	ne
 800568a:	2301      	movne	r3, #1
 800568c:	2300      	moveq	r3, #0
 800568e:	b2db      	uxtb	r3, r3
 8005690:	2b00      	cmp	r3, #0
 8005692:	d015      	beq.n	80056c0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	681a      	ldr	r2, [r3, #0]
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f022 0204 	bic.w	r2, r2, #4
 80056a2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056a8:	f003 031f 	and.w	r3, r3, #31
 80056ac:	2208      	movs	r2, #8
 80056ae:	409a      	lsls	r2, r3
 80056b0:	6a3b      	ldr	r3, [r7, #32]
 80056b2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056b8:	f043 0201 	orr.w	r2, r3, #1
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056c4:	f003 031f 	and.w	r3, r3, #31
 80056c8:	69ba      	ldr	r2, [r7, #24]
 80056ca:	fa22 f303 	lsr.w	r3, r2, r3
 80056ce:	f003 0301 	and.w	r3, r3, #1
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d06e      	beq.n	80057b4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a69      	ldr	r2, [pc, #420]	@ (8005880 <HAL_DMA_IRQHandler+0x3f8>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d04a      	beq.n	8005776 <HAL_DMA_IRQHandler+0x2ee>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a67      	ldr	r2, [pc, #412]	@ (8005884 <HAL_DMA_IRQHandler+0x3fc>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d045      	beq.n	8005776 <HAL_DMA_IRQHandler+0x2ee>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a66      	ldr	r2, [pc, #408]	@ (8005888 <HAL_DMA_IRQHandler+0x400>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d040      	beq.n	8005776 <HAL_DMA_IRQHandler+0x2ee>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a64      	ldr	r2, [pc, #400]	@ (800588c <HAL_DMA_IRQHandler+0x404>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d03b      	beq.n	8005776 <HAL_DMA_IRQHandler+0x2ee>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a63      	ldr	r2, [pc, #396]	@ (8005890 <HAL_DMA_IRQHandler+0x408>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d036      	beq.n	8005776 <HAL_DMA_IRQHandler+0x2ee>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a61      	ldr	r2, [pc, #388]	@ (8005894 <HAL_DMA_IRQHandler+0x40c>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d031      	beq.n	8005776 <HAL_DMA_IRQHandler+0x2ee>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4a60      	ldr	r2, [pc, #384]	@ (8005898 <HAL_DMA_IRQHandler+0x410>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d02c      	beq.n	8005776 <HAL_DMA_IRQHandler+0x2ee>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a5e      	ldr	r2, [pc, #376]	@ (800589c <HAL_DMA_IRQHandler+0x414>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d027      	beq.n	8005776 <HAL_DMA_IRQHandler+0x2ee>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a5d      	ldr	r2, [pc, #372]	@ (80058a0 <HAL_DMA_IRQHandler+0x418>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d022      	beq.n	8005776 <HAL_DMA_IRQHandler+0x2ee>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a5b      	ldr	r2, [pc, #364]	@ (80058a4 <HAL_DMA_IRQHandler+0x41c>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d01d      	beq.n	8005776 <HAL_DMA_IRQHandler+0x2ee>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4a5a      	ldr	r2, [pc, #360]	@ (80058a8 <HAL_DMA_IRQHandler+0x420>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d018      	beq.n	8005776 <HAL_DMA_IRQHandler+0x2ee>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a58      	ldr	r2, [pc, #352]	@ (80058ac <HAL_DMA_IRQHandler+0x424>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d013      	beq.n	8005776 <HAL_DMA_IRQHandler+0x2ee>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a57      	ldr	r2, [pc, #348]	@ (80058b0 <HAL_DMA_IRQHandler+0x428>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d00e      	beq.n	8005776 <HAL_DMA_IRQHandler+0x2ee>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a55      	ldr	r2, [pc, #340]	@ (80058b4 <HAL_DMA_IRQHandler+0x42c>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d009      	beq.n	8005776 <HAL_DMA_IRQHandler+0x2ee>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a54      	ldr	r2, [pc, #336]	@ (80058b8 <HAL_DMA_IRQHandler+0x430>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d004      	beq.n	8005776 <HAL_DMA_IRQHandler+0x2ee>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a52      	ldr	r2, [pc, #328]	@ (80058bc <HAL_DMA_IRQHandler+0x434>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d10a      	bne.n	800578c <HAL_DMA_IRQHandler+0x304>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	695b      	ldr	r3, [r3, #20]
 800577c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005780:	2b00      	cmp	r3, #0
 8005782:	bf14      	ite	ne
 8005784:	2301      	movne	r3, #1
 8005786:	2300      	moveq	r3, #0
 8005788:	b2db      	uxtb	r3, r3
 800578a:	e003      	b.n	8005794 <HAL_DMA_IRQHandler+0x30c>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	2300      	movs	r3, #0
 8005794:	2b00      	cmp	r3, #0
 8005796:	d00d      	beq.n	80057b4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800579c:	f003 031f 	and.w	r3, r3, #31
 80057a0:	2201      	movs	r2, #1
 80057a2:	409a      	lsls	r2, r3
 80057a4:	6a3b      	ldr	r3, [r7, #32]
 80057a6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057ac:	f043 0202 	orr.w	r2, r3, #2
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057b8:	f003 031f 	and.w	r3, r3, #31
 80057bc:	2204      	movs	r2, #4
 80057be:	409a      	lsls	r2, r3
 80057c0:	69bb      	ldr	r3, [r7, #24]
 80057c2:	4013      	ands	r3, r2
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	f000 808f 	beq.w	80058e8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a2c      	ldr	r2, [pc, #176]	@ (8005880 <HAL_DMA_IRQHandler+0x3f8>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d04a      	beq.n	800586a <HAL_DMA_IRQHandler+0x3e2>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4a2a      	ldr	r2, [pc, #168]	@ (8005884 <HAL_DMA_IRQHandler+0x3fc>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d045      	beq.n	800586a <HAL_DMA_IRQHandler+0x3e2>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4a29      	ldr	r2, [pc, #164]	@ (8005888 <HAL_DMA_IRQHandler+0x400>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d040      	beq.n	800586a <HAL_DMA_IRQHandler+0x3e2>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a27      	ldr	r2, [pc, #156]	@ (800588c <HAL_DMA_IRQHandler+0x404>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d03b      	beq.n	800586a <HAL_DMA_IRQHandler+0x3e2>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4a26      	ldr	r2, [pc, #152]	@ (8005890 <HAL_DMA_IRQHandler+0x408>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d036      	beq.n	800586a <HAL_DMA_IRQHandler+0x3e2>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4a24      	ldr	r2, [pc, #144]	@ (8005894 <HAL_DMA_IRQHandler+0x40c>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d031      	beq.n	800586a <HAL_DMA_IRQHandler+0x3e2>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4a23      	ldr	r2, [pc, #140]	@ (8005898 <HAL_DMA_IRQHandler+0x410>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d02c      	beq.n	800586a <HAL_DMA_IRQHandler+0x3e2>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a21      	ldr	r2, [pc, #132]	@ (800589c <HAL_DMA_IRQHandler+0x414>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d027      	beq.n	800586a <HAL_DMA_IRQHandler+0x3e2>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a20      	ldr	r2, [pc, #128]	@ (80058a0 <HAL_DMA_IRQHandler+0x418>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d022      	beq.n	800586a <HAL_DMA_IRQHandler+0x3e2>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a1e      	ldr	r2, [pc, #120]	@ (80058a4 <HAL_DMA_IRQHandler+0x41c>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d01d      	beq.n	800586a <HAL_DMA_IRQHandler+0x3e2>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a1d      	ldr	r2, [pc, #116]	@ (80058a8 <HAL_DMA_IRQHandler+0x420>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d018      	beq.n	800586a <HAL_DMA_IRQHandler+0x3e2>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a1b      	ldr	r2, [pc, #108]	@ (80058ac <HAL_DMA_IRQHandler+0x424>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d013      	beq.n	800586a <HAL_DMA_IRQHandler+0x3e2>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a1a      	ldr	r2, [pc, #104]	@ (80058b0 <HAL_DMA_IRQHandler+0x428>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d00e      	beq.n	800586a <HAL_DMA_IRQHandler+0x3e2>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a18      	ldr	r2, [pc, #96]	@ (80058b4 <HAL_DMA_IRQHandler+0x42c>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d009      	beq.n	800586a <HAL_DMA_IRQHandler+0x3e2>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4a17      	ldr	r2, [pc, #92]	@ (80058b8 <HAL_DMA_IRQHandler+0x430>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d004      	beq.n	800586a <HAL_DMA_IRQHandler+0x3e2>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a15      	ldr	r2, [pc, #84]	@ (80058bc <HAL_DMA_IRQHandler+0x434>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d12a      	bne.n	80058c0 <HAL_DMA_IRQHandler+0x438>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f003 0302 	and.w	r3, r3, #2
 8005874:	2b00      	cmp	r3, #0
 8005876:	bf14      	ite	ne
 8005878:	2301      	movne	r3, #1
 800587a:	2300      	moveq	r3, #0
 800587c:	b2db      	uxtb	r3, r3
 800587e:	e023      	b.n	80058c8 <HAL_DMA_IRQHandler+0x440>
 8005880:	40020010 	.word	0x40020010
 8005884:	40020028 	.word	0x40020028
 8005888:	40020040 	.word	0x40020040
 800588c:	40020058 	.word	0x40020058
 8005890:	40020070 	.word	0x40020070
 8005894:	40020088 	.word	0x40020088
 8005898:	400200a0 	.word	0x400200a0
 800589c:	400200b8 	.word	0x400200b8
 80058a0:	40020410 	.word	0x40020410
 80058a4:	40020428 	.word	0x40020428
 80058a8:	40020440 	.word	0x40020440
 80058ac:	40020458 	.word	0x40020458
 80058b0:	40020470 	.word	0x40020470
 80058b4:	40020488 	.word	0x40020488
 80058b8:	400204a0 	.word	0x400204a0
 80058bc:	400204b8 	.word	0x400204b8
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	2300      	movs	r3, #0
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d00d      	beq.n	80058e8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058d0:	f003 031f 	and.w	r3, r3, #31
 80058d4:	2204      	movs	r2, #4
 80058d6:	409a      	lsls	r2, r3
 80058d8:	6a3b      	ldr	r3, [r7, #32]
 80058da:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058e0:	f043 0204 	orr.w	r2, r3, #4
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058ec:	f003 031f 	and.w	r3, r3, #31
 80058f0:	2210      	movs	r2, #16
 80058f2:	409a      	lsls	r2, r3
 80058f4:	69bb      	ldr	r3, [r7, #24]
 80058f6:	4013      	ands	r3, r2
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	f000 80a6 	beq.w	8005a4a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a85      	ldr	r2, [pc, #532]	@ (8005b18 <HAL_DMA_IRQHandler+0x690>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d04a      	beq.n	800599e <HAL_DMA_IRQHandler+0x516>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a83      	ldr	r2, [pc, #524]	@ (8005b1c <HAL_DMA_IRQHandler+0x694>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d045      	beq.n	800599e <HAL_DMA_IRQHandler+0x516>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a82      	ldr	r2, [pc, #520]	@ (8005b20 <HAL_DMA_IRQHandler+0x698>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d040      	beq.n	800599e <HAL_DMA_IRQHandler+0x516>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a80      	ldr	r2, [pc, #512]	@ (8005b24 <HAL_DMA_IRQHandler+0x69c>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d03b      	beq.n	800599e <HAL_DMA_IRQHandler+0x516>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a7f      	ldr	r2, [pc, #508]	@ (8005b28 <HAL_DMA_IRQHandler+0x6a0>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d036      	beq.n	800599e <HAL_DMA_IRQHandler+0x516>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a7d      	ldr	r2, [pc, #500]	@ (8005b2c <HAL_DMA_IRQHandler+0x6a4>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d031      	beq.n	800599e <HAL_DMA_IRQHandler+0x516>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4a7c      	ldr	r2, [pc, #496]	@ (8005b30 <HAL_DMA_IRQHandler+0x6a8>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d02c      	beq.n	800599e <HAL_DMA_IRQHandler+0x516>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a7a      	ldr	r2, [pc, #488]	@ (8005b34 <HAL_DMA_IRQHandler+0x6ac>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d027      	beq.n	800599e <HAL_DMA_IRQHandler+0x516>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a79      	ldr	r2, [pc, #484]	@ (8005b38 <HAL_DMA_IRQHandler+0x6b0>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d022      	beq.n	800599e <HAL_DMA_IRQHandler+0x516>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a77      	ldr	r2, [pc, #476]	@ (8005b3c <HAL_DMA_IRQHandler+0x6b4>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d01d      	beq.n	800599e <HAL_DMA_IRQHandler+0x516>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a76      	ldr	r2, [pc, #472]	@ (8005b40 <HAL_DMA_IRQHandler+0x6b8>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d018      	beq.n	800599e <HAL_DMA_IRQHandler+0x516>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a74      	ldr	r2, [pc, #464]	@ (8005b44 <HAL_DMA_IRQHandler+0x6bc>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d013      	beq.n	800599e <HAL_DMA_IRQHandler+0x516>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a73      	ldr	r2, [pc, #460]	@ (8005b48 <HAL_DMA_IRQHandler+0x6c0>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d00e      	beq.n	800599e <HAL_DMA_IRQHandler+0x516>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a71      	ldr	r2, [pc, #452]	@ (8005b4c <HAL_DMA_IRQHandler+0x6c4>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d009      	beq.n	800599e <HAL_DMA_IRQHandler+0x516>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a70      	ldr	r2, [pc, #448]	@ (8005b50 <HAL_DMA_IRQHandler+0x6c8>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d004      	beq.n	800599e <HAL_DMA_IRQHandler+0x516>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4a6e      	ldr	r2, [pc, #440]	@ (8005b54 <HAL_DMA_IRQHandler+0x6cc>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d10a      	bne.n	80059b4 <HAL_DMA_IRQHandler+0x52c>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f003 0308 	and.w	r3, r3, #8
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	bf14      	ite	ne
 80059ac:	2301      	movne	r3, #1
 80059ae:	2300      	moveq	r3, #0
 80059b0:	b2db      	uxtb	r3, r3
 80059b2:	e009      	b.n	80059c8 <HAL_DMA_IRQHandler+0x540>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f003 0304 	and.w	r3, r3, #4
 80059be:	2b00      	cmp	r3, #0
 80059c0:	bf14      	ite	ne
 80059c2:	2301      	movne	r3, #1
 80059c4:	2300      	moveq	r3, #0
 80059c6:	b2db      	uxtb	r3, r3
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d03e      	beq.n	8005a4a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059d0:	f003 031f 	and.w	r3, r3, #31
 80059d4:	2210      	movs	r2, #16
 80059d6:	409a      	lsls	r2, r3
 80059d8:	6a3b      	ldr	r3, [r7, #32]
 80059da:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d018      	beq.n	8005a1c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d108      	bne.n	8005a0a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d024      	beq.n	8005a4a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a04:	6878      	ldr	r0, [r7, #4]
 8005a06:	4798      	blx	r3
 8005a08:	e01f      	b.n	8005a4a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d01b      	beq.n	8005a4a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	4798      	blx	r3
 8005a1a:	e016      	b.n	8005a4a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d107      	bne.n	8005a3a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	681a      	ldr	r2, [r3, #0]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f022 0208 	bic.w	r2, r2, #8
 8005a38:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d003      	beq.n	8005a4a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a46:	6878      	ldr	r0, [r7, #4]
 8005a48:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a4e:	f003 031f 	and.w	r3, r3, #31
 8005a52:	2220      	movs	r2, #32
 8005a54:	409a      	lsls	r2, r3
 8005a56:	69bb      	ldr	r3, [r7, #24]
 8005a58:	4013      	ands	r3, r2
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	f000 8110 	beq.w	8005c80 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a2c      	ldr	r2, [pc, #176]	@ (8005b18 <HAL_DMA_IRQHandler+0x690>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d04a      	beq.n	8005b00 <HAL_DMA_IRQHandler+0x678>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4a2b      	ldr	r2, [pc, #172]	@ (8005b1c <HAL_DMA_IRQHandler+0x694>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d045      	beq.n	8005b00 <HAL_DMA_IRQHandler+0x678>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4a29      	ldr	r2, [pc, #164]	@ (8005b20 <HAL_DMA_IRQHandler+0x698>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d040      	beq.n	8005b00 <HAL_DMA_IRQHandler+0x678>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4a28      	ldr	r2, [pc, #160]	@ (8005b24 <HAL_DMA_IRQHandler+0x69c>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d03b      	beq.n	8005b00 <HAL_DMA_IRQHandler+0x678>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4a26      	ldr	r2, [pc, #152]	@ (8005b28 <HAL_DMA_IRQHandler+0x6a0>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d036      	beq.n	8005b00 <HAL_DMA_IRQHandler+0x678>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4a25      	ldr	r2, [pc, #148]	@ (8005b2c <HAL_DMA_IRQHandler+0x6a4>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d031      	beq.n	8005b00 <HAL_DMA_IRQHandler+0x678>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4a23      	ldr	r2, [pc, #140]	@ (8005b30 <HAL_DMA_IRQHandler+0x6a8>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d02c      	beq.n	8005b00 <HAL_DMA_IRQHandler+0x678>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4a22      	ldr	r2, [pc, #136]	@ (8005b34 <HAL_DMA_IRQHandler+0x6ac>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d027      	beq.n	8005b00 <HAL_DMA_IRQHandler+0x678>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4a20      	ldr	r2, [pc, #128]	@ (8005b38 <HAL_DMA_IRQHandler+0x6b0>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d022      	beq.n	8005b00 <HAL_DMA_IRQHandler+0x678>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4a1f      	ldr	r2, [pc, #124]	@ (8005b3c <HAL_DMA_IRQHandler+0x6b4>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d01d      	beq.n	8005b00 <HAL_DMA_IRQHandler+0x678>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a1d      	ldr	r2, [pc, #116]	@ (8005b40 <HAL_DMA_IRQHandler+0x6b8>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d018      	beq.n	8005b00 <HAL_DMA_IRQHandler+0x678>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4a1c      	ldr	r2, [pc, #112]	@ (8005b44 <HAL_DMA_IRQHandler+0x6bc>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d013      	beq.n	8005b00 <HAL_DMA_IRQHandler+0x678>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4a1a      	ldr	r2, [pc, #104]	@ (8005b48 <HAL_DMA_IRQHandler+0x6c0>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d00e      	beq.n	8005b00 <HAL_DMA_IRQHandler+0x678>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4a19      	ldr	r2, [pc, #100]	@ (8005b4c <HAL_DMA_IRQHandler+0x6c4>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d009      	beq.n	8005b00 <HAL_DMA_IRQHandler+0x678>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4a17      	ldr	r2, [pc, #92]	@ (8005b50 <HAL_DMA_IRQHandler+0x6c8>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d004      	beq.n	8005b00 <HAL_DMA_IRQHandler+0x678>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4a16      	ldr	r2, [pc, #88]	@ (8005b54 <HAL_DMA_IRQHandler+0x6cc>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d12b      	bne.n	8005b58 <HAL_DMA_IRQHandler+0x6d0>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f003 0310 	and.w	r3, r3, #16
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	bf14      	ite	ne
 8005b0e:	2301      	movne	r3, #1
 8005b10:	2300      	moveq	r3, #0
 8005b12:	b2db      	uxtb	r3, r3
 8005b14:	e02a      	b.n	8005b6c <HAL_DMA_IRQHandler+0x6e4>
 8005b16:	bf00      	nop
 8005b18:	40020010 	.word	0x40020010
 8005b1c:	40020028 	.word	0x40020028
 8005b20:	40020040 	.word	0x40020040
 8005b24:	40020058 	.word	0x40020058
 8005b28:	40020070 	.word	0x40020070
 8005b2c:	40020088 	.word	0x40020088
 8005b30:	400200a0 	.word	0x400200a0
 8005b34:	400200b8 	.word	0x400200b8
 8005b38:	40020410 	.word	0x40020410
 8005b3c:	40020428 	.word	0x40020428
 8005b40:	40020440 	.word	0x40020440
 8005b44:	40020458 	.word	0x40020458
 8005b48:	40020470 	.word	0x40020470
 8005b4c:	40020488 	.word	0x40020488
 8005b50:	400204a0 	.word	0x400204a0
 8005b54:	400204b8 	.word	0x400204b8
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f003 0302 	and.w	r3, r3, #2
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	bf14      	ite	ne
 8005b66:	2301      	movne	r3, #1
 8005b68:	2300      	moveq	r3, #0
 8005b6a:	b2db      	uxtb	r3, r3
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	f000 8087 	beq.w	8005c80 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b76:	f003 031f 	and.w	r3, r3, #31
 8005b7a:	2220      	movs	r2, #32
 8005b7c:	409a      	lsls	r2, r3
 8005b7e:	6a3b      	ldr	r3, [r7, #32]
 8005b80:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005b88:	b2db      	uxtb	r3, r3
 8005b8a:	2b04      	cmp	r3, #4
 8005b8c:	d139      	bne.n	8005c02 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	681a      	ldr	r2, [r3, #0]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f022 0216 	bic.w	r2, r2, #22
 8005b9c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	695a      	ldr	r2, [r3, #20]
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005bac:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d103      	bne.n	8005bbe <HAL_DMA_IRQHandler+0x736>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d007      	beq.n	8005bce <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	681a      	ldr	r2, [r3, #0]
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f022 0208 	bic.w	r2, r2, #8
 8005bcc:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bd2:	f003 031f 	and.w	r3, r3, #31
 8005bd6:	223f      	movs	r2, #63	@ 0x3f
 8005bd8:	409a      	lsls	r2, r3
 8005bda:	6a3b      	ldr	r3, [r7, #32]
 8005bdc:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2201      	movs	r2, #1
 8005be2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2200      	movs	r2, #0
 8005bea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	f000 834a 	beq.w	800628c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005bfc:	6878      	ldr	r0, [r7, #4]
 8005bfe:	4798      	blx	r3
          }
          return;
 8005c00:	e344      	b.n	800628c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d018      	beq.n	8005c42 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d108      	bne.n	8005c30 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d02c      	beq.n	8005c80 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	4798      	blx	r3
 8005c2e:	e027      	b.n	8005c80 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d023      	beq.n	8005c80 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c3c:	6878      	ldr	r0, [r7, #4]
 8005c3e:	4798      	blx	r3
 8005c40:	e01e      	b.n	8005c80 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d10f      	bne.n	8005c70 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	681a      	ldr	r2, [r3, #0]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f022 0210 	bic.w	r2, r2, #16
 8005c5e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2201      	movs	r2, #1
 8005c64:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d003      	beq.n	8005c80 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	f000 8306 	beq.w	8006296 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c8e:	f003 0301 	and.w	r3, r3, #1
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	f000 8088 	beq.w	8005da8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2204      	movs	r2, #4
 8005c9c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4a7a      	ldr	r2, [pc, #488]	@ (8005e90 <HAL_DMA_IRQHandler+0xa08>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d04a      	beq.n	8005d40 <HAL_DMA_IRQHandler+0x8b8>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4a79      	ldr	r2, [pc, #484]	@ (8005e94 <HAL_DMA_IRQHandler+0xa0c>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d045      	beq.n	8005d40 <HAL_DMA_IRQHandler+0x8b8>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4a77      	ldr	r2, [pc, #476]	@ (8005e98 <HAL_DMA_IRQHandler+0xa10>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d040      	beq.n	8005d40 <HAL_DMA_IRQHandler+0x8b8>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4a76      	ldr	r2, [pc, #472]	@ (8005e9c <HAL_DMA_IRQHandler+0xa14>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d03b      	beq.n	8005d40 <HAL_DMA_IRQHandler+0x8b8>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4a74      	ldr	r2, [pc, #464]	@ (8005ea0 <HAL_DMA_IRQHandler+0xa18>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d036      	beq.n	8005d40 <HAL_DMA_IRQHandler+0x8b8>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	4a73      	ldr	r2, [pc, #460]	@ (8005ea4 <HAL_DMA_IRQHandler+0xa1c>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d031      	beq.n	8005d40 <HAL_DMA_IRQHandler+0x8b8>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a71      	ldr	r2, [pc, #452]	@ (8005ea8 <HAL_DMA_IRQHandler+0xa20>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d02c      	beq.n	8005d40 <HAL_DMA_IRQHandler+0x8b8>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4a70      	ldr	r2, [pc, #448]	@ (8005eac <HAL_DMA_IRQHandler+0xa24>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d027      	beq.n	8005d40 <HAL_DMA_IRQHandler+0x8b8>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4a6e      	ldr	r2, [pc, #440]	@ (8005eb0 <HAL_DMA_IRQHandler+0xa28>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d022      	beq.n	8005d40 <HAL_DMA_IRQHandler+0x8b8>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4a6d      	ldr	r2, [pc, #436]	@ (8005eb4 <HAL_DMA_IRQHandler+0xa2c>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d01d      	beq.n	8005d40 <HAL_DMA_IRQHandler+0x8b8>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4a6b      	ldr	r2, [pc, #428]	@ (8005eb8 <HAL_DMA_IRQHandler+0xa30>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d018      	beq.n	8005d40 <HAL_DMA_IRQHandler+0x8b8>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	4a6a      	ldr	r2, [pc, #424]	@ (8005ebc <HAL_DMA_IRQHandler+0xa34>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d013      	beq.n	8005d40 <HAL_DMA_IRQHandler+0x8b8>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a68      	ldr	r2, [pc, #416]	@ (8005ec0 <HAL_DMA_IRQHandler+0xa38>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d00e      	beq.n	8005d40 <HAL_DMA_IRQHandler+0x8b8>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4a67      	ldr	r2, [pc, #412]	@ (8005ec4 <HAL_DMA_IRQHandler+0xa3c>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d009      	beq.n	8005d40 <HAL_DMA_IRQHandler+0x8b8>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a65      	ldr	r2, [pc, #404]	@ (8005ec8 <HAL_DMA_IRQHandler+0xa40>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d004      	beq.n	8005d40 <HAL_DMA_IRQHandler+0x8b8>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4a64      	ldr	r2, [pc, #400]	@ (8005ecc <HAL_DMA_IRQHandler+0xa44>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d108      	bne.n	8005d52 <HAL_DMA_IRQHandler+0x8ca>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	681a      	ldr	r2, [r3, #0]
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f022 0201 	bic.w	r2, r2, #1
 8005d4e:	601a      	str	r2, [r3, #0]
 8005d50:	e007      	b.n	8005d62 <HAL_DMA_IRQHandler+0x8da>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	681a      	ldr	r2, [r3, #0]
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f022 0201 	bic.w	r2, r2, #1
 8005d60:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	3301      	adds	r3, #1
 8005d66:	60fb      	str	r3, [r7, #12]
 8005d68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d6a:	429a      	cmp	r2, r3
 8005d6c:	d307      	bcc.n	8005d7e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f003 0301 	and.w	r3, r3, #1
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d1f2      	bne.n	8005d62 <HAL_DMA_IRQHandler+0x8da>
 8005d7c:	e000      	b.n	8005d80 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8005d7e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f003 0301 	and.w	r3, r3, #1
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d004      	beq.n	8005d98 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2203      	movs	r2, #3
 8005d92:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8005d96:	e003      	b.n	8005da0 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2201      	movs	r2, #1
 8005d9c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2200      	movs	r2, #0
 8005da4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	f000 8272 	beq.w	8006296 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	4798      	blx	r3
 8005dba:	e26c      	b.n	8006296 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a43      	ldr	r2, [pc, #268]	@ (8005ed0 <HAL_DMA_IRQHandler+0xa48>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d022      	beq.n	8005e0c <HAL_DMA_IRQHandler+0x984>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a42      	ldr	r2, [pc, #264]	@ (8005ed4 <HAL_DMA_IRQHandler+0xa4c>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d01d      	beq.n	8005e0c <HAL_DMA_IRQHandler+0x984>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a40      	ldr	r2, [pc, #256]	@ (8005ed8 <HAL_DMA_IRQHandler+0xa50>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d018      	beq.n	8005e0c <HAL_DMA_IRQHandler+0x984>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4a3f      	ldr	r2, [pc, #252]	@ (8005edc <HAL_DMA_IRQHandler+0xa54>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d013      	beq.n	8005e0c <HAL_DMA_IRQHandler+0x984>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a3d      	ldr	r2, [pc, #244]	@ (8005ee0 <HAL_DMA_IRQHandler+0xa58>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d00e      	beq.n	8005e0c <HAL_DMA_IRQHandler+0x984>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4a3c      	ldr	r2, [pc, #240]	@ (8005ee4 <HAL_DMA_IRQHandler+0xa5c>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d009      	beq.n	8005e0c <HAL_DMA_IRQHandler+0x984>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a3a      	ldr	r2, [pc, #232]	@ (8005ee8 <HAL_DMA_IRQHandler+0xa60>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d004      	beq.n	8005e0c <HAL_DMA_IRQHandler+0x984>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a39      	ldr	r2, [pc, #228]	@ (8005eec <HAL_DMA_IRQHandler+0xa64>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d101      	bne.n	8005e10 <HAL_DMA_IRQHandler+0x988>
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	e000      	b.n	8005e12 <HAL_DMA_IRQHandler+0x98a>
 8005e10:	2300      	movs	r3, #0
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	f000 823f 	beq.w	8006296 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e24:	f003 031f 	and.w	r3, r3, #31
 8005e28:	2204      	movs	r2, #4
 8005e2a:	409a      	lsls	r2, r3
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	4013      	ands	r3, r2
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	f000 80cd 	beq.w	8005fd0 <HAL_DMA_IRQHandler+0xb48>
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	f003 0304 	and.w	r3, r3, #4
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	f000 80c7 	beq.w	8005fd0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e46:	f003 031f 	and.w	r3, r3, #31
 8005e4a:	2204      	movs	r2, #4
 8005e4c:	409a      	lsls	r2, r3
 8005e4e:	69fb      	ldr	r3, [r7, #28]
 8005e50:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d049      	beq.n	8005ef0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005e5c:	693b      	ldr	r3, [r7, #16]
 8005e5e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d109      	bne.n	8005e7a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	f000 8210 	beq.w	8006290 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e74:	6878      	ldr	r0, [r7, #4]
 8005e76:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005e78:	e20a      	b.n	8006290 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	f000 8206 	beq.w	8006290 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e88:	6878      	ldr	r0, [r7, #4]
 8005e8a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005e8c:	e200      	b.n	8006290 <HAL_DMA_IRQHandler+0xe08>
 8005e8e:	bf00      	nop
 8005e90:	40020010 	.word	0x40020010
 8005e94:	40020028 	.word	0x40020028
 8005e98:	40020040 	.word	0x40020040
 8005e9c:	40020058 	.word	0x40020058
 8005ea0:	40020070 	.word	0x40020070
 8005ea4:	40020088 	.word	0x40020088
 8005ea8:	400200a0 	.word	0x400200a0
 8005eac:	400200b8 	.word	0x400200b8
 8005eb0:	40020410 	.word	0x40020410
 8005eb4:	40020428 	.word	0x40020428
 8005eb8:	40020440 	.word	0x40020440
 8005ebc:	40020458 	.word	0x40020458
 8005ec0:	40020470 	.word	0x40020470
 8005ec4:	40020488 	.word	0x40020488
 8005ec8:	400204a0 	.word	0x400204a0
 8005ecc:	400204b8 	.word	0x400204b8
 8005ed0:	58025408 	.word	0x58025408
 8005ed4:	5802541c 	.word	0x5802541c
 8005ed8:	58025430 	.word	0x58025430
 8005edc:	58025444 	.word	0x58025444
 8005ee0:	58025458 	.word	0x58025458
 8005ee4:	5802546c 	.word	0x5802546c
 8005ee8:	58025480 	.word	0x58025480
 8005eec:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005ef0:	693b      	ldr	r3, [r7, #16]
 8005ef2:	f003 0320 	and.w	r3, r3, #32
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d160      	bne.n	8005fbc <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a7f      	ldr	r2, [pc, #508]	@ (80060fc <HAL_DMA_IRQHandler+0xc74>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d04a      	beq.n	8005f9a <HAL_DMA_IRQHandler+0xb12>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a7d      	ldr	r2, [pc, #500]	@ (8006100 <HAL_DMA_IRQHandler+0xc78>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d045      	beq.n	8005f9a <HAL_DMA_IRQHandler+0xb12>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4a7c      	ldr	r2, [pc, #496]	@ (8006104 <HAL_DMA_IRQHandler+0xc7c>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d040      	beq.n	8005f9a <HAL_DMA_IRQHandler+0xb12>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a7a      	ldr	r2, [pc, #488]	@ (8006108 <HAL_DMA_IRQHandler+0xc80>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d03b      	beq.n	8005f9a <HAL_DMA_IRQHandler+0xb12>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4a79      	ldr	r2, [pc, #484]	@ (800610c <HAL_DMA_IRQHandler+0xc84>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d036      	beq.n	8005f9a <HAL_DMA_IRQHandler+0xb12>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4a77      	ldr	r2, [pc, #476]	@ (8006110 <HAL_DMA_IRQHandler+0xc88>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d031      	beq.n	8005f9a <HAL_DMA_IRQHandler+0xb12>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4a76      	ldr	r2, [pc, #472]	@ (8006114 <HAL_DMA_IRQHandler+0xc8c>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d02c      	beq.n	8005f9a <HAL_DMA_IRQHandler+0xb12>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4a74      	ldr	r2, [pc, #464]	@ (8006118 <HAL_DMA_IRQHandler+0xc90>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d027      	beq.n	8005f9a <HAL_DMA_IRQHandler+0xb12>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4a73      	ldr	r2, [pc, #460]	@ (800611c <HAL_DMA_IRQHandler+0xc94>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d022      	beq.n	8005f9a <HAL_DMA_IRQHandler+0xb12>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4a71      	ldr	r2, [pc, #452]	@ (8006120 <HAL_DMA_IRQHandler+0xc98>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d01d      	beq.n	8005f9a <HAL_DMA_IRQHandler+0xb12>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4a70      	ldr	r2, [pc, #448]	@ (8006124 <HAL_DMA_IRQHandler+0xc9c>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d018      	beq.n	8005f9a <HAL_DMA_IRQHandler+0xb12>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4a6e      	ldr	r2, [pc, #440]	@ (8006128 <HAL_DMA_IRQHandler+0xca0>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d013      	beq.n	8005f9a <HAL_DMA_IRQHandler+0xb12>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	4a6d      	ldr	r2, [pc, #436]	@ (800612c <HAL_DMA_IRQHandler+0xca4>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d00e      	beq.n	8005f9a <HAL_DMA_IRQHandler+0xb12>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4a6b      	ldr	r2, [pc, #428]	@ (8006130 <HAL_DMA_IRQHandler+0xca8>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d009      	beq.n	8005f9a <HAL_DMA_IRQHandler+0xb12>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4a6a      	ldr	r2, [pc, #424]	@ (8006134 <HAL_DMA_IRQHandler+0xcac>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d004      	beq.n	8005f9a <HAL_DMA_IRQHandler+0xb12>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4a68      	ldr	r2, [pc, #416]	@ (8006138 <HAL_DMA_IRQHandler+0xcb0>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d108      	bne.n	8005fac <HAL_DMA_IRQHandler+0xb24>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	681a      	ldr	r2, [r3, #0]
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f022 0208 	bic.w	r2, r2, #8
 8005fa8:	601a      	str	r2, [r3, #0]
 8005faa:	e007      	b.n	8005fbc <HAL_DMA_IRQHandler+0xb34>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	681a      	ldr	r2, [r3, #0]
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f022 0204 	bic.w	r2, r2, #4
 8005fba:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	f000 8165 	beq.w	8006290 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fca:	6878      	ldr	r0, [r7, #4]
 8005fcc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005fce:	e15f      	b.n	8006290 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005fd4:	f003 031f 	and.w	r3, r3, #31
 8005fd8:	2202      	movs	r2, #2
 8005fda:	409a      	lsls	r2, r3
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	4013      	ands	r3, r2
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	f000 80c5 	beq.w	8006170 <HAL_DMA_IRQHandler+0xce8>
 8005fe6:	693b      	ldr	r3, [r7, #16]
 8005fe8:	f003 0302 	and.w	r3, r3, #2
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	f000 80bf 	beq.w	8006170 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ff6:	f003 031f 	and.w	r3, r3, #31
 8005ffa:	2202      	movs	r2, #2
 8005ffc:	409a      	lsls	r2, r3
 8005ffe:	69fb      	ldr	r3, [r7, #28]
 8006000:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006002:	693b      	ldr	r3, [r7, #16]
 8006004:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006008:	2b00      	cmp	r3, #0
 800600a:	d018      	beq.n	800603e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800600c:	693b      	ldr	r3, [r7, #16]
 800600e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006012:	2b00      	cmp	r3, #0
 8006014:	d109      	bne.n	800602a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800601a:	2b00      	cmp	r3, #0
 800601c:	f000 813a 	beq.w	8006294 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006024:	6878      	ldr	r0, [r7, #4]
 8006026:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006028:	e134      	b.n	8006294 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800602e:	2b00      	cmp	r3, #0
 8006030:	f000 8130 	beq.w	8006294 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006038:	6878      	ldr	r0, [r7, #4]
 800603a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800603c:	e12a      	b.n	8006294 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800603e:	693b      	ldr	r3, [r7, #16]
 8006040:	f003 0320 	and.w	r3, r3, #32
 8006044:	2b00      	cmp	r3, #0
 8006046:	f040 8089 	bne.w	800615c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4a2b      	ldr	r2, [pc, #172]	@ (80060fc <HAL_DMA_IRQHandler+0xc74>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d04a      	beq.n	80060ea <HAL_DMA_IRQHandler+0xc62>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4a29      	ldr	r2, [pc, #164]	@ (8006100 <HAL_DMA_IRQHandler+0xc78>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d045      	beq.n	80060ea <HAL_DMA_IRQHandler+0xc62>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4a28      	ldr	r2, [pc, #160]	@ (8006104 <HAL_DMA_IRQHandler+0xc7c>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d040      	beq.n	80060ea <HAL_DMA_IRQHandler+0xc62>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4a26      	ldr	r2, [pc, #152]	@ (8006108 <HAL_DMA_IRQHandler+0xc80>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d03b      	beq.n	80060ea <HAL_DMA_IRQHandler+0xc62>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4a25      	ldr	r2, [pc, #148]	@ (800610c <HAL_DMA_IRQHandler+0xc84>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d036      	beq.n	80060ea <HAL_DMA_IRQHandler+0xc62>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4a23      	ldr	r2, [pc, #140]	@ (8006110 <HAL_DMA_IRQHandler+0xc88>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d031      	beq.n	80060ea <HAL_DMA_IRQHandler+0xc62>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4a22      	ldr	r2, [pc, #136]	@ (8006114 <HAL_DMA_IRQHandler+0xc8c>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d02c      	beq.n	80060ea <HAL_DMA_IRQHandler+0xc62>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4a20      	ldr	r2, [pc, #128]	@ (8006118 <HAL_DMA_IRQHandler+0xc90>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d027      	beq.n	80060ea <HAL_DMA_IRQHandler+0xc62>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4a1f      	ldr	r2, [pc, #124]	@ (800611c <HAL_DMA_IRQHandler+0xc94>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d022      	beq.n	80060ea <HAL_DMA_IRQHandler+0xc62>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4a1d      	ldr	r2, [pc, #116]	@ (8006120 <HAL_DMA_IRQHandler+0xc98>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d01d      	beq.n	80060ea <HAL_DMA_IRQHandler+0xc62>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	4a1c      	ldr	r2, [pc, #112]	@ (8006124 <HAL_DMA_IRQHandler+0xc9c>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d018      	beq.n	80060ea <HAL_DMA_IRQHandler+0xc62>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4a1a      	ldr	r2, [pc, #104]	@ (8006128 <HAL_DMA_IRQHandler+0xca0>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d013      	beq.n	80060ea <HAL_DMA_IRQHandler+0xc62>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	4a19      	ldr	r2, [pc, #100]	@ (800612c <HAL_DMA_IRQHandler+0xca4>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d00e      	beq.n	80060ea <HAL_DMA_IRQHandler+0xc62>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4a17      	ldr	r2, [pc, #92]	@ (8006130 <HAL_DMA_IRQHandler+0xca8>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d009      	beq.n	80060ea <HAL_DMA_IRQHandler+0xc62>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4a16      	ldr	r2, [pc, #88]	@ (8006134 <HAL_DMA_IRQHandler+0xcac>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d004      	beq.n	80060ea <HAL_DMA_IRQHandler+0xc62>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4a14      	ldr	r2, [pc, #80]	@ (8006138 <HAL_DMA_IRQHandler+0xcb0>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d128      	bne.n	800613c <HAL_DMA_IRQHandler+0xcb4>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	681a      	ldr	r2, [r3, #0]
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f022 0214 	bic.w	r2, r2, #20
 80060f8:	601a      	str	r2, [r3, #0]
 80060fa:	e027      	b.n	800614c <HAL_DMA_IRQHandler+0xcc4>
 80060fc:	40020010 	.word	0x40020010
 8006100:	40020028 	.word	0x40020028
 8006104:	40020040 	.word	0x40020040
 8006108:	40020058 	.word	0x40020058
 800610c:	40020070 	.word	0x40020070
 8006110:	40020088 	.word	0x40020088
 8006114:	400200a0 	.word	0x400200a0
 8006118:	400200b8 	.word	0x400200b8
 800611c:	40020410 	.word	0x40020410
 8006120:	40020428 	.word	0x40020428
 8006124:	40020440 	.word	0x40020440
 8006128:	40020458 	.word	0x40020458
 800612c:	40020470 	.word	0x40020470
 8006130:	40020488 	.word	0x40020488
 8006134:	400204a0 	.word	0x400204a0
 8006138:	400204b8 	.word	0x400204b8
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	681a      	ldr	r2, [r3, #0]
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f022 020a 	bic.w	r2, r2, #10
 800614a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2201      	movs	r2, #1
 8006150:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2200      	movs	r2, #0
 8006158:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006160:	2b00      	cmp	r3, #0
 8006162:	f000 8097 	beq.w	8006294 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800616e:	e091      	b.n	8006294 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006174:	f003 031f 	and.w	r3, r3, #31
 8006178:	2208      	movs	r2, #8
 800617a:	409a      	lsls	r2, r3
 800617c:	697b      	ldr	r3, [r7, #20]
 800617e:	4013      	ands	r3, r2
 8006180:	2b00      	cmp	r3, #0
 8006182:	f000 8088 	beq.w	8006296 <HAL_DMA_IRQHandler+0xe0e>
 8006186:	693b      	ldr	r3, [r7, #16]
 8006188:	f003 0308 	and.w	r3, r3, #8
 800618c:	2b00      	cmp	r3, #0
 800618e:	f000 8082 	beq.w	8006296 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4a41      	ldr	r2, [pc, #260]	@ (800629c <HAL_DMA_IRQHandler+0xe14>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d04a      	beq.n	8006232 <HAL_DMA_IRQHandler+0xdaa>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4a3f      	ldr	r2, [pc, #252]	@ (80062a0 <HAL_DMA_IRQHandler+0xe18>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d045      	beq.n	8006232 <HAL_DMA_IRQHandler+0xdaa>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a3e      	ldr	r2, [pc, #248]	@ (80062a4 <HAL_DMA_IRQHandler+0xe1c>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d040      	beq.n	8006232 <HAL_DMA_IRQHandler+0xdaa>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4a3c      	ldr	r2, [pc, #240]	@ (80062a8 <HAL_DMA_IRQHandler+0xe20>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d03b      	beq.n	8006232 <HAL_DMA_IRQHandler+0xdaa>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4a3b      	ldr	r2, [pc, #236]	@ (80062ac <HAL_DMA_IRQHandler+0xe24>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d036      	beq.n	8006232 <HAL_DMA_IRQHandler+0xdaa>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4a39      	ldr	r2, [pc, #228]	@ (80062b0 <HAL_DMA_IRQHandler+0xe28>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d031      	beq.n	8006232 <HAL_DMA_IRQHandler+0xdaa>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4a38      	ldr	r2, [pc, #224]	@ (80062b4 <HAL_DMA_IRQHandler+0xe2c>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d02c      	beq.n	8006232 <HAL_DMA_IRQHandler+0xdaa>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4a36      	ldr	r2, [pc, #216]	@ (80062b8 <HAL_DMA_IRQHandler+0xe30>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d027      	beq.n	8006232 <HAL_DMA_IRQHandler+0xdaa>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a35      	ldr	r2, [pc, #212]	@ (80062bc <HAL_DMA_IRQHandler+0xe34>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d022      	beq.n	8006232 <HAL_DMA_IRQHandler+0xdaa>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a33      	ldr	r2, [pc, #204]	@ (80062c0 <HAL_DMA_IRQHandler+0xe38>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d01d      	beq.n	8006232 <HAL_DMA_IRQHandler+0xdaa>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4a32      	ldr	r2, [pc, #200]	@ (80062c4 <HAL_DMA_IRQHandler+0xe3c>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d018      	beq.n	8006232 <HAL_DMA_IRQHandler+0xdaa>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a30      	ldr	r2, [pc, #192]	@ (80062c8 <HAL_DMA_IRQHandler+0xe40>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d013      	beq.n	8006232 <HAL_DMA_IRQHandler+0xdaa>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a2f      	ldr	r2, [pc, #188]	@ (80062cc <HAL_DMA_IRQHandler+0xe44>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d00e      	beq.n	8006232 <HAL_DMA_IRQHandler+0xdaa>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a2d      	ldr	r2, [pc, #180]	@ (80062d0 <HAL_DMA_IRQHandler+0xe48>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d009      	beq.n	8006232 <HAL_DMA_IRQHandler+0xdaa>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a2c      	ldr	r2, [pc, #176]	@ (80062d4 <HAL_DMA_IRQHandler+0xe4c>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d004      	beq.n	8006232 <HAL_DMA_IRQHandler+0xdaa>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a2a      	ldr	r2, [pc, #168]	@ (80062d8 <HAL_DMA_IRQHandler+0xe50>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d108      	bne.n	8006244 <HAL_DMA_IRQHandler+0xdbc>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	681a      	ldr	r2, [r3, #0]
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f022 021c 	bic.w	r2, r2, #28
 8006240:	601a      	str	r2, [r3, #0]
 8006242:	e007      	b.n	8006254 <HAL_DMA_IRQHandler+0xdcc>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	681a      	ldr	r2, [r3, #0]
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f022 020e 	bic.w	r2, r2, #14
 8006252:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006258:	f003 031f 	and.w	r3, r3, #31
 800625c:	2201      	movs	r2, #1
 800625e:	409a      	lsls	r2, r3
 8006260:	69fb      	ldr	r3, [r7, #28]
 8006262:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2201      	movs	r2, #1
 8006268:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2201      	movs	r2, #1
 800626e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2200      	movs	r2, #0
 8006276:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800627e:	2b00      	cmp	r3, #0
 8006280:	d009      	beq.n	8006296 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	4798      	blx	r3
 800628a:	e004      	b.n	8006296 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800628c:	bf00      	nop
 800628e:	e002      	b.n	8006296 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006290:	bf00      	nop
 8006292:	e000      	b.n	8006296 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006294:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006296:	3728      	adds	r7, #40	@ 0x28
 8006298:	46bd      	mov	sp, r7
 800629a:	bd80      	pop	{r7, pc}
 800629c:	40020010 	.word	0x40020010
 80062a0:	40020028 	.word	0x40020028
 80062a4:	40020040 	.word	0x40020040
 80062a8:	40020058 	.word	0x40020058
 80062ac:	40020070 	.word	0x40020070
 80062b0:	40020088 	.word	0x40020088
 80062b4:	400200a0 	.word	0x400200a0
 80062b8:	400200b8 	.word	0x400200b8
 80062bc:	40020410 	.word	0x40020410
 80062c0:	40020428 	.word	0x40020428
 80062c4:	40020440 	.word	0x40020440
 80062c8:	40020458 	.word	0x40020458
 80062cc:	40020470 	.word	0x40020470
 80062d0:	40020488 	.word	0x40020488
 80062d4:	400204a0 	.word	0x400204a0
 80062d8:	400204b8 	.word	0x400204b8

080062dc <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(const DMA_HandleTypeDef *hdma)
{
 80062dc:	b480      	push	{r7}
 80062de:	b083      	sub	sp, #12
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80062ea:	b2db      	uxtb	r3, r3
}
 80062ec:	4618      	mov	r0, r3
 80062ee:	370c      	adds	r7, #12
 80062f0:	46bd      	mov	sp, r7
 80062f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f6:	4770      	bx	lr

080062f8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80062f8:	b480      	push	{r7}
 80062fa:	b087      	sub	sp, #28
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	60f8      	str	r0, [r7, #12]
 8006300:	60b9      	str	r1, [r7, #8]
 8006302:	607a      	str	r2, [r7, #4]
 8006304:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800630a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006310:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4a7f      	ldr	r2, [pc, #508]	@ (8006514 <DMA_SetConfig+0x21c>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d072      	beq.n	8006402 <DMA_SetConfig+0x10a>
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4a7d      	ldr	r2, [pc, #500]	@ (8006518 <DMA_SetConfig+0x220>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d06d      	beq.n	8006402 <DMA_SetConfig+0x10a>
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4a7c      	ldr	r2, [pc, #496]	@ (800651c <DMA_SetConfig+0x224>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d068      	beq.n	8006402 <DMA_SetConfig+0x10a>
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4a7a      	ldr	r2, [pc, #488]	@ (8006520 <DMA_SetConfig+0x228>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d063      	beq.n	8006402 <DMA_SetConfig+0x10a>
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4a79      	ldr	r2, [pc, #484]	@ (8006524 <DMA_SetConfig+0x22c>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d05e      	beq.n	8006402 <DMA_SetConfig+0x10a>
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4a77      	ldr	r2, [pc, #476]	@ (8006528 <DMA_SetConfig+0x230>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d059      	beq.n	8006402 <DMA_SetConfig+0x10a>
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	4a76      	ldr	r2, [pc, #472]	@ (800652c <DMA_SetConfig+0x234>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d054      	beq.n	8006402 <DMA_SetConfig+0x10a>
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a74      	ldr	r2, [pc, #464]	@ (8006530 <DMA_SetConfig+0x238>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d04f      	beq.n	8006402 <DMA_SetConfig+0x10a>
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4a73      	ldr	r2, [pc, #460]	@ (8006534 <DMA_SetConfig+0x23c>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d04a      	beq.n	8006402 <DMA_SetConfig+0x10a>
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4a71      	ldr	r2, [pc, #452]	@ (8006538 <DMA_SetConfig+0x240>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d045      	beq.n	8006402 <DMA_SetConfig+0x10a>
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4a70      	ldr	r2, [pc, #448]	@ (800653c <DMA_SetConfig+0x244>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d040      	beq.n	8006402 <DMA_SetConfig+0x10a>
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4a6e      	ldr	r2, [pc, #440]	@ (8006540 <DMA_SetConfig+0x248>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d03b      	beq.n	8006402 <DMA_SetConfig+0x10a>
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4a6d      	ldr	r2, [pc, #436]	@ (8006544 <DMA_SetConfig+0x24c>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d036      	beq.n	8006402 <DMA_SetConfig+0x10a>
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4a6b      	ldr	r2, [pc, #428]	@ (8006548 <DMA_SetConfig+0x250>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d031      	beq.n	8006402 <DMA_SetConfig+0x10a>
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4a6a      	ldr	r2, [pc, #424]	@ (800654c <DMA_SetConfig+0x254>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d02c      	beq.n	8006402 <DMA_SetConfig+0x10a>
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a68      	ldr	r2, [pc, #416]	@ (8006550 <DMA_SetConfig+0x258>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d027      	beq.n	8006402 <DMA_SetConfig+0x10a>
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4a67      	ldr	r2, [pc, #412]	@ (8006554 <DMA_SetConfig+0x25c>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d022      	beq.n	8006402 <DMA_SetConfig+0x10a>
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4a65      	ldr	r2, [pc, #404]	@ (8006558 <DMA_SetConfig+0x260>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d01d      	beq.n	8006402 <DMA_SetConfig+0x10a>
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4a64      	ldr	r2, [pc, #400]	@ (800655c <DMA_SetConfig+0x264>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d018      	beq.n	8006402 <DMA_SetConfig+0x10a>
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4a62      	ldr	r2, [pc, #392]	@ (8006560 <DMA_SetConfig+0x268>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d013      	beq.n	8006402 <DMA_SetConfig+0x10a>
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4a61      	ldr	r2, [pc, #388]	@ (8006564 <DMA_SetConfig+0x26c>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d00e      	beq.n	8006402 <DMA_SetConfig+0x10a>
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4a5f      	ldr	r2, [pc, #380]	@ (8006568 <DMA_SetConfig+0x270>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d009      	beq.n	8006402 <DMA_SetConfig+0x10a>
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	4a5e      	ldr	r2, [pc, #376]	@ (800656c <DMA_SetConfig+0x274>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d004      	beq.n	8006402 <DMA_SetConfig+0x10a>
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4a5c      	ldr	r2, [pc, #368]	@ (8006570 <DMA_SetConfig+0x278>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d101      	bne.n	8006406 <DMA_SetConfig+0x10e>
 8006402:	2301      	movs	r3, #1
 8006404:	e000      	b.n	8006408 <DMA_SetConfig+0x110>
 8006406:	2300      	movs	r3, #0
 8006408:	2b00      	cmp	r3, #0
 800640a:	d00d      	beq.n	8006428 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006410:	68fa      	ldr	r2, [r7, #12]
 8006412:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006414:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800641a:	2b00      	cmp	r3, #0
 800641c:	d004      	beq.n	8006428 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006422:	68fa      	ldr	r2, [r7, #12]
 8006424:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006426:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a39      	ldr	r2, [pc, #228]	@ (8006514 <DMA_SetConfig+0x21c>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d04a      	beq.n	80064c8 <DMA_SetConfig+0x1d0>
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a38      	ldr	r2, [pc, #224]	@ (8006518 <DMA_SetConfig+0x220>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d045      	beq.n	80064c8 <DMA_SetConfig+0x1d0>
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a36      	ldr	r2, [pc, #216]	@ (800651c <DMA_SetConfig+0x224>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d040      	beq.n	80064c8 <DMA_SetConfig+0x1d0>
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a35      	ldr	r2, [pc, #212]	@ (8006520 <DMA_SetConfig+0x228>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d03b      	beq.n	80064c8 <DMA_SetConfig+0x1d0>
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a33      	ldr	r2, [pc, #204]	@ (8006524 <DMA_SetConfig+0x22c>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d036      	beq.n	80064c8 <DMA_SetConfig+0x1d0>
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a32      	ldr	r2, [pc, #200]	@ (8006528 <DMA_SetConfig+0x230>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d031      	beq.n	80064c8 <DMA_SetConfig+0x1d0>
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a30      	ldr	r2, [pc, #192]	@ (800652c <DMA_SetConfig+0x234>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d02c      	beq.n	80064c8 <DMA_SetConfig+0x1d0>
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4a2f      	ldr	r2, [pc, #188]	@ (8006530 <DMA_SetConfig+0x238>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d027      	beq.n	80064c8 <DMA_SetConfig+0x1d0>
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a2d      	ldr	r2, [pc, #180]	@ (8006534 <DMA_SetConfig+0x23c>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d022      	beq.n	80064c8 <DMA_SetConfig+0x1d0>
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a2c      	ldr	r2, [pc, #176]	@ (8006538 <DMA_SetConfig+0x240>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d01d      	beq.n	80064c8 <DMA_SetConfig+0x1d0>
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4a2a      	ldr	r2, [pc, #168]	@ (800653c <DMA_SetConfig+0x244>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d018      	beq.n	80064c8 <DMA_SetConfig+0x1d0>
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a29      	ldr	r2, [pc, #164]	@ (8006540 <DMA_SetConfig+0x248>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d013      	beq.n	80064c8 <DMA_SetConfig+0x1d0>
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a27      	ldr	r2, [pc, #156]	@ (8006544 <DMA_SetConfig+0x24c>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d00e      	beq.n	80064c8 <DMA_SetConfig+0x1d0>
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4a26      	ldr	r2, [pc, #152]	@ (8006548 <DMA_SetConfig+0x250>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d009      	beq.n	80064c8 <DMA_SetConfig+0x1d0>
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4a24      	ldr	r2, [pc, #144]	@ (800654c <DMA_SetConfig+0x254>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d004      	beq.n	80064c8 <DMA_SetConfig+0x1d0>
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4a23      	ldr	r2, [pc, #140]	@ (8006550 <DMA_SetConfig+0x258>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d101      	bne.n	80064cc <DMA_SetConfig+0x1d4>
 80064c8:	2301      	movs	r3, #1
 80064ca:	e000      	b.n	80064ce <DMA_SetConfig+0x1d6>
 80064cc:	2300      	movs	r3, #0
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d059      	beq.n	8006586 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064d6:	f003 031f 	and.w	r3, r3, #31
 80064da:	223f      	movs	r2, #63	@ 0x3f
 80064dc:	409a      	lsls	r2, r3
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	681a      	ldr	r2, [r3, #0]
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80064f0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	683a      	ldr	r2, [r7, #0]
 80064f8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	689b      	ldr	r3, [r3, #8]
 80064fe:	2b40      	cmp	r3, #64	@ 0x40
 8006500:	d138      	bne.n	8006574 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	687a      	ldr	r2, [r7, #4]
 8006508:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	68ba      	ldr	r2, [r7, #8]
 8006510:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006512:	e086      	b.n	8006622 <DMA_SetConfig+0x32a>
 8006514:	40020010 	.word	0x40020010
 8006518:	40020028 	.word	0x40020028
 800651c:	40020040 	.word	0x40020040
 8006520:	40020058 	.word	0x40020058
 8006524:	40020070 	.word	0x40020070
 8006528:	40020088 	.word	0x40020088
 800652c:	400200a0 	.word	0x400200a0
 8006530:	400200b8 	.word	0x400200b8
 8006534:	40020410 	.word	0x40020410
 8006538:	40020428 	.word	0x40020428
 800653c:	40020440 	.word	0x40020440
 8006540:	40020458 	.word	0x40020458
 8006544:	40020470 	.word	0x40020470
 8006548:	40020488 	.word	0x40020488
 800654c:	400204a0 	.word	0x400204a0
 8006550:	400204b8 	.word	0x400204b8
 8006554:	58025408 	.word	0x58025408
 8006558:	5802541c 	.word	0x5802541c
 800655c:	58025430 	.word	0x58025430
 8006560:	58025444 	.word	0x58025444
 8006564:	58025458 	.word	0x58025458
 8006568:	5802546c 	.word	0x5802546c
 800656c:	58025480 	.word	0x58025480
 8006570:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	68ba      	ldr	r2, [r7, #8]
 800657a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	687a      	ldr	r2, [r7, #4]
 8006582:	60da      	str	r2, [r3, #12]
}
 8006584:	e04d      	b.n	8006622 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4a29      	ldr	r2, [pc, #164]	@ (8006630 <DMA_SetConfig+0x338>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d022      	beq.n	80065d6 <DMA_SetConfig+0x2de>
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	4a27      	ldr	r2, [pc, #156]	@ (8006634 <DMA_SetConfig+0x33c>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d01d      	beq.n	80065d6 <DMA_SetConfig+0x2de>
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	4a26      	ldr	r2, [pc, #152]	@ (8006638 <DMA_SetConfig+0x340>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d018      	beq.n	80065d6 <DMA_SetConfig+0x2de>
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4a24      	ldr	r2, [pc, #144]	@ (800663c <DMA_SetConfig+0x344>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d013      	beq.n	80065d6 <DMA_SetConfig+0x2de>
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	4a23      	ldr	r2, [pc, #140]	@ (8006640 <DMA_SetConfig+0x348>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d00e      	beq.n	80065d6 <DMA_SetConfig+0x2de>
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4a21      	ldr	r2, [pc, #132]	@ (8006644 <DMA_SetConfig+0x34c>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d009      	beq.n	80065d6 <DMA_SetConfig+0x2de>
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	4a20      	ldr	r2, [pc, #128]	@ (8006648 <DMA_SetConfig+0x350>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d004      	beq.n	80065d6 <DMA_SetConfig+0x2de>
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4a1e      	ldr	r2, [pc, #120]	@ (800664c <DMA_SetConfig+0x354>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d101      	bne.n	80065da <DMA_SetConfig+0x2e2>
 80065d6:	2301      	movs	r3, #1
 80065d8:	e000      	b.n	80065dc <DMA_SetConfig+0x2e4>
 80065da:	2300      	movs	r3, #0
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d020      	beq.n	8006622 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80065e4:	f003 031f 	and.w	r3, r3, #31
 80065e8:	2201      	movs	r2, #1
 80065ea:	409a      	lsls	r2, r3
 80065ec:	693b      	ldr	r3, [r7, #16]
 80065ee:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	683a      	ldr	r2, [r7, #0]
 80065f6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	689b      	ldr	r3, [r3, #8]
 80065fc:	2b40      	cmp	r3, #64	@ 0x40
 80065fe:	d108      	bne.n	8006612 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	687a      	ldr	r2, [r7, #4]
 8006606:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	68ba      	ldr	r2, [r7, #8]
 800660e:	60da      	str	r2, [r3, #12]
}
 8006610:	e007      	b.n	8006622 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	68ba      	ldr	r2, [r7, #8]
 8006618:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	687a      	ldr	r2, [r7, #4]
 8006620:	60da      	str	r2, [r3, #12]
}
 8006622:	bf00      	nop
 8006624:	371c      	adds	r7, #28
 8006626:	46bd      	mov	sp, r7
 8006628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662c:	4770      	bx	lr
 800662e:	bf00      	nop
 8006630:	58025408 	.word	0x58025408
 8006634:	5802541c 	.word	0x5802541c
 8006638:	58025430 	.word	0x58025430
 800663c:	58025444 	.word	0x58025444
 8006640:	58025458 	.word	0x58025458
 8006644:	5802546c 	.word	0x5802546c
 8006648:	58025480 	.word	0x58025480
 800664c:	58025494 	.word	0x58025494

08006650 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006650:	b480      	push	{r7}
 8006652:	b085      	sub	sp, #20
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4a42      	ldr	r2, [pc, #264]	@ (8006768 <DMA_CalcBaseAndBitshift+0x118>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d04a      	beq.n	80066f8 <DMA_CalcBaseAndBitshift+0xa8>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4a41      	ldr	r2, [pc, #260]	@ (800676c <DMA_CalcBaseAndBitshift+0x11c>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d045      	beq.n	80066f8 <DMA_CalcBaseAndBitshift+0xa8>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4a3f      	ldr	r2, [pc, #252]	@ (8006770 <DMA_CalcBaseAndBitshift+0x120>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d040      	beq.n	80066f8 <DMA_CalcBaseAndBitshift+0xa8>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4a3e      	ldr	r2, [pc, #248]	@ (8006774 <DMA_CalcBaseAndBitshift+0x124>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d03b      	beq.n	80066f8 <DMA_CalcBaseAndBitshift+0xa8>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4a3c      	ldr	r2, [pc, #240]	@ (8006778 <DMA_CalcBaseAndBitshift+0x128>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d036      	beq.n	80066f8 <DMA_CalcBaseAndBitshift+0xa8>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4a3b      	ldr	r2, [pc, #236]	@ (800677c <DMA_CalcBaseAndBitshift+0x12c>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d031      	beq.n	80066f8 <DMA_CalcBaseAndBitshift+0xa8>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	4a39      	ldr	r2, [pc, #228]	@ (8006780 <DMA_CalcBaseAndBitshift+0x130>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d02c      	beq.n	80066f8 <DMA_CalcBaseAndBitshift+0xa8>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	4a38      	ldr	r2, [pc, #224]	@ (8006784 <DMA_CalcBaseAndBitshift+0x134>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d027      	beq.n	80066f8 <DMA_CalcBaseAndBitshift+0xa8>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4a36      	ldr	r2, [pc, #216]	@ (8006788 <DMA_CalcBaseAndBitshift+0x138>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d022      	beq.n	80066f8 <DMA_CalcBaseAndBitshift+0xa8>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4a35      	ldr	r2, [pc, #212]	@ (800678c <DMA_CalcBaseAndBitshift+0x13c>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d01d      	beq.n	80066f8 <DMA_CalcBaseAndBitshift+0xa8>
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4a33      	ldr	r2, [pc, #204]	@ (8006790 <DMA_CalcBaseAndBitshift+0x140>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d018      	beq.n	80066f8 <DMA_CalcBaseAndBitshift+0xa8>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4a32      	ldr	r2, [pc, #200]	@ (8006794 <DMA_CalcBaseAndBitshift+0x144>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d013      	beq.n	80066f8 <DMA_CalcBaseAndBitshift+0xa8>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4a30      	ldr	r2, [pc, #192]	@ (8006798 <DMA_CalcBaseAndBitshift+0x148>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d00e      	beq.n	80066f8 <DMA_CalcBaseAndBitshift+0xa8>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4a2f      	ldr	r2, [pc, #188]	@ (800679c <DMA_CalcBaseAndBitshift+0x14c>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d009      	beq.n	80066f8 <DMA_CalcBaseAndBitshift+0xa8>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4a2d      	ldr	r2, [pc, #180]	@ (80067a0 <DMA_CalcBaseAndBitshift+0x150>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d004      	beq.n	80066f8 <DMA_CalcBaseAndBitshift+0xa8>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	4a2c      	ldr	r2, [pc, #176]	@ (80067a4 <DMA_CalcBaseAndBitshift+0x154>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d101      	bne.n	80066fc <DMA_CalcBaseAndBitshift+0xac>
 80066f8:	2301      	movs	r3, #1
 80066fa:	e000      	b.n	80066fe <DMA_CalcBaseAndBitshift+0xae>
 80066fc:	2300      	movs	r3, #0
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d024      	beq.n	800674c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	b2db      	uxtb	r3, r3
 8006708:	3b10      	subs	r3, #16
 800670a:	4a27      	ldr	r2, [pc, #156]	@ (80067a8 <DMA_CalcBaseAndBitshift+0x158>)
 800670c:	fba2 2303 	umull	r2, r3, r2, r3
 8006710:	091b      	lsrs	r3, r3, #4
 8006712:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	f003 0307 	and.w	r3, r3, #7
 800671a:	4a24      	ldr	r2, [pc, #144]	@ (80067ac <DMA_CalcBaseAndBitshift+0x15c>)
 800671c:	5cd3      	ldrb	r3, [r2, r3]
 800671e:	461a      	mov	r2, r3
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	2b03      	cmp	r3, #3
 8006728:	d908      	bls.n	800673c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	461a      	mov	r2, r3
 8006730:	4b1f      	ldr	r3, [pc, #124]	@ (80067b0 <DMA_CalcBaseAndBitshift+0x160>)
 8006732:	4013      	ands	r3, r2
 8006734:	1d1a      	adds	r2, r3, #4
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	659a      	str	r2, [r3, #88]	@ 0x58
 800673a:	e00d      	b.n	8006758 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	461a      	mov	r2, r3
 8006742:	4b1b      	ldr	r3, [pc, #108]	@ (80067b0 <DMA_CalcBaseAndBitshift+0x160>)
 8006744:	4013      	ands	r3, r2
 8006746:	687a      	ldr	r2, [r7, #4]
 8006748:	6593      	str	r3, [r2, #88]	@ 0x58
 800674a:	e005      	b.n	8006758 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800675c:	4618      	mov	r0, r3
 800675e:	3714      	adds	r7, #20
 8006760:	46bd      	mov	sp, r7
 8006762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006766:	4770      	bx	lr
 8006768:	40020010 	.word	0x40020010
 800676c:	40020028 	.word	0x40020028
 8006770:	40020040 	.word	0x40020040
 8006774:	40020058 	.word	0x40020058
 8006778:	40020070 	.word	0x40020070
 800677c:	40020088 	.word	0x40020088
 8006780:	400200a0 	.word	0x400200a0
 8006784:	400200b8 	.word	0x400200b8
 8006788:	40020410 	.word	0x40020410
 800678c:	40020428 	.word	0x40020428
 8006790:	40020440 	.word	0x40020440
 8006794:	40020458 	.word	0x40020458
 8006798:	40020470 	.word	0x40020470
 800679c:	40020488 	.word	0x40020488
 80067a0:	400204a0 	.word	0x400204a0
 80067a4:	400204b8 	.word	0x400204b8
 80067a8:	aaaaaaab 	.word	0xaaaaaaab
 80067ac:	0801b46c 	.word	0x0801b46c
 80067b0:	fffffc00 	.word	0xfffffc00

080067b4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 80067b4:	b480      	push	{r7}
 80067b6:	b085      	sub	sp, #20
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80067bc:	2300      	movs	r3, #0
 80067be:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	699b      	ldr	r3, [r3, #24]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d120      	bne.n	800680a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067cc:	2b03      	cmp	r3, #3
 80067ce:	d858      	bhi.n	8006882 <DMA_CheckFifoParam+0xce>
 80067d0:	a201      	add	r2, pc, #4	@ (adr r2, 80067d8 <DMA_CheckFifoParam+0x24>)
 80067d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067d6:	bf00      	nop
 80067d8:	080067e9 	.word	0x080067e9
 80067dc:	080067fb 	.word	0x080067fb
 80067e0:	080067e9 	.word	0x080067e9
 80067e4:	08006883 	.word	0x08006883
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067ec:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d048      	beq.n	8006886 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80067f4:	2301      	movs	r3, #1
 80067f6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80067f8:	e045      	b.n	8006886 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067fe:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006802:	d142      	bne.n	800688a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8006804:	2301      	movs	r3, #1
 8006806:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006808:	e03f      	b.n	800688a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	699b      	ldr	r3, [r3, #24]
 800680e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006812:	d123      	bne.n	800685c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006818:	2b03      	cmp	r3, #3
 800681a:	d838      	bhi.n	800688e <DMA_CheckFifoParam+0xda>
 800681c:	a201      	add	r2, pc, #4	@ (adr r2, 8006824 <DMA_CheckFifoParam+0x70>)
 800681e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006822:	bf00      	nop
 8006824:	08006835 	.word	0x08006835
 8006828:	0800683b 	.word	0x0800683b
 800682c:	08006835 	.word	0x08006835
 8006830:	0800684d 	.word	0x0800684d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8006834:	2301      	movs	r3, #1
 8006836:	73fb      	strb	r3, [r7, #15]
        break;
 8006838:	e030      	b.n	800689c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800683e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006842:	2b00      	cmp	r3, #0
 8006844:	d025      	beq.n	8006892 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8006846:	2301      	movs	r3, #1
 8006848:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800684a:	e022      	b.n	8006892 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006850:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006854:	d11f      	bne.n	8006896 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8006856:	2301      	movs	r3, #1
 8006858:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800685a:	e01c      	b.n	8006896 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006860:	2b02      	cmp	r3, #2
 8006862:	d902      	bls.n	800686a <DMA_CheckFifoParam+0xb6>
 8006864:	2b03      	cmp	r3, #3
 8006866:	d003      	beq.n	8006870 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8006868:	e018      	b.n	800689c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800686a:	2301      	movs	r3, #1
 800686c:	73fb      	strb	r3, [r7, #15]
        break;
 800686e:	e015      	b.n	800689c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006874:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006878:	2b00      	cmp	r3, #0
 800687a:	d00e      	beq.n	800689a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800687c:	2301      	movs	r3, #1
 800687e:	73fb      	strb	r3, [r7, #15]
    break;
 8006880:	e00b      	b.n	800689a <DMA_CheckFifoParam+0xe6>
        break;
 8006882:	bf00      	nop
 8006884:	e00a      	b.n	800689c <DMA_CheckFifoParam+0xe8>
        break;
 8006886:	bf00      	nop
 8006888:	e008      	b.n	800689c <DMA_CheckFifoParam+0xe8>
        break;
 800688a:	bf00      	nop
 800688c:	e006      	b.n	800689c <DMA_CheckFifoParam+0xe8>
        break;
 800688e:	bf00      	nop
 8006890:	e004      	b.n	800689c <DMA_CheckFifoParam+0xe8>
        break;
 8006892:	bf00      	nop
 8006894:	e002      	b.n	800689c <DMA_CheckFifoParam+0xe8>
        break;
 8006896:	bf00      	nop
 8006898:	e000      	b.n	800689c <DMA_CheckFifoParam+0xe8>
    break;
 800689a:	bf00      	nop
    }
  }

  return status;
 800689c:	7bfb      	ldrb	r3, [r7, #15]
}
 800689e:	4618      	mov	r0, r3
 80068a0:	3714      	adds	r7, #20
 80068a2:	46bd      	mov	sp, r7
 80068a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a8:	4770      	bx	lr
 80068aa:	bf00      	nop

080068ac <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80068ac:	b480      	push	{r7}
 80068ae:	b085      	sub	sp, #20
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4a38      	ldr	r2, [pc, #224]	@ (80069a0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d022      	beq.n	800690a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4a36      	ldr	r2, [pc, #216]	@ (80069a4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d01d      	beq.n	800690a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4a35      	ldr	r2, [pc, #212]	@ (80069a8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d018      	beq.n	800690a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a33      	ldr	r2, [pc, #204]	@ (80069ac <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d013      	beq.n	800690a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a32      	ldr	r2, [pc, #200]	@ (80069b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d00e      	beq.n	800690a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a30      	ldr	r2, [pc, #192]	@ (80069b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d009      	beq.n	800690a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4a2f      	ldr	r2, [pc, #188]	@ (80069b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d004      	beq.n	800690a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4a2d      	ldr	r2, [pc, #180]	@ (80069bc <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d101      	bne.n	800690e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800690a:	2301      	movs	r3, #1
 800690c:	e000      	b.n	8006910 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800690e:	2300      	movs	r3, #0
 8006910:	2b00      	cmp	r3, #0
 8006912:	d01a      	beq.n	800694a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	b2db      	uxtb	r3, r3
 800691a:	3b08      	subs	r3, #8
 800691c:	4a28      	ldr	r2, [pc, #160]	@ (80069c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800691e:	fba2 2303 	umull	r2, r3, r2, r3
 8006922:	091b      	lsrs	r3, r3, #4
 8006924:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8006926:	68fa      	ldr	r2, [r7, #12]
 8006928:	4b26      	ldr	r3, [pc, #152]	@ (80069c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800692a:	4413      	add	r3, r2
 800692c:	009b      	lsls	r3, r3, #2
 800692e:	461a      	mov	r2, r3
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	4a24      	ldr	r2, [pc, #144]	@ (80069c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8006938:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	f003 031f 	and.w	r3, r3, #31
 8006940:	2201      	movs	r2, #1
 8006942:	409a      	lsls	r2, r3
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8006948:	e024      	b.n	8006994 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	b2db      	uxtb	r3, r3
 8006950:	3b10      	subs	r3, #16
 8006952:	4a1e      	ldr	r2, [pc, #120]	@ (80069cc <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8006954:	fba2 2303 	umull	r2, r3, r2, r3
 8006958:	091b      	lsrs	r3, r3, #4
 800695a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	4a1c      	ldr	r2, [pc, #112]	@ (80069d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8006960:	4293      	cmp	r3, r2
 8006962:	d806      	bhi.n	8006972 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	4a1b      	ldr	r2, [pc, #108]	@ (80069d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d902      	bls.n	8006972 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	3308      	adds	r3, #8
 8006970:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8006972:	68fa      	ldr	r2, [r7, #12]
 8006974:	4b18      	ldr	r3, [pc, #96]	@ (80069d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8006976:	4413      	add	r3, r2
 8006978:	009b      	lsls	r3, r3, #2
 800697a:	461a      	mov	r2, r3
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	4a16      	ldr	r2, [pc, #88]	@ (80069dc <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006984:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	f003 031f 	and.w	r3, r3, #31
 800698c:	2201      	movs	r2, #1
 800698e:	409a      	lsls	r2, r3
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006994:	bf00      	nop
 8006996:	3714      	adds	r7, #20
 8006998:	46bd      	mov	sp, r7
 800699a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699e:	4770      	bx	lr
 80069a0:	58025408 	.word	0x58025408
 80069a4:	5802541c 	.word	0x5802541c
 80069a8:	58025430 	.word	0x58025430
 80069ac:	58025444 	.word	0x58025444
 80069b0:	58025458 	.word	0x58025458
 80069b4:	5802546c 	.word	0x5802546c
 80069b8:	58025480 	.word	0x58025480
 80069bc:	58025494 	.word	0x58025494
 80069c0:	cccccccd 	.word	0xcccccccd
 80069c4:	16009600 	.word	0x16009600
 80069c8:	58025880 	.word	0x58025880
 80069cc:	aaaaaaab 	.word	0xaaaaaaab
 80069d0:	400204b8 	.word	0x400204b8
 80069d4:	4002040f 	.word	0x4002040f
 80069d8:	10008200 	.word	0x10008200
 80069dc:	40020880 	.word	0x40020880

080069e0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80069e0:	b480      	push	{r7}
 80069e2:	b085      	sub	sp, #20
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	685b      	ldr	r3, [r3, #4]
 80069ec:	b2db      	uxtb	r3, r3
 80069ee:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d04a      	beq.n	8006a8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	2b08      	cmp	r3, #8
 80069fa:	d847      	bhi.n	8006a8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4a25      	ldr	r2, [pc, #148]	@ (8006a98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d022      	beq.n	8006a4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4a24      	ldr	r2, [pc, #144]	@ (8006a9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d01d      	beq.n	8006a4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	4a22      	ldr	r2, [pc, #136]	@ (8006aa0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d018      	beq.n	8006a4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4a21      	ldr	r2, [pc, #132]	@ (8006aa4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d013      	beq.n	8006a4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	4a1f      	ldr	r2, [pc, #124]	@ (8006aa8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d00e      	beq.n	8006a4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	4a1e      	ldr	r2, [pc, #120]	@ (8006aac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d009      	beq.n	8006a4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4a1c      	ldr	r2, [pc, #112]	@ (8006ab0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d004      	beq.n	8006a4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4a1b      	ldr	r2, [pc, #108]	@ (8006ab4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d101      	bne.n	8006a50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	e000      	b.n	8006a52 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8006a50:	2300      	movs	r3, #0
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d00a      	beq.n	8006a6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8006a56:	68fa      	ldr	r2, [r7, #12]
 8006a58:	4b17      	ldr	r3, [pc, #92]	@ (8006ab8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8006a5a:	4413      	add	r3, r2
 8006a5c:	009b      	lsls	r3, r3, #2
 8006a5e:	461a      	mov	r2, r3
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	4a15      	ldr	r2, [pc, #84]	@ (8006abc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8006a68:	671a      	str	r2, [r3, #112]	@ 0x70
 8006a6a:	e009      	b.n	8006a80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006a6c:	68fa      	ldr	r2, [r7, #12]
 8006a6e:	4b14      	ldr	r3, [pc, #80]	@ (8006ac0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8006a70:	4413      	add	r3, r2
 8006a72:	009b      	lsls	r3, r3, #2
 8006a74:	461a      	mov	r2, r3
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	4a11      	ldr	r2, [pc, #68]	@ (8006ac4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8006a7e:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	3b01      	subs	r3, #1
 8006a84:	2201      	movs	r2, #1
 8006a86:	409a      	lsls	r2, r3
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8006a8c:	bf00      	nop
 8006a8e:	3714      	adds	r7, #20
 8006a90:	46bd      	mov	sp, r7
 8006a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a96:	4770      	bx	lr
 8006a98:	58025408 	.word	0x58025408
 8006a9c:	5802541c 	.word	0x5802541c
 8006aa0:	58025430 	.word	0x58025430
 8006aa4:	58025444 	.word	0x58025444
 8006aa8:	58025458 	.word	0x58025458
 8006aac:	5802546c 	.word	0x5802546c
 8006ab0:	58025480 	.word	0x58025480
 8006ab4:	58025494 	.word	0x58025494
 8006ab8:	1600963f 	.word	0x1600963f
 8006abc:	58025940 	.word	0x58025940
 8006ac0:	1000823f 	.word	0x1000823f
 8006ac4:	40020940 	.word	0x40020940

08006ac8 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress: The second memory Buffer address in case of multi buffer Transfer
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b086      	sub	sp, #24
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	60f8      	str	r0, [r7, #12]
 8006ad0:	60b9      	str	r1, [r7, #8]
 8006ad2:	607a      	str	r2, [r7, #4]
 8006ad4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Memory-to-memory transfer not supported in double buffering mode */
  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	689b      	ldr	r3, [r3, #8]
 8006ade:	2b80      	cmp	r3, #128	@ 0x80
 8006ae0:	d105      	bne.n	8006aee <HAL_DMAEx_MultiBufferStart_IT+0x26>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006ae8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8006aea:	2301      	movs	r3, #1
 8006aec:	e315      	b.n	800711a <HAL_DMAEx_MultiBufferStart_IT+0x652>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006af4:	2b01      	cmp	r3, #1
 8006af6:	d101      	bne.n	8006afc <HAL_DMAEx_MultiBufferStart_IT+0x34>
 8006af8:	2302      	movs	r3, #2
 8006afa:	e30e      	b.n	800711a <HAL_DMAEx_MultiBufferStart_IT+0x652>
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	2201      	movs	r2, #1
 8006b00:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006b0a:	b2db      	uxtb	r3, r3
 8006b0c:	2b01      	cmp	r3, #1
 8006b0e:	f040 82fd 	bne.w	800710c <HAL_DMAEx_MultiBufferStart_IT+0x644>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	2202      	movs	r2, #2
 8006b16:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	655a      	str	r2, [r3, #84]	@ 0x54

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	4a82      	ldr	r2, [pc, #520]	@ (8006d30 <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d04a      	beq.n	8006bc0 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	4a81      	ldr	r2, [pc, #516]	@ (8006d34 <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d045      	beq.n	8006bc0 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4a7f      	ldr	r2, [pc, #508]	@ (8006d38 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d040      	beq.n	8006bc0 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	4a7e      	ldr	r2, [pc, #504]	@ (8006d3c <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d03b      	beq.n	8006bc0 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4a7c      	ldr	r2, [pc, #496]	@ (8006d40 <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d036      	beq.n	8006bc0 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	4a7b      	ldr	r2, [pc, #492]	@ (8006d44 <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d031      	beq.n	8006bc0 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4a79      	ldr	r2, [pc, #484]	@ (8006d48 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d02c      	beq.n	8006bc0 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4a78      	ldr	r2, [pc, #480]	@ (8006d4c <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d027      	beq.n	8006bc0 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4a76      	ldr	r2, [pc, #472]	@ (8006d50 <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d022      	beq.n	8006bc0 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4a75      	ldr	r2, [pc, #468]	@ (8006d54 <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d01d      	beq.n	8006bc0 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	4a73      	ldr	r2, [pc, #460]	@ (8006d58 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d018      	beq.n	8006bc0 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	4a72      	ldr	r2, [pc, #456]	@ (8006d5c <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d013      	beq.n	8006bc0 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	4a70      	ldr	r2, [pc, #448]	@ (8006d60 <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d00e      	beq.n	8006bc0 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	4a6f      	ldr	r2, [pc, #444]	@ (8006d64 <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d009      	beq.n	8006bc0 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4a6d      	ldr	r2, [pc, #436]	@ (8006d68 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d004      	beq.n	8006bc0 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4a6c      	ldr	r2, [pc, #432]	@ (8006d6c <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d101      	bne.n	8006bc4 <HAL_DMAEx_MultiBufferStart_IT+0xfc>
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	e000      	b.n	8006bc6 <HAL_DMAEx_MultiBufferStart_IT+0xfe>
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d018      	beq.n	8006bfc <HAL_DMAEx_MultiBufferStart_IT+0x134>
    {
      /* Enable the Double buffer mode */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR |= DMA_SxCR_DBM;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	681a      	ldr	r2, [r3, #0]
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8006bd8:	601a      	str	r2, [r3, #0]

      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = SecondMemAddress;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	683a      	ldr	r2, [r7, #0]
 8006be0:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 8U));
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006be6:	3308      	adds	r3, #8
 8006be8:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006bee:	f003 031f 	and.w	r3, r3, #31
 8006bf2:	223f      	movs	r2, #63	@ 0x3f
 8006bf4:	409a      	lsls	r2, r3
 8006bf6:	693b      	ldr	r3, [r7, #16]
 8006bf8:	601a      	str	r2, [r3, #0]
 8006bfa:	e018      	b.n	8006c2e <HAL_DMAEx_MultiBufferStart_IT+0x166>
    }
    else /* BDMA instance(s) */
    {
      /* Enable the Double buffer mode */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR |= (BDMA_CCR_DBM | BDMA_CCR_CIRC);
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	6819      	ldr	r1, [r3, #0]
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681a      	ldr	r2, [r3, #0]
 8006c06:	f248 0320 	movw	r3, #32800	@ 0x8020
 8006c0a:	430b      	orrs	r3, r1
 8006c0c:	6013      	str	r3, [r2, #0]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = SecondMemAddress;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	683a      	ldr	r2, [r7, #0]
 8006c14:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 4U));
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c1a:	3304      	adds	r3, #4
 8006c1c:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c22:	f003 031f 	and.w	r3, r3, #31
 8006c26:	2201      	movs	r2, #1
 8006c28:	409a      	lsls	r2, r3
 8006c2a:	693b      	ldr	r3, [r7, #16]
 8006c2c:	601a      	str	r2, [r3, #0]
    }

    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006c2e:	6a3b      	ldr	r3, [r7, #32]
 8006c30:	687a      	ldr	r2, [r7, #4]
 8006c32:	68b9      	ldr	r1, [r7, #8]
 8006c34:	68f8      	ldr	r0, [r7, #12]
 8006c36:	f000 fb41 	bl	80072bc <DMA_MultiBufferSetConfig>

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	4a3c      	ldr	r2, [pc, #240]	@ (8006d30 <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d072      	beq.n	8006d2a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	4a3a      	ldr	r2, [pc, #232]	@ (8006d34 <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d06d      	beq.n	8006d2a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	4a39      	ldr	r2, [pc, #228]	@ (8006d38 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d068      	beq.n	8006d2a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	4a37      	ldr	r2, [pc, #220]	@ (8006d3c <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d063      	beq.n	8006d2a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4a36      	ldr	r2, [pc, #216]	@ (8006d40 <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d05e      	beq.n	8006d2a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	4a34      	ldr	r2, [pc, #208]	@ (8006d44 <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d059      	beq.n	8006d2a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	4a33      	ldr	r2, [pc, #204]	@ (8006d48 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d054      	beq.n	8006d2a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4a31      	ldr	r2, [pc, #196]	@ (8006d4c <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d04f      	beq.n	8006d2a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4a30      	ldr	r2, [pc, #192]	@ (8006d50 <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d04a      	beq.n	8006d2a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4a2e      	ldr	r2, [pc, #184]	@ (8006d54 <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d045      	beq.n	8006d2a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	4a2d      	ldr	r2, [pc, #180]	@ (8006d58 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d040      	beq.n	8006d2a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4a2b      	ldr	r2, [pc, #172]	@ (8006d5c <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d03b      	beq.n	8006d2a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4a2a      	ldr	r2, [pc, #168]	@ (8006d60 <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d036      	beq.n	8006d2a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4a28      	ldr	r2, [pc, #160]	@ (8006d64 <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d031      	beq.n	8006d2a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	4a27      	ldr	r2, [pc, #156]	@ (8006d68 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d02c      	beq.n	8006d2a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4a25      	ldr	r2, [pc, #148]	@ (8006d6c <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d027      	beq.n	8006d2a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	4a24      	ldr	r2, [pc, #144]	@ (8006d70 <HAL_DMAEx_MultiBufferStart_IT+0x2a8>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d022      	beq.n	8006d2a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	4a22      	ldr	r2, [pc, #136]	@ (8006d74 <HAL_DMAEx_MultiBufferStart_IT+0x2ac>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d01d      	beq.n	8006d2a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	4a21      	ldr	r2, [pc, #132]	@ (8006d78 <HAL_DMAEx_MultiBufferStart_IT+0x2b0>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d018      	beq.n	8006d2a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	4a1f      	ldr	r2, [pc, #124]	@ (8006d7c <HAL_DMAEx_MultiBufferStart_IT+0x2b4>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d013      	beq.n	8006d2a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4a1e      	ldr	r2, [pc, #120]	@ (8006d80 <HAL_DMAEx_MultiBufferStart_IT+0x2b8>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d00e      	beq.n	8006d2a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a1c      	ldr	r2, [pc, #112]	@ (8006d84 <HAL_DMAEx_MultiBufferStart_IT+0x2bc>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d009      	beq.n	8006d2a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	4a1b      	ldr	r2, [pc, #108]	@ (8006d88 <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d004      	beq.n	8006d2a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4a19      	ldr	r2, [pc, #100]	@ (8006d8c <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d132      	bne.n	8006d90 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	e031      	b.n	8006d92 <HAL_DMAEx_MultiBufferStart_IT+0x2ca>
 8006d2e:	bf00      	nop
 8006d30:	40020010 	.word	0x40020010
 8006d34:	40020028 	.word	0x40020028
 8006d38:	40020040 	.word	0x40020040
 8006d3c:	40020058 	.word	0x40020058
 8006d40:	40020070 	.word	0x40020070
 8006d44:	40020088 	.word	0x40020088
 8006d48:	400200a0 	.word	0x400200a0
 8006d4c:	400200b8 	.word	0x400200b8
 8006d50:	40020410 	.word	0x40020410
 8006d54:	40020428 	.word	0x40020428
 8006d58:	40020440 	.word	0x40020440
 8006d5c:	40020458 	.word	0x40020458
 8006d60:	40020470 	.word	0x40020470
 8006d64:	40020488 	.word	0x40020488
 8006d68:	400204a0 	.word	0x400204a0
 8006d6c:	400204b8 	.word	0x400204b8
 8006d70:	58025408 	.word	0x58025408
 8006d74:	5802541c 	.word	0x5802541c
 8006d78:	58025430 	.word	0x58025430
 8006d7c:	58025444 	.word	0x58025444
 8006d80:	58025458 	.word	0x58025458
 8006d84:	5802546c 	.word	0x5802546c
 8006d88:	58025480 	.word	0x58025480
 8006d8c:	58025494 	.word	0x58025494
 8006d90:	2300      	movs	r3, #0
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d00d      	beq.n	8006db2 <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006d9a:	68fa      	ldr	r2, [r7, #12]
 8006d9c:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006d9e:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d004      	beq.n	8006db2 <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
      {
        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006dac:	68fa      	ldr	r2, [r7, #12]
 8006dae:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006db0:	605a      	str	r2, [r3, #4]
      }
    }

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	4a3b      	ldr	r2, [pc, #236]	@ (8006ea4 <HAL_DMAEx_MultiBufferStart_IT+0x3dc>)
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d04a      	beq.n	8006e52 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	4a39      	ldr	r2, [pc, #228]	@ (8006ea8 <HAL_DMAEx_MultiBufferStart_IT+0x3e0>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d045      	beq.n	8006e52 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4a38      	ldr	r2, [pc, #224]	@ (8006eac <HAL_DMAEx_MultiBufferStart_IT+0x3e4>)
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d040      	beq.n	8006e52 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	4a36      	ldr	r2, [pc, #216]	@ (8006eb0 <HAL_DMAEx_MultiBufferStart_IT+0x3e8>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d03b      	beq.n	8006e52 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	4a35      	ldr	r2, [pc, #212]	@ (8006eb4 <HAL_DMAEx_MultiBufferStart_IT+0x3ec>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d036      	beq.n	8006e52 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	4a33      	ldr	r2, [pc, #204]	@ (8006eb8 <HAL_DMAEx_MultiBufferStart_IT+0x3f0>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d031      	beq.n	8006e52 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	4a32      	ldr	r2, [pc, #200]	@ (8006ebc <HAL_DMAEx_MultiBufferStart_IT+0x3f4>)
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d02c      	beq.n	8006e52 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	4a30      	ldr	r2, [pc, #192]	@ (8006ec0 <HAL_DMAEx_MultiBufferStart_IT+0x3f8>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d027      	beq.n	8006e52 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	4a2f      	ldr	r2, [pc, #188]	@ (8006ec4 <HAL_DMAEx_MultiBufferStart_IT+0x3fc>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d022      	beq.n	8006e52 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	4a2d      	ldr	r2, [pc, #180]	@ (8006ec8 <HAL_DMAEx_MultiBufferStart_IT+0x400>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d01d      	beq.n	8006e52 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4a2c      	ldr	r2, [pc, #176]	@ (8006ecc <HAL_DMAEx_MultiBufferStart_IT+0x404>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d018      	beq.n	8006e52 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	4a2a      	ldr	r2, [pc, #168]	@ (8006ed0 <HAL_DMAEx_MultiBufferStart_IT+0x408>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d013      	beq.n	8006e52 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	4a29      	ldr	r2, [pc, #164]	@ (8006ed4 <HAL_DMAEx_MultiBufferStart_IT+0x40c>)
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d00e      	beq.n	8006e52 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	4a27      	ldr	r2, [pc, #156]	@ (8006ed8 <HAL_DMAEx_MultiBufferStart_IT+0x410>)
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d009      	beq.n	8006e52 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	4a26      	ldr	r2, [pc, #152]	@ (8006edc <HAL_DMAEx_MultiBufferStart_IT+0x414>)
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d004      	beq.n	8006e52 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	4a24      	ldr	r2, [pc, #144]	@ (8006ee0 <HAL_DMAEx_MultiBufferStart_IT+0x418>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d101      	bne.n	8006e56 <HAL_DMAEx_MultiBufferStart_IT+0x38e>
 8006e52:	2301      	movs	r3, #1
 8006e54:	e000      	b.n	8006e58 <HAL_DMAEx_MultiBufferStart_IT+0x390>
 8006e56:	2300      	movs	r3, #0
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d043      	beq.n	8006ee4 <HAL_DMAEx_MultiBufferStart_IT+0x41c>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f023 021e 	bic.w	r2, r3, #30
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f042 0216 	orr.w	r2, r2, #22
 8006e6e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR |= DMA_IT_FE;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	695a      	ldr	r2, [r3, #20]
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006e7e:	615a      	str	r2, [r3, #20]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d103      	bne.n	8006e90 <HAL_DMAEx_MultiBufferStart_IT+0x3c8>
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d043      	beq.n	8006f18 <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	681a      	ldr	r2, [r3, #0]
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f042 0208 	orr.w	r2, r2, #8
 8006e9e:	601a      	str	r2, [r3, #0]
 8006ea0:	e03a      	b.n	8006f18 <HAL_DMAEx_MultiBufferStart_IT+0x450>
 8006ea2:	bf00      	nop
 8006ea4:	40020010 	.word	0x40020010
 8006ea8:	40020028 	.word	0x40020028
 8006eac:	40020040 	.word	0x40020040
 8006eb0:	40020058 	.word	0x40020058
 8006eb4:	40020070 	.word	0x40020070
 8006eb8:	40020088 	.word	0x40020088
 8006ebc:	400200a0 	.word	0x400200a0
 8006ec0:	400200b8 	.word	0x400200b8
 8006ec4:	40020410 	.word	0x40020410
 8006ec8:	40020428 	.word	0x40020428
 8006ecc:	40020440 	.word	0x40020440
 8006ed0:	40020458 	.word	0x40020458
 8006ed4:	40020470 	.word	0x40020470
 8006ed8:	40020488 	.word	0x40020488
 8006edc:	400204a0 	.word	0x400204a0
 8006ee0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA instance(s) */
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f023 020e 	bic.w	r2, r3, #14
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f042 020a 	orr.w	r2, r2, #10
 8006ef6:	601a      	str	r2, [r3, #0]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d103      	bne.n	8006f08 <HAL_DMAEx_MultiBufferStart_IT+0x440>
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d007      	beq.n	8006f18 <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	681a      	ldr	r2, [r3, #0]
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f042 0204 	orr.w	r2, r2, #4
 8006f16:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	4a81      	ldr	r2, [pc, #516]	@ (8007124 <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d072      	beq.n	8007008 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4a80      	ldr	r2, [pc, #512]	@ (8007128 <HAL_DMAEx_MultiBufferStart_IT+0x660>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d06d      	beq.n	8007008 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4a7e      	ldr	r2, [pc, #504]	@ (800712c <HAL_DMAEx_MultiBufferStart_IT+0x664>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d068      	beq.n	8007008 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	4a7d      	ldr	r2, [pc, #500]	@ (8007130 <HAL_DMAEx_MultiBufferStart_IT+0x668>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d063      	beq.n	8007008 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4a7b      	ldr	r2, [pc, #492]	@ (8007134 <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d05e      	beq.n	8007008 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	4a7a      	ldr	r2, [pc, #488]	@ (8007138 <HAL_DMAEx_MultiBufferStart_IT+0x670>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d059      	beq.n	8007008 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4a78      	ldr	r2, [pc, #480]	@ (800713c <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d054      	beq.n	8007008 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	4a77      	ldr	r2, [pc, #476]	@ (8007140 <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d04f      	beq.n	8007008 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4a75      	ldr	r2, [pc, #468]	@ (8007144 <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d04a      	beq.n	8007008 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	4a74      	ldr	r2, [pc, #464]	@ (8007148 <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d045      	beq.n	8007008 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4a72      	ldr	r2, [pc, #456]	@ (800714c <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d040      	beq.n	8007008 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4a71      	ldr	r2, [pc, #452]	@ (8007150 <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d03b      	beq.n	8007008 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	4a6f      	ldr	r2, [pc, #444]	@ (8007154 <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d036      	beq.n	8007008 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	4a6e      	ldr	r2, [pc, #440]	@ (8007158 <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d031      	beq.n	8007008 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4a6c      	ldr	r2, [pc, #432]	@ (800715c <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d02c      	beq.n	8007008 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4a6b      	ldr	r2, [pc, #428]	@ (8007160 <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d027      	beq.n	8007008 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4a69      	ldr	r2, [pc, #420]	@ (8007164 <HAL_DMAEx_MultiBufferStart_IT+0x69c>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d022      	beq.n	8007008 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4a68      	ldr	r2, [pc, #416]	@ (8007168 <HAL_DMAEx_MultiBufferStart_IT+0x6a0>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d01d      	beq.n	8007008 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4a66      	ldr	r2, [pc, #408]	@ (800716c <HAL_DMAEx_MultiBufferStart_IT+0x6a4>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d018      	beq.n	8007008 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4a65      	ldr	r2, [pc, #404]	@ (8007170 <HAL_DMAEx_MultiBufferStart_IT+0x6a8>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d013      	beq.n	8007008 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4a63      	ldr	r2, [pc, #396]	@ (8007174 <HAL_DMAEx_MultiBufferStart_IT+0x6ac>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d00e      	beq.n	8007008 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	4a62      	ldr	r2, [pc, #392]	@ (8007178 <HAL_DMAEx_MultiBufferStart_IT+0x6b0>)
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d009      	beq.n	8007008 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	4a60      	ldr	r2, [pc, #384]	@ (800717c <HAL_DMAEx_MultiBufferStart_IT+0x6b4>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d004      	beq.n	8007008 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	4a5f      	ldr	r2, [pc, #380]	@ (8007180 <HAL_DMAEx_MultiBufferStart_IT+0x6b8>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d101      	bne.n	800700c <HAL_DMAEx_MultiBufferStart_IT+0x544>
 8007008:	2301      	movs	r3, #1
 800700a:	e000      	b.n	800700e <HAL_DMAEx_MultiBufferStart_IT+0x546>
 800700c:	2300      	movs	r3, #0
 800700e:	2b00      	cmp	r3, #0
 8007010:	d01a      	beq.n	8007048 <HAL_DMAEx_MultiBufferStart_IT+0x580>
    {
      /* Check if DMAMUX Synchronization is enabled*/
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800701c:	2b00      	cmp	r3, #0
 800701e:	d007      	beq.n	8007030 <HAL_DMAEx_MultiBufferStart_IT+0x568>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007024:	681a      	ldr	r2, [r3, #0]
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800702a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800702e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007034:	2b00      	cmp	r3, #0
 8007036:	d007      	beq.n	8007048 <HAL_DMAEx_MultiBufferStart_IT+0x580>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT*/
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800703c:	681a      	ldr	r2, [r3, #0]
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007042:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007046:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	4a35      	ldr	r2, [pc, #212]	@ (8007124 <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d04a      	beq.n	80070e8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	4a34      	ldr	r2, [pc, #208]	@ (8007128 <HAL_DMAEx_MultiBufferStart_IT+0x660>)
 8007058:	4293      	cmp	r3, r2
 800705a:	d045      	beq.n	80070e8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	4a32      	ldr	r2, [pc, #200]	@ (800712c <HAL_DMAEx_MultiBufferStart_IT+0x664>)
 8007062:	4293      	cmp	r3, r2
 8007064:	d040      	beq.n	80070e8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	4a31      	ldr	r2, [pc, #196]	@ (8007130 <HAL_DMAEx_MultiBufferStart_IT+0x668>)
 800706c:	4293      	cmp	r3, r2
 800706e:	d03b      	beq.n	80070e8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	4a2f      	ldr	r2, [pc, #188]	@ (8007134 <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
 8007076:	4293      	cmp	r3, r2
 8007078:	d036      	beq.n	80070e8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	4a2e      	ldr	r2, [pc, #184]	@ (8007138 <HAL_DMAEx_MultiBufferStart_IT+0x670>)
 8007080:	4293      	cmp	r3, r2
 8007082:	d031      	beq.n	80070e8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	4a2c      	ldr	r2, [pc, #176]	@ (800713c <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d02c      	beq.n	80070e8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	4a2b      	ldr	r2, [pc, #172]	@ (8007140 <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 8007094:	4293      	cmp	r3, r2
 8007096:	d027      	beq.n	80070e8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	4a29      	ldr	r2, [pc, #164]	@ (8007144 <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 800709e:	4293      	cmp	r3, r2
 80070a0:	d022      	beq.n	80070e8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	4a28      	ldr	r2, [pc, #160]	@ (8007148 <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 80070a8:	4293      	cmp	r3, r2
 80070aa:	d01d      	beq.n	80070e8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	4a26      	ldr	r2, [pc, #152]	@ (800714c <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d018      	beq.n	80070e8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	4a25      	ldr	r2, [pc, #148]	@ (8007150 <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 80070bc:	4293      	cmp	r3, r2
 80070be:	d013      	beq.n	80070e8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	4a23      	ldr	r2, [pc, #140]	@ (8007154 <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d00e      	beq.n	80070e8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	4a22      	ldr	r2, [pc, #136]	@ (8007158 <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d009      	beq.n	80070e8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	4a20      	ldr	r2, [pc, #128]	@ (800715c <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d004      	beq.n	80070e8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	4a1f      	ldr	r2, [pc, #124]	@ (8007160 <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d108      	bne.n	80070fa <HAL_DMAEx_MultiBufferStart_IT+0x632>
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	681a      	ldr	r2, [r3, #0]
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f042 0201 	orr.w	r2, r2, #1
 80070f6:	601a      	str	r2, [r3, #0]
 80070f8:	e00e      	b.n	8007118 <HAL_DMAEx_MultiBufferStart_IT+0x650>
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	681a      	ldr	r2, [r3, #0]
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f042 0201 	orr.w	r2, r2, #1
 8007108:	601a      	str	r2, [r3, #0]
 800710a:	e005      	b.n	8007118 <HAL_DMAEx_MultiBufferStart_IT+0x650>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007112:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return error status */
    status = HAL_ERROR;
 8007114:	2301      	movs	r3, #1
 8007116:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8007118:	7dfb      	ldrb	r3, [r7, #23]
}
 800711a:	4618      	mov	r0, r3
 800711c:	3718      	adds	r7, #24
 800711e:	46bd      	mov	sp, r7
 8007120:	bd80      	pop	{r7, pc}
 8007122:	bf00      	nop
 8007124:	40020010 	.word	0x40020010
 8007128:	40020028 	.word	0x40020028
 800712c:	40020040 	.word	0x40020040
 8007130:	40020058 	.word	0x40020058
 8007134:	40020070 	.word	0x40020070
 8007138:	40020088 	.word	0x40020088
 800713c:	400200a0 	.word	0x400200a0
 8007140:	400200b8 	.word	0x400200b8
 8007144:	40020410 	.word	0x40020410
 8007148:	40020428 	.word	0x40020428
 800714c:	40020440 	.word	0x40020440
 8007150:	40020458 	.word	0x40020458
 8007154:	40020470 	.word	0x40020470
 8007158:	40020488 	.word	0x40020488
 800715c:	400204a0 	.word	0x400204a0
 8007160:	400204b8 	.word	0x400204b8
 8007164:	58025408 	.word	0x58025408
 8007168:	5802541c 	.word	0x5802541c
 800716c:	58025430 	.word	0x58025430
 8007170:	58025444 	.word	0x58025444
 8007174:	58025458 	.word	0x58025458
 8007178:	5802546c 	.word	0x5802546c
 800717c:	58025480 	.word	0x58025480
 8007180:	58025494 	.word	0x58025494

08007184 <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 8007184:	b480      	push	{r7}
 8007186:	b085      	sub	sp, #20
 8007188:	af00      	add	r7, sp, #0
 800718a:	60f8      	str	r0, [r7, #12]
 800718c:	60b9      	str	r1, [r7, #8]
 800718e:	4613      	mov	r3, r2
 8007190:	71fb      	strb	r3, [r7, #7]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	4a39      	ldr	r2, [pc, #228]	@ (800727c <HAL_DMAEx_ChangeMemory+0xf8>)
 8007198:	4293      	cmp	r3, r2
 800719a:	d04a      	beq.n	8007232 <HAL_DMAEx_ChangeMemory+0xae>
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	4a37      	ldr	r2, [pc, #220]	@ (8007280 <HAL_DMAEx_ChangeMemory+0xfc>)
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d045      	beq.n	8007232 <HAL_DMAEx_ChangeMemory+0xae>
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	4a36      	ldr	r2, [pc, #216]	@ (8007284 <HAL_DMAEx_ChangeMemory+0x100>)
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d040      	beq.n	8007232 <HAL_DMAEx_ChangeMemory+0xae>
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	4a34      	ldr	r2, [pc, #208]	@ (8007288 <HAL_DMAEx_ChangeMemory+0x104>)
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d03b      	beq.n	8007232 <HAL_DMAEx_ChangeMemory+0xae>
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	4a33      	ldr	r2, [pc, #204]	@ (800728c <HAL_DMAEx_ChangeMemory+0x108>)
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d036      	beq.n	8007232 <HAL_DMAEx_ChangeMemory+0xae>
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	4a31      	ldr	r2, [pc, #196]	@ (8007290 <HAL_DMAEx_ChangeMemory+0x10c>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d031      	beq.n	8007232 <HAL_DMAEx_ChangeMemory+0xae>
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	4a30      	ldr	r2, [pc, #192]	@ (8007294 <HAL_DMAEx_ChangeMemory+0x110>)
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d02c      	beq.n	8007232 <HAL_DMAEx_ChangeMemory+0xae>
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	4a2e      	ldr	r2, [pc, #184]	@ (8007298 <HAL_DMAEx_ChangeMemory+0x114>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d027      	beq.n	8007232 <HAL_DMAEx_ChangeMemory+0xae>
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4a2d      	ldr	r2, [pc, #180]	@ (800729c <HAL_DMAEx_ChangeMemory+0x118>)
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d022      	beq.n	8007232 <HAL_DMAEx_ChangeMemory+0xae>
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4a2b      	ldr	r2, [pc, #172]	@ (80072a0 <HAL_DMAEx_ChangeMemory+0x11c>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d01d      	beq.n	8007232 <HAL_DMAEx_ChangeMemory+0xae>
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	4a2a      	ldr	r2, [pc, #168]	@ (80072a4 <HAL_DMAEx_ChangeMemory+0x120>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d018      	beq.n	8007232 <HAL_DMAEx_ChangeMemory+0xae>
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	4a28      	ldr	r2, [pc, #160]	@ (80072a8 <HAL_DMAEx_ChangeMemory+0x124>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d013      	beq.n	8007232 <HAL_DMAEx_ChangeMemory+0xae>
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	4a27      	ldr	r2, [pc, #156]	@ (80072ac <HAL_DMAEx_ChangeMemory+0x128>)
 8007210:	4293      	cmp	r3, r2
 8007212:	d00e      	beq.n	8007232 <HAL_DMAEx_ChangeMemory+0xae>
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4a25      	ldr	r2, [pc, #148]	@ (80072b0 <HAL_DMAEx_ChangeMemory+0x12c>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d009      	beq.n	8007232 <HAL_DMAEx_ChangeMemory+0xae>
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	4a24      	ldr	r2, [pc, #144]	@ (80072b4 <HAL_DMAEx_ChangeMemory+0x130>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d004      	beq.n	8007232 <HAL_DMAEx_ChangeMemory+0xae>
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4a22      	ldr	r2, [pc, #136]	@ (80072b8 <HAL_DMAEx_ChangeMemory+0x134>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d101      	bne.n	8007236 <HAL_DMAEx_ChangeMemory+0xb2>
 8007232:	2301      	movs	r3, #1
 8007234:	e000      	b.n	8007238 <HAL_DMAEx_ChangeMemory+0xb4>
 8007236:	2300      	movs	r3, #0
 8007238:	2b00      	cmp	r3, #0
 800723a:	d00c      	beq.n	8007256 <HAL_DMAEx_ChangeMemory+0xd2>
  {
    if(memory == MEMORY0)
 800723c:	79fb      	ldrb	r3, [r7, #7]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d104      	bne.n	800724c <HAL_DMAEx_ChangeMemory+0xc8>
    {
      /* change the memory0 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = Address;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	68ba      	ldr	r2, [r7, #8]
 8007248:	60da      	str	r2, [r3, #12]
 800724a:	e010      	b.n	800726e <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = Address;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	68ba      	ldr	r2, [r7, #8]
 8007252:	611a      	str	r2, [r3, #16]
 8007254:	e00b      	b.n	800726e <HAL_DMAEx_ChangeMemory+0xea>
    }
  }
  else /* BDMA instance(s) */
  {
    if(memory == MEMORY0)
 8007256:	79fb      	ldrb	r3, [r7, #7]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d104      	bne.n	8007266 <HAL_DMAEx_ChangeMemory+0xe2>
    {
      /* change the memory0 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = Address;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	68ba      	ldr	r2, [r7, #8]
 8007262:	60da      	str	r2, [r3, #12]
 8007264:	e003      	b.n	800726e <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = Address;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	68ba      	ldr	r2, [r7, #8]
 800726c:	611a      	str	r2, [r3, #16]
    }
  }

  return HAL_OK;
 800726e:	2300      	movs	r3, #0
}
 8007270:	4618      	mov	r0, r3
 8007272:	3714      	adds	r7, #20
 8007274:	46bd      	mov	sp, r7
 8007276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727a:	4770      	bx	lr
 800727c:	40020010 	.word	0x40020010
 8007280:	40020028 	.word	0x40020028
 8007284:	40020040 	.word	0x40020040
 8007288:	40020058 	.word	0x40020058
 800728c:	40020070 	.word	0x40020070
 8007290:	40020088 	.word	0x40020088
 8007294:	400200a0 	.word	0x400200a0
 8007298:	400200b8 	.word	0x400200b8
 800729c:	40020410 	.word	0x40020410
 80072a0:	40020428 	.word	0x40020428
 80072a4:	40020440 	.word	0x40020440
 80072a8:	40020458 	.word	0x40020458
 80072ac:	40020470 	.word	0x40020470
 80072b0:	40020488 	.word	0x40020488
 80072b4:	400204a0 	.word	0x400204a0
 80072b8:	400204b8 	.word	0x400204b8

080072bc <DMA_MultiBufferSetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80072bc:	b480      	push	{r7}
 80072be:	b085      	sub	sp, #20
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	60f8      	str	r0, [r7, #12]
 80072c4:	60b9      	str	r1, [r7, #8]
 80072c6:	607a      	str	r2, [r7, #4]
 80072c8:	603b      	str	r3, [r7, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	4a46      	ldr	r2, [pc, #280]	@ (80073e8 <DMA_MultiBufferSetConfig+0x12c>)
 80072d0:	4293      	cmp	r3, r2
 80072d2:	d04a      	beq.n	800736a <DMA_MultiBufferSetConfig+0xae>
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	4a44      	ldr	r2, [pc, #272]	@ (80073ec <DMA_MultiBufferSetConfig+0x130>)
 80072da:	4293      	cmp	r3, r2
 80072dc:	d045      	beq.n	800736a <DMA_MultiBufferSetConfig+0xae>
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	4a43      	ldr	r2, [pc, #268]	@ (80073f0 <DMA_MultiBufferSetConfig+0x134>)
 80072e4:	4293      	cmp	r3, r2
 80072e6:	d040      	beq.n	800736a <DMA_MultiBufferSetConfig+0xae>
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	4a41      	ldr	r2, [pc, #260]	@ (80073f4 <DMA_MultiBufferSetConfig+0x138>)
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d03b      	beq.n	800736a <DMA_MultiBufferSetConfig+0xae>
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	4a40      	ldr	r2, [pc, #256]	@ (80073f8 <DMA_MultiBufferSetConfig+0x13c>)
 80072f8:	4293      	cmp	r3, r2
 80072fa:	d036      	beq.n	800736a <DMA_MultiBufferSetConfig+0xae>
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	4a3e      	ldr	r2, [pc, #248]	@ (80073fc <DMA_MultiBufferSetConfig+0x140>)
 8007302:	4293      	cmp	r3, r2
 8007304:	d031      	beq.n	800736a <DMA_MultiBufferSetConfig+0xae>
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	4a3d      	ldr	r2, [pc, #244]	@ (8007400 <DMA_MultiBufferSetConfig+0x144>)
 800730c:	4293      	cmp	r3, r2
 800730e:	d02c      	beq.n	800736a <DMA_MultiBufferSetConfig+0xae>
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	4a3b      	ldr	r2, [pc, #236]	@ (8007404 <DMA_MultiBufferSetConfig+0x148>)
 8007316:	4293      	cmp	r3, r2
 8007318:	d027      	beq.n	800736a <DMA_MultiBufferSetConfig+0xae>
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	4a3a      	ldr	r2, [pc, #232]	@ (8007408 <DMA_MultiBufferSetConfig+0x14c>)
 8007320:	4293      	cmp	r3, r2
 8007322:	d022      	beq.n	800736a <DMA_MultiBufferSetConfig+0xae>
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	4a38      	ldr	r2, [pc, #224]	@ (800740c <DMA_MultiBufferSetConfig+0x150>)
 800732a:	4293      	cmp	r3, r2
 800732c:	d01d      	beq.n	800736a <DMA_MultiBufferSetConfig+0xae>
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	4a37      	ldr	r2, [pc, #220]	@ (8007410 <DMA_MultiBufferSetConfig+0x154>)
 8007334:	4293      	cmp	r3, r2
 8007336:	d018      	beq.n	800736a <DMA_MultiBufferSetConfig+0xae>
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	4a35      	ldr	r2, [pc, #212]	@ (8007414 <DMA_MultiBufferSetConfig+0x158>)
 800733e:	4293      	cmp	r3, r2
 8007340:	d013      	beq.n	800736a <DMA_MultiBufferSetConfig+0xae>
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	4a34      	ldr	r2, [pc, #208]	@ (8007418 <DMA_MultiBufferSetConfig+0x15c>)
 8007348:	4293      	cmp	r3, r2
 800734a:	d00e      	beq.n	800736a <DMA_MultiBufferSetConfig+0xae>
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	4a32      	ldr	r2, [pc, #200]	@ (800741c <DMA_MultiBufferSetConfig+0x160>)
 8007352:	4293      	cmp	r3, r2
 8007354:	d009      	beq.n	800736a <DMA_MultiBufferSetConfig+0xae>
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	4a31      	ldr	r2, [pc, #196]	@ (8007420 <DMA_MultiBufferSetConfig+0x164>)
 800735c:	4293      	cmp	r3, r2
 800735e:	d004      	beq.n	800736a <DMA_MultiBufferSetConfig+0xae>
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	4a2f      	ldr	r2, [pc, #188]	@ (8007424 <DMA_MultiBufferSetConfig+0x168>)
 8007366:	4293      	cmp	r3, r2
 8007368:	d101      	bne.n	800736e <DMA_MultiBufferSetConfig+0xb2>
 800736a:	2301      	movs	r3, #1
 800736c:	e000      	b.n	8007370 <DMA_MultiBufferSetConfig+0xb4>
 800736e:	2300      	movs	r3, #0
 8007370:	2b00      	cmp	r3, #0
 8007372:	d019      	beq.n	80073a8 <DMA_MultiBufferSetConfig+0xec>
  {
    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = DataLength;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	683a      	ldr	r2, [r7, #0]
 800737a:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	689b      	ldr	r3, [r3, #8]
 8007380:	2b40      	cmp	r3, #64	@ 0x40
 8007382:	d108      	bne.n	8007396 <DMA_MultiBufferSetConfig+0xda>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = DstAddress;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	687a      	ldr	r2, [r7, #4]
 800738a:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = SrcAddress;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	68ba      	ldr	r2, [r7, #8]
 8007392:	60da      	str	r2, [r3, #12]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
    }
  }
}
 8007394:	e021      	b.n	80073da <DMA_MultiBufferSetConfig+0x11e>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = SrcAddress;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	68ba      	ldr	r2, [r7, #8]
 800739c:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = DstAddress;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	687a      	ldr	r2, [r7, #4]
 80073a4:	60da      	str	r2, [r3, #12]
}
 80073a6:	e018      	b.n	80073da <DMA_MultiBufferSetConfig+0x11e>
    ((BDMA_Channel_TypeDef   *)hdma->Instance)->CNDTR = DataLength;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	683a      	ldr	r2, [r7, #0]
 80073ae:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	689b      	ldr	r3, [r3, #8]
 80073b4:	2b40      	cmp	r3, #64	@ 0x40
 80073b6:	d108      	bne.n	80073ca <DMA_MultiBufferSetConfig+0x10e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = DstAddress;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	687a      	ldr	r2, [r7, #4]
 80073be:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = SrcAddress;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	68ba      	ldr	r2, [r7, #8]
 80073c6:	60da      	str	r2, [r3, #12]
}
 80073c8:	e007      	b.n	80073da <DMA_MultiBufferSetConfig+0x11e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = SrcAddress;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	68ba      	ldr	r2, [r7, #8]
 80073d0:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	687a      	ldr	r2, [r7, #4]
 80073d8:	60da      	str	r2, [r3, #12]
}
 80073da:	bf00      	nop
 80073dc:	3714      	adds	r7, #20
 80073de:	46bd      	mov	sp, r7
 80073e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e4:	4770      	bx	lr
 80073e6:	bf00      	nop
 80073e8:	40020010 	.word	0x40020010
 80073ec:	40020028 	.word	0x40020028
 80073f0:	40020040 	.word	0x40020040
 80073f4:	40020058 	.word	0x40020058
 80073f8:	40020070 	.word	0x40020070
 80073fc:	40020088 	.word	0x40020088
 8007400:	400200a0 	.word	0x400200a0
 8007404:	400200b8 	.word	0x400200b8
 8007408:	40020410 	.word	0x40020410
 800740c:	40020428 	.word	0x40020428
 8007410:	40020440 	.word	0x40020440
 8007414:	40020458 	.word	0x40020458
 8007418:	40020470 	.word	0x40020470
 800741c:	40020488 	.word	0x40020488
 8007420:	400204a0 	.word	0x400204a0
 8007424:	400204b8 	.word	0x400204b8

08007428 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8007428:	b480      	push	{r7}
 800742a:	b089      	sub	sp, #36	@ 0x24
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
 8007430:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007432:	2300      	movs	r3, #0
 8007434:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007436:	4b89      	ldr	r3, [pc, #548]	@ (800765c <HAL_GPIO_Init+0x234>)
 8007438:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800743a:	e194      	b.n	8007766 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	681a      	ldr	r2, [r3, #0]
 8007440:	2101      	movs	r1, #1
 8007442:	69fb      	ldr	r3, [r7, #28]
 8007444:	fa01 f303 	lsl.w	r3, r1, r3
 8007448:	4013      	ands	r3, r2
 800744a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800744c:	693b      	ldr	r3, [r7, #16]
 800744e:	2b00      	cmp	r3, #0
 8007450:	f000 8186 	beq.w	8007760 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	685b      	ldr	r3, [r3, #4]
 8007458:	f003 0303 	and.w	r3, r3, #3
 800745c:	2b01      	cmp	r3, #1
 800745e:	d005      	beq.n	800746c <HAL_GPIO_Init+0x44>
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	685b      	ldr	r3, [r3, #4]
 8007464:	f003 0303 	and.w	r3, r3, #3
 8007468:	2b02      	cmp	r3, #2
 800746a:	d130      	bne.n	80074ce <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	689b      	ldr	r3, [r3, #8]
 8007470:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007472:	69fb      	ldr	r3, [r7, #28]
 8007474:	005b      	lsls	r3, r3, #1
 8007476:	2203      	movs	r2, #3
 8007478:	fa02 f303 	lsl.w	r3, r2, r3
 800747c:	43db      	mvns	r3, r3
 800747e:	69ba      	ldr	r2, [r7, #24]
 8007480:	4013      	ands	r3, r2
 8007482:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	68da      	ldr	r2, [r3, #12]
 8007488:	69fb      	ldr	r3, [r7, #28]
 800748a:	005b      	lsls	r3, r3, #1
 800748c:	fa02 f303 	lsl.w	r3, r2, r3
 8007490:	69ba      	ldr	r2, [r7, #24]
 8007492:	4313      	orrs	r3, r2
 8007494:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	69ba      	ldr	r2, [r7, #24]
 800749a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	685b      	ldr	r3, [r3, #4]
 80074a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80074a2:	2201      	movs	r2, #1
 80074a4:	69fb      	ldr	r3, [r7, #28]
 80074a6:	fa02 f303 	lsl.w	r3, r2, r3
 80074aa:	43db      	mvns	r3, r3
 80074ac:	69ba      	ldr	r2, [r7, #24]
 80074ae:	4013      	ands	r3, r2
 80074b0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	685b      	ldr	r3, [r3, #4]
 80074b6:	091b      	lsrs	r3, r3, #4
 80074b8:	f003 0201 	and.w	r2, r3, #1
 80074bc:	69fb      	ldr	r3, [r7, #28]
 80074be:	fa02 f303 	lsl.w	r3, r2, r3
 80074c2:	69ba      	ldr	r2, [r7, #24]
 80074c4:	4313      	orrs	r3, r2
 80074c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	69ba      	ldr	r2, [r7, #24]
 80074cc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	685b      	ldr	r3, [r3, #4]
 80074d2:	f003 0303 	and.w	r3, r3, #3
 80074d6:	2b03      	cmp	r3, #3
 80074d8:	d017      	beq.n	800750a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	68db      	ldr	r3, [r3, #12]
 80074de:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80074e0:	69fb      	ldr	r3, [r7, #28]
 80074e2:	005b      	lsls	r3, r3, #1
 80074e4:	2203      	movs	r2, #3
 80074e6:	fa02 f303 	lsl.w	r3, r2, r3
 80074ea:	43db      	mvns	r3, r3
 80074ec:	69ba      	ldr	r2, [r7, #24]
 80074ee:	4013      	ands	r3, r2
 80074f0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	689a      	ldr	r2, [r3, #8]
 80074f6:	69fb      	ldr	r3, [r7, #28]
 80074f8:	005b      	lsls	r3, r3, #1
 80074fa:	fa02 f303 	lsl.w	r3, r2, r3
 80074fe:	69ba      	ldr	r2, [r7, #24]
 8007500:	4313      	orrs	r3, r2
 8007502:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	69ba      	ldr	r2, [r7, #24]
 8007508:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	685b      	ldr	r3, [r3, #4]
 800750e:	f003 0303 	and.w	r3, r3, #3
 8007512:	2b02      	cmp	r3, #2
 8007514:	d123      	bne.n	800755e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007516:	69fb      	ldr	r3, [r7, #28]
 8007518:	08da      	lsrs	r2, r3, #3
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	3208      	adds	r2, #8
 800751e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007522:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007524:	69fb      	ldr	r3, [r7, #28]
 8007526:	f003 0307 	and.w	r3, r3, #7
 800752a:	009b      	lsls	r3, r3, #2
 800752c:	220f      	movs	r2, #15
 800752e:	fa02 f303 	lsl.w	r3, r2, r3
 8007532:	43db      	mvns	r3, r3
 8007534:	69ba      	ldr	r2, [r7, #24]
 8007536:	4013      	ands	r3, r2
 8007538:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	691a      	ldr	r2, [r3, #16]
 800753e:	69fb      	ldr	r3, [r7, #28]
 8007540:	f003 0307 	and.w	r3, r3, #7
 8007544:	009b      	lsls	r3, r3, #2
 8007546:	fa02 f303 	lsl.w	r3, r2, r3
 800754a:	69ba      	ldr	r2, [r7, #24]
 800754c:	4313      	orrs	r3, r2
 800754e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007550:	69fb      	ldr	r3, [r7, #28]
 8007552:	08da      	lsrs	r2, r3, #3
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	3208      	adds	r2, #8
 8007558:	69b9      	ldr	r1, [r7, #24]
 800755a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007564:	69fb      	ldr	r3, [r7, #28]
 8007566:	005b      	lsls	r3, r3, #1
 8007568:	2203      	movs	r2, #3
 800756a:	fa02 f303 	lsl.w	r3, r2, r3
 800756e:	43db      	mvns	r3, r3
 8007570:	69ba      	ldr	r2, [r7, #24]
 8007572:	4013      	ands	r3, r2
 8007574:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	685b      	ldr	r3, [r3, #4]
 800757a:	f003 0203 	and.w	r2, r3, #3
 800757e:	69fb      	ldr	r3, [r7, #28]
 8007580:	005b      	lsls	r3, r3, #1
 8007582:	fa02 f303 	lsl.w	r3, r2, r3
 8007586:	69ba      	ldr	r2, [r7, #24]
 8007588:	4313      	orrs	r3, r2
 800758a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	69ba      	ldr	r2, [r7, #24]
 8007590:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	685b      	ldr	r3, [r3, #4]
 8007596:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800759a:	2b00      	cmp	r3, #0
 800759c:	f000 80e0 	beq.w	8007760 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80075a0:	4b2f      	ldr	r3, [pc, #188]	@ (8007660 <HAL_GPIO_Init+0x238>)
 80075a2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80075a6:	4a2e      	ldr	r2, [pc, #184]	@ (8007660 <HAL_GPIO_Init+0x238>)
 80075a8:	f043 0302 	orr.w	r3, r3, #2
 80075ac:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80075b0:	4b2b      	ldr	r3, [pc, #172]	@ (8007660 <HAL_GPIO_Init+0x238>)
 80075b2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80075b6:	f003 0302 	and.w	r3, r3, #2
 80075ba:	60fb      	str	r3, [r7, #12]
 80075bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80075be:	4a29      	ldr	r2, [pc, #164]	@ (8007664 <HAL_GPIO_Init+0x23c>)
 80075c0:	69fb      	ldr	r3, [r7, #28]
 80075c2:	089b      	lsrs	r3, r3, #2
 80075c4:	3302      	adds	r3, #2
 80075c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80075ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80075cc:	69fb      	ldr	r3, [r7, #28]
 80075ce:	f003 0303 	and.w	r3, r3, #3
 80075d2:	009b      	lsls	r3, r3, #2
 80075d4:	220f      	movs	r2, #15
 80075d6:	fa02 f303 	lsl.w	r3, r2, r3
 80075da:	43db      	mvns	r3, r3
 80075dc:	69ba      	ldr	r2, [r7, #24]
 80075de:	4013      	ands	r3, r2
 80075e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	4a20      	ldr	r2, [pc, #128]	@ (8007668 <HAL_GPIO_Init+0x240>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d052      	beq.n	8007690 <HAL_GPIO_Init+0x268>
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	4a1f      	ldr	r2, [pc, #124]	@ (800766c <HAL_GPIO_Init+0x244>)
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d031      	beq.n	8007656 <HAL_GPIO_Init+0x22e>
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	4a1e      	ldr	r2, [pc, #120]	@ (8007670 <HAL_GPIO_Init+0x248>)
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d02b      	beq.n	8007652 <HAL_GPIO_Init+0x22a>
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	4a1d      	ldr	r2, [pc, #116]	@ (8007674 <HAL_GPIO_Init+0x24c>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d025      	beq.n	800764e <HAL_GPIO_Init+0x226>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	4a1c      	ldr	r2, [pc, #112]	@ (8007678 <HAL_GPIO_Init+0x250>)
 8007606:	4293      	cmp	r3, r2
 8007608:	d01f      	beq.n	800764a <HAL_GPIO_Init+0x222>
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	4a1b      	ldr	r2, [pc, #108]	@ (800767c <HAL_GPIO_Init+0x254>)
 800760e:	4293      	cmp	r3, r2
 8007610:	d019      	beq.n	8007646 <HAL_GPIO_Init+0x21e>
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	4a1a      	ldr	r2, [pc, #104]	@ (8007680 <HAL_GPIO_Init+0x258>)
 8007616:	4293      	cmp	r3, r2
 8007618:	d013      	beq.n	8007642 <HAL_GPIO_Init+0x21a>
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	4a19      	ldr	r2, [pc, #100]	@ (8007684 <HAL_GPIO_Init+0x25c>)
 800761e:	4293      	cmp	r3, r2
 8007620:	d00d      	beq.n	800763e <HAL_GPIO_Init+0x216>
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	4a18      	ldr	r2, [pc, #96]	@ (8007688 <HAL_GPIO_Init+0x260>)
 8007626:	4293      	cmp	r3, r2
 8007628:	d007      	beq.n	800763a <HAL_GPIO_Init+0x212>
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	4a17      	ldr	r2, [pc, #92]	@ (800768c <HAL_GPIO_Init+0x264>)
 800762e:	4293      	cmp	r3, r2
 8007630:	d101      	bne.n	8007636 <HAL_GPIO_Init+0x20e>
 8007632:	2309      	movs	r3, #9
 8007634:	e02d      	b.n	8007692 <HAL_GPIO_Init+0x26a>
 8007636:	230a      	movs	r3, #10
 8007638:	e02b      	b.n	8007692 <HAL_GPIO_Init+0x26a>
 800763a:	2308      	movs	r3, #8
 800763c:	e029      	b.n	8007692 <HAL_GPIO_Init+0x26a>
 800763e:	2307      	movs	r3, #7
 8007640:	e027      	b.n	8007692 <HAL_GPIO_Init+0x26a>
 8007642:	2306      	movs	r3, #6
 8007644:	e025      	b.n	8007692 <HAL_GPIO_Init+0x26a>
 8007646:	2305      	movs	r3, #5
 8007648:	e023      	b.n	8007692 <HAL_GPIO_Init+0x26a>
 800764a:	2304      	movs	r3, #4
 800764c:	e021      	b.n	8007692 <HAL_GPIO_Init+0x26a>
 800764e:	2303      	movs	r3, #3
 8007650:	e01f      	b.n	8007692 <HAL_GPIO_Init+0x26a>
 8007652:	2302      	movs	r3, #2
 8007654:	e01d      	b.n	8007692 <HAL_GPIO_Init+0x26a>
 8007656:	2301      	movs	r3, #1
 8007658:	e01b      	b.n	8007692 <HAL_GPIO_Init+0x26a>
 800765a:	bf00      	nop
 800765c:	58000080 	.word	0x58000080
 8007660:	58024400 	.word	0x58024400
 8007664:	58000400 	.word	0x58000400
 8007668:	58020000 	.word	0x58020000
 800766c:	58020400 	.word	0x58020400
 8007670:	58020800 	.word	0x58020800
 8007674:	58020c00 	.word	0x58020c00
 8007678:	58021000 	.word	0x58021000
 800767c:	58021400 	.word	0x58021400
 8007680:	58021800 	.word	0x58021800
 8007684:	58021c00 	.word	0x58021c00
 8007688:	58022000 	.word	0x58022000
 800768c:	58022400 	.word	0x58022400
 8007690:	2300      	movs	r3, #0
 8007692:	69fa      	ldr	r2, [r7, #28]
 8007694:	f002 0203 	and.w	r2, r2, #3
 8007698:	0092      	lsls	r2, r2, #2
 800769a:	4093      	lsls	r3, r2
 800769c:	69ba      	ldr	r2, [r7, #24]
 800769e:	4313      	orrs	r3, r2
 80076a0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80076a2:	4938      	ldr	r1, [pc, #224]	@ (8007784 <HAL_GPIO_Init+0x35c>)
 80076a4:	69fb      	ldr	r3, [r7, #28]
 80076a6:	089b      	lsrs	r3, r3, #2
 80076a8:	3302      	adds	r3, #2
 80076aa:	69ba      	ldr	r2, [r7, #24]
 80076ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80076b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80076b8:	693b      	ldr	r3, [r7, #16]
 80076ba:	43db      	mvns	r3, r3
 80076bc:	69ba      	ldr	r2, [r7, #24]
 80076be:	4013      	ands	r3, r2
 80076c0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	685b      	ldr	r3, [r3, #4]
 80076c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d003      	beq.n	80076d6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80076ce:	69ba      	ldr	r2, [r7, #24]
 80076d0:	693b      	ldr	r3, [r7, #16]
 80076d2:	4313      	orrs	r3, r2
 80076d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80076d6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80076da:	69bb      	ldr	r3, [r7, #24]
 80076dc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80076de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80076e2:	685b      	ldr	r3, [r3, #4]
 80076e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80076e6:	693b      	ldr	r3, [r7, #16]
 80076e8:	43db      	mvns	r3, r3
 80076ea:	69ba      	ldr	r2, [r7, #24]
 80076ec:	4013      	ands	r3, r2
 80076ee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	685b      	ldr	r3, [r3, #4]
 80076f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d003      	beq.n	8007704 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80076fc:	69ba      	ldr	r2, [r7, #24]
 80076fe:	693b      	ldr	r3, [r7, #16]
 8007700:	4313      	orrs	r3, r2
 8007702:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007704:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007708:	69bb      	ldr	r3, [r7, #24]
 800770a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800770c:	697b      	ldr	r3, [r7, #20]
 800770e:	685b      	ldr	r3, [r3, #4]
 8007710:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007712:	693b      	ldr	r3, [r7, #16]
 8007714:	43db      	mvns	r3, r3
 8007716:	69ba      	ldr	r2, [r7, #24]
 8007718:	4013      	ands	r3, r2
 800771a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	685b      	ldr	r3, [r3, #4]
 8007720:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007724:	2b00      	cmp	r3, #0
 8007726:	d003      	beq.n	8007730 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8007728:	69ba      	ldr	r2, [r7, #24]
 800772a:	693b      	ldr	r3, [r7, #16]
 800772c:	4313      	orrs	r3, r2
 800772e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007730:	697b      	ldr	r3, [r7, #20]
 8007732:	69ba      	ldr	r2, [r7, #24]
 8007734:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007736:	697b      	ldr	r3, [r7, #20]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800773c:	693b      	ldr	r3, [r7, #16]
 800773e:	43db      	mvns	r3, r3
 8007740:	69ba      	ldr	r2, [r7, #24]
 8007742:	4013      	ands	r3, r2
 8007744:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	685b      	ldr	r3, [r3, #4]
 800774a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800774e:	2b00      	cmp	r3, #0
 8007750:	d003      	beq.n	800775a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8007752:	69ba      	ldr	r2, [r7, #24]
 8007754:	693b      	ldr	r3, [r7, #16]
 8007756:	4313      	orrs	r3, r2
 8007758:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800775a:	697b      	ldr	r3, [r7, #20]
 800775c:	69ba      	ldr	r2, [r7, #24]
 800775e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007760:	69fb      	ldr	r3, [r7, #28]
 8007762:	3301      	adds	r3, #1
 8007764:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	681a      	ldr	r2, [r3, #0]
 800776a:	69fb      	ldr	r3, [r7, #28]
 800776c:	fa22 f303 	lsr.w	r3, r2, r3
 8007770:	2b00      	cmp	r3, #0
 8007772:	f47f ae63 	bne.w	800743c <HAL_GPIO_Init+0x14>
  }
}
 8007776:	bf00      	nop
 8007778:	bf00      	nop
 800777a:	3724      	adds	r7, #36	@ 0x24
 800777c:	46bd      	mov	sp, r7
 800777e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007782:	4770      	bx	lr
 8007784:	58000400 	.word	0x58000400

08007788 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007788:	b480      	push	{r7}
 800778a:	b083      	sub	sp, #12
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
 8007790:	460b      	mov	r3, r1
 8007792:	807b      	strh	r3, [r7, #2]
 8007794:	4613      	mov	r3, r2
 8007796:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007798:	787b      	ldrb	r3, [r7, #1]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d003      	beq.n	80077a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800779e:	887a      	ldrh	r2, [r7, #2]
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80077a4:	e003      	b.n	80077ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80077a6:	887b      	ldrh	r3, [r7, #2]
 80077a8:	041a      	lsls	r2, r3, #16
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	619a      	str	r2, [r3, #24]
}
 80077ae:	bf00      	nop
 80077b0:	370c      	adds	r7, #12
 80077b2:	46bd      	mov	sp, r7
 80077b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b8:	4770      	bx	lr
	...

080077bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b082      	sub	sp, #8
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d101      	bne.n	80077ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80077ca:	2301      	movs	r3, #1
 80077cc:	e08b      	b.n	80078e6 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80077d4:	b2db      	uxtb	r3, r3
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d106      	bne.n	80077e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2200      	movs	r2, #0
 80077de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	f7fa feb2 	bl	800254c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2224      	movs	r2, #36	@ 0x24
 80077ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	681a      	ldr	r2, [r3, #0]
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f022 0201 	bic.w	r2, r2, #1
 80077fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	685a      	ldr	r2, [r3, #4]
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800780c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	689a      	ldr	r2, [r3, #8]
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800781c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	68db      	ldr	r3, [r3, #12]
 8007822:	2b01      	cmp	r3, #1
 8007824:	d107      	bne.n	8007836 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	689a      	ldr	r2, [r3, #8]
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007832:	609a      	str	r2, [r3, #8]
 8007834:	e006      	b.n	8007844 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	689a      	ldr	r2, [r3, #8]
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8007842:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	68db      	ldr	r3, [r3, #12]
 8007848:	2b02      	cmp	r3, #2
 800784a:	d108      	bne.n	800785e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	685a      	ldr	r2, [r3, #4]
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800785a:	605a      	str	r2, [r3, #4]
 800785c:	e007      	b.n	800786e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	685a      	ldr	r2, [r3, #4]
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800786c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	6859      	ldr	r1, [r3, #4]
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681a      	ldr	r2, [r3, #0]
 8007878:	4b1d      	ldr	r3, [pc, #116]	@ (80078f0 <HAL_I2C_Init+0x134>)
 800787a:	430b      	orrs	r3, r1
 800787c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	68da      	ldr	r2, [r3, #12]
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800788c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	691a      	ldr	r2, [r3, #16]
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	695b      	ldr	r3, [r3, #20]
 8007896:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	699b      	ldr	r3, [r3, #24]
 800789e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	430a      	orrs	r2, r1
 80078a6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	69d9      	ldr	r1, [r3, #28]
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	6a1a      	ldr	r2, [r3, #32]
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	430a      	orrs	r2, r1
 80078b6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	681a      	ldr	r2, [r3, #0]
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f042 0201 	orr.w	r2, r2, #1
 80078c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2200      	movs	r2, #0
 80078cc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2220      	movs	r2, #32
 80078d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2200      	movs	r2, #0
 80078da:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2200      	movs	r2, #0
 80078e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80078e4:	2300      	movs	r3, #0
}
 80078e6:	4618      	mov	r0, r3
 80078e8:	3708      	adds	r7, #8
 80078ea:	46bd      	mov	sp, r7
 80078ec:	bd80      	pop	{r7, pc}
 80078ee:	bf00      	nop
 80078f0:	02008000 	.word	0x02008000

080078f4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b088      	sub	sp, #32
 80078f8:	af02      	add	r7, sp, #8
 80078fa:	60f8      	str	r0, [r7, #12]
 80078fc:	607a      	str	r2, [r7, #4]
 80078fe:	461a      	mov	r2, r3
 8007900:	460b      	mov	r3, r1
 8007902:	817b      	strh	r3, [r7, #10]
 8007904:	4613      	mov	r3, r2
 8007906:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800790e:	b2db      	uxtb	r3, r3
 8007910:	2b20      	cmp	r3, #32
 8007912:	f040 80fd 	bne.w	8007b10 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800791c:	2b01      	cmp	r3, #1
 800791e:	d101      	bne.n	8007924 <HAL_I2C_Master_Transmit+0x30>
 8007920:	2302      	movs	r3, #2
 8007922:	e0f6      	b.n	8007b12 <HAL_I2C_Master_Transmit+0x21e>
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	2201      	movs	r2, #1
 8007928:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800792c:	f7fb fdd2 	bl	80034d4 <HAL_GetTick>
 8007930:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007932:	693b      	ldr	r3, [r7, #16]
 8007934:	9300      	str	r3, [sp, #0]
 8007936:	2319      	movs	r3, #25
 8007938:	2201      	movs	r2, #1
 800793a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800793e:	68f8      	ldr	r0, [r7, #12]
 8007940:	f001 f891 	bl	8008a66 <I2C_WaitOnFlagUntilTimeout>
 8007944:	4603      	mov	r3, r0
 8007946:	2b00      	cmp	r3, #0
 8007948:	d001      	beq.n	800794e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800794a:	2301      	movs	r3, #1
 800794c:	e0e1      	b.n	8007b12 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	2221      	movs	r2, #33	@ 0x21
 8007952:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	2210      	movs	r2, #16
 800795a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	2200      	movs	r2, #0
 8007962:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	687a      	ldr	r2, [r7, #4]
 8007968:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	893a      	ldrh	r2, [r7, #8]
 800796e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	2200      	movs	r2, #0
 8007974:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800797a:	b29b      	uxth	r3, r3
 800797c:	2bff      	cmp	r3, #255	@ 0xff
 800797e:	d906      	bls.n	800798e <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	22ff      	movs	r2, #255	@ 0xff
 8007984:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8007986:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800798a:	617b      	str	r3, [r7, #20]
 800798c:	e007      	b.n	800799e <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007992:	b29a      	uxth	r2, r3
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8007998:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800799c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d024      	beq.n	80079f0 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079aa:	781a      	ldrb	r2, [r3, #0]
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079b6:	1c5a      	adds	r2, r3, #1
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80079c0:	b29b      	uxth	r3, r3
 80079c2:	3b01      	subs	r3, #1
 80079c4:	b29a      	uxth	r2, r3
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80079ce:	3b01      	subs	r3, #1
 80079d0:	b29a      	uxth	r2, r3
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80079da:	b2db      	uxtb	r3, r3
 80079dc:	3301      	adds	r3, #1
 80079de:	b2da      	uxtb	r2, r3
 80079e0:	8979      	ldrh	r1, [r7, #10]
 80079e2:	4b4e      	ldr	r3, [pc, #312]	@ (8007b1c <HAL_I2C_Master_Transmit+0x228>)
 80079e4:	9300      	str	r3, [sp, #0]
 80079e6:	697b      	ldr	r3, [r7, #20]
 80079e8:	68f8      	ldr	r0, [r7, #12]
 80079ea:	f001 fa8b 	bl	8008f04 <I2C_TransferConfig>
 80079ee:	e066      	b.n	8007abe <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80079f4:	b2da      	uxtb	r2, r3
 80079f6:	8979      	ldrh	r1, [r7, #10]
 80079f8:	4b48      	ldr	r3, [pc, #288]	@ (8007b1c <HAL_I2C_Master_Transmit+0x228>)
 80079fa:	9300      	str	r3, [sp, #0]
 80079fc:	697b      	ldr	r3, [r7, #20]
 80079fe:	68f8      	ldr	r0, [r7, #12]
 8007a00:	f001 fa80 	bl	8008f04 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8007a04:	e05b      	b.n	8007abe <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007a06:	693a      	ldr	r2, [r7, #16]
 8007a08:	6a39      	ldr	r1, [r7, #32]
 8007a0a:	68f8      	ldr	r0, [r7, #12]
 8007a0c:	f001 f884 	bl	8008b18 <I2C_WaitOnTXISFlagUntilTimeout>
 8007a10:	4603      	mov	r3, r0
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d001      	beq.n	8007a1a <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8007a16:	2301      	movs	r3, #1
 8007a18:	e07b      	b.n	8007b12 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a1e:	781a      	ldrb	r2, [r3, #0]
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a2a:	1c5a      	adds	r2, r3, #1
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a34:	b29b      	uxth	r3, r3
 8007a36:	3b01      	subs	r3, #1
 8007a38:	b29a      	uxth	r2, r3
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007a42:	3b01      	subs	r3, #1
 8007a44:	b29a      	uxth	r2, r3
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a4e:	b29b      	uxth	r3, r3
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d034      	beq.n	8007abe <HAL_I2C_Master_Transmit+0x1ca>
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d130      	bne.n	8007abe <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007a5c:	693b      	ldr	r3, [r7, #16]
 8007a5e:	9300      	str	r3, [sp, #0]
 8007a60:	6a3b      	ldr	r3, [r7, #32]
 8007a62:	2200      	movs	r2, #0
 8007a64:	2180      	movs	r1, #128	@ 0x80
 8007a66:	68f8      	ldr	r0, [r7, #12]
 8007a68:	f000 fffd 	bl	8008a66 <I2C_WaitOnFlagUntilTimeout>
 8007a6c:	4603      	mov	r3, r0
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d001      	beq.n	8007a76 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8007a72:	2301      	movs	r3, #1
 8007a74:	e04d      	b.n	8007b12 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a7a:	b29b      	uxth	r3, r3
 8007a7c:	2bff      	cmp	r3, #255	@ 0xff
 8007a7e:	d90e      	bls.n	8007a9e <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	22ff      	movs	r2, #255	@ 0xff
 8007a84:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007a8a:	b2da      	uxtb	r2, r3
 8007a8c:	8979      	ldrh	r1, [r7, #10]
 8007a8e:	2300      	movs	r3, #0
 8007a90:	9300      	str	r3, [sp, #0]
 8007a92:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007a96:	68f8      	ldr	r0, [r7, #12]
 8007a98:	f001 fa34 	bl	8008f04 <I2C_TransferConfig>
 8007a9c:	e00f      	b.n	8007abe <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007aa2:	b29a      	uxth	r2, r3
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007aac:	b2da      	uxtb	r2, r3
 8007aae:	8979      	ldrh	r1, [r7, #10]
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	9300      	str	r3, [sp, #0]
 8007ab4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007ab8:	68f8      	ldr	r0, [r7, #12]
 8007aba:	f001 fa23 	bl	8008f04 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ac2:	b29b      	uxth	r3, r3
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d19e      	bne.n	8007a06 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007ac8:	693a      	ldr	r2, [r7, #16]
 8007aca:	6a39      	ldr	r1, [r7, #32]
 8007acc:	68f8      	ldr	r0, [r7, #12]
 8007ace:	f001 f86a 	bl	8008ba6 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d001      	beq.n	8007adc <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8007ad8:	2301      	movs	r3, #1
 8007ada:	e01a      	b.n	8007b12 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	2220      	movs	r2, #32
 8007ae2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	6859      	ldr	r1, [r3, #4]
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	681a      	ldr	r2, [r3, #0]
 8007aee:	4b0c      	ldr	r3, [pc, #48]	@ (8007b20 <HAL_I2C_Master_Transmit+0x22c>)
 8007af0:	400b      	ands	r3, r1
 8007af2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	2220      	movs	r2, #32
 8007af8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	2200      	movs	r2, #0
 8007b00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	2200      	movs	r2, #0
 8007b08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	e000      	b.n	8007b12 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8007b10:	2302      	movs	r3, #2
  }
}
 8007b12:	4618      	mov	r0, r3
 8007b14:	3718      	adds	r7, #24
 8007b16:	46bd      	mov	sp, r7
 8007b18:	bd80      	pop	{r7, pc}
 8007b1a:	bf00      	nop
 8007b1c:	80002000 	.word	0x80002000
 8007b20:	fe00e800 	.word	0xfe00e800

08007b24 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b088      	sub	sp, #32
 8007b28:	af02      	add	r7, sp, #8
 8007b2a:	60f8      	str	r0, [r7, #12]
 8007b2c:	607a      	str	r2, [r7, #4]
 8007b2e:	461a      	mov	r2, r3
 8007b30:	460b      	mov	r3, r1
 8007b32:	817b      	strh	r3, [r7, #10]
 8007b34:	4613      	mov	r3, r2
 8007b36:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007b3e:	b2db      	uxtb	r3, r3
 8007b40:	2b20      	cmp	r3, #32
 8007b42:	f040 80db 	bne.w	8007cfc <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007b4c:	2b01      	cmp	r3, #1
 8007b4e:	d101      	bne.n	8007b54 <HAL_I2C_Master_Receive+0x30>
 8007b50:	2302      	movs	r3, #2
 8007b52:	e0d4      	b.n	8007cfe <HAL_I2C_Master_Receive+0x1da>
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	2201      	movs	r2, #1
 8007b58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007b5c:	f7fb fcba 	bl	80034d4 <HAL_GetTick>
 8007b60:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007b62:	697b      	ldr	r3, [r7, #20]
 8007b64:	9300      	str	r3, [sp, #0]
 8007b66:	2319      	movs	r3, #25
 8007b68:	2201      	movs	r2, #1
 8007b6a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007b6e:	68f8      	ldr	r0, [r7, #12]
 8007b70:	f000 ff79 	bl	8008a66 <I2C_WaitOnFlagUntilTimeout>
 8007b74:	4603      	mov	r3, r0
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d001      	beq.n	8007b7e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8007b7a:	2301      	movs	r3, #1
 8007b7c:	e0bf      	b.n	8007cfe <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	2222      	movs	r2, #34	@ 0x22
 8007b82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	2210      	movs	r2, #16
 8007b8a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	2200      	movs	r2, #0
 8007b92:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	687a      	ldr	r2, [r7, #4]
 8007b98:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	893a      	ldrh	r2, [r7, #8]
 8007b9e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007baa:	b29b      	uxth	r3, r3
 8007bac:	2bff      	cmp	r3, #255	@ 0xff
 8007bae:	d90e      	bls.n	8007bce <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	22ff      	movs	r2, #255	@ 0xff
 8007bb4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007bba:	b2da      	uxtb	r2, r3
 8007bbc:	8979      	ldrh	r1, [r7, #10]
 8007bbe:	4b52      	ldr	r3, [pc, #328]	@ (8007d08 <HAL_I2C_Master_Receive+0x1e4>)
 8007bc0:	9300      	str	r3, [sp, #0]
 8007bc2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007bc6:	68f8      	ldr	r0, [r7, #12]
 8007bc8:	f001 f99c 	bl	8008f04 <I2C_TransferConfig>
 8007bcc:	e06d      	b.n	8007caa <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007bd2:	b29a      	uxth	r2, r3
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007bdc:	b2da      	uxtb	r2, r3
 8007bde:	8979      	ldrh	r1, [r7, #10]
 8007be0:	4b49      	ldr	r3, [pc, #292]	@ (8007d08 <HAL_I2C_Master_Receive+0x1e4>)
 8007be2:	9300      	str	r3, [sp, #0]
 8007be4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007be8:	68f8      	ldr	r0, [r7, #12]
 8007bea:	f001 f98b 	bl	8008f04 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8007bee:	e05c      	b.n	8007caa <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007bf0:	697a      	ldr	r2, [r7, #20]
 8007bf2:	6a39      	ldr	r1, [r7, #32]
 8007bf4:	68f8      	ldr	r0, [r7, #12]
 8007bf6:	f001 f819 	bl	8008c2c <I2C_WaitOnRXNEFlagUntilTimeout>
 8007bfa:	4603      	mov	r3, r0
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d001      	beq.n	8007c04 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8007c00:	2301      	movs	r3, #1
 8007c02:	e07c      	b.n	8007cfe <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c0e:	b2d2      	uxtb	r2, r2
 8007c10:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c16:	1c5a      	adds	r2, r3, #1
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007c20:	3b01      	subs	r3, #1
 8007c22:	b29a      	uxth	r2, r3
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007c2c:	b29b      	uxth	r3, r3
 8007c2e:	3b01      	subs	r3, #1
 8007c30:	b29a      	uxth	r2, r3
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007c3a:	b29b      	uxth	r3, r3
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d034      	beq.n	8007caa <HAL_I2C_Master_Receive+0x186>
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d130      	bne.n	8007caa <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007c48:	697b      	ldr	r3, [r7, #20]
 8007c4a:	9300      	str	r3, [sp, #0]
 8007c4c:	6a3b      	ldr	r3, [r7, #32]
 8007c4e:	2200      	movs	r2, #0
 8007c50:	2180      	movs	r1, #128	@ 0x80
 8007c52:	68f8      	ldr	r0, [r7, #12]
 8007c54:	f000 ff07 	bl	8008a66 <I2C_WaitOnFlagUntilTimeout>
 8007c58:	4603      	mov	r3, r0
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d001      	beq.n	8007c62 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8007c5e:	2301      	movs	r3, #1
 8007c60:	e04d      	b.n	8007cfe <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007c66:	b29b      	uxth	r3, r3
 8007c68:	2bff      	cmp	r3, #255	@ 0xff
 8007c6a:	d90e      	bls.n	8007c8a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	22ff      	movs	r2, #255	@ 0xff
 8007c70:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007c76:	b2da      	uxtb	r2, r3
 8007c78:	8979      	ldrh	r1, [r7, #10]
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	9300      	str	r3, [sp, #0]
 8007c7e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007c82:	68f8      	ldr	r0, [r7, #12]
 8007c84:	f001 f93e 	bl	8008f04 <I2C_TransferConfig>
 8007c88:	e00f      	b.n	8007caa <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007c8e:	b29a      	uxth	r2, r3
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007c98:	b2da      	uxtb	r2, r3
 8007c9a:	8979      	ldrh	r1, [r7, #10]
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	9300      	str	r3, [sp, #0]
 8007ca0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007ca4:	68f8      	ldr	r0, [r7, #12]
 8007ca6:	f001 f92d 	bl	8008f04 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007cae:	b29b      	uxth	r3, r3
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d19d      	bne.n	8007bf0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007cb4:	697a      	ldr	r2, [r7, #20]
 8007cb6:	6a39      	ldr	r1, [r7, #32]
 8007cb8:	68f8      	ldr	r0, [r7, #12]
 8007cba:	f000 ff74 	bl	8008ba6 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007cbe:	4603      	mov	r3, r0
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d001      	beq.n	8007cc8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8007cc4:	2301      	movs	r3, #1
 8007cc6:	e01a      	b.n	8007cfe <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	2220      	movs	r2, #32
 8007cce:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	6859      	ldr	r1, [r3, #4]
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	681a      	ldr	r2, [r3, #0]
 8007cda:	4b0c      	ldr	r3, [pc, #48]	@ (8007d0c <HAL_I2C_Master_Receive+0x1e8>)
 8007cdc:	400b      	ands	r3, r1
 8007cde:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	2220      	movs	r2, #32
 8007ce4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	2200      	movs	r2, #0
 8007cec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	e000      	b.n	8007cfe <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8007cfc:	2302      	movs	r3, #2
  }
}
 8007cfe:	4618      	mov	r0, r3
 8007d00:	3718      	adds	r7, #24
 8007d02:	46bd      	mov	sp, r7
 8007d04:	bd80      	pop	{r7, pc}
 8007d06:	bf00      	nop
 8007d08:	80002400 	.word	0x80002400
 8007d0c:	fe00e800 	.word	0xfe00e800

08007d10 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b084      	sub	sp, #16
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	699b      	ldr	r3, [r3, #24]
 8007d1e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d005      	beq.n	8007d3c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d34:	68ba      	ldr	r2, [r7, #8]
 8007d36:	68f9      	ldr	r1, [r7, #12]
 8007d38:	6878      	ldr	r0, [r7, #4]
 8007d3a:	4798      	blx	r3
  }
}
 8007d3c:	bf00      	nop
 8007d3e:	3710      	adds	r7, #16
 8007d40:	46bd      	mov	sp, r7
 8007d42:	bd80      	pop	{r7, pc}

08007d44 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b086      	sub	sp, #24
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	699b      	ldr	r3, [r3, #24]
 8007d52:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8007d5c:	697b      	ldr	r3, [r7, #20]
 8007d5e:	0a1b      	lsrs	r3, r3, #8
 8007d60:	f003 0301 	and.w	r3, r3, #1
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d010      	beq.n	8007d8a <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8007d68:	693b      	ldr	r3, [r7, #16]
 8007d6a:	09db      	lsrs	r3, r3, #7
 8007d6c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d00a      	beq.n	8007d8a <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d78:	f043 0201 	orr.w	r2, r3, #1
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007d88:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8007d8a:	697b      	ldr	r3, [r7, #20]
 8007d8c:	0a9b      	lsrs	r3, r3, #10
 8007d8e:	f003 0301 	and.w	r3, r3, #1
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d010      	beq.n	8007db8 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8007d96:	693b      	ldr	r3, [r7, #16]
 8007d98:	09db      	lsrs	r3, r3, #7
 8007d9a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d00a      	beq.n	8007db8 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007da6:	f043 0208 	orr.w	r2, r3, #8
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007db6:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8007db8:	697b      	ldr	r3, [r7, #20]
 8007dba:	0a5b      	lsrs	r3, r3, #9
 8007dbc:	f003 0301 	and.w	r3, r3, #1
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d010      	beq.n	8007de6 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8007dc4:	693b      	ldr	r3, [r7, #16]
 8007dc6:	09db      	lsrs	r3, r3, #7
 8007dc8:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d00a      	beq.n	8007de6 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007dd4:	f043 0202 	orr.w	r2, r3, #2
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007de4:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007dea:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	f003 030b 	and.w	r3, r3, #11
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d003      	beq.n	8007dfe <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8007df6:	68f9      	ldr	r1, [r7, #12]
 8007df8:	6878      	ldr	r0, [r7, #4]
 8007dfa:	f000 fcdb 	bl	80087b4 <I2C_ITError>
  }
}
 8007dfe:	bf00      	nop
 8007e00:	3718      	adds	r7, #24
 8007e02:	46bd      	mov	sp, r7
 8007e04:	bd80      	pop	{r7, pc}

08007e06 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007e06:	b480      	push	{r7}
 8007e08:	b083      	sub	sp, #12
 8007e0a:	af00      	add	r7, sp, #0
 8007e0c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8007e0e:	bf00      	nop
 8007e10:	370c      	adds	r7, #12
 8007e12:	46bd      	mov	sp, r7
 8007e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e18:	4770      	bx	lr

08007e1a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007e1a:	b480      	push	{r7}
 8007e1c:	b083      	sub	sp, #12
 8007e1e:	af00      	add	r7, sp, #0
 8007e20:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8007e22:	bf00      	nop
 8007e24:	370c      	adds	r7, #12
 8007e26:	46bd      	mov	sp, r7
 8007e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2c:	4770      	bx	lr

08007e2e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8007e2e:	b480      	push	{r7}
 8007e30:	b083      	sub	sp, #12
 8007e32:	af00      	add	r7, sp, #0
 8007e34:	6078      	str	r0, [r7, #4]
 8007e36:	460b      	mov	r3, r1
 8007e38:	70fb      	strb	r3, [r7, #3]
 8007e3a:	4613      	mov	r3, r2
 8007e3c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8007e3e:	bf00      	nop
 8007e40:	370c      	adds	r7, #12
 8007e42:	46bd      	mov	sp, r7
 8007e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e48:	4770      	bx	lr

08007e4a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007e4a:	b480      	push	{r7}
 8007e4c:	b083      	sub	sp, #12
 8007e4e:	af00      	add	r7, sp, #0
 8007e50:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8007e52:	bf00      	nop
 8007e54:	370c      	adds	r7, #12
 8007e56:	46bd      	mov	sp, r7
 8007e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5c:	4770      	bx	lr

08007e5e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8007e5e:	b480      	push	{r7}
 8007e60:	b083      	sub	sp, #12
 8007e62:	af00      	add	r7, sp, #0
 8007e64:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8007e66:	bf00      	nop
 8007e68:	370c      	adds	r7, #12
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e70:	4770      	bx	lr

08007e72 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007e72:	b480      	push	{r7}
 8007e74:	b083      	sub	sp, #12
 8007e76:	af00      	add	r7, sp, #0
 8007e78:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8007e7a:	bf00      	nop
 8007e7c:	370c      	adds	r7, #12
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e84:	4770      	bx	lr

08007e86 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8007e86:	b580      	push	{r7, lr}
 8007e88:	b086      	sub	sp, #24
 8007e8a:	af00      	add	r7, sp, #0
 8007e8c:	60f8      	str	r0, [r7, #12]
 8007e8e:	60b9      	str	r1, [r7, #8]
 8007e90:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e96:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8007e98:	68bb      	ldr	r3, [r7, #8]
 8007e9a:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007ea2:	2b01      	cmp	r3, #1
 8007ea4:	d101      	bne.n	8007eaa <I2C_Slave_ISR_IT+0x24>
 8007ea6:	2302      	movs	r3, #2
 8007ea8:	e0ed      	b.n	8008086 <I2C_Slave_ISR_IT+0x200>
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	2201      	movs	r2, #1
 8007eae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007eb2:	693b      	ldr	r3, [r7, #16]
 8007eb4:	095b      	lsrs	r3, r3, #5
 8007eb6:	f003 0301 	and.w	r3, r3, #1
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d00a      	beq.n	8007ed4 <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	095b      	lsrs	r3, r3, #5
 8007ec2:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d004      	beq.n	8007ed4 <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8007eca:	6939      	ldr	r1, [r7, #16]
 8007ecc:	68f8      	ldr	r0, [r7, #12]
 8007ece:	f000 f9c1 	bl	8008254 <I2C_ITSlaveCplt>
 8007ed2:	e0d3      	b.n	800807c <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007ed4:	693b      	ldr	r3, [r7, #16]
 8007ed6:	091b      	lsrs	r3, r3, #4
 8007ed8:	f003 0301 	and.w	r3, r3, #1
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d04d      	beq.n	8007f7c <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	091b      	lsrs	r3, r3, #4
 8007ee4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d047      	beq.n	8007f7c <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ef0:	b29b      	uxth	r3, r3
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d128      	bne.n	8007f48 <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007efc:	b2db      	uxtb	r3, r3
 8007efe:	2b28      	cmp	r3, #40	@ 0x28
 8007f00:	d108      	bne.n	8007f14 <I2C_Slave_ISR_IT+0x8e>
 8007f02:	697b      	ldr	r3, [r7, #20]
 8007f04:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007f08:	d104      	bne.n	8007f14 <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8007f0a:	6939      	ldr	r1, [r7, #16]
 8007f0c:	68f8      	ldr	r0, [r7, #12]
 8007f0e:	f000 fbfb 	bl	8008708 <I2C_ITListenCplt>
 8007f12:	e032      	b.n	8007f7a <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007f1a:	b2db      	uxtb	r3, r3
 8007f1c:	2b29      	cmp	r3, #41	@ 0x29
 8007f1e:	d10e      	bne.n	8007f3e <I2C_Slave_ISR_IT+0xb8>
 8007f20:	697b      	ldr	r3, [r7, #20]
 8007f22:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007f26:	d00a      	beq.n	8007f3e <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	2210      	movs	r2, #16
 8007f2e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8007f30:	68f8      	ldr	r0, [r7, #12]
 8007f32:	f000 fd56 	bl	80089e2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8007f36:	68f8      	ldr	r0, [r7, #12]
 8007f38:	f000 f92d 	bl	8008196 <I2C_ITSlaveSeqCplt>
 8007f3c:	e01d      	b.n	8007f7a <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	2210      	movs	r2, #16
 8007f44:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8007f46:	e096      	b.n	8008076 <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	2210      	movs	r2, #16
 8007f4e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f54:	f043 0204 	orr.w	r2, r3, #4
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8007f5c:	697b      	ldr	r3, [r7, #20]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d004      	beq.n	8007f6c <I2C_Slave_ISR_IT+0xe6>
 8007f62:	697b      	ldr	r3, [r7, #20]
 8007f64:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007f68:	f040 8085 	bne.w	8008076 <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f70:	4619      	mov	r1, r3
 8007f72:	68f8      	ldr	r0, [r7, #12]
 8007f74:	f000 fc1e 	bl	80087b4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8007f78:	e07d      	b.n	8008076 <I2C_Slave_ISR_IT+0x1f0>
 8007f7a:	e07c      	b.n	8008076 <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8007f7c:	693b      	ldr	r3, [r7, #16]
 8007f7e:	089b      	lsrs	r3, r3, #2
 8007f80:	f003 0301 	and.w	r3, r3, #1
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d030      	beq.n	8007fea <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	089b      	lsrs	r3, r3, #2
 8007f8c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d02a      	beq.n	8007fea <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f98:	b29b      	uxth	r3, r3
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d018      	beq.n	8007fd0 <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fa8:	b2d2      	uxtb	r2, r2
 8007faa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fb0:	1c5a      	adds	r2, r3, #1
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007fba:	3b01      	subs	r3, #1
 8007fbc:	b29a      	uxth	r2, r3
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007fc6:	b29b      	uxth	r3, r3
 8007fc8:	3b01      	subs	r3, #1
 8007fca:	b29a      	uxth	r2, r3
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007fd4:	b29b      	uxth	r3, r3
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d14f      	bne.n	800807a <I2C_Slave_ISR_IT+0x1f4>
 8007fda:	697b      	ldr	r3, [r7, #20]
 8007fdc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007fe0:	d04b      	beq.n	800807a <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8007fe2:	68f8      	ldr	r0, [r7, #12]
 8007fe4:	f000 f8d7 	bl	8008196 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8007fe8:	e047      	b.n	800807a <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007fea:	693b      	ldr	r3, [r7, #16]
 8007fec:	08db      	lsrs	r3, r3, #3
 8007fee:	f003 0301 	and.w	r3, r3, #1
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d00a      	beq.n	800800c <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	08db      	lsrs	r3, r3, #3
 8007ffa:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d004      	beq.n	800800c <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8008002:	6939      	ldr	r1, [r7, #16]
 8008004:	68f8      	ldr	r0, [r7, #12]
 8008006:	f000 f842 	bl	800808e <I2C_ITAddrCplt>
 800800a:	e037      	b.n	800807c <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800800c:	693b      	ldr	r3, [r7, #16]
 800800e:	085b      	lsrs	r3, r3, #1
 8008010:	f003 0301 	and.w	r3, r3, #1
 8008014:	2b00      	cmp	r3, #0
 8008016:	d031      	beq.n	800807c <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	085b      	lsrs	r3, r3, #1
 800801c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8008020:	2b00      	cmp	r3, #0
 8008022:	d02b      	beq.n	800807c <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008028:	b29b      	uxth	r3, r3
 800802a:	2b00      	cmp	r3, #0
 800802c:	d018      	beq.n	8008060 <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008032:	781a      	ldrb	r2, [r3, #0]
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800803e:	1c5a      	adds	r2, r3, #1
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008048:	b29b      	uxth	r3, r3
 800804a:	3b01      	subs	r3, #1
 800804c:	b29a      	uxth	r2, r3
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008056:	3b01      	subs	r3, #1
 8008058:	b29a      	uxth	r2, r3
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	851a      	strh	r2, [r3, #40]	@ 0x28
 800805e:	e00d      	b.n	800807c <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8008060:	697b      	ldr	r3, [r7, #20]
 8008062:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008066:	d002      	beq.n	800806e <I2C_Slave_ISR_IT+0x1e8>
 8008068:	697b      	ldr	r3, [r7, #20]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d106      	bne.n	800807c <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800806e:	68f8      	ldr	r0, [r7, #12]
 8008070:	f000 f891 	bl	8008196 <I2C_ITSlaveSeqCplt>
 8008074:	e002      	b.n	800807c <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 8008076:	bf00      	nop
 8008078:	e000      	b.n	800807c <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 800807a:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	2200      	movs	r2, #0
 8008080:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8008084:	2300      	movs	r3, #0
}
 8008086:	4618      	mov	r0, r3
 8008088:	3718      	adds	r7, #24
 800808a:	46bd      	mov	sp, r7
 800808c:	bd80      	pop	{r7, pc}

0800808e <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800808e:	b580      	push	{r7, lr}
 8008090:	b084      	sub	sp, #16
 8008092:	af00      	add	r7, sp, #0
 8008094:	6078      	str	r0, [r7, #4]
 8008096:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800809e:	b2db      	uxtb	r3, r3
 80080a0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80080a4:	2b28      	cmp	r3, #40	@ 0x28
 80080a6:	d16a      	bne.n	800817e <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	699b      	ldr	r3, [r3, #24]
 80080ae:	0c1b      	lsrs	r3, r3, #16
 80080b0:	b2db      	uxtb	r3, r3
 80080b2:	f003 0301 	and.w	r3, r3, #1
 80080b6:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	699b      	ldr	r3, [r3, #24]
 80080be:	0c1b      	lsrs	r3, r3, #16
 80080c0:	b29b      	uxth	r3, r3
 80080c2:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80080c6:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	689b      	ldr	r3, [r3, #8]
 80080ce:	b29b      	uxth	r3, r3
 80080d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80080d4:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	68db      	ldr	r3, [r3, #12]
 80080dc:	b29b      	uxth	r3, r3
 80080de:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80080e2:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	68db      	ldr	r3, [r3, #12]
 80080e8:	2b02      	cmp	r3, #2
 80080ea:	d138      	bne.n	800815e <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80080ec:	897b      	ldrh	r3, [r7, #10]
 80080ee:	09db      	lsrs	r3, r3, #7
 80080f0:	b29a      	uxth	r2, r3
 80080f2:	89bb      	ldrh	r3, [r7, #12]
 80080f4:	4053      	eors	r3, r2
 80080f6:	b29b      	uxth	r3, r3
 80080f8:	f003 0306 	and.w	r3, r3, #6
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d11c      	bne.n	800813a <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8008100:	897b      	ldrh	r3, [r7, #10]
 8008102:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008108:	1c5a      	adds	r2, r3, #1
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008112:	2b02      	cmp	r3, #2
 8008114:	d13b      	bne.n	800818e <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	2200      	movs	r2, #0
 800811a:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	2208      	movs	r2, #8
 8008122:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2200      	movs	r2, #0
 8008128:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800812c:	89ba      	ldrh	r2, [r7, #12]
 800812e:	7bfb      	ldrb	r3, [r7, #15]
 8008130:	4619      	mov	r1, r3
 8008132:	6878      	ldr	r0, [r7, #4]
 8008134:	f7ff fe7b 	bl	8007e2e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8008138:	e029      	b.n	800818e <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800813a:	893b      	ldrh	r3, [r7, #8]
 800813c:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800813e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008142:	6878      	ldr	r0, [r7, #4]
 8008144:	f000 ff10 	bl	8008f68 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2200      	movs	r2, #0
 800814c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008150:	89ba      	ldrh	r2, [r7, #12]
 8008152:	7bfb      	ldrb	r3, [r7, #15]
 8008154:	4619      	mov	r1, r3
 8008156:	6878      	ldr	r0, [r7, #4]
 8008158:	f7ff fe69 	bl	8007e2e <HAL_I2C_AddrCallback>
}
 800815c:	e017      	b.n	800818e <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800815e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008162:	6878      	ldr	r0, [r7, #4]
 8008164:	f000 ff00 	bl	8008f68 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2200      	movs	r2, #0
 800816c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008170:	89ba      	ldrh	r2, [r7, #12]
 8008172:	7bfb      	ldrb	r3, [r7, #15]
 8008174:	4619      	mov	r1, r3
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	f7ff fe59 	bl	8007e2e <HAL_I2C_AddrCallback>
}
 800817c:	e007      	b.n	800818e <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	2208      	movs	r2, #8
 8008184:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	2200      	movs	r2, #0
 800818a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 800818e:	bf00      	nop
 8008190:	3710      	adds	r7, #16
 8008192:	46bd      	mov	sp, r7
 8008194:	bd80      	pop	{r7, pc}

08008196 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8008196:	b580      	push	{r7, lr}
 8008198:	b084      	sub	sp, #16
 800819a:	af00      	add	r7, sp, #0
 800819c:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2200      	movs	r2, #0
 80081aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	0b9b      	lsrs	r3, r3, #14
 80081b2:	f003 0301 	and.w	r3, r3, #1
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d008      	beq.n	80081cc <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	681a      	ldr	r2, [r3, #0]
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80081c8:	601a      	str	r2, [r3, #0]
 80081ca:	e00d      	b.n	80081e8 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	0bdb      	lsrs	r3, r3, #15
 80081d0:	f003 0301 	and.w	r3, r3, #1
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d007      	beq.n	80081e8 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	681a      	ldr	r2, [r3, #0]
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80081e6:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80081ee:	b2db      	uxtb	r3, r3
 80081f0:	2b29      	cmp	r3, #41	@ 0x29
 80081f2:	d112      	bne.n	800821a <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2228      	movs	r2, #40	@ 0x28
 80081f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2221      	movs	r2, #33	@ 0x21
 8008200:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8008202:	2101      	movs	r1, #1
 8008204:	6878      	ldr	r0, [r7, #4]
 8008206:	f000 feaf 	bl	8008f68 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	2200      	movs	r2, #0
 800820e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008212:	6878      	ldr	r0, [r7, #4]
 8008214:	f7ff fdf7 	bl	8007e06 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8008218:	e017      	b.n	800824a <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008220:	b2db      	uxtb	r3, r3
 8008222:	2b2a      	cmp	r3, #42	@ 0x2a
 8008224:	d111      	bne.n	800824a <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	2228      	movs	r2, #40	@ 0x28
 800822a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	2222      	movs	r2, #34	@ 0x22
 8008232:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8008234:	2102      	movs	r1, #2
 8008236:	6878      	ldr	r0, [r7, #4]
 8008238:	f000 fe96 	bl	8008f68 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2200      	movs	r2, #0
 8008240:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008244:	6878      	ldr	r0, [r7, #4]
 8008246:	f7ff fde8 	bl	8007e1a <HAL_I2C_SlaveRxCpltCallback>
}
 800824a:	bf00      	nop
 800824c:	3710      	adds	r7, #16
 800824e:	46bd      	mov	sp, r7
 8008250:	bd80      	pop	{r7, pc}
	...

08008254 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008254:	b580      	push	{r7, lr}
 8008256:	b086      	sub	sp, #24
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
 800825c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8008266:	683b      	ldr	r3, [r7, #0]
 8008268:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800826e:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008276:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	2220      	movs	r2, #32
 800827e:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8008280:	7afb      	ldrb	r3, [r7, #11]
 8008282:	2b21      	cmp	r3, #33	@ 0x21
 8008284:	d002      	beq.n	800828c <I2C_ITSlaveCplt+0x38>
 8008286:	7afb      	ldrb	r3, [r7, #11]
 8008288:	2b29      	cmp	r3, #41	@ 0x29
 800828a:	d108      	bne.n	800829e <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800828c:	f248 0101 	movw	r1, #32769	@ 0x8001
 8008290:	6878      	ldr	r0, [r7, #4]
 8008292:	f000 fe69 	bl	8008f68 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	2221      	movs	r2, #33	@ 0x21
 800829a:	631a      	str	r2, [r3, #48]	@ 0x30
 800829c:	e019      	b.n	80082d2 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800829e:	7afb      	ldrb	r3, [r7, #11]
 80082a0:	2b22      	cmp	r3, #34	@ 0x22
 80082a2:	d002      	beq.n	80082aa <I2C_ITSlaveCplt+0x56>
 80082a4:	7afb      	ldrb	r3, [r7, #11]
 80082a6:	2b2a      	cmp	r3, #42	@ 0x2a
 80082a8:	d108      	bne.n	80082bc <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80082aa:	f248 0102 	movw	r1, #32770	@ 0x8002
 80082ae:	6878      	ldr	r0, [r7, #4]
 80082b0:	f000 fe5a 	bl	8008f68 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2222      	movs	r2, #34	@ 0x22
 80082b8:	631a      	str	r2, [r3, #48]	@ 0x30
 80082ba:	e00a      	b.n	80082d2 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 80082bc:	7afb      	ldrb	r3, [r7, #11]
 80082be:	2b28      	cmp	r3, #40	@ 0x28
 80082c0:	d107      	bne.n	80082d2 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80082c2:	f248 0103 	movw	r1, #32771	@ 0x8003
 80082c6:	6878      	ldr	r0, [r7, #4]
 80082c8:	f000 fe4e 	bl	8008f68 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2200      	movs	r2, #0
 80082d0:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	685a      	ldr	r2, [r3, #4]
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80082e0:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	6859      	ldr	r1, [r3, #4]
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681a      	ldr	r2, [r3, #0]
 80082ec:	4b80      	ldr	r3, [pc, #512]	@ (80084f0 <I2C_ITSlaveCplt+0x29c>)
 80082ee:	400b      	ands	r3, r1
 80082f0:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80082f2:	6878      	ldr	r0, [r7, #4]
 80082f4:	f000 fb75 	bl	80089e2 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80082f8:	693b      	ldr	r3, [r7, #16]
 80082fa:	0b9b      	lsrs	r3, r3, #14
 80082fc:	f003 0301 	and.w	r3, r3, #1
 8008300:	2b00      	cmp	r3, #0
 8008302:	d07a      	beq.n	80083fa <I2C_ITSlaveCplt+0x1a6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	681a      	ldr	r2, [r3, #0]
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008312:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008318:	2b00      	cmp	r3, #0
 800831a:	f000 8112 	beq.w	8008542 <I2C_ITSlaveCplt+0x2ee>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	4a73      	ldr	r2, [pc, #460]	@ (80084f4 <I2C_ITSlaveCplt+0x2a0>)
 8008326:	4293      	cmp	r3, r2
 8008328:	d059      	beq.n	80083de <I2C_ITSlaveCplt+0x18a>
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	4a71      	ldr	r2, [pc, #452]	@ (80084f8 <I2C_ITSlaveCplt+0x2a4>)
 8008332:	4293      	cmp	r3, r2
 8008334:	d053      	beq.n	80083de <I2C_ITSlaveCplt+0x18a>
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	4a6f      	ldr	r2, [pc, #444]	@ (80084fc <I2C_ITSlaveCplt+0x2a8>)
 800833e:	4293      	cmp	r3, r2
 8008340:	d04d      	beq.n	80083de <I2C_ITSlaveCplt+0x18a>
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	4a6d      	ldr	r2, [pc, #436]	@ (8008500 <I2C_ITSlaveCplt+0x2ac>)
 800834a:	4293      	cmp	r3, r2
 800834c:	d047      	beq.n	80083de <I2C_ITSlaveCplt+0x18a>
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	4a6b      	ldr	r2, [pc, #428]	@ (8008504 <I2C_ITSlaveCplt+0x2b0>)
 8008356:	4293      	cmp	r3, r2
 8008358:	d041      	beq.n	80083de <I2C_ITSlaveCplt+0x18a>
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	4a69      	ldr	r2, [pc, #420]	@ (8008508 <I2C_ITSlaveCplt+0x2b4>)
 8008362:	4293      	cmp	r3, r2
 8008364:	d03b      	beq.n	80083de <I2C_ITSlaveCplt+0x18a>
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	4a67      	ldr	r2, [pc, #412]	@ (800850c <I2C_ITSlaveCplt+0x2b8>)
 800836e:	4293      	cmp	r3, r2
 8008370:	d035      	beq.n	80083de <I2C_ITSlaveCplt+0x18a>
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	4a65      	ldr	r2, [pc, #404]	@ (8008510 <I2C_ITSlaveCplt+0x2bc>)
 800837a:	4293      	cmp	r3, r2
 800837c:	d02f      	beq.n	80083de <I2C_ITSlaveCplt+0x18a>
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	4a63      	ldr	r2, [pc, #396]	@ (8008514 <I2C_ITSlaveCplt+0x2c0>)
 8008386:	4293      	cmp	r3, r2
 8008388:	d029      	beq.n	80083de <I2C_ITSlaveCplt+0x18a>
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	4a61      	ldr	r2, [pc, #388]	@ (8008518 <I2C_ITSlaveCplt+0x2c4>)
 8008392:	4293      	cmp	r3, r2
 8008394:	d023      	beq.n	80083de <I2C_ITSlaveCplt+0x18a>
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	4a5f      	ldr	r2, [pc, #380]	@ (800851c <I2C_ITSlaveCplt+0x2c8>)
 800839e:	4293      	cmp	r3, r2
 80083a0:	d01d      	beq.n	80083de <I2C_ITSlaveCplt+0x18a>
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	4a5d      	ldr	r2, [pc, #372]	@ (8008520 <I2C_ITSlaveCplt+0x2cc>)
 80083aa:	4293      	cmp	r3, r2
 80083ac:	d017      	beq.n	80083de <I2C_ITSlaveCplt+0x18a>
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	4a5b      	ldr	r2, [pc, #364]	@ (8008524 <I2C_ITSlaveCplt+0x2d0>)
 80083b6:	4293      	cmp	r3, r2
 80083b8:	d011      	beq.n	80083de <I2C_ITSlaveCplt+0x18a>
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	4a59      	ldr	r2, [pc, #356]	@ (8008528 <I2C_ITSlaveCplt+0x2d4>)
 80083c2:	4293      	cmp	r3, r2
 80083c4:	d00b      	beq.n	80083de <I2C_ITSlaveCplt+0x18a>
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	4a57      	ldr	r2, [pc, #348]	@ (800852c <I2C_ITSlaveCplt+0x2d8>)
 80083ce:	4293      	cmp	r3, r2
 80083d0:	d005      	beq.n	80083de <I2C_ITSlaveCplt+0x18a>
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	4a55      	ldr	r2, [pc, #340]	@ (8008530 <I2C_ITSlaveCplt+0x2dc>)
 80083da:	4293      	cmp	r3, r2
 80083dc:	d105      	bne.n	80083ea <I2C_ITSlaveCplt+0x196>
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	685b      	ldr	r3, [r3, #4]
 80083e6:	b29b      	uxth	r3, r3
 80083e8:	e004      	b.n	80083f4 <I2C_ITSlaveCplt+0x1a0>
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	685b      	ldr	r3, [r3, #4]
 80083f2:	b29b      	uxth	r3, r3
 80083f4:	687a      	ldr	r2, [r7, #4]
 80083f6:	8553      	strh	r3, [r2, #42]	@ 0x2a
 80083f8:	e0a3      	b.n	8008542 <I2C_ITSlaveCplt+0x2ee>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80083fa:	693b      	ldr	r3, [r7, #16]
 80083fc:	0bdb      	lsrs	r3, r3, #15
 80083fe:	f003 0301 	and.w	r3, r3, #1
 8008402:	2b00      	cmp	r3, #0
 8008404:	f000 809d 	beq.w	8008542 <I2C_ITSlaveCplt+0x2ee>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	681a      	ldr	r2, [r3, #0]
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008416:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800841c:	2b00      	cmp	r3, #0
 800841e:	f000 8090 	beq.w	8008542 <I2C_ITSlaveCplt+0x2ee>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	4a32      	ldr	r2, [pc, #200]	@ (80084f4 <I2C_ITSlaveCplt+0x2a0>)
 800842a:	4293      	cmp	r3, r2
 800842c:	d059      	beq.n	80084e2 <I2C_ITSlaveCplt+0x28e>
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	4a30      	ldr	r2, [pc, #192]	@ (80084f8 <I2C_ITSlaveCplt+0x2a4>)
 8008436:	4293      	cmp	r3, r2
 8008438:	d053      	beq.n	80084e2 <I2C_ITSlaveCplt+0x28e>
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	4a2e      	ldr	r2, [pc, #184]	@ (80084fc <I2C_ITSlaveCplt+0x2a8>)
 8008442:	4293      	cmp	r3, r2
 8008444:	d04d      	beq.n	80084e2 <I2C_ITSlaveCplt+0x28e>
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	4a2c      	ldr	r2, [pc, #176]	@ (8008500 <I2C_ITSlaveCplt+0x2ac>)
 800844e:	4293      	cmp	r3, r2
 8008450:	d047      	beq.n	80084e2 <I2C_ITSlaveCplt+0x28e>
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	4a2a      	ldr	r2, [pc, #168]	@ (8008504 <I2C_ITSlaveCplt+0x2b0>)
 800845a:	4293      	cmp	r3, r2
 800845c:	d041      	beq.n	80084e2 <I2C_ITSlaveCplt+0x28e>
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	4a28      	ldr	r2, [pc, #160]	@ (8008508 <I2C_ITSlaveCplt+0x2b4>)
 8008466:	4293      	cmp	r3, r2
 8008468:	d03b      	beq.n	80084e2 <I2C_ITSlaveCplt+0x28e>
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	4a26      	ldr	r2, [pc, #152]	@ (800850c <I2C_ITSlaveCplt+0x2b8>)
 8008472:	4293      	cmp	r3, r2
 8008474:	d035      	beq.n	80084e2 <I2C_ITSlaveCplt+0x28e>
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	4a24      	ldr	r2, [pc, #144]	@ (8008510 <I2C_ITSlaveCplt+0x2bc>)
 800847e:	4293      	cmp	r3, r2
 8008480:	d02f      	beq.n	80084e2 <I2C_ITSlaveCplt+0x28e>
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	4a22      	ldr	r2, [pc, #136]	@ (8008514 <I2C_ITSlaveCplt+0x2c0>)
 800848a:	4293      	cmp	r3, r2
 800848c:	d029      	beq.n	80084e2 <I2C_ITSlaveCplt+0x28e>
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	4a20      	ldr	r2, [pc, #128]	@ (8008518 <I2C_ITSlaveCplt+0x2c4>)
 8008496:	4293      	cmp	r3, r2
 8008498:	d023      	beq.n	80084e2 <I2C_ITSlaveCplt+0x28e>
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	4a1e      	ldr	r2, [pc, #120]	@ (800851c <I2C_ITSlaveCplt+0x2c8>)
 80084a2:	4293      	cmp	r3, r2
 80084a4:	d01d      	beq.n	80084e2 <I2C_ITSlaveCplt+0x28e>
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	4a1c      	ldr	r2, [pc, #112]	@ (8008520 <I2C_ITSlaveCplt+0x2cc>)
 80084ae:	4293      	cmp	r3, r2
 80084b0:	d017      	beq.n	80084e2 <I2C_ITSlaveCplt+0x28e>
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	4a1a      	ldr	r2, [pc, #104]	@ (8008524 <I2C_ITSlaveCplt+0x2d0>)
 80084ba:	4293      	cmp	r3, r2
 80084bc:	d011      	beq.n	80084e2 <I2C_ITSlaveCplt+0x28e>
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	4a18      	ldr	r2, [pc, #96]	@ (8008528 <I2C_ITSlaveCplt+0x2d4>)
 80084c6:	4293      	cmp	r3, r2
 80084c8:	d00b      	beq.n	80084e2 <I2C_ITSlaveCplt+0x28e>
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	4a16      	ldr	r2, [pc, #88]	@ (800852c <I2C_ITSlaveCplt+0x2d8>)
 80084d2:	4293      	cmp	r3, r2
 80084d4:	d005      	beq.n	80084e2 <I2C_ITSlaveCplt+0x28e>
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	4a14      	ldr	r2, [pc, #80]	@ (8008530 <I2C_ITSlaveCplt+0x2dc>)
 80084de:	4293      	cmp	r3, r2
 80084e0:	d128      	bne.n	8008534 <I2C_ITSlaveCplt+0x2e0>
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	685b      	ldr	r3, [r3, #4]
 80084ea:	b29b      	uxth	r3, r3
 80084ec:	e027      	b.n	800853e <I2C_ITSlaveCplt+0x2ea>
 80084ee:	bf00      	nop
 80084f0:	fe00e800 	.word	0xfe00e800
 80084f4:	40020010 	.word	0x40020010
 80084f8:	40020028 	.word	0x40020028
 80084fc:	40020040 	.word	0x40020040
 8008500:	40020058 	.word	0x40020058
 8008504:	40020070 	.word	0x40020070
 8008508:	40020088 	.word	0x40020088
 800850c:	400200a0 	.word	0x400200a0
 8008510:	400200b8 	.word	0x400200b8
 8008514:	40020410 	.word	0x40020410
 8008518:	40020428 	.word	0x40020428
 800851c:	40020440 	.word	0x40020440
 8008520:	40020458 	.word	0x40020458
 8008524:	40020470 	.word	0x40020470
 8008528:	40020488 	.word	0x40020488
 800852c:	400204a0 	.word	0x400204a0
 8008530:	400204b8 	.word	0x400204b8
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	685b      	ldr	r3, [r3, #4]
 800853c:	b29b      	uxth	r3, r3
 800853e:	687a      	ldr	r2, [r7, #4]
 8008540:	8553      	strh	r3, [r2, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8008542:	697b      	ldr	r3, [r7, #20]
 8008544:	089b      	lsrs	r3, r3, #2
 8008546:	f003 0301 	and.w	r3, r3, #1
 800854a:	2b00      	cmp	r3, #0
 800854c:	d020      	beq.n	8008590 <I2C_ITSlaveCplt+0x33c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800854e:	697b      	ldr	r3, [r7, #20]
 8008550:	f023 0304 	bic.w	r3, r3, #4
 8008554:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008560:	b2d2      	uxtb	r2, r2
 8008562:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008568:	1c5a      	adds	r2, r3, #1
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008572:	2b00      	cmp	r3, #0
 8008574:	d00c      	beq.n	8008590 <I2C_ITSlaveCplt+0x33c>
    {
      hi2c->XferSize--;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800857a:	3b01      	subs	r3, #1
 800857c:	b29a      	uxth	r2, r3
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008586:	b29b      	uxth	r3, r3
 8008588:	3b01      	subs	r3, #1
 800858a:	b29a      	uxth	r2, r3
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008594:	b29b      	uxth	r3, r3
 8008596:	2b00      	cmp	r3, #0
 8008598:	d005      	beq.n	80085a6 <I2C_ITSlaveCplt+0x352>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800859e:	f043 0204 	orr.w	r2, r3, #4
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80085a6:	697b      	ldr	r3, [r7, #20]
 80085a8:	091b      	lsrs	r3, r3, #4
 80085aa:	f003 0301 	and.w	r3, r3, #1
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d04a      	beq.n	8008648 <I2C_ITSlaveCplt+0x3f4>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 80085b2:	693b      	ldr	r3, [r7, #16]
 80085b4:	091b      	lsrs	r3, r3, #4
 80085b6:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d044      	beq.n	8008648 <I2C_ITSlaveCplt+0x3f4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80085c2:	b29b      	uxth	r3, r3
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d128      	bne.n	800861a <I2C_ITSlaveCplt+0x3c6>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80085ce:	b2db      	uxtb	r3, r3
 80085d0:	2b28      	cmp	r3, #40	@ 0x28
 80085d2:	d108      	bne.n	80085e6 <I2C_ITSlaveCplt+0x392>
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80085da:	d104      	bne.n	80085e6 <I2C_ITSlaveCplt+0x392>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80085dc:	6979      	ldr	r1, [r7, #20]
 80085de:	6878      	ldr	r0, [r7, #4]
 80085e0:	f000 f892 	bl	8008708 <I2C_ITListenCplt>
 80085e4:	e030      	b.n	8008648 <I2C_ITSlaveCplt+0x3f4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80085ec:	b2db      	uxtb	r3, r3
 80085ee:	2b29      	cmp	r3, #41	@ 0x29
 80085f0:	d10e      	bne.n	8008610 <I2C_ITSlaveCplt+0x3bc>
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80085f8:	d00a      	beq.n	8008610 <I2C_ITSlaveCplt+0x3bc>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	2210      	movs	r2, #16
 8008600:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8008602:	6878      	ldr	r0, [r7, #4]
 8008604:	f000 f9ed 	bl	80089e2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8008608:	6878      	ldr	r0, [r7, #4]
 800860a:	f7ff fdc4 	bl	8008196 <I2C_ITSlaveSeqCplt>
 800860e:	e01b      	b.n	8008648 <I2C_ITSlaveCplt+0x3f4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	2210      	movs	r2, #16
 8008616:	61da      	str	r2, [r3, #28]
 8008618:	e016      	b.n	8008648 <I2C_ITSlaveCplt+0x3f4>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	2210      	movs	r2, #16
 8008620:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008626:	f043 0204 	orr.w	r2, r3, #4
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d003      	beq.n	800863c <I2C_ITSlaveCplt+0x3e8>
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800863a:	d105      	bne.n	8008648 <I2C_ITSlaveCplt+0x3f4>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008640:	4619      	mov	r1, r3
 8008642:	6878      	ldr	r0, [r7, #4]
 8008644:	f000 f8b6 	bl	80087b4 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2200      	movs	r2, #0
 800864c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	2200      	movs	r2, #0
 8008654:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800865a:	2b00      	cmp	r3, #0
 800865c:	d010      	beq.n	8008680 <I2C_ITSlaveCplt+0x42c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008662:	4619      	mov	r1, r3
 8008664:	6878      	ldr	r0, [r7, #4]
 8008666:	f000 f8a5 	bl	80087b4 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008670:	b2db      	uxtb	r3, r3
 8008672:	2b28      	cmp	r3, #40	@ 0x28
 8008674:	d141      	bne.n	80086fa <I2C_ITSlaveCplt+0x4a6>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8008676:	6979      	ldr	r1, [r7, #20]
 8008678:	6878      	ldr	r0, [r7, #4]
 800867a:	f000 f845 	bl	8008708 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800867e:	e03c      	b.n	80086fa <I2C_ITSlaveCplt+0x4a6>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008684:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008688:	d014      	beq.n	80086b4 <I2C_ITSlaveCplt+0x460>
    I2C_ITSlaveSeqCplt(hi2c);
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	f7ff fd83 	bl	8008196 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	4a1c      	ldr	r2, [pc, #112]	@ (8008704 <I2C_ITSlaveCplt+0x4b0>)
 8008694:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	2220      	movs	r2, #32
 800869a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	2200      	movs	r2, #0
 80086a2:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2200      	movs	r2, #0
 80086a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80086ac:	6878      	ldr	r0, [r7, #4]
 80086ae:	f7ff fbcc 	bl	8007e4a <HAL_I2C_ListenCpltCallback>
}
 80086b2:	e022      	b.n	80086fa <I2C_ITSlaveCplt+0x4a6>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80086ba:	b2db      	uxtb	r3, r3
 80086bc:	2b22      	cmp	r3, #34	@ 0x22
 80086be:	d10e      	bne.n	80086de <I2C_ITSlaveCplt+0x48a>
    hi2c->State = HAL_I2C_STATE_READY;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2220      	movs	r2, #32
 80086c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2200      	movs	r2, #0
 80086cc:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	2200      	movs	r2, #0
 80086d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80086d6:	6878      	ldr	r0, [r7, #4]
 80086d8:	f7ff fb9f 	bl	8007e1a <HAL_I2C_SlaveRxCpltCallback>
}
 80086dc:	e00d      	b.n	80086fa <I2C_ITSlaveCplt+0x4a6>
    hi2c->State = HAL_I2C_STATE_READY;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	2220      	movs	r2, #32
 80086e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	2200      	movs	r2, #0
 80086ea:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2200      	movs	r2, #0
 80086f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80086f4:	6878      	ldr	r0, [r7, #4]
 80086f6:	f7ff fb86 	bl	8007e06 <HAL_I2C_SlaveTxCpltCallback>
}
 80086fa:	bf00      	nop
 80086fc:	3718      	adds	r7, #24
 80086fe:	46bd      	mov	sp, r7
 8008700:	bd80      	pop	{r7, pc}
 8008702:	bf00      	nop
 8008704:	ffff0000 	.word	0xffff0000

08008708 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008708:	b580      	push	{r7, lr}
 800870a:	b082      	sub	sp, #8
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
 8008710:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	4a26      	ldr	r2, [pc, #152]	@ (80087b0 <I2C_ITListenCplt+0xa8>)
 8008716:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	2200      	movs	r2, #0
 800871c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	2220      	movs	r2, #32
 8008722:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	2200      	movs	r2, #0
 800872a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	2200      	movs	r2, #0
 8008732:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8008734:	683b      	ldr	r3, [r7, #0]
 8008736:	089b      	lsrs	r3, r3, #2
 8008738:	f003 0301 	and.w	r3, r3, #1
 800873c:	2b00      	cmp	r3, #0
 800873e:	d022      	beq.n	8008786 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800874a:	b2d2      	uxtb	r2, r2
 800874c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008752:	1c5a      	adds	r2, r3, #1
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800875c:	2b00      	cmp	r3, #0
 800875e:	d012      	beq.n	8008786 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008764:	3b01      	subs	r3, #1
 8008766:	b29a      	uxth	r2, r3
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008770:	b29b      	uxth	r3, r3
 8008772:	3b01      	subs	r3, #1
 8008774:	b29a      	uxth	r2, r3
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800877e:	f043 0204 	orr.w	r2, r3, #4
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8008786:	f248 0103 	movw	r1, #32771	@ 0x8003
 800878a:	6878      	ldr	r0, [r7, #4]
 800878c:	f000 fbec 	bl	8008f68 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	2210      	movs	r2, #16
 8008796:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	2200      	movs	r2, #0
 800879c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80087a0:	6878      	ldr	r0, [r7, #4]
 80087a2:	f7ff fb52 	bl	8007e4a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80087a6:	bf00      	nop
 80087a8:	3708      	adds	r7, #8
 80087aa:	46bd      	mov	sp, r7
 80087ac:	bd80      	pop	{r7, pc}
 80087ae:	bf00      	nop
 80087b0:	ffff0000 	.word	0xffff0000

080087b4 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b084      	sub	sp, #16
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
 80087bc:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80087c4:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	2200      	movs	r2, #0
 80087ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	4a6d      	ldr	r2, [pc, #436]	@ (8008988 <I2C_ITError+0x1d4>)
 80087d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2200      	movs	r2, #0
 80087d8:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80087de:	683b      	ldr	r3, [r7, #0]
 80087e0:	431a      	orrs	r2, r3
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80087e6:	7bfb      	ldrb	r3, [r7, #15]
 80087e8:	2b28      	cmp	r3, #40	@ 0x28
 80087ea:	d005      	beq.n	80087f8 <I2C_ITError+0x44>
 80087ec:	7bfb      	ldrb	r3, [r7, #15]
 80087ee:	2b29      	cmp	r3, #41	@ 0x29
 80087f0:	d002      	beq.n	80087f8 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80087f2:	7bfb      	ldrb	r3, [r7, #15]
 80087f4:	2b2a      	cmp	r3, #42	@ 0x2a
 80087f6:	d10b      	bne.n	8008810 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80087f8:	2103      	movs	r1, #3
 80087fa:	6878      	ldr	r0, [r7, #4]
 80087fc:	f000 fbb4 	bl	8008f68 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2228      	movs	r2, #40	@ 0x28
 8008804:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	4a60      	ldr	r2, [pc, #384]	@ (800898c <I2C_ITError+0x1d8>)
 800880c:	635a      	str	r2, [r3, #52]	@ 0x34
 800880e:	e030      	b.n	8008872 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8008810:	f248 0103 	movw	r1, #32771	@ 0x8003
 8008814:	6878      	ldr	r0, [r7, #4]
 8008816:	f000 fba7 	bl	8008f68 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800881a:	6878      	ldr	r0, [r7, #4]
 800881c:	f000 f8e1 	bl	80089e2 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008826:	b2db      	uxtb	r3, r3
 8008828:	2b60      	cmp	r3, #96	@ 0x60
 800882a:	d01f      	beq.n	800886c <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	2220      	movs	r2, #32
 8008830:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	699b      	ldr	r3, [r3, #24]
 800883a:	f003 0320 	and.w	r3, r3, #32
 800883e:	2b20      	cmp	r3, #32
 8008840:	d114      	bne.n	800886c <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	699b      	ldr	r3, [r3, #24]
 8008848:	f003 0310 	and.w	r3, r3, #16
 800884c:	2b10      	cmp	r3, #16
 800884e:	d109      	bne.n	8008864 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	2210      	movs	r2, #16
 8008856:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800885c:	f043 0204 	orr.w	r2, r3, #4
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	2220      	movs	r2, #32
 800886a:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2200      	movs	r2, #0
 8008870:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008876:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800887c:	2b00      	cmp	r3, #0
 800887e:	d039      	beq.n	80088f4 <I2C_ITError+0x140>
 8008880:	68bb      	ldr	r3, [r7, #8]
 8008882:	2b11      	cmp	r3, #17
 8008884:	d002      	beq.n	800888c <I2C_ITError+0xd8>
 8008886:	68bb      	ldr	r3, [r7, #8]
 8008888:	2b21      	cmp	r3, #33	@ 0x21
 800888a:	d133      	bne.n	80088f4 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008896:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800889a:	d107      	bne.n	80088ac <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	681a      	ldr	r2, [r3, #0]
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80088aa:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088b0:	4618      	mov	r0, r3
 80088b2:	f7fd fd13 	bl	80062dc <HAL_DMA_GetState>
 80088b6:	4603      	mov	r3, r0
 80088b8:	2b01      	cmp	r3, #1
 80088ba:	d017      	beq.n	80088ec <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088c0:	4a33      	ldr	r2, [pc, #204]	@ (8008990 <I2C_ITError+0x1dc>)
 80088c2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	2200      	movs	r2, #0
 80088c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088d0:	4618      	mov	r0, r3
 80088d2:	f7fc fb93 	bl	8004ffc <HAL_DMA_Abort_IT>
 80088d6:	4603      	mov	r3, r0
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d04d      	beq.n	8008978 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80088e2:	687a      	ldr	r2, [r7, #4]
 80088e4:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80088e6:	4610      	mov	r0, r2
 80088e8:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80088ea:	e045      	b.n	8008978 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80088ec:	6878      	ldr	r0, [r7, #4]
 80088ee:	f000 f851 	bl	8008994 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80088f2:	e041      	b.n	8008978 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d039      	beq.n	8008970 <I2C_ITError+0x1bc>
 80088fc:	68bb      	ldr	r3, [r7, #8]
 80088fe:	2b12      	cmp	r3, #18
 8008900:	d002      	beq.n	8008908 <I2C_ITError+0x154>
 8008902:	68bb      	ldr	r3, [r7, #8]
 8008904:	2b22      	cmp	r3, #34	@ 0x22
 8008906:	d133      	bne.n	8008970 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008912:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008916:	d107      	bne.n	8008928 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	681a      	ldr	r2, [r3, #0]
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008926:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800892c:	4618      	mov	r0, r3
 800892e:	f7fd fcd5 	bl	80062dc <HAL_DMA_GetState>
 8008932:	4603      	mov	r3, r0
 8008934:	2b01      	cmp	r3, #1
 8008936:	d017      	beq.n	8008968 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800893c:	4a14      	ldr	r2, [pc, #80]	@ (8008990 <I2C_ITError+0x1dc>)
 800893e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	2200      	movs	r2, #0
 8008944:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800894c:	4618      	mov	r0, r3
 800894e:	f7fc fb55 	bl	8004ffc <HAL_DMA_Abort_IT>
 8008952:	4603      	mov	r3, r0
 8008954:	2b00      	cmp	r3, #0
 8008956:	d011      	beq.n	800897c <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800895c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800895e:	687a      	ldr	r2, [r7, #4]
 8008960:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008962:	4610      	mov	r0, r2
 8008964:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008966:	e009      	b.n	800897c <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8008968:	6878      	ldr	r0, [r7, #4]
 800896a:	f000 f813 	bl	8008994 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800896e:	e005      	b.n	800897c <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8008970:	6878      	ldr	r0, [r7, #4]
 8008972:	f000 f80f 	bl	8008994 <I2C_TreatErrorCallback>
  }
}
 8008976:	e002      	b.n	800897e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008978:	bf00      	nop
 800897a:	e000      	b.n	800897e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800897c:	bf00      	nop
}
 800897e:	bf00      	nop
 8008980:	3710      	adds	r7, #16
 8008982:	46bd      	mov	sp, r7
 8008984:	bd80      	pop	{r7, pc}
 8008986:	bf00      	nop
 8008988:	ffff0000 	.word	0xffff0000
 800898c:	08007e87 	.word	0x08007e87
 8008990:	08008a2b 	.word	0x08008a2b

08008994 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8008994:	b580      	push	{r7, lr}
 8008996:	b082      	sub	sp, #8
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80089a2:	b2db      	uxtb	r3, r3
 80089a4:	2b60      	cmp	r3, #96	@ 0x60
 80089a6:	d10e      	bne.n	80089c6 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	2220      	movs	r2, #32
 80089ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2200      	movs	r2, #0
 80089b4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	2200      	movs	r2, #0
 80089ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80089be:	6878      	ldr	r0, [r7, #4]
 80089c0:	f7ff fa57 	bl	8007e72 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80089c4:	e009      	b.n	80089da <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	2200      	movs	r2, #0
 80089ca:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2200      	movs	r2, #0
 80089d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80089d4:	6878      	ldr	r0, [r7, #4]
 80089d6:	f7ff fa42 	bl	8007e5e <HAL_I2C_ErrorCallback>
}
 80089da:	bf00      	nop
 80089dc:	3708      	adds	r7, #8
 80089de:	46bd      	mov	sp, r7
 80089e0:	bd80      	pop	{r7, pc}

080089e2 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80089e2:	b480      	push	{r7}
 80089e4:	b083      	sub	sp, #12
 80089e6:	af00      	add	r7, sp, #0
 80089e8:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	699b      	ldr	r3, [r3, #24]
 80089f0:	f003 0302 	and.w	r3, r3, #2
 80089f4:	2b02      	cmp	r3, #2
 80089f6:	d103      	bne.n	8008a00 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	2200      	movs	r2, #0
 80089fe:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	699b      	ldr	r3, [r3, #24]
 8008a06:	f003 0301 	and.w	r3, r3, #1
 8008a0a:	2b01      	cmp	r3, #1
 8008a0c:	d007      	beq.n	8008a1e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	699a      	ldr	r2, [r3, #24]
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	f042 0201 	orr.w	r2, r2, #1
 8008a1c:	619a      	str	r2, [r3, #24]
  }
}
 8008a1e:	bf00      	nop
 8008a20:	370c      	adds	r7, #12
 8008a22:	46bd      	mov	sp, r7
 8008a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a28:	4770      	bx	lr

08008a2a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8008a2a:	b580      	push	{r7, lr}
 8008a2c:	b084      	sub	sp, #16
 8008a2e:	af00      	add	r7, sp, #0
 8008a30:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a36:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d003      	beq.n	8008a48 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a44:	2200      	movs	r2, #0
 8008a46:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d003      	beq.n	8008a58 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a54:	2200      	movs	r2, #0
 8008a56:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8008a58:	68f8      	ldr	r0, [r7, #12]
 8008a5a:	f7ff ff9b 	bl	8008994 <I2C_TreatErrorCallback>
}
 8008a5e:	bf00      	nop
 8008a60:	3710      	adds	r7, #16
 8008a62:	46bd      	mov	sp, r7
 8008a64:	bd80      	pop	{r7, pc}

08008a66 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008a66:	b580      	push	{r7, lr}
 8008a68:	b084      	sub	sp, #16
 8008a6a:	af00      	add	r7, sp, #0
 8008a6c:	60f8      	str	r0, [r7, #12]
 8008a6e:	60b9      	str	r1, [r7, #8]
 8008a70:	603b      	str	r3, [r7, #0]
 8008a72:	4613      	mov	r3, r2
 8008a74:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008a76:	e03b      	b.n	8008af0 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008a78:	69ba      	ldr	r2, [r7, #24]
 8008a7a:	6839      	ldr	r1, [r7, #0]
 8008a7c:	68f8      	ldr	r0, [r7, #12]
 8008a7e:	f000 f961 	bl	8008d44 <I2C_IsErrorOccurred>
 8008a82:	4603      	mov	r3, r0
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d001      	beq.n	8008a8c <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8008a88:	2301      	movs	r3, #1
 8008a8a:	e041      	b.n	8008b10 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a8c:	683b      	ldr	r3, [r7, #0]
 8008a8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a92:	d02d      	beq.n	8008af0 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a94:	f7fa fd1e 	bl	80034d4 <HAL_GetTick>
 8008a98:	4602      	mov	r2, r0
 8008a9a:	69bb      	ldr	r3, [r7, #24]
 8008a9c:	1ad3      	subs	r3, r2, r3
 8008a9e:	683a      	ldr	r2, [r7, #0]
 8008aa0:	429a      	cmp	r2, r3
 8008aa2:	d302      	bcc.n	8008aaa <I2C_WaitOnFlagUntilTimeout+0x44>
 8008aa4:	683b      	ldr	r3, [r7, #0]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d122      	bne.n	8008af0 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	699a      	ldr	r2, [r3, #24]
 8008ab0:	68bb      	ldr	r3, [r7, #8]
 8008ab2:	4013      	ands	r3, r2
 8008ab4:	68ba      	ldr	r2, [r7, #8]
 8008ab6:	429a      	cmp	r2, r3
 8008ab8:	bf0c      	ite	eq
 8008aba:	2301      	moveq	r3, #1
 8008abc:	2300      	movne	r3, #0
 8008abe:	b2db      	uxtb	r3, r3
 8008ac0:	461a      	mov	r2, r3
 8008ac2:	79fb      	ldrb	r3, [r7, #7]
 8008ac4:	429a      	cmp	r2, r3
 8008ac6:	d113      	bne.n	8008af0 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008acc:	f043 0220 	orr.w	r2, r3, #32
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	2220      	movs	r2, #32
 8008ad8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	2200      	movs	r2, #0
 8008ae0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8008aec:	2301      	movs	r3, #1
 8008aee:	e00f      	b.n	8008b10 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	699a      	ldr	r2, [r3, #24]
 8008af6:	68bb      	ldr	r3, [r7, #8]
 8008af8:	4013      	ands	r3, r2
 8008afa:	68ba      	ldr	r2, [r7, #8]
 8008afc:	429a      	cmp	r2, r3
 8008afe:	bf0c      	ite	eq
 8008b00:	2301      	moveq	r3, #1
 8008b02:	2300      	movne	r3, #0
 8008b04:	b2db      	uxtb	r3, r3
 8008b06:	461a      	mov	r2, r3
 8008b08:	79fb      	ldrb	r3, [r7, #7]
 8008b0a:	429a      	cmp	r2, r3
 8008b0c:	d0b4      	beq.n	8008a78 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008b0e:	2300      	movs	r3, #0
}
 8008b10:	4618      	mov	r0, r3
 8008b12:	3710      	adds	r7, #16
 8008b14:	46bd      	mov	sp, r7
 8008b16:	bd80      	pop	{r7, pc}

08008b18 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b084      	sub	sp, #16
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	60f8      	str	r0, [r7, #12]
 8008b20:	60b9      	str	r1, [r7, #8]
 8008b22:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008b24:	e033      	b.n	8008b8e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008b26:	687a      	ldr	r2, [r7, #4]
 8008b28:	68b9      	ldr	r1, [r7, #8]
 8008b2a:	68f8      	ldr	r0, [r7, #12]
 8008b2c:	f000 f90a 	bl	8008d44 <I2C_IsErrorOccurred>
 8008b30:	4603      	mov	r3, r0
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d001      	beq.n	8008b3a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008b36:	2301      	movs	r3, #1
 8008b38:	e031      	b.n	8008b9e <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008b3a:	68bb      	ldr	r3, [r7, #8]
 8008b3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b40:	d025      	beq.n	8008b8e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b42:	f7fa fcc7 	bl	80034d4 <HAL_GetTick>
 8008b46:	4602      	mov	r2, r0
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	1ad3      	subs	r3, r2, r3
 8008b4c:	68ba      	ldr	r2, [r7, #8]
 8008b4e:	429a      	cmp	r2, r3
 8008b50:	d302      	bcc.n	8008b58 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8008b52:	68bb      	ldr	r3, [r7, #8]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d11a      	bne.n	8008b8e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	699b      	ldr	r3, [r3, #24]
 8008b5e:	f003 0302 	and.w	r3, r3, #2
 8008b62:	2b02      	cmp	r3, #2
 8008b64:	d013      	beq.n	8008b8e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b6a:	f043 0220 	orr.w	r2, r3, #32
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	2220      	movs	r2, #32
 8008b76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	2200      	movs	r2, #0
 8008b86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8008b8a:	2301      	movs	r3, #1
 8008b8c:	e007      	b.n	8008b9e <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	699b      	ldr	r3, [r3, #24]
 8008b94:	f003 0302 	and.w	r3, r3, #2
 8008b98:	2b02      	cmp	r3, #2
 8008b9a:	d1c4      	bne.n	8008b26 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8008b9c:	2300      	movs	r3, #0
}
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	3710      	adds	r7, #16
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	bd80      	pop	{r7, pc}

08008ba6 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008ba6:	b580      	push	{r7, lr}
 8008ba8:	b084      	sub	sp, #16
 8008baa:	af00      	add	r7, sp, #0
 8008bac:	60f8      	str	r0, [r7, #12]
 8008bae:	60b9      	str	r1, [r7, #8]
 8008bb0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008bb2:	e02f      	b.n	8008c14 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008bb4:	687a      	ldr	r2, [r7, #4]
 8008bb6:	68b9      	ldr	r1, [r7, #8]
 8008bb8:	68f8      	ldr	r0, [r7, #12]
 8008bba:	f000 f8c3 	bl	8008d44 <I2C_IsErrorOccurred>
 8008bbe:	4603      	mov	r3, r0
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d001      	beq.n	8008bc8 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008bc4:	2301      	movs	r3, #1
 8008bc6:	e02d      	b.n	8008c24 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008bc8:	f7fa fc84 	bl	80034d4 <HAL_GetTick>
 8008bcc:	4602      	mov	r2, r0
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	1ad3      	subs	r3, r2, r3
 8008bd2:	68ba      	ldr	r2, [r7, #8]
 8008bd4:	429a      	cmp	r2, r3
 8008bd6:	d302      	bcc.n	8008bde <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8008bd8:	68bb      	ldr	r3, [r7, #8]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d11a      	bne.n	8008c14 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	699b      	ldr	r3, [r3, #24]
 8008be4:	f003 0320 	and.w	r3, r3, #32
 8008be8:	2b20      	cmp	r3, #32
 8008bea:	d013      	beq.n	8008c14 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008bf0:	f043 0220 	orr.w	r2, r3, #32
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	2220      	movs	r2, #32
 8008bfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	2200      	movs	r2, #0
 8008c04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8008c10:	2301      	movs	r3, #1
 8008c12:	e007      	b.n	8008c24 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	699b      	ldr	r3, [r3, #24]
 8008c1a:	f003 0320 	and.w	r3, r3, #32
 8008c1e:	2b20      	cmp	r3, #32
 8008c20:	d1c8      	bne.n	8008bb4 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008c22:	2300      	movs	r3, #0
}
 8008c24:	4618      	mov	r0, r3
 8008c26:	3710      	adds	r7, #16
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	bd80      	pop	{r7, pc}

08008c2c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b086      	sub	sp, #24
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	60f8      	str	r0, [r7, #12]
 8008c34:	60b9      	str	r1, [r7, #8]
 8008c36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008c38:	2300      	movs	r3, #0
 8008c3a:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8008c3c:	e071      	b.n	8008d22 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008c3e:	687a      	ldr	r2, [r7, #4]
 8008c40:	68b9      	ldr	r1, [r7, #8]
 8008c42:	68f8      	ldr	r0, [r7, #12]
 8008c44:	f000 f87e 	bl	8008d44 <I2C_IsErrorOccurred>
 8008c48:	4603      	mov	r3, r0
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d001      	beq.n	8008c52 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8008c4e:	2301      	movs	r3, #1
 8008c50:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	699b      	ldr	r3, [r3, #24]
 8008c58:	f003 0320 	and.w	r3, r3, #32
 8008c5c:	2b20      	cmp	r3, #32
 8008c5e:	d13b      	bne.n	8008cd8 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8008c60:	7dfb      	ldrb	r3, [r7, #23]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d138      	bne.n	8008cd8 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	699b      	ldr	r3, [r3, #24]
 8008c6c:	f003 0304 	and.w	r3, r3, #4
 8008c70:	2b04      	cmp	r3, #4
 8008c72:	d105      	bne.n	8008c80 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d001      	beq.n	8008c80 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	699b      	ldr	r3, [r3, #24]
 8008c86:	f003 0310 	and.w	r3, r3, #16
 8008c8a:	2b10      	cmp	r3, #16
 8008c8c:	d121      	bne.n	8008cd2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	2210      	movs	r2, #16
 8008c94:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	2204      	movs	r2, #4
 8008c9a:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	2220      	movs	r2, #32
 8008ca2:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	6859      	ldr	r1, [r3, #4]
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	681a      	ldr	r2, [r3, #0]
 8008cae:	4b24      	ldr	r3, [pc, #144]	@ (8008d40 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8008cb0:	400b      	ands	r3, r1
 8008cb2:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	2220      	movs	r2, #32
 8008cb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8008ccc:	2301      	movs	r3, #1
 8008cce:	75fb      	strb	r3, [r7, #23]
 8008cd0:	e002      	b.n	8008cd8 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8008cd8:	f7fa fbfc 	bl	80034d4 <HAL_GetTick>
 8008cdc:	4602      	mov	r2, r0
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	1ad3      	subs	r3, r2, r3
 8008ce2:	68ba      	ldr	r2, [r7, #8]
 8008ce4:	429a      	cmp	r2, r3
 8008ce6:	d302      	bcc.n	8008cee <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8008ce8:	68bb      	ldr	r3, [r7, #8]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d119      	bne.n	8008d22 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8008cee:	7dfb      	ldrb	r3, [r7, #23]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d116      	bne.n	8008d22 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	699b      	ldr	r3, [r3, #24]
 8008cfa:	f003 0304 	and.w	r3, r3, #4
 8008cfe:	2b04      	cmp	r3, #4
 8008d00:	d00f      	beq.n	8008d22 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d06:	f043 0220 	orr.w	r2, r3, #32
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	2220      	movs	r2, #32
 8008d12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	2200      	movs	r2, #0
 8008d1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8008d1e:	2301      	movs	r3, #1
 8008d20:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	699b      	ldr	r3, [r3, #24]
 8008d28:	f003 0304 	and.w	r3, r3, #4
 8008d2c:	2b04      	cmp	r3, #4
 8008d2e:	d002      	beq.n	8008d36 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8008d30:	7dfb      	ldrb	r3, [r7, #23]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d083      	beq.n	8008c3e <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8008d36:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d38:	4618      	mov	r0, r3
 8008d3a:	3718      	adds	r7, #24
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	bd80      	pop	{r7, pc}
 8008d40:	fe00e800 	.word	0xfe00e800

08008d44 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008d44:	b580      	push	{r7, lr}
 8008d46:	b08a      	sub	sp, #40	@ 0x28
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	60f8      	str	r0, [r7, #12]
 8008d4c:	60b9      	str	r1, [r7, #8]
 8008d4e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008d50:	2300      	movs	r3, #0
 8008d52:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	699b      	ldr	r3, [r3, #24]
 8008d5c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8008d5e:	2300      	movs	r3, #0
 8008d60:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8008d66:	69bb      	ldr	r3, [r7, #24]
 8008d68:	f003 0310 	and.w	r3, r3, #16
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d068      	beq.n	8008e42 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	2210      	movs	r2, #16
 8008d76:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008d78:	e049      	b.n	8008e0e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8008d7a:	68bb      	ldr	r3, [r7, #8]
 8008d7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d80:	d045      	beq.n	8008e0e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008d82:	f7fa fba7 	bl	80034d4 <HAL_GetTick>
 8008d86:	4602      	mov	r2, r0
 8008d88:	69fb      	ldr	r3, [r7, #28]
 8008d8a:	1ad3      	subs	r3, r2, r3
 8008d8c:	68ba      	ldr	r2, [r7, #8]
 8008d8e:	429a      	cmp	r2, r3
 8008d90:	d302      	bcc.n	8008d98 <I2C_IsErrorOccurred+0x54>
 8008d92:	68bb      	ldr	r3, [r7, #8]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d13a      	bne.n	8008e0e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	685b      	ldr	r3, [r3, #4]
 8008d9e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008da2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008daa:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	699b      	ldr	r3, [r3, #24]
 8008db2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008db6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008dba:	d121      	bne.n	8008e00 <I2C_IsErrorOccurred+0xbc>
 8008dbc:	697b      	ldr	r3, [r7, #20]
 8008dbe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008dc2:	d01d      	beq.n	8008e00 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8008dc4:	7cfb      	ldrb	r3, [r7, #19]
 8008dc6:	2b20      	cmp	r3, #32
 8008dc8:	d01a      	beq.n	8008e00 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	685a      	ldr	r2, [r3, #4]
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008dd8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8008dda:	f7fa fb7b 	bl	80034d4 <HAL_GetTick>
 8008dde:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008de0:	e00e      	b.n	8008e00 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8008de2:	f7fa fb77 	bl	80034d4 <HAL_GetTick>
 8008de6:	4602      	mov	r2, r0
 8008de8:	69fb      	ldr	r3, [r7, #28]
 8008dea:	1ad3      	subs	r3, r2, r3
 8008dec:	2b19      	cmp	r3, #25
 8008dee:	d907      	bls.n	8008e00 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8008df0:	6a3b      	ldr	r3, [r7, #32]
 8008df2:	f043 0320 	orr.w	r3, r3, #32
 8008df6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8008df8:	2301      	movs	r3, #1
 8008dfa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8008dfe:	e006      	b.n	8008e0e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	699b      	ldr	r3, [r3, #24]
 8008e06:	f003 0320 	and.w	r3, r3, #32
 8008e0a:	2b20      	cmp	r3, #32
 8008e0c:	d1e9      	bne.n	8008de2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	699b      	ldr	r3, [r3, #24]
 8008e14:	f003 0320 	and.w	r3, r3, #32
 8008e18:	2b20      	cmp	r3, #32
 8008e1a:	d003      	beq.n	8008e24 <I2C_IsErrorOccurred+0xe0>
 8008e1c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d0aa      	beq.n	8008d7a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8008e24:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d103      	bne.n	8008e34 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	2220      	movs	r2, #32
 8008e32:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8008e34:	6a3b      	ldr	r3, [r7, #32]
 8008e36:	f043 0304 	orr.w	r3, r3, #4
 8008e3a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8008e3c:	2301      	movs	r3, #1
 8008e3e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	699b      	ldr	r3, [r3, #24]
 8008e48:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8008e4a:	69bb      	ldr	r3, [r7, #24]
 8008e4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d00b      	beq.n	8008e6c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8008e54:	6a3b      	ldr	r3, [r7, #32]
 8008e56:	f043 0301 	orr.w	r3, r3, #1
 8008e5a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008e64:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008e66:	2301      	movs	r3, #1
 8008e68:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8008e6c:	69bb      	ldr	r3, [r7, #24]
 8008e6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d00b      	beq.n	8008e8e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8008e76:	6a3b      	ldr	r3, [r7, #32]
 8008e78:	f043 0308 	orr.w	r3, r3, #8
 8008e7c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008e86:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008e88:	2301      	movs	r3, #1
 8008e8a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8008e8e:	69bb      	ldr	r3, [r7, #24]
 8008e90:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d00b      	beq.n	8008eb0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8008e98:	6a3b      	ldr	r3, [r7, #32]
 8008e9a:	f043 0302 	orr.w	r3, r3, #2
 8008e9e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008ea8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008eaa:	2301      	movs	r3, #1
 8008eac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8008eb0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d01c      	beq.n	8008ef2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008eb8:	68f8      	ldr	r0, [r7, #12]
 8008eba:	f7ff fd92 	bl	80089e2 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	6859      	ldr	r1, [r3, #4]
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	681a      	ldr	r2, [r3, #0]
 8008ec8:	4b0d      	ldr	r3, [pc, #52]	@ (8008f00 <I2C_IsErrorOccurred+0x1bc>)
 8008eca:	400b      	ands	r3, r1
 8008ecc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008ed2:	6a3b      	ldr	r3, [r7, #32]
 8008ed4:	431a      	orrs	r2, r3
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	2220      	movs	r2, #32
 8008ede:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	2200      	movs	r2, #0
 8008eee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8008ef2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	3728      	adds	r7, #40	@ 0x28
 8008efa:	46bd      	mov	sp, r7
 8008efc:	bd80      	pop	{r7, pc}
 8008efe:	bf00      	nop
 8008f00:	fe00e800 	.word	0xfe00e800

08008f04 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8008f04:	b480      	push	{r7}
 8008f06:	b087      	sub	sp, #28
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	60f8      	str	r0, [r7, #12]
 8008f0c:	607b      	str	r3, [r7, #4]
 8008f0e:	460b      	mov	r3, r1
 8008f10:	817b      	strh	r3, [r7, #10]
 8008f12:	4613      	mov	r3, r2
 8008f14:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008f16:	897b      	ldrh	r3, [r7, #10]
 8008f18:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008f1c:	7a7b      	ldrb	r3, [r7, #9]
 8008f1e:	041b      	lsls	r3, r3, #16
 8008f20:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008f24:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008f2a:	6a3b      	ldr	r3, [r7, #32]
 8008f2c:	4313      	orrs	r3, r2
 8008f2e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008f32:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	685a      	ldr	r2, [r3, #4]
 8008f3a:	6a3b      	ldr	r3, [r7, #32]
 8008f3c:	0d5b      	lsrs	r3, r3, #21
 8008f3e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8008f42:	4b08      	ldr	r3, [pc, #32]	@ (8008f64 <I2C_TransferConfig+0x60>)
 8008f44:	430b      	orrs	r3, r1
 8008f46:	43db      	mvns	r3, r3
 8008f48:	ea02 0103 	and.w	r1, r2, r3
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	697a      	ldr	r2, [r7, #20]
 8008f52:	430a      	orrs	r2, r1
 8008f54:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8008f56:	bf00      	nop
 8008f58:	371c      	adds	r7, #28
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f60:	4770      	bx	lr
 8008f62:	bf00      	nop
 8008f64:	03ff63ff 	.word	0x03ff63ff

08008f68 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8008f68:	b480      	push	{r7}
 8008f6a:	b085      	sub	sp, #20
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
 8008f70:	460b      	mov	r3, r1
 8008f72:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8008f74:	2300      	movs	r3, #0
 8008f76:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8008f78:	887b      	ldrh	r3, [r7, #2]
 8008f7a:	f003 0301 	and.w	r3, r3, #1
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d00f      	beq.n	8008fa2 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8008f88:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008f90:	b2db      	uxtb	r3, r3
 8008f92:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8008f96:	2b28      	cmp	r3, #40	@ 0x28
 8008f98:	d003      	beq.n	8008fa2 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8008fa0:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8008fa2:	887b      	ldrh	r3, [r7, #2]
 8008fa4:	f003 0302 	and.w	r3, r3, #2
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d00f      	beq.n	8008fcc <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8008fb2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008fba:	b2db      	uxtb	r3, r3
 8008fbc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8008fc0:	2b28      	cmp	r3, #40	@ 0x28
 8008fc2:	d003      	beq.n	8008fcc <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8008fca:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8008fcc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	da03      	bge.n	8008fdc <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8008fda:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8008fdc:	887b      	ldrh	r3, [r7, #2]
 8008fde:	2b10      	cmp	r3, #16
 8008fe0:	d103      	bne.n	8008fea <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8008fe8:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8008fea:	887b      	ldrh	r3, [r7, #2]
 8008fec:	2b20      	cmp	r3, #32
 8008fee:	d103      	bne.n	8008ff8 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	f043 0320 	orr.w	r3, r3, #32
 8008ff6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8008ff8:	887b      	ldrh	r3, [r7, #2]
 8008ffa:	2b40      	cmp	r3, #64	@ 0x40
 8008ffc:	d103      	bne.n	8009006 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009004:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	6819      	ldr	r1, [r3, #0]
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	43da      	mvns	r2, r3
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	400a      	ands	r2, r1
 8009016:	601a      	str	r2, [r3, #0]
}
 8009018:	bf00      	nop
 800901a:	3714      	adds	r7, #20
 800901c:	46bd      	mov	sp, r7
 800901e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009022:	4770      	bx	lr

08009024 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009024:	b480      	push	{r7}
 8009026:	b083      	sub	sp, #12
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]
 800902c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009034:	b2db      	uxtb	r3, r3
 8009036:	2b20      	cmp	r3, #32
 8009038:	d138      	bne.n	80090ac <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009040:	2b01      	cmp	r3, #1
 8009042:	d101      	bne.n	8009048 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009044:	2302      	movs	r3, #2
 8009046:	e032      	b.n	80090ae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	2201      	movs	r2, #1
 800904c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	2224      	movs	r2, #36	@ 0x24
 8009054:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	681a      	ldr	r2, [r3, #0]
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	f022 0201 	bic.w	r2, r2, #1
 8009066:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	681a      	ldr	r2, [r3, #0]
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009076:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	6819      	ldr	r1, [r3, #0]
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	683a      	ldr	r2, [r7, #0]
 8009084:	430a      	orrs	r2, r1
 8009086:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	681a      	ldr	r2, [r3, #0]
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	f042 0201 	orr.w	r2, r2, #1
 8009096:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	2220      	movs	r2, #32
 800909c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	2200      	movs	r2, #0
 80090a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80090a8:	2300      	movs	r3, #0
 80090aa:	e000      	b.n	80090ae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80090ac:	2302      	movs	r3, #2
  }
}
 80090ae:	4618      	mov	r0, r3
 80090b0:	370c      	adds	r7, #12
 80090b2:	46bd      	mov	sp, r7
 80090b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b8:	4770      	bx	lr

080090ba <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80090ba:	b480      	push	{r7}
 80090bc:	b085      	sub	sp, #20
 80090be:	af00      	add	r7, sp, #0
 80090c0:	6078      	str	r0, [r7, #4]
 80090c2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80090ca:	b2db      	uxtb	r3, r3
 80090cc:	2b20      	cmp	r3, #32
 80090ce:	d139      	bne.n	8009144 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80090d6:	2b01      	cmp	r3, #1
 80090d8:	d101      	bne.n	80090de <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80090da:	2302      	movs	r3, #2
 80090dc:	e033      	b.n	8009146 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	2201      	movs	r2, #1
 80090e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	2224      	movs	r2, #36	@ 0x24
 80090ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	681a      	ldr	r2, [r3, #0]
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	f022 0201 	bic.w	r2, r2, #1
 80090fc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800910c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800910e:	683b      	ldr	r3, [r7, #0]
 8009110:	021b      	lsls	r3, r3, #8
 8009112:	68fa      	ldr	r2, [r7, #12]
 8009114:	4313      	orrs	r3, r2
 8009116:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	68fa      	ldr	r2, [r7, #12]
 800911e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	681a      	ldr	r2, [r3, #0]
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	f042 0201 	orr.w	r2, r2, #1
 800912e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	2220      	movs	r2, #32
 8009134:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	2200      	movs	r2, #0
 800913c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009140:	2300      	movs	r3, #0
 8009142:	e000      	b.n	8009146 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009144:	2302      	movs	r3, #2
  }
}
 8009146:	4618      	mov	r0, r3
 8009148:	3714      	adds	r7, #20
 800914a:	46bd      	mov	sp, r7
 800914c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009150:	4770      	bx	lr
	...

08009154 <HAL_JPEG_Init>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_Init(JPEG_HandleTypeDef *hjpeg)
{
 8009154:	b580      	push	{r7, lr}
 8009156:	b082      	sub	sp, #8
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
    99,  99,  99,  99,  99,  99,  99,  99,
    99,  99,  99,  99,  99,  99,  99,  99
  };

  /* Check the JPEG handle allocation */
  if (hjpeg == NULL)
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d101      	bne.n	8009166 <HAL_JPEG_Init+0x12>
  {
    return HAL_ERROR;
 8009162:	2301      	movs	r3, #1
 8009164:	e070      	b.n	8009248 <HAL_JPEG_Init+0xf4>

    /* Init the low level hardware */
    hjpeg->MspInitCallback(hjpeg);
  }
#else
  if (hjpeg->State == HAL_JPEG_STATE_RESET)
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800916c:	b2db      	uxtb	r3, r3
 800916e:	2b00      	cmp	r3, #0
 8009170:	d106      	bne.n	8009180 <HAL_JPEG_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hjpeg->Lock = HAL_UNLOCKED;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	2200      	movs	r2, #0
 8009176:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_JPEG_MspInit(hjpeg);
 800917a:	6878      	ldr	r0, [r7, #4]
 800917c:	f7f9 fa72 	bl	8002664 <HAL_JPEG_MspInit>
  }
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_BUSY;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	2202      	movs	r2, #2
 8009184:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Start the JPEG Core*/
  __HAL_JPEG_ENABLE(hjpeg);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	f042 0201 	orr.w	r2, r2, #1
 8009196:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Stop the JPEG encoding/decoding process*/
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	681a      	ldr	r2, [r3, #0]
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	f022 0201 	bic.w	r2, r2, #1
 80091a6:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 80091b6:	631a      	str	r2, [r3, #48]	@ 0x30


  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80091c6:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80091d6:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 80091e6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* init default quantization tables*/
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	4a19      	ldr	r2, [pc, #100]	@ (8009250 <HAL_JPEG_Init+0xfc>)
 80091ec:	63da      	str	r2, [r3, #60]	@ 0x3c
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	4a18      	ldr	r2, [pc, #96]	@ (8009254 <HAL_JPEG_Init+0x100>)
 80091f2:	641a      	str	r2, [r3, #64]	@ 0x40
  hjpeg->QuantTable2 = NULL;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	2200      	movs	r2, #0
 80091f8:	645a      	str	r2, [r3, #68]	@ 0x44
  hjpeg->QuantTable3 = NULL;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	2200      	movs	r2, #0
 80091fe:	649a      	str	r2, [r3, #72]	@ 0x48

  /* init the default Huffman tables*/
  if (JPEG_Set_HuffEnc_Mem(hjpeg) != HAL_OK)
 8009200:	6878      	ldr	r0, [r7, #4]
 8009202:	f000 fe97 	bl	8009f34 <JPEG_Set_HuffEnc_Mem>
 8009206:	4603      	mov	r3, r0
 8009208:	2b00      	cmp	r3, #0
 800920a:	d004      	beq.n	8009216 <HAL_JPEG_Init+0xc2>
  {
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	2201      	movs	r2, #1
 8009210:	651a      	str	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8009212:	2301      	movs	r3, #1
 8009214:	e018      	b.n	8009248 <HAL_JPEG_Init+0xf4>
  }

  /* Enable header processing*/
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	685a      	ldr	r2, [r3, #4]
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009224:	605a      	str	r2, [r3, #4]

  /* Reset JpegInCount and JpegOutCount */
  hjpeg->JpegInCount = 0;
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	2200      	movs	r2, #0
 800922a:	621a      	str	r2, [r3, #32]
  hjpeg->JpegOutCount = 0;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	2200      	movs	r2, #0
 8009230:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_READY;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	2201      	movs	r2, #1
 8009236:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Reset the JPEG ErrorCode */
  hjpeg->ErrorCode = HAL_JPEG_ERROR_NONE;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	2200      	movs	r2, #0
 800923e:	651a      	str	r2, [r3, #80]	@ 0x50

  /*Clear the context filelds*/
  hjpeg->Context = 0;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	2200      	movs	r2, #0
 8009244:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return HAL_OK;
 8009246:	2300      	movs	r3, #0
}
 8009248:	4618      	mov	r0, r3
 800924a:	3708      	adds	r7, #8
 800924c:	46bd      	mov	sp, r7
 800924e:	bd80      	pop	{r7, pc}
 8009250:	0801b654 	.word	0x0801b654
 8009254:	0801b694 	.word	0x0801b694

08009258 <HAL_JPEG_ConfigEncoding>:
  * @param  pConf pointer to a JPEG_ConfTypeDef structure that contains
  *         the encoding configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_ConfigEncoding(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pConf)
{
 8009258:	b580      	push	{r7, lr}
 800925a:	b088      	sub	sp, #32
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
 8009260:	6039      	str	r1, [r7, #0]
  uint32_t vfactor;
  uint32_t hMCU;
  uint32_t vMCU;

  /* Check the JPEG handle allocation */
  if ((hjpeg == NULL) || (pConf == NULL))
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d002      	beq.n	800926e <HAL_JPEG_ConfigEncoding+0x16>
 8009268:	683b      	ldr	r3, [r7, #0]
 800926a:	2b00      	cmp	r3, #0
 800926c:	d101      	bne.n	8009272 <HAL_JPEG_ConfigEncoding+0x1a>
  {
    return HAL_ERROR;
 800926e:	2301      	movs	r3, #1
 8009270:	e191      	b.n	8009596 <HAL_JPEG_ConfigEncoding+0x33e>
    assert_param(IS_JPEG_COLORSPACE(pConf->ColorSpace));
    assert_param(IS_JPEG_CHROMASUBSAMPLING(pConf->ChromaSubsampling));
    assert_param(IS_JPEG_IMAGE_QUALITY(pConf->ImageQuality));

    /* Process Locked */
    __HAL_LOCK(hjpeg);
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8009278:	2b01      	cmp	r3, #1
 800927a:	d101      	bne.n	8009280 <HAL_JPEG_ConfigEncoding+0x28>
 800927c:	2302      	movs	r3, #2
 800927e:	e18a      	b.n	8009596 <HAL_JPEG_ConfigEncoding+0x33e>
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	2201      	movs	r2, #1
 8009284:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    if (hjpeg->State == HAL_JPEG_STATE_READY)
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800928e:	b2db      	uxtb	r3, r3
 8009290:	2b01      	cmp	r3, #1
 8009292:	f040 817b 	bne.w	800958c <HAL_JPEG_ConfigEncoding+0x334>
    {
      hjpeg->State = HAL_JPEG_STATE_BUSY;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	2202      	movs	r2, #2
 800929a:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

      hjpeg->Conf.ColorSpace          =  pConf->ColorSpace;
 800929e:	683b      	ldr	r3, [r7, #0]
 80092a0:	681a      	ldr	r2, [r3, #0]
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	605a      	str	r2, [r3, #4]
      hjpeg->Conf.ChromaSubsampling   =  pConf->ChromaSubsampling;
 80092a6:	683b      	ldr	r3, [r7, #0]
 80092a8:	685a      	ldr	r2, [r3, #4]
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	609a      	str	r2, [r3, #8]
      hjpeg->Conf.ImageHeight         =  pConf->ImageHeight;
 80092ae:	683b      	ldr	r3, [r7, #0]
 80092b0:	689a      	ldr	r2, [r3, #8]
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	60da      	str	r2, [r3, #12]
      hjpeg->Conf.ImageWidth          =  pConf->ImageWidth;
 80092b6:	683b      	ldr	r3, [r7, #0]
 80092b8:	68da      	ldr	r2, [r3, #12]
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	611a      	str	r2, [r3, #16]
      hjpeg->Conf.ImageQuality        =  pConf->ImageQuality;
 80092be:	683b      	ldr	r3, [r7, #0]
 80092c0:	691a      	ldr	r2, [r3, #16]
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	615a      	str	r2, [r3, #20]

      /* Reset the Color Space : by default only one quantization table is used*/
      hjpeg->Instance->CONFR1 &= ~JPEG_CONFR1_COLORSPACE;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	685a      	ldr	r2, [r3, #4]
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	f022 0230 	bic.w	r2, r2, #48	@ 0x30
 80092d4:	605a      	str	r2, [r3, #4]

      /* Set Number of color components*/
      if (hjpeg->Conf.ColorSpace == JPEG_GRAYSCALE_COLORSPACE)
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	685b      	ldr	r3, [r3, #4]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d110      	bne.n	8009300 <HAL_JPEG_ConfigEncoding+0xa8>
      {
        /*Gray Scale is only one component 8x8 blocks i.e 4:4:4*/
        hjpeg->Conf.ChromaSubsampling = JPEG_444_SUBSAMPLING;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	2200      	movs	r2, #0
 80092e2:	609a      	str	r2, [r3, #8]

        JPEG_SetColorGrayScale(hjpeg);
 80092e4:	6878      	ldr	r0, [r7, #4]
 80092e6:	f001 f991 	bl	800a60c <JPEG_SetColorGrayScale>
        /* Set quantization table 0*/
        error = JPEG_Set_Quantization_Mem(hjpeg, hjpeg->QuantTable0, (hjpeg->Instance->QMEM0));
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	3350      	adds	r3, #80	@ 0x50
 80092f4:	461a      	mov	r2, r3
 80092f6:	6878      	ldr	r0, [r7, #4]
 80092f8:	f001 f89e 	bl	800a438 <JPEG_Set_Quantization_Mem>
 80092fc:	61f8      	str	r0, [r7, #28]
 80092fe:	e0c5      	b.n	800948c <HAL_JPEG_ConfigEncoding+0x234>
      }
      else if (hjpeg->Conf.ColorSpace == JPEG_YCBCR_COLORSPACE)
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	685b      	ldr	r3, [r3, #4]
 8009304:	2b10      	cmp	r3, #16
 8009306:	d166      	bne.n	80093d6 <HAL_JPEG_ConfigEncoding+0x17e>
      {
        /*
           Set the Color Space for YCbCr : 2 quantization tables are used
           one for Luminance(Y) and one for both Chrominances (Cb & Cr)
          */
        hjpeg->Instance->CONFR1 |= JPEG_CONFR1_COLORSPACE_0;
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	685a      	ldr	r2, [r3, #4]
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	f042 0210 	orr.w	r2, r2, #16
 8009316:	605a      	str	r2, [r3, #4]

        JPEG_SetColorYCBCR(hjpeg);
 8009318:	6878      	ldr	r0, [r7, #4]
 800931a:	f001 f8ff 	bl	800a51c <JPEG_SetColorYCBCR>

        /* Set quantization table 0*/
        error  = JPEG_Set_Quantization_Mem(hjpeg, hjpeg->QuantTable0, (hjpeg->Instance->QMEM0));
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	3350      	adds	r3, #80	@ 0x50
 8009328:	461a      	mov	r2, r3
 800932a:	6878      	ldr	r0, [r7, #4]
 800932c:	f001 f884 	bl	800a438 <JPEG_Set_Quantization_Mem>
 8009330:	61f8      	str	r0, [r7, #28]
        /*By default quantization table 0 for component 0 and quantization table 1 for both components 1 and 2*/
        error |= JPEG_Set_Quantization_Mem(hjpeg, hjpeg->QuantTable1, (hjpeg->Instance->QMEM1));
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	3390      	adds	r3, #144	@ 0x90
 800933c:	461a      	mov	r2, r3
 800933e:	6878      	ldr	r0, [r7, #4]
 8009340:	f001 f87a 	bl	800a438 <JPEG_Set_Quantization_Mem>
 8009344:	4602      	mov	r2, r0
 8009346:	69fb      	ldr	r3, [r7, #28]
 8009348:	4313      	orrs	r3, r2
 800934a:	61fb      	str	r3, [r7, #28]

        if ((hjpeg->Context & JPEG_CONTEXT_CUSTOM_TABLES) != 0UL)
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009350:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009354:	2b00      	cmp	r3, #0
 8009356:	f000 8099 	beq.w	800948c <HAL_JPEG_ConfigEncoding+0x234>
        {
          /*Use user customized quantization tables , 1 table per component*/
          /* use 3 quantization tables , one for each component*/
          hjpeg->Instance->CONFR1 &= (~JPEG_CONFR1_COLORSPACE);
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	685a      	ldr	r2, [r3, #4]
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	f022 0230 	bic.w	r2, r2, #48	@ 0x30
 8009368:	605a      	str	r2, [r3, #4]
          hjpeg->Instance->CONFR1 |= JPEG_CONFR1_COLORSPACE_1;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	685a      	ldr	r2, [r3, #4]
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	f042 0220 	orr.w	r2, r2, #32
 8009378:	605a      	str	r2, [r3, #4]

          error |= JPEG_Set_Quantization_Mem(hjpeg, hjpeg->QuantTable2, (hjpeg->Instance->QMEM2));
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	33d0      	adds	r3, #208	@ 0xd0
 8009384:	461a      	mov	r2, r3
 8009386:	6878      	ldr	r0, [r7, #4]
 8009388:	f001 f856 	bl	800a438 <JPEG_Set_Quantization_Mem>
 800938c:	4602      	mov	r2, r0
 800938e:	69fb      	ldr	r3, [r7, #28]
 8009390:	4313      	orrs	r3, r2
 8009392:	61fb      	str	r3, [r7, #28]

          /*Use Quantization 1 table for component 1*/
          hjpeg->Instance->CONFR5 &= (~JPEG_CONFR5_QT);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	695a      	ldr	r2, [r3, #20]
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	f022 020c 	bic.w	r2, r2, #12
 80093a2:	615a      	str	r2, [r3, #20]
          hjpeg->Instance->CONFR5 |=  JPEG_CONFR5_QT_0;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	695a      	ldr	r2, [r3, #20]
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	f042 0204 	orr.w	r2, r2, #4
 80093b2:	615a      	str	r2, [r3, #20]

          /*Use Quantization 2 table for component 2*/
          hjpeg->Instance->CONFR6 &= (~JPEG_CONFR6_QT);
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	699a      	ldr	r2, [r3, #24]
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	f022 020c 	bic.w	r2, r2, #12
 80093c2:	619a      	str	r2, [r3, #24]
          hjpeg->Instance->CONFR6 |=  JPEG_CONFR6_QT_1;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	699a      	ldr	r2, [r3, #24]
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	f042 0208 	orr.w	r2, r2, #8
 80093d2:	619a      	str	r2, [r3, #24]
 80093d4:	e05a      	b.n	800948c <HAL_JPEG_ConfigEncoding+0x234>
        }
      }
      else /* ColorSpace == JPEG_CMYK_COLORSPACE */
      {
        JPEG_SetColorCMYK(hjpeg);
 80093d6:	6878      	ldr	r0, [r7, #4]
 80093d8:	f001 f936 	bl	800a648 <JPEG_SetColorCMYK>

        /* Set quantization table 0*/
        error  = JPEG_Set_Quantization_Mem(hjpeg, hjpeg->QuantTable0, (hjpeg->Instance->QMEM0));
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	3350      	adds	r3, #80	@ 0x50
 80093e6:	461a      	mov	r2, r3
 80093e8:	6878      	ldr	r0, [r7, #4]
 80093ea:	f001 f825 	bl	800a438 <JPEG_Set_Quantization_Mem>
 80093ee:	61f8      	str	r0, [r7, #28]
        /*By default quantization table 0 for All components*/

        if ((hjpeg->Context & JPEG_CONTEXT_CUSTOM_TABLES) != 0UL)
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80093f4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d047      	beq.n	800948c <HAL_JPEG_ConfigEncoding+0x234>
        {
          /*Use user customized quantization tables , 1 table per component*/
          /* use 4 quantization tables , one for each component*/
          hjpeg->Instance->CONFR1 |= JPEG_CONFR1_COLORSPACE;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	685a      	ldr	r2, [r3, #4]
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	f042 0230 	orr.w	r2, r2, #48	@ 0x30
 800940a:	605a      	str	r2, [r3, #4]

          error |= JPEG_Set_Quantization_Mem(hjpeg, hjpeg->QuantTable1, (hjpeg->Instance->QMEM1));
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	3390      	adds	r3, #144	@ 0x90
 8009416:	461a      	mov	r2, r3
 8009418:	6878      	ldr	r0, [r7, #4]
 800941a:	f001 f80d 	bl	800a438 <JPEG_Set_Quantization_Mem>
 800941e:	4602      	mov	r2, r0
 8009420:	69fb      	ldr	r3, [r7, #28]
 8009422:	4313      	orrs	r3, r2
 8009424:	61fb      	str	r3, [r7, #28]
          error |= JPEG_Set_Quantization_Mem(hjpeg, hjpeg->QuantTable2, (hjpeg->Instance->QMEM2));
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	33d0      	adds	r3, #208	@ 0xd0
 8009430:	461a      	mov	r2, r3
 8009432:	6878      	ldr	r0, [r7, #4]
 8009434:	f001 f800 	bl	800a438 <JPEG_Set_Quantization_Mem>
 8009438:	4602      	mov	r2, r0
 800943a:	69fb      	ldr	r3, [r7, #28]
 800943c:	4313      	orrs	r3, r2
 800943e:	61fb      	str	r3, [r7, #28]
          error |= JPEG_Set_Quantization_Mem(hjpeg, hjpeg->QuantTable3, (hjpeg->Instance->QMEM3));
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 800944c:	461a      	mov	r2, r3
 800944e:	6878      	ldr	r0, [r7, #4]
 8009450:	f000 fff2 	bl	800a438 <JPEG_Set_Quantization_Mem>
 8009454:	4602      	mov	r2, r0
 8009456:	69fb      	ldr	r3, [r7, #28]
 8009458:	4313      	orrs	r3, r2
 800945a:	61fb      	str	r3, [r7, #28]

          /*Use Quantization 1 table for component 1*/
          hjpeg->Instance->CONFR5 |=  JPEG_CONFR5_QT_0;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	695a      	ldr	r2, [r3, #20]
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	f042 0204 	orr.w	r2, r2, #4
 800946a:	615a      	str	r2, [r3, #20]

          /*Use Quantization 2 table for component 2*/
          hjpeg->Instance->CONFR6 |=  JPEG_CONFR6_QT_1;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	699a      	ldr	r2, [r3, #24]
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	f042 0208 	orr.w	r2, r2, #8
 800947a:	619a      	str	r2, [r3, #24]

          /*Use Quantization 3 table for component 3*/
          hjpeg->Instance->CONFR7 |=  JPEG_CONFR7_QT;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	69da      	ldr	r2, [r3, #28]
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	f042 020c 	orr.w	r2, r2, #12
 800948a:	61da      	str	r2, [r3, #28]
        }
      }

      if (error != 0UL)
 800948c:	69fb      	ldr	r3, [r7, #28]
 800948e:	2b00      	cmp	r3, #0
 8009490:	d00c      	beq.n	80094ac <HAL_JPEG_ConfigEncoding+0x254>
      {
        hjpeg->ErrorCode = HAL_JPEG_ERROR_QUANT_TABLE;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	2202      	movs	r2, #2
 8009496:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Process Unlocked */
        __HAL_UNLOCK(hjpeg);
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	2200      	movs	r2, #0
 800949c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Set the JPEG State to ready */
        hjpeg->State = HAL_JPEG_STATE_READY;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	2201      	movs	r2, #1
 80094a4:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

        return  HAL_ERROR;
 80094a8:	2301      	movs	r3, #1
 80094aa:	e074      	b.n	8009596 <HAL_JPEG_ConfigEncoding+0x33e>
      }
      /* Set the image size*/
      /* set the number of lines*/
      MODIFY_REG(hjpeg->Instance->CONFR1, JPEG_CONFR1_YSIZE, ((hjpeg->Conf.ImageHeight & 0x0000FFFFUL) << 16));
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	685b      	ldr	r3, [r3, #4]
 80094b2:	b299      	uxth	r1, r3
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	68db      	ldr	r3, [r3, #12]
 80094b8:	041a      	lsls	r2, r3, #16
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	430a      	orrs	r2, r1
 80094c0:	605a      	str	r2, [r3, #4]
      /* set the number of pixels per line*/
      MODIFY_REG(hjpeg->Instance->CONFR3, JPEG_CONFR3_XSIZE, ((hjpeg->Conf.ImageWidth & 0x0000FFFFUL) << 16));
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	68db      	ldr	r3, [r3, #12]
 80094c8:	b299      	uxth	r1, r3
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	691b      	ldr	r3, [r3, #16]
 80094ce:	041a      	lsls	r2, r3, #16
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	430a      	orrs	r2, r1
 80094d6:	60da      	str	r2, [r3, #12]


      if (hjpeg->Conf.ChromaSubsampling == JPEG_420_SUBSAMPLING) /* 4:2:0*/
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	689b      	ldr	r3, [r3, #8]
 80094dc:	2b01      	cmp	r3, #1
 80094de:	d104      	bne.n	80094ea <HAL_JPEG_ConfigEncoding+0x292>
      {
        hfactor = 16;
 80094e0:	2310      	movs	r3, #16
 80094e2:	61bb      	str	r3, [r7, #24]
        vfactor = 16;
 80094e4:	2310      	movs	r3, #16
 80094e6:	617b      	str	r3, [r7, #20]
 80094e8:	e00c      	b.n	8009504 <HAL_JPEG_ConfigEncoding+0x2ac>
      }
      else if (hjpeg->Conf.ChromaSubsampling == JPEG_422_SUBSAMPLING) /* 4:2:2*/
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	689b      	ldr	r3, [r3, #8]
 80094ee:	2b02      	cmp	r3, #2
 80094f0:	d104      	bne.n	80094fc <HAL_JPEG_ConfigEncoding+0x2a4>
      {
        hfactor = 16;
 80094f2:	2310      	movs	r3, #16
 80094f4:	61bb      	str	r3, [r7, #24]
        vfactor = 8;
 80094f6:	2308      	movs	r3, #8
 80094f8:	617b      	str	r3, [r7, #20]
 80094fa:	e003      	b.n	8009504 <HAL_JPEG_ConfigEncoding+0x2ac>
      }
      else /* Default is 8x8 MCU,  4:4:4*/
      {
        hfactor = 8;
 80094fc:	2308      	movs	r3, #8
 80094fe:	61bb      	str	r3, [r7, #24]
        vfactor = 8;
 8009500:	2308      	movs	r3, #8
 8009502:	617b      	str	r3, [r7, #20]
      }

      hMCU = (hjpeg->Conf.ImageWidth / hfactor);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	691a      	ldr	r2, [r3, #16]
 8009508:	69bb      	ldr	r3, [r7, #24]
 800950a:	fbb2 f3f3 	udiv	r3, r2, r3
 800950e:	613b      	str	r3, [r7, #16]
      if ((hjpeg->Conf.ImageWidth % hfactor) != 0UL)
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	691b      	ldr	r3, [r3, #16]
 8009514:	69ba      	ldr	r2, [r7, #24]
 8009516:	fbb3 f2f2 	udiv	r2, r3, r2
 800951a:	69b9      	ldr	r1, [r7, #24]
 800951c:	fb01 f202 	mul.w	r2, r1, r2
 8009520:	1a9b      	subs	r3, r3, r2
 8009522:	2b00      	cmp	r3, #0
 8009524:	d002      	beq.n	800952c <HAL_JPEG_ConfigEncoding+0x2d4>
      {
        hMCU++; /*+1 for horizontal incomplete MCU */
 8009526:	693b      	ldr	r3, [r7, #16]
 8009528:	3301      	adds	r3, #1
 800952a:	613b      	str	r3, [r7, #16]
      }

      vMCU = (hjpeg->Conf.ImageHeight / vfactor);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	68da      	ldr	r2, [r3, #12]
 8009530:	697b      	ldr	r3, [r7, #20]
 8009532:	fbb2 f3f3 	udiv	r3, r2, r3
 8009536:	60fb      	str	r3, [r7, #12]
      if ((hjpeg->Conf.ImageHeight % vfactor) != 0UL)
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	68db      	ldr	r3, [r3, #12]
 800953c:	697a      	ldr	r2, [r7, #20]
 800953e:	fbb3 f2f2 	udiv	r2, r3, r2
 8009542:	6979      	ldr	r1, [r7, #20]
 8009544:	fb01 f202 	mul.w	r2, r1, r2
 8009548:	1a9b      	subs	r3, r3, r2
 800954a:	2b00      	cmp	r3, #0
 800954c:	d002      	beq.n	8009554 <HAL_JPEG_ConfigEncoding+0x2fc>
      {
        vMCU++; /*+1 for vertical incomplete MCU */
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	3301      	adds	r3, #1
 8009552:	60fb      	str	r3, [r7, #12]
      }

      numberMCU = (hMCU * vMCU) - 1UL; /* Bit Field JPEG_CONFR2_NMCU shall be set to NB_MCU - 1*/
 8009554:	693b      	ldr	r3, [r7, #16]
 8009556:	68fa      	ldr	r2, [r7, #12]
 8009558:	fb02 f303 	mul.w	r3, r2, r3
 800955c:	3b01      	subs	r3, #1
 800955e:	60bb      	str	r3, [r7, #8]
      /* Set the number of MCU*/
      hjpeg->Instance->CONFR2 = (numberMCU & JPEG_CONFR2_NMCU);
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	68ba      	ldr	r2, [r7, #8]
 8009566:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800956a:	609a      	str	r2, [r3, #8]

      hjpeg->Context |= JPEG_CONTEXT_CONF_ENCODING;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009570:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hjpeg);
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	2200      	movs	r2, #0
 800957c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Set the JPEG State to ready */
      hjpeg->State = HAL_JPEG_STATE_READY;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2201      	movs	r2, #1
 8009584:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

      /* Return function status */
      return HAL_OK;
 8009588:	2300      	movs	r3, #0
 800958a:	e004      	b.n	8009596 <HAL_JPEG_ConfigEncoding+0x33e>
    }
    else
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hjpeg);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	2200      	movs	r2, #0
 8009590:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Return function status */
      return HAL_BUSY;
 8009594:	2302      	movs	r3, #2
    }
  }
}
 8009596:	4618      	mov	r0, r3
 8009598:	3720      	adds	r7, #32
 800959a:	46bd      	mov	sp, r7
 800959c:	bd80      	pop	{r7, pc}

0800959e <HAL_JPEG_GetInfo>:
  * @param  pInfo pointer to a JPEG_ConfTypeDef structure that contains
  *         The JPEG decoded header information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_GetInfo(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
{
 800959e:	b580      	push	{r7, lr}
 80095a0:	b086      	sub	sp, #24
 80095a2:	af00      	add	r7, sp, #0
 80095a4:	6078      	str	r0, [r7, #4]
 80095a6:	6039      	str	r1, [r7, #0]
  uint32_t yblockNb;
  uint32_t cBblockNb;
  uint32_t cRblockNb;

  /* Check the JPEG handle allocation */
  if ((hjpeg == NULL) || (pInfo == NULL))
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d002      	beq.n	80095b4 <HAL_JPEG_GetInfo+0x16>
 80095ae:	683b      	ldr	r3, [r7, #0]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d101      	bne.n	80095b8 <HAL_JPEG_GetInfo+0x1a>
  {
    return HAL_ERROR;
 80095b4:	2301      	movs	r3, #1
 80095b6:	e083      	b.n	80096c0 <HAL_JPEG_GetInfo+0x122>
  }

  /*Read the conf parameters */
  if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF_1)
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	685b      	ldr	r3, [r3, #4]
 80095be:	f003 0303 	and.w	r3, r3, #3
 80095c2:	2b02      	cmp	r3, #2
 80095c4:	d103      	bne.n	80095ce <HAL_JPEG_GetInfo+0x30>
  {
    pInfo->ColorSpace = JPEG_YCBCR_COLORSPACE;
 80095c6:	683b      	ldr	r3, [r7, #0]
 80095c8:	2210      	movs	r2, #16
 80095ca:	601a      	str	r2, [r3, #0]
 80095cc:	e017      	b.n	80095fe <HAL_JPEG_GetInfo+0x60>
  }
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == 0UL)
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	685b      	ldr	r3, [r3, #4]
 80095d4:	f003 0303 	and.w	r3, r3, #3
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d103      	bne.n	80095e4 <HAL_JPEG_GetInfo+0x46>
  {
    pInfo->ColorSpace = JPEG_GRAYSCALE_COLORSPACE;
 80095dc:	683b      	ldr	r3, [r7, #0]
 80095de:	2200      	movs	r2, #0
 80095e0:	601a      	str	r2, [r3, #0]
 80095e2:	e00c      	b.n	80095fe <HAL_JPEG_GetInfo+0x60>
  }
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF)
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	685b      	ldr	r3, [r3, #4]
 80095ea:	f003 0303 	and.w	r3, r3, #3
 80095ee:	2b03      	cmp	r3, #3
 80095f0:	d103      	bne.n	80095fa <HAL_JPEG_GetInfo+0x5c>
  {
    pInfo->ColorSpace = JPEG_CMYK_COLORSPACE;
 80095f2:	683b      	ldr	r3, [r7, #0]
 80095f4:	2230      	movs	r2, #48	@ 0x30
 80095f6:	601a      	str	r2, [r3, #0]
 80095f8:	e001      	b.n	80095fe <HAL_JPEG_GetInfo+0x60>
  }
  else
  {
    return HAL_ERROR;
 80095fa:	2301      	movs	r3, #1
 80095fc:	e060      	b.n	80096c0 <HAL_JPEG_GetInfo+0x122>
  }

  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	685b      	ldr	r3, [r3, #4]
 8009604:	0c1b      	lsrs	r3, r3, #16
 8009606:	b29a      	uxth	r2, r3
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	609a      	str	r2, [r3, #8]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	68db      	ldr	r3, [r3, #12]
 8009612:	0c1b      	lsrs	r3, r3, #16
 8009614:	b29a      	uxth	r2, r3
 8009616:	683b      	ldr	r3, [r7, #0]
 8009618:	60da      	str	r2, [r3, #12]

  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 800961a:	683b      	ldr	r3, [r7, #0]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	2b10      	cmp	r3, #16
 8009620:	d003      	beq.n	800962a <HAL_JPEG_GetInfo+0x8c>
 8009622:	683b      	ldr	r3, [r7, #0]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	2b30      	cmp	r3, #48	@ 0x30
 8009628:	d140      	bne.n	80096ac <HAL_JPEG_GetInfo+0x10e>
  {
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	691b      	ldr	r3, [r3, #16]
 8009630:	091b      	lsrs	r3, r3, #4
 8009632:	f003 030f 	and.w	r3, r3, #15
 8009636:	617b      	str	r3, [r7, #20]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	695b      	ldr	r3, [r3, #20]
 800963e:	091b      	lsrs	r3, r3, #4
 8009640:	f003 030f 	and.w	r3, r3, #15
 8009644:	613b      	str	r3, [r7, #16]
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	699b      	ldr	r3, [r3, #24]
 800964c:	091b      	lsrs	r3, r3, #4
 800964e:	f003 030f 	and.w	r3, r3, #15
 8009652:	60fb      	str	r3, [r7, #12]

    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8009654:	697b      	ldr	r3, [r7, #20]
 8009656:	2b01      	cmp	r3, #1
 8009658:	d109      	bne.n	800966e <HAL_JPEG_GetInfo+0xd0>
 800965a:	693b      	ldr	r3, [r7, #16]
 800965c:	2b00      	cmp	r3, #0
 800965e:	d106      	bne.n	800966e <HAL_JPEG_GetInfo+0xd0>
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	2b00      	cmp	r3, #0
 8009664:	d103      	bne.n	800966e <HAL_JPEG_GetInfo+0xd0>
    {
      pInfo->ChromaSubsampling = JPEG_422_SUBSAMPLING; /*16x8 block*/
 8009666:	683b      	ldr	r3, [r7, #0]
 8009668:	2202      	movs	r2, #2
 800966a:	605a      	str	r2, [r3, #4]
 800966c:	e01d      	b.n	80096aa <HAL_JPEG_GetInfo+0x10c>
    }
    else if ((yblockNb == 0UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800966e:	697b      	ldr	r3, [r7, #20]
 8009670:	2b00      	cmp	r3, #0
 8009672:	d109      	bne.n	8009688 <HAL_JPEG_GetInfo+0xea>
 8009674:	693b      	ldr	r3, [r7, #16]
 8009676:	2b00      	cmp	r3, #0
 8009678:	d106      	bne.n	8009688 <HAL_JPEG_GetInfo+0xea>
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	2b00      	cmp	r3, #0
 800967e:	d103      	bne.n	8009688 <HAL_JPEG_GetInfo+0xea>
    {
      pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 8009680:	683b      	ldr	r3, [r7, #0]
 8009682:	2200      	movs	r2, #0
 8009684:	605a      	str	r2, [r3, #4]
 8009686:	e010      	b.n	80096aa <HAL_JPEG_GetInfo+0x10c>
    }
    else if ((yblockNb == 3UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8009688:	697b      	ldr	r3, [r7, #20]
 800968a:	2b03      	cmp	r3, #3
 800968c:	d109      	bne.n	80096a2 <HAL_JPEG_GetInfo+0x104>
 800968e:	693b      	ldr	r3, [r7, #16]
 8009690:	2b00      	cmp	r3, #0
 8009692:	d106      	bne.n	80096a2 <HAL_JPEG_GetInfo+0x104>
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	2b00      	cmp	r3, #0
 8009698:	d103      	bne.n	80096a2 <HAL_JPEG_GetInfo+0x104>
    {
      pInfo->ChromaSubsampling = JPEG_420_SUBSAMPLING;
 800969a:	683b      	ldr	r3, [r7, #0]
 800969c:	2201      	movs	r2, #1
 800969e:	605a      	str	r2, [r3, #4]
 80096a0:	e003      	b.n	80096aa <HAL_JPEG_GetInfo+0x10c>
    }
    else /*Default is 4:4:4*/
    {
      pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 80096a2:	683b      	ldr	r3, [r7, #0]
 80096a4:	2200      	movs	r2, #0
 80096a6:	605a      	str	r2, [r3, #4]
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 80096a8:	e003      	b.n	80096b2 <HAL_JPEG_GetInfo+0x114>
 80096aa:	e002      	b.n	80096b2 <HAL_JPEG_GetInfo+0x114>
    }
  }
  else
  {
    pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 80096ac:	683b      	ldr	r3, [r7, #0]
 80096ae:	2200      	movs	r2, #0
 80096b0:	605a      	str	r2, [r3, #4]
  }

  pInfo->ImageQuality = JPEG_GetQuality(hjpeg);
 80096b2:	6878      	ldr	r0, [r7, #4]
 80096b4:	f001 fea2 	bl	800b3fc <JPEG_GetQuality>
 80096b8:	4602      	mov	r2, r0
 80096ba:	683b      	ldr	r3, [r7, #0]
 80096bc:	611a      	str	r2, [r3, #16]

  /* Return function status */
  return HAL_OK;
 80096be:	2300      	movs	r3, #0
}
 80096c0:	4618      	mov	r0, r3
 80096c2:	3718      	adds	r7, #24
 80096c4:	46bd      	mov	sp, r7
 80096c6:	bd80      	pop	{r7, pc}

080096c8 <HAL_JPEG_Encode_DMA>:
  * @param  OutDataLength size in bytes of the Output buffer
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_JPEG_Encode_DMA(JPEG_HandleTypeDef *hjpeg, uint8_t *pDataInMCU, uint32_t InDataLength,
                                       uint8_t *pDataOut, uint32_t OutDataLength)
{
 80096c8:	b580      	push	{r7, lr}
 80096ca:	b084      	sub	sp, #16
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	60f8      	str	r0, [r7, #12]
 80096d0:	60b9      	str	r1, [r7, #8]
 80096d2:	607a      	str	r2, [r7, #4]
 80096d4:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param((InDataLength >= 4UL));
  assert_param((OutDataLength >= 4UL));

  /* Check In/out buffer allocation and size */
  if ((hjpeg == NULL) || (pDataInMCU == NULL) || (pDataOut == NULL))
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d005      	beq.n	80096e8 <HAL_JPEG_Encode_DMA+0x20>
 80096dc:	68bb      	ldr	r3, [r7, #8]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d002      	beq.n	80096e8 <HAL_JPEG_Encode_DMA+0x20>
 80096e2:	683b      	ldr	r3, [r7, #0]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d101      	bne.n	80096ec <HAL_JPEG_Encode_DMA+0x24>
  {
    return HAL_ERROR;
 80096e8:	2301      	movs	r3, #1
 80096ea:	e059      	b.n	80097a0 <HAL_JPEG_Encode_DMA+0xd8>
  }

  /* Process Locked */
  __HAL_LOCK(hjpeg);
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80096f2:	2b01      	cmp	r3, #1
 80096f4:	d101      	bne.n	80096fa <HAL_JPEG_Encode_DMA+0x32>
 80096f6:	2302      	movs	r3, #2
 80096f8:	e052      	b.n	80097a0 <HAL_JPEG_Encode_DMA+0xd8>
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	2201      	movs	r2, #1
 80096fe:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  if (hjpeg->State != HAL_JPEG_STATE_READY)
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8009708:	b2db      	uxtb	r3, r3
 800970a:	2b01      	cmp	r3, #1
 800970c:	d005      	beq.n	800971a <HAL_JPEG_Encode_DMA+0x52>
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	2200      	movs	r2, #0
 8009712:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_BUSY;
 8009716:	2302      	movs	r3, #2
 8009718:	e042      	b.n	80097a0 <HAL_JPEG_Encode_DMA+0xd8>
  }
  else
  {
    if ((hjpeg->Context & JPEG_CONTEXT_CONF_ENCODING) == JPEG_CONTEXT_CONF_ENCODING)
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800971e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009722:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009726:	d134      	bne.n	8009792 <HAL_JPEG_Encode_DMA+0xca>
    {
      /*Change JPEG state*/
      hjpeg->State = HAL_JPEG_STATE_BUSY_ENCODING;
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	2203      	movs	r2, #3
 800972c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

      /*Set the Context to Encode with DMA*/
      hjpeg->Context &= ~(JPEG_CONTEXT_OPERATION_MASK | JPEG_CONTEXT_METHOD_MASK);
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009734:	f023 020f 	bic.w	r2, r3, #15
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	655a      	str	r2, [r3, #84]	@ 0x54
      hjpeg->Context |= (JPEG_CONTEXT_ENCODE | JPEG_CONTEXT_DMA);
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009740:	f043 020d 	orr.w	r2, r3, #13
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	655a      	str	r2, [r3, #84]	@ 0x54

      /*Store In/out buffers pointers and size*/
      hjpeg->pJpegInBuffPtr = pDataInMCU;
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	68ba      	ldr	r2, [r7, #8]
 800974c:	619a      	str	r2, [r3, #24]
      hjpeg->pJpegOutBuffPtr = pDataOut;
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	683a      	ldr	r2, [r7, #0]
 8009752:	61da      	str	r2, [r3, #28]
      hjpeg->InDataLength = InDataLength;
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	687a      	ldr	r2, [r7, #4]
 8009758:	629a      	str	r2, [r3, #40]	@ 0x28
      hjpeg->OutDataLength = OutDataLength;
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	69ba      	ldr	r2, [r7, #24]
 800975e:	62da      	str	r2, [r3, #44]	@ 0x2c

      /*Reset In/out data counter */
      hjpeg->JpegInCount = 0;
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	2200      	movs	r2, #0
 8009764:	621a      	str	r2, [r3, #32]
      hjpeg->JpegOutCount = 0;
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	2200      	movs	r2, #0
 800976a:	625a      	str	r2, [r3, #36]	@ 0x24

      /*Init decoding process*/
      JPEG_Init_Process(hjpeg);
 800976c:	68f8      	ldr	r0, [r7, #12]
 800976e:	f000 ffd5 	bl	800a71c <JPEG_Init_Process>

      /* JPEG encoding process using DMA */
      if (JPEG_DMA_StartProcess(hjpeg) != HAL_OK)
 8009772:	68f8      	ldr	r0, [r7, #12]
 8009774:	f001 faf6 	bl	800ad64 <JPEG_DMA_StartProcess>
 8009778:	4603      	mov	r3, r0
 800977a:	2b00      	cmp	r3, #0
 800977c:	d00f      	beq.n	800979e <HAL_JPEG_Encode_DMA+0xd6>
      {
        /* Update State */
        hjpeg->State = HAL_JPEG_STATE_ERROR;
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	2206      	movs	r2, #6
 8009782:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
        /* Process Unlocked */
        __HAL_UNLOCK(hjpeg);
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	2200      	movs	r2, #0
 800978a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 800978e:	2301      	movs	r3, #1
 8009790:	e006      	b.n	80097a0 <HAL_JPEG_Encode_DMA+0xd8>

    }
    else
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hjpeg);
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	2200      	movs	r2, #0
 8009796:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      return HAL_ERROR;
 800979a:	2301      	movs	r3, #1
 800979c:	e000      	b.n	80097a0 <HAL_JPEG_Encode_DMA+0xd8>
    }
  }
  /* Return function status */
  return HAL_OK;
 800979e:	2300      	movs	r3, #0
}
 80097a0:	4618      	mov	r0, r3
 80097a2:	3710      	adds	r7, #16
 80097a4:	46bd      	mov	sp, r7
 80097a6:	bd80      	pop	{r7, pc}

080097a8 <HAL_JPEG_Pause>:
  *                           JPEG_PAUSE_RESUME_OUTPUT: Pause Output processing
  *                           JPEG_PAUSE_RESUME_INPUT_OUTPUT: Pause Input and Output processing
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_JPEG_Pause(JPEG_HandleTypeDef *hjpeg, uint32_t XferSelection)
{
 80097a8:	b480      	push	{r7}
 80097aa:	b085      	sub	sp, #20
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
 80097b0:	6039      	str	r1, [r7, #0]
  uint32_t mask = 0;
 80097b2:	2300      	movs	r3, #0
 80097b4:	60fb      	str	r3, [r7, #12]

  assert_param(IS_JPEG_PAUSE_RESUME_STATE(XferSelection));

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80097ba:	f003 030c 	and.w	r3, r3, #12
 80097be:	2b0c      	cmp	r3, #12
 80097c0:	d116      	bne.n	80097f0 <HAL_JPEG_Pause+0x48>
  {
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 80097c2:	683b      	ldr	r3, [r7, #0]
 80097c4:	f003 0301 	and.w	r3, r3, #1
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d005      	beq.n	80097d8 <HAL_JPEG_Pause+0x30>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80097d0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 80097d8:	683b      	ldr	r3, [r7, #0]
 80097da:	f003 0302 	and.w	r3, r3, #2
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d033      	beq.n	800984a <HAL_JPEG_Pause+0xa2>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80097e6:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	655a      	str	r2, [r3, #84]	@ 0x54
 80097ee:	e02c      	b.n	800984a <HAL_JPEG_Pause+0xa2>
    }

  }
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80097f4:	f003 030c 	and.w	r3, r3, #12
 80097f8:	2b08      	cmp	r3, #8
 80097fa:	d126      	bne.n	800984a <HAL_JPEG_Pause+0xa2>
  {

    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 80097fc:	683b      	ldr	r3, [r7, #0]
 80097fe:	f003 0301 	and.w	r3, r3, #1
 8009802:	2b00      	cmp	r3, #0
 8009804:	d009      	beq.n	800981a <HAL_JPEG_Pause+0x72>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800980a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	655a      	str	r2, [r3, #84]	@ 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	f043 0306 	orr.w	r3, r3, #6
 8009818:	60fb      	str	r3, [r7, #12]
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 800981a:	683b      	ldr	r3, [r7, #0]
 800981c:	f003 0302 	and.w	r3, r3, #2
 8009820:	2b00      	cmp	r3, #0
 8009822:	d009      	beq.n	8009838 <HAL_JPEG_Pause+0x90>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009828:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	655a      	str	r2, [r3, #84]	@ 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
 8009836:	60fb      	str	r3, [r7, #12]
    }
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	43da      	mvns	r2, r3
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	400a      	ands	r2, r1
 8009848:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Nothing to do */
  }

  /* Return function status */
  return HAL_OK;
 800984a:	2300      	movs	r3, #0
}
 800984c:	4618      	mov	r0, r3
 800984e:	3714      	adds	r7, #20
 8009850:	46bd      	mov	sp, r7
 8009852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009856:	4770      	bx	lr

08009858 <HAL_JPEG_ConfigInputBuffer>:
  * @param  pNewInputBuffer Pointer to the new input data buffer
  * @param  InDataLength Size in bytes of the new Input data buffer
  * @retval HAL status
  */
void HAL_JPEG_ConfigInputBuffer(JPEG_HandleTypeDef *hjpeg, uint8_t *pNewInputBuffer, uint32_t InDataLength)
{
 8009858:	b480      	push	{r7}
 800985a:	b085      	sub	sp, #20
 800985c:	af00      	add	r7, sp, #0
 800985e:	60f8      	str	r0, [r7, #12]
 8009860:	60b9      	str	r1, [r7, #8]
 8009862:	607a      	str	r2, [r7, #4]
  hjpeg->pJpegInBuffPtr =  pNewInputBuffer;
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	68ba      	ldr	r2, [r7, #8]
 8009868:	619a      	str	r2, [r3, #24]
  hjpeg->InDataLength = InDataLength;
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	687a      	ldr	r2, [r7, #4]
 800986e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8009870:	bf00      	nop
 8009872:	3714      	adds	r7, #20
 8009874:	46bd      	mov	sp, r7
 8009876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987a:	4770      	bx	lr

0800987c <HAL_JPEG_ConfigOutputBuffer>:
  * @param  pNewOutputBuffer Pointer to the new output data buffer
  * @param  OutDataLength Size in bytes of the new Output data buffer
  * @retval HAL status
  */
void HAL_JPEG_ConfigOutputBuffer(JPEG_HandleTypeDef *hjpeg, uint8_t *pNewOutputBuffer, uint32_t OutDataLength)
{
 800987c:	b480      	push	{r7}
 800987e:	b085      	sub	sp, #20
 8009880:	af00      	add	r7, sp, #0
 8009882:	60f8      	str	r0, [r7, #12]
 8009884:	60b9      	str	r1, [r7, #8]
 8009886:	607a      	str	r2, [r7, #4]
  hjpeg->pJpegOutBuffPtr = pNewOutputBuffer;
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	68ba      	ldr	r2, [r7, #8]
 800988c:	61da      	str	r2, [r3, #28]
  hjpeg->OutDataLength = OutDataLength;
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	687a      	ldr	r2, [r7, #4]
 8009892:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8009894:	bf00      	nop
 8009896:	3714      	adds	r7, #20
 8009898:	46bd      	mov	sp, r7
 800989a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800989e:	4770      	bx	lr

080098a0 <HAL_JPEG_InfoReadyCallback>:
  * @param  pInfo pointer to a JPEG_ConfTypeDef structure that contains
  *         The JPEG decoded header information
  * @retval None
  */
__weak void HAL_JPEG_InfoReadyCallback(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
{
 80098a0:	b480      	push	{r7}
 80098a2:	b083      	sub	sp, #12
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	6078      	str	r0, [r7, #4]
 80098a8:	6039      	str	r1, [r7, #0]
  UNUSED(pInfo);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_JPEG_HeaderParsingCpltCallback could be implemented in the user file
   */
}
 80098aa:	bf00      	nop
 80098ac:	370c      	adds	r7, #12
 80098ae:	46bd      	mov	sp, r7
 80098b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b4:	4770      	bx	lr

080098b6 <HAL_JPEG_DecodeCpltCallback>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
__weak void HAL_JPEG_DecodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
{
 80098b6:	b480      	push	{r7}
 80098b8:	b083      	sub	sp, #12
 80098ba:	af00      	add	r7, sp, #0
 80098bc:	6078      	str	r0, [r7, #4]
  UNUSED(hjpeg);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_JPEG_EncodeCpltCallback could be implemented in the user file
   */
}
 80098be:	bf00      	nop
 80098c0:	370c      	adds	r7, #12
 80098c2:	46bd      	mov	sp, r7
 80098c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c8:	4770      	bx	lr

080098ca <HAL_JPEG_IRQHandler>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
void HAL_JPEG_IRQHandler(JPEG_HandleTypeDef *hjpeg)
{
 80098ca:	b580      	push	{r7, lr}
 80098cc:	b082      	sub	sp, #8
 80098ce:	af00      	add	r7, sp, #0
 80098d0:	6078      	str	r0, [r7, #4]
  switch (hjpeg->State)
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 80098d8:	b2db      	uxtb	r3, r3
 80098da:	3b03      	subs	r3, #3
 80098dc:	2b01      	cmp	r3, #1
 80098de:	d813      	bhi.n	8009908 <HAL_JPEG_IRQHandler+0x3e>
  {
    case HAL_JPEG_STATE_BUSY_ENCODING:
    case HAL_JPEG_STATE_BUSY_DECODING:
      /* continue JPEG data encoding/Decoding*/
      /* JPEG data processing : In/Out FIFO transfer*/
      if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80098e4:	f003 030c 	and.w	r3, r3, #12
 80098e8:	2b08      	cmp	r3, #8
 80098ea:	d103      	bne.n	80098f4 <HAL_JPEG_IRQHandler+0x2a>
      {
        (void) JPEG_Process(hjpeg);
 80098ec:	6878      	ldr	r0, [r7, #4]
 80098ee:	f000 ff89 	bl	800a804 <JPEG_Process>
      }
      else
      {
        /* Nothing to do */
      }
      break;
 80098f2:	e00b      	b.n	800990c <HAL_JPEG_IRQHandler+0x42>
      else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80098f8:	f003 030c 	and.w	r3, r3, #12
 80098fc:	2b0c      	cmp	r3, #12
 80098fe:	d105      	bne.n	800990c <HAL_JPEG_IRQHandler+0x42>
        JPEG_DMA_ContinueProcess(hjpeg);
 8009900:	6878      	ldr	r0, [r7, #4]
 8009902:	f001 fac9 	bl	800ae98 <JPEG_DMA_ContinueProcess>
      break;
 8009906:	e001      	b.n	800990c <HAL_JPEG_IRQHandler+0x42>

    default:
      break;
 8009908:	bf00      	nop
 800990a:	e000      	b.n	800990e <HAL_JPEG_IRQHandler+0x44>
      break;
 800990c:	bf00      	nop
  }
}
 800990e:	bf00      	nop
 8009910:	3708      	adds	r7, #8
 8009912:	46bd      	mov	sp, r7
 8009914:	bd80      	pop	{r7, pc}

08009916 <JPEG_Bits_To_SizeCodes>:
  * @param  Huffcode pointer to codes table
  * @param  LastK pointer to last Coeff (table dimension)
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Bits_To_SizeCodes(uint8_t *Bits, uint8_t *Huffsize, uint32_t *Huffcode, uint32_t *LastK)
{
 8009916:	b480      	push	{r7}
 8009918:	b08b      	sub	sp, #44	@ 0x2c
 800991a:	af00      	add	r7, sp, #0
 800991c:	60f8      	str	r0, [r7, #12]
 800991e:	60b9      	str	r1, [r7, #8]
 8009920:	607a      	str	r2, [r7, #4]
 8009922:	603b      	str	r3, [r7, #0]
  uint32_t l;
  uint32_t code;
  uint32_t si;

  /* Figure C.1: Generation of table of Huffman code sizes */
  p = 0;
 8009924:	2300      	movs	r3, #0
 8009926:	623b      	str	r3, [r7, #32]
  for (l = 0; l < 16UL; l++)
 8009928:	2300      	movs	r3, #0
 800992a:	61fb      	str	r3, [r7, #28]
 800992c:	e020      	b.n	8009970 <JPEG_Bits_To_SizeCodes+0x5a>
  {
    i = (uint32_t)Bits[l];
 800992e:	68fa      	ldr	r2, [r7, #12]
 8009930:	69fb      	ldr	r3, [r7, #28]
 8009932:	4413      	add	r3, r2
 8009934:	781b      	ldrb	r3, [r3, #0]
 8009936:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((p + i) > 256UL)
 8009938:	6a3a      	ldr	r2, [r7, #32]
 800993a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800993c:	4413      	add	r3, r2
 800993e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009942:	d90f      	bls.n	8009964 <JPEG_Bits_To_SizeCodes+0x4e>
    {
      /* check for table overflow */
      return HAL_ERROR;
 8009944:	2301      	movs	r3, #1
 8009946:	e055      	b.n	80099f4 <JPEG_Bits_To_SizeCodes+0xde>
    }
    while (i != 0UL)
    {
      Huffsize[p] = (uint8_t) l + 1U;
 8009948:	69fb      	ldr	r3, [r7, #28]
 800994a:	b2da      	uxtb	r2, r3
 800994c:	68b9      	ldr	r1, [r7, #8]
 800994e:	6a3b      	ldr	r3, [r7, #32]
 8009950:	440b      	add	r3, r1
 8009952:	3201      	adds	r2, #1
 8009954:	b2d2      	uxtb	r2, r2
 8009956:	701a      	strb	r2, [r3, #0]
      p++;
 8009958:	6a3b      	ldr	r3, [r7, #32]
 800995a:	3301      	adds	r3, #1
 800995c:	623b      	str	r3, [r7, #32]
      i--;
 800995e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009960:	3b01      	subs	r3, #1
 8009962:	627b      	str	r3, [r7, #36]	@ 0x24
    while (i != 0UL)
 8009964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009966:	2b00      	cmp	r3, #0
 8009968:	d1ee      	bne.n	8009948 <JPEG_Bits_To_SizeCodes+0x32>
  for (l = 0; l < 16UL; l++)
 800996a:	69fb      	ldr	r3, [r7, #28]
 800996c:	3301      	adds	r3, #1
 800996e:	61fb      	str	r3, [r7, #28]
 8009970:	69fb      	ldr	r3, [r7, #28]
 8009972:	2b0f      	cmp	r3, #15
 8009974:	d9db      	bls.n	800992e <JPEG_Bits_To_SizeCodes+0x18>
    }
  }
  Huffsize[p] = 0;
 8009976:	68ba      	ldr	r2, [r7, #8]
 8009978:	6a3b      	ldr	r3, [r7, #32]
 800997a:	4413      	add	r3, r2
 800997c:	2200      	movs	r2, #0
 800997e:	701a      	strb	r2, [r3, #0]
  *LastK = p;
 8009980:	683b      	ldr	r3, [r7, #0]
 8009982:	6a3a      	ldr	r2, [r7, #32]
 8009984:	601a      	str	r2, [r3, #0]

  /* Figure C.2: Generation of table of Huffman codes */
  code = 0;
 8009986:	2300      	movs	r3, #0
 8009988:	61bb      	str	r3, [r7, #24]
  si = Huffsize[0];
 800998a:	68bb      	ldr	r3, [r7, #8]
 800998c:	781b      	ldrb	r3, [r3, #0]
 800998e:	617b      	str	r3, [r7, #20]
  p = 0;
 8009990:	2300      	movs	r3, #0
 8009992:	623b      	str	r3, [r7, #32]
  while (Huffsize[p] != 0U)
 8009994:	e027      	b.n	80099e6 <JPEG_Bits_To_SizeCodes+0xd0>
  {
    while (((uint32_t) Huffsize[p]) == si)
    {
      Huffcode[p] = code;
 8009996:	6a3b      	ldr	r3, [r7, #32]
 8009998:	009b      	lsls	r3, r3, #2
 800999a:	687a      	ldr	r2, [r7, #4]
 800999c:	4413      	add	r3, r2
 800999e:	69ba      	ldr	r2, [r7, #24]
 80099a0:	601a      	str	r2, [r3, #0]
      p++;
 80099a2:	6a3b      	ldr	r3, [r7, #32]
 80099a4:	3301      	adds	r3, #1
 80099a6:	623b      	str	r3, [r7, #32]
      code++;
 80099a8:	69bb      	ldr	r3, [r7, #24]
 80099aa:	3301      	adds	r3, #1
 80099ac:	61bb      	str	r3, [r7, #24]
    while (((uint32_t) Huffsize[p]) == si)
 80099ae:	68ba      	ldr	r2, [r7, #8]
 80099b0:	6a3b      	ldr	r3, [r7, #32]
 80099b2:	4413      	add	r3, r2
 80099b4:	781b      	ldrb	r3, [r3, #0]
 80099b6:	461a      	mov	r2, r3
 80099b8:	697b      	ldr	r3, [r7, #20]
 80099ba:	4293      	cmp	r3, r2
 80099bc:	d0eb      	beq.n	8009996 <JPEG_Bits_To_SizeCodes+0x80>
    }
    /* code must fit in "size" bits (si), no code is allowed to be all ones*/
    if(si > 31UL)
 80099be:	697b      	ldr	r3, [r7, #20]
 80099c0:	2b1f      	cmp	r3, #31
 80099c2:	d901      	bls.n	80099c8 <JPEG_Bits_To_SizeCodes+0xb2>
    {
      return HAL_ERROR;
 80099c4:	2301      	movs	r3, #1
 80099c6:	e015      	b.n	80099f4 <JPEG_Bits_To_SizeCodes+0xde>
    }
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 80099c8:	2201      	movs	r2, #1
 80099ca:	697b      	ldr	r3, [r7, #20]
 80099cc:	fa02 f303 	lsl.w	r3, r2, r3
 80099d0:	69ba      	ldr	r2, [r7, #24]
 80099d2:	429a      	cmp	r2, r3
 80099d4:	d301      	bcc.n	80099da <JPEG_Bits_To_SizeCodes+0xc4>
    {
      return HAL_ERROR;
 80099d6:	2301      	movs	r3, #1
 80099d8:	e00c      	b.n	80099f4 <JPEG_Bits_To_SizeCodes+0xde>
    }
    code <<= 1;
 80099da:	69bb      	ldr	r3, [r7, #24]
 80099dc:	005b      	lsls	r3, r3, #1
 80099de:	61bb      	str	r3, [r7, #24]
    si++;
 80099e0:	697b      	ldr	r3, [r7, #20]
 80099e2:	3301      	adds	r3, #1
 80099e4:	617b      	str	r3, [r7, #20]
  while (Huffsize[p] != 0U)
 80099e6:	68ba      	ldr	r2, [r7, #8]
 80099e8:	6a3b      	ldr	r3, [r7, #32]
 80099ea:	4413      	add	r3, r2
 80099ec:	781b      	ldrb	r3, [r3, #0]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d1dd      	bne.n	80099ae <JPEG_Bits_To_SizeCodes+0x98>
  }
  /* Return function status */
  return HAL_OK;
 80099f2:	2300      	movs	r3, #0
}
 80099f4:	4618      	mov	r0, r3
 80099f6:	372c      	adds	r7, #44	@ 0x2c
 80099f8:	46bd      	mov	sp, r7
 80099fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fe:	4770      	bx	lr

08009a00 <JPEG_ACHuff_BitsVals_To_SizeCodes>:
  * @param  AC_SizeCodesTable pointer to AC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_ACHuff_BitsVals_To_SizeCodes(JPEG_ACHuffTableTypeDef *AC_BitsValsTable,
                                                           JPEG_AC_HuffCodeTableTypeDef *AC_SizeCodesTable)
{
 8009a00:	b580      	push	{r7, lr}
 8009a02:	f5ad 6da5 	sub.w	sp, sp, #1320	@ 0x528
 8009a06:	af00      	add	r7, sp, #0
 8009a08:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8009a0c:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 8009a10:	6018      	str	r0, [r3, #0]
 8009a12:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8009a16:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 8009a1a:	6019      	str	r1, [r3, #0]
  uint32_t huffcode[257];
  uint32_t k;
  uint32_t l, lsb, msb;
  uint32_t lastK;

  error = JPEG_Bits_To_SizeCodes(AC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 8009a1c:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8009a20:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 8009a24:	6818      	ldr	r0, [r3, #0]
 8009a26:	f107 0308 	add.w	r3, r7, #8
 8009a2a:	f107 020c 	add.w	r2, r7, #12
 8009a2e:	f507 6182 	add.w	r1, r7, #1040	@ 0x410
 8009a32:	f7ff ff70 	bl	8009916 <JPEG_Bits_To_SizeCodes>
 8009a36:	4603      	mov	r3, r0
 8009a38:	f887 351f 	strb.w	r3, [r7, #1311]	@ 0x51f
  if (error != HAL_OK)
 8009a3c:	f897 351f 	ldrb.w	r3, [r7, #1311]	@ 0x51f
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d002      	beq.n	8009a4a <JPEG_ACHuff_BitsVals_To_SizeCodes+0x4a>
  {
    return  error;
 8009a44:	f897 351f 	ldrb.w	r3, [r7, #1311]	@ 0x51f
 8009a48:	e075      	b.n	8009b36 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x136>
  }

  /* Figure C.3: Ordering procedure for encoding procedure code tables */
  k = 0;
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	f8c7 3524 	str.w	r3, [r7, #1316]	@ 0x524

  while (k < lastK)
 8009a50:	e067      	b.n	8009b22 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x122>
  {
    l = AC_BitsValsTable->HuffVal[k];
 8009a52:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8009a56:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 8009a5a:	681a      	ldr	r2, [r3, #0]
 8009a5c:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 8009a60:	4413      	add	r3, r2
 8009a62:	3310      	adds	r3, #16
 8009a64:	781b      	ldrb	r3, [r3, #0]
 8009a66:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
    if (l == 0UL)
 8009a6a:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d103      	bne.n	8009a7a <JPEG_ACHuff_BitsVals_To_SizeCodes+0x7a>
    {
      l = 160; /*l = 0x00 EOB code*/
 8009a72:	23a0      	movs	r3, #160	@ 0xa0
 8009a74:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
 8009a78:	e021      	b.n	8009abe <JPEG_ACHuff_BitsVals_To_SizeCodes+0xbe>
    }
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
 8009a7a:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8009a7e:	2bf0      	cmp	r3, #240	@ 0xf0
 8009a80:	d103      	bne.n	8009a8a <JPEG_ACHuff_BitsVals_To_SizeCodes+0x8a>
    {
      l = 161;
 8009a82:	23a1      	movs	r3, #161	@ 0xa1
 8009a84:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
 8009a88:	e019      	b.n	8009abe <JPEG_ACHuff_BitsVals_To_SizeCodes+0xbe>
    }
    else
    {
      msb = (l & 0xF0UL) >> 4;
 8009a8a:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8009a8e:	091b      	lsrs	r3, r3, #4
 8009a90:	f003 030f 	and.w	r3, r3, #15
 8009a94:	f8c7 3518 	str.w	r3, [r7, #1304]	@ 0x518
      lsb = (l & 0x0FUL);
 8009a98:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8009a9c:	f003 030f 	and.w	r3, r3, #15
 8009aa0:	f8c7 3514 	str.w	r3, [r7, #1300]	@ 0x514
      l = (msb * 10UL) + lsb - 1UL;
 8009aa4:	f8d7 2518 	ldr.w	r2, [r7, #1304]	@ 0x518
 8009aa8:	4613      	mov	r3, r2
 8009aaa:	009b      	lsls	r3, r3, #2
 8009aac:	4413      	add	r3, r2
 8009aae:	005b      	lsls	r3, r3, #1
 8009ab0:	461a      	mov	r2, r3
 8009ab2:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 8009ab6:	4413      	add	r3, r2
 8009ab8:	3b01      	subs	r3, #1
 8009aba:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
    }
    if (l >= JPEG_AC_HUFF_TABLE_SIZE)
 8009abe:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8009ac2:	2ba1      	cmp	r3, #161	@ 0xa1
 8009ac4:	d901      	bls.n	8009aca <JPEG_ACHuff_BitsVals_To_SizeCodes+0xca>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 8009ac6:	2301      	movs	r3, #1
 8009ac8:	e035      	b.n	8009b36 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x136>
    }
    else
    {
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8009aca:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8009ace:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 8009ad2:	f8d7 2524 	ldr.w	r2, [r7, #1316]	@ 0x524
 8009ad6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009ada:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8009ade:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 8009ae2:	6819      	ldr	r1, [r3, #0]
 8009ae4:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8009ae8:	3328      	adds	r3, #40	@ 0x28
 8009aea:	009b      	lsls	r3, r3, #2
 8009aec:	440b      	add	r3, r1
 8009aee:	605a      	str	r2, [r3, #4]
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 8009af0:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8009af4:	f5a3 728c 	sub.w	r2, r3, #280	@ 0x118
 8009af8:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 8009afc:	4413      	add	r3, r2
 8009afe:	781b      	ldrb	r3, [r3, #0]
 8009b00:	3b01      	subs	r3, #1
 8009b02:	b2d9      	uxtb	r1, r3
 8009b04:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8009b08:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 8009b0c:	681a      	ldr	r2, [r3, #0]
 8009b0e:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8009b12:	4413      	add	r3, r2
 8009b14:	460a      	mov	r2, r1
 8009b16:	701a      	strb	r2, [r3, #0]
      k++;
 8009b18:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 8009b1c:	3301      	adds	r3, #1
 8009b1e:	f8c7 3524 	str.w	r3, [r7, #1316]	@ 0x524
  while (k < lastK)
 8009b22:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8009b26:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	f8d7 2524 	ldr.w	r2, [r7, #1316]	@ 0x524
 8009b30:	429a      	cmp	r2, r3
 8009b32:	d38e      	bcc.n	8009a52 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x52>
    }
  }

  /* Return function status */
  return HAL_OK;
 8009b34:	2300      	movs	r3, #0
}
 8009b36:	4618      	mov	r0, r3
 8009b38:	f507 67a5 	add.w	r7, r7, #1320	@ 0x528
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	bd80      	pop	{r7, pc}

08009b40 <JPEG_DCHuff_BitsVals_To_SizeCodes>:
  * @param  DC_SizeCodesTable pointer to DC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_DCHuff_BitsVals_To_SizeCodes(JPEG_DCHuffTableTypeDef *DC_BitsValsTable,
                                                           JPEG_DC_HuffCodeTableTypeDef *DC_SizeCodesTable)
{
 8009b40:	b580      	push	{r7, lr}
 8009b42:	f5ad 6da4 	sub.w	sp, sp, #1312	@ 0x520
 8009b46:	af00      	add	r7, sp, #0
 8009b48:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8009b4c:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 8009b50:	6018      	str	r0, [r3, #0]
 8009b52:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8009b56:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 8009b5a:	6019      	str	r1, [r3, #0]
  uint32_t k;
  uint32_t l;
  uint32_t lastK;
  uint8_t huffsize[257];
  uint32_t huffcode[257];
  error = JPEG_Bits_To_SizeCodes(DC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 8009b5c:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8009b60:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 8009b64:	6818      	ldr	r0, [r3, #0]
 8009b66:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8009b6a:	f107 0208 	add.w	r2, r7, #8
 8009b6e:	f207 410c 	addw	r1, r7, #1036	@ 0x40c
 8009b72:	f7ff fed0 	bl	8009916 <JPEG_Bits_To_SizeCodes>
 8009b76:	4603      	mov	r3, r0
 8009b78:	f887 351b 	strb.w	r3, [r7, #1307]	@ 0x51b
  if (error != HAL_OK)
 8009b7c:	f897 351b 	ldrb.w	r3, [r7, #1307]	@ 0x51b
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d002      	beq.n	8009b8a <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4a>
  {
    return  error;
 8009b84:	f897 351b 	ldrb.w	r3, [r7, #1307]	@ 0x51b
 8009b88:	e048      	b.n	8009c1c <JPEG_DCHuff_BitsVals_To_SizeCodes+0xdc>
  }
  /* Figure C.3: ordering procedure for encoding procedure code tables */
  k = 0;
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	f8c7 351c 	str.w	r3, [r7, #1308]	@ 0x51c

  while (k < lastK)
 8009b90:	e03d      	b.n	8009c0e <JPEG_DCHuff_BitsVals_To_SizeCodes+0xce>
  {
    l = DC_BitsValsTable->HuffVal[k];
 8009b92:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8009b96:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 8009b9a:	681a      	ldr	r2, [r3, #0]
 8009b9c:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 8009ba0:	4413      	add	r3, r2
 8009ba2:	3310      	adds	r3, #16
 8009ba4:	781b      	ldrb	r3, [r3, #0]
 8009ba6:	f8c7 3514 	str.w	r3, [r7, #1300]	@ 0x514
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
 8009baa:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 8009bae:	2b0b      	cmp	r3, #11
 8009bb0:	d901      	bls.n	8009bb6 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x76>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 8009bb2:	2301      	movs	r3, #1
 8009bb4:	e032      	b.n	8009c1c <JPEG_DCHuff_BitsVals_To_SizeCodes+0xdc>
    }
    else
    {
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8009bb6:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8009bba:	f5a3 63a3 	sub.w	r3, r3, #1304	@ 0x518
 8009bbe:	f8d7 251c 	ldr.w	r2, [r7, #1308]	@ 0x51c
 8009bc2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009bc6:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8009bca:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 8009bce:	6819      	ldr	r1, [r3, #0]
 8009bd0:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 8009bd4:	3302      	adds	r3, #2
 8009bd6:	009b      	lsls	r3, r3, #2
 8009bd8:	440b      	add	r3, r1
 8009bda:	605a      	str	r2, [r3, #4]
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 8009bdc:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8009be0:	f5a3 728a 	sub.w	r2, r3, #276	@ 0x114
 8009be4:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 8009be8:	4413      	add	r3, r2
 8009bea:	781b      	ldrb	r3, [r3, #0]
 8009bec:	3b01      	subs	r3, #1
 8009bee:	b2d9      	uxtb	r1, r3
 8009bf0:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8009bf4:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 8009bf8:	681a      	ldr	r2, [r3, #0]
 8009bfa:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 8009bfe:	4413      	add	r3, r2
 8009c00:	460a      	mov	r2, r1
 8009c02:	701a      	strb	r2, [r3, #0]
      k++;
 8009c04:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 8009c08:	3301      	adds	r3, #1
 8009c0a:	f8c7 351c 	str.w	r3, [r7, #1308]	@ 0x51c
  while (k < lastK)
 8009c0e:	f8d7 3510 	ldr.w	r3, [r7, #1296]	@ 0x510
 8009c12:	f8d7 251c 	ldr.w	r2, [r7, #1308]	@ 0x51c
 8009c16:	429a      	cmp	r2, r3
 8009c18:	d3bb      	bcc.n	8009b92 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x52>
    }
  }

  /* Return function status */
  return HAL_OK;
 8009c1a:	2300      	movs	r3, #0
}
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	f507 67a4 	add.w	r7, r7, #1312	@ 0x520
 8009c22:	46bd      	mov	sp, r7
 8009c24:	bd80      	pop	{r7, pc}

08009c26 <JPEG_Set_HuffDC_Mem>:
  * @param  DCTableAddress Encoder DC huffman table address it could be HUFFENC_DC0 or HUFFENC_DC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffDC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_DCHuffTableTypeDef *HuffTableDC,
                                             const __IO uint32_t *DCTableAddress)
{
 8009c26:	b580      	push	{r7, lr}
 8009c28:	b09a      	sub	sp, #104	@ 0x68
 8009c2a:	af00      	add	r7, sp, #0
 8009c2c:	60f8      	str	r0, [r7, #12]
 8009c2e:	60b9      	str	r1, [r7, #8]
 8009c30:	607a      	str	r2, [r7, #4]
  uint32_t i;
  uint32_t lsb;
  uint32_t msb;
  __IO uint32_t *address, *addressDef;

  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
 8009c3a:	687a      	ldr	r2, [r7, #4]
 8009c3c:	429a      	cmp	r2, r3
 8009c3e:	d106      	bne.n	8009c4e <JPEG_Set_HuffDC_Mem+0x28>
  {
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
 8009c48:	3318      	adds	r3, #24
 8009c4a:	663b      	str	r3, [r7, #96]	@ 0x60
 8009c4c:	e00f      	b.n	8009c6e <JPEG_Set_HuffDC_Mem+0x48>
  }
  else if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC1))
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
 8009c56:	687a      	ldr	r2, [r7, #4]
 8009c58:	429a      	cmp	r2, r3
 8009c5a:	d106      	bne.n	8009c6a <JPEG_Set_HuffDC_Mem+0x44>
  {
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
 8009c64:	3318      	adds	r3, #24
 8009c66:	663b      	str	r3, [r7, #96]	@ 0x60
 8009c68:	e001      	b.n	8009c6e <JPEG_Set_HuffDC_Mem+0x48>
  }
  else
  {
    return HAL_ERROR;
 8009c6a:	2301      	movs	r3, #1
 8009c6c:	e059      	b.n	8009d22 <JPEG_Set_HuffDC_Mem+0xfc>
  }

  if (HuffTableDC != NULL)
 8009c6e:	68bb      	ldr	r3, [r7, #8]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d055      	beq.n	8009d20 <JPEG_Set_HuffDC_Mem+0xfa>
  {
    error = JPEG_DCHuff_BitsVals_To_SizeCodes(HuffTableDC, &dcSizeCodesTable);
 8009c74:	f107 0314 	add.w	r3, r7, #20
 8009c78:	4619      	mov	r1, r3
 8009c7a:	68b8      	ldr	r0, [r7, #8]
 8009c7c:	f7ff ff60 	bl	8009b40 <JPEG_DCHuff_BitsVals_To_SizeCodes>
 8009c80:	4603      	mov	r3, r0
 8009c82:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    if (error != HAL_OK)
 8009c86:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d002      	beq.n	8009c94 <JPEG_Set_HuffDC_Mem+0x6e>
    {
      return  error;
 8009c8e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009c92:	e046      	b.n	8009d22 <JPEG_Set_HuffDC_Mem+0xfc>
    }
    addressDef = address;
 8009c94:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009c96:	65bb      	str	r3, [r7, #88]	@ 0x58
    *addressDef = 0x0FFF0FFF;
 8009c98:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009c9a:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 8009c9e:	601a      	str	r2, [r3, #0]
    addressDef++;
 8009ca0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009ca2:	3304      	adds	r3, #4
 8009ca4:	65bb      	str	r3, [r7, #88]	@ 0x58
    *addressDef = 0x0FFF0FFF;
 8009ca6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009ca8:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 8009cac:	601a      	str	r2, [r3, #0]

    i = JPEG_DC_HUFF_TABLE_SIZE;
 8009cae:	230c      	movs	r3, #12
 8009cb0:	667b      	str	r3, [r7, #100]	@ 0x64
    while (i > 1UL)
 8009cb2:	e032      	b.n	8009d1a <JPEG_Set_HuffDC_Mem+0xf4>
    {
      i--;
 8009cb4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009cb6:	3b01      	subs	r3, #1
 8009cb8:	667b      	str	r3, [r7, #100]	@ 0x64
      address --;
 8009cba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009cbc:	3b04      	subs	r3, #4
 8009cbe:	663b      	str	r3, [r7, #96]	@ 0x60
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8009cc0:	f107 0214 	add.w	r2, r7, #20
 8009cc4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009cc6:	4413      	add	r3, r2
 8009cc8:	781b      	ldrb	r3, [r3, #0]
 8009cca:	021b      	lsls	r3, r3, #8
 8009ccc:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8009cd0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009cd2:	3302      	adds	r3, #2
 8009cd4:	009b      	lsls	r3, r3, #2
 8009cd6:	3368      	adds	r3, #104	@ 0x68
 8009cd8:	443b      	add	r3, r7
 8009cda:	f853 3c50 	ldr.w	r3, [r3, #-80]
 8009cde:	b2db      	uxtb	r3, r3
 8009ce0:	4313      	orrs	r3, r2
 8009ce2:	657b      	str	r3, [r7, #84]	@ 0x54
                                                                                   0xFFUL);
      i--;
 8009ce4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009ce6:	3b01      	subs	r3, #1
 8009ce8:	667b      	str	r3, [r7, #100]	@ 0x64
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8009cea:	f107 0214 	add.w	r2, r7, #20
 8009cee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009cf0:	4413      	add	r3, r2
 8009cf2:	781b      	ldrb	r3, [r3, #0]
 8009cf4:	021b      	lsls	r3, r3, #8
 8009cf6:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8009cfa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009cfc:	3302      	adds	r3, #2
 8009cfe:	009b      	lsls	r3, r3, #2
 8009d00:	3368      	adds	r3, #104	@ 0x68
 8009d02:	443b      	add	r3, r7
 8009d04:	f853 3c50 	ldr.w	r3, [r3, #-80]
 8009d08:	b2db      	uxtb	r3, r3
 8009d0a:	4313      	orrs	r3, r2
 8009d0c:	653b      	str	r3, [r7, #80]	@ 0x50
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 8009d0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009d10:	041a      	lsls	r2, r3, #16
 8009d12:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009d14:	431a      	orrs	r2, r3
 8009d16:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009d18:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 8009d1a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009d1c:	2b01      	cmp	r3, #1
 8009d1e:	d8c9      	bhi.n	8009cb4 <JPEG_Set_HuffDC_Mem+0x8e>
    }
  }

  /* Return function status */
  return HAL_OK;
 8009d20:	2300      	movs	r3, #0
}
 8009d22:	4618      	mov	r0, r3
 8009d24:	3768      	adds	r7, #104	@ 0x68
 8009d26:	46bd      	mov	sp, r7
 8009d28:	bd80      	pop	{r7, pc}
	...

08009d2c <JPEG_Set_HuffAC_Mem>:
  * @param  ACTableAddress Encoder AC huffman table address it could be HUFFENC_AC0 or HUFFENC_AC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffAC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_ACHuffTableTypeDef *HuffTableAC,
                                             const __IO uint32_t *ACTableAddress)
{
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	f5ad 7d56 	sub.w	sp, sp, #856	@ 0x358
 8009d32:	af00      	add	r7, sp, #0
 8009d34:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8009d38:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8009d3c:	6018      	str	r0, [r3, #0]
 8009d3e:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8009d42:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 8009d46:	6019      	str	r1, [r3, #0]
 8009d48:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8009d4c:	f5a3 7355 	sub.w	r3, r3, #852	@ 0x354
 8009d50:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef error;
  JPEG_AC_HuffCodeTableTypeDef acSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 8009d52:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8009d56:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009d62:	f507 7256 	add.w	r2, r7, #856	@ 0x358
 8009d66:	f5a2 7255 	sub.w	r2, r2, #852	@ 0x354
 8009d6a:	6812      	ldr	r2, [r2, #0]
 8009d6c:	429a      	cmp	r2, r3
 8009d6e:	d10c      	bne.n	8009d8a <JPEG_Set_HuffAC_Mem+0x5e>
  {
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 8009d70:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8009d74:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009d80:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8009d84:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
 8009d88:	e01d      	b.n	8009dc6 <JPEG_Set_HuffAC_Mem+0x9a>
  }
  else if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC1))
 8009d8a:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8009d8e:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
 8009d9a:	f507 7256 	add.w	r2, r7, #856	@ 0x358
 8009d9e:	f5a2 7255 	sub.w	r2, r2, #852	@ 0x354
 8009da2:	6812      	ldr	r2, [r2, #0]
 8009da4:	429a      	cmp	r2, r3
 8009da6:	d10c      	bne.n	8009dc2 <JPEG_Set_HuffAC_Mem+0x96>
  {
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 8009da8:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8009dac:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
 8009db8:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8009dbc:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
 8009dc0:	e001      	b.n	8009dc6 <JPEG_Set_HuffAC_Mem+0x9a>
  }
  else
  {
    return HAL_ERROR;
 8009dc2:	2301      	movs	r3, #1
 8009dc4:	e0a8      	b.n	8009f18 <JPEG_Set_HuffAC_Mem+0x1ec>
  }

  if (HuffTableAC != NULL)
 8009dc6:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8009dca:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	f000 80a0 	beq.w	8009f16 <JPEG_Set_HuffAC_Mem+0x1ea>
  {
    error = JPEG_ACHuff_BitsVals_To_SizeCodes(HuffTableAC, &acSizeCodesTable);
 8009dd6:	f107 0214 	add.w	r2, r7, #20
 8009dda:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8009dde:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 8009de2:	4611      	mov	r1, r2
 8009de4:	6818      	ldr	r0, [r3, #0]
 8009de6:	f7ff fe0b 	bl	8009a00 <JPEG_ACHuff_BitsVals_To_SizeCodes>
 8009dea:	4603      	mov	r3, r0
 8009dec:	f887 334b 	strb.w	r3, [r7, #843]	@ 0x34b
    if (error != HAL_OK)
 8009df0:	f897 334b 	ldrb.w	r3, [r7, #843]	@ 0x34b
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d002      	beq.n	8009dfe <JPEG_Set_HuffAC_Mem+0xd2>
    {
      return  error;
 8009df8:	f897 334b 	ldrb.w	r3, [r7, #843]	@ 0x34b
 8009dfc:	e08c      	b.n	8009f18 <JPEG_Set_HuffAC_Mem+0x1ec>
    }
    /* Default values settings: 162:167 FFFh , 168:175 FD0h_FD7h */
    /* Locations 162:175 of each AC table contain information used internally by the core */

    addressDef = address;
 8009dfe:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 8009e02:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    for (i = 0; i < 3UL; i++)
 8009e06:	2300      	movs	r3, #0
 8009e08:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
 8009e0c:	e00e      	b.n	8009e2c <JPEG_Set_HuffAC_Mem+0x100>
    {
      *addressDef = 0x0FFF0FFF;
 8009e0e:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8009e12:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 8009e16:	601a      	str	r2, [r3, #0]
      addressDef++;
 8009e18:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8009e1c:	3304      	adds	r3, #4
 8009e1e:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    for (i = 0; i < 3UL; i++)
 8009e22:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8009e26:	3301      	adds	r3, #1
 8009e28:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
 8009e2c:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8009e30:	2b02      	cmp	r3, #2
 8009e32:	d9ec      	bls.n	8009e0e <JPEG_Set_HuffAC_Mem+0xe2>
    }
    *addressDef = 0x0FD10FD0;
 8009e34:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8009e38:	4a3a      	ldr	r2, [pc, #232]	@ (8009f24 <JPEG_Set_HuffAC_Mem+0x1f8>)
 8009e3a:	601a      	str	r2, [r3, #0]
    addressDef++;
 8009e3c:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8009e40:	3304      	adds	r3, #4
 8009e42:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD30FD2;
 8009e46:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8009e4a:	4a37      	ldr	r2, [pc, #220]	@ (8009f28 <JPEG_Set_HuffAC_Mem+0x1fc>)
 8009e4c:	601a      	str	r2, [r3, #0]
    addressDef++;
 8009e4e:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8009e52:	3304      	adds	r3, #4
 8009e54:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD50FD4;
 8009e58:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8009e5c:	4a33      	ldr	r2, [pc, #204]	@ (8009f2c <JPEG_Set_HuffAC_Mem+0x200>)
 8009e5e:	601a      	str	r2, [r3, #0]
    addressDef++;
 8009e60:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8009e64:	3304      	adds	r3, #4
 8009e66:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD70FD6;
 8009e6a:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8009e6e:	4a30      	ldr	r2, [pc, #192]	@ (8009f30 <JPEG_Set_HuffAC_Mem+0x204>)
 8009e70:	601a      	str	r2, [r3, #0]
    /* end of Locations 162:175  */


    i = JPEG_AC_HUFF_TABLE_SIZE;
 8009e72:	23a2      	movs	r3, #162	@ 0xa2
 8009e74:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
    while (i > 1UL)
 8009e78:	e049      	b.n	8009f0e <JPEG_Set_HuffAC_Mem+0x1e2>
    {
      i--;
 8009e7a:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8009e7e:	3b01      	subs	r3, #1
 8009e80:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
      address--;
 8009e84:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 8009e88:	3b04      	subs	r3, #4
 8009e8a:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8009e8e:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8009e92:	f5a3 7251 	sub.w	r2, r3, #836	@ 0x344
 8009e96:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8009e9a:	4413      	add	r3, r2
 8009e9c:	781b      	ldrb	r3, [r3, #0]
 8009e9e:	021b      	lsls	r3, r3, #8
 8009ea0:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8009ea4:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8009ea8:	f5a3 7151 	sub.w	r1, r3, #836	@ 0x344
 8009eac:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8009eb0:	3328      	adds	r3, #40	@ 0x28
 8009eb2:	009b      	lsls	r3, r3, #2
 8009eb4:	440b      	add	r3, r1
 8009eb6:	685b      	ldr	r3, [r3, #4]
 8009eb8:	b2db      	uxtb	r3, r3
 8009eba:	4313      	orrs	r3, r2
 8009ebc:	f8c7 3344 	str.w	r3, [r7, #836]	@ 0x344
                                                                                   0xFFUL);
      i--;
 8009ec0:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8009ec4:	3b01      	subs	r3, #1
 8009ec6:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8009eca:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8009ece:	f5a3 7251 	sub.w	r2, r3, #836	@ 0x344
 8009ed2:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8009ed6:	4413      	add	r3, r2
 8009ed8:	781b      	ldrb	r3, [r3, #0]
 8009eda:	021b      	lsls	r3, r3, #8
 8009edc:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8009ee0:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8009ee4:	f5a3 7151 	sub.w	r1, r3, #836	@ 0x344
 8009ee8:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8009eec:	3328      	adds	r3, #40	@ 0x28
 8009eee:	009b      	lsls	r3, r3, #2
 8009ef0:	440b      	add	r3, r1
 8009ef2:	685b      	ldr	r3, [r3, #4]
 8009ef4:	b2db      	uxtb	r3, r3
 8009ef6:	4313      	orrs	r3, r2
 8009ef8:	f8c7 3340 	str.w	r3, [r7, #832]	@ 0x340
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 8009efc:	f8d7 3344 	ldr.w	r3, [r7, #836]	@ 0x344
 8009f00:	041a      	lsls	r2, r3, #16
 8009f02:	f8d7 3340 	ldr.w	r3, [r7, #832]	@ 0x340
 8009f06:	431a      	orrs	r2, r3
 8009f08:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 8009f0c:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 8009f0e:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8009f12:	2b01      	cmp	r3, #1
 8009f14:	d8b1      	bhi.n	8009e7a <JPEG_Set_HuffAC_Mem+0x14e>
    }
  }

  /* Return function status */
  return HAL_OK;
 8009f16:	2300      	movs	r3, #0
}
 8009f18:	4618      	mov	r0, r3
 8009f1a:	f507 7756 	add.w	r7, r7, #856	@ 0x358
 8009f1e:	46bd      	mov	sp, r7
 8009f20:	bd80      	pop	{r7, pc}
 8009f22:	bf00      	nop
 8009f24:	0fd10fd0 	.word	0x0fd10fd0
 8009f28:	0fd30fd2 	.word	0x0fd30fd2
 8009f2c:	0fd50fd4 	.word	0x0fd50fd4
 8009f30:	0fd70fd6 	.word	0x0fd70fd6

08009f34 <JPEG_Set_HuffEnc_Mem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static HAL_StatusTypeDef JPEG_Set_HuffEnc_Mem(JPEG_HandleTypeDef *hjpeg)
{
 8009f34:	b580      	push	{r7, lr}
 8009f36:	b084      	sub	sp, #16
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef error;

  JPEG_Set_Huff_DHTMem(hjpeg);
 8009f3c:	6878      	ldr	r0, [r7, #4]
 8009f3e:	f000 f84d 	bl	8009fdc <JPEG_Set_Huff_DHTMem>
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC0));
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
 8009f4a:	461a      	mov	r2, r3
 8009f4c:	491f      	ldr	r1, [pc, #124]	@ (8009fcc <JPEG_Set_HuffEnc_Mem+0x98>)
 8009f4e:	6878      	ldr	r0, [r7, #4]
 8009f50:	f7ff feec 	bl	8009d2c <JPEG_Set_HuffAC_Mem>
 8009f54:	4603      	mov	r3, r0
 8009f56:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8009f58:	7bfb      	ldrb	r3, [r7, #15]
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d001      	beq.n	8009f62 <JPEG_Set_HuffEnc_Mem+0x2e>
  {
    return  error;
 8009f5e:	7bfb      	ldrb	r3, [r7, #15]
 8009f60:	e030      	b.n	8009fc4 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC1));
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
 8009f6a:	461a      	mov	r2, r3
 8009f6c:	4918      	ldr	r1, [pc, #96]	@ (8009fd0 <JPEG_Set_HuffEnc_Mem+0x9c>)
 8009f6e:	6878      	ldr	r0, [r7, #4]
 8009f70:	f7ff fedc 	bl	8009d2c <JPEG_Set_HuffAC_Mem>
 8009f74:	4603      	mov	r3, r0
 8009f76:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8009f78:	7bfb      	ldrb	r3, [r7, #15]
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d001      	beq.n	8009f82 <JPEG_Set_HuffEnc_Mem+0x4e>
  {
    return  error;
 8009f7e:	7bfb      	ldrb	r3, [r7, #15]
 8009f80:	e020      	b.n	8009fc4 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC0);
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
 8009f8a:	461a      	mov	r2, r3
 8009f8c:	4911      	ldr	r1, [pc, #68]	@ (8009fd4 <JPEG_Set_HuffEnc_Mem+0xa0>)
 8009f8e:	6878      	ldr	r0, [r7, #4]
 8009f90:	f7ff fe49 	bl	8009c26 <JPEG_Set_HuffDC_Mem>
 8009f94:	4603      	mov	r3, r0
 8009f96:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8009f98:	7bfb      	ldrb	r3, [r7, #15]
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d001      	beq.n	8009fa2 <JPEG_Set_HuffEnc_Mem+0x6e>
  {
    return  error;
 8009f9e:	7bfb      	ldrb	r3, [r7, #15]
 8009fa0:	e010      	b.n	8009fc4 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC1);
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
 8009faa:	461a      	mov	r2, r3
 8009fac:	490a      	ldr	r1, [pc, #40]	@ (8009fd8 <JPEG_Set_HuffEnc_Mem+0xa4>)
 8009fae:	6878      	ldr	r0, [r7, #4]
 8009fb0:	f7ff fe39 	bl	8009c26 <JPEG_Set_HuffDC_Mem>
 8009fb4:	4603      	mov	r3, r0
 8009fb6:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8009fb8:	7bfb      	ldrb	r3, [r7, #15]
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d001      	beq.n	8009fc2 <JPEG_Set_HuffEnc_Mem+0x8e>
  {
    return  error;
 8009fbe:	7bfb      	ldrb	r3, [r7, #15]
 8009fc0:	e000      	b.n	8009fc4 <JPEG_Set_HuffEnc_Mem+0x90>
  }
  /* Return function status */
  return HAL_OK;
 8009fc2:	2300      	movs	r3, #0
}
 8009fc4:	4618      	mov	r0, r3
 8009fc6:	3710      	adds	r7, #16
 8009fc8:	46bd      	mov	sp, r7
 8009fca:	bd80      	pop	{r7, pc}
 8009fcc:	0801b4ac 	.word	0x0801b4ac
 8009fd0:	0801b560 	.word	0x0801b560
 8009fd4:	0801b474 	.word	0x0801b474
 8009fd8:	0801b490 	.word	0x0801b490

08009fdc <JPEG_Set_Huff_DHTMem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_Set_Huff_DHTMem(JPEG_HandleTypeDef *hjpeg)
{
 8009fdc:	b480      	push	{r7}
 8009fde:	b08b      	sub	sp, #44	@ 0x2c
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	6078      	str	r0, [r7, #4]
  JPEG_ACHuffTableTypeDef *HuffTableAC0 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable;
 8009fe4:	4b80      	ldr	r3, [pc, #512]	@ (800a1e8 <JPEG_Set_Huff_DHTMem+0x20c>)
 8009fe6:	61fb      	str	r3, [r7, #28]
  JPEG_ACHuffTableTypeDef *HuffTableAC1 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable;
 8009fe8:	4b80      	ldr	r3, [pc, #512]	@ (800a1ec <JPEG_Set_Huff_DHTMem+0x210>)
 8009fea:	61bb      	str	r3, [r7, #24]
  JPEG_DCHuffTableTypeDef *HuffTableDC0 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable;
 8009fec:	4b80      	ldr	r3, [pc, #512]	@ (800a1f0 <JPEG_Set_Huff_DHTMem+0x214>)
 8009fee:	617b      	str	r3, [r7, #20]
  JPEG_DCHuffTableTypeDef *HuffTableDC1 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable;
 8009ff0:	4b80      	ldr	r3, [pc, #512]	@ (800a1f4 <JPEG_Set_Huff_DHTMem+0x218>)
 8009ff2:	613b      	str	r3, [r7, #16]
  uint32_t value, index;
  __IO uint32_t *address;

  /* DC0 Huffman Table : BITS*/
  /* DC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address to DHTMEM + 3*/
  address = (hjpeg->Instance->DHTMEM + 3);
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8009ffc:	330c      	adds	r3, #12
 8009ffe:	623b      	str	r3, [r7, #32]
  index = 16;
 800a000:	2310      	movs	r3, #16
 800a002:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800a004:	e01d      	b.n	800a042 <JPEG_Set_Huff_DHTMem+0x66>
  {

    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800a006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a008:	3b01      	subs	r3, #1
 800a00a:	697a      	ldr	r2, [r7, #20]
 800a00c:	5cd3      	ldrb	r3, [r2, r3]
 800a00e:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800a010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a012:	3b02      	subs	r3, #2
 800a014:	6979      	ldr	r1, [r7, #20]
 800a016:	5ccb      	ldrb	r3, [r1, r3]
 800a018:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800a01a:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 800a01c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a01e:	3b03      	subs	r3, #3
 800a020:	6979      	ldr	r1, [r7, #20]
 800a022:	5ccb      	ldrb	r3, [r1, r3]
 800a024:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800a026:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->Bits[index - 4UL] & 0xFFUL);
 800a028:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a02a:	3a04      	subs	r2, #4
 800a02c:	6979      	ldr	r1, [r7, #20]
 800a02e:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 800a030:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800a032:	6a3b      	ldr	r3, [r7, #32]
 800a034:	601a      	str	r2, [r3, #0]
    address--;
 800a036:	6a3b      	ldr	r3, [r7, #32]
 800a038:	3b04      	subs	r3, #4
 800a03a:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800a03c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a03e:	3b04      	subs	r3, #4
 800a040:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800a042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a044:	2b03      	cmp	r3, #3
 800a046:	d8de      	bhi.n	800a006 <JPEG_Set_Huff_DHTMem+0x2a>

  }
  /* DC0 Huffman Table : Val*/
  /* DC0 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +4 to DHTMEM + 6 */
  address = (hjpeg->Instance->DHTMEM + 6);
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800a050:	3318      	adds	r3, #24
 800a052:	623b      	str	r3, [r7, #32]
  index = 12;
 800a054:	230c      	movs	r3, #12
 800a056:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800a058:	e021      	b.n	800a09e <JPEG_Set_Huff_DHTMem+0xc2>
  {
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800a05a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a05c:	3b01      	subs	r3, #1
 800a05e:	697a      	ldr	r2, [r7, #20]
 800a060:	4413      	add	r3, r2
 800a062:	7c1b      	ldrb	r3, [r3, #16]
 800a064:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800a066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a068:	3b02      	subs	r3, #2
 800a06a:	6979      	ldr	r1, [r7, #20]
 800a06c:	440b      	add	r3, r1
 800a06e:	7c1b      	ldrb	r3, [r3, #16]
 800a070:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800a072:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 800a074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a076:	3b03      	subs	r3, #3
 800a078:	6979      	ldr	r1, [r7, #20]
 800a07a:	440b      	add	r3, r1
 800a07c:	7c1b      	ldrb	r3, [r3, #16]
 800a07e:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800a080:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->HuffVal[index - 4UL] & 0xFFUL);
 800a082:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a084:	3a04      	subs	r2, #4
 800a086:	6979      	ldr	r1, [r7, #20]
 800a088:	440a      	add	r2, r1
 800a08a:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 800a08c:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800a08e:	6a3b      	ldr	r3, [r7, #32]
 800a090:	601a      	str	r2, [r3, #0]
    address--;
 800a092:	6a3b      	ldr	r3, [r7, #32]
 800a094:	3b04      	subs	r3, #4
 800a096:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800a098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a09a:	3b04      	subs	r3, #4
 800a09c:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800a09e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0a0:	2b03      	cmp	r3, #3
 800a0a2:	d8da      	bhi.n	800a05a <JPEG_Set_Huff_DHTMem+0x7e>
  }

  /* AC0 Huffman Table : BITS*/
  /* AC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 7 to DHTMEM + 10*/
  address = (hjpeg->Instance->DHTMEM + 10UL);
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800a0ac:	3328      	adds	r3, #40	@ 0x28
 800a0ae:	623b      	str	r3, [r7, #32]
  index = 16;
 800a0b0:	2310      	movs	r3, #16
 800a0b2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800a0b4:	e01d      	b.n	800a0f2 <JPEG_Set_Huff_DHTMem+0x116>
  {

    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800a0b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0b8:	3b01      	subs	r3, #1
 800a0ba:	69fa      	ldr	r2, [r7, #28]
 800a0bc:	5cd3      	ldrb	r3, [r2, r3]
 800a0be:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800a0c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0c2:	3b02      	subs	r3, #2
 800a0c4:	69f9      	ldr	r1, [r7, #28]
 800a0c6:	5ccb      	ldrb	r3, [r1, r3]
 800a0c8:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800a0ca:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 800a0cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0ce:	3b03      	subs	r3, #3
 800a0d0:	69f9      	ldr	r1, [r7, #28]
 800a0d2:	5ccb      	ldrb	r3, [r1, r3]
 800a0d4:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800a0d6:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->Bits[index - 4UL] & 0xFFUL);
 800a0d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a0da:	3a04      	subs	r2, #4
 800a0dc:	69f9      	ldr	r1, [r7, #28]
 800a0de:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 800a0e0:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800a0e2:	6a3b      	ldr	r3, [r7, #32]
 800a0e4:	601a      	str	r2, [r3, #0]
    address--;
 800a0e6:	6a3b      	ldr	r3, [r7, #32]
 800a0e8:	3b04      	subs	r3, #4
 800a0ea:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800a0ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0ee:	3b04      	subs	r3, #4
 800a0f0:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800a0f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0f4:	2b03      	cmp	r3, #3
 800a0f6:	d8de      	bhi.n	800a0b6 <JPEG_Set_Huff_DHTMem+0xda>

  }
  /* AC0 Huffman Table : Val*/
  /* AC0 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 11 to DHTMEM + 51 */
  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 51) belong to AC0 VALS table */
  address = (hjpeg->Instance->DHTMEM + 51);
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800a100:	33cc      	adds	r3, #204	@ 0xcc
 800a102:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 800a104:	6a3b      	ldr	r3, [r7, #32]
 800a106:	681a      	ldr	r2, [r3, #0]
 800a108:	4b3b      	ldr	r3, [pc, #236]	@ (800a1f8 <JPEG_Set_Huff_DHTMem+0x21c>)
 800a10a:	4013      	ands	r3, r2
 800a10c:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
 800a10e:	69fb      	ldr	r3, [r7, #28]
 800a110:	f893 30b1 	ldrb.w	r3, [r3, #177]	@ 0xb1
 800a114:	021a      	lsls	r2, r3, #8
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	4313      	orrs	r3, r2
 800a11a:	69fa      	ldr	r2, [r7, #28]
 800a11c:	f892 20b0 	ldrb.w	r2, [r2, #176]	@ 0xb0
 800a120:	4313      	orrs	r3, r2
 800a122:	60fb      	str	r3, [r7, #12]
  *address = value;
 800a124:	6a3b      	ldr	r3, [r7, #32]
 800a126:	68fa      	ldr	r2, [r7, #12]
 800a128:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC0 huffman values */
  address--; /* address = hjpeg->Instance->DHTMEM + 50*/
 800a12a:	6a3b      	ldr	r3, [r7, #32]
 800a12c:	3b04      	subs	r3, #4
 800a12e:	623b      	str	r3, [r7, #32]
  index = 160;
 800a130:	23a0      	movs	r3, #160	@ 0xa0
 800a132:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800a134:	e021      	b.n	800a17a <JPEG_Set_Huff_DHTMem+0x19e>
  {
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800a136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a138:	3b01      	subs	r3, #1
 800a13a:	69fa      	ldr	r2, [r7, #28]
 800a13c:	4413      	add	r3, r2
 800a13e:	7c1b      	ldrb	r3, [r3, #16]
 800a140:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800a142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a144:	3b02      	subs	r3, #2
 800a146:	69f9      	ldr	r1, [r7, #28]
 800a148:	440b      	add	r3, r1
 800a14a:	7c1b      	ldrb	r3, [r3, #16]
 800a14c:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800a14e:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 800a150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a152:	3b03      	subs	r3, #3
 800a154:	69f9      	ldr	r1, [r7, #28]
 800a156:	440b      	add	r3, r1
 800a158:	7c1b      	ldrb	r3, [r3, #16]
 800a15a:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800a15c:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->HuffVal[index - 4UL] & 0xFFUL);
 800a15e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a160:	3a04      	subs	r2, #4
 800a162:	69f9      	ldr	r1, [r7, #28]
 800a164:	440a      	add	r2, r1
 800a166:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 800a168:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800a16a:	6a3b      	ldr	r3, [r7, #32]
 800a16c:	601a      	str	r2, [r3, #0]
    address--;
 800a16e:	6a3b      	ldr	r3, [r7, #32]
 800a170:	3b04      	subs	r3, #4
 800a172:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800a174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a176:	3b04      	subs	r3, #4
 800a178:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800a17a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a17c:	2b03      	cmp	r3, #3
 800a17e:	d8da      	bhi.n	800a136 <JPEG_Set_Huff_DHTMem+0x15a>
  }

  /* DC1 Huffman Table : BITS*/
  /* DC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM + 51 base address to DHTMEM + 55*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 51) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 51);
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800a188:	33cc      	adds	r3, #204	@ 0xcc
 800a18a:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 800a18c:	6a3b      	ldr	r3, [r7, #32]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	b29b      	uxth	r3, r3
 800a192:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->Bits[0] & 0xFFUL) << 16);
 800a194:	693b      	ldr	r3, [r7, #16]
 800a196:	785b      	ldrb	r3, [r3, #1]
 800a198:	061a      	lsls	r2, r3, #24
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	431a      	orrs	r2, r3
 800a19e:	693b      	ldr	r3, [r7, #16]
 800a1a0:	781b      	ldrb	r3, [r3, #0]
 800a1a2:	041b      	lsls	r3, r3, #16
 800a1a4:	4313      	orrs	r3, r2
 800a1a6:	60fb      	str	r3, [r7, #12]
  *address = value;
 800a1a8:	6a3b      	ldr	r3, [r7, #32]
 800a1aa:	68fa      	ldr	r2, [r7, #12]
 800a1ac:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 55) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 55);
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800a1b6:	33dc      	adds	r3, #220	@ 0xdc
 800a1b8:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 800a1ba:	6a3b      	ldr	r3, [r7, #32]
 800a1bc:	681a      	ldr	r2, [r3, #0]
 800a1be:	4b0e      	ldr	r3, [pc, #56]	@ (800a1f8 <JPEG_Set_Huff_DHTMem+0x21c>)
 800a1c0:	4013      	ands	r3, r2
 800a1c2:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->Bits[14] & 0xFFUL);
 800a1c4:	693b      	ldr	r3, [r7, #16]
 800a1c6:	7bdb      	ldrb	r3, [r3, #15]
 800a1c8:	021a      	lsls	r2, r3, #8
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	4313      	orrs	r3, r2
 800a1ce:	693a      	ldr	r2, [r7, #16]
 800a1d0:	7b92      	ldrb	r2, [r2, #14]
 800a1d2:	4313      	orrs	r3, r2
 800a1d4:	60fb      	str	r3, [r7, #12]
  *address = value;
 800a1d6:	6a3b      	ldr	r3, [r7, #32]
 800a1d8:	68fa      	ldr	r2, [r7, #12]
 800a1da:	601a      	str	r2, [r3, #0]

  /*continue setting 12 DC1 huffman Bits from DHTMEM + 54 down to DHTMEM + 52*/
  address--;
 800a1dc:	6a3b      	ldr	r3, [r7, #32]
 800a1de:	3b04      	subs	r3, #4
 800a1e0:	623b      	str	r3, [r7, #32]
  index = 12;
 800a1e2:	230c      	movs	r3, #12
 800a1e4:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800a1e6:	e027      	b.n	800a238 <JPEG_Set_Huff_DHTMem+0x25c>
 800a1e8:	0801b4ac 	.word	0x0801b4ac
 800a1ec:	0801b560 	.word	0x0801b560
 800a1f0:	0801b474 	.word	0x0801b474
 800a1f4:	0801b490 	.word	0x0801b490
 800a1f8:	ffff0000 	.word	0xffff0000
  {

    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800a1fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1fe:	3301      	adds	r3, #1
 800a200:	693a      	ldr	r2, [r7, #16]
 800a202:	5cd3      	ldrb	r3, [r2, r3]
 800a204:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 800a206:	6939      	ldr	r1, [r7, #16]
 800a208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a20a:	440b      	add	r3, r1
 800a20c:	781b      	ldrb	r3, [r3, #0]
 800a20e:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800a210:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 800a212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a214:	3b01      	subs	r3, #1
 800a216:	6939      	ldr	r1, [r7, #16]
 800a218:	5ccb      	ldrb	r3, [r1, r3]
 800a21a:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 800a21c:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->Bits[index - 2UL] & 0xFFUL);
 800a21e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a220:	3a02      	subs	r2, #2
 800a222:	6939      	ldr	r1, [r7, #16]
 800a224:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 800a226:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800a228:	6a3b      	ldr	r3, [r7, #32]
 800a22a:	601a      	str	r2, [r3, #0]
    address--;
 800a22c:	6a3b      	ldr	r3, [r7, #32]
 800a22e:	3b04      	subs	r3, #4
 800a230:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800a232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a234:	3b04      	subs	r3, #4
 800a236:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800a238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a23a:	2b03      	cmp	r3, #3
 800a23c:	d8de      	bhi.n	800a1fc <JPEG_Set_Huff_DHTMem+0x220>

  }
  /* DC1 Huffman Table : Val*/
  /* DC1 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +55 to DHTMEM + 58 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 55) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 55);
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800a246:	33dc      	adds	r3, #220	@ 0xdc
 800a248:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 800a24a:	6a3b      	ldr	r3, [r7, #32]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	b29b      	uxth	r3, r3
 800a250:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->HuffVal[0] & 0xFFUL) <<
 800a252:	693b      	ldr	r3, [r7, #16]
 800a254:	7c5b      	ldrb	r3, [r3, #17]
 800a256:	061a      	lsls	r2, r3, #24
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	431a      	orrs	r2, r3
 800a25c:	693b      	ldr	r3, [r7, #16]
 800a25e:	7c1b      	ldrb	r3, [r3, #16]
 800a260:	041b      	lsls	r3, r3, #16
 800a262:	4313      	orrs	r3, r2
 800a264:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 800a266:	6a3b      	ldr	r3, [r7, #32]
 800a268:	68fa      	ldr	r2, [r7, #12]
 800a26a:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 58) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 58);
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800a274:	33e8      	adds	r3, #232	@ 0xe8
 800a276:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000UL;
 800a278:	6a3b      	ldr	r3, [r7, #32]
 800a27a:	681a      	ldr	r2, [r3, #0]
 800a27c:	4b6d      	ldr	r3, [pc, #436]	@ (800a434 <JPEG_Set_Huff_DHTMem+0x458>)
 800a27e:	4013      	ands	r3, r2
 800a280:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
 800a282:	693b      	ldr	r3, [r7, #16]
 800a284:	7edb      	ldrb	r3, [r3, #27]
 800a286:	021a      	lsls	r2, r3, #8
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	4313      	orrs	r3, r2
 800a28c:	693a      	ldr	r2, [r7, #16]
 800a28e:	7e92      	ldrb	r2, [r2, #26]
 800a290:	4313      	orrs	r3, r2
 800a292:	60fb      	str	r3, [r7, #12]
  *address = value;
 800a294:	6a3b      	ldr	r3, [r7, #32]
 800a296:	68fa      	ldr	r2, [r7, #12]
 800a298:	601a      	str	r2, [r3, #0]

  /*continue setting 8 DC1 huffman val from DHTMEM + 57 down to DHTMEM + 56*/
  address--;
 800a29a:	6a3b      	ldr	r3, [r7, #32]
 800a29c:	3b04      	subs	r3, #4
 800a29e:	623b      	str	r3, [r7, #32]
  index = 8;
 800a2a0:	2308      	movs	r3, #8
 800a2a2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800a2a4:	e021      	b.n	800a2ea <JPEG_Set_Huff_DHTMem+0x30e>
  {
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800a2a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2a8:	3301      	adds	r3, #1
 800a2aa:	693a      	ldr	r2, [r7, #16]
 800a2ac:	4413      	add	r3, r2
 800a2ae:	7c1b      	ldrb	r3, [r3, #16]
 800a2b0:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 800a2b2:	6939      	ldr	r1, [r7, #16]
 800a2b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2b6:	440b      	add	r3, r1
 800a2b8:	3310      	adds	r3, #16
 800a2ba:	781b      	ldrb	r3, [r3, #0]
 800a2bc:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800a2be:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800a2c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2c2:	3b01      	subs	r3, #1
 800a2c4:	6939      	ldr	r1, [r7, #16]
 800a2c6:	440b      	add	r3, r1
 800a2c8:	7c1b      	ldrb	r3, [r3, #16]
 800a2ca:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 800a2cc:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->HuffVal[index - 2UL] & 0xFFUL);
 800a2ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a2d0:	3a02      	subs	r2, #2
 800a2d2:	6939      	ldr	r1, [r7, #16]
 800a2d4:	440a      	add	r2, r1
 800a2d6:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800a2d8:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800a2da:	6a3b      	ldr	r3, [r7, #32]
 800a2dc:	601a      	str	r2, [r3, #0]
    address--;
 800a2de:	6a3b      	ldr	r3, [r7, #32]
 800a2e0:	3b04      	subs	r3, #4
 800a2e2:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800a2e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2e6:	3b04      	subs	r3, #4
 800a2e8:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800a2ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2ec:	2b03      	cmp	r3, #3
 800a2ee:	d8da      	bhi.n	800a2a6 <JPEG_Set_Huff_DHTMem+0x2ca>
  }

  /* AC1 Huffman Table : BITS*/
  /* AC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 58 to DHTMEM + 62*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 58) belong to AC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 58);
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800a2f8:	33e8      	adds	r3, #232	@ 0xe8
 800a2fa:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 800a2fc:	6a3b      	ldr	r3, [r7, #32]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	b29b      	uxth	r3, r3
 800a302:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->Bits[0] & 0xFFUL) << 16);
 800a304:	69bb      	ldr	r3, [r7, #24]
 800a306:	785b      	ldrb	r3, [r3, #1]
 800a308:	061a      	lsls	r2, r3, #24
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	431a      	orrs	r2, r3
 800a30e:	69bb      	ldr	r3, [r7, #24]
 800a310:	781b      	ldrb	r3, [r3, #0]
 800a312:	041b      	lsls	r3, r3, #16
 800a314:	4313      	orrs	r3, r2
 800a316:	60fb      	str	r3, [r7, #12]
  *address = value;
 800a318:	6a3b      	ldr	r3, [r7, #32]
 800a31a:	68fa      	ldr	r2, [r7, #12]
 800a31c:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 62) belong to Bits Val table */
  address = (hjpeg->Instance->DHTMEM + 62);
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800a326:	33f8      	adds	r3, #248	@ 0xf8
 800a328:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 800a32a:	6a3b      	ldr	r3, [r7, #32]
 800a32c:	681a      	ldr	r2, [r3, #0]
 800a32e:	4b41      	ldr	r3, [pc, #260]	@ (800a434 <JPEG_Set_Huff_DHTMem+0x458>)
 800a330:	4013      	ands	r3, r2
 800a332:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
 800a334:	69bb      	ldr	r3, [r7, #24]
 800a336:	7bdb      	ldrb	r3, [r3, #15]
 800a338:	021a      	lsls	r2, r3, #8
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	4313      	orrs	r3, r2
 800a33e:	69ba      	ldr	r2, [r7, #24]
 800a340:	7b92      	ldrb	r2, [r2, #14]
 800a342:	4313      	orrs	r3, r2
 800a344:	60fb      	str	r3, [r7, #12]
  *address = value;
 800a346:	6a3b      	ldr	r3, [r7, #32]
 800a348:	68fa      	ldr	r2, [r7, #12]
 800a34a:	601a      	str	r2, [r3, #0]

  /*continue setting 12 AC1 huffman Bits from DHTMEM + 61 down to DHTMEM + 59*/
  address--;
 800a34c:	6a3b      	ldr	r3, [r7, #32]
 800a34e:	3b04      	subs	r3, #4
 800a350:	623b      	str	r3, [r7, #32]
  index = 12;
 800a352:	230c      	movs	r3, #12
 800a354:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800a356:	e01d      	b.n	800a394 <JPEG_Set_Huff_DHTMem+0x3b8>
  {

    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800a358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a35a:	3301      	adds	r3, #1
 800a35c:	69ba      	ldr	r2, [r7, #24]
 800a35e:	5cd3      	ldrb	r3, [r2, r3]
 800a360:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 800a362:	69b9      	ldr	r1, [r7, #24]
 800a364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a366:	440b      	add	r3, r1
 800a368:	781b      	ldrb	r3, [r3, #0]
 800a36a:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800a36c:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 800a36e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a370:	3b01      	subs	r3, #1
 800a372:	69b9      	ldr	r1, [r7, #24]
 800a374:	5ccb      	ldrb	r3, [r1, r3]
 800a376:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 800a378:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->Bits[index - 2UL] & 0xFFUL);
 800a37a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a37c:	3a02      	subs	r2, #2
 800a37e:	69b9      	ldr	r1, [r7, #24]
 800a380:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 800a382:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800a384:	6a3b      	ldr	r3, [r7, #32]
 800a386:	601a      	str	r2, [r3, #0]
    address--;
 800a388:	6a3b      	ldr	r3, [r7, #32]
 800a38a:	3b04      	subs	r3, #4
 800a38c:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800a38e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a390:	3b04      	subs	r3, #4
 800a392:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800a394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a396:	2b03      	cmp	r3, #3
 800a398:	d8de      	bhi.n	800a358 <JPEG_Set_Huff_DHTMem+0x37c>

  }
  /* AC1 Huffman Table : Val*/
  /* AC1 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 62 to DHTMEM + 102 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 62) belong to AC1 VALS table */
  address = (hjpeg->Instance->DHTMEM + 62);
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800a3a2:	33f8      	adds	r3, #248	@ 0xf8
 800a3a4:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 800a3a6:	6a3b      	ldr	r3, [r7, #32]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	b29b      	uxth	r3, r3
 800a3ac:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
 800a3ae:	69bb      	ldr	r3, [r7, #24]
 800a3b0:	7c5b      	ldrb	r3, [r3, #17]
 800a3b2:	061a      	lsls	r2, r3, #24
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	431a      	orrs	r2, r3
 800a3b8:	69bb      	ldr	r3, [r7, #24]
 800a3ba:	7c1b      	ldrb	r3, [r3, #16]
 800a3bc:	041b      	lsls	r3, r3, #16
 800a3be:	4313      	orrs	r3, r2
 800a3c0:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 800a3c2:	6a3b      	ldr	r3, [r7, #32]
 800a3c4:	68fa      	ldr	r2, [r7, #12]
 800a3c6:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC1 huffman values from DHTMEM + 63 to DHTMEM+102 */
  address = (hjpeg->Instance->DHTMEM + 102);
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800a3d0:	f503 73cc 	add.w	r3, r3, #408	@ 0x198
 800a3d4:	623b      	str	r3, [r7, #32]
  index = 160;
 800a3d6:	23a0      	movs	r3, #160	@ 0xa0
 800a3d8:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800a3da:	e021      	b.n	800a420 <JPEG_Set_Huff_DHTMem+0x444>
  {
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800a3dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3de:	3301      	adds	r3, #1
 800a3e0:	69ba      	ldr	r2, [r7, #24]
 800a3e2:	4413      	add	r3, r2
 800a3e4:	7c1b      	ldrb	r3, [r3, #16]
 800a3e6:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 800a3e8:	69b9      	ldr	r1, [r7, #24]
 800a3ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3ec:	440b      	add	r3, r1
 800a3ee:	3310      	adds	r3, #16
 800a3f0:	781b      	ldrb	r3, [r3, #0]
 800a3f2:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800a3f4:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800a3f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3f8:	3b01      	subs	r3, #1
 800a3fa:	69b9      	ldr	r1, [r7, #24]
 800a3fc:	440b      	add	r3, r1
 800a3fe:	7c1b      	ldrb	r3, [r3, #16]
 800a400:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 800a402:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->HuffVal[index - 2UL] & 0xFFUL);
 800a404:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a406:	3a02      	subs	r2, #2
 800a408:	69b9      	ldr	r1, [r7, #24]
 800a40a:	440a      	add	r2, r1
 800a40c:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800a40e:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800a410:	6a3b      	ldr	r3, [r7, #32]
 800a412:	601a      	str	r2, [r3, #0]
    address--;
 800a414:	6a3b      	ldr	r3, [r7, #32]
 800a416:	3b04      	subs	r3, #4
 800a418:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800a41a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a41c:	3b04      	subs	r3, #4
 800a41e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800a420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a422:	2b03      	cmp	r3, #3
 800a424:	d8da      	bhi.n	800a3dc <JPEG_Set_Huff_DHTMem+0x400>
  }

}
 800a426:	bf00      	nop
 800a428:	bf00      	nop
 800a42a:	372c      	adds	r7, #44	@ 0x2c
 800a42c:	46bd      	mov	sp, r7
 800a42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a432:	4770      	bx	lr
 800a434:	ffff0000 	.word	0xffff0000

0800a438 <JPEG_Set_Quantization_Mem>:
  *         it could be QMEM0, QMEM1, QMEM2 or QMEM3
  * @retval 0 if no error, 1 if error
  */
static uint32_t JPEG_Set_Quantization_Mem(JPEG_HandleTypeDef *hjpeg, uint8_t *QTable,
                                                    __IO uint32_t *QTableAddress)
{
 800a438:	b480      	push	{r7}
 800a43a:	b08b      	sub	sp, #44	@ 0x2c
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	60f8      	str	r0, [r7, #12]
 800a440:	60b9      	str	r1, [r7, #8]
 800a442:	607a      	str	r2, [r7, #4]
  uint32_t quantRow;
  uint32_t quantVal;
  uint32_t ScaleFactor;
  __IO uint32_t *tableAddress;

  tableAddress = QTableAddress;
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	613b      	str	r3, [r7, #16]

  if ((hjpeg->Conf.ImageQuality >= 50UL) && (hjpeg->Conf.ImageQuality <= 100UL))
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	695b      	ldr	r3, [r3, #20]
 800a44c:	2b31      	cmp	r3, #49	@ 0x31
 800a44e:	d90a      	bls.n	800a466 <JPEG_Set_Quantization_Mem+0x2e>
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	695b      	ldr	r3, [r3, #20]
 800a454:	2b64      	cmp	r3, #100	@ 0x64
 800a456:	d806      	bhi.n	800a466 <JPEG_Set_Quantization_Mem+0x2e>
  {
    ScaleFactor = 200UL - (hjpeg->Conf.ImageQuality * 2UL);
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	695b      	ldr	r3, [r3, #20]
 800a45c:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 800a460:	005b      	lsls	r3, r3, #1
 800a462:	617b      	str	r3, [r7, #20]
 800a464:	e00d      	b.n	800a482 <JPEG_Set_Quantization_Mem+0x4a>
  }
  else if (hjpeg->Conf.ImageQuality > 0UL)
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	695b      	ldr	r3, [r3, #20]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d007      	beq.n	800a47e <JPEG_Set_Quantization_Mem+0x46>
  {
    ScaleFactor = ((uint32_t) 5000) / ((uint32_t) hjpeg->Conf.ImageQuality);
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	695b      	ldr	r3, [r3, #20]
 800a472:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a476:	fbb2 f3f3 	udiv	r3, r2, r3
 800a47a:	617b      	str	r3, [r7, #20]
 800a47c:	e001      	b.n	800a482 <JPEG_Set_Quantization_Mem+0x4a>
  }
  else
  {
    return 1UL;
 800a47e:	2301      	movs	r3, #1
 800a480:	e041      	b.n	800a506 <JPEG_Set_Quantization_Mem+0xce>
  }

  /*Quantization_table = (Standard_quanization_table * ScaleFactor + 50) / 100*/
  i = 0;
 800a482:	2300      	movs	r3, #0
 800a484:	627b      	str	r3, [r7, #36]	@ 0x24
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 800a486:	e03a      	b.n	800a4fe <JPEG_Set_Quantization_Mem+0xc6>
  {
    quantRow = 0;
 800a488:	2300      	movs	r3, #0
 800a48a:	61fb      	str	r3, [r7, #28]
    for (j = 0; j < 4UL; j++)
 800a48c:	2300      	movs	r3, #0
 800a48e:	623b      	str	r3, [r7, #32]
 800a490:	e029      	b.n	800a4e6 <JPEG_Set_Quantization_Mem+0xae>
    {
      /* Note that the quantization coefficients must be specified in the table in zigzag order */
      quantVal = ((((uint32_t) QTable[JPEG_ZIGZAG_ORDER[i + j]]) * ScaleFactor) + 50UL) / 100UL;
 800a492:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a494:	6a3b      	ldr	r3, [r7, #32]
 800a496:	4413      	add	r3, r2
 800a498:	4a1e      	ldr	r2, [pc, #120]	@ (800a514 <JPEG_Set_Quantization_Mem+0xdc>)
 800a49a:	5cd3      	ldrb	r3, [r2, r3]
 800a49c:	461a      	mov	r2, r3
 800a49e:	68bb      	ldr	r3, [r7, #8]
 800a4a0:	4413      	add	r3, r2
 800a4a2:	781b      	ldrb	r3, [r3, #0]
 800a4a4:	461a      	mov	r2, r3
 800a4a6:	697b      	ldr	r3, [r7, #20]
 800a4a8:	fb02 f303 	mul.w	r3, r2, r3
 800a4ac:	3332      	adds	r3, #50	@ 0x32
 800a4ae:	4a1a      	ldr	r2, [pc, #104]	@ (800a518 <JPEG_Set_Quantization_Mem+0xe0>)
 800a4b0:	fba2 2303 	umull	r2, r3, r2, r3
 800a4b4:	095b      	lsrs	r3, r3, #5
 800a4b6:	61bb      	str	r3, [r7, #24]

      if (quantVal == 0UL)
 800a4b8:	69bb      	ldr	r3, [r7, #24]
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d102      	bne.n	800a4c4 <JPEG_Set_Quantization_Mem+0x8c>
      {
        quantVal = 1UL;
 800a4be:	2301      	movs	r3, #1
 800a4c0:	61bb      	str	r3, [r7, #24]
 800a4c2:	e004      	b.n	800a4ce <JPEG_Set_Quantization_Mem+0x96>
      }
      else if (quantVal > 255UL)
 800a4c4:	69bb      	ldr	r3, [r7, #24]
 800a4c6:	2bff      	cmp	r3, #255	@ 0xff
 800a4c8:	d901      	bls.n	800a4ce <JPEG_Set_Quantization_Mem+0x96>
      {
        quantVal = 255UL;
 800a4ca:	23ff      	movs	r3, #255	@ 0xff
 800a4cc:	61bb      	str	r3, [r7, #24]
      else
      {
        /* Nothing to do, keep same value of quantVal */
      }

      quantRow |= ((quantVal & 0xFFUL) << (8UL * j));
 800a4ce:	69bb      	ldr	r3, [r7, #24]
 800a4d0:	b2da      	uxtb	r2, r3
 800a4d2:	6a3b      	ldr	r3, [r7, #32]
 800a4d4:	00db      	lsls	r3, r3, #3
 800a4d6:	fa02 f303 	lsl.w	r3, r2, r3
 800a4da:	69fa      	ldr	r2, [r7, #28]
 800a4dc:	4313      	orrs	r3, r2
 800a4de:	61fb      	str	r3, [r7, #28]
    for (j = 0; j < 4UL; j++)
 800a4e0:	6a3b      	ldr	r3, [r7, #32]
 800a4e2:	3301      	adds	r3, #1
 800a4e4:	623b      	str	r3, [r7, #32]
 800a4e6:	6a3b      	ldr	r3, [r7, #32]
 800a4e8:	2b03      	cmp	r3, #3
 800a4ea:	d9d2      	bls.n	800a492 <JPEG_Set_Quantization_Mem+0x5a>
    }

    i += 4UL;
 800a4ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4ee:	3304      	adds	r3, #4
 800a4f0:	627b      	str	r3, [r7, #36]	@ 0x24
    *tableAddress = quantRow;
 800a4f2:	693b      	ldr	r3, [r7, #16]
 800a4f4:	69fa      	ldr	r2, [r7, #28]
 800a4f6:	601a      	str	r2, [r3, #0]
    tableAddress ++;
 800a4f8:	693b      	ldr	r3, [r7, #16]
 800a4fa:	3304      	adds	r3, #4
 800a4fc:	613b      	str	r3, [r7, #16]
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 800a4fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a500:	2b3c      	cmp	r3, #60	@ 0x3c
 800a502:	d9c1      	bls.n	800a488 <JPEG_Set_Quantization_Mem+0x50>
  }

  /* Return function status */
  return 0UL;
 800a504:	2300      	movs	r3, #0
}
 800a506:	4618      	mov	r0, r3
 800a508:	372c      	adds	r7, #44	@ 0x2c
 800a50a:	46bd      	mov	sp, r7
 800a50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a510:	4770      	bx	lr
 800a512:	bf00      	nop
 800a514:	0801b614 	.word	0x0801b614
 800a518:	51eb851f 	.word	0x51eb851f

0800a51c <JPEG_SetColorYCBCR>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_SetColorYCBCR(JPEG_HandleTypeDef *hjpeg)
{
 800a51c:	b480      	push	{r7}
 800a51e:	b087      	sub	sp, #28
 800a520:	af00      	add	r7, sp, #0
 800a522:	6078      	str	r0, [r7, #4]
  uint32_t ySamplingH;
  uint32_t ySamplingV;
  uint32_t yblockNb;

  /*Set Number of color components to 3*/
  hjpeg->Instance->CONFR1 &=  ~JPEG_CONFR1_NF;
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	685a      	ldr	r2, [r3, #4]
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	f022 0203 	bic.w	r2, r2, #3
 800a532:	605a      	str	r2, [r3, #4]
  hjpeg->Instance->CONFR1 |=  JPEG_CONFR1_NF_1;
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	685a      	ldr	r2, [r3, #4]
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	f042 0202 	orr.w	r2, r2, #2
 800a542:	605a      	str	r2, [r3, #4]

  /* compute MCU block size and Y, Cb ,Cr sampling factors*/
  if (hjpeg->Conf.ChromaSubsampling == JPEG_420_SUBSAMPLING)
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	689b      	ldr	r3, [r3, #8]
 800a548:	2b01      	cmp	r3, #1
 800a54a:	d108      	bne.n	800a55e <JPEG_SetColorYCBCR+0x42>
  {
    ySamplingH  = JPEG_CONFR4_HSF_1;   /* Hs = 2*/
 800a54c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a550:	617b      	str	r3, [r7, #20]
    ySamplingV  = JPEG_CONFR4_VSF_1;   /* Vs = 2*/
 800a552:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a556:	613b      	str	r3, [r7, #16]

    yblockNb  = 0x30; /* 4 blocks of 8x8*/
 800a558:	2330      	movs	r3, #48	@ 0x30
 800a55a:	60fb      	str	r3, [r7, #12]
 800a55c:	e014      	b.n	800a588 <JPEG_SetColorYCBCR+0x6c>
  }
  else if (hjpeg->Conf.ChromaSubsampling == JPEG_422_SUBSAMPLING)
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	689b      	ldr	r3, [r3, #8]
 800a562:	2b02      	cmp	r3, #2
 800a564:	d108      	bne.n	800a578 <JPEG_SetColorYCBCR+0x5c>
  {
    ySamplingH  = JPEG_CONFR4_HSF_1;   /* Hs = 2*/
 800a566:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a56a:	617b      	str	r3, [r7, #20]
    ySamplingV  = JPEG_CONFR4_VSF_0;   /* Vs = 1*/
 800a56c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a570:	613b      	str	r3, [r7, #16]

    yblockNb  = 0x10; /* 2 blocks of 8x8*/
 800a572:	2310      	movs	r3, #16
 800a574:	60fb      	str	r3, [r7, #12]
 800a576:	e007      	b.n	800a588 <JPEG_SetColorYCBCR+0x6c>
  }
  else /*JPEG_444_SUBSAMPLING and default*/
  {
    ySamplingH  = JPEG_CONFR4_HSF_0;   /* Hs = 1*/
 800a578:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a57c:	617b      	str	r3, [r7, #20]
    ySamplingV  = JPEG_CONFR4_VSF_0;   /* Vs = 1*/
 800a57e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a582:	613b      	str	r3, [r7, #16]

    yblockNb  = 0; /* 1 block of 8x8*/
 800a584:	2300      	movs	r3, #0
 800a586:	60fb      	str	r3, [r7, #12]
  }

  hjpeg->Instance->CONFR1 &= ~(JPEG_CONFR1_NF | JPEG_CONFR1_NS);
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	685a      	ldr	r2, [r3, #4]
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	f022 02c3 	bic.w	r2, r2, #195	@ 0xc3
 800a596:	605a      	str	r2, [r3, #4]
  hjpeg->Instance->CONFR1 |= (JPEG_CONFR1_NF_1 | JPEG_CONFR1_NS_1);
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	685a      	ldr	r2, [r3, #4]
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	f042 0282 	orr.w	r2, r2, #130	@ 0x82
 800a5a6:	605a      	str	r2, [r3, #4]

  /*Reset CONFR4 register*/
  hjpeg->Instance->CONFR4 =  0;
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	2200      	movs	r2, #0
 800a5ae:	611a      	str	r2, [r3, #16]
  /*Set Horizental and Vertical  sampling factor , number of blocks , Quantization table and Huffman AC/DC tables for component 0*/
  hjpeg->Instance->CONFR4 |= (ySamplingH | ySamplingV | (yblockNb & JPEG_CONFR4_NB));
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	6919      	ldr	r1, [r3, #16]
 800a5b6:	697a      	ldr	r2, [r7, #20]
 800a5b8:	693b      	ldr	r3, [r7, #16]
 800a5ba:	431a      	orrs	r2, r3
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a5c2:	431a      	orrs	r2, r3
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	430a      	orrs	r2, r1
 800a5ca:	611a      	str	r2, [r3, #16]

  /*Reset CONFR5 register*/
  hjpeg->Instance->CONFR5 =  0;
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	2200      	movs	r2, #0
 800a5d2:	615a      	str	r2, [r3, #20]
  /*Set Horizental and Vertical  sampling factor , number of blocks , Quantization table and Huffman AC/DC tables for component 1*/
  hjpeg->Instance->CONFR5 |= (JPEG_CONFR5_HSF_0 | JPEG_CONFR5_VSF_0 | JPEG_CONFR5_QT_0 | JPEG_CONFR5_HA | JPEG_CONFR5_HD);
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	6959      	ldr	r1, [r3, #20]
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	681a      	ldr	r2, [r3, #0]
 800a5de:	f241 1307 	movw	r3, #4359	@ 0x1107
 800a5e2:	430b      	orrs	r3, r1
 800a5e4:	6153      	str	r3, [r2, #20]

  /*Reset CONFR6 register*/
  hjpeg->Instance->CONFR6 =  0;
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	2200      	movs	r2, #0
 800a5ec:	619a      	str	r2, [r3, #24]
  /*Set Horizental and Vertical  sampling factor and number of blocks for component 2*/
  /* In YCBCR , by default, both chrominance components (component 1 and component 2) use the same Quantization table (table 1) */
  /* In YCBCR , both chrominance components (component 1 and component 2) use the same Huffman tables (table 1) */
  hjpeg->Instance->CONFR6 |= (JPEG_CONFR6_HSF_0 | JPEG_CONFR6_VSF_0 | JPEG_CONFR6_QT_0 | JPEG_CONFR6_HA | JPEG_CONFR6_HD);
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	6999      	ldr	r1, [r3, #24]
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	681a      	ldr	r2, [r3, #0]
 800a5f8:	f241 1307 	movw	r3, #4359	@ 0x1107
 800a5fc:	430b      	orrs	r3, r1
 800a5fe:	6193      	str	r3, [r2, #24]

}
 800a600:	bf00      	nop
 800a602:	371c      	adds	r7, #28
 800a604:	46bd      	mov	sp, r7
 800a606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a60a:	4770      	bx	lr

0800a60c <JPEG_SetColorGrayScale>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_SetColorGrayScale(JPEG_HandleTypeDef *hjpeg)
{
 800a60c:	b480      	push	{r7}
 800a60e:	b083      	sub	sp, #12
 800a610:	af00      	add	r7, sp, #0
 800a612:	6078      	str	r0, [r7, #4]
  /*Set Number of color components to 1*/
  hjpeg->Instance->CONFR1 &= ~(JPEG_CONFR1_NF | JPEG_CONFR1_NS);
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	685a      	ldr	r2, [r3, #4]
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	f022 02c3 	bic.w	r2, r2, #195	@ 0xc3
 800a622:	605a      	str	r2, [r3, #4]

  /*in GrayScale use 1 single Quantization table (Table 0)*/
  /*in GrayScale use only one couple of AC/DC huffman table (table 0)*/

  /*Reset CONFR4 register*/
  hjpeg->Instance->CONFR4 =  0;
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	2200      	movs	r2, #0
 800a62a:	611a      	str	r2, [r3, #16]
  /*Set Horizental and Vertical  sampling factor , number of blocks , Quantization table and Huffman AC/DC tables for component 0*/
  hjpeg->Instance->CONFR4 |=  JPEG_CONFR4_HSF_0 | JPEG_CONFR4_VSF_0 ;
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	691a      	ldr	r2, [r3, #16]
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	f442 5288 	orr.w	r2, r2, #4352	@ 0x1100
 800a63a:	611a      	str	r2, [r3, #16]
}
 800a63c:	bf00      	nop
 800a63e:	370c      	adds	r7, #12
 800a640:	46bd      	mov	sp, r7
 800a642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a646:	4770      	bx	lr

0800a648 <JPEG_SetColorCMYK>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_SetColorCMYK(JPEG_HandleTypeDef *hjpeg)
{
 800a648:	b480      	push	{r7}
 800a64a:	b087      	sub	sp, #28
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	6078      	str	r0, [r7, #4]
  uint32_t ySamplingH;
  uint32_t ySamplingV;
  uint32_t yblockNb;

  /*Set Number of color components to 4*/
  hjpeg->Instance->CONFR1 |= (JPEG_CONFR1_NF | JPEG_CONFR1_NS);
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	685a      	ldr	r2, [r3, #4]
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	f042 02c3 	orr.w	r2, r2, #195	@ 0xc3
 800a65e:	605a      	str	r2, [r3, #4]

  /* compute MCU block size and Y, Cb ,Cr sampling factors*/
  if (hjpeg->Conf.ChromaSubsampling == JPEG_420_SUBSAMPLING)
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	689b      	ldr	r3, [r3, #8]
 800a664:	2b01      	cmp	r3, #1
 800a666:	d108      	bne.n	800a67a <JPEG_SetColorCMYK+0x32>
  {
    ySamplingH  = JPEG_CONFR4_HSF_1;   /* Hs = 2*/
 800a668:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a66c:	617b      	str	r3, [r7, #20]
    ySamplingV  = JPEG_CONFR4_VSF_1;   /* Vs = 2*/
 800a66e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a672:	613b      	str	r3, [r7, #16]

    yblockNb  = 0x30; /* 4 blocks of 8x8*/
 800a674:	2330      	movs	r3, #48	@ 0x30
 800a676:	60fb      	str	r3, [r7, #12]
 800a678:	e014      	b.n	800a6a4 <JPEG_SetColorCMYK+0x5c>
  }
  else if (hjpeg->Conf.ChromaSubsampling == JPEG_422_SUBSAMPLING)
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	689b      	ldr	r3, [r3, #8]
 800a67e:	2b02      	cmp	r3, #2
 800a680:	d108      	bne.n	800a694 <JPEG_SetColorCMYK+0x4c>
  {
    ySamplingH  = JPEG_CONFR4_HSF_1;   /* Hs = 2*/
 800a682:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a686:	617b      	str	r3, [r7, #20]
    ySamplingV  = JPEG_CONFR4_VSF_0;   /* Vs = 1*/
 800a688:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a68c:	613b      	str	r3, [r7, #16]

    yblockNb  = 0x10; /* 2 blocks of 8x8*/
 800a68e:	2310      	movs	r3, #16
 800a690:	60fb      	str	r3, [r7, #12]
 800a692:	e007      	b.n	800a6a4 <JPEG_SetColorCMYK+0x5c>
  }
  else /*JPEG_444_SUBSAMPLING and default*/
  {
    ySamplingH  = JPEG_CONFR4_HSF_0;   /* Hs = 1*/
 800a694:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a698:	617b      	str	r3, [r7, #20]
    ySamplingV  = JPEG_CONFR4_VSF_0;   /* Vs = 1*/
 800a69a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a69e:	613b      	str	r3, [r7, #16]

    yblockNb  = 0; /* 1 block of 8x8*/
 800a6a0:	2300      	movs	r3, #0
 800a6a2:	60fb      	str	r3, [r7, #12]
  }

  /*Reset CONFR4 register*/
  hjpeg->Instance->CONFR4 =  0;
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	2200      	movs	r2, #0
 800a6aa:	611a      	str	r2, [r3, #16]
  /*Set Horizental and Vertical  sampling factor , number of blocks , Quantization table and Huffman AC/DC tables for component 0*/
  hjpeg->Instance->CONFR4 |= (ySamplingH | ySamplingV | (yblockNb & JPEG_CONFR4_NB));
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	6919      	ldr	r1, [r3, #16]
 800a6b2:	697a      	ldr	r2, [r7, #20]
 800a6b4:	693b      	ldr	r3, [r7, #16]
 800a6b6:	431a      	orrs	r2, r3
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a6be:	431a      	orrs	r2, r3
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	430a      	orrs	r2, r1
 800a6c6:	611a      	str	r2, [r3, #16]

  /*Reset CONFR5 register*/
  hjpeg->Instance->CONFR5 =  0;
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	2200      	movs	r2, #0
 800a6ce:	615a      	str	r2, [r3, #20]
  /*Set Horizental and Vertical  sampling factor , number of blocks , Quantization table and Huffman AC/DC tables for component 1*/
  hjpeg->Instance->CONFR5 |= (JPEG_CONFR5_HSF_0 | JPEG_CONFR5_VSF_0);
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	695a      	ldr	r2, [r3, #20]
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	f442 5288 	orr.w	r2, r2, #4352	@ 0x1100
 800a6de:	615a      	str	r2, [r3, #20]

  /*Reset CONFR6 register*/
  hjpeg->Instance->CONFR6 =  0;
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	2200      	movs	r2, #0
 800a6e6:	619a      	str	r2, [r3, #24]
  /*Set Horizental and Vertical  sampling factor , number of blocks , Quantization table and Huffman AC/DC tables for component 2*/
  hjpeg->Instance->CONFR6 |= (JPEG_CONFR6_HSF_0 | JPEG_CONFR6_VSF_0);
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	699a      	ldr	r2, [r3, #24]
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	f442 5288 	orr.w	r2, r2, #4352	@ 0x1100
 800a6f6:	619a      	str	r2, [r3, #24]

  /*Reset CONFR7 register*/
  hjpeg->Instance->CONFR7 =  0;
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	2200      	movs	r2, #0
 800a6fe:	61da      	str	r2, [r3, #28]
  /*Set Horizental and Vertical  sampling factor , number of blocks , Quantization table and Huffman AC/DC tables for component 3*/
  hjpeg->Instance->CONFR7 |= (JPEG_CONFR7_HSF_0 | JPEG_CONFR7_VSF_0);
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	69da      	ldr	r2, [r3, #28]
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	f442 5288 	orr.w	r2, r2, #4352	@ 0x1100
 800a70e:	61da      	str	r2, [r3, #28]
}
 800a710:	bf00      	nop
 800a712:	371c      	adds	r7, #28
 800a714:	46bd      	mov	sp, r7
 800a716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71a:	4770      	bx	lr

0800a71c <JPEG_Init_Process>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_Init_Process(JPEG_HandleTypeDef *hjpeg)
{
 800a71c:	b480      	push	{r7}
 800a71e:	b083      	sub	sp, #12
 800a720:	af00      	add	r7, sp, #0
 800a722:	6078      	str	r0, [r7, #4]
  /*Reset pause*/
  hjpeg->Context &= (~(JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT));
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a728:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	655a      	str	r2, [r3, #84]	@ 0x54

  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a734:	f003 0303 	and.w	r3, r3, #3
 800a738:	2b02      	cmp	r3, #2
 800a73a:	d108      	bne.n	800a74e <JPEG_Init_Process+0x32>
  {
    /*Set JPEG Codec to Decoding mode */
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	685a      	ldr	r2, [r3, #4]
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	f042 0208 	orr.w	r2, r2, #8
 800a74a:	605a      	str	r2, [r3, #4]
 800a74c:	e007      	b.n	800a75e <JPEG_Init_Process+0x42>
  }
  else /* JPEG_CONTEXT_ENCODE */
  {
    /*Set JPEG Codec to Encoding mode */
    hjpeg->Instance->CONFR1 &= ~JPEG_CONFR1_DE;
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	685a      	ldr	r2, [r3, #4]
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	f022 0208 	bic.w	r2, r2, #8
 800a75c:	605a      	str	r2, [r3, #4]
  }

  /*Stop JPEG processing */
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	681a      	ldr	r2, [r3, #0]
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	f022 0201 	bic.w	r2, r2, #1
 800a76c:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800a77c:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a78c:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a79c:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800a7ac:	639a      	str	r2, [r3, #56]	@ 0x38

  /*Start Encoding/Decoding*/
  hjpeg->Instance->CONFR0 |=  JPEG_CONFR0_START;
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	681a      	ldr	r2, [r3, #0]
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	f042 0201 	orr.w	r2, r2, #1
 800a7bc:	601a      	str	r2, [r3, #0]

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a7c2:	f003 030c 	and.w	r3, r3, #12
 800a7c6:	2b08      	cmp	r3, #8
 800a7c8:	d108      	bne.n	800a7dc <JPEG_Init_Process+0xc0>
  {
    /*Enable IN/OUT, end of Conversation, and end of header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_IFT | JPEG_IT_IFNF | JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC | JPEG_IT_HPD);
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	f042 026e 	orr.w	r2, r2, #110	@ 0x6e
 800a7d8:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  else
  {
    /* Nothing to do */
  }
}
 800a7da:	e00d      	b.n	800a7f8 <JPEG_Init_Process+0xdc>
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a7e0:	f003 030c 	and.w	r3, r3, #12
 800a7e4:	2b0c      	cmp	r3, #12
 800a7e6:	d107      	bne.n	800a7f8 <JPEG_Init_Process+0xdc>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800a7f6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800a7f8:	bf00      	nop
 800a7fa:	370c      	adds	r7, #12
 800a7fc:	46bd      	mov	sp, r7
 800a7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a802:	4770      	bx	lr

0800a804 <JPEG_Process>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if the process has ends else JPEG_PROCESS_ONGOING
  */
static uint32_t JPEG_Process(JPEG_HandleTypeDef *hjpeg)
{
 800a804:	b580      	push	{r7, lr}
 800a806:	b084      	sub	sp, #16
 800a808:	af00      	add	r7, sp, #0
 800a80a:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;

  /*End of header processing flag */
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a810:	f003 0303 	and.w	r3, r3, #3
 800a814:	2b02      	cmp	r3, #2
 800a816:	d125      	bne.n	800a864 <JPEG_Process+0x60>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a81e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a822:	2b00      	cmp	r3, #0
 800a824:	d01e      	beq.n	800a864 <JPEG_Process+0x60>
    {
      /*Call Header parsing complete callback */
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	3304      	adds	r3, #4
 800a82a:	4619      	mov	r1, r3
 800a82c:	6878      	ldr	r0, [r7, #4]
 800a82e:	f7fe feb6 	bl	800959e <HAL_JPEG_GetInfo>
      /* Reset the ImageQuality */
      hjpeg->Conf.ImageQuality = 0;
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	2200      	movs	r2, #0
 800a836:	615a      	str	r2, [r3, #20]

      /*Call Info Ready callback */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->InfoReadyCallback(hjpeg, &hjpeg->Conf);
#else
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	3304      	adds	r3, #4
 800a83c:	4619      	mov	r1, r3
 800a83e:	6878      	ldr	r0, [r7, #4]
 800a840:	f7ff f82e 	bl	80098a0 <HAL_JPEG_InfoReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a852:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Clear header processing done flag */
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a862:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  /*Input FIFO status handling*/
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL)
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a868:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d116      	bne.n	800a89e <JPEG_Process+0x9a>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFTF) != 0UL)
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a876:	f003 0302 	and.w	r3, r3, #2
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d004      	beq.n	800a888 <JPEG_Process+0x84>
    {
      /*Input FIFO threshold flag */
      /*JPEG_FIFO_TH_SIZE words can be written in */
      JPEG_ReadInputData(hjpeg, JPEG_FIFO_TH_SIZE);
 800a87e:	2108      	movs	r1, #8
 800a880:	6878      	ldr	r0, [r7, #4]
 800a882:	f000 f988 	bl	800ab96 <JPEG_ReadInputData>
 800a886:	e00a      	b.n	800a89e <JPEG_Process+0x9a>
    }
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFNFF) != 0UL)
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a88e:	f003 0304 	and.w	r3, r3, #4
 800a892:	2b00      	cmp	r3, #0
 800a894:	d003      	beq.n	800a89e <JPEG_Process+0x9a>
    {
      /*Input FIFO Not Full flag */
      /*32-bit value can be written in */
      JPEG_ReadInputData(hjpeg, 1);
 800a896:	2101      	movs	r1, #1
 800a898:	6878      	ldr	r0, [r7, #4]
 800a89a:	f000 f97c 	bl	800ab96 <JPEG_ReadInputData>
    }
  }


  /*Output FIFO flag handling*/
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a8a2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d116      	bne.n	800a8d8 <JPEG_Process+0xd4>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFTF) != 0UL)
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a8b0:	f003 0308 	and.w	r3, r3, #8
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d004      	beq.n	800a8c2 <JPEG_Process+0xbe>
    {
      /*Output FIFO threshold flag */
      /*JPEG_FIFO_TH_SIZE words can be read out */
      JPEG_StoreOutputData(hjpeg, JPEG_FIFO_TH_SIZE);
 800a8b8:	2108      	movs	r1, #8
 800a8ba:	6878      	ldr	r0, [r7, #4]
 800a8bc:	f000 f864 	bl	800a988 <JPEG_StoreOutputData>
 800a8c0:	e00a      	b.n	800a8d8 <JPEG_Process+0xd4>
    }
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a8c8:	f003 0310 	and.w	r3, r3, #16
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d003      	beq.n	800a8d8 <JPEG_Process+0xd4>
    {
      /*Output FIFO Not Empty flag */
      /*32-bit value can be read out */
      JPEG_StoreOutputData(hjpeg, 1);
 800a8d0:	2101      	movs	r1, #1
 800a8d2:	6878      	ldr	r0, [r7, #4]
 800a8d4:	f000 f858 	bl	800a988 <JPEG_StoreOutputData>
      /* Nothing to do */
    }
  }

  /*End of Conversion handling :i.e EOC flag is high and OFTF low and OFNEF low*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a8de:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a8e2:	2b20      	cmp	r3, #32
 800a8e4:	d14b      	bne.n	800a97e <JPEG_Process+0x17a>
  {
    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	681a      	ldr	r2, [r3, #0]
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	f022 0201 	bic.w	r2, r2, #1
 800a8f4:	601a      	str	r2, [r3, #0]

    if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a8fa:	f003 030c 	and.w	r3, r3, #12
 800a8fe:	2b08      	cmp	r3, #8
 800a900:	d107      	bne.n	800a912 <JPEG_Process+0x10e>
    {
      /* Disable All Interrupts */
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800a910:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Clear all flags */
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800a920:	639a      	str	r2, [r3, #56]	@ 0x38

    /*Call End of conversion callback */
    if (hjpeg->JpegOutCount > 0UL)
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a926:	2b00      	cmp	r3, #0
 800a928:	d00a      	beq.n	800a940 <JPEG_Process+0x13c>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	69d9      	ldr	r1, [r3, #28]
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a932:	461a      	mov	r2, r3
 800a934:	6878      	ldr	r0, [r7, #4]
 800a936:	f7f7 fa73 	bl	8001e20 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	2200      	movs	r2, #0
 800a93e:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /*Reset Context Operation*/
    tmpContext = hjpeg->Context;
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a944:	60fb      	str	r3, [r7, #12]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a94a:	f403 4282 	and.w	r2, r3, #16640	@ 0x4100
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	2200      	movs	r2, #0
 800a956:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	2201      	movs	r2, #1
 800a95e:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	f003 0303 	and.w	r3, r3, #3
 800a968:	2b02      	cmp	r3, #2
 800a96a:	d103      	bne.n	800a974 <JPEG_Process+0x170>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800a96c:	6878      	ldr	r0, [r7, #4]
 800a96e:	f7fe ffa2 	bl	80098b6 <HAL_JPEG_DecodeCpltCallback>
 800a972:	e002      	b.n	800a97a <JPEG_Process+0x176>
    else /* JPEG_CONTEXT_ENCODE */
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->EncodeCpltCallback(hjpeg);
#else
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800a974:	6878      	ldr	r0, [r7, #4]
 800a976:	f7f7 fa6f 	bl	8001e58 <HAL_JPEG_EncodeCpltCallback>
#endif
    }

    return JPEG_PROCESS_DONE;
 800a97a:	2301      	movs	r3, #1
 800a97c:	e000      	b.n	800a980 <JPEG_Process+0x17c>
  }


  return JPEG_PROCESS_ONGOING;
 800a97e:	2300      	movs	r3, #0
}
 800a980:	4618      	mov	r0, r3
 800a982:	3710      	adds	r7, #16
 800a984:	46bd      	mov	sp, r7
 800a986:	bd80      	pop	{r7, pc}

0800a988 <JPEG_StoreOutputData>:
  *         the configuration information for JPEG module
  * @param  nbOutputWords Number of output words (of 32 bits) ready from the JPEG peripheral
  * @retval None
  */
static void JPEG_StoreOutputData(JPEG_HandleTypeDef *hjpeg, uint32_t nbOutputWords)
{
 800a988:	b580      	push	{r7, lr}
 800a98a:	b086      	sub	sp, #24
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	6078      	str	r0, [r7, #4]
 800a990:	6039      	str	r1, [r7, #0]
  uint32_t index;
  uint32_t nb_words;
  uint32_t nb_bytes;
  uint32_t dataword;

  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800a99a:	683b      	ldr	r3, [r7, #0]
 800a99c:	009b      	lsls	r3, r3, #2
 800a99e:	440b      	add	r3, r1
 800a9a0:	429a      	cmp	r2, r3
 800a9a2:	d34b      	bcc.n	800aa3c <JPEG_StoreOutputData+0xb4>
  {
    for (index = 0; index < nbOutputWords; index++)
 800a9a4:	2300      	movs	r3, #0
 800a9a6:	617b      	str	r3, [r7, #20]
 800a9a8:	e031      	b.n	800aa0e <JPEG_StoreOutputData+0x86>
    {
      /*Transfer 32 bits from the JPEG output FIFO*/
      dataword = hjpeg->Instance->DOR;
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a9b0:	60bb      	str	r3, [r7, #8]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	69da      	ldr	r2, [r3, #28]
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9ba:	4413      	add	r3, r2
 800a9bc:	68ba      	ldr	r2, [r7, #8]
 800a9be:	b2d2      	uxtb	r2, r2
 800a9c0:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 800a9c2:	68bb      	ldr	r3, [r7, #8]
 800a9c4:	0a19      	lsrs	r1, r3, #8
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	69da      	ldr	r2, [r3, #28]
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9ce:	3301      	adds	r3, #1
 800a9d0:	4413      	add	r3, r2
 800a9d2:	b2ca      	uxtb	r2, r1
 800a9d4:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800a9d6:	68bb      	ldr	r3, [r7, #8]
 800a9d8:	0c19      	lsrs	r1, r3, #16
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	69da      	ldr	r2, [r3, #28]
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9e2:	3302      	adds	r3, #2
 800a9e4:	4413      	add	r3, r2
 800a9e6:	b2ca      	uxtb	r2, r1
 800a9e8:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800a9ea:	68bb      	ldr	r3, [r7, #8]
 800a9ec:	0e19      	lsrs	r1, r3, #24
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	69da      	ldr	r2, [r3, #28]
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9f6:	3303      	adds	r3, #3
 800a9f8:	4413      	add	r3, r2
 800a9fa:	b2ca      	uxtb	r2, r1
 800a9fc:	701a      	strb	r2, [r3, #0]
      hjpeg->JpegOutCount += 4UL;
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa02:	1d1a      	adds	r2, r3, #4
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	625a      	str	r2, [r3, #36]	@ 0x24
    for (index = 0; index < nbOutputWords; index++)
 800aa08:	697b      	ldr	r3, [r7, #20]
 800aa0a:	3301      	adds	r3, #1
 800aa0c:	617b      	str	r3, [r7, #20]
 800aa0e:	697a      	ldr	r2, [r7, #20]
 800aa10:	683b      	ldr	r3, [r7, #0]
 800aa12:	429a      	cmp	r2, r3
 800aa14:	d3c9      	bcc.n	800a9aa <JPEG_StoreOutputData+0x22>
    }
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa1e:	429a      	cmp	r2, r3
 800aa20:	f040 80b5 	bne.w	800ab8e <JPEG_StoreOutputData+0x206>
    {
      /*Output Buffer is full, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	69d9      	ldr	r1, [r3, #28]
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa2c:	461a      	mov	r2, r3
 800aa2e:	6878      	ldr	r0, [r7, #4]
 800aa30:	f7f7 f9f6 	bl	8001e20 <HAL_JPEG_DataReadyCallback>
#endif /*USE_HAL_JPEG_REGISTER_CALLBACKS*/
      hjpeg->JpegOutCount = 0;
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	2200      	movs	r2, #0
 800aa38:	625a      	str	r2, [r3, #36]	@ 0x24
  }
  else
  {
    /* Nothing to do */
  }
}
 800aa3a:	e0a8      	b.n	800ab8e <JPEG_StoreOutputData+0x206>
  else if (hjpeg->OutDataLength > hjpeg->JpegOutCount)
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa44:	429a      	cmp	r2, r3
 800aa46:	f240 80a2 	bls.w	800ab8e <JPEG_StoreOutputData+0x206>
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa52:	1ad3      	subs	r3, r2, r3
 800aa54:	089b      	lsrs	r3, r3, #2
 800aa56:	613b      	str	r3, [r7, #16]
    for (index = 0; index < nb_words; index++)
 800aa58:	2300      	movs	r3, #0
 800aa5a:	617b      	str	r3, [r7, #20]
 800aa5c:	e031      	b.n	800aac2 <JPEG_StoreOutputData+0x13a>
      dataword = hjpeg->Instance->DOR;
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aa64:	60bb      	str	r3, [r7, #8]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	69da      	ldr	r2, [r3, #28]
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa6e:	4413      	add	r3, r2
 800aa70:	68ba      	ldr	r2, [r7, #8]
 800aa72:	b2d2      	uxtb	r2, r2
 800aa74:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 800aa76:	68bb      	ldr	r3, [r7, #8]
 800aa78:	0a19      	lsrs	r1, r3, #8
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	69da      	ldr	r2, [r3, #28]
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa82:	3301      	adds	r3, #1
 800aa84:	4413      	add	r3, r2
 800aa86:	b2ca      	uxtb	r2, r1
 800aa88:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800aa8a:	68bb      	ldr	r3, [r7, #8]
 800aa8c:	0c19      	lsrs	r1, r3, #16
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	69da      	ldr	r2, [r3, #28]
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa96:	3302      	adds	r3, #2
 800aa98:	4413      	add	r3, r2
 800aa9a:	b2ca      	uxtb	r2, r1
 800aa9c:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800aa9e:	68bb      	ldr	r3, [r7, #8]
 800aaa0:	0e19      	lsrs	r1, r3, #24
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	69da      	ldr	r2, [r3, #28]
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aaaa:	3303      	adds	r3, #3
 800aaac:	4413      	add	r3, r2
 800aaae:	b2ca      	uxtb	r2, r1
 800aab0:	701a      	strb	r2, [r3, #0]
      hjpeg->JpegOutCount += 4UL;
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aab6:	1d1a      	adds	r2, r3, #4
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	625a      	str	r2, [r3, #36]	@ 0x24
    for (index = 0; index < nb_words; index++)
 800aabc:	697b      	ldr	r3, [r7, #20]
 800aabe:	3301      	adds	r3, #1
 800aac0:	617b      	str	r3, [r7, #20]
 800aac2:	697a      	ldr	r2, [r7, #20]
 800aac4:	693b      	ldr	r3, [r7, #16]
 800aac6:	429a      	cmp	r2, r3
 800aac8:	d3c9      	bcc.n	800aa5e <JPEG_StoreOutputData+0xd6>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aad2:	429a      	cmp	r2, r3
 800aad4:	d10b      	bne.n	800aaee <JPEG_StoreOutputData+0x166>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	69d9      	ldr	r1, [r3, #28]
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aade:	461a      	mov	r2, r3
 800aae0:	6878      	ldr	r0, [r7, #4]
 800aae2:	f7f7 f99d 	bl	8001e20 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	2200      	movs	r2, #0
 800aaea:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800aaec:	e04f      	b.n	800ab8e <JPEG_StoreOutputData+0x206>
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aaf6:	1ad3      	subs	r3, r2, r3
 800aaf8:	60fb      	str	r3, [r7, #12]
      dataword = hjpeg->Instance->DOR;
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ab00:	60bb      	str	r3, [r7, #8]
      for (index = 0; index < nb_bytes; index++)
 800ab02:	2300      	movs	r3, #0
 800ab04:	617b      	str	r3, [r7, #20]
 800ab06:	e015      	b.n	800ab34 <JPEG_StoreOutputData+0x1ac>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 800ab08:	697b      	ldr	r3, [r7, #20]
 800ab0a:	f003 0303 	and.w	r3, r3, #3
 800ab0e:	00db      	lsls	r3, r3, #3
 800ab10:	68ba      	ldr	r2, [r7, #8]
 800ab12:	fa22 f103 	lsr.w	r1, r2, r3
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	69da      	ldr	r2, [r3, #28]
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab1e:	4413      	add	r3, r2
 800ab20:	b2ca      	uxtb	r2, r1
 800ab22:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount++;
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab28:	1c5a      	adds	r2, r3, #1
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	625a      	str	r2, [r3, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 800ab2e:	697b      	ldr	r3, [r7, #20]
 800ab30:	3301      	adds	r3, #1
 800ab32:	617b      	str	r3, [r7, #20]
 800ab34:	697a      	ldr	r2, [r7, #20]
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	429a      	cmp	r2, r3
 800ab3a:	d3e5      	bcc.n	800ab08 <JPEG_StoreOutputData+0x180>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	69d9      	ldr	r1, [r3, #28]
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab44:	461a      	mov	r2, r3
 800ab46:	6878      	ldr	r0, [r7, #4]
 800ab48:	f7f7 f96a 	bl	8001e20 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	2200      	movs	r2, #0
 800ab50:	625a      	str	r2, [r3, #36]	@ 0x24
      nb_bytes = 4UL - nb_bytes;
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	f1c3 0304 	rsb	r3, r3, #4
 800ab58:	60fb      	str	r3, [r7, #12]
      for (index = nb_bytes; index < 4UL; index++)
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	617b      	str	r3, [r7, #20]
 800ab5e:	e013      	b.n	800ab88 <JPEG_StoreOutputData+0x200>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 800ab60:	697b      	ldr	r3, [r7, #20]
 800ab62:	00db      	lsls	r3, r3, #3
 800ab64:	68ba      	ldr	r2, [r7, #8]
 800ab66:	fa22 f103 	lsr.w	r1, r2, r3
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	69da      	ldr	r2, [r3, #28]
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab72:	4413      	add	r3, r2
 800ab74:	b2ca      	uxtb	r2, r1
 800ab76:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount++;
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab7c:	1c5a      	adds	r2, r3, #1
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	625a      	str	r2, [r3, #36]	@ 0x24
      for (index = nb_bytes; index < 4UL; index++)
 800ab82:	697b      	ldr	r3, [r7, #20]
 800ab84:	3301      	adds	r3, #1
 800ab86:	617b      	str	r3, [r7, #20]
 800ab88:	697b      	ldr	r3, [r7, #20]
 800ab8a:	2b03      	cmp	r3, #3
 800ab8c:	d9e8      	bls.n	800ab60 <JPEG_StoreOutputData+0x1d8>
}
 800ab8e:	bf00      	nop
 800ab90:	3718      	adds	r7, #24
 800ab92:	46bd      	mov	sp, r7
 800ab94:	bd80      	pop	{r7, pc}

0800ab96 <JPEG_ReadInputData>:
  *         the configuration information for JPEG module
  * @param  nbRequestWords Number of input words (of 32 bits) that the JPE peripheral request
  * @retval None
  */
static void JPEG_ReadInputData(JPEG_HandleTypeDef *hjpeg, uint32_t nbRequestWords)
{
 800ab96:	b580      	push	{r7, lr}
 800ab98:	b088      	sub	sp, #32
 800ab9a:	af00      	add	r7, sp, #0
 800ab9c:	6078      	str	r0, [r7, #4]
 800ab9e:	6039      	str	r1, [r7, #0]
  uint32_t nb_bytes = 0;
 800aba0:	2300      	movs	r3, #0
 800aba2:	61fb      	str	r3, [r7, #28]
  uint32_t nb_words;
  uint32_t index;
  uint32_t dataword;
  uint32_t input_count;

  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d002      	beq.n	800abb2 <JPEG_ReadInputData+0x1c>
 800abac:	683b      	ldr	r3, [r7, #0]
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d104      	bne.n	800abbc <JPEG_ReadInputData+0x26>
  {
    /* No more Input data : nothing to do*/
    (void) HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_INPUT);
 800abb2:	2101      	movs	r1, #1
 800abb4:	6878      	ldr	r0, [r7, #4]
 800abb6:	f7fe fdf7 	bl	80097a8 <HAL_JPEG_Pause>
 800abba:	e028      	b.n	800ac0e <JPEG_ReadInputData+0x78>
  }
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	6a1b      	ldr	r3, [r3, #32]
 800abc4:	429a      	cmp	r2, r3
 800abc6:	d906      	bls.n	800abd6 <JPEG_ReadInputData+0x40>
  {
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	6a1b      	ldr	r3, [r3, #32]
 800abd0:	1ad3      	subs	r3, r2, r3
 800abd2:	61fb      	str	r3, [r7, #28]
 800abd4:	e01b      	b.n	800ac0e <JPEG_ReadInputData+0x78>
  }
  else if (hjpeg->InDataLength == hjpeg->JpegInCount)
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	6a1b      	ldr	r3, [r3, #32]
 800abde:	429a      	cmp	r2, r3
 800abe0:	d115      	bne.n	800ac0e <JPEG_ReadInputData+0x78>
  {
    /*Call HAL_JPEG_GetDataCallback to get new data */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->GetDataCallback(hjpeg, hjpeg->JpegInCount);
#else
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	6a1b      	ldr	r3, [r3, #32]
 800abe6:	4619      	mov	r1, r3
 800abe8:	6878      	ldr	r0, [r7, #4]
 800abea:	f7f7 f8e7 	bl	8001dbc <HAL_JPEG_GetDataCallback>
#endif /*USE_HAL_JPEG_REGISTER_CALLBACKS*/

    if (hjpeg->InDataLength > 4UL)
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abf2:	2b04      	cmp	r3, #4
 800abf4:	d905      	bls.n	800ac02 <JPEG_ReadInputData+0x6c>
    {
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abfa:	f023 0203 	bic.w	r2, r3, #3
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	629a      	str	r2, [r3, #40]	@ 0x28
    }
    hjpeg->JpegInCount = 0;
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	2200      	movs	r2, #0
 800ac06:	621a      	str	r2, [r3, #32]
    nb_bytes = hjpeg->InDataLength;
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac0c:	61fb      	str	r3, [r7, #28]
  }
  else
  {
    /* Nothing to do */
  }
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ac12:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	f040 809f 	bne.w	800ad5a <JPEG_ReadInputData+0x1c4>
 800ac1c:	69fb      	ldr	r3, [r7, #28]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	f000 809b 	beq.w	800ad5a <JPEG_ReadInputData+0x1c4>
  {
    nb_words = nb_bytes / 4UL;
 800ac24:	69fb      	ldr	r3, [r7, #28]
 800ac26:	089b      	lsrs	r3, r3, #2
 800ac28:	613b      	str	r3, [r7, #16]
    if (nb_words >= nbRequestWords)
 800ac2a:	693a      	ldr	r2, [r7, #16]
 800ac2c:	683b      	ldr	r3, [r7, #0]
 800ac2e:	429a      	cmp	r2, r3
 800ac30:	d335      	bcc.n	800ac9e <JPEG_ReadInputData+0x108>
    {
      for (index = 0; index < nbRequestWords; index++)
 800ac32:	2300      	movs	r3, #0
 800ac34:	61bb      	str	r3, [r7, #24]
 800ac36:	e02d      	b.n	800ac94 <JPEG_ReadInputData+0xfe>
      {
        input_count = hjpeg->JpegInCount;
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	6a1b      	ldr	r3, [r3, #32]
 800ac3c:	60fb      	str	r3, [r7, #12]
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	699a      	ldr	r2, [r3, #24]
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	4413      	add	r3, r2
 800ac46:	781b      	ldrb	r3, [r3, #0]
 800ac48:	4619      	mov	r1, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	699a      	ldr	r2, [r3, #24]
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	3301      	adds	r3, #1
 800ac52:	4413      	add	r3, r2
 800ac54:	781b      	ldrb	r3, [r3, #0]
 800ac56:	021b      	lsls	r3, r3, #8
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800ac58:	ea41 0203 	orr.w	r2, r1, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	6999      	ldr	r1, [r3, #24]
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	3302      	adds	r3, #2
 800ac64:	440b      	add	r3, r1
 800ac66:	781b      	ldrb	r3, [r3, #0]
 800ac68:	041b      	lsls	r3, r3, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800ac6a:	ea42 0103 	orr.w	r1, r2, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	699a      	ldr	r2, [r3, #24]
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	3303      	adds	r3, #3
 800ac76:	4413      	add	r3, r2
 800ac78:	781b      	ldrb	r3, [r3, #0]
 800ac7a:	061a      	lsls	r2, r3, #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	681b      	ldr	r3, [r3, #0]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800ac80:	430a      	orrs	r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800ac82:	641a      	str	r2, [r3, #64]	@ 0x40

        hjpeg->JpegInCount += 4UL;
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	6a1b      	ldr	r3, [r3, #32]
 800ac88:	1d1a      	adds	r2, r3, #4
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	621a      	str	r2, [r3, #32]
      for (index = 0; index < nbRequestWords; index++)
 800ac8e:	69bb      	ldr	r3, [r7, #24]
 800ac90:	3301      	adds	r3, #1
 800ac92:	61bb      	str	r3, [r7, #24]
 800ac94:	69ba      	ldr	r2, [r7, #24]
 800ac96:	683b      	ldr	r3, [r7, #0]
 800ac98:	429a      	cmp	r2, r3
 800ac9a:	d3cd      	bcc.n	800ac38 <JPEG_ReadInputData+0xa2>
        }
        hjpeg->Instance->DIR = dataword;
      }
    }
  }
}
 800ac9c:	e05d      	b.n	800ad5a <JPEG_ReadInputData+0x1c4>
      if (nb_words > 0UL)
 800ac9e:	693b      	ldr	r3, [r7, #16]
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d035      	beq.n	800ad10 <JPEG_ReadInputData+0x17a>
        for (index = 0; index < nb_words; index++)
 800aca4:	2300      	movs	r3, #0
 800aca6:	61bb      	str	r3, [r7, #24]
 800aca8:	e02d      	b.n	800ad06 <JPEG_ReadInputData+0x170>
          input_count = hjpeg->JpegInCount;
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	6a1b      	ldr	r3, [r3, #32]
 800acae:	60fb      	str	r3, [r7, #12]
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	699a      	ldr	r2, [r3, #24]
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	4413      	add	r3, r2
 800acb8:	781b      	ldrb	r3, [r3, #0]
 800acba:	4619      	mov	r1, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	699a      	ldr	r2, [r3, #24]
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	3301      	adds	r3, #1
 800acc4:	4413      	add	r3, r2
 800acc6:	781b      	ldrb	r3, [r3, #0]
 800acc8:	021b      	lsls	r3, r3, #8
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800acca:	ea41 0203 	orr.w	r2, r1, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	6999      	ldr	r1, [r3, #24]
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	3302      	adds	r3, #2
 800acd6:	440b      	add	r3, r1
 800acd8:	781b      	ldrb	r3, [r3, #0]
 800acda:	041b      	lsls	r3, r3, #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800acdc:	ea42 0103 	orr.w	r1, r2, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	699a      	ldr	r2, [r3, #24]
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	3303      	adds	r3, #3
 800ace8:	4413      	add	r3, r2
 800acea:	781b      	ldrb	r3, [r3, #0]
 800acec:	061a      	lsls	r2, r3, #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	681b      	ldr	r3, [r3, #0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800acf2:	430a      	orrs	r2, r1
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800acf4:	641a      	str	r2, [r3, #64]	@ 0x40
          hjpeg->JpegInCount += 4UL;
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	6a1b      	ldr	r3, [r3, #32]
 800acfa:	1d1a      	adds	r2, r3, #4
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	621a      	str	r2, [r3, #32]
        for (index = 0; index < nb_words; index++)
 800ad00:	69bb      	ldr	r3, [r7, #24]
 800ad02:	3301      	adds	r3, #1
 800ad04:	61bb      	str	r3, [r7, #24]
 800ad06:	69ba      	ldr	r2, [r7, #24]
 800ad08:	693b      	ldr	r3, [r7, #16]
 800ad0a:	429a      	cmp	r2, r3
 800ad0c:	d3cd      	bcc.n	800acaa <JPEG_ReadInputData+0x114>
}
 800ad0e:	e024      	b.n	800ad5a <JPEG_ReadInputData+0x1c4>
        dataword = 0;
 800ad10:	2300      	movs	r3, #0
 800ad12:	617b      	str	r3, [r7, #20]
        for (index = 0; index < nb_bytes; index++)
 800ad14:	2300      	movs	r3, #0
 800ad16:	61bb      	str	r3, [r7, #24]
 800ad18:	e017      	b.n	800ad4a <JPEG_ReadInputData+0x1b4>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	699a      	ldr	r2, [r3, #24]
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	6a1b      	ldr	r3, [r3, #32]
 800ad22:	4413      	add	r3, r2
 800ad24:	781b      	ldrb	r3, [r3, #0]
 800ad26:	461a      	mov	r2, r3
 800ad28:	69bb      	ldr	r3, [r7, #24]
 800ad2a:	f003 0303 	and.w	r3, r3, #3
 800ad2e:	00db      	lsls	r3, r3, #3
 800ad30:	fa02 f303 	lsl.w	r3, r2, r3
 800ad34:	697a      	ldr	r2, [r7, #20]
 800ad36:	4313      	orrs	r3, r2
 800ad38:	617b      	str	r3, [r7, #20]
          hjpeg->JpegInCount++;
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	6a1b      	ldr	r3, [r3, #32]
 800ad3e:	1c5a      	adds	r2, r3, #1
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	621a      	str	r2, [r3, #32]
        for (index = 0; index < nb_bytes; index++)
 800ad44:	69bb      	ldr	r3, [r7, #24]
 800ad46:	3301      	adds	r3, #1
 800ad48:	61bb      	str	r3, [r7, #24]
 800ad4a:	69ba      	ldr	r2, [r7, #24]
 800ad4c:	69fb      	ldr	r3, [r7, #28]
 800ad4e:	429a      	cmp	r2, r3
 800ad50:	d3e3      	bcc.n	800ad1a <JPEG_ReadInputData+0x184>
        hjpeg->Instance->DIR = dataword;
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	697a      	ldr	r2, [r7, #20]
 800ad58:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800ad5a:	bf00      	nop
 800ad5c:	3720      	adds	r7, #32
 800ad5e:	46bd      	mov	sp, r7
 800ad60:	bd80      	pop	{r7, pc}
	...

0800ad64 <JPEG_DMA_StartProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if process ends else JPEG_PROCESS_ONGOING
  */
static HAL_StatusTypeDef JPEG_DMA_StartProcess(JPEG_HandleTypeDef *hjpeg)
{
 800ad64:	b590      	push	{r4, r7, lr}
 800ad66:	b087      	sub	sp, #28
 800ad68:	af02      	add	r7, sp, #8
 800ad6a:	6078      	str	r0, [r7, #4]
  /*if the MDMA In is triggred with JPEG In FIFO Threshold flag
      then MDMA In buffer size is 32 bytes
    else (MDMA In is triggred with JPEG In FIFO not full flag)
      then MDMA In buffer size is 4 bytes
    */
  inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad72:	60fb      	str	r3, [r7, #12]
  /*if the MDMA Out is triggred with JPEG Out FIFO Threshold flag
      then MDMA out buffer size is 32 bytes
    else (MDMA Out is triggred with JPEG Out FIFO not empty flag)
      then MDMA buffer size is 4 bytes
    */
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ad78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad7a:	60bb      	str	r3, [r7, #8]

  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad80:	68fa      	ldr	r2, [r7, #12]
 800ad82:	429a      	cmp	r2, r3
 800ad84:	d804      	bhi.n	800ad90 <JPEG_DMA_StartProcess+0x2c>
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad8a:	68ba      	ldr	r2, [r7, #8]
 800ad8c:	429a      	cmp	r2, r3
 800ad8e:	d901      	bls.n	800ad94 <JPEG_DMA_StartProcess+0x30>
  {
    return HAL_ERROR;
 800ad90:	2301      	movs	r3, #1
 800ad92:	e074      	b.n	800ae7e <JPEG_DMA_StartProcess+0x11a>
  }
  /* Set the JPEG MDMA In transfer complete callback */
  hjpeg->hdmain->XferCpltCallback = JPEG_MDMAInCpltCallback;
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad98:	4a3b      	ldr	r2, [pc, #236]	@ (800ae88 <JPEG_DMA_StartProcess+0x124>)
 800ad9a:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Set the MDMA In error callback */
  hjpeg->hdmain->XferErrorCallback = JPEG_MDMAErrorCallback;
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ada0:	4a3a      	ldr	r2, [pc, #232]	@ (800ae8c <JPEG_DMA_StartProcess+0x128>)
 800ada2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the JPEG MDMA Out transfer complete callback */
  hjpeg->hdmaout->XferCpltCallback = JPEG_MDMAOutCpltCallback;
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ada8:	4a39      	ldr	r2, [pc, #228]	@ (800ae90 <JPEG_DMA_StartProcess+0x12c>)
 800adaa:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Set the MDMA In error callback */
  hjpeg->hdmaout->XferErrorCallback = JPEG_MDMAErrorCallback;
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800adb0:	4a36      	ldr	r2, [pc, #216]	@ (800ae8c <JPEG_DMA_StartProcess+0x128>)
 800adb2:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Set the MDMA Out Abort callback */
  hjpeg->hdmaout->XferAbortCallback = JPEG_MDMAOutAbortCallback;
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800adb8:	4a36      	ldr	r2, [pc, #216]	@ (800ae94 <JPEG_DMA_StartProcess+0x130>)
 800adba:	659a      	str	r2, [r3, #88]	@ 0x58

  if ((inXfrSize == 0UL) || (outXfrSize == 0UL))
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d002      	beq.n	800adc8 <JPEG_DMA_StartProcess+0x64>
 800adc2:	68bb      	ldr	r3, [r7, #8]
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d107      	bne.n	800add8 <JPEG_DMA_StartProcess+0x74>
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800adcc:	f043 0204 	orr.w	r2, r3, #4
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	651a      	str	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800add4:	2301      	movs	r3, #1
 800add6:	e052      	b.n	800ae7e <JPEG_DMA_StartProcess+0x11a>
  }
  /*MDMA transfer size (BNDTR) must be a multiple of MDMA buffer size (TLEN)*/
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ade0:	68f9      	ldr	r1, [r7, #12]
 800ade2:	fbb3 f1f1 	udiv	r1, r3, r1
 800ade6:	68f8      	ldr	r0, [r7, #12]
 800ade8:	fb00 f101 	mul.w	r1, r0, r1
 800adec:	1a5b      	subs	r3, r3, r1
 800adee:	1ad2      	subs	r2, r2, r3
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	629a      	str	r2, [r3, #40]	@ 0x28

  /*MDMA transfer size (BNDTR) must be a multiple of MDMA buffer size (TLEN)*/
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800adfc:	68b9      	ldr	r1, [r7, #8]
 800adfe:	fbb3 f1f1 	udiv	r1, r3, r1
 800ae02:	68b8      	ldr	r0, [r7, #8]
 800ae04:	fb00 f101 	mul.w	r1, r0, r1
 800ae08:	1a5b      	subs	r3, r3, r1
 800ae0a:	1ad2      	subs	r2, r2, r3
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	62da      	str	r2, [r3, #44]	@ 0x2c


  /* Start MDMA FIFO Out transfer */
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	3344      	adds	r3, #68	@ 0x44
 800ae1a:	4619      	mov	r1, r3
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	69db      	ldr	r3, [r3, #28]
 800ae20:	461c      	mov	r4, r3
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae26:	2201      	movs	r2, #1
 800ae28:	9200      	str	r2, [sp, #0]
 800ae2a:	4622      	mov	r2, r4
 800ae2c:	f000 fbe2 	bl	800b5f4 <HAL_MDMA_Start_IT>
 800ae30:	4603      	mov	r3, r0
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d007      	beq.n	800ae46 <JPEG_DMA_StartProcess+0xe2>
                        hjpeg->OutDataLength, 1) != HAL_OK)
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ae3a:	f043 0204 	orr.w	r2, r3, #4
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	651a      	str	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800ae42:	2301      	movs	r3, #1
 800ae44:	e01b      	b.n	800ae7e <JPEG_DMA_StartProcess+0x11a>
  }
  /* Start DMA FIFO In transfer */
  if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	699b      	ldr	r3, [r3, #24]
 800ae4e:	4619      	mov	r1, r3
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	3340      	adds	r3, #64	@ 0x40
 800ae56:	461c      	mov	r4, r3
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae5c:	2201      	movs	r2, #1
 800ae5e:	9200      	str	r2, [sp, #0]
 800ae60:	4622      	mov	r2, r4
 800ae62:	f000 fbc7 	bl	800b5f4 <HAL_MDMA_Start_IT>
 800ae66:	4603      	mov	r3, r0
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d007      	beq.n	800ae7c <JPEG_DMA_StartProcess+0x118>
                        hjpeg->InDataLength, 1) != HAL_OK)
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ae70:	f043 0204 	orr.w	r2, r3, #4
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	651a      	str	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800ae78:	2301      	movs	r3, #1
 800ae7a:	e000      	b.n	800ae7e <JPEG_DMA_StartProcess+0x11a>
  }

  return HAL_OK;
 800ae7c:	2300      	movs	r3, #0
}
 800ae7e:	4618      	mov	r0, r3
 800ae80:	3714      	adds	r7, #20
 800ae82:	46bd      	mov	sp, r7
 800ae84:	bd90      	pop	{r4, r7, pc}
 800ae86:	bf00      	nop
 800ae88:	0800b197 	.word	0x0800b197
 800ae8c:	0800b385 	.word	0x0800b385
 800ae90:	0800b2c3 	.word	0x0800b2c3
 800ae94:	0800b3d5 	.word	0x0800b3d5

0800ae98 <JPEG_DMA_ContinueProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if process ends else JPEG_PROCESS_ONGOING
  */
static void JPEG_DMA_ContinueProcess(JPEG_HandleTypeDef *hjpeg)
{
 800ae98:	b580      	push	{r7, lr}
 800ae9a:	b082      	sub	sp, #8
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	6078      	str	r0, [r7, #4]
  /*End of header processing flag rises*/
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aea4:	f003 0303 	and.w	r3, r3, #3
 800aea8:	2b02      	cmp	r3, #2
 800aeaa:	d125      	bne.n	800aef8 <JPEG_DMA_ContinueProcess+0x60>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aeb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d01e      	beq.n	800aef8 <JPEG_DMA_ContinueProcess+0x60>
    {
      /*Call Header parsing complete callback */
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	3304      	adds	r3, #4
 800aebe:	4619      	mov	r1, r3
 800aec0:	6878      	ldr	r0, [r7, #4]
 800aec2:	f7fe fb6c 	bl	800959e <HAL_JPEG_GetInfo>

      /* Reset the ImageQuality */
      hjpeg->Conf.ImageQuality = 0;
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	2200      	movs	r2, #0
 800aeca:	615a      	str	r2, [r3, #20]

      /*Call Info Ready callback */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->InfoReadyCallback(hjpeg, &hjpeg->Conf);
#else
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	3304      	adds	r3, #4
 800aed0:	4619      	mov	r1, r3
 800aed2:	6878      	ldr	r0, [r7, #4]
 800aed4:	f7fe fce4 	bl	80098a0 <HAL_JPEG_InfoReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800aee6:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Clear header processing done flag */
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800aef6:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  /*End of Conversion handling*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) != 0UL)
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aefe:	f003 0320 	and.w	r3, r3, #32
 800af02:	2b00      	cmp	r3, #0
 800af04:	d039      	beq.n	800af7a <JPEG_DMA_ContinueProcess+0xe2>
  {

    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800af0a:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	655a      	str	r2, [r3, #84]	@ 0x54

    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	681a      	ldr	r2, [r3, #0]
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	f022 0201 	bic.w	r2, r2, #1
 800af20:	601a      	str	r2, [r3, #0]

    __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800af30:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Clear all flags */
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800af40:	639a      	str	r2, [r3, #56]	@ 0x38

    if (hjpeg->hdmain->State == HAL_MDMA_STATE_BUSY)
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af46:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800af4a:	b2db      	uxtb	r3, r3
 800af4c:	2b02      	cmp	r3, #2
 800af4e:	d104      	bne.n	800af5a <JPEG_DMA_ContinueProcess+0xc2>
    {
      /* Stop the MDMA In Xfer*/
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmain);
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af54:	4618      	mov	r0, r3
 800af56:	f000 fbce 	bl	800b6f6 <HAL_MDMA_Abort_IT>
    }

    if (hjpeg->hdmaout->State == HAL_MDMA_STATE_BUSY)
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800af5e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800af62:	b2db      	uxtb	r3, r3
 800af64:	2b02      	cmp	r3, #2
 800af66:	d105      	bne.n	800af74 <JPEG_DMA_ContinueProcess+0xdc>
    {
      /* Stop the MDMA out Xfer*/
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmaout);
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800af6c:	4618      	mov	r0, r3
 800af6e:	f000 fbc2 	bl	800b6f6 <HAL_MDMA_Abort_IT>
      JPEG_DMA_EndProcess(hjpeg);
    }
  }


}
 800af72:	e002      	b.n	800af7a <JPEG_DMA_ContinueProcess+0xe2>
      JPEG_DMA_EndProcess(hjpeg);
 800af74:	6878      	ldr	r0, [r7, #4]
 800af76:	f000 f804 	bl	800af82 <JPEG_DMA_EndProcess>
}
 800af7a:	bf00      	nop
 800af7c:	3708      	adds	r7, #8
 800af7e:	46bd      	mov	sp, r7
 800af80:	bd80      	pop	{r7, pc}

0800af82 <JPEG_DMA_EndProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE
  */
static void JPEG_DMA_EndProcess(JPEG_HandleTypeDef *hjpeg)
{
 800af82:	b580      	push	{r7, lr}
 800af84:	b084      	sub	sp, #16
 800af86:	af00      	add	r7, sp, #0
 800af88:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;
  hjpeg->JpegOutCount = hjpeg->OutDataLength - (hjpeg->hdmaout->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	695b      	ldr	r3, [r3, #20]
 800af96:	f3c3 0310 	ubfx	r3, r3, #0, #17
 800af9a:	1ad2      	subs	r2, r2, r3
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	625a      	str	r2, [r3, #36]	@ 0x24

  /*if Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
  if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800afa8:	429a      	cmp	r2, r3
 800afaa:	d10a      	bne.n	800afc2 <JPEG_DMA_EndProcess+0x40>
  {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
    HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	69d9      	ldr	r1, [r3, #28]
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800afb4:	461a      	mov	r2, r3
 800afb6:	6878      	ldr	r0, [r7, #4]
 800afb8:	f7f6 ff32 	bl	8001e20 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

    hjpeg->JpegOutCount = 0;
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	2200      	movs	r2, #0
 800afc0:	625a      	str	r2, [r3, #36]	@ 0x24
  }

  /*Check if remaining data in the output FIFO*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL)
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800afc8:	f003 0310 	and.w	r3, r3, #16
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d134      	bne.n	800b03a <JPEG_DMA_EndProcess+0xb8>
  {
    if (hjpeg->JpegOutCount > 0UL)
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d00a      	beq.n	800afee <JPEG_DMA_EndProcess+0x6c>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	69d9      	ldr	r1, [r3, #28]
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800afe0:	461a      	mov	r2, r3
 800afe2:	6878      	ldr	r0, [r7, #4]
 800afe4:	f7f6 ff1c 	bl	8001e20 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	2200      	movs	r2, #0
 800afec:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	681a      	ldr	r2, [r3, #0]
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	f022 0201 	bic.w	r2, r2, #1
 800affc:	601a      	str	r2, [r3, #0]

    tmpContext = hjpeg->Context;
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b002:	60fb      	str	r3, [r7, #12]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b008:	f403 4282 	and.w	r2, r3, #16640	@ 0x4100
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	2200      	movs	r2, #0
 800b014:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	2201      	movs	r2, #1
 800b01c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	f003 0303 	and.w	r3, r3, #3
 800b026:	2b02      	cmp	r3, #2
 800b028:	d103      	bne.n	800b032 <JPEG_DMA_EndProcess+0xb0>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800b02a:	6878      	ldr	r0, [r7, #4]
 800b02c:	f7fe fc43 	bl	80098b6 <HAL_JPEG_DecodeCpltCallback>
  else
  {
    /* Nothing to do */
  }

}
 800b030:	e00c      	b.n	800b04c <JPEG_DMA_EndProcess+0xca>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800b032:	6878      	ldr	r0, [r7, #4]
 800b034:	f7f6 ff10 	bl	8001e58 <HAL_JPEG_EncodeCpltCallback>
}
 800b038:	e008      	b.n	800b04c <JPEG_DMA_EndProcess+0xca>
  else if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b03e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b042:	2b00      	cmp	r3, #0
 800b044:	d102      	bne.n	800b04c <JPEG_DMA_EndProcess+0xca>
    JPEG_DMA_PollResidualData(hjpeg);
 800b046:	6878      	ldr	r0, [r7, #4]
 800b048:	f000 f804 	bl	800b054 <JPEG_DMA_PollResidualData>
}
 800b04c:	bf00      	nop
 800b04e:	3710      	adds	r7, #16
 800b050:	46bd      	mov	sp, r7
 800b052:	bd80      	pop	{r7, pc}

0800b054 <JPEG_DMA_PollResidualData>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None.
  */
static void JPEG_DMA_PollResidualData(JPEG_HandleTypeDef *hjpeg)
{
 800b054:	b580      	push	{r7, lr}
 800b056:	b086      	sub	sp, #24
 800b058:	af00      	add	r7, sp, #0
 800b05a:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;
  uint32_t count;
  uint32_t dataOut;

  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 800b05c:	2310      	movs	r3, #16
 800b05e:	617b      	str	r3, [r7, #20]
 800b060:	e04f      	b.n	800b102 <JPEG_DMA_PollResidualData+0xae>
  {
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b066:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d146      	bne.n	800b0fc <JPEG_DMA_PollResidualData+0xa8>
    {
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b074:	f003 0310 	and.w	r3, r3, #16
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d03f      	beq.n	800b0fc <JPEG_DMA_PollResidualData+0xa8>
      {
        dataOut = hjpeg->Instance->DOR;
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b082:	60fb      	str	r3, [r7, #12]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataOut & 0x000000FFUL);
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	69da      	ldr	r2, [r3, #28]
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b08c:	4413      	add	r3, r2
 800b08e:	68fa      	ldr	r2, [r7, #12]
 800b090:	b2d2      	uxtb	r2, r2
 800b092:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataOut & 0x0000FF00UL) >> 8);
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	0a19      	lsrs	r1, r3, #8
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	69da      	ldr	r2, [r3, #28]
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0a0:	3301      	adds	r3, #1
 800b0a2:	4413      	add	r3, r2
 800b0a4:	b2ca      	uxtb	r2, r1
 800b0a6:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	0c19      	lsrs	r1, r3, #16
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	69da      	ldr	r2, [r3, #28]
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0b4:	3302      	adds	r3, #2
 800b0b6:	4413      	add	r3, r2
 800b0b8:	b2ca      	uxtb	r2, r1
 800b0ba:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	0e19      	lsrs	r1, r3, #24
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	69da      	ldr	r2, [r3, #28]
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0c8:	3303      	adds	r3, #3
 800b0ca:	4413      	add	r3, r2
 800b0cc:	b2ca      	uxtb	r2, r1
 800b0ce:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount += 4UL;
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0d4:	1d1a      	adds	r2, r3, #4
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	625a      	str	r2, [r3, #36]	@ 0x24

        if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0e2:	429a      	cmp	r2, r3
 800b0e4:	d10a      	bne.n	800b0fc <JPEG_DMA_PollResidualData+0xa8>
        {
          /*Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
          hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
          HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	69d9      	ldr	r1, [r3, #28]
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0ee:	461a      	mov	r2, r3
 800b0f0:	6878      	ldr	r0, [r7, #4]
 800b0f2:	f7f6 fe95 	bl	8001e20 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

          hjpeg->JpegOutCount = 0;
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	2200      	movs	r2, #0
 800b0fa:	625a      	str	r2, [r3, #36]	@ 0x24
  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 800b0fc:	697b      	ldr	r3, [r7, #20]
 800b0fe:	3b01      	subs	r3, #1
 800b100:	617b      	str	r3, [r7, #20]
 800b102:	697b      	ldr	r3, [r7, #20]
 800b104:	2b00      	cmp	r3, #0
 800b106:	d1ac      	bne.n	800b062 <JPEG_DMA_PollResidualData+0xe>

      }
    }
  }

  tmpContext = hjpeg->Context;
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b10c:	613b      	str	r3, [r7, #16]

  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b114:	f003 0310 	and.w	r3, r3, #16
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d004      	beq.n	800b126 <JPEG_DMA_PollResidualData+0xd2>
 800b11c:	693b      	ldr	r3, [r7, #16]
 800b11e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b122:	2b00      	cmp	r3, #0
 800b124:	d133      	bne.n	800b18e <JPEG_DMA_PollResidualData+0x13a>
  {
    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	681a      	ldr	r2, [r3, #0]
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	f022 0201 	bic.w	r2, r2, #1
 800b134:	601a      	str	r2, [r3, #0]

    if (hjpeg->JpegOutCount > 0UL)
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d00a      	beq.n	800b154 <JPEG_DMA_PollResidualData+0x100>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	69d9      	ldr	r1, [r3, #28]
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b146:	461a      	mov	r2, r3
 800b148:	6878      	ldr	r0, [r7, #4]
 800b14a:	f7f6 fe69 	bl	8001e20 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	2200      	movs	r2, #0
 800b152:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    tmpContext = hjpeg->Context;
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b158:	613b      	str	r3, [r7, #16]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b15e:	f403 4282 	and.w	r2, r3, #16640	@ 0x4100
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	2200      	movs	r2, #0
 800b16a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	2201      	movs	r2, #1
 800b172:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800b176:	693b      	ldr	r3, [r7, #16]
 800b178:	f003 0303 	and.w	r3, r3, #3
 800b17c:	2b02      	cmp	r3, #2
 800b17e:	d103      	bne.n	800b188 <JPEG_DMA_PollResidualData+0x134>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800b180:	6878      	ldr	r0, [r7, #4]
 800b182:	f7fe fb98 	bl	80098b6 <HAL_JPEG_DecodeCpltCallback>
#else
      HAL_JPEG_EncodeCpltCallback(hjpeg);
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
    }
  }
}
 800b186:	e002      	b.n	800b18e <JPEG_DMA_PollResidualData+0x13a>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800b188:	6878      	ldr	r0, [r7, #4]
 800b18a:	f7f6 fe65 	bl	8001e58 <HAL_JPEG_EncodeCpltCallback>
}
 800b18e:	bf00      	nop
 800b190:	3718      	adds	r7, #24
 800b192:	46bd      	mov	sp, r7
 800b194:	bd80      	pop	{r7, pc}

0800b196 <JPEG_MDMAInCpltCallback>:
  * @brief  MDMA input transfer complete callback
  * @param  hmdma pointer to a MDMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_MDMAInCpltCallback(MDMA_HandleTypeDef *hmdma)
{
 800b196:	b590      	push	{r4, r7, lr}
 800b198:	b087      	sub	sp, #28
 800b19a:	af02      	add	r7, sp, #8
 800b19c:	6078      	str	r0, [r7, #4]
  uint32_t inXfrSize;

  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b1a2:	60fb      	str	r3, [r7, #12]

  /* Disable The JPEG IT so the MDMA Input Callback can not be interrupted by the JPEG EOC IT or JPEG HPD IT */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800b1b2:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Check if context method is DMA and we are not in ending DMA stage */
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) == JPEG_CONTEXT_DMA)
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b1b8:	f248 030c 	movw	r3, #32780	@ 0x800c
 800b1bc:	4013      	ands	r3, r2
 800b1be:	2b0c      	cmp	r3, #12
 800b1c0:	d17c      	bne.n	800b2bc <JPEG_MDMAInCpltCallback+0x126>
    /*if the MDMA In is triggred with JPEG In FIFO Threshold flag
      then MDMA In buffer size is 32 bytes
      else (MDMA In is triggred with JPEG In FIFO not full flag)
      then MDMA In buffer size is 4 bytes
      */
    inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b1c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b1c8:	60bb      	str	r3, [r7, #8]

    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	695b      	ldr	r3, [r3, #20]
 800b1d4:	f3c3 0310 	ubfx	r3, r3, #0, #17
 800b1d8:	1ad2      	subs	r2, r2, r3
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	621a      	str	r2, [r3, #32]

    /*Call HAL_JPEG_GetDataCallback to get new data */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->GetDataCallback(hjpeg, hjpeg->JpegInCount);
#else
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	6a1b      	ldr	r3, [r3, #32]
 800b1e2:	4619      	mov	r1, r3
 800b1e4:	68f8      	ldr	r0, [r7, #12]
 800b1e6:	f7f6 fde9 	bl	8001dbc <HAL_JPEG_GetDataCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */


    if (hjpeg->InDataLength >= inXfrSize)
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b1ee:	68ba      	ldr	r2, [r7, #8]
 800b1f0:	429a      	cmp	r2, r3
 800b1f2:	d81f      	bhi.n	800b234 <JPEG_MDMAInCpltCallback+0x9e>
    {
      if (inXfrSize == 0UL)
 800b1f4:	68bb      	ldr	r3, [r7, #8]
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d10d      	bne.n	800b216 <JPEG_MDMAInCpltCallback+0x80>
      {
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b1fe:	f043 0204 	orr.w	r2, r3, #4
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	651a      	str	r2, [r3, #80]	@ 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	2206      	movs	r2, #6
 800b20a:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
        hjpeg->ErrorCallback(hjpeg);
#else
        HAL_JPEG_ErrorCallback(hjpeg);
 800b20e:	68f8      	ldr	r0, [r7, #12]
 800b210:	f7f6 fe36 	bl	8001e80 <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
        return;
 800b214:	e052      	b.n	800b2bc <JPEG_MDMAInCpltCallback+0x126>
      }
      /*JPEG Input MDMA transfer data number must be multiple of MDMA buffer size
        as the destination is a 32 bits register */
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b21e:	68b9      	ldr	r1, [r7, #8]
 800b220:	fbb3 f1f1 	udiv	r1, r3, r1
 800b224:	68b8      	ldr	r0, [r7, #8]
 800b226:	fb00 f101 	mul.w	r1, r0, r1
 800b22a:	1a5b      	subs	r3, r3, r1
 800b22c:	1ad2      	subs	r2, r2, r3
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	629a      	str	r2, [r3, #40]	@ 0x28
 800b232:	e010      	b.n	800b256 <JPEG_MDMAInCpltCallback+0xc0>

    }
    else if (hjpeg->InDataLength > 0UL)
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d00c      	beq.n	800b256 <JPEG_MDMAInCpltCallback+0xc0>
    {
      /* Transfer the remaining Data, must be multiple of source data size (byte) and destination data size (word) */
      if ((hjpeg->InDataLength % 4UL) != 0UL)
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b240:	f003 0303 	and.w	r3, r3, #3
 800b244:	2b00      	cmp	r3, #0
 800b246:	d006      	beq.n	800b256 <JPEG_MDMAInCpltCallback+0xc0>
      {
        hjpeg->InDataLength = ((hjpeg->InDataLength / 4UL) + 1UL) * 4UL;
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b24c:	089b      	lsrs	r3, r3, #2
 800b24e:	3301      	adds	r3, #1
 800b250:	009a      	lsls	r2, r3, #2
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	629a      	str	r2, [r3, #40]	@ 0x28
    else
    {
      /* Nothing to do */
    }

    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b25a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d124      	bne.n	800b2ac <JPEG_MDMAInCpltCallback+0x116>
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b266:	2b00      	cmp	r3, #0
 800b268:	d020      	beq.n	800b2ac <JPEG_MDMAInCpltCallback+0x116>
    {
      /* Start MDMA FIFO In transfer */
      if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	699b      	ldr	r3, [r3, #24]
 800b272:	4619      	mov	r1, r3
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	3340      	adds	r3, #64	@ 0x40
 800b27a:	461c      	mov	r4, r3
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b280:	2201      	movs	r2, #1
 800b282:	9200      	str	r2, [sp, #0]
 800b284:	4622      	mov	r2, r4
 800b286:	f000 f9b5 	bl	800b5f4 <HAL_MDMA_Start_IT>
 800b28a:	4603      	mov	r3, r0
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d00d      	beq.n	800b2ac <JPEG_MDMAInCpltCallback+0x116>
                            hjpeg->InDataLength, 1) != HAL_OK)
      {
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b294:	f043 0204 	orr.w	r2, r3, #4
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	651a      	str	r2, [r3, #80]	@ 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	2206      	movs	r2, #6
 800b2a0:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
        hjpeg->ErrorCallback(hjpeg);
#else
        HAL_JPEG_ErrorCallback(hjpeg);
 800b2a4:	68f8      	ldr	r0, [r7, #12]
 800b2a6:	f7f6 fdeb 	bl	8001e80 <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
        return;
 800b2aa:	e007      	b.n	800b2bc <JPEG_MDMAInCpltCallback+0x126>
      }
    }

    /* JPEG Conversion still on going : Enable the JPEG IT */
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800b2ba:	631a      	str	r2, [r3, #48]	@ 0x30
  }
}
 800b2bc:	3714      	adds	r7, #20
 800b2be:	46bd      	mov	sp, r7
 800b2c0:	bd90      	pop	{r4, r7, pc}

0800b2c2 <JPEG_MDMAOutCpltCallback>:
  * @brief  MDMA output transfer complete callback
  * @param  hmdma pointer to a MDMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_MDMAOutCpltCallback(MDMA_HandleTypeDef *hmdma)
{
 800b2c2:	b590      	push	{r4, r7, lr}
 800b2c4:	b087      	sub	sp, #28
 800b2c6:	af02      	add	r7, sp, #8
 800b2c8:	6078      	str	r0, [r7, #4]
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b2ce:	60fb      	str	r3, [r7, #12]


  /* Disable The JPEG IT so the MDMA Output Callback can not be interrupted by the JPEG EOC IT or JPEG HPD IT */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800b2de:	631a      	str	r2, [r3, #48]	@ 0x30

  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) ==
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b2e4:	f248 030c 	movw	r3, #32780	@ 0x800c
 800b2e8:	4013      	ands	r3, r2
 800b2ea:	2b0c      	cmp	r3, #12
 800b2ec:	d147      	bne.n	800b37e <JPEG_MDMAOutCpltCallback+0xbc>
      JPEG_CONTEXT_DMA) /* Check if context method is DMA and we are not in ending DMA stage */
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) == 0UL)
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b2f4:	f003 0320 	and.w	r3, r3, #32
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d138      	bne.n	800b36e <JPEG_MDMAOutCpltCallback+0xac>
    {
      hjpeg->JpegOutCount = hjpeg->OutDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	695b      	ldr	r3, [r3, #20]
 800b306:	f3c3 0310 	ubfx	r3, r3, #0, #17
 800b30a:	1ad2      	subs	r2, r2, r3
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	625a      	str	r2, [r3, #36]	@ 0x24

      /*Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	69d9      	ldr	r1, [r3, #28]
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b318:	461a      	mov	r2, r3
 800b31a:	68f8      	ldr	r0, [r7, #12]
 800b31c:	f7f6 fd80 	bl	8001e20 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b324:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d120      	bne.n	800b36e <JPEG_MDMAOutCpltCallback+0xac>
      {
        /* Start MDMA FIFO Out transfer */
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	3344      	adds	r3, #68	@ 0x44
 800b336:	4619      	mov	r1, r3
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	69db      	ldr	r3, [r3, #28]
 800b33c:	461c      	mov	r4, r3
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b342:	2201      	movs	r2, #1
 800b344:	9200      	str	r2, [sp, #0]
 800b346:	4622      	mov	r2, r4
 800b348:	f000 f954 	bl	800b5f4 <HAL_MDMA_Start_IT>
 800b34c:	4603      	mov	r3, r0
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d00d      	beq.n	800b36e <JPEG_MDMAOutCpltCallback+0xac>
                              hjpeg->OutDataLength, 1) != HAL_OK)
        {
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b356:	f043 0204 	orr.w	r2, r3, #4
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	651a      	str	r2, [r3, #80]	@ 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	2206      	movs	r2, #6
 800b362:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
          hjpeg->ErrorCallback(hjpeg);
#else
          HAL_JPEG_ErrorCallback(hjpeg);
 800b366:	68f8      	ldr	r0, [r7, #12]
 800b368:	f7f6 fd8a 	bl	8001e80 <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
          return;
 800b36c:	e007      	b.n	800b37e <JPEG_MDMAOutCpltCallback+0xbc>
        }
      }
    }

    /* JPEG Conversion still on going : Enable the JPEG IT */
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800b37c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

}
 800b37e:	3714      	adds	r7, #20
 800b380:	46bd      	mov	sp, r7
 800b382:	bd90      	pop	{r4, r7, pc}

0800b384 <JPEG_MDMAErrorCallback>:
  * @brief  MDMA Transfer error callback
  * @param  hmdma pointer to a MDMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_MDMAErrorCallback(MDMA_HandleTypeDef *hmdma)
{
 800b384:	b580      	push	{r7, lr}
 800b386:	b084      	sub	sp, #16
 800b388:	af00      	add	r7, sp, #0
 800b38a:	6078      	str	r0, [r7, #4]
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b390:	60fb      	str	r3, [r7, #12]

  /*Stop Encoding/Decoding*/
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	681a      	ldr	r2, [r3, #0]
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	f022 0201 	bic.w	r2, r2, #1
 800b3a0:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800b3b0:	631a      	str	r2, [r3, #48]	@ 0x30

  hjpeg->State = HAL_JPEG_STATE_READY;
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	2201      	movs	r2, #1
 800b3b6:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
  hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b3be:	f043 0204 	orr.w	r2, r3, #4
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	651a      	str	r2, [r3, #80]	@ 0x50

#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
  hjpeg->ErrorCallback(hjpeg);
#else
  HAL_JPEG_ErrorCallback(hjpeg);
 800b3c6:	68f8      	ldr	r0, [r7, #12]
 800b3c8:	f7f6 fd5a 	bl	8001e80 <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
}
 800b3cc:	bf00      	nop
 800b3ce:	3710      	adds	r7, #16
 800b3d0:	46bd      	mov	sp, r7
 800b3d2:	bd80      	pop	{r7, pc}

0800b3d4 <JPEG_MDMAOutAbortCallback>:
  * @brief  MDMA output Abort callback
  * @param  hmdma pointer to a MDMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_MDMAOutAbortCallback(MDMA_HandleTypeDef *hmdma)
{
 800b3d4:	b580      	push	{r7, lr}
 800b3d6:	b084      	sub	sp, #16
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	6078      	str	r0, [r7, #4]
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b3e0:	60fb      	str	r3, [r7, #12]

  if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b3e6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d002      	beq.n	800b3f4 <JPEG_MDMAOutAbortCallback+0x20>
  {
    JPEG_DMA_EndProcess(hjpeg);
 800b3ee:	68f8      	ldr	r0, [r7, #12]
 800b3f0:	f7ff fdc7 	bl	800af82 <JPEG_DMA_EndProcess>
  }
}
 800b3f4:	bf00      	nop
 800b3f6:	3710      	adds	r7, #16
 800b3f8:	46bd      	mov	sp, r7
 800b3fa:	bd80      	pop	{r7, pc}

0800b3fc <JPEG_GetQuality>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG image quality from 1 to 100.
  */
static uint32_t JPEG_GetQuality(JPEG_HandleTypeDef *hjpeg)
{
 800b3fc:	b480      	push	{r7}
 800b3fe:	b08b      	sub	sp, #44	@ 0x2c
 800b400:	af00      	add	r7, sp, #0
 800b402:	6078      	str	r0, [r7, #4]
  uint32_t quality = 0;
 800b404:	2300      	movs	r3, #0
 800b406:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t quantRow, quantVal, scale, i, j;
  __IO uint32_t *tableAddress = hjpeg->Instance->QMEM0;
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	3350      	adds	r3, #80	@ 0x50
 800b40e:	61bb      	str	r3, [r7, #24]

  i = 0;
 800b410:	2300      	movs	r3, #0
 800b412:	623b      	str	r3, [r7, #32]
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 800b414:	e042      	b.n	800b49c <JPEG_GetQuality+0xa0>
  {
    quantRow = *tableAddress;
 800b416:	69bb      	ldr	r3, [r7, #24]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	617b      	str	r3, [r7, #20]
    for (j = 0; j < 4UL; j++)
 800b41c:	2300      	movs	r3, #0
 800b41e:	61fb      	str	r3, [r7, #28]
 800b420:	e033      	b.n	800b48a <JPEG_GetQuality+0x8e>
    {
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
 800b422:	69fb      	ldr	r3, [r7, #28]
 800b424:	00db      	lsls	r3, r3, #3
 800b426:	697a      	ldr	r2, [r7, #20]
 800b428:	fa22 f303 	lsr.w	r3, r2, r3
 800b42c:	b2db      	uxtb	r3, r3
 800b42e:	613b      	str	r3, [r7, #16]
      if (quantVal == 1UL)
 800b430:	693b      	ldr	r3, [r7, #16]
 800b432:	2b01      	cmp	r3, #1
 800b434:	d103      	bne.n	800b43e <JPEG_GetQuality+0x42>
      {
        /* if Quantization value = 1 then quality is 100%*/
        quality += 100UL;
 800b436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b438:	3364      	adds	r3, #100	@ 0x64
 800b43a:	627b      	str	r3, [r7, #36]	@ 0x24
 800b43c:	e022      	b.n	800b484 <JPEG_GetQuality+0x88>
      }
      else
      {
        /* Note that the quantization coefficients must be specified in the table in zigzag order */
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 800b43e:	693b      	ldr	r3, [r7, #16]
 800b440:	2264      	movs	r2, #100	@ 0x64
 800b442:	fb02 f303 	mul.w	r3, r2, r3
 800b446:	687a      	ldr	r2, [r7, #4]
 800b448:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800b44a:	6a38      	ldr	r0, [r7, #32]
 800b44c:	69f9      	ldr	r1, [r7, #28]
 800b44e:	4401      	add	r1, r0
 800b450:	4818      	ldr	r0, [pc, #96]	@ (800b4b4 <JPEG_GetQuality+0xb8>)
 800b452:	5c41      	ldrb	r1, [r0, r1]
 800b454:	440a      	add	r2, r1
 800b456:	7812      	ldrb	r2, [r2, #0]
 800b458:	fbb3 f3f2 	udiv	r3, r3, r2
 800b45c:	60fb      	str	r3, [r7, #12]

        if (scale <= 100UL)
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	2b64      	cmp	r3, #100	@ 0x64
 800b462:	d807      	bhi.n	800b474 <JPEG_GetQuality+0x78>
        {
          quality += (200UL - scale) / 2UL;
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	f1c3 03c8 	rsb	r3, r3, #200	@ 0xc8
 800b46a:	085b      	lsrs	r3, r3, #1
 800b46c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b46e:	4413      	add	r3, r2
 800b470:	627b      	str	r3, [r7, #36]	@ 0x24
 800b472:	e007      	b.n	800b484 <JPEG_GetQuality+0x88>
        }
        else
        {
          quality += 5000UL / scale;
 800b474:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b47e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b480:	4413      	add	r3, r2
 800b482:	627b      	str	r3, [r7, #36]	@ 0x24
    for (j = 0; j < 4UL; j++)
 800b484:	69fb      	ldr	r3, [r7, #28]
 800b486:	3301      	adds	r3, #1
 800b488:	61fb      	str	r3, [r7, #28]
 800b48a:	69fb      	ldr	r3, [r7, #28]
 800b48c:	2b03      	cmp	r3, #3
 800b48e:	d9c8      	bls.n	800b422 <JPEG_GetQuality+0x26>
        }
      }
    }

    i += 4UL;
 800b490:	6a3b      	ldr	r3, [r7, #32]
 800b492:	3304      	adds	r3, #4
 800b494:	623b      	str	r3, [r7, #32]
    tableAddress ++;
 800b496:	69bb      	ldr	r3, [r7, #24]
 800b498:	3304      	adds	r3, #4
 800b49a:	61bb      	str	r3, [r7, #24]
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 800b49c:	6a3b      	ldr	r3, [r7, #32]
 800b49e:	2b3c      	cmp	r3, #60	@ 0x3c
 800b4a0:	d9b9      	bls.n	800b416 <JPEG_GetQuality+0x1a>
  }

  return (quality / 64UL);
 800b4a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4a4:	099b      	lsrs	r3, r3, #6
}
 800b4a6:	4618      	mov	r0, r3
 800b4a8:	372c      	adds	r7, #44	@ 0x2c
 800b4aa:	46bd      	mov	sp, r7
 800b4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b0:	4770      	bx	lr
 800b4b2:	bf00      	nop
 800b4b4:	0801b614 	.word	0x0801b614

0800b4b8 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 800b4b8:	b580      	push	{r7, lr}
 800b4ba:	b084      	sub	sp, #16
 800b4bc:	af00      	add	r7, sp, #0
 800b4be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800b4c0:	f7f8 f808 	bl	80034d4 <HAL_GetTick>
 800b4c4:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d101      	bne.n	800b4d0 <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
 800b4cc:	2301      	movs	r3, #1
 800b4ce:	e03b      	b.n	800b548 <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	2200      	movs	r2, #0
 800b4d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	2202      	movs	r2, #2
 800b4dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	68da      	ldr	r2, [r3, #12]
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	f022 0201 	bic.w	r2, r2, #1
 800b4ee:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800b4f0:	e00f      	b.n	800b512 <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 800b4f2:	f7f7 ffef 	bl	80034d4 <HAL_GetTick>
 800b4f6:	4602      	mov	r2, r0
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	1ad3      	subs	r3, r2, r3
 800b4fc:	2b05      	cmp	r3, #5
 800b4fe:	d908      	bls.n	800b512 <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	2240      	movs	r2, #64	@ 0x40
 800b504:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	2203      	movs	r2, #3
 800b50a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      return HAL_ERROR;
 800b50e:	2301      	movs	r3, #1
 800b510:	e01a      	b.n	800b548 <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	68db      	ldr	r3, [r3, #12]
 800b518:	f003 0301 	and.w	r3, r3, #1
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d1e8      	bne.n	800b4f2 <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
 800b520:	6878      	ldr	r0, [r7, #4]
 800b522:	f000 fad3 	bl	800bacc <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	2200      	movs	r2, #0
 800b52a:	65da      	str	r2, [r3, #92]	@ 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	2200      	movs	r2, #0
 800b530:	661a      	str	r2, [r3, #96]	@ 0x60
  hmdma->LinkedListNodeCounter  = 0;
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	2200      	movs	r2, #0
 800b536:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	2200      	movs	r2, #0
 800b53c:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	2201      	movs	r2, #1
 800b542:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b546:	2300      	movs	r3, #0
}
 800b548:	4618      	mov	r0, r3
 800b54a:	3710      	adds	r7, #16
 800b54c:	46bd      	mov	sp, r7
 800b54e:	bd80      	pop	{r7, pc}

0800b550 <HAL_MDMA_ConfigPostRequestMask>:
  * @param  MaskData:    specifies the value to be written to MaskAddress after a request is served.
  *                      MaskAddress and MaskData could be used to automatically clear a peripheral flag when the request is served.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_ConfigPostRequestMask(MDMA_HandleTypeDef *hmdma, uint32_t MaskAddress, uint32_t MaskData)
{
 800b550:	b480      	push	{r7}
 800b552:	b087      	sub	sp, #28
 800b554:	af00      	add	r7, sp, #0
 800b556:	60f8      	str	r0, [r7, #12]
 800b558:	60b9      	str	r1, [r7, #8]
 800b55a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800b55c:	2300      	movs	r3, #0
 800b55e:	75fb      	strb	r3, [r7, #23]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	2b00      	cmp	r3, #0
 800b564:	d101      	bne.n	800b56a <HAL_MDMA_ConfigPostRequestMask+0x1a>
  {
    return HAL_ERROR;
 800b566:	2301      	movs	r3, #1
 800b568:	e03e      	b.n	800b5e8 <HAL_MDMA_ConfigPostRequestMask+0x98>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b570:	2b01      	cmp	r3, #1
 800b572:	d101      	bne.n	800b578 <HAL_MDMA_ConfigPostRequestMask+0x28>
 800b574:	2302      	movs	r3, #2
 800b576:	e037      	b.n	800b5e8 <HAL_MDMA_ConfigPostRequestMask+0x98>
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	2201      	movs	r2, #1
 800b57c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b586:	b2db      	uxtb	r3, r3
 800b588:	2b01      	cmp	r3, #1
 800b58a:	d126      	bne.n	800b5da <HAL_MDMA_ConfigPostRequestMask+0x8a>
  {
    /* if HW request set Post Request MaskAddress and MaskData,  */
    if((hmdma->Instance->CTCR & MDMA_CTCR_SWRM) == 0U)
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	691b      	ldr	r3, [r3, #16]
 800b592:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800b596:	2b00      	cmp	r3, #0
 800b598:	d11c      	bne.n	800b5d4 <HAL_MDMA_ConfigPostRequestMask+0x84>
    {
      /* Set the HW request clear Mask and Data */
      hmdma->Instance->CMAR = MaskAddress;
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	68ba      	ldr	r2, [r7, #8]
 800b5a0:	631a      	str	r2, [r3, #48]	@ 0x30
      hmdma->Instance->CMDR = MaskData;
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	687a      	ldr	r2, [r7, #4]
 800b5a8:	635a      	str	r2, [r3, #52]	@ 0x34
      -If the request is done by SW : BWM could be set to 1 or 0.
      -If the request is done by a peripheral :
         If mask address not set (0) => BWM must be set to 0
         If mask address set (different than 0) => BWM could be set to 1 or 0
      */
      if(MaskAddress == 0U)
 800b5aa:	68bb      	ldr	r3, [r7, #8]
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d108      	bne.n	800b5c2 <HAL_MDMA_ConfigPostRequestMask+0x72>
      {
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	691a      	ldr	r2, [r3, #16]
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800b5be:	611a      	str	r2, [r3, #16]
 800b5c0:	e00d      	b.n	800b5de <HAL_MDMA_ConfigPostRequestMask+0x8e>
      }
      else
      {
        hmdma->Instance->CTCR |=  MDMA_CTCR_BWM;
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	691a      	ldr	r2, [r3, #16]
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800b5d0:	611a      	str	r2, [r3, #16]
 800b5d2:	e004      	b.n	800b5de <HAL_MDMA_ConfigPostRequestMask+0x8e>
      }
    }
    else
    {
      /* Return error status */
      status =  HAL_ERROR;
 800b5d4:	2301      	movs	r3, #1
 800b5d6:	75fb      	strb	r3, [r7, #23]
 800b5d8:	e001      	b.n	800b5de <HAL_MDMA_ConfigPostRequestMask+0x8e>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 800b5da:	2301      	movs	r3, #1
 800b5dc:	75fb      	strb	r3, [r7, #23]
  }
  /* Release Lock */
  __HAL_UNLOCK(hmdma);
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	2200      	movs	r2, #0
 800b5e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b5e6:	7dfb      	ldrb	r3, [r7, #23]
}
 800b5e8:	4618      	mov	r0, r3
 800b5ea:	371c      	adds	r7, #28
 800b5ec:	46bd      	mov	sp, r7
 800b5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f2:	4770      	bx	lr

0800b5f4 <HAL_MDMA_Start_IT>:
  * @param  BlockDataLength : The length of a block transfer in bytes
  * @param  BlockCount      : The number of a blocks to be transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Start_IT(MDMA_HandleTypeDef *hmdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t BlockDataLength, uint32_t BlockCount)
{
 800b5f4:	b580      	push	{r7, lr}
 800b5f6:	b086      	sub	sp, #24
 800b5f8:	af02      	add	r7, sp, #8
 800b5fa:	60f8      	str	r0, [r7, #12]
 800b5fc:	60b9      	str	r1, [r7, #8]
 800b5fe:	607a      	str	r2, [r7, #4]
 800b600:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_MDMA_TRANSFER_LENGTH(BlockDataLength));
  assert_param(IS_MDMA_BLOCK_COUNT(BlockCount));

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	2b00      	cmp	r3, #0
 800b606:	d101      	bne.n	800b60c <HAL_MDMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b608:	2301      	movs	r3, #1
 800b60a:	e070      	b.n	800b6ee <HAL_MDMA_Start_IT+0xfa>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b612:	2b01      	cmp	r3, #1
 800b614:	d101      	bne.n	800b61a <HAL_MDMA_Start_IT+0x26>
 800b616:	2302      	movs	r3, #2
 800b618:	e069      	b.n	800b6ee <HAL_MDMA_Start_IT+0xfa>
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	2201      	movs	r2, #1
 800b61e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b628:	b2db      	uxtb	r3, r3
 800b62a:	2b01      	cmp	r3, #1
 800b62c:	d158      	bne.n	800b6e0 <HAL_MDMA_Start_IT+0xec>
  {
    /* Change MDMA peripheral state */
    hmdma->State = HAL_MDMA_STATE_BUSY;
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	2202      	movs	r2, #2
 800b632:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Initialize the error code */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	2200      	movs	r2, #0
 800b63a:	669a      	str	r2, [r3, #104]	@ 0x68

    /* Disable the peripheral */
    __HAL_MDMA_DISABLE(hmdma);
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	68da      	ldr	r2, [r3, #12]
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	f022 0201 	bic.w	r2, r2, #1
 800b64a:	60da      	str	r2, [r3, #12]

    /* Configure the source, destination address and the data length */
    MDMA_SetConfig(hmdma, SrcAddress, DstAddress, BlockDataLength, BlockCount);
 800b64c:	69bb      	ldr	r3, [r7, #24]
 800b64e:	9300      	str	r3, [sp, #0]
 800b650:	683b      	ldr	r3, [r7, #0]
 800b652:	687a      	ldr	r2, [r7, #4]
 800b654:	68b9      	ldr	r1, [r7, #8]
 800b656:	68f8      	ldr	r0, [r7, #12]
 800b658:	f000 f9c8 	bl	800b9ec <MDMA_SetConfig>

    /* Enable Common interrupts i.e Transfer Error IT and Channel Transfer Complete IT*/
    __HAL_MDMA_ENABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC));
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	68da      	ldr	r2, [r3, #12]
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	f042 0206 	orr.w	r2, r2, #6
 800b66a:	60da      	str	r2, [r3, #12]

    if(hmdma->XferBlockCpltCallback != NULL)
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b670:	2b00      	cmp	r3, #0
 800b672:	d007      	beq.n	800b684 <HAL_MDMA_Start_IT+0x90>
    {
      /* if Block transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BT);
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	68da      	ldr	r2, [r3, #12]
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	f042 0210 	orr.w	r2, r2, #16
 800b682:	60da      	str	r2, [r3, #12]
    }

    if(hmdma->XferRepeatBlockCpltCallback != NULL)
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d007      	beq.n	800b69c <HAL_MDMA_Start_IT+0xa8>
    {
      /* if Repeated Block transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BRT);
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	68da      	ldr	r2, [r3, #12]
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	f042 0208 	orr.w	r2, r2, #8
 800b69a:	60da      	str	r2, [r3, #12]
    }

    if(hmdma->XferBufferCpltCallback != NULL)
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d007      	beq.n	800b6b4 <HAL_MDMA_Start_IT+0xc0>
    {
      /* if buffer transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BFTC);
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	68da      	ldr	r2, [r3, #12]
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	f042 0220 	orr.w	r2, r2, #32
 800b6b2:	60da      	str	r2, [r3, #12]
    }

    /* Enable the Peripheral */
    __HAL_MDMA_ENABLE(hmdma);
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	68da      	ldr	r2, [r3, #12]
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	f042 0201 	orr.w	r2, r2, #1
 800b6c2:	60da      	str	r2, [r3, #12]

    if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	685b      	ldr	r3, [r3, #4]
 800b6c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b6cc:	d10e      	bne.n	800b6ec <HAL_MDMA_Start_IT+0xf8>
    {
      /* activate If SW request mode*/
      hmdma->Instance->CCR |=  MDMA_CCR_SWRQ;
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	68da      	ldr	r2, [r3, #12]
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800b6dc:	60da      	str	r2, [r3, #12]
 800b6de:	e005      	b.n	800b6ec <HAL_MDMA_Start_IT+0xf8>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hmdma);
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	2200      	movs	r2, #0
 800b6e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Return error status */
    return HAL_BUSY;
 800b6e8:	2302      	movs	r3, #2
 800b6ea:	e000      	b.n	800b6ee <HAL_MDMA_Start_IT+0xfa>
  }

  return HAL_OK;
 800b6ec:	2300      	movs	r3, #0
}
 800b6ee:	4618      	mov	r0, r3
 800b6f0:	3710      	adds	r7, #16
 800b6f2:	46bd      	mov	sp, r7
 800b6f4:	bd80      	pop	{r7, pc}

0800b6f6 <HAL_MDMA_Abort_IT>:
  * @param  hmdma  : pointer to a MDMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort_IT(MDMA_HandleTypeDef *hmdma)
{
 800b6f6:	b480      	push	{r7}
 800b6f8:	b083      	sub	sp, #12
 800b6fa:	af00      	add	r7, sp, #0
 800b6fc:	6078      	str	r0, [r7, #4]
  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	2b00      	cmp	r3, #0
 800b702:	d101      	bne.n	800b708 <HAL_MDMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800b704:	2301      	movs	r3, #1
 800b706:	e017      	b.n	800b738 <HAL_MDMA_Abort_IT+0x42>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b70e:	b2db      	uxtb	r3, r3
 800b710:	2b02      	cmp	r3, #2
 800b712:	d004      	beq.n	800b71e <HAL_MDMA_Abort_IT+0x28>
  {
    /* No transfer ongoing */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	2280      	movs	r2, #128	@ 0x80
 800b718:	669a      	str	r2, [r3, #104]	@ 0x68

    return HAL_ERROR;
 800b71a:	2301      	movs	r3, #1
 800b71c:	e00c      	b.n	800b738 <HAL_MDMA_Abort_IT+0x42>
  }
  else
  {
    /* Set Abort State  */
    hmdma->State = HAL_MDMA_STATE_ABORT;
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	2204      	movs	r2, #4
 800b722:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the stream */
    __HAL_MDMA_DISABLE(hmdma);
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	68da      	ldr	r2, [r3, #12]
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	f022 0201 	bic.w	r2, r2, #1
 800b734:	60da      	str	r2, [r3, #12]
  }

  return HAL_OK;
 800b736:	2300      	movs	r3, #0
}
 800b738:	4618      	mov	r0, r3
 800b73a:	370c      	adds	r7, #12
 800b73c:	46bd      	mov	sp, r7
 800b73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b742:	4770      	bx	lr

0800b744 <HAL_MDMA_IRQHandler>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval None
  */
void HAL_MDMA_IRQHandler(MDMA_HandleTypeDef *hmdma)
{
 800b744:	b580      	push	{r7, lr}
 800b746:	b086      	sub	sp, #24
 800b748:	af00      	add	r7, sp, #0
 800b74a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 800b74c:	2300      	movs	r3, #0
 800b74e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800b750:	4b91      	ldr	r3, [pc, #580]	@ (800b998 <HAL_MDMA_IRQHandler+0x254>)
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	4a91      	ldr	r2, [pc, #580]	@ (800b99c <HAL_MDMA_IRQHandler+0x258>)
 800b756:	fba2 2303 	umull	r2, r3, r2, r3
 800b75a:	0a9b      	lsrs	r3, r3, #10
 800b75c:	617b      	str	r3, [r7, #20]

  uint32_t generalIntFlag, errorFlag;

  /* General Interrupt Flag management ****************************************/
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	461a      	mov	r2, r3
 800b764:	4b8e      	ldr	r3, [pc, #568]	@ (800b9a0 <HAL_MDMA_IRQHandler+0x25c>)
 800b766:	4413      	add	r3, r2
 800b768:	099b      	lsrs	r3, r3, #6
 800b76a:	f003 031f 	and.w	r3, r3, #31
 800b76e:	2201      	movs	r2, #1
 800b770:	fa02 f303 	lsl.w	r3, r2, r3
 800b774:	613b      	str	r3, [r7, #16]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 800b776:	f04f 43a4 	mov.w	r3, #1375731712	@ 0x52000000
 800b77a:	681a      	ldr	r2, [r3, #0]
 800b77c:	693b      	ldr	r3, [r7, #16]
 800b77e:	4013      	ands	r3, r2
 800b780:	2b00      	cmp	r3, #0
 800b782:	f000 812d 	beq.w	800b9e0 <HAL_MDMA_IRQHandler+0x29c>
  {
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
  }

  /* Transfer Error Interrupt management ***************************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	f003 0301 	and.w	r3, r3, #1
 800b790:	2b00      	cmp	r3, #0
 800b792:	d054      	beq.n	800b83e <HAL_MDMA_IRQHandler+0xfa>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	68db      	ldr	r3, [r3, #12]
 800b79a:	f003 0302 	and.w	r3, r3, #2
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d04d      	beq.n	800b83e <HAL_MDMA_IRQHandler+0xfa>
    {
      /* Disable the transfer error interrupt */
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	68da      	ldr	r2, [r3, #12]
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	f022 0202 	bic.w	r2, r2, #2
 800b7b0:	60da      	str	r2, [r3, #12]

      /* Get the transfer error source flag */
      errorFlag = hmdma->Instance->CESR;
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	689b      	ldr	r3, [r3, #8]
 800b7b8:	60fb      	str	r3, [r7, #12]

      if((errorFlag & MDMA_CESR_TED) == 0U)
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d106      	bne.n	800b7d2 <HAL_MDMA_IRQHandler+0x8e>
      {
        /* Update error code : Read Transfer error  */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b7c8:	f043 0201 	orr.w	r2, r3, #1
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	669a      	str	r2, [r3, #104]	@ 0x68
 800b7d0:	e005      	b.n	800b7de <HAL_MDMA_IRQHandler+0x9a>
      }
      else
      {
        /* Update error code : Write Transfer error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b7d6:	f043 0202 	orr.w	r2, r3, #2
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_TEMD) != 0U)
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d005      	beq.n	800b7f4 <HAL_MDMA_IRQHandler+0xb0>
      {
        /* Update error code : Error Mask Data */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b7ec:	f043 0204 	orr.w	r2, r3, #4
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_TELD) != 0U)
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d005      	beq.n	800b80a <HAL_MDMA_IRQHandler+0xc6>
      {
        /* Update error code : Error Linked list */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b802:	f043 0208 	orr.w	r2, r3, #8
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_ASE) != 0U)
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b810:	2b00      	cmp	r3, #0
 800b812:	d005      	beq.n	800b820 <HAL_MDMA_IRQHandler+0xdc>
      {
        /* Update error code : Address/Size alignment error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b818:	f043 0210 	orr.w	r2, r3, #16
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_BSE) != 0U)
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b826:	2b00      	cmp	r3, #0
 800b828:	d005      	beq.n	800b836 <HAL_MDMA_IRQHandler+0xf2>
      {
        /* Update error code : Block Size error error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b82e:	f043 0220 	orr.w	r2, r3, #32
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      /* Clear the transfer error flags */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	2201      	movs	r2, #1
 800b83c:	605a      	str	r2, [r3, #4]
    }
  }

  /* Buffer Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	f003 0310 	and.w	r3, r3, #16
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d012      	beq.n	800b872 <HAL_MDMA_IRQHandler+0x12e>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	68db      	ldr	r3, [r3, #12]
 800b852:	f003 0320 	and.w	r3, r3, #32
 800b856:	2b00      	cmp	r3, #0
 800b858:	d00b      	beq.n	800b872 <HAL_MDMA_IRQHandler+0x12e>
    {
      /* Clear the buffer transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	2210      	movs	r2, #16
 800b860:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBufferCpltCallback != NULL)
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b866:	2b00      	cmp	r3, #0
 800b868:	d003      	beq.n	800b872 <HAL_MDMA_IRQHandler+0x12e>
      {
        /* Buffer transfer callback */
        hmdma->XferBufferCpltCallback(hmdma);
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b86e:	6878      	ldr	r0, [r7, #4]
 800b870:	4798      	blx	r3
      }
    }
  }

  /* Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	f003 0308 	and.w	r3, r3, #8
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d012      	beq.n	800b8a6 <HAL_MDMA_IRQHandler+0x162>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	68db      	ldr	r3, [r3, #12]
 800b886:	f003 0310 	and.w	r3, r3, #16
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d00b      	beq.n	800b8a6 <HAL_MDMA_IRQHandler+0x162>
    {
      /* Clear the block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	2208      	movs	r2, #8
 800b894:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBlockCpltCallback != NULL)
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d003      	beq.n	800b8a6 <HAL_MDMA_IRQHandler+0x162>
      {
        /* Block transfer callback */
        hmdma->XferBlockCpltCallback(hmdma);
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b8a2:	6878      	ldr	r0, [r7, #4]
 800b8a4:	4798      	blx	r3
      }
    }
  }

  /* Repeated Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	f003 0304 	and.w	r3, r3, #4
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d012      	beq.n	800b8da <HAL_MDMA_IRQHandler+0x196>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	68db      	ldr	r3, [r3, #12]
 800b8ba:	f003 0308 	and.w	r3, r3, #8
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d00b      	beq.n	800b8da <HAL_MDMA_IRQHandler+0x196>
    {
      /* Clear the repeat block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	2204      	movs	r2, #4
 800b8c8:	605a      	str	r2, [r3, #4]

      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d003      	beq.n	800b8da <HAL_MDMA_IRQHandler+0x196>
      {
        /* Repeated Block transfer callback */
        hmdma->XferRepeatBlockCpltCallback(hmdma);
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b8d6:	6878      	ldr	r0, [r7, #4]
 800b8d8:	4798      	blx	r3
      }
    }
  }

  /* Channel Transfer Complete Interrupt management ***********************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	f003 0302 	and.w	r3, r3, #2
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d039      	beq.n	800b95c <HAL_MDMA_IRQHandler+0x218>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	68db      	ldr	r3, [r3, #12]
 800b8ee:	f003 0304 	and.w	r3, r3, #4
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d032      	beq.n	800b95c <HAL_MDMA_IRQHandler+0x218>
    {
      /* Disable all the transfer interrupts */
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	68da      	ldr	r2, [r3, #12]
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	f022 023e 	bic.w	r2, r2, #62	@ 0x3e
 800b904:	60da      	str	r2, [r3, #12]

      if(HAL_MDMA_STATE_ABORT == hmdma->State)
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b90c:	b2db      	uxtb	r3, r3
 800b90e:	2b04      	cmp	r3, #4
 800b910:	d110      	bne.n	800b934 <HAL_MDMA_IRQHandler+0x1f0>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hmdma);
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	2200      	movs	r2, #0
 800b916:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Change the DMA state */
        hmdma->State = HAL_MDMA_STATE_READY;
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	2201      	movs	r2, #1
 800b91e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        if(hmdma->XferAbortCallback != NULL)
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b926:	2b00      	cmp	r3, #0
 800b928:	d05c      	beq.n	800b9e4 <HAL_MDMA_IRQHandler+0x2a0>
        {
          hmdma->XferAbortCallback(hmdma);
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b92e:	6878      	ldr	r0, [r7, #4]
 800b930:	4798      	blx	r3
        }
        return;
 800b932:	e057      	b.n	800b9e4 <HAL_MDMA_IRQHandler+0x2a0>
      }

      /* Clear the Channel Transfer Complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	2202      	movs	r2, #2
 800b93a:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hmdma);
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	2200      	movs	r2, #0
 800b940:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      /* Change MDMA peripheral state */
      hmdma->State = HAL_MDMA_STATE_READY;
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	2201      	movs	r2, #1
 800b948:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if(hmdma->XferCpltCallback != NULL)
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b950:	2b00      	cmp	r3, #0
 800b952:	d003      	beq.n	800b95c <HAL_MDMA_IRQHandler+0x218>
      {
        /* Channel Transfer Complete callback */
        hmdma->XferCpltCallback(hmdma);
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b958:	6878      	ldr	r0, [r7, #4]
 800b95a:	4798      	blx	r3
      }
    }
  }

  /* manage error case */
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b960:	2b00      	cmp	r3, #0
 800b962:	d040      	beq.n	800b9e6 <HAL_MDMA_IRQHandler+0x2a2>
  {
    hmdma->State = HAL_MDMA_STATE_ABORT;
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	2204      	movs	r2, #4
 800b968:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the channel */
    __HAL_MDMA_DISABLE(hmdma);
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	68da      	ldr	r2, [r3, #12]
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	f022 0201 	bic.w	r2, r2, #1
 800b97a:	60da      	str	r2, [r3, #12]

    do
    {
      if (++count > timeout)
 800b97c:	68bb      	ldr	r3, [r7, #8]
 800b97e:	3301      	adds	r3, #1
 800b980:	60bb      	str	r3, [r7, #8]
 800b982:	697a      	ldr	r2, [r7, #20]
 800b984:	429a      	cmp	r2, r3
 800b986:	d30d      	bcc.n	800b9a4 <HAL_MDMA_IRQHandler+0x260>
      {
        break;
      }
    }
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	68db      	ldr	r3, [r3, #12]
 800b98e:	f003 0301 	and.w	r3, r3, #1
 800b992:	2b00      	cmp	r3, #0
 800b994:	d1f2      	bne.n	800b97c <HAL_MDMA_IRQHandler+0x238>
 800b996:	e006      	b.n	800b9a6 <HAL_MDMA_IRQHandler+0x262>
 800b998:	24000018 	.word	0x24000018
 800b99c:	1b4e81b5 	.word	0x1b4e81b5
 800b9a0:	adffffc0 	.word	0xadffffc0
        break;
 800b9a4:	bf00      	nop

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	2200      	movs	r2, #0
 800b9aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	68db      	ldr	r3, [r3, #12]
 800b9b4:	f003 0301 	and.w	r3, r3, #1
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d004      	beq.n	800b9c6 <HAL_MDMA_IRQHandler+0x282>
    {
      /* Change the MDMA state to error if MDMA disable fails */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	2203      	movs	r2, #3
 800b9c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800b9c4:	e003      	b.n	800b9ce <HAL_MDMA_IRQHandler+0x28a>
    }
    else
    {
      /* Change the MDMA state to Ready if MDMA disable success */
      hmdma->State = HAL_MDMA_STATE_READY;
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	2201      	movs	r2, #1
 800b9ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    }


    if (hmdma->XferErrorCallback != NULL)
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d007      	beq.n	800b9e6 <HAL_MDMA_IRQHandler+0x2a2>
    {
      /* Transfer error callback */
      hmdma->XferErrorCallback(hmdma);
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b9da:	6878      	ldr	r0, [r7, #4]
 800b9dc:	4798      	blx	r3
 800b9de:	e002      	b.n	800b9e6 <HAL_MDMA_IRQHandler+0x2a2>
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
 800b9e0:	bf00      	nop
 800b9e2:	e000      	b.n	800b9e6 <HAL_MDMA_IRQHandler+0x2a2>
        return;
 800b9e4:	bf00      	nop
    }
  }
}
 800b9e6:	3718      	adds	r7, #24
 800b9e8:	46bd      	mov	sp, r7
 800b9ea:	bd80      	pop	{r7, pc}

0800b9ec <MDMA_SetConfig>:
  * @param  BlockDataLength : The length of a block transfer in bytes
  * @param  BlockCount: The number of blocks to be transferred
  * @retval HAL status
  */
static void MDMA_SetConfig(MDMA_HandleTypeDef *hmdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t BlockDataLength, uint32_t BlockCount)
{
 800b9ec:	b480      	push	{r7}
 800b9ee:	b087      	sub	sp, #28
 800b9f0:	af00      	add	r7, sp, #0
 800b9f2:	60f8      	str	r0, [r7, #12]
 800b9f4:	60b9      	str	r1, [r7, #8]
 800b9f6:	607a      	str	r2, [r7, #4]
 800b9f8:	603b      	str	r3, [r7, #0]
  uint32_t addressMask;

  /* Configure the MDMA Channel data length */
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	695a      	ldr	r2, [r3, #20]
 800ba00:	4b31      	ldr	r3, [pc, #196]	@ (800bac8 <MDMA_SetConfig+0xdc>)
 800ba02:	4013      	ands	r3, r2
 800ba04:	683a      	ldr	r2, [r7, #0]
 800ba06:	f3c2 0110 	ubfx	r1, r2, #0, #17
 800ba0a:	68fa      	ldr	r2, [r7, #12]
 800ba0c:	6812      	ldr	r2, [r2, #0]
 800ba0e:	430b      	orrs	r3, r1
 800ba10:	6153      	str	r3, [r2, #20]

  /* Configure the MDMA block repeat count */
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	695b      	ldr	r3, [r3, #20]
 800ba18:	f3c3 0113 	ubfx	r1, r3, #0, #20
 800ba1c:	6a3b      	ldr	r3, [r7, #32]
 800ba1e:	3b01      	subs	r3, #1
 800ba20:	051a      	lsls	r2, r3, #20
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	430a      	orrs	r2, r1
 800ba28:	615a      	str	r2, [r3, #20]

  /* Clear all interrupt flags */
  __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_CISR_BRTIF | MDMA_CISR_BTIF | MDMA_CISR_TCIF);
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	221f      	movs	r2, #31
 800ba30:	605a      	str	r2, [r3, #4]

  /* Configure MDMA Channel destination address */
  hmdma->Instance->CDAR = DstAddress;
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	687a      	ldr	r2, [r7, #4]
 800ba38:	61da      	str	r2, [r3, #28]

  /* Configure MDMA Channel Source address */
  hmdma->Instance->CSAR = SrcAddress;
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	68ba      	ldr	r2, [r7, #8]
 800ba40:	619a      	str	r2, [r3, #24]

  addressMask = SrcAddress & 0xFF000000U;
 800ba42:	68bb      	ldr	r3, [r7, #8]
 800ba44:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800ba48:	617b      	str	r3, [r7, #20]
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 800ba4a:	697b      	ldr	r3, [r7, #20]
 800ba4c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ba50:	d002      	beq.n	800ba58 <MDMA_SetConfig+0x6c>
 800ba52:	697b      	ldr	r3, [r7, #20]
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d108      	bne.n	800ba6a <MDMA_SetConfig+0x7e>
  {
    /*The AHBSbus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_SBUS;
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800ba66:	629a      	str	r2, [r3, #40]	@ 0x28
 800ba68:	e007      	b.n	800ba7a <MDMA_SetConfig+0x8e>
  }
  else
  {
    /*The AXI bus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800ba78:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  addressMask = DstAddress & 0xFF000000U;
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800ba80:	617b      	str	r3, [r7, #20]
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 800ba82:	697b      	ldr	r3, [r7, #20]
 800ba84:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ba88:	d002      	beq.n	800ba90 <MDMA_SetConfig+0xa4>
 800ba8a:	697b      	ldr	r3, [r7, #20]
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d108      	bne.n	800baa2 <MDMA_SetConfig+0xb6>
  {
    /*The AHB bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_DBUS;
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800ba9e:	629a      	str	r2, [r3, #40]	@ 0x28
 800baa0:	e007      	b.n	800bab2 <MDMA_SetConfig+0xc6>
  }
  else
  {
    /*The AXI bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_DBUS);
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800bab0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Set the linked list register to the first node of the list */
  hmdma->Instance->CLAR = (uint32_t)hmdma->FirstLinkedListNodeAddress;
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800babc:	bf00      	nop
 800babe:	371c      	adds	r7, #28
 800bac0:	46bd      	mov	sp, r7
 800bac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac6:	4770      	bx	lr
 800bac8:	fffe0000 	.word	0xfffe0000

0800bacc <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 800bacc:	b480      	push	{r7}
 800bace:	b085      	sub	sp, #20
 800bad0:	af00      	add	r7, sp, #0
 800bad2:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	68d9      	ldr	r1, [r3, #12]
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	691a      	ldr	r2, [r3, #16]
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	430a      	orrs	r2, r1
 800bae2:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	695a      	ldr	r2, [r3, #20]
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	699b      	ldr	r3, [r3, #24]
 800baec:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800baf2:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	6a1b      	ldr	r3, [r3, #32]
 800baf8:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800bafe:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb04:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800bb0a:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bb10:	3b01      	subs	r3, #1
 800bb12:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
 800bb14:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 800bb20:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800bb22:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	685b      	ldr	r3, [r3, #4]
 800bb28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bb2c:	d107      	bne.n	800bb3e <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	691a      	ldr	r2, [r3, #16]
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	f042 4240 	orr.w	r2, r2, #3221225472	@ 0xc0000000
 800bb3c:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	2200      	movs	r2, #0
 800bb44:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	da11      	bge.n	800bb72 <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	695a      	ldr	r2, [r3, #20]
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800bb5c:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bb62:	425b      	negs	r3, r3
 800bb64:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	68fa      	ldr	r2, [r7, #12]
 800bb6c:	b292      	uxth	r2, r2
 800bb6e:	621a      	str	r2, [r3, #32]
 800bb70:	e006      	b.n	800bb80 <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bb76:	461a      	mov	r2, r3
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	b292      	uxth	r2, r2
 800bb7e:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	da15      	bge.n	800bbb4 <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	695a      	ldr	r2, [r3, #20]
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 800bb96:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bb9c:	425b      	negs	r3, r3
 800bb9e:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	6a19      	ldr	r1, [r3, #32]
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	041a      	lsls	r2, r3, #16
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	430a      	orrs	r2, r1
 800bbb0:	621a      	str	r2, [r3, #32]
 800bbb2:	e009      	b.n	800bbc8 <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	6a19      	ldr	r1, [r3, #32]
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bbbe:	041a      	lsls	r2, r3, #16
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	430a      	orrs	r2, r1
 800bbc6:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	685b      	ldr	r3, [r3, #4]
 800bbcc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bbd0:	d006      	beq.n	800bbe0 <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	685a      	ldr	r2, [r3, #4]
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	b2d2      	uxtb	r2, r2
 800bbdc:	629a      	str	r2, [r3, #40]	@ 0x28
 800bbde:	e003      	b.n	800bbe8 <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	2200      	movs	r2, #0
 800bbe6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	2200      	movs	r2, #0
 800bbee:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800bbf0:	bf00      	nop
 800bbf2:	3714      	adds	r7, #20
 800bbf4:	46bd      	mov	sp, r7
 800bbf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbfa:	4770      	bx	lr

0800bbfc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800bbfc:	b580      	push	{r7, lr}
 800bbfe:	b086      	sub	sp, #24
 800bc00:	af02      	add	r7, sp, #8
 800bc02:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d101      	bne.n	800bc0e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800bc0a:	2301      	movs	r3, #1
 800bc0c:	e0fe      	b.n	800be0c <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800bc14:	b2db      	uxtb	r3, r3
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d106      	bne.n	800bc28 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	2200      	movs	r2, #0
 800bc1e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800bc22:	6878      	ldr	r0, [r7, #4]
 800bc24:	f00c f98c 	bl	8017f40 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	2203      	movs	r2, #3
 800bc2c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	4618      	mov	r0, r3
 800bc36:	f008 fb3c 	bl	80142b2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	6818      	ldr	r0, [r3, #0]
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	7c1a      	ldrb	r2, [r3, #16]
 800bc42:	f88d 2000 	strb.w	r2, [sp]
 800bc46:	3304      	adds	r3, #4
 800bc48:	cb0e      	ldmia	r3, {r1, r2, r3}
 800bc4a:	f008 fa0d 	bl	8014068 <USB_CoreInit>
 800bc4e:	4603      	mov	r3, r0
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d005      	beq.n	800bc60 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	2202      	movs	r2, #2
 800bc58:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800bc5c:	2301      	movs	r3, #1
 800bc5e:	e0d5      	b.n	800be0c <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	2100      	movs	r1, #0
 800bc66:	4618      	mov	r0, r3
 800bc68:	f008 fb34 	bl	80142d4 <USB_SetCurrentMode>
 800bc6c:	4603      	mov	r3, r0
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d005      	beq.n	800bc7e <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	2202      	movs	r2, #2
 800bc76:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800bc7a:	2301      	movs	r3, #1
 800bc7c:	e0c6      	b.n	800be0c <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800bc7e:	2300      	movs	r3, #0
 800bc80:	73fb      	strb	r3, [r7, #15]
 800bc82:	e04a      	b.n	800bd1a <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800bc84:	7bfa      	ldrb	r2, [r7, #15]
 800bc86:	6879      	ldr	r1, [r7, #4]
 800bc88:	4613      	mov	r3, r2
 800bc8a:	00db      	lsls	r3, r3, #3
 800bc8c:	4413      	add	r3, r2
 800bc8e:	009b      	lsls	r3, r3, #2
 800bc90:	440b      	add	r3, r1
 800bc92:	3315      	adds	r3, #21
 800bc94:	2201      	movs	r2, #1
 800bc96:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800bc98:	7bfa      	ldrb	r2, [r7, #15]
 800bc9a:	6879      	ldr	r1, [r7, #4]
 800bc9c:	4613      	mov	r3, r2
 800bc9e:	00db      	lsls	r3, r3, #3
 800bca0:	4413      	add	r3, r2
 800bca2:	009b      	lsls	r3, r3, #2
 800bca4:	440b      	add	r3, r1
 800bca6:	3314      	adds	r3, #20
 800bca8:	7bfa      	ldrb	r2, [r7, #15]
 800bcaa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800bcac:	7bfa      	ldrb	r2, [r7, #15]
 800bcae:	7bfb      	ldrb	r3, [r7, #15]
 800bcb0:	b298      	uxth	r0, r3
 800bcb2:	6879      	ldr	r1, [r7, #4]
 800bcb4:	4613      	mov	r3, r2
 800bcb6:	00db      	lsls	r3, r3, #3
 800bcb8:	4413      	add	r3, r2
 800bcba:	009b      	lsls	r3, r3, #2
 800bcbc:	440b      	add	r3, r1
 800bcbe:	332e      	adds	r3, #46	@ 0x2e
 800bcc0:	4602      	mov	r2, r0
 800bcc2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800bcc4:	7bfa      	ldrb	r2, [r7, #15]
 800bcc6:	6879      	ldr	r1, [r7, #4]
 800bcc8:	4613      	mov	r3, r2
 800bcca:	00db      	lsls	r3, r3, #3
 800bccc:	4413      	add	r3, r2
 800bcce:	009b      	lsls	r3, r3, #2
 800bcd0:	440b      	add	r3, r1
 800bcd2:	3318      	adds	r3, #24
 800bcd4:	2200      	movs	r2, #0
 800bcd6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800bcd8:	7bfa      	ldrb	r2, [r7, #15]
 800bcda:	6879      	ldr	r1, [r7, #4]
 800bcdc:	4613      	mov	r3, r2
 800bcde:	00db      	lsls	r3, r3, #3
 800bce0:	4413      	add	r3, r2
 800bce2:	009b      	lsls	r3, r3, #2
 800bce4:	440b      	add	r3, r1
 800bce6:	331c      	adds	r3, #28
 800bce8:	2200      	movs	r2, #0
 800bcea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800bcec:	7bfa      	ldrb	r2, [r7, #15]
 800bcee:	6879      	ldr	r1, [r7, #4]
 800bcf0:	4613      	mov	r3, r2
 800bcf2:	00db      	lsls	r3, r3, #3
 800bcf4:	4413      	add	r3, r2
 800bcf6:	009b      	lsls	r3, r3, #2
 800bcf8:	440b      	add	r3, r1
 800bcfa:	3320      	adds	r3, #32
 800bcfc:	2200      	movs	r2, #0
 800bcfe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800bd00:	7bfa      	ldrb	r2, [r7, #15]
 800bd02:	6879      	ldr	r1, [r7, #4]
 800bd04:	4613      	mov	r3, r2
 800bd06:	00db      	lsls	r3, r3, #3
 800bd08:	4413      	add	r3, r2
 800bd0a:	009b      	lsls	r3, r3, #2
 800bd0c:	440b      	add	r3, r1
 800bd0e:	3324      	adds	r3, #36	@ 0x24
 800bd10:	2200      	movs	r2, #0
 800bd12:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800bd14:	7bfb      	ldrb	r3, [r7, #15]
 800bd16:	3301      	adds	r3, #1
 800bd18:	73fb      	strb	r3, [r7, #15]
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	791b      	ldrb	r3, [r3, #4]
 800bd1e:	7bfa      	ldrb	r2, [r7, #15]
 800bd20:	429a      	cmp	r2, r3
 800bd22:	d3af      	bcc.n	800bc84 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800bd24:	2300      	movs	r3, #0
 800bd26:	73fb      	strb	r3, [r7, #15]
 800bd28:	e044      	b.n	800bdb4 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800bd2a:	7bfa      	ldrb	r2, [r7, #15]
 800bd2c:	6879      	ldr	r1, [r7, #4]
 800bd2e:	4613      	mov	r3, r2
 800bd30:	00db      	lsls	r3, r3, #3
 800bd32:	4413      	add	r3, r2
 800bd34:	009b      	lsls	r3, r3, #2
 800bd36:	440b      	add	r3, r1
 800bd38:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800bd3c:	2200      	movs	r2, #0
 800bd3e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800bd40:	7bfa      	ldrb	r2, [r7, #15]
 800bd42:	6879      	ldr	r1, [r7, #4]
 800bd44:	4613      	mov	r3, r2
 800bd46:	00db      	lsls	r3, r3, #3
 800bd48:	4413      	add	r3, r2
 800bd4a:	009b      	lsls	r3, r3, #2
 800bd4c:	440b      	add	r3, r1
 800bd4e:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800bd52:	7bfa      	ldrb	r2, [r7, #15]
 800bd54:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800bd56:	7bfa      	ldrb	r2, [r7, #15]
 800bd58:	6879      	ldr	r1, [r7, #4]
 800bd5a:	4613      	mov	r3, r2
 800bd5c:	00db      	lsls	r3, r3, #3
 800bd5e:	4413      	add	r3, r2
 800bd60:	009b      	lsls	r3, r3, #2
 800bd62:	440b      	add	r3, r1
 800bd64:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800bd68:	2200      	movs	r2, #0
 800bd6a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800bd6c:	7bfa      	ldrb	r2, [r7, #15]
 800bd6e:	6879      	ldr	r1, [r7, #4]
 800bd70:	4613      	mov	r3, r2
 800bd72:	00db      	lsls	r3, r3, #3
 800bd74:	4413      	add	r3, r2
 800bd76:	009b      	lsls	r3, r3, #2
 800bd78:	440b      	add	r3, r1
 800bd7a:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800bd7e:	2200      	movs	r2, #0
 800bd80:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800bd82:	7bfa      	ldrb	r2, [r7, #15]
 800bd84:	6879      	ldr	r1, [r7, #4]
 800bd86:	4613      	mov	r3, r2
 800bd88:	00db      	lsls	r3, r3, #3
 800bd8a:	4413      	add	r3, r2
 800bd8c:	009b      	lsls	r3, r3, #2
 800bd8e:	440b      	add	r3, r1
 800bd90:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800bd94:	2200      	movs	r2, #0
 800bd96:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800bd98:	7bfa      	ldrb	r2, [r7, #15]
 800bd9a:	6879      	ldr	r1, [r7, #4]
 800bd9c:	4613      	mov	r3, r2
 800bd9e:	00db      	lsls	r3, r3, #3
 800bda0:	4413      	add	r3, r2
 800bda2:	009b      	lsls	r3, r3, #2
 800bda4:	440b      	add	r3, r1
 800bda6:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800bdaa:	2200      	movs	r2, #0
 800bdac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800bdae:	7bfb      	ldrb	r3, [r7, #15]
 800bdb0:	3301      	adds	r3, #1
 800bdb2:	73fb      	strb	r3, [r7, #15]
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	791b      	ldrb	r3, [r3, #4]
 800bdb8:	7bfa      	ldrb	r2, [r7, #15]
 800bdba:	429a      	cmp	r2, r3
 800bdbc:	d3b5      	bcc.n	800bd2a <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	6818      	ldr	r0, [r3, #0]
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	7c1a      	ldrb	r2, [r3, #16]
 800bdc6:	f88d 2000 	strb.w	r2, [sp]
 800bdca:	3304      	adds	r3, #4
 800bdcc:	cb0e      	ldmia	r3, {r1, r2, r3}
 800bdce:	f008 facd 	bl	801436c <USB_DevInit>
 800bdd2:	4603      	mov	r3, r0
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d005      	beq.n	800bde4 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	2202      	movs	r2, #2
 800bddc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800bde0:	2301      	movs	r3, #1
 800bde2:	e013      	b.n	800be0c <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	2200      	movs	r2, #0
 800bde8:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	2201      	movs	r2, #1
 800bdee:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	7b1b      	ldrb	r3, [r3, #12]
 800bdf6:	2b01      	cmp	r3, #1
 800bdf8:	d102      	bne.n	800be00 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800bdfa:	6878      	ldr	r0, [r7, #4]
 800bdfc:	f001 f96e 	bl	800d0dc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	4618      	mov	r0, r3
 800be06:	f009 fb10 	bl	801542a <USB_DevDisconnect>

  return HAL_OK;
 800be0a:	2300      	movs	r3, #0
}
 800be0c:	4618      	mov	r0, r3
 800be0e:	3710      	adds	r7, #16
 800be10:	46bd      	mov	sp, r7
 800be12:	bd80      	pop	{r7, pc}

0800be14 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800be14:	b580      	push	{r7, lr}
 800be16:	b084      	sub	sp, #16
 800be18:	af00      	add	r7, sp, #0
 800be1a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800be28:	2b01      	cmp	r3, #1
 800be2a:	d101      	bne.n	800be30 <HAL_PCD_Start+0x1c>
 800be2c:	2302      	movs	r3, #2
 800be2e:	e022      	b.n	800be76 <HAL_PCD_Start+0x62>
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	2201      	movs	r2, #1
 800be34:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	68db      	ldr	r3, [r3, #12]
 800be3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800be40:	2b00      	cmp	r3, #0
 800be42:	d009      	beq.n	800be58 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800be48:	2b01      	cmp	r3, #1
 800be4a:	d105      	bne.n	800be58 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be50:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	4618      	mov	r0, r3
 800be5e:	f008 fa17 	bl	8014290 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	4618      	mov	r0, r3
 800be68:	f009 fabe 	bl	80153e8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	2200      	movs	r2, #0
 800be70:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800be74:	2300      	movs	r3, #0
}
 800be76:	4618      	mov	r0, r3
 800be78:	3710      	adds	r7, #16
 800be7a:	46bd      	mov	sp, r7
 800be7c:	bd80      	pop	{r7, pc}

0800be7e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800be7e:	b590      	push	{r4, r7, lr}
 800be80:	b08d      	sub	sp, #52	@ 0x34
 800be82:	af00      	add	r7, sp, #0
 800be84:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be8c:	6a3b      	ldr	r3, [r7, #32]
 800be8e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	4618      	mov	r0, r3
 800be96:	f009 fb7c 	bl	8015592 <USB_GetMode>
 800be9a:	4603      	mov	r3, r0
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	f040 84b9 	bne.w	800c814 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	4618      	mov	r0, r3
 800bea8:	f009 fae0 	bl	801546c <USB_ReadInterrupts>
 800beac:	4603      	mov	r3, r0
 800beae:	2b00      	cmp	r3, #0
 800beb0:	f000 84af 	beq.w	800c812 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800beb4:	69fb      	ldr	r3, [r7, #28]
 800beb6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800beba:	689b      	ldr	r3, [r3, #8]
 800bebc:	0a1b      	lsrs	r3, r3, #8
 800bebe:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	4618      	mov	r0, r3
 800bece:	f009 facd 	bl	801546c <USB_ReadInterrupts>
 800bed2:	4603      	mov	r3, r0
 800bed4:	f003 0302 	and.w	r3, r3, #2
 800bed8:	2b02      	cmp	r3, #2
 800beda:	d107      	bne.n	800beec <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	695a      	ldr	r2, [r3, #20]
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	f002 0202 	and.w	r2, r2, #2
 800beea:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	4618      	mov	r0, r3
 800bef2:	f009 fabb 	bl	801546c <USB_ReadInterrupts>
 800bef6:	4603      	mov	r3, r0
 800bef8:	f003 0310 	and.w	r3, r3, #16
 800befc:	2b10      	cmp	r3, #16
 800befe:	d161      	bne.n	800bfc4 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	699a      	ldr	r2, [r3, #24]
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	f022 0210 	bic.w	r2, r2, #16
 800bf0e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800bf10:	6a3b      	ldr	r3, [r7, #32]
 800bf12:	6a1b      	ldr	r3, [r3, #32]
 800bf14:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800bf16:	69bb      	ldr	r3, [r7, #24]
 800bf18:	f003 020f 	and.w	r2, r3, #15
 800bf1c:	4613      	mov	r3, r2
 800bf1e:	00db      	lsls	r3, r3, #3
 800bf20:	4413      	add	r3, r2
 800bf22:	009b      	lsls	r3, r3, #2
 800bf24:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800bf28:	687a      	ldr	r2, [r7, #4]
 800bf2a:	4413      	add	r3, r2
 800bf2c:	3304      	adds	r3, #4
 800bf2e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800bf30:	69bb      	ldr	r3, [r7, #24]
 800bf32:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800bf36:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800bf3a:	d124      	bne.n	800bf86 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800bf3c:	69ba      	ldr	r2, [r7, #24]
 800bf3e:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800bf42:	4013      	ands	r3, r2
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d035      	beq.n	800bfb4 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800bf48:	697b      	ldr	r3, [r7, #20]
 800bf4a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800bf4c:	69bb      	ldr	r3, [r7, #24]
 800bf4e:	091b      	lsrs	r3, r3, #4
 800bf50:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800bf52:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bf56:	b29b      	uxth	r3, r3
 800bf58:	461a      	mov	r2, r3
 800bf5a:	6a38      	ldr	r0, [r7, #32]
 800bf5c:	f009 f8f2 	bl	8015144 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800bf60:	697b      	ldr	r3, [r7, #20]
 800bf62:	68da      	ldr	r2, [r3, #12]
 800bf64:	69bb      	ldr	r3, [r7, #24]
 800bf66:	091b      	lsrs	r3, r3, #4
 800bf68:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bf6c:	441a      	add	r2, r3
 800bf6e:	697b      	ldr	r3, [r7, #20]
 800bf70:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800bf72:	697b      	ldr	r3, [r7, #20]
 800bf74:	695a      	ldr	r2, [r3, #20]
 800bf76:	69bb      	ldr	r3, [r7, #24]
 800bf78:	091b      	lsrs	r3, r3, #4
 800bf7a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bf7e:	441a      	add	r2, r3
 800bf80:	697b      	ldr	r3, [r7, #20]
 800bf82:	615a      	str	r2, [r3, #20]
 800bf84:	e016      	b.n	800bfb4 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800bf86:	69bb      	ldr	r3, [r7, #24]
 800bf88:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800bf8c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800bf90:	d110      	bne.n	800bfb4 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800bf98:	2208      	movs	r2, #8
 800bf9a:	4619      	mov	r1, r3
 800bf9c:	6a38      	ldr	r0, [r7, #32]
 800bf9e:	f009 f8d1 	bl	8015144 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800bfa2:	697b      	ldr	r3, [r7, #20]
 800bfa4:	695a      	ldr	r2, [r3, #20]
 800bfa6:	69bb      	ldr	r3, [r7, #24]
 800bfa8:	091b      	lsrs	r3, r3, #4
 800bfaa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bfae:	441a      	add	r2, r3
 800bfb0:	697b      	ldr	r3, [r7, #20]
 800bfb2:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	699a      	ldr	r2, [r3, #24]
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	f042 0210 	orr.w	r2, r2, #16
 800bfc2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	4618      	mov	r0, r3
 800bfca:	f009 fa4f 	bl	801546c <USB_ReadInterrupts>
 800bfce:	4603      	mov	r3, r0
 800bfd0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800bfd4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800bfd8:	f040 80a7 	bne.w	800c12a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800bfdc:	2300      	movs	r3, #0
 800bfde:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	4618      	mov	r0, r3
 800bfe6:	f009 fa54 	bl	8015492 <USB_ReadDevAllOutEpInterrupt>
 800bfea:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800bfec:	e099      	b.n	800c122 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800bfee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bff0:	f003 0301 	and.w	r3, r3, #1
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	f000 808e 	beq.w	800c116 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c000:	b2d2      	uxtb	r2, r2
 800c002:	4611      	mov	r1, r2
 800c004:	4618      	mov	r0, r3
 800c006:	f009 fa78 	bl	80154fa <USB_ReadDevOutEPInterrupt>
 800c00a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800c00c:	693b      	ldr	r3, [r7, #16]
 800c00e:	f003 0301 	and.w	r3, r3, #1
 800c012:	2b00      	cmp	r3, #0
 800c014:	d00c      	beq.n	800c030 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800c016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c018:	015a      	lsls	r2, r3, #5
 800c01a:	69fb      	ldr	r3, [r7, #28]
 800c01c:	4413      	add	r3, r2
 800c01e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c022:	461a      	mov	r2, r3
 800c024:	2301      	movs	r3, #1
 800c026:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800c028:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c02a:	6878      	ldr	r0, [r7, #4]
 800c02c:	f000 fed0 	bl	800cdd0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800c030:	693b      	ldr	r3, [r7, #16]
 800c032:	f003 0308 	and.w	r3, r3, #8
 800c036:	2b00      	cmp	r3, #0
 800c038:	d00c      	beq.n	800c054 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800c03a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c03c:	015a      	lsls	r2, r3, #5
 800c03e:	69fb      	ldr	r3, [r7, #28]
 800c040:	4413      	add	r3, r2
 800c042:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c046:	461a      	mov	r2, r3
 800c048:	2308      	movs	r3, #8
 800c04a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800c04c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c04e:	6878      	ldr	r0, [r7, #4]
 800c050:	f000 ffa6 	bl	800cfa0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800c054:	693b      	ldr	r3, [r7, #16]
 800c056:	f003 0310 	and.w	r3, r3, #16
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d008      	beq.n	800c070 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800c05e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c060:	015a      	lsls	r2, r3, #5
 800c062:	69fb      	ldr	r3, [r7, #28]
 800c064:	4413      	add	r3, r2
 800c066:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c06a:	461a      	mov	r2, r3
 800c06c:	2310      	movs	r3, #16
 800c06e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800c070:	693b      	ldr	r3, [r7, #16]
 800c072:	f003 0302 	and.w	r3, r3, #2
 800c076:	2b00      	cmp	r3, #0
 800c078:	d030      	beq.n	800c0dc <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800c07a:	6a3b      	ldr	r3, [r7, #32]
 800c07c:	695b      	ldr	r3, [r3, #20]
 800c07e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c082:	2b80      	cmp	r3, #128	@ 0x80
 800c084:	d109      	bne.n	800c09a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800c086:	69fb      	ldr	r3, [r7, #28]
 800c088:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c08c:	685b      	ldr	r3, [r3, #4]
 800c08e:	69fa      	ldr	r2, [r7, #28]
 800c090:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c094:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800c098:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800c09a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c09c:	4613      	mov	r3, r2
 800c09e:	00db      	lsls	r3, r3, #3
 800c0a0:	4413      	add	r3, r2
 800c0a2:	009b      	lsls	r3, r3, #2
 800c0a4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800c0a8:	687a      	ldr	r2, [r7, #4]
 800c0aa:	4413      	add	r3, r2
 800c0ac:	3304      	adds	r3, #4
 800c0ae:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800c0b0:	697b      	ldr	r3, [r7, #20]
 800c0b2:	78db      	ldrb	r3, [r3, #3]
 800c0b4:	2b01      	cmp	r3, #1
 800c0b6:	d108      	bne.n	800c0ca <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800c0b8:	697b      	ldr	r3, [r7, #20]
 800c0ba:	2200      	movs	r2, #0
 800c0bc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800c0be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0c0:	b2db      	uxtb	r3, r3
 800c0c2:	4619      	mov	r1, r3
 800c0c4:	6878      	ldr	r0, [r7, #4]
 800c0c6:	f00c f861 	bl	801818c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800c0ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0cc:	015a      	lsls	r2, r3, #5
 800c0ce:	69fb      	ldr	r3, [r7, #28]
 800c0d0:	4413      	add	r3, r2
 800c0d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c0d6:	461a      	mov	r2, r3
 800c0d8:	2302      	movs	r3, #2
 800c0da:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800c0dc:	693b      	ldr	r3, [r7, #16]
 800c0de:	f003 0320 	and.w	r3, r3, #32
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d008      	beq.n	800c0f8 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800c0e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0e8:	015a      	lsls	r2, r3, #5
 800c0ea:	69fb      	ldr	r3, [r7, #28]
 800c0ec:	4413      	add	r3, r2
 800c0ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c0f2:	461a      	mov	r2, r3
 800c0f4:	2320      	movs	r3, #32
 800c0f6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800c0f8:	693b      	ldr	r3, [r7, #16]
 800c0fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d009      	beq.n	800c116 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800c102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c104:	015a      	lsls	r2, r3, #5
 800c106:	69fb      	ldr	r3, [r7, #28]
 800c108:	4413      	add	r3, r2
 800c10a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c10e:	461a      	mov	r2, r3
 800c110:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800c114:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800c116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c118:	3301      	adds	r3, #1
 800c11a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800c11c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c11e:	085b      	lsrs	r3, r3, #1
 800c120:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800c122:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c124:	2b00      	cmp	r3, #0
 800c126:	f47f af62 	bne.w	800bfee <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	4618      	mov	r0, r3
 800c130:	f009 f99c 	bl	801546c <USB_ReadInterrupts>
 800c134:	4603      	mov	r3, r0
 800c136:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800c13a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800c13e:	f040 80db 	bne.w	800c2f8 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	4618      	mov	r0, r3
 800c148:	f009 f9bd 	bl	80154c6 <USB_ReadDevAllInEpInterrupt>
 800c14c:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800c14e:	2300      	movs	r3, #0
 800c150:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800c152:	e0cd      	b.n	800c2f0 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800c154:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c156:	f003 0301 	and.w	r3, r3, #1
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	f000 80c2 	beq.w	800c2e4 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c166:	b2d2      	uxtb	r2, r2
 800c168:	4611      	mov	r1, r2
 800c16a:	4618      	mov	r0, r3
 800c16c:	f009 f9e3 	bl	8015536 <USB_ReadDevInEPInterrupt>
 800c170:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800c172:	693b      	ldr	r3, [r7, #16]
 800c174:	f003 0301 	and.w	r3, r3, #1
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d057      	beq.n	800c22c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800c17c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c17e:	f003 030f 	and.w	r3, r3, #15
 800c182:	2201      	movs	r2, #1
 800c184:	fa02 f303 	lsl.w	r3, r2, r3
 800c188:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800c18a:	69fb      	ldr	r3, [r7, #28]
 800c18c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c190:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	43db      	mvns	r3, r3
 800c196:	69f9      	ldr	r1, [r7, #28]
 800c198:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c19c:	4013      	ands	r3, r2
 800c19e:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800c1a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1a2:	015a      	lsls	r2, r3, #5
 800c1a4:	69fb      	ldr	r3, [r7, #28]
 800c1a6:	4413      	add	r3, r2
 800c1a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c1ac:	461a      	mov	r2, r3
 800c1ae:	2301      	movs	r3, #1
 800c1b0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	799b      	ldrb	r3, [r3, #6]
 800c1b6:	2b01      	cmp	r3, #1
 800c1b8:	d132      	bne.n	800c220 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800c1ba:	6879      	ldr	r1, [r7, #4]
 800c1bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c1be:	4613      	mov	r3, r2
 800c1c0:	00db      	lsls	r3, r3, #3
 800c1c2:	4413      	add	r3, r2
 800c1c4:	009b      	lsls	r3, r3, #2
 800c1c6:	440b      	add	r3, r1
 800c1c8:	3320      	adds	r3, #32
 800c1ca:	6819      	ldr	r1, [r3, #0]
 800c1cc:	6878      	ldr	r0, [r7, #4]
 800c1ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c1d0:	4613      	mov	r3, r2
 800c1d2:	00db      	lsls	r3, r3, #3
 800c1d4:	4413      	add	r3, r2
 800c1d6:	009b      	lsls	r3, r3, #2
 800c1d8:	4403      	add	r3, r0
 800c1da:	331c      	adds	r3, #28
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	4419      	add	r1, r3
 800c1e0:	6878      	ldr	r0, [r7, #4]
 800c1e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c1e4:	4613      	mov	r3, r2
 800c1e6:	00db      	lsls	r3, r3, #3
 800c1e8:	4413      	add	r3, r2
 800c1ea:	009b      	lsls	r3, r3, #2
 800c1ec:	4403      	add	r3, r0
 800c1ee:	3320      	adds	r3, #32
 800c1f0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800c1f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d113      	bne.n	800c220 <HAL_PCD_IRQHandler+0x3a2>
 800c1f8:	6879      	ldr	r1, [r7, #4]
 800c1fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c1fc:	4613      	mov	r3, r2
 800c1fe:	00db      	lsls	r3, r3, #3
 800c200:	4413      	add	r3, r2
 800c202:	009b      	lsls	r3, r3, #2
 800c204:	440b      	add	r3, r1
 800c206:	3324      	adds	r3, #36	@ 0x24
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d108      	bne.n	800c220 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	6818      	ldr	r0, [r3, #0]
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800c218:	461a      	mov	r2, r3
 800c21a:	2101      	movs	r1, #1
 800c21c:	f009 f9ec 	bl	80155f8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800c220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c222:	b2db      	uxtb	r3, r3
 800c224:	4619      	mov	r1, r3
 800c226:	6878      	ldr	r0, [r7, #4]
 800c228:	f00b ff2b 	bl	8018082 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800c22c:	693b      	ldr	r3, [r7, #16]
 800c22e:	f003 0308 	and.w	r3, r3, #8
 800c232:	2b00      	cmp	r3, #0
 800c234:	d008      	beq.n	800c248 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800c236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c238:	015a      	lsls	r2, r3, #5
 800c23a:	69fb      	ldr	r3, [r7, #28]
 800c23c:	4413      	add	r3, r2
 800c23e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c242:	461a      	mov	r2, r3
 800c244:	2308      	movs	r3, #8
 800c246:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800c248:	693b      	ldr	r3, [r7, #16]
 800c24a:	f003 0310 	and.w	r3, r3, #16
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d008      	beq.n	800c264 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800c252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c254:	015a      	lsls	r2, r3, #5
 800c256:	69fb      	ldr	r3, [r7, #28]
 800c258:	4413      	add	r3, r2
 800c25a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c25e:	461a      	mov	r2, r3
 800c260:	2310      	movs	r3, #16
 800c262:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800c264:	693b      	ldr	r3, [r7, #16]
 800c266:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d008      	beq.n	800c280 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800c26e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c270:	015a      	lsls	r2, r3, #5
 800c272:	69fb      	ldr	r3, [r7, #28]
 800c274:	4413      	add	r3, r2
 800c276:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c27a:	461a      	mov	r2, r3
 800c27c:	2340      	movs	r3, #64	@ 0x40
 800c27e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800c280:	693b      	ldr	r3, [r7, #16]
 800c282:	f003 0302 	and.w	r3, r3, #2
 800c286:	2b00      	cmp	r3, #0
 800c288:	d023      	beq.n	800c2d2 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800c28a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c28c:	6a38      	ldr	r0, [r7, #32]
 800c28e:	f008 f9cb 	bl	8014628 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800c292:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c294:	4613      	mov	r3, r2
 800c296:	00db      	lsls	r3, r3, #3
 800c298:	4413      	add	r3, r2
 800c29a:	009b      	lsls	r3, r3, #2
 800c29c:	3310      	adds	r3, #16
 800c29e:	687a      	ldr	r2, [r7, #4]
 800c2a0:	4413      	add	r3, r2
 800c2a2:	3304      	adds	r3, #4
 800c2a4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800c2a6:	697b      	ldr	r3, [r7, #20]
 800c2a8:	78db      	ldrb	r3, [r3, #3]
 800c2aa:	2b01      	cmp	r3, #1
 800c2ac:	d108      	bne.n	800c2c0 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800c2ae:	697b      	ldr	r3, [r7, #20]
 800c2b0:	2200      	movs	r2, #0
 800c2b2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800c2b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2b6:	b2db      	uxtb	r3, r3
 800c2b8:	4619      	mov	r1, r3
 800c2ba:	6878      	ldr	r0, [r7, #4]
 800c2bc:	f00b ff78 	bl	80181b0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800c2c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2c2:	015a      	lsls	r2, r3, #5
 800c2c4:	69fb      	ldr	r3, [r7, #28]
 800c2c6:	4413      	add	r3, r2
 800c2c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c2cc:	461a      	mov	r2, r3
 800c2ce:	2302      	movs	r3, #2
 800c2d0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800c2d2:	693b      	ldr	r3, [r7, #16]
 800c2d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d003      	beq.n	800c2e4 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800c2dc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c2de:	6878      	ldr	r0, [r7, #4]
 800c2e0:	f000 fcea 	bl	800ccb8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800c2e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2e6:	3301      	adds	r3, #1
 800c2e8:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800c2ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2ec:	085b      	lsrs	r3, r3, #1
 800c2ee:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800c2f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	f47f af2e 	bne.w	800c154 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	4618      	mov	r0, r3
 800c2fe:	f009 f8b5 	bl	801546c <USB_ReadInterrupts>
 800c302:	4603      	mov	r3, r0
 800c304:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c308:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c30c:	d122      	bne.n	800c354 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800c30e:	69fb      	ldr	r3, [r7, #28]
 800c310:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c314:	685b      	ldr	r3, [r3, #4]
 800c316:	69fa      	ldr	r2, [r7, #28]
 800c318:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c31c:	f023 0301 	bic.w	r3, r3, #1
 800c320:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800c328:	2b01      	cmp	r3, #1
 800c32a:	d108      	bne.n	800c33e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	2200      	movs	r2, #0
 800c330:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800c334:	2100      	movs	r1, #0
 800c336:	6878      	ldr	r0, [r7, #4]
 800c338:	f000 fef4 	bl	800d124 <HAL_PCDEx_LPM_Callback>
 800c33c:	e002      	b.n	800c344 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800c33e:	6878      	ldr	r0, [r7, #4]
 800c340:	f00b ff16 	bl	8018170 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	695a      	ldr	r2, [r3, #20]
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800c352:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	4618      	mov	r0, r3
 800c35a:	f009 f887 	bl	801546c <USB_ReadInterrupts>
 800c35e:	4603      	mov	r3, r0
 800c360:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c364:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c368:	d112      	bne.n	800c390 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800c36a:	69fb      	ldr	r3, [r7, #28]
 800c36c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c370:	689b      	ldr	r3, [r3, #8]
 800c372:	f003 0301 	and.w	r3, r3, #1
 800c376:	2b01      	cmp	r3, #1
 800c378:	d102      	bne.n	800c380 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800c37a:	6878      	ldr	r0, [r7, #4]
 800c37c:	f00b fed2 	bl	8018124 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	695a      	ldr	r2, [r3, #20]
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800c38e:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	4618      	mov	r0, r3
 800c396:	f009 f869 	bl	801546c <USB_ReadInterrupts>
 800c39a:	4603      	mov	r3, r0
 800c39c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c3a0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c3a4:	d121      	bne.n	800c3ea <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	695a      	ldr	r2, [r3, #20]
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 800c3b4:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d111      	bne.n	800c3e4 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	2201      	movs	r2, #1
 800c3c4:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c3ce:	089b      	lsrs	r3, r3, #2
 800c3d0:	f003 020f 	and.w	r2, r3, #15
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800c3da:	2101      	movs	r1, #1
 800c3dc:	6878      	ldr	r0, [r7, #4]
 800c3de:	f000 fea1 	bl	800d124 <HAL_PCDEx_LPM_Callback>
 800c3e2:	e002      	b.n	800c3ea <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800c3e4:	6878      	ldr	r0, [r7, #4]
 800c3e6:	f00b fe9d 	bl	8018124 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	4618      	mov	r0, r3
 800c3f0:	f009 f83c 	bl	801546c <USB_ReadInterrupts>
 800c3f4:	4603      	mov	r3, r0
 800c3f6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800c3fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c3fe:	f040 80b7 	bne.w	800c570 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800c402:	69fb      	ldr	r3, [r7, #28]
 800c404:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c408:	685b      	ldr	r3, [r3, #4]
 800c40a:	69fa      	ldr	r2, [r7, #28]
 800c40c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c410:	f023 0301 	bic.w	r3, r3, #1
 800c414:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	2110      	movs	r1, #16
 800c41c:	4618      	mov	r0, r3
 800c41e:	f008 f903 	bl	8014628 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c422:	2300      	movs	r3, #0
 800c424:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c426:	e046      	b.n	800c4b6 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800c428:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c42a:	015a      	lsls	r2, r3, #5
 800c42c:	69fb      	ldr	r3, [r7, #28]
 800c42e:	4413      	add	r3, r2
 800c430:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c434:	461a      	mov	r2, r3
 800c436:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800c43a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800c43c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c43e:	015a      	lsls	r2, r3, #5
 800c440:	69fb      	ldr	r3, [r7, #28]
 800c442:	4413      	add	r3, r2
 800c444:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c44c:	0151      	lsls	r1, r2, #5
 800c44e:	69fa      	ldr	r2, [r7, #28]
 800c450:	440a      	add	r2, r1
 800c452:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c456:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800c45a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800c45c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c45e:	015a      	lsls	r2, r3, #5
 800c460:	69fb      	ldr	r3, [r7, #28]
 800c462:	4413      	add	r3, r2
 800c464:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c468:	461a      	mov	r2, r3
 800c46a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800c46e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800c470:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c472:	015a      	lsls	r2, r3, #5
 800c474:	69fb      	ldr	r3, [r7, #28]
 800c476:	4413      	add	r3, r2
 800c478:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c480:	0151      	lsls	r1, r2, #5
 800c482:	69fa      	ldr	r2, [r7, #28]
 800c484:	440a      	add	r2, r1
 800c486:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c48a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800c48e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800c490:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c492:	015a      	lsls	r2, r3, #5
 800c494:	69fb      	ldr	r3, [r7, #28]
 800c496:	4413      	add	r3, r2
 800c498:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c4a0:	0151      	lsls	r1, r2, #5
 800c4a2:	69fa      	ldr	r2, [r7, #28]
 800c4a4:	440a      	add	r2, r1
 800c4a6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c4aa:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800c4ae:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c4b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4b2:	3301      	adds	r3, #1
 800c4b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	791b      	ldrb	r3, [r3, #4]
 800c4ba:	461a      	mov	r2, r3
 800c4bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4be:	4293      	cmp	r3, r2
 800c4c0:	d3b2      	bcc.n	800c428 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800c4c2:	69fb      	ldr	r3, [r7, #28]
 800c4c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c4c8:	69db      	ldr	r3, [r3, #28]
 800c4ca:	69fa      	ldr	r2, [r7, #28]
 800c4cc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c4d0:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800c4d4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	7bdb      	ldrb	r3, [r3, #15]
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d016      	beq.n	800c50c <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800c4de:	69fb      	ldr	r3, [r7, #28]
 800c4e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c4e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c4e8:	69fa      	ldr	r2, [r7, #28]
 800c4ea:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c4ee:	f043 030b 	orr.w	r3, r3, #11
 800c4f2:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800c4f6:	69fb      	ldr	r3, [r7, #28]
 800c4f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c4fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c4fe:	69fa      	ldr	r2, [r7, #28]
 800c500:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c504:	f043 030b 	orr.w	r3, r3, #11
 800c508:	6453      	str	r3, [r2, #68]	@ 0x44
 800c50a:	e015      	b.n	800c538 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800c50c:	69fb      	ldr	r3, [r7, #28]
 800c50e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c512:	695a      	ldr	r2, [r3, #20]
 800c514:	69fb      	ldr	r3, [r7, #28]
 800c516:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c51a:	4619      	mov	r1, r3
 800c51c:	f242 032b 	movw	r3, #8235	@ 0x202b
 800c520:	4313      	orrs	r3, r2
 800c522:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800c524:	69fb      	ldr	r3, [r7, #28]
 800c526:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c52a:	691b      	ldr	r3, [r3, #16]
 800c52c:	69fa      	ldr	r2, [r7, #28]
 800c52e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c532:	f043 030b 	orr.w	r3, r3, #11
 800c536:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800c538:	69fb      	ldr	r3, [r7, #28]
 800c53a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	69fa      	ldr	r2, [r7, #28]
 800c542:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c546:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800c54a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	6818      	ldr	r0, [r3, #0]
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800c55a:	461a      	mov	r2, r3
 800c55c:	f009 f84c 	bl	80155f8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	695a      	ldr	r2, [r3, #20]
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800c56e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	4618      	mov	r0, r3
 800c576:	f008 ff79 	bl	801546c <USB_ReadInterrupts>
 800c57a:	4603      	mov	r3, r0
 800c57c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c580:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c584:	d123      	bne.n	800c5ce <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	4618      	mov	r0, r3
 800c58c:	f009 f810 	bl	80155b0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	4618      	mov	r0, r3
 800c596:	f008 f8c0 	bl	801471a <USB_GetDevSpeed>
 800c59a:	4603      	mov	r3, r0
 800c59c:	461a      	mov	r2, r3
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	681c      	ldr	r4, [r3, #0]
 800c5a6:	f001 fd9d 	bl	800e0e4 <HAL_RCC_GetHCLKFreq>
 800c5aa:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800c5b0:	461a      	mov	r2, r3
 800c5b2:	4620      	mov	r0, r4
 800c5b4:	f007 fdca 	bl	801414c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800c5b8:	6878      	ldr	r0, [r7, #4]
 800c5ba:	f00b fd8a 	bl	80180d2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	695a      	ldr	r2, [r3, #20]
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800c5cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	4618      	mov	r0, r3
 800c5d4:	f008 ff4a 	bl	801546c <USB_ReadInterrupts>
 800c5d8:	4603      	mov	r3, r0
 800c5da:	f003 0308 	and.w	r3, r3, #8
 800c5de:	2b08      	cmp	r3, #8
 800c5e0:	d10a      	bne.n	800c5f8 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800c5e2:	6878      	ldr	r0, [r7, #4]
 800c5e4:	f00b fd67 	bl	80180b6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	695a      	ldr	r2, [r3, #20]
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	f002 0208 	and.w	r2, r2, #8
 800c5f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	4618      	mov	r0, r3
 800c5fe:	f008 ff35 	bl	801546c <USB_ReadInterrupts>
 800c602:	4603      	mov	r3, r0
 800c604:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c608:	2b80      	cmp	r3, #128	@ 0x80
 800c60a:	d123      	bne.n	800c654 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800c60c:	6a3b      	ldr	r3, [r7, #32]
 800c60e:	699b      	ldr	r3, [r3, #24]
 800c610:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800c614:	6a3b      	ldr	r3, [r7, #32]
 800c616:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800c618:	2301      	movs	r3, #1
 800c61a:	627b      	str	r3, [r7, #36]	@ 0x24
 800c61c:	e014      	b.n	800c648 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800c61e:	6879      	ldr	r1, [r7, #4]
 800c620:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c622:	4613      	mov	r3, r2
 800c624:	00db      	lsls	r3, r3, #3
 800c626:	4413      	add	r3, r2
 800c628:	009b      	lsls	r3, r3, #2
 800c62a:	440b      	add	r3, r1
 800c62c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800c630:	781b      	ldrb	r3, [r3, #0]
 800c632:	2b01      	cmp	r3, #1
 800c634:	d105      	bne.n	800c642 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800c636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c638:	b2db      	uxtb	r3, r3
 800c63a:	4619      	mov	r1, r3
 800c63c:	6878      	ldr	r0, [r7, #4]
 800c63e:	f000 fb0a 	bl	800cc56 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800c642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c644:	3301      	adds	r3, #1
 800c646:	627b      	str	r3, [r7, #36]	@ 0x24
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	791b      	ldrb	r3, [r3, #4]
 800c64c:	461a      	mov	r2, r3
 800c64e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c650:	4293      	cmp	r3, r2
 800c652:	d3e4      	bcc.n	800c61e <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	4618      	mov	r0, r3
 800c65a:	f008 ff07 	bl	801546c <USB_ReadInterrupts>
 800c65e:	4603      	mov	r3, r0
 800c660:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800c664:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c668:	d13c      	bne.n	800c6e4 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800c66a:	2301      	movs	r3, #1
 800c66c:	627b      	str	r3, [r7, #36]	@ 0x24
 800c66e:	e02b      	b.n	800c6c8 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800c670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c672:	015a      	lsls	r2, r3, #5
 800c674:	69fb      	ldr	r3, [r7, #28]
 800c676:	4413      	add	r3, r2
 800c678:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800c680:	6879      	ldr	r1, [r7, #4]
 800c682:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c684:	4613      	mov	r3, r2
 800c686:	00db      	lsls	r3, r3, #3
 800c688:	4413      	add	r3, r2
 800c68a:	009b      	lsls	r3, r3, #2
 800c68c:	440b      	add	r3, r1
 800c68e:	3318      	adds	r3, #24
 800c690:	781b      	ldrb	r3, [r3, #0]
 800c692:	2b01      	cmp	r3, #1
 800c694:	d115      	bne.n	800c6c2 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800c696:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800c698:	2b00      	cmp	r3, #0
 800c69a:	da12      	bge.n	800c6c2 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800c69c:	6879      	ldr	r1, [r7, #4]
 800c69e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c6a0:	4613      	mov	r3, r2
 800c6a2:	00db      	lsls	r3, r3, #3
 800c6a4:	4413      	add	r3, r2
 800c6a6:	009b      	lsls	r3, r3, #2
 800c6a8:	440b      	add	r3, r1
 800c6aa:	3317      	adds	r3, #23
 800c6ac:	2201      	movs	r2, #1
 800c6ae:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800c6b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6b2:	b2db      	uxtb	r3, r3
 800c6b4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800c6b8:	b2db      	uxtb	r3, r3
 800c6ba:	4619      	mov	r1, r3
 800c6bc:	6878      	ldr	r0, [r7, #4]
 800c6be:	f000 faca 	bl	800cc56 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800c6c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6c4:	3301      	adds	r3, #1
 800c6c6:	627b      	str	r3, [r7, #36]	@ 0x24
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	791b      	ldrb	r3, [r3, #4]
 800c6cc:	461a      	mov	r2, r3
 800c6ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6d0:	4293      	cmp	r3, r2
 800c6d2:	d3cd      	bcc.n	800c670 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	695a      	ldr	r2, [r3, #20]
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800c6e2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	4618      	mov	r0, r3
 800c6ea:	f008 febf 	bl	801546c <USB_ReadInterrupts>
 800c6ee:	4603      	mov	r3, r0
 800c6f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800c6f4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c6f8:	d156      	bne.n	800c7a8 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800c6fa:	2301      	movs	r3, #1
 800c6fc:	627b      	str	r3, [r7, #36]	@ 0x24
 800c6fe:	e045      	b.n	800c78c <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800c700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c702:	015a      	lsls	r2, r3, #5
 800c704:	69fb      	ldr	r3, [r7, #28]
 800c706:	4413      	add	r3, r2
 800c708:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800c710:	6879      	ldr	r1, [r7, #4]
 800c712:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c714:	4613      	mov	r3, r2
 800c716:	00db      	lsls	r3, r3, #3
 800c718:	4413      	add	r3, r2
 800c71a:	009b      	lsls	r3, r3, #2
 800c71c:	440b      	add	r3, r1
 800c71e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800c722:	781b      	ldrb	r3, [r3, #0]
 800c724:	2b01      	cmp	r3, #1
 800c726:	d12e      	bne.n	800c786 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800c728:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	da2b      	bge.n	800c786 <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 800c72e:	69bb      	ldr	r3, [r7, #24]
 800c730:	0c1a      	lsrs	r2, r3, #16
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800c738:	4053      	eors	r3, r2
 800c73a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d121      	bne.n	800c786 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800c742:	6879      	ldr	r1, [r7, #4]
 800c744:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c746:	4613      	mov	r3, r2
 800c748:	00db      	lsls	r3, r3, #3
 800c74a:	4413      	add	r3, r2
 800c74c:	009b      	lsls	r3, r3, #2
 800c74e:	440b      	add	r3, r1
 800c750:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800c754:	2201      	movs	r2, #1
 800c756:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800c758:	6a3b      	ldr	r3, [r7, #32]
 800c75a:	699b      	ldr	r3, [r3, #24]
 800c75c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800c760:	6a3b      	ldr	r3, [r7, #32]
 800c762:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800c764:	6a3b      	ldr	r3, [r7, #32]
 800c766:	695b      	ldr	r3, [r3, #20]
 800c768:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d10a      	bne.n	800c786 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800c770:	69fb      	ldr	r3, [r7, #28]
 800c772:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c776:	685b      	ldr	r3, [r3, #4]
 800c778:	69fa      	ldr	r2, [r7, #28]
 800c77a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c77e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800c782:	6053      	str	r3, [r2, #4]
            break;
 800c784:	e008      	b.n	800c798 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800c786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c788:	3301      	adds	r3, #1
 800c78a:	627b      	str	r3, [r7, #36]	@ 0x24
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	791b      	ldrb	r3, [r3, #4]
 800c790:	461a      	mov	r2, r3
 800c792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c794:	4293      	cmp	r3, r2
 800c796:	d3b3      	bcc.n	800c700 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	695a      	ldr	r2, [r3, #20]
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800c7a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	4618      	mov	r0, r3
 800c7ae:	f008 fe5d 	bl	801546c <USB_ReadInterrupts>
 800c7b2:	4603      	mov	r3, r0
 800c7b4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800c7b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c7bc:	d10a      	bne.n	800c7d4 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800c7be:	6878      	ldr	r0, [r7, #4]
 800c7c0:	f00b fd08 	bl	80181d4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	695a      	ldr	r2, [r3, #20]
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800c7d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	4618      	mov	r0, r3
 800c7da:	f008 fe47 	bl	801546c <USB_ReadInterrupts>
 800c7de:	4603      	mov	r3, r0
 800c7e0:	f003 0304 	and.w	r3, r3, #4
 800c7e4:	2b04      	cmp	r3, #4
 800c7e6:	d115      	bne.n	800c814 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	685b      	ldr	r3, [r3, #4]
 800c7ee:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800c7f0:	69bb      	ldr	r3, [r7, #24]
 800c7f2:	f003 0304 	and.w	r3, r3, #4
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d002      	beq.n	800c800 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800c7fa:	6878      	ldr	r0, [r7, #4]
 800c7fc:	f00b fcf8 	bl	80181f0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	6859      	ldr	r1, [r3, #4]
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	69ba      	ldr	r2, [r7, #24]
 800c80c:	430a      	orrs	r2, r1
 800c80e:	605a      	str	r2, [r3, #4]
 800c810:	e000      	b.n	800c814 <HAL_PCD_IRQHandler+0x996>
      return;
 800c812:	bf00      	nop
    }
  }
}
 800c814:	3734      	adds	r7, #52	@ 0x34
 800c816:	46bd      	mov	sp, r7
 800c818:	bd90      	pop	{r4, r7, pc}

0800c81a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800c81a:	b580      	push	{r7, lr}
 800c81c:	b082      	sub	sp, #8
 800c81e:	af00      	add	r7, sp, #0
 800c820:	6078      	str	r0, [r7, #4]
 800c822:	460b      	mov	r3, r1
 800c824:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800c82c:	2b01      	cmp	r3, #1
 800c82e:	d101      	bne.n	800c834 <HAL_PCD_SetAddress+0x1a>
 800c830:	2302      	movs	r3, #2
 800c832:	e012      	b.n	800c85a <HAL_PCD_SetAddress+0x40>
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	2201      	movs	r2, #1
 800c838:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	78fa      	ldrb	r2, [r7, #3]
 800c840:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	78fa      	ldrb	r2, [r7, #3]
 800c848:	4611      	mov	r1, r2
 800c84a:	4618      	mov	r0, r3
 800c84c:	f008 fda6 	bl	801539c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	2200      	movs	r2, #0
 800c854:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800c858:	2300      	movs	r3, #0
}
 800c85a:	4618      	mov	r0, r3
 800c85c:	3708      	adds	r7, #8
 800c85e:	46bd      	mov	sp, r7
 800c860:	bd80      	pop	{r7, pc}

0800c862 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800c862:	b580      	push	{r7, lr}
 800c864:	b084      	sub	sp, #16
 800c866:	af00      	add	r7, sp, #0
 800c868:	6078      	str	r0, [r7, #4]
 800c86a:	4608      	mov	r0, r1
 800c86c:	4611      	mov	r1, r2
 800c86e:	461a      	mov	r2, r3
 800c870:	4603      	mov	r3, r0
 800c872:	70fb      	strb	r3, [r7, #3]
 800c874:	460b      	mov	r3, r1
 800c876:	803b      	strh	r3, [r7, #0]
 800c878:	4613      	mov	r3, r2
 800c87a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800c87c:	2300      	movs	r3, #0
 800c87e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800c880:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c884:	2b00      	cmp	r3, #0
 800c886:	da0f      	bge.n	800c8a8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c888:	78fb      	ldrb	r3, [r7, #3]
 800c88a:	f003 020f 	and.w	r2, r3, #15
 800c88e:	4613      	mov	r3, r2
 800c890:	00db      	lsls	r3, r3, #3
 800c892:	4413      	add	r3, r2
 800c894:	009b      	lsls	r3, r3, #2
 800c896:	3310      	adds	r3, #16
 800c898:	687a      	ldr	r2, [r7, #4]
 800c89a:	4413      	add	r3, r2
 800c89c:	3304      	adds	r3, #4
 800c89e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	2201      	movs	r2, #1
 800c8a4:	705a      	strb	r2, [r3, #1]
 800c8a6:	e00f      	b.n	800c8c8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c8a8:	78fb      	ldrb	r3, [r7, #3]
 800c8aa:	f003 020f 	and.w	r2, r3, #15
 800c8ae:	4613      	mov	r3, r2
 800c8b0:	00db      	lsls	r3, r3, #3
 800c8b2:	4413      	add	r3, r2
 800c8b4:	009b      	lsls	r3, r3, #2
 800c8b6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800c8ba:	687a      	ldr	r2, [r7, #4]
 800c8bc:	4413      	add	r3, r2
 800c8be:	3304      	adds	r3, #4
 800c8c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	2200      	movs	r2, #0
 800c8c6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800c8c8:	78fb      	ldrb	r3, [r7, #3]
 800c8ca:	f003 030f 	and.w	r3, r3, #15
 800c8ce:	b2da      	uxtb	r2, r3
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800c8d4:	883b      	ldrh	r3, [r7, #0]
 800c8d6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	78ba      	ldrb	r2, [r7, #2]
 800c8e2:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	785b      	ldrb	r3, [r3, #1]
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d004      	beq.n	800c8f6 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	781b      	ldrb	r3, [r3, #0]
 800c8f0:	461a      	mov	r2, r3
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800c8f6:	78bb      	ldrb	r3, [r7, #2]
 800c8f8:	2b02      	cmp	r3, #2
 800c8fa:	d102      	bne.n	800c902 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	2200      	movs	r2, #0
 800c900:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800c908:	2b01      	cmp	r3, #1
 800c90a:	d101      	bne.n	800c910 <HAL_PCD_EP_Open+0xae>
 800c90c:	2302      	movs	r3, #2
 800c90e:	e00e      	b.n	800c92e <HAL_PCD_EP_Open+0xcc>
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	2201      	movs	r2, #1
 800c914:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	68f9      	ldr	r1, [r7, #12]
 800c91e:	4618      	mov	r0, r3
 800c920:	f007 ff20 	bl	8014764 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	2200      	movs	r2, #0
 800c928:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800c92c:	7afb      	ldrb	r3, [r7, #11]
}
 800c92e:	4618      	mov	r0, r3
 800c930:	3710      	adds	r7, #16
 800c932:	46bd      	mov	sp, r7
 800c934:	bd80      	pop	{r7, pc}

0800c936 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800c936:	b580      	push	{r7, lr}
 800c938:	b084      	sub	sp, #16
 800c93a:	af00      	add	r7, sp, #0
 800c93c:	6078      	str	r0, [r7, #4]
 800c93e:	460b      	mov	r3, r1
 800c940:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800c942:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c946:	2b00      	cmp	r3, #0
 800c948:	da0f      	bge.n	800c96a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c94a:	78fb      	ldrb	r3, [r7, #3]
 800c94c:	f003 020f 	and.w	r2, r3, #15
 800c950:	4613      	mov	r3, r2
 800c952:	00db      	lsls	r3, r3, #3
 800c954:	4413      	add	r3, r2
 800c956:	009b      	lsls	r3, r3, #2
 800c958:	3310      	adds	r3, #16
 800c95a:	687a      	ldr	r2, [r7, #4]
 800c95c:	4413      	add	r3, r2
 800c95e:	3304      	adds	r3, #4
 800c960:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	2201      	movs	r2, #1
 800c966:	705a      	strb	r2, [r3, #1]
 800c968:	e00f      	b.n	800c98a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c96a:	78fb      	ldrb	r3, [r7, #3]
 800c96c:	f003 020f 	and.w	r2, r3, #15
 800c970:	4613      	mov	r3, r2
 800c972:	00db      	lsls	r3, r3, #3
 800c974:	4413      	add	r3, r2
 800c976:	009b      	lsls	r3, r3, #2
 800c978:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800c97c:	687a      	ldr	r2, [r7, #4]
 800c97e:	4413      	add	r3, r2
 800c980:	3304      	adds	r3, #4
 800c982:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	2200      	movs	r2, #0
 800c988:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800c98a:	78fb      	ldrb	r3, [r7, #3]
 800c98c:	f003 030f 	and.w	r3, r3, #15
 800c990:	b2da      	uxtb	r2, r3
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800c99c:	2b01      	cmp	r3, #1
 800c99e:	d101      	bne.n	800c9a4 <HAL_PCD_EP_Close+0x6e>
 800c9a0:	2302      	movs	r3, #2
 800c9a2:	e00e      	b.n	800c9c2 <HAL_PCD_EP_Close+0x8c>
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	2201      	movs	r2, #1
 800c9a8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	68f9      	ldr	r1, [r7, #12]
 800c9b2:	4618      	mov	r0, r3
 800c9b4:	f007 ff5e 	bl	8014874 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	2200      	movs	r2, #0
 800c9bc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800c9c0:	2300      	movs	r3, #0
}
 800c9c2:	4618      	mov	r0, r3
 800c9c4:	3710      	adds	r7, #16
 800c9c6:	46bd      	mov	sp, r7
 800c9c8:	bd80      	pop	{r7, pc}

0800c9ca <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800c9ca:	b580      	push	{r7, lr}
 800c9cc:	b086      	sub	sp, #24
 800c9ce:	af00      	add	r7, sp, #0
 800c9d0:	60f8      	str	r0, [r7, #12]
 800c9d2:	607a      	str	r2, [r7, #4]
 800c9d4:	603b      	str	r3, [r7, #0]
 800c9d6:	460b      	mov	r3, r1
 800c9d8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c9da:	7afb      	ldrb	r3, [r7, #11]
 800c9dc:	f003 020f 	and.w	r2, r3, #15
 800c9e0:	4613      	mov	r3, r2
 800c9e2:	00db      	lsls	r3, r3, #3
 800c9e4:	4413      	add	r3, r2
 800c9e6:	009b      	lsls	r3, r3, #2
 800c9e8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800c9ec:	68fa      	ldr	r2, [r7, #12]
 800c9ee:	4413      	add	r3, r2
 800c9f0:	3304      	adds	r3, #4
 800c9f2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800c9f4:	697b      	ldr	r3, [r7, #20]
 800c9f6:	687a      	ldr	r2, [r7, #4]
 800c9f8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800c9fa:	697b      	ldr	r3, [r7, #20]
 800c9fc:	683a      	ldr	r2, [r7, #0]
 800c9fe:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800ca00:	697b      	ldr	r3, [r7, #20]
 800ca02:	2200      	movs	r2, #0
 800ca04:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800ca06:	697b      	ldr	r3, [r7, #20]
 800ca08:	2200      	movs	r2, #0
 800ca0a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800ca0c:	7afb      	ldrb	r3, [r7, #11]
 800ca0e:	f003 030f 	and.w	r3, r3, #15
 800ca12:	b2da      	uxtb	r2, r3
 800ca14:	697b      	ldr	r3, [r7, #20]
 800ca16:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	799b      	ldrb	r3, [r3, #6]
 800ca1c:	2b01      	cmp	r3, #1
 800ca1e:	d102      	bne.n	800ca26 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800ca20:	687a      	ldr	r2, [r7, #4]
 800ca22:	697b      	ldr	r3, [r7, #20]
 800ca24:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	6818      	ldr	r0, [r3, #0]
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	799b      	ldrb	r3, [r3, #6]
 800ca2e:	461a      	mov	r2, r3
 800ca30:	6979      	ldr	r1, [r7, #20]
 800ca32:	f007 fffb 	bl	8014a2c <USB_EPStartXfer>

  return HAL_OK;
 800ca36:	2300      	movs	r3, #0
}
 800ca38:	4618      	mov	r0, r3
 800ca3a:	3718      	adds	r7, #24
 800ca3c:	46bd      	mov	sp, r7
 800ca3e:	bd80      	pop	{r7, pc}

0800ca40 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800ca40:	b480      	push	{r7}
 800ca42:	b083      	sub	sp, #12
 800ca44:	af00      	add	r7, sp, #0
 800ca46:	6078      	str	r0, [r7, #4]
 800ca48:	460b      	mov	r3, r1
 800ca4a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800ca4c:	78fb      	ldrb	r3, [r7, #3]
 800ca4e:	f003 020f 	and.w	r2, r3, #15
 800ca52:	6879      	ldr	r1, [r7, #4]
 800ca54:	4613      	mov	r3, r2
 800ca56:	00db      	lsls	r3, r3, #3
 800ca58:	4413      	add	r3, r2
 800ca5a:	009b      	lsls	r3, r3, #2
 800ca5c:	440b      	add	r3, r1
 800ca5e:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800ca62:	681b      	ldr	r3, [r3, #0]
}
 800ca64:	4618      	mov	r0, r3
 800ca66:	370c      	adds	r7, #12
 800ca68:	46bd      	mov	sp, r7
 800ca6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca6e:	4770      	bx	lr

0800ca70 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800ca70:	b580      	push	{r7, lr}
 800ca72:	b086      	sub	sp, #24
 800ca74:	af00      	add	r7, sp, #0
 800ca76:	60f8      	str	r0, [r7, #12]
 800ca78:	607a      	str	r2, [r7, #4]
 800ca7a:	603b      	str	r3, [r7, #0]
 800ca7c:	460b      	mov	r3, r1
 800ca7e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ca80:	7afb      	ldrb	r3, [r7, #11]
 800ca82:	f003 020f 	and.w	r2, r3, #15
 800ca86:	4613      	mov	r3, r2
 800ca88:	00db      	lsls	r3, r3, #3
 800ca8a:	4413      	add	r3, r2
 800ca8c:	009b      	lsls	r3, r3, #2
 800ca8e:	3310      	adds	r3, #16
 800ca90:	68fa      	ldr	r2, [r7, #12]
 800ca92:	4413      	add	r3, r2
 800ca94:	3304      	adds	r3, #4
 800ca96:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800ca98:	697b      	ldr	r3, [r7, #20]
 800ca9a:	687a      	ldr	r2, [r7, #4]
 800ca9c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800ca9e:	697b      	ldr	r3, [r7, #20]
 800caa0:	683a      	ldr	r2, [r7, #0]
 800caa2:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800caa4:	697b      	ldr	r3, [r7, #20]
 800caa6:	2200      	movs	r2, #0
 800caa8:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800caaa:	697b      	ldr	r3, [r7, #20]
 800caac:	2201      	movs	r2, #1
 800caae:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800cab0:	7afb      	ldrb	r3, [r7, #11]
 800cab2:	f003 030f 	and.w	r3, r3, #15
 800cab6:	b2da      	uxtb	r2, r3
 800cab8:	697b      	ldr	r3, [r7, #20]
 800caba:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	799b      	ldrb	r3, [r3, #6]
 800cac0:	2b01      	cmp	r3, #1
 800cac2:	d102      	bne.n	800caca <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800cac4:	687a      	ldr	r2, [r7, #4]
 800cac6:	697b      	ldr	r3, [r7, #20]
 800cac8:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	6818      	ldr	r0, [r3, #0]
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	799b      	ldrb	r3, [r3, #6]
 800cad2:	461a      	mov	r2, r3
 800cad4:	6979      	ldr	r1, [r7, #20]
 800cad6:	f007 ffa9 	bl	8014a2c <USB_EPStartXfer>

  return HAL_OK;
 800cada:	2300      	movs	r3, #0
}
 800cadc:	4618      	mov	r0, r3
 800cade:	3718      	adds	r7, #24
 800cae0:	46bd      	mov	sp, r7
 800cae2:	bd80      	pop	{r7, pc}

0800cae4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800cae4:	b580      	push	{r7, lr}
 800cae6:	b084      	sub	sp, #16
 800cae8:	af00      	add	r7, sp, #0
 800caea:	6078      	str	r0, [r7, #4]
 800caec:	460b      	mov	r3, r1
 800caee:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800caf0:	78fb      	ldrb	r3, [r7, #3]
 800caf2:	f003 030f 	and.w	r3, r3, #15
 800caf6:	687a      	ldr	r2, [r7, #4]
 800caf8:	7912      	ldrb	r2, [r2, #4]
 800cafa:	4293      	cmp	r3, r2
 800cafc:	d901      	bls.n	800cb02 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800cafe:	2301      	movs	r3, #1
 800cb00:	e04f      	b.n	800cba2 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800cb02:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	da0f      	bge.n	800cb2a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800cb0a:	78fb      	ldrb	r3, [r7, #3]
 800cb0c:	f003 020f 	and.w	r2, r3, #15
 800cb10:	4613      	mov	r3, r2
 800cb12:	00db      	lsls	r3, r3, #3
 800cb14:	4413      	add	r3, r2
 800cb16:	009b      	lsls	r3, r3, #2
 800cb18:	3310      	adds	r3, #16
 800cb1a:	687a      	ldr	r2, [r7, #4]
 800cb1c:	4413      	add	r3, r2
 800cb1e:	3304      	adds	r3, #4
 800cb20:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	2201      	movs	r2, #1
 800cb26:	705a      	strb	r2, [r3, #1]
 800cb28:	e00d      	b.n	800cb46 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800cb2a:	78fa      	ldrb	r2, [r7, #3]
 800cb2c:	4613      	mov	r3, r2
 800cb2e:	00db      	lsls	r3, r3, #3
 800cb30:	4413      	add	r3, r2
 800cb32:	009b      	lsls	r3, r3, #2
 800cb34:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800cb38:	687a      	ldr	r2, [r7, #4]
 800cb3a:	4413      	add	r3, r2
 800cb3c:	3304      	adds	r3, #4
 800cb3e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	2200      	movs	r2, #0
 800cb44:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800cb46:	68fb      	ldr	r3, [r7, #12]
 800cb48:	2201      	movs	r2, #1
 800cb4a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800cb4c:	78fb      	ldrb	r3, [r7, #3]
 800cb4e:	f003 030f 	and.w	r3, r3, #15
 800cb52:	b2da      	uxtb	r2, r3
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800cb5e:	2b01      	cmp	r3, #1
 800cb60:	d101      	bne.n	800cb66 <HAL_PCD_EP_SetStall+0x82>
 800cb62:	2302      	movs	r3, #2
 800cb64:	e01d      	b.n	800cba2 <HAL_PCD_EP_SetStall+0xbe>
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	2201      	movs	r2, #1
 800cb6a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	68f9      	ldr	r1, [r7, #12]
 800cb74:	4618      	mov	r0, r3
 800cb76:	f008 fb3d 	bl	80151f4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800cb7a:	78fb      	ldrb	r3, [r7, #3]
 800cb7c:	f003 030f 	and.w	r3, r3, #15
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d109      	bne.n	800cb98 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	6818      	ldr	r0, [r3, #0]
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	7999      	ldrb	r1, [r3, #6]
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800cb92:	461a      	mov	r2, r3
 800cb94:	f008 fd30 	bl	80155f8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	2200      	movs	r2, #0
 800cb9c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800cba0:	2300      	movs	r3, #0
}
 800cba2:	4618      	mov	r0, r3
 800cba4:	3710      	adds	r7, #16
 800cba6:	46bd      	mov	sp, r7
 800cba8:	bd80      	pop	{r7, pc}

0800cbaa <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800cbaa:	b580      	push	{r7, lr}
 800cbac:	b084      	sub	sp, #16
 800cbae:	af00      	add	r7, sp, #0
 800cbb0:	6078      	str	r0, [r7, #4]
 800cbb2:	460b      	mov	r3, r1
 800cbb4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800cbb6:	78fb      	ldrb	r3, [r7, #3]
 800cbb8:	f003 030f 	and.w	r3, r3, #15
 800cbbc:	687a      	ldr	r2, [r7, #4]
 800cbbe:	7912      	ldrb	r2, [r2, #4]
 800cbc0:	4293      	cmp	r3, r2
 800cbc2:	d901      	bls.n	800cbc8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800cbc4:	2301      	movs	r3, #1
 800cbc6:	e042      	b.n	800cc4e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800cbc8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	da0f      	bge.n	800cbf0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800cbd0:	78fb      	ldrb	r3, [r7, #3]
 800cbd2:	f003 020f 	and.w	r2, r3, #15
 800cbd6:	4613      	mov	r3, r2
 800cbd8:	00db      	lsls	r3, r3, #3
 800cbda:	4413      	add	r3, r2
 800cbdc:	009b      	lsls	r3, r3, #2
 800cbde:	3310      	adds	r3, #16
 800cbe0:	687a      	ldr	r2, [r7, #4]
 800cbe2:	4413      	add	r3, r2
 800cbe4:	3304      	adds	r3, #4
 800cbe6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	2201      	movs	r2, #1
 800cbec:	705a      	strb	r2, [r3, #1]
 800cbee:	e00f      	b.n	800cc10 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800cbf0:	78fb      	ldrb	r3, [r7, #3]
 800cbf2:	f003 020f 	and.w	r2, r3, #15
 800cbf6:	4613      	mov	r3, r2
 800cbf8:	00db      	lsls	r3, r3, #3
 800cbfa:	4413      	add	r3, r2
 800cbfc:	009b      	lsls	r3, r3, #2
 800cbfe:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800cc02:	687a      	ldr	r2, [r7, #4]
 800cc04:	4413      	add	r3, r2
 800cc06:	3304      	adds	r3, #4
 800cc08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	2200      	movs	r2, #0
 800cc0e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	2200      	movs	r2, #0
 800cc14:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800cc16:	78fb      	ldrb	r3, [r7, #3]
 800cc18:	f003 030f 	and.w	r3, r3, #15
 800cc1c:	b2da      	uxtb	r2, r3
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800cc28:	2b01      	cmp	r3, #1
 800cc2a:	d101      	bne.n	800cc30 <HAL_PCD_EP_ClrStall+0x86>
 800cc2c:	2302      	movs	r3, #2
 800cc2e:	e00e      	b.n	800cc4e <HAL_PCD_EP_ClrStall+0xa4>
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	2201      	movs	r2, #1
 800cc34:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	68f9      	ldr	r1, [r7, #12]
 800cc3e:	4618      	mov	r0, r3
 800cc40:	f008 fb46 	bl	80152d0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	2200      	movs	r2, #0
 800cc48:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800cc4c:	2300      	movs	r3, #0
}
 800cc4e:	4618      	mov	r0, r3
 800cc50:	3710      	adds	r7, #16
 800cc52:	46bd      	mov	sp, r7
 800cc54:	bd80      	pop	{r7, pc}

0800cc56 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800cc56:	b580      	push	{r7, lr}
 800cc58:	b084      	sub	sp, #16
 800cc5a:	af00      	add	r7, sp, #0
 800cc5c:	6078      	str	r0, [r7, #4]
 800cc5e:	460b      	mov	r3, r1
 800cc60:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800cc62:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	da0c      	bge.n	800cc84 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800cc6a:	78fb      	ldrb	r3, [r7, #3]
 800cc6c:	f003 020f 	and.w	r2, r3, #15
 800cc70:	4613      	mov	r3, r2
 800cc72:	00db      	lsls	r3, r3, #3
 800cc74:	4413      	add	r3, r2
 800cc76:	009b      	lsls	r3, r3, #2
 800cc78:	3310      	adds	r3, #16
 800cc7a:	687a      	ldr	r2, [r7, #4]
 800cc7c:	4413      	add	r3, r2
 800cc7e:	3304      	adds	r3, #4
 800cc80:	60fb      	str	r3, [r7, #12]
 800cc82:	e00c      	b.n	800cc9e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800cc84:	78fb      	ldrb	r3, [r7, #3]
 800cc86:	f003 020f 	and.w	r2, r3, #15
 800cc8a:	4613      	mov	r3, r2
 800cc8c:	00db      	lsls	r3, r3, #3
 800cc8e:	4413      	add	r3, r2
 800cc90:	009b      	lsls	r3, r3, #2
 800cc92:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800cc96:	687a      	ldr	r2, [r7, #4]
 800cc98:	4413      	add	r3, r2
 800cc9a:	3304      	adds	r3, #4
 800cc9c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	68f9      	ldr	r1, [r7, #12]
 800cca4:	4618      	mov	r0, r3
 800cca6:	f008 f965 	bl	8014f74 <USB_EPStopXfer>
 800ccaa:	4603      	mov	r3, r0
 800ccac:	72fb      	strb	r3, [r7, #11]

  return ret;
 800ccae:	7afb      	ldrb	r3, [r7, #11]
}
 800ccb0:	4618      	mov	r0, r3
 800ccb2:	3710      	adds	r7, #16
 800ccb4:	46bd      	mov	sp, r7
 800ccb6:	bd80      	pop	{r7, pc}

0800ccb8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800ccb8:	b580      	push	{r7, lr}
 800ccba:	b08a      	sub	sp, #40	@ 0x28
 800ccbc:	af02      	add	r7, sp, #8
 800ccbe:	6078      	str	r0, [r7, #4]
 800ccc0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ccc8:	697b      	ldr	r3, [r7, #20]
 800ccca:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800cccc:	683a      	ldr	r2, [r7, #0]
 800ccce:	4613      	mov	r3, r2
 800ccd0:	00db      	lsls	r3, r3, #3
 800ccd2:	4413      	add	r3, r2
 800ccd4:	009b      	lsls	r3, r3, #2
 800ccd6:	3310      	adds	r3, #16
 800ccd8:	687a      	ldr	r2, [r7, #4]
 800ccda:	4413      	add	r3, r2
 800ccdc:	3304      	adds	r3, #4
 800ccde:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	695a      	ldr	r2, [r3, #20]
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	691b      	ldr	r3, [r3, #16]
 800cce8:	429a      	cmp	r2, r3
 800ccea:	d901      	bls.n	800ccf0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800ccec:	2301      	movs	r3, #1
 800ccee:	e06b      	b.n	800cdc8 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	691a      	ldr	r2, [r3, #16]
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	695b      	ldr	r3, [r3, #20]
 800ccf8:	1ad3      	subs	r3, r2, r3
 800ccfa:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	689b      	ldr	r3, [r3, #8]
 800cd00:	69fa      	ldr	r2, [r7, #28]
 800cd02:	429a      	cmp	r2, r3
 800cd04:	d902      	bls.n	800cd0c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800cd06:	68fb      	ldr	r3, [r7, #12]
 800cd08:	689b      	ldr	r3, [r3, #8]
 800cd0a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800cd0c:	69fb      	ldr	r3, [r7, #28]
 800cd0e:	3303      	adds	r3, #3
 800cd10:	089b      	lsrs	r3, r3, #2
 800cd12:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800cd14:	e02a      	b.n	800cd6c <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	691a      	ldr	r2, [r3, #16]
 800cd1a:	68fb      	ldr	r3, [r7, #12]
 800cd1c:	695b      	ldr	r3, [r3, #20]
 800cd1e:	1ad3      	subs	r3, r2, r3
 800cd20:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800cd22:	68fb      	ldr	r3, [r7, #12]
 800cd24:	689b      	ldr	r3, [r3, #8]
 800cd26:	69fa      	ldr	r2, [r7, #28]
 800cd28:	429a      	cmp	r2, r3
 800cd2a:	d902      	bls.n	800cd32 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	689b      	ldr	r3, [r3, #8]
 800cd30:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800cd32:	69fb      	ldr	r3, [r7, #28]
 800cd34:	3303      	adds	r3, #3
 800cd36:	089b      	lsrs	r3, r3, #2
 800cd38:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	68d9      	ldr	r1, [r3, #12]
 800cd3e:	683b      	ldr	r3, [r7, #0]
 800cd40:	b2da      	uxtb	r2, r3
 800cd42:	69fb      	ldr	r3, [r7, #28]
 800cd44:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800cd4a:	9300      	str	r3, [sp, #0]
 800cd4c:	4603      	mov	r3, r0
 800cd4e:	6978      	ldr	r0, [r7, #20]
 800cd50:	f008 f9ba 	bl	80150c8 <USB_WritePacket>

    ep->xfer_buff  += len;
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	68da      	ldr	r2, [r3, #12]
 800cd58:	69fb      	ldr	r3, [r7, #28]
 800cd5a:	441a      	add	r2, r3
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	695a      	ldr	r2, [r3, #20]
 800cd64:	69fb      	ldr	r3, [r7, #28]
 800cd66:	441a      	add	r2, r3
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800cd6c:	683b      	ldr	r3, [r7, #0]
 800cd6e:	015a      	lsls	r2, r3, #5
 800cd70:	693b      	ldr	r3, [r7, #16]
 800cd72:	4413      	add	r3, r2
 800cd74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cd78:	699b      	ldr	r3, [r3, #24]
 800cd7a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800cd7c:	69ba      	ldr	r2, [r7, #24]
 800cd7e:	429a      	cmp	r2, r3
 800cd80:	d809      	bhi.n	800cd96 <PCD_WriteEmptyTxFifo+0xde>
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	695a      	ldr	r2, [r3, #20]
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800cd8a:	429a      	cmp	r2, r3
 800cd8c:	d203      	bcs.n	800cd96 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	691b      	ldr	r3, [r3, #16]
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d1bf      	bne.n	800cd16 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	691a      	ldr	r2, [r3, #16]
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	695b      	ldr	r3, [r3, #20]
 800cd9e:	429a      	cmp	r2, r3
 800cda0:	d811      	bhi.n	800cdc6 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800cda2:	683b      	ldr	r3, [r7, #0]
 800cda4:	f003 030f 	and.w	r3, r3, #15
 800cda8:	2201      	movs	r2, #1
 800cdaa:	fa02 f303 	lsl.w	r3, r2, r3
 800cdae:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800cdb0:	693b      	ldr	r3, [r7, #16]
 800cdb2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cdb6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cdb8:	68bb      	ldr	r3, [r7, #8]
 800cdba:	43db      	mvns	r3, r3
 800cdbc:	6939      	ldr	r1, [r7, #16]
 800cdbe:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800cdc2:	4013      	ands	r3, r2
 800cdc4:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800cdc6:	2300      	movs	r3, #0
}
 800cdc8:	4618      	mov	r0, r3
 800cdca:	3720      	adds	r7, #32
 800cdcc:	46bd      	mov	sp, r7
 800cdce:	bd80      	pop	{r7, pc}

0800cdd0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800cdd0:	b580      	push	{r7, lr}
 800cdd2:	b088      	sub	sp, #32
 800cdd4:	af00      	add	r7, sp, #0
 800cdd6:	6078      	str	r0, [r7, #4]
 800cdd8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cde0:	69fb      	ldr	r3, [r7, #28]
 800cde2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800cde4:	69fb      	ldr	r3, [r7, #28]
 800cde6:	333c      	adds	r3, #60	@ 0x3c
 800cde8:	3304      	adds	r3, #4
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800cdee:	683b      	ldr	r3, [r7, #0]
 800cdf0:	015a      	lsls	r2, r3, #5
 800cdf2:	69bb      	ldr	r3, [r7, #24]
 800cdf4:	4413      	add	r3, r2
 800cdf6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cdfa:	689b      	ldr	r3, [r3, #8]
 800cdfc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	799b      	ldrb	r3, [r3, #6]
 800ce02:	2b01      	cmp	r3, #1
 800ce04:	d17b      	bne.n	800cefe <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800ce06:	693b      	ldr	r3, [r7, #16]
 800ce08:	f003 0308 	and.w	r3, r3, #8
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d015      	beq.n	800ce3c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800ce10:	697b      	ldr	r3, [r7, #20]
 800ce12:	4a61      	ldr	r2, [pc, #388]	@ (800cf98 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800ce14:	4293      	cmp	r3, r2
 800ce16:	f240 80b9 	bls.w	800cf8c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800ce1a:	693b      	ldr	r3, [r7, #16]
 800ce1c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	f000 80b3 	beq.w	800cf8c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800ce26:	683b      	ldr	r3, [r7, #0]
 800ce28:	015a      	lsls	r2, r3, #5
 800ce2a:	69bb      	ldr	r3, [r7, #24]
 800ce2c:	4413      	add	r3, r2
 800ce2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ce32:	461a      	mov	r2, r3
 800ce34:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ce38:	6093      	str	r3, [r2, #8]
 800ce3a:	e0a7      	b.n	800cf8c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800ce3c:	693b      	ldr	r3, [r7, #16]
 800ce3e:	f003 0320 	and.w	r3, r3, #32
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d009      	beq.n	800ce5a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800ce46:	683b      	ldr	r3, [r7, #0]
 800ce48:	015a      	lsls	r2, r3, #5
 800ce4a:	69bb      	ldr	r3, [r7, #24]
 800ce4c:	4413      	add	r3, r2
 800ce4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ce52:	461a      	mov	r2, r3
 800ce54:	2320      	movs	r3, #32
 800ce56:	6093      	str	r3, [r2, #8]
 800ce58:	e098      	b.n	800cf8c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800ce5a:	693b      	ldr	r3, [r7, #16]
 800ce5c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	f040 8093 	bne.w	800cf8c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800ce66:	697b      	ldr	r3, [r7, #20]
 800ce68:	4a4b      	ldr	r2, [pc, #300]	@ (800cf98 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800ce6a:	4293      	cmp	r3, r2
 800ce6c:	d90f      	bls.n	800ce8e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800ce6e:	693b      	ldr	r3, [r7, #16]
 800ce70:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d00a      	beq.n	800ce8e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800ce78:	683b      	ldr	r3, [r7, #0]
 800ce7a:	015a      	lsls	r2, r3, #5
 800ce7c:	69bb      	ldr	r3, [r7, #24]
 800ce7e:	4413      	add	r3, r2
 800ce80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ce84:	461a      	mov	r2, r3
 800ce86:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ce8a:	6093      	str	r3, [r2, #8]
 800ce8c:	e07e      	b.n	800cf8c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800ce8e:	683a      	ldr	r2, [r7, #0]
 800ce90:	4613      	mov	r3, r2
 800ce92:	00db      	lsls	r3, r3, #3
 800ce94:	4413      	add	r3, r2
 800ce96:	009b      	lsls	r3, r3, #2
 800ce98:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800ce9c:	687a      	ldr	r2, [r7, #4]
 800ce9e:	4413      	add	r3, r2
 800cea0:	3304      	adds	r3, #4
 800cea2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800cea4:	68fb      	ldr	r3, [r7, #12]
 800cea6:	6a1a      	ldr	r2, [r3, #32]
 800cea8:	683b      	ldr	r3, [r7, #0]
 800ceaa:	0159      	lsls	r1, r3, #5
 800ceac:	69bb      	ldr	r3, [r7, #24]
 800ceae:	440b      	add	r3, r1
 800ceb0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ceb4:	691b      	ldr	r3, [r3, #16]
 800ceb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ceba:	1ad2      	subs	r2, r2, r3
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800cec0:	683b      	ldr	r3, [r7, #0]
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d114      	bne.n	800cef0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	691b      	ldr	r3, [r3, #16]
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d109      	bne.n	800cee2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	6818      	ldr	r0, [r3, #0]
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800ced8:	461a      	mov	r2, r3
 800ceda:	2101      	movs	r1, #1
 800cedc:	f008 fb8c 	bl	80155f8 <USB_EP0_OutStart>
 800cee0:	e006      	b.n	800cef0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	68da      	ldr	r2, [r3, #12]
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	695b      	ldr	r3, [r3, #20]
 800ceea:	441a      	add	r2, r3
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800cef0:	683b      	ldr	r3, [r7, #0]
 800cef2:	b2db      	uxtb	r3, r3
 800cef4:	4619      	mov	r1, r3
 800cef6:	6878      	ldr	r0, [r7, #4]
 800cef8:	f00b f8a8 	bl	801804c <HAL_PCD_DataOutStageCallback>
 800cefc:	e046      	b.n	800cf8c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800cefe:	697b      	ldr	r3, [r7, #20]
 800cf00:	4a26      	ldr	r2, [pc, #152]	@ (800cf9c <PCD_EP_OutXfrComplete_int+0x1cc>)
 800cf02:	4293      	cmp	r3, r2
 800cf04:	d124      	bne.n	800cf50 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800cf06:	693b      	ldr	r3, [r7, #16]
 800cf08:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d00a      	beq.n	800cf26 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800cf10:	683b      	ldr	r3, [r7, #0]
 800cf12:	015a      	lsls	r2, r3, #5
 800cf14:	69bb      	ldr	r3, [r7, #24]
 800cf16:	4413      	add	r3, r2
 800cf18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cf1c:	461a      	mov	r2, r3
 800cf1e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cf22:	6093      	str	r3, [r2, #8]
 800cf24:	e032      	b.n	800cf8c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800cf26:	693b      	ldr	r3, [r7, #16]
 800cf28:	f003 0320 	and.w	r3, r3, #32
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d008      	beq.n	800cf42 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800cf30:	683b      	ldr	r3, [r7, #0]
 800cf32:	015a      	lsls	r2, r3, #5
 800cf34:	69bb      	ldr	r3, [r7, #24]
 800cf36:	4413      	add	r3, r2
 800cf38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cf3c:	461a      	mov	r2, r3
 800cf3e:	2320      	movs	r3, #32
 800cf40:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800cf42:	683b      	ldr	r3, [r7, #0]
 800cf44:	b2db      	uxtb	r3, r3
 800cf46:	4619      	mov	r1, r3
 800cf48:	6878      	ldr	r0, [r7, #4]
 800cf4a:	f00b f87f 	bl	801804c <HAL_PCD_DataOutStageCallback>
 800cf4e:	e01d      	b.n	800cf8c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800cf50:	683b      	ldr	r3, [r7, #0]
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d114      	bne.n	800cf80 <PCD_EP_OutXfrComplete_int+0x1b0>
 800cf56:	6879      	ldr	r1, [r7, #4]
 800cf58:	683a      	ldr	r2, [r7, #0]
 800cf5a:	4613      	mov	r3, r2
 800cf5c:	00db      	lsls	r3, r3, #3
 800cf5e:	4413      	add	r3, r2
 800cf60:	009b      	lsls	r3, r3, #2
 800cf62:	440b      	add	r3, r1
 800cf64:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d108      	bne.n	800cf80 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	6818      	ldr	r0, [r3, #0]
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800cf78:	461a      	mov	r2, r3
 800cf7a:	2100      	movs	r1, #0
 800cf7c:	f008 fb3c 	bl	80155f8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800cf80:	683b      	ldr	r3, [r7, #0]
 800cf82:	b2db      	uxtb	r3, r3
 800cf84:	4619      	mov	r1, r3
 800cf86:	6878      	ldr	r0, [r7, #4]
 800cf88:	f00b f860 	bl	801804c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800cf8c:	2300      	movs	r3, #0
}
 800cf8e:	4618      	mov	r0, r3
 800cf90:	3720      	adds	r7, #32
 800cf92:	46bd      	mov	sp, r7
 800cf94:	bd80      	pop	{r7, pc}
 800cf96:	bf00      	nop
 800cf98:	4f54300a 	.word	0x4f54300a
 800cf9c:	4f54310a 	.word	0x4f54310a

0800cfa0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800cfa0:	b580      	push	{r7, lr}
 800cfa2:	b086      	sub	sp, #24
 800cfa4:	af00      	add	r7, sp, #0
 800cfa6:	6078      	str	r0, [r7, #4]
 800cfa8:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cfb0:	697b      	ldr	r3, [r7, #20]
 800cfb2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800cfb4:	697b      	ldr	r3, [r7, #20]
 800cfb6:	333c      	adds	r3, #60	@ 0x3c
 800cfb8:	3304      	adds	r3, #4
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800cfbe:	683b      	ldr	r3, [r7, #0]
 800cfc0:	015a      	lsls	r2, r3, #5
 800cfc2:	693b      	ldr	r3, [r7, #16]
 800cfc4:	4413      	add	r3, r2
 800cfc6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cfca:	689b      	ldr	r3, [r3, #8]
 800cfcc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	4a15      	ldr	r2, [pc, #84]	@ (800d028 <PCD_EP_OutSetupPacket_int+0x88>)
 800cfd2:	4293      	cmp	r3, r2
 800cfd4:	d90e      	bls.n	800cff4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800cfd6:	68bb      	ldr	r3, [r7, #8]
 800cfd8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d009      	beq.n	800cff4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800cfe0:	683b      	ldr	r3, [r7, #0]
 800cfe2:	015a      	lsls	r2, r3, #5
 800cfe4:	693b      	ldr	r3, [r7, #16]
 800cfe6:	4413      	add	r3, r2
 800cfe8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cfec:	461a      	mov	r2, r3
 800cfee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cff2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800cff4:	6878      	ldr	r0, [r7, #4]
 800cff6:	f00b f817 	bl	8018028 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800cffa:	68fb      	ldr	r3, [r7, #12]
 800cffc:	4a0a      	ldr	r2, [pc, #40]	@ (800d028 <PCD_EP_OutSetupPacket_int+0x88>)
 800cffe:	4293      	cmp	r3, r2
 800d000:	d90c      	bls.n	800d01c <PCD_EP_OutSetupPacket_int+0x7c>
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	799b      	ldrb	r3, [r3, #6]
 800d006:	2b01      	cmp	r3, #1
 800d008:	d108      	bne.n	800d01c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	6818      	ldr	r0, [r3, #0]
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800d014:	461a      	mov	r2, r3
 800d016:	2101      	movs	r1, #1
 800d018:	f008 faee 	bl	80155f8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800d01c:	2300      	movs	r3, #0
}
 800d01e:	4618      	mov	r0, r3
 800d020:	3718      	adds	r7, #24
 800d022:	46bd      	mov	sp, r7
 800d024:	bd80      	pop	{r7, pc}
 800d026:	bf00      	nop
 800d028:	4f54300a 	.word	0x4f54300a

0800d02c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800d02c:	b480      	push	{r7}
 800d02e:	b085      	sub	sp, #20
 800d030:	af00      	add	r7, sp, #0
 800d032:	6078      	str	r0, [r7, #4]
 800d034:	460b      	mov	r3, r1
 800d036:	70fb      	strb	r3, [r7, #3]
 800d038:	4613      	mov	r3, r2
 800d03a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d042:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800d044:	78fb      	ldrb	r3, [r7, #3]
 800d046:	2b00      	cmp	r3, #0
 800d048:	d107      	bne.n	800d05a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800d04a:	883b      	ldrh	r3, [r7, #0]
 800d04c:	0419      	lsls	r1, r3, #16
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	68ba      	ldr	r2, [r7, #8]
 800d054:	430a      	orrs	r2, r1
 800d056:	629a      	str	r2, [r3, #40]	@ 0x28
 800d058:	e028      	b.n	800d0ac <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d060:	0c1b      	lsrs	r3, r3, #16
 800d062:	68ba      	ldr	r2, [r7, #8]
 800d064:	4413      	add	r3, r2
 800d066:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800d068:	2300      	movs	r3, #0
 800d06a:	73fb      	strb	r3, [r7, #15]
 800d06c:	e00d      	b.n	800d08a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	681a      	ldr	r2, [r3, #0]
 800d072:	7bfb      	ldrb	r3, [r7, #15]
 800d074:	3340      	adds	r3, #64	@ 0x40
 800d076:	009b      	lsls	r3, r3, #2
 800d078:	4413      	add	r3, r2
 800d07a:	685b      	ldr	r3, [r3, #4]
 800d07c:	0c1b      	lsrs	r3, r3, #16
 800d07e:	68ba      	ldr	r2, [r7, #8]
 800d080:	4413      	add	r3, r2
 800d082:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800d084:	7bfb      	ldrb	r3, [r7, #15]
 800d086:	3301      	adds	r3, #1
 800d088:	73fb      	strb	r3, [r7, #15]
 800d08a:	7bfa      	ldrb	r2, [r7, #15]
 800d08c:	78fb      	ldrb	r3, [r7, #3]
 800d08e:	3b01      	subs	r3, #1
 800d090:	429a      	cmp	r2, r3
 800d092:	d3ec      	bcc.n	800d06e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800d094:	883b      	ldrh	r3, [r7, #0]
 800d096:	0418      	lsls	r0, r3, #16
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	6819      	ldr	r1, [r3, #0]
 800d09c:	78fb      	ldrb	r3, [r7, #3]
 800d09e:	3b01      	subs	r3, #1
 800d0a0:	68ba      	ldr	r2, [r7, #8]
 800d0a2:	4302      	orrs	r2, r0
 800d0a4:	3340      	adds	r3, #64	@ 0x40
 800d0a6:	009b      	lsls	r3, r3, #2
 800d0a8:	440b      	add	r3, r1
 800d0aa:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800d0ac:	2300      	movs	r3, #0
}
 800d0ae:	4618      	mov	r0, r3
 800d0b0:	3714      	adds	r7, #20
 800d0b2:	46bd      	mov	sp, r7
 800d0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0b8:	4770      	bx	lr

0800d0ba <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800d0ba:	b480      	push	{r7}
 800d0bc:	b083      	sub	sp, #12
 800d0be:	af00      	add	r7, sp, #0
 800d0c0:	6078      	str	r0, [r7, #4]
 800d0c2:	460b      	mov	r3, r1
 800d0c4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	887a      	ldrh	r2, [r7, #2]
 800d0cc:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800d0ce:	2300      	movs	r3, #0
}
 800d0d0:	4618      	mov	r0, r3
 800d0d2:	370c      	adds	r7, #12
 800d0d4:	46bd      	mov	sp, r7
 800d0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0da:	4770      	bx	lr

0800d0dc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800d0dc:	b480      	push	{r7}
 800d0de:	b085      	sub	sp, #20
 800d0e0:	af00      	add	r7, sp, #0
 800d0e2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	2201      	movs	r2, #1
 800d0ee:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	2200      	movs	r2, #0
 800d0f6:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	699b      	ldr	r3, [r3, #24]
 800d0fe:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d10a:	4b05      	ldr	r3, [pc, #20]	@ (800d120 <HAL_PCDEx_ActivateLPM+0x44>)
 800d10c:	4313      	orrs	r3, r2
 800d10e:	68fa      	ldr	r2, [r7, #12]
 800d110:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800d112:	2300      	movs	r3, #0
}
 800d114:	4618      	mov	r0, r3
 800d116:	3714      	adds	r7, #20
 800d118:	46bd      	mov	sp, r7
 800d11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d11e:	4770      	bx	lr
 800d120:	10000003 	.word	0x10000003

0800d124 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800d124:	b480      	push	{r7}
 800d126:	b083      	sub	sp, #12
 800d128:	af00      	add	r7, sp, #0
 800d12a:	6078      	str	r0, [r7, #4]
 800d12c:	460b      	mov	r3, r1
 800d12e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800d130:	bf00      	nop
 800d132:	370c      	adds	r7, #12
 800d134:	46bd      	mov	sp, r7
 800d136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d13a:	4770      	bx	lr

0800d13c <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800d13c:	b580      	push	{r7, lr}
 800d13e:	b084      	sub	sp, #16
 800d140:	af00      	add	r7, sp, #0
 800d142:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800d144:	4b19      	ldr	r3, [pc, #100]	@ (800d1ac <HAL_PWREx_ConfigSupply+0x70>)
 800d146:	68db      	ldr	r3, [r3, #12]
 800d148:	f003 0304 	and.w	r3, r3, #4
 800d14c:	2b04      	cmp	r3, #4
 800d14e:	d00a      	beq.n	800d166 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800d150:	4b16      	ldr	r3, [pc, #88]	@ (800d1ac <HAL_PWREx_ConfigSupply+0x70>)
 800d152:	68db      	ldr	r3, [r3, #12]
 800d154:	f003 0307 	and.w	r3, r3, #7
 800d158:	687a      	ldr	r2, [r7, #4]
 800d15a:	429a      	cmp	r2, r3
 800d15c:	d001      	beq.n	800d162 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800d15e:	2301      	movs	r3, #1
 800d160:	e01f      	b.n	800d1a2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800d162:	2300      	movs	r3, #0
 800d164:	e01d      	b.n	800d1a2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800d166:	4b11      	ldr	r3, [pc, #68]	@ (800d1ac <HAL_PWREx_ConfigSupply+0x70>)
 800d168:	68db      	ldr	r3, [r3, #12]
 800d16a:	f023 0207 	bic.w	r2, r3, #7
 800d16e:	490f      	ldr	r1, [pc, #60]	@ (800d1ac <HAL_PWREx_ConfigSupply+0x70>)
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	4313      	orrs	r3, r2
 800d174:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800d176:	f7f6 f9ad 	bl	80034d4 <HAL_GetTick>
 800d17a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800d17c:	e009      	b.n	800d192 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800d17e:	f7f6 f9a9 	bl	80034d4 <HAL_GetTick>
 800d182:	4602      	mov	r2, r0
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	1ad3      	subs	r3, r2, r3
 800d188:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800d18c:	d901      	bls.n	800d192 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800d18e:	2301      	movs	r3, #1
 800d190:	e007      	b.n	800d1a2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800d192:	4b06      	ldr	r3, [pc, #24]	@ (800d1ac <HAL_PWREx_ConfigSupply+0x70>)
 800d194:	685b      	ldr	r3, [r3, #4]
 800d196:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d19a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d19e:	d1ee      	bne.n	800d17e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800d1a0:	2300      	movs	r3, #0
}
 800d1a2:	4618      	mov	r0, r3
 800d1a4:	3710      	adds	r7, #16
 800d1a6:	46bd      	mov	sp, r7
 800d1a8:	bd80      	pop	{r7, pc}
 800d1aa:	bf00      	nop
 800d1ac:	58024800 	.word	0x58024800

0800d1b0 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800d1b0:	b480      	push	{r7}
 800d1b2:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800d1b4:	4b05      	ldr	r3, [pc, #20]	@ (800d1cc <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800d1b6:	68db      	ldr	r3, [r3, #12]
 800d1b8:	4a04      	ldr	r2, [pc, #16]	@ (800d1cc <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800d1ba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800d1be:	60d3      	str	r3, [r2, #12]
}
 800d1c0:	bf00      	nop
 800d1c2:	46bd      	mov	sp, r7
 800d1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1c8:	4770      	bx	lr
 800d1ca:	bf00      	nop
 800d1cc:	58024800 	.word	0x58024800

0800d1d0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800d1d0:	b580      	push	{r7, lr}
 800d1d2:	b08c      	sub	sp, #48	@ 0x30
 800d1d4:	af00      	add	r7, sp, #0
 800d1d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d102      	bne.n	800d1e4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800d1de:	2301      	movs	r3, #1
 800d1e0:	f000 bc48 	b.w	800da74 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	f003 0301 	and.w	r3, r3, #1
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	f000 8088 	beq.w	800d302 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d1f2:	4b99      	ldr	r3, [pc, #612]	@ (800d458 <HAL_RCC_OscConfig+0x288>)
 800d1f4:	691b      	ldr	r3, [r3, #16]
 800d1f6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d1fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800d1fc:	4b96      	ldr	r3, [pc, #600]	@ (800d458 <HAL_RCC_OscConfig+0x288>)
 800d1fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d200:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800d202:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d204:	2b10      	cmp	r3, #16
 800d206:	d007      	beq.n	800d218 <HAL_RCC_OscConfig+0x48>
 800d208:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d20a:	2b18      	cmp	r3, #24
 800d20c:	d111      	bne.n	800d232 <HAL_RCC_OscConfig+0x62>
 800d20e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d210:	f003 0303 	and.w	r3, r3, #3
 800d214:	2b02      	cmp	r3, #2
 800d216:	d10c      	bne.n	800d232 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d218:	4b8f      	ldr	r3, [pc, #572]	@ (800d458 <HAL_RCC_OscConfig+0x288>)
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d220:	2b00      	cmp	r3, #0
 800d222:	d06d      	beq.n	800d300 <HAL_RCC_OscConfig+0x130>
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	685b      	ldr	r3, [r3, #4]
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d169      	bne.n	800d300 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800d22c:	2301      	movs	r3, #1
 800d22e:	f000 bc21 	b.w	800da74 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	685b      	ldr	r3, [r3, #4]
 800d236:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d23a:	d106      	bne.n	800d24a <HAL_RCC_OscConfig+0x7a>
 800d23c:	4b86      	ldr	r3, [pc, #536]	@ (800d458 <HAL_RCC_OscConfig+0x288>)
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	4a85      	ldr	r2, [pc, #532]	@ (800d458 <HAL_RCC_OscConfig+0x288>)
 800d242:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d246:	6013      	str	r3, [r2, #0]
 800d248:	e02e      	b.n	800d2a8 <HAL_RCC_OscConfig+0xd8>
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	685b      	ldr	r3, [r3, #4]
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d10c      	bne.n	800d26c <HAL_RCC_OscConfig+0x9c>
 800d252:	4b81      	ldr	r3, [pc, #516]	@ (800d458 <HAL_RCC_OscConfig+0x288>)
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	4a80      	ldr	r2, [pc, #512]	@ (800d458 <HAL_RCC_OscConfig+0x288>)
 800d258:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d25c:	6013      	str	r3, [r2, #0]
 800d25e:	4b7e      	ldr	r3, [pc, #504]	@ (800d458 <HAL_RCC_OscConfig+0x288>)
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	4a7d      	ldr	r2, [pc, #500]	@ (800d458 <HAL_RCC_OscConfig+0x288>)
 800d264:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800d268:	6013      	str	r3, [r2, #0]
 800d26a:	e01d      	b.n	800d2a8 <HAL_RCC_OscConfig+0xd8>
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	685b      	ldr	r3, [r3, #4]
 800d270:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800d274:	d10c      	bne.n	800d290 <HAL_RCC_OscConfig+0xc0>
 800d276:	4b78      	ldr	r3, [pc, #480]	@ (800d458 <HAL_RCC_OscConfig+0x288>)
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	4a77      	ldr	r2, [pc, #476]	@ (800d458 <HAL_RCC_OscConfig+0x288>)
 800d27c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800d280:	6013      	str	r3, [r2, #0]
 800d282:	4b75      	ldr	r3, [pc, #468]	@ (800d458 <HAL_RCC_OscConfig+0x288>)
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	4a74      	ldr	r2, [pc, #464]	@ (800d458 <HAL_RCC_OscConfig+0x288>)
 800d288:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d28c:	6013      	str	r3, [r2, #0]
 800d28e:	e00b      	b.n	800d2a8 <HAL_RCC_OscConfig+0xd8>
 800d290:	4b71      	ldr	r3, [pc, #452]	@ (800d458 <HAL_RCC_OscConfig+0x288>)
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	4a70      	ldr	r2, [pc, #448]	@ (800d458 <HAL_RCC_OscConfig+0x288>)
 800d296:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d29a:	6013      	str	r3, [r2, #0]
 800d29c:	4b6e      	ldr	r3, [pc, #440]	@ (800d458 <HAL_RCC_OscConfig+0x288>)
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	4a6d      	ldr	r2, [pc, #436]	@ (800d458 <HAL_RCC_OscConfig+0x288>)
 800d2a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800d2a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	685b      	ldr	r3, [r3, #4]
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d013      	beq.n	800d2d8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d2b0:	f7f6 f910 	bl	80034d4 <HAL_GetTick>
 800d2b4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800d2b6:	e008      	b.n	800d2ca <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d2b8:	f7f6 f90c 	bl	80034d4 <HAL_GetTick>
 800d2bc:	4602      	mov	r2, r0
 800d2be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2c0:	1ad3      	subs	r3, r2, r3
 800d2c2:	2b64      	cmp	r3, #100	@ 0x64
 800d2c4:	d901      	bls.n	800d2ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800d2c6:	2303      	movs	r3, #3
 800d2c8:	e3d4      	b.n	800da74 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800d2ca:	4b63      	ldr	r3, [pc, #396]	@ (800d458 <HAL_RCC_OscConfig+0x288>)
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d0f0      	beq.n	800d2b8 <HAL_RCC_OscConfig+0xe8>
 800d2d6:	e014      	b.n	800d302 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d2d8:	f7f6 f8fc 	bl	80034d4 <HAL_GetTick>
 800d2dc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800d2de:	e008      	b.n	800d2f2 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d2e0:	f7f6 f8f8 	bl	80034d4 <HAL_GetTick>
 800d2e4:	4602      	mov	r2, r0
 800d2e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2e8:	1ad3      	subs	r3, r2, r3
 800d2ea:	2b64      	cmp	r3, #100	@ 0x64
 800d2ec:	d901      	bls.n	800d2f2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800d2ee:	2303      	movs	r3, #3
 800d2f0:	e3c0      	b.n	800da74 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800d2f2:	4b59      	ldr	r3, [pc, #356]	@ (800d458 <HAL_RCC_OscConfig+0x288>)
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d1f0      	bne.n	800d2e0 <HAL_RCC_OscConfig+0x110>
 800d2fe:	e000      	b.n	800d302 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d300:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	f003 0302 	and.w	r3, r3, #2
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	f000 80ca 	beq.w	800d4a4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d310:	4b51      	ldr	r3, [pc, #324]	@ (800d458 <HAL_RCC_OscConfig+0x288>)
 800d312:	691b      	ldr	r3, [r3, #16]
 800d314:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d318:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800d31a:	4b4f      	ldr	r3, [pc, #316]	@ (800d458 <HAL_RCC_OscConfig+0x288>)
 800d31c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d31e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800d320:	6a3b      	ldr	r3, [r7, #32]
 800d322:	2b00      	cmp	r3, #0
 800d324:	d007      	beq.n	800d336 <HAL_RCC_OscConfig+0x166>
 800d326:	6a3b      	ldr	r3, [r7, #32]
 800d328:	2b18      	cmp	r3, #24
 800d32a:	d156      	bne.n	800d3da <HAL_RCC_OscConfig+0x20a>
 800d32c:	69fb      	ldr	r3, [r7, #28]
 800d32e:	f003 0303 	and.w	r3, r3, #3
 800d332:	2b00      	cmp	r3, #0
 800d334:	d151      	bne.n	800d3da <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800d336:	4b48      	ldr	r3, [pc, #288]	@ (800d458 <HAL_RCC_OscConfig+0x288>)
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	f003 0304 	and.w	r3, r3, #4
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d005      	beq.n	800d34e <HAL_RCC_OscConfig+0x17e>
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	68db      	ldr	r3, [r3, #12]
 800d346:	2b00      	cmp	r3, #0
 800d348:	d101      	bne.n	800d34e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800d34a:	2301      	movs	r3, #1
 800d34c:	e392      	b.n	800da74 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800d34e:	4b42      	ldr	r3, [pc, #264]	@ (800d458 <HAL_RCC_OscConfig+0x288>)
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	f023 0219 	bic.w	r2, r3, #25
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	68db      	ldr	r3, [r3, #12]
 800d35a:	493f      	ldr	r1, [pc, #252]	@ (800d458 <HAL_RCC_OscConfig+0x288>)
 800d35c:	4313      	orrs	r3, r2
 800d35e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d360:	f7f6 f8b8 	bl	80034d4 <HAL_GetTick>
 800d364:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800d366:	e008      	b.n	800d37a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d368:	f7f6 f8b4 	bl	80034d4 <HAL_GetTick>
 800d36c:	4602      	mov	r2, r0
 800d36e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d370:	1ad3      	subs	r3, r2, r3
 800d372:	2b02      	cmp	r3, #2
 800d374:	d901      	bls.n	800d37a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800d376:	2303      	movs	r3, #3
 800d378:	e37c      	b.n	800da74 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800d37a:	4b37      	ldr	r3, [pc, #220]	@ (800d458 <HAL_RCC_OscConfig+0x288>)
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	f003 0304 	and.w	r3, r3, #4
 800d382:	2b00      	cmp	r3, #0
 800d384:	d0f0      	beq.n	800d368 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d386:	f7f6 f8d5 	bl	8003534 <HAL_GetREVID>
 800d38a:	4603      	mov	r3, r0
 800d38c:	f241 0203 	movw	r2, #4099	@ 0x1003
 800d390:	4293      	cmp	r3, r2
 800d392:	d817      	bhi.n	800d3c4 <HAL_RCC_OscConfig+0x1f4>
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	691b      	ldr	r3, [r3, #16]
 800d398:	2b40      	cmp	r3, #64	@ 0x40
 800d39a:	d108      	bne.n	800d3ae <HAL_RCC_OscConfig+0x1de>
 800d39c:	4b2e      	ldr	r3, [pc, #184]	@ (800d458 <HAL_RCC_OscConfig+0x288>)
 800d39e:	685b      	ldr	r3, [r3, #4]
 800d3a0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800d3a4:	4a2c      	ldr	r2, [pc, #176]	@ (800d458 <HAL_RCC_OscConfig+0x288>)
 800d3a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d3aa:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800d3ac:	e07a      	b.n	800d4a4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d3ae:	4b2a      	ldr	r3, [pc, #168]	@ (800d458 <HAL_RCC_OscConfig+0x288>)
 800d3b0:	685b      	ldr	r3, [r3, #4]
 800d3b2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	691b      	ldr	r3, [r3, #16]
 800d3ba:	031b      	lsls	r3, r3, #12
 800d3bc:	4926      	ldr	r1, [pc, #152]	@ (800d458 <HAL_RCC_OscConfig+0x288>)
 800d3be:	4313      	orrs	r3, r2
 800d3c0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800d3c2:	e06f      	b.n	800d4a4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d3c4:	4b24      	ldr	r3, [pc, #144]	@ (800d458 <HAL_RCC_OscConfig+0x288>)
 800d3c6:	685b      	ldr	r3, [r3, #4]
 800d3c8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	691b      	ldr	r3, [r3, #16]
 800d3d0:	061b      	lsls	r3, r3, #24
 800d3d2:	4921      	ldr	r1, [pc, #132]	@ (800d458 <HAL_RCC_OscConfig+0x288>)
 800d3d4:	4313      	orrs	r3, r2
 800d3d6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800d3d8:	e064      	b.n	800d4a4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	68db      	ldr	r3, [r3, #12]
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d047      	beq.n	800d472 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800d3e2:	4b1d      	ldr	r3, [pc, #116]	@ (800d458 <HAL_RCC_OscConfig+0x288>)
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	f023 0219 	bic.w	r2, r3, #25
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	68db      	ldr	r3, [r3, #12]
 800d3ee:	491a      	ldr	r1, [pc, #104]	@ (800d458 <HAL_RCC_OscConfig+0x288>)
 800d3f0:	4313      	orrs	r3, r2
 800d3f2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d3f4:	f7f6 f86e 	bl	80034d4 <HAL_GetTick>
 800d3f8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800d3fa:	e008      	b.n	800d40e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d3fc:	f7f6 f86a 	bl	80034d4 <HAL_GetTick>
 800d400:	4602      	mov	r2, r0
 800d402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d404:	1ad3      	subs	r3, r2, r3
 800d406:	2b02      	cmp	r3, #2
 800d408:	d901      	bls.n	800d40e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800d40a:	2303      	movs	r3, #3
 800d40c:	e332      	b.n	800da74 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800d40e:	4b12      	ldr	r3, [pc, #72]	@ (800d458 <HAL_RCC_OscConfig+0x288>)
 800d410:	681b      	ldr	r3, [r3, #0]
 800d412:	f003 0304 	and.w	r3, r3, #4
 800d416:	2b00      	cmp	r3, #0
 800d418:	d0f0      	beq.n	800d3fc <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d41a:	f7f6 f88b 	bl	8003534 <HAL_GetREVID>
 800d41e:	4603      	mov	r3, r0
 800d420:	f241 0203 	movw	r2, #4099	@ 0x1003
 800d424:	4293      	cmp	r3, r2
 800d426:	d819      	bhi.n	800d45c <HAL_RCC_OscConfig+0x28c>
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	691b      	ldr	r3, [r3, #16]
 800d42c:	2b40      	cmp	r3, #64	@ 0x40
 800d42e:	d108      	bne.n	800d442 <HAL_RCC_OscConfig+0x272>
 800d430:	4b09      	ldr	r3, [pc, #36]	@ (800d458 <HAL_RCC_OscConfig+0x288>)
 800d432:	685b      	ldr	r3, [r3, #4]
 800d434:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800d438:	4a07      	ldr	r2, [pc, #28]	@ (800d458 <HAL_RCC_OscConfig+0x288>)
 800d43a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d43e:	6053      	str	r3, [r2, #4]
 800d440:	e030      	b.n	800d4a4 <HAL_RCC_OscConfig+0x2d4>
 800d442:	4b05      	ldr	r3, [pc, #20]	@ (800d458 <HAL_RCC_OscConfig+0x288>)
 800d444:	685b      	ldr	r3, [r3, #4]
 800d446:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	691b      	ldr	r3, [r3, #16]
 800d44e:	031b      	lsls	r3, r3, #12
 800d450:	4901      	ldr	r1, [pc, #4]	@ (800d458 <HAL_RCC_OscConfig+0x288>)
 800d452:	4313      	orrs	r3, r2
 800d454:	604b      	str	r3, [r1, #4]
 800d456:	e025      	b.n	800d4a4 <HAL_RCC_OscConfig+0x2d4>
 800d458:	58024400 	.word	0x58024400
 800d45c:	4b9a      	ldr	r3, [pc, #616]	@ (800d6c8 <HAL_RCC_OscConfig+0x4f8>)
 800d45e:	685b      	ldr	r3, [r3, #4]
 800d460:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	691b      	ldr	r3, [r3, #16]
 800d468:	061b      	lsls	r3, r3, #24
 800d46a:	4997      	ldr	r1, [pc, #604]	@ (800d6c8 <HAL_RCC_OscConfig+0x4f8>)
 800d46c:	4313      	orrs	r3, r2
 800d46e:	604b      	str	r3, [r1, #4]
 800d470:	e018      	b.n	800d4a4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800d472:	4b95      	ldr	r3, [pc, #596]	@ (800d6c8 <HAL_RCC_OscConfig+0x4f8>)
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	4a94      	ldr	r2, [pc, #592]	@ (800d6c8 <HAL_RCC_OscConfig+0x4f8>)
 800d478:	f023 0301 	bic.w	r3, r3, #1
 800d47c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d47e:	f7f6 f829 	bl	80034d4 <HAL_GetTick>
 800d482:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800d484:	e008      	b.n	800d498 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d486:	f7f6 f825 	bl	80034d4 <HAL_GetTick>
 800d48a:	4602      	mov	r2, r0
 800d48c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d48e:	1ad3      	subs	r3, r2, r3
 800d490:	2b02      	cmp	r3, #2
 800d492:	d901      	bls.n	800d498 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800d494:	2303      	movs	r3, #3
 800d496:	e2ed      	b.n	800da74 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800d498:	4b8b      	ldr	r3, [pc, #556]	@ (800d6c8 <HAL_RCC_OscConfig+0x4f8>)
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	f003 0304 	and.w	r3, r3, #4
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d1f0      	bne.n	800d486 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	f003 0310 	and.w	r3, r3, #16
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	f000 80a9 	beq.w	800d604 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d4b2:	4b85      	ldr	r3, [pc, #532]	@ (800d6c8 <HAL_RCC_OscConfig+0x4f8>)
 800d4b4:	691b      	ldr	r3, [r3, #16]
 800d4b6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d4ba:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800d4bc:	4b82      	ldr	r3, [pc, #520]	@ (800d6c8 <HAL_RCC_OscConfig+0x4f8>)
 800d4be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d4c0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800d4c2:	69bb      	ldr	r3, [r7, #24]
 800d4c4:	2b08      	cmp	r3, #8
 800d4c6:	d007      	beq.n	800d4d8 <HAL_RCC_OscConfig+0x308>
 800d4c8:	69bb      	ldr	r3, [r7, #24]
 800d4ca:	2b18      	cmp	r3, #24
 800d4cc:	d13a      	bne.n	800d544 <HAL_RCC_OscConfig+0x374>
 800d4ce:	697b      	ldr	r3, [r7, #20]
 800d4d0:	f003 0303 	and.w	r3, r3, #3
 800d4d4:	2b01      	cmp	r3, #1
 800d4d6:	d135      	bne.n	800d544 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800d4d8:	4b7b      	ldr	r3, [pc, #492]	@ (800d6c8 <HAL_RCC_OscConfig+0x4f8>)
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d005      	beq.n	800d4f0 <HAL_RCC_OscConfig+0x320>
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	69db      	ldr	r3, [r3, #28]
 800d4e8:	2b80      	cmp	r3, #128	@ 0x80
 800d4ea:	d001      	beq.n	800d4f0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800d4ec:	2301      	movs	r3, #1
 800d4ee:	e2c1      	b.n	800da74 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800d4f0:	f7f6 f820 	bl	8003534 <HAL_GetREVID>
 800d4f4:	4603      	mov	r3, r0
 800d4f6:	f241 0203 	movw	r2, #4099	@ 0x1003
 800d4fa:	4293      	cmp	r3, r2
 800d4fc:	d817      	bhi.n	800d52e <HAL_RCC_OscConfig+0x35e>
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	6a1b      	ldr	r3, [r3, #32]
 800d502:	2b20      	cmp	r3, #32
 800d504:	d108      	bne.n	800d518 <HAL_RCC_OscConfig+0x348>
 800d506:	4b70      	ldr	r3, [pc, #448]	@ (800d6c8 <HAL_RCC_OscConfig+0x4f8>)
 800d508:	685b      	ldr	r3, [r3, #4]
 800d50a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800d50e:	4a6e      	ldr	r2, [pc, #440]	@ (800d6c8 <HAL_RCC_OscConfig+0x4f8>)
 800d510:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800d514:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800d516:	e075      	b.n	800d604 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800d518:	4b6b      	ldr	r3, [pc, #428]	@ (800d6c8 <HAL_RCC_OscConfig+0x4f8>)
 800d51a:	685b      	ldr	r3, [r3, #4]
 800d51c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	6a1b      	ldr	r3, [r3, #32]
 800d524:	069b      	lsls	r3, r3, #26
 800d526:	4968      	ldr	r1, [pc, #416]	@ (800d6c8 <HAL_RCC_OscConfig+0x4f8>)
 800d528:	4313      	orrs	r3, r2
 800d52a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800d52c:	e06a      	b.n	800d604 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800d52e:	4b66      	ldr	r3, [pc, #408]	@ (800d6c8 <HAL_RCC_OscConfig+0x4f8>)
 800d530:	68db      	ldr	r3, [r3, #12]
 800d532:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	6a1b      	ldr	r3, [r3, #32]
 800d53a:	061b      	lsls	r3, r3, #24
 800d53c:	4962      	ldr	r1, [pc, #392]	@ (800d6c8 <HAL_RCC_OscConfig+0x4f8>)
 800d53e:	4313      	orrs	r3, r2
 800d540:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800d542:	e05f      	b.n	800d604 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	69db      	ldr	r3, [r3, #28]
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d042      	beq.n	800d5d2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800d54c:	4b5e      	ldr	r3, [pc, #376]	@ (800d6c8 <HAL_RCC_OscConfig+0x4f8>)
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	4a5d      	ldr	r2, [pc, #372]	@ (800d6c8 <HAL_RCC_OscConfig+0x4f8>)
 800d552:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d556:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d558:	f7f5 ffbc 	bl	80034d4 <HAL_GetTick>
 800d55c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800d55e:	e008      	b.n	800d572 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800d560:	f7f5 ffb8 	bl	80034d4 <HAL_GetTick>
 800d564:	4602      	mov	r2, r0
 800d566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d568:	1ad3      	subs	r3, r2, r3
 800d56a:	2b02      	cmp	r3, #2
 800d56c:	d901      	bls.n	800d572 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800d56e:	2303      	movs	r3, #3
 800d570:	e280      	b.n	800da74 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800d572:	4b55      	ldr	r3, [pc, #340]	@ (800d6c8 <HAL_RCC_OscConfig+0x4f8>)
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d0f0      	beq.n	800d560 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800d57e:	f7f5 ffd9 	bl	8003534 <HAL_GetREVID>
 800d582:	4603      	mov	r3, r0
 800d584:	f241 0203 	movw	r2, #4099	@ 0x1003
 800d588:	4293      	cmp	r3, r2
 800d58a:	d817      	bhi.n	800d5bc <HAL_RCC_OscConfig+0x3ec>
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	6a1b      	ldr	r3, [r3, #32]
 800d590:	2b20      	cmp	r3, #32
 800d592:	d108      	bne.n	800d5a6 <HAL_RCC_OscConfig+0x3d6>
 800d594:	4b4c      	ldr	r3, [pc, #304]	@ (800d6c8 <HAL_RCC_OscConfig+0x4f8>)
 800d596:	685b      	ldr	r3, [r3, #4]
 800d598:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800d59c:	4a4a      	ldr	r2, [pc, #296]	@ (800d6c8 <HAL_RCC_OscConfig+0x4f8>)
 800d59e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800d5a2:	6053      	str	r3, [r2, #4]
 800d5a4:	e02e      	b.n	800d604 <HAL_RCC_OscConfig+0x434>
 800d5a6:	4b48      	ldr	r3, [pc, #288]	@ (800d6c8 <HAL_RCC_OscConfig+0x4f8>)
 800d5a8:	685b      	ldr	r3, [r3, #4]
 800d5aa:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	6a1b      	ldr	r3, [r3, #32]
 800d5b2:	069b      	lsls	r3, r3, #26
 800d5b4:	4944      	ldr	r1, [pc, #272]	@ (800d6c8 <HAL_RCC_OscConfig+0x4f8>)
 800d5b6:	4313      	orrs	r3, r2
 800d5b8:	604b      	str	r3, [r1, #4]
 800d5ba:	e023      	b.n	800d604 <HAL_RCC_OscConfig+0x434>
 800d5bc:	4b42      	ldr	r3, [pc, #264]	@ (800d6c8 <HAL_RCC_OscConfig+0x4f8>)
 800d5be:	68db      	ldr	r3, [r3, #12]
 800d5c0:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	6a1b      	ldr	r3, [r3, #32]
 800d5c8:	061b      	lsls	r3, r3, #24
 800d5ca:	493f      	ldr	r1, [pc, #252]	@ (800d6c8 <HAL_RCC_OscConfig+0x4f8>)
 800d5cc:	4313      	orrs	r3, r2
 800d5ce:	60cb      	str	r3, [r1, #12]
 800d5d0:	e018      	b.n	800d604 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800d5d2:	4b3d      	ldr	r3, [pc, #244]	@ (800d6c8 <HAL_RCC_OscConfig+0x4f8>)
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	4a3c      	ldr	r2, [pc, #240]	@ (800d6c8 <HAL_RCC_OscConfig+0x4f8>)
 800d5d8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d5dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d5de:	f7f5 ff79 	bl	80034d4 <HAL_GetTick>
 800d5e2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800d5e4:	e008      	b.n	800d5f8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800d5e6:	f7f5 ff75 	bl	80034d4 <HAL_GetTick>
 800d5ea:	4602      	mov	r2, r0
 800d5ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5ee:	1ad3      	subs	r3, r2, r3
 800d5f0:	2b02      	cmp	r3, #2
 800d5f2:	d901      	bls.n	800d5f8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800d5f4:	2303      	movs	r3, #3
 800d5f6:	e23d      	b.n	800da74 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800d5f8:	4b33      	ldr	r3, [pc, #204]	@ (800d6c8 <HAL_RCC_OscConfig+0x4f8>)
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d600:	2b00      	cmp	r3, #0
 800d602:	d1f0      	bne.n	800d5e6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	f003 0308 	and.w	r3, r3, #8
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d036      	beq.n	800d67e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	695b      	ldr	r3, [r3, #20]
 800d614:	2b00      	cmp	r3, #0
 800d616:	d019      	beq.n	800d64c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800d618:	4b2b      	ldr	r3, [pc, #172]	@ (800d6c8 <HAL_RCC_OscConfig+0x4f8>)
 800d61a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d61c:	4a2a      	ldr	r2, [pc, #168]	@ (800d6c8 <HAL_RCC_OscConfig+0x4f8>)
 800d61e:	f043 0301 	orr.w	r3, r3, #1
 800d622:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d624:	f7f5 ff56 	bl	80034d4 <HAL_GetTick>
 800d628:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800d62a:	e008      	b.n	800d63e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d62c:	f7f5 ff52 	bl	80034d4 <HAL_GetTick>
 800d630:	4602      	mov	r2, r0
 800d632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d634:	1ad3      	subs	r3, r2, r3
 800d636:	2b02      	cmp	r3, #2
 800d638:	d901      	bls.n	800d63e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800d63a:	2303      	movs	r3, #3
 800d63c:	e21a      	b.n	800da74 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800d63e:	4b22      	ldr	r3, [pc, #136]	@ (800d6c8 <HAL_RCC_OscConfig+0x4f8>)
 800d640:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d642:	f003 0302 	and.w	r3, r3, #2
 800d646:	2b00      	cmp	r3, #0
 800d648:	d0f0      	beq.n	800d62c <HAL_RCC_OscConfig+0x45c>
 800d64a:	e018      	b.n	800d67e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800d64c:	4b1e      	ldr	r3, [pc, #120]	@ (800d6c8 <HAL_RCC_OscConfig+0x4f8>)
 800d64e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d650:	4a1d      	ldr	r2, [pc, #116]	@ (800d6c8 <HAL_RCC_OscConfig+0x4f8>)
 800d652:	f023 0301 	bic.w	r3, r3, #1
 800d656:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d658:	f7f5 ff3c 	bl	80034d4 <HAL_GetTick>
 800d65c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800d65e:	e008      	b.n	800d672 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d660:	f7f5 ff38 	bl	80034d4 <HAL_GetTick>
 800d664:	4602      	mov	r2, r0
 800d666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d668:	1ad3      	subs	r3, r2, r3
 800d66a:	2b02      	cmp	r3, #2
 800d66c:	d901      	bls.n	800d672 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800d66e:	2303      	movs	r3, #3
 800d670:	e200      	b.n	800da74 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800d672:	4b15      	ldr	r3, [pc, #84]	@ (800d6c8 <HAL_RCC_OscConfig+0x4f8>)
 800d674:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d676:	f003 0302 	and.w	r3, r3, #2
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	d1f0      	bne.n	800d660 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	f003 0320 	and.w	r3, r3, #32
 800d686:	2b00      	cmp	r3, #0
 800d688:	d039      	beq.n	800d6fe <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	699b      	ldr	r3, [r3, #24]
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d01c      	beq.n	800d6cc <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800d692:	4b0d      	ldr	r3, [pc, #52]	@ (800d6c8 <HAL_RCC_OscConfig+0x4f8>)
 800d694:	681b      	ldr	r3, [r3, #0]
 800d696:	4a0c      	ldr	r2, [pc, #48]	@ (800d6c8 <HAL_RCC_OscConfig+0x4f8>)
 800d698:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800d69c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800d69e:	f7f5 ff19 	bl	80034d4 <HAL_GetTick>
 800d6a2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800d6a4:	e008      	b.n	800d6b8 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800d6a6:	f7f5 ff15 	bl	80034d4 <HAL_GetTick>
 800d6aa:	4602      	mov	r2, r0
 800d6ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6ae:	1ad3      	subs	r3, r2, r3
 800d6b0:	2b02      	cmp	r3, #2
 800d6b2:	d901      	bls.n	800d6b8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800d6b4:	2303      	movs	r3, #3
 800d6b6:	e1dd      	b.n	800da74 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800d6b8:	4b03      	ldr	r3, [pc, #12]	@ (800d6c8 <HAL_RCC_OscConfig+0x4f8>)
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d0f0      	beq.n	800d6a6 <HAL_RCC_OscConfig+0x4d6>
 800d6c4:	e01b      	b.n	800d6fe <HAL_RCC_OscConfig+0x52e>
 800d6c6:	bf00      	nop
 800d6c8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800d6cc:	4b9b      	ldr	r3, [pc, #620]	@ (800d93c <HAL_RCC_OscConfig+0x76c>)
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	4a9a      	ldr	r2, [pc, #616]	@ (800d93c <HAL_RCC_OscConfig+0x76c>)
 800d6d2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d6d6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800d6d8:	f7f5 fefc 	bl	80034d4 <HAL_GetTick>
 800d6dc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800d6de:	e008      	b.n	800d6f2 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800d6e0:	f7f5 fef8 	bl	80034d4 <HAL_GetTick>
 800d6e4:	4602      	mov	r2, r0
 800d6e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6e8:	1ad3      	subs	r3, r2, r3
 800d6ea:	2b02      	cmp	r3, #2
 800d6ec:	d901      	bls.n	800d6f2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800d6ee:	2303      	movs	r3, #3
 800d6f0:	e1c0      	b.n	800da74 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800d6f2:	4b92      	ldr	r3, [pc, #584]	@ (800d93c <HAL_RCC_OscConfig+0x76c>)
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d1f0      	bne.n	800d6e0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	f003 0304 	and.w	r3, r3, #4
 800d706:	2b00      	cmp	r3, #0
 800d708:	f000 8081 	beq.w	800d80e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800d70c:	4b8c      	ldr	r3, [pc, #560]	@ (800d940 <HAL_RCC_OscConfig+0x770>)
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	4a8b      	ldr	r2, [pc, #556]	@ (800d940 <HAL_RCC_OscConfig+0x770>)
 800d712:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d716:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800d718:	f7f5 fedc 	bl	80034d4 <HAL_GetTick>
 800d71c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d71e:	e008      	b.n	800d732 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d720:	f7f5 fed8 	bl	80034d4 <HAL_GetTick>
 800d724:	4602      	mov	r2, r0
 800d726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d728:	1ad3      	subs	r3, r2, r3
 800d72a:	2b64      	cmp	r3, #100	@ 0x64
 800d72c:	d901      	bls.n	800d732 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800d72e:	2303      	movs	r3, #3
 800d730:	e1a0      	b.n	800da74 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d732:	4b83      	ldr	r3, [pc, #524]	@ (800d940 <HAL_RCC_OscConfig+0x770>)
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d0f0      	beq.n	800d720 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	689b      	ldr	r3, [r3, #8]
 800d742:	2b01      	cmp	r3, #1
 800d744:	d106      	bne.n	800d754 <HAL_RCC_OscConfig+0x584>
 800d746:	4b7d      	ldr	r3, [pc, #500]	@ (800d93c <HAL_RCC_OscConfig+0x76c>)
 800d748:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d74a:	4a7c      	ldr	r2, [pc, #496]	@ (800d93c <HAL_RCC_OscConfig+0x76c>)
 800d74c:	f043 0301 	orr.w	r3, r3, #1
 800d750:	6713      	str	r3, [r2, #112]	@ 0x70
 800d752:	e02d      	b.n	800d7b0 <HAL_RCC_OscConfig+0x5e0>
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	689b      	ldr	r3, [r3, #8]
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d10c      	bne.n	800d776 <HAL_RCC_OscConfig+0x5a6>
 800d75c:	4b77      	ldr	r3, [pc, #476]	@ (800d93c <HAL_RCC_OscConfig+0x76c>)
 800d75e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d760:	4a76      	ldr	r2, [pc, #472]	@ (800d93c <HAL_RCC_OscConfig+0x76c>)
 800d762:	f023 0301 	bic.w	r3, r3, #1
 800d766:	6713      	str	r3, [r2, #112]	@ 0x70
 800d768:	4b74      	ldr	r3, [pc, #464]	@ (800d93c <HAL_RCC_OscConfig+0x76c>)
 800d76a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d76c:	4a73      	ldr	r2, [pc, #460]	@ (800d93c <HAL_RCC_OscConfig+0x76c>)
 800d76e:	f023 0304 	bic.w	r3, r3, #4
 800d772:	6713      	str	r3, [r2, #112]	@ 0x70
 800d774:	e01c      	b.n	800d7b0 <HAL_RCC_OscConfig+0x5e0>
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	689b      	ldr	r3, [r3, #8]
 800d77a:	2b05      	cmp	r3, #5
 800d77c:	d10c      	bne.n	800d798 <HAL_RCC_OscConfig+0x5c8>
 800d77e:	4b6f      	ldr	r3, [pc, #444]	@ (800d93c <HAL_RCC_OscConfig+0x76c>)
 800d780:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d782:	4a6e      	ldr	r2, [pc, #440]	@ (800d93c <HAL_RCC_OscConfig+0x76c>)
 800d784:	f043 0304 	orr.w	r3, r3, #4
 800d788:	6713      	str	r3, [r2, #112]	@ 0x70
 800d78a:	4b6c      	ldr	r3, [pc, #432]	@ (800d93c <HAL_RCC_OscConfig+0x76c>)
 800d78c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d78e:	4a6b      	ldr	r2, [pc, #428]	@ (800d93c <HAL_RCC_OscConfig+0x76c>)
 800d790:	f043 0301 	orr.w	r3, r3, #1
 800d794:	6713      	str	r3, [r2, #112]	@ 0x70
 800d796:	e00b      	b.n	800d7b0 <HAL_RCC_OscConfig+0x5e0>
 800d798:	4b68      	ldr	r3, [pc, #416]	@ (800d93c <HAL_RCC_OscConfig+0x76c>)
 800d79a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d79c:	4a67      	ldr	r2, [pc, #412]	@ (800d93c <HAL_RCC_OscConfig+0x76c>)
 800d79e:	f023 0301 	bic.w	r3, r3, #1
 800d7a2:	6713      	str	r3, [r2, #112]	@ 0x70
 800d7a4:	4b65      	ldr	r3, [pc, #404]	@ (800d93c <HAL_RCC_OscConfig+0x76c>)
 800d7a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d7a8:	4a64      	ldr	r2, [pc, #400]	@ (800d93c <HAL_RCC_OscConfig+0x76c>)
 800d7aa:	f023 0304 	bic.w	r3, r3, #4
 800d7ae:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	689b      	ldr	r3, [r3, #8]
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d015      	beq.n	800d7e4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d7b8:	f7f5 fe8c 	bl	80034d4 <HAL_GetTick>
 800d7bc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800d7be:	e00a      	b.n	800d7d6 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d7c0:	f7f5 fe88 	bl	80034d4 <HAL_GetTick>
 800d7c4:	4602      	mov	r2, r0
 800d7c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7c8:	1ad3      	subs	r3, r2, r3
 800d7ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d7ce:	4293      	cmp	r3, r2
 800d7d0:	d901      	bls.n	800d7d6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800d7d2:	2303      	movs	r3, #3
 800d7d4:	e14e      	b.n	800da74 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800d7d6:	4b59      	ldr	r3, [pc, #356]	@ (800d93c <HAL_RCC_OscConfig+0x76c>)
 800d7d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d7da:	f003 0302 	and.w	r3, r3, #2
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d0ee      	beq.n	800d7c0 <HAL_RCC_OscConfig+0x5f0>
 800d7e2:	e014      	b.n	800d80e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d7e4:	f7f5 fe76 	bl	80034d4 <HAL_GetTick>
 800d7e8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800d7ea:	e00a      	b.n	800d802 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d7ec:	f7f5 fe72 	bl	80034d4 <HAL_GetTick>
 800d7f0:	4602      	mov	r2, r0
 800d7f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7f4:	1ad3      	subs	r3, r2, r3
 800d7f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d7fa:	4293      	cmp	r3, r2
 800d7fc:	d901      	bls.n	800d802 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800d7fe:	2303      	movs	r3, #3
 800d800:	e138      	b.n	800da74 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800d802:	4b4e      	ldr	r3, [pc, #312]	@ (800d93c <HAL_RCC_OscConfig+0x76c>)
 800d804:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d806:	f003 0302 	and.w	r3, r3, #2
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d1ee      	bne.n	800d7ec <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d812:	2b00      	cmp	r3, #0
 800d814:	f000 812d 	beq.w	800da72 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800d818:	4b48      	ldr	r3, [pc, #288]	@ (800d93c <HAL_RCC_OscConfig+0x76c>)
 800d81a:	691b      	ldr	r3, [r3, #16]
 800d81c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d820:	2b18      	cmp	r3, #24
 800d822:	f000 80bd 	beq.w	800d9a0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d82a:	2b02      	cmp	r3, #2
 800d82c:	f040 809e 	bne.w	800d96c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d830:	4b42      	ldr	r3, [pc, #264]	@ (800d93c <HAL_RCC_OscConfig+0x76c>)
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	4a41      	ldr	r2, [pc, #260]	@ (800d93c <HAL_RCC_OscConfig+0x76c>)
 800d836:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800d83a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d83c:	f7f5 fe4a 	bl	80034d4 <HAL_GetTick>
 800d840:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800d842:	e008      	b.n	800d856 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d844:	f7f5 fe46 	bl	80034d4 <HAL_GetTick>
 800d848:	4602      	mov	r2, r0
 800d84a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d84c:	1ad3      	subs	r3, r2, r3
 800d84e:	2b02      	cmp	r3, #2
 800d850:	d901      	bls.n	800d856 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800d852:	2303      	movs	r3, #3
 800d854:	e10e      	b.n	800da74 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800d856:	4b39      	ldr	r3, [pc, #228]	@ (800d93c <HAL_RCC_OscConfig+0x76c>)
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d1f0      	bne.n	800d844 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800d862:	4b36      	ldr	r3, [pc, #216]	@ (800d93c <HAL_RCC_OscConfig+0x76c>)
 800d864:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800d866:	4b37      	ldr	r3, [pc, #220]	@ (800d944 <HAL_RCC_OscConfig+0x774>)
 800d868:	4013      	ands	r3, r2
 800d86a:	687a      	ldr	r2, [r7, #4]
 800d86c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800d86e:	687a      	ldr	r2, [r7, #4]
 800d870:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800d872:	0112      	lsls	r2, r2, #4
 800d874:	430a      	orrs	r2, r1
 800d876:	4931      	ldr	r1, [pc, #196]	@ (800d93c <HAL_RCC_OscConfig+0x76c>)
 800d878:	4313      	orrs	r3, r2
 800d87a:	628b      	str	r3, [r1, #40]	@ 0x28
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d880:	3b01      	subs	r3, #1
 800d882:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d88a:	3b01      	subs	r3, #1
 800d88c:	025b      	lsls	r3, r3, #9
 800d88e:	b29b      	uxth	r3, r3
 800d890:	431a      	orrs	r2, r3
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d896:	3b01      	subs	r3, #1
 800d898:	041b      	lsls	r3, r3, #16
 800d89a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800d89e:	431a      	orrs	r2, r3
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d8a4:	3b01      	subs	r3, #1
 800d8a6:	061b      	lsls	r3, r3, #24
 800d8a8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800d8ac:	4923      	ldr	r1, [pc, #140]	@ (800d93c <HAL_RCC_OscConfig+0x76c>)
 800d8ae:	4313      	orrs	r3, r2
 800d8b0:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800d8b2:	4b22      	ldr	r3, [pc, #136]	@ (800d93c <HAL_RCC_OscConfig+0x76c>)
 800d8b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d8b6:	4a21      	ldr	r2, [pc, #132]	@ (800d93c <HAL_RCC_OscConfig+0x76c>)
 800d8b8:	f023 0301 	bic.w	r3, r3, #1
 800d8bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800d8be:	4b1f      	ldr	r3, [pc, #124]	@ (800d93c <HAL_RCC_OscConfig+0x76c>)
 800d8c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d8c2:	4b21      	ldr	r3, [pc, #132]	@ (800d948 <HAL_RCC_OscConfig+0x778>)
 800d8c4:	4013      	ands	r3, r2
 800d8c6:	687a      	ldr	r2, [r7, #4]
 800d8c8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800d8ca:	00d2      	lsls	r2, r2, #3
 800d8cc:	491b      	ldr	r1, [pc, #108]	@ (800d93c <HAL_RCC_OscConfig+0x76c>)
 800d8ce:	4313      	orrs	r3, r2
 800d8d0:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800d8d2:	4b1a      	ldr	r3, [pc, #104]	@ (800d93c <HAL_RCC_OscConfig+0x76c>)
 800d8d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d8d6:	f023 020c 	bic.w	r2, r3, #12
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d8de:	4917      	ldr	r1, [pc, #92]	@ (800d93c <HAL_RCC_OscConfig+0x76c>)
 800d8e0:	4313      	orrs	r3, r2
 800d8e2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800d8e4:	4b15      	ldr	r3, [pc, #84]	@ (800d93c <HAL_RCC_OscConfig+0x76c>)
 800d8e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d8e8:	f023 0202 	bic.w	r2, r3, #2
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d8f0:	4912      	ldr	r1, [pc, #72]	@ (800d93c <HAL_RCC_OscConfig+0x76c>)
 800d8f2:	4313      	orrs	r3, r2
 800d8f4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800d8f6:	4b11      	ldr	r3, [pc, #68]	@ (800d93c <HAL_RCC_OscConfig+0x76c>)
 800d8f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d8fa:	4a10      	ldr	r2, [pc, #64]	@ (800d93c <HAL_RCC_OscConfig+0x76c>)
 800d8fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d900:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d902:	4b0e      	ldr	r3, [pc, #56]	@ (800d93c <HAL_RCC_OscConfig+0x76c>)
 800d904:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d906:	4a0d      	ldr	r2, [pc, #52]	@ (800d93c <HAL_RCC_OscConfig+0x76c>)
 800d908:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d90c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800d90e:	4b0b      	ldr	r3, [pc, #44]	@ (800d93c <HAL_RCC_OscConfig+0x76c>)
 800d910:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d912:	4a0a      	ldr	r2, [pc, #40]	@ (800d93c <HAL_RCC_OscConfig+0x76c>)
 800d914:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800d918:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800d91a:	4b08      	ldr	r3, [pc, #32]	@ (800d93c <HAL_RCC_OscConfig+0x76c>)
 800d91c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d91e:	4a07      	ldr	r2, [pc, #28]	@ (800d93c <HAL_RCC_OscConfig+0x76c>)
 800d920:	f043 0301 	orr.w	r3, r3, #1
 800d924:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800d926:	4b05      	ldr	r3, [pc, #20]	@ (800d93c <HAL_RCC_OscConfig+0x76c>)
 800d928:	681b      	ldr	r3, [r3, #0]
 800d92a:	4a04      	ldr	r2, [pc, #16]	@ (800d93c <HAL_RCC_OscConfig+0x76c>)
 800d92c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800d930:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d932:	f7f5 fdcf 	bl	80034d4 <HAL_GetTick>
 800d936:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800d938:	e011      	b.n	800d95e <HAL_RCC_OscConfig+0x78e>
 800d93a:	bf00      	nop
 800d93c:	58024400 	.word	0x58024400
 800d940:	58024800 	.word	0x58024800
 800d944:	fffffc0c 	.word	0xfffffc0c
 800d948:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d94c:	f7f5 fdc2 	bl	80034d4 <HAL_GetTick>
 800d950:	4602      	mov	r2, r0
 800d952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d954:	1ad3      	subs	r3, r2, r3
 800d956:	2b02      	cmp	r3, #2
 800d958:	d901      	bls.n	800d95e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800d95a:	2303      	movs	r3, #3
 800d95c:	e08a      	b.n	800da74 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800d95e:	4b47      	ldr	r3, [pc, #284]	@ (800da7c <HAL_RCC_OscConfig+0x8ac>)
 800d960:	681b      	ldr	r3, [r3, #0]
 800d962:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d966:	2b00      	cmp	r3, #0
 800d968:	d0f0      	beq.n	800d94c <HAL_RCC_OscConfig+0x77c>
 800d96a:	e082      	b.n	800da72 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d96c:	4b43      	ldr	r3, [pc, #268]	@ (800da7c <HAL_RCC_OscConfig+0x8ac>)
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	4a42      	ldr	r2, [pc, #264]	@ (800da7c <HAL_RCC_OscConfig+0x8ac>)
 800d972:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800d976:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d978:	f7f5 fdac 	bl	80034d4 <HAL_GetTick>
 800d97c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800d97e:	e008      	b.n	800d992 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d980:	f7f5 fda8 	bl	80034d4 <HAL_GetTick>
 800d984:	4602      	mov	r2, r0
 800d986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d988:	1ad3      	subs	r3, r2, r3
 800d98a:	2b02      	cmp	r3, #2
 800d98c:	d901      	bls.n	800d992 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800d98e:	2303      	movs	r3, #3
 800d990:	e070      	b.n	800da74 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800d992:	4b3a      	ldr	r3, [pc, #232]	@ (800da7c <HAL_RCC_OscConfig+0x8ac>)
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d1f0      	bne.n	800d980 <HAL_RCC_OscConfig+0x7b0>
 800d99e:	e068      	b.n	800da72 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800d9a0:	4b36      	ldr	r3, [pc, #216]	@ (800da7c <HAL_RCC_OscConfig+0x8ac>)
 800d9a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d9a4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800d9a6:	4b35      	ldr	r3, [pc, #212]	@ (800da7c <HAL_RCC_OscConfig+0x8ac>)
 800d9a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d9aa:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d9b0:	2b01      	cmp	r3, #1
 800d9b2:	d031      	beq.n	800da18 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d9b4:	693b      	ldr	r3, [r7, #16]
 800d9b6:	f003 0203 	and.w	r2, r3, #3
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d9be:	429a      	cmp	r2, r3
 800d9c0:	d12a      	bne.n	800da18 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800d9c2:	693b      	ldr	r3, [r7, #16]
 800d9c4:	091b      	lsrs	r3, r3, #4
 800d9c6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d9ce:	429a      	cmp	r2, r3
 800d9d0:	d122      	bne.n	800da18 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800d9d2:	68fb      	ldr	r3, [r7, #12]
 800d9d4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d9dc:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800d9de:	429a      	cmp	r2, r3
 800d9e0:	d11a      	bne.n	800da18 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800d9e2:	68fb      	ldr	r3, [r7, #12]
 800d9e4:	0a5b      	lsrs	r3, r3, #9
 800d9e6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d9ee:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800d9f0:	429a      	cmp	r2, r3
 800d9f2:	d111      	bne.n	800da18 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800d9f4:	68fb      	ldr	r3, [r7, #12]
 800d9f6:	0c1b      	lsrs	r3, r3, #16
 800d9f8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800da00:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800da02:	429a      	cmp	r2, r3
 800da04:	d108      	bne.n	800da18 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	0e1b      	lsrs	r3, r3, #24
 800da0a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800da12:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800da14:	429a      	cmp	r2, r3
 800da16:	d001      	beq.n	800da1c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800da18:	2301      	movs	r3, #1
 800da1a:	e02b      	b.n	800da74 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800da1c:	4b17      	ldr	r3, [pc, #92]	@ (800da7c <HAL_RCC_OscConfig+0x8ac>)
 800da1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800da20:	08db      	lsrs	r3, r3, #3
 800da22:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800da26:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800da2c:	693a      	ldr	r2, [r7, #16]
 800da2e:	429a      	cmp	r2, r3
 800da30:	d01f      	beq.n	800da72 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800da32:	4b12      	ldr	r3, [pc, #72]	@ (800da7c <HAL_RCC_OscConfig+0x8ac>)
 800da34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da36:	4a11      	ldr	r2, [pc, #68]	@ (800da7c <HAL_RCC_OscConfig+0x8ac>)
 800da38:	f023 0301 	bic.w	r3, r3, #1
 800da3c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800da3e:	f7f5 fd49 	bl	80034d4 <HAL_GetTick>
 800da42:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800da44:	bf00      	nop
 800da46:	f7f5 fd45 	bl	80034d4 <HAL_GetTick>
 800da4a:	4602      	mov	r2, r0
 800da4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da4e:	4293      	cmp	r3, r2
 800da50:	d0f9      	beq.n	800da46 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800da52:	4b0a      	ldr	r3, [pc, #40]	@ (800da7c <HAL_RCC_OscConfig+0x8ac>)
 800da54:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800da56:	4b0a      	ldr	r3, [pc, #40]	@ (800da80 <HAL_RCC_OscConfig+0x8b0>)
 800da58:	4013      	ands	r3, r2
 800da5a:	687a      	ldr	r2, [r7, #4]
 800da5c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800da5e:	00d2      	lsls	r2, r2, #3
 800da60:	4906      	ldr	r1, [pc, #24]	@ (800da7c <HAL_RCC_OscConfig+0x8ac>)
 800da62:	4313      	orrs	r3, r2
 800da64:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800da66:	4b05      	ldr	r3, [pc, #20]	@ (800da7c <HAL_RCC_OscConfig+0x8ac>)
 800da68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da6a:	4a04      	ldr	r2, [pc, #16]	@ (800da7c <HAL_RCC_OscConfig+0x8ac>)
 800da6c:	f043 0301 	orr.w	r3, r3, #1
 800da70:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800da72:	2300      	movs	r3, #0
}
 800da74:	4618      	mov	r0, r3
 800da76:	3730      	adds	r7, #48	@ 0x30
 800da78:	46bd      	mov	sp, r7
 800da7a:	bd80      	pop	{r7, pc}
 800da7c:	58024400 	.word	0x58024400
 800da80:	ffff0007 	.word	0xffff0007

0800da84 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800da84:	b580      	push	{r7, lr}
 800da86:	b086      	sub	sp, #24
 800da88:	af00      	add	r7, sp, #0
 800da8a:	6078      	str	r0, [r7, #4]
 800da8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	2b00      	cmp	r3, #0
 800da92:	d101      	bne.n	800da98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800da94:	2301      	movs	r3, #1
 800da96:	e19c      	b.n	800ddd2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800da98:	4b8a      	ldr	r3, [pc, #552]	@ (800dcc4 <HAL_RCC_ClockConfig+0x240>)
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	f003 030f 	and.w	r3, r3, #15
 800daa0:	683a      	ldr	r2, [r7, #0]
 800daa2:	429a      	cmp	r2, r3
 800daa4:	d910      	bls.n	800dac8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800daa6:	4b87      	ldr	r3, [pc, #540]	@ (800dcc4 <HAL_RCC_ClockConfig+0x240>)
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	f023 020f 	bic.w	r2, r3, #15
 800daae:	4985      	ldr	r1, [pc, #532]	@ (800dcc4 <HAL_RCC_ClockConfig+0x240>)
 800dab0:	683b      	ldr	r3, [r7, #0]
 800dab2:	4313      	orrs	r3, r2
 800dab4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800dab6:	4b83      	ldr	r3, [pc, #524]	@ (800dcc4 <HAL_RCC_ClockConfig+0x240>)
 800dab8:	681b      	ldr	r3, [r3, #0]
 800daba:	f003 030f 	and.w	r3, r3, #15
 800dabe:	683a      	ldr	r2, [r7, #0]
 800dac0:	429a      	cmp	r2, r3
 800dac2:	d001      	beq.n	800dac8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800dac4:	2301      	movs	r3, #1
 800dac6:	e184      	b.n	800ddd2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	f003 0304 	and.w	r3, r3, #4
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d010      	beq.n	800daf6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	691a      	ldr	r2, [r3, #16]
 800dad8:	4b7b      	ldr	r3, [pc, #492]	@ (800dcc8 <HAL_RCC_ClockConfig+0x244>)
 800dada:	699b      	ldr	r3, [r3, #24]
 800dadc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800dae0:	429a      	cmp	r2, r3
 800dae2:	d908      	bls.n	800daf6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800dae4:	4b78      	ldr	r3, [pc, #480]	@ (800dcc8 <HAL_RCC_ClockConfig+0x244>)
 800dae6:	699b      	ldr	r3, [r3, #24]
 800dae8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	691b      	ldr	r3, [r3, #16]
 800daf0:	4975      	ldr	r1, [pc, #468]	@ (800dcc8 <HAL_RCC_ClockConfig+0x244>)
 800daf2:	4313      	orrs	r3, r2
 800daf4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	681b      	ldr	r3, [r3, #0]
 800dafa:	f003 0308 	and.w	r3, r3, #8
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d010      	beq.n	800db24 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	695a      	ldr	r2, [r3, #20]
 800db06:	4b70      	ldr	r3, [pc, #448]	@ (800dcc8 <HAL_RCC_ClockConfig+0x244>)
 800db08:	69db      	ldr	r3, [r3, #28]
 800db0a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800db0e:	429a      	cmp	r2, r3
 800db10:	d908      	bls.n	800db24 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800db12:	4b6d      	ldr	r3, [pc, #436]	@ (800dcc8 <HAL_RCC_ClockConfig+0x244>)
 800db14:	69db      	ldr	r3, [r3, #28]
 800db16:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	695b      	ldr	r3, [r3, #20]
 800db1e:	496a      	ldr	r1, [pc, #424]	@ (800dcc8 <HAL_RCC_ClockConfig+0x244>)
 800db20:	4313      	orrs	r3, r2
 800db22:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	681b      	ldr	r3, [r3, #0]
 800db28:	f003 0310 	and.w	r3, r3, #16
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d010      	beq.n	800db52 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	699a      	ldr	r2, [r3, #24]
 800db34:	4b64      	ldr	r3, [pc, #400]	@ (800dcc8 <HAL_RCC_ClockConfig+0x244>)
 800db36:	69db      	ldr	r3, [r3, #28]
 800db38:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800db3c:	429a      	cmp	r2, r3
 800db3e:	d908      	bls.n	800db52 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800db40:	4b61      	ldr	r3, [pc, #388]	@ (800dcc8 <HAL_RCC_ClockConfig+0x244>)
 800db42:	69db      	ldr	r3, [r3, #28]
 800db44:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	699b      	ldr	r3, [r3, #24]
 800db4c:	495e      	ldr	r1, [pc, #376]	@ (800dcc8 <HAL_RCC_ClockConfig+0x244>)
 800db4e:	4313      	orrs	r3, r2
 800db50:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	f003 0320 	and.w	r3, r3, #32
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d010      	beq.n	800db80 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	69da      	ldr	r2, [r3, #28]
 800db62:	4b59      	ldr	r3, [pc, #356]	@ (800dcc8 <HAL_RCC_ClockConfig+0x244>)
 800db64:	6a1b      	ldr	r3, [r3, #32]
 800db66:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800db6a:	429a      	cmp	r2, r3
 800db6c:	d908      	bls.n	800db80 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800db6e:	4b56      	ldr	r3, [pc, #344]	@ (800dcc8 <HAL_RCC_ClockConfig+0x244>)
 800db70:	6a1b      	ldr	r3, [r3, #32]
 800db72:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	69db      	ldr	r3, [r3, #28]
 800db7a:	4953      	ldr	r1, [pc, #332]	@ (800dcc8 <HAL_RCC_ClockConfig+0x244>)
 800db7c:	4313      	orrs	r3, r2
 800db7e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	f003 0302 	and.w	r3, r3, #2
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d010      	beq.n	800dbae <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	68da      	ldr	r2, [r3, #12]
 800db90:	4b4d      	ldr	r3, [pc, #308]	@ (800dcc8 <HAL_RCC_ClockConfig+0x244>)
 800db92:	699b      	ldr	r3, [r3, #24]
 800db94:	f003 030f 	and.w	r3, r3, #15
 800db98:	429a      	cmp	r2, r3
 800db9a:	d908      	bls.n	800dbae <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800db9c:	4b4a      	ldr	r3, [pc, #296]	@ (800dcc8 <HAL_RCC_ClockConfig+0x244>)
 800db9e:	699b      	ldr	r3, [r3, #24]
 800dba0:	f023 020f 	bic.w	r2, r3, #15
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	68db      	ldr	r3, [r3, #12]
 800dba8:	4947      	ldr	r1, [pc, #284]	@ (800dcc8 <HAL_RCC_ClockConfig+0x244>)
 800dbaa:	4313      	orrs	r3, r2
 800dbac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	f003 0301 	and.w	r3, r3, #1
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	d055      	beq.n	800dc66 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800dbba:	4b43      	ldr	r3, [pc, #268]	@ (800dcc8 <HAL_RCC_ClockConfig+0x244>)
 800dbbc:	699b      	ldr	r3, [r3, #24]
 800dbbe:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	689b      	ldr	r3, [r3, #8]
 800dbc6:	4940      	ldr	r1, [pc, #256]	@ (800dcc8 <HAL_RCC_ClockConfig+0x244>)
 800dbc8:	4313      	orrs	r3, r2
 800dbca:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	685b      	ldr	r3, [r3, #4]
 800dbd0:	2b02      	cmp	r3, #2
 800dbd2:	d107      	bne.n	800dbe4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800dbd4:	4b3c      	ldr	r3, [pc, #240]	@ (800dcc8 <HAL_RCC_ClockConfig+0x244>)
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d121      	bne.n	800dc24 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800dbe0:	2301      	movs	r3, #1
 800dbe2:	e0f6      	b.n	800ddd2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	685b      	ldr	r3, [r3, #4]
 800dbe8:	2b03      	cmp	r3, #3
 800dbea:	d107      	bne.n	800dbfc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800dbec:	4b36      	ldr	r3, [pc, #216]	@ (800dcc8 <HAL_RCC_ClockConfig+0x244>)
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d115      	bne.n	800dc24 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800dbf8:	2301      	movs	r3, #1
 800dbfa:	e0ea      	b.n	800ddd2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	685b      	ldr	r3, [r3, #4]
 800dc00:	2b01      	cmp	r3, #1
 800dc02:	d107      	bne.n	800dc14 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800dc04:	4b30      	ldr	r3, [pc, #192]	@ (800dcc8 <HAL_RCC_ClockConfig+0x244>)
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	d109      	bne.n	800dc24 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800dc10:	2301      	movs	r3, #1
 800dc12:	e0de      	b.n	800ddd2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800dc14:	4b2c      	ldr	r3, [pc, #176]	@ (800dcc8 <HAL_RCC_ClockConfig+0x244>)
 800dc16:	681b      	ldr	r3, [r3, #0]
 800dc18:	f003 0304 	and.w	r3, r3, #4
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d101      	bne.n	800dc24 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800dc20:	2301      	movs	r3, #1
 800dc22:	e0d6      	b.n	800ddd2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800dc24:	4b28      	ldr	r3, [pc, #160]	@ (800dcc8 <HAL_RCC_ClockConfig+0x244>)
 800dc26:	691b      	ldr	r3, [r3, #16]
 800dc28:	f023 0207 	bic.w	r2, r3, #7
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	685b      	ldr	r3, [r3, #4]
 800dc30:	4925      	ldr	r1, [pc, #148]	@ (800dcc8 <HAL_RCC_ClockConfig+0x244>)
 800dc32:	4313      	orrs	r3, r2
 800dc34:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dc36:	f7f5 fc4d 	bl	80034d4 <HAL_GetTick>
 800dc3a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800dc3c:	e00a      	b.n	800dc54 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800dc3e:	f7f5 fc49 	bl	80034d4 <HAL_GetTick>
 800dc42:	4602      	mov	r2, r0
 800dc44:	697b      	ldr	r3, [r7, #20]
 800dc46:	1ad3      	subs	r3, r2, r3
 800dc48:	f241 3288 	movw	r2, #5000	@ 0x1388
 800dc4c:	4293      	cmp	r3, r2
 800dc4e:	d901      	bls.n	800dc54 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800dc50:	2303      	movs	r3, #3
 800dc52:	e0be      	b.n	800ddd2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800dc54:	4b1c      	ldr	r3, [pc, #112]	@ (800dcc8 <HAL_RCC_ClockConfig+0x244>)
 800dc56:	691b      	ldr	r3, [r3, #16]
 800dc58:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	685b      	ldr	r3, [r3, #4]
 800dc60:	00db      	lsls	r3, r3, #3
 800dc62:	429a      	cmp	r2, r3
 800dc64:	d1eb      	bne.n	800dc3e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	f003 0302 	and.w	r3, r3, #2
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	d010      	beq.n	800dc94 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	68da      	ldr	r2, [r3, #12]
 800dc76:	4b14      	ldr	r3, [pc, #80]	@ (800dcc8 <HAL_RCC_ClockConfig+0x244>)
 800dc78:	699b      	ldr	r3, [r3, #24]
 800dc7a:	f003 030f 	and.w	r3, r3, #15
 800dc7e:	429a      	cmp	r2, r3
 800dc80:	d208      	bcs.n	800dc94 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800dc82:	4b11      	ldr	r3, [pc, #68]	@ (800dcc8 <HAL_RCC_ClockConfig+0x244>)
 800dc84:	699b      	ldr	r3, [r3, #24]
 800dc86:	f023 020f 	bic.w	r2, r3, #15
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	68db      	ldr	r3, [r3, #12]
 800dc8e:	490e      	ldr	r1, [pc, #56]	@ (800dcc8 <HAL_RCC_ClockConfig+0x244>)
 800dc90:	4313      	orrs	r3, r2
 800dc92:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800dc94:	4b0b      	ldr	r3, [pc, #44]	@ (800dcc4 <HAL_RCC_ClockConfig+0x240>)
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	f003 030f 	and.w	r3, r3, #15
 800dc9c:	683a      	ldr	r2, [r7, #0]
 800dc9e:	429a      	cmp	r2, r3
 800dca0:	d214      	bcs.n	800dccc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800dca2:	4b08      	ldr	r3, [pc, #32]	@ (800dcc4 <HAL_RCC_ClockConfig+0x240>)
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	f023 020f 	bic.w	r2, r3, #15
 800dcaa:	4906      	ldr	r1, [pc, #24]	@ (800dcc4 <HAL_RCC_ClockConfig+0x240>)
 800dcac:	683b      	ldr	r3, [r7, #0]
 800dcae:	4313      	orrs	r3, r2
 800dcb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800dcb2:	4b04      	ldr	r3, [pc, #16]	@ (800dcc4 <HAL_RCC_ClockConfig+0x240>)
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	f003 030f 	and.w	r3, r3, #15
 800dcba:	683a      	ldr	r2, [r7, #0]
 800dcbc:	429a      	cmp	r2, r3
 800dcbe:	d005      	beq.n	800dccc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800dcc0:	2301      	movs	r3, #1
 800dcc2:	e086      	b.n	800ddd2 <HAL_RCC_ClockConfig+0x34e>
 800dcc4:	52002000 	.word	0x52002000
 800dcc8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	f003 0304 	and.w	r3, r3, #4
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	d010      	beq.n	800dcfa <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	691a      	ldr	r2, [r3, #16]
 800dcdc:	4b3f      	ldr	r3, [pc, #252]	@ (800dddc <HAL_RCC_ClockConfig+0x358>)
 800dcde:	699b      	ldr	r3, [r3, #24]
 800dce0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800dce4:	429a      	cmp	r2, r3
 800dce6:	d208      	bcs.n	800dcfa <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800dce8:	4b3c      	ldr	r3, [pc, #240]	@ (800dddc <HAL_RCC_ClockConfig+0x358>)
 800dcea:	699b      	ldr	r3, [r3, #24]
 800dcec:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	691b      	ldr	r3, [r3, #16]
 800dcf4:	4939      	ldr	r1, [pc, #228]	@ (800dddc <HAL_RCC_ClockConfig+0x358>)
 800dcf6:	4313      	orrs	r3, r2
 800dcf8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	f003 0308 	and.w	r3, r3, #8
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d010      	beq.n	800dd28 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	695a      	ldr	r2, [r3, #20]
 800dd0a:	4b34      	ldr	r3, [pc, #208]	@ (800dddc <HAL_RCC_ClockConfig+0x358>)
 800dd0c:	69db      	ldr	r3, [r3, #28]
 800dd0e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800dd12:	429a      	cmp	r2, r3
 800dd14:	d208      	bcs.n	800dd28 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800dd16:	4b31      	ldr	r3, [pc, #196]	@ (800dddc <HAL_RCC_ClockConfig+0x358>)
 800dd18:	69db      	ldr	r3, [r3, #28]
 800dd1a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	695b      	ldr	r3, [r3, #20]
 800dd22:	492e      	ldr	r1, [pc, #184]	@ (800dddc <HAL_RCC_ClockConfig+0x358>)
 800dd24:	4313      	orrs	r3, r2
 800dd26:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	f003 0310 	and.w	r3, r3, #16
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d010      	beq.n	800dd56 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	699a      	ldr	r2, [r3, #24]
 800dd38:	4b28      	ldr	r3, [pc, #160]	@ (800dddc <HAL_RCC_ClockConfig+0x358>)
 800dd3a:	69db      	ldr	r3, [r3, #28]
 800dd3c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800dd40:	429a      	cmp	r2, r3
 800dd42:	d208      	bcs.n	800dd56 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800dd44:	4b25      	ldr	r3, [pc, #148]	@ (800dddc <HAL_RCC_ClockConfig+0x358>)
 800dd46:	69db      	ldr	r3, [r3, #28]
 800dd48:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	699b      	ldr	r3, [r3, #24]
 800dd50:	4922      	ldr	r1, [pc, #136]	@ (800dddc <HAL_RCC_ClockConfig+0x358>)
 800dd52:	4313      	orrs	r3, r2
 800dd54:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	681b      	ldr	r3, [r3, #0]
 800dd5a:	f003 0320 	and.w	r3, r3, #32
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d010      	beq.n	800dd84 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	69da      	ldr	r2, [r3, #28]
 800dd66:	4b1d      	ldr	r3, [pc, #116]	@ (800dddc <HAL_RCC_ClockConfig+0x358>)
 800dd68:	6a1b      	ldr	r3, [r3, #32]
 800dd6a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800dd6e:	429a      	cmp	r2, r3
 800dd70:	d208      	bcs.n	800dd84 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800dd72:	4b1a      	ldr	r3, [pc, #104]	@ (800dddc <HAL_RCC_ClockConfig+0x358>)
 800dd74:	6a1b      	ldr	r3, [r3, #32]
 800dd76:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	69db      	ldr	r3, [r3, #28]
 800dd7e:	4917      	ldr	r1, [pc, #92]	@ (800dddc <HAL_RCC_ClockConfig+0x358>)
 800dd80:	4313      	orrs	r3, r2
 800dd82:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800dd84:	f000 f834 	bl	800ddf0 <HAL_RCC_GetSysClockFreq>
 800dd88:	4602      	mov	r2, r0
 800dd8a:	4b14      	ldr	r3, [pc, #80]	@ (800dddc <HAL_RCC_ClockConfig+0x358>)
 800dd8c:	699b      	ldr	r3, [r3, #24]
 800dd8e:	0a1b      	lsrs	r3, r3, #8
 800dd90:	f003 030f 	and.w	r3, r3, #15
 800dd94:	4912      	ldr	r1, [pc, #72]	@ (800dde0 <HAL_RCC_ClockConfig+0x35c>)
 800dd96:	5ccb      	ldrb	r3, [r1, r3]
 800dd98:	f003 031f 	and.w	r3, r3, #31
 800dd9c:	fa22 f303 	lsr.w	r3, r2, r3
 800dda0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800dda2:	4b0e      	ldr	r3, [pc, #56]	@ (800dddc <HAL_RCC_ClockConfig+0x358>)
 800dda4:	699b      	ldr	r3, [r3, #24]
 800dda6:	f003 030f 	and.w	r3, r3, #15
 800ddaa:	4a0d      	ldr	r2, [pc, #52]	@ (800dde0 <HAL_RCC_ClockConfig+0x35c>)
 800ddac:	5cd3      	ldrb	r3, [r2, r3]
 800ddae:	f003 031f 	and.w	r3, r3, #31
 800ddb2:	693a      	ldr	r2, [r7, #16]
 800ddb4:	fa22 f303 	lsr.w	r3, r2, r3
 800ddb8:	4a0a      	ldr	r2, [pc, #40]	@ (800dde4 <HAL_RCC_ClockConfig+0x360>)
 800ddba:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800ddbc:	4a0a      	ldr	r2, [pc, #40]	@ (800dde8 <HAL_RCC_ClockConfig+0x364>)
 800ddbe:	693b      	ldr	r3, [r7, #16]
 800ddc0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800ddc2:	4b0a      	ldr	r3, [pc, #40]	@ (800ddec <HAL_RCC_ClockConfig+0x368>)
 800ddc4:	681b      	ldr	r3, [r3, #0]
 800ddc6:	4618      	mov	r0, r3
 800ddc8:	f7f5 fb3a 	bl	8003440 <HAL_InitTick>
 800ddcc:	4603      	mov	r3, r0
 800ddce:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800ddd0:	7bfb      	ldrb	r3, [r7, #15]
}
 800ddd2:	4618      	mov	r0, r3
 800ddd4:	3718      	adds	r7, #24
 800ddd6:	46bd      	mov	sp, r7
 800ddd8:	bd80      	pop	{r7, pc}
 800ddda:	bf00      	nop
 800dddc:	58024400 	.word	0x58024400
 800dde0:	0801b45c 	.word	0x0801b45c
 800dde4:	2400001c 	.word	0x2400001c
 800dde8:	24000018 	.word	0x24000018
 800ddec:	24000020 	.word	0x24000020

0800ddf0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ddf0:	b480      	push	{r7}
 800ddf2:	b089      	sub	sp, #36	@ 0x24
 800ddf4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ddf6:	4bb3      	ldr	r3, [pc, #716]	@ (800e0c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ddf8:	691b      	ldr	r3, [r3, #16]
 800ddfa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ddfe:	2b18      	cmp	r3, #24
 800de00:	f200 8155 	bhi.w	800e0ae <HAL_RCC_GetSysClockFreq+0x2be>
 800de04:	a201      	add	r2, pc, #4	@ (adr r2, 800de0c <HAL_RCC_GetSysClockFreq+0x1c>)
 800de06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de0a:	bf00      	nop
 800de0c:	0800de71 	.word	0x0800de71
 800de10:	0800e0af 	.word	0x0800e0af
 800de14:	0800e0af 	.word	0x0800e0af
 800de18:	0800e0af 	.word	0x0800e0af
 800de1c:	0800e0af 	.word	0x0800e0af
 800de20:	0800e0af 	.word	0x0800e0af
 800de24:	0800e0af 	.word	0x0800e0af
 800de28:	0800e0af 	.word	0x0800e0af
 800de2c:	0800de97 	.word	0x0800de97
 800de30:	0800e0af 	.word	0x0800e0af
 800de34:	0800e0af 	.word	0x0800e0af
 800de38:	0800e0af 	.word	0x0800e0af
 800de3c:	0800e0af 	.word	0x0800e0af
 800de40:	0800e0af 	.word	0x0800e0af
 800de44:	0800e0af 	.word	0x0800e0af
 800de48:	0800e0af 	.word	0x0800e0af
 800de4c:	0800de9d 	.word	0x0800de9d
 800de50:	0800e0af 	.word	0x0800e0af
 800de54:	0800e0af 	.word	0x0800e0af
 800de58:	0800e0af 	.word	0x0800e0af
 800de5c:	0800e0af 	.word	0x0800e0af
 800de60:	0800e0af 	.word	0x0800e0af
 800de64:	0800e0af 	.word	0x0800e0af
 800de68:	0800e0af 	.word	0x0800e0af
 800de6c:	0800dea3 	.word	0x0800dea3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800de70:	4b94      	ldr	r3, [pc, #592]	@ (800e0c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800de72:	681b      	ldr	r3, [r3, #0]
 800de74:	f003 0320 	and.w	r3, r3, #32
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d009      	beq.n	800de90 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800de7c:	4b91      	ldr	r3, [pc, #580]	@ (800e0c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	08db      	lsrs	r3, r3, #3
 800de82:	f003 0303 	and.w	r3, r3, #3
 800de86:	4a90      	ldr	r2, [pc, #576]	@ (800e0c8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800de88:	fa22 f303 	lsr.w	r3, r2, r3
 800de8c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800de8e:	e111      	b.n	800e0b4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800de90:	4b8d      	ldr	r3, [pc, #564]	@ (800e0c8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800de92:	61bb      	str	r3, [r7, #24]
      break;
 800de94:	e10e      	b.n	800e0b4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800de96:	4b8d      	ldr	r3, [pc, #564]	@ (800e0cc <HAL_RCC_GetSysClockFreq+0x2dc>)
 800de98:	61bb      	str	r3, [r7, #24]
      break;
 800de9a:	e10b      	b.n	800e0b4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800de9c:	4b8c      	ldr	r3, [pc, #560]	@ (800e0d0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800de9e:	61bb      	str	r3, [r7, #24]
      break;
 800dea0:	e108      	b.n	800e0b4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800dea2:	4b88      	ldr	r3, [pc, #544]	@ (800e0c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800dea4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dea6:	f003 0303 	and.w	r3, r3, #3
 800deaa:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800deac:	4b85      	ldr	r3, [pc, #532]	@ (800e0c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800deae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800deb0:	091b      	lsrs	r3, r3, #4
 800deb2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800deb6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800deb8:	4b82      	ldr	r3, [pc, #520]	@ (800e0c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800deba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800debc:	f003 0301 	and.w	r3, r3, #1
 800dec0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800dec2:	4b80      	ldr	r3, [pc, #512]	@ (800e0c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800dec4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dec6:	08db      	lsrs	r3, r3, #3
 800dec8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800decc:	68fa      	ldr	r2, [r7, #12]
 800dece:	fb02 f303 	mul.w	r3, r2, r3
 800ded2:	ee07 3a90 	vmov	s15, r3
 800ded6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800deda:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800dede:	693b      	ldr	r3, [r7, #16]
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	f000 80e1 	beq.w	800e0a8 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 800dee6:	697b      	ldr	r3, [r7, #20]
 800dee8:	2b02      	cmp	r3, #2
 800deea:	f000 8083 	beq.w	800dff4 <HAL_RCC_GetSysClockFreq+0x204>
 800deee:	697b      	ldr	r3, [r7, #20]
 800def0:	2b02      	cmp	r3, #2
 800def2:	f200 80a1 	bhi.w	800e038 <HAL_RCC_GetSysClockFreq+0x248>
 800def6:	697b      	ldr	r3, [r7, #20]
 800def8:	2b00      	cmp	r3, #0
 800defa:	d003      	beq.n	800df04 <HAL_RCC_GetSysClockFreq+0x114>
 800defc:	697b      	ldr	r3, [r7, #20]
 800defe:	2b01      	cmp	r3, #1
 800df00:	d056      	beq.n	800dfb0 <HAL_RCC_GetSysClockFreq+0x1c0>
 800df02:	e099      	b.n	800e038 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800df04:	4b6f      	ldr	r3, [pc, #444]	@ (800e0c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800df06:	681b      	ldr	r3, [r3, #0]
 800df08:	f003 0320 	and.w	r3, r3, #32
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d02d      	beq.n	800df6c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800df10:	4b6c      	ldr	r3, [pc, #432]	@ (800e0c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	08db      	lsrs	r3, r3, #3
 800df16:	f003 0303 	and.w	r3, r3, #3
 800df1a:	4a6b      	ldr	r2, [pc, #428]	@ (800e0c8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800df1c:	fa22 f303 	lsr.w	r3, r2, r3
 800df20:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	ee07 3a90 	vmov	s15, r3
 800df28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800df2c:	693b      	ldr	r3, [r7, #16]
 800df2e:	ee07 3a90 	vmov	s15, r3
 800df32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800df36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800df3a:	4b62      	ldr	r3, [pc, #392]	@ (800e0c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800df3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800df3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800df42:	ee07 3a90 	vmov	s15, r3
 800df46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800df4a:	ed97 6a02 	vldr	s12, [r7, #8]
 800df4e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800e0d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800df52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800df56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800df5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800df5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800df62:	ee67 7a27 	vmul.f32	s15, s14, s15
 800df66:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800df6a:	e087      	b.n	800e07c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800df6c:	693b      	ldr	r3, [r7, #16]
 800df6e:	ee07 3a90 	vmov	s15, r3
 800df72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800df76:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800e0d8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800df7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800df7e:	4b51      	ldr	r3, [pc, #324]	@ (800e0c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800df80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800df82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800df86:	ee07 3a90 	vmov	s15, r3
 800df8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800df8e:	ed97 6a02 	vldr	s12, [r7, #8]
 800df92:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800e0d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800df96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800df9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800df9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800dfa2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dfa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dfaa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800dfae:	e065      	b.n	800e07c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800dfb0:	693b      	ldr	r3, [r7, #16]
 800dfb2:	ee07 3a90 	vmov	s15, r3
 800dfb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dfba:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800e0dc <HAL_RCC_GetSysClockFreq+0x2ec>
 800dfbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dfc2:	4b40      	ldr	r3, [pc, #256]	@ (800e0c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800dfc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dfc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dfca:	ee07 3a90 	vmov	s15, r3
 800dfce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dfd2:	ed97 6a02 	vldr	s12, [r7, #8]
 800dfd6:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800e0d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800dfda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dfde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dfe2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800dfe6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dfea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dfee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800dff2:	e043      	b.n	800e07c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800dff4:	693b      	ldr	r3, [r7, #16]
 800dff6:	ee07 3a90 	vmov	s15, r3
 800dffa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dffe:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800e0e0 <HAL_RCC_GetSysClockFreq+0x2f0>
 800e002:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e006:	4b2f      	ldr	r3, [pc, #188]	@ (800e0c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e00a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e00e:	ee07 3a90 	vmov	s15, r3
 800e012:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e016:	ed97 6a02 	vldr	s12, [r7, #8]
 800e01a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800e0d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800e01e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e022:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e026:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e02a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e02e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e032:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800e036:	e021      	b.n	800e07c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e038:	693b      	ldr	r3, [r7, #16]
 800e03a:	ee07 3a90 	vmov	s15, r3
 800e03e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e042:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800e0dc <HAL_RCC_GetSysClockFreq+0x2ec>
 800e046:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e04a:	4b1e      	ldr	r3, [pc, #120]	@ (800e0c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e04c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e04e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e052:	ee07 3a90 	vmov	s15, r3
 800e056:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e05a:	ed97 6a02 	vldr	s12, [r7, #8]
 800e05e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800e0d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800e062:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e066:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e06a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e06e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e072:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e076:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800e07a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800e07c:	4b11      	ldr	r3, [pc, #68]	@ (800e0c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e07e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e080:	0a5b      	lsrs	r3, r3, #9
 800e082:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e086:	3301      	adds	r3, #1
 800e088:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800e08a:	683b      	ldr	r3, [r7, #0]
 800e08c:	ee07 3a90 	vmov	s15, r3
 800e090:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800e094:	edd7 6a07 	vldr	s13, [r7, #28]
 800e098:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e09c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e0a0:	ee17 3a90 	vmov	r3, s15
 800e0a4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800e0a6:	e005      	b.n	800e0b4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800e0a8:	2300      	movs	r3, #0
 800e0aa:	61bb      	str	r3, [r7, #24]
      break;
 800e0ac:	e002      	b.n	800e0b4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800e0ae:	4b07      	ldr	r3, [pc, #28]	@ (800e0cc <HAL_RCC_GetSysClockFreq+0x2dc>)
 800e0b0:	61bb      	str	r3, [r7, #24]
      break;
 800e0b2:	bf00      	nop
  }

  return sysclockfreq;
 800e0b4:	69bb      	ldr	r3, [r7, #24]
}
 800e0b6:	4618      	mov	r0, r3
 800e0b8:	3724      	adds	r7, #36	@ 0x24
 800e0ba:	46bd      	mov	sp, r7
 800e0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0c0:	4770      	bx	lr
 800e0c2:	bf00      	nop
 800e0c4:	58024400 	.word	0x58024400
 800e0c8:	03d09000 	.word	0x03d09000
 800e0cc:	003d0900 	.word	0x003d0900
 800e0d0:	017d7840 	.word	0x017d7840
 800e0d4:	46000000 	.word	0x46000000
 800e0d8:	4c742400 	.word	0x4c742400
 800e0dc:	4a742400 	.word	0x4a742400
 800e0e0:	4bbebc20 	.word	0x4bbebc20

0800e0e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800e0e4:	b580      	push	{r7, lr}
 800e0e6:	b082      	sub	sp, #8
 800e0e8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800e0ea:	f7ff fe81 	bl	800ddf0 <HAL_RCC_GetSysClockFreq>
 800e0ee:	4602      	mov	r2, r0
 800e0f0:	4b10      	ldr	r3, [pc, #64]	@ (800e134 <HAL_RCC_GetHCLKFreq+0x50>)
 800e0f2:	699b      	ldr	r3, [r3, #24]
 800e0f4:	0a1b      	lsrs	r3, r3, #8
 800e0f6:	f003 030f 	and.w	r3, r3, #15
 800e0fa:	490f      	ldr	r1, [pc, #60]	@ (800e138 <HAL_RCC_GetHCLKFreq+0x54>)
 800e0fc:	5ccb      	ldrb	r3, [r1, r3]
 800e0fe:	f003 031f 	and.w	r3, r3, #31
 800e102:	fa22 f303 	lsr.w	r3, r2, r3
 800e106:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800e108:	4b0a      	ldr	r3, [pc, #40]	@ (800e134 <HAL_RCC_GetHCLKFreq+0x50>)
 800e10a:	699b      	ldr	r3, [r3, #24]
 800e10c:	f003 030f 	and.w	r3, r3, #15
 800e110:	4a09      	ldr	r2, [pc, #36]	@ (800e138 <HAL_RCC_GetHCLKFreq+0x54>)
 800e112:	5cd3      	ldrb	r3, [r2, r3]
 800e114:	f003 031f 	and.w	r3, r3, #31
 800e118:	687a      	ldr	r2, [r7, #4]
 800e11a:	fa22 f303 	lsr.w	r3, r2, r3
 800e11e:	4a07      	ldr	r2, [pc, #28]	@ (800e13c <HAL_RCC_GetHCLKFreq+0x58>)
 800e120:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800e122:	4a07      	ldr	r2, [pc, #28]	@ (800e140 <HAL_RCC_GetHCLKFreq+0x5c>)
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800e128:	4b04      	ldr	r3, [pc, #16]	@ (800e13c <HAL_RCC_GetHCLKFreq+0x58>)
 800e12a:	681b      	ldr	r3, [r3, #0]
}
 800e12c:	4618      	mov	r0, r3
 800e12e:	3708      	adds	r7, #8
 800e130:	46bd      	mov	sp, r7
 800e132:	bd80      	pop	{r7, pc}
 800e134:	58024400 	.word	0x58024400
 800e138:	0801b45c 	.word	0x0801b45c
 800e13c:	2400001c 	.word	0x2400001c
 800e140:	24000018 	.word	0x24000018

0800e144 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800e144:	b580      	push	{r7, lr}
 800e146:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800e148:	f7ff ffcc 	bl	800e0e4 <HAL_RCC_GetHCLKFreq>
 800e14c:	4602      	mov	r2, r0
 800e14e:	4b06      	ldr	r3, [pc, #24]	@ (800e168 <HAL_RCC_GetPCLK1Freq+0x24>)
 800e150:	69db      	ldr	r3, [r3, #28]
 800e152:	091b      	lsrs	r3, r3, #4
 800e154:	f003 0307 	and.w	r3, r3, #7
 800e158:	4904      	ldr	r1, [pc, #16]	@ (800e16c <HAL_RCC_GetPCLK1Freq+0x28>)
 800e15a:	5ccb      	ldrb	r3, [r1, r3]
 800e15c:	f003 031f 	and.w	r3, r3, #31
 800e160:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800e164:	4618      	mov	r0, r3
 800e166:	bd80      	pop	{r7, pc}
 800e168:	58024400 	.word	0x58024400
 800e16c:	0801b45c 	.word	0x0801b45c

0800e170 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800e170:	b580      	push	{r7, lr}
 800e172:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800e174:	f7ff ffb6 	bl	800e0e4 <HAL_RCC_GetHCLKFreq>
 800e178:	4602      	mov	r2, r0
 800e17a:	4b06      	ldr	r3, [pc, #24]	@ (800e194 <HAL_RCC_GetPCLK2Freq+0x24>)
 800e17c:	69db      	ldr	r3, [r3, #28]
 800e17e:	0a1b      	lsrs	r3, r3, #8
 800e180:	f003 0307 	and.w	r3, r3, #7
 800e184:	4904      	ldr	r1, [pc, #16]	@ (800e198 <HAL_RCC_GetPCLK2Freq+0x28>)
 800e186:	5ccb      	ldrb	r3, [r1, r3]
 800e188:	f003 031f 	and.w	r3, r3, #31
 800e18c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800e190:	4618      	mov	r0, r3
 800e192:	bd80      	pop	{r7, pc}
 800e194:	58024400 	.word	0x58024400
 800e198:	0801b45c 	.word	0x0801b45c

0800e19c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800e19c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e1a0:	b0ca      	sub	sp, #296	@ 0x128
 800e1a2:	af00      	add	r7, sp, #0
 800e1a4:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800e1a8:	2300      	movs	r3, #0
 800e1aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800e1ae:	2300      	movs	r3, #0
 800e1b0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800e1b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e1b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1bc:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800e1c0:	2500      	movs	r5, #0
 800e1c2:	ea54 0305 	orrs.w	r3, r4, r5
 800e1c6:	d049      	beq.n	800e25c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800e1c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e1cc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e1ce:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800e1d2:	d02f      	beq.n	800e234 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800e1d4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800e1d8:	d828      	bhi.n	800e22c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800e1da:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800e1de:	d01a      	beq.n	800e216 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800e1e0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800e1e4:	d822      	bhi.n	800e22c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d003      	beq.n	800e1f2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800e1ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e1ee:	d007      	beq.n	800e200 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800e1f0:	e01c      	b.n	800e22c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e1f2:	4bb8      	ldr	r3, [pc, #736]	@ (800e4d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e1f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e1f6:	4ab7      	ldr	r2, [pc, #732]	@ (800e4d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e1f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e1fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800e1fe:	e01a      	b.n	800e236 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800e200:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e204:	3308      	adds	r3, #8
 800e206:	2102      	movs	r1, #2
 800e208:	4618      	mov	r0, r3
 800e20a:	f001 fc8f 	bl	800fb2c <RCCEx_PLL2_Config>
 800e20e:	4603      	mov	r3, r0
 800e210:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800e214:	e00f      	b.n	800e236 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800e216:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e21a:	3328      	adds	r3, #40	@ 0x28
 800e21c:	2102      	movs	r1, #2
 800e21e:	4618      	mov	r0, r3
 800e220:	f001 fd36 	bl	800fc90 <RCCEx_PLL3_Config>
 800e224:	4603      	mov	r3, r0
 800e226:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800e22a:	e004      	b.n	800e236 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e22c:	2301      	movs	r3, #1
 800e22e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e232:	e000      	b.n	800e236 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800e234:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e236:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d10a      	bne.n	800e254 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800e23e:	4ba5      	ldr	r3, [pc, #660]	@ (800e4d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e240:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e242:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800e246:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e24a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e24c:	4aa1      	ldr	r2, [pc, #644]	@ (800e4d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e24e:	430b      	orrs	r3, r1
 800e250:	6513      	str	r3, [r2, #80]	@ 0x50
 800e252:	e003      	b.n	800e25c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e254:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e258:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800e25c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e260:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e264:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800e268:	f04f 0900 	mov.w	r9, #0
 800e26c:	ea58 0309 	orrs.w	r3, r8, r9
 800e270:	d047      	beq.n	800e302 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800e272:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e276:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e278:	2b04      	cmp	r3, #4
 800e27a:	d82a      	bhi.n	800e2d2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800e27c:	a201      	add	r2, pc, #4	@ (adr r2, 800e284 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800e27e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e282:	bf00      	nop
 800e284:	0800e299 	.word	0x0800e299
 800e288:	0800e2a7 	.word	0x0800e2a7
 800e28c:	0800e2bd 	.word	0x0800e2bd
 800e290:	0800e2db 	.word	0x0800e2db
 800e294:	0800e2db 	.word	0x0800e2db
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e298:	4b8e      	ldr	r3, [pc, #568]	@ (800e4d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e29a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e29c:	4a8d      	ldr	r2, [pc, #564]	@ (800e4d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e29e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e2a2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800e2a4:	e01a      	b.n	800e2dc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e2a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e2aa:	3308      	adds	r3, #8
 800e2ac:	2100      	movs	r1, #0
 800e2ae:	4618      	mov	r0, r3
 800e2b0:	f001 fc3c 	bl	800fb2c <RCCEx_PLL2_Config>
 800e2b4:	4603      	mov	r3, r0
 800e2b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800e2ba:	e00f      	b.n	800e2dc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800e2bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e2c0:	3328      	adds	r3, #40	@ 0x28
 800e2c2:	2100      	movs	r1, #0
 800e2c4:	4618      	mov	r0, r3
 800e2c6:	f001 fce3 	bl	800fc90 <RCCEx_PLL3_Config>
 800e2ca:	4603      	mov	r3, r0
 800e2cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800e2d0:	e004      	b.n	800e2dc <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e2d2:	2301      	movs	r3, #1
 800e2d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e2d8:	e000      	b.n	800e2dc <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800e2da:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e2dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d10a      	bne.n	800e2fa <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800e2e4:	4b7b      	ldr	r3, [pc, #492]	@ (800e4d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e2e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e2e8:	f023 0107 	bic.w	r1, r3, #7
 800e2ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e2f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e2f2:	4a78      	ldr	r2, [pc, #480]	@ (800e4d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e2f4:	430b      	orrs	r3, r1
 800e2f6:	6513      	str	r3, [r2, #80]	@ 0x50
 800e2f8:	e003      	b.n	800e302 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e2fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e2fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800e302:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e30a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800e30e:	f04f 0b00 	mov.w	fp, #0
 800e312:	ea5a 030b 	orrs.w	r3, sl, fp
 800e316:	d04c      	beq.n	800e3b2 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800e318:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e31c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e31e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e322:	d030      	beq.n	800e386 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800e324:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e328:	d829      	bhi.n	800e37e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800e32a:	2bc0      	cmp	r3, #192	@ 0xc0
 800e32c:	d02d      	beq.n	800e38a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800e32e:	2bc0      	cmp	r3, #192	@ 0xc0
 800e330:	d825      	bhi.n	800e37e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800e332:	2b80      	cmp	r3, #128	@ 0x80
 800e334:	d018      	beq.n	800e368 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800e336:	2b80      	cmp	r3, #128	@ 0x80
 800e338:	d821      	bhi.n	800e37e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	d002      	beq.n	800e344 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800e33e:	2b40      	cmp	r3, #64	@ 0x40
 800e340:	d007      	beq.n	800e352 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800e342:	e01c      	b.n	800e37e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e344:	4b63      	ldr	r3, [pc, #396]	@ (800e4d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e346:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e348:	4a62      	ldr	r2, [pc, #392]	@ (800e4d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e34a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e34e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800e350:	e01c      	b.n	800e38c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e352:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e356:	3308      	adds	r3, #8
 800e358:	2100      	movs	r1, #0
 800e35a:	4618      	mov	r0, r3
 800e35c:	f001 fbe6 	bl	800fb2c <RCCEx_PLL2_Config>
 800e360:	4603      	mov	r3, r0
 800e362:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800e366:	e011      	b.n	800e38c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800e368:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e36c:	3328      	adds	r3, #40	@ 0x28
 800e36e:	2100      	movs	r1, #0
 800e370:	4618      	mov	r0, r3
 800e372:	f001 fc8d 	bl	800fc90 <RCCEx_PLL3_Config>
 800e376:	4603      	mov	r3, r0
 800e378:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800e37c:	e006      	b.n	800e38c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e37e:	2301      	movs	r3, #1
 800e380:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e384:	e002      	b.n	800e38c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800e386:	bf00      	nop
 800e388:	e000      	b.n	800e38c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800e38a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e38c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e390:	2b00      	cmp	r3, #0
 800e392:	d10a      	bne.n	800e3aa <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800e394:	4b4f      	ldr	r3, [pc, #316]	@ (800e4d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e396:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e398:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800e39c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e3a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e3a2:	4a4c      	ldr	r2, [pc, #304]	@ (800e4d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e3a4:	430b      	orrs	r3, r1
 800e3a6:	6513      	str	r3, [r2, #80]	@ 0x50
 800e3a8:	e003      	b.n	800e3b2 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e3aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e3ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800e3b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e3b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3ba:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800e3be:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800e3c2:	2300      	movs	r3, #0
 800e3c4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800e3c8:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800e3cc:	460b      	mov	r3, r1
 800e3ce:	4313      	orrs	r3, r2
 800e3d0:	d053      	beq.n	800e47a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800e3d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e3d6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800e3da:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800e3de:	d035      	beq.n	800e44c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800e3e0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800e3e4:	d82e      	bhi.n	800e444 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800e3e6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800e3ea:	d031      	beq.n	800e450 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800e3ec:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800e3f0:	d828      	bhi.n	800e444 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800e3f2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800e3f6:	d01a      	beq.n	800e42e <HAL_RCCEx_PeriphCLKConfig+0x292>
 800e3f8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800e3fc:	d822      	bhi.n	800e444 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	d003      	beq.n	800e40a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800e402:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800e406:	d007      	beq.n	800e418 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800e408:	e01c      	b.n	800e444 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e40a:	4b32      	ldr	r3, [pc, #200]	@ (800e4d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e40c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e40e:	4a31      	ldr	r2, [pc, #196]	@ (800e4d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e410:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e414:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800e416:	e01c      	b.n	800e452 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e418:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e41c:	3308      	adds	r3, #8
 800e41e:	2100      	movs	r1, #0
 800e420:	4618      	mov	r0, r3
 800e422:	f001 fb83 	bl	800fb2c <RCCEx_PLL2_Config>
 800e426:	4603      	mov	r3, r0
 800e428:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800e42c:	e011      	b.n	800e452 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800e42e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e432:	3328      	adds	r3, #40	@ 0x28
 800e434:	2100      	movs	r1, #0
 800e436:	4618      	mov	r0, r3
 800e438:	f001 fc2a 	bl	800fc90 <RCCEx_PLL3_Config>
 800e43c:	4603      	mov	r3, r0
 800e43e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800e442:	e006      	b.n	800e452 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800e444:	2301      	movs	r3, #1
 800e446:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e44a:	e002      	b.n	800e452 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800e44c:	bf00      	nop
 800e44e:	e000      	b.n	800e452 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800e450:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e452:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e456:	2b00      	cmp	r3, #0
 800e458:	d10b      	bne.n	800e472 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800e45a:	4b1e      	ldr	r3, [pc, #120]	@ (800e4d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e45c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e45e:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800e462:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e466:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800e46a:	4a1a      	ldr	r2, [pc, #104]	@ (800e4d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e46c:	430b      	orrs	r3, r1
 800e46e:	6593      	str	r3, [r2, #88]	@ 0x58
 800e470:	e003      	b.n	800e47a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e472:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e476:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800e47a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e47e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e482:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800e486:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800e48a:	2300      	movs	r3, #0
 800e48c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800e490:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800e494:	460b      	mov	r3, r1
 800e496:	4313      	orrs	r3, r2
 800e498:	d056      	beq.n	800e548 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800e49a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e49e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800e4a2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800e4a6:	d038      	beq.n	800e51a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800e4a8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800e4ac:	d831      	bhi.n	800e512 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800e4ae:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800e4b2:	d034      	beq.n	800e51e <HAL_RCCEx_PeriphCLKConfig+0x382>
 800e4b4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800e4b8:	d82b      	bhi.n	800e512 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800e4ba:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800e4be:	d01d      	beq.n	800e4fc <HAL_RCCEx_PeriphCLKConfig+0x360>
 800e4c0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800e4c4:	d825      	bhi.n	800e512 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	d006      	beq.n	800e4d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800e4ca:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e4ce:	d00a      	beq.n	800e4e6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800e4d0:	e01f      	b.n	800e512 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800e4d2:	bf00      	nop
 800e4d4:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e4d8:	4ba2      	ldr	r3, [pc, #648]	@ (800e764 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e4da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e4dc:	4aa1      	ldr	r2, [pc, #644]	@ (800e764 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e4de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e4e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800e4e4:	e01c      	b.n	800e520 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e4e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e4ea:	3308      	adds	r3, #8
 800e4ec:	2100      	movs	r1, #0
 800e4ee:	4618      	mov	r0, r3
 800e4f0:	f001 fb1c 	bl	800fb2c <RCCEx_PLL2_Config>
 800e4f4:	4603      	mov	r3, r0
 800e4f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800e4fa:	e011      	b.n	800e520 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800e4fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e500:	3328      	adds	r3, #40	@ 0x28
 800e502:	2100      	movs	r1, #0
 800e504:	4618      	mov	r0, r3
 800e506:	f001 fbc3 	bl	800fc90 <RCCEx_PLL3_Config>
 800e50a:	4603      	mov	r3, r0
 800e50c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800e510:	e006      	b.n	800e520 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800e512:	2301      	movs	r3, #1
 800e514:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e518:	e002      	b.n	800e520 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800e51a:	bf00      	nop
 800e51c:	e000      	b.n	800e520 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800e51e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e520:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e524:	2b00      	cmp	r3, #0
 800e526:	d10b      	bne.n	800e540 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800e528:	4b8e      	ldr	r3, [pc, #568]	@ (800e764 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e52a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e52c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800e530:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e534:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800e538:	4a8a      	ldr	r2, [pc, #552]	@ (800e764 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e53a:	430b      	orrs	r3, r1
 800e53c:	6593      	str	r3, [r2, #88]	@ 0x58
 800e53e:	e003      	b.n	800e548 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e540:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e544:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800e548:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e54c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e550:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800e554:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800e558:	2300      	movs	r3, #0
 800e55a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800e55e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800e562:	460b      	mov	r3, r1
 800e564:	4313      	orrs	r3, r2
 800e566:	d03a      	beq.n	800e5de <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800e568:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e56c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e56e:	2b30      	cmp	r3, #48	@ 0x30
 800e570:	d01f      	beq.n	800e5b2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 800e572:	2b30      	cmp	r3, #48	@ 0x30
 800e574:	d819      	bhi.n	800e5aa <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800e576:	2b20      	cmp	r3, #32
 800e578:	d00c      	beq.n	800e594 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800e57a:	2b20      	cmp	r3, #32
 800e57c:	d815      	bhi.n	800e5aa <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d019      	beq.n	800e5b6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800e582:	2b10      	cmp	r3, #16
 800e584:	d111      	bne.n	800e5aa <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e586:	4b77      	ldr	r3, [pc, #476]	@ (800e764 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e588:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e58a:	4a76      	ldr	r2, [pc, #472]	@ (800e764 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e58c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e590:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800e592:	e011      	b.n	800e5b8 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800e594:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e598:	3308      	adds	r3, #8
 800e59a:	2102      	movs	r1, #2
 800e59c:	4618      	mov	r0, r3
 800e59e:	f001 fac5 	bl	800fb2c <RCCEx_PLL2_Config>
 800e5a2:	4603      	mov	r3, r0
 800e5a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800e5a8:	e006      	b.n	800e5b8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800e5aa:	2301      	movs	r3, #1
 800e5ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e5b0:	e002      	b.n	800e5b8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800e5b2:	bf00      	nop
 800e5b4:	e000      	b.n	800e5b8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800e5b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e5b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	d10a      	bne.n	800e5d6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800e5c0:	4b68      	ldr	r3, [pc, #416]	@ (800e764 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e5c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e5c4:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800e5c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e5cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e5ce:	4a65      	ldr	r2, [pc, #404]	@ (800e764 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e5d0:	430b      	orrs	r3, r1
 800e5d2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800e5d4:	e003      	b.n	800e5de <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e5d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e5da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800e5de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e5e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5e6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800e5ea:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800e5ee:	2300      	movs	r3, #0
 800e5f0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800e5f4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800e5f8:	460b      	mov	r3, r1
 800e5fa:	4313      	orrs	r3, r2
 800e5fc:	d051      	beq.n	800e6a2 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800e5fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e602:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e604:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e608:	d035      	beq.n	800e676 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800e60a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e60e:	d82e      	bhi.n	800e66e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800e610:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800e614:	d031      	beq.n	800e67a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800e616:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800e61a:	d828      	bhi.n	800e66e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800e61c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e620:	d01a      	beq.n	800e658 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800e622:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e626:	d822      	bhi.n	800e66e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800e628:	2b00      	cmp	r3, #0
 800e62a:	d003      	beq.n	800e634 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800e62c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e630:	d007      	beq.n	800e642 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800e632:	e01c      	b.n	800e66e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e634:	4b4b      	ldr	r3, [pc, #300]	@ (800e764 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e636:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e638:	4a4a      	ldr	r2, [pc, #296]	@ (800e764 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e63a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e63e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800e640:	e01c      	b.n	800e67c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e642:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e646:	3308      	adds	r3, #8
 800e648:	2100      	movs	r1, #0
 800e64a:	4618      	mov	r0, r3
 800e64c:	f001 fa6e 	bl	800fb2c <RCCEx_PLL2_Config>
 800e650:	4603      	mov	r3, r0
 800e652:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800e656:	e011      	b.n	800e67c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800e658:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e65c:	3328      	adds	r3, #40	@ 0x28
 800e65e:	2100      	movs	r1, #0
 800e660:	4618      	mov	r0, r3
 800e662:	f001 fb15 	bl	800fc90 <RCCEx_PLL3_Config>
 800e666:	4603      	mov	r3, r0
 800e668:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800e66c:	e006      	b.n	800e67c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e66e:	2301      	movs	r3, #1
 800e670:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e674:	e002      	b.n	800e67c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800e676:	bf00      	nop
 800e678:	e000      	b.n	800e67c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800e67a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e67c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e680:	2b00      	cmp	r3, #0
 800e682:	d10a      	bne.n	800e69a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800e684:	4b37      	ldr	r3, [pc, #220]	@ (800e764 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e686:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e688:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800e68c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e690:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e692:	4a34      	ldr	r2, [pc, #208]	@ (800e764 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e694:	430b      	orrs	r3, r1
 800e696:	6513      	str	r3, [r2, #80]	@ 0x50
 800e698:	e003      	b.n	800e6a2 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e69a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e69e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800e6a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e6a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6aa:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800e6ae:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800e6b2:	2300      	movs	r3, #0
 800e6b4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800e6b8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800e6bc:	460b      	mov	r3, r1
 800e6be:	4313      	orrs	r3, r2
 800e6c0:	d056      	beq.n	800e770 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800e6c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e6c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e6c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800e6cc:	d033      	beq.n	800e736 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800e6ce:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800e6d2:	d82c      	bhi.n	800e72e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800e6d4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800e6d8:	d02f      	beq.n	800e73a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800e6da:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800e6de:	d826      	bhi.n	800e72e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800e6e0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800e6e4:	d02b      	beq.n	800e73e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800e6e6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800e6ea:	d820      	bhi.n	800e72e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800e6ec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e6f0:	d012      	beq.n	800e718 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800e6f2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e6f6:	d81a      	bhi.n	800e72e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	d022      	beq.n	800e742 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800e6fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e700:	d115      	bne.n	800e72e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e702:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e706:	3308      	adds	r3, #8
 800e708:	2101      	movs	r1, #1
 800e70a:	4618      	mov	r0, r3
 800e70c:	f001 fa0e 	bl	800fb2c <RCCEx_PLL2_Config>
 800e710:	4603      	mov	r3, r0
 800e712:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800e716:	e015      	b.n	800e744 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e718:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e71c:	3328      	adds	r3, #40	@ 0x28
 800e71e:	2101      	movs	r1, #1
 800e720:	4618      	mov	r0, r3
 800e722:	f001 fab5 	bl	800fc90 <RCCEx_PLL3_Config>
 800e726:	4603      	mov	r3, r0
 800e728:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800e72c:	e00a      	b.n	800e744 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e72e:	2301      	movs	r3, #1
 800e730:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e734:	e006      	b.n	800e744 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800e736:	bf00      	nop
 800e738:	e004      	b.n	800e744 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800e73a:	bf00      	nop
 800e73c:	e002      	b.n	800e744 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800e73e:	bf00      	nop
 800e740:	e000      	b.n	800e744 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800e742:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e744:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e748:	2b00      	cmp	r3, #0
 800e74a:	d10d      	bne.n	800e768 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800e74c:	4b05      	ldr	r3, [pc, #20]	@ (800e764 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e74e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e750:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800e754:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e758:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e75a:	4a02      	ldr	r2, [pc, #8]	@ (800e764 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e75c:	430b      	orrs	r3, r1
 800e75e:	6513      	str	r3, [r2, #80]	@ 0x50
 800e760:	e006      	b.n	800e770 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800e762:	bf00      	nop
 800e764:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e768:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e76c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800e770:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e774:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e778:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800e77c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800e780:	2300      	movs	r3, #0
 800e782:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800e786:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800e78a:	460b      	mov	r3, r1
 800e78c:	4313      	orrs	r3, r2
 800e78e:	d055      	beq.n	800e83c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800e790:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e794:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800e798:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800e79c:	d033      	beq.n	800e806 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800e79e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800e7a2:	d82c      	bhi.n	800e7fe <HAL_RCCEx_PeriphCLKConfig+0x662>
 800e7a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e7a8:	d02f      	beq.n	800e80a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800e7aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e7ae:	d826      	bhi.n	800e7fe <HAL_RCCEx_PeriphCLKConfig+0x662>
 800e7b0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800e7b4:	d02b      	beq.n	800e80e <HAL_RCCEx_PeriphCLKConfig+0x672>
 800e7b6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800e7ba:	d820      	bhi.n	800e7fe <HAL_RCCEx_PeriphCLKConfig+0x662>
 800e7bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e7c0:	d012      	beq.n	800e7e8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800e7c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e7c6:	d81a      	bhi.n	800e7fe <HAL_RCCEx_PeriphCLKConfig+0x662>
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	d022      	beq.n	800e812 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800e7cc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e7d0:	d115      	bne.n	800e7fe <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e7d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e7d6:	3308      	adds	r3, #8
 800e7d8:	2101      	movs	r1, #1
 800e7da:	4618      	mov	r0, r3
 800e7dc:	f001 f9a6 	bl	800fb2c <RCCEx_PLL2_Config>
 800e7e0:	4603      	mov	r3, r0
 800e7e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800e7e6:	e015      	b.n	800e814 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e7e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e7ec:	3328      	adds	r3, #40	@ 0x28
 800e7ee:	2101      	movs	r1, #1
 800e7f0:	4618      	mov	r0, r3
 800e7f2:	f001 fa4d 	bl	800fc90 <RCCEx_PLL3_Config>
 800e7f6:	4603      	mov	r3, r0
 800e7f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800e7fc:	e00a      	b.n	800e814 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800e7fe:	2301      	movs	r3, #1
 800e800:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e804:	e006      	b.n	800e814 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800e806:	bf00      	nop
 800e808:	e004      	b.n	800e814 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800e80a:	bf00      	nop
 800e80c:	e002      	b.n	800e814 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800e80e:	bf00      	nop
 800e810:	e000      	b.n	800e814 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800e812:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e814:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e818:	2b00      	cmp	r3, #0
 800e81a:	d10b      	bne.n	800e834 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800e81c:	4ba3      	ldr	r3, [pc, #652]	@ (800eaac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e81e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e820:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800e824:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e828:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800e82c:	4a9f      	ldr	r2, [pc, #636]	@ (800eaac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e82e:	430b      	orrs	r3, r1
 800e830:	6593      	str	r3, [r2, #88]	@ 0x58
 800e832:	e003      	b.n	800e83c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e834:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e838:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800e83c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e840:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e844:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800e848:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800e84c:	2300      	movs	r3, #0
 800e84e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800e852:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800e856:	460b      	mov	r3, r1
 800e858:	4313      	orrs	r3, r2
 800e85a:	d037      	beq.n	800e8cc <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800e85c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e860:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e862:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e866:	d00e      	beq.n	800e886 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800e868:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e86c:	d816      	bhi.n	800e89c <HAL_RCCEx_PeriphCLKConfig+0x700>
 800e86e:	2b00      	cmp	r3, #0
 800e870:	d018      	beq.n	800e8a4 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800e872:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e876:	d111      	bne.n	800e89c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e878:	4b8c      	ldr	r3, [pc, #560]	@ (800eaac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e87a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e87c:	4a8b      	ldr	r2, [pc, #556]	@ (800eaac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e87e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e882:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800e884:	e00f      	b.n	800e8a6 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e886:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e88a:	3308      	adds	r3, #8
 800e88c:	2101      	movs	r1, #1
 800e88e:	4618      	mov	r0, r3
 800e890:	f001 f94c 	bl	800fb2c <RCCEx_PLL2_Config>
 800e894:	4603      	mov	r3, r0
 800e896:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800e89a:	e004      	b.n	800e8a6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e89c:	2301      	movs	r3, #1
 800e89e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e8a2:	e000      	b.n	800e8a6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800e8a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e8a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	d10a      	bne.n	800e8c4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800e8ae:	4b7f      	ldr	r3, [pc, #508]	@ (800eaac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e8b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e8b2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800e8b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e8ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e8bc:	4a7b      	ldr	r2, [pc, #492]	@ (800eaac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e8be:	430b      	orrs	r3, r1
 800e8c0:	6513      	str	r3, [r2, #80]	@ 0x50
 800e8c2:	e003      	b.n	800e8cc <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e8c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e8c8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800e8cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e8d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8d4:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800e8d8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800e8dc:	2300      	movs	r3, #0
 800e8de:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800e8e2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800e8e6:	460b      	mov	r3, r1
 800e8e8:	4313      	orrs	r3, r2
 800e8ea:	d039      	beq.n	800e960 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800e8ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e8f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e8f2:	2b03      	cmp	r3, #3
 800e8f4:	d81c      	bhi.n	800e930 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800e8f6:	a201      	add	r2, pc, #4	@ (adr r2, 800e8fc <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800e8f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e8fc:	0800e939 	.word	0x0800e939
 800e900:	0800e90d 	.word	0x0800e90d
 800e904:	0800e91b 	.word	0x0800e91b
 800e908:	0800e939 	.word	0x0800e939
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e90c:	4b67      	ldr	r3, [pc, #412]	@ (800eaac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e90e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e910:	4a66      	ldr	r2, [pc, #408]	@ (800eaac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e912:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e916:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800e918:	e00f      	b.n	800e93a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800e91a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e91e:	3308      	adds	r3, #8
 800e920:	2102      	movs	r1, #2
 800e922:	4618      	mov	r0, r3
 800e924:	f001 f902 	bl	800fb2c <RCCEx_PLL2_Config>
 800e928:	4603      	mov	r3, r0
 800e92a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800e92e:	e004      	b.n	800e93a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800e930:	2301      	movs	r3, #1
 800e932:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e936:	e000      	b.n	800e93a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800e938:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e93a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e93e:	2b00      	cmp	r3, #0
 800e940:	d10a      	bne.n	800e958 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800e942:	4b5a      	ldr	r3, [pc, #360]	@ (800eaac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e944:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e946:	f023 0103 	bic.w	r1, r3, #3
 800e94a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e94e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e950:	4a56      	ldr	r2, [pc, #344]	@ (800eaac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e952:	430b      	orrs	r3, r1
 800e954:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800e956:	e003      	b.n	800e960 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e958:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e95c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800e960:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e964:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e968:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800e96c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800e970:	2300      	movs	r3, #0
 800e972:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800e976:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800e97a:	460b      	mov	r3, r1
 800e97c:	4313      	orrs	r3, r2
 800e97e:	f000 809f 	beq.w	800eac0 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800e982:	4b4b      	ldr	r3, [pc, #300]	@ (800eab0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800e984:	681b      	ldr	r3, [r3, #0]
 800e986:	4a4a      	ldr	r2, [pc, #296]	@ (800eab0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800e988:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e98c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800e98e:	f7f4 fda1 	bl	80034d4 <HAL_GetTick>
 800e992:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e996:	e00b      	b.n	800e9b0 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e998:	f7f4 fd9c 	bl	80034d4 <HAL_GetTick>
 800e99c:	4602      	mov	r2, r0
 800e99e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800e9a2:	1ad3      	subs	r3, r2, r3
 800e9a4:	2b64      	cmp	r3, #100	@ 0x64
 800e9a6:	d903      	bls.n	800e9b0 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800e9a8:	2303      	movs	r3, #3
 800e9aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e9ae:	e005      	b.n	800e9bc <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e9b0:	4b3f      	ldr	r3, [pc, #252]	@ (800eab0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800e9b2:	681b      	ldr	r3, [r3, #0]
 800e9b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d0ed      	beq.n	800e998 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800e9bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	d179      	bne.n	800eab8 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800e9c4:	4b39      	ldr	r3, [pc, #228]	@ (800eaac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e9c6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800e9c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e9cc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800e9d0:	4053      	eors	r3, r2
 800e9d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d015      	beq.n	800ea06 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800e9da:	4b34      	ldr	r3, [pc, #208]	@ (800eaac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e9dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e9de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e9e2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800e9e6:	4b31      	ldr	r3, [pc, #196]	@ (800eaac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e9e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e9ea:	4a30      	ldr	r2, [pc, #192]	@ (800eaac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e9ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e9f0:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800e9f2:	4b2e      	ldr	r3, [pc, #184]	@ (800eaac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e9f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e9f6:	4a2d      	ldr	r2, [pc, #180]	@ (800eaac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e9f8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e9fc:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800e9fe:	4a2b      	ldr	r2, [pc, #172]	@ (800eaac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ea00:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800ea04:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800ea06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ea0a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800ea0e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ea12:	d118      	bne.n	800ea46 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ea14:	f7f4 fd5e 	bl	80034d4 <HAL_GetTick>
 800ea18:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ea1c:	e00d      	b.n	800ea3a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ea1e:	f7f4 fd59 	bl	80034d4 <HAL_GetTick>
 800ea22:	4602      	mov	r2, r0
 800ea24:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800ea28:	1ad2      	subs	r2, r2, r3
 800ea2a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800ea2e:	429a      	cmp	r2, r3
 800ea30:	d903      	bls.n	800ea3a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800ea32:	2303      	movs	r3, #3
 800ea34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 800ea38:	e005      	b.n	800ea46 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ea3a:	4b1c      	ldr	r3, [pc, #112]	@ (800eaac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ea3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ea3e:	f003 0302 	and.w	r3, r3, #2
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	d0eb      	beq.n	800ea1e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800ea46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d129      	bne.n	800eaa2 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800ea4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ea52:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800ea56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ea5a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ea5e:	d10e      	bne.n	800ea7e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800ea60:	4b12      	ldr	r3, [pc, #72]	@ (800eaac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ea62:	691b      	ldr	r3, [r3, #16]
 800ea64:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800ea68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ea6c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800ea70:	091a      	lsrs	r2, r3, #4
 800ea72:	4b10      	ldr	r3, [pc, #64]	@ (800eab4 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800ea74:	4013      	ands	r3, r2
 800ea76:	4a0d      	ldr	r2, [pc, #52]	@ (800eaac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ea78:	430b      	orrs	r3, r1
 800ea7a:	6113      	str	r3, [r2, #16]
 800ea7c:	e005      	b.n	800ea8a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800ea7e:	4b0b      	ldr	r3, [pc, #44]	@ (800eaac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ea80:	691b      	ldr	r3, [r3, #16]
 800ea82:	4a0a      	ldr	r2, [pc, #40]	@ (800eaac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ea84:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800ea88:	6113      	str	r3, [r2, #16]
 800ea8a:	4b08      	ldr	r3, [pc, #32]	@ (800eaac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ea8c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800ea8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ea92:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800ea96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ea9a:	4a04      	ldr	r2, [pc, #16]	@ (800eaac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ea9c:	430b      	orrs	r3, r1
 800ea9e:	6713      	str	r3, [r2, #112]	@ 0x70
 800eaa0:	e00e      	b.n	800eac0 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800eaa2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800eaa6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800eaaa:	e009      	b.n	800eac0 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800eaac:	58024400 	.word	0x58024400
 800eab0:	58024800 	.word	0x58024800
 800eab4:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800eab8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800eabc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800eac0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800eac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eac8:	f002 0301 	and.w	r3, r2, #1
 800eacc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800ead0:	2300      	movs	r3, #0
 800ead2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800ead6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800eada:	460b      	mov	r3, r1
 800eadc:	4313      	orrs	r3, r2
 800eade:	f000 8089 	beq.w	800ebf4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800eae2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800eae6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800eae8:	2b28      	cmp	r3, #40	@ 0x28
 800eaea:	d86b      	bhi.n	800ebc4 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800eaec:	a201      	add	r2, pc, #4	@ (adr r2, 800eaf4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800eaee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eaf2:	bf00      	nop
 800eaf4:	0800ebcd 	.word	0x0800ebcd
 800eaf8:	0800ebc5 	.word	0x0800ebc5
 800eafc:	0800ebc5 	.word	0x0800ebc5
 800eb00:	0800ebc5 	.word	0x0800ebc5
 800eb04:	0800ebc5 	.word	0x0800ebc5
 800eb08:	0800ebc5 	.word	0x0800ebc5
 800eb0c:	0800ebc5 	.word	0x0800ebc5
 800eb10:	0800ebc5 	.word	0x0800ebc5
 800eb14:	0800eb99 	.word	0x0800eb99
 800eb18:	0800ebc5 	.word	0x0800ebc5
 800eb1c:	0800ebc5 	.word	0x0800ebc5
 800eb20:	0800ebc5 	.word	0x0800ebc5
 800eb24:	0800ebc5 	.word	0x0800ebc5
 800eb28:	0800ebc5 	.word	0x0800ebc5
 800eb2c:	0800ebc5 	.word	0x0800ebc5
 800eb30:	0800ebc5 	.word	0x0800ebc5
 800eb34:	0800ebaf 	.word	0x0800ebaf
 800eb38:	0800ebc5 	.word	0x0800ebc5
 800eb3c:	0800ebc5 	.word	0x0800ebc5
 800eb40:	0800ebc5 	.word	0x0800ebc5
 800eb44:	0800ebc5 	.word	0x0800ebc5
 800eb48:	0800ebc5 	.word	0x0800ebc5
 800eb4c:	0800ebc5 	.word	0x0800ebc5
 800eb50:	0800ebc5 	.word	0x0800ebc5
 800eb54:	0800ebcd 	.word	0x0800ebcd
 800eb58:	0800ebc5 	.word	0x0800ebc5
 800eb5c:	0800ebc5 	.word	0x0800ebc5
 800eb60:	0800ebc5 	.word	0x0800ebc5
 800eb64:	0800ebc5 	.word	0x0800ebc5
 800eb68:	0800ebc5 	.word	0x0800ebc5
 800eb6c:	0800ebc5 	.word	0x0800ebc5
 800eb70:	0800ebc5 	.word	0x0800ebc5
 800eb74:	0800ebcd 	.word	0x0800ebcd
 800eb78:	0800ebc5 	.word	0x0800ebc5
 800eb7c:	0800ebc5 	.word	0x0800ebc5
 800eb80:	0800ebc5 	.word	0x0800ebc5
 800eb84:	0800ebc5 	.word	0x0800ebc5
 800eb88:	0800ebc5 	.word	0x0800ebc5
 800eb8c:	0800ebc5 	.word	0x0800ebc5
 800eb90:	0800ebc5 	.word	0x0800ebc5
 800eb94:	0800ebcd 	.word	0x0800ebcd
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800eb98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800eb9c:	3308      	adds	r3, #8
 800eb9e:	2101      	movs	r1, #1
 800eba0:	4618      	mov	r0, r3
 800eba2:	f000 ffc3 	bl	800fb2c <RCCEx_PLL2_Config>
 800eba6:	4603      	mov	r3, r0
 800eba8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800ebac:	e00f      	b.n	800ebce <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ebae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ebb2:	3328      	adds	r3, #40	@ 0x28
 800ebb4:	2101      	movs	r1, #1
 800ebb6:	4618      	mov	r0, r3
 800ebb8:	f001 f86a 	bl	800fc90 <RCCEx_PLL3_Config>
 800ebbc:	4603      	mov	r3, r0
 800ebbe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800ebc2:	e004      	b.n	800ebce <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ebc4:	2301      	movs	r3, #1
 800ebc6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800ebca:	e000      	b.n	800ebce <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800ebcc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ebce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	d10a      	bne.n	800ebec <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800ebd6:	4bbf      	ldr	r3, [pc, #764]	@ (800eed4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800ebd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ebda:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800ebde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ebe2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ebe4:	4abb      	ldr	r2, [pc, #748]	@ (800eed4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800ebe6:	430b      	orrs	r3, r1
 800ebe8:	6553      	str	r3, [r2, #84]	@ 0x54
 800ebea:	e003      	b.n	800ebf4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ebec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ebf0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800ebf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ebf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebfc:	f002 0302 	and.w	r3, r2, #2
 800ec00:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800ec04:	2300      	movs	r3, #0
 800ec06:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800ec0a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800ec0e:	460b      	mov	r3, r1
 800ec10:	4313      	orrs	r3, r2
 800ec12:	d041      	beq.n	800ec98 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800ec14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ec18:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ec1a:	2b05      	cmp	r3, #5
 800ec1c:	d824      	bhi.n	800ec68 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800ec1e:	a201      	add	r2, pc, #4	@ (adr r2, 800ec24 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800ec20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec24:	0800ec71 	.word	0x0800ec71
 800ec28:	0800ec3d 	.word	0x0800ec3d
 800ec2c:	0800ec53 	.word	0x0800ec53
 800ec30:	0800ec71 	.word	0x0800ec71
 800ec34:	0800ec71 	.word	0x0800ec71
 800ec38:	0800ec71 	.word	0x0800ec71
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ec3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ec40:	3308      	adds	r3, #8
 800ec42:	2101      	movs	r1, #1
 800ec44:	4618      	mov	r0, r3
 800ec46:	f000 ff71 	bl	800fb2c <RCCEx_PLL2_Config>
 800ec4a:	4603      	mov	r3, r0
 800ec4c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800ec50:	e00f      	b.n	800ec72 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ec52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ec56:	3328      	adds	r3, #40	@ 0x28
 800ec58:	2101      	movs	r1, #1
 800ec5a:	4618      	mov	r0, r3
 800ec5c:	f001 f818 	bl	800fc90 <RCCEx_PLL3_Config>
 800ec60:	4603      	mov	r3, r0
 800ec62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800ec66:	e004      	b.n	800ec72 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ec68:	2301      	movs	r3, #1
 800ec6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800ec6e:	e000      	b.n	800ec72 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800ec70:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ec72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d10a      	bne.n	800ec90 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800ec7a:	4b96      	ldr	r3, [pc, #600]	@ (800eed4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800ec7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ec7e:	f023 0107 	bic.w	r1, r3, #7
 800ec82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ec86:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ec88:	4a92      	ldr	r2, [pc, #584]	@ (800eed4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800ec8a:	430b      	orrs	r3, r1
 800ec8c:	6553      	str	r3, [r2, #84]	@ 0x54
 800ec8e:	e003      	b.n	800ec98 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ec90:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ec94:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800ec98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ec9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eca0:	f002 0304 	and.w	r3, r2, #4
 800eca4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800eca8:	2300      	movs	r3, #0
 800ecaa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ecae:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800ecb2:	460b      	mov	r3, r1
 800ecb4:	4313      	orrs	r3, r2
 800ecb6:	d044      	beq.n	800ed42 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800ecb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ecbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ecc0:	2b05      	cmp	r3, #5
 800ecc2:	d825      	bhi.n	800ed10 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800ecc4:	a201      	add	r2, pc, #4	@ (adr r2, 800eccc <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800ecc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ecca:	bf00      	nop
 800eccc:	0800ed19 	.word	0x0800ed19
 800ecd0:	0800ece5 	.word	0x0800ece5
 800ecd4:	0800ecfb 	.word	0x0800ecfb
 800ecd8:	0800ed19 	.word	0x0800ed19
 800ecdc:	0800ed19 	.word	0x0800ed19
 800ece0:	0800ed19 	.word	0x0800ed19
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ece4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ece8:	3308      	adds	r3, #8
 800ecea:	2101      	movs	r1, #1
 800ecec:	4618      	mov	r0, r3
 800ecee:	f000 ff1d 	bl	800fb2c <RCCEx_PLL2_Config>
 800ecf2:	4603      	mov	r3, r0
 800ecf4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800ecf8:	e00f      	b.n	800ed1a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ecfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ecfe:	3328      	adds	r3, #40	@ 0x28
 800ed00:	2101      	movs	r1, #1
 800ed02:	4618      	mov	r0, r3
 800ed04:	f000 ffc4 	bl	800fc90 <RCCEx_PLL3_Config>
 800ed08:	4603      	mov	r3, r0
 800ed0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800ed0e:	e004      	b.n	800ed1a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ed10:	2301      	movs	r3, #1
 800ed12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800ed16:	e000      	b.n	800ed1a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800ed18:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ed1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	d10b      	bne.n	800ed3a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800ed22:	4b6c      	ldr	r3, [pc, #432]	@ (800eed4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800ed24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ed26:	f023 0107 	bic.w	r1, r3, #7
 800ed2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ed2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ed32:	4a68      	ldr	r2, [pc, #416]	@ (800eed4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800ed34:	430b      	orrs	r3, r1
 800ed36:	6593      	str	r3, [r2, #88]	@ 0x58
 800ed38:	e003      	b.n	800ed42 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ed3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ed3e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800ed42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ed46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed4a:	f002 0320 	and.w	r3, r2, #32
 800ed4e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800ed52:	2300      	movs	r3, #0
 800ed54:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800ed58:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800ed5c:	460b      	mov	r3, r1
 800ed5e:	4313      	orrs	r3, r2
 800ed60:	d055      	beq.n	800ee0e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800ed62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ed66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ed6a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ed6e:	d033      	beq.n	800edd8 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800ed70:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ed74:	d82c      	bhi.n	800edd0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800ed76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ed7a:	d02f      	beq.n	800eddc <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800ed7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ed80:	d826      	bhi.n	800edd0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800ed82:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800ed86:	d02b      	beq.n	800ede0 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800ed88:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800ed8c:	d820      	bhi.n	800edd0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800ed8e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ed92:	d012      	beq.n	800edba <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800ed94:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ed98:	d81a      	bhi.n	800edd0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800ed9a:	2b00      	cmp	r3, #0
 800ed9c:	d022      	beq.n	800ede4 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800ed9e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800eda2:	d115      	bne.n	800edd0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800eda4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800eda8:	3308      	adds	r3, #8
 800edaa:	2100      	movs	r1, #0
 800edac:	4618      	mov	r0, r3
 800edae:	f000 febd 	bl	800fb2c <RCCEx_PLL2_Config>
 800edb2:	4603      	mov	r3, r0
 800edb4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800edb8:	e015      	b.n	800ede6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800edba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800edbe:	3328      	adds	r3, #40	@ 0x28
 800edc0:	2102      	movs	r1, #2
 800edc2:	4618      	mov	r0, r3
 800edc4:	f000 ff64 	bl	800fc90 <RCCEx_PLL3_Config>
 800edc8:	4603      	mov	r3, r0
 800edca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800edce:	e00a      	b.n	800ede6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800edd0:	2301      	movs	r3, #1
 800edd2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800edd6:	e006      	b.n	800ede6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800edd8:	bf00      	nop
 800edda:	e004      	b.n	800ede6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800eddc:	bf00      	nop
 800edde:	e002      	b.n	800ede6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800ede0:	bf00      	nop
 800ede2:	e000      	b.n	800ede6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800ede4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ede6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800edea:	2b00      	cmp	r3, #0
 800edec:	d10b      	bne.n	800ee06 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800edee:	4b39      	ldr	r3, [pc, #228]	@ (800eed4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800edf0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800edf2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800edf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800edfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800edfe:	4a35      	ldr	r2, [pc, #212]	@ (800eed4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800ee00:	430b      	orrs	r3, r1
 800ee02:	6553      	str	r3, [r2, #84]	@ 0x54
 800ee04:	e003      	b.n	800ee0e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ee06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ee0a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800ee0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ee12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee16:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800ee1a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800ee1e:	2300      	movs	r3, #0
 800ee20:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800ee24:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800ee28:	460b      	mov	r3, r1
 800ee2a:	4313      	orrs	r3, r2
 800ee2c:	d058      	beq.n	800eee0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800ee2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ee32:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800ee36:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800ee3a:	d033      	beq.n	800eea4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800ee3c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800ee40:	d82c      	bhi.n	800ee9c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800ee42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ee46:	d02f      	beq.n	800eea8 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800ee48:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ee4c:	d826      	bhi.n	800ee9c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800ee4e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ee52:	d02b      	beq.n	800eeac <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800ee54:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ee58:	d820      	bhi.n	800ee9c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800ee5a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ee5e:	d012      	beq.n	800ee86 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800ee60:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ee64:	d81a      	bhi.n	800ee9c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800ee66:	2b00      	cmp	r3, #0
 800ee68:	d022      	beq.n	800eeb0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800ee6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ee6e:	d115      	bne.n	800ee9c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ee70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ee74:	3308      	adds	r3, #8
 800ee76:	2100      	movs	r1, #0
 800ee78:	4618      	mov	r0, r3
 800ee7a:	f000 fe57 	bl	800fb2c <RCCEx_PLL2_Config>
 800ee7e:	4603      	mov	r3, r0
 800ee80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800ee84:	e015      	b.n	800eeb2 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ee86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ee8a:	3328      	adds	r3, #40	@ 0x28
 800ee8c:	2102      	movs	r1, #2
 800ee8e:	4618      	mov	r0, r3
 800ee90:	f000 fefe 	bl	800fc90 <RCCEx_PLL3_Config>
 800ee94:	4603      	mov	r3, r0
 800ee96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800ee9a:	e00a      	b.n	800eeb2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ee9c:	2301      	movs	r3, #1
 800ee9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800eea2:	e006      	b.n	800eeb2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800eea4:	bf00      	nop
 800eea6:	e004      	b.n	800eeb2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800eea8:	bf00      	nop
 800eeaa:	e002      	b.n	800eeb2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800eeac:	bf00      	nop
 800eeae:	e000      	b.n	800eeb2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800eeb0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800eeb2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	d10e      	bne.n	800eed8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800eeba:	4b06      	ldr	r3, [pc, #24]	@ (800eed4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800eebc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800eebe:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800eec2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800eec6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800eeca:	4a02      	ldr	r2, [pc, #8]	@ (800eed4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800eecc:	430b      	orrs	r3, r1
 800eece:	6593      	str	r3, [r2, #88]	@ 0x58
 800eed0:	e006      	b.n	800eee0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800eed2:	bf00      	nop
 800eed4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800eed8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800eedc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800eee0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800eee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eee8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800eeec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800eef0:	2300      	movs	r3, #0
 800eef2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800eef6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800eefa:	460b      	mov	r3, r1
 800eefc:	4313      	orrs	r3, r2
 800eefe:	d055      	beq.n	800efac <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800ef00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ef04:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ef08:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800ef0c:	d033      	beq.n	800ef76 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800ef0e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800ef12:	d82c      	bhi.n	800ef6e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800ef14:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ef18:	d02f      	beq.n	800ef7a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800ef1a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ef1e:	d826      	bhi.n	800ef6e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800ef20:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800ef24:	d02b      	beq.n	800ef7e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800ef26:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800ef2a:	d820      	bhi.n	800ef6e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800ef2c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ef30:	d012      	beq.n	800ef58 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800ef32:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ef36:	d81a      	bhi.n	800ef6e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	d022      	beq.n	800ef82 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800ef3c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ef40:	d115      	bne.n	800ef6e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ef42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ef46:	3308      	adds	r3, #8
 800ef48:	2100      	movs	r1, #0
 800ef4a:	4618      	mov	r0, r3
 800ef4c:	f000 fdee 	bl	800fb2c <RCCEx_PLL2_Config>
 800ef50:	4603      	mov	r3, r0
 800ef52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800ef56:	e015      	b.n	800ef84 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ef58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ef5c:	3328      	adds	r3, #40	@ 0x28
 800ef5e:	2102      	movs	r1, #2
 800ef60:	4618      	mov	r0, r3
 800ef62:	f000 fe95 	bl	800fc90 <RCCEx_PLL3_Config>
 800ef66:	4603      	mov	r3, r0
 800ef68:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800ef6c:	e00a      	b.n	800ef84 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ef6e:	2301      	movs	r3, #1
 800ef70:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800ef74:	e006      	b.n	800ef84 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800ef76:	bf00      	nop
 800ef78:	e004      	b.n	800ef84 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800ef7a:	bf00      	nop
 800ef7c:	e002      	b.n	800ef84 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800ef7e:	bf00      	nop
 800ef80:	e000      	b.n	800ef84 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800ef82:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ef84:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ef88:	2b00      	cmp	r3, #0
 800ef8a:	d10b      	bne.n	800efa4 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800ef8c:	4ba1      	ldr	r3, [pc, #644]	@ (800f214 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ef8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ef90:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800ef94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ef98:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ef9c:	4a9d      	ldr	r2, [pc, #628]	@ (800f214 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ef9e:	430b      	orrs	r3, r1
 800efa0:	6593      	str	r3, [r2, #88]	@ 0x58
 800efa2:	e003      	b.n	800efac <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800efa4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800efa8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800efac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800efb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efb4:	f002 0308 	and.w	r3, r2, #8
 800efb8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800efbc:	2300      	movs	r3, #0
 800efbe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800efc2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800efc6:	460b      	mov	r3, r1
 800efc8:	4313      	orrs	r3, r2
 800efca:	d01e      	beq.n	800f00a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800efcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800efd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800efd4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800efd8:	d10c      	bne.n	800eff4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800efda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800efde:	3328      	adds	r3, #40	@ 0x28
 800efe0:	2102      	movs	r1, #2
 800efe2:	4618      	mov	r0, r3
 800efe4:	f000 fe54 	bl	800fc90 <RCCEx_PLL3_Config>
 800efe8:	4603      	mov	r3, r0
 800efea:	2b00      	cmp	r3, #0
 800efec:	d002      	beq.n	800eff4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800efee:	2301      	movs	r3, #1
 800eff0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800eff4:	4b87      	ldr	r3, [pc, #540]	@ (800f214 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800eff6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800eff8:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800effc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f000:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f004:	4a83      	ldr	r2, [pc, #524]	@ (800f214 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f006:	430b      	orrs	r3, r1
 800f008:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800f00a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f00e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f012:	f002 0310 	and.w	r3, r2, #16
 800f016:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800f01a:	2300      	movs	r3, #0
 800f01c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800f020:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800f024:	460b      	mov	r3, r1
 800f026:	4313      	orrs	r3, r2
 800f028:	d01e      	beq.n	800f068 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800f02a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f02e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800f032:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f036:	d10c      	bne.n	800f052 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800f038:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f03c:	3328      	adds	r3, #40	@ 0x28
 800f03e:	2102      	movs	r1, #2
 800f040:	4618      	mov	r0, r3
 800f042:	f000 fe25 	bl	800fc90 <RCCEx_PLL3_Config>
 800f046:	4603      	mov	r3, r0
 800f048:	2b00      	cmp	r3, #0
 800f04a:	d002      	beq.n	800f052 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800f04c:	2301      	movs	r3, #1
 800f04e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800f052:	4b70      	ldr	r3, [pc, #448]	@ (800f214 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f054:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f056:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800f05a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f05e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800f062:	4a6c      	ldr	r2, [pc, #432]	@ (800f214 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f064:	430b      	orrs	r3, r1
 800f066:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800f068:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f06c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f070:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800f074:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800f078:	2300      	movs	r3, #0
 800f07a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800f07e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800f082:	460b      	mov	r3, r1
 800f084:	4313      	orrs	r3, r2
 800f086:	d03e      	beq.n	800f106 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800f088:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f08c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800f090:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f094:	d022      	beq.n	800f0dc <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800f096:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f09a:	d81b      	bhi.n	800f0d4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800f09c:	2b00      	cmp	r3, #0
 800f09e:	d003      	beq.n	800f0a8 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800f0a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f0a4:	d00b      	beq.n	800f0be <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800f0a6:	e015      	b.n	800f0d4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f0a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f0ac:	3308      	adds	r3, #8
 800f0ae:	2100      	movs	r1, #0
 800f0b0:	4618      	mov	r0, r3
 800f0b2:	f000 fd3b 	bl	800fb2c <RCCEx_PLL2_Config>
 800f0b6:	4603      	mov	r3, r0
 800f0b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800f0bc:	e00f      	b.n	800f0de <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800f0be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f0c2:	3328      	adds	r3, #40	@ 0x28
 800f0c4:	2102      	movs	r1, #2
 800f0c6:	4618      	mov	r0, r3
 800f0c8:	f000 fde2 	bl	800fc90 <RCCEx_PLL3_Config>
 800f0cc:	4603      	mov	r3, r0
 800f0ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800f0d2:	e004      	b.n	800f0de <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f0d4:	2301      	movs	r3, #1
 800f0d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800f0da:	e000      	b.n	800f0de <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800f0dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f0de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f0e2:	2b00      	cmp	r3, #0
 800f0e4:	d10b      	bne.n	800f0fe <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800f0e6:	4b4b      	ldr	r3, [pc, #300]	@ (800f214 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f0e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f0ea:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800f0ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f0f2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800f0f6:	4a47      	ldr	r2, [pc, #284]	@ (800f214 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f0f8:	430b      	orrs	r3, r1
 800f0fa:	6593      	str	r3, [r2, #88]	@ 0x58
 800f0fc:	e003      	b.n	800f106 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f0fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f102:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800f106:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f10a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f10e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800f112:	67bb      	str	r3, [r7, #120]	@ 0x78
 800f114:	2300      	movs	r3, #0
 800f116:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800f118:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800f11c:	460b      	mov	r3, r1
 800f11e:	4313      	orrs	r3, r2
 800f120:	d03b      	beq.n	800f19a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800f122:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f126:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f12a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800f12e:	d01f      	beq.n	800f170 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800f130:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800f134:	d818      	bhi.n	800f168 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800f136:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f13a:	d003      	beq.n	800f144 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800f13c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800f140:	d007      	beq.n	800f152 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800f142:	e011      	b.n	800f168 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f144:	4b33      	ldr	r3, [pc, #204]	@ (800f214 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f146:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f148:	4a32      	ldr	r2, [pc, #200]	@ (800f214 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f14a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800f14e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800f150:	e00f      	b.n	800f172 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800f152:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f156:	3328      	adds	r3, #40	@ 0x28
 800f158:	2101      	movs	r1, #1
 800f15a:	4618      	mov	r0, r3
 800f15c:	f000 fd98 	bl	800fc90 <RCCEx_PLL3_Config>
 800f160:	4603      	mov	r3, r0
 800f162:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800f166:	e004      	b.n	800f172 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f168:	2301      	movs	r3, #1
 800f16a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800f16e:	e000      	b.n	800f172 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800f170:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f172:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f176:	2b00      	cmp	r3, #0
 800f178:	d10b      	bne.n	800f192 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800f17a:	4b26      	ldr	r3, [pc, #152]	@ (800f214 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f17c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f17e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800f182:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f186:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f18a:	4a22      	ldr	r2, [pc, #136]	@ (800f214 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f18c:	430b      	orrs	r3, r1
 800f18e:	6553      	str	r3, [r2, #84]	@ 0x54
 800f190:	e003      	b.n	800f19a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f192:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f196:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800f19a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f19e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1a2:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800f1a6:	673b      	str	r3, [r7, #112]	@ 0x70
 800f1a8:	2300      	movs	r3, #0
 800f1aa:	677b      	str	r3, [r7, #116]	@ 0x74
 800f1ac:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800f1b0:	460b      	mov	r3, r1
 800f1b2:	4313      	orrs	r3, r2
 800f1b4:	d034      	beq.n	800f220 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800f1b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f1ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	d003      	beq.n	800f1c8 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800f1c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f1c4:	d007      	beq.n	800f1d6 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800f1c6:	e011      	b.n	800f1ec <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f1c8:	4b12      	ldr	r3, [pc, #72]	@ (800f214 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f1ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f1cc:	4a11      	ldr	r2, [pc, #68]	@ (800f214 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f1ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800f1d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800f1d4:	e00e      	b.n	800f1f4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800f1d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f1da:	3308      	adds	r3, #8
 800f1dc:	2102      	movs	r1, #2
 800f1de:	4618      	mov	r0, r3
 800f1e0:	f000 fca4 	bl	800fb2c <RCCEx_PLL2_Config>
 800f1e4:	4603      	mov	r3, r0
 800f1e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800f1ea:	e003      	b.n	800f1f4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800f1ec:	2301      	movs	r3, #1
 800f1ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800f1f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f1f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	d10d      	bne.n	800f218 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800f1fc:	4b05      	ldr	r3, [pc, #20]	@ (800f214 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f1fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f200:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800f204:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f208:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f20a:	4a02      	ldr	r2, [pc, #8]	@ (800f214 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f20c:	430b      	orrs	r3, r1
 800f20e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800f210:	e006      	b.n	800f220 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800f212:	bf00      	nop
 800f214:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f218:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f21c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800f220:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f224:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f228:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800f22c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800f22e:	2300      	movs	r3, #0
 800f230:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800f232:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800f236:	460b      	mov	r3, r1
 800f238:	4313      	orrs	r3, r2
 800f23a:	d00c      	beq.n	800f256 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800f23c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f240:	3328      	adds	r3, #40	@ 0x28
 800f242:	2102      	movs	r1, #2
 800f244:	4618      	mov	r0, r3
 800f246:	f000 fd23 	bl	800fc90 <RCCEx_PLL3_Config>
 800f24a:	4603      	mov	r3, r0
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	d002      	beq.n	800f256 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800f250:	2301      	movs	r3, #1
 800f252:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800f256:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f25a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f25e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800f262:	663b      	str	r3, [r7, #96]	@ 0x60
 800f264:	2300      	movs	r3, #0
 800f266:	667b      	str	r3, [r7, #100]	@ 0x64
 800f268:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800f26c:	460b      	mov	r3, r1
 800f26e:	4313      	orrs	r3, r2
 800f270:	d038      	beq.n	800f2e4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800f272:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f276:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f27a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800f27e:	d018      	beq.n	800f2b2 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800f280:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800f284:	d811      	bhi.n	800f2aa <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800f286:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f28a:	d014      	beq.n	800f2b6 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800f28c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f290:	d80b      	bhi.n	800f2aa <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800f292:	2b00      	cmp	r3, #0
 800f294:	d011      	beq.n	800f2ba <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800f296:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f29a:	d106      	bne.n	800f2aa <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f29c:	4bc3      	ldr	r3, [pc, #780]	@ (800f5ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f29e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f2a0:	4ac2      	ldr	r2, [pc, #776]	@ (800f5ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f2a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800f2a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800f2a8:	e008      	b.n	800f2bc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f2aa:	2301      	movs	r3, #1
 800f2ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800f2b0:	e004      	b.n	800f2bc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800f2b2:	bf00      	nop
 800f2b4:	e002      	b.n	800f2bc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800f2b6:	bf00      	nop
 800f2b8:	e000      	b.n	800f2bc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800f2ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f2bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	d10b      	bne.n	800f2dc <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800f2c4:	4bb9      	ldr	r3, [pc, #740]	@ (800f5ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f2c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f2c8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800f2cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f2d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f2d4:	4ab5      	ldr	r2, [pc, #724]	@ (800f5ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f2d6:	430b      	orrs	r3, r1
 800f2d8:	6553      	str	r3, [r2, #84]	@ 0x54
 800f2da:	e003      	b.n	800f2e4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f2dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f2e0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800f2e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f2e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2ec:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800f2f0:	65bb      	str	r3, [r7, #88]	@ 0x58
 800f2f2:	2300      	movs	r3, #0
 800f2f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800f2f6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800f2fa:	460b      	mov	r3, r1
 800f2fc:	4313      	orrs	r3, r2
 800f2fe:	d009      	beq.n	800f314 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800f300:	4baa      	ldr	r3, [pc, #680]	@ (800f5ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f302:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f304:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800f308:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f30c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f30e:	4aa7      	ldr	r2, [pc, #668]	@ (800f5ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f310:	430b      	orrs	r3, r1
 800f312:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800f314:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f31c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800f320:	653b      	str	r3, [r7, #80]	@ 0x50
 800f322:	2300      	movs	r3, #0
 800f324:	657b      	str	r3, [r7, #84]	@ 0x54
 800f326:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800f32a:	460b      	mov	r3, r1
 800f32c:	4313      	orrs	r3, r2
 800f32e:	d00a      	beq.n	800f346 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800f330:	4b9e      	ldr	r3, [pc, #632]	@ (800f5ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f332:	691b      	ldr	r3, [r3, #16]
 800f334:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800f338:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f33c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800f340:	4a9a      	ldr	r2, [pc, #616]	@ (800f5ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f342:	430b      	orrs	r3, r1
 800f344:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800f346:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f34a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f34e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800f352:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f354:	2300      	movs	r3, #0
 800f356:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f358:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800f35c:	460b      	mov	r3, r1
 800f35e:	4313      	orrs	r3, r2
 800f360:	d009      	beq.n	800f376 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800f362:	4b92      	ldr	r3, [pc, #584]	@ (800f5ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f364:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f366:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800f36a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f36e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f370:	4a8e      	ldr	r2, [pc, #568]	@ (800f5ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f372:	430b      	orrs	r3, r1
 800f374:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800f376:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f37a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f37e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800f382:	643b      	str	r3, [r7, #64]	@ 0x40
 800f384:	2300      	movs	r3, #0
 800f386:	647b      	str	r3, [r7, #68]	@ 0x44
 800f388:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800f38c:	460b      	mov	r3, r1
 800f38e:	4313      	orrs	r3, r2
 800f390:	d00e      	beq.n	800f3b0 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800f392:	4b86      	ldr	r3, [pc, #536]	@ (800f5ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f394:	691b      	ldr	r3, [r3, #16]
 800f396:	4a85      	ldr	r2, [pc, #532]	@ (800f5ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f398:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800f39c:	6113      	str	r3, [r2, #16]
 800f39e:	4b83      	ldr	r3, [pc, #524]	@ (800f5ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f3a0:	6919      	ldr	r1, [r3, #16]
 800f3a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f3a6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800f3aa:	4a80      	ldr	r2, [pc, #512]	@ (800f5ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f3ac:	430b      	orrs	r3, r1
 800f3ae:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800f3b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f3b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3b8:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800f3bc:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f3be:	2300      	movs	r3, #0
 800f3c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f3c2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800f3c6:	460b      	mov	r3, r1
 800f3c8:	4313      	orrs	r3, r2
 800f3ca:	d009      	beq.n	800f3e0 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800f3cc:	4b77      	ldr	r3, [pc, #476]	@ (800f5ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f3ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f3d0:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800f3d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f3d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f3da:	4a74      	ldr	r2, [pc, #464]	@ (800f5ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f3dc:	430b      	orrs	r3, r1
 800f3de:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800f3e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f3e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3e8:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800f3ec:	633b      	str	r3, [r7, #48]	@ 0x30
 800f3ee:	2300      	movs	r3, #0
 800f3f0:	637b      	str	r3, [r7, #52]	@ 0x34
 800f3f2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800f3f6:	460b      	mov	r3, r1
 800f3f8:	4313      	orrs	r3, r2
 800f3fa:	d00a      	beq.n	800f412 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800f3fc:	4b6b      	ldr	r3, [pc, #428]	@ (800f5ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f3fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f400:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800f404:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f408:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800f40c:	4a67      	ldr	r2, [pc, #412]	@ (800f5ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f40e:	430b      	orrs	r3, r1
 800f410:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800f412:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f41a:	2100      	movs	r1, #0
 800f41c:	62b9      	str	r1, [r7, #40]	@ 0x28
 800f41e:	f003 0301 	and.w	r3, r3, #1
 800f422:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f424:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800f428:	460b      	mov	r3, r1
 800f42a:	4313      	orrs	r3, r2
 800f42c:	d011      	beq.n	800f452 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f42e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f432:	3308      	adds	r3, #8
 800f434:	2100      	movs	r1, #0
 800f436:	4618      	mov	r0, r3
 800f438:	f000 fb78 	bl	800fb2c <RCCEx_PLL2_Config>
 800f43c:	4603      	mov	r3, r0
 800f43e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800f442:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f446:	2b00      	cmp	r3, #0
 800f448:	d003      	beq.n	800f452 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f44a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f44e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800f452:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f45a:	2100      	movs	r1, #0
 800f45c:	6239      	str	r1, [r7, #32]
 800f45e:	f003 0302 	and.w	r3, r3, #2
 800f462:	627b      	str	r3, [r7, #36]	@ 0x24
 800f464:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800f468:	460b      	mov	r3, r1
 800f46a:	4313      	orrs	r3, r2
 800f46c:	d011      	beq.n	800f492 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800f46e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f472:	3308      	adds	r3, #8
 800f474:	2101      	movs	r1, #1
 800f476:	4618      	mov	r0, r3
 800f478:	f000 fb58 	bl	800fb2c <RCCEx_PLL2_Config>
 800f47c:	4603      	mov	r3, r0
 800f47e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800f482:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f486:	2b00      	cmp	r3, #0
 800f488:	d003      	beq.n	800f492 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f48a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f48e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800f492:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f49a:	2100      	movs	r1, #0
 800f49c:	61b9      	str	r1, [r7, #24]
 800f49e:	f003 0304 	and.w	r3, r3, #4
 800f4a2:	61fb      	str	r3, [r7, #28]
 800f4a4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800f4a8:	460b      	mov	r3, r1
 800f4aa:	4313      	orrs	r3, r2
 800f4ac:	d011      	beq.n	800f4d2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800f4ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f4b2:	3308      	adds	r3, #8
 800f4b4:	2102      	movs	r1, #2
 800f4b6:	4618      	mov	r0, r3
 800f4b8:	f000 fb38 	bl	800fb2c <RCCEx_PLL2_Config>
 800f4bc:	4603      	mov	r3, r0
 800f4be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800f4c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	d003      	beq.n	800f4d2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f4ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f4ce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800f4d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f4d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4da:	2100      	movs	r1, #0
 800f4dc:	6139      	str	r1, [r7, #16]
 800f4de:	f003 0308 	and.w	r3, r3, #8
 800f4e2:	617b      	str	r3, [r7, #20]
 800f4e4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800f4e8:	460b      	mov	r3, r1
 800f4ea:	4313      	orrs	r3, r2
 800f4ec:	d011      	beq.n	800f512 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800f4ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f4f2:	3328      	adds	r3, #40	@ 0x28
 800f4f4:	2100      	movs	r1, #0
 800f4f6:	4618      	mov	r0, r3
 800f4f8:	f000 fbca 	bl	800fc90 <RCCEx_PLL3_Config>
 800f4fc:	4603      	mov	r3, r0
 800f4fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800f502:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f506:	2b00      	cmp	r3, #0
 800f508:	d003      	beq.n	800f512 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f50a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f50e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800f512:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f51a:	2100      	movs	r1, #0
 800f51c:	60b9      	str	r1, [r7, #8]
 800f51e:	f003 0310 	and.w	r3, r3, #16
 800f522:	60fb      	str	r3, [r7, #12]
 800f524:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800f528:	460b      	mov	r3, r1
 800f52a:	4313      	orrs	r3, r2
 800f52c:	d011      	beq.n	800f552 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800f52e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f532:	3328      	adds	r3, #40	@ 0x28
 800f534:	2101      	movs	r1, #1
 800f536:	4618      	mov	r0, r3
 800f538:	f000 fbaa 	bl	800fc90 <RCCEx_PLL3_Config>
 800f53c:	4603      	mov	r3, r0
 800f53e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800f542:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f546:	2b00      	cmp	r3, #0
 800f548:	d003      	beq.n	800f552 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f54a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f54e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800f552:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f55a:	2100      	movs	r1, #0
 800f55c:	6039      	str	r1, [r7, #0]
 800f55e:	f003 0320 	and.w	r3, r3, #32
 800f562:	607b      	str	r3, [r7, #4]
 800f564:	e9d7 1200 	ldrd	r1, r2, [r7]
 800f568:	460b      	mov	r3, r1
 800f56a:	4313      	orrs	r3, r2
 800f56c:	d011      	beq.n	800f592 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800f56e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f572:	3328      	adds	r3, #40	@ 0x28
 800f574:	2102      	movs	r1, #2
 800f576:	4618      	mov	r0, r3
 800f578:	f000 fb8a 	bl	800fc90 <RCCEx_PLL3_Config>
 800f57c:	4603      	mov	r3, r0
 800f57e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800f582:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f586:	2b00      	cmp	r3, #0
 800f588:	d003      	beq.n	800f592 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f58a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f58e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800f592:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800f596:	2b00      	cmp	r3, #0
 800f598:	d101      	bne.n	800f59e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800f59a:	2300      	movs	r3, #0
 800f59c:	e000      	b.n	800f5a0 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800f59e:	2301      	movs	r3, #1
}
 800f5a0:	4618      	mov	r0, r3
 800f5a2:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800f5a6:	46bd      	mov	sp, r7
 800f5a8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f5ac:	58024400 	.word	0x58024400

0800f5b0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800f5b0:	b580      	push	{r7, lr}
 800f5b2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800f5b4:	f7fe fd96 	bl	800e0e4 <HAL_RCC_GetHCLKFreq>
 800f5b8:	4602      	mov	r2, r0
 800f5ba:	4b06      	ldr	r3, [pc, #24]	@ (800f5d4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800f5bc:	6a1b      	ldr	r3, [r3, #32]
 800f5be:	091b      	lsrs	r3, r3, #4
 800f5c0:	f003 0307 	and.w	r3, r3, #7
 800f5c4:	4904      	ldr	r1, [pc, #16]	@ (800f5d8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800f5c6:	5ccb      	ldrb	r3, [r1, r3]
 800f5c8:	f003 031f 	and.w	r3, r3, #31
 800f5cc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800f5d0:	4618      	mov	r0, r3
 800f5d2:	bd80      	pop	{r7, pc}
 800f5d4:	58024400 	.word	0x58024400
 800f5d8:	0801b45c 	.word	0x0801b45c

0800f5dc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800f5dc:	b480      	push	{r7}
 800f5de:	b089      	sub	sp, #36	@ 0x24
 800f5e0:	af00      	add	r7, sp, #0
 800f5e2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800f5e4:	4ba1      	ldr	r3, [pc, #644]	@ (800f86c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f5e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f5e8:	f003 0303 	and.w	r3, r3, #3
 800f5ec:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800f5ee:	4b9f      	ldr	r3, [pc, #636]	@ (800f86c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f5f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f5f2:	0b1b      	lsrs	r3, r3, #12
 800f5f4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f5f8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800f5fa:	4b9c      	ldr	r3, [pc, #624]	@ (800f86c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f5fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f5fe:	091b      	lsrs	r3, r3, #4
 800f600:	f003 0301 	and.w	r3, r3, #1
 800f604:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800f606:	4b99      	ldr	r3, [pc, #612]	@ (800f86c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f608:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f60a:	08db      	lsrs	r3, r3, #3
 800f60c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f610:	693a      	ldr	r2, [r7, #16]
 800f612:	fb02 f303 	mul.w	r3, r2, r3
 800f616:	ee07 3a90 	vmov	s15, r3
 800f61a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f61e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800f622:	697b      	ldr	r3, [r7, #20]
 800f624:	2b00      	cmp	r3, #0
 800f626:	f000 8111 	beq.w	800f84c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800f62a:	69bb      	ldr	r3, [r7, #24]
 800f62c:	2b02      	cmp	r3, #2
 800f62e:	f000 8083 	beq.w	800f738 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800f632:	69bb      	ldr	r3, [r7, #24]
 800f634:	2b02      	cmp	r3, #2
 800f636:	f200 80a1 	bhi.w	800f77c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800f63a:	69bb      	ldr	r3, [r7, #24]
 800f63c:	2b00      	cmp	r3, #0
 800f63e:	d003      	beq.n	800f648 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800f640:	69bb      	ldr	r3, [r7, #24]
 800f642:	2b01      	cmp	r3, #1
 800f644:	d056      	beq.n	800f6f4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800f646:	e099      	b.n	800f77c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f648:	4b88      	ldr	r3, [pc, #544]	@ (800f86c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f64a:	681b      	ldr	r3, [r3, #0]
 800f64c:	f003 0320 	and.w	r3, r3, #32
 800f650:	2b00      	cmp	r3, #0
 800f652:	d02d      	beq.n	800f6b0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f654:	4b85      	ldr	r3, [pc, #532]	@ (800f86c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f656:	681b      	ldr	r3, [r3, #0]
 800f658:	08db      	lsrs	r3, r3, #3
 800f65a:	f003 0303 	and.w	r3, r3, #3
 800f65e:	4a84      	ldr	r2, [pc, #528]	@ (800f870 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800f660:	fa22 f303 	lsr.w	r3, r2, r3
 800f664:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800f666:	68bb      	ldr	r3, [r7, #8]
 800f668:	ee07 3a90 	vmov	s15, r3
 800f66c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f670:	697b      	ldr	r3, [r7, #20]
 800f672:	ee07 3a90 	vmov	s15, r3
 800f676:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f67a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f67e:	4b7b      	ldr	r3, [pc, #492]	@ (800f86c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f680:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f682:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f686:	ee07 3a90 	vmov	s15, r3
 800f68a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f68e:	ed97 6a03 	vldr	s12, [r7, #12]
 800f692:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800f874 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800f696:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f69a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f69e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f6a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f6a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f6aa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800f6ae:	e087      	b.n	800f7c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800f6b0:	697b      	ldr	r3, [r7, #20]
 800f6b2:	ee07 3a90 	vmov	s15, r3
 800f6b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f6ba:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800f878 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800f6be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f6c2:	4b6a      	ldr	r3, [pc, #424]	@ (800f86c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f6c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f6c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f6ca:	ee07 3a90 	vmov	s15, r3
 800f6ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f6d2:	ed97 6a03 	vldr	s12, [r7, #12]
 800f6d6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800f874 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800f6da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f6de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f6e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f6e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f6ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f6ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f6f2:	e065      	b.n	800f7c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800f6f4:	697b      	ldr	r3, [r7, #20]
 800f6f6:	ee07 3a90 	vmov	s15, r3
 800f6fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f6fe:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800f87c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800f702:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f706:	4b59      	ldr	r3, [pc, #356]	@ (800f86c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f708:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f70a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f70e:	ee07 3a90 	vmov	s15, r3
 800f712:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f716:	ed97 6a03 	vldr	s12, [r7, #12]
 800f71a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800f874 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800f71e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f722:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f726:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f72a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f72e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f732:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f736:	e043      	b.n	800f7c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800f738:	697b      	ldr	r3, [r7, #20]
 800f73a:	ee07 3a90 	vmov	s15, r3
 800f73e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f742:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800f880 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800f746:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f74a:	4b48      	ldr	r3, [pc, #288]	@ (800f86c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f74c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f74e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f752:	ee07 3a90 	vmov	s15, r3
 800f756:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f75a:	ed97 6a03 	vldr	s12, [r7, #12]
 800f75e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800f874 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800f762:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f766:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f76a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f76e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f772:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f776:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f77a:	e021      	b.n	800f7c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800f77c:	697b      	ldr	r3, [r7, #20]
 800f77e:	ee07 3a90 	vmov	s15, r3
 800f782:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f786:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800f87c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800f78a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f78e:	4b37      	ldr	r3, [pc, #220]	@ (800f86c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f790:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f792:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f796:	ee07 3a90 	vmov	s15, r3
 800f79a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f79e:	ed97 6a03 	vldr	s12, [r7, #12]
 800f7a2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800f874 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800f7a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f7aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f7ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f7b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f7b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f7ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f7be:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800f7c0:	4b2a      	ldr	r3, [pc, #168]	@ (800f86c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f7c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f7c4:	0a5b      	lsrs	r3, r3, #9
 800f7c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f7ca:	ee07 3a90 	vmov	s15, r3
 800f7ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f7d2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f7d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f7da:	edd7 6a07 	vldr	s13, [r7, #28]
 800f7de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f7e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f7e6:	ee17 2a90 	vmov	r2, s15
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800f7ee:	4b1f      	ldr	r3, [pc, #124]	@ (800f86c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f7f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f7f2:	0c1b      	lsrs	r3, r3, #16
 800f7f4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f7f8:	ee07 3a90 	vmov	s15, r3
 800f7fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f800:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f804:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f808:	edd7 6a07 	vldr	s13, [r7, #28]
 800f80c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f810:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f814:	ee17 2a90 	vmov	r2, s15
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800f81c:	4b13      	ldr	r3, [pc, #76]	@ (800f86c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f81e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f820:	0e1b      	lsrs	r3, r3, #24
 800f822:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f826:	ee07 3a90 	vmov	s15, r3
 800f82a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f82e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f832:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f836:	edd7 6a07 	vldr	s13, [r7, #28]
 800f83a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f83e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f842:	ee17 2a90 	vmov	r2, s15
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800f84a:	e008      	b.n	800f85e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	2200      	movs	r2, #0
 800f850:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	2200      	movs	r2, #0
 800f856:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	2200      	movs	r2, #0
 800f85c:	609a      	str	r2, [r3, #8]
}
 800f85e:	bf00      	nop
 800f860:	3724      	adds	r7, #36	@ 0x24
 800f862:	46bd      	mov	sp, r7
 800f864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f868:	4770      	bx	lr
 800f86a:	bf00      	nop
 800f86c:	58024400 	.word	0x58024400
 800f870:	03d09000 	.word	0x03d09000
 800f874:	46000000 	.word	0x46000000
 800f878:	4c742400 	.word	0x4c742400
 800f87c:	4a742400 	.word	0x4a742400
 800f880:	4bbebc20 	.word	0x4bbebc20

0800f884 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800f884:	b480      	push	{r7}
 800f886:	b089      	sub	sp, #36	@ 0x24
 800f888:	af00      	add	r7, sp, #0
 800f88a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800f88c:	4ba1      	ldr	r3, [pc, #644]	@ (800fb14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f88e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f890:	f003 0303 	and.w	r3, r3, #3
 800f894:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800f896:	4b9f      	ldr	r3, [pc, #636]	@ (800fb14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f898:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f89a:	0d1b      	lsrs	r3, r3, #20
 800f89c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f8a0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800f8a2:	4b9c      	ldr	r3, [pc, #624]	@ (800fb14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f8a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f8a6:	0a1b      	lsrs	r3, r3, #8
 800f8a8:	f003 0301 	and.w	r3, r3, #1
 800f8ac:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800f8ae:	4b99      	ldr	r3, [pc, #612]	@ (800fb14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f8b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f8b2:	08db      	lsrs	r3, r3, #3
 800f8b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f8b8:	693a      	ldr	r2, [r7, #16]
 800f8ba:	fb02 f303 	mul.w	r3, r2, r3
 800f8be:	ee07 3a90 	vmov	s15, r3
 800f8c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f8c6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800f8ca:	697b      	ldr	r3, [r7, #20]
 800f8cc:	2b00      	cmp	r3, #0
 800f8ce:	f000 8111 	beq.w	800faf4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800f8d2:	69bb      	ldr	r3, [r7, #24]
 800f8d4:	2b02      	cmp	r3, #2
 800f8d6:	f000 8083 	beq.w	800f9e0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800f8da:	69bb      	ldr	r3, [r7, #24]
 800f8dc:	2b02      	cmp	r3, #2
 800f8de:	f200 80a1 	bhi.w	800fa24 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800f8e2:	69bb      	ldr	r3, [r7, #24]
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	d003      	beq.n	800f8f0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800f8e8:	69bb      	ldr	r3, [r7, #24]
 800f8ea:	2b01      	cmp	r3, #1
 800f8ec:	d056      	beq.n	800f99c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800f8ee:	e099      	b.n	800fa24 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f8f0:	4b88      	ldr	r3, [pc, #544]	@ (800fb14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f8f2:	681b      	ldr	r3, [r3, #0]
 800f8f4:	f003 0320 	and.w	r3, r3, #32
 800f8f8:	2b00      	cmp	r3, #0
 800f8fa:	d02d      	beq.n	800f958 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f8fc:	4b85      	ldr	r3, [pc, #532]	@ (800fb14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f8fe:	681b      	ldr	r3, [r3, #0]
 800f900:	08db      	lsrs	r3, r3, #3
 800f902:	f003 0303 	and.w	r3, r3, #3
 800f906:	4a84      	ldr	r2, [pc, #528]	@ (800fb18 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800f908:	fa22 f303 	lsr.w	r3, r2, r3
 800f90c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800f90e:	68bb      	ldr	r3, [r7, #8]
 800f910:	ee07 3a90 	vmov	s15, r3
 800f914:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f918:	697b      	ldr	r3, [r7, #20]
 800f91a:	ee07 3a90 	vmov	s15, r3
 800f91e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f922:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f926:	4b7b      	ldr	r3, [pc, #492]	@ (800fb14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f92a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f92e:	ee07 3a90 	vmov	s15, r3
 800f932:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f936:	ed97 6a03 	vldr	s12, [r7, #12]
 800f93a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800fb1c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800f93e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f942:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f946:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f94a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f94e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f952:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800f956:	e087      	b.n	800fa68 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800f958:	697b      	ldr	r3, [r7, #20]
 800f95a:	ee07 3a90 	vmov	s15, r3
 800f95e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f962:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800fb20 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800f966:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f96a:	4b6a      	ldr	r3, [pc, #424]	@ (800fb14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f96c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f96e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f972:	ee07 3a90 	vmov	s15, r3
 800f976:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f97a:	ed97 6a03 	vldr	s12, [r7, #12]
 800f97e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800fb1c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800f982:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f986:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f98a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f98e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f992:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f996:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f99a:	e065      	b.n	800fa68 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800f99c:	697b      	ldr	r3, [r7, #20]
 800f99e:	ee07 3a90 	vmov	s15, r3
 800f9a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f9a6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800fb24 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800f9aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f9ae:	4b59      	ldr	r3, [pc, #356]	@ (800fb14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f9b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f9b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f9b6:	ee07 3a90 	vmov	s15, r3
 800f9ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f9be:	ed97 6a03 	vldr	s12, [r7, #12]
 800f9c2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800fb1c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800f9c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f9ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f9ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f9d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f9d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f9da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f9de:	e043      	b.n	800fa68 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800f9e0:	697b      	ldr	r3, [r7, #20]
 800f9e2:	ee07 3a90 	vmov	s15, r3
 800f9e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f9ea:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800fb28 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800f9ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f9f2:	4b48      	ldr	r3, [pc, #288]	@ (800fb14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f9f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f9f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f9fa:	ee07 3a90 	vmov	s15, r3
 800f9fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fa02:	ed97 6a03 	vldr	s12, [r7, #12]
 800fa06:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800fb1c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800fa0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fa0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fa12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800fa16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fa1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fa1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800fa22:	e021      	b.n	800fa68 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800fa24:	697b      	ldr	r3, [r7, #20]
 800fa26:	ee07 3a90 	vmov	s15, r3
 800fa2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fa2e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800fb24 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800fa32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fa36:	4b37      	ldr	r3, [pc, #220]	@ (800fb14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fa38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fa3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fa3e:	ee07 3a90 	vmov	s15, r3
 800fa42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fa46:	ed97 6a03 	vldr	s12, [r7, #12]
 800fa4a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800fb1c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800fa4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fa52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fa56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800fa5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fa5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fa62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800fa66:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800fa68:	4b2a      	ldr	r3, [pc, #168]	@ (800fb14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fa6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fa6c:	0a5b      	lsrs	r3, r3, #9
 800fa6e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fa72:	ee07 3a90 	vmov	s15, r3
 800fa76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fa7a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800fa7e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800fa82:	edd7 6a07 	vldr	s13, [r7, #28]
 800fa86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fa8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fa8e:	ee17 2a90 	vmov	r2, s15
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800fa96:	4b1f      	ldr	r3, [pc, #124]	@ (800fb14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fa98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fa9a:	0c1b      	lsrs	r3, r3, #16
 800fa9c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800faa0:	ee07 3a90 	vmov	s15, r3
 800faa4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800faa8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800faac:	ee37 7a87 	vadd.f32	s14, s15, s14
 800fab0:	edd7 6a07 	vldr	s13, [r7, #28]
 800fab4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fab8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fabc:	ee17 2a90 	vmov	r2, s15
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800fac4:	4b13      	ldr	r3, [pc, #76]	@ (800fb14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fac6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fac8:	0e1b      	lsrs	r3, r3, #24
 800faca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800face:	ee07 3a90 	vmov	s15, r3
 800fad2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fad6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800fada:	ee37 7a87 	vadd.f32	s14, s15, s14
 800fade:	edd7 6a07 	vldr	s13, [r7, #28]
 800fae2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fae6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800faea:	ee17 2a90 	vmov	r2, s15
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800faf2:	e008      	b.n	800fb06 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	2200      	movs	r2, #0
 800faf8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	2200      	movs	r2, #0
 800fafe:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	2200      	movs	r2, #0
 800fb04:	609a      	str	r2, [r3, #8]
}
 800fb06:	bf00      	nop
 800fb08:	3724      	adds	r7, #36	@ 0x24
 800fb0a:	46bd      	mov	sp, r7
 800fb0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb10:	4770      	bx	lr
 800fb12:	bf00      	nop
 800fb14:	58024400 	.word	0x58024400
 800fb18:	03d09000 	.word	0x03d09000
 800fb1c:	46000000 	.word	0x46000000
 800fb20:	4c742400 	.word	0x4c742400
 800fb24:	4a742400 	.word	0x4a742400
 800fb28:	4bbebc20 	.word	0x4bbebc20

0800fb2c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800fb2c:	b580      	push	{r7, lr}
 800fb2e:	b084      	sub	sp, #16
 800fb30:	af00      	add	r7, sp, #0
 800fb32:	6078      	str	r0, [r7, #4]
 800fb34:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800fb36:	2300      	movs	r3, #0
 800fb38:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800fb3a:	4b53      	ldr	r3, [pc, #332]	@ (800fc88 <RCCEx_PLL2_Config+0x15c>)
 800fb3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fb3e:	f003 0303 	and.w	r3, r3, #3
 800fb42:	2b03      	cmp	r3, #3
 800fb44:	d101      	bne.n	800fb4a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800fb46:	2301      	movs	r3, #1
 800fb48:	e099      	b.n	800fc7e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800fb4a:	4b4f      	ldr	r3, [pc, #316]	@ (800fc88 <RCCEx_PLL2_Config+0x15c>)
 800fb4c:	681b      	ldr	r3, [r3, #0]
 800fb4e:	4a4e      	ldr	r2, [pc, #312]	@ (800fc88 <RCCEx_PLL2_Config+0x15c>)
 800fb50:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800fb54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800fb56:	f7f3 fcbd 	bl	80034d4 <HAL_GetTick>
 800fb5a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800fb5c:	e008      	b.n	800fb70 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800fb5e:	f7f3 fcb9 	bl	80034d4 <HAL_GetTick>
 800fb62:	4602      	mov	r2, r0
 800fb64:	68bb      	ldr	r3, [r7, #8]
 800fb66:	1ad3      	subs	r3, r2, r3
 800fb68:	2b02      	cmp	r3, #2
 800fb6a:	d901      	bls.n	800fb70 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800fb6c:	2303      	movs	r3, #3
 800fb6e:	e086      	b.n	800fc7e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800fb70:	4b45      	ldr	r3, [pc, #276]	@ (800fc88 <RCCEx_PLL2_Config+0x15c>)
 800fb72:	681b      	ldr	r3, [r3, #0]
 800fb74:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800fb78:	2b00      	cmp	r3, #0
 800fb7a:	d1f0      	bne.n	800fb5e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800fb7c:	4b42      	ldr	r3, [pc, #264]	@ (800fc88 <RCCEx_PLL2_Config+0x15c>)
 800fb7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fb80:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	681b      	ldr	r3, [r3, #0]
 800fb88:	031b      	lsls	r3, r3, #12
 800fb8a:	493f      	ldr	r1, [pc, #252]	@ (800fc88 <RCCEx_PLL2_Config+0x15c>)
 800fb8c:	4313      	orrs	r3, r2
 800fb8e:	628b      	str	r3, [r1, #40]	@ 0x28
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	685b      	ldr	r3, [r3, #4]
 800fb94:	3b01      	subs	r3, #1
 800fb96:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	689b      	ldr	r3, [r3, #8]
 800fb9e:	3b01      	subs	r3, #1
 800fba0:	025b      	lsls	r3, r3, #9
 800fba2:	b29b      	uxth	r3, r3
 800fba4:	431a      	orrs	r2, r3
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	68db      	ldr	r3, [r3, #12]
 800fbaa:	3b01      	subs	r3, #1
 800fbac:	041b      	lsls	r3, r3, #16
 800fbae:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800fbb2:	431a      	orrs	r2, r3
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	691b      	ldr	r3, [r3, #16]
 800fbb8:	3b01      	subs	r3, #1
 800fbba:	061b      	lsls	r3, r3, #24
 800fbbc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800fbc0:	4931      	ldr	r1, [pc, #196]	@ (800fc88 <RCCEx_PLL2_Config+0x15c>)
 800fbc2:	4313      	orrs	r3, r2
 800fbc4:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800fbc6:	4b30      	ldr	r3, [pc, #192]	@ (800fc88 <RCCEx_PLL2_Config+0x15c>)
 800fbc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fbca:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	695b      	ldr	r3, [r3, #20]
 800fbd2:	492d      	ldr	r1, [pc, #180]	@ (800fc88 <RCCEx_PLL2_Config+0x15c>)
 800fbd4:	4313      	orrs	r3, r2
 800fbd6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800fbd8:	4b2b      	ldr	r3, [pc, #172]	@ (800fc88 <RCCEx_PLL2_Config+0x15c>)
 800fbda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fbdc:	f023 0220 	bic.w	r2, r3, #32
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	699b      	ldr	r3, [r3, #24]
 800fbe4:	4928      	ldr	r1, [pc, #160]	@ (800fc88 <RCCEx_PLL2_Config+0x15c>)
 800fbe6:	4313      	orrs	r3, r2
 800fbe8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800fbea:	4b27      	ldr	r3, [pc, #156]	@ (800fc88 <RCCEx_PLL2_Config+0x15c>)
 800fbec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fbee:	4a26      	ldr	r2, [pc, #152]	@ (800fc88 <RCCEx_PLL2_Config+0x15c>)
 800fbf0:	f023 0310 	bic.w	r3, r3, #16
 800fbf4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800fbf6:	4b24      	ldr	r3, [pc, #144]	@ (800fc88 <RCCEx_PLL2_Config+0x15c>)
 800fbf8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800fbfa:	4b24      	ldr	r3, [pc, #144]	@ (800fc8c <RCCEx_PLL2_Config+0x160>)
 800fbfc:	4013      	ands	r3, r2
 800fbfe:	687a      	ldr	r2, [r7, #4]
 800fc00:	69d2      	ldr	r2, [r2, #28]
 800fc02:	00d2      	lsls	r2, r2, #3
 800fc04:	4920      	ldr	r1, [pc, #128]	@ (800fc88 <RCCEx_PLL2_Config+0x15c>)
 800fc06:	4313      	orrs	r3, r2
 800fc08:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800fc0a:	4b1f      	ldr	r3, [pc, #124]	@ (800fc88 <RCCEx_PLL2_Config+0x15c>)
 800fc0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fc0e:	4a1e      	ldr	r2, [pc, #120]	@ (800fc88 <RCCEx_PLL2_Config+0x15c>)
 800fc10:	f043 0310 	orr.w	r3, r3, #16
 800fc14:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800fc16:	683b      	ldr	r3, [r7, #0]
 800fc18:	2b00      	cmp	r3, #0
 800fc1a:	d106      	bne.n	800fc2a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800fc1c:	4b1a      	ldr	r3, [pc, #104]	@ (800fc88 <RCCEx_PLL2_Config+0x15c>)
 800fc1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fc20:	4a19      	ldr	r2, [pc, #100]	@ (800fc88 <RCCEx_PLL2_Config+0x15c>)
 800fc22:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800fc26:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800fc28:	e00f      	b.n	800fc4a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800fc2a:	683b      	ldr	r3, [r7, #0]
 800fc2c:	2b01      	cmp	r3, #1
 800fc2e:	d106      	bne.n	800fc3e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800fc30:	4b15      	ldr	r3, [pc, #84]	@ (800fc88 <RCCEx_PLL2_Config+0x15c>)
 800fc32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fc34:	4a14      	ldr	r2, [pc, #80]	@ (800fc88 <RCCEx_PLL2_Config+0x15c>)
 800fc36:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800fc3a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800fc3c:	e005      	b.n	800fc4a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800fc3e:	4b12      	ldr	r3, [pc, #72]	@ (800fc88 <RCCEx_PLL2_Config+0x15c>)
 800fc40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fc42:	4a11      	ldr	r2, [pc, #68]	@ (800fc88 <RCCEx_PLL2_Config+0x15c>)
 800fc44:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800fc48:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800fc4a:	4b0f      	ldr	r3, [pc, #60]	@ (800fc88 <RCCEx_PLL2_Config+0x15c>)
 800fc4c:	681b      	ldr	r3, [r3, #0]
 800fc4e:	4a0e      	ldr	r2, [pc, #56]	@ (800fc88 <RCCEx_PLL2_Config+0x15c>)
 800fc50:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800fc54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800fc56:	f7f3 fc3d 	bl	80034d4 <HAL_GetTick>
 800fc5a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800fc5c:	e008      	b.n	800fc70 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800fc5e:	f7f3 fc39 	bl	80034d4 <HAL_GetTick>
 800fc62:	4602      	mov	r2, r0
 800fc64:	68bb      	ldr	r3, [r7, #8]
 800fc66:	1ad3      	subs	r3, r2, r3
 800fc68:	2b02      	cmp	r3, #2
 800fc6a:	d901      	bls.n	800fc70 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800fc6c:	2303      	movs	r3, #3
 800fc6e:	e006      	b.n	800fc7e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800fc70:	4b05      	ldr	r3, [pc, #20]	@ (800fc88 <RCCEx_PLL2_Config+0x15c>)
 800fc72:	681b      	ldr	r3, [r3, #0]
 800fc74:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800fc78:	2b00      	cmp	r3, #0
 800fc7a:	d0f0      	beq.n	800fc5e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800fc7c:	7bfb      	ldrb	r3, [r7, #15]
}
 800fc7e:	4618      	mov	r0, r3
 800fc80:	3710      	adds	r7, #16
 800fc82:	46bd      	mov	sp, r7
 800fc84:	bd80      	pop	{r7, pc}
 800fc86:	bf00      	nop
 800fc88:	58024400 	.word	0x58024400
 800fc8c:	ffff0007 	.word	0xffff0007

0800fc90 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800fc90:	b580      	push	{r7, lr}
 800fc92:	b084      	sub	sp, #16
 800fc94:	af00      	add	r7, sp, #0
 800fc96:	6078      	str	r0, [r7, #4]
 800fc98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800fc9a:	2300      	movs	r3, #0
 800fc9c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800fc9e:	4b53      	ldr	r3, [pc, #332]	@ (800fdec <RCCEx_PLL3_Config+0x15c>)
 800fca0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fca2:	f003 0303 	and.w	r3, r3, #3
 800fca6:	2b03      	cmp	r3, #3
 800fca8:	d101      	bne.n	800fcae <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800fcaa:	2301      	movs	r3, #1
 800fcac:	e099      	b.n	800fde2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800fcae:	4b4f      	ldr	r3, [pc, #316]	@ (800fdec <RCCEx_PLL3_Config+0x15c>)
 800fcb0:	681b      	ldr	r3, [r3, #0]
 800fcb2:	4a4e      	ldr	r2, [pc, #312]	@ (800fdec <RCCEx_PLL3_Config+0x15c>)
 800fcb4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800fcb8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800fcba:	f7f3 fc0b 	bl	80034d4 <HAL_GetTick>
 800fcbe:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800fcc0:	e008      	b.n	800fcd4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800fcc2:	f7f3 fc07 	bl	80034d4 <HAL_GetTick>
 800fcc6:	4602      	mov	r2, r0
 800fcc8:	68bb      	ldr	r3, [r7, #8]
 800fcca:	1ad3      	subs	r3, r2, r3
 800fccc:	2b02      	cmp	r3, #2
 800fcce:	d901      	bls.n	800fcd4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800fcd0:	2303      	movs	r3, #3
 800fcd2:	e086      	b.n	800fde2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800fcd4:	4b45      	ldr	r3, [pc, #276]	@ (800fdec <RCCEx_PLL3_Config+0x15c>)
 800fcd6:	681b      	ldr	r3, [r3, #0]
 800fcd8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800fcdc:	2b00      	cmp	r3, #0
 800fcde:	d1f0      	bne.n	800fcc2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800fce0:	4b42      	ldr	r3, [pc, #264]	@ (800fdec <RCCEx_PLL3_Config+0x15c>)
 800fce2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fce4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	681b      	ldr	r3, [r3, #0]
 800fcec:	051b      	lsls	r3, r3, #20
 800fcee:	493f      	ldr	r1, [pc, #252]	@ (800fdec <RCCEx_PLL3_Config+0x15c>)
 800fcf0:	4313      	orrs	r3, r2
 800fcf2:	628b      	str	r3, [r1, #40]	@ 0x28
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	685b      	ldr	r3, [r3, #4]
 800fcf8:	3b01      	subs	r3, #1
 800fcfa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	689b      	ldr	r3, [r3, #8]
 800fd02:	3b01      	subs	r3, #1
 800fd04:	025b      	lsls	r3, r3, #9
 800fd06:	b29b      	uxth	r3, r3
 800fd08:	431a      	orrs	r2, r3
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	68db      	ldr	r3, [r3, #12]
 800fd0e:	3b01      	subs	r3, #1
 800fd10:	041b      	lsls	r3, r3, #16
 800fd12:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800fd16:	431a      	orrs	r2, r3
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	691b      	ldr	r3, [r3, #16]
 800fd1c:	3b01      	subs	r3, #1
 800fd1e:	061b      	lsls	r3, r3, #24
 800fd20:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800fd24:	4931      	ldr	r1, [pc, #196]	@ (800fdec <RCCEx_PLL3_Config+0x15c>)
 800fd26:	4313      	orrs	r3, r2
 800fd28:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800fd2a:	4b30      	ldr	r3, [pc, #192]	@ (800fdec <RCCEx_PLL3_Config+0x15c>)
 800fd2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fd2e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	695b      	ldr	r3, [r3, #20]
 800fd36:	492d      	ldr	r1, [pc, #180]	@ (800fdec <RCCEx_PLL3_Config+0x15c>)
 800fd38:	4313      	orrs	r3, r2
 800fd3a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800fd3c:	4b2b      	ldr	r3, [pc, #172]	@ (800fdec <RCCEx_PLL3_Config+0x15c>)
 800fd3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fd40:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	699b      	ldr	r3, [r3, #24]
 800fd48:	4928      	ldr	r1, [pc, #160]	@ (800fdec <RCCEx_PLL3_Config+0x15c>)
 800fd4a:	4313      	orrs	r3, r2
 800fd4c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800fd4e:	4b27      	ldr	r3, [pc, #156]	@ (800fdec <RCCEx_PLL3_Config+0x15c>)
 800fd50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fd52:	4a26      	ldr	r2, [pc, #152]	@ (800fdec <RCCEx_PLL3_Config+0x15c>)
 800fd54:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800fd58:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800fd5a:	4b24      	ldr	r3, [pc, #144]	@ (800fdec <RCCEx_PLL3_Config+0x15c>)
 800fd5c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800fd5e:	4b24      	ldr	r3, [pc, #144]	@ (800fdf0 <RCCEx_PLL3_Config+0x160>)
 800fd60:	4013      	ands	r3, r2
 800fd62:	687a      	ldr	r2, [r7, #4]
 800fd64:	69d2      	ldr	r2, [r2, #28]
 800fd66:	00d2      	lsls	r2, r2, #3
 800fd68:	4920      	ldr	r1, [pc, #128]	@ (800fdec <RCCEx_PLL3_Config+0x15c>)
 800fd6a:	4313      	orrs	r3, r2
 800fd6c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800fd6e:	4b1f      	ldr	r3, [pc, #124]	@ (800fdec <RCCEx_PLL3_Config+0x15c>)
 800fd70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fd72:	4a1e      	ldr	r2, [pc, #120]	@ (800fdec <RCCEx_PLL3_Config+0x15c>)
 800fd74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800fd78:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800fd7a:	683b      	ldr	r3, [r7, #0]
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	d106      	bne.n	800fd8e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800fd80:	4b1a      	ldr	r3, [pc, #104]	@ (800fdec <RCCEx_PLL3_Config+0x15c>)
 800fd82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fd84:	4a19      	ldr	r2, [pc, #100]	@ (800fdec <RCCEx_PLL3_Config+0x15c>)
 800fd86:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800fd8a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800fd8c:	e00f      	b.n	800fdae <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800fd8e:	683b      	ldr	r3, [r7, #0]
 800fd90:	2b01      	cmp	r3, #1
 800fd92:	d106      	bne.n	800fda2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800fd94:	4b15      	ldr	r3, [pc, #84]	@ (800fdec <RCCEx_PLL3_Config+0x15c>)
 800fd96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fd98:	4a14      	ldr	r2, [pc, #80]	@ (800fdec <RCCEx_PLL3_Config+0x15c>)
 800fd9a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800fd9e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800fda0:	e005      	b.n	800fdae <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800fda2:	4b12      	ldr	r3, [pc, #72]	@ (800fdec <RCCEx_PLL3_Config+0x15c>)
 800fda4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fda6:	4a11      	ldr	r2, [pc, #68]	@ (800fdec <RCCEx_PLL3_Config+0x15c>)
 800fda8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800fdac:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800fdae:	4b0f      	ldr	r3, [pc, #60]	@ (800fdec <RCCEx_PLL3_Config+0x15c>)
 800fdb0:	681b      	ldr	r3, [r3, #0]
 800fdb2:	4a0e      	ldr	r2, [pc, #56]	@ (800fdec <RCCEx_PLL3_Config+0x15c>)
 800fdb4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800fdb8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800fdba:	f7f3 fb8b 	bl	80034d4 <HAL_GetTick>
 800fdbe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800fdc0:	e008      	b.n	800fdd4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800fdc2:	f7f3 fb87 	bl	80034d4 <HAL_GetTick>
 800fdc6:	4602      	mov	r2, r0
 800fdc8:	68bb      	ldr	r3, [r7, #8]
 800fdca:	1ad3      	subs	r3, r2, r3
 800fdcc:	2b02      	cmp	r3, #2
 800fdce:	d901      	bls.n	800fdd4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800fdd0:	2303      	movs	r3, #3
 800fdd2:	e006      	b.n	800fde2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800fdd4:	4b05      	ldr	r3, [pc, #20]	@ (800fdec <RCCEx_PLL3_Config+0x15c>)
 800fdd6:	681b      	ldr	r3, [r3, #0]
 800fdd8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800fddc:	2b00      	cmp	r3, #0
 800fdde:	d0f0      	beq.n	800fdc2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800fde0:	7bfb      	ldrb	r3, [r7, #15]
}
 800fde2:	4618      	mov	r0, r3
 800fde4:	3710      	adds	r7, #16
 800fde6:	46bd      	mov	sp, r7
 800fde8:	bd80      	pop	{r7, pc}
 800fdea:	bf00      	nop
 800fdec:	58024400 	.word	0x58024400
 800fdf0:	ffff0007 	.word	0xffff0007

0800fdf4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800fdf4:	b580      	push	{r7, lr}
 800fdf6:	b084      	sub	sp, #16
 800fdf8:	af00      	add	r7, sp, #0
 800fdfa:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	2b00      	cmp	r3, #0
 800fe00:	d101      	bne.n	800fe06 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800fe02:	2301      	movs	r3, #1
 800fe04:	e10f      	b.n	8010026 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	2200      	movs	r2, #0
 800fe0a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	681b      	ldr	r3, [r3, #0]
 800fe10:	4a87      	ldr	r2, [pc, #540]	@ (8010030 <HAL_SPI_Init+0x23c>)
 800fe12:	4293      	cmp	r3, r2
 800fe14:	d00f      	beq.n	800fe36 <HAL_SPI_Init+0x42>
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	681b      	ldr	r3, [r3, #0]
 800fe1a:	4a86      	ldr	r2, [pc, #536]	@ (8010034 <HAL_SPI_Init+0x240>)
 800fe1c:	4293      	cmp	r3, r2
 800fe1e:	d00a      	beq.n	800fe36 <HAL_SPI_Init+0x42>
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	681b      	ldr	r3, [r3, #0]
 800fe24:	4a84      	ldr	r2, [pc, #528]	@ (8010038 <HAL_SPI_Init+0x244>)
 800fe26:	4293      	cmp	r3, r2
 800fe28:	d005      	beq.n	800fe36 <HAL_SPI_Init+0x42>
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	68db      	ldr	r3, [r3, #12]
 800fe2e:	2b0f      	cmp	r3, #15
 800fe30:	d901      	bls.n	800fe36 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800fe32:	2301      	movs	r3, #1
 800fe34:	e0f7      	b.n	8010026 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800fe36:	6878      	ldr	r0, [r7, #4]
 800fe38:	f000 fe2e 	bl	8010a98 <SPI_GetPacketSize>
 800fe3c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	681b      	ldr	r3, [r3, #0]
 800fe42:	4a7b      	ldr	r2, [pc, #492]	@ (8010030 <HAL_SPI_Init+0x23c>)
 800fe44:	4293      	cmp	r3, r2
 800fe46:	d00c      	beq.n	800fe62 <HAL_SPI_Init+0x6e>
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	681b      	ldr	r3, [r3, #0]
 800fe4c:	4a79      	ldr	r2, [pc, #484]	@ (8010034 <HAL_SPI_Init+0x240>)
 800fe4e:	4293      	cmp	r3, r2
 800fe50:	d007      	beq.n	800fe62 <HAL_SPI_Init+0x6e>
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	681b      	ldr	r3, [r3, #0]
 800fe56:	4a78      	ldr	r2, [pc, #480]	@ (8010038 <HAL_SPI_Init+0x244>)
 800fe58:	4293      	cmp	r3, r2
 800fe5a:	d002      	beq.n	800fe62 <HAL_SPI_Init+0x6e>
 800fe5c:	68fb      	ldr	r3, [r7, #12]
 800fe5e:	2b08      	cmp	r3, #8
 800fe60:	d811      	bhi.n	800fe86 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800fe66:	4a72      	ldr	r2, [pc, #456]	@ (8010030 <HAL_SPI_Init+0x23c>)
 800fe68:	4293      	cmp	r3, r2
 800fe6a:	d009      	beq.n	800fe80 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	681b      	ldr	r3, [r3, #0]
 800fe70:	4a70      	ldr	r2, [pc, #448]	@ (8010034 <HAL_SPI_Init+0x240>)
 800fe72:	4293      	cmp	r3, r2
 800fe74:	d004      	beq.n	800fe80 <HAL_SPI_Init+0x8c>
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	681b      	ldr	r3, [r3, #0]
 800fe7a:	4a6f      	ldr	r2, [pc, #444]	@ (8010038 <HAL_SPI_Init+0x244>)
 800fe7c:	4293      	cmp	r3, r2
 800fe7e:	d104      	bne.n	800fe8a <HAL_SPI_Init+0x96>
 800fe80:	68fb      	ldr	r3, [r7, #12]
 800fe82:	2b10      	cmp	r3, #16
 800fe84:	d901      	bls.n	800fe8a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800fe86:	2301      	movs	r3, #1
 800fe88:	e0cd      	b.n	8010026 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800fe90:	b2db      	uxtb	r3, r3
 800fe92:	2b00      	cmp	r3, #0
 800fe94:	d106      	bne.n	800fea4 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	2200      	movs	r2, #0
 800fe9a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800fe9e:	6878      	ldr	r0, [r7, #4]
 800fea0:	f7f2 fc9e 	bl	80027e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	2202      	movs	r2, #2
 800fea8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	681b      	ldr	r3, [r3, #0]
 800feb0:	681a      	ldr	r2, [r3, #0]
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	681b      	ldr	r3, [r3, #0]
 800feb6:	f022 0201 	bic.w	r2, r2, #1
 800feba:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	681b      	ldr	r3, [r3, #0]
 800fec0:	689b      	ldr	r3, [r3, #8]
 800fec2:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800fec6:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	699b      	ldr	r3, [r3, #24]
 800fecc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800fed0:	d119      	bne.n	800ff06 <HAL_SPI_Init+0x112>
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	685b      	ldr	r3, [r3, #4]
 800fed6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800feda:	d103      	bne.n	800fee4 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800fee0:	2b00      	cmp	r3, #0
 800fee2:	d008      	beq.n	800fef6 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800fee8:	2b00      	cmp	r3, #0
 800feea:	d10c      	bne.n	800ff06 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800fef0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800fef4:	d107      	bne.n	800ff06 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	681b      	ldr	r3, [r3, #0]
 800fefa:	681a      	ldr	r2, [r3, #0]
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	681b      	ldr	r3, [r3, #0]
 800ff00:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800ff04:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	685b      	ldr	r3, [r3, #4]
 800ff0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ff0e:	2b00      	cmp	r3, #0
 800ff10:	d00f      	beq.n	800ff32 <HAL_SPI_Init+0x13e>
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	68db      	ldr	r3, [r3, #12]
 800ff16:	2b06      	cmp	r3, #6
 800ff18:	d90b      	bls.n	800ff32 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	681b      	ldr	r3, [r3, #0]
 800ff1e:	681b      	ldr	r3, [r3, #0]
 800ff20:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	681b      	ldr	r3, [r3, #0]
 800ff2c:	430a      	orrs	r2, r1
 800ff2e:	601a      	str	r2, [r3, #0]
 800ff30:	e007      	b.n	800ff42 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	681b      	ldr	r3, [r3, #0]
 800ff36:	681a      	ldr	r2, [r3, #0]
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	681b      	ldr	r3, [r3, #0]
 800ff3c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800ff40:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	69da      	ldr	r2, [r3, #28]
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ff4a:	431a      	orrs	r2, r3
 800ff4c:	68bb      	ldr	r3, [r7, #8]
 800ff4e:	431a      	orrs	r2, r3
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ff54:	ea42 0103 	orr.w	r1, r2, r3
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	68da      	ldr	r2, [r3, #12]
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	681b      	ldr	r3, [r3, #0]
 800ff60:	430a      	orrs	r2, r1
 800ff62:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ff6c:	431a      	orrs	r2, r3
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ff72:	431a      	orrs	r2, r3
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	699b      	ldr	r3, [r3, #24]
 800ff78:	431a      	orrs	r2, r3
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	691b      	ldr	r3, [r3, #16]
 800ff7e:	431a      	orrs	r2, r3
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	695b      	ldr	r3, [r3, #20]
 800ff84:	431a      	orrs	r2, r3
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	6a1b      	ldr	r3, [r3, #32]
 800ff8a:	431a      	orrs	r2, r3
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	685b      	ldr	r3, [r3, #4]
 800ff90:	431a      	orrs	r2, r3
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ff96:	431a      	orrs	r2, r3
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	689b      	ldr	r3, [r3, #8]
 800ff9c:	431a      	orrs	r2, r3
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ffa2:	ea42 0103 	orr.w	r1, r2, r3
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	681b      	ldr	r3, [r3, #0]
 800ffae:	430a      	orrs	r2, r1
 800ffb0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	685b      	ldr	r3, [r3, #4]
 800ffb6:	2b00      	cmp	r3, #0
 800ffb8:	d113      	bne.n	800ffe2 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	681b      	ldr	r3, [r3, #0]
 800ffbe:	689b      	ldr	r3, [r3, #8]
 800ffc0:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	681b      	ldr	r3, [r3, #0]
 800ffc8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ffcc:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	681b      	ldr	r3, [r3, #0]
 800ffd2:	689b      	ldr	r3, [r3, #8]
 800ffd4:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	681b      	ldr	r3, [r3, #0]
 800ffdc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800ffe0:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	681b      	ldr	r3, [r3, #0]
 800ffe6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	681b      	ldr	r3, [r3, #0]
 800ffec:	f022 0201 	bic.w	r2, r2, #1
 800fff0:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	685b      	ldr	r3, [r3, #4]
 800fff6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800fffa:	2b00      	cmp	r3, #0
 800fffc:	d00a      	beq.n	8010014 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	681b      	ldr	r3, [r3, #0]
 8010002:	68db      	ldr	r3, [r3, #12]
 8010004:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	681b      	ldr	r3, [r3, #0]
 8010010:	430a      	orrs	r2, r1
 8010012:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	2200      	movs	r2, #0
 8010018:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	2201      	movs	r2, #1
 8010020:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8010024:	2300      	movs	r3, #0
}
 8010026:	4618      	mov	r0, r3
 8010028:	3710      	adds	r7, #16
 801002a:	46bd      	mov	sp, r7
 801002c:	bd80      	pop	{r7, pc}
 801002e:	bf00      	nop
 8010030:	40013000 	.word	0x40013000
 8010034:	40003800 	.word	0x40003800
 8010038:	40003c00 	.word	0x40003c00

0801003c <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801003c:	b580      	push	{r7, lr}
 801003e:	b088      	sub	sp, #32
 8010040:	af02      	add	r7, sp, #8
 8010042:	60f8      	str	r0, [r7, #12]
 8010044:	60b9      	str	r1, [r7, #8]
 8010046:	603b      	str	r3, [r7, #0]
 8010048:	4613      	mov	r3, r2
 801004a:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 801004c:	68fb      	ldr	r3, [r7, #12]
 801004e:	681b      	ldr	r3, [r3, #0]
 8010050:	3320      	adds	r3, #32
 8010052:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8010054:	f7f3 fa3e 	bl	80034d4 <HAL_GetTick>
 8010058:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 801005a:	68fb      	ldr	r3, [r7, #12]
 801005c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8010060:	b2db      	uxtb	r3, r3
 8010062:	2b01      	cmp	r3, #1
 8010064:	d001      	beq.n	801006a <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8010066:	2302      	movs	r3, #2
 8010068:	e1d1      	b.n	801040e <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 801006a:	68bb      	ldr	r3, [r7, #8]
 801006c:	2b00      	cmp	r3, #0
 801006e:	d002      	beq.n	8010076 <HAL_SPI_Transmit+0x3a>
 8010070:	88fb      	ldrh	r3, [r7, #6]
 8010072:	2b00      	cmp	r3, #0
 8010074:	d101      	bne.n	801007a <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8010076:	2301      	movs	r3, #1
 8010078:	e1c9      	b.n	801040e <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 801007a:	68fb      	ldr	r3, [r7, #12]
 801007c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8010080:	2b01      	cmp	r3, #1
 8010082:	d101      	bne.n	8010088 <HAL_SPI_Transmit+0x4c>
 8010084:	2302      	movs	r3, #2
 8010086:	e1c2      	b.n	801040e <HAL_SPI_Transmit+0x3d2>
 8010088:	68fb      	ldr	r3, [r7, #12]
 801008a:	2201      	movs	r2, #1
 801008c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8010090:	68fb      	ldr	r3, [r7, #12]
 8010092:	2203      	movs	r2, #3
 8010094:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8010098:	68fb      	ldr	r3, [r7, #12]
 801009a:	2200      	movs	r2, #0
 801009c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80100a0:	68fb      	ldr	r3, [r7, #12]
 80100a2:	68ba      	ldr	r2, [r7, #8]
 80100a4:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 80100a6:	68fb      	ldr	r3, [r7, #12]
 80100a8:	88fa      	ldrh	r2, [r7, #6]
 80100aa:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 80100ae:	68fb      	ldr	r3, [r7, #12]
 80100b0:	88fa      	ldrh	r2, [r7, #6]
 80100b2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80100b6:	68fb      	ldr	r3, [r7, #12]
 80100b8:	2200      	movs	r2, #0
 80100ba:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 80100bc:	68fb      	ldr	r3, [r7, #12]
 80100be:	2200      	movs	r2, #0
 80100c0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 80100c4:	68fb      	ldr	r3, [r7, #12]
 80100c6:	2200      	movs	r2, #0
 80100c8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 80100cc:	68fb      	ldr	r3, [r7, #12]
 80100ce:	2200      	movs	r2, #0
 80100d0:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 80100d2:	68fb      	ldr	r3, [r7, #12]
 80100d4:	2200      	movs	r2, #0
 80100d6:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80100d8:	68fb      	ldr	r3, [r7, #12]
 80100da:	689b      	ldr	r3, [r3, #8]
 80100dc:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 80100e0:	d108      	bne.n	80100f4 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 80100e2:	68fb      	ldr	r3, [r7, #12]
 80100e4:	681b      	ldr	r3, [r3, #0]
 80100e6:	681a      	ldr	r2, [r3, #0]
 80100e8:	68fb      	ldr	r3, [r7, #12]
 80100ea:	681b      	ldr	r3, [r3, #0]
 80100ec:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80100f0:	601a      	str	r2, [r3, #0]
 80100f2:	e009      	b.n	8010108 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 80100f4:	68fb      	ldr	r3, [r7, #12]
 80100f6:	681b      	ldr	r3, [r3, #0]
 80100f8:	68db      	ldr	r3, [r3, #12]
 80100fa:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 80100fe:	68fb      	ldr	r3, [r7, #12]
 8010100:	681b      	ldr	r3, [r3, #0]
 8010102:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8010106:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8010108:	68fb      	ldr	r3, [r7, #12]
 801010a:	681b      	ldr	r3, [r3, #0]
 801010c:	685a      	ldr	r2, [r3, #4]
 801010e:	4b96      	ldr	r3, [pc, #600]	@ (8010368 <HAL_SPI_Transmit+0x32c>)
 8010110:	4013      	ands	r3, r2
 8010112:	88f9      	ldrh	r1, [r7, #6]
 8010114:	68fa      	ldr	r2, [r7, #12]
 8010116:	6812      	ldr	r2, [r2, #0]
 8010118:	430b      	orrs	r3, r1
 801011a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 801011c:	68fb      	ldr	r3, [r7, #12]
 801011e:	681b      	ldr	r3, [r3, #0]
 8010120:	681a      	ldr	r2, [r3, #0]
 8010122:	68fb      	ldr	r3, [r7, #12]
 8010124:	681b      	ldr	r3, [r3, #0]
 8010126:	f042 0201 	orr.w	r2, r2, #1
 801012a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 801012c:	68fb      	ldr	r3, [r7, #12]
 801012e:	685b      	ldr	r3, [r3, #4]
 8010130:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8010134:	d107      	bne.n	8010146 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8010136:	68fb      	ldr	r3, [r7, #12]
 8010138:	681b      	ldr	r3, [r3, #0]
 801013a:	681a      	ldr	r2, [r3, #0]
 801013c:	68fb      	ldr	r3, [r7, #12]
 801013e:	681b      	ldr	r3, [r3, #0]
 8010140:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8010144:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8010146:	68fb      	ldr	r3, [r7, #12]
 8010148:	68db      	ldr	r3, [r3, #12]
 801014a:	2b0f      	cmp	r3, #15
 801014c:	d947      	bls.n	80101de <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 801014e:	e03f      	b.n	80101d0 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8010150:	68fb      	ldr	r3, [r7, #12]
 8010152:	681b      	ldr	r3, [r3, #0]
 8010154:	695b      	ldr	r3, [r3, #20]
 8010156:	f003 0302 	and.w	r3, r3, #2
 801015a:	2b02      	cmp	r3, #2
 801015c:	d114      	bne.n	8010188 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 801015e:	68fb      	ldr	r3, [r7, #12]
 8010160:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8010162:	68fb      	ldr	r3, [r7, #12]
 8010164:	681b      	ldr	r3, [r3, #0]
 8010166:	6812      	ldr	r2, [r2, #0]
 8010168:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 801016a:	68fb      	ldr	r3, [r7, #12]
 801016c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801016e:	1d1a      	adds	r2, r3, #4
 8010170:	68fb      	ldr	r3, [r7, #12]
 8010172:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8010174:	68fb      	ldr	r3, [r7, #12]
 8010176:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801017a:	b29b      	uxth	r3, r3
 801017c:	3b01      	subs	r3, #1
 801017e:	b29a      	uxth	r2, r3
 8010180:	68fb      	ldr	r3, [r7, #12]
 8010182:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8010186:	e023      	b.n	80101d0 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010188:	f7f3 f9a4 	bl	80034d4 <HAL_GetTick>
 801018c:	4602      	mov	r2, r0
 801018e:	693b      	ldr	r3, [r7, #16]
 8010190:	1ad3      	subs	r3, r2, r3
 8010192:	683a      	ldr	r2, [r7, #0]
 8010194:	429a      	cmp	r2, r3
 8010196:	d803      	bhi.n	80101a0 <HAL_SPI_Transmit+0x164>
 8010198:	683b      	ldr	r3, [r7, #0]
 801019a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801019e:	d102      	bne.n	80101a6 <HAL_SPI_Transmit+0x16a>
 80101a0:	683b      	ldr	r3, [r7, #0]
 80101a2:	2b00      	cmp	r3, #0
 80101a4:	d114      	bne.n	80101d0 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80101a6:	68f8      	ldr	r0, [r7, #12]
 80101a8:	f000 fba8 	bl	80108fc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80101ac:	68fb      	ldr	r3, [r7, #12]
 80101ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80101b2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80101b6:	68fb      	ldr	r3, [r7, #12]
 80101b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80101bc:	68fb      	ldr	r3, [r7, #12]
 80101be:	2201      	movs	r2, #1
 80101c0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80101c4:	68fb      	ldr	r3, [r7, #12]
 80101c6:	2200      	movs	r2, #0
 80101c8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80101cc:	2303      	movs	r3, #3
 80101ce:	e11e      	b.n	801040e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80101d0:	68fb      	ldr	r3, [r7, #12]
 80101d2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80101d6:	b29b      	uxth	r3, r3
 80101d8:	2b00      	cmp	r3, #0
 80101da:	d1b9      	bne.n	8010150 <HAL_SPI_Transmit+0x114>
 80101dc:	e0f1      	b.n	80103c2 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80101de:	68fb      	ldr	r3, [r7, #12]
 80101e0:	68db      	ldr	r3, [r3, #12]
 80101e2:	2b07      	cmp	r3, #7
 80101e4:	f240 80e6 	bls.w	80103b4 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80101e8:	e05d      	b.n	80102a6 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80101ea:	68fb      	ldr	r3, [r7, #12]
 80101ec:	681b      	ldr	r3, [r3, #0]
 80101ee:	695b      	ldr	r3, [r3, #20]
 80101f0:	f003 0302 	and.w	r3, r3, #2
 80101f4:	2b02      	cmp	r3, #2
 80101f6:	d132      	bne.n	801025e <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80101f8:	68fb      	ldr	r3, [r7, #12]
 80101fa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80101fe:	b29b      	uxth	r3, r3
 8010200:	2b01      	cmp	r3, #1
 8010202:	d918      	bls.n	8010236 <HAL_SPI_Transmit+0x1fa>
 8010204:	68fb      	ldr	r3, [r7, #12]
 8010206:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010208:	2b00      	cmp	r3, #0
 801020a:	d014      	beq.n	8010236 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 801020c:	68fb      	ldr	r3, [r7, #12]
 801020e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8010210:	68fb      	ldr	r3, [r7, #12]
 8010212:	681b      	ldr	r3, [r3, #0]
 8010214:	6812      	ldr	r2, [r2, #0]
 8010216:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8010218:	68fb      	ldr	r3, [r7, #12]
 801021a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801021c:	1d1a      	adds	r2, r3, #4
 801021e:	68fb      	ldr	r3, [r7, #12]
 8010220:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8010222:	68fb      	ldr	r3, [r7, #12]
 8010224:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010228:	b29b      	uxth	r3, r3
 801022a:	3b02      	subs	r3, #2
 801022c:	b29a      	uxth	r2, r3
 801022e:	68fb      	ldr	r3, [r7, #12]
 8010230:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8010234:	e037      	b.n	80102a6 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8010236:	68fb      	ldr	r3, [r7, #12]
 8010238:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801023a:	881a      	ldrh	r2, [r3, #0]
 801023c:	697b      	ldr	r3, [r7, #20]
 801023e:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8010240:	68fb      	ldr	r3, [r7, #12]
 8010242:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010244:	1c9a      	adds	r2, r3, #2
 8010246:	68fb      	ldr	r3, [r7, #12]
 8010248:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 801024a:	68fb      	ldr	r3, [r7, #12]
 801024c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010250:	b29b      	uxth	r3, r3
 8010252:	3b01      	subs	r3, #1
 8010254:	b29a      	uxth	r2, r3
 8010256:	68fb      	ldr	r3, [r7, #12]
 8010258:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 801025c:	e023      	b.n	80102a6 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801025e:	f7f3 f939 	bl	80034d4 <HAL_GetTick>
 8010262:	4602      	mov	r2, r0
 8010264:	693b      	ldr	r3, [r7, #16]
 8010266:	1ad3      	subs	r3, r2, r3
 8010268:	683a      	ldr	r2, [r7, #0]
 801026a:	429a      	cmp	r2, r3
 801026c:	d803      	bhi.n	8010276 <HAL_SPI_Transmit+0x23a>
 801026e:	683b      	ldr	r3, [r7, #0]
 8010270:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010274:	d102      	bne.n	801027c <HAL_SPI_Transmit+0x240>
 8010276:	683b      	ldr	r3, [r7, #0]
 8010278:	2b00      	cmp	r3, #0
 801027a:	d114      	bne.n	80102a6 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 801027c:	68f8      	ldr	r0, [r7, #12]
 801027e:	f000 fb3d 	bl	80108fc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8010282:	68fb      	ldr	r3, [r7, #12]
 8010284:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010288:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 801028c:	68fb      	ldr	r3, [r7, #12]
 801028e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8010292:	68fb      	ldr	r3, [r7, #12]
 8010294:	2201      	movs	r2, #1
 8010296:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 801029a:	68fb      	ldr	r3, [r7, #12]
 801029c:	2200      	movs	r2, #0
 801029e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80102a2:	2303      	movs	r3, #3
 80102a4:	e0b3      	b.n	801040e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80102a6:	68fb      	ldr	r3, [r7, #12]
 80102a8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80102ac:	b29b      	uxth	r3, r3
 80102ae:	2b00      	cmp	r3, #0
 80102b0:	d19b      	bne.n	80101ea <HAL_SPI_Transmit+0x1ae>
 80102b2:	e086      	b.n	80103c2 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80102b4:	68fb      	ldr	r3, [r7, #12]
 80102b6:	681b      	ldr	r3, [r3, #0]
 80102b8:	695b      	ldr	r3, [r3, #20]
 80102ba:	f003 0302 	and.w	r3, r3, #2
 80102be:	2b02      	cmp	r3, #2
 80102c0:	d154      	bne.n	801036c <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 80102c2:	68fb      	ldr	r3, [r7, #12]
 80102c4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80102c8:	b29b      	uxth	r3, r3
 80102ca:	2b03      	cmp	r3, #3
 80102cc:	d918      	bls.n	8010300 <HAL_SPI_Transmit+0x2c4>
 80102ce:	68fb      	ldr	r3, [r7, #12]
 80102d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80102d2:	2b40      	cmp	r3, #64	@ 0x40
 80102d4:	d914      	bls.n	8010300 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80102d6:	68fb      	ldr	r3, [r7, #12]
 80102d8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80102da:	68fb      	ldr	r3, [r7, #12]
 80102dc:	681b      	ldr	r3, [r3, #0]
 80102de:	6812      	ldr	r2, [r2, #0]
 80102e0:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80102e2:	68fb      	ldr	r3, [r7, #12]
 80102e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80102e6:	1d1a      	adds	r2, r3, #4
 80102e8:	68fb      	ldr	r3, [r7, #12]
 80102ea:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 80102ec:	68fb      	ldr	r3, [r7, #12]
 80102ee:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80102f2:	b29b      	uxth	r3, r3
 80102f4:	3b04      	subs	r3, #4
 80102f6:	b29a      	uxth	r2, r3
 80102f8:	68fb      	ldr	r3, [r7, #12]
 80102fa:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80102fe:	e059      	b.n	80103b4 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8010300:	68fb      	ldr	r3, [r7, #12]
 8010302:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010306:	b29b      	uxth	r3, r3
 8010308:	2b01      	cmp	r3, #1
 801030a:	d917      	bls.n	801033c <HAL_SPI_Transmit+0x300>
 801030c:	68fb      	ldr	r3, [r7, #12]
 801030e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010310:	2b00      	cmp	r3, #0
 8010312:	d013      	beq.n	801033c <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8010314:	68fb      	ldr	r3, [r7, #12]
 8010316:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010318:	881a      	ldrh	r2, [r3, #0]
 801031a:	697b      	ldr	r3, [r7, #20]
 801031c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 801031e:	68fb      	ldr	r3, [r7, #12]
 8010320:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010322:	1c9a      	adds	r2, r3, #2
 8010324:	68fb      	ldr	r3, [r7, #12]
 8010326:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8010328:	68fb      	ldr	r3, [r7, #12]
 801032a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801032e:	b29b      	uxth	r3, r3
 8010330:	3b02      	subs	r3, #2
 8010332:	b29a      	uxth	r2, r3
 8010334:	68fb      	ldr	r3, [r7, #12]
 8010336:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 801033a:	e03b      	b.n	80103b4 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 801033c:	68fb      	ldr	r3, [r7, #12]
 801033e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8010340:	68fb      	ldr	r3, [r7, #12]
 8010342:	681b      	ldr	r3, [r3, #0]
 8010344:	3320      	adds	r3, #32
 8010346:	7812      	ldrb	r2, [r2, #0]
 8010348:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 801034a:	68fb      	ldr	r3, [r7, #12]
 801034c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801034e:	1c5a      	adds	r2, r3, #1
 8010350:	68fb      	ldr	r3, [r7, #12]
 8010352:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8010354:	68fb      	ldr	r3, [r7, #12]
 8010356:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801035a:	b29b      	uxth	r3, r3
 801035c:	3b01      	subs	r3, #1
 801035e:	b29a      	uxth	r2, r3
 8010360:	68fb      	ldr	r3, [r7, #12]
 8010362:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8010366:	e025      	b.n	80103b4 <HAL_SPI_Transmit+0x378>
 8010368:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801036c:	f7f3 f8b2 	bl	80034d4 <HAL_GetTick>
 8010370:	4602      	mov	r2, r0
 8010372:	693b      	ldr	r3, [r7, #16]
 8010374:	1ad3      	subs	r3, r2, r3
 8010376:	683a      	ldr	r2, [r7, #0]
 8010378:	429a      	cmp	r2, r3
 801037a:	d803      	bhi.n	8010384 <HAL_SPI_Transmit+0x348>
 801037c:	683b      	ldr	r3, [r7, #0]
 801037e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010382:	d102      	bne.n	801038a <HAL_SPI_Transmit+0x34e>
 8010384:	683b      	ldr	r3, [r7, #0]
 8010386:	2b00      	cmp	r3, #0
 8010388:	d114      	bne.n	80103b4 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 801038a:	68f8      	ldr	r0, [r7, #12]
 801038c:	f000 fab6 	bl	80108fc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8010390:	68fb      	ldr	r3, [r7, #12]
 8010392:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010396:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 801039a:	68fb      	ldr	r3, [r7, #12]
 801039c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80103a0:	68fb      	ldr	r3, [r7, #12]
 80103a2:	2201      	movs	r2, #1
 80103a4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80103a8:	68fb      	ldr	r3, [r7, #12]
 80103aa:	2200      	movs	r2, #0
 80103ac:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80103b0:	2303      	movs	r3, #3
 80103b2:	e02c      	b.n	801040e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80103b4:	68fb      	ldr	r3, [r7, #12]
 80103b6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80103ba:	b29b      	uxth	r3, r3
 80103bc:	2b00      	cmp	r3, #0
 80103be:	f47f af79 	bne.w	80102b4 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 80103c2:	693b      	ldr	r3, [r7, #16]
 80103c4:	9300      	str	r3, [sp, #0]
 80103c6:	683b      	ldr	r3, [r7, #0]
 80103c8:	2200      	movs	r2, #0
 80103ca:	2108      	movs	r1, #8
 80103cc:	68f8      	ldr	r0, [r7, #12]
 80103ce:	f000 fb35 	bl	8010a3c <SPI_WaitOnFlagUntilTimeout>
 80103d2:	4603      	mov	r3, r0
 80103d4:	2b00      	cmp	r3, #0
 80103d6:	d007      	beq.n	80103e8 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80103d8:	68fb      	ldr	r3, [r7, #12]
 80103da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80103de:	f043 0220 	orr.w	r2, r3, #32
 80103e2:	68fb      	ldr	r3, [r7, #12]
 80103e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80103e8:	68f8      	ldr	r0, [r7, #12]
 80103ea:	f000 fa87 	bl	80108fc <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 80103ee:	68fb      	ldr	r3, [r7, #12]
 80103f0:	2201      	movs	r2, #1
 80103f2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80103f6:	68fb      	ldr	r3, [r7, #12]
 80103f8:	2200      	movs	r2, #0
 80103fa:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80103fe:	68fb      	ldr	r3, [r7, #12]
 8010400:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010404:	2b00      	cmp	r3, #0
 8010406:	d001      	beq.n	801040c <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8010408:	2301      	movs	r3, #1
 801040a:	e000      	b.n	801040e <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 801040c:	2300      	movs	r3, #0
  }
}
 801040e:	4618      	mov	r0, r3
 8010410:	3718      	adds	r7, #24
 8010412:	46bd      	mov	sp, r7
 8010414:	bd80      	pop	{r7, pc}
 8010416:	bf00      	nop

08010418 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010418:	b580      	push	{r7, lr}
 801041a:	b088      	sub	sp, #32
 801041c:	af00      	add	r7, sp, #0
 801041e:	60f8      	str	r0, [r7, #12]
 8010420:	60b9      	str	r1, [r7, #8]
 8010422:	603b      	str	r3, [r7, #0]
 8010424:	4613      	mov	r3, r2
 8010426:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8010428:	68fb      	ldr	r3, [r7, #12]
 801042a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801042c:	095b      	lsrs	r3, r3, #5
 801042e:	b29b      	uxth	r3, r3
 8010430:	3301      	adds	r3, #1
 8010432:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8010434:	68fb      	ldr	r3, [r7, #12]
 8010436:	681b      	ldr	r3, [r3, #0]
 8010438:	3330      	adds	r3, #48	@ 0x30
 801043a:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801043c:	f7f3 f84a 	bl	80034d4 <HAL_GetTick>
 8010440:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8010442:	68fb      	ldr	r3, [r7, #12]
 8010444:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8010448:	b2db      	uxtb	r3, r3
 801044a:	2b01      	cmp	r3, #1
 801044c:	d001      	beq.n	8010452 <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 801044e:	2302      	movs	r3, #2
 8010450:	e250      	b.n	80108f4 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 8010452:	68bb      	ldr	r3, [r7, #8]
 8010454:	2b00      	cmp	r3, #0
 8010456:	d002      	beq.n	801045e <HAL_SPI_Receive+0x46>
 8010458:	88fb      	ldrh	r3, [r7, #6]
 801045a:	2b00      	cmp	r3, #0
 801045c:	d101      	bne.n	8010462 <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 801045e:	2301      	movs	r3, #1
 8010460:	e248      	b.n	80108f4 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8010462:	68fb      	ldr	r3, [r7, #12]
 8010464:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8010468:	2b01      	cmp	r3, #1
 801046a:	d101      	bne.n	8010470 <HAL_SPI_Receive+0x58>
 801046c:	2302      	movs	r3, #2
 801046e:	e241      	b.n	80108f4 <HAL_SPI_Receive+0x4dc>
 8010470:	68fb      	ldr	r3, [r7, #12]
 8010472:	2201      	movs	r2, #1
 8010474:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8010478:	68fb      	ldr	r3, [r7, #12]
 801047a:	2204      	movs	r2, #4
 801047c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8010480:	68fb      	ldr	r3, [r7, #12]
 8010482:	2200      	movs	r2, #0
 8010484:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8010488:	68fb      	ldr	r3, [r7, #12]
 801048a:	68ba      	ldr	r2, [r7, #8]
 801048c:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 801048e:	68fb      	ldr	r3, [r7, #12]
 8010490:	88fa      	ldrh	r2, [r7, #6]
 8010492:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 8010496:	68fb      	ldr	r3, [r7, #12]
 8010498:	88fa      	ldrh	r2, [r7, #6]
 801049a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 801049e:	68fb      	ldr	r3, [r7, #12]
 80104a0:	2200      	movs	r2, #0
 80104a2:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 80104a4:	68fb      	ldr	r3, [r7, #12]
 80104a6:	2200      	movs	r2, #0
 80104a8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 80104ac:	68fb      	ldr	r3, [r7, #12]
 80104ae:	2200      	movs	r2, #0
 80104b0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 80104b4:	68fb      	ldr	r3, [r7, #12]
 80104b6:	2200      	movs	r2, #0
 80104b8:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 80104ba:	68fb      	ldr	r3, [r7, #12]
 80104bc:	2200      	movs	r2, #0
 80104be:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80104c0:	68fb      	ldr	r3, [r7, #12]
 80104c2:	689b      	ldr	r3, [r3, #8]
 80104c4:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 80104c8:	d108      	bne.n	80104dc <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 80104ca:	68fb      	ldr	r3, [r7, #12]
 80104cc:	681b      	ldr	r3, [r3, #0]
 80104ce:	681a      	ldr	r2, [r3, #0]
 80104d0:	68fb      	ldr	r3, [r7, #12]
 80104d2:	681b      	ldr	r3, [r3, #0]
 80104d4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80104d8:	601a      	str	r2, [r3, #0]
 80104da:	e009      	b.n	80104f0 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 80104dc:	68fb      	ldr	r3, [r7, #12]
 80104de:	681b      	ldr	r3, [r3, #0]
 80104e0:	68db      	ldr	r3, [r3, #12]
 80104e2:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 80104e6:	68fb      	ldr	r3, [r7, #12]
 80104e8:	681b      	ldr	r3, [r3, #0]
 80104ea:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80104ee:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80104f0:	68fb      	ldr	r3, [r7, #12]
 80104f2:	681b      	ldr	r3, [r3, #0]
 80104f4:	685a      	ldr	r2, [r3, #4]
 80104f6:	4b95      	ldr	r3, [pc, #596]	@ (801074c <HAL_SPI_Receive+0x334>)
 80104f8:	4013      	ands	r3, r2
 80104fa:	88f9      	ldrh	r1, [r7, #6]
 80104fc:	68fa      	ldr	r2, [r7, #12]
 80104fe:	6812      	ldr	r2, [r2, #0]
 8010500:	430b      	orrs	r3, r1
 8010502:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8010504:	68fb      	ldr	r3, [r7, #12]
 8010506:	681b      	ldr	r3, [r3, #0]
 8010508:	681a      	ldr	r2, [r3, #0]
 801050a:	68fb      	ldr	r3, [r7, #12]
 801050c:	681b      	ldr	r3, [r3, #0]
 801050e:	f042 0201 	orr.w	r2, r2, #1
 8010512:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8010514:	68fb      	ldr	r3, [r7, #12]
 8010516:	685b      	ldr	r3, [r3, #4]
 8010518:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801051c:	d107      	bne.n	801052e <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 801051e:	68fb      	ldr	r3, [r7, #12]
 8010520:	681b      	ldr	r3, [r3, #0]
 8010522:	681a      	ldr	r2, [r3, #0]
 8010524:	68fb      	ldr	r3, [r7, #12]
 8010526:	681b      	ldr	r3, [r3, #0]
 8010528:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801052c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 801052e:	68fb      	ldr	r3, [r7, #12]
 8010530:	68db      	ldr	r3, [r3, #12]
 8010532:	2b0f      	cmp	r3, #15
 8010534:	d96c      	bls.n	8010610 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8010536:	e064      	b.n	8010602 <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8010538:	68fb      	ldr	r3, [r7, #12]
 801053a:	681b      	ldr	r3, [r3, #0]
 801053c:	695b      	ldr	r3, [r3, #20]
 801053e:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8010540:	68fb      	ldr	r3, [r7, #12]
 8010542:	681b      	ldr	r3, [r3, #0]
 8010544:	695b      	ldr	r3, [r3, #20]
 8010546:	f003 0301 	and.w	r3, r3, #1
 801054a:	2b01      	cmp	r3, #1
 801054c:	d114      	bne.n	8010578 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 801054e:	68fb      	ldr	r3, [r7, #12]
 8010550:	681a      	ldr	r2, [r3, #0]
 8010552:	68fb      	ldr	r3, [r7, #12]
 8010554:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010556:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8010558:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 801055a:	68fb      	ldr	r3, [r7, #12]
 801055c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801055e:	1d1a      	adds	r2, r3, #4
 8010560:	68fb      	ldr	r3, [r7, #12]
 8010562:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8010564:	68fb      	ldr	r3, [r7, #12]
 8010566:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801056a:	b29b      	uxth	r3, r3
 801056c:	3b01      	subs	r3, #1
 801056e:	b29a      	uxth	r2, r3
 8010570:	68fb      	ldr	r3, [r7, #12]
 8010572:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8010576:	e044      	b.n	8010602 <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8010578:	68fb      	ldr	r3, [r7, #12]
 801057a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801057e:	b29b      	uxth	r3, r3
 8010580:	8bfa      	ldrh	r2, [r7, #30]
 8010582:	429a      	cmp	r2, r3
 8010584:	d919      	bls.n	80105ba <HAL_SPI_Receive+0x1a2>
 8010586:	693b      	ldr	r3, [r7, #16]
 8010588:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801058c:	2b00      	cmp	r3, #0
 801058e:	d014      	beq.n	80105ba <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8010590:	68fb      	ldr	r3, [r7, #12]
 8010592:	681a      	ldr	r2, [r3, #0]
 8010594:	68fb      	ldr	r3, [r7, #12]
 8010596:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010598:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 801059a:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 801059c:	68fb      	ldr	r3, [r7, #12]
 801059e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80105a0:	1d1a      	adds	r2, r3, #4
 80105a2:	68fb      	ldr	r3, [r7, #12]
 80105a4:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80105a6:	68fb      	ldr	r3, [r7, #12]
 80105a8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80105ac:	b29b      	uxth	r3, r3
 80105ae:	3b01      	subs	r3, #1
 80105b0:	b29a      	uxth	r2, r3
 80105b2:	68fb      	ldr	r3, [r7, #12]
 80105b4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80105b8:	e023      	b.n	8010602 <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80105ba:	f7f2 ff8b 	bl	80034d4 <HAL_GetTick>
 80105be:	4602      	mov	r2, r0
 80105c0:	697b      	ldr	r3, [r7, #20]
 80105c2:	1ad3      	subs	r3, r2, r3
 80105c4:	683a      	ldr	r2, [r7, #0]
 80105c6:	429a      	cmp	r2, r3
 80105c8:	d803      	bhi.n	80105d2 <HAL_SPI_Receive+0x1ba>
 80105ca:	683b      	ldr	r3, [r7, #0]
 80105cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80105d0:	d102      	bne.n	80105d8 <HAL_SPI_Receive+0x1c0>
 80105d2:	683b      	ldr	r3, [r7, #0]
 80105d4:	2b00      	cmp	r3, #0
 80105d6:	d114      	bne.n	8010602 <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80105d8:	68f8      	ldr	r0, [r7, #12]
 80105da:	f000 f98f 	bl	80108fc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80105de:	68fb      	ldr	r3, [r7, #12]
 80105e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80105e4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80105e8:	68fb      	ldr	r3, [r7, #12]
 80105ea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80105ee:	68fb      	ldr	r3, [r7, #12]
 80105f0:	2201      	movs	r2, #1
 80105f2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80105f6:	68fb      	ldr	r3, [r7, #12]
 80105f8:	2200      	movs	r2, #0
 80105fa:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80105fe:	2303      	movs	r3, #3
 8010600:	e178      	b.n	80108f4 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8010602:	68fb      	ldr	r3, [r7, #12]
 8010604:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010608:	b29b      	uxth	r3, r3
 801060a:	2b00      	cmp	r3, #0
 801060c:	d194      	bne.n	8010538 <HAL_SPI_Receive+0x120>
 801060e:	e15e      	b.n	80108ce <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8010610:	68fb      	ldr	r3, [r7, #12]
 8010612:	68db      	ldr	r3, [r3, #12]
 8010614:	2b07      	cmp	r3, #7
 8010616:	f240 8153 	bls.w	80108c0 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 801061a:	e08f      	b.n	801073c <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 801061c:	68fb      	ldr	r3, [r7, #12]
 801061e:	681b      	ldr	r3, [r3, #0]
 8010620:	695b      	ldr	r3, [r3, #20]
 8010622:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8010624:	68fb      	ldr	r3, [r7, #12]
 8010626:	681b      	ldr	r3, [r3, #0]
 8010628:	695b      	ldr	r3, [r3, #20]
 801062a:	f003 0301 	and.w	r3, r3, #1
 801062e:	2b01      	cmp	r3, #1
 8010630:	d114      	bne.n	801065c <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8010632:	68fb      	ldr	r3, [r7, #12]
 8010634:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010636:	69ba      	ldr	r2, [r7, #24]
 8010638:	8812      	ldrh	r2, [r2, #0]
 801063a:	b292      	uxth	r2, r2
 801063c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801063e:	68fb      	ldr	r3, [r7, #12]
 8010640:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010642:	1c9a      	adds	r2, r3, #2
 8010644:	68fb      	ldr	r3, [r7, #12]
 8010646:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8010648:	68fb      	ldr	r3, [r7, #12]
 801064a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801064e:	b29b      	uxth	r3, r3
 8010650:	3b01      	subs	r3, #1
 8010652:	b29a      	uxth	r2, r3
 8010654:	68fb      	ldr	r3, [r7, #12]
 8010656:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 801065a:	e06f      	b.n	801073c <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 801065c:	68fb      	ldr	r3, [r7, #12]
 801065e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010662:	b29b      	uxth	r3, r3
 8010664:	8bfa      	ldrh	r2, [r7, #30]
 8010666:	429a      	cmp	r2, r3
 8010668:	d924      	bls.n	80106b4 <HAL_SPI_Receive+0x29c>
 801066a:	693b      	ldr	r3, [r7, #16]
 801066c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8010670:	2b00      	cmp	r3, #0
 8010672:	d01f      	beq.n	80106b4 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8010674:	68fb      	ldr	r3, [r7, #12]
 8010676:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010678:	69ba      	ldr	r2, [r7, #24]
 801067a:	8812      	ldrh	r2, [r2, #0]
 801067c:	b292      	uxth	r2, r2
 801067e:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8010680:	68fb      	ldr	r3, [r7, #12]
 8010682:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010684:	1c9a      	adds	r2, r3, #2
 8010686:	68fb      	ldr	r3, [r7, #12]
 8010688:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 801068a:	68fb      	ldr	r3, [r7, #12]
 801068c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801068e:	69ba      	ldr	r2, [r7, #24]
 8010690:	8812      	ldrh	r2, [r2, #0]
 8010692:	b292      	uxth	r2, r2
 8010694:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8010696:	68fb      	ldr	r3, [r7, #12]
 8010698:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801069a:	1c9a      	adds	r2, r3, #2
 801069c:	68fb      	ldr	r3, [r7, #12]
 801069e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 80106a0:	68fb      	ldr	r3, [r7, #12]
 80106a2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80106a6:	b29b      	uxth	r3, r3
 80106a8:	3b02      	subs	r3, #2
 80106aa:	b29a      	uxth	r2, r3
 80106ac:	68fb      	ldr	r3, [r7, #12]
 80106ae:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80106b2:	e043      	b.n	801073c <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 80106b4:	68fb      	ldr	r3, [r7, #12]
 80106b6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80106ba:	b29b      	uxth	r3, r3
 80106bc:	2b01      	cmp	r3, #1
 80106be:	d119      	bne.n	80106f4 <HAL_SPI_Receive+0x2dc>
 80106c0:	693b      	ldr	r3, [r7, #16]
 80106c2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80106c6:	2b00      	cmp	r3, #0
 80106c8:	d014      	beq.n	80106f4 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80106ca:	68fb      	ldr	r3, [r7, #12]
 80106cc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80106ce:	69ba      	ldr	r2, [r7, #24]
 80106d0:	8812      	ldrh	r2, [r2, #0]
 80106d2:	b292      	uxth	r2, r2
 80106d4:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80106d6:	68fb      	ldr	r3, [r7, #12]
 80106d8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80106da:	1c9a      	adds	r2, r3, #2
 80106dc:	68fb      	ldr	r3, [r7, #12]
 80106de:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80106e0:	68fb      	ldr	r3, [r7, #12]
 80106e2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80106e6:	b29b      	uxth	r3, r3
 80106e8:	3b01      	subs	r3, #1
 80106ea:	b29a      	uxth	r2, r3
 80106ec:	68fb      	ldr	r3, [r7, #12]
 80106ee:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80106f2:	e023      	b.n	801073c <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80106f4:	f7f2 feee 	bl	80034d4 <HAL_GetTick>
 80106f8:	4602      	mov	r2, r0
 80106fa:	697b      	ldr	r3, [r7, #20]
 80106fc:	1ad3      	subs	r3, r2, r3
 80106fe:	683a      	ldr	r2, [r7, #0]
 8010700:	429a      	cmp	r2, r3
 8010702:	d803      	bhi.n	801070c <HAL_SPI_Receive+0x2f4>
 8010704:	683b      	ldr	r3, [r7, #0]
 8010706:	f1b3 3fff 	cmp.w	r3, #4294967295
 801070a:	d102      	bne.n	8010712 <HAL_SPI_Receive+0x2fa>
 801070c:	683b      	ldr	r3, [r7, #0]
 801070e:	2b00      	cmp	r3, #0
 8010710:	d114      	bne.n	801073c <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8010712:	68f8      	ldr	r0, [r7, #12]
 8010714:	f000 f8f2 	bl	80108fc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8010718:	68fb      	ldr	r3, [r7, #12]
 801071a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801071e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8010722:	68fb      	ldr	r3, [r7, #12]
 8010724:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8010728:	68fb      	ldr	r3, [r7, #12]
 801072a:	2201      	movs	r2, #1
 801072c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8010730:	68fb      	ldr	r3, [r7, #12]
 8010732:	2200      	movs	r2, #0
 8010734:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8010738:	2303      	movs	r3, #3
 801073a:	e0db      	b.n	80108f4 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 801073c:	68fb      	ldr	r3, [r7, #12]
 801073e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010742:	b29b      	uxth	r3, r3
 8010744:	2b00      	cmp	r3, #0
 8010746:	f47f af69 	bne.w	801061c <HAL_SPI_Receive+0x204>
 801074a:	e0c0      	b.n	80108ce <HAL_SPI_Receive+0x4b6>
 801074c:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8010750:	68fb      	ldr	r3, [r7, #12]
 8010752:	681b      	ldr	r3, [r3, #0]
 8010754:	695b      	ldr	r3, [r3, #20]
 8010756:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8010758:	68fb      	ldr	r3, [r7, #12]
 801075a:	681b      	ldr	r3, [r3, #0]
 801075c:	695b      	ldr	r3, [r3, #20]
 801075e:	f003 0301 	and.w	r3, r3, #1
 8010762:	2b01      	cmp	r3, #1
 8010764:	d117      	bne.n	8010796 <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8010766:	68fb      	ldr	r3, [r7, #12]
 8010768:	681b      	ldr	r3, [r3, #0]
 801076a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801076e:	68fb      	ldr	r3, [r7, #12]
 8010770:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010772:	7812      	ldrb	r2, [r2, #0]
 8010774:	b2d2      	uxtb	r2, r2
 8010776:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8010778:	68fb      	ldr	r3, [r7, #12]
 801077a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801077c:	1c5a      	adds	r2, r3, #1
 801077e:	68fb      	ldr	r3, [r7, #12]
 8010780:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8010782:	68fb      	ldr	r3, [r7, #12]
 8010784:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010788:	b29b      	uxth	r3, r3
 801078a:	3b01      	subs	r3, #1
 801078c:	b29a      	uxth	r2, r3
 801078e:	68fb      	ldr	r3, [r7, #12]
 8010790:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8010794:	e094      	b.n	80108c0 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8010796:	68fb      	ldr	r3, [r7, #12]
 8010798:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801079c:	b29b      	uxth	r3, r3
 801079e:	8bfa      	ldrh	r2, [r7, #30]
 80107a0:	429a      	cmp	r2, r3
 80107a2:	d946      	bls.n	8010832 <HAL_SPI_Receive+0x41a>
 80107a4:	693b      	ldr	r3, [r7, #16]
 80107a6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80107aa:	2b00      	cmp	r3, #0
 80107ac:	d041      	beq.n	8010832 <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80107ae:	68fb      	ldr	r3, [r7, #12]
 80107b0:	681b      	ldr	r3, [r3, #0]
 80107b2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80107b6:	68fb      	ldr	r3, [r7, #12]
 80107b8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80107ba:	7812      	ldrb	r2, [r2, #0]
 80107bc:	b2d2      	uxtb	r2, r2
 80107be:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80107c0:	68fb      	ldr	r3, [r7, #12]
 80107c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80107c4:	1c5a      	adds	r2, r3, #1
 80107c6:	68fb      	ldr	r3, [r7, #12]
 80107c8:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80107ca:	68fb      	ldr	r3, [r7, #12]
 80107cc:	681b      	ldr	r3, [r3, #0]
 80107ce:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80107d2:	68fb      	ldr	r3, [r7, #12]
 80107d4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80107d6:	7812      	ldrb	r2, [r2, #0]
 80107d8:	b2d2      	uxtb	r2, r2
 80107da:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80107dc:	68fb      	ldr	r3, [r7, #12]
 80107de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80107e0:	1c5a      	adds	r2, r3, #1
 80107e2:	68fb      	ldr	r3, [r7, #12]
 80107e4:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80107e6:	68fb      	ldr	r3, [r7, #12]
 80107e8:	681b      	ldr	r3, [r3, #0]
 80107ea:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80107ee:	68fb      	ldr	r3, [r7, #12]
 80107f0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80107f2:	7812      	ldrb	r2, [r2, #0]
 80107f4:	b2d2      	uxtb	r2, r2
 80107f6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80107f8:	68fb      	ldr	r3, [r7, #12]
 80107fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80107fc:	1c5a      	adds	r2, r3, #1
 80107fe:	68fb      	ldr	r3, [r7, #12]
 8010800:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8010802:	68fb      	ldr	r3, [r7, #12]
 8010804:	681b      	ldr	r3, [r3, #0]
 8010806:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801080a:	68fb      	ldr	r3, [r7, #12]
 801080c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801080e:	7812      	ldrb	r2, [r2, #0]
 8010810:	b2d2      	uxtb	r2, r2
 8010812:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8010814:	68fb      	ldr	r3, [r7, #12]
 8010816:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010818:	1c5a      	adds	r2, r3, #1
 801081a:	68fb      	ldr	r3, [r7, #12]
 801081c:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 801081e:	68fb      	ldr	r3, [r7, #12]
 8010820:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010824:	b29b      	uxth	r3, r3
 8010826:	3b04      	subs	r3, #4
 8010828:	b29a      	uxth	r2, r3
 801082a:	68fb      	ldr	r3, [r7, #12]
 801082c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8010830:	e046      	b.n	80108c0 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8010832:	68fb      	ldr	r3, [r7, #12]
 8010834:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010838:	b29b      	uxth	r3, r3
 801083a:	2b03      	cmp	r3, #3
 801083c:	d81c      	bhi.n	8010878 <HAL_SPI_Receive+0x460>
 801083e:	693b      	ldr	r3, [r7, #16]
 8010840:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8010844:	2b00      	cmp	r3, #0
 8010846:	d017      	beq.n	8010878 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8010848:	68fb      	ldr	r3, [r7, #12]
 801084a:	681b      	ldr	r3, [r3, #0]
 801084c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8010850:	68fb      	ldr	r3, [r7, #12]
 8010852:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010854:	7812      	ldrb	r2, [r2, #0]
 8010856:	b2d2      	uxtb	r2, r2
 8010858:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 801085a:	68fb      	ldr	r3, [r7, #12]
 801085c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801085e:	1c5a      	adds	r2, r3, #1
 8010860:	68fb      	ldr	r3, [r7, #12]
 8010862:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8010864:	68fb      	ldr	r3, [r7, #12]
 8010866:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801086a:	b29b      	uxth	r3, r3
 801086c:	3b01      	subs	r3, #1
 801086e:	b29a      	uxth	r2, r3
 8010870:	68fb      	ldr	r3, [r7, #12]
 8010872:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8010876:	e023      	b.n	80108c0 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010878:	f7f2 fe2c 	bl	80034d4 <HAL_GetTick>
 801087c:	4602      	mov	r2, r0
 801087e:	697b      	ldr	r3, [r7, #20]
 8010880:	1ad3      	subs	r3, r2, r3
 8010882:	683a      	ldr	r2, [r7, #0]
 8010884:	429a      	cmp	r2, r3
 8010886:	d803      	bhi.n	8010890 <HAL_SPI_Receive+0x478>
 8010888:	683b      	ldr	r3, [r7, #0]
 801088a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801088e:	d102      	bne.n	8010896 <HAL_SPI_Receive+0x47e>
 8010890:	683b      	ldr	r3, [r7, #0]
 8010892:	2b00      	cmp	r3, #0
 8010894:	d114      	bne.n	80108c0 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8010896:	68f8      	ldr	r0, [r7, #12]
 8010898:	f000 f830 	bl	80108fc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 801089c:	68fb      	ldr	r3, [r7, #12]
 801089e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80108a2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80108a6:	68fb      	ldr	r3, [r7, #12]
 80108a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80108ac:	68fb      	ldr	r3, [r7, #12]
 80108ae:	2201      	movs	r2, #1
 80108b0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80108b4:	68fb      	ldr	r3, [r7, #12]
 80108b6:	2200      	movs	r2, #0
 80108b8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80108bc:	2303      	movs	r3, #3
 80108be:	e019      	b.n	80108f4 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 80108c0:	68fb      	ldr	r3, [r7, #12]
 80108c2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80108c6:	b29b      	uxth	r3, r3
 80108c8:	2b00      	cmp	r3, #0
 80108ca:	f47f af41 	bne.w	8010750 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80108ce:	68f8      	ldr	r0, [r7, #12]
 80108d0:	f000 f814 	bl	80108fc <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 80108d4:	68fb      	ldr	r3, [r7, #12]
 80108d6:	2201      	movs	r2, #1
 80108d8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80108dc:	68fb      	ldr	r3, [r7, #12]
 80108de:	2200      	movs	r2, #0
 80108e0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80108e4:	68fb      	ldr	r3, [r7, #12]
 80108e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80108ea:	2b00      	cmp	r3, #0
 80108ec:	d001      	beq.n	80108f2 <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 80108ee:	2301      	movs	r3, #1
 80108f0:	e000      	b.n	80108f4 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 80108f2:	2300      	movs	r3, #0
  }
}
 80108f4:	4618      	mov	r0, r3
 80108f6:	3720      	adds	r7, #32
 80108f8:	46bd      	mov	sp, r7
 80108fa:	bd80      	pop	{r7, pc}

080108fc <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80108fc:	b480      	push	{r7}
 80108fe:	b085      	sub	sp, #20
 8010900:	af00      	add	r7, sp, #0
 8010902:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	681b      	ldr	r3, [r3, #0]
 8010908:	695b      	ldr	r3, [r3, #20]
 801090a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	681b      	ldr	r3, [r3, #0]
 8010910:	699a      	ldr	r2, [r3, #24]
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	681b      	ldr	r3, [r3, #0]
 8010916:	f042 0208 	orr.w	r2, r2, #8
 801091a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	681b      	ldr	r3, [r3, #0]
 8010920:	699a      	ldr	r2, [r3, #24]
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	681b      	ldr	r3, [r3, #0]
 8010926:	f042 0210 	orr.w	r2, r2, #16
 801092a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	681b      	ldr	r3, [r3, #0]
 8010930:	681a      	ldr	r2, [r3, #0]
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	681b      	ldr	r3, [r3, #0]
 8010936:	f022 0201 	bic.w	r2, r2, #1
 801093a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	681b      	ldr	r3, [r3, #0]
 8010940:	6919      	ldr	r1, [r3, #16]
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	681a      	ldr	r2, [r3, #0]
 8010946:	4b3c      	ldr	r3, [pc, #240]	@ (8010a38 <SPI_CloseTransfer+0x13c>)
 8010948:	400b      	ands	r3, r1
 801094a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	681b      	ldr	r3, [r3, #0]
 8010950:	689a      	ldr	r2, [r3, #8]
 8010952:	687b      	ldr	r3, [r7, #4]
 8010954:	681b      	ldr	r3, [r3, #0]
 8010956:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 801095a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 801095c:	687b      	ldr	r3, [r7, #4]
 801095e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8010962:	b2db      	uxtb	r3, r3
 8010964:	2b04      	cmp	r3, #4
 8010966:	d014      	beq.n	8010992 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8010968:	68fb      	ldr	r3, [r7, #12]
 801096a:	f003 0320 	and.w	r3, r3, #32
 801096e:	2b00      	cmp	r3, #0
 8010970:	d00f      	beq.n	8010992 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010978:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8010982:	687b      	ldr	r3, [r7, #4]
 8010984:	681b      	ldr	r3, [r3, #0]
 8010986:	699a      	ldr	r2, [r3, #24]
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	681b      	ldr	r3, [r3, #0]
 801098c:	f042 0220 	orr.w	r2, r2, #32
 8010990:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8010998:	b2db      	uxtb	r3, r3
 801099a:	2b03      	cmp	r3, #3
 801099c:	d014      	beq.n	80109c8 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 801099e:	68fb      	ldr	r3, [r7, #12]
 80109a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80109a4:	2b00      	cmp	r3, #0
 80109a6:	d00f      	beq.n	80109c8 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80109ae:	f043 0204 	orr.w	r2, r3, #4
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	681b      	ldr	r3, [r3, #0]
 80109bc:	699a      	ldr	r2, [r3, #24]
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	681b      	ldr	r3, [r3, #0]
 80109c2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80109c6:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80109c8:	68fb      	ldr	r3, [r7, #12]
 80109ca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80109ce:	2b00      	cmp	r3, #0
 80109d0:	d00f      	beq.n	80109f2 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80109d8:	f043 0201 	orr.w	r2, r3, #1
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	681b      	ldr	r3, [r3, #0]
 80109e6:	699a      	ldr	r2, [r3, #24]
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	681b      	ldr	r3, [r3, #0]
 80109ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80109f0:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80109f2:	68fb      	ldr	r3, [r7, #12]
 80109f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80109f8:	2b00      	cmp	r3, #0
 80109fa:	d00f      	beq.n	8010a1c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010a02:	f043 0208 	orr.w	r2, r3, #8
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	681b      	ldr	r3, [r3, #0]
 8010a10:	699a      	ldr	r2, [r3, #24]
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	681b      	ldr	r3, [r3, #0]
 8010a16:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8010a1a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	2200      	movs	r2, #0
 8010a20:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	2200      	movs	r2, #0
 8010a28:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8010a2c:	bf00      	nop
 8010a2e:	3714      	adds	r7, #20
 8010a30:	46bd      	mov	sp, r7
 8010a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a36:	4770      	bx	lr
 8010a38:	fffffc90 	.word	0xfffffc90

08010a3c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8010a3c:	b580      	push	{r7, lr}
 8010a3e:	b084      	sub	sp, #16
 8010a40:	af00      	add	r7, sp, #0
 8010a42:	60f8      	str	r0, [r7, #12]
 8010a44:	60b9      	str	r1, [r7, #8]
 8010a46:	603b      	str	r3, [r7, #0]
 8010a48:	4613      	mov	r3, r2
 8010a4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8010a4c:	e010      	b.n	8010a70 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010a4e:	f7f2 fd41 	bl	80034d4 <HAL_GetTick>
 8010a52:	4602      	mov	r2, r0
 8010a54:	69bb      	ldr	r3, [r7, #24]
 8010a56:	1ad3      	subs	r3, r2, r3
 8010a58:	683a      	ldr	r2, [r7, #0]
 8010a5a:	429a      	cmp	r2, r3
 8010a5c:	d803      	bhi.n	8010a66 <SPI_WaitOnFlagUntilTimeout+0x2a>
 8010a5e:	683b      	ldr	r3, [r7, #0]
 8010a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a64:	d102      	bne.n	8010a6c <SPI_WaitOnFlagUntilTimeout+0x30>
 8010a66:	683b      	ldr	r3, [r7, #0]
 8010a68:	2b00      	cmp	r3, #0
 8010a6a:	d101      	bne.n	8010a70 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8010a6c:	2303      	movs	r3, #3
 8010a6e:	e00f      	b.n	8010a90 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8010a70:	68fb      	ldr	r3, [r7, #12]
 8010a72:	681b      	ldr	r3, [r3, #0]
 8010a74:	695a      	ldr	r2, [r3, #20]
 8010a76:	68bb      	ldr	r3, [r7, #8]
 8010a78:	4013      	ands	r3, r2
 8010a7a:	68ba      	ldr	r2, [r7, #8]
 8010a7c:	429a      	cmp	r2, r3
 8010a7e:	bf0c      	ite	eq
 8010a80:	2301      	moveq	r3, #1
 8010a82:	2300      	movne	r3, #0
 8010a84:	b2db      	uxtb	r3, r3
 8010a86:	461a      	mov	r2, r3
 8010a88:	79fb      	ldrb	r3, [r7, #7]
 8010a8a:	429a      	cmp	r2, r3
 8010a8c:	d0df      	beq.n	8010a4e <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8010a8e:	2300      	movs	r3, #0
}
 8010a90:	4618      	mov	r0, r3
 8010a92:	3710      	adds	r7, #16
 8010a94:	46bd      	mov	sp, r7
 8010a96:	bd80      	pop	{r7, pc}

08010a98 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8010a98:	b480      	push	{r7}
 8010a9a:	b085      	sub	sp, #20
 8010a9c:	af00      	add	r7, sp, #0
 8010a9e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010aa4:	095b      	lsrs	r3, r3, #5
 8010aa6:	3301      	adds	r3, #1
 8010aa8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	68db      	ldr	r3, [r3, #12]
 8010aae:	3301      	adds	r3, #1
 8010ab0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8010ab2:	68bb      	ldr	r3, [r7, #8]
 8010ab4:	3307      	adds	r3, #7
 8010ab6:	08db      	lsrs	r3, r3, #3
 8010ab8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8010aba:	68bb      	ldr	r3, [r7, #8]
 8010abc:	68fa      	ldr	r2, [r7, #12]
 8010abe:	fb02 f303 	mul.w	r3, r2, r3
}
 8010ac2:	4618      	mov	r0, r3
 8010ac4:	3714      	adds	r7, #20
 8010ac6:	46bd      	mov	sp, r7
 8010ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010acc:	4770      	bx	lr

08010ace <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8010ace:	b580      	push	{r7, lr}
 8010ad0:	b082      	sub	sp, #8
 8010ad2:	af00      	add	r7, sp, #0
 8010ad4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	2b00      	cmp	r3, #0
 8010ada:	d101      	bne.n	8010ae0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8010adc:	2301      	movs	r3, #1
 8010ade:	e049      	b.n	8010b74 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8010ae6:	b2db      	uxtb	r3, r3
 8010ae8:	2b00      	cmp	r3, #0
 8010aea:	d106      	bne.n	8010afa <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	2200      	movs	r2, #0
 8010af0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8010af4:	6878      	ldr	r0, [r7, #4]
 8010af6:	f7f1 ff67 	bl	80029c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	2202      	movs	r2, #2
 8010afe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	681a      	ldr	r2, [r3, #0]
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	3304      	adds	r3, #4
 8010b0a:	4619      	mov	r1, r3
 8010b0c:	4610      	mov	r0, r2
 8010b0e:	f000 fd59 	bl	80115c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010b12:	687b      	ldr	r3, [r7, #4]
 8010b14:	2201      	movs	r2, #1
 8010b16:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010b1a:	687b      	ldr	r3, [r7, #4]
 8010b1c:	2201      	movs	r2, #1
 8010b1e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	2201      	movs	r2, #1
 8010b26:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	2201      	movs	r2, #1
 8010b2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	2201      	movs	r2, #1
 8010b36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	2201      	movs	r2, #1
 8010b3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	2201      	movs	r2, #1
 8010b46:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010b4a:	687b      	ldr	r3, [r7, #4]
 8010b4c:	2201      	movs	r2, #1
 8010b4e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8010b52:	687b      	ldr	r3, [r7, #4]
 8010b54:	2201      	movs	r2, #1
 8010b56:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	2201      	movs	r2, #1
 8010b5e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	2201      	movs	r2, #1
 8010b66:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	2201      	movs	r2, #1
 8010b6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8010b72:	2300      	movs	r3, #0
}
 8010b74:	4618      	mov	r0, r3
 8010b76:	3708      	adds	r7, #8
 8010b78:	46bd      	mov	sp, r7
 8010b7a:	bd80      	pop	{r7, pc}

08010b7c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8010b7c:	b480      	push	{r7}
 8010b7e:	b085      	sub	sp, #20
 8010b80:	af00      	add	r7, sp, #0
 8010b82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8010b8a:	b2db      	uxtb	r3, r3
 8010b8c:	2b01      	cmp	r3, #1
 8010b8e:	d001      	beq.n	8010b94 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8010b90:	2301      	movs	r3, #1
 8010b92:	e054      	b.n	8010c3e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010b94:	687b      	ldr	r3, [r7, #4]
 8010b96:	2202      	movs	r2, #2
 8010b98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	681b      	ldr	r3, [r3, #0]
 8010ba0:	68da      	ldr	r2, [r3, #12]
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	681b      	ldr	r3, [r3, #0]
 8010ba6:	f042 0201 	orr.w	r2, r2, #1
 8010baa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	681b      	ldr	r3, [r3, #0]
 8010bb0:	4a26      	ldr	r2, [pc, #152]	@ (8010c4c <HAL_TIM_Base_Start_IT+0xd0>)
 8010bb2:	4293      	cmp	r3, r2
 8010bb4:	d022      	beq.n	8010bfc <HAL_TIM_Base_Start_IT+0x80>
 8010bb6:	687b      	ldr	r3, [r7, #4]
 8010bb8:	681b      	ldr	r3, [r3, #0]
 8010bba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010bbe:	d01d      	beq.n	8010bfc <HAL_TIM_Base_Start_IT+0x80>
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	681b      	ldr	r3, [r3, #0]
 8010bc4:	4a22      	ldr	r2, [pc, #136]	@ (8010c50 <HAL_TIM_Base_Start_IT+0xd4>)
 8010bc6:	4293      	cmp	r3, r2
 8010bc8:	d018      	beq.n	8010bfc <HAL_TIM_Base_Start_IT+0x80>
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	681b      	ldr	r3, [r3, #0]
 8010bce:	4a21      	ldr	r2, [pc, #132]	@ (8010c54 <HAL_TIM_Base_Start_IT+0xd8>)
 8010bd0:	4293      	cmp	r3, r2
 8010bd2:	d013      	beq.n	8010bfc <HAL_TIM_Base_Start_IT+0x80>
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	681b      	ldr	r3, [r3, #0]
 8010bd8:	4a1f      	ldr	r2, [pc, #124]	@ (8010c58 <HAL_TIM_Base_Start_IT+0xdc>)
 8010bda:	4293      	cmp	r3, r2
 8010bdc:	d00e      	beq.n	8010bfc <HAL_TIM_Base_Start_IT+0x80>
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	681b      	ldr	r3, [r3, #0]
 8010be2:	4a1e      	ldr	r2, [pc, #120]	@ (8010c5c <HAL_TIM_Base_Start_IT+0xe0>)
 8010be4:	4293      	cmp	r3, r2
 8010be6:	d009      	beq.n	8010bfc <HAL_TIM_Base_Start_IT+0x80>
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	681b      	ldr	r3, [r3, #0]
 8010bec:	4a1c      	ldr	r2, [pc, #112]	@ (8010c60 <HAL_TIM_Base_Start_IT+0xe4>)
 8010bee:	4293      	cmp	r3, r2
 8010bf0:	d004      	beq.n	8010bfc <HAL_TIM_Base_Start_IT+0x80>
 8010bf2:	687b      	ldr	r3, [r7, #4]
 8010bf4:	681b      	ldr	r3, [r3, #0]
 8010bf6:	4a1b      	ldr	r2, [pc, #108]	@ (8010c64 <HAL_TIM_Base_Start_IT+0xe8>)
 8010bf8:	4293      	cmp	r3, r2
 8010bfa:	d115      	bne.n	8010c28 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	681b      	ldr	r3, [r3, #0]
 8010c00:	689a      	ldr	r2, [r3, #8]
 8010c02:	4b19      	ldr	r3, [pc, #100]	@ (8010c68 <HAL_TIM_Base_Start_IT+0xec>)
 8010c04:	4013      	ands	r3, r2
 8010c06:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010c08:	68fb      	ldr	r3, [r7, #12]
 8010c0a:	2b06      	cmp	r3, #6
 8010c0c:	d015      	beq.n	8010c3a <HAL_TIM_Base_Start_IT+0xbe>
 8010c0e:	68fb      	ldr	r3, [r7, #12]
 8010c10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010c14:	d011      	beq.n	8010c3a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	681b      	ldr	r3, [r3, #0]
 8010c1a:	681a      	ldr	r2, [r3, #0]
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	681b      	ldr	r3, [r3, #0]
 8010c20:	f042 0201 	orr.w	r2, r2, #1
 8010c24:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010c26:	e008      	b.n	8010c3a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	681b      	ldr	r3, [r3, #0]
 8010c2c:	681a      	ldr	r2, [r3, #0]
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	681b      	ldr	r3, [r3, #0]
 8010c32:	f042 0201 	orr.w	r2, r2, #1
 8010c36:	601a      	str	r2, [r3, #0]
 8010c38:	e000      	b.n	8010c3c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010c3a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8010c3c:	2300      	movs	r3, #0
}
 8010c3e:	4618      	mov	r0, r3
 8010c40:	3714      	adds	r7, #20
 8010c42:	46bd      	mov	sp, r7
 8010c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c48:	4770      	bx	lr
 8010c4a:	bf00      	nop
 8010c4c:	40010000 	.word	0x40010000
 8010c50:	40000400 	.word	0x40000400
 8010c54:	40000800 	.word	0x40000800
 8010c58:	40000c00 	.word	0x40000c00
 8010c5c:	40010400 	.word	0x40010400
 8010c60:	40001800 	.word	0x40001800
 8010c64:	40014000 	.word	0x40014000
 8010c68:	00010007 	.word	0x00010007

08010c6c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8010c6c:	b580      	push	{r7, lr}
 8010c6e:	b082      	sub	sp, #8
 8010c70:	af00      	add	r7, sp, #0
 8010c72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	2b00      	cmp	r3, #0
 8010c78:	d101      	bne.n	8010c7e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8010c7a:	2301      	movs	r3, #1
 8010c7c:	e049      	b.n	8010d12 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8010c84:	b2db      	uxtb	r3, r3
 8010c86:	2b00      	cmp	r3, #0
 8010c88:	d106      	bne.n	8010c98 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	2200      	movs	r2, #0
 8010c8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8010c92:	6878      	ldr	r0, [r7, #4]
 8010c94:	f7f1 fe32 	bl	80028fc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	2202      	movs	r2, #2
 8010c9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	681a      	ldr	r2, [r3, #0]
 8010ca4:	687b      	ldr	r3, [r7, #4]
 8010ca6:	3304      	adds	r3, #4
 8010ca8:	4619      	mov	r1, r3
 8010caa:	4610      	mov	r0, r2
 8010cac:	f000 fc8a 	bl	80115c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	2201      	movs	r2, #1
 8010cb4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	2201      	movs	r2, #1
 8010cbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8010cc0:	687b      	ldr	r3, [r7, #4]
 8010cc2:	2201      	movs	r2, #1
 8010cc4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	2201      	movs	r2, #1
 8010ccc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	2201      	movs	r2, #1
 8010cd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8010cd8:	687b      	ldr	r3, [r7, #4]
 8010cda:	2201      	movs	r2, #1
 8010cdc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	2201      	movs	r2, #1
 8010ce4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	2201      	movs	r2, #1
 8010cec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8010cf0:	687b      	ldr	r3, [r7, #4]
 8010cf2:	2201      	movs	r2, #1
 8010cf4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8010cf8:	687b      	ldr	r3, [r7, #4]
 8010cfa:	2201      	movs	r2, #1
 8010cfc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8010d00:	687b      	ldr	r3, [r7, #4]
 8010d02:	2201      	movs	r2, #1
 8010d04:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	2201      	movs	r2, #1
 8010d0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8010d10:	2300      	movs	r3, #0
}
 8010d12:	4618      	mov	r0, r3
 8010d14:	3708      	adds	r7, #8
 8010d16:	46bd      	mov	sp, r7
 8010d18:	bd80      	pop	{r7, pc}
	...

08010d1c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8010d1c:	b580      	push	{r7, lr}
 8010d1e:	b084      	sub	sp, #16
 8010d20:	af00      	add	r7, sp, #0
 8010d22:	6078      	str	r0, [r7, #4]
 8010d24:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8010d26:	683b      	ldr	r3, [r7, #0]
 8010d28:	2b00      	cmp	r3, #0
 8010d2a:	d109      	bne.n	8010d40 <HAL_TIM_PWM_Start+0x24>
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8010d32:	b2db      	uxtb	r3, r3
 8010d34:	2b01      	cmp	r3, #1
 8010d36:	bf14      	ite	ne
 8010d38:	2301      	movne	r3, #1
 8010d3a:	2300      	moveq	r3, #0
 8010d3c:	b2db      	uxtb	r3, r3
 8010d3e:	e03c      	b.n	8010dba <HAL_TIM_PWM_Start+0x9e>
 8010d40:	683b      	ldr	r3, [r7, #0]
 8010d42:	2b04      	cmp	r3, #4
 8010d44:	d109      	bne.n	8010d5a <HAL_TIM_PWM_Start+0x3e>
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8010d4c:	b2db      	uxtb	r3, r3
 8010d4e:	2b01      	cmp	r3, #1
 8010d50:	bf14      	ite	ne
 8010d52:	2301      	movne	r3, #1
 8010d54:	2300      	moveq	r3, #0
 8010d56:	b2db      	uxtb	r3, r3
 8010d58:	e02f      	b.n	8010dba <HAL_TIM_PWM_Start+0x9e>
 8010d5a:	683b      	ldr	r3, [r7, #0]
 8010d5c:	2b08      	cmp	r3, #8
 8010d5e:	d109      	bne.n	8010d74 <HAL_TIM_PWM_Start+0x58>
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8010d66:	b2db      	uxtb	r3, r3
 8010d68:	2b01      	cmp	r3, #1
 8010d6a:	bf14      	ite	ne
 8010d6c:	2301      	movne	r3, #1
 8010d6e:	2300      	moveq	r3, #0
 8010d70:	b2db      	uxtb	r3, r3
 8010d72:	e022      	b.n	8010dba <HAL_TIM_PWM_Start+0x9e>
 8010d74:	683b      	ldr	r3, [r7, #0]
 8010d76:	2b0c      	cmp	r3, #12
 8010d78:	d109      	bne.n	8010d8e <HAL_TIM_PWM_Start+0x72>
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010d80:	b2db      	uxtb	r3, r3
 8010d82:	2b01      	cmp	r3, #1
 8010d84:	bf14      	ite	ne
 8010d86:	2301      	movne	r3, #1
 8010d88:	2300      	moveq	r3, #0
 8010d8a:	b2db      	uxtb	r3, r3
 8010d8c:	e015      	b.n	8010dba <HAL_TIM_PWM_Start+0x9e>
 8010d8e:	683b      	ldr	r3, [r7, #0]
 8010d90:	2b10      	cmp	r3, #16
 8010d92:	d109      	bne.n	8010da8 <HAL_TIM_PWM_Start+0x8c>
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8010d9a:	b2db      	uxtb	r3, r3
 8010d9c:	2b01      	cmp	r3, #1
 8010d9e:	bf14      	ite	ne
 8010da0:	2301      	movne	r3, #1
 8010da2:	2300      	moveq	r3, #0
 8010da4:	b2db      	uxtb	r3, r3
 8010da6:	e008      	b.n	8010dba <HAL_TIM_PWM_Start+0x9e>
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8010dae:	b2db      	uxtb	r3, r3
 8010db0:	2b01      	cmp	r3, #1
 8010db2:	bf14      	ite	ne
 8010db4:	2301      	movne	r3, #1
 8010db6:	2300      	moveq	r3, #0
 8010db8:	b2db      	uxtb	r3, r3
 8010dba:	2b00      	cmp	r3, #0
 8010dbc:	d001      	beq.n	8010dc2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8010dbe:	2301      	movs	r3, #1
 8010dc0:	e0a1      	b.n	8010f06 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8010dc2:	683b      	ldr	r3, [r7, #0]
 8010dc4:	2b00      	cmp	r3, #0
 8010dc6:	d104      	bne.n	8010dd2 <HAL_TIM_PWM_Start+0xb6>
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	2202      	movs	r2, #2
 8010dcc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8010dd0:	e023      	b.n	8010e1a <HAL_TIM_PWM_Start+0xfe>
 8010dd2:	683b      	ldr	r3, [r7, #0]
 8010dd4:	2b04      	cmp	r3, #4
 8010dd6:	d104      	bne.n	8010de2 <HAL_TIM_PWM_Start+0xc6>
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	2202      	movs	r2, #2
 8010ddc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8010de0:	e01b      	b.n	8010e1a <HAL_TIM_PWM_Start+0xfe>
 8010de2:	683b      	ldr	r3, [r7, #0]
 8010de4:	2b08      	cmp	r3, #8
 8010de6:	d104      	bne.n	8010df2 <HAL_TIM_PWM_Start+0xd6>
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	2202      	movs	r2, #2
 8010dec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8010df0:	e013      	b.n	8010e1a <HAL_TIM_PWM_Start+0xfe>
 8010df2:	683b      	ldr	r3, [r7, #0]
 8010df4:	2b0c      	cmp	r3, #12
 8010df6:	d104      	bne.n	8010e02 <HAL_TIM_PWM_Start+0xe6>
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	2202      	movs	r2, #2
 8010dfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8010e00:	e00b      	b.n	8010e1a <HAL_TIM_PWM_Start+0xfe>
 8010e02:	683b      	ldr	r3, [r7, #0]
 8010e04:	2b10      	cmp	r3, #16
 8010e06:	d104      	bne.n	8010e12 <HAL_TIM_PWM_Start+0xf6>
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	2202      	movs	r2, #2
 8010e0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8010e10:	e003      	b.n	8010e1a <HAL_TIM_PWM_Start+0xfe>
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	2202      	movs	r2, #2
 8010e16:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	681b      	ldr	r3, [r3, #0]
 8010e1e:	2201      	movs	r2, #1
 8010e20:	6839      	ldr	r1, [r7, #0]
 8010e22:	4618      	mov	r0, r3
 8010e24:	f000 ffe2 	bl	8011dec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	681b      	ldr	r3, [r3, #0]
 8010e2c:	4a38      	ldr	r2, [pc, #224]	@ (8010f10 <HAL_TIM_PWM_Start+0x1f4>)
 8010e2e:	4293      	cmp	r3, r2
 8010e30:	d013      	beq.n	8010e5a <HAL_TIM_PWM_Start+0x13e>
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	681b      	ldr	r3, [r3, #0]
 8010e36:	4a37      	ldr	r2, [pc, #220]	@ (8010f14 <HAL_TIM_PWM_Start+0x1f8>)
 8010e38:	4293      	cmp	r3, r2
 8010e3a:	d00e      	beq.n	8010e5a <HAL_TIM_PWM_Start+0x13e>
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	681b      	ldr	r3, [r3, #0]
 8010e40:	4a35      	ldr	r2, [pc, #212]	@ (8010f18 <HAL_TIM_PWM_Start+0x1fc>)
 8010e42:	4293      	cmp	r3, r2
 8010e44:	d009      	beq.n	8010e5a <HAL_TIM_PWM_Start+0x13e>
 8010e46:	687b      	ldr	r3, [r7, #4]
 8010e48:	681b      	ldr	r3, [r3, #0]
 8010e4a:	4a34      	ldr	r2, [pc, #208]	@ (8010f1c <HAL_TIM_PWM_Start+0x200>)
 8010e4c:	4293      	cmp	r3, r2
 8010e4e:	d004      	beq.n	8010e5a <HAL_TIM_PWM_Start+0x13e>
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	681b      	ldr	r3, [r3, #0]
 8010e54:	4a32      	ldr	r2, [pc, #200]	@ (8010f20 <HAL_TIM_PWM_Start+0x204>)
 8010e56:	4293      	cmp	r3, r2
 8010e58:	d101      	bne.n	8010e5e <HAL_TIM_PWM_Start+0x142>
 8010e5a:	2301      	movs	r3, #1
 8010e5c:	e000      	b.n	8010e60 <HAL_TIM_PWM_Start+0x144>
 8010e5e:	2300      	movs	r3, #0
 8010e60:	2b00      	cmp	r3, #0
 8010e62:	d007      	beq.n	8010e74 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	681b      	ldr	r3, [r3, #0]
 8010e68:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010e6a:	687b      	ldr	r3, [r7, #4]
 8010e6c:	681b      	ldr	r3, [r3, #0]
 8010e6e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8010e72:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	681b      	ldr	r3, [r3, #0]
 8010e78:	4a25      	ldr	r2, [pc, #148]	@ (8010f10 <HAL_TIM_PWM_Start+0x1f4>)
 8010e7a:	4293      	cmp	r3, r2
 8010e7c:	d022      	beq.n	8010ec4 <HAL_TIM_PWM_Start+0x1a8>
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	681b      	ldr	r3, [r3, #0]
 8010e82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010e86:	d01d      	beq.n	8010ec4 <HAL_TIM_PWM_Start+0x1a8>
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	681b      	ldr	r3, [r3, #0]
 8010e8c:	4a25      	ldr	r2, [pc, #148]	@ (8010f24 <HAL_TIM_PWM_Start+0x208>)
 8010e8e:	4293      	cmp	r3, r2
 8010e90:	d018      	beq.n	8010ec4 <HAL_TIM_PWM_Start+0x1a8>
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	681b      	ldr	r3, [r3, #0]
 8010e96:	4a24      	ldr	r2, [pc, #144]	@ (8010f28 <HAL_TIM_PWM_Start+0x20c>)
 8010e98:	4293      	cmp	r3, r2
 8010e9a:	d013      	beq.n	8010ec4 <HAL_TIM_PWM_Start+0x1a8>
 8010e9c:	687b      	ldr	r3, [r7, #4]
 8010e9e:	681b      	ldr	r3, [r3, #0]
 8010ea0:	4a22      	ldr	r2, [pc, #136]	@ (8010f2c <HAL_TIM_PWM_Start+0x210>)
 8010ea2:	4293      	cmp	r3, r2
 8010ea4:	d00e      	beq.n	8010ec4 <HAL_TIM_PWM_Start+0x1a8>
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	681b      	ldr	r3, [r3, #0]
 8010eaa:	4a1a      	ldr	r2, [pc, #104]	@ (8010f14 <HAL_TIM_PWM_Start+0x1f8>)
 8010eac:	4293      	cmp	r3, r2
 8010eae:	d009      	beq.n	8010ec4 <HAL_TIM_PWM_Start+0x1a8>
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	681b      	ldr	r3, [r3, #0]
 8010eb4:	4a1e      	ldr	r2, [pc, #120]	@ (8010f30 <HAL_TIM_PWM_Start+0x214>)
 8010eb6:	4293      	cmp	r3, r2
 8010eb8:	d004      	beq.n	8010ec4 <HAL_TIM_PWM_Start+0x1a8>
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	681b      	ldr	r3, [r3, #0]
 8010ebe:	4a16      	ldr	r2, [pc, #88]	@ (8010f18 <HAL_TIM_PWM_Start+0x1fc>)
 8010ec0:	4293      	cmp	r3, r2
 8010ec2:	d115      	bne.n	8010ef0 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	681b      	ldr	r3, [r3, #0]
 8010ec8:	689a      	ldr	r2, [r3, #8]
 8010eca:	4b1a      	ldr	r3, [pc, #104]	@ (8010f34 <HAL_TIM_PWM_Start+0x218>)
 8010ecc:	4013      	ands	r3, r2
 8010ece:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010ed0:	68fb      	ldr	r3, [r7, #12]
 8010ed2:	2b06      	cmp	r3, #6
 8010ed4:	d015      	beq.n	8010f02 <HAL_TIM_PWM_Start+0x1e6>
 8010ed6:	68fb      	ldr	r3, [r7, #12]
 8010ed8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010edc:	d011      	beq.n	8010f02 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	681b      	ldr	r3, [r3, #0]
 8010ee2:	681a      	ldr	r2, [r3, #0]
 8010ee4:	687b      	ldr	r3, [r7, #4]
 8010ee6:	681b      	ldr	r3, [r3, #0]
 8010ee8:	f042 0201 	orr.w	r2, r2, #1
 8010eec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010eee:	e008      	b.n	8010f02 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	681b      	ldr	r3, [r3, #0]
 8010ef4:	681a      	ldr	r2, [r3, #0]
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	681b      	ldr	r3, [r3, #0]
 8010efa:	f042 0201 	orr.w	r2, r2, #1
 8010efe:	601a      	str	r2, [r3, #0]
 8010f00:	e000      	b.n	8010f04 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010f02:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8010f04:	2300      	movs	r3, #0
}
 8010f06:	4618      	mov	r0, r3
 8010f08:	3710      	adds	r7, #16
 8010f0a:	46bd      	mov	sp, r7
 8010f0c:	bd80      	pop	{r7, pc}
 8010f0e:	bf00      	nop
 8010f10:	40010000 	.word	0x40010000
 8010f14:	40010400 	.word	0x40010400
 8010f18:	40014000 	.word	0x40014000
 8010f1c:	40014400 	.word	0x40014400
 8010f20:	40014800 	.word	0x40014800
 8010f24:	40000400 	.word	0x40000400
 8010f28:	40000800 	.word	0x40000800
 8010f2c:	40000c00 	.word	0x40000c00
 8010f30:	40001800 	.word	0x40001800
 8010f34:	00010007 	.word	0x00010007

08010f38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8010f38:	b580      	push	{r7, lr}
 8010f3a:	b084      	sub	sp, #16
 8010f3c:	af00      	add	r7, sp, #0
 8010f3e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8010f40:	687b      	ldr	r3, [r7, #4]
 8010f42:	681b      	ldr	r3, [r3, #0]
 8010f44:	68db      	ldr	r3, [r3, #12]
 8010f46:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	681b      	ldr	r3, [r3, #0]
 8010f4c:	691b      	ldr	r3, [r3, #16]
 8010f4e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8010f50:	68bb      	ldr	r3, [r7, #8]
 8010f52:	f003 0302 	and.w	r3, r3, #2
 8010f56:	2b00      	cmp	r3, #0
 8010f58:	d020      	beq.n	8010f9c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8010f5a:	68fb      	ldr	r3, [r7, #12]
 8010f5c:	f003 0302 	and.w	r3, r3, #2
 8010f60:	2b00      	cmp	r3, #0
 8010f62:	d01b      	beq.n	8010f9c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	681b      	ldr	r3, [r3, #0]
 8010f68:	f06f 0202 	mvn.w	r2, #2
 8010f6c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	2201      	movs	r2, #1
 8010f72:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	681b      	ldr	r3, [r3, #0]
 8010f78:	699b      	ldr	r3, [r3, #24]
 8010f7a:	f003 0303 	and.w	r3, r3, #3
 8010f7e:	2b00      	cmp	r3, #0
 8010f80:	d003      	beq.n	8010f8a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8010f82:	6878      	ldr	r0, [r7, #4]
 8010f84:	f000 fb00 	bl	8011588 <HAL_TIM_IC_CaptureCallback>
 8010f88:	e005      	b.n	8010f96 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8010f8a:	6878      	ldr	r0, [r7, #4]
 8010f8c:	f000 faf2 	bl	8011574 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010f90:	6878      	ldr	r0, [r7, #4]
 8010f92:	f000 fb03 	bl	801159c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010f96:	687b      	ldr	r3, [r7, #4]
 8010f98:	2200      	movs	r2, #0
 8010f9a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8010f9c:	68bb      	ldr	r3, [r7, #8]
 8010f9e:	f003 0304 	and.w	r3, r3, #4
 8010fa2:	2b00      	cmp	r3, #0
 8010fa4:	d020      	beq.n	8010fe8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8010fa6:	68fb      	ldr	r3, [r7, #12]
 8010fa8:	f003 0304 	and.w	r3, r3, #4
 8010fac:	2b00      	cmp	r3, #0
 8010fae:	d01b      	beq.n	8010fe8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	681b      	ldr	r3, [r3, #0]
 8010fb4:	f06f 0204 	mvn.w	r2, #4
 8010fb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	2202      	movs	r2, #2
 8010fbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	681b      	ldr	r3, [r3, #0]
 8010fc4:	699b      	ldr	r3, [r3, #24]
 8010fc6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8010fca:	2b00      	cmp	r3, #0
 8010fcc:	d003      	beq.n	8010fd6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010fce:	6878      	ldr	r0, [r7, #4]
 8010fd0:	f000 fada 	bl	8011588 <HAL_TIM_IC_CaptureCallback>
 8010fd4:	e005      	b.n	8010fe2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010fd6:	6878      	ldr	r0, [r7, #4]
 8010fd8:	f000 facc 	bl	8011574 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010fdc:	6878      	ldr	r0, [r7, #4]
 8010fde:	f000 fadd 	bl	801159c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	2200      	movs	r2, #0
 8010fe6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8010fe8:	68bb      	ldr	r3, [r7, #8]
 8010fea:	f003 0308 	and.w	r3, r3, #8
 8010fee:	2b00      	cmp	r3, #0
 8010ff0:	d020      	beq.n	8011034 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8010ff2:	68fb      	ldr	r3, [r7, #12]
 8010ff4:	f003 0308 	and.w	r3, r3, #8
 8010ff8:	2b00      	cmp	r3, #0
 8010ffa:	d01b      	beq.n	8011034 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	681b      	ldr	r3, [r3, #0]
 8011000:	f06f 0208 	mvn.w	r2, #8
 8011004:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	2204      	movs	r2, #4
 801100a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	681b      	ldr	r3, [r3, #0]
 8011010:	69db      	ldr	r3, [r3, #28]
 8011012:	f003 0303 	and.w	r3, r3, #3
 8011016:	2b00      	cmp	r3, #0
 8011018:	d003      	beq.n	8011022 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801101a:	6878      	ldr	r0, [r7, #4]
 801101c:	f000 fab4 	bl	8011588 <HAL_TIM_IC_CaptureCallback>
 8011020:	e005      	b.n	801102e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8011022:	6878      	ldr	r0, [r7, #4]
 8011024:	f000 faa6 	bl	8011574 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011028:	6878      	ldr	r0, [r7, #4]
 801102a:	f000 fab7 	bl	801159c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801102e:	687b      	ldr	r3, [r7, #4]
 8011030:	2200      	movs	r2, #0
 8011032:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8011034:	68bb      	ldr	r3, [r7, #8]
 8011036:	f003 0310 	and.w	r3, r3, #16
 801103a:	2b00      	cmp	r3, #0
 801103c:	d020      	beq.n	8011080 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 801103e:	68fb      	ldr	r3, [r7, #12]
 8011040:	f003 0310 	and.w	r3, r3, #16
 8011044:	2b00      	cmp	r3, #0
 8011046:	d01b      	beq.n	8011080 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	681b      	ldr	r3, [r3, #0]
 801104c:	f06f 0210 	mvn.w	r2, #16
 8011050:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8011052:	687b      	ldr	r3, [r7, #4]
 8011054:	2208      	movs	r2, #8
 8011056:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8011058:	687b      	ldr	r3, [r7, #4]
 801105a:	681b      	ldr	r3, [r3, #0]
 801105c:	69db      	ldr	r3, [r3, #28]
 801105e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8011062:	2b00      	cmp	r3, #0
 8011064:	d003      	beq.n	801106e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8011066:	6878      	ldr	r0, [r7, #4]
 8011068:	f000 fa8e 	bl	8011588 <HAL_TIM_IC_CaptureCallback>
 801106c:	e005      	b.n	801107a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801106e:	6878      	ldr	r0, [r7, #4]
 8011070:	f000 fa80 	bl	8011574 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011074:	6878      	ldr	r0, [r7, #4]
 8011076:	f000 fa91 	bl	801159c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	2200      	movs	r2, #0
 801107e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8011080:	68bb      	ldr	r3, [r7, #8]
 8011082:	f003 0301 	and.w	r3, r3, #1
 8011086:	2b00      	cmp	r3, #0
 8011088:	d00c      	beq.n	80110a4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 801108a:	68fb      	ldr	r3, [r7, #12]
 801108c:	f003 0301 	and.w	r3, r3, #1
 8011090:	2b00      	cmp	r3, #0
 8011092:	d007      	beq.n	80110a4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8011094:	687b      	ldr	r3, [r7, #4]
 8011096:	681b      	ldr	r3, [r3, #0]
 8011098:	f06f 0201 	mvn.w	r2, #1
 801109c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801109e:	6878      	ldr	r0, [r7, #4]
 80110a0:	f000 fa5e 	bl	8011560 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80110a4:	68bb      	ldr	r3, [r7, #8]
 80110a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80110aa:	2b00      	cmp	r3, #0
 80110ac:	d104      	bne.n	80110b8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80110ae:	68bb      	ldr	r3, [r7, #8]
 80110b0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80110b4:	2b00      	cmp	r3, #0
 80110b6:	d00c      	beq.n	80110d2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80110b8:	68fb      	ldr	r3, [r7, #12]
 80110ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80110be:	2b00      	cmp	r3, #0
 80110c0:	d007      	beq.n	80110d2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80110c2:	687b      	ldr	r3, [r7, #4]
 80110c4:	681b      	ldr	r3, [r3, #0]
 80110c6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80110ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80110cc:	6878      	ldr	r0, [r7, #4]
 80110ce:	f000 ffc9 	bl	8012064 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80110d2:	68bb      	ldr	r3, [r7, #8]
 80110d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80110d8:	2b00      	cmp	r3, #0
 80110da:	d00c      	beq.n	80110f6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80110dc:	68fb      	ldr	r3, [r7, #12]
 80110de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80110e2:	2b00      	cmp	r3, #0
 80110e4:	d007      	beq.n	80110f6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80110e6:	687b      	ldr	r3, [r7, #4]
 80110e8:	681b      	ldr	r3, [r3, #0]
 80110ea:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80110ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80110f0:	6878      	ldr	r0, [r7, #4]
 80110f2:	f000 ffc1 	bl	8012078 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80110f6:	68bb      	ldr	r3, [r7, #8]
 80110f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80110fc:	2b00      	cmp	r3, #0
 80110fe:	d00c      	beq.n	801111a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8011100:	68fb      	ldr	r3, [r7, #12]
 8011102:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011106:	2b00      	cmp	r3, #0
 8011108:	d007      	beq.n	801111a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 801110a:	687b      	ldr	r3, [r7, #4]
 801110c:	681b      	ldr	r3, [r3, #0]
 801110e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8011112:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8011114:	6878      	ldr	r0, [r7, #4]
 8011116:	f000 fa4b 	bl	80115b0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 801111a:	68bb      	ldr	r3, [r7, #8]
 801111c:	f003 0320 	and.w	r3, r3, #32
 8011120:	2b00      	cmp	r3, #0
 8011122:	d00c      	beq.n	801113e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8011124:	68fb      	ldr	r3, [r7, #12]
 8011126:	f003 0320 	and.w	r3, r3, #32
 801112a:	2b00      	cmp	r3, #0
 801112c:	d007      	beq.n	801113e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	681b      	ldr	r3, [r3, #0]
 8011132:	f06f 0220 	mvn.w	r2, #32
 8011136:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8011138:	6878      	ldr	r0, [r7, #4]
 801113a:	f000 ff89 	bl	8012050 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801113e:	bf00      	nop
 8011140:	3710      	adds	r7, #16
 8011142:	46bd      	mov	sp, r7
 8011144:	bd80      	pop	{r7, pc}
	...

08011148 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8011148:	b580      	push	{r7, lr}
 801114a:	b086      	sub	sp, #24
 801114c:	af00      	add	r7, sp, #0
 801114e:	60f8      	str	r0, [r7, #12]
 8011150:	60b9      	str	r1, [r7, #8]
 8011152:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8011154:	2300      	movs	r3, #0
 8011156:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8011158:	68fb      	ldr	r3, [r7, #12]
 801115a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801115e:	2b01      	cmp	r3, #1
 8011160:	d101      	bne.n	8011166 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8011162:	2302      	movs	r3, #2
 8011164:	e0ff      	b.n	8011366 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8011166:	68fb      	ldr	r3, [r7, #12]
 8011168:	2201      	movs	r2, #1
 801116a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	2b14      	cmp	r3, #20
 8011172:	f200 80f0 	bhi.w	8011356 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8011176:	a201      	add	r2, pc, #4	@ (adr r2, 801117c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8011178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801117c:	080111d1 	.word	0x080111d1
 8011180:	08011357 	.word	0x08011357
 8011184:	08011357 	.word	0x08011357
 8011188:	08011357 	.word	0x08011357
 801118c:	08011211 	.word	0x08011211
 8011190:	08011357 	.word	0x08011357
 8011194:	08011357 	.word	0x08011357
 8011198:	08011357 	.word	0x08011357
 801119c:	08011253 	.word	0x08011253
 80111a0:	08011357 	.word	0x08011357
 80111a4:	08011357 	.word	0x08011357
 80111a8:	08011357 	.word	0x08011357
 80111ac:	08011293 	.word	0x08011293
 80111b0:	08011357 	.word	0x08011357
 80111b4:	08011357 	.word	0x08011357
 80111b8:	08011357 	.word	0x08011357
 80111bc:	080112d5 	.word	0x080112d5
 80111c0:	08011357 	.word	0x08011357
 80111c4:	08011357 	.word	0x08011357
 80111c8:	08011357 	.word	0x08011357
 80111cc:	08011315 	.word	0x08011315
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80111d0:	68fb      	ldr	r3, [r7, #12]
 80111d2:	681b      	ldr	r3, [r3, #0]
 80111d4:	68b9      	ldr	r1, [r7, #8]
 80111d6:	4618      	mov	r0, r3
 80111d8:	f000 fa94 	bl	8011704 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80111dc:	68fb      	ldr	r3, [r7, #12]
 80111de:	681b      	ldr	r3, [r3, #0]
 80111e0:	699a      	ldr	r2, [r3, #24]
 80111e2:	68fb      	ldr	r3, [r7, #12]
 80111e4:	681b      	ldr	r3, [r3, #0]
 80111e6:	f042 0208 	orr.w	r2, r2, #8
 80111ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80111ec:	68fb      	ldr	r3, [r7, #12]
 80111ee:	681b      	ldr	r3, [r3, #0]
 80111f0:	699a      	ldr	r2, [r3, #24]
 80111f2:	68fb      	ldr	r3, [r7, #12]
 80111f4:	681b      	ldr	r3, [r3, #0]
 80111f6:	f022 0204 	bic.w	r2, r2, #4
 80111fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80111fc:	68fb      	ldr	r3, [r7, #12]
 80111fe:	681b      	ldr	r3, [r3, #0]
 8011200:	6999      	ldr	r1, [r3, #24]
 8011202:	68bb      	ldr	r3, [r7, #8]
 8011204:	691a      	ldr	r2, [r3, #16]
 8011206:	68fb      	ldr	r3, [r7, #12]
 8011208:	681b      	ldr	r3, [r3, #0]
 801120a:	430a      	orrs	r2, r1
 801120c:	619a      	str	r2, [r3, #24]
      break;
 801120e:	e0a5      	b.n	801135c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8011210:	68fb      	ldr	r3, [r7, #12]
 8011212:	681b      	ldr	r3, [r3, #0]
 8011214:	68b9      	ldr	r1, [r7, #8]
 8011216:	4618      	mov	r0, r3
 8011218:	f000 fb04 	bl	8011824 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801121c:	68fb      	ldr	r3, [r7, #12]
 801121e:	681b      	ldr	r3, [r3, #0]
 8011220:	699a      	ldr	r2, [r3, #24]
 8011222:	68fb      	ldr	r3, [r7, #12]
 8011224:	681b      	ldr	r3, [r3, #0]
 8011226:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801122a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 801122c:	68fb      	ldr	r3, [r7, #12]
 801122e:	681b      	ldr	r3, [r3, #0]
 8011230:	699a      	ldr	r2, [r3, #24]
 8011232:	68fb      	ldr	r3, [r7, #12]
 8011234:	681b      	ldr	r3, [r3, #0]
 8011236:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 801123a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 801123c:	68fb      	ldr	r3, [r7, #12]
 801123e:	681b      	ldr	r3, [r3, #0]
 8011240:	6999      	ldr	r1, [r3, #24]
 8011242:	68bb      	ldr	r3, [r7, #8]
 8011244:	691b      	ldr	r3, [r3, #16]
 8011246:	021a      	lsls	r2, r3, #8
 8011248:	68fb      	ldr	r3, [r7, #12]
 801124a:	681b      	ldr	r3, [r3, #0]
 801124c:	430a      	orrs	r2, r1
 801124e:	619a      	str	r2, [r3, #24]
      break;
 8011250:	e084      	b.n	801135c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8011252:	68fb      	ldr	r3, [r7, #12]
 8011254:	681b      	ldr	r3, [r3, #0]
 8011256:	68b9      	ldr	r1, [r7, #8]
 8011258:	4618      	mov	r0, r3
 801125a:	f000 fb6d 	bl	8011938 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801125e:	68fb      	ldr	r3, [r7, #12]
 8011260:	681b      	ldr	r3, [r3, #0]
 8011262:	69da      	ldr	r2, [r3, #28]
 8011264:	68fb      	ldr	r3, [r7, #12]
 8011266:	681b      	ldr	r3, [r3, #0]
 8011268:	f042 0208 	orr.w	r2, r2, #8
 801126c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801126e:	68fb      	ldr	r3, [r7, #12]
 8011270:	681b      	ldr	r3, [r3, #0]
 8011272:	69da      	ldr	r2, [r3, #28]
 8011274:	68fb      	ldr	r3, [r7, #12]
 8011276:	681b      	ldr	r3, [r3, #0]
 8011278:	f022 0204 	bic.w	r2, r2, #4
 801127c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801127e:	68fb      	ldr	r3, [r7, #12]
 8011280:	681b      	ldr	r3, [r3, #0]
 8011282:	69d9      	ldr	r1, [r3, #28]
 8011284:	68bb      	ldr	r3, [r7, #8]
 8011286:	691a      	ldr	r2, [r3, #16]
 8011288:	68fb      	ldr	r3, [r7, #12]
 801128a:	681b      	ldr	r3, [r3, #0]
 801128c:	430a      	orrs	r2, r1
 801128e:	61da      	str	r2, [r3, #28]
      break;
 8011290:	e064      	b.n	801135c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8011292:	68fb      	ldr	r3, [r7, #12]
 8011294:	681b      	ldr	r3, [r3, #0]
 8011296:	68b9      	ldr	r1, [r7, #8]
 8011298:	4618      	mov	r0, r3
 801129a:	f000 fbd5 	bl	8011a48 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801129e:	68fb      	ldr	r3, [r7, #12]
 80112a0:	681b      	ldr	r3, [r3, #0]
 80112a2:	69da      	ldr	r2, [r3, #28]
 80112a4:	68fb      	ldr	r3, [r7, #12]
 80112a6:	681b      	ldr	r3, [r3, #0]
 80112a8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80112ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80112ae:	68fb      	ldr	r3, [r7, #12]
 80112b0:	681b      	ldr	r3, [r3, #0]
 80112b2:	69da      	ldr	r2, [r3, #28]
 80112b4:	68fb      	ldr	r3, [r7, #12]
 80112b6:	681b      	ldr	r3, [r3, #0]
 80112b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80112bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80112be:	68fb      	ldr	r3, [r7, #12]
 80112c0:	681b      	ldr	r3, [r3, #0]
 80112c2:	69d9      	ldr	r1, [r3, #28]
 80112c4:	68bb      	ldr	r3, [r7, #8]
 80112c6:	691b      	ldr	r3, [r3, #16]
 80112c8:	021a      	lsls	r2, r3, #8
 80112ca:	68fb      	ldr	r3, [r7, #12]
 80112cc:	681b      	ldr	r3, [r3, #0]
 80112ce:	430a      	orrs	r2, r1
 80112d0:	61da      	str	r2, [r3, #28]
      break;
 80112d2:	e043      	b.n	801135c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80112d4:	68fb      	ldr	r3, [r7, #12]
 80112d6:	681b      	ldr	r3, [r3, #0]
 80112d8:	68b9      	ldr	r1, [r7, #8]
 80112da:	4618      	mov	r0, r3
 80112dc:	f000 fc1e 	bl	8011b1c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80112e0:	68fb      	ldr	r3, [r7, #12]
 80112e2:	681b      	ldr	r3, [r3, #0]
 80112e4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80112e6:	68fb      	ldr	r3, [r7, #12]
 80112e8:	681b      	ldr	r3, [r3, #0]
 80112ea:	f042 0208 	orr.w	r2, r2, #8
 80112ee:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80112f0:	68fb      	ldr	r3, [r7, #12]
 80112f2:	681b      	ldr	r3, [r3, #0]
 80112f4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80112f6:	68fb      	ldr	r3, [r7, #12]
 80112f8:	681b      	ldr	r3, [r3, #0]
 80112fa:	f022 0204 	bic.w	r2, r2, #4
 80112fe:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8011300:	68fb      	ldr	r3, [r7, #12]
 8011302:	681b      	ldr	r3, [r3, #0]
 8011304:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8011306:	68bb      	ldr	r3, [r7, #8]
 8011308:	691a      	ldr	r2, [r3, #16]
 801130a:	68fb      	ldr	r3, [r7, #12]
 801130c:	681b      	ldr	r3, [r3, #0]
 801130e:	430a      	orrs	r2, r1
 8011310:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8011312:	e023      	b.n	801135c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8011314:	68fb      	ldr	r3, [r7, #12]
 8011316:	681b      	ldr	r3, [r3, #0]
 8011318:	68b9      	ldr	r1, [r7, #8]
 801131a:	4618      	mov	r0, r3
 801131c:	f000 fc62 	bl	8011be4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8011320:	68fb      	ldr	r3, [r7, #12]
 8011322:	681b      	ldr	r3, [r3, #0]
 8011324:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8011326:	68fb      	ldr	r3, [r7, #12]
 8011328:	681b      	ldr	r3, [r3, #0]
 801132a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801132e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8011330:	68fb      	ldr	r3, [r7, #12]
 8011332:	681b      	ldr	r3, [r3, #0]
 8011334:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8011336:	68fb      	ldr	r3, [r7, #12]
 8011338:	681b      	ldr	r3, [r3, #0]
 801133a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 801133e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8011340:	68fb      	ldr	r3, [r7, #12]
 8011342:	681b      	ldr	r3, [r3, #0]
 8011344:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8011346:	68bb      	ldr	r3, [r7, #8]
 8011348:	691b      	ldr	r3, [r3, #16]
 801134a:	021a      	lsls	r2, r3, #8
 801134c:	68fb      	ldr	r3, [r7, #12]
 801134e:	681b      	ldr	r3, [r3, #0]
 8011350:	430a      	orrs	r2, r1
 8011352:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8011354:	e002      	b.n	801135c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8011356:	2301      	movs	r3, #1
 8011358:	75fb      	strb	r3, [r7, #23]
      break;
 801135a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 801135c:	68fb      	ldr	r3, [r7, #12]
 801135e:	2200      	movs	r2, #0
 8011360:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8011364:	7dfb      	ldrb	r3, [r7, #23]
}
 8011366:	4618      	mov	r0, r3
 8011368:	3718      	adds	r7, #24
 801136a:	46bd      	mov	sp, r7
 801136c:	bd80      	pop	{r7, pc}
 801136e:	bf00      	nop

08011370 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8011370:	b580      	push	{r7, lr}
 8011372:	b084      	sub	sp, #16
 8011374:	af00      	add	r7, sp, #0
 8011376:	6078      	str	r0, [r7, #4]
 8011378:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801137a:	2300      	movs	r3, #0
 801137c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 801137e:	687b      	ldr	r3, [r7, #4]
 8011380:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8011384:	2b01      	cmp	r3, #1
 8011386:	d101      	bne.n	801138c <HAL_TIM_ConfigClockSource+0x1c>
 8011388:	2302      	movs	r3, #2
 801138a:	e0dc      	b.n	8011546 <HAL_TIM_ConfigClockSource+0x1d6>
 801138c:	687b      	ldr	r3, [r7, #4]
 801138e:	2201      	movs	r2, #1
 8011390:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8011394:	687b      	ldr	r3, [r7, #4]
 8011396:	2202      	movs	r2, #2
 8011398:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	681b      	ldr	r3, [r3, #0]
 80113a0:	689b      	ldr	r3, [r3, #8]
 80113a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80113a4:	68ba      	ldr	r2, [r7, #8]
 80113a6:	4b6a      	ldr	r3, [pc, #424]	@ (8011550 <HAL_TIM_ConfigClockSource+0x1e0>)
 80113a8:	4013      	ands	r3, r2
 80113aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80113ac:	68bb      	ldr	r3, [r7, #8]
 80113ae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80113b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80113b4:	687b      	ldr	r3, [r7, #4]
 80113b6:	681b      	ldr	r3, [r3, #0]
 80113b8:	68ba      	ldr	r2, [r7, #8]
 80113ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80113bc:	683b      	ldr	r3, [r7, #0]
 80113be:	681b      	ldr	r3, [r3, #0]
 80113c0:	4a64      	ldr	r2, [pc, #400]	@ (8011554 <HAL_TIM_ConfigClockSource+0x1e4>)
 80113c2:	4293      	cmp	r3, r2
 80113c4:	f000 80a9 	beq.w	801151a <HAL_TIM_ConfigClockSource+0x1aa>
 80113c8:	4a62      	ldr	r2, [pc, #392]	@ (8011554 <HAL_TIM_ConfigClockSource+0x1e4>)
 80113ca:	4293      	cmp	r3, r2
 80113cc:	f200 80ae 	bhi.w	801152c <HAL_TIM_ConfigClockSource+0x1bc>
 80113d0:	4a61      	ldr	r2, [pc, #388]	@ (8011558 <HAL_TIM_ConfigClockSource+0x1e8>)
 80113d2:	4293      	cmp	r3, r2
 80113d4:	f000 80a1 	beq.w	801151a <HAL_TIM_ConfigClockSource+0x1aa>
 80113d8:	4a5f      	ldr	r2, [pc, #380]	@ (8011558 <HAL_TIM_ConfigClockSource+0x1e8>)
 80113da:	4293      	cmp	r3, r2
 80113dc:	f200 80a6 	bhi.w	801152c <HAL_TIM_ConfigClockSource+0x1bc>
 80113e0:	4a5e      	ldr	r2, [pc, #376]	@ (801155c <HAL_TIM_ConfigClockSource+0x1ec>)
 80113e2:	4293      	cmp	r3, r2
 80113e4:	f000 8099 	beq.w	801151a <HAL_TIM_ConfigClockSource+0x1aa>
 80113e8:	4a5c      	ldr	r2, [pc, #368]	@ (801155c <HAL_TIM_ConfigClockSource+0x1ec>)
 80113ea:	4293      	cmp	r3, r2
 80113ec:	f200 809e 	bhi.w	801152c <HAL_TIM_ConfigClockSource+0x1bc>
 80113f0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80113f4:	f000 8091 	beq.w	801151a <HAL_TIM_ConfigClockSource+0x1aa>
 80113f8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80113fc:	f200 8096 	bhi.w	801152c <HAL_TIM_ConfigClockSource+0x1bc>
 8011400:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8011404:	f000 8089 	beq.w	801151a <HAL_TIM_ConfigClockSource+0x1aa>
 8011408:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801140c:	f200 808e 	bhi.w	801152c <HAL_TIM_ConfigClockSource+0x1bc>
 8011410:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8011414:	d03e      	beq.n	8011494 <HAL_TIM_ConfigClockSource+0x124>
 8011416:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801141a:	f200 8087 	bhi.w	801152c <HAL_TIM_ConfigClockSource+0x1bc>
 801141e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8011422:	f000 8086 	beq.w	8011532 <HAL_TIM_ConfigClockSource+0x1c2>
 8011426:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801142a:	d87f      	bhi.n	801152c <HAL_TIM_ConfigClockSource+0x1bc>
 801142c:	2b70      	cmp	r3, #112	@ 0x70
 801142e:	d01a      	beq.n	8011466 <HAL_TIM_ConfigClockSource+0xf6>
 8011430:	2b70      	cmp	r3, #112	@ 0x70
 8011432:	d87b      	bhi.n	801152c <HAL_TIM_ConfigClockSource+0x1bc>
 8011434:	2b60      	cmp	r3, #96	@ 0x60
 8011436:	d050      	beq.n	80114da <HAL_TIM_ConfigClockSource+0x16a>
 8011438:	2b60      	cmp	r3, #96	@ 0x60
 801143a:	d877      	bhi.n	801152c <HAL_TIM_ConfigClockSource+0x1bc>
 801143c:	2b50      	cmp	r3, #80	@ 0x50
 801143e:	d03c      	beq.n	80114ba <HAL_TIM_ConfigClockSource+0x14a>
 8011440:	2b50      	cmp	r3, #80	@ 0x50
 8011442:	d873      	bhi.n	801152c <HAL_TIM_ConfigClockSource+0x1bc>
 8011444:	2b40      	cmp	r3, #64	@ 0x40
 8011446:	d058      	beq.n	80114fa <HAL_TIM_ConfigClockSource+0x18a>
 8011448:	2b40      	cmp	r3, #64	@ 0x40
 801144a:	d86f      	bhi.n	801152c <HAL_TIM_ConfigClockSource+0x1bc>
 801144c:	2b30      	cmp	r3, #48	@ 0x30
 801144e:	d064      	beq.n	801151a <HAL_TIM_ConfigClockSource+0x1aa>
 8011450:	2b30      	cmp	r3, #48	@ 0x30
 8011452:	d86b      	bhi.n	801152c <HAL_TIM_ConfigClockSource+0x1bc>
 8011454:	2b20      	cmp	r3, #32
 8011456:	d060      	beq.n	801151a <HAL_TIM_ConfigClockSource+0x1aa>
 8011458:	2b20      	cmp	r3, #32
 801145a:	d867      	bhi.n	801152c <HAL_TIM_ConfigClockSource+0x1bc>
 801145c:	2b00      	cmp	r3, #0
 801145e:	d05c      	beq.n	801151a <HAL_TIM_ConfigClockSource+0x1aa>
 8011460:	2b10      	cmp	r3, #16
 8011462:	d05a      	beq.n	801151a <HAL_TIM_ConfigClockSource+0x1aa>
 8011464:	e062      	b.n	801152c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 801146a:	683b      	ldr	r3, [r7, #0]
 801146c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 801146e:	683b      	ldr	r3, [r7, #0]
 8011470:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8011472:	683b      	ldr	r3, [r7, #0]
 8011474:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8011476:	f000 fc99 	bl	8011dac <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 801147a:	687b      	ldr	r3, [r7, #4]
 801147c:	681b      	ldr	r3, [r3, #0]
 801147e:	689b      	ldr	r3, [r3, #8]
 8011480:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8011482:	68bb      	ldr	r3, [r7, #8]
 8011484:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8011488:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 801148a:	687b      	ldr	r3, [r7, #4]
 801148c:	681b      	ldr	r3, [r3, #0]
 801148e:	68ba      	ldr	r2, [r7, #8]
 8011490:	609a      	str	r2, [r3, #8]
      break;
 8011492:	e04f      	b.n	8011534 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8011498:	683b      	ldr	r3, [r7, #0]
 801149a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 801149c:	683b      	ldr	r3, [r7, #0]
 801149e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80114a0:	683b      	ldr	r3, [r7, #0]
 80114a2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80114a4:	f000 fc82 	bl	8011dac <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80114a8:	687b      	ldr	r3, [r7, #4]
 80114aa:	681b      	ldr	r3, [r3, #0]
 80114ac:	689a      	ldr	r2, [r3, #8]
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	681b      	ldr	r3, [r3, #0]
 80114b2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80114b6:	609a      	str	r2, [r3, #8]
      break;
 80114b8:	e03c      	b.n	8011534 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80114be:	683b      	ldr	r3, [r7, #0]
 80114c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80114c2:	683b      	ldr	r3, [r7, #0]
 80114c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80114c6:	461a      	mov	r2, r3
 80114c8:	f000 fbf2 	bl	8011cb0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	681b      	ldr	r3, [r3, #0]
 80114d0:	2150      	movs	r1, #80	@ 0x50
 80114d2:	4618      	mov	r0, r3
 80114d4:	f000 fc4c 	bl	8011d70 <TIM_ITRx_SetConfig>
      break;
 80114d8:	e02c      	b.n	8011534 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80114de:	683b      	ldr	r3, [r7, #0]
 80114e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80114e2:	683b      	ldr	r3, [r7, #0]
 80114e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80114e6:	461a      	mov	r2, r3
 80114e8:	f000 fc11 	bl	8011d0e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80114ec:	687b      	ldr	r3, [r7, #4]
 80114ee:	681b      	ldr	r3, [r3, #0]
 80114f0:	2160      	movs	r1, #96	@ 0x60
 80114f2:	4618      	mov	r0, r3
 80114f4:	f000 fc3c 	bl	8011d70 <TIM_ITRx_SetConfig>
      break;
 80114f8:	e01c      	b.n	8011534 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80114fe:	683b      	ldr	r3, [r7, #0]
 8011500:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8011502:	683b      	ldr	r3, [r7, #0]
 8011504:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8011506:	461a      	mov	r2, r3
 8011508:	f000 fbd2 	bl	8011cb0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 801150c:	687b      	ldr	r3, [r7, #4]
 801150e:	681b      	ldr	r3, [r3, #0]
 8011510:	2140      	movs	r1, #64	@ 0x40
 8011512:	4618      	mov	r0, r3
 8011514:	f000 fc2c 	bl	8011d70 <TIM_ITRx_SetConfig>
      break;
 8011518:	e00c      	b.n	8011534 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 801151a:	687b      	ldr	r3, [r7, #4]
 801151c:	681a      	ldr	r2, [r3, #0]
 801151e:	683b      	ldr	r3, [r7, #0]
 8011520:	681b      	ldr	r3, [r3, #0]
 8011522:	4619      	mov	r1, r3
 8011524:	4610      	mov	r0, r2
 8011526:	f000 fc23 	bl	8011d70 <TIM_ITRx_SetConfig>
      break;
 801152a:	e003      	b.n	8011534 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 801152c:	2301      	movs	r3, #1
 801152e:	73fb      	strb	r3, [r7, #15]
      break;
 8011530:	e000      	b.n	8011534 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8011532:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	2201      	movs	r2, #1
 8011538:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	2200      	movs	r2, #0
 8011540:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8011544:	7bfb      	ldrb	r3, [r7, #15]
}
 8011546:	4618      	mov	r0, r3
 8011548:	3710      	adds	r7, #16
 801154a:	46bd      	mov	sp, r7
 801154c:	bd80      	pop	{r7, pc}
 801154e:	bf00      	nop
 8011550:	ffceff88 	.word	0xffceff88
 8011554:	00100040 	.word	0x00100040
 8011558:	00100030 	.word	0x00100030
 801155c:	00100020 	.word	0x00100020

08011560 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8011560:	b480      	push	{r7}
 8011562:	b083      	sub	sp, #12
 8011564:	af00      	add	r7, sp, #0
 8011566:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8011568:	bf00      	nop
 801156a:	370c      	adds	r7, #12
 801156c:	46bd      	mov	sp, r7
 801156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011572:	4770      	bx	lr

08011574 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8011574:	b480      	push	{r7}
 8011576:	b083      	sub	sp, #12
 8011578:	af00      	add	r7, sp, #0
 801157a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 801157c:	bf00      	nop
 801157e:	370c      	adds	r7, #12
 8011580:	46bd      	mov	sp, r7
 8011582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011586:	4770      	bx	lr

08011588 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8011588:	b480      	push	{r7}
 801158a:	b083      	sub	sp, #12
 801158c:	af00      	add	r7, sp, #0
 801158e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8011590:	bf00      	nop
 8011592:	370c      	adds	r7, #12
 8011594:	46bd      	mov	sp, r7
 8011596:	f85d 7b04 	ldr.w	r7, [sp], #4
 801159a:	4770      	bx	lr

0801159c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 801159c:	b480      	push	{r7}
 801159e:	b083      	sub	sp, #12
 80115a0:	af00      	add	r7, sp, #0
 80115a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80115a4:	bf00      	nop
 80115a6:	370c      	adds	r7, #12
 80115a8:	46bd      	mov	sp, r7
 80115aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115ae:	4770      	bx	lr

080115b0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80115b0:	b480      	push	{r7}
 80115b2:	b083      	sub	sp, #12
 80115b4:	af00      	add	r7, sp, #0
 80115b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80115b8:	bf00      	nop
 80115ba:	370c      	adds	r7, #12
 80115bc:	46bd      	mov	sp, r7
 80115be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115c2:	4770      	bx	lr

080115c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80115c4:	b480      	push	{r7}
 80115c6:	b085      	sub	sp, #20
 80115c8:	af00      	add	r7, sp, #0
 80115ca:	6078      	str	r0, [r7, #4]
 80115cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	681b      	ldr	r3, [r3, #0]
 80115d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80115d4:	687b      	ldr	r3, [r7, #4]
 80115d6:	4a43      	ldr	r2, [pc, #268]	@ (80116e4 <TIM_Base_SetConfig+0x120>)
 80115d8:	4293      	cmp	r3, r2
 80115da:	d013      	beq.n	8011604 <TIM_Base_SetConfig+0x40>
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80115e2:	d00f      	beq.n	8011604 <TIM_Base_SetConfig+0x40>
 80115e4:	687b      	ldr	r3, [r7, #4]
 80115e6:	4a40      	ldr	r2, [pc, #256]	@ (80116e8 <TIM_Base_SetConfig+0x124>)
 80115e8:	4293      	cmp	r3, r2
 80115ea:	d00b      	beq.n	8011604 <TIM_Base_SetConfig+0x40>
 80115ec:	687b      	ldr	r3, [r7, #4]
 80115ee:	4a3f      	ldr	r2, [pc, #252]	@ (80116ec <TIM_Base_SetConfig+0x128>)
 80115f0:	4293      	cmp	r3, r2
 80115f2:	d007      	beq.n	8011604 <TIM_Base_SetConfig+0x40>
 80115f4:	687b      	ldr	r3, [r7, #4]
 80115f6:	4a3e      	ldr	r2, [pc, #248]	@ (80116f0 <TIM_Base_SetConfig+0x12c>)
 80115f8:	4293      	cmp	r3, r2
 80115fa:	d003      	beq.n	8011604 <TIM_Base_SetConfig+0x40>
 80115fc:	687b      	ldr	r3, [r7, #4]
 80115fe:	4a3d      	ldr	r2, [pc, #244]	@ (80116f4 <TIM_Base_SetConfig+0x130>)
 8011600:	4293      	cmp	r3, r2
 8011602:	d108      	bne.n	8011616 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8011604:	68fb      	ldr	r3, [r7, #12]
 8011606:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801160a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801160c:	683b      	ldr	r3, [r7, #0]
 801160e:	685b      	ldr	r3, [r3, #4]
 8011610:	68fa      	ldr	r2, [r7, #12]
 8011612:	4313      	orrs	r3, r2
 8011614:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8011616:	687b      	ldr	r3, [r7, #4]
 8011618:	4a32      	ldr	r2, [pc, #200]	@ (80116e4 <TIM_Base_SetConfig+0x120>)
 801161a:	4293      	cmp	r3, r2
 801161c:	d01f      	beq.n	801165e <TIM_Base_SetConfig+0x9a>
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011624:	d01b      	beq.n	801165e <TIM_Base_SetConfig+0x9a>
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	4a2f      	ldr	r2, [pc, #188]	@ (80116e8 <TIM_Base_SetConfig+0x124>)
 801162a:	4293      	cmp	r3, r2
 801162c:	d017      	beq.n	801165e <TIM_Base_SetConfig+0x9a>
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	4a2e      	ldr	r2, [pc, #184]	@ (80116ec <TIM_Base_SetConfig+0x128>)
 8011632:	4293      	cmp	r3, r2
 8011634:	d013      	beq.n	801165e <TIM_Base_SetConfig+0x9a>
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	4a2d      	ldr	r2, [pc, #180]	@ (80116f0 <TIM_Base_SetConfig+0x12c>)
 801163a:	4293      	cmp	r3, r2
 801163c:	d00f      	beq.n	801165e <TIM_Base_SetConfig+0x9a>
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	4a2c      	ldr	r2, [pc, #176]	@ (80116f4 <TIM_Base_SetConfig+0x130>)
 8011642:	4293      	cmp	r3, r2
 8011644:	d00b      	beq.n	801165e <TIM_Base_SetConfig+0x9a>
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	4a2b      	ldr	r2, [pc, #172]	@ (80116f8 <TIM_Base_SetConfig+0x134>)
 801164a:	4293      	cmp	r3, r2
 801164c:	d007      	beq.n	801165e <TIM_Base_SetConfig+0x9a>
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	4a2a      	ldr	r2, [pc, #168]	@ (80116fc <TIM_Base_SetConfig+0x138>)
 8011652:	4293      	cmp	r3, r2
 8011654:	d003      	beq.n	801165e <TIM_Base_SetConfig+0x9a>
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	4a29      	ldr	r2, [pc, #164]	@ (8011700 <TIM_Base_SetConfig+0x13c>)
 801165a:	4293      	cmp	r3, r2
 801165c:	d108      	bne.n	8011670 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801165e:	68fb      	ldr	r3, [r7, #12]
 8011660:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8011664:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8011666:	683b      	ldr	r3, [r7, #0]
 8011668:	68db      	ldr	r3, [r3, #12]
 801166a:	68fa      	ldr	r2, [r7, #12]
 801166c:	4313      	orrs	r3, r2
 801166e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8011670:	68fb      	ldr	r3, [r7, #12]
 8011672:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8011676:	683b      	ldr	r3, [r7, #0]
 8011678:	695b      	ldr	r3, [r3, #20]
 801167a:	4313      	orrs	r3, r2
 801167c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801167e:	683b      	ldr	r3, [r7, #0]
 8011680:	689a      	ldr	r2, [r3, #8]
 8011682:	687b      	ldr	r3, [r7, #4]
 8011684:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8011686:	683b      	ldr	r3, [r7, #0]
 8011688:	681a      	ldr	r2, [r3, #0]
 801168a:	687b      	ldr	r3, [r7, #4]
 801168c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801168e:	687b      	ldr	r3, [r7, #4]
 8011690:	4a14      	ldr	r2, [pc, #80]	@ (80116e4 <TIM_Base_SetConfig+0x120>)
 8011692:	4293      	cmp	r3, r2
 8011694:	d00f      	beq.n	80116b6 <TIM_Base_SetConfig+0xf2>
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	4a16      	ldr	r2, [pc, #88]	@ (80116f4 <TIM_Base_SetConfig+0x130>)
 801169a:	4293      	cmp	r3, r2
 801169c:	d00b      	beq.n	80116b6 <TIM_Base_SetConfig+0xf2>
 801169e:	687b      	ldr	r3, [r7, #4]
 80116a0:	4a15      	ldr	r2, [pc, #84]	@ (80116f8 <TIM_Base_SetConfig+0x134>)
 80116a2:	4293      	cmp	r3, r2
 80116a4:	d007      	beq.n	80116b6 <TIM_Base_SetConfig+0xf2>
 80116a6:	687b      	ldr	r3, [r7, #4]
 80116a8:	4a14      	ldr	r2, [pc, #80]	@ (80116fc <TIM_Base_SetConfig+0x138>)
 80116aa:	4293      	cmp	r3, r2
 80116ac:	d003      	beq.n	80116b6 <TIM_Base_SetConfig+0xf2>
 80116ae:	687b      	ldr	r3, [r7, #4]
 80116b0:	4a13      	ldr	r2, [pc, #76]	@ (8011700 <TIM_Base_SetConfig+0x13c>)
 80116b2:	4293      	cmp	r3, r2
 80116b4:	d103      	bne.n	80116be <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80116b6:	683b      	ldr	r3, [r7, #0]
 80116b8:	691a      	ldr	r2, [r3, #16]
 80116ba:	687b      	ldr	r3, [r7, #4]
 80116bc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	681b      	ldr	r3, [r3, #0]
 80116c2:	f043 0204 	orr.w	r2, r3, #4
 80116c6:	687b      	ldr	r3, [r7, #4]
 80116c8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	2201      	movs	r2, #1
 80116ce:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80116d0:	687b      	ldr	r3, [r7, #4]
 80116d2:	68fa      	ldr	r2, [r7, #12]
 80116d4:	601a      	str	r2, [r3, #0]
}
 80116d6:	bf00      	nop
 80116d8:	3714      	adds	r7, #20
 80116da:	46bd      	mov	sp, r7
 80116dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116e0:	4770      	bx	lr
 80116e2:	bf00      	nop
 80116e4:	40010000 	.word	0x40010000
 80116e8:	40000400 	.word	0x40000400
 80116ec:	40000800 	.word	0x40000800
 80116f0:	40000c00 	.word	0x40000c00
 80116f4:	40010400 	.word	0x40010400
 80116f8:	40014000 	.word	0x40014000
 80116fc:	40014400 	.word	0x40014400
 8011700:	40014800 	.word	0x40014800

08011704 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8011704:	b480      	push	{r7}
 8011706:	b087      	sub	sp, #28
 8011708:	af00      	add	r7, sp, #0
 801170a:	6078      	str	r0, [r7, #4]
 801170c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801170e:	687b      	ldr	r3, [r7, #4]
 8011710:	6a1b      	ldr	r3, [r3, #32]
 8011712:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8011714:	687b      	ldr	r3, [r7, #4]
 8011716:	6a1b      	ldr	r3, [r3, #32]
 8011718:	f023 0201 	bic.w	r2, r3, #1
 801171c:	687b      	ldr	r3, [r7, #4]
 801171e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	685b      	ldr	r3, [r3, #4]
 8011724:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8011726:	687b      	ldr	r3, [r7, #4]
 8011728:	699b      	ldr	r3, [r3, #24]
 801172a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801172c:	68fa      	ldr	r2, [r7, #12]
 801172e:	4b37      	ldr	r3, [pc, #220]	@ (801180c <TIM_OC1_SetConfig+0x108>)
 8011730:	4013      	ands	r3, r2
 8011732:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8011734:	68fb      	ldr	r3, [r7, #12]
 8011736:	f023 0303 	bic.w	r3, r3, #3
 801173a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801173c:	683b      	ldr	r3, [r7, #0]
 801173e:	681b      	ldr	r3, [r3, #0]
 8011740:	68fa      	ldr	r2, [r7, #12]
 8011742:	4313      	orrs	r3, r2
 8011744:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8011746:	697b      	ldr	r3, [r7, #20]
 8011748:	f023 0302 	bic.w	r3, r3, #2
 801174c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801174e:	683b      	ldr	r3, [r7, #0]
 8011750:	689b      	ldr	r3, [r3, #8]
 8011752:	697a      	ldr	r2, [r7, #20]
 8011754:	4313      	orrs	r3, r2
 8011756:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8011758:	687b      	ldr	r3, [r7, #4]
 801175a:	4a2d      	ldr	r2, [pc, #180]	@ (8011810 <TIM_OC1_SetConfig+0x10c>)
 801175c:	4293      	cmp	r3, r2
 801175e:	d00f      	beq.n	8011780 <TIM_OC1_SetConfig+0x7c>
 8011760:	687b      	ldr	r3, [r7, #4]
 8011762:	4a2c      	ldr	r2, [pc, #176]	@ (8011814 <TIM_OC1_SetConfig+0x110>)
 8011764:	4293      	cmp	r3, r2
 8011766:	d00b      	beq.n	8011780 <TIM_OC1_SetConfig+0x7c>
 8011768:	687b      	ldr	r3, [r7, #4]
 801176a:	4a2b      	ldr	r2, [pc, #172]	@ (8011818 <TIM_OC1_SetConfig+0x114>)
 801176c:	4293      	cmp	r3, r2
 801176e:	d007      	beq.n	8011780 <TIM_OC1_SetConfig+0x7c>
 8011770:	687b      	ldr	r3, [r7, #4]
 8011772:	4a2a      	ldr	r2, [pc, #168]	@ (801181c <TIM_OC1_SetConfig+0x118>)
 8011774:	4293      	cmp	r3, r2
 8011776:	d003      	beq.n	8011780 <TIM_OC1_SetConfig+0x7c>
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	4a29      	ldr	r2, [pc, #164]	@ (8011820 <TIM_OC1_SetConfig+0x11c>)
 801177c:	4293      	cmp	r3, r2
 801177e:	d10c      	bne.n	801179a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8011780:	697b      	ldr	r3, [r7, #20]
 8011782:	f023 0308 	bic.w	r3, r3, #8
 8011786:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8011788:	683b      	ldr	r3, [r7, #0]
 801178a:	68db      	ldr	r3, [r3, #12]
 801178c:	697a      	ldr	r2, [r7, #20]
 801178e:	4313      	orrs	r3, r2
 8011790:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8011792:	697b      	ldr	r3, [r7, #20]
 8011794:	f023 0304 	bic.w	r3, r3, #4
 8011798:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801179a:	687b      	ldr	r3, [r7, #4]
 801179c:	4a1c      	ldr	r2, [pc, #112]	@ (8011810 <TIM_OC1_SetConfig+0x10c>)
 801179e:	4293      	cmp	r3, r2
 80117a0:	d00f      	beq.n	80117c2 <TIM_OC1_SetConfig+0xbe>
 80117a2:	687b      	ldr	r3, [r7, #4]
 80117a4:	4a1b      	ldr	r2, [pc, #108]	@ (8011814 <TIM_OC1_SetConfig+0x110>)
 80117a6:	4293      	cmp	r3, r2
 80117a8:	d00b      	beq.n	80117c2 <TIM_OC1_SetConfig+0xbe>
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	4a1a      	ldr	r2, [pc, #104]	@ (8011818 <TIM_OC1_SetConfig+0x114>)
 80117ae:	4293      	cmp	r3, r2
 80117b0:	d007      	beq.n	80117c2 <TIM_OC1_SetConfig+0xbe>
 80117b2:	687b      	ldr	r3, [r7, #4]
 80117b4:	4a19      	ldr	r2, [pc, #100]	@ (801181c <TIM_OC1_SetConfig+0x118>)
 80117b6:	4293      	cmp	r3, r2
 80117b8:	d003      	beq.n	80117c2 <TIM_OC1_SetConfig+0xbe>
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	4a18      	ldr	r2, [pc, #96]	@ (8011820 <TIM_OC1_SetConfig+0x11c>)
 80117be:	4293      	cmp	r3, r2
 80117c0:	d111      	bne.n	80117e6 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80117c2:	693b      	ldr	r3, [r7, #16]
 80117c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80117c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80117ca:	693b      	ldr	r3, [r7, #16]
 80117cc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80117d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80117d2:	683b      	ldr	r3, [r7, #0]
 80117d4:	695b      	ldr	r3, [r3, #20]
 80117d6:	693a      	ldr	r2, [r7, #16]
 80117d8:	4313      	orrs	r3, r2
 80117da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80117dc:	683b      	ldr	r3, [r7, #0]
 80117de:	699b      	ldr	r3, [r3, #24]
 80117e0:	693a      	ldr	r2, [r7, #16]
 80117e2:	4313      	orrs	r3, r2
 80117e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80117e6:	687b      	ldr	r3, [r7, #4]
 80117e8:	693a      	ldr	r2, [r7, #16]
 80117ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80117ec:	687b      	ldr	r3, [r7, #4]
 80117ee:	68fa      	ldr	r2, [r7, #12]
 80117f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80117f2:	683b      	ldr	r3, [r7, #0]
 80117f4:	685a      	ldr	r2, [r3, #4]
 80117f6:	687b      	ldr	r3, [r7, #4]
 80117f8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80117fa:	687b      	ldr	r3, [r7, #4]
 80117fc:	697a      	ldr	r2, [r7, #20]
 80117fe:	621a      	str	r2, [r3, #32]
}
 8011800:	bf00      	nop
 8011802:	371c      	adds	r7, #28
 8011804:	46bd      	mov	sp, r7
 8011806:	f85d 7b04 	ldr.w	r7, [sp], #4
 801180a:	4770      	bx	lr
 801180c:	fffeff8f 	.word	0xfffeff8f
 8011810:	40010000 	.word	0x40010000
 8011814:	40010400 	.word	0x40010400
 8011818:	40014000 	.word	0x40014000
 801181c:	40014400 	.word	0x40014400
 8011820:	40014800 	.word	0x40014800

08011824 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8011824:	b480      	push	{r7}
 8011826:	b087      	sub	sp, #28
 8011828:	af00      	add	r7, sp, #0
 801182a:	6078      	str	r0, [r7, #4]
 801182c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	6a1b      	ldr	r3, [r3, #32]
 8011832:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8011834:	687b      	ldr	r3, [r7, #4]
 8011836:	6a1b      	ldr	r3, [r3, #32]
 8011838:	f023 0210 	bic.w	r2, r3, #16
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	685b      	ldr	r3, [r3, #4]
 8011844:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8011846:	687b      	ldr	r3, [r7, #4]
 8011848:	699b      	ldr	r3, [r3, #24]
 801184a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 801184c:	68fa      	ldr	r2, [r7, #12]
 801184e:	4b34      	ldr	r3, [pc, #208]	@ (8011920 <TIM_OC2_SetConfig+0xfc>)
 8011850:	4013      	ands	r3, r2
 8011852:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8011854:	68fb      	ldr	r3, [r7, #12]
 8011856:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801185a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801185c:	683b      	ldr	r3, [r7, #0]
 801185e:	681b      	ldr	r3, [r3, #0]
 8011860:	021b      	lsls	r3, r3, #8
 8011862:	68fa      	ldr	r2, [r7, #12]
 8011864:	4313      	orrs	r3, r2
 8011866:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8011868:	697b      	ldr	r3, [r7, #20]
 801186a:	f023 0320 	bic.w	r3, r3, #32
 801186e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8011870:	683b      	ldr	r3, [r7, #0]
 8011872:	689b      	ldr	r3, [r3, #8]
 8011874:	011b      	lsls	r3, r3, #4
 8011876:	697a      	ldr	r2, [r7, #20]
 8011878:	4313      	orrs	r3, r2
 801187a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	4a29      	ldr	r2, [pc, #164]	@ (8011924 <TIM_OC2_SetConfig+0x100>)
 8011880:	4293      	cmp	r3, r2
 8011882:	d003      	beq.n	801188c <TIM_OC2_SetConfig+0x68>
 8011884:	687b      	ldr	r3, [r7, #4]
 8011886:	4a28      	ldr	r2, [pc, #160]	@ (8011928 <TIM_OC2_SetConfig+0x104>)
 8011888:	4293      	cmp	r3, r2
 801188a:	d10d      	bne.n	80118a8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 801188c:	697b      	ldr	r3, [r7, #20]
 801188e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8011892:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8011894:	683b      	ldr	r3, [r7, #0]
 8011896:	68db      	ldr	r3, [r3, #12]
 8011898:	011b      	lsls	r3, r3, #4
 801189a:	697a      	ldr	r2, [r7, #20]
 801189c:	4313      	orrs	r3, r2
 801189e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80118a0:	697b      	ldr	r3, [r7, #20]
 80118a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80118a6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80118a8:	687b      	ldr	r3, [r7, #4]
 80118aa:	4a1e      	ldr	r2, [pc, #120]	@ (8011924 <TIM_OC2_SetConfig+0x100>)
 80118ac:	4293      	cmp	r3, r2
 80118ae:	d00f      	beq.n	80118d0 <TIM_OC2_SetConfig+0xac>
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	4a1d      	ldr	r2, [pc, #116]	@ (8011928 <TIM_OC2_SetConfig+0x104>)
 80118b4:	4293      	cmp	r3, r2
 80118b6:	d00b      	beq.n	80118d0 <TIM_OC2_SetConfig+0xac>
 80118b8:	687b      	ldr	r3, [r7, #4]
 80118ba:	4a1c      	ldr	r2, [pc, #112]	@ (801192c <TIM_OC2_SetConfig+0x108>)
 80118bc:	4293      	cmp	r3, r2
 80118be:	d007      	beq.n	80118d0 <TIM_OC2_SetConfig+0xac>
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	4a1b      	ldr	r2, [pc, #108]	@ (8011930 <TIM_OC2_SetConfig+0x10c>)
 80118c4:	4293      	cmp	r3, r2
 80118c6:	d003      	beq.n	80118d0 <TIM_OC2_SetConfig+0xac>
 80118c8:	687b      	ldr	r3, [r7, #4]
 80118ca:	4a1a      	ldr	r2, [pc, #104]	@ (8011934 <TIM_OC2_SetConfig+0x110>)
 80118cc:	4293      	cmp	r3, r2
 80118ce:	d113      	bne.n	80118f8 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80118d0:	693b      	ldr	r3, [r7, #16]
 80118d2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80118d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80118d8:	693b      	ldr	r3, [r7, #16]
 80118da:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80118de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80118e0:	683b      	ldr	r3, [r7, #0]
 80118e2:	695b      	ldr	r3, [r3, #20]
 80118e4:	009b      	lsls	r3, r3, #2
 80118e6:	693a      	ldr	r2, [r7, #16]
 80118e8:	4313      	orrs	r3, r2
 80118ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80118ec:	683b      	ldr	r3, [r7, #0]
 80118ee:	699b      	ldr	r3, [r3, #24]
 80118f0:	009b      	lsls	r3, r3, #2
 80118f2:	693a      	ldr	r2, [r7, #16]
 80118f4:	4313      	orrs	r3, r2
 80118f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80118f8:	687b      	ldr	r3, [r7, #4]
 80118fa:	693a      	ldr	r2, [r7, #16]
 80118fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80118fe:	687b      	ldr	r3, [r7, #4]
 8011900:	68fa      	ldr	r2, [r7, #12]
 8011902:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8011904:	683b      	ldr	r3, [r7, #0]
 8011906:	685a      	ldr	r2, [r3, #4]
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801190c:	687b      	ldr	r3, [r7, #4]
 801190e:	697a      	ldr	r2, [r7, #20]
 8011910:	621a      	str	r2, [r3, #32]
}
 8011912:	bf00      	nop
 8011914:	371c      	adds	r7, #28
 8011916:	46bd      	mov	sp, r7
 8011918:	f85d 7b04 	ldr.w	r7, [sp], #4
 801191c:	4770      	bx	lr
 801191e:	bf00      	nop
 8011920:	feff8fff 	.word	0xfeff8fff
 8011924:	40010000 	.word	0x40010000
 8011928:	40010400 	.word	0x40010400
 801192c:	40014000 	.word	0x40014000
 8011930:	40014400 	.word	0x40014400
 8011934:	40014800 	.word	0x40014800

08011938 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8011938:	b480      	push	{r7}
 801193a:	b087      	sub	sp, #28
 801193c:	af00      	add	r7, sp, #0
 801193e:	6078      	str	r0, [r7, #4]
 8011940:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011942:	687b      	ldr	r3, [r7, #4]
 8011944:	6a1b      	ldr	r3, [r3, #32]
 8011946:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8011948:	687b      	ldr	r3, [r7, #4]
 801194a:	6a1b      	ldr	r3, [r3, #32]
 801194c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8011950:	687b      	ldr	r3, [r7, #4]
 8011952:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	685b      	ldr	r3, [r3, #4]
 8011958:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801195a:	687b      	ldr	r3, [r7, #4]
 801195c:	69db      	ldr	r3, [r3, #28]
 801195e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8011960:	68fa      	ldr	r2, [r7, #12]
 8011962:	4b33      	ldr	r3, [pc, #204]	@ (8011a30 <TIM_OC3_SetConfig+0xf8>)
 8011964:	4013      	ands	r3, r2
 8011966:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8011968:	68fb      	ldr	r3, [r7, #12]
 801196a:	f023 0303 	bic.w	r3, r3, #3
 801196e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8011970:	683b      	ldr	r3, [r7, #0]
 8011972:	681b      	ldr	r3, [r3, #0]
 8011974:	68fa      	ldr	r2, [r7, #12]
 8011976:	4313      	orrs	r3, r2
 8011978:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801197a:	697b      	ldr	r3, [r7, #20]
 801197c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8011980:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8011982:	683b      	ldr	r3, [r7, #0]
 8011984:	689b      	ldr	r3, [r3, #8]
 8011986:	021b      	lsls	r3, r3, #8
 8011988:	697a      	ldr	r2, [r7, #20]
 801198a:	4313      	orrs	r3, r2
 801198c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801198e:	687b      	ldr	r3, [r7, #4]
 8011990:	4a28      	ldr	r2, [pc, #160]	@ (8011a34 <TIM_OC3_SetConfig+0xfc>)
 8011992:	4293      	cmp	r3, r2
 8011994:	d003      	beq.n	801199e <TIM_OC3_SetConfig+0x66>
 8011996:	687b      	ldr	r3, [r7, #4]
 8011998:	4a27      	ldr	r2, [pc, #156]	@ (8011a38 <TIM_OC3_SetConfig+0x100>)
 801199a:	4293      	cmp	r3, r2
 801199c:	d10d      	bne.n	80119ba <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801199e:	697b      	ldr	r3, [r7, #20]
 80119a0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80119a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80119a6:	683b      	ldr	r3, [r7, #0]
 80119a8:	68db      	ldr	r3, [r3, #12]
 80119aa:	021b      	lsls	r3, r3, #8
 80119ac:	697a      	ldr	r2, [r7, #20]
 80119ae:	4313      	orrs	r3, r2
 80119b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80119b2:	697b      	ldr	r3, [r7, #20]
 80119b4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80119b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80119ba:	687b      	ldr	r3, [r7, #4]
 80119bc:	4a1d      	ldr	r2, [pc, #116]	@ (8011a34 <TIM_OC3_SetConfig+0xfc>)
 80119be:	4293      	cmp	r3, r2
 80119c0:	d00f      	beq.n	80119e2 <TIM_OC3_SetConfig+0xaa>
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	4a1c      	ldr	r2, [pc, #112]	@ (8011a38 <TIM_OC3_SetConfig+0x100>)
 80119c6:	4293      	cmp	r3, r2
 80119c8:	d00b      	beq.n	80119e2 <TIM_OC3_SetConfig+0xaa>
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	4a1b      	ldr	r2, [pc, #108]	@ (8011a3c <TIM_OC3_SetConfig+0x104>)
 80119ce:	4293      	cmp	r3, r2
 80119d0:	d007      	beq.n	80119e2 <TIM_OC3_SetConfig+0xaa>
 80119d2:	687b      	ldr	r3, [r7, #4]
 80119d4:	4a1a      	ldr	r2, [pc, #104]	@ (8011a40 <TIM_OC3_SetConfig+0x108>)
 80119d6:	4293      	cmp	r3, r2
 80119d8:	d003      	beq.n	80119e2 <TIM_OC3_SetConfig+0xaa>
 80119da:	687b      	ldr	r3, [r7, #4]
 80119dc:	4a19      	ldr	r2, [pc, #100]	@ (8011a44 <TIM_OC3_SetConfig+0x10c>)
 80119de:	4293      	cmp	r3, r2
 80119e0:	d113      	bne.n	8011a0a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80119e2:	693b      	ldr	r3, [r7, #16]
 80119e4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80119e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80119ea:	693b      	ldr	r3, [r7, #16]
 80119ec:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80119f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80119f2:	683b      	ldr	r3, [r7, #0]
 80119f4:	695b      	ldr	r3, [r3, #20]
 80119f6:	011b      	lsls	r3, r3, #4
 80119f8:	693a      	ldr	r2, [r7, #16]
 80119fa:	4313      	orrs	r3, r2
 80119fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80119fe:	683b      	ldr	r3, [r7, #0]
 8011a00:	699b      	ldr	r3, [r3, #24]
 8011a02:	011b      	lsls	r3, r3, #4
 8011a04:	693a      	ldr	r2, [r7, #16]
 8011a06:	4313      	orrs	r3, r2
 8011a08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011a0a:	687b      	ldr	r3, [r7, #4]
 8011a0c:	693a      	ldr	r2, [r7, #16]
 8011a0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8011a10:	687b      	ldr	r3, [r7, #4]
 8011a12:	68fa      	ldr	r2, [r7, #12]
 8011a14:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8011a16:	683b      	ldr	r3, [r7, #0]
 8011a18:	685a      	ldr	r2, [r3, #4]
 8011a1a:	687b      	ldr	r3, [r7, #4]
 8011a1c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011a1e:	687b      	ldr	r3, [r7, #4]
 8011a20:	697a      	ldr	r2, [r7, #20]
 8011a22:	621a      	str	r2, [r3, #32]
}
 8011a24:	bf00      	nop
 8011a26:	371c      	adds	r7, #28
 8011a28:	46bd      	mov	sp, r7
 8011a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a2e:	4770      	bx	lr
 8011a30:	fffeff8f 	.word	0xfffeff8f
 8011a34:	40010000 	.word	0x40010000
 8011a38:	40010400 	.word	0x40010400
 8011a3c:	40014000 	.word	0x40014000
 8011a40:	40014400 	.word	0x40014400
 8011a44:	40014800 	.word	0x40014800

08011a48 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8011a48:	b480      	push	{r7}
 8011a4a:	b087      	sub	sp, #28
 8011a4c:	af00      	add	r7, sp, #0
 8011a4e:	6078      	str	r0, [r7, #4]
 8011a50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	6a1b      	ldr	r3, [r3, #32]
 8011a56:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	6a1b      	ldr	r3, [r3, #32]
 8011a5c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8011a60:	687b      	ldr	r3, [r7, #4]
 8011a62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011a64:	687b      	ldr	r3, [r7, #4]
 8011a66:	685b      	ldr	r3, [r3, #4]
 8011a68:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8011a6a:	687b      	ldr	r3, [r7, #4]
 8011a6c:	69db      	ldr	r3, [r3, #28]
 8011a6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8011a70:	68fa      	ldr	r2, [r7, #12]
 8011a72:	4b24      	ldr	r3, [pc, #144]	@ (8011b04 <TIM_OC4_SetConfig+0xbc>)
 8011a74:	4013      	ands	r3, r2
 8011a76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8011a78:	68fb      	ldr	r3, [r7, #12]
 8011a7a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8011a7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011a80:	683b      	ldr	r3, [r7, #0]
 8011a82:	681b      	ldr	r3, [r3, #0]
 8011a84:	021b      	lsls	r3, r3, #8
 8011a86:	68fa      	ldr	r2, [r7, #12]
 8011a88:	4313      	orrs	r3, r2
 8011a8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8011a8c:	693b      	ldr	r3, [r7, #16]
 8011a8e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8011a92:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8011a94:	683b      	ldr	r3, [r7, #0]
 8011a96:	689b      	ldr	r3, [r3, #8]
 8011a98:	031b      	lsls	r3, r3, #12
 8011a9a:	693a      	ldr	r2, [r7, #16]
 8011a9c:	4313      	orrs	r3, r2
 8011a9e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	4a19      	ldr	r2, [pc, #100]	@ (8011b08 <TIM_OC4_SetConfig+0xc0>)
 8011aa4:	4293      	cmp	r3, r2
 8011aa6:	d00f      	beq.n	8011ac8 <TIM_OC4_SetConfig+0x80>
 8011aa8:	687b      	ldr	r3, [r7, #4]
 8011aaa:	4a18      	ldr	r2, [pc, #96]	@ (8011b0c <TIM_OC4_SetConfig+0xc4>)
 8011aac:	4293      	cmp	r3, r2
 8011aae:	d00b      	beq.n	8011ac8 <TIM_OC4_SetConfig+0x80>
 8011ab0:	687b      	ldr	r3, [r7, #4]
 8011ab2:	4a17      	ldr	r2, [pc, #92]	@ (8011b10 <TIM_OC4_SetConfig+0xc8>)
 8011ab4:	4293      	cmp	r3, r2
 8011ab6:	d007      	beq.n	8011ac8 <TIM_OC4_SetConfig+0x80>
 8011ab8:	687b      	ldr	r3, [r7, #4]
 8011aba:	4a16      	ldr	r2, [pc, #88]	@ (8011b14 <TIM_OC4_SetConfig+0xcc>)
 8011abc:	4293      	cmp	r3, r2
 8011abe:	d003      	beq.n	8011ac8 <TIM_OC4_SetConfig+0x80>
 8011ac0:	687b      	ldr	r3, [r7, #4]
 8011ac2:	4a15      	ldr	r2, [pc, #84]	@ (8011b18 <TIM_OC4_SetConfig+0xd0>)
 8011ac4:	4293      	cmp	r3, r2
 8011ac6:	d109      	bne.n	8011adc <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8011ac8:	697b      	ldr	r3, [r7, #20]
 8011aca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8011ace:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8011ad0:	683b      	ldr	r3, [r7, #0]
 8011ad2:	695b      	ldr	r3, [r3, #20]
 8011ad4:	019b      	lsls	r3, r3, #6
 8011ad6:	697a      	ldr	r2, [r7, #20]
 8011ad8:	4313      	orrs	r3, r2
 8011ada:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011adc:	687b      	ldr	r3, [r7, #4]
 8011ade:	697a      	ldr	r2, [r7, #20]
 8011ae0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8011ae2:	687b      	ldr	r3, [r7, #4]
 8011ae4:	68fa      	ldr	r2, [r7, #12]
 8011ae6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8011ae8:	683b      	ldr	r3, [r7, #0]
 8011aea:	685a      	ldr	r2, [r3, #4]
 8011aec:	687b      	ldr	r3, [r7, #4]
 8011aee:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011af0:	687b      	ldr	r3, [r7, #4]
 8011af2:	693a      	ldr	r2, [r7, #16]
 8011af4:	621a      	str	r2, [r3, #32]
}
 8011af6:	bf00      	nop
 8011af8:	371c      	adds	r7, #28
 8011afa:	46bd      	mov	sp, r7
 8011afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b00:	4770      	bx	lr
 8011b02:	bf00      	nop
 8011b04:	feff8fff 	.word	0xfeff8fff
 8011b08:	40010000 	.word	0x40010000
 8011b0c:	40010400 	.word	0x40010400
 8011b10:	40014000 	.word	0x40014000
 8011b14:	40014400 	.word	0x40014400
 8011b18:	40014800 	.word	0x40014800

08011b1c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8011b1c:	b480      	push	{r7}
 8011b1e:	b087      	sub	sp, #28
 8011b20:	af00      	add	r7, sp, #0
 8011b22:	6078      	str	r0, [r7, #4]
 8011b24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011b26:	687b      	ldr	r3, [r7, #4]
 8011b28:	6a1b      	ldr	r3, [r3, #32]
 8011b2a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8011b2c:	687b      	ldr	r3, [r7, #4]
 8011b2e:	6a1b      	ldr	r3, [r3, #32]
 8011b30:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8011b34:	687b      	ldr	r3, [r7, #4]
 8011b36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011b38:	687b      	ldr	r3, [r7, #4]
 8011b3a:	685b      	ldr	r3, [r3, #4]
 8011b3c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8011b3e:	687b      	ldr	r3, [r7, #4]
 8011b40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011b42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8011b44:	68fa      	ldr	r2, [r7, #12]
 8011b46:	4b21      	ldr	r3, [pc, #132]	@ (8011bcc <TIM_OC5_SetConfig+0xb0>)
 8011b48:	4013      	ands	r3, r2
 8011b4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8011b4c:	683b      	ldr	r3, [r7, #0]
 8011b4e:	681b      	ldr	r3, [r3, #0]
 8011b50:	68fa      	ldr	r2, [r7, #12]
 8011b52:	4313      	orrs	r3, r2
 8011b54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8011b56:	693b      	ldr	r3, [r7, #16]
 8011b58:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8011b5c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8011b5e:	683b      	ldr	r3, [r7, #0]
 8011b60:	689b      	ldr	r3, [r3, #8]
 8011b62:	041b      	lsls	r3, r3, #16
 8011b64:	693a      	ldr	r2, [r7, #16]
 8011b66:	4313      	orrs	r3, r2
 8011b68:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011b6a:	687b      	ldr	r3, [r7, #4]
 8011b6c:	4a18      	ldr	r2, [pc, #96]	@ (8011bd0 <TIM_OC5_SetConfig+0xb4>)
 8011b6e:	4293      	cmp	r3, r2
 8011b70:	d00f      	beq.n	8011b92 <TIM_OC5_SetConfig+0x76>
 8011b72:	687b      	ldr	r3, [r7, #4]
 8011b74:	4a17      	ldr	r2, [pc, #92]	@ (8011bd4 <TIM_OC5_SetConfig+0xb8>)
 8011b76:	4293      	cmp	r3, r2
 8011b78:	d00b      	beq.n	8011b92 <TIM_OC5_SetConfig+0x76>
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	4a16      	ldr	r2, [pc, #88]	@ (8011bd8 <TIM_OC5_SetConfig+0xbc>)
 8011b7e:	4293      	cmp	r3, r2
 8011b80:	d007      	beq.n	8011b92 <TIM_OC5_SetConfig+0x76>
 8011b82:	687b      	ldr	r3, [r7, #4]
 8011b84:	4a15      	ldr	r2, [pc, #84]	@ (8011bdc <TIM_OC5_SetConfig+0xc0>)
 8011b86:	4293      	cmp	r3, r2
 8011b88:	d003      	beq.n	8011b92 <TIM_OC5_SetConfig+0x76>
 8011b8a:	687b      	ldr	r3, [r7, #4]
 8011b8c:	4a14      	ldr	r2, [pc, #80]	@ (8011be0 <TIM_OC5_SetConfig+0xc4>)
 8011b8e:	4293      	cmp	r3, r2
 8011b90:	d109      	bne.n	8011ba6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8011b92:	697b      	ldr	r3, [r7, #20]
 8011b94:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8011b98:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8011b9a:	683b      	ldr	r3, [r7, #0]
 8011b9c:	695b      	ldr	r3, [r3, #20]
 8011b9e:	021b      	lsls	r3, r3, #8
 8011ba0:	697a      	ldr	r2, [r7, #20]
 8011ba2:	4313      	orrs	r3, r2
 8011ba4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011ba6:	687b      	ldr	r3, [r7, #4]
 8011ba8:	697a      	ldr	r2, [r7, #20]
 8011baa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8011bac:	687b      	ldr	r3, [r7, #4]
 8011bae:	68fa      	ldr	r2, [r7, #12]
 8011bb0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8011bb2:	683b      	ldr	r3, [r7, #0]
 8011bb4:	685a      	ldr	r2, [r3, #4]
 8011bb6:	687b      	ldr	r3, [r7, #4]
 8011bb8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011bba:	687b      	ldr	r3, [r7, #4]
 8011bbc:	693a      	ldr	r2, [r7, #16]
 8011bbe:	621a      	str	r2, [r3, #32]
}
 8011bc0:	bf00      	nop
 8011bc2:	371c      	adds	r7, #28
 8011bc4:	46bd      	mov	sp, r7
 8011bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bca:	4770      	bx	lr
 8011bcc:	fffeff8f 	.word	0xfffeff8f
 8011bd0:	40010000 	.word	0x40010000
 8011bd4:	40010400 	.word	0x40010400
 8011bd8:	40014000 	.word	0x40014000
 8011bdc:	40014400 	.word	0x40014400
 8011be0:	40014800 	.word	0x40014800

08011be4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8011be4:	b480      	push	{r7}
 8011be6:	b087      	sub	sp, #28
 8011be8:	af00      	add	r7, sp, #0
 8011bea:	6078      	str	r0, [r7, #4]
 8011bec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011bee:	687b      	ldr	r3, [r7, #4]
 8011bf0:	6a1b      	ldr	r3, [r3, #32]
 8011bf2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8011bf4:	687b      	ldr	r3, [r7, #4]
 8011bf6:	6a1b      	ldr	r3, [r3, #32]
 8011bf8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8011bfc:	687b      	ldr	r3, [r7, #4]
 8011bfe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011c00:	687b      	ldr	r3, [r7, #4]
 8011c02:	685b      	ldr	r3, [r3, #4]
 8011c04:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8011c06:	687b      	ldr	r3, [r7, #4]
 8011c08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011c0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8011c0c:	68fa      	ldr	r2, [r7, #12]
 8011c0e:	4b22      	ldr	r3, [pc, #136]	@ (8011c98 <TIM_OC6_SetConfig+0xb4>)
 8011c10:	4013      	ands	r3, r2
 8011c12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011c14:	683b      	ldr	r3, [r7, #0]
 8011c16:	681b      	ldr	r3, [r3, #0]
 8011c18:	021b      	lsls	r3, r3, #8
 8011c1a:	68fa      	ldr	r2, [r7, #12]
 8011c1c:	4313      	orrs	r3, r2
 8011c1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8011c20:	693b      	ldr	r3, [r7, #16]
 8011c22:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8011c26:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8011c28:	683b      	ldr	r3, [r7, #0]
 8011c2a:	689b      	ldr	r3, [r3, #8]
 8011c2c:	051b      	lsls	r3, r3, #20
 8011c2e:	693a      	ldr	r2, [r7, #16]
 8011c30:	4313      	orrs	r3, r2
 8011c32:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011c34:	687b      	ldr	r3, [r7, #4]
 8011c36:	4a19      	ldr	r2, [pc, #100]	@ (8011c9c <TIM_OC6_SetConfig+0xb8>)
 8011c38:	4293      	cmp	r3, r2
 8011c3a:	d00f      	beq.n	8011c5c <TIM_OC6_SetConfig+0x78>
 8011c3c:	687b      	ldr	r3, [r7, #4]
 8011c3e:	4a18      	ldr	r2, [pc, #96]	@ (8011ca0 <TIM_OC6_SetConfig+0xbc>)
 8011c40:	4293      	cmp	r3, r2
 8011c42:	d00b      	beq.n	8011c5c <TIM_OC6_SetConfig+0x78>
 8011c44:	687b      	ldr	r3, [r7, #4]
 8011c46:	4a17      	ldr	r2, [pc, #92]	@ (8011ca4 <TIM_OC6_SetConfig+0xc0>)
 8011c48:	4293      	cmp	r3, r2
 8011c4a:	d007      	beq.n	8011c5c <TIM_OC6_SetConfig+0x78>
 8011c4c:	687b      	ldr	r3, [r7, #4]
 8011c4e:	4a16      	ldr	r2, [pc, #88]	@ (8011ca8 <TIM_OC6_SetConfig+0xc4>)
 8011c50:	4293      	cmp	r3, r2
 8011c52:	d003      	beq.n	8011c5c <TIM_OC6_SetConfig+0x78>
 8011c54:	687b      	ldr	r3, [r7, #4]
 8011c56:	4a15      	ldr	r2, [pc, #84]	@ (8011cac <TIM_OC6_SetConfig+0xc8>)
 8011c58:	4293      	cmp	r3, r2
 8011c5a:	d109      	bne.n	8011c70 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8011c5c:	697b      	ldr	r3, [r7, #20]
 8011c5e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8011c62:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8011c64:	683b      	ldr	r3, [r7, #0]
 8011c66:	695b      	ldr	r3, [r3, #20]
 8011c68:	029b      	lsls	r3, r3, #10
 8011c6a:	697a      	ldr	r2, [r7, #20]
 8011c6c:	4313      	orrs	r3, r2
 8011c6e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011c70:	687b      	ldr	r3, [r7, #4]
 8011c72:	697a      	ldr	r2, [r7, #20]
 8011c74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8011c76:	687b      	ldr	r3, [r7, #4]
 8011c78:	68fa      	ldr	r2, [r7, #12]
 8011c7a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8011c7c:	683b      	ldr	r3, [r7, #0]
 8011c7e:	685a      	ldr	r2, [r3, #4]
 8011c80:	687b      	ldr	r3, [r7, #4]
 8011c82:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011c84:	687b      	ldr	r3, [r7, #4]
 8011c86:	693a      	ldr	r2, [r7, #16]
 8011c88:	621a      	str	r2, [r3, #32]
}
 8011c8a:	bf00      	nop
 8011c8c:	371c      	adds	r7, #28
 8011c8e:	46bd      	mov	sp, r7
 8011c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c94:	4770      	bx	lr
 8011c96:	bf00      	nop
 8011c98:	feff8fff 	.word	0xfeff8fff
 8011c9c:	40010000 	.word	0x40010000
 8011ca0:	40010400 	.word	0x40010400
 8011ca4:	40014000 	.word	0x40014000
 8011ca8:	40014400 	.word	0x40014400
 8011cac:	40014800 	.word	0x40014800

08011cb0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8011cb0:	b480      	push	{r7}
 8011cb2:	b087      	sub	sp, #28
 8011cb4:	af00      	add	r7, sp, #0
 8011cb6:	60f8      	str	r0, [r7, #12]
 8011cb8:	60b9      	str	r1, [r7, #8]
 8011cba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8011cbc:	68fb      	ldr	r3, [r7, #12]
 8011cbe:	6a1b      	ldr	r3, [r3, #32]
 8011cc0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8011cc2:	68fb      	ldr	r3, [r7, #12]
 8011cc4:	6a1b      	ldr	r3, [r3, #32]
 8011cc6:	f023 0201 	bic.w	r2, r3, #1
 8011cca:	68fb      	ldr	r3, [r7, #12]
 8011ccc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8011cce:	68fb      	ldr	r3, [r7, #12]
 8011cd0:	699b      	ldr	r3, [r3, #24]
 8011cd2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8011cd4:	693b      	ldr	r3, [r7, #16]
 8011cd6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8011cda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8011cdc:	687b      	ldr	r3, [r7, #4]
 8011cde:	011b      	lsls	r3, r3, #4
 8011ce0:	693a      	ldr	r2, [r7, #16]
 8011ce2:	4313      	orrs	r3, r2
 8011ce4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8011ce6:	697b      	ldr	r3, [r7, #20]
 8011ce8:	f023 030a 	bic.w	r3, r3, #10
 8011cec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8011cee:	697a      	ldr	r2, [r7, #20]
 8011cf0:	68bb      	ldr	r3, [r7, #8]
 8011cf2:	4313      	orrs	r3, r2
 8011cf4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8011cf6:	68fb      	ldr	r3, [r7, #12]
 8011cf8:	693a      	ldr	r2, [r7, #16]
 8011cfa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8011cfc:	68fb      	ldr	r3, [r7, #12]
 8011cfe:	697a      	ldr	r2, [r7, #20]
 8011d00:	621a      	str	r2, [r3, #32]
}
 8011d02:	bf00      	nop
 8011d04:	371c      	adds	r7, #28
 8011d06:	46bd      	mov	sp, r7
 8011d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d0c:	4770      	bx	lr

08011d0e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8011d0e:	b480      	push	{r7}
 8011d10:	b087      	sub	sp, #28
 8011d12:	af00      	add	r7, sp, #0
 8011d14:	60f8      	str	r0, [r7, #12]
 8011d16:	60b9      	str	r1, [r7, #8]
 8011d18:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8011d1a:	68fb      	ldr	r3, [r7, #12]
 8011d1c:	6a1b      	ldr	r3, [r3, #32]
 8011d1e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8011d20:	68fb      	ldr	r3, [r7, #12]
 8011d22:	6a1b      	ldr	r3, [r3, #32]
 8011d24:	f023 0210 	bic.w	r2, r3, #16
 8011d28:	68fb      	ldr	r3, [r7, #12]
 8011d2a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8011d2c:	68fb      	ldr	r3, [r7, #12]
 8011d2e:	699b      	ldr	r3, [r3, #24]
 8011d30:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8011d32:	693b      	ldr	r3, [r7, #16]
 8011d34:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8011d38:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8011d3a:	687b      	ldr	r3, [r7, #4]
 8011d3c:	031b      	lsls	r3, r3, #12
 8011d3e:	693a      	ldr	r2, [r7, #16]
 8011d40:	4313      	orrs	r3, r2
 8011d42:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8011d44:	697b      	ldr	r3, [r7, #20]
 8011d46:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8011d4a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8011d4c:	68bb      	ldr	r3, [r7, #8]
 8011d4e:	011b      	lsls	r3, r3, #4
 8011d50:	697a      	ldr	r2, [r7, #20]
 8011d52:	4313      	orrs	r3, r2
 8011d54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8011d56:	68fb      	ldr	r3, [r7, #12]
 8011d58:	693a      	ldr	r2, [r7, #16]
 8011d5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8011d5c:	68fb      	ldr	r3, [r7, #12]
 8011d5e:	697a      	ldr	r2, [r7, #20]
 8011d60:	621a      	str	r2, [r3, #32]
}
 8011d62:	bf00      	nop
 8011d64:	371c      	adds	r7, #28
 8011d66:	46bd      	mov	sp, r7
 8011d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d6c:	4770      	bx	lr
	...

08011d70 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8011d70:	b480      	push	{r7}
 8011d72:	b085      	sub	sp, #20
 8011d74:	af00      	add	r7, sp, #0
 8011d76:	6078      	str	r0, [r7, #4]
 8011d78:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8011d7a:	687b      	ldr	r3, [r7, #4]
 8011d7c:	689b      	ldr	r3, [r3, #8]
 8011d7e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8011d80:	68fa      	ldr	r2, [r7, #12]
 8011d82:	4b09      	ldr	r3, [pc, #36]	@ (8011da8 <TIM_ITRx_SetConfig+0x38>)
 8011d84:	4013      	ands	r3, r2
 8011d86:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8011d88:	683a      	ldr	r2, [r7, #0]
 8011d8a:	68fb      	ldr	r3, [r7, #12]
 8011d8c:	4313      	orrs	r3, r2
 8011d8e:	f043 0307 	orr.w	r3, r3, #7
 8011d92:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8011d94:	687b      	ldr	r3, [r7, #4]
 8011d96:	68fa      	ldr	r2, [r7, #12]
 8011d98:	609a      	str	r2, [r3, #8]
}
 8011d9a:	bf00      	nop
 8011d9c:	3714      	adds	r7, #20
 8011d9e:	46bd      	mov	sp, r7
 8011da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011da4:	4770      	bx	lr
 8011da6:	bf00      	nop
 8011da8:	ffcfff8f 	.word	0xffcfff8f

08011dac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8011dac:	b480      	push	{r7}
 8011dae:	b087      	sub	sp, #28
 8011db0:	af00      	add	r7, sp, #0
 8011db2:	60f8      	str	r0, [r7, #12]
 8011db4:	60b9      	str	r1, [r7, #8]
 8011db6:	607a      	str	r2, [r7, #4]
 8011db8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8011dba:	68fb      	ldr	r3, [r7, #12]
 8011dbc:	689b      	ldr	r3, [r3, #8]
 8011dbe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8011dc0:	697b      	ldr	r3, [r7, #20]
 8011dc2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8011dc6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8011dc8:	683b      	ldr	r3, [r7, #0]
 8011dca:	021a      	lsls	r2, r3, #8
 8011dcc:	687b      	ldr	r3, [r7, #4]
 8011dce:	431a      	orrs	r2, r3
 8011dd0:	68bb      	ldr	r3, [r7, #8]
 8011dd2:	4313      	orrs	r3, r2
 8011dd4:	697a      	ldr	r2, [r7, #20]
 8011dd6:	4313      	orrs	r3, r2
 8011dd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8011dda:	68fb      	ldr	r3, [r7, #12]
 8011ddc:	697a      	ldr	r2, [r7, #20]
 8011dde:	609a      	str	r2, [r3, #8]
}
 8011de0:	bf00      	nop
 8011de2:	371c      	adds	r7, #28
 8011de4:	46bd      	mov	sp, r7
 8011de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dea:	4770      	bx	lr

08011dec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8011dec:	b480      	push	{r7}
 8011dee:	b087      	sub	sp, #28
 8011df0:	af00      	add	r7, sp, #0
 8011df2:	60f8      	str	r0, [r7, #12]
 8011df4:	60b9      	str	r1, [r7, #8]
 8011df6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8011df8:	68bb      	ldr	r3, [r7, #8]
 8011dfa:	f003 031f 	and.w	r3, r3, #31
 8011dfe:	2201      	movs	r2, #1
 8011e00:	fa02 f303 	lsl.w	r3, r2, r3
 8011e04:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8011e06:	68fb      	ldr	r3, [r7, #12]
 8011e08:	6a1a      	ldr	r2, [r3, #32]
 8011e0a:	697b      	ldr	r3, [r7, #20]
 8011e0c:	43db      	mvns	r3, r3
 8011e0e:	401a      	ands	r2, r3
 8011e10:	68fb      	ldr	r3, [r7, #12]
 8011e12:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8011e14:	68fb      	ldr	r3, [r7, #12]
 8011e16:	6a1a      	ldr	r2, [r3, #32]
 8011e18:	68bb      	ldr	r3, [r7, #8]
 8011e1a:	f003 031f 	and.w	r3, r3, #31
 8011e1e:	6879      	ldr	r1, [r7, #4]
 8011e20:	fa01 f303 	lsl.w	r3, r1, r3
 8011e24:	431a      	orrs	r2, r3
 8011e26:	68fb      	ldr	r3, [r7, #12]
 8011e28:	621a      	str	r2, [r3, #32]
}
 8011e2a:	bf00      	nop
 8011e2c:	371c      	adds	r7, #28
 8011e2e:	46bd      	mov	sp, r7
 8011e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e34:	4770      	bx	lr
	...

08011e38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8011e38:	b480      	push	{r7}
 8011e3a:	b085      	sub	sp, #20
 8011e3c:	af00      	add	r7, sp, #0
 8011e3e:	6078      	str	r0, [r7, #4]
 8011e40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8011e42:	687b      	ldr	r3, [r7, #4]
 8011e44:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8011e48:	2b01      	cmp	r3, #1
 8011e4a:	d101      	bne.n	8011e50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8011e4c:	2302      	movs	r3, #2
 8011e4e:	e06d      	b.n	8011f2c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8011e50:	687b      	ldr	r3, [r7, #4]
 8011e52:	2201      	movs	r2, #1
 8011e54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011e58:	687b      	ldr	r3, [r7, #4]
 8011e5a:	2202      	movs	r2, #2
 8011e5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8011e60:	687b      	ldr	r3, [r7, #4]
 8011e62:	681b      	ldr	r3, [r3, #0]
 8011e64:	685b      	ldr	r3, [r3, #4]
 8011e66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8011e68:	687b      	ldr	r3, [r7, #4]
 8011e6a:	681b      	ldr	r3, [r3, #0]
 8011e6c:	689b      	ldr	r3, [r3, #8]
 8011e6e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8011e70:	687b      	ldr	r3, [r7, #4]
 8011e72:	681b      	ldr	r3, [r3, #0]
 8011e74:	4a30      	ldr	r2, [pc, #192]	@ (8011f38 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8011e76:	4293      	cmp	r3, r2
 8011e78:	d004      	beq.n	8011e84 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8011e7a:	687b      	ldr	r3, [r7, #4]
 8011e7c:	681b      	ldr	r3, [r3, #0]
 8011e7e:	4a2f      	ldr	r2, [pc, #188]	@ (8011f3c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8011e80:	4293      	cmp	r3, r2
 8011e82:	d108      	bne.n	8011e96 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8011e84:	68fb      	ldr	r3, [r7, #12]
 8011e86:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8011e8a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8011e8c:	683b      	ldr	r3, [r7, #0]
 8011e8e:	685b      	ldr	r3, [r3, #4]
 8011e90:	68fa      	ldr	r2, [r7, #12]
 8011e92:	4313      	orrs	r3, r2
 8011e94:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8011e96:	68fb      	ldr	r3, [r7, #12]
 8011e98:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011e9c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8011e9e:	683b      	ldr	r3, [r7, #0]
 8011ea0:	681b      	ldr	r3, [r3, #0]
 8011ea2:	68fa      	ldr	r2, [r7, #12]
 8011ea4:	4313      	orrs	r3, r2
 8011ea6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	681b      	ldr	r3, [r3, #0]
 8011eac:	68fa      	ldr	r2, [r7, #12]
 8011eae:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	681b      	ldr	r3, [r3, #0]
 8011eb4:	4a20      	ldr	r2, [pc, #128]	@ (8011f38 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8011eb6:	4293      	cmp	r3, r2
 8011eb8:	d022      	beq.n	8011f00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8011eba:	687b      	ldr	r3, [r7, #4]
 8011ebc:	681b      	ldr	r3, [r3, #0]
 8011ebe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011ec2:	d01d      	beq.n	8011f00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8011ec4:	687b      	ldr	r3, [r7, #4]
 8011ec6:	681b      	ldr	r3, [r3, #0]
 8011ec8:	4a1d      	ldr	r2, [pc, #116]	@ (8011f40 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8011eca:	4293      	cmp	r3, r2
 8011ecc:	d018      	beq.n	8011f00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8011ece:	687b      	ldr	r3, [r7, #4]
 8011ed0:	681b      	ldr	r3, [r3, #0]
 8011ed2:	4a1c      	ldr	r2, [pc, #112]	@ (8011f44 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8011ed4:	4293      	cmp	r3, r2
 8011ed6:	d013      	beq.n	8011f00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8011ed8:	687b      	ldr	r3, [r7, #4]
 8011eda:	681b      	ldr	r3, [r3, #0]
 8011edc:	4a1a      	ldr	r2, [pc, #104]	@ (8011f48 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8011ede:	4293      	cmp	r3, r2
 8011ee0:	d00e      	beq.n	8011f00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8011ee2:	687b      	ldr	r3, [r7, #4]
 8011ee4:	681b      	ldr	r3, [r3, #0]
 8011ee6:	4a15      	ldr	r2, [pc, #84]	@ (8011f3c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8011ee8:	4293      	cmp	r3, r2
 8011eea:	d009      	beq.n	8011f00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8011eec:	687b      	ldr	r3, [r7, #4]
 8011eee:	681b      	ldr	r3, [r3, #0]
 8011ef0:	4a16      	ldr	r2, [pc, #88]	@ (8011f4c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8011ef2:	4293      	cmp	r3, r2
 8011ef4:	d004      	beq.n	8011f00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8011ef6:	687b      	ldr	r3, [r7, #4]
 8011ef8:	681b      	ldr	r3, [r3, #0]
 8011efa:	4a15      	ldr	r2, [pc, #84]	@ (8011f50 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8011efc:	4293      	cmp	r3, r2
 8011efe:	d10c      	bne.n	8011f1a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8011f00:	68bb      	ldr	r3, [r7, #8]
 8011f02:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8011f06:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8011f08:	683b      	ldr	r3, [r7, #0]
 8011f0a:	689b      	ldr	r3, [r3, #8]
 8011f0c:	68ba      	ldr	r2, [r7, #8]
 8011f0e:	4313      	orrs	r3, r2
 8011f10:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8011f12:	687b      	ldr	r3, [r7, #4]
 8011f14:	681b      	ldr	r3, [r3, #0]
 8011f16:	68ba      	ldr	r2, [r7, #8]
 8011f18:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8011f1a:	687b      	ldr	r3, [r7, #4]
 8011f1c:	2201      	movs	r2, #1
 8011f1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8011f22:	687b      	ldr	r3, [r7, #4]
 8011f24:	2200      	movs	r2, #0
 8011f26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8011f2a:	2300      	movs	r3, #0
}
 8011f2c:	4618      	mov	r0, r3
 8011f2e:	3714      	adds	r7, #20
 8011f30:	46bd      	mov	sp, r7
 8011f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f36:	4770      	bx	lr
 8011f38:	40010000 	.word	0x40010000
 8011f3c:	40010400 	.word	0x40010400
 8011f40:	40000400 	.word	0x40000400
 8011f44:	40000800 	.word	0x40000800
 8011f48:	40000c00 	.word	0x40000c00
 8011f4c:	40001800 	.word	0x40001800
 8011f50:	40014000 	.word	0x40014000

08011f54 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8011f54:	b480      	push	{r7}
 8011f56:	b085      	sub	sp, #20
 8011f58:	af00      	add	r7, sp, #0
 8011f5a:	6078      	str	r0, [r7, #4]
 8011f5c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8011f5e:	2300      	movs	r3, #0
 8011f60:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 8011f62:	687b      	ldr	r3, [r7, #4]
 8011f64:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8011f68:	2b01      	cmp	r3, #1
 8011f6a:	d101      	bne.n	8011f70 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8011f6c:	2302      	movs	r3, #2
 8011f6e:	e065      	b.n	801203c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8011f70:	687b      	ldr	r3, [r7, #4]
 8011f72:	2201      	movs	r2, #1
 8011f74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8011f78:	68fb      	ldr	r3, [r7, #12]
 8011f7a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8011f7e:	683b      	ldr	r3, [r7, #0]
 8011f80:	68db      	ldr	r3, [r3, #12]
 8011f82:	4313      	orrs	r3, r2
 8011f84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8011f86:	68fb      	ldr	r3, [r7, #12]
 8011f88:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8011f8c:	683b      	ldr	r3, [r7, #0]
 8011f8e:	689b      	ldr	r3, [r3, #8]
 8011f90:	4313      	orrs	r3, r2
 8011f92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8011f94:	68fb      	ldr	r3, [r7, #12]
 8011f96:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8011f9a:	683b      	ldr	r3, [r7, #0]
 8011f9c:	685b      	ldr	r3, [r3, #4]
 8011f9e:	4313      	orrs	r3, r2
 8011fa0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8011fa2:	68fb      	ldr	r3, [r7, #12]
 8011fa4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8011fa8:	683b      	ldr	r3, [r7, #0]
 8011faa:	681b      	ldr	r3, [r3, #0]
 8011fac:	4313      	orrs	r3, r2
 8011fae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8011fb0:	68fb      	ldr	r3, [r7, #12]
 8011fb2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8011fb6:	683b      	ldr	r3, [r7, #0]
 8011fb8:	691b      	ldr	r3, [r3, #16]
 8011fba:	4313      	orrs	r3, r2
 8011fbc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8011fbe:	68fb      	ldr	r3, [r7, #12]
 8011fc0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8011fc4:	683b      	ldr	r3, [r7, #0]
 8011fc6:	695b      	ldr	r3, [r3, #20]
 8011fc8:	4313      	orrs	r3, r2
 8011fca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8011fcc:	68fb      	ldr	r3, [r7, #12]
 8011fce:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8011fd2:	683b      	ldr	r3, [r7, #0]
 8011fd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011fd6:	4313      	orrs	r3, r2
 8011fd8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8011fda:	68fb      	ldr	r3, [r7, #12]
 8011fdc:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8011fe0:	683b      	ldr	r3, [r7, #0]
 8011fe2:	699b      	ldr	r3, [r3, #24]
 8011fe4:	041b      	lsls	r3, r3, #16
 8011fe6:	4313      	orrs	r3, r2
 8011fe8:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8011fea:	687b      	ldr	r3, [r7, #4]
 8011fec:	681b      	ldr	r3, [r3, #0]
 8011fee:	4a16      	ldr	r2, [pc, #88]	@ (8012048 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8011ff0:	4293      	cmp	r3, r2
 8011ff2:	d004      	beq.n	8011ffe <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8011ff4:	687b      	ldr	r3, [r7, #4]
 8011ff6:	681b      	ldr	r3, [r3, #0]
 8011ff8:	4a14      	ldr	r2, [pc, #80]	@ (801204c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8011ffa:	4293      	cmp	r3, r2
 8011ffc:	d115      	bne.n	801202a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8011ffe:	68fb      	ldr	r3, [r7, #12]
 8012000:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8012004:	683b      	ldr	r3, [r7, #0]
 8012006:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012008:	051b      	lsls	r3, r3, #20
 801200a:	4313      	orrs	r3, r2
 801200c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 801200e:	68fb      	ldr	r3, [r7, #12]
 8012010:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8012014:	683b      	ldr	r3, [r7, #0]
 8012016:	69db      	ldr	r3, [r3, #28]
 8012018:	4313      	orrs	r3, r2
 801201a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 801201c:	68fb      	ldr	r3, [r7, #12]
 801201e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8012022:	683b      	ldr	r3, [r7, #0]
 8012024:	6a1b      	ldr	r3, [r3, #32]
 8012026:	4313      	orrs	r3, r2
 8012028:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 801202a:	687b      	ldr	r3, [r7, #4]
 801202c:	681b      	ldr	r3, [r3, #0]
 801202e:	68fa      	ldr	r2, [r7, #12]
 8012030:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8012032:	687b      	ldr	r3, [r7, #4]
 8012034:	2200      	movs	r2, #0
 8012036:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 801203a:	2300      	movs	r3, #0
}
 801203c:	4618      	mov	r0, r3
 801203e:	3714      	adds	r7, #20
 8012040:	46bd      	mov	sp, r7
 8012042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012046:	4770      	bx	lr
 8012048:	40010000 	.word	0x40010000
 801204c:	40010400 	.word	0x40010400

08012050 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8012050:	b480      	push	{r7}
 8012052:	b083      	sub	sp, #12
 8012054:	af00      	add	r7, sp, #0
 8012056:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8012058:	bf00      	nop
 801205a:	370c      	adds	r7, #12
 801205c:	46bd      	mov	sp, r7
 801205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012062:	4770      	bx	lr

08012064 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8012064:	b480      	push	{r7}
 8012066:	b083      	sub	sp, #12
 8012068:	af00      	add	r7, sp, #0
 801206a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 801206c:	bf00      	nop
 801206e:	370c      	adds	r7, #12
 8012070:	46bd      	mov	sp, r7
 8012072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012076:	4770      	bx	lr

08012078 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8012078:	b480      	push	{r7}
 801207a:	b083      	sub	sp, #12
 801207c:	af00      	add	r7, sp, #0
 801207e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8012080:	bf00      	nop
 8012082:	370c      	adds	r7, #12
 8012084:	46bd      	mov	sp, r7
 8012086:	f85d 7b04 	ldr.w	r7, [sp], #4
 801208a:	4770      	bx	lr

0801208c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801208c:	b580      	push	{r7, lr}
 801208e:	b082      	sub	sp, #8
 8012090:	af00      	add	r7, sp, #0
 8012092:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8012094:	687b      	ldr	r3, [r7, #4]
 8012096:	2b00      	cmp	r3, #0
 8012098:	d101      	bne.n	801209e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801209a:	2301      	movs	r3, #1
 801209c:	e042      	b.n	8012124 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801209e:	687b      	ldr	r3, [r7, #4]
 80120a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80120a4:	2b00      	cmp	r3, #0
 80120a6:	d106      	bne.n	80120b6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80120a8:	687b      	ldr	r3, [r7, #4]
 80120aa:	2200      	movs	r2, #0
 80120ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80120b0:	6878      	ldr	r0, [r7, #4]
 80120b2:	f7f0 fdab 	bl	8002c0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80120b6:	687b      	ldr	r3, [r7, #4]
 80120b8:	2224      	movs	r2, #36	@ 0x24
 80120ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80120be:	687b      	ldr	r3, [r7, #4]
 80120c0:	681b      	ldr	r3, [r3, #0]
 80120c2:	681a      	ldr	r2, [r3, #0]
 80120c4:	687b      	ldr	r3, [r7, #4]
 80120c6:	681b      	ldr	r3, [r3, #0]
 80120c8:	f022 0201 	bic.w	r2, r2, #1
 80120cc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80120ce:	687b      	ldr	r3, [r7, #4]
 80120d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80120d2:	2b00      	cmp	r3, #0
 80120d4:	d002      	beq.n	80120dc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80120d6:	6878      	ldr	r0, [r7, #4]
 80120d8:	f001 fa6a 	bl	80135b0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80120dc:	6878      	ldr	r0, [r7, #4]
 80120de:	f000 fcff 	bl	8012ae0 <UART_SetConfig>
 80120e2:	4603      	mov	r3, r0
 80120e4:	2b01      	cmp	r3, #1
 80120e6:	d101      	bne.n	80120ec <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80120e8:	2301      	movs	r3, #1
 80120ea:	e01b      	b.n	8012124 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80120ec:	687b      	ldr	r3, [r7, #4]
 80120ee:	681b      	ldr	r3, [r3, #0]
 80120f0:	685a      	ldr	r2, [r3, #4]
 80120f2:	687b      	ldr	r3, [r7, #4]
 80120f4:	681b      	ldr	r3, [r3, #0]
 80120f6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80120fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80120fc:	687b      	ldr	r3, [r7, #4]
 80120fe:	681b      	ldr	r3, [r3, #0]
 8012100:	689a      	ldr	r2, [r3, #8]
 8012102:	687b      	ldr	r3, [r7, #4]
 8012104:	681b      	ldr	r3, [r3, #0]
 8012106:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 801210a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 801210c:	687b      	ldr	r3, [r7, #4]
 801210e:	681b      	ldr	r3, [r3, #0]
 8012110:	681a      	ldr	r2, [r3, #0]
 8012112:	687b      	ldr	r3, [r7, #4]
 8012114:	681b      	ldr	r3, [r3, #0]
 8012116:	f042 0201 	orr.w	r2, r2, #1
 801211a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 801211c:	6878      	ldr	r0, [r7, #4]
 801211e:	f001 fae9 	bl	80136f4 <UART_CheckIdleState>
 8012122:	4603      	mov	r3, r0
}
 8012124:	4618      	mov	r0, r3
 8012126:	3708      	adds	r7, #8
 8012128:	46bd      	mov	sp, r7
 801212a:	bd80      	pop	{r7, pc}

0801212c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801212c:	b580      	push	{r7, lr}
 801212e:	b08a      	sub	sp, #40	@ 0x28
 8012130:	af02      	add	r7, sp, #8
 8012132:	60f8      	str	r0, [r7, #12]
 8012134:	60b9      	str	r1, [r7, #8]
 8012136:	603b      	str	r3, [r7, #0]
 8012138:	4613      	mov	r3, r2
 801213a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801213c:	68fb      	ldr	r3, [r7, #12]
 801213e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8012142:	2b20      	cmp	r3, #32
 8012144:	d17b      	bne.n	801223e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8012146:	68bb      	ldr	r3, [r7, #8]
 8012148:	2b00      	cmp	r3, #0
 801214a:	d002      	beq.n	8012152 <HAL_UART_Transmit+0x26>
 801214c:	88fb      	ldrh	r3, [r7, #6]
 801214e:	2b00      	cmp	r3, #0
 8012150:	d101      	bne.n	8012156 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8012152:	2301      	movs	r3, #1
 8012154:	e074      	b.n	8012240 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012156:	68fb      	ldr	r3, [r7, #12]
 8012158:	2200      	movs	r2, #0
 801215a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801215e:	68fb      	ldr	r3, [r7, #12]
 8012160:	2221      	movs	r2, #33	@ 0x21
 8012162:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8012166:	f7f1 f9b5 	bl	80034d4 <HAL_GetTick>
 801216a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 801216c:	68fb      	ldr	r3, [r7, #12]
 801216e:	88fa      	ldrh	r2, [r7, #6]
 8012170:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8012174:	68fb      	ldr	r3, [r7, #12]
 8012176:	88fa      	ldrh	r2, [r7, #6]
 8012178:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801217c:	68fb      	ldr	r3, [r7, #12]
 801217e:	689b      	ldr	r3, [r3, #8]
 8012180:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8012184:	d108      	bne.n	8012198 <HAL_UART_Transmit+0x6c>
 8012186:	68fb      	ldr	r3, [r7, #12]
 8012188:	691b      	ldr	r3, [r3, #16]
 801218a:	2b00      	cmp	r3, #0
 801218c:	d104      	bne.n	8012198 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 801218e:	2300      	movs	r3, #0
 8012190:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8012192:	68bb      	ldr	r3, [r7, #8]
 8012194:	61bb      	str	r3, [r7, #24]
 8012196:	e003      	b.n	80121a0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8012198:	68bb      	ldr	r3, [r7, #8]
 801219a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801219c:	2300      	movs	r3, #0
 801219e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80121a0:	e030      	b.n	8012204 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80121a2:	683b      	ldr	r3, [r7, #0]
 80121a4:	9300      	str	r3, [sp, #0]
 80121a6:	697b      	ldr	r3, [r7, #20]
 80121a8:	2200      	movs	r2, #0
 80121aa:	2180      	movs	r1, #128	@ 0x80
 80121ac:	68f8      	ldr	r0, [r7, #12]
 80121ae:	f001 fb4b 	bl	8013848 <UART_WaitOnFlagUntilTimeout>
 80121b2:	4603      	mov	r3, r0
 80121b4:	2b00      	cmp	r3, #0
 80121b6:	d005      	beq.n	80121c4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80121b8:	68fb      	ldr	r3, [r7, #12]
 80121ba:	2220      	movs	r2, #32
 80121bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80121c0:	2303      	movs	r3, #3
 80121c2:	e03d      	b.n	8012240 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80121c4:	69fb      	ldr	r3, [r7, #28]
 80121c6:	2b00      	cmp	r3, #0
 80121c8:	d10b      	bne.n	80121e2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80121ca:	69bb      	ldr	r3, [r7, #24]
 80121cc:	881b      	ldrh	r3, [r3, #0]
 80121ce:	461a      	mov	r2, r3
 80121d0:	68fb      	ldr	r3, [r7, #12]
 80121d2:	681b      	ldr	r3, [r3, #0]
 80121d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80121d8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80121da:	69bb      	ldr	r3, [r7, #24]
 80121dc:	3302      	adds	r3, #2
 80121de:	61bb      	str	r3, [r7, #24]
 80121e0:	e007      	b.n	80121f2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80121e2:	69fb      	ldr	r3, [r7, #28]
 80121e4:	781a      	ldrb	r2, [r3, #0]
 80121e6:	68fb      	ldr	r3, [r7, #12]
 80121e8:	681b      	ldr	r3, [r3, #0]
 80121ea:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80121ec:	69fb      	ldr	r3, [r7, #28]
 80121ee:	3301      	adds	r3, #1
 80121f0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80121f2:	68fb      	ldr	r3, [r7, #12]
 80121f4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80121f8:	b29b      	uxth	r3, r3
 80121fa:	3b01      	subs	r3, #1
 80121fc:	b29a      	uxth	r2, r3
 80121fe:	68fb      	ldr	r3, [r7, #12]
 8012200:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8012204:	68fb      	ldr	r3, [r7, #12]
 8012206:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 801220a:	b29b      	uxth	r3, r3
 801220c:	2b00      	cmp	r3, #0
 801220e:	d1c8      	bne.n	80121a2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8012210:	683b      	ldr	r3, [r7, #0]
 8012212:	9300      	str	r3, [sp, #0]
 8012214:	697b      	ldr	r3, [r7, #20]
 8012216:	2200      	movs	r2, #0
 8012218:	2140      	movs	r1, #64	@ 0x40
 801221a:	68f8      	ldr	r0, [r7, #12]
 801221c:	f001 fb14 	bl	8013848 <UART_WaitOnFlagUntilTimeout>
 8012220:	4603      	mov	r3, r0
 8012222:	2b00      	cmp	r3, #0
 8012224:	d005      	beq.n	8012232 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8012226:	68fb      	ldr	r3, [r7, #12]
 8012228:	2220      	movs	r2, #32
 801222a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 801222e:	2303      	movs	r3, #3
 8012230:	e006      	b.n	8012240 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8012232:	68fb      	ldr	r3, [r7, #12]
 8012234:	2220      	movs	r2, #32
 8012236:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 801223a:	2300      	movs	r3, #0
 801223c:	e000      	b.n	8012240 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 801223e:	2302      	movs	r3, #2
  }
}
 8012240:	4618      	mov	r0, r3
 8012242:	3720      	adds	r7, #32
 8012244:	46bd      	mov	sp, r7
 8012246:	bd80      	pop	{r7, pc}

08012248 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8012248:	b580      	push	{r7, lr}
 801224a:	b08a      	sub	sp, #40	@ 0x28
 801224c:	af00      	add	r7, sp, #0
 801224e:	60f8      	str	r0, [r7, #12]
 8012250:	60b9      	str	r1, [r7, #8]
 8012252:	4613      	mov	r3, r2
 8012254:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8012256:	68fb      	ldr	r3, [r7, #12]
 8012258:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801225c:	2b20      	cmp	r3, #32
 801225e:	d137      	bne.n	80122d0 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8012260:	68bb      	ldr	r3, [r7, #8]
 8012262:	2b00      	cmp	r3, #0
 8012264:	d002      	beq.n	801226c <HAL_UART_Receive_DMA+0x24>
 8012266:	88fb      	ldrh	r3, [r7, #6]
 8012268:	2b00      	cmp	r3, #0
 801226a:	d101      	bne.n	8012270 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 801226c:	2301      	movs	r3, #1
 801226e:	e030      	b.n	80122d2 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012270:	68fb      	ldr	r3, [r7, #12]
 8012272:	2200      	movs	r2, #0
 8012274:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8012276:	68fb      	ldr	r3, [r7, #12]
 8012278:	681b      	ldr	r3, [r3, #0]
 801227a:	4a18      	ldr	r2, [pc, #96]	@ (80122dc <HAL_UART_Receive_DMA+0x94>)
 801227c:	4293      	cmp	r3, r2
 801227e:	d01f      	beq.n	80122c0 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012280:	68fb      	ldr	r3, [r7, #12]
 8012282:	681b      	ldr	r3, [r3, #0]
 8012284:	685b      	ldr	r3, [r3, #4]
 8012286:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801228a:	2b00      	cmp	r3, #0
 801228c:	d018      	beq.n	80122c0 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801228e:	68fb      	ldr	r3, [r7, #12]
 8012290:	681b      	ldr	r3, [r3, #0]
 8012292:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012294:	697b      	ldr	r3, [r7, #20]
 8012296:	e853 3f00 	ldrex	r3, [r3]
 801229a:	613b      	str	r3, [r7, #16]
   return(result);
 801229c:	693b      	ldr	r3, [r7, #16]
 801229e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80122a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80122a4:	68fb      	ldr	r3, [r7, #12]
 80122a6:	681b      	ldr	r3, [r3, #0]
 80122a8:	461a      	mov	r2, r3
 80122aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80122ac:	623b      	str	r3, [r7, #32]
 80122ae:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80122b0:	69f9      	ldr	r1, [r7, #28]
 80122b2:	6a3a      	ldr	r2, [r7, #32]
 80122b4:	e841 2300 	strex	r3, r2, [r1]
 80122b8:	61bb      	str	r3, [r7, #24]
   return(result);
 80122ba:	69bb      	ldr	r3, [r7, #24]
 80122bc:	2b00      	cmp	r3, #0
 80122be:	d1e6      	bne.n	801228e <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80122c0:	88fb      	ldrh	r3, [r7, #6]
 80122c2:	461a      	mov	r2, r3
 80122c4:	68b9      	ldr	r1, [r7, #8]
 80122c6:	68f8      	ldr	r0, [r7, #12]
 80122c8:	f001 fb2c 	bl	8013924 <UART_Start_Receive_DMA>
 80122cc:	4603      	mov	r3, r0
 80122ce:	e000      	b.n	80122d2 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80122d0:	2302      	movs	r3, #2
  }
}
 80122d2:	4618      	mov	r0, r3
 80122d4:	3728      	adds	r7, #40	@ 0x28
 80122d6:	46bd      	mov	sp, r7
 80122d8:	bd80      	pop	{r7, pc}
 80122da:	bf00      	nop
 80122dc:	58000c00 	.word	0x58000c00

080122e0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80122e0:	b580      	push	{r7, lr}
 80122e2:	b0ba      	sub	sp, #232	@ 0xe8
 80122e4:	af00      	add	r7, sp, #0
 80122e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	681b      	ldr	r3, [r3, #0]
 80122ec:	69db      	ldr	r3, [r3, #28]
 80122ee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80122f2:	687b      	ldr	r3, [r7, #4]
 80122f4:	681b      	ldr	r3, [r3, #0]
 80122f6:	681b      	ldr	r3, [r3, #0]
 80122f8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80122fc:	687b      	ldr	r3, [r7, #4]
 80122fe:	681b      	ldr	r3, [r3, #0]
 8012300:	689b      	ldr	r3, [r3, #8]
 8012302:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8012306:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 801230a:	f640 030f 	movw	r3, #2063	@ 0x80f
 801230e:	4013      	ands	r3, r2
 8012310:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8012314:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8012318:	2b00      	cmp	r3, #0
 801231a:	d11b      	bne.n	8012354 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 801231c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012320:	f003 0320 	and.w	r3, r3, #32
 8012324:	2b00      	cmp	r3, #0
 8012326:	d015      	beq.n	8012354 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8012328:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801232c:	f003 0320 	and.w	r3, r3, #32
 8012330:	2b00      	cmp	r3, #0
 8012332:	d105      	bne.n	8012340 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8012334:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8012338:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 801233c:	2b00      	cmp	r3, #0
 801233e:	d009      	beq.n	8012354 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8012340:	687b      	ldr	r3, [r7, #4]
 8012342:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012344:	2b00      	cmp	r3, #0
 8012346:	f000 8393 	beq.w	8012a70 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 801234a:	687b      	ldr	r3, [r7, #4]
 801234c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801234e:	6878      	ldr	r0, [r7, #4]
 8012350:	4798      	blx	r3
      }
      return;
 8012352:	e38d      	b.n	8012a70 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8012354:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8012358:	2b00      	cmp	r3, #0
 801235a:	f000 8123 	beq.w	80125a4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 801235e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8012362:	4b8d      	ldr	r3, [pc, #564]	@ (8012598 <HAL_UART_IRQHandler+0x2b8>)
 8012364:	4013      	ands	r3, r2
 8012366:	2b00      	cmp	r3, #0
 8012368:	d106      	bne.n	8012378 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 801236a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 801236e:	4b8b      	ldr	r3, [pc, #556]	@ (801259c <HAL_UART_IRQHandler+0x2bc>)
 8012370:	4013      	ands	r3, r2
 8012372:	2b00      	cmp	r3, #0
 8012374:	f000 8116 	beq.w	80125a4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8012378:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801237c:	f003 0301 	and.w	r3, r3, #1
 8012380:	2b00      	cmp	r3, #0
 8012382:	d011      	beq.n	80123a8 <HAL_UART_IRQHandler+0xc8>
 8012384:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8012388:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801238c:	2b00      	cmp	r3, #0
 801238e:	d00b      	beq.n	80123a8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8012390:	687b      	ldr	r3, [r7, #4]
 8012392:	681b      	ldr	r3, [r3, #0]
 8012394:	2201      	movs	r2, #1
 8012396:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801239e:	f043 0201 	orr.w	r2, r3, #1
 80123a2:	687b      	ldr	r3, [r7, #4]
 80123a4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80123a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80123ac:	f003 0302 	and.w	r3, r3, #2
 80123b0:	2b00      	cmp	r3, #0
 80123b2:	d011      	beq.n	80123d8 <HAL_UART_IRQHandler+0xf8>
 80123b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80123b8:	f003 0301 	and.w	r3, r3, #1
 80123bc:	2b00      	cmp	r3, #0
 80123be:	d00b      	beq.n	80123d8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80123c0:	687b      	ldr	r3, [r7, #4]
 80123c2:	681b      	ldr	r3, [r3, #0]
 80123c4:	2202      	movs	r2, #2
 80123c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80123c8:	687b      	ldr	r3, [r7, #4]
 80123ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80123ce:	f043 0204 	orr.w	r2, r3, #4
 80123d2:	687b      	ldr	r3, [r7, #4]
 80123d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80123d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80123dc:	f003 0304 	and.w	r3, r3, #4
 80123e0:	2b00      	cmp	r3, #0
 80123e2:	d011      	beq.n	8012408 <HAL_UART_IRQHandler+0x128>
 80123e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80123e8:	f003 0301 	and.w	r3, r3, #1
 80123ec:	2b00      	cmp	r3, #0
 80123ee:	d00b      	beq.n	8012408 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80123f0:	687b      	ldr	r3, [r7, #4]
 80123f2:	681b      	ldr	r3, [r3, #0]
 80123f4:	2204      	movs	r2, #4
 80123f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80123f8:	687b      	ldr	r3, [r7, #4]
 80123fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80123fe:	f043 0202 	orr.w	r2, r3, #2
 8012402:	687b      	ldr	r3, [r7, #4]
 8012404:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8012408:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801240c:	f003 0308 	and.w	r3, r3, #8
 8012410:	2b00      	cmp	r3, #0
 8012412:	d017      	beq.n	8012444 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8012414:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8012418:	f003 0320 	and.w	r3, r3, #32
 801241c:	2b00      	cmp	r3, #0
 801241e:	d105      	bne.n	801242c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8012420:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8012424:	4b5c      	ldr	r3, [pc, #368]	@ (8012598 <HAL_UART_IRQHandler+0x2b8>)
 8012426:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8012428:	2b00      	cmp	r3, #0
 801242a:	d00b      	beq.n	8012444 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	681b      	ldr	r3, [r3, #0]
 8012430:	2208      	movs	r2, #8
 8012432:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8012434:	687b      	ldr	r3, [r7, #4]
 8012436:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801243a:	f043 0208 	orr.w	r2, r3, #8
 801243e:	687b      	ldr	r3, [r7, #4]
 8012440:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8012444:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012448:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801244c:	2b00      	cmp	r3, #0
 801244e:	d012      	beq.n	8012476 <HAL_UART_IRQHandler+0x196>
 8012450:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8012454:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8012458:	2b00      	cmp	r3, #0
 801245a:	d00c      	beq.n	8012476 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801245c:	687b      	ldr	r3, [r7, #4]
 801245e:	681b      	ldr	r3, [r3, #0]
 8012460:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8012464:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8012466:	687b      	ldr	r3, [r7, #4]
 8012468:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801246c:	f043 0220 	orr.w	r2, r3, #32
 8012470:	687b      	ldr	r3, [r7, #4]
 8012472:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8012476:	687b      	ldr	r3, [r7, #4]
 8012478:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801247c:	2b00      	cmp	r3, #0
 801247e:	f000 82f9 	beq.w	8012a74 <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8012482:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012486:	f003 0320 	and.w	r3, r3, #32
 801248a:	2b00      	cmp	r3, #0
 801248c:	d013      	beq.n	80124b6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 801248e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8012492:	f003 0320 	and.w	r3, r3, #32
 8012496:	2b00      	cmp	r3, #0
 8012498:	d105      	bne.n	80124a6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 801249a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801249e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80124a2:	2b00      	cmp	r3, #0
 80124a4:	d007      	beq.n	80124b6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80124a6:	687b      	ldr	r3, [r7, #4]
 80124a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80124aa:	2b00      	cmp	r3, #0
 80124ac:	d003      	beq.n	80124b6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80124ae:	687b      	ldr	r3, [r7, #4]
 80124b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80124b2:	6878      	ldr	r0, [r7, #4]
 80124b4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80124b6:	687b      	ldr	r3, [r7, #4]
 80124b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80124bc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80124c0:	687b      	ldr	r3, [r7, #4]
 80124c2:	681b      	ldr	r3, [r3, #0]
 80124c4:	689b      	ldr	r3, [r3, #8]
 80124c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80124ca:	2b40      	cmp	r3, #64	@ 0x40
 80124cc:	d005      	beq.n	80124da <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80124ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80124d2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80124d6:	2b00      	cmp	r3, #0
 80124d8:	d054      	beq.n	8012584 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80124da:	6878      	ldr	r0, [r7, #4]
 80124dc:	f001 fb0a 	bl	8013af4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80124e0:	687b      	ldr	r3, [r7, #4]
 80124e2:	681b      	ldr	r3, [r3, #0]
 80124e4:	689b      	ldr	r3, [r3, #8]
 80124e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80124ea:	2b40      	cmp	r3, #64	@ 0x40
 80124ec:	d146      	bne.n	801257c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80124ee:	687b      	ldr	r3, [r7, #4]
 80124f0:	681b      	ldr	r3, [r3, #0]
 80124f2:	3308      	adds	r3, #8
 80124f4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80124f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80124fc:	e853 3f00 	ldrex	r3, [r3]
 8012500:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8012504:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8012508:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801250c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8012510:	687b      	ldr	r3, [r7, #4]
 8012512:	681b      	ldr	r3, [r3, #0]
 8012514:	3308      	adds	r3, #8
 8012516:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 801251a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 801251e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012522:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8012526:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 801252a:	e841 2300 	strex	r3, r2, [r1]
 801252e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8012532:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8012536:	2b00      	cmp	r3, #0
 8012538:	d1d9      	bne.n	80124ee <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 801253a:	687b      	ldr	r3, [r7, #4]
 801253c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012540:	2b00      	cmp	r3, #0
 8012542:	d017      	beq.n	8012574 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8012544:	687b      	ldr	r3, [r7, #4]
 8012546:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801254a:	4a15      	ldr	r2, [pc, #84]	@ (80125a0 <HAL_UART_IRQHandler+0x2c0>)
 801254c:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801254e:	687b      	ldr	r3, [r7, #4]
 8012550:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012554:	4618      	mov	r0, r3
 8012556:	f7f2 fd51 	bl	8004ffc <HAL_DMA_Abort_IT>
 801255a:	4603      	mov	r3, r0
 801255c:	2b00      	cmp	r3, #0
 801255e:	d019      	beq.n	8012594 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8012560:	687b      	ldr	r3, [r7, #4]
 8012562:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012566:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012568:	687a      	ldr	r2, [r7, #4]
 801256a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 801256e:	4610      	mov	r0, r2
 8012570:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012572:	e00f      	b.n	8012594 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8012574:	6878      	ldr	r0, [r7, #4]
 8012576:	f000 fa9d 	bl	8012ab4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801257a:	e00b      	b.n	8012594 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801257c:	6878      	ldr	r0, [r7, #4]
 801257e:	f000 fa99 	bl	8012ab4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012582:	e007      	b.n	8012594 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8012584:	6878      	ldr	r0, [r7, #4]
 8012586:	f000 fa95 	bl	8012ab4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801258a:	687b      	ldr	r3, [r7, #4]
 801258c:	2200      	movs	r2, #0
 801258e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8012592:	e26f      	b.n	8012a74 <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012594:	bf00      	nop
    return;
 8012596:	e26d      	b.n	8012a74 <HAL_UART_IRQHandler+0x794>
 8012598:	10000001 	.word	0x10000001
 801259c:	04000120 	.word	0x04000120
 80125a0:	08013da7 	.word	0x08013da7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80125a4:	687b      	ldr	r3, [r7, #4]
 80125a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80125a8:	2b01      	cmp	r3, #1
 80125aa:	f040 8203 	bne.w	80129b4 <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80125ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80125b2:	f003 0310 	and.w	r3, r3, #16
 80125b6:	2b00      	cmp	r3, #0
 80125b8:	f000 81fc 	beq.w	80129b4 <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80125bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80125c0:	f003 0310 	and.w	r3, r3, #16
 80125c4:	2b00      	cmp	r3, #0
 80125c6:	f000 81f5 	beq.w	80129b4 <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80125ca:	687b      	ldr	r3, [r7, #4]
 80125cc:	681b      	ldr	r3, [r3, #0]
 80125ce:	2210      	movs	r2, #16
 80125d0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80125d2:	687b      	ldr	r3, [r7, #4]
 80125d4:	681b      	ldr	r3, [r3, #0]
 80125d6:	689b      	ldr	r3, [r3, #8]
 80125d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80125dc:	2b40      	cmp	r3, #64	@ 0x40
 80125de:	f040 816d 	bne.w	80128bc <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80125e2:	687b      	ldr	r3, [r7, #4]
 80125e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80125e8:	681b      	ldr	r3, [r3, #0]
 80125ea:	4aa4      	ldr	r2, [pc, #656]	@ (801287c <HAL_UART_IRQHandler+0x59c>)
 80125ec:	4293      	cmp	r3, r2
 80125ee:	d068      	beq.n	80126c2 <HAL_UART_IRQHandler+0x3e2>
 80125f0:	687b      	ldr	r3, [r7, #4]
 80125f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80125f6:	681b      	ldr	r3, [r3, #0]
 80125f8:	4aa1      	ldr	r2, [pc, #644]	@ (8012880 <HAL_UART_IRQHandler+0x5a0>)
 80125fa:	4293      	cmp	r3, r2
 80125fc:	d061      	beq.n	80126c2 <HAL_UART_IRQHandler+0x3e2>
 80125fe:	687b      	ldr	r3, [r7, #4]
 8012600:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012604:	681b      	ldr	r3, [r3, #0]
 8012606:	4a9f      	ldr	r2, [pc, #636]	@ (8012884 <HAL_UART_IRQHandler+0x5a4>)
 8012608:	4293      	cmp	r3, r2
 801260a:	d05a      	beq.n	80126c2 <HAL_UART_IRQHandler+0x3e2>
 801260c:	687b      	ldr	r3, [r7, #4]
 801260e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012612:	681b      	ldr	r3, [r3, #0]
 8012614:	4a9c      	ldr	r2, [pc, #624]	@ (8012888 <HAL_UART_IRQHandler+0x5a8>)
 8012616:	4293      	cmp	r3, r2
 8012618:	d053      	beq.n	80126c2 <HAL_UART_IRQHandler+0x3e2>
 801261a:	687b      	ldr	r3, [r7, #4]
 801261c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012620:	681b      	ldr	r3, [r3, #0]
 8012622:	4a9a      	ldr	r2, [pc, #616]	@ (801288c <HAL_UART_IRQHandler+0x5ac>)
 8012624:	4293      	cmp	r3, r2
 8012626:	d04c      	beq.n	80126c2 <HAL_UART_IRQHandler+0x3e2>
 8012628:	687b      	ldr	r3, [r7, #4]
 801262a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801262e:	681b      	ldr	r3, [r3, #0]
 8012630:	4a97      	ldr	r2, [pc, #604]	@ (8012890 <HAL_UART_IRQHandler+0x5b0>)
 8012632:	4293      	cmp	r3, r2
 8012634:	d045      	beq.n	80126c2 <HAL_UART_IRQHandler+0x3e2>
 8012636:	687b      	ldr	r3, [r7, #4]
 8012638:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801263c:	681b      	ldr	r3, [r3, #0]
 801263e:	4a95      	ldr	r2, [pc, #596]	@ (8012894 <HAL_UART_IRQHandler+0x5b4>)
 8012640:	4293      	cmp	r3, r2
 8012642:	d03e      	beq.n	80126c2 <HAL_UART_IRQHandler+0x3e2>
 8012644:	687b      	ldr	r3, [r7, #4]
 8012646:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801264a:	681b      	ldr	r3, [r3, #0]
 801264c:	4a92      	ldr	r2, [pc, #584]	@ (8012898 <HAL_UART_IRQHandler+0x5b8>)
 801264e:	4293      	cmp	r3, r2
 8012650:	d037      	beq.n	80126c2 <HAL_UART_IRQHandler+0x3e2>
 8012652:	687b      	ldr	r3, [r7, #4]
 8012654:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012658:	681b      	ldr	r3, [r3, #0]
 801265a:	4a90      	ldr	r2, [pc, #576]	@ (801289c <HAL_UART_IRQHandler+0x5bc>)
 801265c:	4293      	cmp	r3, r2
 801265e:	d030      	beq.n	80126c2 <HAL_UART_IRQHandler+0x3e2>
 8012660:	687b      	ldr	r3, [r7, #4]
 8012662:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012666:	681b      	ldr	r3, [r3, #0]
 8012668:	4a8d      	ldr	r2, [pc, #564]	@ (80128a0 <HAL_UART_IRQHandler+0x5c0>)
 801266a:	4293      	cmp	r3, r2
 801266c:	d029      	beq.n	80126c2 <HAL_UART_IRQHandler+0x3e2>
 801266e:	687b      	ldr	r3, [r7, #4]
 8012670:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012674:	681b      	ldr	r3, [r3, #0]
 8012676:	4a8b      	ldr	r2, [pc, #556]	@ (80128a4 <HAL_UART_IRQHandler+0x5c4>)
 8012678:	4293      	cmp	r3, r2
 801267a:	d022      	beq.n	80126c2 <HAL_UART_IRQHandler+0x3e2>
 801267c:	687b      	ldr	r3, [r7, #4]
 801267e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012682:	681b      	ldr	r3, [r3, #0]
 8012684:	4a88      	ldr	r2, [pc, #544]	@ (80128a8 <HAL_UART_IRQHandler+0x5c8>)
 8012686:	4293      	cmp	r3, r2
 8012688:	d01b      	beq.n	80126c2 <HAL_UART_IRQHandler+0x3e2>
 801268a:	687b      	ldr	r3, [r7, #4]
 801268c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012690:	681b      	ldr	r3, [r3, #0]
 8012692:	4a86      	ldr	r2, [pc, #536]	@ (80128ac <HAL_UART_IRQHandler+0x5cc>)
 8012694:	4293      	cmp	r3, r2
 8012696:	d014      	beq.n	80126c2 <HAL_UART_IRQHandler+0x3e2>
 8012698:	687b      	ldr	r3, [r7, #4]
 801269a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801269e:	681b      	ldr	r3, [r3, #0]
 80126a0:	4a83      	ldr	r2, [pc, #524]	@ (80128b0 <HAL_UART_IRQHandler+0x5d0>)
 80126a2:	4293      	cmp	r3, r2
 80126a4:	d00d      	beq.n	80126c2 <HAL_UART_IRQHandler+0x3e2>
 80126a6:	687b      	ldr	r3, [r7, #4]
 80126a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80126ac:	681b      	ldr	r3, [r3, #0]
 80126ae:	4a81      	ldr	r2, [pc, #516]	@ (80128b4 <HAL_UART_IRQHandler+0x5d4>)
 80126b0:	4293      	cmp	r3, r2
 80126b2:	d006      	beq.n	80126c2 <HAL_UART_IRQHandler+0x3e2>
 80126b4:	687b      	ldr	r3, [r7, #4]
 80126b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80126ba:	681b      	ldr	r3, [r3, #0]
 80126bc:	4a7e      	ldr	r2, [pc, #504]	@ (80128b8 <HAL_UART_IRQHandler+0x5d8>)
 80126be:	4293      	cmp	r3, r2
 80126c0:	d106      	bne.n	80126d0 <HAL_UART_IRQHandler+0x3f0>
 80126c2:	687b      	ldr	r3, [r7, #4]
 80126c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80126c8:	681b      	ldr	r3, [r3, #0]
 80126ca:	685b      	ldr	r3, [r3, #4]
 80126cc:	b29b      	uxth	r3, r3
 80126ce:	e005      	b.n	80126dc <HAL_UART_IRQHandler+0x3fc>
 80126d0:	687b      	ldr	r3, [r7, #4]
 80126d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80126d6:	681b      	ldr	r3, [r3, #0]
 80126d8:	685b      	ldr	r3, [r3, #4]
 80126da:	b29b      	uxth	r3, r3
 80126dc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80126e0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80126e4:	2b00      	cmp	r3, #0
 80126e6:	f000 80ad 	beq.w	8012844 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80126ea:	687b      	ldr	r3, [r7, #4]
 80126ec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80126f0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80126f4:	429a      	cmp	r2, r3
 80126f6:	f080 80a5 	bcs.w	8012844 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80126fa:	687b      	ldr	r3, [r7, #4]
 80126fc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8012700:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8012704:	687b      	ldr	r3, [r7, #4]
 8012706:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801270a:	69db      	ldr	r3, [r3, #28]
 801270c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012710:	f000 8087 	beq.w	8012822 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8012714:	687b      	ldr	r3, [r7, #4]
 8012716:	681b      	ldr	r3, [r3, #0]
 8012718:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801271c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8012720:	e853 3f00 	ldrex	r3, [r3]
 8012724:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8012728:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801272c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8012730:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8012734:	687b      	ldr	r3, [r7, #4]
 8012736:	681b      	ldr	r3, [r3, #0]
 8012738:	461a      	mov	r2, r3
 801273a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 801273e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8012742:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012746:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 801274a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 801274e:	e841 2300 	strex	r3, r2, [r1]
 8012752:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8012756:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801275a:	2b00      	cmp	r3, #0
 801275c:	d1da      	bne.n	8012714 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801275e:	687b      	ldr	r3, [r7, #4]
 8012760:	681b      	ldr	r3, [r3, #0]
 8012762:	3308      	adds	r3, #8
 8012764:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012766:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8012768:	e853 3f00 	ldrex	r3, [r3]
 801276c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 801276e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8012770:	f023 0301 	bic.w	r3, r3, #1
 8012774:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8012778:	687b      	ldr	r3, [r7, #4]
 801277a:	681b      	ldr	r3, [r3, #0]
 801277c:	3308      	adds	r3, #8
 801277e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8012782:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8012786:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012788:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 801278a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801278e:	e841 2300 	strex	r3, r2, [r1]
 8012792:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8012794:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012796:	2b00      	cmp	r3, #0
 8012798:	d1e1      	bne.n	801275e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801279a:	687b      	ldr	r3, [r7, #4]
 801279c:	681b      	ldr	r3, [r3, #0]
 801279e:	3308      	adds	r3, #8
 80127a0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80127a2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80127a4:	e853 3f00 	ldrex	r3, [r3]
 80127a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80127aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80127ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80127b0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80127b4:	687b      	ldr	r3, [r7, #4]
 80127b6:	681b      	ldr	r3, [r3, #0]
 80127b8:	3308      	adds	r3, #8
 80127ba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80127be:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80127c0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80127c2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80127c4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80127c6:	e841 2300 	strex	r3, r2, [r1]
 80127ca:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80127cc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80127ce:	2b00      	cmp	r3, #0
 80127d0:	d1e3      	bne.n	801279a <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80127d2:	687b      	ldr	r3, [r7, #4]
 80127d4:	2220      	movs	r2, #32
 80127d6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80127da:	687b      	ldr	r3, [r7, #4]
 80127dc:	2200      	movs	r2, #0
 80127de:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80127e0:	687b      	ldr	r3, [r7, #4]
 80127e2:	681b      	ldr	r3, [r3, #0]
 80127e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80127e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80127e8:	e853 3f00 	ldrex	r3, [r3]
 80127ec:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80127ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80127f0:	f023 0310 	bic.w	r3, r3, #16
 80127f4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80127f8:	687b      	ldr	r3, [r7, #4]
 80127fa:	681b      	ldr	r3, [r3, #0]
 80127fc:	461a      	mov	r2, r3
 80127fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012802:	65bb      	str	r3, [r7, #88]	@ 0x58
 8012804:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012806:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8012808:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801280a:	e841 2300 	strex	r3, r2, [r1]
 801280e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8012810:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012812:	2b00      	cmp	r3, #0
 8012814:	d1e4      	bne.n	80127e0 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8012816:	687b      	ldr	r3, [r7, #4]
 8012818:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801281c:	4618      	mov	r0, r3
 801281e:	f7f2 f8cf 	bl	80049c0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8012822:	687b      	ldr	r3, [r7, #4]
 8012824:	2202      	movs	r2, #2
 8012826:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8012828:	687b      	ldr	r3, [r7, #4]
 801282a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 801282e:	687b      	ldr	r3, [r7, #4]
 8012830:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8012834:	b29b      	uxth	r3, r3
 8012836:	1ad3      	subs	r3, r2, r3
 8012838:	b29b      	uxth	r3, r3
 801283a:	4619      	mov	r1, r3
 801283c:	6878      	ldr	r0, [r7, #4]
 801283e:	f000 f943 	bl	8012ac8 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8012842:	e119      	b.n	8012a78 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8012844:	687b      	ldr	r3, [r7, #4]
 8012846:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801284a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 801284e:	429a      	cmp	r2, r3
 8012850:	f040 8112 	bne.w	8012a78 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8012854:	687b      	ldr	r3, [r7, #4]
 8012856:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801285a:	69db      	ldr	r3, [r3, #28]
 801285c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012860:	f040 810a 	bne.w	8012a78 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8012864:	687b      	ldr	r3, [r7, #4]
 8012866:	2202      	movs	r2, #2
 8012868:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801286a:	687b      	ldr	r3, [r7, #4]
 801286c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8012870:	4619      	mov	r1, r3
 8012872:	6878      	ldr	r0, [r7, #4]
 8012874:	f000 f928 	bl	8012ac8 <HAL_UARTEx_RxEventCallback>
      return;
 8012878:	e0fe      	b.n	8012a78 <HAL_UART_IRQHandler+0x798>
 801287a:	bf00      	nop
 801287c:	40020010 	.word	0x40020010
 8012880:	40020028 	.word	0x40020028
 8012884:	40020040 	.word	0x40020040
 8012888:	40020058 	.word	0x40020058
 801288c:	40020070 	.word	0x40020070
 8012890:	40020088 	.word	0x40020088
 8012894:	400200a0 	.word	0x400200a0
 8012898:	400200b8 	.word	0x400200b8
 801289c:	40020410 	.word	0x40020410
 80128a0:	40020428 	.word	0x40020428
 80128a4:	40020440 	.word	0x40020440
 80128a8:	40020458 	.word	0x40020458
 80128ac:	40020470 	.word	0x40020470
 80128b0:	40020488 	.word	0x40020488
 80128b4:	400204a0 	.word	0x400204a0
 80128b8:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80128bc:	687b      	ldr	r3, [r7, #4]
 80128be:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80128c2:	687b      	ldr	r3, [r7, #4]
 80128c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80128c8:	b29b      	uxth	r3, r3
 80128ca:	1ad3      	subs	r3, r2, r3
 80128cc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80128d0:	687b      	ldr	r3, [r7, #4]
 80128d2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80128d6:	b29b      	uxth	r3, r3
 80128d8:	2b00      	cmp	r3, #0
 80128da:	f000 80cf 	beq.w	8012a7c <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 80128de:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80128e2:	2b00      	cmp	r3, #0
 80128e4:	f000 80ca 	beq.w	8012a7c <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80128e8:	687b      	ldr	r3, [r7, #4]
 80128ea:	681b      	ldr	r3, [r3, #0]
 80128ec:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80128ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80128f0:	e853 3f00 	ldrex	r3, [r3]
 80128f4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80128f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80128f8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80128fc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8012900:	687b      	ldr	r3, [r7, #4]
 8012902:	681b      	ldr	r3, [r3, #0]
 8012904:	461a      	mov	r2, r3
 8012906:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 801290a:	647b      	str	r3, [r7, #68]	@ 0x44
 801290c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801290e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8012910:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8012912:	e841 2300 	strex	r3, r2, [r1]
 8012916:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8012918:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801291a:	2b00      	cmp	r3, #0
 801291c:	d1e4      	bne.n	80128e8 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801291e:	687b      	ldr	r3, [r7, #4]
 8012920:	681b      	ldr	r3, [r3, #0]
 8012922:	3308      	adds	r3, #8
 8012924:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012928:	e853 3f00 	ldrex	r3, [r3]
 801292c:	623b      	str	r3, [r7, #32]
   return(result);
 801292e:	6a3a      	ldr	r2, [r7, #32]
 8012930:	4b55      	ldr	r3, [pc, #340]	@ (8012a88 <HAL_UART_IRQHandler+0x7a8>)
 8012932:	4013      	ands	r3, r2
 8012934:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8012938:	687b      	ldr	r3, [r7, #4]
 801293a:	681b      	ldr	r3, [r3, #0]
 801293c:	3308      	adds	r3, #8
 801293e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8012942:	633a      	str	r2, [r7, #48]	@ 0x30
 8012944:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012946:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8012948:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801294a:	e841 2300 	strex	r3, r2, [r1]
 801294e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8012950:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012952:	2b00      	cmp	r3, #0
 8012954:	d1e3      	bne.n	801291e <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8012956:	687b      	ldr	r3, [r7, #4]
 8012958:	2220      	movs	r2, #32
 801295a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801295e:	687b      	ldr	r3, [r7, #4]
 8012960:	2200      	movs	r2, #0
 8012962:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8012964:	687b      	ldr	r3, [r7, #4]
 8012966:	2200      	movs	r2, #0
 8012968:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801296a:	687b      	ldr	r3, [r7, #4]
 801296c:	681b      	ldr	r3, [r3, #0]
 801296e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012970:	693b      	ldr	r3, [r7, #16]
 8012972:	e853 3f00 	ldrex	r3, [r3]
 8012976:	60fb      	str	r3, [r7, #12]
   return(result);
 8012978:	68fb      	ldr	r3, [r7, #12]
 801297a:	f023 0310 	bic.w	r3, r3, #16
 801297e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8012982:	687b      	ldr	r3, [r7, #4]
 8012984:	681b      	ldr	r3, [r3, #0]
 8012986:	461a      	mov	r2, r3
 8012988:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 801298c:	61fb      	str	r3, [r7, #28]
 801298e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012990:	69b9      	ldr	r1, [r7, #24]
 8012992:	69fa      	ldr	r2, [r7, #28]
 8012994:	e841 2300 	strex	r3, r2, [r1]
 8012998:	617b      	str	r3, [r7, #20]
   return(result);
 801299a:	697b      	ldr	r3, [r7, #20]
 801299c:	2b00      	cmp	r3, #0
 801299e:	d1e4      	bne.n	801296a <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80129a0:	687b      	ldr	r3, [r7, #4]
 80129a2:	2202      	movs	r2, #2
 80129a4:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80129a6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80129aa:	4619      	mov	r1, r3
 80129ac:	6878      	ldr	r0, [r7, #4]
 80129ae:	f000 f88b 	bl	8012ac8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80129b2:	e063      	b.n	8012a7c <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80129b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80129b8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80129bc:	2b00      	cmp	r3, #0
 80129be:	d00e      	beq.n	80129de <HAL_UART_IRQHandler+0x6fe>
 80129c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80129c4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80129c8:	2b00      	cmp	r3, #0
 80129ca:	d008      	beq.n	80129de <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80129cc:	687b      	ldr	r3, [r7, #4]
 80129ce:	681b      	ldr	r3, [r3, #0]
 80129d0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80129d4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80129d6:	6878      	ldr	r0, [r7, #4]
 80129d8:	f001 fa22 	bl	8013e20 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80129dc:	e051      	b.n	8012a82 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80129de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80129e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80129e6:	2b00      	cmp	r3, #0
 80129e8:	d014      	beq.n	8012a14 <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80129ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80129ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80129f2:	2b00      	cmp	r3, #0
 80129f4:	d105      	bne.n	8012a02 <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80129f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80129fa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80129fe:	2b00      	cmp	r3, #0
 8012a00:	d008      	beq.n	8012a14 <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 8012a02:	687b      	ldr	r3, [r7, #4]
 8012a04:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8012a06:	2b00      	cmp	r3, #0
 8012a08:	d03a      	beq.n	8012a80 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 8012a0a:	687b      	ldr	r3, [r7, #4]
 8012a0c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8012a0e:	6878      	ldr	r0, [r7, #4]
 8012a10:	4798      	blx	r3
    }
    return;
 8012a12:	e035      	b.n	8012a80 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8012a14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012a18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012a1c:	2b00      	cmp	r3, #0
 8012a1e:	d009      	beq.n	8012a34 <HAL_UART_IRQHandler+0x754>
 8012a20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8012a24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012a28:	2b00      	cmp	r3, #0
 8012a2a:	d003      	beq.n	8012a34 <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 8012a2c:	6878      	ldr	r0, [r7, #4]
 8012a2e:	f001 f9cc 	bl	8013dca <UART_EndTransmit_IT>
    return;
 8012a32:	e026      	b.n	8012a82 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8012a34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012a38:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8012a3c:	2b00      	cmp	r3, #0
 8012a3e:	d009      	beq.n	8012a54 <HAL_UART_IRQHandler+0x774>
 8012a40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8012a44:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8012a48:	2b00      	cmp	r3, #0
 8012a4a:	d003      	beq.n	8012a54 <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8012a4c:	6878      	ldr	r0, [r7, #4]
 8012a4e:	f001 f9fb 	bl	8013e48 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8012a52:	e016      	b.n	8012a82 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8012a54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012a58:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8012a5c:	2b00      	cmp	r3, #0
 8012a5e:	d010      	beq.n	8012a82 <HAL_UART_IRQHandler+0x7a2>
 8012a60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8012a64:	2b00      	cmp	r3, #0
 8012a66:	da0c      	bge.n	8012a82 <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8012a68:	6878      	ldr	r0, [r7, #4]
 8012a6a:	f001 f9e3 	bl	8013e34 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8012a6e:	e008      	b.n	8012a82 <HAL_UART_IRQHandler+0x7a2>
      return;
 8012a70:	bf00      	nop
 8012a72:	e006      	b.n	8012a82 <HAL_UART_IRQHandler+0x7a2>
    return;
 8012a74:	bf00      	nop
 8012a76:	e004      	b.n	8012a82 <HAL_UART_IRQHandler+0x7a2>
      return;
 8012a78:	bf00      	nop
 8012a7a:	e002      	b.n	8012a82 <HAL_UART_IRQHandler+0x7a2>
      return;
 8012a7c:	bf00      	nop
 8012a7e:	e000      	b.n	8012a82 <HAL_UART_IRQHandler+0x7a2>
    return;
 8012a80:	bf00      	nop
  }
}
 8012a82:	37e8      	adds	r7, #232	@ 0xe8
 8012a84:	46bd      	mov	sp, r7
 8012a86:	bd80      	pop	{r7, pc}
 8012a88:	effffffe 	.word	0xeffffffe

08012a8c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8012a8c:	b480      	push	{r7}
 8012a8e:	b083      	sub	sp, #12
 8012a90:	af00      	add	r7, sp, #0
 8012a92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8012a94:	bf00      	nop
 8012a96:	370c      	adds	r7, #12
 8012a98:	46bd      	mov	sp, r7
 8012a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a9e:	4770      	bx	lr

08012aa0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8012aa0:	b480      	push	{r7}
 8012aa2:	b083      	sub	sp, #12
 8012aa4:	af00      	add	r7, sp, #0
 8012aa6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8012aa8:	bf00      	nop
 8012aaa:	370c      	adds	r7, #12
 8012aac:	46bd      	mov	sp, r7
 8012aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ab2:	4770      	bx	lr

08012ab4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8012ab4:	b480      	push	{r7}
 8012ab6:	b083      	sub	sp, #12
 8012ab8:	af00      	add	r7, sp, #0
 8012aba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8012abc:	bf00      	nop
 8012abe:	370c      	adds	r7, #12
 8012ac0:	46bd      	mov	sp, r7
 8012ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ac6:	4770      	bx	lr

08012ac8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8012ac8:	b480      	push	{r7}
 8012aca:	b083      	sub	sp, #12
 8012acc:	af00      	add	r7, sp, #0
 8012ace:	6078      	str	r0, [r7, #4]
 8012ad0:	460b      	mov	r3, r1
 8012ad2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8012ad4:	bf00      	nop
 8012ad6:	370c      	adds	r7, #12
 8012ad8:	46bd      	mov	sp, r7
 8012ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ade:	4770      	bx	lr

08012ae0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8012ae0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8012ae4:	b092      	sub	sp, #72	@ 0x48
 8012ae6:	af00      	add	r7, sp, #0
 8012ae8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8012aea:	2300      	movs	r3, #0
 8012aec:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8012af0:	697b      	ldr	r3, [r7, #20]
 8012af2:	689a      	ldr	r2, [r3, #8]
 8012af4:	697b      	ldr	r3, [r7, #20]
 8012af6:	691b      	ldr	r3, [r3, #16]
 8012af8:	431a      	orrs	r2, r3
 8012afa:	697b      	ldr	r3, [r7, #20]
 8012afc:	695b      	ldr	r3, [r3, #20]
 8012afe:	431a      	orrs	r2, r3
 8012b00:	697b      	ldr	r3, [r7, #20]
 8012b02:	69db      	ldr	r3, [r3, #28]
 8012b04:	4313      	orrs	r3, r2
 8012b06:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8012b08:	697b      	ldr	r3, [r7, #20]
 8012b0a:	681b      	ldr	r3, [r3, #0]
 8012b0c:	681a      	ldr	r2, [r3, #0]
 8012b0e:	4bbe      	ldr	r3, [pc, #760]	@ (8012e08 <UART_SetConfig+0x328>)
 8012b10:	4013      	ands	r3, r2
 8012b12:	697a      	ldr	r2, [r7, #20]
 8012b14:	6812      	ldr	r2, [r2, #0]
 8012b16:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8012b18:	430b      	orrs	r3, r1
 8012b1a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8012b1c:	697b      	ldr	r3, [r7, #20]
 8012b1e:	681b      	ldr	r3, [r3, #0]
 8012b20:	685b      	ldr	r3, [r3, #4]
 8012b22:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8012b26:	697b      	ldr	r3, [r7, #20]
 8012b28:	68da      	ldr	r2, [r3, #12]
 8012b2a:	697b      	ldr	r3, [r7, #20]
 8012b2c:	681b      	ldr	r3, [r3, #0]
 8012b2e:	430a      	orrs	r2, r1
 8012b30:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8012b32:	697b      	ldr	r3, [r7, #20]
 8012b34:	699b      	ldr	r3, [r3, #24]
 8012b36:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8012b38:	697b      	ldr	r3, [r7, #20]
 8012b3a:	681b      	ldr	r3, [r3, #0]
 8012b3c:	4ab3      	ldr	r2, [pc, #716]	@ (8012e0c <UART_SetConfig+0x32c>)
 8012b3e:	4293      	cmp	r3, r2
 8012b40:	d004      	beq.n	8012b4c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8012b42:	697b      	ldr	r3, [r7, #20]
 8012b44:	6a1b      	ldr	r3, [r3, #32]
 8012b46:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8012b48:	4313      	orrs	r3, r2
 8012b4a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8012b4c:	697b      	ldr	r3, [r7, #20]
 8012b4e:	681b      	ldr	r3, [r3, #0]
 8012b50:	689a      	ldr	r2, [r3, #8]
 8012b52:	4baf      	ldr	r3, [pc, #700]	@ (8012e10 <UART_SetConfig+0x330>)
 8012b54:	4013      	ands	r3, r2
 8012b56:	697a      	ldr	r2, [r7, #20]
 8012b58:	6812      	ldr	r2, [r2, #0]
 8012b5a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8012b5c:	430b      	orrs	r3, r1
 8012b5e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8012b60:	697b      	ldr	r3, [r7, #20]
 8012b62:	681b      	ldr	r3, [r3, #0]
 8012b64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012b66:	f023 010f 	bic.w	r1, r3, #15
 8012b6a:	697b      	ldr	r3, [r7, #20]
 8012b6c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012b6e:	697b      	ldr	r3, [r7, #20]
 8012b70:	681b      	ldr	r3, [r3, #0]
 8012b72:	430a      	orrs	r2, r1
 8012b74:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012b76:	697b      	ldr	r3, [r7, #20]
 8012b78:	681b      	ldr	r3, [r3, #0]
 8012b7a:	4aa6      	ldr	r2, [pc, #664]	@ (8012e14 <UART_SetConfig+0x334>)
 8012b7c:	4293      	cmp	r3, r2
 8012b7e:	d177      	bne.n	8012c70 <UART_SetConfig+0x190>
 8012b80:	4ba5      	ldr	r3, [pc, #660]	@ (8012e18 <UART_SetConfig+0x338>)
 8012b82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012b84:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8012b88:	2b28      	cmp	r3, #40	@ 0x28
 8012b8a:	d86d      	bhi.n	8012c68 <UART_SetConfig+0x188>
 8012b8c:	a201      	add	r2, pc, #4	@ (adr r2, 8012b94 <UART_SetConfig+0xb4>)
 8012b8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012b92:	bf00      	nop
 8012b94:	08012c39 	.word	0x08012c39
 8012b98:	08012c69 	.word	0x08012c69
 8012b9c:	08012c69 	.word	0x08012c69
 8012ba0:	08012c69 	.word	0x08012c69
 8012ba4:	08012c69 	.word	0x08012c69
 8012ba8:	08012c69 	.word	0x08012c69
 8012bac:	08012c69 	.word	0x08012c69
 8012bb0:	08012c69 	.word	0x08012c69
 8012bb4:	08012c41 	.word	0x08012c41
 8012bb8:	08012c69 	.word	0x08012c69
 8012bbc:	08012c69 	.word	0x08012c69
 8012bc0:	08012c69 	.word	0x08012c69
 8012bc4:	08012c69 	.word	0x08012c69
 8012bc8:	08012c69 	.word	0x08012c69
 8012bcc:	08012c69 	.word	0x08012c69
 8012bd0:	08012c69 	.word	0x08012c69
 8012bd4:	08012c49 	.word	0x08012c49
 8012bd8:	08012c69 	.word	0x08012c69
 8012bdc:	08012c69 	.word	0x08012c69
 8012be0:	08012c69 	.word	0x08012c69
 8012be4:	08012c69 	.word	0x08012c69
 8012be8:	08012c69 	.word	0x08012c69
 8012bec:	08012c69 	.word	0x08012c69
 8012bf0:	08012c69 	.word	0x08012c69
 8012bf4:	08012c51 	.word	0x08012c51
 8012bf8:	08012c69 	.word	0x08012c69
 8012bfc:	08012c69 	.word	0x08012c69
 8012c00:	08012c69 	.word	0x08012c69
 8012c04:	08012c69 	.word	0x08012c69
 8012c08:	08012c69 	.word	0x08012c69
 8012c0c:	08012c69 	.word	0x08012c69
 8012c10:	08012c69 	.word	0x08012c69
 8012c14:	08012c59 	.word	0x08012c59
 8012c18:	08012c69 	.word	0x08012c69
 8012c1c:	08012c69 	.word	0x08012c69
 8012c20:	08012c69 	.word	0x08012c69
 8012c24:	08012c69 	.word	0x08012c69
 8012c28:	08012c69 	.word	0x08012c69
 8012c2c:	08012c69 	.word	0x08012c69
 8012c30:	08012c69 	.word	0x08012c69
 8012c34:	08012c61 	.word	0x08012c61
 8012c38:	2301      	movs	r3, #1
 8012c3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012c3e:	e222      	b.n	8013086 <UART_SetConfig+0x5a6>
 8012c40:	2304      	movs	r3, #4
 8012c42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012c46:	e21e      	b.n	8013086 <UART_SetConfig+0x5a6>
 8012c48:	2308      	movs	r3, #8
 8012c4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012c4e:	e21a      	b.n	8013086 <UART_SetConfig+0x5a6>
 8012c50:	2310      	movs	r3, #16
 8012c52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012c56:	e216      	b.n	8013086 <UART_SetConfig+0x5a6>
 8012c58:	2320      	movs	r3, #32
 8012c5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012c5e:	e212      	b.n	8013086 <UART_SetConfig+0x5a6>
 8012c60:	2340      	movs	r3, #64	@ 0x40
 8012c62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012c66:	e20e      	b.n	8013086 <UART_SetConfig+0x5a6>
 8012c68:	2380      	movs	r3, #128	@ 0x80
 8012c6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012c6e:	e20a      	b.n	8013086 <UART_SetConfig+0x5a6>
 8012c70:	697b      	ldr	r3, [r7, #20]
 8012c72:	681b      	ldr	r3, [r3, #0]
 8012c74:	4a69      	ldr	r2, [pc, #420]	@ (8012e1c <UART_SetConfig+0x33c>)
 8012c76:	4293      	cmp	r3, r2
 8012c78:	d130      	bne.n	8012cdc <UART_SetConfig+0x1fc>
 8012c7a:	4b67      	ldr	r3, [pc, #412]	@ (8012e18 <UART_SetConfig+0x338>)
 8012c7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012c7e:	f003 0307 	and.w	r3, r3, #7
 8012c82:	2b05      	cmp	r3, #5
 8012c84:	d826      	bhi.n	8012cd4 <UART_SetConfig+0x1f4>
 8012c86:	a201      	add	r2, pc, #4	@ (adr r2, 8012c8c <UART_SetConfig+0x1ac>)
 8012c88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012c8c:	08012ca5 	.word	0x08012ca5
 8012c90:	08012cad 	.word	0x08012cad
 8012c94:	08012cb5 	.word	0x08012cb5
 8012c98:	08012cbd 	.word	0x08012cbd
 8012c9c:	08012cc5 	.word	0x08012cc5
 8012ca0:	08012ccd 	.word	0x08012ccd
 8012ca4:	2300      	movs	r3, #0
 8012ca6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012caa:	e1ec      	b.n	8013086 <UART_SetConfig+0x5a6>
 8012cac:	2304      	movs	r3, #4
 8012cae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012cb2:	e1e8      	b.n	8013086 <UART_SetConfig+0x5a6>
 8012cb4:	2308      	movs	r3, #8
 8012cb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012cba:	e1e4      	b.n	8013086 <UART_SetConfig+0x5a6>
 8012cbc:	2310      	movs	r3, #16
 8012cbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012cc2:	e1e0      	b.n	8013086 <UART_SetConfig+0x5a6>
 8012cc4:	2320      	movs	r3, #32
 8012cc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012cca:	e1dc      	b.n	8013086 <UART_SetConfig+0x5a6>
 8012ccc:	2340      	movs	r3, #64	@ 0x40
 8012cce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012cd2:	e1d8      	b.n	8013086 <UART_SetConfig+0x5a6>
 8012cd4:	2380      	movs	r3, #128	@ 0x80
 8012cd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012cda:	e1d4      	b.n	8013086 <UART_SetConfig+0x5a6>
 8012cdc:	697b      	ldr	r3, [r7, #20]
 8012cde:	681b      	ldr	r3, [r3, #0]
 8012ce0:	4a4f      	ldr	r2, [pc, #316]	@ (8012e20 <UART_SetConfig+0x340>)
 8012ce2:	4293      	cmp	r3, r2
 8012ce4:	d130      	bne.n	8012d48 <UART_SetConfig+0x268>
 8012ce6:	4b4c      	ldr	r3, [pc, #304]	@ (8012e18 <UART_SetConfig+0x338>)
 8012ce8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012cea:	f003 0307 	and.w	r3, r3, #7
 8012cee:	2b05      	cmp	r3, #5
 8012cf0:	d826      	bhi.n	8012d40 <UART_SetConfig+0x260>
 8012cf2:	a201      	add	r2, pc, #4	@ (adr r2, 8012cf8 <UART_SetConfig+0x218>)
 8012cf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012cf8:	08012d11 	.word	0x08012d11
 8012cfc:	08012d19 	.word	0x08012d19
 8012d00:	08012d21 	.word	0x08012d21
 8012d04:	08012d29 	.word	0x08012d29
 8012d08:	08012d31 	.word	0x08012d31
 8012d0c:	08012d39 	.word	0x08012d39
 8012d10:	2300      	movs	r3, #0
 8012d12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012d16:	e1b6      	b.n	8013086 <UART_SetConfig+0x5a6>
 8012d18:	2304      	movs	r3, #4
 8012d1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012d1e:	e1b2      	b.n	8013086 <UART_SetConfig+0x5a6>
 8012d20:	2308      	movs	r3, #8
 8012d22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012d26:	e1ae      	b.n	8013086 <UART_SetConfig+0x5a6>
 8012d28:	2310      	movs	r3, #16
 8012d2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012d2e:	e1aa      	b.n	8013086 <UART_SetConfig+0x5a6>
 8012d30:	2320      	movs	r3, #32
 8012d32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012d36:	e1a6      	b.n	8013086 <UART_SetConfig+0x5a6>
 8012d38:	2340      	movs	r3, #64	@ 0x40
 8012d3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012d3e:	e1a2      	b.n	8013086 <UART_SetConfig+0x5a6>
 8012d40:	2380      	movs	r3, #128	@ 0x80
 8012d42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012d46:	e19e      	b.n	8013086 <UART_SetConfig+0x5a6>
 8012d48:	697b      	ldr	r3, [r7, #20]
 8012d4a:	681b      	ldr	r3, [r3, #0]
 8012d4c:	4a35      	ldr	r2, [pc, #212]	@ (8012e24 <UART_SetConfig+0x344>)
 8012d4e:	4293      	cmp	r3, r2
 8012d50:	d130      	bne.n	8012db4 <UART_SetConfig+0x2d4>
 8012d52:	4b31      	ldr	r3, [pc, #196]	@ (8012e18 <UART_SetConfig+0x338>)
 8012d54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012d56:	f003 0307 	and.w	r3, r3, #7
 8012d5a:	2b05      	cmp	r3, #5
 8012d5c:	d826      	bhi.n	8012dac <UART_SetConfig+0x2cc>
 8012d5e:	a201      	add	r2, pc, #4	@ (adr r2, 8012d64 <UART_SetConfig+0x284>)
 8012d60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012d64:	08012d7d 	.word	0x08012d7d
 8012d68:	08012d85 	.word	0x08012d85
 8012d6c:	08012d8d 	.word	0x08012d8d
 8012d70:	08012d95 	.word	0x08012d95
 8012d74:	08012d9d 	.word	0x08012d9d
 8012d78:	08012da5 	.word	0x08012da5
 8012d7c:	2300      	movs	r3, #0
 8012d7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012d82:	e180      	b.n	8013086 <UART_SetConfig+0x5a6>
 8012d84:	2304      	movs	r3, #4
 8012d86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012d8a:	e17c      	b.n	8013086 <UART_SetConfig+0x5a6>
 8012d8c:	2308      	movs	r3, #8
 8012d8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012d92:	e178      	b.n	8013086 <UART_SetConfig+0x5a6>
 8012d94:	2310      	movs	r3, #16
 8012d96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012d9a:	e174      	b.n	8013086 <UART_SetConfig+0x5a6>
 8012d9c:	2320      	movs	r3, #32
 8012d9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012da2:	e170      	b.n	8013086 <UART_SetConfig+0x5a6>
 8012da4:	2340      	movs	r3, #64	@ 0x40
 8012da6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012daa:	e16c      	b.n	8013086 <UART_SetConfig+0x5a6>
 8012dac:	2380      	movs	r3, #128	@ 0x80
 8012dae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012db2:	e168      	b.n	8013086 <UART_SetConfig+0x5a6>
 8012db4:	697b      	ldr	r3, [r7, #20]
 8012db6:	681b      	ldr	r3, [r3, #0]
 8012db8:	4a1b      	ldr	r2, [pc, #108]	@ (8012e28 <UART_SetConfig+0x348>)
 8012dba:	4293      	cmp	r3, r2
 8012dbc:	d142      	bne.n	8012e44 <UART_SetConfig+0x364>
 8012dbe:	4b16      	ldr	r3, [pc, #88]	@ (8012e18 <UART_SetConfig+0x338>)
 8012dc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012dc2:	f003 0307 	and.w	r3, r3, #7
 8012dc6:	2b05      	cmp	r3, #5
 8012dc8:	d838      	bhi.n	8012e3c <UART_SetConfig+0x35c>
 8012dca:	a201      	add	r2, pc, #4	@ (adr r2, 8012dd0 <UART_SetConfig+0x2f0>)
 8012dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012dd0:	08012de9 	.word	0x08012de9
 8012dd4:	08012df1 	.word	0x08012df1
 8012dd8:	08012df9 	.word	0x08012df9
 8012ddc:	08012e01 	.word	0x08012e01
 8012de0:	08012e2d 	.word	0x08012e2d
 8012de4:	08012e35 	.word	0x08012e35
 8012de8:	2300      	movs	r3, #0
 8012dea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012dee:	e14a      	b.n	8013086 <UART_SetConfig+0x5a6>
 8012df0:	2304      	movs	r3, #4
 8012df2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012df6:	e146      	b.n	8013086 <UART_SetConfig+0x5a6>
 8012df8:	2308      	movs	r3, #8
 8012dfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012dfe:	e142      	b.n	8013086 <UART_SetConfig+0x5a6>
 8012e00:	2310      	movs	r3, #16
 8012e02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012e06:	e13e      	b.n	8013086 <UART_SetConfig+0x5a6>
 8012e08:	cfff69f3 	.word	0xcfff69f3
 8012e0c:	58000c00 	.word	0x58000c00
 8012e10:	11fff4ff 	.word	0x11fff4ff
 8012e14:	40011000 	.word	0x40011000
 8012e18:	58024400 	.word	0x58024400
 8012e1c:	40004400 	.word	0x40004400
 8012e20:	40004800 	.word	0x40004800
 8012e24:	40004c00 	.word	0x40004c00
 8012e28:	40005000 	.word	0x40005000
 8012e2c:	2320      	movs	r3, #32
 8012e2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012e32:	e128      	b.n	8013086 <UART_SetConfig+0x5a6>
 8012e34:	2340      	movs	r3, #64	@ 0x40
 8012e36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012e3a:	e124      	b.n	8013086 <UART_SetConfig+0x5a6>
 8012e3c:	2380      	movs	r3, #128	@ 0x80
 8012e3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012e42:	e120      	b.n	8013086 <UART_SetConfig+0x5a6>
 8012e44:	697b      	ldr	r3, [r7, #20]
 8012e46:	681b      	ldr	r3, [r3, #0]
 8012e48:	4acb      	ldr	r2, [pc, #812]	@ (8013178 <UART_SetConfig+0x698>)
 8012e4a:	4293      	cmp	r3, r2
 8012e4c:	d176      	bne.n	8012f3c <UART_SetConfig+0x45c>
 8012e4e:	4bcb      	ldr	r3, [pc, #812]	@ (801317c <UART_SetConfig+0x69c>)
 8012e50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012e52:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8012e56:	2b28      	cmp	r3, #40	@ 0x28
 8012e58:	d86c      	bhi.n	8012f34 <UART_SetConfig+0x454>
 8012e5a:	a201      	add	r2, pc, #4	@ (adr r2, 8012e60 <UART_SetConfig+0x380>)
 8012e5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012e60:	08012f05 	.word	0x08012f05
 8012e64:	08012f35 	.word	0x08012f35
 8012e68:	08012f35 	.word	0x08012f35
 8012e6c:	08012f35 	.word	0x08012f35
 8012e70:	08012f35 	.word	0x08012f35
 8012e74:	08012f35 	.word	0x08012f35
 8012e78:	08012f35 	.word	0x08012f35
 8012e7c:	08012f35 	.word	0x08012f35
 8012e80:	08012f0d 	.word	0x08012f0d
 8012e84:	08012f35 	.word	0x08012f35
 8012e88:	08012f35 	.word	0x08012f35
 8012e8c:	08012f35 	.word	0x08012f35
 8012e90:	08012f35 	.word	0x08012f35
 8012e94:	08012f35 	.word	0x08012f35
 8012e98:	08012f35 	.word	0x08012f35
 8012e9c:	08012f35 	.word	0x08012f35
 8012ea0:	08012f15 	.word	0x08012f15
 8012ea4:	08012f35 	.word	0x08012f35
 8012ea8:	08012f35 	.word	0x08012f35
 8012eac:	08012f35 	.word	0x08012f35
 8012eb0:	08012f35 	.word	0x08012f35
 8012eb4:	08012f35 	.word	0x08012f35
 8012eb8:	08012f35 	.word	0x08012f35
 8012ebc:	08012f35 	.word	0x08012f35
 8012ec0:	08012f1d 	.word	0x08012f1d
 8012ec4:	08012f35 	.word	0x08012f35
 8012ec8:	08012f35 	.word	0x08012f35
 8012ecc:	08012f35 	.word	0x08012f35
 8012ed0:	08012f35 	.word	0x08012f35
 8012ed4:	08012f35 	.word	0x08012f35
 8012ed8:	08012f35 	.word	0x08012f35
 8012edc:	08012f35 	.word	0x08012f35
 8012ee0:	08012f25 	.word	0x08012f25
 8012ee4:	08012f35 	.word	0x08012f35
 8012ee8:	08012f35 	.word	0x08012f35
 8012eec:	08012f35 	.word	0x08012f35
 8012ef0:	08012f35 	.word	0x08012f35
 8012ef4:	08012f35 	.word	0x08012f35
 8012ef8:	08012f35 	.word	0x08012f35
 8012efc:	08012f35 	.word	0x08012f35
 8012f00:	08012f2d 	.word	0x08012f2d
 8012f04:	2301      	movs	r3, #1
 8012f06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012f0a:	e0bc      	b.n	8013086 <UART_SetConfig+0x5a6>
 8012f0c:	2304      	movs	r3, #4
 8012f0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012f12:	e0b8      	b.n	8013086 <UART_SetConfig+0x5a6>
 8012f14:	2308      	movs	r3, #8
 8012f16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012f1a:	e0b4      	b.n	8013086 <UART_SetConfig+0x5a6>
 8012f1c:	2310      	movs	r3, #16
 8012f1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012f22:	e0b0      	b.n	8013086 <UART_SetConfig+0x5a6>
 8012f24:	2320      	movs	r3, #32
 8012f26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012f2a:	e0ac      	b.n	8013086 <UART_SetConfig+0x5a6>
 8012f2c:	2340      	movs	r3, #64	@ 0x40
 8012f2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012f32:	e0a8      	b.n	8013086 <UART_SetConfig+0x5a6>
 8012f34:	2380      	movs	r3, #128	@ 0x80
 8012f36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012f3a:	e0a4      	b.n	8013086 <UART_SetConfig+0x5a6>
 8012f3c:	697b      	ldr	r3, [r7, #20]
 8012f3e:	681b      	ldr	r3, [r3, #0]
 8012f40:	4a8f      	ldr	r2, [pc, #572]	@ (8013180 <UART_SetConfig+0x6a0>)
 8012f42:	4293      	cmp	r3, r2
 8012f44:	d130      	bne.n	8012fa8 <UART_SetConfig+0x4c8>
 8012f46:	4b8d      	ldr	r3, [pc, #564]	@ (801317c <UART_SetConfig+0x69c>)
 8012f48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012f4a:	f003 0307 	and.w	r3, r3, #7
 8012f4e:	2b05      	cmp	r3, #5
 8012f50:	d826      	bhi.n	8012fa0 <UART_SetConfig+0x4c0>
 8012f52:	a201      	add	r2, pc, #4	@ (adr r2, 8012f58 <UART_SetConfig+0x478>)
 8012f54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012f58:	08012f71 	.word	0x08012f71
 8012f5c:	08012f79 	.word	0x08012f79
 8012f60:	08012f81 	.word	0x08012f81
 8012f64:	08012f89 	.word	0x08012f89
 8012f68:	08012f91 	.word	0x08012f91
 8012f6c:	08012f99 	.word	0x08012f99
 8012f70:	2300      	movs	r3, #0
 8012f72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012f76:	e086      	b.n	8013086 <UART_SetConfig+0x5a6>
 8012f78:	2304      	movs	r3, #4
 8012f7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012f7e:	e082      	b.n	8013086 <UART_SetConfig+0x5a6>
 8012f80:	2308      	movs	r3, #8
 8012f82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012f86:	e07e      	b.n	8013086 <UART_SetConfig+0x5a6>
 8012f88:	2310      	movs	r3, #16
 8012f8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012f8e:	e07a      	b.n	8013086 <UART_SetConfig+0x5a6>
 8012f90:	2320      	movs	r3, #32
 8012f92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012f96:	e076      	b.n	8013086 <UART_SetConfig+0x5a6>
 8012f98:	2340      	movs	r3, #64	@ 0x40
 8012f9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012f9e:	e072      	b.n	8013086 <UART_SetConfig+0x5a6>
 8012fa0:	2380      	movs	r3, #128	@ 0x80
 8012fa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012fa6:	e06e      	b.n	8013086 <UART_SetConfig+0x5a6>
 8012fa8:	697b      	ldr	r3, [r7, #20]
 8012faa:	681b      	ldr	r3, [r3, #0]
 8012fac:	4a75      	ldr	r2, [pc, #468]	@ (8013184 <UART_SetConfig+0x6a4>)
 8012fae:	4293      	cmp	r3, r2
 8012fb0:	d130      	bne.n	8013014 <UART_SetConfig+0x534>
 8012fb2:	4b72      	ldr	r3, [pc, #456]	@ (801317c <UART_SetConfig+0x69c>)
 8012fb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012fb6:	f003 0307 	and.w	r3, r3, #7
 8012fba:	2b05      	cmp	r3, #5
 8012fbc:	d826      	bhi.n	801300c <UART_SetConfig+0x52c>
 8012fbe:	a201      	add	r2, pc, #4	@ (adr r2, 8012fc4 <UART_SetConfig+0x4e4>)
 8012fc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012fc4:	08012fdd 	.word	0x08012fdd
 8012fc8:	08012fe5 	.word	0x08012fe5
 8012fcc:	08012fed 	.word	0x08012fed
 8012fd0:	08012ff5 	.word	0x08012ff5
 8012fd4:	08012ffd 	.word	0x08012ffd
 8012fd8:	08013005 	.word	0x08013005
 8012fdc:	2300      	movs	r3, #0
 8012fde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012fe2:	e050      	b.n	8013086 <UART_SetConfig+0x5a6>
 8012fe4:	2304      	movs	r3, #4
 8012fe6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012fea:	e04c      	b.n	8013086 <UART_SetConfig+0x5a6>
 8012fec:	2308      	movs	r3, #8
 8012fee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012ff2:	e048      	b.n	8013086 <UART_SetConfig+0x5a6>
 8012ff4:	2310      	movs	r3, #16
 8012ff6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012ffa:	e044      	b.n	8013086 <UART_SetConfig+0x5a6>
 8012ffc:	2320      	movs	r3, #32
 8012ffe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013002:	e040      	b.n	8013086 <UART_SetConfig+0x5a6>
 8013004:	2340      	movs	r3, #64	@ 0x40
 8013006:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801300a:	e03c      	b.n	8013086 <UART_SetConfig+0x5a6>
 801300c:	2380      	movs	r3, #128	@ 0x80
 801300e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013012:	e038      	b.n	8013086 <UART_SetConfig+0x5a6>
 8013014:	697b      	ldr	r3, [r7, #20]
 8013016:	681b      	ldr	r3, [r3, #0]
 8013018:	4a5b      	ldr	r2, [pc, #364]	@ (8013188 <UART_SetConfig+0x6a8>)
 801301a:	4293      	cmp	r3, r2
 801301c:	d130      	bne.n	8013080 <UART_SetConfig+0x5a0>
 801301e:	4b57      	ldr	r3, [pc, #348]	@ (801317c <UART_SetConfig+0x69c>)
 8013020:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013022:	f003 0307 	and.w	r3, r3, #7
 8013026:	2b05      	cmp	r3, #5
 8013028:	d826      	bhi.n	8013078 <UART_SetConfig+0x598>
 801302a:	a201      	add	r2, pc, #4	@ (adr r2, 8013030 <UART_SetConfig+0x550>)
 801302c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013030:	08013049 	.word	0x08013049
 8013034:	08013051 	.word	0x08013051
 8013038:	08013059 	.word	0x08013059
 801303c:	08013061 	.word	0x08013061
 8013040:	08013069 	.word	0x08013069
 8013044:	08013071 	.word	0x08013071
 8013048:	2302      	movs	r3, #2
 801304a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801304e:	e01a      	b.n	8013086 <UART_SetConfig+0x5a6>
 8013050:	2304      	movs	r3, #4
 8013052:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013056:	e016      	b.n	8013086 <UART_SetConfig+0x5a6>
 8013058:	2308      	movs	r3, #8
 801305a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801305e:	e012      	b.n	8013086 <UART_SetConfig+0x5a6>
 8013060:	2310      	movs	r3, #16
 8013062:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013066:	e00e      	b.n	8013086 <UART_SetConfig+0x5a6>
 8013068:	2320      	movs	r3, #32
 801306a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801306e:	e00a      	b.n	8013086 <UART_SetConfig+0x5a6>
 8013070:	2340      	movs	r3, #64	@ 0x40
 8013072:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013076:	e006      	b.n	8013086 <UART_SetConfig+0x5a6>
 8013078:	2380      	movs	r3, #128	@ 0x80
 801307a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801307e:	e002      	b.n	8013086 <UART_SetConfig+0x5a6>
 8013080:	2380      	movs	r3, #128	@ 0x80
 8013082:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8013086:	697b      	ldr	r3, [r7, #20]
 8013088:	681b      	ldr	r3, [r3, #0]
 801308a:	4a3f      	ldr	r2, [pc, #252]	@ (8013188 <UART_SetConfig+0x6a8>)
 801308c:	4293      	cmp	r3, r2
 801308e:	f040 80f8 	bne.w	8013282 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8013092:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8013096:	2b20      	cmp	r3, #32
 8013098:	dc46      	bgt.n	8013128 <UART_SetConfig+0x648>
 801309a:	2b02      	cmp	r3, #2
 801309c:	f2c0 8082 	blt.w	80131a4 <UART_SetConfig+0x6c4>
 80130a0:	3b02      	subs	r3, #2
 80130a2:	2b1e      	cmp	r3, #30
 80130a4:	d87e      	bhi.n	80131a4 <UART_SetConfig+0x6c4>
 80130a6:	a201      	add	r2, pc, #4	@ (adr r2, 80130ac <UART_SetConfig+0x5cc>)
 80130a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80130ac:	0801312f 	.word	0x0801312f
 80130b0:	080131a5 	.word	0x080131a5
 80130b4:	08013137 	.word	0x08013137
 80130b8:	080131a5 	.word	0x080131a5
 80130bc:	080131a5 	.word	0x080131a5
 80130c0:	080131a5 	.word	0x080131a5
 80130c4:	08013147 	.word	0x08013147
 80130c8:	080131a5 	.word	0x080131a5
 80130cc:	080131a5 	.word	0x080131a5
 80130d0:	080131a5 	.word	0x080131a5
 80130d4:	080131a5 	.word	0x080131a5
 80130d8:	080131a5 	.word	0x080131a5
 80130dc:	080131a5 	.word	0x080131a5
 80130e0:	080131a5 	.word	0x080131a5
 80130e4:	08013157 	.word	0x08013157
 80130e8:	080131a5 	.word	0x080131a5
 80130ec:	080131a5 	.word	0x080131a5
 80130f0:	080131a5 	.word	0x080131a5
 80130f4:	080131a5 	.word	0x080131a5
 80130f8:	080131a5 	.word	0x080131a5
 80130fc:	080131a5 	.word	0x080131a5
 8013100:	080131a5 	.word	0x080131a5
 8013104:	080131a5 	.word	0x080131a5
 8013108:	080131a5 	.word	0x080131a5
 801310c:	080131a5 	.word	0x080131a5
 8013110:	080131a5 	.word	0x080131a5
 8013114:	080131a5 	.word	0x080131a5
 8013118:	080131a5 	.word	0x080131a5
 801311c:	080131a5 	.word	0x080131a5
 8013120:	080131a5 	.word	0x080131a5
 8013124:	08013197 	.word	0x08013197
 8013128:	2b40      	cmp	r3, #64	@ 0x40
 801312a:	d037      	beq.n	801319c <UART_SetConfig+0x6bc>
 801312c:	e03a      	b.n	80131a4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 801312e:	f7fc fa3f 	bl	800f5b0 <HAL_RCCEx_GetD3PCLK1Freq>
 8013132:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8013134:	e03c      	b.n	80131b0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8013136:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801313a:	4618      	mov	r0, r3
 801313c:	f7fc fa4e 	bl	800f5dc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8013140:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013142:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013144:	e034      	b.n	80131b0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8013146:	f107 0318 	add.w	r3, r7, #24
 801314a:	4618      	mov	r0, r3
 801314c:	f7fc fb9a 	bl	800f884 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8013150:	69fb      	ldr	r3, [r7, #28]
 8013152:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013154:	e02c      	b.n	80131b0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8013156:	4b09      	ldr	r3, [pc, #36]	@ (801317c <UART_SetConfig+0x69c>)
 8013158:	681b      	ldr	r3, [r3, #0]
 801315a:	f003 0320 	and.w	r3, r3, #32
 801315e:	2b00      	cmp	r3, #0
 8013160:	d016      	beq.n	8013190 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8013162:	4b06      	ldr	r3, [pc, #24]	@ (801317c <UART_SetConfig+0x69c>)
 8013164:	681b      	ldr	r3, [r3, #0]
 8013166:	08db      	lsrs	r3, r3, #3
 8013168:	f003 0303 	and.w	r3, r3, #3
 801316c:	4a07      	ldr	r2, [pc, #28]	@ (801318c <UART_SetConfig+0x6ac>)
 801316e:	fa22 f303 	lsr.w	r3, r2, r3
 8013172:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8013174:	e01c      	b.n	80131b0 <UART_SetConfig+0x6d0>
 8013176:	bf00      	nop
 8013178:	40011400 	.word	0x40011400
 801317c:	58024400 	.word	0x58024400
 8013180:	40007800 	.word	0x40007800
 8013184:	40007c00 	.word	0x40007c00
 8013188:	58000c00 	.word	0x58000c00
 801318c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8013190:	4b9d      	ldr	r3, [pc, #628]	@ (8013408 <UART_SetConfig+0x928>)
 8013192:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013194:	e00c      	b.n	80131b0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8013196:	4b9d      	ldr	r3, [pc, #628]	@ (801340c <UART_SetConfig+0x92c>)
 8013198:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801319a:	e009      	b.n	80131b0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801319c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80131a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80131a2:	e005      	b.n	80131b0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80131a4:	2300      	movs	r3, #0
 80131a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80131a8:	2301      	movs	r3, #1
 80131aa:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80131ae:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80131b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80131b2:	2b00      	cmp	r3, #0
 80131b4:	f000 81de 	beq.w	8013574 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80131b8:	697b      	ldr	r3, [r7, #20]
 80131ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80131bc:	4a94      	ldr	r2, [pc, #592]	@ (8013410 <UART_SetConfig+0x930>)
 80131be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80131c2:	461a      	mov	r2, r3
 80131c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80131c6:	fbb3 f3f2 	udiv	r3, r3, r2
 80131ca:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80131cc:	697b      	ldr	r3, [r7, #20]
 80131ce:	685a      	ldr	r2, [r3, #4]
 80131d0:	4613      	mov	r3, r2
 80131d2:	005b      	lsls	r3, r3, #1
 80131d4:	4413      	add	r3, r2
 80131d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80131d8:	429a      	cmp	r2, r3
 80131da:	d305      	bcc.n	80131e8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80131dc:	697b      	ldr	r3, [r7, #20]
 80131de:	685b      	ldr	r3, [r3, #4]
 80131e0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80131e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80131e4:	429a      	cmp	r2, r3
 80131e6:	d903      	bls.n	80131f0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80131e8:	2301      	movs	r3, #1
 80131ea:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80131ee:	e1c1      	b.n	8013574 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80131f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80131f2:	2200      	movs	r2, #0
 80131f4:	60bb      	str	r3, [r7, #8]
 80131f6:	60fa      	str	r2, [r7, #12]
 80131f8:	697b      	ldr	r3, [r7, #20]
 80131fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80131fc:	4a84      	ldr	r2, [pc, #528]	@ (8013410 <UART_SetConfig+0x930>)
 80131fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013202:	b29b      	uxth	r3, r3
 8013204:	2200      	movs	r2, #0
 8013206:	603b      	str	r3, [r7, #0]
 8013208:	607a      	str	r2, [r7, #4]
 801320a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801320e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8013212:	f7ed f8bd 	bl	8000390 <__aeabi_uldivmod>
 8013216:	4602      	mov	r2, r0
 8013218:	460b      	mov	r3, r1
 801321a:	4610      	mov	r0, r2
 801321c:	4619      	mov	r1, r3
 801321e:	f04f 0200 	mov.w	r2, #0
 8013222:	f04f 0300 	mov.w	r3, #0
 8013226:	020b      	lsls	r3, r1, #8
 8013228:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 801322c:	0202      	lsls	r2, r0, #8
 801322e:	6979      	ldr	r1, [r7, #20]
 8013230:	6849      	ldr	r1, [r1, #4]
 8013232:	0849      	lsrs	r1, r1, #1
 8013234:	2000      	movs	r0, #0
 8013236:	460c      	mov	r4, r1
 8013238:	4605      	mov	r5, r0
 801323a:	eb12 0804 	adds.w	r8, r2, r4
 801323e:	eb43 0905 	adc.w	r9, r3, r5
 8013242:	697b      	ldr	r3, [r7, #20]
 8013244:	685b      	ldr	r3, [r3, #4]
 8013246:	2200      	movs	r2, #0
 8013248:	469a      	mov	sl, r3
 801324a:	4693      	mov	fp, r2
 801324c:	4652      	mov	r2, sl
 801324e:	465b      	mov	r3, fp
 8013250:	4640      	mov	r0, r8
 8013252:	4649      	mov	r1, r9
 8013254:	f7ed f89c 	bl	8000390 <__aeabi_uldivmod>
 8013258:	4602      	mov	r2, r0
 801325a:	460b      	mov	r3, r1
 801325c:	4613      	mov	r3, r2
 801325e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8013260:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013262:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8013266:	d308      	bcc.n	801327a <UART_SetConfig+0x79a>
 8013268:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801326a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801326e:	d204      	bcs.n	801327a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8013270:	697b      	ldr	r3, [r7, #20]
 8013272:	681b      	ldr	r3, [r3, #0]
 8013274:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013276:	60da      	str	r2, [r3, #12]
 8013278:	e17c      	b.n	8013574 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 801327a:	2301      	movs	r3, #1
 801327c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8013280:	e178      	b.n	8013574 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013282:	697b      	ldr	r3, [r7, #20]
 8013284:	69db      	ldr	r3, [r3, #28]
 8013286:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801328a:	f040 80c5 	bne.w	8013418 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 801328e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8013292:	2b20      	cmp	r3, #32
 8013294:	dc48      	bgt.n	8013328 <UART_SetConfig+0x848>
 8013296:	2b00      	cmp	r3, #0
 8013298:	db7b      	blt.n	8013392 <UART_SetConfig+0x8b2>
 801329a:	2b20      	cmp	r3, #32
 801329c:	d879      	bhi.n	8013392 <UART_SetConfig+0x8b2>
 801329e:	a201      	add	r2, pc, #4	@ (adr r2, 80132a4 <UART_SetConfig+0x7c4>)
 80132a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80132a4:	0801332f 	.word	0x0801332f
 80132a8:	08013337 	.word	0x08013337
 80132ac:	08013393 	.word	0x08013393
 80132b0:	08013393 	.word	0x08013393
 80132b4:	0801333f 	.word	0x0801333f
 80132b8:	08013393 	.word	0x08013393
 80132bc:	08013393 	.word	0x08013393
 80132c0:	08013393 	.word	0x08013393
 80132c4:	0801334f 	.word	0x0801334f
 80132c8:	08013393 	.word	0x08013393
 80132cc:	08013393 	.word	0x08013393
 80132d0:	08013393 	.word	0x08013393
 80132d4:	08013393 	.word	0x08013393
 80132d8:	08013393 	.word	0x08013393
 80132dc:	08013393 	.word	0x08013393
 80132e0:	08013393 	.word	0x08013393
 80132e4:	0801335f 	.word	0x0801335f
 80132e8:	08013393 	.word	0x08013393
 80132ec:	08013393 	.word	0x08013393
 80132f0:	08013393 	.word	0x08013393
 80132f4:	08013393 	.word	0x08013393
 80132f8:	08013393 	.word	0x08013393
 80132fc:	08013393 	.word	0x08013393
 8013300:	08013393 	.word	0x08013393
 8013304:	08013393 	.word	0x08013393
 8013308:	08013393 	.word	0x08013393
 801330c:	08013393 	.word	0x08013393
 8013310:	08013393 	.word	0x08013393
 8013314:	08013393 	.word	0x08013393
 8013318:	08013393 	.word	0x08013393
 801331c:	08013393 	.word	0x08013393
 8013320:	08013393 	.word	0x08013393
 8013324:	08013385 	.word	0x08013385
 8013328:	2b40      	cmp	r3, #64	@ 0x40
 801332a:	d02e      	beq.n	801338a <UART_SetConfig+0x8aa>
 801332c:	e031      	b.n	8013392 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801332e:	f7fa ff09 	bl	800e144 <HAL_RCC_GetPCLK1Freq>
 8013332:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8013334:	e033      	b.n	801339e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8013336:	f7fa ff1b 	bl	800e170 <HAL_RCC_GetPCLK2Freq>
 801333a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 801333c:	e02f      	b.n	801339e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801333e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8013342:	4618      	mov	r0, r3
 8013344:	f7fc f94a 	bl	800f5dc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8013348:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801334a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801334c:	e027      	b.n	801339e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801334e:	f107 0318 	add.w	r3, r7, #24
 8013352:	4618      	mov	r0, r3
 8013354:	f7fc fa96 	bl	800f884 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8013358:	69fb      	ldr	r3, [r7, #28]
 801335a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801335c:	e01f      	b.n	801339e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801335e:	4b2d      	ldr	r3, [pc, #180]	@ (8013414 <UART_SetConfig+0x934>)
 8013360:	681b      	ldr	r3, [r3, #0]
 8013362:	f003 0320 	and.w	r3, r3, #32
 8013366:	2b00      	cmp	r3, #0
 8013368:	d009      	beq.n	801337e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801336a:	4b2a      	ldr	r3, [pc, #168]	@ (8013414 <UART_SetConfig+0x934>)
 801336c:	681b      	ldr	r3, [r3, #0]
 801336e:	08db      	lsrs	r3, r3, #3
 8013370:	f003 0303 	and.w	r3, r3, #3
 8013374:	4a24      	ldr	r2, [pc, #144]	@ (8013408 <UART_SetConfig+0x928>)
 8013376:	fa22 f303 	lsr.w	r3, r2, r3
 801337a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801337c:	e00f      	b.n	801339e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 801337e:	4b22      	ldr	r3, [pc, #136]	@ (8013408 <UART_SetConfig+0x928>)
 8013380:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013382:	e00c      	b.n	801339e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8013384:	4b21      	ldr	r3, [pc, #132]	@ (801340c <UART_SetConfig+0x92c>)
 8013386:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013388:	e009      	b.n	801339e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801338a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801338e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013390:	e005      	b.n	801339e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8013392:	2300      	movs	r3, #0
 8013394:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8013396:	2301      	movs	r3, #1
 8013398:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 801339c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801339e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80133a0:	2b00      	cmp	r3, #0
 80133a2:	f000 80e7 	beq.w	8013574 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80133a6:	697b      	ldr	r3, [r7, #20]
 80133a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80133aa:	4a19      	ldr	r2, [pc, #100]	@ (8013410 <UART_SetConfig+0x930>)
 80133ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80133b0:	461a      	mov	r2, r3
 80133b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80133b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80133b8:	005a      	lsls	r2, r3, #1
 80133ba:	697b      	ldr	r3, [r7, #20]
 80133bc:	685b      	ldr	r3, [r3, #4]
 80133be:	085b      	lsrs	r3, r3, #1
 80133c0:	441a      	add	r2, r3
 80133c2:	697b      	ldr	r3, [r7, #20]
 80133c4:	685b      	ldr	r3, [r3, #4]
 80133c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80133ca:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80133cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80133ce:	2b0f      	cmp	r3, #15
 80133d0:	d916      	bls.n	8013400 <UART_SetConfig+0x920>
 80133d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80133d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80133d8:	d212      	bcs.n	8013400 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80133da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80133dc:	b29b      	uxth	r3, r3
 80133de:	f023 030f 	bic.w	r3, r3, #15
 80133e2:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80133e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80133e6:	085b      	lsrs	r3, r3, #1
 80133e8:	b29b      	uxth	r3, r3
 80133ea:	f003 0307 	and.w	r3, r3, #7
 80133ee:	b29a      	uxth	r2, r3
 80133f0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80133f2:	4313      	orrs	r3, r2
 80133f4:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80133f6:	697b      	ldr	r3, [r7, #20]
 80133f8:	681b      	ldr	r3, [r3, #0]
 80133fa:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80133fc:	60da      	str	r2, [r3, #12]
 80133fe:	e0b9      	b.n	8013574 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8013400:	2301      	movs	r3, #1
 8013402:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8013406:	e0b5      	b.n	8013574 <UART_SetConfig+0xa94>
 8013408:	03d09000 	.word	0x03d09000
 801340c:	003d0900 	.word	0x003d0900
 8013410:	0801b6d4 	.word	0x0801b6d4
 8013414:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8013418:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 801341c:	2b20      	cmp	r3, #32
 801341e:	dc49      	bgt.n	80134b4 <UART_SetConfig+0x9d4>
 8013420:	2b00      	cmp	r3, #0
 8013422:	db7c      	blt.n	801351e <UART_SetConfig+0xa3e>
 8013424:	2b20      	cmp	r3, #32
 8013426:	d87a      	bhi.n	801351e <UART_SetConfig+0xa3e>
 8013428:	a201      	add	r2, pc, #4	@ (adr r2, 8013430 <UART_SetConfig+0x950>)
 801342a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801342e:	bf00      	nop
 8013430:	080134bb 	.word	0x080134bb
 8013434:	080134c3 	.word	0x080134c3
 8013438:	0801351f 	.word	0x0801351f
 801343c:	0801351f 	.word	0x0801351f
 8013440:	080134cb 	.word	0x080134cb
 8013444:	0801351f 	.word	0x0801351f
 8013448:	0801351f 	.word	0x0801351f
 801344c:	0801351f 	.word	0x0801351f
 8013450:	080134db 	.word	0x080134db
 8013454:	0801351f 	.word	0x0801351f
 8013458:	0801351f 	.word	0x0801351f
 801345c:	0801351f 	.word	0x0801351f
 8013460:	0801351f 	.word	0x0801351f
 8013464:	0801351f 	.word	0x0801351f
 8013468:	0801351f 	.word	0x0801351f
 801346c:	0801351f 	.word	0x0801351f
 8013470:	080134eb 	.word	0x080134eb
 8013474:	0801351f 	.word	0x0801351f
 8013478:	0801351f 	.word	0x0801351f
 801347c:	0801351f 	.word	0x0801351f
 8013480:	0801351f 	.word	0x0801351f
 8013484:	0801351f 	.word	0x0801351f
 8013488:	0801351f 	.word	0x0801351f
 801348c:	0801351f 	.word	0x0801351f
 8013490:	0801351f 	.word	0x0801351f
 8013494:	0801351f 	.word	0x0801351f
 8013498:	0801351f 	.word	0x0801351f
 801349c:	0801351f 	.word	0x0801351f
 80134a0:	0801351f 	.word	0x0801351f
 80134a4:	0801351f 	.word	0x0801351f
 80134a8:	0801351f 	.word	0x0801351f
 80134ac:	0801351f 	.word	0x0801351f
 80134b0:	08013511 	.word	0x08013511
 80134b4:	2b40      	cmp	r3, #64	@ 0x40
 80134b6:	d02e      	beq.n	8013516 <UART_SetConfig+0xa36>
 80134b8:	e031      	b.n	801351e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80134ba:	f7fa fe43 	bl	800e144 <HAL_RCC_GetPCLK1Freq>
 80134be:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80134c0:	e033      	b.n	801352a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80134c2:	f7fa fe55 	bl	800e170 <HAL_RCC_GetPCLK2Freq>
 80134c6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80134c8:	e02f      	b.n	801352a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80134ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80134ce:	4618      	mov	r0, r3
 80134d0:	f7fc f884 	bl	800f5dc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80134d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80134d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80134d8:	e027      	b.n	801352a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80134da:	f107 0318 	add.w	r3, r7, #24
 80134de:	4618      	mov	r0, r3
 80134e0:	f7fc f9d0 	bl	800f884 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80134e4:	69fb      	ldr	r3, [r7, #28]
 80134e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80134e8:	e01f      	b.n	801352a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80134ea:	4b2d      	ldr	r3, [pc, #180]	@ (80135a0 <UART_SetConfig+0xac0>)
 80134ec:	681b      	ldr	r3, [r3, #0]
 80134ee:	f003 0320 	and.w	r3, r3, #32
 80134f2:	2b00      	cmp	r3, #0
 80134f4:	d009      	beq.n	801350a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80134f6:	4b2a      	ldr	r3, [pc, #168]	@ (80135a0 <UART_SetConfig+0xac0>)
 80134f8:	681b      	ldr	r3, [r3, #0]
 80134fa:	08db      	lsrs	r3, r3, #3
 80134fc:	f003 0303 	and.w	r3, r3, #3
 8013500:	4a28      	ldr	r2, [pc, #160]	@ (80135a4 <UART_SetConfig+0xac4>)
 8013502:	fa22 f303 	lsr.w	r3, r2, r3
 8013506:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8013508:	e00f      	b.n	801352a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 801350a:	4b26      	ldr	r3, [pc, #152]	@ (80135a4 <UART_SetConfig+0xac4>)
 801350c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801350e:	e00c      	b.n	801352a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8013510:	4b25      	ldr	r3, [pc, #148]	@ (80135a8 <UART_SetConfig+0xac8>)
 8013512:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013514:	e009      	b.n	801352a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8013516:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801351a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801351c:	e005      	b.n	801352a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 801351e:	2300      	movs	r3, #0
 8013520:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8013522:	2301      	movs	r3, #1
 8013524:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8013528:	bf00      	nop
    }

    if (pclk != 0U)
 801352a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801352c:	2b00      	cmp	r3, #0
 801352e:	d021      	beq.n	8013574 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8013530:	697b      	ldr	r3, [r7, #20]
 8013532:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013534:	4a1d      	ldr	r2, [pc, #116]	@ (80135ac <UART_SetConfig+0xacc>)
 8013536:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801353a:	461a      	mov	r2, r3
 801353c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801353e:	fbb3 f2f2 	udiv	r2, r3, r2
 8013542:	697b      	ldr	r3, [r7, #20]
 8013544:	685b      	ldr	r3, [r3, #4]
 8013546:	085b      	lsrs	r3, r3, #1
 8013548:	441a      	add	r2, r3
 801354a:	697b      	ldr	r3, [r7, #20]
 801354c:	685b      	ldr	r3, [r3, #4]
 801354e:	fbb2 f3f3 	udiv	r3, r2, r3
 8013552:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8013554:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013556:	2b0f      	cmp	r3, #15
 8013558:	d909      	bls.n	801356e <UART_SetConfig+0xa8e>
 801355a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801355c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013560:	d205      	bcs.n	801356e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8013562:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013564:	b29a      	uxth	r2, r3
 8013566:	697b      	ldr	r3, [r7, #20]
 8013568:	681b      	ldr	r3, [r3, #0]
 801356a:	60da      	str	r2, [r3, #12]
 801356c:	e002      	b.n	8013574 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 801356e:	2301      	movs	r3, #1
 8013570:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8013574:	697b      	ldr	r3, [r7, #20]
 8013576:	2201      	movs	r2, #1
 8013578:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 801357c:	697b      	ldr	r3, [r7, #20]
 801357e:	2201      	movs	r2, #1
 8013580:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8013584:	697b      	ldr	r3, [r7, #20]
 8013586:	2200      	movs	r2, #0
 8013588:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 801358a:	697b      	ldr	r3, [r7, #20]
 801358c:	2200      	movs	r2, #0
 801358e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8013590:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8013594:	4618      	mov	r0, r3
 8013596:	3748      	adds	r7, #72	@ 0x48
 8013598:	46bd      	mov	sp, r7
 801359a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801359e:	bf00      	nop
 80135a0:	58024400 	.word	0x58024400
 80135a4:	03d09000 	.word	0x03d09000
 80135a8:	003d0900 	.word	0x003d0900
 80135ac:	0801b6d4 	.word	0x0801b6d4

080135b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80135b0:	b480      	push	{r7}
 80135b2:	b083      	sub	sp, #12
 80135b4:	af00      	add	r7, sp, #0
 80135b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80135b8:	687b      	ldr	r3, [r7, #4]
 80135ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80135bc:	f003 0308 	and.w	r3, r3, #8
 80135c0:	2b00      	cmp	r3, #0
 80135c2:	d00a      	beq.n	80135da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80135c4:	687b      	ldr	r3, [r7, #4]
 80135c6:	681b      	ldr	r3, [r3, #0]
 80135c8:	685b      	ldr	r3, [r3, #4]
 80135ca:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80135ce:	687b      	ldr	r3, [r7, #4]
 80135d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80135d2:	687b      	ldr	r3, [r7, #4]
 80135d4:	681b      	ldr	r3, [r3, #0]
 80135d6:	430a      	orrs	r2, r1
 80135d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80135da:	687b      	ldr	r3, [r7, #4]
 80135dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80135de:	f003 0301 	and.w	r3, r3, #1
 80135e2:	2b00      	cmp	r3, #0
 80135e4:	d00a      	beq.n	80135fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80135e6:	687b      	ldr	r3, [r7, #4]
 80135e8:	681b      	ldr	r3, [r3, #0]
 80135ea:	685b      	ldr	r3, [r3, #4]
 80135ec:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80135f0:	687b      	ldr	r3, [r7, #4]
 80135f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80135f4:	687b      	ldr	r3, [r7, #4]
 80135f6:	681b      	ldr	r3, [r3, #0]
 80135f8:	430a      	orrs	r2, r1
 80135fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80135fc:	687b      	ldr	r3, [r7, #4]
 80135fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013600:	f003 0302 	and.w	r3, r3, #2
 8013604:	2b00      	cmp	r3, #0
 8013606:	d00a      	beq.n	801361e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8013608:	687b      	ldr	r3, [r7, #4]
 801360a:	681b      	ldr	r3, [r3, #0]
 801360c:	685b      	ldr	r3, [r3, #4]
 801360e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8013612:	687b      	ldr	r3, [r7, #4]
 8013614:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8013616:	687b      	ldr	r3, [r7, #4]
 8013618:	681b      	ldr	r3, [r3, #0]
 801361a:	430a      	orrs	r2, r1
 801361c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801361e:	687b      	ldr	r3, [r7, #4]
 8013620:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013622:	f003 0304 	and.w	r3, r3, #4
 8013626:	2b00      	cmp	r3, #0
 8013628:	d00a      	beq.n	8013640 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801362a:	687b      	ldr	r3, [r7, #4]
 801362c:	681b      	ldr	r3, [r3, #0]
 801362e:	685b      	ldr	r3, [r3, #4]
 8013630:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8013634:	687b      	ldr	r3, [r7, #4]
 8013636:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8013638:	687b      	ldr	r3, [r7, #4]
 801363a:	681b      	ldr	r3, [r3, #0]
 801363c:	430a      	orrs	r2, r1
 801363e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8013640:	687b      	ldr	r3, [r7, #4]
 8013642:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013644:	f003 0310 	and.w	r3, r3, #16
 8013648:	2b00      	cmp	r3, #0
 801364a:	d00a      	beq.n	8013662 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801364c:	687b      	ldr	r3, [r7, #4]
 801364e:	681b      	ldr	r3, [r3, #0]
 8013650:	689b      	ldr	r3, [r3, #8]
 8013652:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8013656:	687b      	ldr	r3, [r7, #4]
 8013658:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801365a:	687b      	ldr	r3, [r7, #4]
 801365c:	681b      	ldr	r3, [r3, #0]
 801365e:	430a      	orrs	r2, r1
 8013660:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8013662:	687b      	ldr	r3, [r7, #4]
 8013664:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013666:	f003 0320 	and.w	r3, r3, #32
 801366a:	2b00      	cmp	r3, #0
 801366c:	d00a      	beq.n	8013684 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801366e:	687b      	ldr	r3, [r7, #4]
 8013670:	681b      	ldr	r3, [r3, #0]
 8013672:	689b      	ldr	r3, [r3, #8]
 8013674:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8013678:	687b      	ldr	r3, [r7, #4]
 801367a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801367c:	687b      	ldr	r3, [r7, #4]
 801367e:	681b      	ldr	r3, [r3, #0]
 8013680:	430a      	orrs	r2, r1
 8013682:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8013684:	687b      	ldr	r3, [r7, #4]
 8013686:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013688:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801368c:	2b00      	cmp	r3, #0
 801368e:	d01a      	beq.n	80136c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8013690:	687b      	ldr	r3, [r7, #4]
 8013692:	681b      	ldr	r3, [r3, #0]
 8013694:	685b      	ldr	r3, [r3, #4]
 8013696:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 801369a:	687b      	ldr	r3, [r7, #4]
 801369c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801369e:	687b      	ldr	r3, [r7, #4]
 80136a0:	681b      	ldr	r3, [r3, #0]
 80136a2:	430a      	orrs	r2, r1
 80136a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80136a6:	687b      	ldr	r3, [r7, #4]
 80136a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80136aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80136ae:	d10a      	bne.n	80136c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80136b0:	687b      	ldr	r3, [r7, #4]
 80136b2:	681b      	ldr	r3, [r3, #0]
 80136b4:	685b      	ldr	r3, [r3, #4]
 80136b6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80136ba:	687b      	ldr	r3, [r7, #4]
 80136bc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80136be:	687b      	ldr	r3, [r7, #4]
 80136c0:	681b      	ldr	r3, [r3, #0]
 80136c2:	430a      	orrs	r2, r1
 80136c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80136c6:	687b      	ldr	r3, [r7, #4]
 80136c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80136ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80136ce:	2b00      	cmp	r3, #0
 80136d0:	d00a      	beq.n	80136e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80136d2:	687b      	ldr	r3, [r7, #4]
 80136d4:	681b      	ldr	r3, [r3, #0]
 80136d6:	685b      	ldr	r3, [r3, #4]
 80136d8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80136dc:	687b      	ldr	r3, [r7, #4]
 80136de:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80136e0:	687b      	ldr	r3, [r7, #4]
 80136e2:	681b      	ldr	r3, [r3, #0]
 80136e4:	430a      	orrs	r2, r1
 80136e6:	605a      	str	r2, [r3, #4]
  }
}
 80136e8:	bf00      	nop
 80136ea:	370c      	adds	r7, #12
 80136ec:	46bd      	mov	sp, r7
 80136ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136f2:	4770      	bx	lr

080136f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80136f4:	b580      	push	{r7, lr}
 80136f6:	b098      	sub	sp, #96	@ 0x60
 80136f8:	af02      	add	r7, sp, #8
 80136fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80136fc:	687b      	ldr	r3, [r7, #4]
 80136fe:	2200      	movs	r2, #0
 8013700:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8013704:	f7ef fee6 	bl	80034d4 <HAL_GetTick>
 8013708:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801370a:	687b      	ldr	r3, [r7, #4]
 801370c:	681b      	ldr	r3, [r3, #0]
 801370e:	681b      	ldr	r3, [r3, #0]
 8013710:	f003 0308 	and.w	r3, r3, #8
 8013714:	2b08      	cmp	r3, #8
 8013716:	d12f      	bne.n	8013778 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8013718:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 801371c:	9300      	str	r3, [sp, #0]
 801371e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013720:	2200      	movs	r2, #0
 8013722:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8013726:	6878      	ldr	r0, [r7, #4]
 8013728:	f000 f88e 	bl	8013848 <UART_WaitOnFlagUntilTimeout>
 801372c:	4603      	mov	r3, r0
 801372e:	2b00      	cmp	r3, #0
 8013730:	d022      	beq.n	8013778 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8013732:	687b      	ldr	r3, [r7, #4]
 8013734:	681b      	ldr	r3, [r3, #0]
 8013736:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013738:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801373a:	e853 3f00 	ldrex	r3, [r3]
 801373e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8013740:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013742:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8013746:	653b      	str	r3, [r7, #80]	@ 0x50
 8013748:	687b      	ldr	r3, [r7, #4]
 801374a:	681b      	ldr	r3, [r3, #0]
 801374c:	461a      	mov	r2, r3
 801374e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013750:	647b      	str	r3, [r7, #68]	@ 0x44
 8013752:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013754:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8013756:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8013758:	e841 2300 	strex	r3, r2, [r1]
 801375c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801375e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013760:	2b00      	cmp	r3, #0
 8013762:	d1e6      	bne.n	8013732 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8013764:	687b      	ldr	r3, [r7, #4]
 8013766:	2220      	movs	r2, #32
 8013768:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 801376c:	687b      	ldr	r3, [r7, #4]
 801376e:	2200      	movs	r2, #0
 8013770:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8013774:	2303      	movs	r3, #3
 8013776:	e063      	b.n	8013840 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8013778:	687b      	ldr	r3, [r7, #4]
 801377a:	681b      	ldr	r3, [r3, #0]
 801377c:	681b      	ldr	r3, [r3, #0]
 801377e:	f003 0304 	and.w	r3, r3, #4
 8013782:	2b04      	cmp	r3, #4
 8013784:	d149      	bne.n	801381a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8013786:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 801378a:	9300      	str	r3, [sp, #0]
 801378c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801378e:	2200      	movs	r2, #0
 8013790:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8013794:	6878      	ldr	r0, [r7, #4]
 8013796:	f000 f857 	bl	8013848 <UART_WaitOnFlagUntilTimeout>
 801379a:	4603      	mov	r3, r0
 801379c:	2b00      	cmp	r3, #0
 801379e:	d03c      	beq.n	801381a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80137a0:	687b      	ldr	r3, [r7, #4]
 80137a2:	681b      	ldr	r3, [r3, #0]
 80137a4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80137a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80137a8:	e853 3f00 	ldrex	r3, [r3]
 80137ac:	623b      	str	r3, [r7, #32]
   return(result);
 80137ae:	6a3b      	ldr	r3, [r7, #32]
 80137b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80137b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80137b6:	687b      	ldr	r3, [r7, #4]
 80137b8:	681b      	ldr	r3, [r3, #0]
 80137ba:	461a      	mov	r2, r3
 80137bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80137be:	633b      	str	r3, [r7, #48]	@ 0x30
 80137c0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80137c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80137c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80137c6:	e841 2300 	strex	r3, r2, [r1]
 80137ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80137cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80137ce:	2b00      	cmp	r3, #0
 80137d0:	d1e6      	bne.n	80137a0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80137d2:	687b      	ldr	r3, [r7, #4]
 80137d4:	681b      	ldr	r3, [r3, #0]
 80137d6:	3308      	adds	r3, #8
 80137d8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80137da:	693b      	ldr	r3, [r7, #16]
 80137dc:	e853 3f00 	ldrex	r3, [r3]
 80137e0:	60fb      	str	r3, [r7, #12]
   return(result);
 80137e2:	68fb      	ldr	r3, [r7, #12]
 80137e4:	f023 0301 	bic.w	r3, r3, #1
 80137e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80137ea:	687b      	ldr	r3, [r7, #4]
 80137ec:	681b      	ldr	r3, [r3, #0]
 80137ee:	3308      	adds	r3, #8
 80137f0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80137f2:	61fa      	str	r2, [r7, #28]
 80137f4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80137f6:	69b9      	ldr	r1, [r7, #24]
 80137f8:	69fa      	ldr	r2, [r7, #28]
 80137fa:	e841 2300 	strex	r3, r2, [r1]
 80137fe:	617b      	str	r3, [r7, #20]
   return(result);
 8013800:	697b      	ldr	r3, [r7, #20]
 8013802:	2b00      	cmp	r3, #0
 8013804:	d1e5      	bne.n	80137d2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8013806:	687b      	ldr	r3, [r7, #4]
 8013808:	2220      	movs	r2, #32
 801380a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 801380e:	687b      	ldr	r3, [r7, #4]
 8013810:	2200      	movs	r2, #0
 8013812:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8013816:	2303      	movs	r3, #3
 8013818:	e012      	b.n	8013840 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801381a:	687b      	ldr	r3, [r7, #4]
 801381c:	2220      	movs	r2, #32
 801381e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8013822:	687b      	ldr	r3, [r7, #4]
 8013824:	2220      	movs	r2, #32
 8013826:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801382a:	687b      	ldr	r3, [r7, #4]
 801382c:	2200      	movs	r2, #0
 801382e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8013830:	687b      	ldr	r3, [r7, #4]
 8013832:	2200      	movs	r2, #0
 8013834:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8013836:	687b      	ldr	r3, [r7, #4]
 8013838:	2200      	movs	r2, #0
 801383a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801383e:	2300      	movs	r3, #0
}
 8013840:	4618      	mov	r0, r3
 8013842:	3758      	adds	r7, #88	@ 0x58
 8013844:	46bd      	mov	sp, r7
 8013846:	bd80      	pop	{r7, pc}

08013848 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8013848:	b580      	push	{r7, lr}
 801384a:	b084      	sub	sp, #16
 801384c:	af00      	add	r7, sp, #0
 801384e:	60f8      	str	r0, [r7, #12]
 8013850:	60b9      	str	r1, [r7, #8]
 8013852:	603b      	str	r3, [r7, #0]
 8013854:	4613      	mov	r3, r2
 8013856:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8013858:	e04f      	b.n	80138fa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801385a:	69bb      	ldr	r3, [r7, #24]
 801385c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013860:	d04b      	beq.n	80138fa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8013862:	f7ef fe37 	bl	80034d4 <HAL_GetTick>
 8013866:	4602      	mov	r2, r0
 8013868:	683b      	ldr	r3, [r7, #0]
 801386a:	1ad3      	subs	r3, r2, r3
 801386c:	69ba      	ldr	r2, [r7, #24]
 801386e:	429a      	cmp	r2, r3
 8013870:	d302      	bcc.n	8013878 <UART_WaitOnFlagUntilTimeout+0x30>
 8013872:	69bb      	ldr	r3, [r7, #24]
 8013874:	2b00      	cmp	r3, #0
 8013876:	d101      	bne.n	801387c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8013878:	2303      	movs	r3, #3
 801387a:	e04e      	b.n	801391a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 801387c:	68fb      	ldr	r3, [r7, #12]
 801387e:	681b      	ldr	r3, [r3, #0]
 8013880:	681b      	ldr	r3, [r3, #0]
 8013882:	f003 0304 	and.w	r3, r3, #4
 8013886:	2b00      	cmp	r3, #0
 8013888:	d037      	beq.n	80138fa <UART_WaitOnFlagUntilTimeout+0xb2>
 801388a:	68bb      	ldr	r3, [r7, #8]
 801388c:	2b80      	cmp	r3, #128	@ 0x80
 801388e:	d034      	beq.n	80138fa <UART_WaitOnFlagUntilTimeout+0xb2>
 8013890:	68bb      	ldr	r3, [r7, #8]
 8013892:	2b40      	cmp	r3, #64	@ 0x40
 8013894:	d031      	beq.n	80138fa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8013896:	68fb      	ldr	r3, [r7, #12]
 8013898:	681b      	ldr	r3, [r3, #0]
 801389a:	69db      	ldr	r3, [r3, #28]
 801389c:	f003 0308 	and.w	r3, r3, #8
 80138a0:	2b08      	cmp	r3, #8
 80138a2:	d110      	bne.n	80138c6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80138a4:	68fb      	ldr	r3, [r7, #12]
 80138a6:	681b      	ldr	r3, [r3, #0]
 80138a8:	2208      	movs	r2, #8
 80138aa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80138ac:	68f8      	ldr	r0, [r7, #12]
 80138ae:	f000 f921 	bl	8013af4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80138b2:	68fb      	ldr	r3, [r7, #12]
 80138b4:	2208      	movs	r2, #8
 80138b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80138ba:	68fb      	ldr	r3, [r7, #12]
 80138bc:	2200      	movs	r2, #0
 80138be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80138c2:	2301      	movs	r3, #1
 80138c4:	e029      	b.n	801391a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80138c6:	68fb      	ldr	r3, [r7, #12]
 80138c8:	681b      	ldr	r3, [r3, #0]
 80138ca:	69db      	ldr	r3, [r3, #28]
 80138cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80138d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80138d4:	d111      	bne.n	80138fa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80138d6:	68fb      	ldr	r3, [r7, #12]
 80138d8:	681b      	ldr	r3, [r3, #0]
 80138da:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80138de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80138e0:	68f8      	ldr	r0, [r7, #12]
 80138e2:	f000 f907 	bl	8013af4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80138e6:	68fb      	ldr	r3, [r7, #12]
 80138e8:	2220      	movs	r2, #32
 80138ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80138ee:	68fb      	ldr	r3, [r7, #12]
 80138f0:	2200      	movs	r2, #0
 80138f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80138f6:	2303      	movs	r3, #3
 80138f8:	e00f      	b.n	801391a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80138fa:	68fb      	ldr	r3, [r7, #12]
 80138fc:	681b      	ldr	r3, [r3, #0]
 80138fe:	69da      	ldr	r2, [r3, #28]
 8013900:	68bb      	ldr	r3, [r7, #8]
 8013902:	4013      	ands	r3, r2
 8013904:	68ba      	ldr	r2, [r7, #8]
 8013906:	429a      	cmp	r2, r3
 8013908:	bf0c      	ite	eq
 801390a:	2301      	moveq	r3, #1
 801390c:	2300      	movne	r3, #0
 801390e:	b2db      	uxtb	r3, r3
 8013910:	461a      	mov	r2, r3
 8013912:	79fb      	ldrb	r3, [r7, #7]
 8013914:	429a      	cmp	r2, r3
 8013916:	d0a0      	beq.n	801385a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8013918:	2300      	movs	r3, #0
}
 801391a:	4618      	mov	r0, r3
 801391c:	3710      	adds	r7, #16
 801391e:	46bd      	mov	sp, r7
 8013920:	bd80      	pop	{r7, pc}
	...

08013924 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8013924:	b580      	push	{r7, lr}
 8013926:	b096      	sub	sp, #88	@ 0x58
 8013928:	af00      	add	r7, sp, #0
 801392a:	60f8      	str	r0, [r7, #12]
 801392c:	60b9      	str	r1, [r7, #8]
 801392e:	4613      	mov	r3, r2
 8013930:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8013932:	68fb      	ldr	r3, [r7, #12]
 8013934:	68ba      	ldr	r2, [r7, #8]
 8013936:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8013938:	68fb      	ldr	r3, [r7, #12]
 801393a:	88fa      	ldrh	r2, [r7, #6]
 801393c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013940:	68fb      	ldr	r3, [r7, #12]
 8013942:	2200      	movs	r2, #0
 8013944:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8013948:	68fb      	ldr	r3, [r7, #12]
 801394a:	2222      	movs	r2, #34	@ 0x22
 801394c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8013950:	68fb      	ldr	r3, [r7, #12]
 8013952:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013956:	2b00      	cmp	r3, #0
 8013958:	d02d      	beq.n	80139b6 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 801395a:	68fb      	ldr	r3, [r7, #12]
 801395c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013960:	4a40      	ldr	r2, [pc, #256]	@ (8013a64 <UART_Start_Receive_DMA+0x140>)
 8013962:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8013964:	68fb      	ldr	r3, [r7, #12]
 8013966:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801396a:	4a3f      	ldr	r2, [pc, #252]	@ (8013a68 <UART_Start_Receive_DMA+0x144>)
 801396c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 801396e:	68fb      	ldr	r3, [r7, #12]
 8013970:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013974:	4a3d      	ldr	r2, [pc, #244]	@ (8013a6c <UART_Start_Receive_DMA+0x148>)
 8013976:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8013978:	68fb      	ldr	r3, [r7, #12]
 801397a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801397e:	2200      	movs	r2, #0
 8013980:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8013982:	68fb      	ldr	r3, [r7, #12]
 8013984:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8013988:	68fb      	ldr	r3, [r7, #12]
 801398a:	681b      	ldr	r3, [r3, #0]
 801398c:	3324      	adds	r3, #36	@ 0x24
 801398e:	4619      	mov	r1, r3
 8013990:	68fb      	ldr	r3, [r7, #12]
 8013992:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013994:	461a      	mov	r2, r3
 8013996:	88fb      	ldrh	r3, [r7, #6]
 8013998:	f7f0 fda8 	bl	80044ec <HAL_DMA_Start_IT>
 801399c:	4603      	mov	r3, r0
 801399e:	2b00      	cmp	r3, #0
 80139a0:	d009      	beq.n	80139b6 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80139a2:	68fb      	ldr	r3, [r7, #12]
 80139a4:	2210      	movs	r2, #16
 80139a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80139aa:	68fb      	ldr	r3, [r7, #12]
 80139ac:	2220      	movs	r2, #32
 80139ae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 80139b2:	2301      	movs	r3, #1
 80139b4:	e051      	b.n	8013a5a <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80139b6:	68fb      	ldr	r3, [r7, #12]
 80139b8:	691b      	ldr	r3, [r3, #16]
 80139ba:	2b00      	cmp	r3, #0
 80139bc:	d018      	beq.n	80139f0 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80139be:	68fb      	ldr	r3, [r7, #12]
 80139c0:	681b      	ldr	r3, [r3, #0]
 80139c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80139c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80139c6:	e853 3f00 	ldrex	r3, [r3]
 80139ca:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80139cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80139ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80139d2:	657b      	str	r3, [r7, #84]	@ 0x54
 80139d4:	68fb      	ldr	r3, [r7, #12]
 80139d6:	681b      	ldr	r3, [r3, #0]
 80139d8:	461a      	mov	r2, r3
 80139da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80139dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80139de:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80139e0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80139e2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80139e4:	e841 2300 	strex	r3, r2, [r1]
 80139e8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80139ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80139ec:	2b00      	cmp	r3, #0
 80139ee:	d1e6      	bne.n	80139be <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80139f0:	68fb      	ldr	r3, [r7, #12]
 80139f2:	681b      	ldr	r3, [r3, #0]
 80139f4:	3308      	adds	r3, #8
 80139f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80139f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80139fa:	e853 3f00 	ldrex	r3, [r3]
 80139fe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8013a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013a02:	f043 0301 	orr.w	r3, r3, #1
 8013a06:	653b      	str	r3, [r7, #80]	@ 0x50
 8013a08:	68fb      	ldr	r3, [r7, #12]
 8013a0a:	681b      	ldr	r3, [r3, #0]
 8013a0c:	3308      	adds	r3, #8
 8013a0e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8013a10:	637a      	str	r2, [r7, #52]	@ 0x34
 8013a12:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013a14:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8013a16:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013a18:	e841 2300 	strex	r3, r2, [r1]
 8013a1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8013a1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013a20:	2b00      	cmp	r3, #0
 8013a22:	d1e5      	bne.n	80139f0 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8013a24:	68fb      	ldr	r3, [r7, #12]
 8013a26:	681b      	ldr	r3, [r3, #0]
 8013a28:	3308      	adds	r3, #8
 8013a2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013a2c:	697b      	ldr	r3, [r7, #20]
 8013a2e:	e853 3f00 	ldrex	r3, [r3]
 8013a32:	613b      	str	r3, [r7, #16]
   return(result);
 8013a34:	693b      	ldr	r3, [r7, #16]
 8013a36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013a3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8013a3c:	68fb      	ldr	r3, [r7, #12]
 8013a3e:	681b      	ldr	r3, [r3, #0]
 8013a40:	3308      	adds	r3, #8
 8013a42:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8013a44:	623a      	str	r2, [r7, #32]
 8013a46:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013a48:	69f9      	ldr	r1, [r7, #28]
 8013a4a:	6a3a      	ldr	r2, [r7, #32]
 8013a4c:	e841 2300 	strex	r3, r2, [r1]
 8013a50:	61bb      	str	r3, [r7, #24]
   return(result);
 8013a52:	69bb      	ldr	r3, [r7, #24]
 8013a54:	2b00      	cmp	r3, #0
 8013a56:	d1e5      	bne.n	8013a24 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8013a58:	2300      	movs	r3, #0
}
 8013a5a:	4618      	mov	r0, r3
 8013a5c:	3758      	adds	r7, #88	@ 0x58
 8013a5e:	46bd      	mov	sp, r7
 8013a60:	bd80      	pop	{r7, pc}
 8013a62:	bf00      	nop
 8013a64:	08013bc1 	.word	0x08013bc1
 8013a68:	08013ce9 	.word	0x08013ce9
 8013a6c:	08013d27 	.word	0x08013d27

08013a70 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8013a70:	b480      	push	{r7}
 8013a72:	b08f      	sub	sp, #60	@ 0x3c
 8013a74:	af00      	add	r7, sp, #0
 8013a76:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8013a78:	687b      	ldr	r3, [r7, #4]
 8013a7a:	681b      	ldr	r3, [r3, #0]
 8013a7c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013a7e:	6a3b      	ldr	r3, [r7, #32]
 8013a80:	e853 3f00 	ldrex	r3, [r3]
 8013a84:	61fb      	str	r3, [r7, #28]
   return(result);
 8013a86:	69fb      	ldr	r3, [r7, #28]
 8013a88:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8013a8c:	637b      	str	r3, [r7, #52]	@ 0x34
 8013a8e:	687b      	ldr	r3, [r7, #4]
 8013a90:	681b      	ldr	r3, [r3, #0]
 8013a92:	461a      	mov	r2, r3
 8013a94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013a96:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8013a98:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013a9a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8013a9c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013a9e:	e841 2300 	strex	r3, r2, [r1]
 8013aa2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8013aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013aa6:	2b00      	cmp	r3, #0
 8013aa8:	d1e6      	bne.n	8013a78 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8013aaa:	687b      	ldr	r3, [r7, #4]
 8013aac:	681b      	ldr	r3, [r3, #0]
 8013aae:	3308      	adds	r3, #8
 8013ab0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013ab2:	68fb      	ldr	r3, [r7, #12]
 8013ab4:	e853 3f00 	ldrex	r3, [r3]
 8013ab8:	60bb      	str	r3, [r7, #8]
   return(result);
 8013aba:	68bb      	ldr	r3, [r7, #8]
 8013abc:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8013ac0:	633b      	str	r3, [r7, #48]	@ 0x30
 8013ac2:	687b      	ldr	r3, [r7, #4]
 8013ac4:	681b      	ldr	r3, [r3, #0]
 8013ac6:	3308      	adds	r3, #8
 8013ac8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013aca:	61ba      	str	r2, [r7, #24]
 8013acc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013ace:	6979      	ldr	r1, [r7, #20]
 8013ad0:	69ba      	ldr	r2, [r7, #24]
 8013ad2:	e841 2300 	strex	r3, r2, [r1]
 8013ad6:	613b      	str	r3, [r7, #16]
   return(result);
 8013ad8:	693b      	ldr	r3, [r7, #16]
 8013ada:	2b00      	cmp	r3, #0
 8013adc:	d1e5      	bne.n	8013aaa <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8013ade:	687b      	ldr	r3, [r7, #4]
 8013ae0:	2220      	movs	r2, #32
 8013ae2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8013ae6:	bf00      	nop
 8013ae8:	373c      	adds	r7, #60	@ 0x3c
 8013aea:	46bd      	mov	sp, r7
 8013aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013af0:	4770      	bx	lr
	...

08013af4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8013af4:	b480      	push	{r7}
 8013af6:	b095      	sub	sp, #84	@ 0x54
 8013af8:	af00      	add	r7, sp, #0
 8013afa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8013afc:	687b      	ldr	r3, [r7, #4]
 8013afe:	681b      	ldr	r3, [r3, #0]
 8013b00:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013b02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013b04:	e853 3f00 	ldrex	r3, [r3]
 8013b08:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8013b0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013b0c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8013b10:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8013b12:	687b      	ldr	r3, [r7, #4]
 8013b14:	681b      	ldr	r3, [r3, #0]
 8013b16:	461a      	mov	r2, r3
 8013b18:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013b1a:	643b      	str	r3, [r7, #64]	@ 0x40
 8013b1c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013b1e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8013b20:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8013b22:	e841 2300 	strex	r3, r2, [r1]
 8013b26:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8013b28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b2a:	2b00      	cmp	r3, #0
 8013b2c:	d1e6      	bne.n	8013afc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8013b2e:	687b      	ldr	r3, [r7, #4]
 8013b30:	681b      	ldr	r3, [r3, #0]
 8013b32:	3308      	adds	r3, #8
 8013b34:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013b36:	6a3b      	ldr	r3, [r7, #32]
 8013b38:	e853 3f00 	ldrex	r3, [r3]
 8013b3c:	61fb      	str	r3, [r7, #28]
   return(result);
 8013b3e:	69fa      	ldr	r2, [r7, #28]
 8013b40:	4b1e      	ldr	r3, [pc, #120]	@ (8013bbc <UART_EndRxTransfer+0xc8>)
 8013b42:	4013      	ands	r3, r2
 8013b44:	64bb      	str	r3, [r7, #72]	@ 0x48
 8013b46:	687b      	ldr	r3, [r7, #4]
 8013b48:	681b      	ldr	r3, [r3, #0]
 8013b4a:	3308      	adds	r3, #8
 8013b4c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8013b4e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8013b50:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013b52:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8013b54:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013b56:	e841 2300 	strex	r3, r2, [r1]
 8013b5a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8013b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013b5e:	2b00      	cmp	r3, #0
 8013b60:	d1e5      	bne.n	8013b2e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013b62:	687b      	ldr	r3, [r7, #4]
 8013b64:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013b66:	2b01      	cmp	r3, #1
 8013b68:	d118      	bne.n	8013b9c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013b6a:	687b      	ldr	r3, [r7, #4]
 8013b6c:	681b      	ldr	r3, [r3, #0]
 8013b6e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013b70:	68fb      	ldr	r3, [r7, #12]
 8013b72:	e853 3f00 	ldrex	r3, [r3]
 8013b76:	60bb      	str	r3, [r7, #8]
   return(result);
 8013b78:	68bb      	ldr	r3, [r7, #8]
 8013b7a:	f023 0310 	bic.w	r3, r3, #16
 8013b7e:	647b      	str	r3, [r7, #68]	@ 0x44
 8013b80:	687b      	ldr	r3, [r7, #4]
 8013b82:	681b      	ldr	r3, [r3, #0]
 8013b84:	461a      	mov	r2, r3
 8013b86:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013b88:	61bb      	str	r3, [r7, #24]
 8013b8a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013b8c:	6979      	ldr	r1, [r7, #20]
 8013b8e:	69ba      	ldr	r2, [r7, #24]
 8013b90:	e841 2300 	strex	r3, r2, [r1]
 8013b94:	613b      	str	r3, [r7, #16]
   return(result);
 8013b96:	693b      	ldr	r3, [r7, #16]
 8013b98:	2b00      	cmp	r3, #0
 8013b9a:	d1e6      	bne.n	8013b6a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8013b9c:	687b      	ldr	r3, [r7, #4]
 8013b9e:	2220      	movs	r2, #32
 8013ba0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013ba4:	687b      	ldr	r3, [r7, #4]
 8013ba6:	2200      	movs	r2, #0
 8013ba8:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8013baa:	687b      	ldr	r3, [r7, #4]
 8013bac:	2200      	movs	r2, #0
 8013bae:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8013bb0:	bf00      	nop
 8013bb2:	3754      	adds	r7, #84	@ 0x54
 8013bb4:	46bd      	mov	sp, r7
 8013bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bba:	4770      	bx	lr
 8013bbc:	effffffe 	.word	0xeffffffe

08013bc0 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8013bc0:	b580      	push	{r7, lr}
 8013bc2:	b09c      	sub	sp, #112	@ 0x70
 8013bc4:	af00      	add	r7, sp, #0
 8013bc6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8013bc8:	687b      	ldr	r3, [r7, #4]
 8013bca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013bcc:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8013bce:	687b      	ldr	r3, [r7, #4]
 8013bd0:	69db      	ldr	r3, [r3, #28]
 8013bd2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013bd6:	d071      	beq.n	8013cbc <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 8013bd8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013bda:	2200      	movs	r2, #0
 8013bdc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8013be0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013be2:	681b      	ldr	r3, [r3, #0]
 8013be4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013be6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013be8:	e853 3f00 	ldrex	r3, [r3]
 8013bec:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8013bee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013bf0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8013bf4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8013bf6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013bf8:	681b      	ldr	r3, [r3, #0]
 8013bfa:	461a      	mov	r2, r3
 8013bfc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8013bfe:	65bb      	str	r3, [r7, #88]	@ 0x58
 8013c00:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013c02:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8013c04:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8013c06:	e841 2300 	strex	r3, r2, [r1]
 8013c0a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8013c0c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013c0e:	2b00      	cmp	r3, #0
 8013c10:	d1e6      	bne.n	8013be0 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013c12:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013c14:	681b      	ldr	r3, [r3, #0]
 8013c16:	3308      	adds	r3, #8
 8013c18:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013c1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013c1c:	e853 3f00 	ldrex	r3, [r3]
 8013c20:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8013c22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013c24:	f023 0301 	bic.w	r3, r3, #1
 8013c28:	667b      	str	r3, [r7, #100]	@ 0x64
 8013c2a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013c2c:	681b      	ldr	r3, [r3, #0]
 8013c2e:	3308      	adds	r3, #8
 8013c30:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8013c32:	647a      	str	r2, [r7, #68]	@ 0x44
 8013c34:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013c36:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8013c38:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8013c3a:	e841 2300 	strex	r3, r2, [r1]
 8013c3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8013c40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013c42:	2b00      	cmp	r3, #0
 8013c44:	d1e5      	bne.n	8013c12 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8013c46:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013c48:	681b      	ldr	r3, [r3, #0]
 8013c4a:	3308      	adds	r3, #8
 8013c4c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c50:	e853 3f00 	ldrex	r3, [r3]
 8013c54:	623b      	str	r3, [r7, #32]
   return(result);
 8013c56:	6a3b      	ldr	r3, [r7, #32]
 8013c58:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8013c5c:	663b      	str	r3, [r7, #96]	@ 0x60
 8013c5e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013c60:	681b      	ldr	r3, [r3, #0]
 8013c62:	3308      	adds	r3, #8
 8013c64:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8013c66:	633a      	str	r2, [r7, #48]	@ 0x30
 8013c68:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013c6a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8013c6c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013c6e:	e841 2300 	strex	r3, r2, [r1]
 8013c72:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8013c74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013c76:	2b00      	cmp	r3, #0
 8013c78:	d1e5      	bne.n	8013c46 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8013c7a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013c7c:	2220      	movs	r2, #32
 8013c7e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013c82:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013c84:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013c86:	2b01      	cmp	r3, #1
 8013c88:	d118      	bne.n	8013cbc <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013c8a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013c8c:	681b      	ldr	r3, [r3, #0]
 8013c8e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013c90:	693b      	ldr	r3, [r7, #16]
 8013c92:	e853 3f00 	ldrex	r3, [r3]
 8013c96:	60fb      	str	r3, [r7, #12]
   return(result);
 8013c98:	68fb      	ldr	r3, [r7, #12]
 8013c9a:	f023 0310 	bic.w	r3, r3, #16
 8013c9e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8013ca0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013ca2:	681b      	ldr	r3, [r3, #0]
 8013ca4:	461a      	mov	r2, r3
 8013ca6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013ca8:	61fb      	str	r3, [r7, #28]
 8013caa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013cac:	69b9      	ldr	r1, [r7, #24]
 8013cae:	69fa      	ldr	r2, [r7, #28]
 8013cb0:	e841 2300 	strex	r3, r2, [r1]
 8013cb4:	617b      	str	r3, [r7, #20]
   return(result);
 8013cb6:	697b      	ldr	r3, [r7, #20]
 8013cb8:	2b00      	cmp	r3, #0
 8013cba:	d1e6      	bne.n	8013c8a <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8013cbc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013cbe:	2200      	movs	r2, #0
 8013cc0:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013cc2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013cc4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013cc6:	2b01      	cmp	r3, #1
 8013cc8:	d107      	bne.n	8013cda <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8013cca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013ccc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8013cd0:	4619      	mov	r1, r3
 8013cd2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8013cd4:	f7fe fef8 	bl	8012ac8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8013cd8:	e002      	b.n	8013ce0 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 8013cda:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8013cdc:	f7ee f860 	bl	8001da0 <HAL_UART_RxCpltCallback>
}
 8013ce0:	bf00      	nop
 8013ce2:	3770      	adds	r7, #112	@ 0x70
 8013ce4:	46bd      	mov	sp, r7
 8013ce6:	bd80      	pop	{r7, pc}

08013ce8 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8013ce8:	b580      	push	{r7, lr}
 8013cea:	b084      	sub	sp, #16
 8013cec:	af00      	add	r7, sp, #0
 8013cee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8013cf0:	687b      	ldr	r3, [r7, #4]
 8013cf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013cf4:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8013cf6:	68fb      	ldr	r3, [r7, #12]
 8013cf8:	2201      	movs	r2, #1
 8013cfa:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013cfc:	68fb      	ldr	r3, [r7, #12]
 8013cfe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013d00:	2b01      	cmp	r3, #1
 8013d02:	d109      	bne.n	8013d18 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8013d04:	68fb      	ldr	r3, [r7, #12]
 8013d06:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8013d0a:	085b      	lsrs	r3, r3, #1
 8013d0c:	b29b      	uxth	r3, r3
 8013d0e:	4619      	mov	r1, r3
 8013d10:	68f8      	ldr	r0, [r7, #12]
 8013d12:	f7fe fed9 	bl	8012ac8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8013d16:	e002      	b.n	8013d1e <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8013d18:	68f8      	ldr	r0, [r7, #12]
 8013d1a:	f7fe fec1 	bl	8012aa0 <HAL_UART_RxHalfCpltCallback>
}
 8013d1e:	bf00      	nop
 8013d20:	3710      	adds	r7, #16
 8013d22:	46bd      	mov	sp, r7
 8013d24:	bd80      	pop	{r7, pc}

08013d26 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8013d26:	b580      	push	{r7, lr}
 8013d28:	b086      	sub	sp, #24
 8013d2a:	af00      	add	r7, sp, #0
 8013d2c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8013d2e:	687b      	ldr	r3, [r7, #4]
 8013d30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013d32:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8013d34:	697b      	ldr	r3, [r7, #20]
 8013d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8013d3a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8013d3c:	697b      	ldr	r3, [r7, #20]
 8013d3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8013d42:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8013d44:	697b      	ldr	r3, [r7, #20]
 8013d46:	681b      	ldr	r3, [r3, #0]
 8013d48:	689b      	ldr	r3, [r3, #8]
 8013d4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8013d4e:	2b80      	cmp	r3, #128	@ 0x80
 8013d50:	d109      	bne.n	8013d66 <UART_DMAError+0x40>
 8013d52:	693b      	ldr	r3, [r7, #16]
 8013d54:	2b21      	cmp	r3, #33	@ 0x21
 8013d56:	d106      	bne.n	8013d66 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8013d58:	697b      	ldr	r3, [r7, #20]
 8013d5a:	2200      	movs	r2, #0
 8013d5c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8013d60:	6978      	ldr	r0, [r7, #20]
 8013d62:	f7ff fe85 	bl	8013a70 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8013d66:	697b      	ldr	r3, [r7, #20]
 8013d68:	681b      	ldr	r3, [r3, #0]
 8013d6a:	689b      	ldr	r3, [r3, #8]
 8013d6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013d70:	2b40      	cmp	r3, #64	@ 0x40
 8013d72:	d109      	bne.n	8013d88 <UART_DMAError+0x62>
 8013d74:	68fb      	ldr	r3, [r7, #12]
 8013d76:	2b22      	cmp	r3, #34	@ 0x22
 8013d78:	d106      	bne.n	8013d88 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8013d7a:	697b      	ldr	r3, [r7, #20]
 8013d7c:	2200      	movs	r2, #0
 8013d7e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8013d82:	6978      	ldr	r0, [r7, #20]
 8013d84:	f7ff feb6 	bl	8013af4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8013d88:	697b      	ldr	r3, [r7, #20]
 8013d8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8013d8e:	f043 0210 	orr.w	r2, r3, #16
 8013d92:	697b      	ldr	r3, [r7, #20]
 8013d94:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8013d98:	6978      	ldr	r0, [r7, #20]
 8013d9a:	f7fe fe8b 	bl	8012ab4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8013d9e:	bf00      	nop
 8013da0:	3718      	adds	r7, #24
 8013da2:	46bd      	mov	sp, r7
 8013da4:	bd80      	pop	{r7, pc}

08013da6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8013da6:	b580      	push	{r7, lr}
 8013da8:	b084      	sub	sp, #16
 8013daa:	af00      	add	r7, sp, #0
 8013dac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8013dae:	687b      	ldr	r3, [r7, #4]
 8013db0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013db2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8013db4:	68fb      	ldr	r3, [r7, #12]
 8013db6:	2200      	movs	r2, #0
 8013db8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8013dbc:	68f8      	ldr	r0, [r7, #12]
 8013dbe:	f7fe fe79 	bl	8012ab4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8013dc2:	bf00      	nop
 8013dc4:	3710      	adds	r7, #16
 8013dc6:	46bd      	mov	sp, r7
 8013dc8:	bd80      	pop	{r7, pc}

08013dca <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8013dca:	b580      	push	{r7, lr}
 8013dcc:	b088      	sub	sp, #32
 8013dce:	af00      	add	r7, sp, #0
 8013dd0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8013dd2:	687b      	ldr	r3, [r7, #4]
 8013dd4:	681b      	ldr	r3, [r3, #0]
 8013dd6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013dd8:	68fb      	ldr	r3, [r7, #12]
 8013dda:	e853 3f00 	ldrex	r3, [r3]
 8013dde:	60bb      	str	r3, [r7, #8]
   return(result);
 8013de0:	68bb      	ldr	r3, [r7, #8]
 8013de2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8013de6:	61fb      	str	r3, [r7, #28]
 8013de8:	687b      	ldr	r3, [r7, #4]
 8013dea:	681b      	ldr	r3, [r3, #0]
 8013dec:	461a      	mov	r2, r3
 8013dee:	69fb      	ldr	r3, [r7, #28]
 8013df0:	61bb      	str	r3, [r7, #24]
 8013df2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013df4:	6979      	ldr	r1, [r7, #20]
 8013df6:	69ba      	ldr	r2, [r7, #24]
 8013df8:	e841 2300 	strex	r3, r2, [r1]
 8013dfc:	613b      	str	r3, [r7, #16]
   return(result);
 8013dfe:	693b      	ldr	r3, [r7, #16]
 8013e00:	2b00      	cmp	r3, #0
 8013e02:	d1e6      	bne.n	8013dd2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8013e04:	687b      	ldr	r3, [r7, #4]
 8013e06:	2220      	movs	r2, #32
 8013e08:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8013e0c:	687b      	ldr	r3, [r7, #4]
 8013e0e:	2200      	movs	r2, #0
 8013e10:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8013e12:	6878      	ldr	r0, [r7, #4]
 8013e14:	f7fe fe3a 	bl	8012a8c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8013e18:	bf00      	nop
 8013e1a:	3720      	adds	r7, #32
 8013e1c:	46bd      	mov	sp, r7
 8013e1e:	bd80      	pop	{r7, pc}

08013e20 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8013e20:	b480      	push	{r7}
 8013e22:	b083      	sub	sp, #12
 8013e24:	af00      	add	r7, sp, #0
 8013e26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8013e28:	bf00      	nop
 8013e2a:	370c      	adds	r7, #12
 8013e2c:	46bd      	mov	sp, r7
 8013e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e32:	4770      	bx	lr

08013e34 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8013e34:	b480      	push	{r7}
 8013e36:	b083      	sub	sp, #12
 8013e38:	af00      	add	r7, sp, #0
 8013e3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8013e3c:	bf00      	nop
 8013e3e:	370c      	adds	r7, #12
 8013e40:	46bd      	mov	sp, r7
 8013e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e46:	4770      	bx	lr

08013e48 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8013e48:	b480      	push	{r7}
 8013e4a:	b083      	sub	sp, #12
 8013e4c:	af00      	add	r7, sp, #0
 8013e4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8013e50:	bf00      	nop
 8013e52:	370c      	adds	r7, #12
 8013e54:	46bd      	mov	sp, r7
 8013e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e5a:	4770      	bx	lr

08013e5c <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8013e5c:	b580      	push	{r7, lr}
 8013e5e:	b084      	sub	sp, #16
 8013e60:	af00      	add	r7, sp, #0
 8013e62:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8013e64:	687b      	ldr	r3, [r7, #4]
 8013e66:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8013e6a:	2b01      	cmp	r3, #1
 8013e6c:	d101      	bne.n	8013e72 <HAL_UARTEx_EnableFifoMode+0x16>
 8013e6e:	2302      	movs	r3, #2
 8013e70:	e02b      	b.n	8013eca <HAL_UARTEx_EnableFifoMode+0x6e>
 8013e72:	687b      	ldr	r3, [r7, #4]
 8013e74:	2201      	movs	r2, #1
 8013e76:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8013e7a:	687b      	ldr	r3, [r7, #4]
 8013e7c:	2224      	movs	r2, #36	@ 0x24
 8013e7e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8013e82:	687b      	ldr	r3, [r7, #4]
 8013e84:	681b      	ldr	r3, [r3, #0]
 8013e86:	681b      	ldr	r3, [r3, #0]
 8013e88:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8013e8a:	687b      	ldr	r3, [r7, #4]
 8013e8c:	681b      	ldr	r3, [r3, #0]
 8013e8e:	681a      	ldr	r2, [r3, #0]
 8013e90:	687b      	ldr	r3, [r7, #4]
 8013e92:	681b      	ldr	r3, [r3, #0]
 8013e94:	f022 0201 	bic.w	r2, r2, #1
 8013e98:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8013e9a:	68fb      	ldr	r3, [r7, #12]
 8013e9c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8013ea0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8013ea2:	687b      	ldr	r3, [r7, #4]
 8013ea4:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8013ea8:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8013eaa:	687b      	ldr	r3, [r7, #4]
 8013eac:	681b      	ldr	r3, [r3, #0]
 8013eae:	68fa      	ldr	r2, [r7, #12]
 8013eb0:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8013eb2:	6878      	ldr	r0, [r7, #4]
 8013eb4:	f000 f88a 	bl	8013fcc <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 8013eb8:	687b      	ldr	r3, [r7, #4]
 8013eba:	2220      	movs	r2, #32
 8013ebc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8013ec0:	687b      	ldr	r3, [r7, #4]
 8013ec2:	2200      	movs	r2, #0
 8013ec4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8013ec8:	2300      	movs	r3, #0
}
 8013eca:	4618      	mov	r0, r3
 8013ecc:	3710      	adds	r7, #16
 8013ece:	46bd      	mov	sp, r7
 8013ed0:	bd80      	pop	{r7, pc}

08013ed2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8013ed2:	b580      	push	{r7, lr}
 8013ed4:	b084      	sub	sp, #16
 8013ed6:	af00      	add	r7, sp, #0
 8013ed8:	6078      	str	r0, [r7, #4]
 8013eda:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8013edc:	687b      	ldr	r3, [r7, #4]
 8013ede:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8013ee2:	2b01      	cmp	r3, #1
 8013ee4:	d101      	bne.n	8013eea <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8013ee6:	2302      	movs	r3, #2
 8013ee8:	e02d      	b.n	8013f46 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8013eea:	687b      	ldr	r3, [r7, #4]
 8013eec:	2201      	movs	r2, #1
 8013eee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8013ef2:	687b      	ldr	r3, [r7, #4]
 8013ef4:	2224      	movs	r2, #36	@ 0x24
 8013ef6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8013efa:	687b      	ldr	r3, [r7, #4]
 8013efc:	681b      	ldr	r3, [r3, #0]
 8013efe:	681b      	ldr	r3, [r3, #0]
 8013f00:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8013f02:	687b      	ldr	r3, [r7, #4]
 8013f04:	681b      	ldr	r3, [r3, #0]
 8013f06:	681a      	ldr	r2, [r3, #0]
 8013f08:	687b      	ldr	r3, [r7, #4]
 8013f0a:	681b      	ldr	r3, [r3, #0]
 8013f0c:	f022 0201 	bic.w	r2, r2, #1
 8013f10:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8013f12:	687b      	ldr	r3, [r7, #4]
 8013f14:	681b      	ldr	r3, [r3, #0]
 8013f16:	689b      	ldr	r3, [r3, #8]
 8013f18:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8013f1c:	687b      	ldr	r3, [r7, #4]
 8013f1e:	681b      	ldr	r3, [r3, #0]
 8013f20:	683a      	ldr	r2, [r7, #0]
 8013f22:	430a      	orrs	r2, r1
 8013f24:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8013f26:	6878      	ldr	r0, [r7, #4]
 8013f28:	f000 f850 	bl	8013fcc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8013f2c:	687b      	ldr	r3, [r7, #4]
 8013f2e:	681b      	ldr	r3, [r3, #0]
 8013f30:	68fa      	ldr	r2, [r7, #12]
 8013f32:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8013f34:	687b      	ldr	r3, [r7, #4]
 8013f36:	2220      	movs	r2, #32
 8013f38:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8013f3c:	687b      	ldr	r3, [r7, #4]
 8013f3e:	2200      	movs	r2, #0
 8013f40:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8013f44:	2300      	movs	r3, #0
}
 8013f46:	4618      	mov	r0, r3
 8013f48:	3710      	adds	r7, #16
 8013f4a:	46bd      	mov	sp, r7
 8013f4c:	bd80      	pop	{r7, pc}

08013f4e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8013f4e:	b580      	push	{r7, lr}
 8013f50:	b084      	sub	sp, #16
 8013f52:	af00      	add	r7, sp, #0
 8013f54:	6078      	str	r0, [r7, #4]
 8013f56:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8013f58:	687b      	ldr	r3, [r7, #4]
 8013f5a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8013f5e:	2b01      	cmp	r3, #1
 8013f60:	d101      	bne.n	8013f66 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8013f62:	2302      	movs	r3, #2
 8013f64:	e02d      	b.n	8013fc2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8013f66:	687b      	ldr	r3, [r7, #4]
 8013f68:	2201      	movs	r2, #1
 8013f6a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8013f6e:	687b      	ldr	r3, [r7, #4]
 8013f70:	2224      	movs	r2, #36	@ 0x24
 8013f72:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8013f76:	687b      	ldr	r3, [r7, #4]
 8013f78:	681b      	ldr	r3, [r3, #0]
 8013f7a:	681b      	ldr	r3, [r3, #0]
 8013f7c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8013f7e:	687b      	ldr	r3, [r7, #4]
 8013f80:	681b      	ldr	r3, [r3, #0]
 8013f82:	681a      	ldr	r2, [r3, #0]
 8013f84:	687b      	ldr	r3, [r7, #4]
 8013f86:	681b      	ldr	r3, [r3, #0]
 8013f88:	f022 0201 	bic.w	r2, r2, #1
 8013f8c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8013f8e:	687b      	ldr	r3, [r7, #4]
 8013f90:	681b      	ldr	r3, [r3, #0]
 8013f92:	689b      	ldr	r3, [r3, #8]
 8013f94:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8013f98:	687b      	ldr	r3, [r7, #4]
 8013f9a:	681b      	ldr	r3, [r3, #0]
 8013f9c:	683a      	ldr	r2, [r7, #0]
 8013f9e:	430a      	orrs	r2, r1
 8013fa0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8013fa2:	6878      	ldr	r0, [r7, #4]
 8013fa4:	f000 f812 	bl	8013fcc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8013fa8:	687b      	ldr	r3, [r7, #4]
 8013faa:	681b      	ldr	r3, [r3, #0]
 8013fac:	68fa      	ldr	r2, [r7, #12]
 8013fae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8013fb0:	687b      	ldr	r3, [r7, #4]
 8013fb2:	2220      	movs	r2, #32
 8013fb4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8013fb8:	687b      	ldr	r3, [r7, #4]
 8013fba:	2200      	movs	r2, #0
 8013fbc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8013fc0:	2300      	movs	r3, #0
}
 8013fc2:	4618      	mov	r0, r3
 8013fc4:	3710      	adds	r7, #16
 8013fc6:	46bd      	mov	sp, r7
 8013fc8:	bd80      	pop	{r7, pc}
	...

08013fcc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8013fcc:	b480      	push	{r7}
 8013fce:	b085      	sub	sp, #20
 8013fd0:	af00      	add	r7, sp, #0
 8013fd2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8013fd4:	687b      	ldr	r3, [r7, #4]
 8013fd6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8013fd8:	2b00      	cmp	r3, #0
 8013fda:	d108      	bne.n	8013fee <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8013fdc:	687b      	ldr	r3, [r7, #4]
 8013fde:	2201      	movs	r2, #1
 8013fe0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8013fe4:	687b      	ldr	r3, [r7, #4]
 8013fe6:	2201      	movs	r2, #1
 8013fe8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8013fec:	e031      	b.n	8014052 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8013fee:	2310      	movs	r3, #16
 8013ff0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8013ff2:	2310      	movs	r3, #16
 8013ff4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8013ff6:	687b      	ldr	r3, [r7, #4]
 8013ff8:	681b      	ldr	r3, [r3, #0]
 8013ffa:	689b      	ldr	r3, [r3, #8]
 8013ffc:	0e5b      	lsrs	r3, r3, #25
 8013ffe:	b2db      	uxtb	r3, r3
 8014000:	f003 0307 	and.w	r3, r3, #7
 8014004:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8014006:	687b      	ldr	r3, [r7, #4]
 8014008:	681b      	ldr	r3, [r3, #0]
 801400a:	689b      	ldr	r3, [r3, #8]
 801400c:	0f5b      	lsrs	r3, r3, #29
 801400e:	b2db      	uxtb	r3, r3
 8014010:	f003 0307 	and.w	r3, r3, #7
 8014014:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8014016:	7bbb      	ldrb	r3, [r7, #14]
 8014018:	7b3a      	ldrb	r2, [r7, #12]
 801401a:	4911      	ldr	r1, [pc, #68]	@ (8014060 <UARTEx_SetNbDataToProcess+0x94>)
 801401c:	5c8a      	ldrb	r2, [r1, r2]
 801401e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8014022:	7b3a      	ldrb	r2, [r7, #12]
 8014024:	490f      	ldr	r1, [pc, #60]	@ (8014064 <UARTEx_SetNbDataToProcess+0x98>)
 8014026:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8014028:	fb93 f3f2 	sdiv	r3, r3, r2
 801402c:	b29a      	uxth	r2, r3
 801402e:	687b      	ldr	r3, [r7, #4]
 8014030:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8014034:	7bfb      	ldrb	r3, [r7, #15]
 8014036:	7b7a      	ldrb	r2, [r7, #13]
 8014038:	4909      	ldr	r1, [pc, #36]	@ (8014060 <UARTEx_SetNbDataToProcess+0x94>)
 801403a:	5c8a      	ldrb	r2, [r1, r2]
 801403c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8014040:	7b7a      	ldrb	r2, [r7, #13]
 8014042:	4908      	ldr	r1, [pc, #32]	@ (8014064 <UARTEx_SetNbDataToProcess+0x98>)
 8014044:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8014046:	fb93 f3f2 	sdiv	r3, r3, r2
 801404a:	b29a      	uxth	r2, r3
 801404c:	687b      	ldr	r3, [r7, #4]
 801404e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8014052:	bf00      	nop
 8014054:	3714      	adds	r7, #20
 8014056:	46bd      	mov	sp, r7
 8014058:	f85d 7b04 	ldr.w	r7, [sp], #4
 801405c:	4770      	bx	lr
 801405e:	bf00      	nop
 8014060:	0801b6ec 	.word	0x0801b6ec
 8014064:	0801b6f4 	.word	0x0801b6f4

08014068 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8014068:	b084      	sub	sp, #16
 801406a:	b580      	push	{r7, lr}
 801406c:	b084      	sub	sp, #16
 801406e:	af00      	add	r7, sp, #0
 8014070:	6078      	str	r0, [r7, #4]
 8014072:	f107 001c 	add.w	r0, r7, #28
 8014076:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801407a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801407e:	2b01      	cmp	r3, #1
 8014080:	d121      	bne.n	80140c6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8014082:	687b      	ldr	r3, [r7, #4]
 8014084:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014086:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 801408a:	687b      	ldr	r3, [r7, #4]
 801408c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 801408e:	687b      	ldr	r3, [r7, #4]
 8014090:	68da      	ldr	r2, [r3, #12]
 8014092:	4b2c      	ldr	r3, [pc, #176]	@ (8014144 <USB_CoreInit+0xdc>)
 8014094:	4013      	ands	r3, r2
 8014096:	687a      	ldr	r2, [r7, #4]
 8014098:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 801409a:	687b      	ldr	r3, [r7, #4]
 801409c:	68db      	ldr	r3, [r3, #12]
 801409e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80140a2:	687b      	ldr	r3, [r7, #4]
 80140a4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80140a6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80140aa:	2b01      	cmp	r3, #1
 80140ac:	d105      	bne.n	80140ba <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80140ae:	687b      	ldr	r3, [r7, #4]
 80140b0:	68db      	ldr	r3, [r3, #12]
 80140b2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80140b6:	687b      	ldr	r3, [r7, #4]
 80140b8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80140ba:	6878      	ldr	r0, [r7, #4]
 80140bc:	f001 fafa 	bl	80156b4 <USB_CoreReset>
 80140c0:	4603      	mov	r3, r0
 80140c2:	73fb      	strb	r3, [r7, #15]
 80140c4:	e01b      	b.n	80140fe <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80140c6:	687b      	ldr	r3, [r7, #4]
 80140c8:	68db      	ldr	r3, [r3, #12]
 80140ca:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80140ce:	687b      	ldr	r3, [r7, #4]
 80140d0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80140d2:	6878      	ldr	r0, [r7, #4]
 80140d4:	f001 faee 	bl	80156b4 <USB_CoreReset>
 80140d8:	4603      	mov	r3, r0
 80140da:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80140dc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80140e0:	2b00      	cmp	r3, #0
 80140e2:	d106      	bne.n	80140f2 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80140e4:	687b      	ldr	r3, [r7, #4]
 80140e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80140e8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80140ec:	687b      	ldr	r3, [r7, #4]
 80140ee:	639a      	str	r2, [r3, #56]	@ 0x38
 80140f0:	e005      	b.n	80140fe <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80140f2:	687b      	ldr	r3, [r7, #4]
 80140f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80140f6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80140fa:	687b      	ldr	r3, [r7, #4]
 80140fc:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80140fe:	7fbb      	ldrb	r3, [r7, #30]
 8014100:	2b01      	cmp	r3, #1
 8014102:	d116      	bne.n	8014132 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8014104:	687b      	ldr	r3, [r7, #4]
 8014106:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014108:	b29a      	uxth	r2, r3
 801410a:	687b      	ldr	r3, [r7, #4]
 801410c:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 801410e:	687b      	ldr	r3, [r7, #4]
 8014110:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8014112:	4b0d      	ldr	r3, [pc, #52]	@ (8014148 <USB_CoreInit+0xe0>)
 8014114:	4313      	orrs	r3, r2
 8014116:	687a      	ldr	r2, [r7, #4]
 8014118:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 801411a:	687b      	ldr	r3, [r7, #4]
 801411c:	689b      	ldr	r3, [r3, #8]
 801411e:	f043 0206 	orr.w	r2, r3, #6
 8014122:	687b      	ldr	r3, [r7, #4]
 8014124:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8014126:	687b      	ldr	r3, [r7, #4]
 8014128:	689b      	ldr	r3, [r3, #8]
 801412a:	f043 0220 	orr.w	r2, r3, #32
 801412e:	687b      	ldr	r3, [r7, #4]
 8014130:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8014132:	7bfb      	ldrb	r3, [r7, #15]
}
 8014134:	4618      	mov	r0, r3
 8014136:	3710      	adds	r7, #16
 8014138:	46bd      	mov	sp, r7
 801413a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801413e:	b004      	add	sp, #16
 8014140:	4770      	bx	lr
 8014142:	bf00      	nop
 8014144:	ffbdffbf 	.word	0xffbdffbf
 8014148:	03ee0000 	.word	0x03ee0000

0801414c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 801414c:	b480      	push	{r7}
 801414e:	b087      	sub	sp, #28
 8014150:	af00      	add	r7, sp, #0
 8014152:	60f8      	str	r0, [r7, #12]
 8014154:	60b9      	str	r1, [r7, #8]
 8014156:	4613      	mov	r3, r2
 8014158:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 801415a:	79fb      	ldrb	r3, [r7, #7]
 801415c:	2b02      	cmp	r3, #2
 801415e:	d165      	bne.n	801422c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8014160:	68bb      	ldr	r3, [r7, #8]
 8014162:	4a41      	ldr	r2, [pc, #260]	@ (8014268 <USB_SetTurnaroundTime+0x11c>)
 8014164:	4293      	cmp	r3, r2
 8014166:	d906      	bls.n	8014176 <USB_SetTurnaroundTime+0x2a>
 8014168:	68bb      	ldr	r3, [r7, #8]
 801416a:	4a40      	ldr	r2, [pc, #256]	@ (801426c <USB_SetTurnaroundTime+0x120>)
 801416c:	4293      	cmp	r3, r2
 801416e:	d202      	bcs.n	8014176 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8014170:	230f      	movs	r3, #15
 8014172:	617b      	str	r3, [r7, #20]
 8014174:	e062      	b.n	801423c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8014176:	68bb      	ldr	r3, [r7, #8]
 8014178:	4a3c      	ldr	r2, [pc, #240]	@ (801426c <USB_SetTurnaroundTime+0x120>)
 801417a:	4293      	cmp	r3, r2
 801417c:	d306      	bcc.n	801418c <USB_SetTurnaroundTime+0x40>
 801417e:	68bb      	ldr	r3, [r7, #8]
 8014180:	4a3b      	ldr	r2, [pc, #236]	@ (8014270 <USB_SetTurnaroundTime+0x124>)
 8014182:	4293      	cmp	r3, r2
 8014184:	d202      	bcs.n	801418c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8014186:	230e      	movs	r3, #14
 8014188:	617b      	str	r3, [r7, #20]
 801418a:	e057      	b.n	801423c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 801418c:	68bb      	ldr	r3, [r7, #8]
 801418e:	4a38      	ldr	r2, [pc, #224]	@ (8014270 <USB_SetTurnaroundTime+0x124>)
 8014190:	4293      	cmp	r3, r2
 8014192:	d306      	bcc.n	80141a2 <USB_SetTurnaroundTime+0x56>
 8014194:	68bb      	ldr	r3, [r7, #8]
 8014196:	4a37      	ldr	r2, [pc, #220]	@ (8014274 <USB_SetTurnaroundTime+0x128>)
 8014198:	4293      	cmp	r3, r2
 801419a:	d202      	bcs.n	80141a2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 801419c:	230d      	movs	r3, #13
 801419e:	617b      	str	r3, [r7, #20]
 80141a0:	e04c      	b.n	801423c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80141a2:	68bb      	ldr	r3, [r7, #8]
 80141a4:	4a33      	ldr	r2, [pc, #204]	@ (8014274 <USB_SetTurnaroundTime+0x128>)
 80141a6:	4293      	cmp	r3, r2
 80141a8:	d306      	bcc.n	80141b8 <USB_SetTurnaroundTime+0x6c>
 80141aa:	68bb      	ldr	r3, [r7, #8]
 80141ac:	4a32      	ldr	r2, [pc, #200]	@ (8014278 <USB_SetTurnaroundTime+0x12c>)
 80141ae:	4293      	cmp	r3, r2
 80141b0:	d802      	bhi.n	80141b8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80141b2:	230c      	movs	r3, #12
 80141b4:	617b      	str	r3, [r7, #20]
 80141b6:	e041      	b.n	801423c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80141b8:	68bb      	ldr	r3, [r7, #8]
 80141ba:	4a2f      	ldr	r2, [pc, #188]	@ (8014278 <USB_SetTurnaroundTime+0x12c>)
 80141bc:	4293      	cmp	r3, r2
 80141be:	d906      	bls.n	80141ce <USB_SetTurnaroundTime+0x82>
 80141c0:	68bb      	ldr	r3, [r7, #8]
 80141c2:	4a2e      	ldr	r2, [pc, #184]	@ (801427c <USB_SetTurnaroundTime+0x130>)
 80141c4:	4293      	cmp	r3, r2
 80141c6:	d802      	bhi.n	80141ce <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80141c8:	230b      	movs	r3, #11
 80141ca:	617b      	str	r3, [r7, #20]
 80141cc:	e036      	b.n	801423c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80141ce:	68bb      	ldr	r3, [r7, #8]
 80141d0:	4a2a      	ldr	r2, [pc, #168]	@ (801427c <USB_SetTurnaroundTime+0x130>)
 80141d2:	4293      	cmp	r3, r2
 80141d4:	d906      	bls.n	80141e4 <USB_SetTurnaroundTime+0x98>
 80141d6:	68bb      	ldr	r3, [r7, #8]
 80141d8:	4a29      	ldr	r2, [pc, #164]	@ (8014280 <USB_SetTurnaroundTime+0x134>)
 80141da:	4293      	cmp	r3, r2
 80141dc:	d802      	bhi.n	80141e4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80141de:	230a      	movs	r3, #10
 80141e0:	617b      	str	r3, [r7, #20]
 80141e2:	e02b      	b.n	801423c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80141e4:	68bb      	ldr	r3, [r7, #8]
 80141e6:	4a26      	ldr	r2, [pc, #152]	@ (8014280 <USB_SetTurnaroundTime+0x134>)
 80141e8:	4293      	cmp	r3, r2
 80141ea:	d906      	bls.n	80141fa <USB_SetTurnaroundTime+0xae>
 80141ec:	68bb      	ldr	r3, [r7, #8]
 80141ee:	4a25      	ldr	r2, [pc, #148]	@ (8014284 <USB_SetTurnaroundTime+0x138>)
 80141f0:	4293      	cmp	r3, r2
 80141f2:	d202      	bcs.n	80141fa <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80141f4:	2309      	movs	r3, #9
 80141f6:	617b      	str	r3, [r7, #20]
 80141f8:	e020      	b.n	801423c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80141fa:	68bb      	ldr	r3, [r7, #8]
 80141fc:	4a21      	ldr	r2, [pc, #132]	@ (8014284 <USB_SetTurnaroundTime+0x138>)
 80141fe:	4293      	cmp	r3, r2
 8014200:	d306      	bcc.n	8014210 <USB_SetTurnaroundTime+0xc4>
 8014202:	68bb      	ldr	r3, [r7, #8]
 8014204:	4a20      	ldr	r2, [pc, #128]	@ (8014288 <USB_SetTurnaroundTime+0x13c>)
 8014206:	4293      	cmp	r3, r2
 8014208:	d802      	bhi.n	8014210 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 801420a:	2308      	movs	r3, #8
 801420c:	617b      	str	r3, [r7, #20]
 801420e:	e015      	b.n	801423c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8014210:	68bb      	ldr	r3, [r7, #8]
 8014212:	4a1d      	ldr	r2, [pc, #116]	@ (8014288 <USB_SetTurnaroundTime+0x13c>)
 8014214:	4293      	cmp	r3, r2
 8014216:	d906      	bls.n	8014226 <USB_SetTurnaroundTime+0xda>
 8014218:	68bb      	ldr	r3, [r7, #8]
 801421a:	4a1c      	ldr	r2, [pc, #112]	@ (801428c <USB_SetTurnaroundTime+0x140>)
 801421c:	4293      	cmp	r3, r2
 801421e:	d202      	bcs.n	8014226 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8014220:	2307      	movs	r3, #7
 8014222:	617b      	str	r3, [r7, #20]
 8014224:	e00a      	b.n	801423c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8014226:	2306      	movs	r3, #6
 8014228:	617b      	str	r3, [r7, #20]
 801422a:	e007      	b.n	801423c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 801422c:	79fb      	ldrb	r3, [r7, #7]
 801422e:	2b00      	cmp	r3, #0
 8014230:	d102      	bne.n	8014238 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8014232:	2309      	movs	r3, #9
 8014234:	617b      	str	r3, [r7, #20]
 8014236:	e001      	b.n	801423c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8014238:	2309      	movs	r3, #9
 801423a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 801423c:	68fb      	ldr	r3, [r7, #12]
 801423e:	68db      	ldr	r3, [r3, #12]
 8014240:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8014244:	68fb      	ldr	r3, [r7, #12]
 8014246:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8014248:	68fb      	ldr	r3, [r7, #12]
 801424a:	68da      	ldr	r2, [r3, #12]
 801424c:	697b      	ldr	r3, [r7, #20]
 801424e:	029b      	lsls	r3, r3, #10
 8014250:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8014254:	431a      	orrs	r2, r3
 8014256:	68fb      	ldr	r3, [r7, #12]
 8014258:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 801425a:	2300      	movs	r3, #0
}
 801425c:	4618      	mov	r0, r3
 801425e:	371c      	adds	r7, #28
 8014260:	46bd      	mov	sp, r7
 8014262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014266:	4770      	bx	lr
 8014268:	00d8acbf 	.word	0x00d8acbf
 801426c:	00e4e1c0 	.word	0x00e4e1c0
 8014270:	00f42400 	.word	0x00f42400
 8014274:	01067380 	.word	0x01067380
 8014278:	011a499f 	.word	0x011a499f
 801427c:	01312cff 	.word	0x01312cff
 8014280:	014ca43f 	.word	0x014ca43f
 8014284:	016e3600 	.word	0x016e3600
 8014288:	01a6ab1f 	.word	0x01a6ab1f
 801428c:	01e84800 	.word	0x01e84800

08014290 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8014290:	b480      	push	{r7}
 8014292:	b083      	sub	sp, #12
 8014294:	af00      	add	r7, sp, #0
 8014296:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8014298:	687b      	ldr	r3, [r7, #4]
 801429a:	689b      	ldr	r3, [r3, #8]
 801429c:	f043 0201 	orr.w	r2, r3, #1
 80142a0:	687b      	ldr	r3, [r7, #4]
 80142a2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80142a4:	2300      	movs	r3, #0
}
 80142a6:	4618      	mov	r0, r3
 80142a8:	370c      	adds	r7, #12
 80142aa:	46bd      	mov	sp, r7
 80142ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142b0:	4770      	bx	lr

080142b2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80142b2:	b480      	push	{r7}
 80142b4:	b083      	sub	sp, #12
 80142b6:	af00      	add	r7, sp, #0
 80142b8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80142ba:	687b      	ldr	r3, [r7, #4]
 80142bc:	689b      	ldr	r3, [r3, #8]
 80142be:	f023 0201 	bic.w	r2, r3, #1
 80142c2:	687b      	ldr	r3, [r7, #4]
 80142c4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80142c6:	2300      	movs	r3, #0
}
 80142c8:	4618      	mov	r0, r3
 80142ca:	370c      	adds	r7, #12
 80142cc:	46bd      	mov	sp, r7
 80142ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142d2:	4770      	bx	lr

080142d4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80142d4:	b580      	push	{r7, lr}
 80142d6:	b084      	sub	sp, #16
 80142d8:	af00      	add	r7, sp, #0
 80142da:	6078      	str	r0, [r7, #4]
 80142dc:	460b      	mov	r3, r1
 80142de:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80142e0:	2300      	movs	r3, #0
 80142e2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80142e4:	687b      	ldr	r3, [r7, #4]
 80142e6:	68db      	ldr	r3, [r3, #12]
 80142e8:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80142ec:	687b      	ldr	r3, [r7, #4]
 80142ee:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80142f0:	78fb      	ldrb	r3, [r7, #3]
 80142f2:	2b01      	cmp	r3, #1
 80142f4:	d115      	bne.n	8014322 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80142f6:	687b      	ldr	r3, [r7, #4]
 80142f8:	68db      	ldr	r3, [r3, #12]
 80142fa:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80142fe:	687b      	ldr	r3, [r7, #4]
 8014300:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8014302:	200a      	movs	r0, #10
 8014304:	f7ef f8f2 	bl	80034ec <HAL_Delay>
      ms += 10U;
 8014308:	68fb      	ldr	r3, [r7, #12]
 801430a:	330a      	adds	r3, #10
 801430c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 801430e:	6878      	ldr	r0, [r7, #4]
 8014310:	f001 f93f 	bl	8015592 <USB_GetMode>
 8014314:	4603      	mov	r3, r0
 8014316:	2b01      	cmp	r3, #1
 8014318:	d01e      	beq.n	8014358 <USB_SetCurrentMode+0x84>
 801431a:	68fb      	ldr	r3, [r7, #12]
 801431c:	2bc7      	cmp	r3, #199	@ 0xc7
 801431e:	d9f0      	bls.n	8014302 <USB_SetCurrentMode+0x2e>
 8014320:	e01a      	b.n	8014358 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8014322:	78fb      	ldrb	r3, [r7, #3]
 8014324:	2b00      	cmp	r3, #0
 8014326:	d115      	bne.n	8014354 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8014328:	687b      	ldr	r3, [r7, #4]
 801432a:	68db      	ldr	r3, [r3, #12]
 801432c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8014330:	687b      	ldr	r3, [r7, #4]
 8014332:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8014334:	200a      	movs	r0, #10
 8014336:	f7ef f8d9 	bl	80034ec <HAL_Delay>
      ms += 10U;
 801433a:	68fb      	ldr	r3, [r7, #12]
 801433c:	330a      	adds	r3, #10
 801433e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8014340:	6878      	ldr	r0, [r7, #4]
 8014342:	f001 f926 	bl	8015592 <USB_GetMode>
 8014346:	4603      	mov	r3, r0
 8014348:	2b00      	cmp	r3, #0
 801434a:	d005      	beq.n	8014358 <USB_SetCurrentMode+0x84>
 801434c:	68fb      	ldr	r3, [r7, #12]
 801434e:	2bc7      	cmp	r3, #199	@ 0xc7
 8014350:	d9f0      	bls.n	8014334 <USB_SetCurrentMode+0x60>
 8014352:	e001      	b.n	8014358 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8014354:	2301      	movs	r3, #1
 8014356:	e005      	b.n	8014364 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8014358:	68fb      	ldr	r3, [r7, #12]
 801435a:	2bc8      	cmp	r3, #200	@ 0xc8
 801435c:	d101      	bne.n	8014362 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 801435e:	2301      	movs	r3, #1
 8014360:	e000      	b.n	8014364 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8014362:	2300      	movs	r3, #0
}
 8014364:	4618      	mov	r0, r3
 8014366:	3710      	adds	r7, #16
 8014368:	46bd      	mov	sp, r7
 801436a:	bd80      	pop	{r7, pc}

0801436c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 801436c:	b084      	sub	sp, #16
 801436e:	b580      	push	{r7, lr}
 8014370:	b086      	sub	sp, #24
 8014372:	af00      	add	r7, sp, #0
 8014374:	6078      	str	r0, [r7, #4]
 8014376:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 801437a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 801437e:	2300      	movs	r3, #0
 8014380:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014382:	687b      	ldr	r3, [r7, #4]
 8014384:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8014386:	2300      	movs	r3, #0
 8014388:	613b      	str	r3, [r7, #16]
 801438a:	e009      	b.n	80143a0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 801438c:	687a      	ldr	r2, [r7, #4]
 801438e:	693b      	ldr	r3, [r7, #16]
 8014390:	3340      	adds	r3, #64	@ 0x40
 8014392:	009b      	lsls	r3, r3, #2
 8014394:	4413      	add	r3, r2
 8014396:	2200      	movs	r2, #0
 8014398:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 801439a:	693b      	ldr	r3, [r7, #16]
 801439c:	3301      	adds	r3, #1
 801439e:	613b      	str	r3, [r7, #16]
 80143a0:	693b      	ldr	r3, [r7, #16]
 80143a2:	2b0e      	cmp	r3, #14
 80143a4:	d9f2      	bls.n	801438c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80143a6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80143aa:	2b00      	cmp	r3, #0
 80143ac:	d11c      	bne.n	80143e8 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80143ae:	68fb      	ldr	r3, [r7, #12]
 80143b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80143b4:	685b      	ldr	r3, [r3, #4]
 80143b6:	68fa      	ldr	r2, [r7, #12]
 80143b8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80143bc:	f043 0302 	orr.w	r3, r3, #2
 80143c0:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80143c2:	687b      	ldr	r3, [r7, #4]
 80143c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80143c6:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80143ca:	687b      	ldr	r3, [r7, #4]
 80143cc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80143ce:	687b      	ldr	r3, [r7, #4]
 80143d0:	681b      	ldr	r3, [r3, #0]
 80143d2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80143d6:	687b      	ldr	r3, [r7, #4]
 80143d8:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80143da:	687b      	ldr	r3, [r7, #4]
 80143dc:	681b      	ldr	r3, [r3, #0]
 80143de:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80143e2:	687b      	ldr	r3, [r7, #4]
 80143e4:	601a      	str	r2, [r3, #0]
 80143e6:	e005      	b.n	80143f4 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80143e8:	687b      	ldr	r3, [r7, #4]
 80143ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80143ec:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80143f0:	687b      	ldr	r3, [r7, #4]
 80143f2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80143f4:	68fb      	ldr	r3, [r7, #12]
 80143f6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80143fa:	461a      	mov	r2, r3
 80143fc:	2300      	movs	r3, #0
 80143fe:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8014400:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8014404:	2b01      	cmp	r3, #1
 8014406:	d10d      	bne.n	8014424 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8014408:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801440c:	2b00      	cmp	r3, #0
 801440e:	d104      	bne.n	801441a <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8014410:	2100      	movs	r1, #0
 8014412:	6878      	ldr	r0, [r7, #4]
 8014414:	f000 f968 	bl	80146e8 <USB_SetDevSpeed>
 8014418:	e008      	b.n	801442c <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 801441a:	2101      	movs	r1, #1
 801441c:	6878      	ldr	r0, [r7, #4]
 801441e:	f000 f963 	bl	80146e8 <USB_SetDevSpeed>
 8014422:	e003      	b.n	801442c <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8014424:	2103      	movs	r1, #3
 8014426:	6878      	ldr	r0, [r7, #4]
 8014428:	f000 f95e 	bl	80146e8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 801442c:	2110      	movs	r1, #16
 801442e:	6878      	ldr	r0, [r7, #4]
 8014430:	f000 f8fa 	bl	8014628 <USB_FlushTxFifo>
 8014434:	4603      	mov	r3, r0
 8014436:	2b00      	cmp	r3, #0
 8014438:	d001      	beq.n	801443e <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 801443a:	2301      	movs	r3, #1
 801443c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 801443e:	6878      	ldr	r0, [r7, #4]
 8014440:	f000 f924 	bl	801468c <USB_FlushRxFifo>
 8014444:	4603      	mov	r3, r0
 8014446:	2b00      	cmp	r3, #0
 8014448:	d001      	beq.n	801444e <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 801444a:	2301      	movs	r3, #1
 801444c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 801444e:	68fb      	ldr	r3, [r7, #12]
 8014450:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014454:	461a      	mov	r2, r3
 8014456:	2300      	movs	r3, #0
 8014458:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 801445a:	68fb      	ldr	r3, [r7, #12]
 801445c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014460:	461a      	mov	r2, r3
 8014462:	2300      	movs	r3, #0
 8014464:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8014466:	68fb      	ldr	r3, [r7, #12]
 8014468:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801446c:	461a      	mov	r2, r3
 801446e:	2300      	movs	r3, #0
 8014470:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8014472:	2300      	movs	r3, #0
 8014474:	613b      	str	r3, [r7, #16]
 8014476:	e043      	b.n	8014500 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8014478:	693b      	ldr	r3, [r7, #16]
 801447a:	015a      	lsls	r2, r3, #5
 801447c:	68fb      	ldr	r3, [r7, #12]
 801447e:	4413      	add	r3, r2
 8014480:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014484:	681b      	ldr	r3, [r3, #0]
 8014486:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801448a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801448e:	d118      	bne.n	80144c2 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8014490:	693b      	ldr	r3, [r7, #16]
 8014492:	2b00      	cmp	r3, #0
 8014494:	d10a      	bne.n	80144ac <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8014496:	693b      	ldr	r3, [r7, #16]
 8014498:	015a      	lsls	r2, r3, #5
 801449a:	68fb      	ldr	r3, [r7, #12]
 801449c:	4413      	add	r3, r2
 801449e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80144a2:	461a      	mov	r2, r3
 80144a4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80144a8:	6013      	str	r3, [r2, #0]
 80144aa:	e013      	b.n	80144d4 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80144ac:	693b      	ldr	r3, [r7, #16]
 80144ae:	015a      	lsls	r2, r3, #5
 80144b0:	68fb      	ldr	r3, [r7, #12]
 80144b2:	4413      	add	r3, r2
 80144b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80144b8:	461a      	mov	r2, r3
 80144ba:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80144be:	6013      	str	r3, [r2, #0]
 80144c0:	e008      	b.n	80144d4 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80144c2:	693b      	ldr	r3, [r7, #16]
 80144c4:	015a      	lsls	r2, r3, #5
 80144c6:	68fb      	ldr	r3, [r7, #12]
 80144c8:	4413      	add	r3, r2
 80144ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80144ce:	461a      	mov	r2, r3
 80144d0:	2300      	movs	r3, #0
 80144d2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80144d4:	693b      	ldr	r3, [r7, #16]
 80144d6:	015a      	lsls	r2, r3, #5
 80144d8:	68fb      	ldr	r3, [r7, #12]
 80144da:	4413      	add	r3, r2
 80144dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80144e0:	461a      	mov	r2, r3
 80144e2:	2300      	movs	r3, #0
 80144e4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80144e6:	693b      	ldr	r3, [r7, #16]
 80144e8:	015a      	lsls	r2, r3, #5
 80144ea:	68fb      	ldr	r3, [r7, #12]
 80144ec:	4413      	add	r3, r2
 80144ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80144f2:	461a      	mov	r2, r3
 80144f4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80144f8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80144fa:	693b      	ldr	r3, [r7, #16]
 80144fc:	3301      	adds	r3, #1
 80144fe:	613b      	str	r3, [r7, #16]
 8014500:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8014504:	461a      	mov	r2, r3
 8014506:	693b      	ldr	r3, [r7, #16]
 8014508:	4293      	cmp	r3, r2
 801450a:	d3b5      	bcc.n	8014478 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 801450c:	2300      	movs	r3, #0
 801450e:	613b      	str	r3, [r7, #16]
 8014510:	e043      	b.n	801459a <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8014512:	693b      	ldr	r3, [r7, #16]
 8014514:	015a      	lsls	r2, r3, #5
 8014516:	68fb      	ldr	r3, [r7, #12]
 8014518:	4413      	add	r3, r2
 801451a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801451e:	681b      	ldr	r3, [r3, #0]
 8014520:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8014524:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8014528:	d118      	bne.n	801455c <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 801452a:	693b      	ldr	r3, [r7, #16]
 801452c:	2b00      	cmp	r3, #0
 801452e:	d10a      	bne.n	8014546 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8014530:	693b      	ldr	r3, [r7, #16]
 8014532:	015a      	lsls	r2, r3, #5
 8014534:	68fb      	ldr	r3, [r7, #12]
 8014536:	4413      	add	r3, r2
 8014538:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801453c:	461a      	mov	r2, r3
 801453e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8014542:	6013      	str	r3, [r2, #0]
 8014544:	e013      	b.n	801456e <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8014546:	693b      	ldr	r3, [r7, #16]
 8014548:	015a      	lsls	r2, r3, #5
 801454a:	68fb      	ldr	r3, [r7, #12]
 801454c:	4413      	add	r3, r2
 801454e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014552:	461a      	mov	r2, r3
 8014554:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8014558:	6013      	str	r3, [r2, #0]
 801455a:	e008      	b.n	801456e <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 801455c:	693b      	ldr	r3, [r7, #16]
 801455e:	015a      	lsls	r2, r3, #5
 8014560:	68fb      	ldr	r3, [r7, #12]
 8014562:	4413      	add	r3, r2
 8014564:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014568:	461a      	mov	r2, r3
 801456a:	2300      	movs	r3, #0
 801456c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 801456e:	693b      	ldr	r3, [r7, #16]
 8014570:	015a      	lsls	r2, r3, #5
 8014572:	68fb      	ldr	r3, [r7, #12]
 8014574:	4413      	add	r3, r2
 8014576:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801457a:	461a      	mov	r2, r3
 801457c:	2300      	movs	r3, #0
 801457e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8014580:	693b      	ldr	r3, [r7, #16]
 8014582:	015a      	lsls	r2, r3, #5
 8014584:	68fb      	ldr	r3, [r7, #12]
 8014586:	4413      	add	r3, r2
 8014588:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801458c:	461a      	mov	r2, r3
 801458e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8014592:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8014594:	693b      	ldr	r3, [r7, #16]
 8014596:	3301      	adds	r3, #1
 8014598:	613b      	str	r3, [r7, #16]
 801459a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801459e:	461a      	mov	r2, r3
 80145a0:	693b      	ldr	r3, [r7, #16]
 80145a2:	4293      	cmp	r3, r2
 80145a4:	d3b5      	bcc.n	8014512 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80145a6:	68fb      	ldr	r3, [r7, #12]
 80145a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80145ac:	691b      	ldr	r3, [r3, #16]
 80145ae:	68fa      	ldr	r2, [r7, #12]
 80145b0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80145b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80145b8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80145ba:	687b      	ldr	r3, [r7, #4]
 80145bc:	2200      	movs	r2, #0
 80145be:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80145c0:	687b      	ldr	r3, [r7, #4]
 80145c2:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80145c6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80145c8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80145cc:	2b00      	cmp	r3, #0
 80145ce:	d105      	bne.n	80145dc <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80145d0:	687b      	ldr	r3, [r7, #4]
 80145d2:	699b      	ldr	r3, [r3, #24]
 80145d4:	f043 0210 	orr.w	r2, r3, #16
 80145d8:	687b      	ldr	r3, [r7, #4]
 80145da:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80145dc:	687b      	ldr	r3, [r7, #4]
 80145de:	699a      	ldr	r2, [r3, #24]
 80145e0:	4b0f      	ldr	r3, [pc, #60]	@ (8014620 <USB_DevInit+0x2b4>)
 80145e2:	4313      	orrs	r3, r2
 80145e4:	687a      	ldr	r2, [r7, #4]
 80145e6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80145e8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80145ec:	2b00      	cmp	r3, #0
 80145ee:	d005      	beq.n	80145fc <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80145f0:	687b      	ldr	r3, [r7, #4]
 80145f2:	699b      	ldr	r3, [r3, #24]
 80145f4:	f043 0208 	orr.w	r2, r3, #8
 80145f8:	687b      	ldr	r3, [r7, #4]
 80145fa:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80145fc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8014600:	2b01      	cmp	r3, #1
 8014602:	d105      	bne.n	8014610 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8014604:	687b      	ldr	r3, [r7, #4]
 8014606:	699a      	ldr	r2, [r3, #24]
 8014608:	4b06      	ldr	r3, [pc, #24]	@ (8014624 <USB_DevInit+0x2b8>)
 801460a:	4313      	orrs	r3, r2
 801460c:	687a      	ldr	r2, [r7, #4]
 801460e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8014610:	7dfb      	ldrb	r3, [r7, #23]
}
 8014612:	4618      	mov	r0, r3
 8014614:	3718      	adds	r7, #24
 8014616:	46bd      	mov	sp, r7
 8014618:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801461c:	b004      	add	sp, #16
 801461e:	4770      	bx	lr
 8014620:	803c3800 	.word	0x803c3800
 8014624:	40000004 	.word	0x40000004

08014628 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8014628:	b480      	push	{r7}
 801462a:	b085      	sub	sp, #20
 801462c:	af00      	add	r7, sp, #0
 801462e:	6078      	str	r0, [r7, #4]
 8014630:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8014632:	2300      	movs	r3, #0
 8014634:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8014636:	68fb      	ldr	r3, [r7, #12]
 8014638:	3301      	adds	r3, #1
 801463a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801463c:	68fb      	ldr	r3, [r7, #12]
 801463e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8014642:	d901      	bls.n	8014648 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8014644:	2303      	movs	r3, #3
 8014646:	e01b      	b.n	8014680 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8014648:	687b      	ldr	r3, [r7, #4]
 801464a:	691b      	ldr	r3, [r3, #16]
 801464c:	2b00      	cmp	r3, #0
 801464e:	daf2      	bge.n	8014636 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8014650:	2300      	movs	r3, #0
 8014652:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8014654:	683b      	ldr	r3, [r7, #0]
 8014656:	019b      	lsls	r3, r3, #6
 8014658:	f043 0220 	orr.w	r2, r3, #32
 801465c:	687b      	ldr	r3, [r7, #4]
 801465e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8014660:	68fb      	ldr	r3, [r7, #12]
 8014662:	3301      	adds	r3, #1
 8014664:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8014666:	68fb      	ldr	r3, [r7, #12]
 8014668:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 801466c:	d901      	bls.n	8014672 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 801466e:	2303      	movs	r3, #3
 8014670:	e006      	b.n	8014680 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8014672:	687b      	ldr	r3, [r7, #4]
 8014674:	691b      	ldr	r3, [r3, #16]
 8014676:	f003 0320 	and.w	r3, r3, #32
 801467a:	2b20      	cmp	r3, #32
 801467c:	d0f0      	beq.n	8014660 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 801467e:	2300      	movs	r3, #0
}
 8014680:	4618      	mov	r0, r3
 8014682:	3714      	adds	r7, #20
 8014684:	46bd      	mov	sp, r7
 8014686:	f85d 7b04 	ldr.w	r7, [sp], #4
 801468a:	4770      	bx	lr

0801468c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 801468c:	b480      	push	{r7}
 801468e:	b085      	sub	sp, #20
 8014690:	af00      	add	r7, sp, #0
 8014692:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8014694:	2300      	movs	r3, #0
 8014696:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8014698:	68fb      	ldr	r3, [r7, #12]
 801469a:	3301      	adds	r3, #1
 801469c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801469e:	68fb      	ldr	r3, [r7, #12]
 80146a0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80146a4:	d901      	bls.n	80146aa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80146a6:	2303      	movs	r3, #3
 80146a8:	e018      	b.n	80146dc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80146aa:	687b      	ldr	r3, [r7, #4]
 80146ac:	691b      	ldr	r3, [r3, #16]
 80146ae:	2b00      	cmp	r3, #0
 80146b0:	daf2      	bge.n	8014698 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80146b2:	2300      	movs	r3, #0
 80146b4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80146b6:	687b      	ldr	r3, [r7, #4]
 80146b8:	2210      	movs	r2, #16
 80146ba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80146bc:	68fb      	ldr	r3, [r7, #12]
 80146be:	3301      	adds	r3, #1
 80146c0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80146c2:	68fb      	ldr	r3, [r7, #12]
 80146c4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80146c8:	d901      	bls.n	80146ce <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80146ca:	2303      	movs	r3, #3
 80146cc:	e006      	b.n	80146dc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80146ce:	687b      	ldr	r3, [r7, #4]
 80146d0:	691b      	ldr	r3, [r3, #16]
 80146d2:	f003 0310 	and.w	r3, r3, #16
 80146d6:	2b10      	cmp	r3, #16
 80146d8:	d0f0      	beq.n	80146bc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80146da:	2300      	movs	r3, #0
}
 80146dc:	4618      	mov	r0, r3
 80146de:	3714      	adds	r7, #20
 80146e0:	46bd      	mov	sp, r7
 80146e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146e6:	4770      	bx	lr

080146e8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80146e8:	b480      	push	{r7}
 80146ea:	b085      	sub	sp, #20
 80146ec:	af00      	add	r7, sp, #0
 80146ee:	6078      	str	r0, [r7, #4]
 80146f0:	460b      	mov	r3, r1
 80146f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80146f4:	687b      	ldr	r3, [r7, #4]
 80146f6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80146f8:	68fb      	ldr	r3, [r7, #12]
 80146fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80146fe:	681a      	ldr	r2, [r3, #0]
 8014700:	78fb      	ldrb	r3, [r7, #3]
 8014702:	68f9      	ldr	r1, [r7, #12]
 8014704:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8014708:	4313      	orrs	r3, r2
 801470a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 801470c:	2300      	movs	r3, #0
}
 801470e:	4618      	mov	r0, r3
 8014710:	3714      	adds	r7, #20
 8014712:	46bd      	mov	sp, r7
 8014714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014718:	4770      	bx	lr

0801471a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 801471a:	b480      	push	{r7}
 801471c:	b087      	sub	sp, #28
 801471e:	af00      	add	r7, sp, #0
 8014720:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014722:	687b      	ldr	r3, [r7, #4]
 8014724:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8014726:	693b      	ldr	r3, [r7, #16]
 8014728:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801472c:	689b      	ldr	r3, [r3, #8]
 801472e:	f003 0306 	and.w	r3, r3, #6
 8014732:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8014734:	68fb      	ldr	r3, [r7, #12]
 8014736:	2b00      	cmp	r3, #0
 8014738:	d102      	bne.n	8014740 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 801473a:	2300      	movs	r3, #0
 801473c:	75fb      	strb	r3, [r7, #23]
 801473e:	e00a      	b.n	8014756 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8014740:	68fb      	ldr	r3, [r7, #12]
 8014742:	2b02      	cmp	r3, #2
 8014744:	d002      	beq.n	801474c <USB_GetDevSpeed+0x32>
 8014746:	68fb      	ldr	r3, [r7, #12]
 8014748:	2b06      	cmp	r3, #6
 801474a:	d102      	bne.n	8014752 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 801474c:	2302      	movs	r3, #2
 801474e:	75fb      	strb	r3, [r7, #23]
 8014750:	e001      	b.n	8014756 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8014752:	230f      	movs	r3, #15
 8014754:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8014756:	7dfb      	ldrb	r3, [r7, #23]
}
 8014758:	4618      	mov	r0, r3
 801475a:	371c      	adds	r7, #28
 801475c:	46bd      	mov	sp, r7
 801475e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014762:	4770      	bx	lr

08014764 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8014764:	b480      	push	{r7}
 8014766:	b085      	sub	sp, #20
 8014768:	af00      	add	r7, sp, #0
 801476a:	6078      	str	r0, [r7, #4]
 801476c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801476e:	687b      	ldr	r3, [r7, #4]
 8014770:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8014772:	683b      	ldr	r3, [r7, #0]
 8014774:	781b      	ldrb	r3, [r3, #0]
 8014776:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8014778:	683b      	ldr	r3, [r7, #0]
 801477a:	785b      	ldrb	r3, [r3, #1]
 801477c:	2b01      	cmp	r3, #1
 801477e:	d139      	bne.n	80147f4 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8014780:	68fb      	ldr	r3, [r7, #12]
 8014782:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014786:	69da      	ldr	r2, [r3, #28]
 8014788:	683b      	ldr	r3, [r7, #0]
 801478a:	781b      	ldrb	r3, [r3, #0]
 801478c:	f003 030f 	and.w	r3, r3, #15
 8014790:	2101      	movs	r1, #1
 8014792:	fa01 f303 	lsl.w	r3, r1, r3
 8014796:	b29b      	uxth	r3, r3
 8014798:	68f9      	ldr	r1, [r7, #12]
 801479a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 801479e:	4313      	orrs	r3, r2
 80147a0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80147a2:	68bb      	ldr	r3, [r7, #8]
 80147a4:	015a      	lsls	r2, r3, #5
 80147a6:	68fb      	ldr	r3, [r7, #12]
 80147a8:	4413      	add	r3, r2
 80147aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80147ae:	681b      	ldr	r3, [r3, #0]
 80147b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80147b4:	2b00      	cmp	r3, #0
 80147b6:	d153      	bne.n	8014860 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80147b8:	68bb      	ldr	r3, [r7, #8]
 80147ba:	015a      	lsls	r2, r3, #5
 80147bc:	68fb      	ldr	r3, [r7, #12]
 80147be:	4413      	add	r3, r2
 80147c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80147c4:	681a      	ldr	r2, [r3, #0]
 80147c6:	683b      	ldr	r3, [r7, #0]
 80147c8:	689b      	ldr	r3, [r3, #8]
 80147ca:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80147ce:	683b      	ldr	r3, [r7, #0]
 80147d0:	791b      	ldrb	r3, [r3, #4]
 80147d2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80147d4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80147d6:	68bb      	ldr	r3, [r7, #8]
 80147d8:	059b      	lsls	r3, r3, #22
 80147da:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80147dc:	431a      	orrs	r2, r3
 80147de:	68bb      	ldr	r3, [r7, #8]
 80147e0:	0159      	lsls	r1, r3, #5
 80147e2:	68fb      	ldr	r3, [r7, #12]
 80147e4:	440b      	add	r3, r1
 80147e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80147ea:	4619      	mov	r1, r3
 80147ec:	4b20      	ldr	r3, [pc, #128]	@ (8014870 <USB_ActivateEndpoint+0x10c>)
 80147ee:	4313      	orrs	r3, r2
 80147f0:	600b      	str	r3, [r1, #0]
 80147f2:	e035      	b.n	8014860 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80147f4:	68fb      	ldr	r3, [r7, #12]
 80147f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80147fa:	69da      	ldr	r2, [r3, #28]
 80147fc:	683b      	ldr	r3, [r7, #0]
 80147fe:	781b      	ldrb	r3, [r3, #0]
 8014800:	f003 030f 	and.w	r3, r3, #15
 8014804:	2101      	movs	r1, #1
 8014806:	fa01 f303 	lsl.w	r3, r1, r3
 801480a:	041b      	lsls	r3, r3, #16
 801480c:	68f9      	ldr	r1, [r7, #12]
 801480e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8014812:	4313      	orrs	r3, r2
 8014814:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8014816:	68bb      	ldr	r3, [r7, #8]
 8014818:	015a      	lsls	r2, r3, #5
 801481a:	68fb      	ldr	r3, [r7, #12]
 801481c:	4413      	add	r3, r2
 801481e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014822:	681b      	ldr	r3, [r3, #0]
 8014824:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8014828:	2b00      	cmp	r3, #0
 801482a:	d119      	bne.n	8014860 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 801482c:	68bb      	ldr	r3, [r7, #8]
 801482e:	015a      	lsls	r2, r3, #5
 8014830:	68fb      	ldr	r3, [r7, #12]
 8014832:	4413      	add	r3, r2
 8014834:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014838:	681a      	ldr	r2, [r3, #0]
 801483a:	683b      	ldr	r3, [r7, #0]
 801483c:	689b      	ldr	r3, [r3, #8]
 801483e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8014842:	683b      	ldr	r3, [r7, #0]
 8014844:	791b      	ldrb	r3, [r3, #4]
 8014846:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8014848:	430b      	orrs	r3, r1
 801484a:	431a      	orrs	r2, r3
 801484c:	68bb      	ldr	r3, [r7, #8]
 801484e:	0159      	lsls	r1, r3, #5
 8014850:	68fb      	ldr	r3, [r7, #12]
 8014852:	440b      	add	r3, r1
 8014854:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014858:	4619      	mov	r1, r3
 801485a:	4b05      	ldr	r3, [pc, #20]	@ (8014870 <USB_ActivateEndpoint+0x10c>)
 801485c:	4313      	orrs	r3, r2
 801485e:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8014860:	2300      	movs	r3, #0
}
 8014862:	4618      	mov	r0, r3
 8014864:	3714      	adds	r7, #20
 8014866:	46bd      	mov	sp, r7
 8014868:	f85d 7b04 	ldr.w	r7, [sp], #4
 801486c:	4770      	bx	lr
 801486e:	bf00      	nop
 8014870:	10008000 	.word	0x10008000

08014874 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8014874:	b480      	push	{r7}
 8014876:	b085      	sub	sp, #20
 8014878:	af00      	add	r7, sp, #0
 801487a:	6078      	str	r0, [r7, #4]
 801487c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801487e:	687b      	ldr	r3, [r7, #4]
 8014880:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8014882:	683b      	ldr	r3, [r7, #0]
 8014884:	781b      	ldrb	r3, [r3, #0]
 8014886:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8014888:	683b      	ldr	r3, [r7, #0]
 801488a:	785b      	ldrb	r3, [r3, #1]
 801488c:	2b01      	cmp	r3, #1
 801488e:	d161      	bne.n	8014954 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8014890:	68bb      	ldr	r3, [r7, #8]
 8014892:	015a      	lsls	r2, r3, #5
 8014894:	68fb      	ldr	r3, [r7, #12]
 8014896:	4413      	add	r3, r2
 8014898:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801489c:	681b      	ldr	r3, [r3, #0]
 801489e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80148a2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80148a6:	d11f      	bne.n	80148e8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80148a8:	68bb      	ldr	r3, [r7, #8]
 80148aa:	015a      	lsls	r2, r3, #5
 80148ac:	68fb      	ldr	r3, [r7, #12]
 80148ae:	4413      	add	r3, r2
 80148b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80148b4:	681b      	ldr	r3, [r3, #0]
 80148b6:	68ba      	ldr	r2, [r7, #8]
 80148b8:	0151      	lsls	r1, r2, #5
 80148ba:	68fa      	ldr	r2, [r7, #12]
 80148bc:	440a      	add	r2, r1
 80148be:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80148c2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80148c6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80148c8:	68bb      	ldr	r3, [r7, #8]
 80148ca:	015a      	lsls	r2, r3, #5
 80148cc:	68fb      	ldr	r3, [r7, #12]
 80148ce:	4413      	add	r3, r2
 80148d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80148d4:	681b      	ldr	r3, [r3, #0]
 80148d6:	68ba      	ldr	r2, [r7, #8]
 80148d8:	0151      	lsls	r1, r2, #5
 80148da:	68fa      	ldr	r2, [r7, #12]
 80148dc:	440a      	add	r2, r1
 80148de:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80148e2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80148e6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80148e8:	68fb      	ldr	r3, [r7, #12]
 80148ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80148ee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80148f0:	683b      	ldr	r3, [r7, #0]
 80148f2:	781b      	ldrb	r3, [r3, #0]
 80148f4:	f003 030f 	and.w	r3, r3, #15
 80148f8:	2101      	movs	r1, #1
 80148fa:	fa01 f303 	lsl.w	r3, r1, r3
 80148fe:	b29b      	uxth	r3, r3
 8014900:	43db      	mvns	r3, r3
 8014902:	68f9      	ldr	r1, [r7, #12]
 8014904:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8014908:	4013      	ands	r3, r2
 801490a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 801490c:	68fb      	ldr	r3, [r7, #12]
 801490e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014912:	69da      	ldr	r2, [r3, #28]
 8014914:	683b      	ldr	r3, [r7, #0]
 8014916:	781b      	ldrb	r3, [r3, #0]
 8014918:	f003 030f 	and.w	r3, r3, #15
 801491c:	2101      	movs	r1, #1
 801491e:	fa01 f303 	lsl.w	r3, r1, r3
 8014922:	b29b      	uxth	r3, r3
 8014924:	43db      	mvns	r3, r3
 8014926:	68f9      	ldr	r1, [r7, #12]
 8014928:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 801492c:	4013      	ands	r3, r2
 801492e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8014930:	68bb      	ldr	r3, [r7, #8]
 8014932:	015a      	lsls	r2, r3, #5
 8014934:	68fb      	ldr	r3, [r7, #12]
 8014936:	4413      	add	r3, r2
 8014938:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801493c:	681a      	ldr	r2, [r3, #0]
 801493e:	68bb      	ldr	r3, [r7, #8]
 8014940:	0159      	lsls	r1, r3, #5
 8014942:	68fb      	ldr	r3, [r7, #12]
 8014944:	440b      	add	r3, r1
 8014946:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801494a:	4619      	mov	r1, r3
 801494c:	4b35      	ldr	r3, [pc, #212]	@ (8014a24 <USB_DeactivateEndpoint+0x1b0>)
 801494e:	4013      	ands	r3, r2
 8014950:	600b      	str	r3, [r1, #0]
 8014952:	e060      	b.n	8014a16 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8014954:	68bb      	ldr	r3, [r7, #8]
 8014956:	015a      	lsls	r2, r3, #5
 8014958:	68fb      	ldr	r3, [r7, #12]
 801495a:	4413      	add	r3, r2
 801495c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014960:	681b      	ldr	r3, [r3, #0]
 8014962:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8014966:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801496a:	d11f      	bne.n	80149ac <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 801496c:	68bb      	ldr	r3, [r7, #8]
 801496e:	015a      	lsls	r2, r3, #5
 8014970:	68fb      	ldr	r3, [r7, #12]
 8014972:	4413      	add	r3, r2
 8014974:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014978:	681b      	ldr	r3, [r3, #0]
 801497a:	68ba      	ldr	r2, [r7, #8]
 801497c:	0151      	lsls	r1, r2, #5
 801497e:	68fa      	ldr	r2, [r7, #12]
 8014980:	440a      	add	r2, r1
 8014982:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014986:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 801498a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 801498c:	68bb      	ldr	r3, [r7, #8]
 801498e:	015a      	lsls	r2, r3, #5
 8014990:	68fb      	ldr	r3, [r7, #12]
 8014992:	4413      	add	r3, r2
 8014994:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014998:	681b      	ldr	r3, [r3, #0]
 801499a:	68ba      	ldr	r2, [r7, #8]
 801499c:	0151      	lsls	r1, r2, #5
 801499e:	68fa      	ldr	r2, [r7, #12]
 80149a0:	440a      	add	r2, r1
 80149a2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80149a6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80149aa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80149ac:	68fb      	ldr	r3, [r7, #12]
 80149ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80149b2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80149b4:	683b      	ldr	r3, [r7, #0]
 80149b6:	781b      	ldrb	r3, [r3, #0]
 80149b8:	f003 030f 	and.w	r3, r3, #15
 80149bc:	2101      	movs	r1, #1
 80149be:	fa01 f303 	lsl.w	r3, r1, r3
 80149c2:	041b      	lsls	r3, r3, #16
 80149c4:	43db      	mvns	r3, r3
 80149c6:	68f9      	ldr	r1, [r7, #12]
 80149c8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80149cc:	4013      	ands	r3, r2
 80149ce:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80149d0:	68fb      	ldr	r3, [r7, #12]
 80149d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80149d6:	69da      	ldr	r2, [r3, #28]
 80149d8:	683b      	ldr	r3, [r7, #0]
 80149da:	781b      	ldrb	r3, [r3, #0]
 80149dc:	f003 030f 	and.w	r3, r3, #15
 80149e0:	2101      	movs	r1, #1
 80149e2:	fa01 f303 	lsl.w	r3, r1, r3
 80149e6:	041b      	lsls	r3, r3, #16
 80149e8:	43db      	mvns	r3, r3
 80149ea:	68f9      	ldr	r1, [r7, #12]
 80149ec:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80149f0:	4013      	ands	r3, r2
 80149f2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80149f4:	68bb      	ldr	r3, [r7, #8]
 80149f6:	015a      	lsls	r2, r3, #5
 80149f8:	68fb      	ldr	r3, [r7, #12]
 80149fa:	4413      	add	r3, r2
 80149fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014a00:	681a      	ldr	r2, [r3, #0]
 8014a02:	68bb      	ldr	r3, [r7, #8]
 8014a04:	0159      	lsls	r1, r3, #5
 8014a06:	68fb      	ldr	r3, [r7, #12]
 8014a08:	440b      	add	r3, r1
 8014a0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014a0e:	4619      	mov	r1, r3
 8014a10:	4b05      	ldr	r3, [pc, #20]	@ (8014a28 <USB_DeactivateEndpoint+0x1b4>)
 8014a12:	4013      	ands	r3, r2
 8014a14:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8014a16:	2300      	movs	r3, #0
}
 8014a18:	4618      	mov	r0, r3
 8014a1a:	3714      	adds	r7, #20
 8014a1c:	46bd      	mov	sp, r7
 8014a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a22:	4770      	bx	lr
 8014a24:	ec337800 	.word	0xec337800
 8014a28:	eff37800 	.word	0xeff37800

08014a2c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8014a2c:	b580      	push	{r7, lr}
 8014a2e:	b08a      	sub	sp, #40	@ 0x28
 8014a30:	af02      	add	r7, sp, #8
 8014a32:	60f8      	str	r0, [r7, #12]
 8014a34:	60b9      	str	r1, [r7, #8]
 8014a36:	4613      	mov	r3, r2
 8014a38:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014a3a:	68fb      	ldr	r3, [r7, #12]
 8014a3c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8014a3e:	68bb      	ldr	r3, [r7, #8]
 8014a40:	781b      	ldrb	r3, [r3, #0]
 8014a42:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8014a44:	68bb      	ldr	r3, [r7, #8]
 8014a46:	785b      	ldrb	r3, [r3, #1]
 8014a48:	2b01      	cmp	r3, #1
 8014a4a:	f040 8185 	bne.w	8014d58 <USB_EPStartXfer+0x32c>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8014a4e:	68bb      	ldr	r3, [r7, #8]
 8014a50:	691b      	ldr	r3, [r3, #16]
 8014a52:	2b00      	cmp	r3, #0
 8014a54:	d132      	bne.n	8014abc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8014a56:	69bb      	ldr	r3, [r7, #24]
 8014a58:	015a      	lsls	r2, r3, #5
 8014a5a:	69fb      	ldr	r3, [r7, #28]
 8014a5c:	4413      	add	r3, r2
 8014a5e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014a62:	691a      	ldr	r2, [r3, #16]
 8014a64:	69bb      	ldr	r3, [r7, #24]
 8014a66:	0159      	lsls	r1, r3, #5
 8014a68:	69fb      	ldr	r3, [r7, #28]
 8014a6a:	440b      	add	r3, r1
 8014a6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014a70:	4619      	mov	r1, r3
 8014a72:	4ba7      	ldr	r3, [pc, #668]	@ (8014d10 <USB_EPStartXfer+0x2e4>)
 8014a74:	4013      	ands	r3, r2
 8014a76:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8014a78:	69bb      	ldr	r3, [r7, #24]
 8014a7a:	015a      	lsls	r2, r3, #5
 8014a7c:	69fb      	ldr	r3, [r7, #28]
 8014a7e:	4413      	add	r3, r2
 8014a80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014a84:	691b      	ldr	r3, [r3, #16]
 8014a86:	69ba      	ldr	r2, [r7, #24]
 8014a88:	0151      	lsls	r1, r2, #5
 8014a8a:	69fa      	ldr	r2, [r7, #28]
 8014a8c:	440a      	add	r2, r1
 8014a8e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014a92:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8014a96:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8014a98:	69bb      	ldr	r3, [r7, #24]
 8014a9a:	015a      	lsls	r2, r3, #5
 8014a9c:	69fb      	ldr	r3, [r7, #28]
 8014a9e:	4413      	add	r3, r2
 8014aa0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014aa4:	691a      	ldr	r2, [r3, #16]
 8014aa6:	69bb      	ldr	r3, [r7, #24]
 8014aa8:	0159      	lsls	r1, r3, #5
 8014aaa:	69fb      	ldr	r3, [r7, #28]
 8014aac:	440b      	add	r3, r1
 8014aae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014ab2:	4619      	mov	r1, r3
 8014ab4:	4b97      	ldr	r3, [pc, #604]	@ (8014d14 <USB_EPStartXfer+0x2e8>)
 8014ab6:	4013      	ands	r3, r2
 8014ab8:	610b      	str	r3, [r1, #16]
 8014aba:	e097      	b.n	8014bec <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8014abc:	69bb      	ldr	r3, [r7, #24]
 8014abe:	015a      	lsls	r2, r3, #5
 8014ac0:	69fb      	ldr	r3, [r7, #28]
 8014ac2:	4413      	add	r3, r2
 8014ac4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014ac8:	691a      	ldr	r2, [r3, #16]
 8014aca:	69bb      	ldr	r3, [r7, #24]
 8014acc:	0159      	lsls	r1, r3, #5
 8014ace:	69fb      	ldr	r3, [r7, #28]
 8014ad0:	440b      	add	r3, r1
 8014ad2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014ad6:	4619      	mov	r1, r3
 8014ad8:	4b8e      	ldr	r3, [pc, #568]	@ (8014d14 <USB_EPStartXfer+0x2e8>)
 8014ada:	4013      	ands	r3, r2
 8014adc:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8014ade:	69bb      	ldr	r3, [r7, #24]
 8014ae0:	015a      	lsls	r2, r3, #5
 8014ae2:	69fb      	ldr	r3, [r7, #28]
 8014ae4:	4413      	add	r3, r2
 8014ae6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014aea:	691a      	ldr	r2, [r3, #16]
 8014aec:	69bb      	ldr	r3, [r7, #24]
 8014aee:	0159      	lsls	r1, r3, #5
 8014af0:	69fb      	ldr	r3, [r7, #28]
 8014af2:	440b      	add	r3, r1
 8014af4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014af8:	4619      	mov	r1, r3
 8014afa:	4b85      	ldr	r3, [pc, #532]	@ (8014d10 <USB_EPStartXfer+0x2e4>)
 8014afc:	4013      	ands	r3, r2
 8014afe:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8014b00:	69bb      	ldr	r3, [r7, #24]
 8014b02:	2b00      	cmp	r3, #0
 8014b04:	d11a      	bne.n	8014b3c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8014b06:	68bb      	ldr	r3, [r7, #8]
 8014b08:	691a      	ldr	r2, [r3, #16]
 8014b0a:	68bb      	ldr	r3, [r7, #8]
 8014b0c:	689b      	ldr	r3, [r3, #8]
 8014b0e:	429a      	cmp	r2, r3
 8014b10:	d903      	bls.n	8014b1a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8014b12:	68bb      	ldr	r3, [r7, #8]
 8014b14:	689a      	ldr	r2, [r3, #8]
 8014b16:	68bb      	ldr	r3, [r7, #8]
 8014b18:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8014b1a:	69bb      	ldr	r3, [r7, #24]
 8014b1c:	015a      	lsls	r2, r3, #5
 8014b1e:	69fb      	ldr	r3, [r7, #28]
 8014b20:	4413      	add	r3, r2
 8014b22:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014b26:	691b      	ldr	r3, [r3, #16]
 8014b28:	69ba      	ldr	r2, [r7, #24]
 8014b2a:	0151      	lsls	r1, r2, #5
 8014b2c:	69fa      	ldr	r2, [r7, #28]
 8014b2e:	440a      	add	r2, r1
 8014b30:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014b34:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8014b38:	6113      	str	r3, [r2, #16]
 8014b3a:	e044      	b.n	8014bc6 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8014b3c:	68bb      	ldr	r3, [r7, #8]
 8014b3e:	691a      	ldr	r2, [r3, #16]
 8014b40:	68bb      	ldr	r3, [r7, #8]
 8014b42:	689b      	ldr	r3, [r3, #8]
 8014b44:	4413      	add	r3, r2
 8014b46:	1e5a      	subs	r2, r3, #1
 8014b48:	68bb      	ldr	r3, [r7, #8]
 8014b4a:	689b      	ldr	r3, [r3, #8]
 8014b4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8014b50:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8014b52:	69bb      	ldr	r3, [r7, #24]
 8014b54:	015a      	lsls	r2, r3, #5
 8014b56:	69fb      	ldr	r3, [r7, #28]
 8014b58:	4413      	add	r3, r2
 8014b5a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014b5e:	691a      	ldr	r2, [r3, #16]
 8014b60:	8afb      	ldrh	r3, [r7, #22]
 8014b62:	04d9      	lsls	r1, r3, #19
 8014b64:	4b6c      	ldr	r3, [pc, #432]	@ (8014d18 <USB_EPStartXfer+0x2ec>)
 8014b66:	400b      	ands	r3, r1
 8014b68:	69b9      	ldr	r1, [r7, #24]
 8014b6a:	0148      	lsls	r0, r1, #5
 8014b6c:	69f9      	ldr	r1, [r7, #28]
 8014b6e:	4401      	add	r1, r0
 8014b70:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8014b74:	4313      	orrs	r3, r2
 8014b76:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8014b78:	68bb      	ldr	r3, [r7, #8]
 8014b7a:	791b      	ldrb	r3, [r3, #4]
 8014b7c:	2b01      	cmp	r3, #1
 8014b7e:	d122      	bne.n	8014bc6 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8014b80:	69bb      	ldr	r3, [r7, #24]
 8014b82:	015a      	lsls	r2, r3, #5
 8014b84:	69fb      	ldr	r3, [r7, #28]
 8014b86:	4413      	add	r3, r2
 8014b88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014b8c:	691b      	ldr	r3, [r3, #16]
 8014b8e:	69ba      	ldr	r2, [r7, #24]
 8014b90:	0151      	lsls	r1, r2, #5
 8014b92:	69fa      	ldr	r2, [r7, #28]
 8014b94:	440a      	add	r2, r1
 8014b96:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014b9a:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8014b9e:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8014ba0:	69bb      	ldr	r3, [r7, #24]
 8014ba2:	015a      	lsls	r2, r3, #5
 8014ba4:	69fb      	ldr	r3, [r7, #28]
 8014ba6:	4413      	add	r3, r2
 8014ba8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014bac:	691a      	ldr	r2, [r3, #16]
 8014bae:	8afb      	ldrh	r3, [r7, #22]
 8014bb0:	075b      	lsls	r3, r3, #29
 8014bb2:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8014bb6:	69b9      	ldr	r1, [r7, #24]
 8014bb8:	0148      	lsls	r0, r1, #5
 8014bba:	69f9      	ldr	r1, [r7, #28]
 8014bbc:	4401      	add	r1, r0
 8014bbe:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8014bc2:	4313      	orrs	r3, r2
 8014bc4:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8014bc6:	69bb      	ldr	r3, [r7, #24]
 8014bc8:	015a      	lsls	r2, r3, #5
 8014bca:	69fb      	ldr	r3, [r7, #28]
 8014bcc:	4413      	add	r3, r2
 8014bce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014bd2:	691a      	ldr	r2, [r3, #16]
 8014bd4:	68bb      	ldr	r3, [r7, #8]
 8014bd6:	691b      	ldr	r3, [r3, #16]
 8014bd8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8014bdc:	69b9      	ldr	r1, [r7, #24]
 8014bde:	0148      	lsls	r0, r1, #5
 8014be0:	69f9      	ldr	r1, [r7, #28]
 8014be2:	4401      	add	r1, r0
 8014be4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8014be8:	4313      	orrs	r3, r2
 8014bea:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8014bec:	79fb      	ldrb	r3, [r7, #7]
 8014bee:	2b01      	cmp	r3, #1
 8014bf0:	d14b      	bne.n	8014c8a <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8014bf2:	68bb      	ldr	r3, [r7, #8]
 8014bf4:	69db      	ldr	r3, [r3, #28]
 8014bf6:	2b00      	cmp	r3, #0
 8014bf8:	d009      	beq.n	8014c0e <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8014bfa:	69bb      	ldr	r3, [r7, #24]
 8014bfc:	015a      	lsls	r2, r3, #5
 8014bfe:	69fb      	ldr	r3, [r7, #28]
 8014c00:	4413      	add	r3, r2
 8014c02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014c06:	461a      	mov	r2, r3
 8014c08:	68bb      	ldr	r3, [r7, #8]
 8014c0a:	69db      	ldr	r3, [r3, #28]
 8014c0c:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8014c0e:	68bb      	ldr	r3, [r7, #8]
 8014c10:	791b      	ldrb	r3, [r3, #4]
 8014c12:	2b01      	cmp	r3, #1
 8014c14:	d128      	bne.n	8014c68 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8014c16:	69fb      	ldr	r3, [r7, #28]
 8014c18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014c1c:	689b      	ldr	r3, [r3, #8]
 8014c1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8014c22:	2b00      	cmp	r3, #0
 8014c24:	d110      	bne.n	8014c48 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8014c26:	69bb      	ldr	r3, [r7, #24]
 8014c28:	015a      	lsls	r2, r3, #5
 8014c2a:	69fb      	ldr	r3, [r7, #28]
 8014c2c:	4413      	add	r3, r2
 8014c2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014c32:	681b      	ldr	r3, [r3, #0]
 8014c34:	69ba      	ldr	r2, [r7, #24]
 8014c36:	0151      	lsls	r1, r2, #5
 8014c38:	69fa      	ldr	r2, [r7, #28]
 8014c3a:	440a      	add	r2, r1
 8014c3c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014c40:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8014c44:	6013      	str	r3, [r2, #0]
 8014c46:	e00f      	b.n	8014c68 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8014c48:	69bb      	ldr	r3, [r7, #24]
 8014c4a:	015a      	lsls	r2, r3, #5
 8014c4c:	69fb      	ldr	r3, [r7, #28]
 8014c4e:	4413      	add	r3, r2
 8014c50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014c54:	681b      	ldr	r3, [r3, #0]
 8014c56:	69ba      	ldr	r2, [r7, #24]
 8014c58:	0151      	lsls	r1, r2, #5
 8014c5a:	69fa      	ldr	r2, [r7, #28]
 8014c5c:	440a      	add	r2, r1
 8014c5e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014c62:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8014c66:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8014c68:	69bb      	ldr	r3, [r7, #24]
 8014c6a:	015a      	lsls	r2, r3, #5
 8014c6c:	69fb      	ldr	r3, [r7, #28]
 8014c6e:	4413      	add	r3, r2
 8014c70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014c74:	681b      	ldr	r3, [r3, #0]
 8014c76:	69ba      	ldr	r2, [r7, #24]
 8014c78:	0151      	lsls	r1, r2, #5
 8014c7a:	69fa      	ldr	r2, [r7, #28]
 8014c7c:	440a      	add	r2, r1
 8014c7e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014c82:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8014c86:	6013      	str	r3, [r2, #0]
 8014c88:	e169      	b.n	8014f5e <USB_EPStartXfer+0x532>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8014c8a:	69bb      	ldr	r3, [r7, #24]
 8014c8c:	015a      	lsls	r2, r3, #5
 8014c8e:	69fb      	ldr	r3, [r7, #28]
 8014c90:	4413      	add	r3, r2
 8014c92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014c96:	681b      	ldr	r3, [r3, #0]
 8014c98:	69ba      	ldr	r2, [r7, #24]
 8014c9a:	0151      	lsls	r1, r2, #5
 8014c9c:	69fa      	ldr	r2, [r7, #28]
 8014c9e:	440a      	add	r2, r1
 8014ca0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014ca4:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8014ca8:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8014caa:	68bb      	ldr	r3, [r7, #8]
 8014cac:	791b      	ldrb	r3, [r3, #4]
 8014cae:	2b01      	cmp	r3, #1
 8014cb0:	d015      	beq.n	8014cde <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8014cb2:	68bb      	ldr	r3, [r7, #8]
 8014cb4:	691b      	ldr	r3, [r3, #16]
 8014cb6:	2b00      	cmp	r3, #0
 8014cb8:	f000 8151 	beq.w	8014f5e <USB_EPStartXfer+0x532>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8014cbc:	69fb      	ldr	r3, [r7, #28]
 8014cbe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014cc2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8014cc4:	68bb      	ldr	r3, [r7, #8]
 8014cc6:	781b      	ldrb	r3, [r3, #0]
 8014cc8:	f003 030f 	and.w	r3, r3, #15
 8014ccc:	2101      	movs	r1, #1
 8014cce:	fa01 f303 	lsl.w	r3, r1, r3
 8014cd2:	69f9      	ldr	r1, [r7, #28]
 8014cd4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8014cd8:	4313      	orrs	r3, r2
 8014cda:	634b      	str	r3, [r1, #52]	@ 0x34
 8014cdc:	e13f      	b.n	8014f5e <USB_EPStartXfer+0x532>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8014cde:	69fb      	ldr	r3, [r7, #28]
 8014ce0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014ce4:	689b      	ldr	r3, [r3, #8]
 8014ce6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8014cea:	2b00      	cmp	r3, #0
 8014cec:	d116      	bne.n	8014d1c <USB_EPStartXfer+0x2f0>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8014cee:	69bb      	ldr	r3, [r7, #24]
 8014cf0:	015a      	lsls	r2, r3, #5
 8014cf2:	69fb      	ldr	r3, [r7, #28]
 8014cf4:	4413      	add	r3, r2
 8014cf6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014cfa:	681b      	ldr	r3, [r3, #0]
 8014cfc:	69ba      	ldr	r2, [r7, #24]
 8014cfe:	0151      	lsls	r1, r2, #5
 8014d00:	69fa      	ldr	r2, [r7, #28]
 8014d02:	440a      	add	r2, r1
 8014d04:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014d08:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8014d0c:	6013      	str	r3, [r2, #0]
 8014d0e:	e015      	b.n	8014d3c <USB_EPStartXfer+0x310>
 8014d10:	e007ffff 	.word	0xe007ffff
 8014d14:	fff80000 	.word	0xfff80000
 8014d18:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8014d1c:	69bb      	ldr	r3, [r7, #24]
 8014d1e:	015a      	lsls	r2, r3, #5
 8014d20:	69fb      	ldr	r3, [r7, #28]
 8014d22:	4413      	add	r3, r2
 8014d24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014d28:	681b      	ldr	r3, [r3, #0]
 8014d2a:	69ba      	ldr	r2, [r7, #24]
 8014d2c:	0151      	lsls	r1, r2, #5
 8014d2e:	69fa      	ldr	r2, [r7, #28]
 8014d30:	440a      	add	r2, r1
 8014d32:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014d36:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8014d3a:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8014d3c:	68bb      	ldr	r3, [r7, #8]
 8014d3e:	68d9      	ldr	r1, [r3, #12]
 8014d40:	68bb      	ldr	r3, [r7, #8]
 8014d42:	781a      	ldrb	r2, [r3, #0]
 8014d44:	68bb      	ldr	r3, [r7, #8]
 8014d46:	691b      	ldr	r3, [r3, #16]
 8014d48:	b298      	uxth	r0, r3
 8014d4a:	79fb      	ldrb	r3, [r7, #7]
 8014d4c:	9300      	str	r3, [sp, #0]
 8014d4e:	4603      	mov	r3, r0
 8014d50:	68f8      	ldr	r0, [r7, #12]
 8014d52:	f000 f9b9 	bl	80150c8 <USB_WritePacket>
 8014d56:	e102      	b.n	8014f5e <USB_EPStartXfer+0x532>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8014d58:	69bb      	ldr	r3, [r7, #24]
 8014d5a:	015a      	lsls	r2, r3, #5
 8014d5c:	69fb      	ldr	r3, [r7, #28]
 8014d5e:	4413      	add	r3, r2
 8014d60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014d64:	691a      	ldr	r2, [r3, #16]
 8014d66:	69bb      	ldr	r3, [r7, #24]
 8014d68:	0159      	lsls	r1, r3, #5
 8014d6a:	69fb      	ldr	r3, [r7, #28]
 8014d6c:	440b      	add	r3, r1
 8014d6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014d72:	4619      	mov	r1, r3
 8014d74:	4b7c      	ldr	r3, [pc, #496]	@ (8014f68 <USB_EPStartXfer+0x53c>)
 8014d76:	4013      	ands	r3, r2
 8014d78:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8014d7a:	69bb      	ldr	r3, [r7, #24]
 8014d7c:	015a      	lsls	r2, r3, #5
 8014d7e:	69fb      	ldr	r3, [r7, #28]
 8014d80:	4413      	add	r3, r2
 8014d82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014d86:	691a      	ldr	r2, [r3, #16]
 8014d88:	69bb      	ldr	r3, [r7, #24]
 8014d8a:	0159      	lsls	r1, r3, #5
 8014d8c:	69fb      	ldr	r3, [r7, #28]
 8014d8e:	440b      	add	r3, r1
 8014d90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014d94:	4619      	mov	r1, r3
 8014d96:	4b75      	ldr	r3, [pc, #468]	@ (8014f6c <USB_EPStartXfer+0x540>)
 8014d98:	4013      	ands	r3, r2
 8014d9a:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 8014d9c:	69bb      	ldr	r3, [r7, #24]
 8014d9e:	2b00      	cmp	r3, #0
 8014da0:	d12f      	bne.n	8014e02 <USB_EPStartXfer+0x3d6>
    {
      if (ep->xfer_len > 0U)
 8014da2:	68bb      	ldr	r3, [r7, #8]
 8014da4:	691b      	ldr	r3, [r3, #16]
 8014da6:	2b00      	cmp	r3, #0
 8014da8:	d003      	beq.n	8014db2 <USB_EPStartXfer+0x386>
      {
        ep->xfer_len = ep->maxpacket;
 8014daa:	68bb      	ldr	r3, [r7, #8]
 8014dac:	689a      	ldr	r2, [r3, #8]
 8014dae:	68bb      	ldr	r3, [r7, #8]
 8014db0:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8014db2:	68bb      	ldr	r3, [r7, #8]
 8014db4:	689a      	ldr	r2, [r3, #8]
 8014db6:	68bb      	ldr	r3, [r7, #8]
 8014db8:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8014dba:	69bb      	ldr	r3, [r7, #24]
 8014dbc:	015a      	lsls	r2, r3, #5
 8014dbe:	69fb      	ldr	r3, [r7, #28]
 8014dc0:	4413      	add	r3, r2
 8014dc2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014dc6:	691a      	ldr	r2, [r3, #16]
 8014dc8:	68bb      	ldr	r3, [r7, #8]
 8014dca:	6a1b      	ldr	r3, [r3, #32]
 8014dcc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8014dd0:	69b9      	ldr	r1, [r7, #24]
 8014dd2:	0148      	lsls	r0, r1, #5
 8014dd4:	69f9      	ldr	r1, [r7, #28]
 8014dd6:	4401      	add	r1, r0
 8014dd8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8014ddc:	4313      	orrs	r3, r2
 8014dde:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8014de0:	69bb      	ldr	r3, [r7, #24]
 8014de2:	015a      	lsls	r2, r3, #5
 8014de4:	69fb      	ldr	r3, [r7, #28]
 8014de6:	4413      	add	r3, r2
 8014de8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014dec:	691b      	ldr	r3, [r3, #16]
 8014dee:	69ba      	ldr	r2, [r7, #24]
 8014df0:	0151      	lsls	r1, r2, #5
 8014df2:	69fa      	ldr	r2, [r7, #28]
 8014df4:	440a      	add	r2, r1
 8014df6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014dfa:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8014dfe:	6113      	str	r3, [r2, #16]
 8014e00:	e05f      	b.n	8014ec2 <USB_EPStartXfer+0x496>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8014e02:	68bb      	ldr	r3, [r7, #8]
 8014e04:	691b      	ldr	r3, [r3, #16]
 8014e06:	2b00      	cmp	r3, #0
 8014e08:	d123      	bne.n	8014e52 <USB_EPStartXfer+0x426>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8014e0a:	69bb      	ldr	r3, [r7, #24]
 8014e0c:	015a      	lsls	r2, r3, #5
 8014e0e:	69fb      	ldr	r3, [r7, #28]
 8014e10:	4413      	add	r3, r2
 8014e12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014e16:	691a      	ldr	r2, [r3, #16]
 8014e18:	68bb      	ldr	r3, [r7, #8]
 8014e1a:	689b      	ldr	r3, [r3, #8]
 8014e1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8014e20:	69b9      	ldr	r1, [r7, #24]
 8014e22:	0148      	lsls	r0, r1, #5
 8014e24:	69f9      	ldr	r1, [r7, #28]
 8014e26:	4401      	add	r1, r0
 8014e28:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8014e2c:	4313      	orrs	r3, r2
 8014e2e:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8014e30:	69bb      	ldr	r3, [r7, #24]
 8014e32:	015a      	lsls	r2, r3, #5
 8014e34:	69fb      	ldr	r3, [r7, #28]
 8014e36:	4413      	add	r3, r2
 8014e38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014e3c:	691b      	ldr	r3, [r3, #16]
 8014e3e:	69ba      	ldr	r2, [r7, #24]
 8014e40:	0151      	lsls	r1, r2, #5
 8014e42:	69fa      	ldr	r2, [r7, #28]
 8014e44:	440a      	add	r2, r1
 8014e46:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014e4a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8014e4e:	6113      	str	r3, [r2, #16]
 8014e50:	e037      	b.n	8014ec2 <USB_EPStartXfer+0x496>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8014e52:	68bb      	ldr	r3, [r7, #8]
 8014e54:	691a      	ldr	r2, [r3, #16]
 8014e56:	68bb      	ldr	r3, [r7, #8]
 8014e58:	689b      	ldr	r3, [r3, #8]
 8014e5a:	4413      	add	r3, r2
 8014e5c:	1e5a      	subs	r2, r3, #1
 8014e5e:	68bb      	ldr	r3, [r7, #8]
 8014e60:	689b      	ldr	r3, [r3, #8]
 8014e62:	fbb2 f3f3 	udiv	r3, r2, r3
 8014e66:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8014e68:	68bb      	ldr	r3, [r7, #8]
 8014e6a:	689b      	ldr	r3, [r3, #8]
 8014e6c:	8afa      	ldrh	r2, [r7, #22]
 8014e6e:	fb03 f202 	mul.w	r2, r3, r2
 8014e72:	68bb      	ldr	r3, [r7, #8]
 8014e74:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8014e76:	69bb      	ldr	r3, [r7, #24]
 8014e78:	015a      	lsls	r2, r3, #5
 8014e7a:	69fb      	ldr	r3, [r7, #28]
 8014e7c:	4413      	add	r3, r2
 8014e7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014e82:	691a      	ldr	r2, [r3, #16]
 8014e84:	8afb      	ldrh	r3, [r7, #22]
 8014e86:	04d9      	lsls	r1, r3, #19
 8014e88:	4b39      	ldr	r3, [pc, #228]	@ (8014f70 <USB_EPStartXfer+0x544>)
 8014e8a:	400b      	ands	r3, r1
 8014e8c:	69b9      	ldr	r1, [r7, #24]
 8014e8e:	0148      	lsls	r0, r1, #5
 8014e90:	69f9      	ldr	r1, [r7, #28]
 8014e92:	4401      	add	r1, r0
 8014e94:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8014e98:	4313      	orrs	r3, r2
 8014e9a:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8014e9c:	69bb      	ldr	r3, [r7, #24]
 8014e9e:	015a      	lsls	r2, r3, #5
 8014ea0:	69fb      	ldr	r3, [r7, #28]
 8014ea2:	4413      	add	r3, r2
 8014ea4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014ea8:	691a      	ldr	r2, [r3, #16]
 8014eaa:	68bb      	ldr	r3, [r7, #8]
 8014eac:	6a1b      	ldr	r3, [r3, #32]
 8014eae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8014eb2:	69b9      	ldr	r1, [r7, #24]
 8014eb4:	0148      	lsls	r0, r1, #5
 8014eb6:	69f9      	ldr	r1, [r7, #28]
 8014eb8:	4401      	add	r1, r0
 8014eba:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8014ebe:	4313      	orrs	r3, r2
 8014ec0:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8014ec2:	79fb      	ldrb	r3, [r7, #7]
 8014ec4:	2b01      	cmp	r3, #1
 8014ec6:	d10d      	bne.n	8014ee4 <USB_EPStartXfer+0x4b8>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8014ec8:	68bb      	ldr	r3, [r7, #8]
 8014eca:	68db      	ldr	r3, [r3, #12]
 8014ecc:	2b00      	cmp	r3, #0
 8014ece:	d009      	beq.n	8014ee4 <USB_EPStartXfer+0x4b8>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8014ed0:	68bb      	ldr	r3, [r7, #8]
 8014ed2:	68d9      	ldr	r1, [r3, #12]
 8014ed4:	69bb      	ldr	r3, [r7, #24]
 8014ed6:	015a      	lsls	r2, r3, #5
 8014ed8:	69fb      	ldr	r3, [r7, #28]
 8014eda:	4413      	add	r3, r2
 8014edc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014ee0:	460a      	mov	r2, r1
 8014ee2:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8014ee4:	68bb      	ldr	r3, [r7, #8]
 8014ee6:	791b      	ldrb	r3, [r3, #4]
 8014ee8:	2b01      	cmp	r3, #1
 8014eea:	d128      	bne.n	8014f3e <USB_EPStartXfer+0x512>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8014eec:	69fb      	ldr	r3, [r7, #28]
 8014eee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014ef2:	689b      	ldr	r3, [r3, #8]
 8014ef4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8014ef8:	2b00      	cmp	r3, #0
 8014efa:	d110      	bne.n	8014f1e <USB_EPStartXfer+0x4f2>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8014efc:	69bb      	ldr	r3, [r7, #24]
 8014efe:	015a      	lsls	r2, r3, #5
 8014f00:	69fb      	ldr	r3, [r7, #28]
 8014f02:	4413      	add	r3, r2
 8014f04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014f08:	681b      	ldr	r3, [r3, #0]
 8014f0a:	69ba      	ldr	r2, [r7, #24]
 8014f0c:	0151      	lsls	r1, r2, #5
 8014f0e:	69fa      	ldr	r2, [r7, #28]
 8014f10:	440a      	add	r2, r1
 8014f12:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014f16:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8014f1a:	6013      	str	r3, [r2, #0]
 8014f1c:	e00f      	b.n	8014f3e <USB_EPStartXfer+0x512>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8014f1e:	69bb      	ldr	r3, [r7, #24]
 8014f20:	015a      	lsls	r2, r3, #5
 8014f22:	69fb      	ldr	r3, [r7, #28]
 8014f24:	4413      	add	r3, r2
 8014f26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014f2a:	681b      	ldr	r3, [r3, #0]
 8014f2c:	69ba      	ldr	r2, [r7, #24]
 8014f2e:	0151      	lsls	r1, r2, #5
 8014f30:	69fa      	ldr	r2, [r7, #28]
 8014f32:	440a      	add	r2, r1
 8014f34:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014f38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8014f3c:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8014f3e:	69bb      	ldr	r3, [r7, #24]
 8014f40:	015a      	lsls	r2, r3, #5
 8014f42:	69fb      	ldr	r3, [r7, #28]
 8014f44:	4413      	add	r3, r2
 8014f46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014f4a:	681b      	ldr	r3, [r3, #0]
 8014f4c:	69ba      	ldr	r2, [r7, #24]
 8014f4e:	0151      	lsls	r1, r2, #5
 8014f50:	69fa      	ldr	r2, [r7, #28]
 8014f52:	440a      	add	r2, r1
 8014f54:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014f58:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8014f5c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8014f5e:	2300      	movs	r3, #0
}
 8014f60:	4618      	mov	r0, r3
 8014f62:	3720      	adds	r7, #32
 8014f64:	46bd      	mov	sp, r7
 8014f66:	bd80      	pop	{r7, pc}
 8014f68:	fff80000 	.word	0xfff80000
 8014f6c:	e007ffff 	.word	0xe007ffff
 8014f70:	1ff80000 	.word	0x1ff80000

08014f74 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8014f74:	b480      	push	{r7}
 8014f76:	b087      	sub	sp, #28
 8014f78:	af00      	add	r7, sp, #0
 8014f7a:	6078      	str	r0, [r7, #4]
 8014f7c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8014f7e:	2300      	movs	r3, #0
 8014f80:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8014f82:	2300      	movs	r3, #0
 8014f84:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014f86:	687b      	ldr	r3, [r7, #4]
 8014f88:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8014f8a:	683b      	ldr	r3, [r7, #0]
 8014f8c:	785b      	ldrb	r3, [r3, #1]
 8014f8e:	2b01      	cmp	r3, #1
 8014f90:	d14a      	bne.n	8015028 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8014f92:	683b      	ldr	r3, [r7, #0]
 8014f94:	781b      	ldrb	r3, [r3, #0]
 8014f96:	015a      	lsls	r2, r3, #5
 8014f98:	693b      	ldr	r3, [r7, #16]
 8014f9a:	4413      	add	r3, r2
 8014f9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014fa0:	681b      	ldr	r3, [r3, #0]
 8014fa2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8014fa6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8014faa:	f040 8086 	bne.w	80150ba <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8014fae:	683b      	ldr	r3, [r7, #0]
 8014fb0:	781b      	ldrb	r3, [r3, #0]
 8014fb2:	015a      	lsls	r2, r3, #5
 8014fb4:	693b      	ldr	r3, [r7, #16]
 8014fb6:	4413      	add	r3, r2
 8014fb8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014fbc:	681b      	ldr	r3, [r3, #0]
 8014fbe:	683a      	ldr	r2, [r7, #0]
 8014fc0:	7812      	ldrb	r2, [r2, #0]
 8014fc2:	0151      	lsls	r1, r2, #5
 8014fc4:	693a      	ldr	r2, [r7, #16]
 8014fc6:	440a      	add	r2, r1
 8014fc8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014fcc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8014fd0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8014fd2:	683b      	ldr	r3, [r7, #0]
 8014fd4:	781b      	ldrb	r3, [r3, #0]
 8014fd6:	015a      	lsls	r2, r3, #5
 8014fd8:	693b      	ldr	r3, [r7, #16]
 8014fda:	4413      	add	r3, r2
 8014fdc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014fe0:	681b      	ldr	r3, [r3, #0]
 8014fe2:	683a      	ldr	r2, [r7, #0]
 8014fe4:	7812      	ldrb	r2, [r2, #0]
 8014fe6:	0151      	lsls	r1, r2, #5
 8014fe8:	693a      	ldr	r2, [r7, #16]
 8014fea:	440a      	add	r2, r1
 8014fec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014ff0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8014ff4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8014ff6:	68fb      	ldr	r3, [r7, #12]
 8014ff8:	3301      	adds	r3, #1
 8014ffa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8014ffc:	68fb      	ldr	r3, [r7, #12]
 8014ffe:	f242 7210 	movw	r2, #10000	@ 0x2710
 8015002:	4293      	cmp	r3, r2
 8015004:	d902      	bls.n	801500c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8015006:	2301      	movs	r3, #1
 8015008:	75fb      	strb	r3, [r7, #23]
          break;
 801500a:	e056      	b.n	80150ba <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 801500c:	683b      	ldr	r3, [r7, #0]
 801500e:	781b      	ldrb	r3, [r3, #0]
 8015010:	015a      	lsls	r2, r3, #5
 8015012:	693b      	ldr	r3, [r7, #16]
 8015014:	4413      	add	r3, r2
 8015016:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801501a:	681b      	ldr	r3, [r3, #0]
 801501c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8015020:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8015024:	d0e7      	beq.n	8014ff6 <USB_EPStopXfer+0x82>
 8015026:	e048      	b.n	80150ba <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8015028:	683b      	ldr	r3, [r7, #0]
 801502a:	781b      	ldrb	r3, [r3, #0]
 801502c:	015a      	lsls	r2, r3, #5
 801502e:	693b      	ldr	r3, [r7, #16]
 8015030:	4413      	add	r3, r2
 8015032:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015036:	681b      	ldr	r3, [r3, #0]
 8015038:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801503c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8015040:	d13b      	bne.n	80150ba <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8015042:	683b      	ldr	r3, [r7, #0]
 8015044:	781b      	ldrb	r3, [r3, #0]
 8015046:	015a      	lsls	r2, r3, #5
 8015048:	693b      	ldr	r3, [r7, #16]
 801504a:	4413      	add	r3, r2
 801504c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015050:	681b      	ldr	r3, [r3, #0]
 8015052:	683a      	ldr	r2, [r7, #0]
 8015054:	7812      	ldrb	r2, [r2, #0]
 8015056:	0151      	lsls	r1, r2, #5
 8015058:	693a      	ldr	r2, [r7, #16]
 801505a:	440a      	add	r2, r1
 801505c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015060:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8015064:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8015066:	683b      	ldr	r3, [r7, #0]
 8015068:	781b      	ldrb	r3, [r3, #0]
 801506a:	015a      	lsls	r2, r3, #5
 801506c:	693b      	ldr	r3, [r7, #16]
 801506e:	4413      	add	r3, r2
 8015070:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015074:	681b      	ldr	r3, [r3, #0]
 8015076:	683a      	ldr	r2, [r7, #0]
 8015078:	7812      	ldrb	r2, [r2, #0]
 801507a:	0151      	lsls	r1, r2, #5
 801507c:	693a      	ldr	r2, [r7, #16]
 801507e:	440a      	add	r2, r1
 8015080:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015084:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8015088:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 801508a:	68fb      	ldr	r3, [r7, #12]
 801508c:	3301      	adds	r3, #1
 801508e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8015090:	68fb      	ldr	r3, [r7, #12]
 8015092:	f242 7210 	movw	r2, #10000	@ 0x2710
 8015096:	4293      	cmp	r3, r2
 8015098:	d902      	bls.n	80150a0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 801509a:	2301      	movs	r3, #1
 801509c:	75fb      	strb	r3, [r7, #23]
          break;
 801509e:	e00c      	b.n	80150ba <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80150a0:	683b      	ldr	r3, [r7, #0]
 80150a2:	781b      	ldrb	r3, [r3, #0]
 80150a4:	015a      	lsls	r2, r3, #5
 80150a6:	693b      	ldr	r3, [r7, #16]
 80150a8:	4413      	add	r3, r2
 80150aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80150ae:	681b      	ldr	r3, [r3, #0]
 80150b0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80150b4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80150b8:	d0e7      	beq.n	801508a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80150ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80150bc:	4618      	mov	r0, r3
 80150be:	371c      	adds	r7, #28
 80150c0:	46bd      	mov	sp, r7
 80150c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150c6:	4770      	bx	lr

080150c8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80150c8:	b480      	push	{r7}
 80150ca:	b089      	sub	sp, #36	@ 0x24
 80150cc:	af00      	add	r7, sp, #0
 80150ce:	60f8      	str	r0, [r7, #12]
 80150d0:	60b9      	str	r1, [r7, #8]
 80150d2:	4611      	mov	r1, r2
 80150d4:	461a      	mov	r2, r3
 80150d6:	460b      	mov	r3, r1
 80150d8:	71fb      	strb	r3, [r7, #7]
 80150da:	4613      	mov	r3, r2
 80150dc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80150de:	68fb      	ldr	r3, [r7, #12]
 80150e0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80150e2:	68bb      	ldr	r3, [r7, #8]
 80150e4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80150e6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80150ea:	2b00      	cmp	r3, #0
 80150ec:	d123      	bne.n	8015136 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80150ee:	88bb      	ldrh	r3, [r7, #4]
 80150f0:	3303      	adds	r3, #3
 80150f2:	089b      	lsrs	r3, r3, #2
 80150f4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80150f6:	2300      	movs	r3, #0
 80150f8:	61bb      	str	r3, [r7, #24]
 80150fa:	e018      	b.n	801512e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80150fc:	79fb      	ldrb	r3, [r7, #7]
 80150fe:	031a      	lsls	r2, r3, #12
 8015100:	697b      	ldr	r3, [r7, #20]
 8015102:	4413      	add	r3, r2
 8015104:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8015108:	461a      	mov	r2, r3
 801510a:	69fb      	ldr	r3, [r7, #28]
 801510c:	681b      	ldr	r3, [r3, #0]
 801510e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8015110:	69fb      	ldr	r3, [r7, #28]
 8015112:	3301      	adds	r3, #1
 8015114:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8015116:	69fb      	ldr	r3, [r7, #28]
 8015118:	3301      	adds	r3, #1
 801511a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801511c:	69fb      	ldr	r3, [r7, #28]
 801511e:	3301      	adds	r3, #1
 8015120:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8015122:	69fb      	ldr	r3, [r7, #28]
 8015124:	3301      	adds	r3, #1
 8015126:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8015128:	69bb      	ldr	r3, [r7, #24]
 801512a:	3301      	adds	r3, #1
 801512c:	61bb      	str	r3, [r7, #24]
 801512e:	69ba      	ldr	r2, [r7, #24]
 8015130:	693b      	ldr	r3, [r7, #16]
 8015132:	429a      	cmp	r2, r3
 8015134:	d3e2      	bcc.n	80150fc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8015136:	2300      	movs	r3, #0
}
 8015138:	4618      	mov	r0, r3
 801513a:	3724      	adds	r7, #36	@ 0x24
 801513c:	46bd      	mov	sp, r7
 801513e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015142:	4770      	bx	lr

08015144 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8015144:	b480      	push	{r7}
 8015146:	b08b      	sub	sp, #44	@ 0x2c
 8015148:	af00      	add	r7, sp, #0
 801514a:	60f8      	str	r0, [r7, #12]
 801514c:	60b9      	str	r1, [r7, #8]
 801514e:	4613      	mov	r3, r2
 8015150:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015152:	68fb      	ldr	r3, [r7, #12]
 8015154:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8015156:	68bb      	ldr	r3, [r7, #8]
 8015158:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 801515a:	88fb      	ldrh	r3, [r7, #6]
 801515c:	089b      	lsrs	r3, r3, #2
 801515e:	b29b      	uxth	r3, r3
 8015160:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8015162:	88fb      	ldrh	r3, [r7, #6]
 8015164:	f003 0303 	and.w	r3, r3, #3
 8015168:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 801516a:	2300      	movs	r3, #0
 801516c:	623b      	str	r3, [r7, #32]
 801516e:	e014      	b.n	801519a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8015170:	69bb      	ldr	r3, [r7, #24]
 8015172:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8015176:	681a      	ldr	r2, [r3, #0]
 8015178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801517a:	601a      	str	r2, [r3, #0]
    pDest++;
 801517c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801517e:	3301      	adds	r3, #1
 8015180:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8015182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015184:	3301      	adds	r3, #1
 8015186:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8015188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801518a:	3301      	adds	r3, #1
 801518c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 801518e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015190:	3301      	adds	r3, #1
 8015192:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8015194:	6a3b      	ldr	r3, [r7, #32]
 8015196:	3301      	adds	r3, #1
 8015198:	623b      	str	r3, [r7, #32]
 801519a:	6a3a      	ldr	r2, [r7, #32]
 801519c:	697b      	ldr	r3, [r7, #20]
 801519e:	429a      	cmp	r2, r3
 80151a0:	d3e6      	bcc.n	8015170 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80151a2:	8bfb      	ldrh	r3, [r7, #30]
 80151a4:	2b00      	cmp	r3, #0
 80151a6:	d01e      	beq.n	80151e6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80151a8:	2300      	movs	r3, #0
 80151aa:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80151ac:	69bb      	ldr	r3, [r7, #24]
 80151ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80151b2:	461a      	mov	r2, r3
 80151b4:	f107 0310 	add.w	r3, r7, #16
 80151b8:	6812      	ldr	r2, [r2, #0]
 80151ba:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80151bc:	693a      	ldr	r2, [r7, #16]
 80151be:	6a3b      	ldr	r3, [r7, #32]
 80151c0:	b2db      	uxtb	r3, r3
 80151c2:	00db      	lsls	r3, r3, #3
 80151c4:	fa22 f303 	lsr.w	r3, r2, r3
 80151c8:	b2da      	uxtb	r2, r3
 80151ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80151cc:	701a      	strb	r2, [r3, #0]
      i++;
 80151ce:	6a3b      	ldr	r3, [r7, #32]
 80151d0:	3301      	adds	r3, #1
 80151d2:	623b      	str	r3, [r7, #32]
      pDest++;
 80151d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80151d6:	3301      	adds	r3, #1
 80151d8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80151da:	8bfb      	ldrh	r3, [r7, #30]
 80151dc:	3b01      	subs	r3, #1
 80151de:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80151e0:	8bfb      	ldrh	r3, [r7, #30]
 80151e2:	2b00      	cmp	r3, #0
 80151e4:	d1ea      	bne.n	80151bc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80151e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80151e8:	4618      	mov	r0, r3
 80151ea:	372c      	adds	r7, #44	@ 0x2c
 80151ec:	46bd      	mov	sp, r7
 80151ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151f2:	4770      	bx	lr

080151f4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80151f4:	b480      	push	{r7}
 80151f6:	b085      	sub	sp, #20
 80151f8:	af00      	add	r7, sp, #0
 80151fa:	6078      	str	r0, [r7, #4]
 80151fc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80151fe:	687b      	ldr	r3, [r7, #4]
 8015200:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8015202:	683b      	ldr	r3, [r7, #0]
 8015204:	781b      	ldrb	r3, [r3, #0]
 8015206:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8015208:	683b      	ldr	r3, [r7, #0]
 801520a:	785b      	ldrb	r3, [r3, #1]
 801520c:	2b01      	cmp	r3, #1
 801520e:	d12c      	bne.n	801526a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8015210:	68bb      	ldr	r3, [r7, #8]
 8015212:	015a      	lsls	r2, r3, #5
 8015214:	68fb      	ldr	r3, [r7, #12]
 8015216:	4413      	add	r3, r2
 8015218:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801521c:	681b      	ldr	r3, [r3, #0]
 801521e:	2b00      	cmp	r3, #0
 8015220:	db12      	blt.n	8015248 <USB_EPSetStall+0x54>
 8015222:	68bb      	ldr	r3, [r7, #8]
 8015224:	2b00      	cmp	r3, #0
 8015226:	d00f      	beq.n	8015248 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8015228:	68bb      	ldr	r3, [r7, #8]
 801522a:	015a      	lsls	r2, r3, #5
 801522c:	68fb      	ldr	r3, [r7, #12]
 801522e:	4413      	add	r3, r2
 8015230:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015234:	681b      	ldr	r3, [r3, #0]
 8015236:	68ba      	ldr	r2, [r7, #8]
 8015238:	0151      	lsls	r1, r2, #5
 801523a:	68fa      	ldr	r2, [r7, #12]
 801523c:	440a      	add	r2, r1
 801523e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8015242:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8015246:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8015248:	68bb      	ldr	r3, [r7, #8]
 801524a:	015a      	lsls	r2, r3, #5
 801524c:	68fb      	ldr	r3, [r7, #12]
 801524e:	4413      	add	r3, r2
 8015250:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015254:	681b      	ldr	r3, [r3, #0]
 8015256:	68ba      	ldr	r2, [r7, #8]
 8015258:	0151      	lsls	r1, r2, #5
 801525a:	68fa      	ldr	r2, [r7, #12]
 801525c:	440a      	add	r2, r1
 801525e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8015262:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8015266:	6013      	str	r3, [r2, #0]
 8015268:	e02b      	b.n	80152c2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 801526a:	68bb      	ldr	r3, [r7, #8]
 801526c:	015a      	lsls	r2, r3, #5
 801526e:	68fb      	ldr	r3, [r7, #12]
 8015270:	4413      	add	r3, r2
 8015272:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015276:	681b      	ldr	r3, [r3, #0]
 8015278:	2b00      	cmp	r3, #0
 801527a:	db12      	blt.n	80152a2 <USB_EPSetStall+0xae>
 801527c:	68bb      	ldr	r3, [r7, #8]
 801527e:	2b00      	cmp	r3, #0
 8015280:	d00f      	beq.n	80152a2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8015282:	68bb      	ldr	r3, [r7, #8]
 8015284:	015a      	lsls	r2, r3, #5
 8015286:	68fb      	ldr	r3, [r7, #12]
 8015288:	4413      	add	r3, r2
 801528a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801528e:	681b      	ldr	r3, [r3, #0]
 8015290:	68ba      	ldr	r2, [r7, #8]
 8015292:	0151      	lsls	r1, r2, #5
 8015294:	68fa      	ldr	r2, [r7, #12]
 8015296:	440a      	add	r2, r1
 8015298:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801529c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80152a0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80152a2:	68bb      	ldr	r3, [r7, #8]
 80152a4:	015a      	lsls	r2, r3, #5
 80152a6:	68fb      	ldr	r3, [r7, #12]
 80152a8:	4413      	add	r3, r2
 80152aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80152ae:	681b      	ldr	r3, [r3, #0]
 80152b0:	68ba      	ldr	r2, [r7, #8]
 80152b2:	0151      	lsls	r1, r2, #5
 80152b4:	68fa      	ldr	r2, [r7, #12]
 80152b6:	440a      	add	r2, r1
 80152b8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80152bc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80152c0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80152c2:	2300      	movs	r3, #0
}
 80152c4:	4618      	mov	r0, r3
 80152c6:	3714      	adds	r7, #20
 80152c8:	46bd      	mov	sp, r7
 80152ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152ce:	4770      	bx	lr

080152d0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80152d0:	b480      	push	{r7}
 80152d2:	b085      	sub	sp, #20
 80152d4:	af00      	add	r7, sp, #0
 80152d6:	6078      	str	r0, [r7, #4]
 80152d8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80152da:	687b      	ldr	r3, [r7, #4]
 80152dc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80152de:	683b      	ldr	r3, [r7, #0]
 80152e0:	781b      	ldrb	r3, [r3, #0]
 80152e2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80152e4:	683b      	ldr	r3, [r7, #0]
 80152e6:	785b      	ldrb	r3, [r3, #1]
 80152e8:	2b01      	cmp	r3, #1
 80152ea:	d128      	bne.n	801533e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80152ec:	68bb      	ldr	r3, [r7, #8]
 80152ee:	015a      	lsls	r2, r3, #5
 80152f0:	68fb      	ldr	r3, [r7, #12]
 80152f2:	4413      	add	r3, r2
 80152f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80152f8:	681b      	ldr	r3, [r3, #0]
 80152fa:	68ba      	ldr	r2, [r7, #8]
 80152fc:	0151      	lsls	r1, r2, #5
 80152fe:	68fa      	ldr	r2, [r7, #12]
 8015300:	440a      	add	r2, r1
 8015302:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8015306:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 801530a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 801530c:	683b      	ldr	r3, [r7, #0]
 801530e:	791b      	ldrb	r3, [r3, #4]
 8015310:	2b03      	cmp	r3, #3
 8015312:	d003      	beq.n	801531c <USB_EPClearStall+0x4c>
 8015314:	683b      	ldr	r3, [r7, #0]
 8015316:	791b      	ldrb	r3, [r3, #4]
 8015318:	2b02      	cmp	r3, #2
 801531a:	d138      	bne.n	801538e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 801531c:	68bb      	ldr	r3, [r7, #8]
 801531e:	015a      	lsls	r2, r3, #5
 8015320:	68fb      	ldr	r3, [r7, #12]
 8015322:	4413      	add	r3, r2
 8015324:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015328:	681b      	ldr	r3, [r3, #0]
 801532a:	68ba      	ldr	r2, [r7, #8]
 801532c:	0151      	lsls	r1, r2, #5
 801532e:	68fa      	ldr	r2, [r7, #12]
 8015330:	440a      	add	r2, r1
 8015332:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8015336:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801533a:	6013      	str	r3, [r2, #0]
 801533c:	e027      	b.n	801538e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 801533e:	68bb      	ldr	r3, [r7, #8]
 8015340:	015a      	lsls	r2, r3, #5
 8015342:	68fb      	ldr	r3, [r7, #12]
 8015344:	4413      	add	r3, r2
 8015346:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801534a:	681b      	ldr	r3, [r3, #0]
 801534c:	68ba      	ldr	r2, [r7, #8]
 801534e:	0151      	lsls	r1, r2, #5
 8015350:	68fa      	ldr	r2, [r7, #12]
 8015352:	440a      	add	r2, r1
 8015354:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015358:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 801535c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 801535e:	683b      	ldr	r3, [r7, #0]
 8015360:	791b      	ldrb	r3, [r3, #4]
 8015362:	2b03      	cmp	r3, #3
 8015364:	d003      	beq.n	801536e <USB_EPClearStall+0x9e>
 8015366:	683b      	ldr	r3, [r7, #0]
 8015368:	791b      	ldrb	r3, [r3, #4]
 801536a:	2b02      	cmp	r3, #2
 801536c:	d10f      	bne.n	801538e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 801536e:	68bb      	ldr	r3, [r7, #8]
 8015370:	015a      	lsls	r2, r3, #5
 8015372:	68fb      	ldr	r3, [r7, #12]
 8015374:	4413      	add	r3, r2
 8015376:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801537a:	681b      	ldr	r3, [r3, #0]
 801537c:	68ba      	ldr	r2, [r7, #8]
 801537e:	0151      	lsls	r1, r2, #5
 8015380:	68fa      	ldr	r2, [r7, #12]
 8015382:	440a      	add	r2, r1
 8015384:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015388:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801538c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 801538e:	2300      	movs	r3, #0
}
 8015390:	4618      	mov	r0, r3
 8015392:	3714      	adds	r7, #20
 8015394:	46bd      	mov	sp, r7
 8015396:	f85d 7b04 	ldr.w	r7, [sp], #4
 801539a:	4770      	bx	lr

0801539c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 801539c:	b480      	push	{r7}
 801539e:	b085      	sub	sp, #20
 80153a0:	af00      	add	r7, sp, #0
 80153a2:	6078      	str	r0, [r7, #4]
 80153a4:	460b      	mov	r3, r1
 80153a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80153a8:	687b      	ldr	r3, [r7, #4]
 80153aa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80153ac:	68fb      	ldr	r3, [r7, #12]
 80153ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80153b2:	681b      	ldr	r3, [r3, #0]
 80153b4:	68fa      	ldr	r2, [r7, #12]
 80153b6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80153ba:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80153be:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80153c0:	68fb      	ldr	r3, [r7, #12]
 80153c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80153c6:	681a      	ldr	r2, [r3, #0]
 80153c8:	78fb      	ldrb	r3, [r7, #3]
 80153ca:	011b      	lsls	r3, r3, #4
 80153cc:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80153d0:	68f9      	ldr	r1, [r7, #12]
 80153d2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80153d6:	4313      	orrs	r3, r2
 80153d8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80153da:	2300      	movs	r3, #0
}
 80153dc:	4618      	mov	r0, r3
 80153de:	3714      	adds	r7, #20
 80153e0:	46bd      	mov	sp, r7
 80153e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153e6:	4770      	bx	lr

080153e8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80153e8:	b480      	push	{r7}
 80153ea:	b085      	sub	sp, #20
 80153ec:	af00      	add	r7, sp, #0
 80153ee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80153f0:	687b      	ldr	r3, [r7, #4]
 80153f2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80153f4:	68fb      	ldr	r3, [r7, #12]
 80153f6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80153fa:	681b      	ldr	r3, [r3, #0]
 80153fc:	68fa      	ldr	r2, [r7, #12]
 80153fe:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8015402:	f023 0303 	bic.w	r3, r3, #3
 8015406:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8015408:	68fb      	ldr	r3, [r7, #12]
 801540a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801540e:	685b      	ldr	r3, [r3, #4]
 8015410:	68fa      	ldr	r2, [r7, #12]
 8015412:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8015416:	f023 0302 	bic.w	r3, r3, #2
 801541a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801541c:	2300      	movs	r3, #0
}
 801541e:	4618      	mov	r0, r3
 8015420:	3714      	adds	r7, #20
 8015422:	46bd      	mov	sp, r7
 8015424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015428:	4770      	bx	lr

0801542a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 801542a:	b480      	push	{r7}
 801542c:	b085      	sub	sp, #20
 801542e:	af00      	add	r7, sp, #0
 8015430:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015432:	687b      	ldr	r3, [r7, #4]
 8015434:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8015436:	68fb      	ldr	r3, [r7, #12]
 8015438:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 801543c:	681b      	ldr	r3, [r3, #0]
 801543e:	68fa      	ldr	r2, [r7, #12]
 8015440:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8015444:	f023 0303 	bic.w	r3, r3, #3
 8015448:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801544a:	68fb      	ldr	r3, [r7, #12]
 801544c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015450:	685b      	ldr	r3, [r3, #4]
 8015452:	68fa      	ldr	r2, [r7, #12]
 8015454:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8015458:	f043 0302 	orr.w	r3, r3, #2
 801545c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801545e:	2300      	movs	r3, #0
}
 8015460:	4618      	mov	r0, r3
 8015462:	3714      	adds	r7, #20
 8015464:	46bd      	mov	sp, r7
 8015466:	f85d 7b04 	ldr.w	r7, [sp], #4
 801546a:	4770      	bx	lr

0801546c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 801546c:	b480      	push	{r7}
 801546e:	b085      	sub	sp, #20
 8015470:	af00      	add	r7, sp, #0
 8015472:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8015474:	687b      	ldr	r3, [r7, #4]
 8015476:	695b      	ldr	r3, [r3, #20]
 8015478:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 801547a:	687b      	ldr	r3, [r7, #4]
 801547c:	699b      	ldr	r3, [r3, #24]
 801547e:	68fa      	ldr	r2, [r7, #12]
 8015480:	4013      	ands	r3, r2
 8015482:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8015484:	68fb      	ldr	r3, [r7, #12]
}
 8015486:	4618      	mov	r0, r3
 8015488:	3714      	adds	r7, #20
 801548a:	46bd      	mov	sp, r7
 801548c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015490:	4770      	bx	lr

08015492 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8015492:	b480      	push	{r7}
 8015494:	b085      	sub	sp, #20
 8015496:	af00      	add	r7, sp, #0
 8015498:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801549a:	687b      	ldr	r3, [r7, #4]
 801549c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801549e:	68fb      	ldr	r3, [r7, #12]
 80154a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80154a4:	699b      	ldr	r3, [r3, #24]
 80154a6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80154a8:	68fb      	ldr	r3, [r7, #12]
 80154aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80154ae:	69db      	ldr	r3, [r3, #28]
 80154b0:	68ba      	ldr	r2, [r7, #8]
 80154b2:	4013      	ands	r3, r2
 80154b4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80154b6:	68bb      	ldr	r3, [r7, #8]
 80154b8:	0c1b      	lsrs	r3, r3, #16
}
 80154ba:	4618      	mov	r0, r3
 80154bc:	3714      	adds	r7, #20
 80154be:	46bd      	mov	sp, r7
 80154c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154c4:	4770      	bx	lr

080154c6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80154c6:	b480      	push	{r7}
 80154c8:	b085      	sub	sp, #20
 80154ca:	af00      	add	r7, sp, #0
 80154cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80154ce:	687b      	ldr	r3, [r7, #4]
 80154d0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80154d2:	68fb      	ldr	r3, [r7, #12]
 80154d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80154d8:	699b      	ldr	r3, [r3, #24]
 80154da:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80154dc:	68fb      	ldr	r3, [r7, #12]
 80154de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80154e2:	69db      	ldr	r3, [r3, #28]
 80154e4:	68ba      	ldr	r2, [r7, #8]
 80154e6:	4013      	ands	r3, r2
 80154e8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80154ea:	68bb      	ldr	r3, [r7, #8]
 80154ec:	b29b      	uxth	r3, r3
}
 80154ee:	4618      	mov	r0, r3
 80154f0:	3714      	adds	r7, #20
 80154f2:	46bd      	mov	sp, r7
 80154f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154f8:	4770      	bx	lr

080154fa <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80154fa:	b480      	push	{r7}
 80154fc:	b085      	sub	sp, #20
 80154fe:	af00      	add	r7, sp, #0
 8015500:	6078      	str	r0, [r7, #4]
 8015502:	460b      	mov	r3, r1
 8015504:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015506:	687b      	ldr	r3, [r7, #4]
 8015508:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 801550a:	78fb      	ldrb	r3, [r7, #3]
 801550c:	015a      	lsls	r2, r3, #5
 801550e:	68fb      	ldr	r3, [r7, #12]
 8015510:	4413      	add	r3, r2
 8015512:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015516:	689b      	ldr	r3, [r3, #8]
 8015518:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 801551a:	68fb      	ldr	r3, [r7, #12]
 801551c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015520:	695b      	ldr	r3, [r3, #20]
 8015522:	68ba      	ldr	r2, [r7, #8]
 8015524:	4013      	ands	r3, r2
 8015526:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8015528:	68bb      	ldr	r3, [r7, #8]
}
 801552a:	4618      	mov	r0, r3
 801552c:	3714      	adds	r7, #20
 801552e:	46bd      	mov	sp, r7
 8015530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015534:	4770      	bx	lr

08015536 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8015536:	b480      	push	{r7}
 8015538:	b087      	sub	sp, #28
 801553a:	af00      	add	r7, sp, #0
 801553c:	6078      	str	r0, [r7, #4]
 801553e:	460b      	mov	r3, r1
 8015540:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015542:	687b      	ldr	r3, [r7, #4]
 8015544:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8015546:	697b      	ldr	r3, [r7, #20]
 8015548:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801554c:	691b      	ldr	r3, [r3, #16]
 801554e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8015550:	697b      	ldr	r3, [r7, #20]
 8015552:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015556:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015558:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 801555a:	78fb      	ldrb	r3, [r7, #3]
 801555c:	f003 030f 	and.w	r3, r3, #15
 8015560:	68fa      	ldr	r2, [r7, #12]
 8015562:	fa22 f303 	lsr.w	r3, r2, r3
 8015566:	01db      	lsls	r3, r3, #7
 8015568:	b2db      	uxtb	r3, r3
 801556a:	693a      	ldr	r2, [r7, #16]
 801556c:	4313      	orrs	r3, r2
 801556e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8015570:	78fb      	ldrb	r3, [r7, #3]
 8015572:	015a      	lsls	r2, r3, #5
 8015574:	697b      	ldr	r3, [r7, #20]
 8015576:	4413      	add	r3, r2
 8015578:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801557c:	689b      	ldr	r3, [r3, #8]
 801557e:	693a      	ldr	r2, [r7, #16]
 8015580:	4013      	ands	r3, r2
 8015582:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8015584:	68bb      	ldr	r3, [r7, #8]
}
 8015586:	4618      	mov	r0, r3
 8015588:	371c      	adds	r7, #28
 801558a:	46bd      	mov	sp, r7
 801558c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015590:	4770      	bx	lr

08015592 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8015592:	b480      	push	{r7}
 8015594:	b083      	sub	sp, #12
 8015596:	af00      	add	r7, sp, #0
 8015598:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 801559a:	687b      	ldr	r3, [r7, #4]
 801559c:	695b      	ldr	r3, [r3, #20]
 801559e:	f003 0301 	and.w	r3, r3, #1
}
 80155a2:	4618      	mov	r0, r3
 80155a4:	370c      	adds	r7, #12
 80155a6:	46bd      	mov	sp, r7
 80155a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155ac:	4770      	bx	lr
	...

080155b0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80155b0:	b480      	push	{r7}
 80155b2:	b085      	sub	sp, #20
 80155b4:	af00      	add	r7, sp, #0
 80155b6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80155b8:	687b      	ldr	r3, [r7, #4]
 80155ba:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80155bc:	68fb      	ldr	r3, [r7, #12]
 80155be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80155c2:	681a      	ldr	r2, [r3, #0]
 80155c4:	68fb      	ldr	r3, [r7, #12]
 80155c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80155ca:	4619      	mov	r1, r3
 80155cc:	4b09      	ldr	r3, [pc, #36]	@ (80155f4 <USB_ActivateSetup+0x44>)
 80155ce:	4013      	ands	r3, r2
 80155d0:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80155d2:	68fb      	ldr	r3, [r7, #12]
 80155d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80155d8:	685b      	ldr	r3, [r3, #4]
 80155da:	68fa      	ldr	r2, [r7, #12]
 80155dc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80155e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80155e4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80155e6:	2300      	movs	r3, #0
}
 80155e8:	4618      	mov	r0, r3
 80155ea:	3714      	adds	r7, #20
 80155ec:	46bd      	mov	sp, r7
 80155ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155f2:	4770      	bx	lr
 80155f4:	fffff800 	.word	0xfffff800

080155f8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80155f8:	b480      	push	{r7}
 80155fa:	b087      	sub	sp, #28
 80155fc:	af00      	add	r7, sp, #0
 80155fe:	60f8      	str	r0, [r7, #12]
 8015600:	460b      	mov	r3, r1
 8015602:	607a      	str	r2, [r7, #4]
 8015604:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015606:	68fb      	ldr	r3, [r7, #12]
 8015608:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 801560a:	68fb      	ldr	r3, [r7, #12]
 801560c:	333c      	adds	r3, #60	@ 0x3c
 801560e:	3304      	adds	r3, #4
 8015610:	681b      	ldr	r3, [r3, #0]
 8015612:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8015614:	693b      	ldr	r3, [r7, #16]
 8015616:	4a26      	ldr	r2, [pc, #152]	@ (80156b0 <USB_EP0_OutStart+0xb8>)
 8015618:	4293      	cmp	r3, r2
 801561a:	d90a      	bls.n	8015632 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801561c:	697b      	ldr	r3, [r7, #20]
 801561e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015622:	681b      	ldr	r3, [r3, #0]
 8015624:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8015628:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801562c:	d101      	bne.n	8015632 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 801562e:	2300      	movs	r3, #0
 8015630:	e037      	b.n	80156a2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8015632:	697b      	ldr	r3, [r7, #20]
 8015634:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015638:	461a      	mov	r2, r3
 801563a:	2300      	movs	r3, #0
 801563c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801563e:	697b      	ldr	r3, [r7, #20]
 8015640:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015644:	691b      	ldr	r3, [r3, #16]
 8015646:	697a      	ldr	r2, [r7, #20]
 8015648:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801564c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8015650:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8015652:	697b      	ldr	r3, [r7, #20]
 8015654:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015658:	691b      	ldr	r3, [r3, #16]
 801565a:	697a      	ldr	r2, [r7, #20]
 801565c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015660:	f043 0318 	orr.w	r3, r3, #24
 8015664:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8015666:	697b      	ldr	r3, [r7, #20]
 8015668:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801566c:	691b      	ldr	r3, [r3, #16]
 801566e:	697a      	ldr	r2, [r7, #20]
 8015670:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015674:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8015678:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 801567a:	7afb      	ldrb	r3, [r7, #11]
 801567c:	2b01      	cmp	r3, #1
 801567e:	d10f      	bne.n	80156a0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8015680:	697b      	ldr	r3, [r7, #20]
 8015682:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015686:	461a      	mov	r2, r3
 8015688:	687b      	ldr	r3, [r7, #4]
 801568a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 801568c:	697b      	ldr	r3, [r7, #20]
 801568e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015692:	681b      	ldr	r3, [r3, #0]
 8015694:	697a      	ldr	r2, [r7, #20]
 8015696:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801569a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 801569e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80156a0:	2300      	movs	r3, #0
}
 80156a2:	4618      	mov	r0, r3
 80156a4:	371c      	adds	r7, #28
 80156a6:	46bd      	mov	sp, r7
 80156a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156ac:	4770      	bx	lr
 80156ae:	bf00      	nop
 80156b0:	4f54300a 	.word	0x4f54300a

080156b4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80156b4:	b480      	push	{r7}
 80156b6:	b085      	sub	sp, #20
 80156b8:	af00      	add	r7, sp, #0
 80156ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80156bc:	2300      	movs	r3, #0
 80156be:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80156c0:	68fb      	ldr	r3, [r7, #12]
 80156c2:	3301      	adds	r3, #1
 80156c4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80156c6:	68fb      	ldr	r3, [r7, #12]
 80156c8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80156cc:	d901      	bls.n	80156d2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80156ce:	2303      	movs	r3, #3
 80156d0:	e01b      	b.n	801570a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80156d2:	687b      	ldr	r3, [r7, #4]
 80156d4:	691b      	ldr	r3, [r3, #16]
 80156d6:	2b00      	cmp	r3, #0
 80156d8:	daf2      	bge.n	80156c0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80156da:	2300      	movs	r3, #0
 80156dc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80156de:	687b      	ldr	r3, [r7, #4]
 80156e0:	691b      	ldr	r3, [r3, #16]
 80156e2:	f043 0201 	orr.w	r2, r3, #1
 80156e6:	687b      	ldr	r3, [r7, #4]
 80156e8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80156ea:	68fb      	ldr	r3, [r7, #12]
 80156ec:	3301      	adds	r3, #1
 80156ee:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80156f0:	68fb      	ldr	r3, [r7, #12]
 80156f2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80156f6:	d901      	bls.n	80156fc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80156f8:	2303      	movs	r3, #3
 80156fa:	e006      	b.n	801570a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80156fc:	687b      	ldr	r3, [r7, #4]
 80156fe:	691b      	ldr	r3, [r3, #16]
 8015700:	f003 0301 	and.w	r3, r3, #1
 8015704:	2b01      	cmp	r3, #1
 8015706:	d0f0      	beq.n	80156ea <USB_CoreReset+0x36>

  return HAL_OK;
 8015708:	2300      	movs	r3, #0
}
 801570a:	4618      	mov	r0, r3
 801570c:	3714      	adds	r7, #20
 801570e:	46bd      	mov	sp, r7
 8015710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015714:	4770      	bx	lr

08015716 <XBEE_Init>:
#include "XBEE.h"

// FUNCTION IMPLEMENTEATIONS
// ------------------------------------------------------------------------------------

uint8_t XBEE_Init(XBEE_HandleTypeDef *hxbee) {
 8015716:	b580      	push	{r7, lr}
 8015718:	b082      	sub	sp, #8
 801571a:	af00      	add	r7, sp, #0
 801571c:	6078      	str	r0, [r7, #4]
	// Set up the variables
	hxbee->pkt_DMAHead   = 0;
 801571e:	687b      	ldr	r3, [r7, #4]
 8015720:	2200      	movs	r2, #0
 8015722:	741a      	strb	r2, [r3, #16]
	hxbee->pktRx_state   = 0;
 8015724:	687b      	ldr	r3, [r7, #4]
 8015726:	2200      	movs	r2, #0
 8015728:	745a      	strb	r2, [r3, #17]
	hxbee->pktTx_state   = 0;
 801572a:	687b      	ldr	r3, [r7, #4]
 801572c:	2200      	movs	r2, #0
 801572e:	76da      	strb	r2, [r3, #27]
	hxbee->pktRx_idxPush = 0;
 8015730:	687b      	ldr	r3, [r7, #4]
 8015732:	2200      	movs	r2, #0
 8015734:	765a      	strb	r2, [r3, #25]
	hxbee->pktRx_idxPop  = 0;
 8015736:	687b      	ldr	r3, [r7, #4]
 8015738:	2200      	movs	r2, #0
 801573a:	769a      	strb	r2, [r3, #26]
	hxbee->pktTx_idxPush = 0;
 801573c:	687b      	ldr	r3, [r7, #4]
 801573e:	2200      	movs	r2, #0
 8015740:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
	hxbee->pktTx_idxPop  = 0;
 8015744:	687b      	ldr	r3, [r7, #4]
 8015746:	2200      	movs	r2, #0
 8015748:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

	// Allocate mem
	hxbee->pkt_bufDMA  = malloc(PKT_RAWSIZE);
 801574c:	2044      	movs	r0, #68	@ 0x44
 801574e:	f002 ff2f 	bl	80185b0 <malloc>
 8015752:	4603      	mov	r3, r0
 8015754:	461a      	mov	r2, r3
 8015756:	687b      	ldr	r3, [r7, #4]
 8015758:	609a      	str	r2, [r3, #8]
	hxbee->pkt_bufPart = malloc(PKT_RAWSIZE);
 801575a:	2044      	movs	r0, #68	@ 0x44
 801575c:	f002 ff28 	bl	80185b0 <malloc>
 8015760:	4603      	mov	r3, r0
 8015762:	461a      	mov	r2, r3
 8015764:	687b      	ldr	r3, [r7, #4]
 8015766:	60da      	str	r2, [r3, #12]
	hxbee->pktRx_mem   = malloc(hxbee->pktRx_max*PKT_RAWSIZE);
 8015768:	687b      	ldr	r3, [r7, #4]
 801576a:	7e1b      	ldrb	r3, [r3, #24]
 801576c:	461a      	mov	r2, r3
 801576e:	4613      	mov	r3, r2
 8015770:	011b      	lsls	r3, r3, #4
 8015772:	4413      	add	r3, r2
 8015774:	009b      	lsls	r3, r3, #2
 8015776:	4618      	mov	r0, r3
 8015778:	f002 ff1a 	bl	80185b0 <malloc>
 801577c:	4603      	mov	r3, r0
 801577e:	461a      	mov	r2, r3
 8015780:	687b      	ldr	r3, [r7, #4]
 8015782:	615a      	str	r2, [r3, #20]
	hxbee->pktTx_mem   = malloc(hxbee->pktTx_max*PKT_RAWSIZE);
 8015784:	687b      	ldr	r3, [r7, #4]
 8015786:	f893 3020 	ldrb.w	r3, [r3, #32]
 801578a:	461a      	mov	r2, r3
 801578c:	4613      	mov	r3, r2
 801578e:	011b      	lsls	r3, r3, #4
 8015790:	4413      	add	r3, r2
 8015792:	009b      	lsls	r3, r3, #2
 8015794:	4618      	mov	r0, r3
 8015796:	f002 ff0b 	bl	80185b0 <malloc>
 801579a:	4603      	mov	r3, r0
 801579c:	461a      	mov	r2, r3
 801579e:	687b      	ldr	r3, [r7, #4]
 80157a0:	61da      	str	r2, [r3, #28]

	// Begin the cyclic UART capture
	// Make sure the DMA is circular
	return HAL_UART_Receive_DMA(hxbee->uart_handle, hxbee->pkt_bufDMA, PKT_RAWSIZE);
 80157a2:	687b      	ldr	r3, [r7, #4]
 80157a4:	6818      	ldr	r0, [r3, #0]
 80157a6:	687b      	ldr	r3, [r7, #4]
 80157a8:	689b      	ldr	r3, [r3, #8]
 80157aa:	2244      	movs	r2, #68	@ 0x44
 80157ac:	4619      	mov	r1, r3
 80157ae:	f7fc fd4b 	bl	8012248 <HAL_UART_Receive_DMA>
 80157b2:	4603      	mov	r3, r0
}
 80157b4:	4618      	mov	r0, r3
 80157b6:	3708      	adds	r7, #8
 80157b8:	46bd      	mov	sp, r7
 80157ba:	bd80      	pop	{r7, pc}

080157bc <XBEE_RXPacket>:

// Gets a packet if there's one buffered
// 0 - Success
// 1 - Nothing to Get
uint8_t XBEE_RXPacket(XBEE_HandleTypeDef *hxbee, uint8_t **pRxBuffer, uint16_t *pkt_num) {
 80157bc:	b480      	push	{r7}
 80157be:	b087      	sub	sp, #28
 80157c0:	af00      	add	r7, sp, #0
 80157c2:	60f8      	str	r0, [r7, #12]
 80157c4:	60b9      	str	r1, [r7, #8]
 80157c6:	607a      	str	r2, [r7, #4]
	// Check if there's an available packet
	if (hxbee->pktRx_idxPop == hxbee->pktRx_idxPush) return 1;
 80157c8:	68fb      	ldr	r3, [r7, #12]
 80157ca:	7e9a      	ldrb	r2, [r3, #26]
 80157cc:	68fb      	ldr	r3, [r7, #12]
 80157ce:	7e5b      	ldrb	r3, [r3, #25]
 80157d0:	429a      	cmp	r2, r3
 80157d2:	d101      	bne.n	80157d8 <XBEE_RXPacket+0x1c>
 80157d4:	2301      	movs	r3, #1
 80157d6:	e05b      	b.n	8015890 <XBEE_RXPacket+0xd4>

	// There's a packet up for grabs, get a pointer to the raw pkt incl. Header
	uint8_t *pRxInternal = hxbee->pktRx_mem + hxbee->pktRx_idxPop*PKT_RAWSIZE;
 80157d8:	68fb      	ldr	r3, [r7, #12]
 80157da:	695a      	ldr	r2, [r3, #20]
 80157dc:	68fb      	ldr	r3, [r7, #12]
 80157de:	7e9b      	ldrb	r3, [r3, #26]
 80157e0:	4619      	mov	r1, r3
 80157e2:	460b      	mov	r3, r1
 80157e4:	011b      	lsls	r3, r3, #4
 80157e6:	440b      	add	r3, r1
 80157e8:	009b      	lsls	r3, r3, #2
 80157ea:	4413      	add	r3, r2
 80157ec:	613b      	str	r3, [r7, #16]

	hxbee->pktRx_idxPop += 1;
 80157ee:	68fb      	ldr	r3, [r7, #12]
 80157f0:	7e9b      	ldrb	r3, [r3, #26]
 80157f2:	3301      	adds	r3, #1
 80157f4:	b2da      	uxtb	r2, r3
 80157f6:	68fb      	ldr	r3, [r7, #12]
 80157f8:	769a      	strb	r2, [r3, #26]
	hxbee->pktRx_idxPop %= hxbee->pktRx_max;
 80157fa:	68fb      	ldr	r3, [r7, #12]
 80157fc:	7e9b      	ldrb	r3, [r3, #26]
 80157fe:	68fa      	ldr	r2, [r7, #12]
 8015800:	7e12      	ldrb	r2, [r2, #24]
 8015802:	fbb3 f1f2 	udiv	r1, r3, r2
 8015806:	fb01 f202 	mul.w	r2, r1, r2
 801580a:	1a9b      	subs	r3, r3, r2
 801580c:	b2da      	uxtb	r2, r3
 801580e:	68fb      	ldr	r3, [r7, #12]
 8015810:	769a      	strb	r2, [r3, #26]

	// Compute the checksum
	uint8_t checksum = 0x00;
 8015812:	2300      	movs	r3, #0
 8015814:	75fb      	strb	r3, [r7, #23]
	for (uint8_t i = 0; i < PKT_RAWSIZE; i++) {
 8015816:	2300      	movs	r3, #0
 8015818:	75bb      	strb	r3, [r7, #22]
 801581a:	e00e      	b.n	801583a <XBEE_RXPacket+0x7e>
		if (i == 3) continue;
 801581c:	7dbb      	ldrb	r3, [r7, #22]
 801581e:	2b03      	cmp	r3, #3
 8015820:	d007      	beq.n	8015832 <XBEE_RXPacket+0x76>
		checksum ^= pRxInternal[i];
 8015822:	7dbb      	ldrb	r3, [r7, #22]
 8015824:	693a      	ldr	r2, [r7, #16]
 8015826:	4413      	add	r3, r2
 8015828:	781a      	ldrb	r2, [r3, #0]
 801582a:	7dfb      	ldrb	r3, [r7, #23]
 801582c:	4053      	eors	r3, r2
 801582e:	75fb      	strb	r3, [r7, #23]
 8015830:	e000      	b.n	8015834 <XBEE_RXPacket+0x78>
		if (i == 3) continue;
 8015832:	bf00      	nop
	for (uint8_t i = 0; i < PKT_RAWSIZE; i++) {
 8015834:	7dbb      	ldrb	r3, [r7, #22]
 8015836:	3301      	adds	r3, #1
 8015838:	75bb      	strb	r3, [r7, #22]
 801583a:	7dbb      	ldrb	r3, [r7, #22]
 801583c:	2b43      	cmp	r3, #67	@ 0x43
 801583e:	d9ed      	bls.n	801581c <XBEE_RXPacket+0x60>
	}

	// Packet corrupted, mismatch checksum
	if (pRxInternal[3] != checksum) return 1;
 8015840:	693b      	ldr	r3, [r7, #16]
 8015842:	3303      	adds	r3, #3
 8015844:	781b      	ldrb	r3, [r3, #0]
 8015846:	7dfa      	ldrb	r2, [r7, #23]
 8015848:	429a      	cmp	r2, r3
 801584a:	d001      	beq.n	8015850 <XBEE_RXPacket+0x94>
 801584c:	2301      	movs	r3, #1
 801584e:	e01f      	b.n	8015890 <XBEE_RXPacket+0xd4>

	// Get the 16 bit packet number field
	*pkt_num = 0;
 8015850:	687b      	ldr	r3, [r7, #4]
 8015852:	2200      	movs	r2, #0
 8015854:	801a      	strh	r2, [r3, #0]
	*pkt_num += pRxInternal[1];
 8015856:	687b      	ldr	r3, [r7, #4]
 8015858:	881b      	ldrh	r3, [r3, #0]
 801585a:	693a      	ldr	r2, [r7, #16]
 801585c:	3201      	adds	r2, #1
 801585e:	7812      	ldrb	r2, [r2, #0]
 8015860:	4413      	add	r3, r2
 8015862:	b29a      	uxth	r2, r3
 8015864:	687b      	ldr	r3, [r7, #4]
 8015866:	801a      	strh	r2, [r3, #0]
	*pkt_num *= 256;
 8015868:	687b      	ldr	r3, [r7, #4]
 801586a:	881b      	ldrh	r3, [r3, #0]
 801586c:	021b      	lsls	r3, r3, #8
 801586e:	b29a      	uxth	r2, r3
 8015870:	687b      	ldr	r3, [r7, #4]
 8015872:	801a      	strh	r2, [r3, #0]
	*pkt_num += pRxInternal[2];
 8015874:	687b      	ldr	r3, [r7, #4]
 8015876:	881b      	ldrh	r3, [r3, #0]
 8015878:	693a      	ldr	r2, [r7, #16]
 801587a:	3202      	adds	r2, #2
 801587c:	7812      	ldrb	r2, [r2, #0]
 801587e:	4413      	add	r3, r2
 8015880:	b29a      	uxth	r2, r3
 8015882:	687b      	ldr	r3, [r7, #4]
 8015884:	801a      	strh	r2, [r3, #0]

	*pRxBuffer = pRxInternal + 4;
 8015886:	693b      	ldr	r3, [r7, #16]
 8015888:	1d1a      	adds	r2, r3, #4
 801588a:	68bb      	ldr	r3, [r7, #8]
 801588c:	601a      	str	r2, [r3, #0]

	return 0;
 801588e:	2300      	movs	r3, #0
}
 8015890:	4618      	mov	r0, r3
 8015892:	371c      	adds	r7, #28
 8015894:	46bd      	mov	sp, r7
 8015896:	f85d 7b04 	ldr.w	r7, [sp], #4
 801589a:	4770      	bx	lr

0801589c <XBEE_TXPacket>:

uint8_t XBEE_TXPacket(XBEE_HandleTypeDef *hxbee, uint8_t *pTxBuffer, uint16_t pkt_num) {
 801589c:	b580      	push	{r7, lr}
 801589e:	b086      	sub	sp, #24
 80158a0:	af00      	add	r7, sp, #0
 80158a2:	60f8      	str	r0, [r7, #12]
 80158a4:	60b9      	str	r1, [r7, #8]
 80158a6:	4613      	mov	r3, r2
 80158a8:	80fb      	strh	r3, [r7, #6]
	// Attempt to increment the packet buffer index
	// Note: We don't actually increment the index until the end of the function in case something goes wrong
	uint8_t pkt_idx = hxbee->pktTx_idxPush + 1;
 80158aa:	68fb      	ldr	r3, [r7, #12]
 80158ac:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80158b0:	3301      	adds	r3, #1
 80158b2:	75bb      	strb	r3, [r7, #22]
	pkt_idx %= hxbee->pktTx_max;
 80158b4:	68fb      	ldr	r3, [r7, #12]
 80158b6:	f893 2020 	ldrb.w	r2, [r3, #32]
 80158ba:	7dbb      	ldrb	r3, [r7, #22]
 80158bc:	fbb3 f1f2 	udiv	r1, r3, r2
 80158c0:	fb01 f202 	mul.w	r2, r1, r2
 80158c4:	1a9b      	subs	r3, r3, r2
 80158c6:	75bb      	strb	r3, [r7, #22]

	// No space left in the buffer, we have to drop this packet
	if (pkt_idx == hxbee->pktTx_idxPop) return 1;
 80158c8:	68fb      	ldr	r3, [r7, #12]
 80158ca:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 80158ce:	7dba      	ldrb	r2, [r7, #22]
 80158d0:	429a      	cmp	r2, r3
 80158d2:	d101      	bne.n	80158d8 <XBEE_TXPacket+0x3c>
 80158d4:	2301      	movs	r3, #1
 80158d6:	e047      	b.n	8015968 <XBEE_TXPacket+0xcc>

	// Get a reference to this memory location
	uint8_t *newPkt = hxbee->pktTx_mem + hxbee->pktTx_idxPush*PKT_RAWSIZE;
 80158d8:	68fb      	ldr	r3, [r7, #12]
 80158da:	69da      	ldr	r2, [r3, #28]
 80158dc:	68fb      	ldr	r3, [r7, #12]
 80158de:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80158e2:	4619      	mov	r1, r3
 80158e4:	460b      	mov	r3, r1
 80158e6:	011b      	lsls	r3, r3, #4
 80158e8:	440b      	add	r3, r1
 80158ea:	009b      	lsls	r3, r3, #2
 80158ec:	4413      	add	r3, r2
 80158ee:	613b      	str	r3, [r7, #16]

	// Construct the packet
	newPkt[0] = PKT_DELIMETER;
 80158f0:	693b      	ldr	r3, [r7, #16]
 80158f2:	22aa      	movs	r2, #170	@ 0xaa
 80158f4:	701a      	strb	r2, [r3, #0]
	newPkt[1] = pkt_num >> 8;
 80158f6:	88fb      	ldrh	r3, [r7, #6]
 80158f8:	0a1b      	lsrs	r3, r3, #8
 80158fa:	b29a      	uxth	r2, r3
 80158fc:	693b      	ldr	r3, [r7, #16]
 80158fe:	3301      	adds	r3, #1
 8015900:	b2d2      	uxtb	r2, r2
 8015902:	701a      	strb	r2, [r3, #0]
	newPkt[2] = pkt_num & 0x00FF;
 8015904:	693b      	ldr	r3, [r7, #16]
 8015906:	3302      	adds	r3, #2
 8015908:	88fa      	ldrh	r2, [r7, #6]
 801590a:	b2d2      	uxtb	r2, r2
 801590c:	701a      	strb	r2, [r3, #0]

	memcpy(newPkt + 4, pTxBuffer, PKT_DATASIZE);
 801590e:	693b      	ldr	r3, [r7, #16]
 8015910:	3304      	adds	r3, #4
 8015912:	2240      	movs	r2, #64	@ 0x40
 8015914:	68b9      	ldr	r1, [r7, #8]
 8015916:	4618      	mov	r0, r3
 8015918:	f003 fd2b 	bl	8019372 <memcpy>

	// Compute the checksum
	newPkt[3] = 0x00;
 801591c:	693b      	ldr	r3, [r7, #16]
 801591e:	3303      	adds	r3, #3
 8015920:	2200      	movs	r2, #0
 8015922:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < PKT_RAWSIZE; i++) {
 8015924:	2300      	movs	r3, #0
 8015926:	75fb      	strb	r3, [r7, #23]
 8015928:	e013      	b.n	8015952 <XBEE_TXPacket+0xb6>
		if (i == 3) continue;
 801592a:	7dfb      	ldrb	r3, [r7, #23]
 801592c:	2b03      	cmp	r3, #3
 801592e:	d00c      	beq.n	801594a <XBEE_TXPacket+0xae>
		newPkt[3] ^= newPkt[i];
 8015930:	693b      	ldr	r3, [r7, #16]
 8015932:	3303      	adds	r3, #3
 8015934:	7819      	ldrb	r1, [r3, #0]
 8015936:	7dfb      	ldrb	r3, [r7, #23]
 8015938:	693a      	ldr	r2, [r7, #16]
 801593a:	4413      	add	r3, r2
 801593c:	781a      	ldrb	r2, [r3, #0]
 801593e:	693b      	ldr	r3, [r7, #16]
 8015940:	3303      	adds	r3, #3
 8015942:	404a      	eors	r2, r1
 8015944:	b2d2      	uxtb	r2, r2
 8015946:	701a      	strb	r2, [r3, #0]
 8015948:	e000      	b.n	801594c <XBEE_TXPacket+0xb0>
		if (i == 3) continue;
 801594a:	bf00      	nop
	for (uint8_t i = 0; i < PKT_RAWSIZE; i++) {
 801594c:	7dfb      	ldrb	r3, [r7, #23]
 801594e:	3301      	adds	r3, #1
 8015950:	75fb      	strb	r3, [r7, #23]
 8015952:	7dfb      	ldrb	r3, [r7, #23]
 8015954:	2b43      	cmp	r3, #67	@ 0x43
 8015956:	d9e8      	bls.n	801592a <XBEE_TXPacket+0x8e>
	}

	// Try and immediately send the packet
	// TODO: Set the bust state, interrupts
	return HAL_UART_Transmit(hxbee->uart_handle, newPkt, PKT_RAWSIZE, 30);	// Transmit the buffer
 8015958:	68fb      	ldr	r3, [r7, #12]
 801595a:	6818      	ldr	r0, [r3, #0]
 801595c:	231e      	movs	r3, #30
 801595e:	2244      	movs	r2, #68	@ 0x44
 8015960:	6939      	ldr	r1, [r7, #16]
 8015962:	f7fc fbe3 	bl	801212c <HAL_UART_Transmit>
 8015966:	4603      	mov	r3, r0
}
 8015968:	4618      	mov	r0, r3
 801596a:	3718      	adds	r7, #24
 801596c:	46bd      	mov	sp, r7
 801596e:	bd80      	pop	{r7, pc}

08015970 <XBEE_RX_DMACallback>:
// Process incoming packets on DMA callback
// 0 - Success
// 1 - Buffer full
// 2 - Packet malformed
// 3 - Checksum mismatch
uint8_t XBEE_RX_DMACallback(XBEE_HandleTypeDef *hxbee) {
 8015970:	b580      	push	{r7, lr}
 8015972:	b096      	sub	sp, #88	@ 0x58
 8015974:	af00      	add	r7, sp, #0
 8015976:	6078      	str	r0, [r7, #4]
	// Attempt to increment the packet buffer index
	// Note: We don't actually increment the index until the end of the function in case something goes wrong
	uint8_t pkt_idx = hxbee->pktRx_idxPush + 1;
 8015978:	687b      	ldr	r3, [r7, #4]
 801597a:	7e5b      	ldrb	r3, [r3, #25]
 801597c:	3301      	adds	r3, #1
 801597e:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
	pkt_idx %= hxbee->pktRx_max;
 8015982:	687b      	ldr	r3, [r7, #4]
 8015984:	7e1a      	ldrb	r2, [r3, #24]
 8015986:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 801598a:	fbb3 f1f2 	udiv	r1, r3, r2
 801598e:	fb01 f202 	mul.w	r2, r1, r2
 8015992:	1a9b      	subs	r3, r3, r2
 8015994:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55

	// No space left in the buffer, we have to drop this packet
	if (pkt_idx == hxbee->pktRx_idxPop) return 1;
 8015998:	687b      	ldr	r3, [r7, #4]
 801599a:	7e9b      	ldrb	r3, [r3, #26]
 801599c:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 80159a0:	429a      	cmp	r2, r3
 80159a2:	d101      	bne.n	80159a8 <XBEE_RX_DMACallback+0x38>
 80159a4:	2301      	movs	r3, #1
 80159a6:	e097      	b.n	8015ad8 <XBEE_RX_DMACallback+0x168>

	// Create a temporary buffer for the complete packet
	uint8_t pkt_cplt[PKT_RAWSIZE];

	// Store the last readHead, we need this for packet reconstruction if bytes got lost
	uint8_t old_head = hxbee->pkt_DMAHead;
 80159a8:	687b      	ldr	r3, [r7, #4]
 80159aa:	7c1b      	ldrb	r3, [r3, #16]
 80159ac:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54

	// Find the delimeter
	uint8_t found_delim = 0;
 80159b0:	2300      	movs	r3, #0
 80159b2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	for (uint8_t circular_ptr = 0; circular_ptr < PKT_RAWSIZE; circular_ptr++) {
 80159b6:	2300      	movs	r3, #0
 80159b8:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
 80159bc:	e027      	b.n	8015a0e <XBEE_RX_DMACallback+0x9e>
		uint8_t packet_ptr = (circular_ptr + hxbee->pkt_DMAHead) % PKT_RAWSIZE;
 80159be:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 80159c2:	687a      	ldr	r2, [r7, #4]
 80159c4:	7c12      	ldrb	r2, [r2, #16]
 80159c6:	441a      	add	r2, r3
 80159c8:	4b45      	ldr	r3, [pc, #276]	@ (8015ae0 <XBEE_RX_DMACallback+0x170>)
 80159ca:	fb83 1302 	smull	r1, r3, r3, r2
 80159ce:	1159      	asrs	r1, r3, #5
 80159d0:	17d3      	asrs	r3, r2, #31
 80159d2:	1ac9      	subs	r1, r1, r3
 80159d4:	460b      	mov	r3, r1
 80159d6:	011b      	lsls	r3, r3, #4
 80159d8:	440b      	add	r3, r1
 80159da:	009b      	lsls	r3, r3, #2
 80159dc:	1ad1      	subs	r1, r2, r3
 80159de:	460b      	mov	r3, r1
 80159e0:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
		if (hxbee->pkt_bufDMA[packet_ptr] == PKT_DELIMETER) {
 80159e4:	687b      	ldr	r3, [r7, #4]
 80159e6:	689a      	ldr	r2, [r3, #8]
 80159e8:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 80159ec:	4413      	add	r3, r2
 80159ee:	781b      	ldrb	r3, [r3, #0]
 80159f0:	2baa      	cmp	r3, #170	@ 0xaa
 80159f2:	d107      	bne.n	8015a04 <XBEE_RX_DMACallback+0x94>
			found_delim = 1;					// Update flag
 80159f4:	2301      	movs	r3, #1
 80159f6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			hxbee->pkt_DMAHead = packet_ptr;	// Move the readHead
 80159fa:	687b      	ldr	r3, [r7, #4]
 80159fc:	f897 2053 	ldrb.w	r2, [r7, #83]	@ 0x53
 8015a00:	741a      	strb	r2, [r3, #16]
			break;
 8015a02:	e008      	b.n	8015a16 <XBEE_RX_DMACallback+0xa6>
	for (uint8_t circular_ptr = 0; circular_ptr < PKT_RAWSIZE; circular_ptr++) {
 8015a04:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 8015a08:	3301      	adds	r3, #1
 8015a0a:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
 8015a0e:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 8015a12:	2b43      	cmp	r3, #67	@ 0x43
 8015a14:	d9d3      	bls.n	80159be <XBEE_RX_DMACallback+0x4e>
		}
	}

	// Couldn't find the delimeter, this packet is FUBAR, discard the whole thing
	if (!found_delim) return 2;
 8015a16:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8015a1a:	2b00      	cmp	r3, #0
 8015a1c:	d101      	bne.n	8015a22 <XBEE_RX_DMACallback+0xb2>
 8015a1e:	2302      	movs	r3, #2
 8015a20:	e05a      	b.n	8015ad8 <XBEE_RX_DMACallback+0x168>

	// Copy the partial packet contents into the completed packet buffer
	memcpy(pkt_cplt, hxbee->pkt_bufPart, PKT_RAWSIZE);
 8015a22:	687b      	ldr	r3, [r7, #4]
 8015a24:	68da      	ldr	r2, [r3, #12]
 8015a26:	f107 030c 	add.w	r3, r7, #12
 8015a2a:	4611      	mov	r1, r2
 8015a2c:	2244      	movs	r2, #68	@ 0x44
 8015a2e:	4618      	mov	r0, r3
 8015a30:	f003 fc9f 	bl	8019372 <memcpy>

	// Copy the new packet contents into the partial packet buffer
	memcpy(hxbee->pkt_bufPart, hxbee->pkt_bufDMA + hxbee->pkt_DMAHead, PKT_RAWSIZE - hxbee->pkt_DMAHead);
 8015a34:	687b      	ldr	r3, [r7, #4]
 8015a36:	68d8      	ldr	r0, [r3, #12]
 8015a38:	687b      	ldr	r3, [r7, #4]
 8015a3a:	689b      	ldr	r3, [r3, #8]
 8015a3c:	687a      	ldr	r2, [r7, #4]
 8015a3e:	7c12      	ldrb	r2, [r2, #16]
 8015a40:	1899      	adds	r1, r3, r2
 8015a42:	687b      	ldr	r3, [r7, #4]
 8015a44:	7c1b      	ldrb	r3, [r3, #16]
 8015a46:	f1c3 0344 	rsb	r3, r3, #68	@ 0x44
 8015a4a:	461a      	mov	r2, r3
 8015a4c:	f003 fc91 	bl	8019372 <memcpy>

	// finish the old packet
	// Account for dropped byte underflow
	// TODO: We can actually correct this instead of just giving up
	if (old_head < hxbee->pkt_DMAHead) {
 8015a50:	687b      	ldr	r3, [r7, #4]
 8015a52:	7c1b      	ldrb	r3, [r3, #16]
 8015a54:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 8015a58:	429a      	cmp	r2, r3
 8015a5a:	d201      	bcs.n	8015a60 <XBEE_RX_DMACallback+0xf0>
		return 2;
 8015a5c:	2302      	movs	r3, #2
 8015a5e:	e03b      	b.n	8015ad8 <XBEE_RX_DMACallback+0x168>
	}

	uint16_t head_slip = old_head - hxbee->pkt_DMAHead;	// How many bytes were dropped
 8015a60:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8015a64:	b29b      	uxth	r3, r3
 8015a66:	687a      	ldr	r2, [r7, #4]
 8015a68:	7c12      	ldrb	r2, [r2, #16]
 8015a6a:	1a9b      	subs	r3, r3, r2
 8015a6c:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
	memset(pkt_cplt + (PKT_RAWSIZE - old_head), 0x00, head_slip); 									 // Zero dropped bytes
 8015a70:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8015a74:	f1c3 0344 	rsb	r3, r3, #68	@ 0x44
 8015a78:	461a      	mov	r2, r3
 8015a7a:	f107 030c 	add.w	r3, r7, #12
 8015a7e:	4413      	add	r3, r2
 8015a80:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8015a84:	2100      	movs	r1, #0
 8015a86:	4618      	mov	r0, r3
 8015a88:	f003 fbe3 	bl	8019252 <memset>
	memcpy(pkt_cplt + (PKT_RAWSIZE - old_head) + head_slip, hxbee->pkt_bufDMA, hxbee->pkt_DMAHead); // Fill in missing bytes
 8015a8c:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8015a90:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8015a94:	1ad3      	subs	r3, r2, r3
 8015a96:	3344      	adds	r3, #68	@ 0x44
 8015a98:	f107 020c 	add.w	r2, r7, #12
 8015a9c:	18d0      	adds	r0, r2, r3
 8015a9e:	687b      	ldr	r3, [r7, #4]
 8015aa0:	6899      	ldr	r1, [r3, #8]
 8015aa2:	687b      	ldr	r3, [r7, #4]
 8015aa4:	7c1b      	ldrb	r3, [r3, #16]
 8015aa6:	461a      	mov	r2, r3
 8015aa8:	f003 fc63 	bl	8019372 <memcpy>
	// In the event of a single dropped byte, this is accurate, if more than one gets dropped this may become inaccurate

	// TODO: CHECKSUM

	// If everything went well, increment the index and move the data into the RX buffer
	hxbee->pktRx_idxPush = pkt_idx;
 8015aac:	687b      	ldr	r3, [r7, #4]
 8015aae:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8015ab2:	765a      	strb	r2, [r3, #25]
	memcpy(hxbee->pktRx_mem + hxbee->pktRx_idxPush*PKT_RAWSIZE, pkt_cplt, PKT_RAWSIZE);
 8015ab4:	687b      	ldr	r3, [r7, #4]
 8015ab6:	695a      	ldr	r2, [r3, #20]
 8015ab8:	687b      	ldr	r3, [r7, #4]
 8015aba:	7e5b      	ldrb	r3, [r3, #25]
 8015abc:	4619      	mov	r1, r3
 8015abe:	460b      	mov	r3, r1
 8015ac0:	011b      	lsls	r3, r3, #4
 8015ac2:	440b      	add	r3, r1
 8015ac4:	009b      	lsls	r3, r3, #2
 8015ac6:	4413      	add	r3, r2
 8015ac8:	4618      	mov	r0, r3
 8015aca:	f107 030c 	add.w	r3, r7, #12
 8015ace:	2244      	movs	r2, #68	@ 0x44
 8015ad0:	4619      	mov	r1, r3
 8015ad2:	f003 fc4e 	bl	8019372 <memcpy>

	return 0;
 8015ad6:	2300      	movs	r3, #0
}
 8015ad8:	4618      	mov	r0, r3
 8015ada:	3758      	adds	r7, #88	@ 0x58
 8015adc:	46bd      	mov	sp, r7
 8015ade:	bd80      	pop	{r7, pc}
 8015ae0:	78787879 	.word	0x78787879

08015ae4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015ae4:	b580      	push	{r7, lr}
 8015ae6:	b084      	sub	sp, #16
 8015ae8:	af00      	add	r7, sp, #0
 8015aea:	6078      	str	r0, [r7, #4]
 8015aec:	460b      	mov	r3, r1
 8015aee:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8015af0:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8015af4:	f002 fd18 	bl	8018528 <USBD_static_malloc>
 8015af8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8015afa:	68fb      	ldr	r3, [r7, #12]
 8015afc:	2b00      	cmp	r3, #0
 8015afe:	d109      	bne.n	8015b14 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8015b00:	687b      	ldr	r3, [r7, #4]
 8015b02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015b06:	687b      	ldr	r3, [r7, #4]
 8015b08:	32b0      	adds	r2, #176	@ 0xb0
 8015b0a:	2100      	movs	r1, #0
 8015b0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8015b10:	2302      	movs	r3, #2
 8015b12:	e0d4      	b.n	8015cbe <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8015b14:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8015b18:	2100      	movs	r1, #0
 8015b1a:	68f8      	ldr	r0, [r7, #12]
 8015b1c:	f003 fb99 	bl	8019252 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8015b20:	687b      	ldr	r3, [r7, #4]
 8015b22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015b26:	687b      	ldr	r3, [r7, #4]
 8015b28:	32b0      	adds	r2, #176	@ 0xb0
 8015b2a:	68f9      	ldr	r1, [r7, #12]
 8015b2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8015b30:	687b      	ldr	r3, [r7, #4]
 8015b32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015b36:	687b      	ldr	r3, [r7, #4]
 8015b38:	32b0      	adds	r2, #176	@ 0xb0
 8015b3a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8015b3e:	687b      	ldr	r3, [r7, #4]
 8015b40:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015b44:	687b      	ldr	r3, [r7, #4]
 8015b46:	7c1b      	ldrb	r3, [r3, #16]
 8015b48:	2b00      	cmp	r3, #0
 8015b4a:	d138      	bne.n	8015bbe <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8015b4c:	4b5e      	ldr	r3, [pc, #376]	@ (8015cc8 <USBD_CDC_Init+0x1e4>)
 8015b4e:	7819      	ldrb	r1, [r3, #0]
 8015b50:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8015b54:	2202      	movs	r2, #2
 8015b56:	6878      	ldr	r0, [r7, #4]
 8015b58:	f002 fbc3 	bl	80182e2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8015b5c:	4b5a      	ldr	r3, [pc, #360]	@ (8015cc8 <USBD_CDC_Init+0x1e4>)
 8015b5e:	781b      	ldrb	r3, [r3, #0]
 8015b60:	f003 020f 	and.w	r2, r3, #15
 8015b64:	6879      	ldr	r1, [r7, #4]
 8015b66:	4613      	mov	r3, r2
 8015b68:	009b      	lsls	r3, r3, #2
 8015b6a:	4413      	add	r3, r2
 8015b6c:	009b      	lsls	r3, r3, #2
 8015b6e:	440b      	add	r3, r1
 8015b70:	3324      	adds	r3, #36	@ 0x24
 8015b72:	2201      	movs	r2, #1
 8015b74:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8015b76:	4b55      	ldr	r3, [pc, #340]	@ (8015ccc <USBD_CDC_Init+0x1e8>)
 8015b78:	7819      	ldrb	r1, [r3, #0]
 8015b7a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8015b7e:	2202      	movs	r2, #2
 8015b80:	6878      	ldr	r0, [r7, #4]
 8015b82:	f002 fbae 	bl	80182e2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8015b86:	4b51      	ldr	r3, [pc, #324]	@ (8015ccc <USBD_CDC_Init+0x1e8>)
 8015b88:	781b      	ldrb	r3, [r3, #0]
 8015b8a:	f003 020f 	and.w	r2, r3, #15
 8015b8e:	6879      	ldr	r1, [r7, #4]
 8015b90:	4613      	mov	r3, r2
 8015b92:	009b      	lsls	r3, r3, #2
 8015b94:	4413      	add	r3, r2
 8015b96:	009b      	lsls	r3, r3, #2
 8015b98:	440b      	add	r3, r1
 8015b9a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8015b9e:	2201      	movs	r2, #1
 8015ba0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8015ba2:	4b4b      	ldr	r3, [pc, #300]	@ (8015cd0 <USBD_CDC_Init+0x1ec>)
 8015ba4:	781b      	ldrb	r3, [r3, #0]
 8015ba6:	f003 020f 	and.w	r2, r3, #15
 8015baa:	6879      	ldr	r1, [r7, #4]
 8015bac:	4613      	mov	r3, r2
 8015bae:	009b      	lsls	r3, r3, #2
 8015bb0:	4413      	add	r3, r2
 8015bb2:	009b      	lsls	r3, r3, #2
 8015bb4:	440b      	add	r3, r1
 8015bb6:	3326      	adds	r3, #38	@ 0x26
 8015bb8:	2210      	movs	r2, #16
 8015bba:	801a      	strh	r2, [r3, #0]
 8015bbc:	e035      	b.n	8015c2a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8015bbe:	4b42      	ldr	r3, [pc, #264]	@ (8015cc8 <USBD_CDC_Init+0x1e4>)
 8015bc0:	7819      	ldrb	r1, [r3, #0]
 8015bc2:	2340      	movs	r3, #64	@ 0x40
 8015bc4:	2202      	movs	r2, #2
 8015bc6:	6878      	ldr	r0, [r7, #4]
 8015bc8:	f002 fb8b 	bl	80182e2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8015bcc:	4b3e      	ldr	r3, [pc, #248]	@ (8015cc8 <USBD_CDC_Init+0x1e4>)
 8015bce:	781b      	ldrb	r3, [r3, #0]
 8015bd0:	f003 020f 	and.w	r2, r3, #15
 8015bd4:	6879      	ldr	r1, [r7, #4]
 8015bd6:	4613      	mov	r3, r2
 8015bd8:	009b      	lsls	r3, r3, #2
 8015bda:	4413      	add	r3, r2
 8015bdc:	009b      	lsls	r3, r3, #2
 8015bde:	440b      	add	r3, r1
 8015be0:	3324      	adds	r3, #36	@ 0x24
 8015be2:	2201      	movs	r2, #1
 8015be4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8015be6:	4b39      	ldr	r3, [pc, #228]	@ (8015ccc <USBD_CDC_Init+0x1e8>)
 8015be8:	7819      	ldrb	r1, [r3, #0]
 8015bea:	2340      	movs	r3, #64	@ 0x40
 8015bec:	2202      	movs	r2, #2
 8015bee:	6878      	ldr	r0, [r7, #4]
 8015bf0:	f002 fb77 	bl	80182e2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8015bf4:	4b35      	ldr	r3, [pc, #212]	@ (8015ccc <USBD_CDC_Init+0x1e8>)
 8015bf6:	781b      	ldrb	r3, [r3, #0]
 8015bf8:	f003 020f 	and.w	r2, r3, #15
 8015bfc:	6879      	ldr	r1, [r7, #4]
 8015bfe:	4613      	mov	r3, r2
 8015c00:	009b      	lsls	r3, r3, #2
 8015c02:	4413      	add	r3, r2
 8015c04:	009b      	lsls	r3, r3, #2
 8015c06:	440b      	add	r3, r1
 8015c08:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8015c0c:	2201      	movs	r2, #1
 8015c0e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8015c10:	4b2f      	ldr	r3, [pc, #188]	@ (8015cd0 <USBD_CDC_Init+0x1ec>)
 8015c12:	781b      	ldrb	r3, [r3, #0]
 8015c14:	f003 020f 	and.w	r2, r3, #15
 8015c18:	6879      	ldr	r1, [r7, #4]
 8015c1a:	4613      	mov	r3, r2
 8015c1c:	009b      	lsls	r3, r3, #2
 8015c1e:	4413      	add	r3, r2
 8015c20:	009b      	lsls	r3, r3, #2
 8015c22:	440b      	add	r3, r1
 8015c24:	3326      	adds	r3, #38	@ 0x26
 8015c26:	2210      	movs	r2, #16
 8015c28:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8015c2a:	4b29      	ldr	r3, [pc, #164]	@ (8015cd0 <USBD_CDC_Init+0x1ec>)
 8015c2c:	7819      	ldrb	r1, [r3, #0]
 8015c2e:	2308      	movs	r3, #8
 8015c30:	2203      	movs	r2, #3
 8015c32:	6878      	ldr	r0, [r7, #4]
 8015c34:	f002 fb55 	bl	80182e2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8015c38:	4b25      	ldr	r3, [pc, #148]	@ (8015cd0 <USBD_CDC_Init+0x1ec>)
 8015c3a:	781b      	ldrb	r3, [r3, #0]
 8015c3c:	f003 020f 	and.w	r2, r3, #15
 8015c40:	6879      	ldr	r1, [r7, #4]
 8015c42:	4613      	mov	r3, r2
 8015c44:	009b      	lsls	r3, r3, #2
 8015c46:	4413      	add	r3, r2
 8015c48:	009b      	lsls	r3, r3, #2
 8015c4a:	440b      	add	r3, r1
 8015c4c:	3324      	adds	r3, #36	@ 0x24
 8015c4e:	2201      	movs	r2, #1
 8015c50:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8015c52:	68fb      	ldr	r3, [r7, #12]
 8015c54:	2200      	movs	r2, #0
 8015c56:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8015c5a:	687b      	ldr	r3, [r7, #4]
 8015c5c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8015c60:	687a      	ldr	r2, [r7, #4]
 8015c62:	33b0      	adds	r3, #176	@ 0xb0
 8015c64:	009b      	lsls	r3, r3, #2
 8015c66:	4413      	add	r3, r2
 8015c68:	685b      	ldr	r3, [r3, #4]
 8015c6a:	681b      	ldr	r3, [r3, #0]
 8015c6c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8015c6e:	68fb      	ldr	r3, [r7, #12]
 8015c70:	2200      	movs	r2, #0
 8015c72:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8015c76:	68fb      	ldr	r3, [r7, #12]
 8015c78:	2200      	movs	r2, #0
 8015c7a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8015c7e:	68fb      	ldr	r3, [r7, #12]
 8015c80:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8015c84:	2b00      	cmp	r3, #0
 8015c86:	d101      	bne.n	8015c8c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8015c88:	2302      	movs	r3, #2
 8015c8a:	e018      	b.n	8015cbe <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015c8c:	687b      	ldr	r3, [r7, #4]
 8015c8e:	7c1b      	ldrb	r3, [r3, #16]
 8015c90:	2b00      	cmp	r3, #0
 8015c92:	d10a      	bne.n	8015caa <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8015c94:	4b0d      	ldr	r3, [pc, #52]	@ (8015ccc <USBD_CDC_Init+0x1e8>)
 8015c96:	7819      	ldrb	r1, [r3, #0]
 8015c98:	68fb      	ldr	r3, [r7, #12]
 8015c9a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8015c9e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8015ca2:	6878      	ldr	r0, [r7, #4]
 8015ca4:	f002 fc0c 	bl	80184c0 <USBD_LL_PrepareReceive>
 8015ca8:	e008      	b.n	8015cbc <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8015caa:	4b08      	ldr	r3, [pc, #32]	@ (8015ccc <USBD_CDC_Init+0x1e8>)
 8015cac:	7819      	ldrb	r1, [r3, #0]
 8015cae:	68fb      	ldr	r3, [r7, #12]
 8015cb0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8015cb4:	2340      	movs	r3, #64	@ 0x40
 8015cb6:	6878      	ldr	r0, [r7, #4]
 8015cb8:	f002 fc02 	bl	80184c0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8015cbc:	2300      	movs	r3, #0
}
 8015cbe:	4618      	mov	r0, r3
 8015cc0:	3710      	adds	r7, #16
 8015cc2:	46bd      	mov	sp, r7
 8015cc4:	bd80      	pop	{r7, pc}
 8015cc6:	bf00      	nop
 8015cc8:	240000af 	.word	0x240000af
 8015ccc:	240000b0 	.word	0x240000b0
 8015cd0:	240000b1 	.word	0x240000b1

08015cd4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015cd4:	b580      	push	{r7, lr}
 8015cd6:	b082      	sub	sp, #8
 8015cd8:	af00      	add	r7, sp, #0
 8015cda:	6078      	str	r0, [r7, #4]
 8015cdc:	460b      	mov	r3, r1
 8015cde:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8015ce0:	4b3a      	ldr	r3, [pc, #232]	@ (8015dcc <USBD_CDC_DeInit+0xf8>)
 8015ce2:	781b      	ldrb	r3, [r3, #0]
 8015ce4:	4619      	mov	r1, r3
 8015ce6:	6878      	ldr	r0, [r7, #4]
 8015ce8:	f002 fb21 	bl	801832e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8015cec:	4b37      	ldr	r3, [pc, #220]	@ (8015dcc <USBD_CDC_DeInit+0xf8>)
 8015cee:	781b      	ldrb	r3, [r3, #0]
 8015cf0:	f003 020f 	and.w	r2, r3, #15
 8015cf4:	6879      	ldr	r1, [r7, #4]
 8015cf6:	4613      	mov	r3, r2
 8015cf8:	009b      	lsls	r3, r3, #2
 8015cfa:	4413      	add	r3, r2
 8015cfc:	009b      	lsls	r3, r3, #2
 8015cfe:	440b      	add	r3, r1
 8015d00:	3324      	adds	r3, #36	@ 0x24
 8015d02:	2200      	movs	r2, #0
 8015d04:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8015d06:	4b32      	ldr	r3, [pc, #200]	@ (8015dd0 <USBD_CDC_DeInit+0xfc>)
 8015d08:	781b      	ldrb	r3, [r3, #0]
 8015d0a:	4619      	mov	r1, r3
 8015d0c:	6878      	ldr	r0, [r7, #4]
 8015d0e:	f002 fb0e 	bl	801832e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8015d12:	4b2f      	ldr	r3, [pc, #188]	@ (8015dd0 <USBD_CDC_DeInit+0xfc>)
 8015d14:	781b      	ldrb	r3, [r3, #0]
 8015d16:	f003 020f 	and.w	r2, r3, #15
 8015d1a:	6879      	ldr	r1, [r7, #4]
 8015d1c:	4613      	mov	r3, r2
 8015d1e:	009b      	lsls	r3, r3, #2
 8015d20:	4413      	add	r3, r2
 8015d22:	009b      	lsls	r3, r3, #2
 8015d24:	440b      	add	r3, r1
 8015d26:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8015d2a:	2200      	movs	r2, #0
 8015d2c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8015d2e:	4b29      	ldr	r3, [pc, #164]	@ (8015dd4 <USBD_CDC_DeInit+0x100>)
 8015d30:	781b      	ldrb	r3, [r3, #0]
 8015d32:	4619      	mov	r1, r3
 8015d34:	6878      	ldr	r0, [r7, #4]
 8015d36:	f002 fafa 	bl	801832e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8015d3a:	4b26      	ldr	r3, [pc, #152]	@ (8015dd4 <USBD_CDC_DeInit+0x100>)
 8015d3c:	781b      	ldrb	r3, [r3, #0]
 8015d3e:	f003 020f 	and.w	r2, r3, #15
 8015d42:	6879      	ldr	r1, [r7, #4]
 8015d44:	4613      	mov	r3, r2
 8015d46:	009b      	lsls	r3, r3, #2
 8015d48:	4413      	add	r3, r2
 8015d4a:	009b      	lsls	r3, r3, #2
 8015d4c:	440b      	add	r3, r1
 8015d4e:	3324      	adds	r3, #36	@ 0x24
 8015d50:	2200      	movs	r2, #0
 8015d52:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8015d54:	4b1f      	ldr	r3, [pc, #124]	@ (8015dd4 <USBD_CDC_DeInit+0x100>)
 8015d56:	781b      	ldrb	r3, [r3, #0]
 8015d58:	f003 020f 	and.w	r2, r3, #15
 8015d5c:	6879      	ldr	r1, [r7, #4]
 8015d5e:	4613      	mov	r3, r2
 8015d60:	009b      	lsls	r3, r3, #2
 8015d62:	4413      	add	r3, r2
 8015d64:	009b      	lsls	r3, r3, #2
 8015d66:	440b      	add	r3, r1
 8015d68:	3326      	adds	r3, #38	@ 0x26
 8015d6a:	2200      	movs	r2, #0
 8015d6c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8015d6e:	687b      	ldr	r3, [r7, #4]
 8015d70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015d74:	687b      	ldr	r3, [r7, #4]
 8015d76:	32b0      	adds	r2, #176	@ 0xb0
 8015d78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015d7c:	2b00      	cmp	r3, #0
 8015d7e:	d01f      	beq.n	8015dc0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8015d80:	687b      	ldr	r3, [r7, #4]
 8015d82:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8015d86:	687a      	ldr	r2, [r7, #4]
 8015d88:	33b0      	adds	r3, #176	@ 0xb0
 8015d8a:	009b      	lsls	r3, r3, #2
 8015d8c:	4413      	add	r3, r2
 8015d8e:	685b      	ldr	r3, [r3, #4]
 8015d90:	685b      	ldr	r3, [r3, #4]
 8015d92:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8015d94:	687b      	ldr	r3, [r7, #4]
 8015d96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015d9a:	687b      	ldr	r3, [r7, #4]
 8015d9c:	32b0      	adds	r2, #176	@ 0xb0
 8015d9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015da2:	4618      	mov	r0, r3
 8015da4:	f002 fbce 	bl	8018544 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8015da8:	687b      	ldr	r3, [r7, #4]
 8015daa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015dae:	687b      	ldr	r3, [r7, #4]
 8015db0:	32b0      	adds	r2, #176	@ 0xb0
 8015db2:	2100      	movs	r1, #0
 8015db4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8015db8:	687b      	ldr	r3, [r7, #4]
 8015dba:	2200      	movs	r2, #0
 8015dbc:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8015dc0:	2300      	movs	r3, #0
}
 8015dc2:	4618      	mov	r0, r3
 8015dc4:	3708      	adds	r7, #8
 8015dc6:	46bd      	mov	sp, r7
 8015dc8:	bd80      	pop	{r7, pc}
 8015dca:	bf00      	nop
 8015dcc:	240000af 	.word	0x240000af
 8015dd0:	240000b0 	.word	0x240000b0
 8015dd4:	240000b1 	.word	0x240000b1

08015dd8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8015dd8:	b580      	push	{r7, lr}
 8015dda:	b086      	sub	sp, #24
 8015ddc:	af00      	add	r7, sp, #0
 8015dde:	6078      	str	r0, [r7, #4]
 8015de0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015de2:	687b      	ldr	r3, [r7, #4]
 8015de4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015de8:	687b      	ldr	r3, [r7, #4]
 8015dea:	32b0      	adds	r2, #176	@ 0xb0
 8015dec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015df0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8015df2:	2300      	movs	r3, #0
 8015df4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8015df6:	2300      	movs	r3, #0
 8015df8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8015dfa:	2300      	movs	r3, #0
 8015dfc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8015dfe:	693b      	ldr	r3, [r7, #16]
 8015e00:	2b00      	cmp	r3, #0
 8015e02:	d101      	bne.n	8015e08 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8015e04:	2303      	movs	r3, #3
 8015e06:	e0bf      	b.n	8015f88 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015e08:	683b      	ldr	r3, [r7, #0]
 8015e0a:	781b      	ldrb	r3, [r3, #0]
 8015e0c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8015e10:	2b00      	cmp	r3, #0
 8015e12:	d050      	beq.n	8015eb6 <USBD_CDC_Setup+0xde>
 8015e14:	2b20      	cmp	r3, #32
 8015e16:	f040 80af 	bne.w	8015f78 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8015e1a:	683b      	ldr	r3, [r7, #0]
 8015e1c:	88db      	ldrh	r3, [r3, #6]
 8015e1e:	2b00      	cmp	r3, #0
 8015e20:	d03a      	beq.n	8015e98 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8015e22:	683b      	ldr	r3, [r7, #0]
 8015e24:	781b      	ldrb	r3, [r3, #0]
 8015e26:	b25b      	sxtb	r3, r3
 8015e28:	2b00      	cmp	r3, #0
 8015e2a:	da1b      	bge.n	8015e64 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8015e2c:	687b      	ldr	r3, [r7, #4]
 8015e2e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8015e32:	687a      	ldr	r2, [r7, #4]
 8015e34:	33b0      	adds	r3, #176	@ 0xb0
 8015e36:	009b      	lsls	r3, r3, #2
 8015e38:	4413      	add	r3, r2
 8015e3a:	685b      	ldr	r3, [r3, #4]
 8015e3c:	689b      	ldr	r3, [r3, #8]
 8015e3e:	683a      	ldr	r2, [r7, #0]
 8015e40:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8015e42:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8015e44:	683a      	ldr	r2, [r7, #0]
 8015e46:	88d2      	ldrh	r2, [r2, #6]
 8015e48:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8015e4a:	683b      	ldr	r3, [r7, #0]
 8015e4c:	88db      	ldrh	r3, [r3, #6]
 8015e4e:	2b07      	cmp	r3, #7
 8015e50:	bf28      	it	cs
 8015e52:	2307      	movcs	r3, #7
 8015e54:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8015e56:	693b      	ldr	r3, [r7, #16]
 8015e58:	89fa      	ldrh	r2, [r7, #14]
 8015e5a:	4619      	mov	r1, r3
 8015e5c:	6878      	ldr	r0, [r7, #4]
 8015e5e:	f001 fdbd 	bl	80179dc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8015e62:	e090      	b.n	8015f86 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8015e64:	683b      	ldr	r3, [r7, #0]
 8015e66:	785a      	ldrb	r2, [r3, #1]
 8015e68:	693b      	ldr	r3, [r7, #16]
 8015e6a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8015e6e:	683b      	ldr	r3, [r7, #0]
 8015e70:	88db      	ldrh	r3, [r3, #6]
 8015e72:	2b3f      	cmp	r3, #63	@ 0x3f
 8015e74:	d803      	bhi.n	8015e7e <USBD_CDC_Setup+0xa6>
 8015e76:	683b      	ldr	r3, [r7, #0]
 8015e78:	88db      	ldrh	r3, [r3, #6]
 8015e7a:	b2da      	uxtb	r2, r3
 8015e7c:	e000      	b.n	8015e80 <USBD_CDC_Setup+0xa8>
 8015e7e:	2240      	movs	r2, #64	@ 0x40
 8015e80:	693b      	ldr	r3, [r7, #16]
 8015e82:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8015e86:	6939      	ldr	r1, [r7, #16]
 8015e88:	693b      	ldr	r3, [r7, #16]
 8015e8a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8015e8e:	461a      	mov	r2, r3
 8015e90:	6878      	ldr	r0, [r7, #4]
 8015e92:	f001 fdcf 	bl	8017a34 <USBD_CtlPrepareRx>
      break;
 8015e96:	e076      	b.n	8015f86 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8015e98:	687b      	ldr	r3, [r7, #4]
 8015e9a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8015e9e:	687a      	ldr	r2, [r7, #4]
 8015ea0:	33b0      	adds	r3, #176	@ 0xb0
 8015ea2:	009b      	lsls	r3, r3, #2
 8015ea4:	4413      	add	r3, r2
 8015ea6:	685b      	ldr	r3, [r3, #4]
 8015ea8:	689b      	ldr	r3, [r3, #8]
 8015eaa:	683a      	ldr	r2, [r7, #0]
 8015eac:	7850      	ldrb	r0, [r2, #1]
 8015eae:	2200      	movs	r2, #0
 8015eb0:	6839      	ldr	r1, [r7, #0]
 8015eb2:	4798      	blx	r3
      break;
 8015eb4:	e067      	b.n	8015f86 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8015eb6:	683b      	ldr	r3, [r7, #0]
 8015eb8:	785b      	ldrb	r3, [r3, #1]
 8015eba:	2b0b      	cmp	r3, #11
 8015ebc:	d851      	bhi.n	8015f62 <USBD_CDC_Setup+0x18a>
 8015ebe:	a201      	add	r2, pc, #4	@ (adr r2, 8015ec4 <USBD_CDC_Setup+0xec>)
 8015ec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015ec4:	08015ef5 	.word	0x08015ef5
 8015ec8:	08015f71 	.word	0x08015f71
 8015ecc:	08015f63 	.word	0x08015f63
 8015ed0:	08015f63 	.word	0x08015f63
 8015ed4:	08015f63 	.word	0x08015f63
 8015ed8:	08015f63 	.word	0x08015f63
 8015edc:	08015f63 	.word	0x08015f63
 8015ee0:	08015f63 	.word	0x08015f63
 8015ee4:	08015f63 	.word	0x08015f63
 8015ee8:	08015f63 	.word	0x08015f63
 8015eec:	08015f1f 	.word	0x08015f1f
 8015ef0:	08015f49 	.word	0x08015f49
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015ef4:	687b      	ldr	r3, [r7, #4]
 8015ef6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015efa:	b2db      	uxtb	r3, r3
 8015efc:	2b03      	cmp	r3, #3
 8015efe:	d107      	bne.n	8015f10 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8015f00:	f107 030a 	add.w	r3, r7, #10
 8015f04:	2202      	movs	r2, #2
 8015f06:	4619      	mov	r1, r3
 8015f08:	6878      	ldr	r0, [r7, #4]
 8015f0a:	f001 fd67 	bl	80179dc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8015f0e:	e032      	b.n	8015f76 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8015f10:	6839      	ldr	r1, [r7, #0]
 8015f12:	6878      	ldr	r0, [r7, #4]
 8015f14:	f001 fce5 	bl	80178e2 <USBD_CtlError>
            ret = USBD_FAIL;
 8015f18:	2303      	movs	r3, #3
 8015f1a:	75fb      	strb	r3, [r7, #23]
          break;
 8015f1c:	e02b      	b.n	8015f76 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015f1e:	687b      	ldr	r3, [r7, #4]
 8015f20:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015f24:	b2db      	uxtb	r3, r3
 8015f26:	2b03      	cmp	r3, #3
 8015f28:	d107      	bne.n	8015f3a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8015f2a:	f107 030d 	add.w	r3, r7, #13
 8015f2e:	2201      	movs	r2, #1
 8015f30:	4619      	mov	r1, r3
 8015f32:	6878      	ldr	r0, [r7, #4]
 8015f34:	f001 fd52 	bl	80179dc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8015f38:	e01d      	b.n	8015f76 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8015f3a:	6839      	ldr	r1, [r7, #0]
 8015f3c:	6878      	ldr	r0, [r7, #4]
 8015f3e:	f001 fcd0 	bl	80178e2 <USBD_CtlError>
            ret = USBD_FAIL;
 8015f42:	2303      	movs	r3, #3
 8015f44:	75fb      	strb	r3, [r7, #23]
          break;
 8015f46:	e016      	b.n	8015f76 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8015f48:	687b      	ldr	r3, [r7, #4]
 8015f4a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015f4e:	b2db      	uxtb	r3, r3
 8015f50:	2b03      	cmp	r3, #3
 8015f52:	d00f      	beq.n	8015f74 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8015f54:	6839      	ldr	r1, [r7, #0]
 8015f56:	6878      	ldr	r0, [r7, #4]
 8015f58:	f001 fcc3 	bl	80178e2 <USBD_CtlError>
            ret = USBD_FAIL;
 8015f5c:	2303      	movs	r3, #3
 8015f5e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8015f60:	e008      	b.n	8015f74 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8015f62:	6839      	ldr	r1, [r7, #0]
 8015f64:	6878      	ldr	r0, [r7, #4]
 8015f66:	f001 fcbc 	bl	80178e2 <USBD_CtlError>
          ret = USBD_FAIL;
 8015f6a:	2303      	movs	r3, #3
 8015f6c:	75fb      	strb	r3, [r7, #23]
          break;
 8015f6e:	e002      	b.n	8015f76 <USBD_CDC_Setup+0x19e>
          break;
 8015f70:	bf00      	nop
 8015f72:	e008      	b.n	8015f86 <USBD_CDC_Setup+0x1ae>
          break;
 8015f74:	bf00      	nop
      }
      break;
 8015f76:	e006      	b.n	8015f86 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8015f78:	6839      	ldr	r1, [r7, #0]
 8015f7a:	6878      	ldr	r0, [r7, #4]
 8015f7c:	f001 fcb1 	bl	80178e2 <USBD_CtlError>
      ret = USBD_FAIL;
 8015f80:	2303      	movs	r3, #3
 8015f82:	75fb      	strb	r3, [r7, #23]
      break;
 8015f84:	bf00      	nop
  }

  return (uint8_t)ret;
 8015f86:	7dfb      	ldrb	r3, [r7, #23]
}
 8015f88:	4618      	mov	r0, r3
 8015f8a:	3718      	adds	r7, #24
 8015f8c:	46bd      	mov	sp, r7
 8015f8e:	bd80      	pop	{r7, pc}

08015f90 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8015f90:	b580      	push	{r7, lr}
 8015f92:	b084      	sub	sp, #16
 8015f94:	af00      	add	r7, sp, #0
 8015f96:	6078      	str	r0, [r7, #4]
 8015f98:	460b      	mov	r3, r1
 8015f9a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8015f9c:	687b      	ldr	r3, [r7, #4]
 8015f9e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8015fa2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8015fa4:	687b      	ldr	r3, [r7, #4]
 8015fa6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015faa:	687b      	ldr	r3, [r7, #4]
 8015fac:	32b0      	adds	r2, #176	@ 0xb0
 8015fae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015fb2:	2b00      	cmp	r3, #0
 8015fb4:	d101      	bne.n	8015fba <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8015fb6:	2303      	movs	r3, #3
 8015fb8:	e065      	b.n	8016086 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015fba:	687b      	ldr	r3, [r7, #4]
 8015fbc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015fc0:	687b      	ldr	r3, [r7, #4]
 8015fc2:	32b0      	adds	r2, #176	@ 0xb0
 8015fc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015fc8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8015fca:	78fb      	ldrb	r3, [r7, #3]
 8015fcc:	f003 020f 	and.w	r2, r3, #15
 8015fd0:	6879      	ldr	r1, [r7, #4]
 8015fd2:	4613      	mov	r3, r2
 8015fd4:	009b      	lsls	r3, r3, #2
 8015fd6:	4413      	add	r3, r2
 8015fd8:	009b      	lsls	r3, r3, #2
 8015fda:	440b      	add	r3, r1
 8015fdc:	3318      	adds	r3, #24
 8015fde:	681b      	ldr	r3, [r3, #0]
 8015fe0:	2b00      	cmp	r3, #0
 8015fe2:	d02f      	beq.n	8016044 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8015fe4:	78fb      	ldrb	r3, [r7, #3]
 8015fe6:	f003 020f 	and.w	r2, r3, #15
 8015fea:	6879      	ldr	r1, [r7, #4]
 8015fec:	4613      	mov	r3, r2
 8015fee:	009b      	lsls	r3, r3, #2
 8015ff0:	4413      	add	r3, r2
 8015ff2:	009b      	lsls	r3, r3, #2
 8015ff4:	440b      	add	r3, r1
 8015ff6:	3318      	adds	r3, #24
 8015ff8:	681a      	ldr	r2, [r3, #0]
 8015ffa:	78fb      	ldrb	r3, [r7, #3]
 8015ffc:	f003 010f 	and.w	r1, r3, #15
 8016000:	68f8      	ldr	r0, [r7, #12]
 8016002:	460b      	mov	r3, r1
 8016004:	00db      	lsls	r3, r3, #3
 8016006:	440b      	add	r3, r1
 8016008:	009b      	lsls	r3, r3, #2
 801600a:	4403      	add	r3, r0
 801600c:	331c      	adds	r3, #28
 801600e:	681b      	ldr	r3, [r3, #0]
 8016010:	fbb2 f1f3 	udiv	r1, r2, r3
 8016014:	fb01 f303 	mul.w	r3, r1, r3
 8016018:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 801601a:	2b00      	cmp	r3, #0
 801601c:	d112      	bne.n	8016044 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 801601e:	78fb      	ldrb	r3, [r7, #3]
 8016020:	f003 020f 	and.w	r2, r3, #15
 8016024:	6879      	ldr	r1, [r7, #4]
 8016026:	4613      	mov	r3, r2
 8016028:	009b      	lsls	r3, r3, #2
 801602a:	4413      	add	r3, r2
 801602c:	009b      	lsls	r3, r3, #2
 801602e:	440b      	add	r3, r1
 8016030:	3318      	adds	r3, #24
 8016032:	2200      	movs	r2, #0
 8016034:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8016036:	78f9      	ldrb	r1, [r7, #3]
 8016038:	2300      	movs	r3, #0
 801603a:	2200      	movs	r2, #0
 801603c:	6878      	ldr	r0, [r7, #4]
 801603e:	f002 fa1e 	bl	801847e <USBD_LL_Transmit>
 8016042:	e01f      	b.n	8016084 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8016044:	68bb      	ldr	r3, [r7, #8]
 8016046:	2200      	movs	r2, #0
 8016048:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 801604c:	687b      	ldr	r3, [r7, #4]
 801604e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8016052:	687a      	ldr	r2, [r7, #4]
 8016054:	33b0      	adds	r3, #176	@ 0xb0
 8016056:	009b      	lsls	r3, r3, #2
 8016058:	4413      	add	r3, r2
 801605a:	685b      	ldr	r3, [r3, #4]
 801605c:	691b      	ldr	r3, [r3, #16]
 801605e:	2b00      	cmp	r3, #0
 8016060:	d010      	beq.n	8016084 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8016062:	687b      	ldr	r3, [r7, #4]
 8016064:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8016068:	687a      	ldr	r2, [r7, #4]
 801606a:	33b0      	adds	r3, #176	@ 0xb0
 801606c:	009b      	lsls	r3, r3, #2
 801606e:	4413      	add	r3, r2
 8016070:	685b      	ldr	r3, [r3, #4]
 8016072:	691b      	ldr	r3, [r3, #16]
 8016074:	68ba      	ldr	r2, [r7, #8]
 8016076:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 801607a:	68ba      	ldr	r2, [r7, #8]
 801607c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8016080:	78fa      	ldrb	r2, [r7, #3]
 8016082:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8016084:	2300      	movs	r3, #0
}
 8016086:	4618      	mov	r0, r3
 8016088:	3710      	adds	r7, #16
 801608a:	46bd      	mov	sp, r7
 801608c:	bd80      	pop	{r7, pc}

0801608e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801608e:	b580      	push	{r7, lr}
 8016090:	b084      	sub	sp, #16
 8016092:	af00      	add	r7, sp, #0
 8016094:	6078      	str	r0, [r7, #4]
 8016096:	460b      	mov	r3, r1
 8016098:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801609a:	687b      	ldr	r3, [r7, #4]
 801609c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80160a0:	687b      	ldr	r3, [r7, #4]
 80160a2:	32b0      	adds	r2, #176	@ 0xb0
 80160a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80160a8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80160aa:	687b      	ldr	r3, [r7, #4]
 80160ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80160b0:	687b      	ldr	r3, [r7, #4]
 80160b2:	32b0      	adds	r2, #176	@ 0xb0
 80160b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80160b8:	2b00      	cmp	r3, #0
 80160ba:	d101      	bne.n	80160c0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80160bc:	2303      	movs	r3, #3
 80160be:	e01a      	b.n	80160f6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80160c0:	78fb      	ldrb	r3, [r7, #3]
 80160c2:	4619      	mov	r1, r3
 80160c4:	6878      	ldr	r0, [r7, #4]
 80160c6:	f002 fa1c 	bl	8018502 <USBD_LL_GetRxDataSize>
 80160ca:	4602      	mov	r2, r0
 80160cc:	68fb      	ldr	r3, [r7, #12]
 80160ce:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80160d2:	687b      	ldr	r3, [r7, #4]
 80160d4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80160d8:	687a      	ldr	r2, [r7, #4]
 80160da:	33b0      	adds	r3, #176	@ 0xb0
 80160dc:	009b      	lsls	r3, r3, #2
 80160de:	4413      	add	r3, r2
 80160e0:	685b      	ldr	r3, [r3, #4]
 80160e2:	68db      	ldr	r3, [r3, #12]
 80160e4:	68fa      	ldr	r2, [r7, #12]
 80160e6:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80160ea:	68fa      	ldr	r2, [r7, #12]
 80160ec:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80160f0:	4611      	mov	r1, r2
 80160f2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80160f4:	2300      	movs	r3, #0
}
 80160f6:	4618      	mov	r0, r3
 80160f8:	3710      	adds	r7, #16
 80160fa:	46bd      	mov	sp, r7
 80160fc:	bd80      	pop	{r7, pc}

080160fe <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80160fe:	b580      	push	{r7, lr}
 8016100:	b084      	sub	sp, #16
 8016102:	af00      	add	r7, sp, #0
 8016104:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8016106:	687b      	ldr	r3, [r7, #4]
 8016108:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801610c:	687b      	ldr	r3, [r7, #4]
 801610e:	32b0      	adds	r2, #176	@ 0xb0
 8016110:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016114:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8016116:	68fb      	ldr	r3, [r7, #12]
 8016118:	2b00      	cmp	r3, #0
 801611a:	d101      	bne.n	8016120 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 801611c:	2303      	movs	r3, #3
 801611e:	e024      	b.n	801616a <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8016120:	687b      	ldr	r3, [r7, #4]
 8016122:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8016126:	687a      	ldr	r2, [r7, #4]
 8016128:	33b0      	adds	r3, #176	@ 0xb0
 801612a:	009b      	lsls	r3, r3, #2
 801612c:	4413      	add	r3, r2
 801612e:	685b      	ldr	r3, [r3, #4]
 8016130:	2b00      	cmp	r3, #0
 8016132:	d019      	beq.n	8016168 <USBD_CDC_EP0_RxReady+0x6a>
 8016134:	68fb      	ldr	r3, [r7, #12]
 8016136:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 801613a:	2bff      	cmp	r3, #255	@ 0xff
 801613c:	d014      	beq.n	8016168 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 801613e:	687b      	ldr	r3, [r7, #4]
 8016140:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8016144:	687a      	ldr	r2, [r7, #4]
 8016146:	33b0      	adds	r3, #176	@ 0xb0
 8016148:	009b      	lsls	r3, r3, #2
 801614a:	4413      	add	r3, r2
 801614c:	685b      	ldr	r3, [r3, #4]
 801614e:	689b      	ldr	r3, [r3, #8]
 8016150:	68fa      	ldr	r2, [r7, #12]
 8016152:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8016156:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8016158:	68fa      	ldr	r2, [r7, #12]
 801615a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 801615e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8016160:	68fb      	ldr	r3, [r7, #12]
 8016162:	22ff      	movs	r2, #255	@ 0xff
 8016164:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8016168:	2300      	movs	r3, #0
}
 801616a:	4618      	mov	r0, r3
 801616c:	3710      	adds	r7, #16
 801616e:	46bd      	mov	sp, r7
 8016170:	bd80      	pop	{r7, pc}
	...

08016174 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8016174:	b580      	push	{r7, lr}
 8016176:	b086      	sub	sp, #24
 8016178:	af00      	add	r7, sp, #0
 801617a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 801617c:	2182      	movs	r1, #130	@ 0x82
 801617e:	4818      	ldr	r0, [pc, #96]	@ (80161e0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8016180:	f000 fd4f 	bl	8016c22 <USBD_GetEpDesc>
 8016184:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8016186:	2101      	movs	r1, #1
 8016188:	4815      	ldr	r0, [pc, #84]	@ (80161e0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 801618a:	f000 fd4a 	bl	8016c22 <USBD_GetEpDesc>
 801618e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8016190:	2181      	movs	r1, #129	@ 0x81
 8016192:	4813      	ldr	r0, [pc, #76]	@ (80161e0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8016194:	f000 fd45 	bl	8016c22 <USBD_GetEpDesc>
 8016198:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801619a:	697b      	ldr	r3, [r7, #20]
 801619c:	2b00      	cmp	r3, #0
 801619e:	d002      	beq.n	80161a6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80161a0:	697b      	ldr	r3, [r7, #20]
 80161a2:	2210      	movs	r2, #16
 80161a4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80161a6:	693b      	ldr	r3, [r7, #16]
 80161a8:	2b00      	cmp	r3, #0
 80161aa:	d006      	beq.n	80161ba <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80161ac:	693b      	ldr	r3, [r7, #16]
 80161ae:	2200      	movs	r2, #0
 80161b0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80161b4:	711a      	strb	r2, [r3, #4]
 80161b6:	2200      	movs	r2, #0
 80161b8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80161ba:	68fb      	ldr	r3, [r7, #12]
 80161bc:	2b00      	cmp	r3, #0
 80161be:	d006      	beq.n	80161ce <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80161c0:	68fb      	ldr	r3, [r7, #12]
 80161c2:	2200      	movs	r2, #0
 80161c4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80161c8:	711a      	strb	r2, [r3, #4]
 80161ca:	2200      	movs	r2, #0
 80161cc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80161ce:	687b      	ldr	r3, [r7, #4]
 80161d0:	2243      	movs	r2, #67	@ 0x43
 80161d2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80161d4:	4b02      	ldr	r3, [pc, #8]	@ (80161e0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80161d6:	4618      	mov	r0, r3
 80161d8:	3718      	adds	r7, #24
 80161da:	46bd      	mov	sp, r7
 80161dc:	bd80      	pop	{r7, pc}
 80161de:	bf00      	nop
 80161e0:	2400006c 	.word	0x2400006c

080161e4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80161e4:	b580      	push	{r7, lr}
 80161e6:	b086      	sub	sp, #24
 80161e8:	af00      	add	r7, sp, #0
 80161ea:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80161ec:	2182      	movs	r1, #130	@ 0x82
 80161ee:	4818      	ldr	r0, [pc, #96]	@ (8016250 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80161f0:	f000 fd17 	bl	8016c22 <USBD_GetEpDesc>
 80161f4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80161f6:	2101      	movs	r1, #1
 80161f8:	4815      	ldr	r0, [pc, #84]	@ (8016250 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80161fa:	f000 fd12 	bl	8016c22 <USBD_GetEpDesc>
 80161fe:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8016200:	2181      	movs	r1, #129	@ 0x81
 8016202:	4813      	ldr	r0, [pc, #76]	@ (8016250 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8016204:	f000 fd0d 	bl	8016c22 <USBD_GetEpDesc>
 8016208:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801620a:	697b      	ldr	r3, [r7, #20]
 801620c:	2b00      	cmp	r3, #0
 801620e:	d002      	beq.n	8016216 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8016210:	697b      	ldr	r3, [r7, #20]
 8016212:	2210      	movs	r2, #16
 8016214:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8016216:	693b      	ldr	r3, [r7, #16]
 8016218:	2b00      	cmp	r3, #0
 801621a:	d006      	beq.n	801622a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 801621c:	693b      	ldr	r3, [r7, #16]
 801621e:	2200      	movs	r2, #0
 8016220:	711a      	strb	r2, [r3, #4]
 8016222:	2200      	movs	r2, #0
 8016224:	f042 0202 	orr.w	r2, r2, #2
 8016228:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801622a:	68fb      	ldr	r3, [r7, #12]
 801622c:	2b00      	cmp	r3, #0
 801622e:	d006      	beq.n	801623e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8016230:	68fb      	ldr	r3, [r7, #12]
 8016232:	2200      	movs	r2, #0
 8016234:	711a      	strb	r2, [r3, #4]
 8016236:	2200      	movs	r2, #0
 8016238:	f042 0202 	orr.w	r2, r2, #2
 801623c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801623e:	687b      	ldr	r3, [r7, #4]
 8016240:	2243      	movs	r2, #67	@ 0x43
 8016242:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8016244:	4b02      	ldr	r3, [pc, #8]	@ (8016250 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8016246:	4618      	mov	r0, r3
 8016248:	3718      	adds	r7, #24
 801624a:	46bd      	mov	sp, r7
 801624c:	bd80      	pop	{r7, pc}
 801624e:	bf00      	nop
 8016250:	2400006c 	.word	0x2400006c

08016254 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8016254:	b580      	push	{r7, lr}
 8016256:	b086      	sub	sp, #24
 8016258:	af00      	add	r7, sp, #0
 801625a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 801625c:	2182      	movs	r1, #130	@ 0x82
 801625e:	4818      	ldr	r0, [pc, #96]	@ (80162c0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8016260:	f000 fcdf 	bl	8016c22 <USBD_GetEpDesc>
 8016264:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8016266:	2101      	movs	r1, #1
 8016268:	4815      	ldr	r0, [pc, #84]	@ (80162c0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 801626a:	f000 fcda 	bl	8016c22 <USBD_GetEpDesc>
 801626e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8016270:	2181      	movs	r1, #129	@ 0x81
 8016272:	4813      	ldr	r0, [pc, #76]	@ (80162c0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8016274:	f000 fcd5 	bl	8016c22 <USBD_GetEpDesc>
 8016278:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801627a:	697b      	ldr	r3, [r7, #20]
 801627c:	2b00      	cmp	r3, #0
 801627e:	d002      	beq.n	8016286 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8016280:	697b      	ldr	r3, [r7, #20]
 8016282:	2210      	movs	r2, #16
 8016284:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8016286:	693b      	ldr	r3, [r7, #16]
 8016288:	2b00      	cmp	r3, #0
 801628a:	d006      	beq.n	801629a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 801628c:	693b      	ldr	r3, [r7, #16]
 801628e:	2200      	movs	r2, #0
 8016290:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8016294:	711a      	strb	r2, [r3, #4]
 8016296:	2200      	movs	r2, #0
 8016298:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801629a:	68fb      	ldr	r3, [r7, #12]
 801629c:	2b00      	cmp	r3, #0
 801629e:	d006      	beq.n	80162ae <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80162a0:	68fb      	ldr	r3, [r7, #12]
 80162a2:	2200      	movs	r2, #0
 80162a4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80162a8:	711a      	strb	r2, [r3, #4]
 80162aa:	2200      	movs	r2, #0
 80162ac:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80162ae:	687b      	ldr	r3, [r7, #4]
 80162b0:	2243      	movs	r2, #67	@ 0x43
 80162b2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80162b4:	4b02      	ldr	r3, [pc, #8]	@ (80162c0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80162b6:	4618      	mov	r0, r3
 80162b8:	3718      	adds	r7, #24
 80162ba:	46bd      	mov	sp, r7
 80162bc:	bd80      	pop	{r7, pc}
 80162be:	bf00      	nop
 80162c0:	2400006c 	.word	0x2400006c

080162c4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80162c4:	b480      	push	{r7}
 80162c6:	b083      	sub	sp, #12
 80162c8:	af00      	add	r7, sp, #0
 80162ca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80162cc:	687b      	ldr	r3, [r7, #4]
 80162ce:	220a      	movs	r2, #10
 80162d0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80162d2:	4b03      	ldr	r3, [pc, #12]	@ (80162e0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80162d4:	4618      	mov	r0, r3
 80162d6:	370c      	adds	r7, #12
 80162d8:	46bd      	mov	sp, r7
 80162da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162de:	4770      	bx	lr
 80162e0:	24000028 	.word	0x24000028

080162e4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80162e4:	b480      	push	{r7}
 80162e6:	b083      	sub	sp, #12
 80162e8:	af00      	add	r7, sp, #0
 80162ea:	6078      	str	r0, [r7, #4]
 80162ec:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80162ee:	683b      	ldr	r3, [r7, #0]
 80162f0:	2b00      	cmp	r3, #0
 80162f2:	d101      	bne.n	80162f8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80162f4:	2303      	movs	r3, #3
 80162f6:	e009      	b.n	801630c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80162f8:	687b      	ldr	r3, [r7, #4]
 80162fa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80162fe:	687a      	ldr	r2, [r7, #4]
 8016300:	33b0      	adds	r3, #176	@ 0xb0
 8016302:	009b      	lsls	r3, r3, #2
 8016304:	4413      	add	r3, r2
 8016306:	683a      	ldr	r2, [r7, #0]
 8016308:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 801630a:	2300      	movs	r3, #0
}
 801630c:	4618      	mov	r0, r3
 801630e:	370c      	adds	r7, #12
 8016310:	46bd      	mov	sp, r7
 8016312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016316:	4770      	bx	lr

08016318 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8016318:	b480      	push	{r7}
 801631a:	b087      	sub	sp, #28
 801631c:	af00      	add	r7, sp, #0
 801631e:	60f8      	str	r0, [r7, #12]
 8016320:	60b9      	str	r1, [r7, #8]
 8016322:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8016324:	68fb      	ldr	r3, [r7, #12]
 8016326:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801632a:	68fb      	ldr	r3, [r7, #12]
 801632c:	32b0      	adds	r2, #176	@ 0xb0
 801632e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016332:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8016334:	697b      	ldr	r3, [r7, #20]
 8016336:	2b00      	cmp	r3, #0
 8016338:	d101      	bne.n	801633e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 801633a:	2303      	movs	r3, #3
 801633c:	e008      	b.n	8016350 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 801633e:	697b      	ldr	r3, [r7, #20]
 8016340:	68ba      	ldr	r2, [r7, #8]
 8016342:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8016346:	697b      	ldr	r3, [r7, #20]
 8016348:	687a      	ldr	r2, [r7, #4]
 801634a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 801634e:	2300      	movs	r3, #0
}
 8016350:	4618      	mov	r0, r3
 8016352:	371c      	adds	r7, #28
 8016354:	46bd      	mov	sp, r7
 8016356:	f85d 7b04 	ldr.w	r7, [sp], #4
 801635a:	4770      	bx	lr

0801635c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 801635c:	b480      	push	{r7}
 801635e:	b085      	sub	sp, #20
 8016360:	af00      	add	r7, sp, #0
 8016362:	6078      	str	r0, [r7, #4]
 8016364:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8016366:	687b      	ldr	r3, [r7, #4]
 8016368:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801636c:	687b      	ldr	r3, [r7, #4]
 801636e:	32b0      	adds	r2, #176	@ 0xb0
 8016370:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016374:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8016376:	68fb      	ldr	r3, [r7, #12]
 8016378:	2b00      	cmp	r3, #0
 801637a:	d101      	bne.n	8016380 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 801637c:	2303      	movs	r3, #3
 801637e:	e004      	b.n	801638a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8016380:	68fb      	ldr	r3, [r7, #12]
 8016382:	683a      	ldr	r2, [r7, #0]
 8016384:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8016388:	2300      	movs	r3, #0
}
 801638a:	4618      	mov	r0, r3
 801638c:	3714      	adds	r7, #20
 801638e:	46bd      	mov	sp, r7
 8016390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016394:	4770      	bx	lr
	...

08016398 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8016398:	b580      	push	{r7, lr}
 801639a:	b084      	sub	sp, #16
 801639c:	af00      	add	r7, sp, #0
 801639e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80163a0:	687b      	ldr	r3, [r7, #4]
 80163a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80163a6:	687b      	ldr	r3, [r7, #4]
 80163a8:	32b0      	adds	r2, #176	@ 0xb0
 80163aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80163ae:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 80163b0:	2301      	movs	r3, #1
 80163b2:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80163b4:	68bb      	ldr	r3, [r7, #8]
 80163b6:	2b00      	cmp	r3, #0
 80163b8:	d101      	bne.n	80163be <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80163ba:	2303      	movs	r3, #3
 80163bc:	e025      	b.n	801640a <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 80163be:	68bb      	ldr	r3, [r7, #8]
 80163c0:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80163c4:	2b00      	cmp	r3, #0
 80163c6:	d11f      	bne.n	8016408 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80163c8:	68bb      	ldr	r3, [r7, #8]
 80163ca:	2201      	movs	r2, #1
 80163cc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80163d0:	4b10      	ldr	r3, [pc, #64]	@ (8016414 <USBD_CDC_TransmitPacket+0x7c>)
 80163d2:	781b      	ldrb	r3, [r3, #0]
 80163d4:	f003 020f 	and.w	r2, r3, #15
 80163d8:	68bb      	ldr	r3, [r7, #8]
 80163da:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 80163de:	6878      	ldr	r0, [r7, #4]
 80163e0:	4613      	mov	r3, r2
 80163e2:	009b      	lsls	r3, r3, #2
 80163e4:	4413      	add	r3, r2
 80163e6:	009b      	lsls	r3, r3, #2
 80163e8:	4403      	add	r3, r0
 80163ea:	3318      	adds	r3, #24
 80163ec:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80163ee:	4b09      	ldr	r3, [pc, #36]	@ (8016414 <USBD_CDC_TransmitPacket+0x7c>)
 80163f0:	7819      	ldrb	r1, [r3, #0]
 80163f2:	68bb      	ldr	r3, [r7, #8]
 80163f4:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 80163f8:	68bb      	ldr	r3, [r7, #8]
 80163fa:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80163fe:	6878      	ldr	r0, [r7, #4]
 8016400:	f002 f83d 	bl	801847e <USBD_LL_Transmit>

    ret = USBD_OK;
 8016404:	2300      	movs	r3, #0
 8016406:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8016408:	7bfb      	ldrb	r3, [r7, #15]
}
 801640a:	4618      	mov	r0, r3
 801640c:	3710      	adds	r7, #16
 801640e:	46bd      	mov	sp, r7
 8016410:	bd80      	pop	{r7, pc}
 8016412:	bf00      	nop
 8016414:	240000af 	.word	0x240000af

08016418 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8016418:	b580      	push	{r7, lr}
 801641a:	b084      	sub	sp, #16
 801641c:	af00      	add	r7, sp, #0
 801641e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8016420:	687b      	ldr	r3, [r7, #4]
 8016422:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016426:	687b      	ldr	r3, [r7, #4]
 8016428:	32b0      	adds	r2, #176	@ 0xb0
 801642a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801642e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8016430:	687b      	ldr	r3, [r7, #4]
 8016432:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016436:	687b      	ldr	r3, [r7, #4]
 8016438:	32b0      	adds	r2, #176	@ 0xb0
 801643a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801643e:	2b00      	cmp	r3, #0
 8016440:	d101      	bne.n	8016446 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8016442:	2303      	movs	r3, #3
 8016444:	e018      	b.n	8016478 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016446:	687b      	ldr	r3, [r7, #4]
 8016448:	7c1b      	ldrb	r3, [r3, #16]
 801644a:	2b00      	cmp	r3, #0
 801644c:	d10a      	bne.n	8016464 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801644e:	4b0c      	ldr	r3, [pc, #48]	@ (8016480 <USBD_CDC_ReceivePacket+0x68>)
 8016450:	7819      	ldrb	r1, [r3, #0]
 8016452:	68fb      	ldr	r3, [r7, #12]
 8016454:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8016458:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801645c:	6878      	ldr	r0, [r7, #4]
 801645e:	f002 f82f 	bl	80184c0 <USBD_LL_PrepareReceive>
 8016462:	e008      	b.n	8016476 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8016464:	4b06      	ldr	r3, [pc, #24]	@ (8016480 <USBD_CDC_ReceivePacket+0x68>)
 8016466:	7819      	ldrb	r1, [r3, #0]
 8016468:	68fb      	ldr	r3, [r7, #12]
 801646a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 801646e:	2340      	movs	r3, #64	@ 0x40
 8016470:	6878      	ldr	r0, [r7, #4]
 8016472:	f002 f825 	bl	80184c0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8016476:	2300      	movs	r3, #0
}
 8016478:	4618      	mov	r0, r3
 801647a:	3710      	adds	r7, #16
 801647c:	46bd      	mov	sp, r7
 801647e:	bd80      	pop	{r7, pc}
 8016480:	240000b0 	.word	0x240000b0

08016484 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8016484:	b580      	push	{r7, lr}
 8016486:	b086      	sub	sp, #24
 8016488:	af00      	add	r7, sp, #0
 801648a:	60f8      	str	r0, [r7, #12]
 801648c:	60b9      	str	r1, [r7, #8]
 801648e:	4613      	mov	r3, r2
 8016490:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8016492:	68fb      	ldr	r3, [r7, #12]
 8016494:	2b00      	cmp	r3, #0
 8016496:	d101      	bne.n	801649c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8016498:	2303      	movs	r3, #3
 801649a:	e01f      	b.n	80164dc <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 801649c:	68fb      	ldr	r3, [r7, #12]
 801649e:	2200      	movs	r2, #0
 80164a0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80164a4:	68fb      	ldr	r3, [r7, #12]
 80164a6:	2200      	movs	r2, #0
 80164a8:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80164ac:	68fb      	ldr	r3, [r7, #12]
 80164ae:	2200      	movs	r2, #0
 80164b0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80164b4:	68bb      	ldr	r3, [r7, #8]
 80164b6:	2b00      	cmp	r3, #0
 80164b8:	d003      	beq.n	80164c2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80164ba:	68fb      	ldr	r3, [r7, #12]
 80164bc:	68ba      	ldr	r2, [r7, #8]
 80164be:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80164c2:	68fb      	ldr	r3, [r7, #12]
 80164c4:	2201      	movs	r2, #1
 80164c6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80164ca:	68fb      	ldr	r3, [r7, #12]
 80164cc:	79fa      	ldrb	r2, [r7, #7]
 80164ce:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80164d0:	68f8      	ldr	r0, [r7, #12]
 80164d2:	f001 fe9b 	bl	801820c <USBD_LL_Init>
 80164d6:	4603      	mov	r3, r0
 80164d8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80164da:	7dfb      	ldrb	r3, [r7, #23]
}
 80164dc:	4618      	mov	r0, r3
 80164de:	3718      	adds	r7, #24
 80164e0:	46bd      	mov	sp, r7
 80164e2:	bd80      	pop	{r7, pc}

080164e4 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80164e4:	b580      	push	{r7, lr}
 80164e6:	b084      	sub	sp, #16
 80164e8:	af00      	add	r7, sp, #0
 80164ea:	6078      	str	r0, [r7, #4]
 80164ec:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80164ee:	2300      	movs	r3, #0
 80164f0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80164f2:	683b      	ldr	r3, [r7, #0]
 80164f4:	2b00      	cmp	r3, #0
 80164f6:	d101      	bne.n	80164fc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80164f8:	2303      	movs	r3, #3
 80164fa:	e025      	b.n	8016548 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80164fc:	687b      	ldr	r3, [r7, #4]
 80164fe:	683a      	ldr	r2, [r7, #0]
 8016500:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8016504:	687b      	ldr	r3, [r7, #4]
 8016506:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801650a:	687b      	ldr	r3, [r7, #4]
 801650c:	32ae      	adds	r2, #174	@ 0xae
 801650e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016512:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016514:	2b00      	cmp	r3, #0
 8016516:	d00f      	beq.n	8016538 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8016518:	687b      	ldr	r3, [r7, #4]
 801651a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801651e:	687b      	ldr	r3, [r7, #4]
 8016520:	32ae      	adds	r2, #174	@ 0xae
 8016522:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016526:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016528:	f107 020e 	add.w	r2, r7, #14
 801652c:	4610      	mov	r0, r2
 801652e:	4798      	blx	r3
 8016530:	4602      	mov	r2, r0
 8016532:	687b      	ldr	r3, [r7, #4]
 8016534:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8016538:	687b      	ldr	r3, [r7, #4]
 801653a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 801653e:	1c5a      	adds	r2, r3, #1
 8016540:	687b      	ldr	r3, [r7, #4]
 8016542:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8016546:	2300      	movs	r3, #0
}
 8016548:	4618      	mov	r0, r3
 801654a:	3710      	adds	r7, #16
 801654c:	46bd      	mov	sp, r7
 801654e:	bd80      	pop	{r7, pc}

08016550 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8016550:	b580      	push	{r7, lr}
 8016552:	b082      	sub	sp, #8
 8016554:	af00      	add	r7, sp, #0
 8016556:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8016558:	6878      	ldr	r0, [r7, #4]
 801655a:	f001 fea7 	bl	80182ac <USBD_LL_Start>
 801655e:	4603      	mov	r3, r0
}
 8016560:	4618      	mov	r0, r3
 8016562:	3708      	adds	r7, #8
 8016564:	46bd      	mov	sp, r7
 8016566:	bd80      	pop	{r7, pc}

08016568 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8016568:	b480      	push	{r7}
 801656a:	b083      	sub	sp, #12
 801656c:	af00      	add	r7, sp, #0
 801656e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8016570:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8016572:	4618      	mov	r0, r3
 8016574:	370c      	adds	r7, #12
 8016576:	46bd      	mov	sp, r7
 8016578:	f85d 7b04 	ldr.w	r7, [sp], #4
 801657c:	4770      	bx	lr

0801657e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801657e:	b580      	push	{r7, lr}
 8016580:	b084      	sub	sp, #16
 8016582:	af00      	add	r7, sp, #0
 8016584:	6078      	str	r0, [r7, #4]
 8016586:	460b      	mov	r3, r1
 8016588:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 801658a:	2300      	movs	r3, #0
 801658c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 801658e:	687b      	ldr	r3, [r7, #4]
 8016590:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016594:	2b00      	cmp	r3, #0
 8016596:	d009      	beq.n	80165ac <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8016598:	687b      	ldr	r3, [r7, #4]
 801659a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801659e:	681b      	ldr	r3, [r3, #0]
 80165a0:	78fa      	ldrb	r2, [r7, #3]
 80165a2:	4611      	mov	r1, r2
 80165a4:	6878      	ldr	r0, [r7, #4]
 80165a6:	4798      	blx	r3
 80165a8:	4603      	mov	r3, r0
 80165aa:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80165ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80165ae:	4618      	mov	r0, r3
 80165b0:	3710      	adds	r7, #16
 80165b2:	46bd      	mov	sp, r7
 80165b4:	bd80      	pop	{r7, pc}

080165b6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80165b6:	b580      	push	{r7, lr}
 80165b8:	b084      	sub	sp, #16
 80165ba:	af00      	add	r7, sp, #0
 80165bc:	6078      	str	r0, [r7, #4]
 80165be:	460b      	mov	r3, r1
 80165c0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80165c2:	2300      	movs	r3, #0
 80165c4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80165c6:	687b      	ldr	r3, [r7, #4]
 80165c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80165cc:	685b      	ldr	r3, [r3, #4]
 80165ce:	78fa      	ldrb	r2, [r7, #3]
 80165d0:	4611      	mov	r1, r2
 80165d2:	6878      	ldr	r0, [r7, #4]
 80165d4:	4798      	blx	r3
 80165d6:	4603      	mov	r3, r0
 80165d8:	2b00      	cmp	r3, #0
 80165da:	d001      	beq.n	80165e0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80165dc:	2303      	movs	r3, #3
 80165de:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80165e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80165e2:	4618      	mov	r0, r3
 80165e4:	3710      	adds	r7, #16
 80165e6:	46bd      	mov	sp, r7
 80165e8:	bd80      	pop	{r7, pc}

080165ea <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80165ea:	b580      	push	{r7, lr}
 80165ec:	b084      	sub	sp, #16
 80165ee:	af00      	add	r7, sp, #0
 80165f0:	6078      	str	r0, [r7, #4]
 80165f2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80165f4:	687b      	ldr	r3, [r7, #4]
 80165f6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80165fa:	6839      	ldr	r1, [r7, #0]
 80165fc:	4618      	mov	r0, r3
 80165fe:	f001 f936 	bl	801786e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8016602:	687b      	ldr	r3, [r7, #4]
 8016604:	2201      	movs	r2, #1
 8016606:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 801660a:	687b      	ldr	r3, [r7, #4]
 801660c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8016610:	461a      	mov	r2, r3
 8016612:	687b      	ldr	r3, [r7, #4]
 8016614:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8016618:	687b      	ldr	r3, [r7, #4]
 801661a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 801661e:	f003 031f 	and.w	r3, r3, #31
 8016622:	2b02      	cmp	r3, #2
 8016624:	d01a      	beq.n	801665c <USBD_LL_SetupStage+0x72>
 8016626:	2b02      	cmp	r3, #2
 8016628:	d822      	bhi.n	8016670 <USBD_LL_SetupStage+0x86>
 801662a:	2b00      	cmp	r3, #0
 801662c:	d002      	beq.n	8016634 <USBD_LL_SetupStage+0x4a>
 801662e:	2b01      	cmp	r3, #1
 8016630:	d00a      	beq.n	8016648 <USBD_LL_SetupStage+0x5e>
 8016632:	e01d      	b.n	8016670 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8016634:	687b      	ldr	r3, [r7, #4]
 8016636:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 801663a:	4619      	mov	r1, r3
 801663c:	6878      	ldr	r0, [r7, #4]
 801663e:	f000 fb63 	bl	8016d08 <USBD_StdDevReq>
 8016642:	4603      	mov	r3, r0
 8016644:	73fb      	strb	r3, [r7, #15]
      break;
 8016646:	e020      	b.n	801668a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8016648:	687b      	ldr	r3, [r7, #4]
 801664a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 801664e:	4619      	mov	r1, r3
 8016650:	6878      	ldr	r0, [r7, #4]
 8016652:	f000 fbcb 	bl	8016dec <USBD_StdItfReq>
 8016656:	4603      	mov	r3, r0
 8016658:	73fb      	strb	r3, [r7, #15]
      break;
 801665a:	e016      	b.n	801668a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 801665c:	687b      	ldr	r3, [r7, #4]
 801665e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8016662:	4619      	mov	r1, r3
 8016664:	6878      	ldr	r0, [r7, #4]
 8016666:	f000 fc2d 	bl	8016ec4 <USBD_StdEPReq>
 801666a:	4603      	mov	r3, r0
 801666c:	73fb      	strb	r3, [r7, #15]
      break;
 801666e:	e00c      	b.n	801668a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8016670:	687b      	ldr	r3, [r7, #4]
 8016672:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8016676:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 801667a:	b2db      	uxtb	r3, r3
 801667c:	4619      	mov	r1, r3
 801667e:	6878      	ldr	r0, [r7, #4]
 8016680:	f001 fe74 	bl	801836c <USBD_LL_StallEP>
 8016684:	4603      	mov	r3, r0
 8016686:	73fb      	strb	r3, [r7, #15]
      break;
 8016688:	bf00      	nop
  }

  return ret;
 801668a:	7bfb      	ldrb	r3, [r7, #15]
}
 801668c:	4618      	mov	r0, r3
 801668e:	3710      	adds	r7, #16
 8016690:	46bd      	mov	sp, r7
 8016692:	bd80      	pop	{r7, pc}

08016694 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8016694:	b580      	push	{r7, lr}
 8016696:	b086      	sub	sp, #24
 8016698:	af00      	add	r7, sp, #0
 801669a:	60f8      	str	r0, [r7, #12]
 801669c:	460b      	mov	r3, r1
 801669e:	607a      	str	r2, [r7, #4]
 80166a0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80166a2:	2300      	movs	r3, #0
 80166a4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80166a6:	7afb      	ldrb	r3, [r7, #11]
 80166a8:	2b00      	cmp	r3, #0
 80166aa:	d16e      	bne.n	801678a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80166ac:	68fb      	ldr	r3, [r7, #12]
 80166ae:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80166b2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80166b4:	68fb      	ldr	r3, [r7, #12]
 80166b6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80166ba:	2b03      	cmp	r3, #3
 80166bc:	f040 8098 	bne.w	80167f0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80166c0:	693b      	ldr	r3, [r7, #16]
 80166c2:	689a      	ldr	r2, [r3, #8]
 80166c4:	693b      	ldr	r3, [r7, #16]
 80166c6:	68db      	ldr	r3, [r3, #12]
 80166c8:	429a      	cmp	r2, r3
 80166ca:	d913      	bls.n	80166f4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80166cc:	693b      	ldr	r3, [r7, #16]
 80166ce:	689a      	ldr	r2, [r3, #8]
 80166d0:	693b      	ldr	r3, [r7, #16]
 80166d2:	68db      	ldr	r3, [r3, #12]
 80166d4:	1ad2      	subs	r2, r2, r3
 80166d6:	693b      	ldr	r3, [r7, #16]
 80166d8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80166da:	693b      	ldr	r3, [r7, #16]
 80166dc:	68da      	ldr	r2, [r3, #12]
 80166de:	693b      	ldr	r3, [r7, #16]
 80166e0:	689b      	ldr	r3, [r3, #8]
 80166e2:	4293      	cmp	r3, r2
 80166e4:	bf28      	it	cs
 80166e6:	4613      	movcs	r3, r2
 80166e8:	461a      	mov	r2, r3
 80166ea:	6879      	ldr	r1, [r7, #4]
 80166ec:	68f8      	ldr	r0, [r7, #12]
 80166ee:	f001 f9be 	bl	8017a6e <USBD_CtlContinueRx>
 80166f2:	e07d      	b.n	80167f0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80166f4:	68fb      	ldr	r3, [r7, #12]
 80166f6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80166fa:	f003 031f 	and.w	r3, r3, #31
 80166fe:	2b02      	cmp	r3, #2
 8016700:	d014      	beq.n	801672c <USBD_LL_DataOutStage+0x98>
 8016702:	2b02      	cmp	r3, #2
 8016704:	d81d      	bhi.n	8016742 <USBD_LL_DataOutStage+0xae>
 8016706:	2b00      	cmp	r3, #0
 8016708:	d002      	beq.n	8016710 <USBD_LL_DataOutStage+0x7c>
 801670a:	2b01      	cmp	r3, #1
 801670c:	d003      	beq.n	8016716 <USBD_LL_DataOutStage+0x82>
 801670e:	e018      	b.n	8016742 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8016710:	2300      	movs	r3, #0
 8016712:	75bb      	strb	r3, [r7, #22]
            break;
 8016714:	e018      	b.n	8016748 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8016716:	68fb      	ldr	r3, [r7, #12]
 8016718:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 801671c:	b2db      	uxtb	r3, r3
 801671e:	4619      	mov	r1, r3
 8016720:	68f8      	ldr	r0, [r7, #12]
 8016722:	f000 fa64 	bl	8016bee <USBD_CoreFindIF>
 8016726:	4603      	mov	r3, r0
 8016728:	75bb      	strb	r3, [r7, #22]
            break;
 801672a:	e00d      	b.n	8016748 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 801672c:	68fb      	ldr	r3, [r7, #12]
 801672e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8016732:	b2db      	uxtb	r3, r3
 8016734:	4619      	mov	r1, r3
 8016736:	68f8      	ldr	r0, [r7, #12]
 8016738:	f000 fa66 	bl	8016c08 <USBD_CoreFindEP>
 801673c:	4603      	mov	r3, r0
 801673e:	75bb      	strb	r3, [r7, #22]
            break;
 8016740:	e002      	b.n	8016748 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8016742:	2300      	movs	r3, #0
 8016744:	75bb      	strb	r3, [r7, #22]
            break;
 8016746:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8016748:	7dbb      	ldrb	r3, [r7, #22]
 801674a:	2b00      	cmp	r3, #0
 801674c:	d119      	bne.n	8016782 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801674e:	68fb      	ldr	r3, [r7, #12]
 8016750:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016754:	b2db      	uxtb	r3, r3
 8016756:	2b03      	cmp	r3, #3
 8016758:	d113      	bne.n	8016782 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 801675a:	7dba      	ldrb	r2, [r7, #22]
 801675c:	68fb      	ldr	r3, [r7, #12]
 801675e:	32ae      	adds	r2, #174	@ 0xae
 8016760:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016764:	691b      	ldr	r3, [r3, #16]
 8016766:	2b00      	cmp	r3, #0
 8016768:	d00b      	beq.n	8016782 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 801676a:	7dba      	ldrb	r2, [r7, #22]
 801676c:	68fb      	ldr	r3, [r7, #12]
 801676e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8016772:	7dba      	ldrb	r2, [r7, #22]
 8016774:	68fb      	ldr	r3, [r7, #12]
 8016776:	32ae      	adds	r2, #174	@ 0xae
 8016778:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801677c:	691b      	ldr	r3, [r3, #16]
 801677e:	68f8      	ldr	r0, [r7, #12]
 8016780:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8016782:	68f8      	ldr	r0, [r7, #12]
 8016784:	f001 f984 	bl	8017a90 <USBD_CtlSendStatus>
 8016788:	e032      	b.n	80167f0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 801678a:	7afb      	ldrb	r3, [r7, #11]
 801678c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8016790:	b2db      	uxtb	r3, r3
 8016792:	4619      	mov	r1, r3
 8016794:	68f8      	ldr	r0, [r7, #12]
 8016796:	f000 fa37 	bl	8016c08 <USBD_CoreFindEP>
 801679a:	4603      	mov	r3, r0
 801679c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801679e:	7dbb      	ldrb	r3, [r7, #22]
 80167a0:	2bff      	cmp	r3, #255	@ 0xff
 80167a2:	d025      	beq.n	80167f0 <USBD_LL_DataOutStage+0x15c>
 80167a4:	7dbb      	ldrb	r3, [r7, #22]
 80167a6:	2b00      	cmp	r3, #0
 80167a8:	d122      	bne.n	80167f0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80167aa:	68fb      	ldr	r3, [r7, #12]
 80167ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80167b0:	b2db      	uxtb	r3, r3
 80167b2:	2b03      	cmp	r3, #3
 80167b4:	d117      	bne.n	80167e6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80167b6:	7dba      	ldrb	r2, [r7, #22]
 80167b8:	68fb      	ldr	r3, [r7, #12]
 80167ba:	32ae      	adds	r2, #174	@ 0xae
 80167bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80167c0:	699b      	ldr	r3, [r3, #24]
 80167c2:	2b00      	cmp	r3, #0
 80167c4:	d00f      	beq.n	80167e6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80167c6:	7dba      	ldrb	r2, [r7, #22]
 80167c8:	68fb      	ldr	r3, [r7, #12]
 80167ca:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80167ce:	7dba      	ldrb	r2, [r7, #22]
 80167d0:	68fb      	ldr	r3, [r7, #12]
 80167d2:	32ae      	adds	r2, #174	@ 0xae
 80167d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80167d8:	699b      	ldr	r3, [r3, #24]
 80167da:	7afa      	ldrb	r2, [r7, #11]
 80167dc:	4611      	mov	r1, r2
 80167de:	68f8      	ldr	r0, [r7, #12]
 80167e0:	4798      	blx	r3
 80167e2:	4603      	mov	r3, r0
 80167e4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80167e6:	7dfb      	ldrb	r3, [r7, #23]
 80167e8:	2b00      	cmp	r3, #0
 80167ea:	d001      	beq.n	80167f0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80167ec:	7dfb      	ldrb	r3, [r7, #23]
 80167ee:	e000      	b.n	80167f2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80167f0:	2300      	movs	r3, #0
}
 80167f2:	4618      	mov	r0, r3
 80167f4:	3718      	adds	r7, #24
 80167f6:	46bd      	mov	sp, r7
 80167f8:	bd80      	pop	{r7, pc}

080167fa <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80167fa:	b580      	push	{r7, lr}
 80167fc:	b086      	sub	sp, #24
 80167fe:	af00      	add	r7, sp, #0
 8016800:	60f8      	str	r0, [r7, #12]
 8016802:	460b      	mov	r3, r1
 8016804:	607a      	str	r2, [r7, #4]
 8016806:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8016808:	7afb      	ldrb	r3, [r7, #11]
 801680a:	2b00      	cmp	r3, #0
 801680c:	d16f      	bne.n	80168ee <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 801680e:	68fb      	ldr	r3, [r7, #12]
 8016810:	3314      	adds	r3, #20
 8016812:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8016814:	68fb      	ldr	r3, [r7, #12]
 8016816:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 801681a:	2b02      	cmp	r3, #2
 801681c:	d15a      	bne.n	80168d4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 801681e:	693b      	ldr	r3, [r7, #16]
 8016820:	689a      	ldr	r2, [r3, #8]
 8016822:	693b      	ldr	r3, [r7, #16]
 8016824:	68db      	ldr	r3, [r3, #12]
 8016826:	429a      	cmp	r2, r3
 8016828:	d914      	bls.n	8016854 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801682a:	693b      	ldr	r3, [r7, #16]
 801682c:	689a      	ldr	r2, [r3, #8]
 801682e:	693b      	ldr	r3, [r7, #16]
 8016830:	68db      	ldr	r3, [r3, #12]
 8016832:	1ad2      	subs	r2, r2, r3
 8016834:	693b      	ldr	r3, [r7, #16]
 8016836:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8016838:	693b      	ldr	r3, [r7, #16]
 801683a:	689b      	ldr	r3, [r3, #8]
 801683c:	461a      	mov	r2, r3
 801683e:	6879      	ldr	r1, [r7, #4]
 8016840:	68f8      	ldr	r0, [r7, #12]
 8016842:	f001 f8e6 	bl	8017a12 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8016846:	2300      	movs	r3, #0
 8016848:	2200      	movs	r2, #0
 801684a:	2100      	movs	r1, #0
 801684c:	68f8      	ldr	r0, [r7, #12]
 801684e:	f001 fe37 	bl	80184c0 <USBD_LL_PrepareReceive>
 8016852:	e03f      	b.n	80168d4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8016854:	693b      	ldr	r3, [r7, #16]
 8016856:	68da      	ldr	r2, [r3, #12]
 8016858:	693b      	ldr	r3, [r7, #16]
 801685a:	689b      	ldr	r3, [r3, #8]
 801685c:	429a      	cmp	r2, r3
 801685e:	d11c      	bne.n	801689a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8016860:	693b      	ldr	r3, [r7, #16]
 8016862:	685a      	ldr	r2, [r3, #4]
 8016864:	693b      	ldr	r3, [r7, #16]
 8016866:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8016868:	429a      	cmp	r2, r3
 801686a:	d316      	bcc.n	801689a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 801686c:	693b      	ldr	r3, [r7, #16]
 801686e:	685a      	ldr	r2, [r3, #4]
 8016870:	68fb      	ldr	r3, [r7, #12]
 8016872:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8016876:	429a      	cmp	r2, r3
 8016878:	d20f      	bcs.n	801689a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 801687a:	2200      	movs	r2, #0
 801687c:	2100      	movs	r1, #0
 801687e:	68f8      	ldr	r0, [r7, #12]
 8016880:	f001 f8c7 	bl	8017a12 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8016884:	68fb      	ldr	r3, [r7, #12]
 8016886:	2200      	movs	r2, #0
 8016888:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801688c:	2300      	movs	r3, #0
 801688e:	2200      	movs	r2, #0
 8016890:	2100      	movs	r1, #0
 8016892:	68f8      	ldr	r0, [r7, #12]
 8016894:	f001 fe14 	bl	80184c0 <USBD_LL_PrepareReceive>
 8016898:	e01c      	b.n	80168d4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801689a:	68fb      	ldr	r3, [r7, #12]
 801689c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80168a0:	b2db      	uxtb	r3, r3
 80168a2:	2b03      	cmp	r3, #3
 80168a4:	d10f      	bne.n	80168c6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80168a6:	68fb      	ldr	r3, [r7, #12]
 80168a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80168ac:	68db      	ldr	r3, [r3, #12]
 80168ae:	2b00      	cmp	r3, #0
 80168b0:	d009      	beq.n	80168c6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80168b2:	68fb      	ldr	r3, [r7, #12]
 80168b4:	2200      	movs	r2, #0
 80168b6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80168ba:	68fb      	ldr	r3, [r7, #12]
 80168bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80168c0:	68db      	ldr	r3, [r3, #12]
 80168c2:	68f8      	ldr	r0, [r7, #12]
 80168c4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80168c6:	2180      	movs	r1, #128	@ 0x80
 80168c8:	68f8      	ldr	r0, [r7, #12]
 80168ca:	f001 fd4f 	bl	801836c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80168ce:	68f8      	ldr	r0, [r7, #12]
 80168d0:	f001 f8f1 	bl	8017ab6 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80168d4:	68fb      	ldr	r3, [r7, #12]
 80168d6:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80168da:	2b00      	cmp	r3, #0
 80168dc:	d03a      	beq.n	8016954 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80168de:	68f8      	ldr	r0, [r7, #12]
 80168e0:	f7ff fe42 	bl	8016568 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80168e4:	68fb      	ldr	r3, [r7, #12]
 80168e6:	2200      	movs	r2, #0
 80168e8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80168ec:	e032      	b.n	8016954 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80168ee:	7afb      	ldrb	r3, [r7, #11]
 80168f0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80168f4:	b2db      	uxtb	r3, r3
 80168f6:	4619      	mov	r1, r3
 80168f8:	68f8      	ldr	r0, [r7, #12]
 80168fa:	f000 f985 	bl	8016c08 <USBD_CoreFindEP>
 80168fe:	4603      	mov	r3, r0
 8016900:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8016902:	7dfb      	ldrb	r3, [r7, #23]
 8016904:	2bff      	cmp	r3, #255	@ 0xff
 8016906:	d025      	beq.n	8016954 <USBD_LL_DataInStage+0x15a>
 8016908:	7dfb      	ldrb	r3, [r7, #23]
 801690a:	2b00      	cmp	r3, #0
 801690c:	d122      	bne.n	8016954 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801690e:	68fb      	ldr	r3, [r7, #12]
 8016910:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016914:	b2db      	uxtb	r3, r3
 8016916:	2b03      	cmp	r3, #3
 8016918:	d11c      	bne.n	8016954 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 801691a:	7dfa      	ldrb	r2, [r7, #23]
 801691c:	68fb      	ldr	r3, [r7, #12]
 801691e:	32ae      	adds	r2, #174	@ 0xae
 8016920:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016924:	695b      	ldr	r3, [r3, #20]
 8016926:	2b00      	cmp	r3, #0
 8016928:	d014      	beq.n	8016954 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 801692a:	7dfa      	ldrb	r2, [r7, #23]
 801692c:	68fb      	ldr	r3, [r7, #12]
 801692e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8016932:	7dfa      	ldrb	r2, [r7, #23]
 8016934:	68fb      	ldr	r3, [r7, #12]
 8016936:	32ae      	adds	r2, #174	@ 0xae
 8016938:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801693c:	695b      	ldr	r3, [r3, #20]
 801693e:	7afa      	ldrb	r2, [r7, #11]
 8016940:	4611      	mov	r1, r2
 8016942:	68f8      	ldr	r0, [r7, #12]
 8016944:	4798      	blx	r3
 8016946:	4603      	mov	r3, r0
 8016948:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 801694a:	7dbb      	ldrb	r3, [r7, #22]
 801694c:	2b00      	cmp	r3, #0
 801694e:	d001      	beq.n	8016954 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8016950:	7dbb      	ldrb	r3, [r7, #22]
 8016952:	e000      	b.n	8016956 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8016954:	2300      	movs	r3, #0
}
 8016956:	4618      	mov	r0, r3
 8016958:	3718      	adds	r7, #24
 801695a:	46bd      	mov	sp, r7
 801695c:	bd80      	pop	{r7, pc}

0801695e <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801695e:	b580      	push	{r7, lr}
 8016960:	b084      	sub	sp, #16
 8016962:	af00      	add	r7, sp, #0
 8016964:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8016966:	2300      	movs	r3, #0
 8016968:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801696a:	687b      	ldr	r3, [r7, #4]
 801696c:	2201      	movs	r2, #1
 801696e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8016972:	687b      	ldr	r3, [r7, #4]
 8016974:	2200      	movs	r2, #0
 8016976:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 801697a:	687b      	ldr	r3, [r7, #4]
 801697c:	2200      	movs	r2, #0
 801697e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8016980:	687b      	ldr	r3, [r7, #4]
 8016982:	2200      	movs	r2, #0
 8016984:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8016988:	687b      	ldr	r3, [r7, #4]
 801698a:	2200      	movs	r2, #0
 801698c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8016990:	687b      	ldr	r3, [r7, #4]
 8016992:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016996:	2b00      	cmp	r3, #0
 8016998:	d014      	beq.n	80169c4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 801699a:	687b      	ldr	r3, [r7, #4]
 801699c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80169a0:	685b      	ldr	r3, [r3, #4]
 80169a2:	2b00      	cmp	r3, #0
 80169a4:	d00e      	beq.n	80169c4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80169a6:	687b      	ldr	r3, [r7, #4]
 80169a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80169ac:	685b      	ldr	r3, [r3, #4]
 80169ae:	687a      	ldr	r2, [r7, #4]
 80169b0:	6852      	ldr	r2, [r2, #4]
 80169b2:	b2d2      	uxtb	r2, r2
 80169b4:	4611      	mov	r1, r2
 80169b6:	6878      	ldr	r0, [r7, #4]
 80169b8:	4798      	blx	r3
 80169ba:	4603      	mov	r3, r0
 80169bc:	2b00      	cmp	r3, #0
 80169be:	d001      	beq.n	80169c4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80169c0:	2303      	movs	r3, #3
 80169c2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80169c4:	2340      	movs	r3, #64	@ 0x40
 80169c6:	2200      	movs	r2, #0
 80169c8:	2100      	movs	r1, #0
 80169ca:	6878      	ldr	r0, [r7, #4]
 80169cc:	f001 fc89 	bl	80182e2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80169d0:	687b      	ldr	r3, [r7, #4]
 80169d2:	2201      	movs	r2, #1
 80169d4:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80169d8:	687b      	ldr	r3, [r7, #4]
 80169da:	2240      	movs	r2, #64	@ 0x40
 80169dc:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80169e0:	2340      	movs	r3, #64	@ 0x40
 80169e2:	2200      	movs	r2, #0
 80169e4:	2180      	movs	r1, #128	@ 0x80
 80169e6:	6878      	ldr	r0, [r7, #4]
 80169e8:	f001 fc7b 	bl	80182e2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80169ec:	687b      	ldr	r3, [r7, #4]
 80169ee:	2201      	movs	r2, #1
 80169f0:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80169f2:	687b      	ldr	r3, [r7, #4]
 80169f4:	2240      	movs	r2, #64	@ 0x40
 80169f6:	621a      	str	r2, [r3, #32]

  return ret;
 80169f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80169fa:	4618      	mov	r0, r3
 80169fc:	3710      	adds	r7, #16
 80169fe:	46bd      	mov	sp, r7
 8016a00:	bd80      	pop	{r7, pc}

08016a02 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8016a02:	b480      	push	{r7}
 8016a04:	b083      	sub	sp, #12
 8016a06:	af00      	add	r7, sp, #0
 8016a08:	6078      	str	r0, [r7, #4]
 8016a0a:	460b      	mov	r3, r1
 8016a0c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8016a0e:	687b      	ldr	r3, [r7, #4]
 8016a10:	78fa      	ldrb	r2, [r7, #3]
 8016a12:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8016a14:	2300      	movs	r3, #0
}
 8016a16:	4618      	mov	r0, r3
 8016a18:	370c      	adds	r7, #12
 8016a1a:	46bd      	mov	sp, r7
 8016a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a20:	4770      	bx	lr

08016a22 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8016a22:	b480      	push	{r7}
 8016a24:	b083      	sub	sp, #12
 8016a26:	af00      	add	r7, sp, #0
 8016a28:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8016a2a:	687b      	ldr	r3, [r7, #4]
 8016a2c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016a30:	b2db      	uxtb	r3, r3
 8016a32:	2b04      	cmp	r3, #4
 8016a34:	d006      	beq.n	8016a44 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8016a36:	687b      	ldr	r3, [r7, #4]
 8016a38:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016a3c:	b2da      	uxtb	r2, r3
 8016a3e:	687b      	ldr	r3, [r7, #4]
 8016a40:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8016a44:	687b      	ldr	r3, [r7, #4]
 8016a46:	2204      	movs	r2, #4
 8016a48:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8016a4c:	2300      	movs	r3, #0
}
 8016a4e:	4618      	mov	r0, r3
 8016a50:	370c      	adds	r7, #12
 8016a52:	46bd      	mov	sp, r7
 8016a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a58:	4770      	bx	lr

08016a5a <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8016a5a:	b480      	push	{r7}
 8016a5c:	b083      	sub	sp, #12
 8016a5e:	af00      	add	r7, sp, #0
 8016a60:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8016a62:	687b      	ldr	r3, [r7, #4]
 8016a64:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016a68:	b2db      	uxtb	r3, r3
 8016a6a:	2b04      	cmp	r3, #4
 8016a6c:	d106      	bne.n	8016a7c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8016a6e:	687b      	ldr	r3, [r7, #4]
 8016a70:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8016a74:	b2da      	uxtb	r2, r3
 8016a76:	687b      	ldr	r3, [r7, #4]
 8016a78:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8016a7c:	2300      	movs	r3, #0
}
 8016a7e:	4618      	mov	r0, r3
 8016a80:	370c      	adds	r7, #12
 8016a82:	46bd      	mov	sp, r7
 8016a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a88:	4770      	bx	lr

08016a8a <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8016a8a:	b580      	push	{r7, lr}
 8016a8c:	b082      	sub	sp, #8
 8016a8e:	af00      	add	r7, sp, #0
 8016a90:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016a92:	687b      	ldr	r3, [r7, #4]
 8016a94:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016a98:	b2db      	uxtb	r3, r3
 8016a9a:	2b03      	cmp	r3, #3
 8016a9c:	d110      	bne.n	8016ac0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8016a9e:	687b      	ldr	r3, [r7, #4]
 8016aa0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016aa4:	2b00      	cmp	r3, #0
 8016aa6:	d00b      	beq.n	8016ac0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8016aa8:	687b      	ldr	r3, [r7, #4]
 8016aaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016aae:	69db      	ldr	r3, [r3, #28]
 8016ab0:	2b00      	cmp	r3, #0
 8016ab2:	d005      	beq.n	8016ac0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8016ab4:	687b      	ldr	r3, [r7, #4]
 8016ab6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016aba:	69db      	ldr	r3, [r3, #28]
 8016abc:	6878      	ldr	r0, [r7, #4]
 8016abe:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8016ac0:	2300      	movs	r3, #0
}
 8016ac2:	4618      	mov	r0, r3
 8016ac4:	3708      	adds	r7, #8
 8016ac6:	46bd      	mov	sp, r7
 8016ac8:	bd80      	pop	{r7, pc}

08016aca <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8016aca:	b580      	push	{r7, lr}
 8016acc:	b082      	sub	sp, #8
 8016ace:	af00      	add	r7, sp, #0
 8016ad0:	6078      	str	r0, [r7, #4]
 8016ad2:	460b      	mov	r3, r1
 8016ad4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8016ad6:	687b      	ldr	r3, [r7, #4]
 8016ad8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016adc:	687b      	ldr	r3, [r7, #4]
 8016ade:	32ae      	adds	r2, #174	@ 0xae
 8016ae0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016ae4:	2b00      	cmp	r3, #0
 8016ae6:	d101      	bne.n	8016aec <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8016ae8:	2303      	movs	r3, #3
 8016aea:	e01c      	b.n	8016b26 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016aec:	687b      	ldr	r3, [r7, #4]
 8016aee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016af2:	b2db      	uxtb	r3, r3
 8016af4:	2b03      	cmp	r3, #3
 8016af6:	d115      	bne.n	8016b24 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8016af8:	687b      	ldr	r3, [r7, #4]
 8016afa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016afe:	687b      	ldr	r3, [r7, #4]
 8016b00:	32ae      	adds	r2, #174	@ 0xae
 8016b02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016b06:	6a1b      	ldr	r3, [r3, #32]
 8016b08:	2b00      	cmp	r3, #0
 8016b0a:	d00b      	beq.n	8016b24 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8016b0c:	687b      	ldr	r3, [r7, #4]
 8016b0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016b12:	687b      	ldr	r3, [r7, #4]
 8016b14:	32ae      	adds	r2, #174	@ 0xae
 8016b16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016b1a:	6a1b      	ldr	r3, [r3, #32]
 8016b1c:	78fa      	ldrb	r2, [r7, #3]
 8016b1e:	4611      	mov	r1, r2
 8016b20:	6878      	ldr	r0, [r7, #4]
 8016b22:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8016b24:	2300      	movs	r3, #0
}
 8016b26:	4618      	mov	r0, r3
 8016b28:	3708      	adds	r7, #8
 8016b2a:	46bd      	mov	sp, r7
 8016b2c:	bd80      	pop	{r7, pc}

08016b2e <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8016b2e:	b580      	push	{r7, lr}
 8016b30:	b082      	sub	sp, #8
 8016b32:	af00      	add	r7, sp, #0
 8016b34:	6078      	str	r0, [r7, #4]
 8016b36:	460b      	mov	r3, r1
 8016b38:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8016b3a:	687b      	ldr	r3, [r7, #4]
 8016b3c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016b40:	687b      	ldr	r3, [r7, #4]
 8016b42:	32ae      	adds	r2, #174	@ 0xae
 8016b44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016b48:	2b00      	cmp	r3, #0
 8016b4a:	d101      	bne.n	8016b50 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8016b4c:	2303      	movs	r3, #3
 8016b4e:	e01c      	b.n	8016b8a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016b50:	687b      	ldr	r3, [r7, #4]
 8016b52:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016b56:	b2db      	uxtb	r3, r3
 8016b58:	2b03      	cmp	r3, #3
 8016b5a:	d115      	bne.n	8016b88 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8016b5c:	687b      	ldr	r3, [r7, #4]
 8016b5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016b62:	687b      	ldr	r3, [r7, #4]
 8016b64:	32ae      	adds	r2, #174	@ 0xae
 8016b66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016b6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016b6c:	2b00      	cmp	r3, #0
 8016b6e:	d00b      	beq.n	8016b88 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8016b70:	687b      	ldr	r3, [r7, #4]
 8016b72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016b76:	687b      	ldr	r3, [r7, #4]
 8016b78:	32ae      	adds	r2, #174	@ 0xae
 8016b7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016b7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016b80:	78fa      	ldrb	r2, [r7, #3]
 8016b82:	4611      	mov	r1, r2
 8016b84:	6878      	ldr	r0, [r7, #4]
 8016b86:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8016b88:	2300      	movs	r3, #0
}
 8016b8a:	4618      	mov	r0, r3
 8016b8c:	3708      	adds	r7, #8
 8016b8e:	46bd      	mov	sp, r7
 8016b90:	bd80      	pop	{r7, pc}

08016b92 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8016b92:	b480      	push	{r7}
 8016b94:	b083      	sub	sp, #12
 8016b96:	af00      	add	r7, sp, #0
 8016b98:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8016b9a:	2300      	movs	r3, #0
}
 8016b9c:	4618      	mov	r0, r3
 8016b9e:	370c      	adds	r7, #12
 8016ba0:	46bd      	mov	sp, r7
 8016ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ba6:	4770      	bx	lr

08016ba8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8016ba8:	b580      	push	{r7, lr}
 8016baa:	b084      	sub	sp, #16
 8016bac:	af00      	add	r7, sp, #0
 8016bae:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8016bb0:	2300      	movs	r3, #0
 8016bb2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8016bb4:	687b      	ldr	r3, [r7, #4]
 8016bb6:	2201      	movs	r2, #1
 8016bb8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8016bbc:	687b      	ldr	r3, [r7, #4]
 8016bbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016bc2:	2b00      	cmp	r3, #0
 8016bc4:	d00e      	beq.n	8016be4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8016bc6:	687b      	ldr	r3, [r7, #4]
 8016bc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016bcc:	685b      	ldr	r3, [r3, #4]
 8016bce:	687a      	ldr	r2, [r7, #4]
 8016bd0:	6852      	ldr	r2, [r2, #4]
 8016bd2:	b2d2      	uxtb	r2, r2
 8016bd4:	4611      	mov	r1, r2
 8016bd6:	6878      	ldr	r0, [r7, #4]
 8016bd8:	4798      	blx	r3
 8016bda:	4603      	mov	r3, r0
 8016bdc:	2b00      	cmp	r3, #0
 8016bde:	d001      	beq.n	8016be4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8016be0:	2303      	movs	r3, #3
 8016be2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8016be4:	7bfb      	ldrb	r3, [r7, #15]
}
 8016be6:	4618      	mov	r0, r3
 8016be8:	3710      	adds	r7, #16
 8016bea:	46bd      	mov	sp, r7
 8016bec:	bd80      	pop	{r7, pc}

08016bee <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8016bee:	b480      	push	{r7}
 8016bf0:	b083      	sub	sp, #12
 8016bf2:	af00      	add	r7, sp, #0
 8016bf4:	6078      	str	r0, [r7, #4]
 8016bf6:	460b      	mov	r3, r1
 8016bf8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8016bfa:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8016bfc:	4618      	mov	r0, r3
 8016bfe:	370c      	adds	r7, #12
 8016c00:	46bd      	mov	sp, r7
 8016c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c06:	4770      	bx	lr

08016c08 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8016c08:	b480      	push	{r7}
 8016c0a:	b083      	sub	sp, #12
 8016c0c:	af00      	add	r7, sp, #0
 8016c0e:	6078      	str	r0, [r7, #4]
 8016c10:	460b      	mov	r3, r1
 8016c12:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8016c14:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8016c16:	4618      	mov	r0, r3
 8016c18:	370c      	adds	r7, #12
 8016c1a:	46bd      	mov	sp, r7
 8016c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c20:	4770      	bx	lr

08016c22 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8016c22:	b580      	push	{r7, lr}
 8016c24:	b086      	sub	sp, #24
 8016c26:	af00      	add	r7, sp, #0
 8016c28:	6078      	str	r0, [r7, #4]
 8016c2a:	460b      	mov	r3, r1
 8016c2c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8016c2e:	687b      	ldr	r3, [r7, #4]
 8016c30:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8016c32:	687b      	ldr	r3, [r7, #4]
 8016c34:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8016c36:	2300      	movs	r3, #0
 8016c38:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8016c3a:	68fb      	ldr	r3, [r7, #12]
 8016c3c:	885b      	ldrh	r3, [r3, #2]
 8016c3e:	b29b      	uxth	r3, r3
 8016c40:	68fa      	ldr	r2, [r7, #12]
 8016c42:	7812      	ldrb	r2, [r2, #0]
 8016c44:	4293      	cmp	r3, r2
 8016c46:	d91f      	bls.n	8016c88 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8016c48:	68fb      	ldr	r3, [r7, #12]
 8016c4a:	781b      	ldrb	r3, [r3, #0]
 8016c4c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8016c4e:	e013      	b.n	8016c78 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8016c50:	f107 030a 	add.w	r3, r7, #10
 8016c54:	4619      	mov	r1, r3
 8016c56:	6978      	ldr	r0, [r7, #20]
 8016c58:	f000 f81b 	bl	8016c92 <USBD_GetNextDesc>
 8016c5c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8016c5e:	697b      	ldr	r3, [r7, #20]
 8016c60:	785b      	ldrb	r3, [r3, #1]
 8016c62:	2b05      	cmp	r3, #5
 8016c64:	d108      	bne.n	8016c78 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8016c66:	697b      	ldr	r3, [r7, #20]
 8016c68:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8016c6a:	693b      	ldr	r3, [r7, #16]
 8016c6c:	789b      	ldrb	r3, [r3, #2]
 8016c6e:	78fa      	ldrb	r2, [r7, #3]
 8016c70:	429a      	cmp	r2, r3
 8016c72:	d008      	beq.n	8016c86 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8016c74:	2300      	movs	r3, #0
 8016c76:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8016c78:	68fb      	ldr	r3, [r7, #12]
 8016c7a:	885b      	ldrh	r3, [r3, #2]
 8016c7c:	b29a      	uxth	r2, r3
 8016c7e:	897b      	ldrh	r3, [r7, #10]
 8016c80:	429a      	cmp	r2, r3
 8016c82:	d8e5      	bhi.n	8016c50 <USBD_GetEpDesc+0x2e>
 8016c84:	e000      	b.n	8016c88 <USBD_GetEpDesc+0x66>
          break;
 8016c86:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8016c88:	693b      	ldr	r3, [r7, #16]
}
 8016c8a:	4618      	mov	r0, r3
 8016c8c:	3718      	adds	r7, #24
 8016c8e:	46bd      	mov	sp, r7
 8016c90:	bd80      	pop	{r7, pc}

08016c92 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8016c92:	b480      	push	{r7}
 8016c94:	b085      	sub	sp, #20
 8016c96:	af00      	add	r7, sp, #0
 8016c98:	6078      	str	r0, [r7, #4]
 8016c9a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8016c9c:	687b      	ldr	r3, [r7, #4]
 8016c9e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8016ca0:	683b      	ldr	r3, [r7, #0]
 8016ca2:	881b      	ldrh	r3, [r3, #0]
 8016ca4:	68fa      	ldr	r2, [r7, #12]
 8016ca6:	7812      	ldrb	r2, [r2, #0]
 8016ca8:	4413      	add	r3, r2
 8016caa:	b29a      	uxth	r2, r3
 8016cac:	683b      	ldr	r3, [r7, #0]
 8016cae:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8016cb0:	68fb      	ldr	r3, [r7, #12]
 8016cb2:	781b      	ldrb	r3, [r3, #0]
 8016cb4:	461a      	mov	r2, r3
 8016cb6:	687b      	ldr	r3, [r7, #4]
 8016cb8:	4413      	add	r3, r2
 8016cba:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8016cbc:	68fb      	ldr	r3, [r7, #12]
}
 8016cbe:	4618      	mov	r0, r3
 8016cc0:	3714      	adds	r7, #20
 8016cc2:	46bd      	mov	sp, r7
 8016cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cc8:	4770      	bx	lr

08016cca <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8016cca:	b480      	push	{r7}
 8016ccc:	b087      	sub	sp, #28
 8016cce:	af00      	add	r7, sp, #0
 8016cd0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8016cd2:	687b      	ldr	r3, [r7, #4]
 8016cd4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8016cd6:	697b      	ldr	r3, [r7, #20]
 8016cd8:	781b      	ldrb	r3, [r3, #0]
 8016cda:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8016cdc:	697b      	ldr	r3, [r7, #20]
 8016cde:	3301      	adds	r3, #1
 8016ce0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8016ce2:	697b      	ldr	r3, [r7, #20]
 8016ce4:	781b      	ldrb	r3, [r3, #0]
 8016ce6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8016ce8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8016cec:	021b      	lsls	r3, r3, #8
 8016cee:	b21a      	sxth	r2, r3
 8016cf0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8016cf4:	4313      	orrs	r3, r2
 8016cf6:	b21b      	sxth	r3, r3
 8016cf8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8016cfa:	89fb      	ldrh	r3, [r7, #14]
}
 8016cfc:	4618      	mov	r0, r3
 8016cfe:	371c      	adds	r7, #28
 8016d00:	46bd      	mov	sp, r7
 8016d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d06:	4770      	bx	lr

08016d08 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016d08:	b580      	push	{r7, lr}
 8016d0a:	b084      	sub	sp, #16
 8016d0c:	af00      	add	r7, sp, #0
 8016d0e:	6078      	str	r0, [r7, #4]
 8016d10:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8016d12:	2300      	movs	r3, #0
 8016d14:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8016d16:	683b      	ldr	r3, [r7, #0]
 8016d18:	781b      	ldrb	r3, [r3, #0]
 8016d1a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8016d1e:	2b40      	cmp	r3, #64	@ 0x40
 8016d20:	d005      	beq.n	8016d2e <USBD_StdDevReq+0x26>
 8016d22:	2b40      	cmp	r3, #64	@ 0x40
 8016d24:	d857      	bhi.n	8016dd6 <USBD_StdDevReq+0xce>
 8016d26:	2b00      	cmp	r3, #0
 8016d28:	d00f      	beq.n	8016d4a <USBD_StdDevReq+0x42>
 8016d2a:	2b20      	cmp	r3, #32
 8016d2c:	d153      	bne.n	8016dd6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8016d2e:	687b      	ldr	r3, [r7, #4]
 8016d30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016d34:	687b      	ldr	r3, [r7, #4]
 8016d36:	32ae      	adds	r2, #174	@ 0xae
 8016d38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016d3c:	689b      	ldr	r3, [r3, #8]
 8016d3e:	6839      	ldr	r1, [r7, #0]
 8016d40:	6878      	ldr	r0, [r7, #4]
 8016d42:	4798      	blx	r3
 8016d44:	4603      	mov	r3, r0
 8016d46:	73fb      	strb	r3, [r7, #15]
      break;
 8016d48:	e04a      	b.n	8016de0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8016d4a:	683b      	ldr	r3, [r7, #0]
 8016d4c:	785b      	ldrb	r3, [r3, #1]
 8016d4e:	2b09      	cmp	r3, #9
 8016d50:	d83b      	bhi.n	8016dca <USBD_StdDevReq+0xc2>
 8016d52:	a201      	add	r2, pc, #4	@ (adr r2, 8016d58 <USBD_StdDevReq+0x50>)
 8016d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016d58:	08016dad 	.word	0x08016dad
 8016d5c:	08016dc1 	.word	0x08016dc1
 8016d60:	08016dcb 	.word	0x08016dcb
 8016d64:	08016db7 	.word	0x08016db7
 8016d68:	08016dcb 	.word	0x08016dcb
 8016d6c:	08016d8b 	.word	0x08016d8b
 8016d70:	08016d81 	.word	0x08016d81
 8016d74:	08016dcb 	.word	0x08016dcb
 8016d78:	08016da3 	.word	0x08016da3
 8016d7c:	08016d95 	.word	0x08016d95
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8016d80:	6839      	ldr	r1, [r7, #0]
 8016d82:	6878      	ldr	r0, [r7, #4]
 8016d84:	f000 fa3c 	bl	8017200 <USBD_GetDescriptor>
          break;
 8016d88:	e024      	b.n	8016dd4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8016d8a:	6839      	ldr	r1, [r7, #0]
 8016d8c:	6878      	ldr	r0, [r7, #4]
 8016d8e:	f000 fbcb 	bl	8017528 <USBD_SetAddress>
          break;
 8016d92:	e01f      	b.n	8016dd4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8016d94:	6839      	ldr	r1, [r7, #0]
 8016d96:	6878      	ldr	r0, [r7, #4]
 8016d98:	f000 fc0a 	bl	80175b0 <USBD_SetConfig>
 8016d9c:	4603      	mov	r3, r0
 8016d9e:	73fb      	strb	r3, [r7, #15]
          break;
 8016da0:	e018      	b.n	8016dd4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8016da2:	6839      	ldr	r1, [r7, #0]
 8016da4:	6878      	ldr	r0, [r7, #4]
 8016da6:	f000 fcad 	bl	8017704 <USBD_GetConfig>
          break;
 8016daa:	e013      	b.n	8016dd4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8016dac:	6839      	ldr	r1, [r7, #0]
 8016dae:	6878      	ldr	r0, [r7, #4]
 8016db0:	f000 fcde 	bl	8017770 <USBD_GetStatus>
          break;
 8016db4:	e00e      	b.n	8016dd4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8016db6:	6839      	ldr	r1, [r7, #0]
 8016db8:	6878      	ldr	r0, [r7, #4]
 8016dba:	f000 fd0d 	bl	80177d8 <USBD_SetFeature>
          break;
 8016dbe:	e009      	b.n	8016dd4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8016dc0:	6839      	ldr	r1, [r7, #0]
 8016dc2:	6878      	ldr	r0, [r7, #4]
 8016dc4:	f000 fd31 	bl	801782a <USBD_ClrFeature>
          break;
 8016dc8:	e004      	b.n	8016dd4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8016dca:	6839      	ldr	r1, [r7, #0]
 8016dcc:	6878      	ldr	r0, [r7, #4]
 8016dce:	f000 fd88 	bl	80178e2 <USBD_CtlError>
          break;
 8016dd2:	bf00      	nop
      }
      break;
 8016dd4:	e004      	b.n	8016de0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8016dd6:	6839      	ldr	r1, [r7, #0]
 8016dd8:	6878      	ldr	r0, [r7, #4]
 8016dda:	f000 fd82 	bl	80178e2 <USBD_CtlError>
      break;
 8016dde:	bf00      	nop
  }

  return ret;
 8016de0:	7bfb      	ldrb	r3, [r7, #15]
}
 8016de2:	4618      	mov	r0, r3
 8016de4:	3710      	adds	r7, #16
 8016de6:	46bd      	mov	sp, r7
 8016de8:	bd80      	pop	{r7, pc}
 8016dea:	bf00      	nop

08016dec <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016dec:	b580      	push	{r7, lr}
 8016dee:	b084      	sub	sp, #16
 8016df0:	af00      	add	r7, sp, #0
 8016df2:	6078      	str	r0, [r7, #4]
 8016df4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8016df6:	2300      	movs	r3, #0
 8016df8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8016dfa:	683b      	ldr	r3, [r7, #0]
 8016dfc:	781b      	ldrb	r3, [r3, #0]
 8016dfe:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8016e02:	2b40      	cmp	r3, #64	@ 0x40
 8016e04:	d005      	beq.n	8016e12 <USBD_StdItfReq+0x26>
 8016e06:	2b40      	cmp	r3, #64	@ 0x40
 8016e08:	d852      	bhi.n	8016eb0 <USBD_StdItfReq+0xc4>
 8016e0a:	2b00      	cmp	r3, #0
 8016e0c:	d001      	beq.n	8016e12 <USBD_StdItfReq+0x26>
 8016e0e:	2b20      	cmp	r3, #32
 8016e10:	d14e      	bne.n	8016eb0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8016e12:	687b      	ldr	r3, [r7, #4]
 8016e14:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016e18:	b2db      	uxtb	r3, r3
 8016e1a:	3b01      	subs	r3, #1
 8016e1c:	2b02      	cmp	r3, #2
 8016e1e:	d840      	bhi.n	8016ea2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8016e20:	683b      	ldr	r3, [r7, #0]
 8016e22:	889b      	ldrh	r3, [r3, #4]
 8016e24:	b2db      	uxtb	r3, r3
 8016e26:	2b01      	cmp	r3, #1
 8016e28:	d836      	bhi.n	8016e98 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8016e2a:	683b      	ldr	r3, [r7, #0]
 8016e2c:	889b      	ldrh	r3, [r3, #4]
 8016e2e:	b2db      	uxtb	r3, r3
 8016e30:	4619      	mov	r1, r3
 8016e32:	6878      	ldr	r0, [r7, #4]
 8016e34:	f7ff fedb 	bl	8016bee <USBD_CoreFindIF>
 8016e38:	4603      	mov	r3, r0
 8016e3a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8016e3c:	7bbb      	ldrb	r3, [r7, #14]
 8016e3e:	2bff      	cmp	r3, #255	@ 0xff
 8016e40:	d01d      	beq.n	8016e7e <USBD_StdItfReq+0x92>
 8016e42:	7bbb      	ldrb	r3, [r7, #14]
 8016e44:	2b00      	cmp	r3, #0
 8016e46:	d11a      	bne.n	8016e7e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8016e48:	7bba      	ldrb	r2, [r7, #14]
 8016e4a:	687b      	ldr	r3, [r7, #4]
 8016e4c:	32ae      	adds	r2, #174	@ 0xae
 8016e4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016e52:	689b      	ldr	r3, [r3, #8]
 8016e54:	2b00      	cmp	r3, #0
 8016e56:	d00f      	beq.n	8016e78 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8016e58:	7bba      	ldrb	r2, [r7, #14]
 8016e5a:	687b      	ldr	r3, [r7, #4]
 8016e5c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8016e60:	7bba      	ldrb	r2, [r7, #14]
 8016e62:	687b      	ldr	r3, [r7, #4]
 8016e64:	32ae      	adds	r2, #174	@ 0xae
 8016e66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016e6a:	689b      	ldr	r3, [r3, #8]
 8016e6c:	6839      	ldr	r1, [r7, #0]
 8016e6e:	6878      	ldr	r0, [r7, #4]
 8016e70:	4798      	blx	r3
 8016e72:	4603      	mov	r3, r0
 8016e74:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8016e76:	e004      	b.n	8016e82 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8016e78:	2303      	movs	r3, #3
 8016e7a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8016e7c:	e001      	b.n	8016e82 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8016e7e:	2303      	movs	r3, #3
 8016e80:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8016e82:	683b      	ldr	r3, [r7, #0]
 8016e84:	88db      	ldrh	r3, [r3, #6]
 8016e86:	2b00      	cmp	r3, #0
 8016e88:	d110      	bne.n	8016eac <USBD_StdItfReq+0xc0>
 8016e8a:	7bfb      	ldrb	r3, [r7, #15]
 8016e8c:	2b00      	cmp	r3, #0
 8016e8e:	d10d      	bne.n	8016eac <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8016e90:	6878      	ldr	r0, [r7, #4]
 8016e92:	f000 fdfd 	bl	8017a90 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8016e96:	e009      	b.n	8016eac <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8016e98:	6839      	ldr	r1, [r7, #0]
 8016e9a:	6878      	ldr	r0, [r7, #4]
 8016e9c:	f000 fd21 	bl	80178e2 <USBD_CtlError>
          break;
 8016ea0:	e004      	b.n	8016eac <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8016ea2:	6839      	ldr	r1, [r7, #0]
 8016ea4:	6878      	ldr	r0, [r7, #4]
 8016ea6:	f000 fd1c 	bl	80178e2 <USBD_CtlError>
          break;
 8016eaa:	e000      	b.n	8016eae <USBD_StdItfReq+0xc2>
          break;
 8016eac:	bf00      	nop
      }
      break;
 8016eae:	e004      	b.n	8016eba <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8016eb0:	6839      	ldr	r1, [r7, #0]
 8016eb2:	6878      	ldr	r0, [r7, #4]
 8016eb4:	f000 fd15 	bl	80178e2 <USBD_CtlError>
      break;
 8016eb8:	bf00      	nop
  }

  return ret;
 8016eba:	7bfb      	ldrb	r3, [r7, #15]
}
 8016ebc:	4618      	mov	r0, r3
 8016ebe:	3710      	adds	r7, #16
 8016ec0:	46bd      	mov	sp, r7
 8016ec2:	bd80      	pop	{r7, pc}

08016ec4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016ec4:	b580      	push	{r7, lr}
 8016ec6:	b084      	sub	sp, #16
 8016ec8:	af00      	add	r7, sp, #0
 8016eca:	6078      	str	r0, [r7, #4]
 8016ecc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8016ece:	2300      	movs	r3, #0
 8016ed0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8016ed2:	683b      	ldr	r3, [r7, #0]
 8016ed4:	889b      	ldrh	r3, [r3, #4]
 8016ed6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8016ed8:	683b      	ldr	r3, [r7, #0]
 8016eda:	781b      	ldrb	r3, [r3, #0]
 8016edc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8016ee0:	2b40      	cmp	r3, #64	@ 0x40
 8016ee2:	d007      	beq.n	8016ef4 <USBD_StdEPReq+0x30>
 8016ee4:	2b40      	cmp	r3, #64	@ 0x40
 8016ee6:	f200 817f 	bhi.w	80171e8 <USBD_StdEPReq+0x324>
 8016eea:	2b00      	cmp	r3, #0
 8016eec:	d02a      	beq.n	8016f44 <USBD_StdEPReq+0x80>
 8016eee:	2b20      	cmp	r3, #32
 8016ef0:	f040 817a 	bne.w	80171e8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8016ef4:	7bbb      	ldrb	r3, [r7, #14]
 8016ef6:	4619      	mov	r1, r3
 8016ef8:	6878      	ldr	r0, [r7, #4]
 8016efa:	f7ff fe85 	bl	8016c08 <USBD_CoreFindEP>
 8016efe:	4603      	mov	r3, r0
 8016f00:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8016f02:	7b7b      	ldrb	r3, [r7, #13]
 8016f04:	2bff      	cmp	r3, #255	@ 0xff
 8016f06:	f000 8174 	beq.w	80171f2 <USBD_StdEPReq+0x32e>
 8016f0a:	7b7b      	ldrb	r3, [r7, #13]
 8016f0c:	2b00      	cmp	r3, #0
 8016f0e:	f040 8170 	bne.w	80171f2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8016f12:	7b7a      	ldrb	r2, [r7, #13]
 8016f14:	687b      	ldr	r3, [r7, #4]
 8016f16:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8016f1a:	7b7a      	ldrb	r2, [r7, #13]
 8016f1c:	687b      	ldr	r3, [r7, #4]
 8016f1e:	32ae      	adds	r2, #174	@ 0xae
 8016f20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016f24:	689b      	ldr	r3, [r3, #8]
 8016f26:	2b00      	cmp	r3, #0
 8016f28:	f000 8163 	beq.w	80171f2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8016f2c:	7b7a      	ldrb	r2, [r7, #13]
 8016f2e:	687b      	ldr	r3, [r7, #4]
 8016f30:	32ae      	adds	r2, #174	@ 0xae
 8016f32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016f36:	689b      	ldr	r3, [r3, #8]
 8016f38:	6839      	ldr	r1, [r7, #0]
 8016f3a:	6878      	ldr	r0, [r7, #4]
 8016f3c:	4798      	blx	r3
 8016f3e:	4603      	mov	r3, r0
 8016f40:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8016f42:	e156      	b.n	80171f2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8016f44:	683b      	ldr	r3, [r7, #0]
 8016f46:	785b      	ldrb	r3, [r3, #1]
 8016f48:	2b03      	cmp	r3, #3
 8016f4a:	d008      	beq.n	8016f5e <USBD_StdEPReq+0x9a>
 8016f4c:	2b03      	cmp	r3, #3
 8016f4e:	f300 8145 	bgt.w	80171dc <USBD_StdEPReq+0x318>
 8016f52:	2b00      	cmp	r3, #0
 8016f54:	f000 809b 	beq.w	801708e <USBD_StdEPReq+0x1ca>
 8016f58:	2b01      	cmp	r3, #1
 8016f5a:	d03c      	beq.n	8016fd6 <USBD_StdEPReq+0x112>
 8016f5c:	e13e      	b.n	80171dc <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8016f5e:	687b      	ldr	r3, [r7, #4]
 8016f60:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016f64:	b2db      	uxtb	r3, r3
 8016f66:	2b02      	cmp	r3, #2
 8016f68:	d002      	beq.n	8016f70 <USBD_StdEPReq+0xac>
 8016f6a:	2b03      	cmp	r3, #3
 8016f6c:	d016      	beq.n	8016f9c <USBD_StdEPReq+0xd8>
 8016f6e:	e02c      	b.n	8016fca <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8016f70:	7bbb      	ldrb	r3, [r7, #14]
 8016f72:	2b00      	cmp	r3, #0
 8016f74:	d00d      	beq.n	8016f92 <USBD_StdEPReq+0xce>
 8016f76:	7bbb      	ldrb	r3, [r7, #14]
 8016f78:	2b80      	cmp	r3, #128	@ 0x80
 8016f7a:	d00a      	beq.n	8016f92 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8016f7c:	7bbb      	ldrb	r3, [r7, #14]
 8016f7e:	4619      	mov	r1, r3
 8016f80:	6878      	ldr	r0, [r7, #4]
 8016f82:	f001 f9f3 	bl	801836c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8016f86:	2180      	movs	r1, #128	@ 0x80
 8016f88:	6878      	ldr	r0, [r7, #4]
 8016f8a:	f001 f9ef 	bl	801836c <USBD_LL_StallEP>
 8016f8e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8016f90:	e020      	b.n	8016fd4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8016f92:	6839      	ldr	r1, [r7, #0]
 8016f94:	6878      	ldr	r0, [r7, #4]
 8016f96:	f000 fca4 	bl	80178e2 <USBD_CtlError>
              break;
 8016f9a:	e01b      	b.n	8016fd4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8016f9c:	683b      	ldr	r3, [r7, #0]
 8016f9e:	885b      	ldrh	r3, [r3, #2]
 8016fa0:	2b00      	cmp	r3, #0
 8016fa2:	d10e      	bne.n	8016fc2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8016fa4:	7bbb      	ldrb	r3, [r7, #14]
 8016fa6:	2b00      	cmp	r3, #0
 8016fa8:	d00b      	beq.n	8016fc2 <USBD_StdEPReq+0xfe>
 8016faa:	7bbb      	ldrb	r3, [r7, #14]
 8016fac:	2b80      	cmp	r3, #128	@ 0x80
 8016fae:	d008      	beq.n	8016fc2 <USBD_StdEPReq+0xfe>
 8016fb0:	683b      	ldr	r3, [r7, #0]
 8016fb2:	88db      	ldrh	r3, [r3, #6]
 8016fb4:	2b00      	cmp	r3, #0
 8016fb6:	d104      	bne.n	8016fc2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8016fb8:	7bbb      	ldrb	r3, [r7, #14]
 8016fba:	4619      	mov	r1, r3
 8016fbc:	6878      	ldr	r0, [r7, #4]
 8016fbe:	f001 f9d5 	bl	801836c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8016fc2:	6878      	ldr	r0, [r7, #4]
 8016fc4:	f000 fd64 	bl	8017a90 <USBD_CtlSendStatus>

              break;
 8016fc8:	e004      	b.n	8016fd4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8016fca:	6839      	ldr	r1, [r7, #0]
 8016fcc:	6878      	ldr	r0, [r7, #4]
 8016fce:	f000 fc88 	bl	80178e2 <USBD_CtlError>
              break;
 8016fd2:	bf00      	nop
          }
          break;
 8016fd4:	e107      	b.n	80171e6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8016fd6:	687b      	ldr	r3, [r7, #4]
 8016fd8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016fdc:	b2db      	uxtb	r3, r3
 8016fde:	2b02      	cmp	r3, #2
 8016fe0:	d002      	beq.n	8016fe8 <USBD_StdEPReq+0x124>
 8016fe2:	2b03      	cmp	r3, #3
 8016fe4:	d016      	beq.n	8017014 <USBD_StdEPReq+0x150>
 8016fe6:	e04b      	b.n	8017080 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8016fe8:	7bbb      	ldrb	r3, [r7, #14]
 8016fea:	2b00      	cmp	r3, #0
 8016fec:	d00d      	beq.n	801700a <USBD_StdEPReq+0x146>
 8016fee:	7bbb      	ldrb	r3, [r7, #14]
 8016ff0:	2b80      	cmp	r3, #128	@ 0x80
 8016ff2:	d00a      	beq.n	801700a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8016ff4:	7bbb      	ldrb	r3, [r7, #14]
 8016ff6:	4619      	mov	r1, r3
 8016ff8:	6878      	ldr	r0, [r7, #4]
 8016ffa:	f001 f9b7 	bl	801836c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8016ffe:	2180      	movs	r1, #128	@ 0x80
 8017000:	6878      	ldr	r0, [r7, #4]
 8017002:	f001 f9b3 	bl	801836c <USBD_LL_StallEP>
 8017006:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8017008:	e040      	b.n	801708c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 801700a:	6839      	ldr	r1, [r7, #0]
 801700c:	6878      	ldr	r0, [r7, #4]
 801700e:	f000 fc68 	bl	80178e2 <USBD_CtlError>
              break;
 8017012:	e03b      	b.n	801708c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8017014:	683b      	ldr	r3, [r7, #0]
 8017016:	885b      	ldrh	r3, [r3, #2]
 8017018:	2b00      	cmp	r3, #0
 801701a:	d136      	bne.n	801708a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 801701c:	7bbb      	ldrb	r3, [r7, #14]
 801701e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8017022:	2b00      	cmp	r3, #0
 8017024:	d004      	beq.n	8017030 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8017026:	7bbb      	ldrb	r3, [r7, #14]
 8017028:	4619      	mov	r1, r3
 801702a:	6878      	ldr	r0, [r7, #4]
 801702c:	f001 f9bd 	bl	80183aa <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8017030:	6878      	ldr	r0, [r7, #4]
 8017032:	f000 fd2d 	bl	8017a90 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8017036:	7bbb      	ldrb	r3, [r7, #14]
 8017038:	4619      	mov	r1, r3
 801703a:	6878      	ldr	r0, [r7, #4]
 801703c:	f7ff fde4 	bl	8016c08 <USBD_CoreFindEP>
 8017040:	4603      	mov	r3, r0
 8017042:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8017044:	7b7b      	ldrb	r3, [r7, #13]
 8017046:	2bff      	cmp	r3, #255	@ 0xff
 8017048:	d01f      	beq.n	801708a <USBD_StdEPReq+0x1c6>
 801704a:	7b7b      	ldrb	r3, [r7, #13]
 801704c:	2b00      	cmp	r3, #0
 801704e:	d11c      	bne.n	801708a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8017050:	7b7a      	ldrb	r2, [r7, #13]
 8017052:	687b      	ldr	r3, [r7, #4]
 8017054:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8017058:	7b7a      	ldrb	r2, [r7, #13]
 801705a:	687b      	ldr	r3, [r7, #4]
 801705c:	32ae      	adds	r2, #174	@ 0xae
 801705e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017062:	689b      	ldr	r3, [r3, #8]
 8017064:	2b00      	cmp	r3, #0
 8017066:	d010      	beq.n	801708a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8017068:	7b7a      	ldrb	r2, [r7, #13]
 801706a:	687b      	ldr	r3, [r7, #4]
 801706c:	32ae      	adds	r2, #174	@ 0xae
 801706e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017072:	689b      	ldr	r3, [r3, #8]
 8017074:	6839      	ldr	r1, [r7, #0]
 8017076:	6878      	ldr	r0, [r7, #4]
 8017078:	4798      	blx	r3
 801707a:	4603      	mov	r3, r0
 801707c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 801707e:	e004      	b.n	801708a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8017080:	6839      	ldr	r1, [r7, #0]
 8017082:	6878      	ldr	r0, [r7, #4]
 8017084:	f000 fc2d 	bl	80178e2 <USBD_CtlError>
              break;
 8017088:	e000      	b.n	801708c <USBD_StdEPReq+0x1c8>
              break;
 801708a:	bf00      	nop
          }
          break;
 801708c:	e0ab      	b.n	80171e6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801708e:	687b      	ldr	r3, [r7, #4]
 8017090:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017094:	b2db      	uxtb	r3, r3
 8017096:	2b02      	cmp	r3, #2
 8017098:	d002      	beq.n	80170a0 <USBD_StdEPReq+0x1dc>
 801709a:	2b03      	cmp	r3, #3
 801709c:	d032      	beq.n	8017104 <USBD_StdEPReq+0x240>
 801709e:	e097      	b.n	80171d0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80170a0:	7bbb      	ldrb	r3, [r7, #14]
 80170a2:	2b00      	cmp	r3, #0
 80170a4:	d007      	beq.n	80170b6 <USBD_StdEPReq+0x1f2>
 80170a6:	7bbb      	ldrb	r3, [r7, #14]
 80170a8:	2b80      	cmp	r3, #128	@ 0x80
 80170aa:	d004      	beq.n	80170b6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80170ac:	6839      	ldr	r1, [r7, #0]
 80170ae:	6878      	ldr	r0, [r7, #4]
 80170b0:	f000 fc17 	bl	80178e2 <USBD_CtlError>
                break;
 80170b4:	e091      	b.n	80171da <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80170b6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80170ba:	2b00      	cmp	r3, #0
 80170bc:	da0b      	bge.n	80170d6 <USBD_StdEPReq+0x212>
 80170be:	7bbb      	ldrb	r3, [r7, #14]
 80170c0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80170c4:	4613      	mov	r3, r2
 80170c6:	009b      	lsls	r3, r3, #2
 80170c8:	4413      	add	r3, r2
 80170ca:	009b      	lsls	r3, r3, #2
 80170cc:	3310      	adds	r3, #16
 80170ce:	687a      	ldr	r2, [r7, #4]
 80170d0:	4413      	add	r3, r2
 80170d2:	3304      	adds	r3, #4
 80170d4:	e00b      	b.n	80170ee <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80170d6:	7bbb      	ldrb	r3, [r7, #14]
 80170d8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80170dc:	4613      	mov	r3, r2
 80170de:	009b      	lsls	r3, r3, #2
 80170e0:	4413      	add	r3, r2
 80170e2:	009b      	lsls	r3, r3, #2
 80170e4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80170e8:	687a      	ldr	r2, [r7, #4]
 80170ea:	4413      	add	r3, r2
 80170ec:	3304      	adds	r3, #4
 80170ee:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80170f0:	68bb      	ldr	r3, [r7, #8]
 80170f2:	2200      	movs	r2, #0
 80170f4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80170f6:	68bb      	ldr	r3, [r7, #8]
 80170f8:	2202      	movs	r2, #2
 80170fa:	4619      	mov	r1, r3
 80170fc:	6878      	ldr	r0, [r7, #4]
 80170fe:	f000 fc6d 	bl	80179dc <USBD_CtlSendData>
              break;
 8017102:	e06a      	b.n	80171da <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8017104:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8017108:	2b00      	cmp	r3, #0
 801710a:	da11      	bge.n	8017130 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801710c:	7bbb      	ldrb	r3, [r7, #14]
 801710e:	f003 020f 	and.w	r2, r3, #15
 8017112:	6879      	ldr	r1, [r7, #4]
 8017114:	4613      	mov	r3, r2
 8017116:	009b      	lsls	r3, r3, #2
 8017118:	4413      	add	r3, r2
 801711a:	009b      	lsls	r3, r3, #2
 801711c:	440b      	add	r3, r1
 801711e:	3324      	adds	r3, #36	@ 0x24
 8017120:	881b      	ldrh	r3, [r3, #0]
 8017122:	2b00      	cmp	r3, #0
 8017124:	d117      	bne.n	8017156 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8017126:	6839      	ldr	r1, [r7, #0]
 8017128:	6878      	ldr	r0, [r7, #4]
 801712a:	f000 fbda 	bl	80178e2 <USBD_CtlError>
                  break;
 801712e:	e054      	b.n	80171da <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8017130:	7bbb      	ldrb	r3, [r7, #14]
 8017132:	f003 020f 	and.w	r2, r3, #15
 8017136:	6879      	ldr	r1, [r7, #4]
 8017138:	4613      	mov	r3, r2
 801713a:	009b      	lsls	r3, r3, #2
 801713c:	4413      	add	r3, r2
 801713e:	009b      	lsls	r3, r3, #2
 8017140:	440b      	add	r3, r1
 8017142:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8017146:	881b      	ldrh	r3, [r3, #0]
 8017148:	2b00      	cmp	r3, #0
 801714a:	d104      	bne.n	8017156 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 801714c:	6839      	ldr	r1, [r7, #0]
 801714e:	6878      	ldr	r0, [r7, #4]
 8017150:	f000 fbc7 	bl	80178e2 <USBD_CtlError>
                  break;
 8017154:	e041      	b.n	80171da <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8017156:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801715a:	2b00      	cmp	r3, #0
 801715c:	da0b      	bge.n	8017176 <USBD_StdEPReq+0x2b2>
 801715e:	7bbb      	ldrb	r3, [r7, #14]
 8017160:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8017164:	4613      	mov	r3, r2
 8017166:	009b      	lsls	r3, r3, #2
 8017168:	4413      	add	r3, r2
 801716a:	009b      	lsls	r3, r3, #2
 801716c:	3310      	adds	r3, #16
 801716e:	687a      	ldr	r2, [r7, #4]
 8017170:	4413      	add	r3, r2
 8017172:	3304      	adds	r3, #4
 8017174:	e00b      	b.n	801718e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8017176:	7bbb      	ldrb	r3, [r7, #14]
 8017178:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801717c:	4613      	mov	r3, r2
 801717e:	009b      	lsls	r3, r3, #2
 8017180:	4413      	add	r3, r2
 8017182:	009b      	lsls	r3, r3, #2
 8017184:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8017188:	687a      	ldr	r2, [r7, #4]
 801718a:	4413      	add	r3, r2
 801718c:	3304      	adds	r3, #4
 801718e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8017190:	7bbb      	ldrb	r3, [r7, #14]
 8017192:	2b00      	cmp	r3, #0
 8017194:	d002      	beq.n	801719c <USBD_StdEPReq+0x2d8>
 8017196:	7bbb      	ldrb	r3, [r7, #14]
 8017198:	2b80      	cmp	r3, #128	@ 0x80
 801719a:	d103      	bne.n	80171a4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 801719c:	68bb      	ldr	r3, [r7, #8]
 801719e:	2200      	movs	r2, #0
 80171a0:	601a      	str	r2, [r3, #0]
 80171a2:	e00e      	b.n	80171c2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80171a4:	7bbb      	ldrb	r3, [r7, #14]
 80171a6:	4619      	mov	r1, r3
 80171a8:	6878      	ldr	r0, [r7, #4]
 80171aa:	f001 f91d 	bl	80183e8 <USBD_LL_IsStallEP>
 80171ae:	4603      	mov	r3, r0
 80171b0:	2b00      	cmp	r3, #0
 80171b2:	d003      	beq.n	80171bc <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80171b4:	68bb      	ldr	r3, [r7, #8]
 80171b6:	2201      	movs	r2, #1
 80171b8:	601a      	str	r2, [r3, #0]
 80171ba:	e002      	b.n	80171c2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80171bc:	68bb      	ldr	r3, [r7, #8]
 80171be:	2200      	movs	r2, #0
 80171c0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80171c2:	68bb      	ldr	r3, [r7, #8]
 80171c4:	2202      	movs	r2, #2
 80171c6:	4619      	mov	r1, r3
 80171c8:	6878      	ldr	r0, [r7, #4]
 80171ca:	f000 fc07 	bl	80179dc <USBD_CtlSendData>
              break;
 80171ce:	e004      	b.n	80171da <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80171d0:	6839      	ldr	r1, [r7, #0]
 80171d2:	6878      	ldr	r0, [r7, #4]
 80171d4:	f000 fb85 	bl	80178e2 <USBD_CtlError>
              break;
 80171d8:	bf00      	nop
          }
          break;
 80171da:	e004      	b.n	80171e6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80171dc:	6839      	ldr	r1, [r7, #0]
 80171de:	6878      	ldr	r0, [r7, #4]
 80171e0:	f000 fb7f 	bl	80178e2 <USBD_CtlError>
          break;
 80171e4:	bf00      	nop
      }
      break;
 80171e6:	e005      	b.n	80171f4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80171e8:	6839      	ldr	r1, [r7, #0]
 80171ea:	6878      	ldr	r0, [r7, #4]
 80171ec:	f000 fb79 	bl	80178e2 <USBD_CtlError>
      break;
 80171f0:	e000      	b.n	80171f4 <USBD_StdEPReq+0x330>
      break;
 80171f2:	bf00      	nop
  }

  return ret;
 80171f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80171f6:	4618      	mov	r0, r3
 80171f8:	3710      	adds	r7, #16
 80171fa:	46bd      	mov	sp, r7
 80171fc:	bd80      	pop	{r7, pc}
	...

08017200 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017200:	b580      	push	{r7, lr}
 8017202:	b084      	sub	sp, #16
 8017204:	af00      	add	r7, sp, #0
 8017206:	6078      	str	r0, [r7, #4]
 8017208:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801720a:	2300      	movs	r3, #0
 801720c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 801720e:	2300      	movs	r3, #0
 8017210:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8017212:	2300      	movs	r3, #0
 8017214:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8017216:	683b      	ldr	r3, [r7, #0]
 8017218:	885b      	ldrh	r3, [r3, #2]
 801721a:	0a1b      	lsrs	r3, r3, #8
 801721c:	b29b      	uxth	r3, r3
 801721e:	3b01      	subs	r3, #1
 8017220:	2b0e      	cmp	r3, #14
 8017222:	f200 8152 	bhi.w	80174ca <USBD_GetDescriptor+0x2ca>
 8017226:	a201      	add	r2, pc, #4	@ (adr r2, 801722c <USBD_GetDescriptor+0x2c>)
 8017228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801722c:	0801729d 	.word	0x0801729d
 8017230:	080172b5 	.word	0x080172b5
 8017234:	080172f5 	.word	0x080172f5
 8017238:	080174cb 	.word	0x080174cb
 801723c:	080174cb 	.word	0x080174cb
 8017240:	0801746b 	.word	0x0801746b
 8017244:	08017497 	.word	0x08017497
 8017248:	080174cb 	.word	0x080174cb
 801724c:	080174cb 	.word	0x080174cb
 8017250:	080174cb 	.word	0x080174cb
 8017254:	080174cb 	.word	0x080174cb
 8017258:	080174cb 	.word	0x080174cb
 801725c:	080174cb 	.word	0x080174cb
 8017260:	080174cb 	.word	0x080174cb
 8017264:	08017269 	.word	0x08017269
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8017268:	687b      	ldr	r3, [r7, #4]
 801726a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801726e:	69db      	ldr	r3, [r3, #28]
 8017270:	2b00      	cmp	r3, #0
 8017272:	d00b      	beq.n	801728c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8017274:	687b      	ldr	r3, [r7, #4]
 8017276:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801727a:	69db      	ldr	r3, [r3, #28]
 801727c:	687a      	ldr	r2, [r7, #4]
 801727e:	7c12      	ldrb	r2, [r2, #16]
 8017280:	f107 0108 	add.w	r1, r7, #8
 8017284:	4610      	mov	r0, r2
 8017286:	4798      	blx	r3
 8017288:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801728a:	e126      	b.n	80174da <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 801728c:	6839      	ldr	r1, [r7, #0]
 801728e:	6878      	ldr	r0, [r7, #4]
 8017290:	f000 fb27 	bl	80178e2 <USBD_CtlError>
        err++;
 8017294:	7afb      	ldrb	r3, [r7, #11]
 8017296:	3301      	adds	r3, #1
 8017298:	72fb      	strb	r3, [r7, #11]
      break;
 801729a:	e11e      	b.n	80174da <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 801729c:	687b      	ldr	r3, [r7, #4]
 801729e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80172a2:	681b      	ldr	r3, [r3, #0]
 80172a4:	687a      	ldr	r2, [r7, #4]
 80172a6:	7c12      	ldrb	r2, [r2, #16]
 80172a8:	f107 0108 	add.w	r1, r7, #8
 80172ac:	4610      	mov	r0, r2
 80172ae:	4798      	blx	r3
 80172b0:	60f8      	str	r0, [r7, #12]
      break;
 80172b2:	e112      	b.n	80174da <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80172b4:	687b      	ldr	r3, [r7, #4]
 80172b6:	7c1b      	ldrb	r3, [r3, #16]
 80172b8:	2b00      	cmp	r3, #0
 80172ba:	d10d      	bne.n	80172d8 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80172bc:	687b      	ldr	r3, [r7, #4]
 80172be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80172c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80172c4:	f107 0208 	add.w	r2, r7, #8
 80172c8:	4610      	mov	r0, r2
 80172ca:	4798      	blx	r3
 80172cc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80172ce:	68fb      	ldr	r3, [r7, #12]
 80172d0:	3301      	adds	r3, #1
 80172d2:	2202      	movs	r2, #2
 80172d4:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80172d6:	e100      	b.n	80174da <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80172d8:	687b      	ldr	r3, [r7, #4]
 80172da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80172de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80172e0:	f107 0208 	add.w	r2, r7, #8
 80172e4:	4610      	mov	r0, r2
 80172e6:	4798      	blx	r3
 80172e8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80172ea:	68fb      	ldr	r3, [r7, #12]
 80172ec:	3301      	adds	r3, #1
 80172ee:	2202      	movs	r2, #2
 80172f0:	701a      	strb	r2, [r3, #0]
      break;
 80172f2:	e0f2      	b.n	80174da <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80172f4:	683b      	ldr	r3, [r7, #0]
 80172f6:	885b      	ldrh	r3, [r3, #2]
 80172f8:	b2db      	uxtb	r3, r3
 80172fa:	2b05      	cmp	r3, #5
 80172fc:	f200 80ac 	bhi.w	8017458 <USBD_GetDescriptor+0x258>
 8017300:	a201      	add	r2, pc, #4	@ (adr r2, 8017308 <USBD_GetDescriptor+0x108>)
 8017302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017306:	bf00      	nop
 8017308:	08017321 	.word	0x08017321
 801730c:	08017355 	.word	0x08017355
 8017310:	08017389 	.word	0x08017389
 8017314:	080173bd 	.word	0x080173bd
 8017318:	080173f1 	.word	0x080173f1
 801731c:	08017425 	.word	0x08017425
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8017320:	687b      	ldr	r3, [r7, #4]
 8017322:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8017326:	685b      	ldr	r3, [r3, #4]
 8017328:	2b00      	cmp	r3, #0
 801732a:	d00b      	beq.n	8017344 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 801732c:	687b      	ldr	r3, [r7, #4]
 801732e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8017332:	685b      	ldr	r3, [r3, #4]
 8017334:	687a      	ldr	r2, [r7, #4]
 8017336:	7c12      	ldrb	r2, [r2, #16]
 8017338:	f107 0108 	add.w	r1, r7, #8
 801733c:	4610      	mov	r0, r2
 801733e:	4798      	blx	r3
 8017340:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8017342:	e091      	b.n	8017468 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8017344:	6839      	ldr	r1, [r7, #0]
 8017346:	6878      	ldr	r0, [r7, #4]
 8017348:	f000 facb 	bl	80178e2 <USBD_CtlError>
            err++;
 801734c:	7afb      	ldrb	r3, [r7, #11]
 801734e:	3301      	adds	r3, #1
 8017350:	72fb      	strb	r3, [r7, #11]
          break;
 8017352:	e089      	b.n	8017468 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8017354:	687b      	ldr	r3, [r7, #4]
 8017356:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801735a:	689b      	ldr	r3, [r3, #8]
 801735c:	2b00      	cmp	r3, #0
 801735e:	d00b      	beq.n	8017378 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8017360:	687b      	ldr	r3, [r7, #4]
 8017362:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8017366:	689b      	ldr	r3, [r3, #8]
 8017368:	687a      	ldr	r2, [r7, #4]
 801736a:	7c12      	ldrb	r2, [r2, #16]
 801736c:	f107 0108 	add.w	r1, r7, #8
 8017370:	4610      	mov	r0, r2
 8017372:	4798      	blx	r3
 8017374:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8017376:	e077      	b.n	8017468 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8017378:	6839      	ldr	r1, [r7, #0]
 801737a:	6878      	ldr	r0, [r7, #4]
 801737c:	f000 fab1 	bl	80178e2 <USBD_CtlError>
            err++;
 8017380:	7afb      	ldrb	r3, [r7, #11]
 8017382:	3301      	adds	r3, #1
 8017384:	72fb      	strb	r3, [r7, #11]
          break;
 8017386:	e06f      	b.n	8017468 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8017388:	687b      	ldr	r3, [r7, #4]
 801738a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801738e:	68db      	ldr	r3, [r3, #12]
 8017390:	2b00      	cmp	r3, #0
 8017392:	d00b      	beq.n	80173ac <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8017394:	687b      	ldr	r3, [r7, #4]
 8017396:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801739a:	68db      	ldr	r3, [r3, #12]
 801739c:	687a      	ldr	r2, [r7, #4]
 801739e:	7c12      	ldrb	r2, [r2, #16]
 80173a0:	f107 0108 	add.w	r1, r7, #8
 80173a4:	4610      	mov	r0, r2
 80173a6:	4798      	blx	r3
 80173a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80173aa:	e05d      	b.n	8017468 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80173ac:	6839      	ldr	r1, [r7, #0]
 80173ae:	6878      	ldr	r0, [r7, #4]
 80173b0:	f000 fa97 	bl	80178e2 <USBD_CtlError>
            err++;
 80173b4:	7afb      	ldrb	r3, [r7, #11]
 80173b6:	3301      	adds	r3, #1
 80173b8:	72fb      	strb	r3, [r7, #11]
          break;
 80173ba:	e055      	b.n	8017468 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80173bc:	687b      	ldr	r3, [r7, #4]
 80173be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80173c2:	691b      	ldr	r3, [r3, #16]
 80173c4:	2b00      	cmp	r3, #0
 80173c6:	d00b      	beq.n	80173e0 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80173c8:	687b      	ldr	r3, [r7, #4]
 80173ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80173ce:	691b      	ldr	r3, [r3, #16]
 80173d0:	687a      	ldr	r2, [r7, #4]
 80173d2:	7c12      	ldrb	r2, [r2, #16]
 80173d4:	f107 0108 	add.w	r1, r7, #8
 80173d8:	4610      	mov	r0, r2
 80173da:	4798      	blx	r3
 80173dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80173de:	e043      	b.n	8017468 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80173e0:	6839      	ldr	r1, [r7, #0]
 80173e2:	6878      	ldr	r0, [r7, #4]
 80173e4:	f000 fa7d 	bl	80178e2 <USBD_CtlError>
            err++;
 80173e8:	7afb      	ldrb	r3, [r7, #11]
 80173ea:	3301      	adds	r3, #1
 80173ec:	72fb      	strb	r3, [r7, #11]
          break;
 80173ee:	e03b      	b.n	8017468 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80173f0:	687b      	ldr	r3, [r7, #4]
 80173f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80173f6:	695b      	ldr	r3, [r3, #20]
 80173f8:	2b00      	cmp	r3, #0
 80173fa:	d00b      	beq.n	8017414 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80173fc:	687b      	ldr	r3, [r7, #4]
 80173fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8017402:	695b      	ldr	r3, [r3, #20]
 8017404:	687a      	ldr	r2, [r7, #4]
 8017406:	7c12      	ldrb	r2, [r2, #16]
 8017408:	f107 0108 	add.w	r1, r7, #8
 801740c:	4610      	mov	r0, r2
 801740e:	4798      	blx	r3
 8017410:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8017412:	e029      	b.n	8017468 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8017414:	6839      	ldr	r1, [r7, #0]
 8017416:	6878      	ldr	r0, [r7, #4]
 8017418:	f000 fa63 	bl	80178e2 <USBD_CtlError>
            err++;
 801741c:	7afb      	ldrb	r3, [r7, #11]
 801741e:	3301      	adds	r3, #1
 8017420:	72fb      	strb	r3, [r7, #11]
          break;
 8017422:	e021      	b.n	8017468 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8017424:	687b      	ldr	r3, [r7, #4]
 8017426:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801742a:	699b      	ldr	r3, [r3, #24]
 801742c:	2b00      	cmp	r3, #0
 801742e:	d00b      	beq.n	8017448 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8017430:	687b      	ldr	r3, [r7, #4]
 8017432:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8017436:	699b      	ldr	r3, [r3, #24]
 8017438:	687a      	ldr	r2, [r7, #4]
 801743a:	7c12      	ldrb	r2, [r2, #16]
 801743c:	f107 0108 	add.w	r1, r7, #8
 8017440:	4610      	mov	r0, r2
 8017442:	4798      	blx	r3
 8017444:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8017446:	e00f      	b.n	8017468 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8017448:	6839      	ldr	r1, [r7, #0]
 801744a:	6878      	ldr	r0, [r7, #4]
 801744c:	f000 fa49 	bl	80178e2 <USBD_CtlError>
            err++;
 8017450:	7afb      	ldrb	r3, [r7, #11]
 8017452:	3301      	adds	r3, #1
 8017454:	72fb      	strb	r3, [r7, #11]
          break;
 8017456:	e007      	b.n	8017468 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8017458:	6839      	ldr	r1, [r7, #0]
 801745a:	6878      	ldr	r0, [r7, #4]
 801745c:	f000 fa41 	bl	80178e2 <USBD_CtlError>
          err++;
 8017460:	7afb      	ldrb	r3, [r7, #11]
 8017462:	3301      	adds	r3, #1
 8017464:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8017466:	bf00      	nop
      }
      break;
 8017468:	e037      	b.n	80174da <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801746a:	687b      	ldr	r3, [r7, #4]
 801746c:	7c1b      	ldrb	r3, [r3, #16]
 801746e:	2b00      	cmp	r3, #0
 8017470:	d109      	bne.n	8017486 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8017472:	687b      	ldr	r3, [r7, #4]
 8017474:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8017478:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801747a:	f107 0208 	add.w	r2, r7, #8
 801747e:	4610      	mov	r0, r2
 8017480:	4798      	blx	r3
 8017482:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8017484:	e029      	b.n	80174da <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8017486:	6839      	ldr	r1, [r7, #0]
 8017488:	6878      	ldr	r0, [r7, #4]
 801748a:	f000 fa2a 	bl	80178e2 <USBD_CtlError>
        err++;
 801748e:	7afb      	ldrb	r3, [r7, #11]
 8017490:	3301      	adds	r3, #1
 8017492:	72fb      	strb	r3, [r7, #11]
      break;
 8017494:	e021      	b.n	80174da <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8017496:	687b      	ldr	r3, [r7, #4]
 8017498:	7c1b      	ldrb	r3, [r3, #16]
 801749a:	2b00      	cmp	r3, #0
 801749c:	d10d      	bne.n	80174ba <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 801749e:	687b      	ldr	r3, [r7, #4]
 80174a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80174a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80174a6:	f107 0208 	add.w	r2, r7, #8
 80174aa:	4610      	mov	r0, r2
 80174ac:	4798      	blx	r3
 80174ae:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80174b0:	68fb      	ldr	r3, [r7, #12]
 80174b2:	3301      	adds	r3, #1
 80174b4:	2207      	movs	r2, #7
 80174b6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80174b8:	e00f      	b.n	80174da <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80174ba:	6839      	ldr	r1, [r7, #0]
 80174bc:	6878      	ldr	r0, [r7, #4]
 80174be:	f000 fa10 	bl	80178e2 <USBD_CtlError>
        err++;
 80174c2:	7afb      	ldrb	r3, [r7, #11]
 80174c4:	3301      	adds	r3, #1
 80174c6:	72fb      	strb	r3, [r7, #11]
      break;
 80174c8:	e007      	b.n	80174da <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80174ca:	6839      	ldr	r1, [r7, #0]
 80174cc:	6878      	ldr	r0, [r7, #4]
 80174ce:	f000 fa08 	bl	80178e2 <USBD_CtlError>
      err++;
 80174d2:	7afb      	ldrb	r3, [r7, #11]
 80174d4:	3301      	adds	r3, #1
 80174d6:	72fb      	strb	r3, [r7, #11]
      break;
 80174d8:	bf00      	nop
  }

  if (err != 0U)
 80174da:	7afb      	ldrb	r3, [r7, #11]
 80174dc:	2b00      	cmp	r3, #0
 80174de:	d11e      	bne.n	801751e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80174e0:	683b      	ldr	r3, [r7, #0]
 80174e2:	88db      	ldrh	r3, [r3, #6]
 80174e4:	2b00      	cmp	r3, #0
 80174e6:	d016      	beq.n	8017516 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80174e8:	893b      	ldrh	r3, [r7, #8]
 80174ea:	2b00      	cmp	r3, #0
 80174ec:	d00e      	beq.n	801750c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80174ee:	683b      	ldr	r3, [r7, #0]
 80174f0:	88da      	ldrh	r2, [r3, #6]
 80174f2:	893b      	ldrh	r3, [r7, #8]
 80174f4:	4293      	cmp	r3, r2
 80174f6:	bf28      	it	cs
 80174f8:	4613      	movcs	r3, r2
 80174fa:	b29b      	uxth	r3, r3
 80174fc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80174fe:	893b      	ldrh	r3, [r7, #8]
 8017500:	461a      	mov	r2, r3
 8017502:	68f9      	ldr	r1, [r7, #12]
 8017504:	6878      	ldr	r0, [r7, #4]
 8017506:	f000 fa69 	bl	80179dc <USBD_CtlSendData>
 801750a:	e009      	b.n	8017520 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 801750c:	6839      	ldr	r1, [r7, #0]
 801750e:	6878      	ldr	r0, [r7, #4]
 8017510:	f000 f9e7 	bl	80178e2 <USBD_CtlError>
 8017514:	e004      	b.n	8017520 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8017516:	6878      	ldr	r0, [r7, #4]
 8017518:	f000 faba 	bl	8017a90 <USBD_CtlSendStatus>
 801751c:	e000      	b.n	8017520 <USBD_GetDescriptor+0x320>
    return;
 801751e:	bf00      	nop
  }
}
 8017520:	3710      	adds	r7, #16
 8017522:	46bd      	mov	sp, r7
 8017524:	bd80      	pop	{r7, pc}
 8017526:	bf00      	nop

08017528 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017528:	b580      	push	{r7, lr}
 801752a:	b084      	sub	sp, #16
 801752c:	af00      	add	r7, sp, #0
 801752e:	6078      	str	r0, [r7, #4]
 8017530:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8017532:	683b      	ldr	r3, [r7, #0]
 8017534:	889b      	ldrh	r3, [r3, #4]
 8017536:	2b00      	cmp	r3, #0
 8017538:	d131      	bne.n	801759e <USBD_SetAddress+0x76>
 801753a:	683b      	ldr	r3, [r7, #0]
 801753c:	88db      	ldrh	r3, [r3, #6]
 801753e:	2b00      	cmp	r3, #0
 8017540:	d12d      	bne.n	801759e <USBD_SetAddress+0x76>
 8017542:	683b      	ldr	r3, [r7, #0]
 8017544:	885b      	ldrh	r3, [r3, #2]
 8017546:	2b7f      	cmp	r3, #127	@ 0x7f
 8017548:	d829      	bhi.n	801759e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801754a:	683b      	ldr	r3, [r7, #0]
 801754c:	885b      	ldrh	r3, [r3, #2]
 801754e:	b2db      	uxtb	r3, r3
 8017550:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8017554:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017556:	687b      	ldr	r3, [r7, #4]
 8017558:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801755c:	b2db      	uxtb	r3, r3
 801755e:	2b03      	cmp	r3, #3
 8017560:	d104      	bne.n	801756c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8017562:	6839      	ldr	r1, [r7, #0]
 8017564:	6878      	ldr	r0, [r7, #4]
 8017566:	f000 f9bc 	bl	80178e2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801756a:	e01d      	b.n	80175a8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801756c:	687b      	ldr	r3, [r7, #4]
 801756e:	7bfa      	ldrb	r2, [r7, #15]
 8017570:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8017574:	7bfb      	ldrb	r3, [r7, #15]
 8017576:	4619      	mov	r1, r3
 8017578:	6878      	ldr	r0, [r7, #4]
 801757a:	f000 ff61 	bl	8018440 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 801757e:	6878      	ldr	r0, [r7, #4]
 8017580:	f000 fa86 	bl	8017a90 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8017584:	7bfb      	ldrb	r3, [r7, #15]
 8017586:	2b00      	cmp	r3, #0
 8017588:	d004      	beq.n	8017594 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801758a:	687b      	ldr	r3, [r7, #4]
 801758c:	2202      	movs	r2, #2
 801758e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017592:	e009      	b.n	80175a8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8017594:	687b      	ldr	r3, [r7, #4]
 8017596:	2201      	movs	r2, #1
 8017598:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801759c:	e004      	b.n	80175a8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801759e:	6839      	ldr	r1, [r7, #0]
 80175a0:	6878      	ldr	r0, [r7, #4]
 80175a2:	f000 f99e 	bl	80178e2 <USBD_CtlError>
  }
}
 80175a6:	bf00      	nop
 80175a8:	bf00      	nop
 80175aa:	3710      	adds	r7, #16
 80175ac:	46bd      	mov	sp, r7
 80175ae:	bd80      	pop	{r7, pc}

080175b0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80175b0:	b580      	push	{r7, lr}
 80175b2:	b084      	sub	sp, #16
 80175b4:	af00      	add	r7, sp, #0
 80175b6:	6078      	str	r0, [r7, #4]
 80175b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80175ba:	2300      	movs	r3, #0
 80175bc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80175be:	683b      	ldr	r3, [r7, #0]
 80175c0:	885b      	ldrh	r3, [r3, #2]
 80175c2:	b2da      	uxtb	r2, r3
 80175c4:	4b4e      	ldr	r3, [pc, #312]	@ (8017700 <USBD_SetConfig+0x150>)
 80175c6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80175c8:	4b4d      	ldr	r3, [pc, #308]	@ (8017700 <USBD_SetConfig+0x150>)
 80175ca:	781b      	ldrb	r3, [r3, #0]
 80175cc:	2b01      	cmp	r3, #1
 80175ce:	d905      	bls.n	80175dc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80175d0:	6839      	ldr	r1, [r7, #0]
 80175d2:	6878      	ldr	r0, [r7, #4]
 80175d4:	f000 f985 	bl	80178e2 <USBD_CtlError>
    return USBD_FAIL;
 80175d8:	2303      	movs	r3, #3
 80175da:	e08c      	b.n	80176f6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80175dc:	687b      	ldr	r3, [r7, #4]
 80175de:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80175e2:	b2db      	uxtb	r3, r3
 80175e4:	2b02      	cmp	r3, #2
 80175e6:	d002      	beq.n	80175ee <USBD_SetConfig+0x3e>
 80175e8:	2b03      	cmp	r3, #3
 80175ea:	d029      	beq.n	8017640 <USBD_SetConfig+0x90>
 80175ec:	e075      	b.n	80176da <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80175ee:	4b44      	ldr	r3, [pc, #272]	@ (8017700 <USBD_SetConfig+0x150>)
 80175f0:	781b      	ldrb	r3, [r3, #0]
 80175f2:	2b00      	cmp	r3, #0
 80175f4:	d020      	beq.n	8017638 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80175f6:	4b42      	ldr	r3, [pc, #264]	@ (8017700 <USBD_SetConfig+0x150>)
 80175f8:	781b      	ldrb	r3, [r3, #0]
 80175fa:	461a      	mov	r2, r3
 80175fc:	687b      	ldr	r3, [r7, #4]
 80175fe:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8017600:	4b3f      	ldr	r3, [pc, #252]	@ (8017700 <USBD_SetConfig+0x150>)
 8017602:	781b      	ldrb	r3, [r3, #0]
 8017604:	4619      	mov	r1, r3
 8017606:	6878      	ldr	r0, [r7, #4]
 8017608:	f7fe ffb9 	bl	801657e <USBD_SetClassConfig>
 801760c:	4603      	mov	r3, r0
 801760e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8017610:	7bfb      	ldrb	r3, [r7, #15]
 8017612:	2b00      	cmp	r3, #0
 8017614:	d008      	beq.n	8017628 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8017616:	6839      	ldr	r1, [r7, #0]
 8017618:	6878      	ldr	r0, [r7, #4]
 801761a:	f000 f962 	bl	80178e2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801761e:	687b      	ldr	r3, [r7, #4]
 8017620:	2202      	movs	r2, #2
 8017622:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8017626:	e065      	b.n	80176f4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8017628:	6878      	ldr	r0, [r7, #4]
 801762a:	f000 fa31 	bl	8017a90 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801762e:	687b      	ldr	r3, [r7, #4]
 8017630:	2203      	movs	r2, #3
 8017632:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8017636:	e05d      	b.n	80176f4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8017638:	6878      	ldr	r0, [r7, #4]
 801763a:	f000 fa29 	bl	8017a90 <USBD_CtlSendStatus>
      break;
 801763e:	e059      	b.n	80176f4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8017640:	4b2f      	ldr	r3, [pc, #188]	@ (8017700 <USBD_SetConfig+0x150>)
 8017642:	781b      	ldrb	r3, [r3, #0]
 8017644:	2b00      	cmp	r3, #0
 8017646:	d112      	bne.n	801766e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8017648:	687b      	ldr	r3, [r7, #4]
 801764a:	2202      	movs	r2, #2
 801764c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8017650:	4b2b      	ldr	r3, [pc, #172]	@ (8017700 <USBD_SetConfig+0x150>)
 8017652:	781b      	ldrb	r3, [r3, #0]
 8017654:	461a      	mov	r2, r3
 8017656:	687b      	ldr	r3, [r7, #4]
 8017658:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 801765a:	4b29      	ldr	r3, [pc, #164]	@ (8017700 <USBD_SetConfig+0x150>)
 801765c:	781b      	ldrb	r3, [r3, #0]
 801765e:	4619      	mov	r1, r3
 8017660:	6878      	ldr	r0, [r7, #4]
 8017662:	f7fe ffa8 	bl	80165b6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8017666:	6878      	ldr	r0, [r7, #4]
 8017668:	f000 fa12 	bl	8017a90 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801766c:	e042      	b.n	80176f4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 801766e:	4b24      	ldr	r3, [pc, #144]	@ (8017700 <USBD_SetConfig+0x150>)
 8017670:	781b      	ldrb	r3, [r3, #0]
 8017672:	461a      	mov	r2, r3
 8017674:	687b      	ldr	r3, [r7, #4]
 8017676:	685b      	ldr	r3, [r3, #4]
 8017678:	429a      	cmp	r2, r3
 801767a:	d02a      	beq.n	80176d2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801767c:	687b      	ldr	r3, [r7, #4]
 801767e:	685b      	ldr	r3, [r3, #4]
 8017680:	b2db      	uxtb	r3, r3
 8017682:	4619      	mov	r1, r3
 8017684:	6878      	ldr	r0, [r7, #4]
 8017686:	f7fe ff96 	bl	80165b6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 801768a:	4b1d      	ldr	r3, [pc, #116]	@ (8017700 <USBD_SetConfig+0x150>)
 801768c:	781b      	ldrb	r3, [r3, #0]
 801768e:	461a      	mov	r2, r3
 8017690:	687b      	ldr	r3, [r7, #4]
 8017692:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8017694:	4b1a      	ldr	r3, [pc, #104]	@ (8017700 <USBD_SetConfig+0x150>)
 8017696:	781b      	ldrb	r3, [r3, #0]
 8017698:	4619      	mov	r1, r3
 801769a:	6878      	ldr	r0, [r7, #4]
 801769c:	f7fe ff6f 	bl	801657e <USBD_SetClassConfig>
 80176a0:	4603      	mov	r3, r0
 80176a2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80176a4:	7bfb      	ldrb	r3, [r7, #15]
 80176a6:	2b00      	cmp	r3, #0
 80176a8:	d00f      	beq.n	80176ca <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80176aa:	6839      	ldr	r1, [r7, #0]
 80176ac:	6878      	ldr	r0, [r7, #4]
 80176ae:	f000 f918 	bl	80178e2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80176b2:	687b      	ldr	r3, [r7, #4]
 80176b4:	685b      	ldr	r3, [r3, #4]
 80176b6:	b2db      	uxtb	r3, r3
 80176b8:	4619      	mov	r1, r3
 80176ba:	6878      	ldr	r0, [r7, #4]
 80176bc:	f7fe ff7b 	bl	80165b6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80176c0:	687b      	ldr	r3, [r7, #4]
 80176c2:	2202      	movs	r2, #2
 80176c4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80176c8:	e014      	b.n	80176f4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80176ca:	6878      	ldr	r0, [r7, #4]
 80176cc:	f000 f9e0 	bl	8017a90 <USBD_CtlSendStatus>
      break;
 80176d0:	e010      	b.n	80176f4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80176d2:	6878      	ldr	r0, [r7, #4]
 80176d4:	f000 f9dc 	bl	8017a90 <USBD_CtlSendStatus>
      break;
 80176d8:	e00c      	b.n	80176f4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80176da:	6839      	ldr	r1, [r7, #0]
 80176dc:	6878      	ldr	r0, [r7, #4]
 80176de:	f000 f900 	bl	80178e2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80176e2:	4b07      	ldr	r3, [pc, #28]	@ (8017700 <USBD_SetConfig+0x150>)
 80176e4:	781b      	ldrb	r3, [r3, #0]
 80176e6:	4619      	mov	r1, r3
 80176e8:	6878      	ldr	r0, [r7, #4]
 80176ea:	f7fe ff64 	bl	80165b6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80176ee:	2303      	movs	r3, #3
 80176f0:	73fb      	strb	r3, [r7, #15]
      break;
 80176f2:	bf00      	nop
  }

  return ret;
 80176f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80176f6:	4618      	mov	r0, r3
 80176f8:	3710      	adds	r7, #16
 80176fa:	46bd      	mov	sp, r7
 80176fc:	bd80      	pop	{r7, pc}
 80176fe:	bf00      	nop
 8017700:	24025d68 	.word	0x24025d68

08017704 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017704:	b580      	push	{r7, lr}
 8017706:	b082      	sub	sp, #8
 8017708:	af00      	add	r7, sp, #0
 801770a:	6078      	str	r0, [r7, #4]
 801770c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801770e:	683b      	ldr	r3, [r7, #0]
 8017710:	88db      	ldrh	r3, [r3, #6]
 8017712:	2b01      	cmp	r3, #1
 8017714:	d004      	beq.n	8017720 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8017716:	6839      	ldr	r1, [r7, #0]
 8017718:	6878      	ldr	r0, [r7, #4]
 801771a:	f000 f8e2 	bl	80178e2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801771e:	e023      	b.n	8017768 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8017720:	687b      	ldr	r3, [r7, #4]
 8017722:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017726:	b2db      	uxtb	r3, r3
 8017728:	2b02      	cmp	r3, #2
 801772a:	dc02      	bgt.n	8017732 <USBD_GetConfig+0x2e>
 801772c:	2b00      	cmp	r3, #0
 801772e:	dc03      	bgt.n	8017738 <USBD_GetConfig+0x34>
 8017730:	e015      	b.n	801775e <USBD_GetConfig+0x5a>
 8017732:	2b03      	cmp	r3, #3
 8017734:	d00b      	beq.n	801774e <USBD_GetConfig+0x4a>
 8017736:	e012      	b.n	801775e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8017738:	687b      	ldr	r3, [r7, #4]
 801773a:	2200      	movs	r2, #0
 801773c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 801773e:	687b      	ldr	r3, [r7, #4]
 8017740:	3308      	adds	r3, #8
 8017742:	2201      	movs	r2, #1
 8017744:	4619      	mov	r1, r3
 8017746:	6878      	ldr	r0, [r7, #4]
 8017748:	f000 f948 	bl	80179dc <USBD_CtlSendData>
        break;
 801774c:	e00c      	b.n	8017768 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801774e:	687b      	ldr	r3, [r7, #4]
 8017750:	3304      	adds	r3, #4
 8017752:	2201      	movs	r2, #1
 8017754:	4619      	mov	r1, r3
 8017756:	6878      	ldr	r0, [r7, #4]
 8017758:	f000 f940 	bl	80179dc <USBD_CtlSendData>
        break;
 801775c:	e004      	b.n	8017768 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 801775e:	6839      	ldr	r1, [r7, #0]
 8017760:	6878      	ldr	r0, [r7, #4]
 8017762:	f000 f8be 	bl	80178e2 <USBD_CtlError>
        break;
 8017766:	bf00      	nop
}
 8017768:	bf00      	nop
 801776a:	3708      	adds	r7, #8
 801776c:	46bd      	mov	sp, r7
 801776e:	bd80      	pop	{r7, pc}

08017770 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017770:	b580      	push	{r7, lr}
 8017772:	b082      	sub	sp, #8
 8017774:	af00      	add	r7, sp, #0
 8017776:	6078      	str	r0, [r7, #4]
 8017778:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801777a:	687b      	ldr	r3, [r7, #4]
 801777c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017780:	b2db      	uxtb	r3, r3
 8017782:	3b01      	subs	r3, #1
 8017784:	2b02      	cmp	r3, #2
 8017786:	d81e      	bhi.n	80177c6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8017788:	683b      	ldr	r3, [r7, #0]
 801778a:	88db      	ldrh	r3, [r3, #6]
 801778c:	2b02      	cmp	r3, #2
 801778e:	d004      	beq.n	801779a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8017790:	6839      	ldr	r1, [r7, #0]
 8017792:	6878      	ldr	r0, [r7, #4]
 8017794:	f000 f8a5 	bl	80178e2 <USBD_CtlError>
        break;
 8017798:	e01a      	b.n	80177d0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801779a:	687b      	ldr	r3, [r7, #4]
 801779c:	2201      	movs	r2, #1
 801779e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80177a0:	687b      	ldr	r3, [r7, #4]
 80177a2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80177a6:	2b00      	cmp	r3, #0
 80177a8:	d005      	beq.n	80177b6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80177aa:	687b      	ldr	r3, [r7, #4]
 80177ac:	68db      	ldr	r3, [r3, #12]
 80177ae:	f043 0202 	orr.w	r2, r3, #2
 80177b2:	687b      	ldr	r3, [r7, #4]
 80177b4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80177b6:	687b      	ldr	r3, [r7, #4]
 80177b8:	330c      	adds	r3, #12
 80177ba:	2202      	movs	r2, #2
 80177bc:	4619      	mov	r1, r3
 80177be:	6878      	ldr	r0, [r7, #4]
 80177c0:	f000 f90c 	bl	80179dc <USBD_CtlSendData>
      break;
 80177c4:	e004      	b.n	80177d0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80177c6:	6839      	ldr	r1, [r7, #0]
 80177c8:	6878      	ldr	r0, [r7, #4]
 80177ca:	f000 f88a 	bl	80178e2 <USBD_CtlError>
      break;
 80177ce:	bf00      	nop
  }
}
 80177d0:	bf00      	nop
 80177d2:	3708      	adds	r7, #8
 80177d4:	46bd      	mov	sp, r7
 80177d6:	bd80      	pop	{r7, pc}

080177d8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80177d8:	b580      	push	{r7, lr}
 80177da:	b082      	sub	sp, #8
 80177dc:	af00      	add	r7, sp, #0
 80177de:	6078      	str	r0, [r7, #4]
 80177e0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80177e2:	683b      	ldr	r3, [r7, #0]
 80177e4:	885b      	ldrh	r3, [r3, #2]
 80177e6:	2b01      	cmp	r3, #1
 80177e8:	d107      	bne.n	80177fa <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80177ea:	687b      	ldr	r3, [r7, #4]
 80177ec:	2201      	movs	r2, #1
 80177ee:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80177f2:	6878      	ldr	r0, [r7, #4]
 80177f4:	f000 f94c 	bl	8017a90 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80177f8:	e013      	b.n	8017822 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80177fa:	683b      	ldr	r3, [r7, #0]
 80177fc:	885b      	ldrh	r3, [r3, #2]
 80177fe:	2b02      	cmp	r3, #2
 8017800:	d10b      	bne.n	801781a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8017802:	683b      	ldr	r3, [r7, #0]
 8017804:	889b      	ldrh	r3, [r3, #4]
 8017806:	0a1b      	lsrs	r3, r3, #8
 8017808:	b29b      	uxth	r3, r3
 801780a:	b2da      	uxtb	r2, r3
 801780c:	687b      	ldr	r3, [r7, #4]
 801780e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8017812:	6878      	ldr	r0, [r7, #4]
 8017814:	f000 f93c 	bl	8017a90 <USBD_CtlSendStatus>
}
 8017818:	e003      	b.n	8017822 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 801781a:	6839      	ldr	r1, [r7, #0]
 801781c:	6878      	ldr	r0, [r7, #4]
 801781e:	f000 f860 	bl	80178e2 <USBD_CtlError>
}
 8017822:	bf00      	nop
 8017824:	3708      	adds	r7, #8
 8017826:	46bd      	mov	sp, r7
 8017828:	bd80      	pop	{r7, pc}

0801782a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801782a:	b580      	push	{r7, lr}
 801782c:	b082      	sub	sp, #8
 801782e:	af00      	add	r7, sp, #0
 8017830:	6078      	str	r0, [r7, #4]
 8017832:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8017834:	687b      	ldr	r3, [r7, #4]
 8017836:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801783a:	b2db      	uxtb	r3, r3
 801783c:	3b01      	subs	r3, #1
 801783e:	2b02      	cmp	r3, #2
 8017840:	d80b      	bhi.n	801785a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8017842:	683b      	ldr	r3, [r7, #0]
 8017844:	885b      	ldrh	r3, [r3, #2]
 8017846:	2b01      	cmp	r3, #1
 8017848:	d10c      	bne.n	8017864 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 801784a:	687b      	ldr	r3, [r7, #4]
 801784c:	2200      	movs	r2, #0
 801784e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8017852:	6878      	ldr	r0, [r7, #4]
 8017854:	f000 f91c 	bl	8017a90 <USBD_CtlSendStatus>
      }
      break;
 8017858:	e004      	b.n	8017864 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 801785a:	6839      	ldr	r1, [r7, #0]
 801785c:	6878      	ldr	r0, [r7, #4]
 801785e:	f000 f840 	bl	80178e2 <USBD_CtlError>
      break;
 8017862:	e000      	b.n	8017866 <USBD_ClrFeature+0x3c>
      break;
 8017864:	bf00      	nop
  }
}
 8017866:	bf00      	nop
 8017868:	3708      	adds	r7, #8
 801786a:	46bd      	mov	sp, r7
 801786c:	bd80      	pop	{r7, pc}

0801786e <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801786e:	b580      	push	{r7, lr}
 8017870:	b084      	sub	sp, #16
 8017872:	af00      	add	r7, sp, #0
 8017874:	6078      	str	r0, [r7, #4]
 8017876:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8017878:	683b      	ldr	r3, [r7, #0]
 801787a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 801787c:	68fb      	ldr	r3, [r7, #12]
 801787e:	781a      	ldrb	r2, [r3, #0]
 8017880:	687b      	ldr	r3, [r7, #4]
 8017882:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8017884:	68fb      	ldr	r3, [r7, #12]
 8017886:	3301      	adds	r3, #1
 8017888:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 801788a:	68fb      	ldr	r3, [r7, #12]
 801788c:	781a      	ldrb	r2, [r3, #0]
 801788e:	687b      	ldr	r3, [r7, #4]
 8017890:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8017892:	68fb      	ldr	r3, [r7, #12]
 8017894:	3301      	adds	r3, #1
 8017896:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8017898:	68f8      	ldr	r0, [r7, #12]
 801789a:	f7ff fa16 	bl	8016cca <SWAPBYTE>
 801789e:	4603      	mov	r3, r0
 80178a0:	461a      	mov	r2, r3
 80178a2:	687b      	ldr	r3, [r7, #4]
 80178a4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80178a6:	68fb      	ldr	r3, [r7, #12]
 80178a8:	3301      	adds	r3, #1
 80178aa:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80178ac:	68fb      	ldr	r3, [r7, #12]
 80178ae:	3301      	adds	r3, #1
 80178b0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80178b2:	68f8      	ldr	r0, [r7, #12]
 80178b4:	f7ff fa09 	bl	8016cca <SWAPBYTE>
 80178b8:	4603      	mov	r3, r0
 80178ba:	461a      	mov	r2, r3
 80178bc:	687b      	ldr	r3, [r7, #4]
 80178be:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80178c0:	68fb      	ldr	r3, [r7, #12]
 80178c2:	3301      	adds	r3, #1
 80178c4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80178c6:	68fb      	ldr	r3, [r7, #12]
 80178c8:	3301      	adds	r3, #1
 80178ca:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80178cc:	68f8      	ldr	r0, [r7, #12]
 80178ce:	f7ff f9fc 	bl	8016cca <SWAPBYTE>
 80178d2:	4603      	mov	r3, r0
 80178d4:	461a      	mov	r2, r3
 80178d6:	687b      	ldr	r3, [r7, #4]
 80178d8:	80da      	strh	r2, [r3, #6]
}
 80178da:	bf00      	nop
 80178dc:	3710      	adds	r7, #16
 80178de:	46bd      	mov	sp, r7
 80178e0:	bd80      	pop	{r7, pc}

080178e2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80178e2:	b580      	push	{r7, lr}
 80178e4:	b082      	sub	sp, #8
 80178e6:	af00      	add	r7, sp, #0
 80178e8:	6078      	str	r0, [r7, #4]
 80178ea:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80178ec:	2180      	movs	r1, #128	@ 0x80
 80178ee:	6878      	ldr	r0, [r7, #4]
 80178f0:	f000 fd3c 	bl	801836c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80178f4:	2100      	movs	r1, #0
 80178f6:	6878      	ldr	r0, [r7, #4]
 80178f8:	f000 fd38 	bl	801836c <USBD_LL_StallEP>
}
 80178fc:	bf00      	nop
 80178fe:	3708      	adds	r7, #8
 8017900:	46bd      	mov	sp, r7
 8017902:	bd80      	pop	{r7, pc}

08017904 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8017904:	b580      	push	{r7, lr}
 8017906:	b086      	sub	sp, #24
 8017908:	af00      	add	r7, sp, #0
 801790a:	60f8      	str	r0, [r7, #12]
 801790c:	60b9      	str	r1, [r7, #8]
 801790e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8017910:	2300      	movs	r3, #0
 8017912:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8017914:	68fb      	ldr	r3, [r7, #12]
 8017916:	2b00      	cmp	r3, #0
 8017918:	d042      	beq.n	80179a0 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 801791a:	68fb      	ldr	r3, [r7, #12]
 801791c:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 801791e:	6938      	ldr	r0, [r7, #16]
 8017920:	f000 f842 	bl	80179a8 <USBD_GetLen>
 8017924:	4603      	mov	r3, r0
 8017926:	3301      	adds	r3, #1
 8017928:	005b      	lsls	r3, r3, #1
 801792a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801792e:	d808      	bhi.n	8017942 <USBD_GetString+0x3e>
 8017930:	6938      	ldr	r0, [r7, #16]
 8017932:	f000 f839 	bl	80179a8 <USBD_GetLen>
 8017936:	4603      	mov	r3, r0
 8017938:	3301      	adds	r3, #1
 801793a:	b29b      	uxth	r3, r3
 801793c:	005b      	lsls	r3, r3, #1
 801793e:	b29a      	uxth	r2, r3
 8017940:	e001      	b.n	8017946 <USBD_GetString+0x42>
 8017942:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8017946:	687b      	ldr	r3, [r7, #4]
 8017948:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 801794a:	7dfb      	ldrb	r3, [r7, #23]
 801794c:	68ba      	ldr	r2, [r7, #8]
 801794e:	4413      	add	r3, r2
 8017950:	687a      	ldr	r2, [r7, #4]
 8017952:	7812      	ldrb	r2, [r2, #0]
 8017954:	701a      	strb	r2, [r3, #0]
  idx++;
 8017956:	7dfb      	ldrb	r3, [r7, #23]
 8017958:	3301      	adds	r3, #1
 801795a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 801795c:	7dfb      	ldrb	r3, [r7, #23]
 801795e:	68ba      	ldr	r2, [r7, #8]
 8017960:	4413      	add	r3, r2
 8017962:	2203      	movs	r2, #3
 8017964:	701a      	strb	r2, [r3, #0]
  idx++;
 8017966:	7dfb      	ldrb	r3, [r7, #23]
 8017968:	3301      	adds	r3, #1
 801796a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 801796c:	e013      	b.n	8017996 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 801796e:	7dfb      	ldrb	r3, [r7, #23]
 8017970:	68ba      	ldr	r2, [r7, #8]
 8017972:	4413      	add	r3, r2
 8017974:	693a      	ldr	r2, [r7, #16]
 8017976:	7812      	ldrb	r2, [r2, #0]
 8017978:	701a      	strb	r2, [r3, #0]
    pdesc++;
 801797a:	693b      	ldr	r3, [r7, #16]
 801797c:	3301      	adds	r3, #1
 801797e:	613b      	str	r3, [r7, #16]
    idx++;
 8017980:	7dfb      	ldrb	r3, [r7, #23]
 8017982:	3301      	adds	r3, #1
 8017984:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8017986:	7dfb      	ldrb	r3, [r7, #23]
 8017988:	68ba      	ldr	r2, [r7, #8]
 801798a:	4413      	add	r3, r2
 801798c:	2200      	movs	r2, #0
 801798e:	701a      	strb	r2, [r3, #0]
    idx++;
 8017990:	7dfb      	ldrb	r3, [r7, #23]
 8017992:	3301      	adds	r3, #1
 8017994:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8017996:	693b      	ldr	r3, [r7, #16]
 8017998:	781b      	ldrb	r3, [r3, #0]
 801799a:	2b00      	cmp	r3, #0
 801799c:	d1e7      	bne.n	801796e <USBD_GetString+0x6a>
 801799e:	e000      	b.n	80179a2 <USBD_GetString+0x9e>
    return;
 80179a0:	bf00      	nop
  }
}
 80179a2:	3718      	adds	r7, #24
 80179a4:	46bd      	mov	sp, r7
 80179a6:	bd80      	pop	{r7, pc}

080179a8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80179a8:	b480      	push	{r7}
 80179aa:	b085      	sub	sp, #20
 80179ac:	af00      	add	r7, sp, #0
 80179ae:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80179b0:	2300      	movs	r3, #0
 80179b2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80179b4:	687b      	ldr	r3, [r7, #4]
 80179b6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80179b8:	e005      	b.n	80179c6 <USBD_GetLen+0x1e>
  {
    len++;
 80179ba:	7bfb      	ldrb	r3, [r7, #15]
 80179bc:	3301      	adds	r3, #1
 80179be:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80179c0:	68bb      	ldr	r3, [r7, #8]
 80179c2:	3301      	adds	r3, #1
 80179c4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80179c6:	68bb      	ldr	r3, [r7, #8]
 80179c8:	781b      	ldrb	r3, [r3, #0]
 80179ca:	2b00      	cmp	r3, #0
 80179cc:	d1f5      	bne.n	80179ba <USBD_GetLen+0x12>
  }

  return len;
 80179ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80179d0:	4618      	mov	r0, r3
 80179d2:	3714      	adds	r7, #20
 80179d4:	46bd      	mov	sp, r7
 80179d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179da:	4770      	bx	lr

080179dc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80179dc:	b580      	push	{r7, lr}
 80179de:	b084      	sub	sp, #16
 80179e0:	af00      	add	r7, sp, #0
 80179e2:	60f8      	str	r0, [r7, #12]
 80179e4:	60b9      	str	r1, [r7, #8]
 80179e6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80179e8:	68fb      	ldr	r3, [r7, #12]
 80179ea:	2202      	movs	r2, #2
 80179ec:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80179f0:	68fb      	ldr	r3, [r7, #12]
 80179f2:	687a      	ldr	r2, [r7, #4]
 80179f4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80179f6:	68fb      	ldr	r3, [r7, #12]
 80179f8:	687a      	ldr	r2, [r7, #4]
 80179fa:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80179fc:	687b      	ldr	r3, [r7, #4]
 80179fe:	68ba      	ldr	r2, [r7, #8]
 8017a00:	2100      	movs	r1, #0
 8017a02:	68f8      	ldr	r0, [r7, #12]
 8017a04:	f000 fd3b 	bl	801847e <USBD_LL_Transmit>

  return USBD_OK;
 8017a08:	2300      	movs	r3, #0
}
 8017a0a:	4618      	mov	r0, r3
 8017a0c:	3710      	adds	r7, #16
 8017a0e:	46bd      	mov	sp, r7
 8017a10:	bd80      	pop	{r7, pc}

08017a12 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8017a12:	b580      	push	{r7, lr}
 8017a14:	b084      	sub	sp, #16
 8017a16:	af00      	add	r7, sp, #0
 8017a18:	60f8      	str	r0, [r7, #12]
 8017a1a:	60b9      	str	r1, [r7, #8]
 8017a1c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8017a1e:	687b      	ldr	r3, [r7, #4]
 8017a20:	68ba      	ldr	r2, [r7, #8]
 8017a22:	2100      	movs	r1, #0
 8017a24:	68f8      	ldr	r0, [r7, #12]
 8017a26:	f000 fd2a 	bl	801847e <USBD_LL_Transmit>

  return USBD_OK;
 8017a2a:	2300      	movs	r3, #0
}
 8017a2c:	4618      	mov	r0, r3
 8017a2e:	3710      	adds	r7, #16
 8017a30:	46bd      	mov	sp, r7
 8017a32:	bd80      	pop	{r7, pc}

08017a34 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8017a34:	b580      	push	{r7, lr}
 8017a36:	b084      	sub	sp, #16
 8017a38:	af00      	add	r7, sp, #0
 8017a3a:	60f8      	str	r0, [r7, #12]
 8017a3c:	60b9      	str	r1, [r7, #8]
 8017a3e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8017a40:	68fb      	ldr	r3, [r7, #12]
 8017a42:	2203      	movs	r2, #3
 8017a44:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8017a48:	68fb      	ldr	r3, [r7, #12]
 8017a4a:	687a      	ldr	r2, [r7, #4]
 8017a4c:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8017a50:	68fb      	ldr	r3, [r7, #12]
 8017a52:	687a      	ldr	r2, [r7, #4]
 8017a54:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8017a58:	687b      	ldr	r3, [r7, #4]
 8017a5a:	68ba      	ldr	r2, [r7, #8]
 8017a5c:	2100      	movs	r1, #0
 8017a5e:	68f8      	ldr	r0, [r7, #12]
 8017a60:	f000 fd2e 	bl	80184c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8017a64:	2300      	movs	r3, #0
}
 8017a66:	4618      	mov	r0, r3
 8017a68:	3710      	adds	r7, #16
 8017a6a:	46bd      	mov	sp, r7
 8017a6c:	bd80      	pop	{r7, pc}

08017a6e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8017a6e:	b580      	push	{r7, lr}
 8017a70:	b084      	sub	sp, #16
 8017a72:	af00      	add	r7, sp, #0
 8017a74:	60f8      	str	r0, [r7, #12]
 8017a76:	60b9      	str	r1, [r7, #8]
 8017a78:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8017a7a:	687b      	ldr	r3, [r7, #4]
 8017a7c:	68ba      	ldr	r2, [r7, #8]
 8017a7e:	2100      	movs	r1, #0
 8017a80:	68f8      	ldr	r0, [r7, #12]
 8017a82:	f000 fd1d 	bl	80184c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8017a86:	2300      	movs	r3, #0
}
 8017a88:	4618      	mov	r0, r3
 8017a8a:	3710      	adds	r7, #16
 8017a8c:	46bd      	mov	sp, r7
 8017a8e:	bd80      	pop	{r7, pc}

08017a90 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8017a90:	b580      	push	{r7, lr}
 8017a92:	b082      	sub	sp, #8
 8017a94:	af00      	add	r7, sp, #0
 8017a96:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8017a98:	687b      	ldr	r3, [r7, #4]
 8017a9a:	2204      	movs	r2, #4
 8017a9c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8017aa0:	2300      	movs	r3, #0
 8017aa2:	2200      	movs	r2, #0
 8017aa4:	2100      	movs	r1, #0
 8017aa6:	6878      	ldr	r0, [r7, #4]
 8017aa8:	f000 fce9 	bl	801847e <USBD_LL_Transmit>

  return USBD_OK;
 8017aac:	2300      	movs	r3, #0
}
 8017aae:	4618      	mov	r0, r3
 8017ab0:	3708      	adds	r7, #8
 8017ab2:	46bd      	mov	sp, r7
 8017ab4:	bd80      	pop	{r7, pc}

08017ab6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8017ab6:	b580      	push	{r7, lr}
 8017ab8:	b082      	sub	sp, #8
 8017aba:	af00      	add	r7, sp, #0
 8017abc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8017abe:	687b      	ldr	r3, [r7, #4]
 8017ac0:	2205      	movs	r2, #5
 8017ac2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8017ac6:	2300      	movs	r3, #0
 8017ac8:	2200      	movs	r2, #0
 8017aca:	2100      	movs	r1, #0
 8017acc:	6878      	ldr	r0, [r7, #4]
 8017ace:	f000 fcf7 	bl	80184c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8017ad2:	2300      	movs	r3, #0
}
 8017ad4:	4618      	mov	r0, r3
 8017ad6:	3708      	adds	r7, #8
 8017ad8:	46bd      	mov	sp, r7
 8017ada:	bd80      	pop	{r7, pc}

08017adc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8017adc:	b580      	push	{r7, lr}
 8017ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8017ae0:	2200      	movs	r2, #0
 8017ae2:	4918      	ldr	r1, [pc, #96]	@ (8017b44 <MX_USB_DEVICE_Init+0x68>)
 8017ae4:	4818      	ldr	r0, [pc, #96]	@ (8017b48 <MX_USB_DEVICE_Init+0x6c>)
 8017ae6:	f7fe fccd 	bl	8016484 <USBD_Init>
 8017aea:	4603      	mov	r3, r0
 8017aec:	2b00      	cmp	r3, #0
 8017aee:	d001      	beq.n	8017af4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8017af0:	f7ea fbf8 	bl	80022e4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8017af4:	4915      	ldr	r1, [pc, #84]	@ (8017b4c <MX_USB_DEVICE_Init+0x70>)
 8017af6:	4814      	ldr	r0, [pc, #80]	@ (8017b48 <MX_USB_DEVICE_Init+0x6c>)
 8017af8:	f7fe fcf4 	bl	80164e4 <USBD_RegisterClass>
 8017afc:	4603      	mov	r3, r0
 8017afe:	2b00      	cmp	r3, #0
 8017b00:	d001      	beq.n	8017b06 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8017b02:	f7ea fbef 	bl	80022e4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8017b06:	4912      	ldr	r1, [pc, #72]	@ (8017b50 <MX_USB_DEVICE_Init+0x74>)
 8017b08:	480f      	ldr	r0, [pc, #60]	@ (8017b48 <MX_USB_DEVICE_Init+0x6c>)
 8017b0a:	f7fe fbeb 	bl	80162e4 <USBD_CDC_RegisterInterface>
 8017b0e:	4603      	mov	r3, r0
 8017b10:	2b00      	cmp	r3, #0
 8017b12:	d001      	beq.n	8017b18 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8017b14:	f7ea fbe6 	bl	80022e4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8017b18:	480b      	ldr	r0, [pc, #44]	@ (8017b48 <MX_USB_DEVICE_Init+0x6c>)
 8017b1a:	f7fe fd19 	bl	8016550 <USBD_Start>
 8017b1e:	4603      	mov	r3, r0
 8017b20:	2b00      	cmp	r3, #0
 8017b22:	d001      	beq.n	8017b28 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8017b24:	f7ea fbde 	bl	80022e4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8017b28:	f7f5 fb42 	bl	800d1b0 <HAL_PWREx_EnableUSBVoltageDetector>

  hcdc = (USBD_CDC_HandleTypeDef *)hUsbDeviceFS.pClassDataCmsit[hUsbDeviceFS.classId];
 8017b2c:	4b06      	ldr	r3, [pc, #24]	@ (8017b48 <MX_USB_DEVICE_Init+0x6c>)
 8017b2e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8017b32:	4a05      	ldr	r2, [pc, #20]	@ (8017b48 <MX_USB_DEVICE_Init+0x6c>)
 8017b34:	33b0      	adds	r3, #176	@ 0xb0
 8017b36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017b3a:	4a06      	ldr	r2, [pc, #24]	@ (8017b54 <MX_USB_DEVICE_Init+0x78>)
 8017b3c:	6013      	str	r3, [r2, #0]

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8017b3e:	bf00      	nop
 8017b40:	bd80      	pop	{r7, pc}
 8017b42:	bf00      	nop
 8017b44:	240000c8 	.word	0x240000c8
 8017b48:	24025d6c 	.word	0x24025d6c
 8017b4c:	24000034 	.word	0x24000034
 8017b50:	240000b4 	.word	0x240000b4
 8017b54:	24026048 	.word	0x24026048

08017b58 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8017b58:	b580      	push	{r7, lr}
 8017b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8017b5c:	2200      	movs	r2, #0
 8017b5e:	4905      	ldr	r1, [pc, #20]	@ (8017b74 <CDC_Init_FS+0x1c>)
 8017b60:	4805      	ldr	r0, [pc, #20]	@ (8017b78 <CDC_Init_FS+0x20>)
 8017b62:	f7fe fbd9 	bl	8016318 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8017b66:	4905      	ldr	r1, [pc, #20]	@ (8017b7c <CDC_Init_FS+0x24>)
 8017b68:	4803      	ldr	r0, [pc, #12]	@ (8017b78 <CDC_Init_FS+0x20>)
 8017b6a:	f7fe fbf7 	bl	801635c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8017b6e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8017b70:	4618      	mov	r0, r3
 8017b72:	bd80      	pop	{r7, pc}
 8017b74:	2402684c 	.word	0x2402684c
 8017b78:	24025d6c 	.word	0x24025d6c
 8017b7c:	2402604c 	.word	0x2402604c

08017b80 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8017b80:	b480      	push	{r7}
 8017b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8017b84:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8017b86:	4618      	mov	r0, r3
 8017b88:	46bd      	mov	sp, r7
 8017b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b8e:	4770      	bx	lr

08017b90 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8017b90:	b480      	push	{r7}
 8017b92:	b083      	sub	sp, #12
 8017b94:	af00      	add	r7, sp, #0
 8017b96:	4603      	mov	r3, r0
 8017b98:	6039      	str	r1, [r7, #0]
 8017b9a:	71fb      	strb	r3, [r7, #7]
 8017b9c:	4613      	mov	r3, r2
 8017b9e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8017ba0:	79fb      	ldrb	r3, [r7, #7]
 8017ba2:	2b23      	cmp	r3, #35	@ 0x23
 8017ba4:	d84a      	bhi.n	8017c3c <CDC_Control_FS+0xac>
 8017ba6:	a201      	add	r2, pc, #4	@ (adr r2, 8017bac <CDC_Control_FS+0x1c>)
 8017ba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017bac:	08017c3d 	.word	0x08017c3d
 8017bb0:	08017c3d 	.word	0x08017c3d
 8017bb4:	08017c3d 	.word	0x08017c3d
 8017bb8:	08017c3d 	.word	0x08017c3d
 8017bbc:	08017c3d 	.word	0x08017c3d
 8017bc0:	08017c3d 	.word	0x08017c3d
 8017bc4:	08017c3d 	.word	0x08017c3d
 8017bc8:	08017c3d 	.word	0x08017c3d
 8017bcc:	08017c3d 	.word	0x08017c3d
 8017bd0:	08017c3d 	.word	0x08017c3d
 8017bd4:	08017c3d 	.word	0x08017c3d
 8017bd8:	08017c3d 	.word	0x08017c3d
 8017bdc:	08017c3d 	.word	0x08017c3d
 8017be0:	08017c3d 	.word	0x08017c3d
 8017be4:	08017c3d 	.word	0x08017c3d
 8017be8:	08017c3d 	.word	0x08017c3d
 8017bec:	08017c3d 	.word	0x08017c3d
 8017bf0:	08017c3d 	.word	0x08017c3d
 8017bf4:	08017c3d 	.word	0x08017c3d
 8017bf8:	08017c3d 	.word	0x08017c3d
 8017bfc:	08017c3d 	.word	0x08017c3d
 8017c00:	08017c3d 	.word	0x08017c3d
 8017c04:	08017c3d 	.word	0x08017c3d
 8017c08:	08017c3d 	.word	0x08017c3d
 8017c0c:	08017c3d 	.word	0x08017c3d
 8017c10:	08017c3d 	.word	0x08017c3d
 8017c14:	08017c3d 	.word	0x08017c3d
 8017c18:	08017c3d 	.word	0x08017c3d
 8017c1c:	08017c3d 	.word	0x08017c3d
 8017c20:	08017c3d 	.word	0x08017c3d
 8017c24:	08017c3d 	.word	0x08017c3d
 8017c28:	08017c3d 	.word	0x08017c3d
 8017c2c:	08017c3d 	.word	0x08017c3d
 8017c30:	08017c3d 	.word	0x08017c3d
 8017c34:	08017c3d 	.word	0x08017c3d
 8017c38:	08017c3d 	.word	0x08017c3d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8017c3c:	bf00      	nop
  }

  return (USBD_OK);
 8017c3e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8017c40:	4618      	mov	r0, r3
 8017c42:	370c      	adds	r7, #12
 8017c44:	46bd      	mov	sp, r7
 8017c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c4a:	4770      	bx	lr

08017c4c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8017c4c:	b580      	push	{r7, lr}
 8017c4e:	b084      	sub	sp, #16
 8017c50:	af00      	add	r7, sp, #0
 8017c52:	6078      	str	r0, [r7, #4]
 8017c54:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8017c56:	6879      	ldr	r1, [r7, #4]
 8017c58:	4811      	ldr	r0, [pc, #68]	@ (8017ca0 <CDC_Receive_FS+0x54>)
 8017c5a:	f7fe fb7f 	bl	801635c <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8017c5e:	4810      	ldr	r0, [pc, #64]	@ (8017ca0 <CDC_Receive_FS+0x54>)
 8017c60:	f7fe fbda 	bl	8016418 <USBD_CDC_ReceivePacket>
	usb_device_rxFlag = 0x01;
 8017c64:	4b0f      	ldr	r3, [pc, #60]	@ (8017ca4 <CDC_Receive_FS+0x58>)
 8017c66:	2201      	movs	r2, #1
 8017c68:	701a      	strb	r2, [r3, #0]

	if (HAL_UART_Transmit(&huart1, Buf, *Len, 100)) {
 8017c6a:	683b      	ldr	r3, [r7, #0]
 8017c6c:	681b      	ldr	r3, [r3, #0]
 8017c6e:	b29a      	uxth	r2, r3
 8017c70:	2364      	movs	r3, #100	@ 0x64
 8017c72:	6879      	ldr	r1, [r7, #4]
 8017c74:	480c      	ldr	r0, [pc, #48]	@ (8017ca8 <CDC_Receive_FS+0x5c>)
 8017c76:	f7fa fa59 	bl	801212c <HAL_UART_Transmit>
 8017c7a:	4603      	mov	r3, r0
 8017c7c:	2b00      	cmp	r3, #0
 8017c7e:	d00a      	beq.n	8017c96 <CDC_Receive_FS+0x4a>
		uint8_t* usb_msg = "Failed to TX\n";
 8017c80:	4b0a      	ldr	r3, [pc, #40]	@ (8017cac <CDC_Receive_FS+0x60>)
 8017c82:	60fb      	str	r3, [r7, #12]
		CDC_Transmit_FS(usb_msg, strlen(usb_msg));
 8017c84:	68f8      	ldr	r0, [r7, #12]
 8017c86:	f7e8 fb7b 	bl	8000380 <strlen>
 8017c8a:	4603      	mov	r3, r0
 8017c8c:	b29b      	uxth	r3, r3
 8017c8e:	4619      	mov	r1, r3
 8017c90:	68f8      	ldr	r0, [r7, #12]
 8017c92:	f000 f80d 	bl	8017cb0 <CDC_Transmit_FS>
	}

	//CDC_Transmit_FS(Buf,*Len);
	return (USBD_OK);
 8017c96:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8017c98:	4618      	mov	r0, r3
 8017c9a:	3710      	adds	r7, #16
 8017c9c:	46bd      	mov	sp, r7
 8017c9e:	bd80      	pop	{r7, pc}
 8017ca0:	24025d6c 	.word	0x24025d6c
 8017ca4:	24000940 	.word	0x24000940
 8017ca8:	2400079c 	.word	0x2400079c
 8017cac:	0801b404 	.word	0x0801b404

08017cb0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8017cb0:	b580      	push	{r7, lr}
 8017cb2:	b084      	sub	sp, #16
 8017cb4:	af00      	add	r7, sp, #0
 8017cb6:	6078      	str	r0, [r7, #4]
 8017cb8:	460b      	mov	r3, r1
 8017cba:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8017cbc:	2300      	movs	r3, #0
 8017cbe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8017cc0:	4b0d      	ldr	r3, [pc, #52]	@ (8017cf8 <CDC_Transmit_FS+0x48>)
 8017cc2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8017cc6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8017cc8:	68bb      	ldr	r3, [r7, #8]
 8017cca:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8017cce:	2b00      	cmp	r3, #0
 8017cd0:	d001      	beq.n	8017cd6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8017cd2:	2301      	movs	r3, #1
 8017cd4:	e00b      	b.n	8017cee <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8017cd6:	887b      	ldrh	r3, [r7, #2]
 8017cd8:	461a      	mov	r2, r3
 8017cda:	6879      	ldr	r1, [r7, #4]
 8017cdc:	4806      	ldr	r0, [pc, #24]	@ (8017cf8 <CDC_Transmit_FS+0x48>)
 8017cde:	f7fe fb1b 	bl	8016318 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8017ce2:	4805      	ldr	r0, [pc, #20]	@ (8017cf8 <CDC_Transmit_FS+0x48>)
 8017ce4:	f7fe fb58 	bl	8016398 <USBD_CDC_TransmitPacket>
 8017ce8:	4603      	mov	r3, r0
 8017cea:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8017cec:	7bfb      	ldrb	r3, [r7, #15]
}
 8017cee:	4618      	mov	r0, r3
 8017cf0:	3710      	adds	r7, #16
 8017cf2:	46bd      	mov	sp, r7
 8017cf4:	bd80      	pop	{r7, pc}
 8017cf6:	bf00      	nop
 8017cf8:	24025d6c 	.word	0x24025d6c

08017cfc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8017cfc:	b480      	push	{r7}
 8017cfe:	b087      	sub	sp, #28
 8017d00:	af00      	add	r7, sp, #0
 8017d02:	60f8      	str	r0, [r7, #12]
 8017d04:	60b9      	str	r1, [r7, #8]
 8017d06:	4613      	mov	r3, r2
 8017d08:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8017d0a:	2300      	movs	r3, #0
 8017d0c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8017d0e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8017d12:	4618      	mov	r0, r3
 8017d14:	371c      	adds	r7, #28
 8017d16:	46bd      	mov	sp, r7
 8017d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d1c:	4770      	bx	lr
	...

08017d20 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017d20:	b480      	push	{r7}
 8017d22:	b083      	sub	sp, #12
 8017d24:	af00      	add	r7, sp, #0
 8017d26:	4603      	mov	r3, r0
 8017d28:	6039      	str	r1, [r7, #0]
 8017d2a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8017d2c:	683b      	ldr	r3, [r7, #0]
 8017d2e:	2212      	movs	r2, #18
 8017d30:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8017d32:	4b03      	ldr	r3, [pc, #12]	@ (8017d40 <USBD_FS_DeviceDescriptor+0x20>)
}
 8017d34:	4618      	mov	r0, r3
 8017d36:	370c      	adds	r7, #12
 8017d38:	46bd      	mov	sp, r7
 8017d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d3e:	4770      	bx	lr
 8017d40:	240000e8 	.word	0x240000e8

08017d44 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017d44:	b480      	push	{r7}
 8017d46:	b083      	sub	sp, #12
 8017d48:	af00      	add	r7, sp, #0
 8017d4a:	4603      	mov	r3, r0
 8017d4c:	6039      	str	r1, [r7, #0]
 8017d4e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8017d50:	683b      	ldr	r3, [r7, #0]
 8017d52:	2204      	movs	r2, #4
 8017d54:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8017d56:	4b03      	ldr	r3, [pc, #12]	@ (8017d64 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8017d58:	4618      	mov	r0, r3
 8017d5a:	370c      	adds	r7, #12
 8017d5c:	46bd      	mov	sp, r7
 8017d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d62:	4770      	bx	lr
 8017d64:	240000fc 	.word	0x240000fc

08017d68 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017d68:	b580      	push	{r7, lr}
 8017d6a:	b082      	sub	sp, #8
 8017d6c:	af00      	add	r7, sp, #0
 8017d6e:	4603      	mov	r3, r0
 8017d70:	6039      	str	r1, [r7, #0]
 8017d72:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8017d74:	79fb      	ldrb	r3, [r7, #7]
 8017d76:	2b00      	cmp	r3, #0
 8017d78:	d105      	bne.n	8017d86 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8017d7a:	683a      	ldr	r2, [r7, #0]
 8017d7c:	4907      	ldr	r1, [pc, #28]	@ (8017d9c <USBD_FS_ProductStrDescriptor+0x34>)
 8017d7e:	4808      	ldr	r0, [pc, #32]	@ (8017da0 <USBD_FS_ProductStrDescriptor+0x38>)
 8017d80:	f7ff fdc0 	bl	8017904 <USBD_GetString>
 8017d84:	e004      	b.n	8017d90 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8017d86:	683a      	ldr	r2, [r7, #0]
 8017d88:	4904      	ldr	r1, [pc, #16]	@ (8017d9c <USBD_FS_ProductStrDescriptor+0x34>)
 8017d8a:	4805      	ldr	r0, [pc, #20]	@ (8017da0 <USBD_FS_ProductStrDescriptor+0x38>)
 8017d8c:	f7ff fdba 	bl	8017904 <USBD_GetString>
  }
  return USBD_StrDesc;
 8017d90:	4b02      	ldr	r3, [pc, #8]	@ (8017d9c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8017d92:	4618      	mov	r0, r3
 8017d94:	3708      	adds	r7, #8
 8017d96:	46bd      	mov	sp, r7
 8017d98:	bd80      	pop	{r7, pc}
 8017d9a:	bf00      	nop
 8017d9c:	2402704c 	.word	0x2402704c
 8017da0:	0801b414 	.word	0x0801b414

08017da4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017da4:	b580      	push	{r7, lr}
 8017da6:	b082      	sub	sp, #8
 8017da8:	af00      	add	r7, sp, #0
 8017daa:	4603      	mov	r3, r0
 8017dac:	6039      	str	r1, [r7, #0]
 8017dae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8017db0:	683a      	ldr	r2, [r7, #0]
 8017db2:	4904      	ldr	r1, [pc, #16]	@ (8017dc4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8017db4:	4804      	ldr	r0, [pc, #16]	@ (8017dc8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8017db6:	f7ff fda5 	bl	8017904 <USBD_GetString>
  return USBD_StrDesc;
 8017dba:	4b02      	ldr	r3, [pc, #8]	@ (8017dc4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8017dbc:	4618      	mov	r0, r3
 8017dbe:	3708      	adds	r7, #8
 8017dc0:	46bd      	mov	sp, r7
 8017dc2:	bd80      	pop	{r7, pc}
 8017dc4:	2402704c 	.word	0x2402704c
 8017dc8:	0801b42c 	.word	0x0801b42c

08017dcc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017dcc:	b580      	push	{r7, lr}
 8017dce:	b082      	sub	sp, #8
 8017dd0:	af00      	add	r7, sp, #0
 8017dd2:	4603      	mov	r3, r0
 8017dd4:	6039      	str	r1, [r7, #0]
 8017dd6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8017dd8:	683b      	ldr	r3, [r7, #0]
 8017dda:	221a      	movs	r2, #26
 8017ddc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8017dde:	f000 f843 	bl	8017e68 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8017de2:	4b02      	ldr	r3, [pc, #8]	@ (8017dec <USBD_FS_SerialStrDescriptor+0x20>)
}
 8017de4:	4618      	mov	r0, r3
 8017de6:	3708      	adds	r7, #8
 8017de8:	46bd      	mov	sp, r7
 8017dea:	bd80      	pop	{r7, pc}
 8017dec:	24000100 	.word	0x24000100

08017df0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017df0:	b580      	push	{r7, lr}
 8017df2:	b082      	sub	sp, #8
 8017df4:	af00      	add	r7, sp, #0
 8017df6:	4603      	mov	r3, r0
 8017df8:	6039      	str	r1, [r7, #0]
 8017dfa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8017dfc:	79fb      	ldrb	r3, [r7, #7]
 8017dfe:	2b00      	cmp	r3, #0
 8017e00:	d105      	bne.n	8017e0e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8017e02:	683a      	ldr	r2, [r7, #0]
 8017e04:	4907      	ldr	r1, [pc, #28]	@ (8017e24 <USBD_FS_ConfigStrDescriptor+0x34>)
 8017e06:	4808      	ldr	r0, [pc, #32]	@ (8017e28 <USBD_FS_ConfigStrDescriptor+0x38>)
 8017e08:	f7ff fd7c 	bl	8017904 <USBD_GetString>
 8017e0c:	e004      	b.n	8017e18 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8017e0e:	683a      	ldr	r2, [r7, #0]
 8017e10:	4904      	ldr	r1, [pc, #16]	@ (8017e24 <USBD_FS_ConfigStrDescriptor+0x34>)
 8017e12:	4805      	ldr	r0, [pc, #20]	@ (8017e28 <USBD_FS_ConfigStrDescriptor+0x38>)
 8017e14:	f7ff fd76 	bl	8017904 <USBD_GetString>
  }
  return USBD_StrDesc;
 8017e18:	4b02      	ldr	r3, [pc, #8]	@ (8017e24 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8017e1a:	4618      	mov	r0, r3
 8017e1c:	3708      	adds	r7, #8
 8017e1e:	46bd      	mov	sp, r7
 8017e20:	bd80      	pop	{r7, pc}
 8017e22:	bf00      	nop
 8017e24:	2402704c 	.word	0x2402704c
 8017e28:	0801b440 	.word	0x0801b440

08017e2c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017e2c:	b580      	push	{r7, lr}
 8017e2e:	b082      	sub	sp, #8
 8017e30:	af00      	add	r7, sp, #0
 8017e32:	4603      	mov	r3, r0
 8017e34:	6039      	str	r1, [r7, #0]
 8017e36:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8017e38:	79fb      	ldrb	r3, [r7, #7]
 8017e3a:	2b00      	cmp	r3, #0
 8017e3c:	d105      	bne.n	8017e4a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8017e3e:	683a      	ldr	r2, [r7, #0]
 8017e40:	4907      	ldr	r1, [pc, #28]	@ (8017e60 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8017e42:	4808      	ldr	r0, [pc, #32]	@ (8017e64 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8017e44:	f7ff fd5e 	bl	8017904 <USBD_GetString>
 8017e48:	e004      	b.n	8017e54 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8017e4a:	683a      	ldr	r2, [r7, #0]
 8017e4c:	4904      	ldr	r1, [pc, #16]	@ (8017e60 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8017e4e:	4805      	ldr	r0, [pc, #20]	@ (8017e64 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8017e50:	f7ff fd58 	bl	8017904 <USBD_GetString>
  }
  return USBD_StrDesc;
 8017e54:	4b02      	ldr	r3, [pc, #8]	@ (8017e60 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8017e56:	4618      	mov	r0, r3
 8017e58:	3708      	adds	r7, #8
 8017e5a:	46bd      	mov	sp, r7
 8017e5c:	bd80      	pop	{r7, pc}
 8017e5e:	bf00      	nop
 8017e60:	2402704c 	.word	0x2402704c
 8017e64:	0801b44c 	.word	0x0801b44c

08017e68 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8017e68:	b580      	push	{r7, lr}
 8017e6a:	b084      	sub	sp, #16
 8017e6c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8017e6e:	4b0f      	ldr	r3, [pc, #60]	@ (8017eac <Get_SerialNum+0x44>)
 8017e70:	681b      	ldr	r3, [r3, #0]
 8017e72:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8017e74:	4b0e      	ldr	r3, [pc, #56]	@ (8017eb0 <Get_SerialNum+0x48>)
 8017e76:	681b      	ldr	r3, [r3, #0]
 8017e78:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8017e7a:	4b0e      	ldr	r3, [pc, #56]	@ (8017eb4 <Get_SerialNum+0x4c>)
 8017e7c:	681b      	ldr	r3, [r3, #0]
 8017e7e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8017e80:	68fa      	ldr	r2, [r7, #12]
 8017e82:	687b      	ldr	r3, [r7, #4]
 8017e84:	4413      	add	r3, r2
 8017e86:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8017e88:	68fb      	ldr	r3, [r7, #12]
 8017e8a:	2b00      	cmp	r3, #0
 8017e8c:	d009      	beq.n	8017ea2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8017e8e:	2208      	movs	r2, #8
 8017e90:	4909      	ldr	r1, [pc, #36]	@ (8017eb8 <Get_SerialNum+0x50>)
 8017e92:	68f8      	ldr	r0, [r7, #12]
 8017e94:	f000 f814 	bl	8017ec0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8017e98:	2204      	movs	r2, #4
 8017e9a:	4908      	ldr	r1, [pc, #32]	@ (8017ebc <Get_SerialNum+0x54>)
 8017e9c:	68b8      	ldr	r0, [r7, #8]
 8017e9e:	f000 f80f 	bl	8017ec0 <IntToUnicode>
  }
}
 8017ea2:	bf00      	nop
 8017ea4:	3710      	adds	r7, #16
 8017ea6:	46bd      	mov	sp, r7
 8017ea8:	bd80      	pop	{r7, pc}
 8017eaa:	bf00      	nop
 8017eac:	1ff1e800 	.word	0x1ff1e800
 8017eb0:	1ff1e804 	.word	0x1ff1e804
 8017eb4:	1ff1e808 	.word	0x1ff1e808
 8017eb8:	24000102 	.word	0x24000102
 8017ebc:	24000112 	.word	0x24000112

08017ec0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8017ec0:	b480      	push	{r7}
 8017ec2:	b087      	sub	sp, #28
 8017ec4:	af00      	add	r7, sp, #0
 8017ec6:	60f8      	str	r0, [r7, #12]
 8017ec8:	60b9      	str	r1, [r7, #8]
 8017eca:	4613      	mov	r3, r2
 8017ecc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8017ece:	2300      	movs	r3, #0
 8017ed0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8017ed2:	2300      	movs	r3, #0
 8017ed4:	75fb      	strb	r3, [r7, #23]
 8017ed6:	e027      	b.n	8017f28 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8017ed8:	68fb      	ldr	r3, [r7, #12]
 8017eda:	0f1b      	lsrs	r3, r3, #28
 8017edc:	2b09      	cmp	r3, #9
 8017ede:	d80b      	bhi.n	8017ef8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8017ee0:	68fb      	ldr	r3, [r7, #12]
 8017ee2:	0f1b      	lsrs	r3, r3, #28
 8017ee4:	b2da      	uxtb	r2, r3
 8017ee6:	7dfb      	ldrb	r3, [r7, #23]
 8017ee8:	005b      	lsls	r3, r3, #1
 8017eea:	4619      	mov	r1, r3
 8017eec:	68bb      	ldr	r3, [r7, #8]
 8017eee:	440b      	add	r3, r1
 8017ef0:	3230      	adds	r2, #48	@ 0x30
 8017ef2:	b2d2      	uxtb	r2, r2
 8017ef4:	701a      	strb	r2, [r3, #0]
 8017ef6:	e00a      	b.n	8017f0e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8017ef8:	68fb      	ldr	r3, [r7, #12]
 8017efa:	0f1b      	lsrs	r3, r3, #28
 8017efc:	b2da      	uxtb	r2, r3
 8017efe:	7dfb      	ldrb	r3, [r7, #23]
 8017f00:	005b      	lsls	r3, r3, #1
 8017f02:	4619      	mov	r1, r3
 8017f04:	68bb      	ldr	r3, [r7, #8]
 8017f06:	440b      	add	r3, r1
 8017f08:	3237      	adds	r2, #55	@ 0x37
 8017f0a:	b2d2      	uxtb	r2, r2
 8017f0c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8017f0e:	68fb      	ldr	r3, [r7, #12]
 8017f10:	011b      	lsls	r3, r3, #4
 8017f12:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8017f14:	7dfb      	ldrb	r3, [r7, #23]
 8017f16:	005b      	lsls	r3, r3, #1
 8017f18:	3301      	adds	r3, #1
 8017f1a:	68ba      	ldr	r2, [r7, #8]
 8017f1c:	4413      	add	r3, r2
 8017f1e:	2200      	movs	r2, #0
 8017f20:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8017f22:	7dfb      	ldrb	r3, [r7, #23]
 8017f24:	3301      	adds	r3, #1
 8017f26:	75fb      	strb	r3, [r7, #23]
 8017f28:	7dfa      	ldrb	r2, [r7, #23]
 8017f2a:	79fb      	ldrb	r3, [r7, #7]
 8017f2c:	429a      	cmp	r2, r3
 8017f2e:	d3d3      	bcc.n	8017ed8 <IntToUnicode+0x18>
  }
}
 8017f30:	bf00      	nop
 8017f32:	bf00      	nop
 8017f34:	371c      	adds	r7, #28
 8017f36:	46bd      	mov	sp, r7
 8017f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f3c:	4770      	bx	lr
	...

08017f40 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8017f40:	b580      	push	{r7, lr}
 8017f42:	b0ba      	sub	sp, #232	@ 0xe8
 8017f44:	af00      	add	r7, sp, #0
 8017f46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017f48:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8017f4c:	2200      	movs	r2, #0
 8017f4e:	601a      	str	r2, [r3, #0]
 8017f50:	605a      	str	r2, [r3, #4]
 8017f52:	609a      	str	r2, [r3, #8]
 8017f54:	60da      	str	r2, [r3, #12]
 8017f56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8017f58:	f107 0310 	add.w	r3, r7, #16
 8017f5c:	22c0      	movs	r2, #192	@ 0xc0
 8017f5e:	2100      	movs	r1, #0
 8017f60:	4618      	mov	r0, r3
 8017f62:	f001 f976 	bl	8019252 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8017f66:	687b      	ldr	r3, [r7, #4]
 8017f68:	681b      	ldr	r3, [r3, #0]
 8017f6a:	4a2c      	ldr	r2, [pc, #176]	@ (801801c <HAL_PCD_MspInit+0xdc>)
 8017f6c:	4293      	cmp	r3, r2
 8017f6e:	d151      	bne.n	8018014 <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8017f70:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8017f74:	f04f 0300 	mov.w	r3, #0
 8017f78:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8017f7c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8017f80:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8017f84:	f107 0310 	add.w	r3, r7, #16
 8017f88:	4618      	mov	r0, r3
 8017f8a:	f7f6 f907 	bl	800e19c <HAL_RCCEx_PeriphCLKConfig>
 8017f8e:	4603      	mov	r3, r0
 8017f90:	2b00      	cmp	r3, #0
 8017f92:	d001      	beq.n	8017f98 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8017f94:	f7ea f9a6 	bl	80022e4 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8017f98:	f7f5 f90a 	bl	800d1b0 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8017f9c:	4b20      	ldr	r3, [pc, #128]	@ (8018020 <HAL_PCD_MspInit+0xe0>)
 8017f9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8017fa2:	4a1f      	ldr	r2, [pc, #124]	@ (8018020 <HAL_PCD_MspInit+0xe0>)
 8017fa4:	f043 0301 	orr.w	r3, r3, #1
 8017fa8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8017fac:	4b1c      	ldr	r3, [pc, #112]	@ (8018020 <HAL_PCD_MspInit+0xe0>)
 8017fae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8017fb2:	f003 0301 	and.w	r3, r3, #1
 8017fb6:	60fb      	str	r3, [r7, #12]
 8017fb8:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8017fba:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8017fbe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017fc2:	2302      	movs	r3, #2
 8017fc4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017fc8:	2300      	movs	r3, #0
 8017fca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017fce:	2300      	movs	r3, #0
 8017fd0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8017fd4:	230a      	movs	r3, #10
 8017fd6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8017fda:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8017fde:	4619      	mov	r1, r3
 8017fe0:	4810      	ldr	r0, [pc, #64]	@ (8018024 <HAL_PCD_MspInit+0xe4>)
 8017fe2:	f7ef fa21 	bl	8007428 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8017fe6:	4b0e      	ldr	r3, [pc, #56]	@ (8018020 <HAL_PCD_MspInit+0xe0>)
 8017fe8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8017fec:	4a0c      	ldr	r2, [pc, #48]	@ (8018020 <HAL_PCD_MspInit+0xe0>)
 8017fee:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8017ff2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8017ff6:	4b0a      	ldr	r3, [pc, #40]	@ (8018020 <HAL_PCD_MspInit+0xe0>)
 8017ff8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8017ffc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8018000:	60bb      	str	r3, [r7, #8]
 8018002:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8018004:	2200      	movs	r2, #0
 8018006:	2100      	movs	r1, #0
 8018008:	2065      	movs	r0, #101	@ 0x65
 801800a:	f7eb fb7a 	bl	8003702 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801800e:	2065      	movs	r0, #101	@ 0x65
 8018010:	f7eb fb91 	bl	8003736 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8018014:	bf00      	nop
 8018016:	37e8      	adds	r7, #232	@ 0xe8
 8018018:	46bd      	mov	sp, r7
 801801a:	bd80      	pop	{r7, pc}
 801801c:	40080000 	.word	0x40080000
 8018020:	58024400 	.word	0x58024400
 8018024:	58020000 	.word	0x58020000

08018028 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018028:	b580      	push	{r7, lr}
 801802a:	b082      	sub	sp, #8
 801802c:	af00      	add	r7, sp, #0
 801802e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8018030:	687b      	ldr	r3, [r7, #4]
 8018032:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8018036:	687b      	ldr	r3, [r7, #4]
 8018038:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 801803c:	4619      	mov	r1, r3
 801803e:	4610      	mov	r0, r2
 8018040:	f7fe fad3 	bl	80165ea <USBD_LL_SetupStage>
}
 8018044:	bf00      	nop
 8018046:	3708      	adds	r7, #8
 8018048:	46bd      	mov	sp, r7
 801804a:	bd80      	pop	{r7, pc}

0801804c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801804c:	b580      	push	{r7, lr}
 801804e:	b082      	sub	sp, #8
 8018050:	af00      	add	r7, sp, #0
 8018052:	6078      	str	r0, [r7, #4]
 8018054:	460b      	mov	r3, r1
 8018056:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8018058:	687b      	ldr	r3, [r7, #4]
 801805a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 801805e:	78fa      	ldrb	r2, [r7, #3]
 8018060:	6879      	ldr	r1, [r7, #4]
 8018062:	4613      	mov	r3, r2
 8018064:	00db      	lsls	r3, r3, #3
 8018066:	4413      	add	r3, r2
 8018068:	009b      	lsls	r3, r3, #2
 801806a:	440b      	add	r3, r1
 801806c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8018070:	681a      	ldr	r2, [r3, #0]
 8018072:	78fb      	ldrb	r3, [r7, #3]
 8018074:	4619      	mov	r1, r3
 8018076:	f7fe fb0d 	bl	8016694 <USBD_LL_DataOutStage>
}
 801807a:	bf00      	nop
 801807c:	3708      	adds	r7, #8
 801807e:	46bd      	mov	sp, r7
 8018080:	bd80      	pop	{r7, pc}

08018082 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018082:	b580      	push	{r7, lr}
 8018084:	b082      	sub	sp, #8
 8018086:	af00      	add	r7, sp, #0
 8018088:	6078      	str	r0, [r7, #4]
 801808a:	460b      	mov	r3, r1
 801808c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801808e:	687b      	ldr	r3, [r7, #4]
 8018090:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8018094:	78fa      	ldrb	r2, [r7, #3]
 8018096:	6879      	ldr	r1, [r7, #4]
 8018098:	4613      	mov	r3, r2
 801809a:	00db      	lsls	r3, r3, #3
 801809c:	4413      	add	r3, r2
 801809e:	009b      	lsls	r3, r3, #2
 80180a0:	440b      	add	r3, r1
 80180a2:	3320      	adds	r3, #32
 80180a4:	681a      	ldr	r2, [r3, #0]
 80180a6:	78fb      	ldrb	r3, [r7, #3]
 80180a8:	4619      	mov	r1, r3
 80180aa:	f7fe fba6 	bl	80167fa <USBD_LL_DataInStage>
}
 80180ae:	bf00      	nop
 80180b0:	3708      	adds	r7, #8
 80180b2:	46bd      	mov	sp, r7
 80180b4:	bd80      	pop	{r7, pc}

080180b6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80180b6:	b580      	push	{r7, lr}
 80180b8:	b082      	sub	sp, #8
 80180ba:	af00      	add	r7, sp, #0
 80180bc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80180be:	687b      	ldr	r3, [r7, #4]
 80180c0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80180c4:	4618      	mov	r0, r3
 80180c6:	f7fe fce0 	bl	8016a8a <USBD_LL_SOF>
}
 80180ca:	bf00      	nop
 80180cc:	3708      	adds	r7, #8
 80180ce:	46bd      	mov	sp, r7
 80180d0:	bd80      	pop	{r7, pc}

080180d2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80180d2:	b580      	push	{r7, lr}
 80180d4:	b084      	sub	sp, #16
 80180d6:	af00      	add	r7, sp, #0
 80180d8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80180da:	2301      	movs	r3, #1
 80180dc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80180de:	687b      	ldr	r3, [r7, #4]
 80180e0:	79db      	ldrb	r3, [r3, #7]
 80180e2:	2b00      	cmp	r3, #0
 80180e4:	d102      	bne.n	80180ec <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80180e6:	2300      	movs	r3, #0
 80180e8:	73fb      	strb	r3, [r7, #15]
 80180ea:	e008      	b.n	80180fe <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80180ec:	687b      	ldr	r3, [r7, #4]
 80180ee:	79db      	ldrb	r3, [r3, #7]
 80180f0:	2b02      	cmp	r3, #2
 80180f2:	d102      	bne.n	80180fa <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80180f4:	2301      	movs	r3, #1
 80180f6:	73fb      	strb	r3, [r7, #15]
 80180f8:	e001      	b.n	80180fe <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80180fa:	f7ea f8f3 	bl	80022e4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80180fe:	687b      	ldr	r3, [r7, #4]
 8018100:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8018104:	7bfa      	ldrb	r2, [r7, #15]
 8018106:	4611      	mov	r1, r2
 8018108:	4618      	mov	r0, r3
 801810a:	f7fe fc7a 	bl	8016a02 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801810e:	687b      	ldr	r3, [r7, #4]
 8018110:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8018114:	4618      	mov	r0, r3
 8018116:	f7fe fc22 	bl	801695e <USBD_LL_Reset>
}
 801811a:	bf00      	nop
 801811c:	3710      	adds	r7, #16
 801811e:	46bd      	mov	sp, r7
 8018120:	bd80      	pop	{r7, pc}
	...

08018124 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018124:	b580      	push	{r7, lr}
 8018126:	b082      	sub	sp, #8
 8018128:	af00      	add	r7, sp, #0
 801812a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801812c:	687b      	ldr	r3, [r7, #4]
 801812e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8018132:	4618      	mov	r0, r3
 8018134:	f7fe fc75 	bl	8016a22 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8018138:	687b      	ldr	r3, [r7, #4]
 801813a:	681b      	ldr	r3, [r3, #0]
 801813c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8018140:	681b      	ldr	r3, [r3, #0]
 8018142:	687a      	ldr	r2, [r7, #4]
 8018144:	6812      	ldr	r2, [r2, #0]
 8018146:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 801814a:	f043 0301 	orr.w	r3, r3, #1
 801814e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8018150:	687b      	ldr	r3, [r7, #4]
 8018152:	7adb      	ldrb	r3, [r3, #11]
 8018154:	2b00      	cmp	r3, #0
 8018156:	d005      	beq.n	8018164 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8018158:	4b04      	ldr	r3, [pc, #16]	@ (801816c <HAL_PCD_SuspendCallback+0x48>)
 801815a:	691b      	ldr	r3, [r3, #16]
 801815c:	4a03      	ldr	r2, [pc, #12]	@ (801816c <HAL_PCD_SuspendCallback+0x48>)
 801815e:	f043 0306 	orr.w	r3, r3, #6
 8018162:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8018164:	bf00      	nop
 8018166:	3708      	adds	r7, #8
 8018168:	46bd      	mov	sp, r7
 801816a:	bd80      	pop	{r7, pc}
 801816c:	e000ed00 	.word	0xe000ed00

08018170 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018170:	b580      	push	{r7, lr}
 8018172:	b082      	sub	sp, #8
 8018174:	af00      	add	r7, sp, #0
 8018176:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8018178:	687b      	ldr	r3, [r7, #4]
 801817a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801817e:	4618      	mov	r0, r3
 8018180:	f7fe fc6b 	bl	8016a5a <USBD_LL_Resume>
}
 8018184:	bf00      	nop
 8018186:	3708      	adds	r7, #8
 8018188:	46bd      	mov	sp, r7
 801818a:	bd80      	pop	{r7, pc}

0801818c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801818c:	b580      	push	{r7, lr}
 801818e:	b082      	sub	sp, #8
 8018190:	af00      	add	r7, sp, #0
 8018192:	6078      	str	r0, [r7, #4]
 8018194:	460b      	mov	r3, r1
 8018196:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8018198:	687b      	ldr	r3, [r7, #4]
 801819a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801819e:	78fa      	ldrb	r2, [r7, #3]
 80181a0:	4611      	mov	r1, r2
 80181a2:	4618      	mov	r0, r3
 80181a4:	f7fe fcc3 	bl	8016b2e <USBD_LL_IsoOUTIncomplete>
}
 80181a8:	bf00      	nop
 80181aa:	3708      	adds	r7, #8
 80181ac:	46bd      	mov	sp, r7
 80181ae:	bd80      	pop	{r7, pc}

080181b0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80181b0:	b580      	push	{r7, lr}
 80181b2:	b082      	sub	sp, #8
 80181b4:	af00      	add	r7, sp, #0
 80181b6:	6078      	str	r0, [r7, #4]
 80181b8:	460b      	mov	r3, r1
 80181ba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80181bc:	687b      	ldr	r3, [r7, #4]
 80181be:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80181c2:	78fa      	ldrb	r2, [r7, #3]
 80181c4:	4611      	mov	r1, r2
 80181c6:	4618      	mov	r0, r3
 80181c8:	f7fe fc7f 	bl	8016aca <USBD_LL_IsoINIncomplete>
}
 80181cc:	bf00      	nop
 80181ce:	3708      	adds	r7, #8
 80181d0:	46bd      	mov	sp, r7
 80181d2:	bd80      	pop	{r7, pc}

080181d4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80181d4:	b580      	push	{r7, lr}
 80181d6:	b082      	sub	sp, #8
 80181d8:	af00      	add	r7, sp, #0
 80181da:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80181dc:	687b      	ldr	r3, [r7, #4]
 80181de:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80181e2:	4618      	mov	r0, r3
 80181e4:	f7fe fcd5 	bl	8016b92 <USBD_LL_DevConnected>
}
 80181e8:	bf00      	nop
 80181ea:	3708      	adds	r7, #8
 80181ec:	46bd      	mov	sp, r7
 80181ee:	bd80      	pop	{r7, pc}

080181f0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80181f0:	b580      	push	{r7, lr}
 80181f2:	b082      	sub	sp, #8
 80181f4:	af00      	add	r7, sp, #0
 80181f6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80181f8:	687b      	ldr	r3, [r7, #4]
 80181fa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80181fe:	4618      	mov	r0, r3
 8018200:	f7fe fcd2 	bl	8016ba8 <USBD_LL_DevDisconnected>
}
 8018204:	bf00      	nop
 8018206:	3708      	adds	r7, #8
 8018208:	46bd      	mov	sp, r7
 801820a:	bd80      	pop	{r7, pc}

0801820c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801820c:	b580      	push	{r7, lr}
 801820e:	b082      	sub	sp, #8
 8018210:	af00      	add	r7, sp, #0
 8018212:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8018214:	687b      	ldr	r3, [r7, #4]
 8018216:	781b      	ldrb	r3, [r3, #0]
 8018218:	2b00      	cmp	r3, #0
 801821a:	d13e      	bne.n	801829a <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 801821c:	4a21      	ldr	r2, [pc, #132]	@ (80182a4 <USBD_LL_Init+0x98>)
 801821e:	687b      	ldr	r3, [r7, #4]
 8018220:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8018224:	687b      	ldr	r3, [r7, #4]
 8018226:	4a1f      	ldr	r2, [pc, #124]	@ (80182a4 <USBD_LL_Init+0x98>)
 8018228:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801822c:	4b1d      	ldr	r3, [pc, #116]	@ (80182a4 <USBD_LL_Init+0x98>)
 801822e:	4a1e      	ldr	r2, [pc, #120]	@ (80182a8 <USBD_LL_Init+0x9c>)
 8018230:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8018232:	4b1c      	ldr	r3, [pc, #112]	@ (80182a4 <USBD_LL_Init+0x98>)
 8018234:	2209      	movs	r2, #9
 8018236:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8018238:	4b1a      	ldr	r3, [pc, #104]	@ (80182a4 <USBD_LL_Init+0x98>)
 801823a:	2202      	movs	r2, #2
 801823c:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801823e:	4b19      	ldr	r3, [pc, #100]	@ (80182a4 <USBD_LL_Init+0x98>)
 8018240:	2200      	movs	r2, #0
 8018242:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8018244:	4b17      	ldr	r3, [pc, #92]	@ (80182a4 <USBD_LL_Init+0x98>)
 8018246:	2202      	movs	r2, #2
 8018248:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801824a:	4b16      	ldr	r3, [pc, #88]	@ (80182a4 <USBD_LL_Init+0x98>)
 801824c:	2200      	movs	r2, #0
 801824e:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8018250:	4b14      	ldr	r3, [pc, #80]	@ (80182a4 <USBD_LL_Init+0x98>)
 8018252:	2200      	movs	r2, #0
 8018254:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8018256:	4b13      	ldr	r3, [pc, #76]	@ (80182a4 <USBD_LL_Init+0x98>)
 8018258:	2200      	movs	r2, #0
 801825a:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 801825c:	4b11      	ldr	r3, [pc, #68]	@ (80182a4 <USBD_LL_Init+0x98>)
 801825e:	2200      	movs	r2, #0
 8018260:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8018262:	4b10      	ldr	r3, [pc, #64]	@ (80182a4 <USBD_LL_Init+0x98>)
 8018264:	2200      	movs	r2, #0
 8018266:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8018268:	4b0e      	ldr	r3, [pc, #56]	@ (80182a4 <USBD_LL_Init+0x98>)
 801826a:	2200      	movs	r2, #0
 801826c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801826e:	480d      	ldr	r0, [pc, #52]	@ (80182a4 <USBD_LL_Init+0x98>)
 8018270:	f7f3 fcc4 	bl	800bbfc <HAL_PCD_Init>
 8018274:	4603      	mov	r3, r0
 8018276:	2b00      	cmp	r3, #0
 8018278:	d001      	beq.n	801827e <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 801827a:	f7ea f833 	bl	80022e4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801827e:	2180      	movs	r1, #128	@ 0x80
 8018280:	4808      	ldr	r0, [pc, #32]	@ (80182a4 <USBD_LL_Init+0x98>)
 8018282:	f7f4 ff1a 	bl	800d0ba <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8018286:	2240      	movs	r2, #64	@ 0x40
 8018288:	2100      	movs	r1, #0
 801828a:	4806      	ldr	r0, [pc, #24]	@ (80182a4 <USBD_LL_Init+0x98>)
 801828c:	f7f4 fece 	bl	800d02c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8018290:	2280      	movs	r2, #128	@ 0x80
 8018292:	2101      	movs	r1, #1
 8018294:	4803      	ldr	r0, [pc, #12]	@ (80182a4 <USBD_LL_Init+0x98>)
 8018296:	f7f4 fec9 	bl	800d02c <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 801829a:	2300      	movs	r3, #0
}
 801829c:	4618      	mov	r0, r3
 801829e:	3708      	adds	r7, #8
 80182a0:	46bd      	mov	sp, r7
 80182a2:	bd80      	pop	{r7, pc}
 80182a4:	2402724c 	.word	0x2402724c
 80182a8:	40080000 	.word	0x40080000

080182ac <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80182ac:	b580      	push	{r7, lr}
 80182ae:	b084      	sub	sp, #16
 80182b0:	af00      	add	r7, sp, #0
 80182b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80182b4:	2300      	movs	r3, #0
 80182b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80182b8:	2300      	movs	r3, #0
 80182ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80182bc:	687b      	ldr	r3, [r7, #4]
 80182be:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80182c2:	4618      	mov	r0, r3
 80182c4:	f7f3 fda6 	bl	800be14 <HAL_PCD_Start>
 80182c8:	4603      	mov	r3, r0
 80182ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80182cc:	7bfb      	ldrb	r3, [r7, #15]
 80182ce:	4618      	mov	r0, r3
 80182d0:	f000 f942 	bl	8018558 <USBD_Get_USB_Status>
 80182d4:	4603      	mov	r3, r0
 80182d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80182d8:	7bbb      	ldrb	r3, [r7, #14]
}
 80182da:	4618      	mov	r0, r3
 80182dc:	3710      	adds	r7, #16
 80182de:	46bd      	mov	sp, r7
 80182e0:	bd80      	pop	{r7, pc}

080182e2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80182e2:	b580      	push	{r7, lr}
 80182e4:	b084      	sub	sp, #16
 80182e6:	af00      	add	r7, sp, #0
 80182e8:	6078      	str	r0, [r7, #4]
 80182ea:	4608      	mov	r0, r1
 80182ec:	4611      	mov	r1, r2
 80182ee:	461a      	mov	r2, r3
 80182f0:	4603      	mov	r3, r0
 80182f2:	70fb      	strb	r3, [r7, #3]
 80182f4:	460b      	mov	r3, r1
 80182f6:	70bb      	strb	r3, [r7, #2]
 80182f8:	4613      	mov	r3, r2
 80182fa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80182fc:	2300      	movs	r3, #0
 80182fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018300:	2300      	movs	r3, #0
 8018302:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8018304:	687b      	ldr	r3, [r7, #4]
 8018306:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801830a:	78bb      	ldrb	r3, [r7, #2]
 801830c:	883a      	ldrh	r2, [r7, #0]
 801830e:	78f9      	ldrb	r1, [r7, #3]
 8018310:	f7f4 faa7 	bl	800c862 <HAL_PCD_EP_Open>
 8018314:	4603      	mov	r3, r0
 8018316:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018318:	7bfb      	ldrb	r3, [r7, #15]
 801831a:	4618      	mov	r0, r3
 801831c:	f000 f91c 	bl	8018558 <USBD_Get_USB_Status>
 8018320:	4603      	mov	r3, r0
 8018322:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018324:	7bbb      	ldrb	r3, [r7, #14]
}
 8018326:	4618      	mov	r0, r3
 8018328:	3710      	adds	r7, #16
 801832a:	46bd      	mov	sp, r7
 801832c:	bd80      	pop	{r7, pc}

0801832e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801832e:	b580      	push	{r7, lr}
 8018330:	b084      	sub	sp, #16
 8018332:	af00      	add	r7, sp, #0
 8018334:	6078      	str	r0, [r7, #4]
 8018336:	460b      	mov	r3, r1
 8018338:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801833a:	2300      	movs	r3, #0
 801833c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801833e:	2300      	movs	r3, #0
 8018340:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8018342:	687b      	ldr	r3, [r7, #4]
 8018344:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8018348:	78fa      	ldrb	r2, [r7, #3]
 801834a:	4611      	mov	r1, r2
 801834c:	4618      	mov	r0, r3
 801834e:	f7f4 faf2 	bl	800c936 <HAL_PCD_EP_Close>
 8018352:	4603      	mov	r3, r0
 8018354:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018356:	7bfb      	ldrb	r3, [r7, #15]
 8018358:	4618      	mov	r0, r3
 801835a:	f000 f8fd 	bl	8018558 <USBD_Get_USB_Status>
 801835e:	4603      	mov	r3, r0
 8018360:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018362:	7bbb      	ldrb	r3, [r7, #14]
}
 8018364:	4618      	mov	r0, r3
 8018366:	3710      	adds	r7, #16
 8018368:	46bd      	mov	sp, r7
 801836a:	bd80      	pop	{r7, pc}

0801836c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801836c:	b580      	push	{r7, lr}
 801836e:	b084      	sub	sp, #16
 8018370:	af00      	add	r7, sp, #0
 8018372:	6078      	str	r0, [r7, #4]
 8018374:	460b      	mov	r3, r1
 8018376:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018378:	2300      	movs	r3, #0
 801837a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801837c:	2300      	movs	r3, #0
 801837e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8018380:	687b      	ldr	r3, [r7, #4]
 8018382:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8018386:	78fa      	ldrb	r2, [r7, #3]
 8018388:	4611      	mov	r1, r2
 801838a:	4618      	mov	r0, r3
 801838c:	f7f4 fbaa 	bl	800cae4 <HAL_PCD_EP_SetStall>
 8018390:	4603      	mov	r3, r0
 8018392:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018394:	7bfb      	ldrb	r3, [r7, #15]
 8018396:	4618      	mov	r0, r3
 8018398:	f000 f8de 	bl	8018558 <USBD_Get_USB_Status>
 801839c:	4603      	mov	r3, r0
 801839e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80183a0:	7bbb      	ldrb	r3, [r7, #14]
}
 80183a2:	4618      	mov	r0, r3
 80183a4:	3710      	adds	r7, #16
 80183a6:	46bd      	mov	sp, r7
 80183a8:	bd80      	pop	{r7, pc}

080183aa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80183aa:	b580      	push	{r7, lr}
 80183ac:	b084      	sub	sp, #16
 80183ae:	af00      	add	r7, sp, #0
 80183b0:	6078      	str	r0, [r7, #4]
 80183b2:	460b      	mov	r3, r1
 80183b4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80183b6:	2300      	movs	r3, #0
 80183b8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80183ba:	2300      	movs	r3, #0
 80183bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80183be:	687b      	ldr	r3, [r7, #4]
 80183c0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80183c4:	78fa      	ldrb	r2, [r7, #3]
 80183c6:	4611      	mov	r1, r2
 80183c8:	4618      	mov	r0, r3
 80183ca:	f7f4 fbee 	bl	800cbaa <HAL_PCD_EP_ClrStall>
 80183ce:	4603      	mov	r3, r0
 80183d0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80183d2:	7bfb      	ldrb	r3, [r7, #15]
 80183d4:	4618      	mov	r0, r3
 80183d6:	f000 f8bf 	bl	8018558 <USBD_Get_USB_Status>
 80183da:	4603      	mov	r3, r0
 80183dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80183de:	7bbb      	ldrb	r3, [r7, #14]
}
 80183e0:	4618      	mov	r0, r3
 80183e2:	3710      	adds	r7, #16
 80183e4:	46bd      	mov	sp, r7
 80183e6:	bd80      	pop	{r7, pc}

080183e8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80183e8:	b480      	push	{r7}
 80183ea:	b085      	sub	sp, #20
 80183ec:	af00      	add	r7, sp, #0
 80183ee:	6078      	str	r0, [r7, #4]
 80183f0:	460b      	mov	r3, r1
 80183f2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80183f4:	687b      	ldr	r3, [r7, #4]
 80183f6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80183fa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80183fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8018400:	2b00      	cmp	r3, #0
 8018402:	da0b      	bge.n	801841c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8018404:	78fb      	ldrb	r3, [r7, #3]
 8018406:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801840a:	68f9      	ldr	r1, [r7, #12]
 801840c:	4613      	mov	r3, r2
 801840e:	00db      	lsls	r3, r3, #3
 8018410:	4413      	add	r3, r2
 8018412:	009b      	lsls	r3, r3, #2
 8018414:	440b      	add	r3, r1
 8018416:	3316      	adds	r3, #22
 8018418:	781b      	ldrb	r3, [r3, #0]
 801841a:	e00b      	b.n	8018434 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801841c:	78fb      	ldrb	r3, [r7, #3]
 801841e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8018422:	68f9      	ldr	r1, [r7, #12]
 8018424:	4613      	mov	r3, r2
 8018426:	00db      	lsls	r3, r3, #3
 8018428:	4413      	add	r3, r2
 801842a:	009b      	lsls	r3, r3, #2
 801842c:	440b      	add	r3, r1
 801842e:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8018432:	781b      	ldrb	r3, [r3, #0]
  }
}
 8018434:	4618      	mov	r0, r3
 8018436:	3714      	adds	r7, #20
 8018438:	46bd      	mov	sp, r7
 801843a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801843e:	4770      	bx	lr

08018440 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8018440:	b580      	push	{r7, lr}
 8018442:	b084      	sub	sp, #16
 8018444:	af00      	add	r7, sp, #0
 8018446:	6078      	str	r0, [r7, #4]
 8018448:	460b      	mov	r3, r1
 801844a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801844c:	2300      	movs	r3, #0
 801844e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018450:	2300      	movs	r3, #0
 8018452:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8018454:	687b      	ldr	r3, [r7, #4]
 8018456:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801845a:	78fa      	ldrb	r2, [r7, #3]
 801845c:	4611      	mov	r1, r2
 801845e:	4618      	mov	r0, r3
 8018460:	f7f4 f9db 	bl	800c81a <HAL_PCD_SetAddress>
 8018464:	4603      	mov	r3, r0
 8018466:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018468:	7bfb      	ldrb	r3, [r7, #15]
 801846a:	4618      	mov	r0, r3
 801846c:	f000 f874 	bl	8018558 <USBD_Get_USB_Status>
 8018470:	4603      	mov	r3, r0
 8018472:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018474:	7bbb      	ldrb	r3, [r7, #14]
}
 8018476:	4618      	mov	r0, r3
 8018478:	3710      	adds	r7, #16
 801847a:	46bd      	mov	sp, r7
 801847c:	bd80      	pop	{r7, pc}

0801847e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801847e:	b580      	push	{r7, lr}
 8018480:	b086      	sub	sp, #24
 8018482:	af00      	add	r7, sp, #0
 8018484:	60f8      	str	r0, [r7, #12]
 8018486:	607a      	str	r2, [r7, #4]
 8018488:	603b      	str	r3, [r7, #0]
 801848a:	460b      	mov	r3, r1
 801848c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801848e:	2300      	movs	r3, #0
 8018490:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018492:	2300      	movs	r3, #0
 8018494:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8018496:	68fb      	ldr	r3, [r7, #12]
 8018498:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801849c:	7af9      	ldrb	r1, [r7, #11]
 801849e:	683b      	ldr	r3, [r7, #0]
 80184a0:	687a      	ldr	r2, [r7, #4]
 80184a2:	f7f4 fae5 	bl	800ca70 <HAL_PCD_EP_Transmit>
 80184a6:	4603      	mov	r3, r0
 80184a8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80184aa:	7dfb      	ldrb	r3, [r7, #23]
 80184ac:	4618      	mov	r0, r3
 80184ae:	f000 f853 	bl	8018558 <USBD_Get_USB_Status>
 80184b2:	4603      	mov	r3, r0
 80184b4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80184b6:	7dbb      	ldrb	r3, [r7, #22]
}
 80184b8:	4618      	mov	r0, r3
 80184ba:	3718      	adds	r7, #24
 80184bc:	46bd      	mov	sp, r7
 80184be:	bd80      	pop	{r7, pc}

080184c0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80184c0:	b580      	push	{r7, lr}
 80184c2:	b086      	sub	sp, #24
 80184c4:	af00      	add	r7, sp, #0
 80184c6:	60f8      	str	r0, [r7, #12]
 80184c8:	607a      	str	r2, [r7, #4]
 80184ca:	603b      	str	r3, [r7, #0]
 80184cc:	460b      	mov	r3, r1
 80184ce:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80184d0:	2300      	movs	r3, #0
 80184d2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80184d4:	2300      	movs	r3, #0
 80184d6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80184d8:	68fb      	ldr	r3, [r7, #12]
 80184da:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80184de:	7af9      	ldrb	r1, [r7, #11]
 80184e0:	683b      	ldr	r3, [r7, #0]
 80184e2:	687a      	ldr	r2, [r7, #4]
 80184e4:	f7f4 fa71 	bl	800c9ca <HAL_PCD_EP_Receive>
 80184e8:	4603      	mov	r3, r0
 80184ea:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80184ec:	7dfb      	ldrb	r3, [r7, #23]
 80184ee:	4618      	mov	r0, r3
 80184f0:	f000 f832 	bl	8018558 <USBD_Get_USB_Status>
 80184f4:	4603      	mov	r3, r0
 80184f6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80184f8:	7dbb      	ldrb	r3, [r7, #22]
}
 80184fa:	4618      	mov	r0, r3
 80184fc:	3718      	adds	r7, #24
 80184fe:	46bd      	mov	sp, r7
 8018500:	bd80      	pop	{r7, pc}

08018502 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018502:	b580      	push	{r7, lr}
 8018504:	b082      	sub	sp, #8
 8018506:	af00      	add	r7, sp, #0
 8018508:	6078      	str	r0, [r7, #4]
 801850a:	460b      	mov	r3, r1
 801850c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801850e:	687b      	ldr	r3, [r7, #4]
 8018510:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8018514:	78fa      	ldrb	r2, [r7, #3]
 8018516:	4611      	mov	r1, r2
 8018518:	4618      	mov	r0, r3
 801851a:	f7f4 fa91 	bl	800ca40 <HAL_PCD_EP_GetRxCount>
 801851e:	4603      	mov	r3, r0
}
 8018520:	4618      	mov	r0, r3
 8018522:	3708      	adds	r7, #8
 8018524:	46bd      	mov	sp, r7
 8018526:	bd80      	pop	{r7, pc}

08018528 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8018528:	b480      	push	{r7}
 801852a:	b083      	sub	sp, #12
 801852c:	af00      	add	r7, sp, #0
 801852e:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8018530:	4b03      	ldr	r3, [pc, #12]	@ (8018540 <USBD_static_malloc+0x18>)
}
 8018532:	4618      	mov	r0, r3
 8018534:	370c      	adds	r7, #12
 8018536:	46bd      	mov	sp, r7
 8018538:	f85d 7b04 	ldr.w	r7, [sp], #4
 801853c:	4770      	bx	lr
 801853e:	bf00      	nop
 8018540:	24027730 	.word	0x24027730

08018544 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8018544:	b480      	push	{r7}
 8018546:	b083      	sub	sp, #12
 8018548:	af00      	add	r7, sp, #0
 801854a:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 801854c:	bf00      	nop
 801854e:	370c      	adds	r7, #12
 8018550:	46bd      	mov	sp, r7
 8018552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018556:	4770      	bx	lr

08018558 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8018558:	b480      	push	{r7}
 801855a:	b085      	sub	sp, #20
 801855c:	af00      	add	r7, sp, #0
 801855e:	4603      	mov	r3, r0
 8018560:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018562:	2300      	movs	r3, #0
 8018564:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8018566:	79fb      	ldrb	r3, [r7, #7]
 8018568:	2b03      	cmp	r3, #3
 801856a:	d817      	bhi.n	801859c <USBD_Get_USB_Status+0x44>
 801856c:	a201      	add	r2, pc, #4	@ (adr r2, 8018574 <USBD_Get_USB_Status+0x1c>)
 801856e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018572:	bf00      	nop
 8018574:	08018585 	.word	0x08018585
 8018578:	0801858b 	.word	0x0801858b
 801857c:	08018591 	.word	0x08018591
 8018580:	08018597 	.word	0x08018597
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8018584:	2300      	movs	r3, #0
 8018586:	73fb      	strb	r3, [r7, #15]
    break;
 8018588:	e00b      	b.n	80185a2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801858a:	2303      	movs	r3, #3
 801858c:	73fb      	strb	r3, [r7, #15]
    break;
 801858e:	e008      	b.n	80185a2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8018590:	2301      	movs	r3, #1
 8018592:	73fb      	strb	r3, [r7, #15]
    break;
 8018594:	e005      	b.n	80185a2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8018596:	2303      	movs	r3, #3
 8018598:	73fb      	strb	r3, [r7, #15]
    break;
 801859a:	e002      	b.n	80185a2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801859c:	2303      	movs	r3, #3
 801859e:	73fb      	strb	r3, [r7, #15]
    break;
 80185a0:	bf00      	nop
  }
  return usb_status;
 80185a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80185a4:	4618      	mov	r0, r3
 80185a6:	3714      	adds	r7, #20
 80185a8:	46bd      	mov	sp, r7
 80185aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185ae:	4770      	bx	lr

080185b0 <malloc>:
 80185b0:	4b02      	ldr	r3, [pc, #8]	@ (80185bc <malloc+0xc>)
 80185b2:	4601      	mov	r1, r0
 80185b4:	6818      	ldr	r0, [r3, #0]
 80185b6:	f000 b825 	b.w	8018604 <_malloc_r>
 80185ba:	bf00      	nop
 80185bc:	24000128 	.word	0x24000128

080185c0 <sbrk_aligned>:
 80185c0:	b570      	push	{r4, r5, r6, lr}
 80185c2:	4e0f      	ldr	r6, [pc, #60]	@ (8018600 <sbrk_aligned+0x40>)
 80185c4:	460c      	mov	r4, r1
 80185c6:	6831      	ldr	r1, [r6, #0]
 80185c8:	4605      	mov	r5, r0
 80185ca:	b911      	cbnz	r1, 80185d2 <sbrk_aligned+0x12>
 80185cc:	f000 fe82 	bl	80192d4 <_sbrk_r>
 80185d0:	6030      	str	r0, [r6, #0]
 80185d2:	4621      	mov	r1, r4
 80185d4:	4628      	mov	r0, r5
 80185d6:	f000 fe7d 	bl	80192d4 <_sbrk_r>
 80185da:	1c43      	adds	r3, r0, #1
 80185dc:	d103      	bne.n	80185e6 <sbrk_aligned+0x26>
 80185de:	f04f 34ff 	mov.w	r4, #4294967295
 80185e2:	4620      	mov	r0, r4
 80185e4:	bd70      	pop	{r4, r5, r6, pc}
 80185e6:	1cc4      	adds	r4, r0, #3
 80185e8:	f024 0403 	bic.w	r4, r4, #3
 80185ec:	42a0      	cmp	r0, r4
 80185ee:	d0f8      	beq.n	80185e2 <sbrk_aligned+0x22>
 80185f0:	1a21      	subs	r1, r4, r0
 80185f2:	4628      	mov	r0, r5
 80185f4:	f000 fe6e 	bl	80192d4 <_sbrk_r>
 80185f8:	3001      	adds	r0, #1
 80185fa:	d1f2      	bne.n	80185e2 <sbrk_aligned+0x22>
 80185fc:	e7ef      	b.n	80185de <sbrk_aligned+0x1e>
 80185fe:	bf00      	nop
 8018600:	24027950 	.word	0x24027950

08018604 <_malloc_r>:
 8018604:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018608:	1ccd      	adds	r5, r1, #3
 801860a:	f025 0503 	bic.w	r5, r5, #3
 801860e:	3508      	adds	r5, #8
 8018610:	2d0c      	cmp	r5, #12
 8018612:	bf38      	it	cc
 8018614:	250c      	movcc	r5, #12
 8018616:	2d00      	cmp	r5, #0
 8018618:	4606      	mov	r6, r0
 801861a:	db01      	blt.n	8018620 <_malloc_r+0x1c>
 801861c:	42a9      	cmp	r1, r5
 801861e:	d904      	bls.n	801862a <_malloc_r+0x26>
 8018620:	230c      	movs	r3, #12
 8018622:	6033      	str	r3, [r6, #0]
 8018624:	2000      	movs	r0, #0
 8018626:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801862a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8018700 <_malloc_r+0xfc>
 801862e:	f000 f869 	bl	8018704 <__malloc_lock>
 8018632:	f8d8 3000 	ldr.w	r3, [r8]
 8018636:	461c      	mov	r4, r3
 8018638:	bb44      	cbnz	r4, 801868c <_malloc_r+0x88>
 801863a:	4629      	mov	r1, r5
 801863c:	4630      	mov	r0, r6
 801863e:	f7ff ffbf 	bl	80185c0 <sbrk_aligned>
 8018642:	1c43      	adds	r3, r0, #1
 8018644:	4604      	mov	r4, r0
 8018646:	d158      	bne.n	80186fa <_malloc_r+0xf6>
 8018648:	f8d8 4000 	ldr.w	r4, [r8]
 801864c:	4627      	mov	r7, r4
 801864e:	2f00      	cmp	r7, #0
 8018650:	d143      	bne.n	80186da <_malloc_r+0xd6>
 8018652:	2c00      	cmp	r4, #0
 8018654:	d04b      	beq.n	80186ee <_malloc_r+0xea>
 8018656:	6823      	ldr	r3, [r4, #0]
 8018658:	4639      	mov	r1, r7
 801865a:	4630      	mov	r0, r6
 801865c:	eb04 0903 	add.w	r9, r4, r3
 8018660:	f000 fe38 	bl	80192d4 <_sbrk_r>
 8018664:	4581      	cmp	r9, r0
 8018666:	d142      	bne.n	80186ee <_malloc_r+0xea>
 8018668:	6821      	ldr	r1, [r4, #0]
 801866a:	1a6d      	subs	r5, r5, r1
 801866c:	4629      	mov	r1, r5
 801866e:	4630      	mov	r0, r6
 8018670:	f7ff ffa6 	bl	80185c0 <sbrk_aligned>
 8018674:	3001      	adds	r0, #1
 8018676:	d03a      	beq.n	80186ee <_malloc_r+0xea>
 8018678:	6823      	ldr	r3, [r4, #0]
 801867a:	442b      	add	r3, r5
 801867c:	6023      	str	r3, [r4, #0]
 801867e:	f8d8 3000 	ldr.w	r3, [r8]
 8018682:	685a      	ldr	r2, [r3, #4]
 8018684:	bb62      	cbnz	r2, 80186e0 <_malloc_r+0xdc>
 8018686:	f8c8 7000 	str.w	r7, [r8]
 801868a:	e00f      	b.n	80186ac <_malloc_r+0xa8>
 801868c:	6822      	ldr	r2, [r4, #0]
 801868e:	1b52      	subs	r2, r2, r5
 8018690:	d420      	bmi.n	80186d4 <_malloc_r+0xd0>
 8018692:	2a0b      	cmp	r2, #11
 8018694:	d917      	bls.n	80186c6 <_malloc_r+0xc2>
 8018696:	1961      	adds	r1, r4, r5
 8018698:	42a3      	cmp	r3, r4
 801869a:	6025      	str	r5, [r4, #0]
 801869c:	bf18      	it	ne
 801869e:	6059      	strne	r1, [r3, #4]
 80186a0:	6863      	ldr	r3, [r4, #4]
 80186a2:	bf08      	it	eq
 80186a4:	f8c8 1000 	streq.w	r1, [r8]
 80186a8:	5162      	str	r2, [r4, r5]
 80186aa:	604b      	str	r3, [r1, #4]
 80186ac:	4630      	mov	r0, r6
 80186ae:	f000 f82f 	bl	8018710 <__malloc_unlock>
 80186b2:	f104 000b 	add.w	r0, r4, #11
 80186b6:	1d23      	adds	r3, r4, #4
 80186b8:	f020 0007 	bic.w	r0, r0, #7
 80186bc:	1ac2      	subs	r2, r0, r3
 80186be:	bf1c      	itt	ne
 80186c0:	1a1b      	subne	r3, r3, r0
 80186c2:	50a3      	strne	r3, [r4, r2]
 80186c4:	e7af      	b.n	8018626 <_malloc_r+0x22>
 80186c6:	6862      	ldr	r2, [r4, #4]
 80186c8:	42a3      	cmp	r3, r4
 80186ca:	bf0c      	ite	eq
 80186cc:	f8c8 2000 	streq.w	r2, [r8]
 80186d0:	605a      	strne	r2, [r3, #4]
 80186d2:	e7eb      	b.n	80186ac <_malloc_r+0xa8>
 80186d4:	4623      	mov	r3, r4
 80186d6:	6864      	ldr	r4, [r4, #4]
 80186d8:	e7ae      	b.n	8018638 <_malloc_r+0x34>
 80186da:	463c      	mov	r4, r7
 80186dc:	687f      	ldr	r7, [r7, #4]
 80186de:	e7b6      	b.n	801864e <_malloc_r+0x4a>
 80186e0:	461a      	mov	r2, r3
 80186e2:	685b      	ldr	r3, [r3, #4]
 80186e4:	42a3      	cmp	r3, r4
 80186e6:	d1fb      	bne.n	80186e0 <_malloc_r+0xdc>
 80186e8:	2300      	movs	r3, #0
 80186ea:	6053      	str	r3, [r2, #4]
 80186ec:	e7de      	b.n	80186ac <_malloc_r+0xa8>
 80186ee:	230c      	movs	r3, #12
 80186f0:	6033      	str	r3, [r6, #0]
 80186f2:	4630      	mov	r0, r6
 80186f4:	f000 f80c 	bl	8018710 <__malloc_unlock>
 80186f8:	e794      	b.n	8018624 <_malloc_r+0x20>
 80186fa:	6005      	str	r5, [r0, #0]
 80186fc:	e7d6      	b.n	80186ac <_malloc_r+0xa8>
 80186fe:	bf00      	nop
 8018700:	24027954 	.word	0x24027954

08018704 <__malloc_lock>:
 8018704:	4801      	ldr	r0, [pc, #4]	@ (801870c <__malloc_lock+0x8>)
 8018706:	f000 be32 	b.w	801936e <__retarget_lock_acquire_recursive>
 801870a:	bf00      	nop
 801870c:	24027a98 	.word	0x24027a98

08018710 <__malloc_unlock>:
 8018710:	4801      	ldr	r0, [pc, #4]	@ (8018718 <__malloc_unlock+0x8>)
 8018712:	f000 be2d 	b.w	8019370 <__retarget_lock_release_recursive>
 8018716:	bf00      	nop
 8018718:	24027a98 	.word	0x24027a98

0801871c <rand>:
 801871c:	4b16      	ldr	r3, [pc, #88]	@ (8018778 <rand+0x5c>)
 801871e:	b510      	push	{r4, lr}
 8018720:	681c      	ldr	r4, [r3, #0]
 8018722:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8018724:	b9b3      	cbnz	r3, 8018754 <rand+0x38>
 8018726:	2018      	movs	r0, #24
 8018728:	f7ff ff42 	bl	80185b0 <malloc>
 801872c:	4602      	mov	r2, r0
 801872e:	6320      	str	r0, [r4, #48]	@ 0x30
 8018730:	b920      	cbnz	r0, 801873c <rand+0x20>
 8018732:	4b12      	ldr	r3, [pc, #72]	@ (801877c <rand+0x60>)
 8018734:	4812      	ldr	r0, [pc, #72]	@ (8018780 <rand+0x64>)
 8018736:	2152      	movs	r1, #82	@ 0x52
 8018738:	f000 fe2a 	bl	8019390 <__assert_func>
 801873c:	4911      	ldr	r1, [pc, #68]	@ (8018784 <rand+0x68>)
 801873e:	4b12      	ldr	r3, [pc, #72]	@ (8018788 <rand+0x6c>)
 8018740:	e9c0 1300 	strd	r1, r3, [r0]
 8018744:	4b11      	ldr	r3, [pc, #68]	@ (801878c <rand+0x70>)
 8018746:	6083      	str	r3, [r0, #8]
 8018748:	230b      	movs	r3, #11
 801874a:	8183      	strh	r3, [r0, #12]
 801874c:	2100      	movs	r1, #0
 801874e:	2001      	movs	r0, #1
 8018750:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8018754:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8018756:	480e      	ldr	r0, [pc, #56]	@ (8018790 <rand+0x74>)
 8018758:	690b      	ldr	r3, [r1, #16]
 801875a:	694c      	ldr	r4, [r1, #20]
 801875c:	4a0d      	ldr	r2, [pc, #52]	@ (8018794 <rand+0x78>)
 801875e:	4358      	muls	r0, r3
 8018760:	fb02 0004 	mla	r0, r2, r4, r0
 8018764:	fba3 3202 	umull	r3, r2, r3, r2
 8018768:	3301      	adds	r3, #1
 801876a:	eb40 0002 	adc.w	r0, r0, r2
 801876e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8018772:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8018776:	bd10      	pop	{r4, pc}
 8018778:	24000128 	.word	0x24000128
 801877c:	0801b6fc 	.word	0x0801b6fc
 8018780:	0801b713 	.word	0x0801b713
 8018784:	abcd330e 	.word	0xabcd330e
 8018788:	e66d1234 	.word	0xe66d1234
 801878c:	0005deec 	.word	0x0005deec
 8018790:	5851f42d 	.word	0x5851f42d
 8018794:	4c957f2d 	.word	0x4c957f2d

08018798 <__cvt>:
 8018798:	b5f0      	push	{r4, r5, r6, r7, lr}
 801879a:	ed2d 8b02 	vpush	{d8}
 801879e:	eeb0 8b40 	vmov.f64	d8, d0
 80187a2:	b085      	sub	sp, #20
 80187a4:	4617      	mov	r7, r2
 80187a6:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80187a8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80187aa:	ee18 2a90 	vmov	r2, s17
 80187ae:	f025 0520 	bic.w	r5, r5, #32
 80187b2:	2a00      	cmp	r2, #0
 80187b4:	bfb6      	itet	lt
 80187b6:	222d      	movlt	r2, #45	@ 0x2d
 80187b8:	2200      	movge	r2, #0
 80187ba:	eeb1 8b40 	vneglt.f64	d8, d0
 80187be:	2d46      	cmp	r5, #70	@ 0x46
 80187c0:	460c      	mov	r4, r1
 80187c2:	701a      	strb	r2, [r3, #0]
 80187c4:	d004      	beq.n	80187d0 <__cvt+0x38>
 80187c6:	2d45      	cmp	r5, #69	@ 0x45
 80187c8:	d100      	bne.n	80187cc <__cvt+0x34>
 80187ca:	3401      	adds	r4, #1
 80187cc:	2102      	movs	r1, #2
 80187ce:	e000      	b.n	80187d2 <__cvt+0x3a>
 80187d0:	2103      	movs	r1, #3
 80187d2:	ab03      	add	r3, sp, #12
 80187d4:	9301      	str	r3, [sp, #4]
 80187d6:	ab02      	add	r3, sp, #8
 80187d8:	9300      	str	r3, [sp, #0]
 80187da:	4622      	mov	r2, r4
 80187dc:	4633      	mov	r3, r6
 80187de:	eeb0 0b48 	vmov.f64	d0, d8
 80187e2:	f000 fe7d 	bl	80194e0 <_dtoa_r>
 80187e6:	2d47      	cmp	r5, #71	@ 0x47
 80187e8:	d114      	bne.n	8018814 <__cvt+0x7c>
 80187ea:	07fb      	lsls	r3, r7, #31
 80187ec:	d50a      	bpl.n	8018804 <__cvt+0x6c>
 80187ee:	1902      	adds	r2, r0, r4
 80187f0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80187f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80187f8:	bf08      	it	eq
 80187fa:	9203      	streq	r2, [sp, #12]
 80187fc:	2130      	movs	r1, #48	@ 0x30
 80187fe:	9b03      	ldr	r3, [sp, #12]
 8018800:	4293      	cmp	r3, r2
 8018802:	d319      	bcc.n	8018838 <__cvt+0xa0>
 8018804:	9b03      	ldr	r3, [sp, #12]
 8018806:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8018808:	1a1b      	subs	r3, r3, r0
 801880a:	6013      	str	r3, [r2, #0]
 801880c:	b005      	add	sp, #20
 801880e:	ecbd 8b02 	vpop	{d8}
 8018812:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018814:	2d46      	cmp	r5, #70	@ 0x46
 8018816:	eb00 0204 	add.w	r2, r0, r4
 801881a:	d1e9      	bne.n	80187f0 <__cvt+0x58>
 801881c:	7803      	ldrb	r3, [r0, #0]
 801881e:	2b30      	cmp	r3, #48	@ 0x30
 8018820:	d107      	bne.n	8018832 <__cvt+0x9a>
 8018822:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8018826:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801882a:	bf1c      	itt	ne
 801882c:	f1c4 0401 	rsbne	r4, r4, #1
 8018830:	6034      	strne	r4, [r6, #0]
 8018832:	6833      	ldr	r3, [r6, #0]
 8018834:	441a      	add	r2, r3
 8018836:	e7db      	b.n	80187f0 <__cvt+0x58>
 8018838:	1c5c      	adds	r4, r3, #1
 801883a:	9403      	str	r4, [sp, #12]
 801883c:	7019      	strb	r1, [r3, #0]
 801883e:	e7de      	b.n	80187fe <__cvt+0x66>

08018840 <__exponent>:
 8018840:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018842:	2900      	cmp	r1, #0
 8018844:	bfba      	itte	lt
 8018846:	4249      	neglt	r1, r1
 8018848:	232d      	movlt	r3, #45	@ 0x2d
 801884a:	232b      	movge	r3, #43	@ 0x2b
 801884c:	2909      	cmp	r1, #9
 801884e:	7002      	strb	r2, [r0, #0]
 8018850:	7043      	strb	r3, [r0, #1]
 8018852:	dd29      	ble.n	80188a8 <__exponent+0x68>
 8018854:	f10d 0307 	add.w	r3, sp, #7
 8018858:	461d      	mov	r5, r3
 801885a:	270a      	movs	r7, #10
 801885c:	461a      	mov	r2, r3
 801885e:	fbb1 f6f7 	udiv	r6, r1, r7
 8018862:	fb07 1416 	mls	r4, r7, r6, r1
 8018866:	3430      	adds	r4, #48	@ 0x30
 8018868:	f802 4c01 	strb.w	r4, [r2, #-1]
 801886c:	460c      	mov	r4, r1
 801886e:	2c63      	cmp	r4, #99	@ 0x63
 8018870:	f103 33ff 	add.w	r3, r3, #4294967295
 8018874:	4631      	mov	r1, r6
 8018876:	dcf1      	bgt.n	801885c <__exponent+0x1c>
 8018878:	3130      	adds	r1, #48	@ 0x30
 801887a:	1e94      	subs	r4, r2, #2
 801887c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8018880:	1c41      	adds	r1, r0, #1
 8018882:	4623      	mov	r3, r4
 8018884:	42ab      	cmp	r3, r5
 8018886:	d30a      	bcc.n	801889e <__exponent+0x5e>
 8018888:	f10d 0309 	add.w	r3, sp, #9
 801888c:	1a9b      	subs	r3, r3, r2
 801888e:	42ac      	cmp	r4, r5
 8018890:	bf88      	it	hi
 8018892:	2300      	movhi	r3, #0
 8018894:	3302      	adds	r3, #2
 8018896:	4403      	add	r3, r0
 8018898:	1a18      	subs	r0, r3, r0
 801889a:	b003      	add	sp, #12
 801889c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801889e:	f813 6b01 	ldrb.w	r6, [r3], #1
 80188a2:	f801 6f01 	strb.w	r6, [r1, #1]!
 80188a6:	e7ed      	b.n	8018884 <__exponent+0x44>
 80188a8:	2330      	movs	r3, #48	@ 0x30
 80188aa:	3130      	adds	r1, #48	@ 0x30
 80188ac:	7083      	strb	r3, [r0, #2]
 80188ae:	70c1      	strb	r1, [r0, #3]
 80188b0:	1d03      	adds	r3, r0, #4
 80188b2:	e7f1      	b.n	8018898 <__exponent+0x58>
 80188b4:	0000      	movs	r0, r0
	...

080188b8 <_printf_float>:
 80188b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80188bc:	b08d      	sub	sp, #52	@ 0x34
 80188be:	460c      	mov	r4, r1
 80188c0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80188c4:	4616      	mov	r6, r2
 80188c6:	461f      	mov	r7, r3
 80188c8:	4605      	mov	r5, r0
 80188ca:	f000 fccb 	bl	8019264 <_localeconv_r>
 80188ce:	f8d0 b000 	ldr.w	fp, [r0]
 80188d2:	4658      	mov	r0, fp
 80188d4:	f7e7 fd54 	bl	8000380 <strlen>
 80188d8:	2300      	movs	r3, #0
 80188da:	930a      	str	r3, [sp, #40]	@ 0x28
 80188dc:	f8d8 3000 	ldr.w	r3, [r8]
 80188e0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80188e4:	6822      	ldr	r2, [r4, #0]
 80188e6:	9005      	str	r0, [sp, #20]
 80188e8:	3307      	adds	r3, #7
 80188ea:	f023 0307 	bic.w	r3, r3, #7
 80188ee:	f103 0108 	add.w	r1, r3, #8
 80188f2:	f8c8 1000 	str.w	r1, [r8]
 80188f6:	ed93 0b00 	vldr	d0, [r3]
 80188fa:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8018b58 <_printf_float+0x2a0>
 80188fe:	eeb0 7bc0 	vabs.f64	d7, d0
 8018902:	eeb4 7b46 	vcmp.f64	d7, d6
 8018906:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801890a:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 801890e:	dd24      	ble.n	801895a <_printf_float+0xa2>
 8018910:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8018914:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018918:	d502      	bpl.n	8018920 <_printf_float+0x68>
 801891a:	232d      	movs	r3, #45	@ 0x2d
 801891c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8018920:	498f      	ldr	r1, [pc, #572]	@ (8018b60 <_printf_float+0x2a8>)
 8018922:	4b90      	ldr	r3, [pc, #576]	@ (8018b64 <_printf_float+0x2ac>)
 8018924:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8018928:	bf8c      	ite	hi
 801892a:	4688      	movhi	r8, r1
 801892c:	4698      	movls	r8, r3
 801892e:	f022 0204 	bic.w	r2, r2, #4
 8018932:	2303      	movs	r3, #3
 8018934:	6123      	str	r3, [r4, #16]
 8018936:	6022      	str	r2, [r4, #0]
 8018938:	f04f 0a00 	mov.w	sl, #0
 801893c:	9700      	str	r7, [sp, #0]
 801893e:	4633      	mov	r3, r6
 8018940:	aa0b      	add	r2, sp, #44	@ 0x2c
 8018942:	4621      	mov	r1, r4
 8018944:	4628      	mov	r0, r5
 8018946:	f000 f9d1 	bl	8018cec <_printf_common>
 801894a:	3001      	adds	r0, #1
 801894c:	f040 8089 	bne.w	8018a62 <_printf_float+0x1aa>
 8018950:	f04f 30ff 	mov.w	r0, #4294967295
 8018954:	b00d      	add	sp, #52	@ 0x34
 8018956:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801895a:	eeb4 0b40 	vcmp.f64	d0, d0
 801895e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018962:	d709      	bvc.n	8018978 <_printf_float+0xc0>
 8018964:	ee10 3a90 	vmov	r3, s1
 8018968:	2b00      	cmp	r3, #0
 801896a:	bfbc      	itt	lt
 801896c:	232d      	movlt	r3, #45	@ 0x2d
 801896e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8018972:	497d      	ldr	r1, [pc, #500]	@ (8018b68 <_printf_float+0x2b0>)
 8018974:	4b7d      	ldr	r3, [pc, #500]	@ (8018b6c <_printf_float+0x2b4>)
 8018976:	e7d5      	b.n	8018924 <_printf_float+0x6c>
 8018978:	6863      	ldr	r3, [r4, #4]
 801897a:	1c59      	adds	r1, r3, #1
 801897c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8018980:	d139      	bne.n	80189f6 <_printf_float+0x13e>
 8018982:	2306      	movs	r3, #6
 8018984:	6063      	str	r3, [r4, #4]
 8018986:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 801898a:	2300      	movs	r3, #0
 801898c:	6022      	str	r2, [r4, #0]
 801898e:	9303      	str	r3, [sp, #12]
 8018990:	ab0a      	add	r3, sp, #40	@ 0x28
 8018992:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8018996:	ab09      	add	r3, sp, #36	@ 0x24
 8018998:	9300      	str	r3, [sp, #0]
 801899a:	6861      	ldr	r1, [r4, #4]
 801899c:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80189a0:	4628      	mov	r0, r5
 80189a2:	f7ff fef9 	bl	8018798 <__cvt>
 80189a6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80189aa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80189ac:	4680      	mov	r8, r0
 80189ae:	d129      	bne.n	8018a04 <_printf_float+0x14c>
 80189b0:	1cc8      	adds	r0, r1, #3
 80189b2:	db02      	blt.n	80189ba <_printf_float+0x102>
 80189b4:	6863      	ldr	r3, [r4, #4]
 80189b6:	4299      	cmp	r1, r3
 80189b8:	dd41      	ble.n	8018a3e <_printf_float+0x186>
 80189ba:	f1a9 0902 	sub.w	r9, r9, #2
 80189be:	fa5f f989 	uxtb.w	r9, r9
 80189c2:	3901      	subs	r1, #1
 80189c4:	464a      	mov	r2, r9
 80189c6:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80189ca:	9109      	str	r1, [sp, #36]	@ 0x24
 80189cc:	f7ff ff38 	bl	8018840 <__exponent>
 80189d0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80189d2:	1813      	adds	r3, r2, r0
 80189d4:	2a01      	cmp	r2, #1
 80189d6:	4682      	mov	sl, r0
 80189d8:	6123      	str	r3, [r4, #16]
 80189da:	dc02      	bgt.n	80189e2 <_printf_float+0x12a>
 80189dc:	6822      	ldr	r2, [r4, #0]
 80189de:	07d2      	lsls	r2, r2, #31
 80189e0:	d501      	bpl.n	80189e6 <_printf_float+0x12e>
 80189e2:	3301      	adds	r3, #1
 80189e4:	6123      	str	r3, [r4, #16]
 80189e6:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80189ea:	2b00      	cmp	r3, #0
 80189ec:	d0a6      	beq.n	801893c <_printf_float+0x84>
 80189ee:	232d      	movs	r3, #45	@ 0x2d
 80189f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80189f4:	e7a2      	b.n	801893c <_printf_float+0x84>
 80189f6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80189fa:	d1c4      	bne.n	8018986 <_printf_float+0xce>
 80189fc:	2b00      	cmp	r3, #0
 80189fe:	d1c2      	bne.n	8018986 <_printf_float+0xce>
 8018a00:	2301      	movs	r3, #1
 8018a02:	e7bf      	b.n	8018984 <_printf_float+0xcc>
 8018a04:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8018a08:	d9db      	bls.n	80189c2 <_printf_float+0x10a>
 8018a0a:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8018a0e:	d118      	bne.n	8018a42 <_printf_float+0x18a>
 8018a10:	2900      	cmp	r1, #0
 8018a12:	6863      	ldr	r3, [r4, #4]
 8018a14:	dd0b      	ble.n	8018a2e <_printf_float+0x176>
 8018a16:	6121      	str	r1, [r4, #16]
 8018a18:	b913      	cbnz	r3, 8018a20 <_printf_float+0x168>
 8018a1a:	6822      	ldr	r2, [r4, #0]
 8018a1c:	07d0      	lsls	r0, r2, #31
 8018a1e:	d502      	bpl.n	8018a26 <_printf_float+0x16e>
 8018a20:	3301      	adds	r3, #1
 8018a22:	440b      	add	r3, r1
 8018a24:	6123      	str	r3, [r4, #16]
 8018a26:	65a1      	str	r1, [r4, #88]	@ 0x58
 8018a28:	f04f 0a00 	mov.w	sl, #0
 8018a2c:	e7db      	b.n	80189e6 <_printf_float+0x12e>
 8018a2e:	b913      	cbnz	r3, 8018a36 <_printf_float+0x17e>
 8018a30:	6822      	ldr	r2, [r4, #0]
 8018a32:	07d2      	lsls	r2, r2, #31
 8018a34:	d501      	bpl.n	8018a3a <_printf_float+0x182>
 8018a36:	3302      	adds	r3, #2
 8018a38:	e7f4      	b.n	8018a24 <_printf_float+0x16c>
 8018a3a:	2301      	movs	r3, #1
 8018a3c:	e7f2      	b.n	8018a24 <_printf_float+0x16c>
 8018a3e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8018a42:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8018a44:	4299      	cmp	r1, r3
 8018a46:	db05      	blt.n	8018a54 <_printf_float+0x19c>
 8018a48:	6823      	ldr	r3, [r4, #0]
 8018a4a:	6121      	str	r1, [r4, #16]
 8018a4c:	07d8      	lsls	r0, r3, #31
 8018a4e:	d5ea      	bpl.n	8018a26 <_printf_float+0x16e>
 8018a50:	1c4b      	adds	r3, r1, #1
 8018a52:	e7e7      	b.n	8018a24 <_printf_float+0x16c>
 8018a54:	2900      	cmp	r1, #0
 8018a56:	bfd4      	ite	le
 8018a58:	f1c1 0202 	rsble	r2, r1, #2
 8018a5c:	2201      	movgt	r2, #1
 8018a5e:	4413      	add	r3, r2
 8018a60:	e7e0      	b.n	8018a24 <_printf_float+0x16c>
 8018a62:	6823      	ldr	r3, [r4, #0]
 8018a64:	055a      	lsls	r2, r3, #21
 8018a66:	d407      	bmi.n	8018a78 <_printf_float+0x1c0>
 8018a68:	6923      	ldr	r3, [r4, #16]
 8018a6a:	4642      	mov	r2, r8
 8018a6c:	4631      	mov	r1, r6
 8018a6e:	4628      	mov	r0, r5
 8018a70:	47b8      	blx	r7
 8018a72:	3001      	adds	r0, #1
 8018a74:	d12a      	bne.n	8018acc <_printf_float+0x214>
 8018a76:	e76b      	b.n	8018950 <_printf_float+0x98>
 8018a78:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8018a7c:	f240 80e0 	bls.w	8018c40 <_printf_float+0x388>
 8018a80:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8018a84:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8018a88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018a8c:	d133      	bne.n	8018af6 <_printf_float+0x23e>
 8018a8e:	4a38      	ldr	r2, [pc, #224]	@ (8018b70 <_printf_float+0x2b8>)
 8018a90:	2301      	movs	r3, #1
 8018a92:	4631      	mov	r1, r6
 8018a94:	4628      	mov	r0, r5
 8018a96:	47b8      	blx	r7
 8018a98:	3001      	adds	r0, #1
 8018a9a:	f43f af59 	beq.w	8018950 <_printf_float+0x98>
 8018a9e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8018aa2:	4543      	cmp	r3, r8
 8018aa4:	db02      	blt.n	8018aac <_printf_float+0x1f4>
 8018aa6:	6823      	ldr	r3, [r4, #0]
 8018aa8:	07d8      	lsls	r0, r3, #31
 8018aaa:	d50f      	bpl.n	8018acc <_printf_float+0x214>
 8018aac:	9b05      	ldr	r3, [sp, #20]
 8018aae:	465a      	mov	r2, fp
 8018ab0:	4631      	mov	r1, r6
 8018ab2:	4628      	mov	r0, r5
 8018ab4:	47b8      	blx	r7
 8018ab6:	3001      	adds	r0, #1
 8018ab8:	f43f af4a 	beq.w	8018950 <_printf_float+0x98>
 8018abc:	f04f 0900 	mov.w	r9, #0
 8018ac0:	f108 38ff 	add.w	r8, r8, #4294967295
 8018ac4:	f104 0a1a 	add.w	sl, r4, #26
 8018ac8:	45c8      	cmp	r8, r9
 8018aca:	dc09      	bgt.n	8018ae0 <_printf_float+0x228>
 8018acc:	6823      	ldr	r3, [r4, #0]
 8018ace:	079b      	lsls	r3, r3, #30
 8018ad0:	f100 8107 	bmi.w	8018ce2 <_printf_float+0x42a>
 8018ad4:	68e0      	ldr	r0, [r4, #12]
 8018ad6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8018ad8:	4298      	cmp	r0, r3
 8018ada:	bfb8      	it	lt
 8018adc:	4618      	movlt	r0, r3
 8018ade:	e739      	b.n	8018954 <_printf_float+0x9c>
 8018ae0:	2301      	movs	r3, #1
 8018ae2:	4652      	mov	r2, sl
 8018ae4:	4631      	mov	r1, r6
 8018ae6:	4628      	mov	r0, r5
 8018ae8:	47b8      	blx	r7
 8018aea:	3001      	adds	r0, #1
 8018aec:	f43f af30 	beq.w	8018950 <_printf_float+0x98>
 8018af0:	f109 0901 	add.w	r9, r9, #1
 8018af4:	e7e8      	b.n	8018ac8 <_printf_float+0x210>
 8018af6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018af8:	2b00      	cmp	r3, #0
 8018afa:	dc3b      	bgt.n	8018b74 <_printf_float+0x2bc>
 8018afc:	4a1c      	ldr	r2, [pc, #112]	@ (8018b70 <_printf_float+0x2b8>)
 8018afe:	2301      	movs	r3, #1
 8018b00:	4631      	mov	r1, r6
 8018b02:	4628      	mov	r0, r5
 8018b04:	47b8      	blx	r7
 8018b06:	3001      	adds	r0, #1
 8018b08:	f43f af22 	beq.w	8018950 <_printf_float+0x98>
 8018b0c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8018b10:	ea59 0303 	orrs.w	r3, r9, r3
 8018b14:	d102      	bne.n	8018b1c <_printf_float+0x264>
 8018b16:	6823      	ldr	r3, [r4, #0]
 8018b18:	07d9      	lsls	r1, r3, #31
 8018b1a:	d5d7      	bpl.n	8018acc <_printf_float+0x214>
 8018b1c:	9b05      	ldr	r3, [sp, #20]
 8018b1e:	465a      	mov	r2, fp
 8018b20:	4631      	mov	r1, r6
 8018b22:	4628      	mov	r0, r5
 8018b24:	47b8      	blx	r7
 8018b26:	3001      	adds	r0, #1
 8018b28:	f43f af12 	beq.w	8018950 <_printf_float+0x98>
 8018b2c:	f04f 0a00 	mov.w	sl, #0
 8018b30:	f104 0b1a 	add.w	fp, r4, #26
 8018b34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018b36:	425b      	negs	r3, r3
 8018b38:	4553      	cmp	r3, sl
 8018b3a:	dc01      	bgt.n	8018b40 <_printf_float+0x288>
 8018b3c:	464b      	mov	r3, r9
 8018b3e:	e794      	b.n	8018a6a <_printf_float+0x1b2>
 8018b40:	2301      	movs	r3, #1
 8018b42:	465a      	mov	r2, fp
 8018b44:	4631      	mov	r1, r6
 8018b46:	4628      	mov	r0, r5
 8018b48:	47b8      	blx	r7
 8018b4a:	3001      	adds	r0, #1
 8018b4c:	f43f af00 	beq.w	8018950 <_printf_float+0x98>
 8018b50:	f10a 0a01 	add.w	sl, sl, #1
 8018b54:	e7ee      	b.n	8018b34 <_printf_float+0x27c>
 8018b56:	bf00      	nop
 8018b58:	ffffffff 	.word	0xffffffff
 8018b5c:	7fefffff 	.word	0x7fefffff
 8018b60:	0801b76f 	.word	0x0801b76f
 8018b64:	0801b76b 	.word	0x0801b76b
 8018b68:	0801b777 	.word	0x0801b777
 8018b6c:	0801b773 	.word	0x0801b773
 8018b70:	0801b77b 	.word	0x0801b77b
 8018b74:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8018b76:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8018b7a:	4553      	cmp	r3, sl
 8018b7c:	bfa8      	it	ge
 8018b7e:	4653      	movge	r3, sl
 8018b80:	2b00      	cmp	r3, #0
 8018b82:	4699      	mov	r9, r3
 8018b84:	dc37      	bgt.n	8018bf6 <_printf_float+0x33e>
 8018b86:	2300      	movs	r3, #0
 8018b88:	9307      	str	r3, [sp, #28]
 8018b8a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8018b8e:	f104 021a 	add.w	r2, r4, #26
 8018b92:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8018b94:	9907      	ldr	r1, [sp, #28]
 8018b96:	9306      	str	r3, [sp, #24]
 8018b98:	eba3 0309 	sub.w	r3, r3, r9
 8018b9c:	428b      	cmp	r3, r1
 8018b9e:	dc31      	bgt.n	8018c04 <_printf_float+0x34c>
 8018ba0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018ba2:	459a      	cmp	sl, r3
 8018ba4:	dc3b      	bgt.n	8018c1e <_printf_float+0x366>
 8018ba6:	6823      	ldr	r3, [r4, #0]
 8018ba8:	07da      	lsls	r2, r3, #31
 8018baa:	d438      	bmi.n	8018c1e <_printf_float+0x366>
 8018bac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018bae:	ebaa 0903 	sub.w	r9, sl, r3
 8018bb2:	9b06      	ldr	r3, [sp, #24]
 8018bb4:	ebaa 0303 	sub.w	r3, sl, r3
 8018bb8:	4599      	cmp	r9, r3
 8018bba:	bfa8      	it	ge
 8018bbc:	4699      	movge	r9, r3
 8018bbe:	f1b9 0f00 	cmp.w	r9, #0
 8018bc2:	dc34      	bgt.n	8018c2e <_printf_float+0x376>
 8018bc4:	f04f 0800 	mov.w	r8, #0
 8018bc8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8018bcc:	f104 0b1a 	add.w	fp, r4, #26
 8018bd0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018bd2:	ebaa 0303 	sub.w	r3, sl, r3
 8018bd6:	eba3 0309 	sub.w	r3, r3, r9
 8018bda:	4543      	cmp	r3, r8
 8018bdc:	f77f af76 	ble.w	8018acc <_printf_float+0x214>
 8018be0:	2301      	movs	r3, #1
 8018be2:	465a      	mov	r2, fp
 8018be4:	4631      	mov	r1, r6
 8018be6:	4628      	mov	r0, r5
 8018be8:	47b8      	blx	r7
 8018bea:	3001      	adds	r0, #1
 8018bec:	f43f aeb0 	beq.w	8018950 <_printf_float+0x98>
 8018bf0:	f108 0801 	add.w	r8, r8, #1
 8018bf4:	e7ec      	b.n	8018bd0 <_printf_float+0x318>
 8018bf6:	4642      	mov	r2, r8
 8018bf8:	4631      	mov	r1, r6
 8018bfa:	4628      	mov	r0, r5
 8018bfc:	47b8      	blx	r7
 8018bfe:	3001      	adds	r0, #1
 8018c00:	d1c1      	bne.n	8018b86 <_printf_float+0x2ce>
 8018c02:	e6a5      	b.n	8018950 <_printf_float+0x98>
 8018c04:	2301      	movs	r3, #1
 8018c06:	4631      	mov	r1, r6
 8018c08:	4628      	mov	r0, r5
 8018c0a:	9206      	str	r2, [sp, #24]
 8018c0c:	47b8      	blx	r7
 8018c0e:	3001      	adds	r0, #1
 8018c10:	f43f ae9e 	beq.w	8018950 <_printf_float+0x98>
 8018c14:	9b07      	ldr	r3, [sp, #28]
 8018c16:	9a06      	ldr	r2, [sp, #24]
 8018c18:	3301      	adds	r3, #1
 8018c1a:	9307      	str	r3, [sp, #28]
 8018c1c:	e7b9      	b.n	8018b92 <_printf_float+0x2da>
 8018c1e:	9b05      	ldr	r3, [sp, #20]
 8018c20:	465a      	mov	r2, fp
 8018c22:	4631      	mov	r1, r6
 8018c24:	4628      	mov	r0, r5
 8018c26:	47b8      	blx	r7
 8018c28:	3001      	adds	r0, #1
 8018c2a:	d1bf      	bne.n	8018bac <_printf_float+0x2f4>
 8018c2c:	e690      	b.n	8018950 <_printf_float+0x98>
 8018c2e:	9a06      	ldr	r2, [sp, #24]
 8018c30:	464b      	mov	r3, r9
 8018c32:	4442      	add	r2, r8
 8018c34:	4631      	mov	r1, r6
 8018c36:	4628      	mov	r0, r5
 8018c38:	47b8      	blx	r7
 8018c3a:	3001      	adds	r0, #1
 8018c3c:	d1c2      	bne.n	8018bc4 <_printf_float+0x30c>
 8018c3e:	e687      	b.n	8018950 <_printf_float+0x98>
 8018c40:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8018c44:	f1b9 0f01 	cmp.w	r9, #1
 8018c48:	dc01      	bgt.n	8018c4e <_printf_float+0x396>
 8018c4a:	07db      	lsls	r3, r3, #31
 8018c4c:	d536      	bpl.n	8018cbc <_printf_float+0x404>
 8018c4e:	2301      	movs	r3, #1
 8018c50:	4642      	mov	r2, r8
 8018c52:	4631      	mov	r1, r6
 8018c54:	4628      	mov	r0, r5
 8018c56:	47b8      	blx	r7
 8018c58:	3001      	adds	r0, #1
 8018c5a:	f43f ae79 	beq.w	8018950 <_printf_float+0x98>
 8018c5e:	9b05      	ldr	r3, [sp, #20]
 8018c60:	465a      	mov	r2, fp
 8018c62:	4631      	mov	r1, r6
 8018c64:	4628      	mov	r0, r5
 8018c66:	47b8      	blx	r7
 8018c68:	3001      	adds	r0, #1
 8018c6a:	f43f ae71 	beq.w	8018950 <_printf_float+0x98>
 8018c6e:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8018c72:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8018c76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018c7a:	f109 39ff 	add.w	r9, r9, #4294967295
 8018c7e:	d018      	beq.n	8018cb2 <_printf_float+0x3fa>
 8018c80:	464b      	mov	r3, r9
 8018c82:	f108 0201 	add.w	r2, r8, #1
 8018c86:	4631      	mov	r1, r6
 8018c88:	4628      	mov	r0, r5
 8018c8a:	47b8      	blx	r7
 8018c8c:	3001      	adds	r0, #1
 8018c8e:	d10c      	bne.n	8018caa <_printf_float+0x3f2>
 8018c90:	e65e      	b.n	8018950 <_printf_float+0x98>
 8018c92:	2301      	movs	r3, #1
 8018c94:	465a      	mov	r2, fp
 8018c96:	4631      	mov	r1, r6
 8018c98:	4628      	mov	r0, r5
 8018c9a:	47b8      	blx	r7
 8018c9c:	3001      	adds	r0, #1
 8018c9e:	f43f ae57 	beq.w	8018950 <_printf_float+0x98>
 8018ca2:	f108 0801 	add.w	r8, r8, #1
 8018ca6:	45c8      	cmp	r8, r9
 8018ca8:	dbf3      	blt.n	8018c92 <_printf_float+0x3da>
 8018caa:	4653      	mov	r3, sl
 8018cac:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8018cb0:	e6dc      	b.n	8018a6c <_printf_float+0x1b4>
 8018cb2:	f04f 0800 	mov.w	r8, #0
 8018cb6:	f104 0b1a 	add.w	fp, r4, #26
 8018cba:	e7f4      	b.n	8018ca6 <_printf_float+0x3ee>
 8018cbc:	2301      	movs	r3, #1
 8018cbe:	4642      	mov	r2, r8
 8018cc0:	e7e1      	b.n	8018c86 <_printf_float+0x3ce>
 8018cc2:	2301      	movs	r3, #1
 8018cc4:	464a      	mov	r2, r9
 8018cc6:	4631      	mov	r1, r6
 8018cc8:	4628      	mov	r0, r5
 8018cca:	47b8      	blx	r7
 8018ccc:	3001      	adds	r0, #1
 8018cce:	f43f ae3f 	beq.w	8018950 <_printf_float+0x98>
 8018cd2:	f108 0801 	add.w	r8, r8, #1
 8018cd6:	68e3      	ldr	r3, [r4, #12]
 8018cd8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8018cda:	1a5b      	subs	r3, r3, r1
 8018cdc:	4543      	cmp	r3, r8
 8018cde:	dcf0      	bgt.n	8018cc2 <_printf_float+0x40a>
 8018ce0:	e6f8      	b.n	8018ad4 <_printf_float+0x21c>
 8018ce2:	f04f 0800 	mov.w	r8, #0
 8018ce6:	f104 0919 	add.w	r9, r4, #25
 8018cea:	e7f4      	b.n	8018cd6 <_printf_float+0x41e>

08018cec <_printf_common>:
 8018cec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018cf0:	4616      	mov	r6, r2
 8018cf2:	4698      	mov	r8, r3
 8018cf4:	688a      	ldr	r2, [r1, #8]
 8018cf6:	690b      	ldr	r3, [r1, #16]
 8018cf8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8018cfc:	4293      	cmp	r3, r2
 8018cfe:	bfb8      	it	lt
 8018d00:	4613      	movlt	r3, r2
 8018d02:	6033      	str	r3, [r6, #0]
 8018d04:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8018d08:	4607      	mov	r7, r0
 8018d0a:	460c      	mov	r4, r1
 8018d0c:	b10a      	cbz	r2, 8018d12 <_printf_common+0x26>
 8018d0e:	3301      	adds	r3, #1
 8018d10:	6033      	str	r3, [r6, #0]
 8018d12:	6823      	ldr	r3, [r4, #0]
 8018d14:	0699      	lsls	r1, r3, #26
 8018d16:	bf42      	ittt	mi
 8018d18:	6833      	ldrmi	r3, [r6, #0]
 8018d1a:	3302      	addmi	r3, #2
 8018d1c:	6033      	strmi	r3, [r6, #0]
 8018d1e:	6825      	ldr	r5, [r4, #0]
 8018d20:	f015 0506 	ands.w	r5, r5, #6
 8018d24:	d106      	bne.n	8018d34 <_printf_common+0x48>
 8018d26:	f104 0a19 	add.w	sl, r4, #25
 8018d2a:	68e3      	ldr	r3, [r4, #12]
 8018d2c:	6832      	ldr	r2, [r6, #0]
 8018d2e:	1a9b      	subs	r3, r3, r2
 8018d30:	42ab      	cmp	r3, r5
 8018d32:	dc26      	bgt.n	8018d82 <_printf_common+0x96>
 8018d34:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8018d38:	6822      	ldr	r2, [r4, #0]
 8018d3a:	3b00      	subs	r3, #0
 8018d3c:	bf18      	it	ne
 8018d3e:	2301      	movne	r3, #1
 8018d40:	0692      	lsls	r2, r2, #26
 8018d42:	d42b      	bmi.n	8018d9c <_printf_common+0xb0>
 8018d44:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8018d48:	4641      	mov	r1, r8
 8018d4a:	4638      	mov	r0, r7
 8018d4c:	47c8      	blx	r9
 8018d4e:	3001      	adds	r0, #1
 8018d50:	d01e      	beq.n	8018d90 <_printf_common+0xa4>
 8018d52:	6823      	ldr	r3, [r4, #0]
 8018d54:	6922      	ldr	r2, [r4, #16]
 8018d56:	f003 0306 	and.w	r3, r3, #6
 8018d5a:	2b04      	cmp	r3, #4
 8018d5c:	bf02      	ittt	eq
 8018d5e:	68e5      	ldreq	r5, [r4, #12]
 8018d60:	6833      	ldreq	r3, [r6, #0]
 8018d62:	1aed      	subeq	r5, r5, r3
 8018d64:	68a3      	ldr	r3, [r4, #8]
 8018d66:	bf0c      	ite	eq
 8018d68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8018d6c:	2500      	movne	r5, #0
 8018d6e:	4293      	cmp	r3, r2
 8018d70:	bfc4      	itt	gt
 8018d72:	1a9b      	subgt	r3, r3, r2
 8018d74:	18ed      	addgt	r5, r5, r3
 8018d76:	2600      	movs	r6, #0
 8018d78:	341a      	adds	r4, #26
 8018d7a:	42b5      	cmp	r5, r6
 8018d7c:	d11a      	bne.n	8018db4 <_printf_common+0xc8>
 8018d7e:	2000      	movs	r0, #0
 8018d80:	e008      	b.n	8018d94 <_printf_common+0xa8>
 8018d82:	2301      	movs	r3, #1
 8018d84:	4652      	mov	r2, sl
 8018d86:	4641      	mov	r1, r8
 8018d88:	4638      	mov	r0, r7
 8018d8a:	47c8      	blx	r9
 8018d8c:	3001      	adds	r0, #1
 8018d8e:	d103      	bne.n	8018d98 <_printf_common+0xac>
 8018d90:	f04f 30ff 	mov.w	r0, #4294967295
 8018d94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018d98:	3501      	adds	r5, #1
 8018d9a:	e7c6      	b.n	8018d2a <_printf_common+0x3e>
 8018d9c:	18e1      	adds	r1, r4, r3
 8018d9e:	1c5a      	adds	r2, r3, #1
 8018da0:	2030      	movs	r0, #48	@ 0x30
 8018da2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8018da6:	4422      	add	r2, r4
 8018da8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8018dac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8018db0:	3302      	adds	r3, #2
 8018db2:	e7c7      	b.n	8018d44 <_printf_common+0x58>
 8018db4:	2301      	movs	r3, #1
 8018db6:	4622      	mov	r2, r4
 8018db8:	4641      	mov	r1, r8
 8018dba:	4638      	mov	r0, r7
 8018dbc:	47c8      	blx	r9
 8018dbe:	3001      	adds	r0, #1
 8018dc0:	d0e6      	beq.n	8018d90 <_printf_common+0xa4>
 8018dc2:	3601      	adds	r6, #1
 8018dc4:	e7d9      	b.n	8018d7a <_printf_common+0x8e>
	...

08018dc8 <_printf_i>:
 8018dc8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8018dcc:	7e0f      	ldrb	r7, [r1, #24]
 8018dce:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8018dd0:	2f78      	cmp	r7, #120	@ 0x78
 8018dd2:	4691      	mov	r9, r2
 8018dd4:	4680      	mov	r8, r0
 8018dd6:	460c      	mov	r4, r1
 8018dd8:	469a      	mov	sl, r3
 8018dda:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8018dde:	d807      	bhi.n	8018df0 <_printf_i+0x28>
 8018de0:	2f62      	cmp	r7, #98	@ 0x62
 8018de2:	d80a      	bhi.n	8018dfa <_printf_i+0x32>
 8018de4:	2f00      	cmp	r7, #0
 8018de6:	f000 80d1 	beq.w	8018f8c <_printf_i+0x1c4>
 8018dea:	2f58      	cmp	r7, #88	@ 0x58
 8018dec:	f000 80b8 	beq.w	8018f60 <_printf_i+0x198>
 8018df0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8018df4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8018df8:	e03a      	b.n	8018e70 <_printf_i+0xa8>
 8018dfa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8018dfe:	2b15      	cmp	r3, #21
 8018e00:	d8f6      	bhi.n	8018df0 <_printf_i+0x28>
 8018e02:	a101      	add	r1, pc, #4	@ (adr r1, 8018e08 <_printf_i+0x40>)
 8018e04:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8018e08:	08018e61 	.word	0x08018e61
 8018e0c:	08018e75 	.word	0x08018e75
 8018e10:	08018df1 	.word	0x08018df1
 8018e14:	08018df1 	.word	0x08018df1
 8018e18:	08018df1 	.word	0x08018df1
 8018e1c:	08018df1 	.word	0x08018df1
 8018e20:	08018e75 	.word	0x08018e75
 8018e24:	08018df1 	.word	0x08018df1
 8018e28:	08018df1 	.word	0x08018df1
 8018e2c:	08018df1 	.word	0x08018df1
 8018e30:	08018df1 	.word	0x08018df1
 8018e34:	08018f73 	.word	0x08018f73
 8018e38:	08018e9f 	.word	0x08018e9f
 8018e3c:	08018f2d 	.word	0x08018f2d
 8018e40:	08018df1 	.word	0x08018df1
 8018e44:	08018df1 	.word	0x08018df1
 8018e48:	08018f95 	.word	0x08018f95
 8018e4c:	08018df1 	.word	0x08018df1
 8018e50:	08018e9f 	.word	0x08018e9f
 8018e54:	08018df1 	.word	0x08018df1
 8018e58:	08018df1 	.word	0x08018df1
 8018e5c:	08018f35 	.word	0x08018f35
 8018e60:	6833      	ldr	r3, [r6, #0]
 8018e62:	1d1a      	adds	r2, r3, #4
 8018e64:	681b      	ldr	r3, [r3, #0]
 8018e66:	6032      	str	r2, [r6, #0]
 8018e68:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8018e6c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8018e70:	2301      	movs	r3, #1
 8018e72:	e09c      	b.n	8018fae <_printf_i+0x1e6>
 8018e74:	6833      	ldr	r3, [r6, #0]
 8018e76:	6820      	ldr	r0, [r4, #0]
 8018e78:	1d19      	adds	r1, r3, #4
 8018e7a:	6031      	str	r1, [r6, #0]
 8018e7c:	0606      	lsls	r6, r0, #24
 8018e7e:	d501      	bpl.n	8018e84 <_printf_i+0xbc>
 8018e80:	681d      	ldr	r5, [r3, #0]
 8018e82:	e003      	b.n	8018e8c <_printf_i+0xc4>
 8018e84:	0645      	lsls	r5, r0, #25
 8018e86:	d5fb      	bpl.n	8018e80 <_printf_i+0xb8>
 8018e88:	f9b3 5000 	ldrsh.w	r5, [r3]
 8018e8c:	2d00      	cmp	r5, #0
 8018e8e:	da03      	bge.n	8018e98 <_printf_i+0xd0>
 8018e90:	232d      	movs	r3, #45	@ 0x2d
 8018e92:	426d      	negs	r5, r5
 8018e94:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8018e98:	4858      	ldr	r0, [pc, #352]	@ (8018ffc <_printf_i+0x234>)
 8018e9a:	230a      	movs	r3, #10
 8018e9c:	e011      	b.n	8018ec2 <_printf_i+0xfa>
 8018e9e:	6821      	ldr	r1, [r4, #0]
 8018ea0:	6833      	ldr	r3, [r6, #0]
 8018ea2:	0608      	lsls	r0, r1, #24
 8018ea4:	f853 5b04 	ldr.w	r5, [r3], #4
 8018ea8:	d402      	bmi.n	8018eb0 <_printf_i+0xe8>
 8018eaa:	0649      	lsls	r1, r1, #25
 8018eac:	bf48      	it	mi
 8018eae:	b2ad      	uxthmi	r5, r5
 8018eb0:	2f6f      	cmp	r7, #111	@ 0x6f
 8018eb2:	4852      	ldr	r0, [pc, #328]	@ (8018ffc <_printf_i+0x234>)
 8018eb4:	6033      	str	r3, [r6, #0]
 8018eb6:	bf14      	ite	ne
 8018eb8:	230a      	movne	r3, #10
 8018eba:	2308      	moveq	r3, #8
 8018ebc:	2100      	movs	r1, #0
 8018ebe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8018ec2:	6866      	ldr	r6, [r4, #4]
 8018ec4:	60a6      	str	r6, [r4, #8]
 8018ec6:	2e00      	cmp	r6, #0
 8018ec8:	db05      	blt.n	8018ed6 <_printf_i+0x10e>
 8018eca:	6821      	ldr	r1, [r4, #0]
 8018ecc:	432e      	orrs	r6, r5
 8018ece:	f021 0104 	bic.w	r1, r1, #4
 8018ed2:	6021      	str	r1, [r4, #0]
 8018ed4:	d04b      	beq.n	8018f6e <_printf_i+0x1a6>
 8018ed6:	4616      	mov	r6, r2
 8018ed8:	fbb5 f1f3 	udiv	r1, r5, r3
 8018edc:	fb03 5711 	mls	r7, r3, r1, r5
 8018ee0:	5dc7      	ldrb	r7, [r0, r7]
 8018ee2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8018ee6:	462f      	mov	r7, r5
 8018ee8:	42bb      	cmp	r3, r7
 8018eea:	460d      	mov	r5, r1
 8018eec:	d9f4      	bls.n	8018ed8 <_printf_i+0x110>
 8018eee:	2b08      	cmp	r3, #8
 8018ef0:	d10b      	bne.n	8018f0a <_printf_i+0x142>
 8018ef2:	6823      	ldr	r3, [r4, #0]
 8018ef4:	07df      	lsls	r7, r3, #31
 8018ef6:	d508      	bpl.n	8018f0a <_printf_i+0x142>
 8018ef8:	6923      	ldr	r3, [r4, #16]
 8018efa:	6861      	ldr	r1, [r4, #4]
 8018efc:	4299      	cmp	r1, r3
 8018efe:	bfde      	ittt	le
 8018f00:	2330      	movle	r3, #48	@ 0x30
 8018f02:	f806 3c01 	strble.w	r3, [r6, #-1]
 8018f06:	f106 36ff 	addle.w	r6, r6, #4294967295
 8018f0a:	1b92      	subs	r2, r2, r6
 8018f0c:	6122      	str	r2, [r4, #16]
 8018f0e:	f8cd a000 	str.w	sl, [sp]
 8018f12:	464b      	mov	r3, r9
 8018f14:	aa03      	add	r2, sp, #12
 8018f16:	4621      	mov	r1, r4
 8018f18:	4640      	mov	r0, r8
 8018f1a:	f7ff fee7 	bl	8018cec <_printf_common>
 8018f1e:	3001      	adds	r0, #1
 8018f20:	d14a      	bne.n	8018fb8 <_printf_i+0x1f0>
 8018f22:	f04f 30ff 	mov.w	r0, #4294967295
 8018f26:	b004      	add	sp, #16
 8018f28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018f2c:	6823      	ldr	r3, [r4, #0]
 8018f2e:	f043 0320 	orr.w	r3, r3, #32
 8018f32:	6023      	str	r3, [r4, #0]
 8018f34:	4832      	ldr	r0, [pc, #200]	@ (8019000 <_printf_i+0x238>)
 8018f36:	2778      	movs	r7, #120	@ 0x78
 8018f38:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8018f3c:	6823      	ldr	r3, [r4, #0]
 8018f3e:	6831      	ldr	r1, [r6, #0]
 8018f40:	061f      	lsls	r7, r3, #24
 8018f42:	f851 5b04 	ldr.w	r5, [r1], #4
 8018f46:	d402      	bmi.n	8018f4e <_printf_i+0x186>
 8018f48:	065f      	lsls	r7, r3, #25
 8018f4a:	bf48      	it	mi
 8018f4c:	b2ad      	uxthmi	r5, r5
 8018f4e:	6031      	str	r1, [r6, #0]
 8018f50:	07d9      	lsls	r1, r3, #31
 8018f52:	bf44      	itt	mi
 8018f54:	f043 0320 	orrmi.w	r3, r3, #32
 8018f58:	6023      	strmi	r3, [r4, #0]
 8018f5a:	b11d      	cbz	r5, 8018f64 <_printf_i+0x19c>
 8018f5c:	2310      	movs	r3, #16
 8018f5e:	e7ad      	b.n	8018ebc <_printf_i+0xf4>
 8018f60:	4826      	ldr	r0, [pc, #152]	@ (8018ffc <_printf_i+0x234>)
 8018f62:	e7e9      	b.n	8018f38 <_printf_i+0x170>
 8018f64:	6823      	ldr	r3, [r4, #0]
 8018f66:	f023 0320 	bic.w	r3, r3, #32
 8018f6a:	6023      	str	r3, [r4, #0]
 8018f6c:	e7f6      	b.n	8018f5c <_printf_i+0x194>
 8018f6e:	4616      	mov	r6, r2
 8018f70:	e7bd      	b.n	8018eee <_printf_i+0x126>
 8018f72:	6833      	ldr	r3, [r6, #0]
 8018f74:	6825      	ldr	r5, [r4, #0]
 8018f76:	6961      	ldr	r1, [r4, #20]
 8018f78:	1d18      	adds	r0, r3, #4
 8018f7a:	6030      	str	r0, [r6, #0]
 8018f7c:	062e      	lsls	r6, r5, #24
 8018f7e:	681b      	ldr	r3, [r3, #0]
 8018f80:	d501      	bpl.n	8018f86 <_printf_i+0x1be>
 8018f82:	6019      	str	r1, [r3, #0]
 8018f84:	e002      	b.n	8018f8c <_printf_i+0x1c4>
 8018f86:	0668      	lsls	r0, r5, #25
 8018f88:	d5fb      	bpl.n	8018f82 <_printf_i+0x1ba>
 8018f8a:	8019      	strh	r1, [r3, #0]
 8018f8c:	2300      	movs	r3, #0
 8018f8e:	6123      	str	r3, [r4, #16]
 8018f90:	4616      	mov	r6, r2
 8018f92:	e7bc      	b.n	8018f0e <_printf_i+0x146>
 8018f94:	6833      	ldr	r3, [r6, #0]
 8018f96:	1d1a      	adds	r2, r3, #4
 8018f98:	6032      	str	r2, [r6, #0]
 8018f9a:	681e      	ldr	r6, [r3, #0]
 8018f9c:	6862      	ldr	r2, [r4, #4]
 8018f9e:	2100      	movs	r1, #0
 8018fa0:	4630      	mov	r0, r6
 8018fa2:	f7e7 f99d 	bl	80002e0 <memchr>
 8018fa6:	b108      	cbz	r0, 8018fac <_printf_i+0x1e4>
 8018fa8:	1b80      	subs	r0, r0, r6
 8018faa:	6060      	str	r0, [r4, #4]
 8018fac:	6863      	ldr	r3, [r4, #4]
 8018fae:	6123      	str	r3, [r4, #16]
 8018fb0:	2300      	movs	r3, #0
 8018fb2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8018fb6:	e7aa      	b.n	8018f0e <_printf_i+0x146>
 8018fb8:	6923      	ldr	r3, [r4, #16]
 8018fba:	4632      	mov	r2, r6
 8018fbc:	4649      	mov	r1, r9
 8018fbe:	4640      	mov	r0, r8
 8018fc0:	47d0      	blx	sl
 8018fc2:	3001      	adds	r0, #1
 8018fc4:	d0ad      	beq.n	8018f22 <_printf_i+0x15a>
 8018fc6:	6823      	ldr	r3, [r4, #0]
 8018fc8:	079b      	lsls	r3, r3, #30
 8018fca:	d413      	bmi.n	8018ff4 <_printf_i+0x22c>
 8018fcc:	68e0      	ldr	r0, [r4, #12]
 8018fce:	9b03      	ldr	r3, [sp, #12]
 8018fd0:	4298      	cmp	r0, r3
 8018fd2:	bfb8      	it	lt
 8018fd4:	4618      	movlt	r0, r3
 8018fd6:	e7a6      	b.n	8018f26 <_printf_i+0x15e>
 8018fd8:	2301      	movs	r3, #1
 8018fda:	4632      	mov	r2, r6
 8018fdc:	4649      	mov	r1, r9
 8018fde:	4640      	mov	r0, r8
 8018fe0:	47d0      	blx	sl
 8018fe2:	3001      	adds	r0, #1
 8018fe4:	d09d      	beq.n	8018f22 <_printf_i+0x15a>
 8018fe6:	3501      	adds	r5, #1
 8018fe8:	68e3      	ldr	r3, [r4, #12]
 8018fea:	9903      	ldr	r1, [sp, #12]
 8018fec:	1a5b      	subs	r3, r3, r1
 8018fee:	42ab      	cmp	r3, r5
 8018ff0:	dcf2      	bgt.n	8018fd8 <_printf_i+0x210>
 8018ff2:	e7eb      	b.n	8018fcc <_printf_i+0x204>
 8018ff4:	2500      	movs	r5, #0
 8018ff6:	f104 0619 	add.w	r6, r4, #25
 8018ffa:	e7f5      	b.n	8018fe8 <_printf_i+0x220>
 8018ffc:	0801b77d 	.word	0x0801b77d
 8019000:	0801b78e 	.word	0x0801b78e

08019004 <std>:
 8019004:	2300      	movs	r3, #0
 8019006:	b510      	push	{r4, lr}
 8019008:	4604      	mov	r4, r0
 801900a:	e9c0 3300 	strd	r3, r3, [r0]
 801900e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8019012:	6083      	str	r3, [r0, #8]
 8019014:	8181      	strh	r1, [r0, #12]
 8019016:	6643      	str	r3, [r0, #100]	@ 0x64
 8019018:	81c2      	strh	r2, [r0, #14]
 801901a:	6183      	str	r3, [r0, #24]
 801901c:	4619      	mov	r1, r3
 801901e:	2208      	movs	r2, #8
 8019020:	305c      	adds	r0, #92	@ 0x5c
 8019022:	f000 f916 	bl	8019252 <memset>
 8019026:	4b0d      	ldr	r3, [pc, #52]	@ (801905c <std+0x58>)
 8019028:	6263      	str	r3, [r4, #36]	@ 0x24
 801902a:	4b0d      	ldr	r3, [pc, #52]	@ (8019060 <std+0x5c>)
 801902c:	62a3      	str	r3, [r4, #40]	@ 0x28
 801902e:	4b0d      	ldr	r3, [pc, #52]	@ (8019064 <std+0x60>)
 8019030:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8019032:	4b0d      	ldr	r3, [pc, #52]	@ (8019068 <std+0x64>)
 8019034:	6323      	str	r3, [r4, #48]	@ 0x30
 8019036:	4b0d      	ldr	r3, [pc, #52]	@ (801906c <std+0x68>)
 8019038:	6224      	str	r4, [r4, #32]
 801903a:	429c      	cmp	r4, r3
 801903c:	d006      	beq.n	801904c <std+0x48>
 801903e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8019042:	4294      	cmp	r4, r2
 8019044:	d002      	beq.n	801904c <std+0x48>
 8019046:	33d0      	adds	r3, #208	@ 0xd0
 8019048:	429c      	cmp	r4, r3
 801904a:	d105      	bne.n	8019058 <std+0x54>
 801904c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8019050:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019054:	f000 b98a 	b.w	801936c <__retarget_lock_init_recursive>
 8019058:	bd10      	pop	{r4, pc}
 801905a:	bf00      	nop
 801905c:	080191cd 	.word	0x080191cd
 8019060:	080191ef 	.word	0x080191ef
 8019064:	08019227 	.word	0x08019227
 8019068:	0801924b 	.word	0x0801924b
 801906c:	24027958 	.word	0x24027958

08019070 <stdio_exit_handler>:
 8019070:	4a02      	ldr	r2, [pc, #8]	@ (801907c <stdio_exit_handler+0xc>)
 8019072:	4903      	ldr	r1, [pc, #12]	@ (8019080 <stdio_exit_handler+0x10>)
 8019074:	4803      	ldr	r0, [pc, #12]	@ (8019084 <stdio_exit_handler+0x14>)
 8019076:	f000 b869 	b.w	801914c <_fwalk_sglue>
 801907a:	bf00      	nop
 801907c:	2400011c 	.word	0x2400011c
 8019080:	0801aadd 	.word	0x0801aadd
 8019084:	2400012c 	.word	0x2400012c

08019088 <cleanup_stdio>:
 8019088:	6841      	ldr	r1, [r0, #4]
 801908a:	4b0c      	ldr	r3, [pc, #48]	@ (80190bc <cleanup_stdio+0x34>)
 801908c:	4299      	cmp	r1, r3
 801908e:	b510      	push	{r4, lr}
 8019090:	4604      	mov	r4, r0
 8019092:	d001      	beq.n	8019098 <cleanup_stdio+0x10>
 8019094:	f001 fd22 	bl	801aadc <_fflush_r>
 8019098:	68a1      	ldr	r1, [r4, #8]
 801909a:	4b09      	ldr	r3, [pc, #36]	@ (80190c0 <cleanup_stdio+0x38>)
 801909c:	4299      	cmp	r1, r3
 801909e:	d002      	beq.n	80190a6 <cleanup_stdio+0x1e>
 80190a0:	4620      	mov	r0, r4
 80190a2:	f001 fd1b 	bl	801aadc <_fflush_r>
 80190a6:	68e1      	ldr	r1, [r4, #12]
 80190a8:	4b06      	ldr	r3, [pc, #24]	@ (80190c4 <cleanup_stdio+0x3c>)
 80190aa:	4299      	cmp	r1, r3
 80190ac:	d004      	beq.n	80190b8 <cleanup_stdio+0x30>
 80190ae:	4620      	mov	r0, r4
 80190b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80190b4:	f001 bd12 	b.w	801aadc <_fflush_r>
 80190b8:	bd10      	pop	{r4, pc}
 80190ba:	bf00      	nop
 80190bc:	24027958 	.word	0x24027958
 80190c0:	240279c0 	.word	0x240279c0
 80190c4:	24027a28 	.word	0x24027a28

080190c8 <global_stdio_init.part.0>:
 80190c8:	b510      	push	{r4, lr}
 80190ca:	4b0b      	ldr	r3, [pc, #44]	@ (80190f8 <global_stdio_init.part.0+0x30>)
 80190cc:	4c0b      	ldr	r4, [pc, #44]	@ (80190fc <global_stdio_init.part.0+0x34>)
 80190ce:	4a0c      	ldr	r2, [pc, #48]	@ (8019100 <global_stdio_init.part.0+0x38>)
 80190d0:	601a      	str	r2, [r3, #0]
 80190d2:	4620      	mov	r0, r4
 80190d4:	2200      	movs	r2, #0
 80190d6:	2104      	movs	r1, #4
 80190d8:	f7ff ff94 	bl	8019004 <std>
 80190dc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80190e0:	2201      	movs	r2, #1
 80190e2:	2109      	movs	r1, #9
 80190e4:	f7ff ff8e 	bl	8019004 <std>
 80190e8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80190ec:	2202      	movs	r2, #2
 80190ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80190f2:	2112      	movs	r1, #18
 80190f4:	f7ff bf86 	b.w	8019004 <std>
 80190f8:	24027a90 	.word	0x24027a90
 80190fc:	24027958 	.word	0x24027958
 8019100:	08019071 	.word	0x08019071

08019104 <__sfp_lock_acquire>:
 8019104:	4801      	ldr	r0, [pc, #4]	@ (801910c <__sfp_lock_acquire+0x8>)
 8019106:	f000 b932 	b.w	801936e <__retarget_lock_acquire_recursive>
 801910a:	bf00      	nop
 801910c:	24027a99 	.word	0x24027a99

08019110 <__sfp_lock_release>:
 8019110:	4801      	ldr	r0, [pc, #4]	@ (8019118 <__sfp_lock_release+0x8>)
 8019112:	f000 b92d 	b.w	8019370 <__retarget_lock_release_recursive>
 8019116:	bf00      	nop
 8019118:	24027a99 	.word	0x24027a99

0801911c <__sinit>:
 801911c:	b510      	push	{r4, lr}
 801911e:	4604      	mov	r4, r0
 8019120:	f7ff fff0 	bl	8019104 <__sfp_lock_acquire>
 8019124:	6a23      	ldr	r3, [r4, #32]
 8019126:	b11b      	cbz	r3, 8019130 <__sinit+0x14>
 8019128:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801912c:	f7ff bff0 	b.w	8019110 <__sfp_lock_release>
 8019130:	4b04      	ldr	r3, [pc, #16]	@ (8019144 <__sinit+0x28>)
 8019132:	6223      	str	r3, [r4, #32]
 8019134:	4b04      	ldr	r3, [pc, #16]	@ (8019148 <__sinit+0x2c>)
 8019136:	681b      	ldr	r3, [r3, #0]
 8019138:	2b00      	cmp	r3, #0
 801913a:	d1f5      	bne.n	8019128 <__sinit+0xc>
 801913c:	f7ff ffc4 	bl	80190c8 <global_stdio_init.part.0>
 8019140:	e7f2      	b.n	8019128 <__sinit+0xc>
 8019142:	bf00      	nop
 8019144:	08019089 	.word	0x08019089
 8019148:	24027a90 	.word	0x24027a90

0801914c <_fwalk_sglue>:
 801914c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019150:	4607      	mov	r7, r0
 8019152:	4688      	mov	r8, r1
 8019154:	4614      	mov	r4, r2
 8019156:	2600      	movs	r6, #0
 8019158:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801915c:	f1b9 0901 	subs.w	r9, r9, #1
 8019160:	d505      	bpl.n	801916e <_fwalk_sglue+0x22>
 8019162:	6824      	ldr	r4, [r4, #0]
 8019164:	2c00      	cmp	r4, #0
 8019166:	d1f7      	bne.n	8019158 <_fwalk_sglue+0xc>
 8019168:	4630      	mov	r0, r6
 801916a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801916e:	89ab      	ldrh	r3, [r5, #12]
 8019170:	2b01      	cmp	r3, #1
 8019172:	d907      	bls.n	8019184 <_fwalk_sglue+0x38>
 8019174:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8019178:	3301      	adds	r3, #1
 801917a:	d003      	beq.n	8019184 <_fwalk_sglue+0x38>
 801917c:	4629      	mov	r1, r5
 801917e:	4638      	mov	r0, r7
 8019180:	47c0      	blx	r8
 8019182:	4306      	orrs	r6, r0
 8019184:	3568      	adds	r5, #104	@ 0x68
 8019186:	e7e9      	b.n	801915c <_fwalk_sglue+0x10>

08019188 <siprintf>:
 8019188:	b40e      	push	{r1, r2, r3}
 801918a:	b510      	push	{r4, lr}
 801918c:	b09d      	sub	sp, #116	@ 0x74
 801918e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8019190:	9002      	str	r0, [sp, #8]
 8019192:	9006      	str	r0, [sp, #24]
 8019194:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8019198:	480a      	ldr	r0, [pc, #40]	@ (80191c4 <siprintf+0x3c>)
 801919a:	9107      	str	r1, [sp, #28]
 801919c:	9104      	str	r1, [sp, #16]
 801919e:	490a      	ldr	r1, [pc, #40]	@ (80191c8 <siprintf+0x40>)
 80191a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80191a4:	9105      	str	r1, [sp, #20]
 80191a6:	2400      	movs	r4, #0
 80191a8:	a902      	add	r1, sp, #8
 80191aa:	6800      	ldr	r0, [r0, #0]
 80191ac:	9301      	str	r3, [sp, #4]
 80191ae:	941b      	str	r4, [sp, #108]	@ 0x6c
 80191b0:	f001 fb14 	bl	801a7dc <_svfiprintf_r>
 80191b4:	9b02      	ldr	r3, [sp, #8]
 80191b6:	701c      	strb	r4, [r3, #0]
 80191b8:	b01d      	add	sp, #116	@ 0x74
 80191ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80191be:	b003      	add	sp, #12
 80191c0:	4770      	bx	lr
 80191c2:	bf00      	nop
 80191c4:	24000128 	.word	0x24000128
 80191c8:	ffff0208 	.word	0xffff0208

080191cc <__sread>:
 80191cc:	b510      	push	{r4, lr}
 80191ce:	460c      	mov	r4, r1
 80191d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80191d4:	f000 f86c 	bl	80192b0 <_read_r>
 80191d8:	2800      	cmp	r0, #0
 80191da:	bfab      	itete	ge
 80191dc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80191de:	89a3      	ldrhlt	r3, [r4, #12]
 80191e0:	181b      	addge	r3, r3, r0
 80191e2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80191e6:	bfac      	ite	ge
 80191e8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80191ea:	81a3      	strhlt	r3, [r4, #12]
 80191ec:	bd10      	pop	{r4, pc}

080191ee <__swrite>:
 80191ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80191f2:	461f      	mov	r7, r3
 80191f4:	898b      	ldrh	r3, [r1, #12]
 80191f6:	05db      	lsls	r3, r3, #23
 80191f8:	4605      	mov	r5, r0
 80191fa:	460c      	mov	r4, r1
 80191fc:	4616      	mov	r6, r2
 80191fe:	d505      	bpl.n	801920c <__swrite+0x1e>
 8019200:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019204:	2302      	movs	r3, #2
 8019206:	2200      	movs	r2, #0
 8019208:	f000 f840 	bl	801928c <_lseek_r>
 801920c:	89a3      	ldrh	r3, [r4, #12]
 801920e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019212:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8019216:	81a3      	strh	r3, [r4, #12]
 8019218:	4632      	mov	r2, r6
 801921a:	463b      	mov	r3, r7
 801921c:	4628      	mov	r0, r5
 801921e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019222:	f000 b867 	b.w	80192f4 <_write_r>

08019226 <__sseek>:
 8019226:	b510      	push	{r4, lr}
 8019228:	460c      	mov	r4, r1
 801922a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801922e:	f000 f82d 	bl	801928c <_lseek_r>
 8019232:	1c43      	adds	r3, r0, #1
 8019234:	89a3      	ldrh	r3, [r4, #12]
 8019236:	bf15      	itete	ne
 8019238:	6560      	strne	r0, [r4, #84]	@ 0x54
 801923a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801923e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8019242:	81a3      	strheq	r3, [r4, #12]
 8019244:	bf18      	it	ne
 8019246:	81a3      	strhne	r3, [r4, #12]
 8019248:	bd10      	pop	{r4, pc}

0801924a <__sclose>:
 801924a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801924e:	f000 b80d 	b.w	801926c <_close_r>

08019252 <memset>:
 8019252:	4402      	add	r2, r0
 8019254:	4603      	mov	r3, r0
 8019256:	4293      	cmp	r3, r2
 8019258:	d100      	bne.n	801925c <memset+0xa>
 801925a:	4770      	bx	lr
 801925c:	f803 1b01 	strb.w	r1, [r3], #1
 8019260:	e7f9      	b.n	8019256 <memset+0x4>
	...

08019264 <_localeconv_r>:
 8019264:	4800      	ldr	r0, [pc, #0]	@ (8019268 <_localeconv_r+0x4>)
 8019266:	4770      	bx	lr
 8019268:	24000268 	.word	0x24000268

0801926c <_close_r>:
 801926c:	b538      	push	{r3, r4, r5, lr}
 801926e:	4d06      	ldr	r5, [pc, #24]	@ (8019288 <_close_r+0x1c>)
 8019270:	2300      	movs	r3, #0
 8019272:	4604      	mov	r4, r0
 8019274:	4608      	mov	r0, r1
 8019276:	602b      	str	r3, [r5, #0]
 8019278:	f7e9 fe6e 	bl	8002f58 <_close>
 801927c:	1c43      	adds	r3, r0, #1
 801927e:	d102      	bne.n	8019286 <_close_r+0x1a>
 8019280:	682b      	ldr	r3, [r5, #0]
 8019282:	b103      	cbz	r3, 8019286 <_close_r+0x1a>
 8019284:	6023      	str	r3, [r4, #0]
 8019286:	bd38      	pop	{r3, r4, r5, pc}
 8019288:	24027a94 	.word	0x24027a94

0801928c <_lseek_r>:
 801928c:	b538      	push	{r3, r4, r5, lr}
 801928e:	4d07      	ldr	r5, [pc, #28]	@ (80192ac <_lseek_r+0x20>)
 8019290:	4604      	mov	r4, r0
 8019292:	4608      	mov	r0, r1
 8019294:	4611      	mov	r1, r2
 8019296:	2200      	movs	r2, #0
 8019298:	602a      	str	r2, [r5, #0]
 801929a:	461a      	mov	r2, r3
 801929c:	f7e9 fe83 	bl	8002fa6 <_lseek>
 80192a0:	1c43      	adds	r3, r0, #1
 80192a2:	d102      	bne.n	80192aa <_lseek_r+0x1e>
 80192a4:	682b      	ldr	r3, [r5, #0]
 80192a6:	b103      	cbz	r3, 80192aa <_lseek_r+0x1e>
 80192a8:	6023      	str	r3, [r4, #0]
 80192aa:	bd38      	pop	{r3, r4, r5, pc}
 80192ac:	24027a94 	.word	0x24027a94

080192b0 <_read_r>:
 80192b0:	b538      	push	{r3, r4, r5, lr}
 80192b2:	4d07      	ldr	r5, [pc, #28]	@ (80192d0 <_read_r+0x20>)
 80192b4:	4604      	mov	r4, r0
 80192b6:	4608      	mov	r0, r1
 80192b8:	4611      	mov	r1, r2
 80192ba:	2200      	movs	r2, #0
 80192bc:	602a      	str	r2, [r5, #0]
 80192be:	461a      	mov	r2, r3
 80192c0:	f7e9 fe11 	bl	8002ee6 <_read>
 80192c4:	1c43      	adds	r3, r0, #1
 80192c6:	d102      	bne.n	80192ce <_read_r+0x1e>
 80192c8:	682b      	ldr	r3, [r5, #0]
 80192ca:	b103      	cbz	r3, 80192ce <_read_r+0x1e>
 80192cc:	6023      	str	r3, [r4, #0]
 80192ce:	bd38      	pop	{r3, r4, r5, pc}
 80192d0:	24027a94 	.word	0x24027a94

080192d4 <_sbrk_r>:
 80192d4:	b538      	push	{r3, r4, r5, lr}
 80192d6:	4d06      	ldr	r5, [pc, #24]	@ (80192f0 <_sbrk_r+0x1c>)
 80192d8:	2300      	movs	r3, #0
 80192da:	4604      	mov	r4, r0
 80192dc:	4608      	mov	r0, r1
 80192de:	602b      	str	r3, [r5, #0]
 80192e0:	f7e9 fe6e 	bl	8002fc0 <_sbrk>
 80192e4:	1c43      	adds	r3, r0, #1
 80192e6:	d102      	bne.n	80192ee <_sbrk_r+0x1a>
 80192e8:	682b      	ldr	r3, [r5, #0]
 80192ea:	b103      	cbz	r3, 80192ee <_sbrk_r+0x1a>
 80192ec:	6023      	str	r3, [r4, #0]
 80192ee:	bd38      	pop	{r3, r4, r5, pc}
 80192f0:	24027a94 	.word	0x24027a94

080192f4 <_write_r>:
 80192f4:	b538      	push	{r3, r4, r5, lr}
 80192f6:	4d07      	ldr	r5, [pc, #28]	@ (8019314 <_write_r+0x20>)
 80192f8:	4604      	mov	r4, r0
 80192fa:	4608      	mov	r0, r1
 80192fc:	4611      	mov	r1, r2
 80192fe:	2200      	movs	r2, #0
 8019300:	602a      	str	r2, [r5, #0]
 8019302:	461a      	mov	r2, r3
 8019304:	f7e9 fe0c 	bl	8002f20 <_write>
 8019308:	1c43      	adds	r3, r0, #1
 801930a:	d102      	bne.n	8019312 <_write_r+0x1e>
 801930c:	682b      	ldr	r3, [r5, #0]
 801930e:	b103      	cbz	r3, 8019312 <_write_r+0x1e>
 8019310:	6023      	str	r3, [r4, #0]
 8019312:	bd38      	pop	{r3, r4, r5, pc}
 8019314:	24027a94 	.word	0x24027a94

08019318 <__errno>:
 8019318:	4b01      	ldr	r3, [pc, #4]	@ (8019320 <__errno+0x8>)
 801931a:	6818      	ldr	r0, [r3, #0]
 801931c:	4770      	bx	lr
 801931e:	bf00      	nop
 8019320:	24000128 	.word	0x24000128

08019324 <__libc_init_array>:
 8019324:	b570      	push	{r4, r5, r6, lr}
 8019326:	4d0d      	ldr	r5, [pc, #52]	@ (801935c <__libc_init_array+0x38>)
 8019328:	4c0d      	ldr	r4, [pc, #52]	@ (8019360 <__libc_init_array+0x3c>)
 801932a:	1b64      	subs	r4, r4, r5
 801932c:	10a4      	asrs	r4, r4, #2
 801932e:	2600      	movs	r6, #0
 8019330:	42a6      	cmp	r6, r4
 8019332:	d109      	bne.n	8019348 <__libc_init_array+0x24>
 8019334:	4d0b      	ldr	r5, [pc, #44]	@ (8019364 <__libc_init_array+0x40>)
 8019336:	4c0c      	ldr	r4, [pc, #48]	@ (8019368 <__libc_init_array+0x44>)
 8019338:	f001 ff32 	bl	801b1a0 <_init>
 801933c:	1b64      	subs	r4, r4, r5
 801933e:	10a4      	asrs	r4, r4, #2
 8019340:	2600      	movs	r6, #0
 8019342:	42a6      	cmp	r6, r4
 8019344:	d105      	bne.n	8019352 <__libc_init_array+0x2e>
 8019346:	bd70      	pop	{r4, r5, r6, pc}
 8019348:	f855 3b04 	ldr.w	r3, [r5], #4
 801934c:	4798      	blx	r3
 801934e:	3601      	adds	r6, #1
 8019350:	e7ee      	b.n	8019330 <__libc_init_array+0xc>
 8019352:	f855 3b04 	ldr.w	r3, [r5], #4
 8019356:	4798      	blx	r3
 8019358:	3601      	adds	r6, #1
 801935a:	e7f2      	b.n	8019342 <__libc_init_array+0x1e>
 801935c:	0801bad4 	.word	0x0801bad4
 8019360:	0801bad4 	.word	0x0801bad4
 8019364:	0801bad4 	.word	0x0801bad4
 8019368:	0801bad8 	.word	0x0801bad8

0801936c <__retarget_lock_init_recursive>:
 801936c:	4770      	bx	lr

0801936e <__retarget_lock_acquire_recursive>:
 801936e:	4770      	bx	lr

08019370 <__retarget_lock_release_recursive>:
 8019370:	4770      	bx	lr

08019372 <memcpy>:
 8019372:	440a      	add	r2, r1
 8019374:	4291      	cmp	r1, r2
 8019376:	f100 33ff 	add.w	r3, r0, #4294967295
 801937a:	d100      	bne.n	801937e <memcpy+0xc>
 801937c:	4770      	bx	lr
 801937e:	b510      	push	{r4, lr}
 8019380:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019384:	f803 4f01 	strb.w	r4, [r3, #1]!
 8019388:	4291      	cmp	r1, r2
 801938a:	d1f9      	bne.n	8019380 <memcpy+0xe>
 801938c:	bd10      	pop	{r4, pc}
	...

08019390 <__assert_func>:
 8019390:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8019392:	4614      	mov	r4, r2
 8019394:	461a      	mov	r2, r3
 8019396:	4b09      	ldr	r3, [pc, #36]	@ (80193bc <__assert_func+0x2c>)
 8019398:	681b      	ldr	r3, [r3, #0]
 801939a:	4605      	mov	r5, r0
 801939c:	68d8      	ldr	r0, [r3, #12]
 801939e:	b14c      	cbz	r4, 80193b4 <__assert_func+0x24>
 80193a0:	4b07      	ldr	r3, [pc, #28]	@ (80193c0 <__assert_func+0x30>)
 80193a2:	9100      	str	r1, [sp, #0]
 80193a4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80193a8:	4906      	ldr	r1, [pc, #24]	@ (80193c4 <__assert_func+0x34>)
 80193aa:	462b      	mov	r3, r5
 80193ac:	f001 fbbe 	bl	801ab2c <fiprintf>
 80193b0:	f001 fbe8 	bl	801ab84 <abort>
 80193b4:	4b04      	ldr	r3, [pc, #16]	@ (80193c8 <__assert_func+0x38>)
 80193b6:	461c      	mov	r4, r3
 80193b8:	e7f3      	b.n	80193a2 <__assert_func+0x12>
 80193ba:	bf00      	nop
 80193bc:	24000128 	.word	0x24000128
 80193c0:	0801b79f 	.word	0x0801b79f
 80193c4:	0801b7ac 	.word	0x0801b7ac
 80193c8:	0801b7da 	.word	0x0801b7da

080193cc <quorem>:
 80193cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80193d0:	6903      	ldr	r3, [r0, #16]
 80193d2:	690c      	ldr	r4, [r1, #16]
 80193d4:	42a3      	cmp	r3, r4
 80193d6:	4607      	mov	r7, r0
 80193d8:	db7e      	blt.n	80194d8 <quorem+0x10c>
 80193da:	3c01      	subs	r4, #1
 80193dc:	f101 0814 	add.w	r8, r1, #20
 80193e0:	00a3      	lsls	r3, r4, #2
 80193e2:	f100 0514 	add.w	r5, r0, #20
 80193e6:	9300      	str	r3, [sp, #0]
 80193e8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80193ec:	9301      	str	r3, [sp, #4]
 80193ee:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80193f2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80193f6:	3301      	adds	r3, #1
 80193f8:	429a      	cmp	r2, r3
 80193fa:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80193fe:	fbb2 f6f3 	udiv	r6, r2, r3
 8019402:	d32e      	bcc.n	8019462 <quorem+0x96>
 8019404:	f04f 0a00 	mov.w	sl, #0
 8019408:	46c4      	mov	ip, r8
 801940a:	46ae      	mov	lr, r5
 801940c:	46d3      	mov	fp, sl
 801940e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8019412:	b298      	uxth	r0, r3
 8019414:	fb06 a000 	mla	r0, r6, r0, sl
 8019418:	0c02      	lsrs	r2, r0, #16
 801941a:	0c1b      	lsrs	r3, r3, #16
 801941c:	fb06 2303 	mla	r3, r6, r3, r2
 8019420:	f8de 2000 	ldr.w	r2, [lr]
 8019424:	b280      	uxth	r0, r0
 8019426:	b292      	uxth	r2, r2
 8019428:	1a12      	subs	r2, r2, r0
 801942a:	445a      	add	r2, fp
 801942c:	f8de 0000 	ldr.w	r0, [lr]
 8019430:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8019434:	b29b      	uxth	r3, r3
 8019436:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801943a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801943e:	b292      	uxth	r2, r2
 8019440:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8019444:	45e1      	cmp	r9, ip
 8019446:	f84e 2b04 	str.w	r2, [lr], #4
 801944a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801944e:	d2de      	bcs.n	801940e <quorem+0x42>
 8019450:	9b00      	ldr	r3, [sp, #0]
 8019452:	58eb      	ldr	r3, [r5, r3]
 8019454:	b92b      	cbnz	r3, 8019462 <quorem+0x96>
 8019456:	9b01      	ldr	r3, [sp, #4]
 8019458:	3b04      	subs	r3, #4
 801945a:	429d      	cmp	r5, r3
 801945c:	461a      	mov	r2, r3
 801945e:	d32f      	bcc.n	80194c0 <quorem+0xf4>
 8019460:	613c      	str	r4, [r7, #16]
 8019462:	4638      	mov	r0, r7
 8019464:	f001 f856 	bl	801a514 <__mcmp>
 8019468:	2800      	cmp	r0, #0
 801946a:	db25      	blt.n	80194b8 <quorem+0xec>
 801946c:	4629      	mov	r1, r5
 801946e:	2000      	movs	r0, #0
 8019470:	f858 2b04 	ldr.w	r2, [r8], #4
 8019474:	f8d1 c000 	ldr.w	ip, [r1]
 8019478:	fa1f fe82 	uxth.w	lr, r2
 801947c:	fa1f f38c 	uxth.w	r3, ip
 8019480:	eba3 030e 	sub.w	r3, r3, lr
 8019484:	4403      	add	r3, r0
 8019486:	0c12      	lsrs	r2, r2, #16
 8019488:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801948c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8019490:	b29b      	uxth	r3, r3
 8019492:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8019496:	45c1      	cmp	r9, r8
 8019498:	f841 3b04 	str.w	r3, [r1], #4
 801949c:	ea4f 4022 	mov.w	r0, r2, asr #16
 80194a0:	d2e6      	bcs.n	8019470 <quorem+0xa4>
 80194a2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80194a6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80194aa:	b922      	cbnz	r2, 80194b6 <quorem+0xea>
 80194ac:	3b04      	subs	r3, #4
 80194ae:	429d      	cmp	r5, r3
 80194b0:	461a      	mov	r2, r3
 80194b2:	d30b      	bcc.n	80194cc <quorem+0x100>
 80194b4:	613c      	str	r4, [r7, #16]
 80194b6:	3601      	adds	r6, #1
 80194b8:	4630      	mov	r0, r6
 80194ba:	b003      	add	sp, #12
 80194bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80194c0:	6812      	ldr	r2, [r2, #0]
 80194c2:	3b04      	subs	r3, #4
 80194c4:	2a00      	cmp	r2, #0
 80194c6:	d1cb      	bne.n	8019460 <quorem+0x94>
 80194c8:	3c01      	subs	r4, #1
 80194ca:	e7c6      	b.n	801945a <quorem+0x8e>
 80194cc:	6812      	ldr	r2, [r2, #0]
 80194ce:	3b04      	subs	r3, #4
 80194d0:	2a00      	cmp	r2, #0
 80194d2:	d1ef      	bne.n	80194b4 <quorem+0xe8>
 80194d4:	3c01      	subs	r4, #1
 80194d6:	e7ea      	b.n	80194ae <quorem+0xe2>
 80194d8:	2000      	movs	r0, #0
 80194da:	e7ee      	b.n	80194ba <quorem+0xee>
 80194dc:	0000      	movs	r0, r0
	...

080194e0 <_dtoa_r>:
 80194e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80194e4:	ed2d 8b02 	vpush	{d8}
 80194e8:	69c7      	ldr	r7, [r0, #28]
 80194ea:	b091      	sub	sp, #68	@ 0x44
 80194ec:	ed8d 0b02 	vstr	d0, [sp, #8]
 80194f0:	ec55 4b10 	vmov	r4, r5, d0
 80194f4:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 80194f6:	9107      	str	r1, [sp, #28]
 80194f8:	4681      	mov	r9, r0
 80194fa:	9209      	str	r2, [sp, #36]	@ 0x24
 80194fc:	930d      	str	r3, [sp, #52]	@ 0x34
 80194fe:	b97f      	cbnz	r7, 8019520 <_dtoa_r+0x40>
 8019500:	2010      	movs	r0, #16
 8019502:	f7ff f855 	bl	80185b0 <malloc>
 8019506:	4602      	mov	r2, r0
 8019508:	f8c9 001c 	str.w	r0, [r9, #28]
 801950c:	b920      	cbnz	r0, 8019518 <_dtoa_r+0x38>
 801950e:	4ba0      	ldr	r3, [pc, #640]	@ (8019790 <_dtoa_r+0x2b0>)
 8019510:	21ef      	movs	r1, #239	@ 0xef
 8019512:	48a0      	ldr	r0, [pc, #640]	@ (8019794 <_dtoa_r+0x2b4>)
 8019514:	f7ff ff3c 	bl	8019390 <__assert_func>
 8019518:	e9c0 7701 	strd	r7, r7, [r0, #4]
 801951c:	6007      	str	r7, [r0, #0]
 801951e:	60c7      	str	r7, [r0, #12]
 8019520:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8019524:	6819      	ldr	r1, [r3, #0]
 8019526:	b159      	cbz	r1, 8019540 <_dtoa_r+0x60>
 8019528:	685a      	ldr	r2, [r3, #4]
 801952a:	604a      	str	r2, [r1, #4]
 801952c:	2301      	movs	r3, #1
 801952e:	4093      	lsls	r3, r2
 8019530:	608b      	str	r3, [r1, #8]
 8019532:	4648      	mov	r0, r9
 8019534:	f000 fdbc 	bl	801a0b0 <_Bfree>
 8019538:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801953c:	2200      	movs	r2, #0
 801953e:	601a      	str	r2, [r3, #0]
 8019540:	1e2b      	subs	r3, r5, #0
 8019542:	bfbb      	ittet	lt
 8019544:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8019548:	9303      	strlt	r3, [sp, #12]
 801954a:	2300      	movge	r3, #0
 801954c:	2201      	movlt	r2, #1
 801954e:	bfac      	ite	ge
 8019550:	6033      	strge	r3, [r6, #0]
 8019552:	6032      	strlt	r2, [r6, #0]
 8019554:	4b90      	ldr	r3, [pc, #576]	@ (8019798 <_dtoa_r+0x2b8>)
 8019556:	9e03      	ldr	r6, [sp, #12]
 8019558:	43b3      	bics	r3, r6
 801955a:	d110      	bne.n	801957e <_dtoa_r+0x9e>
 801955c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801955e:	f242 730f 	movw	r3, #9999	@ 0x270f
 8019562:	6013      	str	r3, [r2, #0]
 8019564:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8019568:	4323      	orrs	r3, r4
 801956a:	f000 84e6 	beq.w	8019f3a <_dtoa_r+0xa5a>
 801956e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8019570:	4f8a      	ldr	r7, [pc, #552]	@ (801979c <_dtoa_r+0x2bc>)
 8019572:	2b00      	cmp	r3, #0
 8019574:	f000 84e8 	beq.w	8019f48 <_dtoa_r+0xa68>
 8019578:	1cfb      	adds	r3, r7, #3
 801957a:	f000 bce3 	b.w	8019f44 <_dtoa_r+0xa64>
 801957e:	ed9d 8b02 	vldr	d8, [sp, #8]
 8019582:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8019586:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801958a:	d10a      	bne.n	80195a2 <_dtoa_r+0xc2>
 801958c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801958e:	2301      	movs	r3, #1
 8019590:	6013      	str	r3, [r2, #0]
 8019592:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8019594:	b113      	cbz	r3, 801959c <_dtoa_r+0xbc>
 8019596:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8019598:	4b81      	ldr	r3, [pc, #516]	@ (80197a0 <_dtoa_r+0x2c0>)
 801959a:	6013      	str	r3, [r2, #0]
 801959c:	4f81      	ldr	r7, [pc, #516]	@ (80197a4 <_dtoa_r+0x2c4>)
 801959e:	f000 bcd3 	b.w	8019f48 <_dtoa_r+0xa68>
 80195a2:	aa0e      	add	r2, sp, #56	@ 0x38
 80195a4:	a90f      	add	r1, sp, #60	@ 0x3c
 80195a6:	4648      	mov	r0, r9
 80195a8:	eeb0 0b48 	vmov.f64	d0, d8
 80195ac:	f001 f862 	bl	801a674 <__d2b>
 80195b0:	f3c6 530a 	ubfx	r3, r6, #20, #11
 80195b4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80195b6:	9001      	str	r0, [sp, #4]
 80195b8:	2b00      	cmp	r3, #0
 80195ba:	d045      	beq.n	8019648 <_dtoa_r+0x168>
 80195bc:	eeb0 7b48 	vmov.f64	d7, d8
 80195c0:	ee18 1a90 	vmov	r1, s17
 80195c4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80195c8:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 80195cc:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 80195d0:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 80195d4:	2500      	movs	r5, #0
 80195d6:	ee07 1a90 	vmov	s15, r1
 80195da:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 80195de:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8019778 <_dtoa_r+0x298>
 80195e2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80195e6:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8019780 <_dtoa_r+0x2a0>
 80195ea:	eea7 6b05 	vfma.f64	d6, d7, d5
 80195ee:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8019788 <_dtoa_r+0x2a8>
 80195f2:	ee07 3a90 	vmov	s15, r3
 80195f6:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80195fa:	eeb0 7b46 	vmov.f64	d7, d6
 80195fe:	eea4 7b05 	vfma.f64	d7, d4, d5
 8019602:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8019606:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801960a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801960e:	ee16 8a90 	vmov	r8, s13
 8019612:	d508      	bpl.n	8019626 <_dtoa_r+0x146>
 8019614:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8019618:	eeb4 6b47 	vcmp.f64	d6, d7
 801961c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019620:	bf18      	it	ne
 8019622:	f108 38ff 	addne.w	r8, r8, #4294967295
 8019626:	f1b8 0f16 	cmp.w	r8, #22
 801962a:	d82b      	bhi.n	8019684 <_dtoa_r+0x1a4>
 801962c:	495e      	ldr	r1, [pc, #376]	@ (80197a8 <_dtoa_r+0x2c8>)
 801962e:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8019632:	ed91 7b00 	vldr	d7, [r1]
 8019636:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801963a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801963e:	d501      	bpl.n	8019644 <_dtoa_r+0x164>
 8019640:	f108 38ff 	add.w	r8, r8, #4294967295
 8019644:	2100      	movs	r1, #0
 8019646:	e01e      	b.n	8019686 <_dtoa_r+0x1a6>
 8019648:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801964a:	4413      	add	r3, r2
 801964c:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8019650:	2920      	cmp	r1, #32
 8019652:	bfc1      	itttt	gt
 8019654:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8019658:	408e      	lslgt	r6, r1
 801965a:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 801965e:	fa24 f101 	lsrgt.w	r1, r4, r1
 8019662:	bfd6      	itet	le
 8019664:	f1c1 0120 	rsble	r1, r1, #32
 8019668:	4331      	orrgt	r1, r6
 801966a:	fa04 f101 	lslle.w	r1, r4, r1
 801966e:	ee07 1a90 	vmov	s15, r1
 8019672:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8019676:	3b01      	subs	r3, #1
 8019678:	ee17 1a90 	vmov	r1, s15
 801967c:	2501      	movs	r5, #1
 801967e:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8019682:	e7a8      	b.n	80195d6 <_dtoa_r+0xf6>
 8019684:	2101      	movs	r1, #1
 8019686:	1ad2      	subs	r2, r2, r3
 8019688:	1e53      	subs	r3, r2, #1
 801968a:	9306      	str	r3, [sp, #24]
 801968c:	bf45      	ittet	mi
 801968e:	f1c2 0301 	rsbmi	r3, r2, #1
 8019692:	9304      	strmi	r3, [sp, #16]
 8019694:	2300      	movpl	r3, #0
 8019696:	2300      	movmi	r3, #0
 8019698:	bf4c      	ite	mi
 801969a:	9306      	strmi	r3, [sp, #24]
 801969c:	9304      	strpl	r3, [sp, #16]
 801969e:	f1b8 0f00 	cmp.w	r8, #0
 80196a2:	910c      	str	r1, [sp, #48]	@ 0x30
 80196a4:	db18      	blt.n	80196d8 <_dtoa_r+0x1f8>
 80196a6:	9b06      	ldr	r3, [sp, #24]
 80196a8:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80196ac:	4443      	add	r3, r8
 80196ae:	9306      	str	r3, [sp, #24]
 80196b0:	2300      	movs	r3, #0
 80196b2:	9a07      	ldr	r2, [sp, #28]
 80196b4:	2a09      	cmp	r2, #9
 80196b6:	d845      	bhi.n	8019744 <_dtoa_r+0x264>
 80196b8:	2a05      	cmp	r2, #5
 80196ba:	bfc4      	itt	gt
 80196bc:	3a04      	subgt	r2, #4
 80196be:	9207      	strgt	r2, [sp, #28]
 80196c0:	9a07      	ldr	r2, [sp, #28]
 80196c2:	f1a2 0202 	sub.w	r2, r2, #2
 80196c6:	bfcc      	ite	gt
 80196c8:	2400      	movgt	r4, #0
 80196ca:	2401      	movle	r4, #1
 80196cc:	2a03      	cmp	r2, #3
 80196ce:	d844      	bhi.n	801975a <_dtoa_r+0x27a>
 80196d0:	e8df f002 	tbb	[pc, r2]
 80196d4:	0b173634 	.word	0x0b173634
 80196d8:	9b04      	ldr	r3, [sp, #16]
 80196da:	2200      	movs	r2, #0
 80196dc:	eba3 0308 	sub.w	r3, r3, r8
 80196e0:	9304      	str	r3, [sp, #16]
 80196e2:	920a      	str	r2, [sp, #40]	@ 0x28
 80196e4:	f1c8 0300 	rsb	r3, r8, #0
 80196e8:	e7e3      	b.n	80196b2 <_dtoa_r+0x1d2>
 80196ea:	2201      	movs	r2, #1
 80196ec:	9208      	str	r2, [sp, #32]
 80196ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80196f0:	eb08 0b02 	add.w	fp, r8, r2
 80196f4:	f10b 0a01 	add.w	sl, fp, #1
 80196f8:	4652      	mov	r2, sl
 80196fa:	2a01      	cmp	r2, #1
 80196fc:	bfb8      	it	lt
 80196fe:	2201      	movlt	r2, #1
 8019700:	e006      	b.n	8019710 <_dtoa_r+0x230>
 8019702:	2201      	movs	r2, #1
 8019704:	9208      	str	r2, [sp, #32]
 8019706:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019708:	2a00      	cmp	r2, #0
 801970a:	dd29      	ble.n	8019760 <_dtoa_r+0x280>
 801970c:	4693      	mov	fp, r2
 801970e:	4692      	mov	sl, r2
 8019710:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8019714:	2100      	movs	r1, #0
 8019716:	2004      	movs	r0, #4
 8019718:	f100 0614 	add.w	r6, r0, #20
 801971c:	4296      	cmp	r6, r2
 801971e:	d926      	bls.n	801976e <_dtoa_r+0x28e>
 8019720:	6079      	str	r1, [r7, #4]
 8019722:	4648      	mov	r0, r9
 8019724:	9305      	str	r3, [sp, #20]
 8019726:	f000 fc83 	bl	801a030 <_Balloc>
 801972a:	9b05      	ldr	r3, [sp, #20]
 801972c:	4607      	mov	r7, r0
 801972e:	2800      	cmp	r0, #0
 8019730:	d13e      	bne.n	80197b0 <_dtoa_r+0x2d0>
 8019732:	4b1e      	ldr	r3, [pc, #120]	@ (80197ac <_dtoa_r+0x2cc>)
 8019734:	4602      	mov	r2, r0
 8019736:	f240 11af 	movw	r1, #431	@ 0x1af
 801973a:	e6ea      	b.n	8019512 <_dtoa_r+0x32>
 801973c:	2200      	movs	r2, #0
 801973e:	e7e1      	b.n	8019704 <_dtoa_r+0x224>
 8019740:	2200      	movs	r2, #0
 8019742:	e7d3      	b.n	80196ec <_dtoa_r+0x20c>
 8019744:	2401      	movs	r4, #1
 8019746:	2200      	movs	r2, #0
 8019748:	e9cd 2407 	strd	r2, r4, [sp, #28]
 801974c:	f04f 3bff 	mov.w	fp, #4294967295
 8019750:	2100      	movs	r1, #0
 8019752:	46da      	mov	sl, fp
 8019754:	2212      	movs	r2, #18
 8019756:	9109      	str	r1, [sp, #36]	@ 0x24
 8019758:	e7da      	b.n	8019710 <_dtoa_r+0x230>
 801975a:	2201      	movs	r2, #1
 801975c:	9208      	str	r2, [sp, #32]
 801975e:	e7f5      	b.n	801974c <_dtoa_r+0x26c>
 8019760:	f04f 0b01 	mov.w	fp, #1
 8019764:	46da      	mov	sl, fp
 8019766:	465a      	mov	r2, fp
 8019768:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 801976c:	e7d0      	b.n	8019710 <_dtoa_r+0x230>
 801976e:	3101      	adds	r1, #1
 8019770:	0040      	lsls	r0, r0, #1
 8019772:	e7d1      	b.n	8019718 <_dtoa_r+0x238>
 8019774:	f3af 8000 	nop.w
 8019778:	636f4361 	.word	0x636f4361
 801977c:	3fd287a7 	.word	0x3fd287a7
 8019780:	8b60c8b3 	.word	0x8b60c8b3
 8019784:	3fc68a28 	.word	0x3fc68a28
 8019788:	509f79fb 	.word	0x509f79fb
 801978c:	3fd34413 	.word	0x3fd34413
 8019790:	0801b6fc 	.word	0x0801b6fc
 8019794:	0801b7e8 	.word	0x0801b7e8
 8019798:	7ff00000 	.word	0x7ff00000
 801979c:	0801b7e4 	.word	0x0801b7e4
 80197a0:	0801b77c 	.word	0x0801b77c
 80197a4:	0801b77b 	.word	0x0801b77b
 80197a8:	0801b900 	.word	0x0801b900
 80197ac:	0801b840 	.word	0x0801b840
 80197b0:	f8d9 201c 	ldr.w	r2, [r9, #28]
 80197b4:	f1ba 0f0e 	cmp.w	sl, #14
 80197b8:	6010      	str	r0, [r2, #0]
 80197ba:	d86e      	bhi.n	801989a <_dtoa_r+0x3ba>
 80197bc:	2c00      	cmp	r4, #0
 80197be:	d06c      	beq.n	801989a <_dtoa_r+0x3ba>
 80197c0:	f1b8 0f00 	cmp.w	r8, #0
 80197c4:	f340 80b4 	ble.w	8019930 <_dtoa_r+0x450>
 80197c8:	4ac8      	ldr	r2, [pc, #800]	@ (8019aec <_dtoa_r+0x60c>)
 80197ca:	f008 010f 	and.w	r1, r8, #15
 80197ce:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80197d2:	f418 7f80 	tst.w	r8, #256	@ 0x100
 80197d6:	ed92 7b00 	vldr	d7, [r2]
 80197da:	ea4f 1128 	mov.w	r1, r8, asr #4
 80197de:	f000 809b 	beq.w	8019918 <_dtoa_r+0x438>
 80197e2:	4ac3      	ldr	r2, [pc, #780]	@ (8019af0 <_dtoa_r+0x610>)
 80197e4:	ed92 6b08 	vldr	d6, [r2, #32]
 80197e8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80197ec:	ed8d 6b02 	vstr	d6, [sp, #8]
 80197f0:	f001 010f 	and.w	r1, r1, #15
 80197f4:	2203      	movs	r2, #3
 80197f6:	48be      	ldr	r0, [pc, #760]	@ (8019af0 <_dtoa_r+0x610>)
 80197f8:	2900      	cmp	r1, #0
 80197fa:	f040 808f 	bne.w	801991c <_dtoa_r+0x43c>
 80197fe:	ed9d 6b02 	vldr	d6, [sp, #8]
 8019802:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8019806:	ed8d 7b02 	vstr	d7, [sp, #8]
 801980a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801980c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8019810:	2900      	cmp	r1, #0
 8019812:	f000 80b3 	beq.w	801997c <_dtoa_r+0x49c>
 8019816:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 801981a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801981e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019822:	f140 80ab 	bpl.w	801997c <_dtoa_r+0x49c>
 8019826:	f1ba 0f00 	cmp.w	sl, #0
 801982a:	f000 80a7 	beq.w	801997c <_dtoa_r+0x49c>
 801982e:	f1bb 0f00 	cmp.w	fp, #0
 8019832:	dd30      	ble.n	8019896 <_dtoa_r+0x3b6>
 8019834:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8019838:	ee27 7b06 	vmul.f64	d7, d7, d6
 801983c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8019840:	f108 31ff 	add.w	r1, r8, #4294967295
 8019844:	9105      	str	r1, [sp, #20]
 8019846:	3201      	adds	r2, #1
 8019848:	465c      	mov	r4, fp
 801984a:	ed9d 6b02 	vldr	d6, [sp, #8]
 801984e:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8019852:	ee07 2a90 	vmov	s15, r2
 8019856:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801985a:	eea7 5b06 	vfma.f64	d5, d7, d6
 801985e:	ee15 2a90 	vmov	r2, s11
 8019862:	ec51 0b15 	vmov	r0, r1, d5
 8019866:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 801986a:	2c00      	cmp	r4, #0
 801986c:	f040 808a 	bne.w	8019984 <_dtoa_r+0x4a4>
 8019870:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8019874:	ee36 6b47 	vsub.f64	d6, d6, d7
 8019878:	ec41 0b17 	vmov	d7, r0, r1
 801987c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8019880:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019884:	f300 826a 	bgt.w	8019d5c <_dtoa_r+0x87c>
 8019888:	eeb1 7b47 	vneg.f64	d7, d7
 801988c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8019890:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019894:	d423      	bmi.n	80198de <_dtoa_r+0x3fe>
 8019896:	ed8d 8b02 	vstr	d8, [sp, #8]
 801989a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801989c:	2a00      	cmp	r2, #0
 801989e:	f2c0 8129 	blt.w	8019af4 <_dtoa_r+0x614>
 80198a2:	f1b8 0f0e 	cmp.w	r8, #14
 80198a6:	f300 8125 	bgt.w	8019af4 <_dtoa_r+0x614>
 80198aa:	4b90      	ldr	r3, [pc, #576]	@ (8019aec <_dtoa_r+0x60c>)
 80198ac:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80198b0:	ed93 6b00 	vldr	d6, [r3]
 80198b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80198b6:	2b00      	cmp	r3, #0
 80198b8:	f280 80c8 	bge.w	8019a4c <_dtoa_r+0x56c>
 80198bc:	f1ba 0f00 	cmp.w	sl, #0
 80198c0:	f300 80c4 	bgt.w	8019a4c <_dtoa_r+0x56c>
 80198c4:	d10b      	bne.n	80198de <_dtoa_r+0x3fe>
 80198c6:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 80198ca:	ee26 6b07 	vmul.f64	d6, d6, d7
 80198ce:	ed9d 7b02 	vldr	d7, [sp, #8]
 80198d2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80198d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80198da:	f2c0 823c 	blt.w	8019d56 <_dtoa_r+0x876>
 80198de:	2400      	movs	r4, #0
 80198e0:	4625      	mov	r5, r4
 80198e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80198e4:	43db      	mvns	r3, r3
 80198e6:	9305      	str	r3, [sp, #20]
 80198e8:	463e      	mov	r6, r7
 80198ea:	f04f 0800 	mov.w	r8, #0
 80198ee:	4621      	mov	r1, r4
 80198f0:	4648      	mov	r0, r9
 80198f2:	f000 fbdd 	bl	801a0b0 <_Bfree>
 80198f6:	2d00      	cmp	r5, #0
 80198f8:	f000 80a2 	beq.w	8019a40 <_dtoa_r+0x560>
 80198fc:	f1b8 0f00 	cmp.w	r8, #0
 8019900:	d005      	beq.n	801990e <_dtoa_r+0x42e>
 8019902:	45a8      	cmp	r8, r5
 8019904:	d003      	beq.n	801990e <_dtoa_r+0x42e>
 8019906:	4641      	mov	r1, r8
 8019908:	4648      	mov	r0, r9
 801990a:	f000 fbd1 	bl	801a0b0 <_Bfree>
 801990e:	4629      	mov	r1, r5
 8019910:	4648      	mov	r0, r9
 8019912:	f000 fbcd 	bl	801a0b0 <_Bfree>
 8019916:	e093      	b.n	8019a40 <_dtoa_r+0x560>
 8019918:	2202      	movs	r2, #2
 801991a:	e76c      	b.n	80197f6 <_dtoa_r+0x316>
 801991c:	07cc      	lsls	r4, r1, #31
 801991e:	d504      	bpl.n	801992a <_dtoa_r+0x44a>
 8019920:	ed90 6b00 	vldr	d6, [r0]
 8019924:	3201      	adds	r2, #1
 8019926:	ee27 7b06 	vmul.f64	d7, d7, d6
 801992a:	1049      	asrs	r1, r1, #1
 801992c:	3008      	adds	r0, #8
 801992e:	e763      	b.n	80197f8 <_dtoa_r+0x318>
 8019930:	d022      	beq.n	8019978 <_dtoa_r+0x498>
 8019932:	f1c8 0100 	rsb	r1, r8, #0
 8019936:	4a6d      	ldr	r2, [pc, #436]	@ (8019aec <_dtoa_r+0x60c>)
 8019938:	f001 000f 	and.w	r0, r1, #15
 801993c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8019940:	ed92 7b00 	vldr	d7, [r2]
 8019944:	ee28 7b07 	vmul.f64	d7, d8, d7
 8019948:	ed8d 7b02 	vstr	d7, [sp, #8]
 801994c:	4868      	ldr	r0, [pc, #416]	@ (8019af0 <_dtoa_r+0x610>)
 801994e:	1109      	asrs	r1, r1, #4
 8019950:	2400      	movs	r4, #0
 8019952:	2202      	movs	r2, #2
 8019954:	b929      	cbnz	r1, 8019962 <_dtoa_r+0x482>
 8019956:	2c00      	cmp	r4, #0
 8019958:	f43f af57 	beq.w	801980a <_dtoa_r+0x32a>
 801995c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8019960:	e753      	b.n	801980a <_dtoa_r+0x32a>
 8019962:	07ce      	lsls	r6, r1, #31
 8019964:	d505      	bpl.n	8019972 <_dtoa_r+0x492>
 8019966:	ed90 6b00 	vldr	d6, [r0]
 801996a:	3201      	adds	r2, #1
 801996c:	2401      	movs	r4, #1
 801996e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8019972:	1049      	asrs	r1, r1, #1
 8019974:	3008      	adds	r0, #8
 8019976:	e7ed      	b.n	8019954 <_dtoa_r+0x474>
 8019978:	2202      	movs	r2, #2
 801997a:	e746      	b.n	801980a <_dtoa_r+0x32a>
 801997c:	f8cd 8014 	str.w	r8, [sp, #20]
 8019980:	4654      	mov	r4, sl
 8019982:	e762      	b.n	801984a <_dtoa_r+0x36a>
 8019984:	4a59      	ldr	r2, [pc, #356]	@ (8019aec <_dtoa_r+0x60c>)
 8019986:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 801998a:	ed12 4b02 	vldr	d4, [r2, #-8]
 801998e:	9a08      	ldr	r2, [sp, #32]
 8019990:	ec41 0b17 	vmov	d7, r0, r1
 8019994:	443c      	add	r4, r7
 8019996:	b34a      	cbz	r2, 80199ec <_dtoa_r+0x50c>
 8019998:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 801999c:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 80199a0:	463e      	mov	r6, r7
 80199a2:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80199a6:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 80199aa:	ee35 7b47 	vsub.f64	d7, d5, d7
 80199ae:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80199b2:	ee14 2a90 	vmov	r2, s9
 80199b6:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80199ba:	3230      	adds	r2, #48	@ 0x30
 80199bc:	ee36 6b45 	vsub.f64	d6, d6, d5
 80199c0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80199c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80199c8:	f806 2b01 	strb.w	r2, [r6], #1
 80199cc:	d438      	bmi.n	8019a40 <_dtoa_r+0x560>
 80199ce:	ee32 5b46 	vsub.f64	d5, d2, d6
 80199d2:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80199d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80199da:	d46e      	bmi.n	8019aba <_dtoa_r+0x5da>
 80199dc:	42a6      	cmp	r6, r4
 80199de:	f43f af5a 	beq.w	8019896 <_dtoa_r+0x3b6>
 80199e2:	ee27 7b03 	vmul.f64	d7, d7, d3
 80199e6:	ee26 6b03 	vmul.f64	d6, d6, d3
 80199ea:	e7e0      	b.n	80199ae <_dtoa_r+0x4ce>
 80199ec:	4621      	mov	r1, r4
 80199ee:	463e      	mov	r6, r7
 80199f0:	ee27 7b04 	vmul.f64	d7, d7, d4
 80199f4:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 80199f8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80199fc:	ee14 2a90 	vmov	r2, s9
 8019a00:	3230      	adds	r2, #48	@ 0x30
 8019a02:	f806 2b01 	strb.w	r2, [r6], #1
 8019a06:	42a6      	cmp	r6, r4
 8019a08:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8019a0c:	ee36 6b45 	vsub.f64	d6, d6, d5
 8019a10:	d119      	bne.n	8019a46 <_dtoa_r+0x566>
 8019a12:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8019a16:	ee37 4b05 	vadd.f64	d4, d7, d5
 8019a1a:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8019a1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019a22:	dc4a      	bgt.n	8019aba <_dtoa_r+0x5da>
 8019a24:	ee35 5b47 	vsub.f64	d5, d5, d7
 8019a28:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8019a2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019a30:	f57f af31 	bpl.w	8019896 <_dtoa_r+0x3b6>
 8019a34:	460e      	mov	r6, r1
 8019a36:	3901      	subs	r1, #1
 8019a38:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8019a3c:	2b30      	cmp	r3, #48	@ 0x30
 8019a3e:	d0f9      	beq.n	8019a34 <_dtoa_r+0x554>
 8019a40:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8019a44:	e027      	b.n	8019a96 <_dtoa_r+0x5b6>
 8019a46:	ee26 6b03 	vmul.f64	d6, d6, d3
 8019a4a:	e7d5      	b.n	80199f8 <_dtoa_r+0x518>
 8019a4c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8019a50:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8019a54:	463e      	mov	r6, r7
 8019a56:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8019a5a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8019a5e:	ee15 3a10 	vmov	r3, s10
 8019a62:	3330      	adds	r3, #48	@ 0x30
 8019a64:	f806 3b01 	strb.w	r3, [r6], #1
 8019a68:	1bf3      	subs	r3, r6, r7
 8019a6a:	459a      	cmp	sl, r3
 8019a6c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8019a70:	eea3 7b46 	vfms.f64	d7, d3, d6
 8019a74:	d132      	bne.n	8019adc <_dtoa_r+0x5fc>
 8019a76:	ee37 7b07 	vadd.f64	d7, d7, d7
 8019a7a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8019a7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019a82:	dc18      	bgt.n	8019ab6 <_dtoa_r+0x5d6>
 8019a84:	eeb4 7b46 	vcmp.f64	d7, d6
 8019a88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019a8c:	d103      	bne.n	8019a96 <_dtoa_r+0x5b6>
 8019a8e:	ee15 3a10 	vmov	r3, s10
 8019a92:	07db      	lsls	r3, r3, #31
 8019a94:	d40f      	bmi.n	8019ab6 <_dtoa_r+0x5d6>
 8019a96:	9901      	ldr	r1, [sp, #4]
 8019a98:	4648      	mov	r0, r9
 8019a9a:	f000 fb09 	bl	801a0b0 <_Bfree>
 8019a9e:	2300      	movs	r3, #0
 8019aa0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8019aa2:	7033      	strb	r3, [r6, #0]
 8019aa4:	f108 0301 	add.w	r3, r8, #1
 8019aa8:	6013      	str	r3, [r2, #0]
 8019aaa:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8019aac:	2b00      	cmp	r3, #0
 8019aae:	f000 824b 	beq.w	8019f48 <_dtoa_r+0xa68>
 8019ab2:	601e      	str	r6, [r3, #0]
 8019ab4:	e248      	b.n	8019f48 <_dtoa_r+0xa68>
 8019ab6:	f8cd 8014 	str.w	r8, [sp, #20]
 8019aba:	4633      	mov	r3, r6
 8019abc:	461e      	mov	r6, r3
 8019abe:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8019ac2:	2a39      	cmp	r2, #57	@ 0x39
 8019ac4:	d106      	bne.n	8019ad4 <_dtoa_r+0x5f4>
 8019ac6:	429f      	cmp	r7, r3
 8019ac8:	d1f8      	bne.n	8019abc <_dtoa_r+0x5dc>
 8019aca:	9a05      	ldr	r2, [sp, #20]
 8019acc:	3201      	adds	r2, #1
 8019ace:	9205      	str	r2, [sp, #20]
 8019ad0:	2230      	movs	r2, #48	@ 0x30
 8019ad2:	703a      	strb	r2, [r7, #0]
 8019ad4:	781a      	ldrb	r2, [r3, #0]
 8019ad6:	3201      	adds	r2, #1
 8019ad8:	701a      	strb	r2, [r3, #0]
 8019ada:	e7b1      	b.n	8019a40 <_dtoa_r+0x560>
 8019adc:	ee27 7b04 	vmul.f64	d7, d7, d4
 8019ae0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8019ae4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019ae8:	d1b5      	bne.n	8019a56 <_dtoa_r+0x576>
 8019aea:	e7d4      	b.n	8019a96 <_dtoa_r+0x5b6>
 8019aec:	0801b900 	.word	0x0801b900
 8019af0:	0801b8d8 	.word	0x0801b8d8
 8019af4:	9908      	ldr	r1, [sp, #32]
 8019af6:	2900      	cmp	r1, #0
 8019af8:	f000 80e9 	beq.w	8019cce <_dtoa_r+0x7ee>
 8019afc:	9907      	ldr	r1, [sp, #28]
 8019afe:	2901      	cmp	r1, #1
 8019b00:	f300 80cb 	bgt.w	8019c9a <_dtoa_r+0x7ba>
 8019b04:	2d00      	cmp	r5, #0
 8019b06:	f000 80c4 	beq.w	8019c92 <_dtoa_r+0x7b2>
 8019b0a:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8019b0e:	9e04      	ldr	r6, [sp, #16]
 8019b10:	461c      	mov	r4, r3
 8019b12:	9305      	str	r3, [sp, #20]
 8019b14:	9b04      	ldr	r3, [sp, #16]
 8019b16:	4413      	add	r3, r2
 8019b18:	9304      	str	r3, [sp, #16]
 8019b1a:	9b06      	ldr	r3, [sp, #24]
 8019b1c:	2101      	movs	r1, #1
 8019b1e:	4413      	add	r3, r2
 8019b20:	4648      	mov	r0, r9
 8019b22:	9306      	str	r3, [sp, #24]
 8019b24:	f000 fb78 	bl	801a218 <__i2b>
 8019b28:	9b05      	ldr	r3, [sp, #20]
 8019b2a:	4605      	mov	r5, r0
 8019b2c:	b166      	cbz	r6, 8019b48 <_dtoa_r+0x668>
 8019b2e:	9a06      	ldr	r2, [sp, #24]
 8019b30:	2a00      	cmp	r2, #0
 8019b32:	dd09      	ble.n	8019b48 <_dtoa_r+0x668>
 8019b34:	42b2      	cmp	r2, r6
 8019b36:	9904      	ldr	r1, [sp, #16]
 8019b38:	bfa8      	it	ge
 8019b3a:	4632      	movge	r2, r6
 8019b3c:	1a89      	subs	r1, r1, r2
 8019b3e:	9104      	str	r1, [sp, #16]
 8019b40:	9906      	ldr	r1, [sp, #24]
 8019b42:	1ab6      	subs	r6, r6, r2
 8019b44:	1a8a      	subs	r2, r1, r2
 8019b46:	9206      	str	r2, [sp, #24]
 8019b48:	b30b      	cbz	r3, 8019b8e <_dtoa_r+0x6ae>
 8019b4a:	9a08      	ldr	r2, [sp, #32]
 8019b4c:	2a00      	cmp	r2, #0
 8019b4e:	f000 80c5 	beq.w	8019cdc <_dtoa_r+0x7fc>
 8019b52:	2c00      	cmp	r4, #0
 8019b54:	f000 80bf 	beq.w	8019cd6 <_dtoa_r+0x7f6>
 8019b58:	4629      	mov	r1, r5
 8019b5a:	4622      	mov	r2, r4
 8019b5c:	4648      	mov	r0, r9
 8019b5e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8019b60:	f000 fc12 	bl	801a388 <__pow5mult>
 8019b64:	9a01      	ldr	r2, [sp, #4]
 8019b66:	4601      	mov	r1, r0
 8019b68:	4605      	mov	r5, r0
 8019b6a:	4648      	mov	r0, r9
 8019b6c:	f000 fb6a 	bl	801a244 <__multiply>
 8019b70:	9901      	ldr	r1, [sp, #4]
 8019b72:	9005      	str	r0, [sp, #20]
 8019b74:	4648      	mov	r0, r9
 8019b76:	f000 fa9b 	bl	801a0b0 <_Bfree>
 8019b7a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8019b7c:	1b1b      	subs	r3, r3, r4
 8019b7e:	f000 80b0 	beq.w	8019ce2 <_dtoa_r+0x802>
 8019b82:	9905      	ldr	r1, [sp, #20]
 8019b84:	461a      	mov	r2, r3
 8019b86:	4648      	mov	r0, r9
 8019b88:	f000 fbfe 	bl	801a388 <__pow5mult>
 8019b8c:	9001      	str	r0, [sp, #4]
 8019b8e:	2101      	movs	r1, #1
 8019b90:	4648      	mov	r0, r9
 8019b92:	f000 fb41 	bl	801a218 <__i2b>
 8019b96:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8019b98:	4604      	mov	r4, r0
 8019b9a:	2b00      	cmp	r3, #0
 8019b9c:	f000 81da 	beq.w	8019f54 <_dtoa_r+0xa74>
 8019ba0:	461a      	mov	r2, r3
 8019ba2:	4601      	mov	r1, r0
 8019ba4:	4648      	mov	r0, r9
 8019ba6:	f000 fbef 	bl	801a388 <__pow5mult>
 8019baa:	9b07      	ldr	r3, [sp, #28]
 8019bac:	2b01      	cmp	r3, #1
 8019bae:	4604      	mov	r4, r0
 8019bb0:	f300 80a0 	bgt.w	8019cf4 <_dtoa_r+0x814>
 8019bb4:	9b02      	ldr	r3, [sp, #8]
 8019bb6:	2b00      	cmp	r3, #0
 8019bb8:	f040 8096 	bne.w	8019ce8 <_dtoa_r+0x808>
 8019bbc:	9b03      	ldr	r3, [sp, #12]
 8019bbe:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8019bc2:	2a00      	cmp	r2, #0
 8019bc4:	f040 8092 	bne.w	8019cec <_dtoa_r+0x80c>
 8019bc8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8019bcc:	0d12      	lsrs	r2, r2, #20
 8019bce:	0512      	lsls	r2, r2, #20
 8019bd0:	2a00      	cmp	r2, #0
 8019bd2:	f000 808d 	beq.w	8019cf0 <_dtoa_r+0x810>
 8019bd6:	9b04      	ldr	r3, [sp, #16]
 8019bd8:	3301      	adds	r3, #1
 8019bda:	9304      	str	r3, [sp, #16]
 8019bdc:	9b06      	ldr	r3, [sp, #24]
 8019bde:	3301      	adds	r3, #1
 8019be0:	9306      	str	r3, [sp, #24]
 8019be2:	2301      	movs	r3, #1
 8019be4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8019be6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8019be8:	2b00      	cmp	r3, #0
 8019bea:	f000 81b9 	beq.w	8019f60 <_dtoa_r+0xa80>
 8019bee:	6922      	ldr	r2, [r4, #16]
 8019bf0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8019bf4:	6910      	ldr	r0, [r2, #16]
 8019bf6:	f000 fac3 	bl	801a180 <__hi0bits>
 8019bfa:	f1c0 0020 	rsb	r0, r0, #32
 8019bfe:	9b06      	ldr	r3, [sp, #24]
 8019c00:	4418      	add	r0, r3
 8019c02:	f010 001f 	ands.w	r0, r0, #31
 8019c06:	f000 8081 	beq.w	8019d0c <_dtoa_r+0x82c>
 8019c0a:	f1c0 0220 	rsb	r2, r0, #32
 8019c0e:	2a04      	cmp	r2, #4
 8019c10:	dd73      	ble.n	8019cfa <_dtoa_r+0x81a>
 8019c12:	9b04      	ldr	r3, [sp, #16]
 8019c14:	f1c0 001c 	rsb	r0, r0, #28
 8019c18:	4403      	add	r3, r0
 8019c1a:	9304      	str	r3, [sp, #16]
 8019c1c:	9b06      	ldr	r3, [sp, #24]
 8019c1e:	4406      	add	r6, r0
 8019c20:	4403      	add	r3, r0
 8019c22:	9306      	str	r3, [sp, #24]
 8019c24:	9b04      	ldr	r3, [sp, #16]
 8019c26:	2b00      	cmp	r3, #0
 8019c28:	dd05      	ble.n	8019c36 <_dtoa_r+0x756>
 8019c2a:	9901      	ldr	r1, [sp, #4]
 8019c2c:	461a      	mov	r2, r3
 8019c2e:	4648      	mov	r0, r9
 8019c30:	f000 fc04 	bl	801a43c <__lshift>
 8019c34:	9001      	str	r0, [sp, #4]
 8019c36:	9b06      	ldr	r3, [sp, #24]
 8019c38:	2b00      	cmp	r3, #0
 8019c3a:	dd05      	ble.n	8019c48 <_dtoa_r+0x768>
 8019c3c:	4621      	mov	r1, r4
 8019c3e:	461a      	mov	r2, r3
 8019c40:	4648      	mov	r0, r9
 8019c42:	f000 fbfb 	bl	801a43c <__lshift>
 8019c46:	4604      	mov	r4, r0
 8019c48:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019c4a:	2b00      	cmp	r3, #0
 8019c4c:	d060      	beq.n	8019d10 <_dtoa_r+0x830>
 8019c4e:	9801      	ldr	r0, [sp, #4]
 8019c50:	4621      	mov	r1, r4
 8019c52:	f000 fc5f 	bl	801a514 <__mcmp>
 8019c56:	2800      	cmp	r0, #0
 8019c58:	da5a      	bge.n	8019d10 <_dtoa_r+0x830>
 8019c5a:	f108 33ff 	add.w	r3, r8, #4294967295
 8019c5e:	9305      	str	r3, [sp, #20]
 8019c60:	9901      	ldr	r1, [sp, #4]
 8019c62:	2300      	movs	r3, #0
 8019c64:	220a      	movs	r2, #10
 8019c66:	4648      	mov	r0, r9
 8019c68:	f000 fa44 	bl	801a0f4 <__multadd>
 8019c6c:	9b08      	ldr	r3, [sp, #32]
 8019c6e:	9001      	str	r0, [sp, #4]
 8019c70:	2b00      	cmp	r3, #0
 8019c72:	f000 8177 	beq.w	8019f64 <_dtoa_r+0xa84>
 8019c76:	4629      	mov	r1, r5
 8019c78:	2300      	movs	r3, #0
 8019c7a:	220a      	movs	r2, #10
 8019c7c:	4648      	mov	r0, r9
 8019c7e:	f000 fa39 	bl	801a0f4 <__multadd>
 8019c82:	f1bb 0f00 	cmp.w	fp, #0
 8019c86:	4605      	mov	r5, r0
 8019c88:	dc6e      	bgt.n	8019d68 <_dtoa_r+0x888>
 8019c8a:	9b07      	ldr	r3, [sp, #28]
 8019c8c:	2b02      	cmp	r3, #2
 8019c8e:	dc48      	bgt.n	8019d22 <_dtoa_r+0x842>
 8019c90:	e06a      	b.n	8019d68 <_dtoa_r+0x888>
 8019c92:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8019c94:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8019c98:	e739      	b.n	8019b0e <_dtoa_r+0x62e>
 8019c9a:	f10a 34ff 	add.w	r4, sl, #4294967295
 8019c9e:	42a3      	cmp	r3, r4
 8019ca0:	db07      	blt.n	8019cb2 <_dtoa_r+0x7d2>
 8019ca2:	f1ba 0f00 	cmp.w	sl, #0
 8019ca6:	eba3 0404 	sub.w	r4, r3, r4
 8019caa:	db0b      	blt.n	8019cc4 <_dtoa_r+0x7e4>
 8019cac:	9e04      	ldr	r6, [sp, #16]
 8019cae:	4652      	mov	r2, sl
 8019cb0:	e72f      	b.n	8019b12 <_dtoa_r+0x632>
 8019cb2:	1ae2      	subs	r2, r4, r3
 8019cb4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8019cb6:	9e04      	ldr	r6, [sp, #16]
 8019cb8:	4413      	add	r3, r2
 8019cba:	930a      	str	r3, [sp, #40]	@ 0x28
 8019cbc:	4652      	mov	r2, sl
 8019cbe:	4623      	mov	r3, r4
 8019cc0:	2400      	movs	r4, #0
 8019cc2:	e726      	b.n	8019b12 <_dtoa_r+0x632>
 8019cc4:	9a04      	ldr	r2, [sp, #16]
 8019cc6:	eba2 060a 	sub.w	r6, r2, sl
 8019cca:	2200      	movs	r2, #0
 8019ccc:	e721      	b.n	8019b12 <_dtoa_r+0x632>
 8019cce:	9e04      	ldr	r6, [sp, #16]
 8019cd0:	9d08      	ldr	r5, [sp, #32]
 8019cd2:	461c      	mov	r4, r3
 8019cd4:	e72a      	b.n	8019b2c <_dtoa_r+0x64c>
 8019cd6:	9a01      	ldr	r2, [sp, #4]
 8019cd8:	9205      	str	r2, [sp, #20]
 8019cda:	e752      	b.n	8019b82 <_dtoa_r+0x6a2>
 8019cdc:	9901      	ldr	r1, [sp, #4]
 8019cde:	461a      	mov	r2, r3
 8019ce0:	e751      	b.n	8019b86 <_dtoa_r+0x6a6>
 8019ce2:	9b05      	ldr	r3, [sp, #20]
 8019ce4:	9301      	str	r3, [sp, #4]
 8019ce6:	e752      	b.n	8019b8e <_dtoa_r+0x6ae>
 8019ce8:	2300      	movs	r3, #0
 8019cea:	e77b      	b.n	8019be4 <_dtoa_r+0x704>
 8019cec:	9b02      	ldr	r3, [sp, #8]
 8019cee:	e779      	b.n	8019be4 <_dtoa_r+0x704>
 8019cf0:	920b      	str	r2, [sp, #44]	@ 0x2c
 8019cf2:	e778      	b.n	8019be6 <_dtoa_r+0x706>
 8019cf4:	2300      	movs	r3, #0
 8019cf6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8019cf8:	e779      	b.n	8019bee <_dtoa_r+0x70e>
 8019cfa:	d093      	beq.n	8019c24 <_dtoa_r+0x744>
 8019cfc:	9b04      	ldr	r3, [sp, #16]
 8019cfe:	321c      	adds	r2, #28
 8019d00:	4413      	add	r3, r2
 8019d02:	9304      	str	r3, [sp, #16]
 8019d04:	9b06      	ldr	r3, [sp, #24]
 8019d06:	4416      	add	r6, r2
 8019d08:	4413      	add	r3, r2
 8019d0a:	e78a      	b.n	8019c22 <_dtoa_r+0x742>
 8019d0c:	4602      	mov	r2, r0
 8019d0e:	e7f5      	b.n	8019cfc <_dtoa_r+0x81c>
 8019d10:	f1ba 0f00 	cmp.w	sl, #0
 8019d14:	f8cd 8014 	str.w	r8, [sp, #20]
 8019d18:	46d3      	mov	fp, sl
 8019d1a:	dc21      	bgt.n	8019d60 <_dtoa_r+0x880>
 8019d1c:	9b07      	ldr	r3, [sp, #28]
 8019d1e:	2b02      	cmp	r3, #2
 8019d20:	dd1e      	ble.n	8019d60 <_dtoa_r+0x880>
 8019d22:	f1bb 0f00 	cmp.w	fp, #0
 8019d26:	f47f addc 	bne.w	80198e2 <_dtoa_r+0x402>
 8019d2a:	4621      	mov	r1, r4
 8019d2c:	465b      	mov	r3, fp
 8019d2e:	2205      	movs	r2, #5
 8019d30:	4648      	mov	r0, r9
 8019d32:	f000 f9df 	bl	801a0f4 <__multadd>
 8019d36:	4601      	mov	r1, r0
 8019d38:	4604      	mov	r4, r0
 8019d3a:	9801      	ldr	r0, [sp, #4]
 8019d3c:	f000 fbea 	bl	801a514 <__mcmp>
 8019d40:	2800      	cmp	r0, #0
 8019d42:	f77f adce 	ble.w	80198e2 <_dtoa_r+0x402>
 8019d46:	463e      	mov	r6, r7
 8019d48:	2331      	movs	r3, #49	@ 0x31
 8019d4a:	f806 3b01 	strb.w	r3, [r6], #1
 8019d4e:	9b05      	ldr	r3, [sp, #20]
 8019d50:	3301      	adds	r3, #1
 8019d52:	9305      	str	r3, [sp, #20]
 8019d54:	e5c9      	b.n	80198ea <_dtoa_r+0x40a>
 8019d56:	f8cd 8014 	str.w	r8, [sp, #20]
 8019d5a:	4654      	mov	r4, sl
 8019d5c:	4625      	mov	r5, r4
 8019d5e:	e7f2      	b.n	8019d46 <_dtoa_r+0x866>
 8019d60:	9b08      	ldr	r3, [sp, #32]
 8019d62:	2b00      	cmp	r3, #0
 8019d64:	f000 8102 	beq.w	8019f6c <_dtoa_r+0xa8c>
 8019d68:	2e00      	cmp	r6, #0
 8019d6a:	dd05      	ble.n	8019d78 <_dtoa_r+0x898>
 8019d6c:	4629      	mov	r1, r5
 8019d6e:	4632      	mov	r2, r6
 8019d70:	4648      	mov	r0, r9
 8019d72:	f000 fb63 	bl	801a43c <__lshift>
 8019d76:	4605      	mov	r5, r0
 8019d78:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8019d7a:	2b00      	cmp	r3, #0
 8019d7c:	d058      	beq.n	8019e30 <_dtoa_r+0x950>
 8019d7e:	6869      	ldr	r1, [r5, #4]
 8019d80:	4648      	mov	r0, r9
 8019d82:	f000 f955 	bl	801a030 <_Balloc>
 8019d86:	4606      	mov	r6, r0
 8019d88:	b928      	cbnz	r0, 8019d96 <_dtoa_r+0x8b6>
 8019d8a:	4b82      	ldr	r3, [pc, #520]	@ (8019f94 <_dtoa_r+0xab4>)
 8019d8c:	4602      	mov	r2, r0
 8019d8e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8019d92:	f7ff bbbe 	b.w	8019512 <_dtoa_r+0x32>
 8019d96:	692a      	ldr	r2, [r5, #16]
 8019d98:	3202      	adds	r2, #2
 8019d9a:	0092      	lsls	r2, r2, #2
 8019d9c:	f105 010c 	add.w	r1, r5, #12
 8019da0:	300c      	adds	r0, #12
 8019da2:	f7ff fae6 	bl	8019372 <memcpy>
 8019da6:	2201      	movs	r2, #1
 8019da8:	4631      	mov	r1, r6
 8019daa:	4648      	mov	r0, r9
 8019dac:	f000 fb46 	bl	801a43c <__lshift>
 8019db0:	1c7b      	adds	r3, r7, #1
 8019db2:	9304      	str	r3, [sp, #16]
 8019db4:	eb07 030b 	add.w	r3, r7, fp
 8019db8:	9309      	str	r3, [sp, #36]	@ 0x24
 8019dba:	9b02      	ldr	r3, [sp, #8]
 8019dbc:	f003 0301 	and.w	r3, r3, #1
 8019dc0:	46a8      	mov	r8, r5
 8019dc2:	9308      	str	r3, [sp, #32]
 8019dc4:	4605      	mov	r5, r0
 8019dc6:	9b04      	ldr	r3, [sp, #16]
 8019dc8:	9801      	ldr	r0, [sp, #4]
 8019dca:	4621      	mov	r1, r4
 8019dcc:	f103 3bff 	add.w	fp, r3, #4294967295
 8019dd0:	f7ff fafc 	bl	80193cc <quorem>
 8019dd4:	4641      	mov	r1, r8
 8019dd6:	9002      	str	r0, [sp, #8]
 8019dd8:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8019ddc:	9801      	ldr	r0, [sp, #4]
 8019dde:	f000 fb99 	bl	801a514 <__mcmp>
 8019de2:	462a      	mov	r2, r5
 8019de4:	9006      	str	r0, [sp, #24]
 8019de6:	4621      	mov	r1, r4
 8019de8:	4648      	mov	r0, r9
 8019dea:	f000 fbaf 	bl	801a54c <__mdiff>
 8019dee:	68c2      	ldr	r2, [r0, #12]
 8019df0:	4606      	mov	r6, r0
 8019df2:	b9fa      	cbnz	r2, 8019e34 <_dtoa_r+0x954>
 8019df4:	4601      	mov	r1, r0
 8019df6:	9801      	ldr	r0, [sp, #4]
 8019df8:	f000 fb8c 	bl	801a514 <__mcmp>
 8019dfc:	4602      	mov	r2, r0
 8019dfe:	4631      	mov	r1, r6
 8019e00:	4648      	mov	r0, r9
 8019e02:	920a      	str	r2, [sp, #40]	@ 0x28
 8019e04:	f000 f954 	bl	801a0b0 <_Bfree>
 8019e08:	9b07      	ldr	r3, [sp, #28]
 8019e0a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8019e0c:	9e04      	ldr	r6, [sp, #16]
 8019e0e:	ea42 0103 	orr.w	r1, r2, r3
 8019e12:	9b08      	ldr	r3, [sp, #32]
 8019e14:	4319      	orrs	r1, r3
 8019e16:	d10f      	bne.n	8019e38 <_dtoa_r+0x958>
 8019e18:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8019e1c:	d028      	beq.n	8019e70 <_dtoa_r+0x990>
 8019e1e:	9b06      	ldr	r3, [sp, #24]
 8019e20:	2b00      	cmp	r3, #0
 8019e22:	dd02      	ble.n	8019e2a <_dtoa_r+0x94a>
 8019e24:	9b02      	ldr	r3, [sp, #8]
 8019e26:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8019e2a:	f88b a000 	strb.w	sl, [fp]
 8019e2e:	e55e      	b.n	80198ee <_dtoa_r+0x40e>
 8019e30:	4628      	mov	r0, r5
 8019e32:	e7bd      	b.n	8019db0 <_dtoa_r+0x8d0>
 8019e34:	2201      	movs	r2, #1
 8019e36:	e7e2      	b.n	8019dfe <_dtoa_r+0x91e>
 8019e38:	9b06      	ldr	r3, [sp, #24]
 8019e3a:	2b00      	cmp	r3, #0
 8019e3c:	db04      	blt.n	8019e48 <_dtoa_r+0x968>
 8019e3e:	9907      	ldr	r1, [sp, #28]
 8019e40:	430b      	orrs	r3, r1
 8019e42:	9908      	ldr	r1, [sp, #32]
 8019e44:	430b      	orrs	r3, r1
 8019e46:	d120      	bne.n	8019e8a <_dtoa_r+0x9aa>
 8019e48:	2a00      	cmp	r2, #0
 8019e4a:	ddee      	ble.n	8019e2a <_dtoa_r+0x94a>
 8019e4c:	9901      	ldr	r1, [sp, #4]
 8019e4e:	2201      	movs	r2, #1
 8019e50:	4648      	mov	r0, r9
 8019e52:	f000 faf3 	bl	801a43c <__lshift>
 8019e56:	4621      	mov	r1, r4
 8019e58:	9001      	str	r0, [sp, #4]
 8019e5a:	f000 fb5b 	bl	801a514 <__mcmp>
 8019e5e:	2800      	cmp	r0, #0
 8019e60:	dc03      	bgt.n	8019e6a <_dtoa_r+0x98a>
 8019e62:	d1e2      	bne.n	8019e2a <_dtoa_r+0x94a>
 8019e64:	f01a 0f01 	tst.w	sl, #1
 8019e68:	d0df      	beq.n	8019e2a <_dtoa_r+0x94a>
 8019e6a:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8019e6e:	d1d9      	bne.n	8019e24 <_dtoa_r+0x944>
 8019e70:	2339      	movs	r3, #57	@ 0x39
 8019e72:	f88b 3000 	strb.w	r3, [fp]
 8019e76:	4633      	mov	r3, r6
 8019e78:	461e      	mov	r6, r3
 8019e7a:	3b01      	subs	r3, #1
 8019e7c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8019e80:	2a39      	cmp	r2, #57	@ 0x39
 8019e82:	d052      	beq.n	8019f2a <_dtoa_r+0xa4a>
 8019e84:	3201      	adds	r2, #1
 8019e86:	701a      	strb	r2, [r3, #0]
 8019e88:	e531      	b.n	80198ee <_dtoa_r+0x40e>
 8019e8a:	2a00      	cmp	r2, #0
 8019e8c:	dd07      	ble.n	8019e9e <_dtoa_r+0x9be>
 8019e8e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8019e92:	d0ed      	beq.n	8019e70 <_dtoa_r+0x990>
 8019e94:	f10a 0301 	add.w	r3, sl, #1
 8019e98:	f88b 3000 	strb.w	r3, [fp]
 8019e9c:	e527      	b.n	80198ee <_dtoa_r+0x40e>
 8019e9e:	9b04      	ldr	r3, [sp, #16]
 8019ea0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019ea2:	f803 ac01 	strb.w	sl, [r3, #-1]
 8019ea6:	4293      	cmp	r3, r2
 8019ea8:	d029      	beq.n	8019efe <_dtoa_r+0xa1e>
 8019eaa:	9901      	ldr	r1, [sp, #4]
 8019eac:	2300      	movs	r3, #0
 8019eae:	220a      	movs	r2, #10
 8019eb0:	4648      	mov	r0, r9
 8019eb2:	f000 f91f 	bl	801a0f4 <__multadd>
 8019eb6:	45a8      	cmp	r8, r5
 8019eb8:	9001      	str	r0, [sp, #4]
 8019eba:	f04f 0300 	mov.w	r3, #0
 8019ebe:	f04f 020a 	mov.w	r2, #10
 8019ec2:	4641      	mov	r1, r8
 8019ec4:	4648      	mov	r0, r9
 8019ec6:	d107      	bne.n	8019ed8 <_dtoa_r+0x9f8>
 8019ec8:	f000 f914 	bl	801a0f4 <__multadd>
 8019ecc:	4680      	mov	r8, r0
 8019ece:	4605      	mov	r5, r0
 8019ed0:	9b04      	ldr	r3, [sp, #16]
 8019ed2:	3301      	adds	r3, #1
 8019ed4:	9304      	str	r3, [sp, #16]
 8019ed6:	e776      	b.n	8019dc6 <_dtoa_r+0x8e6>
 8019ed8:	f000 f90c 	bl	801a0f4 <__multadd>
 8019edc:	4629      	mov	r1, r5
 8019ede:	4680      	mov	r8, r0
 8019ee0:	2300      	movs	r3, #0
 8019ee2:	220a      	movs	r2, #10
 8019ee4:	4648      	mov	r0, r9
 8019ee6:	f000 f905 	bl	801a0f4 <__multadd>
 8019eea:	4605      	mov	r5, r0
 8019eec:	e7f0      	b.n	8019ed0 <_dtoa_r+0x9f0>
 8019eee:	f1bb 0f00 	cmp.w	fp, #0
 8019ef2:	bfcc      	ite	gt
 8019ef4:	465e      	movgt	r6, fp
 8019ef6:	2601      	movle	r6, #1
 8019ef8:	443e      	add	r6, r7
 8019efa:	f04f 0800 	mov.w	r8, #0
 8019efe:	9901      	ldr	r1, [sp, #4]
 8019f00:	2201      	movs	r2, #1
 8019f02:	4648      	mov	r0, r9
 8019f04:	f000 fa9a 	bl	801a43c <__lshift>
 8019f08:	4621      	mov	r1, r4
 8019f0a:	9001      	str	r0, [sp, #4]
 8019f0c:	f000 fb02 	bl	801a514 <__mcmp>
 8019f10:	2800      	cmp	r0, #0
 8019f12:	dcb0      	bgt.n	8019e76 <_dtoa_r+0x996>
 8019f14:	d102      	bne.n	8019f1c <_dtoa_r+0xa3c>
 8019f16:	f01a 0f01 	tst.w	sl, #1
 8019f1a:	d1ac      	bne.n	8019e76 <_dtoa_r+0x996>
 8019f1c:	4633      	mov	r3, r6
 8019f1e:	461e      	mov	r6, r3
 8019f20:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8019f24:	2a30      	cmp	r2, #48	@ 0x30
 8019f26:	d0fa      	beq.n	8019f1e <_dtoa_r+0xa3e>
 8019f28:	e4e1      	b.n	80198ee <_dtoa_r+0x40e>
 8019f2a:	429f      	cmp	r7, r3
 8019f2c:	d1a4      	bne.n	8019e78 <_dtoa_r+0x998>
 8019f2e:	9b05      	ldr	r3, [sp, #20]
 8019f30:	3301      	adds	r3, #1
 8019f32:	9305      	str	r3, [sp, #20]
 8019f34:	2331      	movs	r3, #49	@ 0x31
 8019f36:	703b      	strb	r3, [r7, #0]
 8019f38:	e4d9      	b.n	80198ee <_dtoa_r+0x40e>
 8019f3a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8019f3c:	4f16      	ldr	r7, [pc, #88]	@ (8019f98 <_dtoa_r+0xab8>)
 8019f3e:	b11b      	cbz	r3, 8019f48 <_dtoa_r+0xa68>
 8019f40:	f107 0308 	add.w	r3, r7, #8
 8019f44:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8019f46:	6013      	str	r3, [r2, #0]
 8019f48:	4638      	mov	r0, r7
 8019f4a:	b011      	add	sp, #68	@ 0x44
 8019f4c:	ecbd 8b02 	vpop	{d8}
 8019f50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019f54:	9b07      	ldr	r3, [sp, #28]
 8019f56:	2b01      	cmp	r3, #1
 8019f58:	f77f ae2c 	ble.w	8019bb4 <_dtoa_r+0x6d4>
 8019f5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8019f5e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8019f60:	2001      	movs	r0, #1
 8019f62:	e64c      	b.n	8019bfe <_dtoa_r+0x71e>
 8019f64:	f1bb 0f00 	cmp.w	fp, #0
 8019f68:	f77f aed8 	ble.w	8019d1c <_dtoa_r+0x83c>
 8019f6c:	463e      	mov	r6, r7
 8019f6e:	9801      	ldr	r0, [sp, #4]
 8019f70:	4621      	mov	r1, r4
 8019f72:	f7ff fa2b 	bl	80193cc <quorem>
 8019f76:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8019f7a:	f806 ab01 	strb.w	sl, [r6], #1
 8019f7e:	1bf2      	subs	r2, r6, r7
 8019f80:	4593      	cmp	fp, r2
 8019f82:	ddb4      	ble.n	8019eee <_dtoa_r+0xa0e>
 8019f84:	9901      	ldr	r1, [sp, #4]
 8019f86:	2300      	movs	r3, #0
 8019f88:	220a      	movs	r2, #10
 8019f8a:	4648      	mov	r0, r9
 8019f8c:	f000 f8b2 	bl	801a0f4 <__multadd>
 8019f90:	9001      	str	r0, [sp, #4]
 8019f92:	e7ec      	b.n	8019f6e <_dtoa_r+0xa8e>
 8019f94:	0801b840 	.word	0x0801b840
 8019f98:	0801b7db 	.word	0x0801b7db

08019f9c <_free_r>:
 8019f9c:	b538      	push	{r3, r4, r5, lr}
 8019f9e:	4605      	mov	r5, r0
 8019fa0:	2900      	cmp	r1, #0
 8019fa2:	d041      	beq.n	801a028 <_free_r+0x8c>
 8019fa4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019fa8:	1f0c      	subs	r4, r1, #4
 8019faa:	2b00      	cmp	r3, #0
 8019fac:	bfb8      	it	lt
 8019fae:	18e4      	addlt	r4, r4, r3
 8019fb0:	f7fe fba8 	bl	8018704 <__malloc_lock>
 8019fb4:	4a1d      	ldr	r2, [pc, #116]	@ (801a02c <_free_r+0x90>)
 8019fb6:	6813      	ldr	r3, [r2, #0]
 8019fb8:	b933      	cbnz	r3, 8019fc8 <_free_r+0x2c>
 8019fba:	6063      	str	r3, [r4, #4]
 8019fbc:	6014      	str	r4, [r2, #0]
 8019fbe:	4628      	mov	r0, r5
 8019fc0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019fc4:	f7fe bba4 	b.w	8018710 <__malloc_unlock>
 8019fc8:	42a3      	cmp	r3, r4
 8019fca:	d908      	bls.n	8019fde <_free_r+0x42>
 8019fcc:	6820      	ldr	r0, [r4, #0]
 8019fce:	1821      	adds	r1, r4, r0
 8019fd0:	428b      	cmp	r3, r1
 8019fd2:	bf01      	itttt	eq
 8019fd4:	6819      	ldreq	r1, [r3, #0]
 8019fd6:	685b      	ldreq	r3, [r3, #4]
 8019fd8:	1809      	addeq	r1, r1, r0
 8019fda:	6021      	streq	r1, [r4, #0]
 8019fdc:	e7ed      	b.n	8019fba <_free_r+0x1e>
 8019fde:	461a      	mov	r2, r3
 8019fe0:	685b      	ldr	r3, [r3, #4]
 8019fe2:	b10b      	cbz	r3, 8019fe8 <_free_r+0x4c>
 8019fe4:	42a3      	cmp	r3, r4
 8019fe6:	d9fa      	bls.n	8019fde <_free_r+0x42>
 8019fe8:	6811      	ldr	r1, [r2, #0]
 8019fea:	1850      	adds	r0, r2, r1
 8019fec:	42a0      	cmp	r0, r4
 8019fee:	d10b      	bne.n	801a008 <_free_r+0x6c>
 8019ff0:	6820      	ldr	r0, [r4, #0]
 8019ff2:	4401      	add	r1, r0
 8019ff4:	1850      	adds	r0, r2, r1
 8019ff6:	4283      	cmp	r3, r0
 8019ff8:	6011      	str	r1, [r2, #0]
 8019ffa:	d1e0      	bne.n	8019fbe <_free_r+0x22>
 8019ffc:	6818      	ldr	r0, [r3, #0]
 8019ffe:	685b      	ldr	r3, [r3, #4]
 801a000:	6053      	str	r3, [r2, #4]
 801a002:	4408      	add	r0, r1
 801a004:	6010      	str	r0, [r2, #0]
 801a006:	e7da      	b.n	8019fbe <_free_r+0x22>
 801a008:	d902      	bls.n	801a010 <_free_r+0x74>
 801a00a:	230c      	movs	r3, #12
 801a00c:	602b      	str	r3, [r5, #0]
 801a00e:	e7d6      	b.n	8019fbe <_free_r+0x22>
 801a010:	6820      	ldr	r0, [r4, #0]
 801a012:	1821      	adds	r1, r4, r0
 801a014:	428b      	cmp	r3, r1
 801a016:	bf04      	itt	eq
 801a018:	6819      	ldreq	r1, [r3, #0]
 801a01a:	685b      	ldreq	r3, [r3, #4]
 801a01c:	6063      	str	r3, [r4, #4]
 801a01e:	bf04      	itt	eq
 801a020:	1809      	addeq	r1, r1, r0
 801a022:	6021      	streq	r1, [r4, #0]
 801a024:	6054      	str	r4, [r2, #4]
 801a026:	e7ca      	b.n	8019fbe <_free_r+0x22>
 801a028:	bd38      	pop	{r3, r4, r5, pc}
 801a02a:	bf00      	nop
 801a02c:	24027954 	.word	0x24027954

0801a030 <_Balloc>:
 801a030:	b570      	push	{r4, r5, r6, lr}
 801a032:	69c6      	ldr	r6, [r0, #28]
 801a034:	4604      	mov	r4, r0
 801a036:	460d      	mov	r5, r1
 801a038:	b976      	cbnz	r6, 801a058 <_Balloc+0x28>
 801a03a:	2010      	movs	r0, #16
 801a03c:	f7fe fab8 	bl	80185b0 <malloc>
 801a040:	4602      	mov	r2, r0
 801a042:	61e0      	str	r0, [r4, #28]
 801a044:	b920      	cbnz	r0, 801a050 <_Balloc+0x20>
 801a046:	4b18      	ldr	r3, [pc, #96]	@ (801a0a8 <_Balloc+0x78>)
 801a048:	4818      	ldr	r0, [pc, #96]	@ (801a0ac <_Balloc+0x7c>)
 801a04a:	216b      	movs	r1, #107	@ 0x6b
 801a04c:	f7ff f9a0 	bl	8019390 <__assert_func>
 801a050:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801a054:	6006      	str	r6, [r0, #0]
 801a056:	60c6      	str	r6, [r0, #12]
 801a058:	69e6      	ldr	r6, [r4, #28]
 801a05a:	68f3      	ldr	r3, [r6, #12]
 801a05c:	b183      	cbz	r3, 801a080 <_Balloc+0x50>
 801a05e:	69e3      	ldr	r3, [r4, #28]
 801a060:	68db      	ldr	r3, [r3, #12]
 801a062:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801a066:	b9b8      	cbnz	r0, 801a098 <_Balloc+0x68>
 801a068:	2101      	movs	r1, #1
 801a06a:	fa01 f605 	lsl.w	r6, r1, r5
 801a06e:	1d72      	adds	r2, r6, #5
 801a070:	0092      	lsls	r2, r2, #2
 801a072:	4620      	mov	r0, r4
 801a074:	f000 fd8d 	bl	801ab92 <_calloc_r>
 801a078:	b160      	cbz	r0, 801a094 <_Balloc+0x64>
 801a07a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801a07e:	e00e      	b.n	801a09e <_Balloc+0x6e>
 801a080:	2221      	movs	r2, #33	@ 0x21
 801a082:	2104      	movs	r1, #4
 801a084:	4620      	mov	r0, r4
 801a086:	f000 fd84 	bl	801ab92 <_calloc_r>
 801a08a:	69e3      	ldr	r3, [r4, #28]
 801a08c:	60f0      	str	r0, [r6, #12]
 801a08e:	68db      	ldr	r3, [r3, #12]
 801a090:	2b00      	cmp	r3, #0
 801a092:	d1e4      	bne.n	801a05e <_Balloc+0x2e>
 801a094:	2000      	movs	r0, #0
 801a096:	bd70      	pop	{r4, r5, r6, pc}
 801a098:	6802      	ldr	r2, [r0, #0]
 801a09a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801a09e:	2300      	movs	r3, #0
 801a0a0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801a0a4:	e7f7      	b.n	801a096 <_Balloc+0x66>
 801a0a6:	bf00      	nop
 801a0a8:	0801b6fc 	.word	0x0801b6fc
 801a0ac:	0801b851 	.word	0x0801b851

0801a0b0 <_Bfree>:
 801a0b0:	b570      	push	{r4, r5, r6, lr}
 801a0b2:	69c6      	ldr	r6, [r0, #28]
 801a0b4:	4605      	mov	r5, r0
 801a0b6:	460c      	mov	r4, r1
 801a0b8:	b976      	cbnz	r6, 801a0d8 <_Bfree+0x28>
 801a0ba:	2010      	movs	r0, #16
 801a0bc:	f7fe fa78 	bl	80185b0 <malloc>
 801a0c0:	4602      	mov	r2, r0
 801a0c2:	61e8      	str	r0, [r5, #28]
 801a0c4:	b920      	cbnz	r0, 801a0d0 <_Bfree+0x20>
 801a0c6:	4b09      	ldr	r3, [pc, #36]	@ (801a0ec <_Bfree+0x3c>)
 801a0c8:	4809      	ldr	r0, [pc, #36]	@ (801a0f0 <_Bfree+0x40>)
 801a0ca:	218f      	movs	r1, #143	@ 0x8f
 801a0cc:	f7ff f960 	bl	8019390 <__assert_func>
 801a0d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801a0d4:	6006      	str	r6, [r0, #0]
 801a0d6:	60c6      	str	r6, [r0, #12]
 801a0d8:	b13c      	cbz	r4, 801a0ea <_Bfree+0x3a>
 801a0da:	69eb      	ldr	r3, [r5, #28]
 801a0dc:	6862      	ldr	r2, [r4, #4]
 801a0de:	68db      	ldr	r3, [r3, #12]
 801a0e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801a0e4:	6021      	str	r1, [r4, #0]
 801a0e6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801a0ea:	bd70      	pop	{r4, r5, r6, pc}
 801a0ec:	0801b6fc 	.word	0x0801b6fc
 801a0f0:	0801b851 	.word	0x0801b851

0801a0f4 <__multadd>:
 801a0f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a0f8:	690d      	ldr	r5, [r1, #16]
 801a0fa:	4607      	mov	r7, r0
 801a0fc:	460c      	mov	r4, r1
 801a0fe:	461e      	mov	r6, r3
 801a100:	f101 0c14 	add.w	ip, r1, #20
 801a104:	2000      	movs	r0, #0
 801a106:	f8dc 3000 	ldr.w	r3, [ip]
 801a10a:	b299      	uxth	r1, r3
 801a10c:	fb02 6101 	mla	r1, r2, r1, r6
 801a110:	0c1e      	lsrs	r6, r3, #16
 801a112:	0c0b      	lsrs	r3, r1, #16
 801a114:	fb02 3306 	mla	r3, r2, r6, r3
 801a118:	b289      	uxth	r1, r1
 801a11a:	3001      	adds	r0, #1
 801a11c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801a120:	4285      	cmp	r5, r0
 801a122:	f84c 1b04 	str.w	r1, [ip], #4
 801a126:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801a12a:	dcec      	bgt.n	801a106 <__multadd+0x12>
 801a12c:	b30e      	cbz	r6, 801a172 <__multadd+0x7e>
 801a12e:	68a3      	ldr	r3, [r4, #8]
 801a130:	42ab      	cmp	r3, r5
 801a132:	dc19      	bgt.n	801a168 <__multadd+0x74>
 801a134:	6861      	ldr	r1, [r4, #4]
 801a136:	4638      	mov	r0, r7
 801a138:	3101      	adds	r1, #1
 801a13a:	f7ff ff79 	bl	801a030 <_Balloc>
 801a13e:	4680      	mov	r8, r0
 801a140:	b928      	cbnz	r0, 801a14e <__multadd+0x5a>
 801a142:	4602      	mov	r2, r0
 801a144:	4b0c      	ldr	r3, [pc, #48]	@ (801a178 <__multadd+0x84>)
 801a146:	480d      	ldr	r0, [pc, #52]	@ (801a17c <__multadd+0x88>)
 801a148:	21ba      	movs	r1, #186	@ 0xba
 801a14a:	f7ff f921 	bl	8019390 <__assert_func>
 801a14e:	6922      	ldr	r2, [r4, #16]
 801a150:	3202      	adds	r2, #2
 801a152:	f104 010c 	add.w	r1, r4, #12
 801a156:	0092      	lsls	r2, r2, #2
 801a158:	300c      	adds	r0, #12
 801a15a:	f7ff f90a 	bl	8019372 <memcpy>
 801a15e:	4621      	mov	r1, r4
 801a160:	4638      	mov	r0, r7
 801a162:	f7ff ffa5 	bl	801a0b0 <_Bfree>
 801a166:	4644      	mov	r4, r8
 801a168:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801a16c:	3501      	adds	r5, #1
 801a16e:	615e      	str	r6, [r3, #20]
 801a170:	6125      	str	r5, [r4, #16]
 801a172:	4620      	mov	r0, r4
 801a174:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a178:	0801b840 	.word	0x0801b840
 801a17c:	0801b851 	.word	0x0801b851

0801a180 <__hi0bits>:
 801a180:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801a184:	4603      	mov	r3, r0
 801a186:	bf36      	itet	cc
 801a188:	0403      	lslcc	r3, r0, #16
 801a18a:	2000      	movcs	r0, #0
 801a18c:	2010      	movcc	r0, #16
 801a18e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801a192:	bf3c      	itt	cc
 801a194:	021b      	lslcc	r3, r3, #8
 801a196:	3008      	addcc	r0, #8
 801a198:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801a19c:	bf3c      	itt	cc
 801a19e:	011b      	lslcc	r3, r3, #4
 801a1a0:	3004      	addcc	r0, #4
 801a1a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801a1a6:	bf3c      	itt	cc
 801a1a8:	009b      	lslcc	r3, r3, #2
 801a1aa:	3002      	addcc	r0, #2
 801a1ac:	2b00      	cmp	r3, #0
 801a1ae:	db05      	blt.n	801a1bc <__hi0bits+0x3c>
 801a1b0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801a1b4:	f100 0001 	add.w	r0, r0, #1
 801a1b8:	bf08      	it	eq
 801a1ba:	2020      	moveq	r0, #32
 801a1bc:	4770      	bx	lr

0801a1be <__lo0bits>:
 801a1be:	6803      	ldr	r3, [r0, #0]
 801a1c0:	4602      	mov	r2, r0
 801a1c2:	f013 0007 	ands.w	r0, r3, #7
 801a1c6:	d00b      	beq.n	801a1e0 <__lo0bits+0x22>
 801a1c8:	07d9      	lsls	r1, r3, #31
 801a1ca:	d421      	bmi.n	801a210 <__lo0bits+0x52>
 801a1cc:	0798      	lsls	r0, r3, #30
 801a1ce:	bf49      	itett	mi
 801a1d0:	085b      	lsrmi	r3, r3, #1
 801a1d2:	089b      	lsrpl	r3, r3, #2
 801a1d4:	2001      	movmi	r0, #1
 801a1d6:	6013      	strmi	r3, [r2, #0]
 801a1d8:	bf5c      	itt	pl
 801a1da:	6013      	strpl	r3, [r2, #0]
 801a1dc:	2002      	movpl	r0, #2
 801a1de:	4770      	bx	lr
 801a1e0:	b299      	uxth	r1, r3
 801a1e2:	b909      	cbnz	r1, 801a1e8 <__lo0bits+0x2a>
 801a1e4:	0c1b      	lsrs	r3, r3, #16
 801a1e6:	2010      	movs	r0, #16
 801a1e8:	b2d9      	uxtb	r1, r3
 801a1ea:	b909      	cbnz	r1, 801a1f0 <__lo0bits+0x32>
 801a1ec:	3008      	adds	r0, #8
 801a1ee:	0a1b      	lsrs	r3, r3, #8
 801a1f0:	0719      	lsls	r1, r3, #28
 801a1f2:	bf04      	itt	eq
 801a1f4:	091b      	lsreq	r3, r3, #4
 801a1f6:	3004      	addeq	r0, #4
 801a1f8:	0799      	lsls	r1, r3, #30
 801a1fa:	bf04      	itt	eq
 801a1fc:	089b      	lsreq	r3, r3, #2
 801a1fe:	3002      	addeq	r0, #2
 801a200:	07d9      	lsls	r1, r3, #31
 801a202:	d403      	bmi.n	801a20c <__lo0bits+0x4e>
 801a204:	085b      	lsrs	r3, r3, #1
 801a206:	f100 0001 	add.w	r0, r0, #1
 801a20a:	d003      	beq.n	801a214 <__lo0bits+0x56>
 801a20c:	6013      	str	r3, [r2, #0]
 801a20e:	4770      	bx	lr
 801a210:	2000      	movs	r0, #0
 801a212:	4770      	bx	lr
 801a214:	2020      	movs	r0, #32
 801a216:	4770      	bx	lr

0801a218 <__i2b>:
 801a218:	b510      	push	{r4, lr}
 801a21a:	460c      	mov	r4, r1
 801a21c:	2101      	movs	r1, #1
 801a21e:	f7ff ff07 	bl	801a030 <_Balloc>
 801a222:	4602      	mov	r2, r0
 801a224:	b928      	cbnz	r0, 801a232 <__i2b+0x1a>
 801a226:	4b05      	ldr	r3, [pc, #20]	@ (801a23c <__i2b+0x24>)
 801a228:	4805      	ldr	r0, [pc, #20]	@ (801a240 <__i2b+0x28>)
 801a22a:	f240 1145 	movw	r1, #325	@ 0x145
 801a22e:	f7ff f8af 	bl	8019390 <__assert_func>
 801a232:	2301      	movs	r3, #1
 801a234:	6144      	str	r4, [r0, #20]
 801a236:	6103      	str	r3, [r0, #16]
 801a238:	bd10      	pop	{r4, pc}
 801a23a:	bf00      	nop
 801a23c:	0801b840 	.word	0x0801b840
 801a240:	0801b851 	.word	0x0801b851

0801a244 <__multiply>:
 801a244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a248:	4617      	mov	r7, r2
 801a24a:	690a      	ldr	r2, [r1, #16]
 801a24c:	693b      	ldr	r3, [r7, #16]
 801a24e:	429a      	cmp	r2, r3
 801a250:	bfa8      	it	ge
 801a252:	463b      	movge	r3, r7
 801a254:	4689      	mov	r9, r1
 801a256:	bfa4      	itt	ge
 801a258:	460f      	movge	r7, r1
 801a25a:	4699      	movge	r9, r3
 801a25c:	693d      	ldr	r5, [r7, #16]
 801a25e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801a262:	68bb      	ldr	r3, [r7, #8]
 801a264:	6879      	ldr	r1, [r7, #4]
 801a266:	eb05 060a 	add.w	r6, r5, sl
 801a26a:	42b3      	cmp	r3, r6
 801a26c:	b085      	sub	sp, #20
 801a26e:	bfb8      	it	lt
 801a270:	3101      	addlt	r1, #1
 801a272:	f7ff fedd 	bl	801a030 <_Balloc>
 801a276:	b930      	cbnz	r0, 801a286 <__multiply+0x42>
 801a278:	4602      	mov	r2, r0
 801a27a:	4b41      	ldr	r3, [pc, #260]	@ (801a380 <__multiply+0x13c>)
 801a27c:	4841      	ldr	r0, [pc, #260]	@ (801a384 <__multiply+0x140>)
 801a27e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801a282:	f7ff f885 	bl	8019390 <__assert_func>
 801a286:	f100 0414 	add.w	r4, r0, #20
 801a28a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 801a28e:	4623      	mov	r3, r4
 801a290:	2200      	movs	r2, #0
 801a292:	4573      	cmp	r3, lr
 801a294:	d320      	bcc.n	801a2d8 <__multiply+0x94>
 801a296:	f107 0814 	add.w	r8, r7, #20
 801a29a:	f109 0114 	add.w	r1, r9, #20
 801a29e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 801a2a2:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 801a2a6:	9302      	str	r3, [sp, #8]
 801a2a8:	1beb      	subs	r3, r5, r7
 801a2aa:	3b15      	subs	r3, #21
 801a2ac:	f023 0303 	bic.w	r3, r3, #3
 801a2b0:	3304      	adds	r3, #4
 801a2b2:	3715      	adds	r7, #21
 801a2b4:	42bd      	cmp	r5, r7
 801a2b6:	bf38      	it	cc
 801a2b8:	2304      	movcc	r3, #4
 801a2ba:	9301      	str	r3, [sp, #4]
 801a2bc:	9b02      	ldr	r3, [sp, #8]
 801a2be:	9103      	str	r1, [sp, #12]
 801a2c0:	428b      	cmp	r3, r1
 801a2c2:	d80c      	bhi.n	801a2de <__multiply+0x9a>
 801a2c4:	2e00      	cmp	r6, #0
 801a2c6:	dd03      	ble.n	801a2d0 <__multiply+0x8c>
 801a2c8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 801a2cc:	2b00      	cmp	r3, #0
 801a2ce:	d055      	beq.n	801a37c <__multiply+0x138>
 801a2d0:	6106      	str	r6, [r0, #16]
 801a2d2:	b005      	add	sp, #20
 801a2d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a2d8:	f843 2b04 	str.w	r2, [r3], #4
 801a2dc:	e7d9      	b.n	801a292 <__multiply+0x4e>
 801a2de:	f8b1 a000 	ldrh.w	sl, [r1]
 801a2e2:	f1ba 0f00 	cmp.w	sl, #0
 801a2e6:	d01f      	beq.n	801a328 <__multiply+0xe4>
 801a2e8:	46c4      	mov	ip, r8
 801a2ea:	46a1      	mov	r9, r4
 801a2ec:	2700      	movs	r7, #0
 801a2ee:	f85c 2b04 	ldr.w	r2, [ip], #4
 801a2f2:	f8d9 3000 	ldr.w	r3, [r9]
 801a2f6:	fa1f fb82 	uxth.w	fp, r2
 801a2fa:	b29b      	uxth	r3, r3
 801a2fc:	fb0a 330b 	mla	r3, sl, fp, r3
 801a300:	443b      	add	r3, r7
 801a302:	f8d9 7000 	ldr.w	r7, [r9]
 801a306:	0c12      	lsrs	r2, r2, #16
 801a308:	0c3f      	lsrs	r7, r7, #16
 801a30a:	fb0a 7202 	mla	r2, sl, r2, r7
 801a30e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 801a312:	b29b      	uxth	r3, r3
 801a314:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801a318:	4565      	cmp	r5, ip
 801a31a:	f849 3b04 	str.w	r3, [r9], #4
 801a31e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 801a322:	d8e4      	bhi.n	801a2ee <__multiply+0xaa>
 801a324:	9b01      	ldr	r3, [sp, #4]
 801a326:	50e7      	str	r7, [r4, r3]
 801a328:	9b03      	ldr	r3, [sp, #12]
 801a32a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801a32e:	3104      	adds	r1, #4
 801a330:	f1b9 0f00 	cmp.w	r9, #0
 801a334:	d020      	beq.n	801a378 <__multiply+0x134>
 801a336:	6823      	ldr	r3, [r4, #0]
 801a338:	4647      	mov	r7, r8
 801a33a:	46a4      	mov	ip, r4
 801a33c:	f04f 0a00 	mov.w	sl, #0
 801a340:	f8b7 b000 	ldrh.w	fp, [r7]
 801a344:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 801a348:	fb09 220b 	mla	r2, r9, fp, r2
 801a34c:	4452      	add	r2, sl
 801a34e:	b29b      	uxth	r3, r3
 801a350:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801a354:	f84c 3b04 	str.w	r3, [ip], #4
 801a358:	f857 3b04 	ldr.w	r3, [r7], #4
 801a35c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801a360:	f8bc 3000 	ldrh.w	r3, [ip]
 801a364:	fb09 330a 	mla	r3, r9, sl, r3
 801a368:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 801a36c:	42bd      	cmp	r5, r7
 801a36e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801a372:	d8e5      	bhi.n	801a340 <__multiply+0xfc>
 801a374:	9a01      	ldr	r2, [sp, #4]
 801a376:	50a3      	str	r3, [r4, r2]
 801a378:	3404      	adds	r4, #4
 801a37a:	e79f      	b.n	801a2bc <__multiply+0x78>
 801a37c:	3e01      	subs	r6, #1
 801a37e:	e7a1      	b.n	801a2c4 <__multiply+0x80>
 801a380:	0801b840 	.word	0x0801b840
 801a384:	0801b851 	.word	0x0801b851

0801a388 <__pow5mult>:
 801a388:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a38c:	4615      	mov	r5, r2
 801a38e:	f012 0203 	ands.w	r2, r2, #3
 801a392:	4607      	mov	r7, r0
 801a394:	460e      	mov	r6, r1
 801a396:	d007      	beq.n	801a3a8 <__pow5mult+0x20>
 801a398:	4c25      	ldr	r4, [pc, #148]	@ (801a430 <__pow5mult+0xa8>)
 801a39a:	3a01      	subs	r2, #1
 801a39c:	2300      	movs	r3, #0
 801a39e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801a3a2:	f7ff fea7 	bl	801a0f4 <__multadd>
 801a3a6:	4606      	mov	r6, r0
 801a3a8:	10ad      	asrs	r5, r5, #2
 801a3aa:	d03d      	beq.n	801a428 <__pow5mult+0xa0>
 801a3ac:	69fc      	ldr	r4, [r7, #28]
 801a3ae:	b97c      	cbnz	r4, 801a3d0 <__pow5mult+0x48>
 801a3b0:	2010      	movs	r0, #16
 801a3b2:	f7fe f8fd 	bl	80185b0 <malloc>
 801a3b6:	4602      	mov	r2, r0
 801a3b8:	61f8      	str	r0, [r7, #28]
 801a3ba:	b928      	cbnz	r0, 801a3c8 <__pow5mult+0x40>
 801a3bc:	4b1d      	ldr	r3, [pc, #116]	@ (801a434 <__pow5mult+0xac>)
 801a3be:	481e      	ldr	r0, [pc, #120]	@ (801a438 <__pow5mult+0xb0>)
 801a3c0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801a3c4:	f7fe ffe4 	bl	8019390 <__assert_func>
 801a3c8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801a3cc:	6004      	str	r4, [r0, #0]
 801a3ce:	60c4      	str	r4, [r0, #12]
 801a3d0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801a3d4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801a3d8:	b94c      	cbnz	r4, 801a3ee <__pow5mult+0x66>
 801a3da:	f240 2171 	movw	r1, #625	@ 0x271
 801a3de:	4638      	mov	r0, r7
 801a3e0:	f7ff ff1a 	bl	801a218 <__i2b>
 801a3e4:	2300      	movs	r3, #0
 801a3e6:	f8c8 0008 	str.w	r0, [r8, #8]
 801a3ea:	4604      	mov	r4, r0
 801a3ec:	6003      	str	r3, [r0, #0]
 801a3ee:	f04f 0900 	mov.w	r9, #0
 801a3f2:	07eb      	lsls	r3, r5, #31
 801a3f4:	d50a      	bpl.n	801a40c <__pow5mult+0x84>
 801a3f6:	4631      	mov	r1, r6
 801a3f8:	4622      	mov	r2, r4
 801a3fa:	4638      	mov	r0, r7
 801a3fc:	f7ff ff22 	bl	801a244 <__multiply>
 801a400:	4631      	mov	r1, r6
 801a402:	4680      	mov	r8, r0
 801a404:	4638      	mov	r0, r7
 801a406:	f7ff fe53 	bl	801a0b0 <_Bfree>
 801a40a:	4646      	mov	r6, r8
 801a40c:	106d      	asrs	r5, r5, #1
 801a40e:	d00b      	beq.n	801a428 <__pow5mult+0xa0>
 801a410:	6820      	ldr	r0, [r4, #0]
 801a412:	b938      	cbnz	r0, 801a424 <__pow5mult+0x9c>
 801a414:	4622      	mov	r2, r4
 801a416:	4621      	mov	r1, r4
 801a418:	4638      	mov	r0, r7
 801a41a:	f7ff ff13 	bl	801a244 <__multiply>
 801a41e:	6020      	str	r0, [r4, #0]
 801a420:	f8c0 9000 	str.w	r9, [r0]
 801a424:	4604      	mov	r4, r0
 801a426:	e7e4      	b.n	801a3f2 <__pow5mult+0x6a>
 801a428:	4630      	mov	r0, r6
 801a42a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a42e:	bf00      	nop
 801a430:	0801b8c8 	.word	0x0801b8c8
 801a434:	0801b6fc 	.word	0x0801b6fc
 801a438:	0801b851 	.word	0x0801b851

0801a43c <__lshift>:
 801a43c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a440:	460c      	mov	r4, r1
 801a442:	6849      	ldr	r1, [r1, #4]
 801a444:	6923      	ldr	r3, [r4, #16]
 801a446:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801a44a:	68a3      	ldr	r3, [r4, #8]
 801a44c:	4607      	mov	r7, r0
 801a44e:	4691      	mov	r9, r2
 801a450:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801a454:	f108 0601 	add.w	r6, r8, #1
 801a458:	42b3      	cmp	r3, r6
 801a45a:	db0b      	blt.n	801a474 <__lshift+0x38>
 801a45c:	4638      	mov	r0, r7
 801a45e:	f7ff fde7 	bl	801a030 <_Balloc>
 801a462:	4605      	mov	r5, r0
 801a464:	b948      	cbnz	r0, 801a47a <__lshift+0x3e>
 801a466:	4602      	mov	r2, r0
 801a468:	4b28      	ldr	r3, [pc, #160]	@ (801a50c <__lshift+0xd0>)
 801a46a:	4829      	ldr	r0, [pc, #164]	@ (801a510 <__lshift+0xd4>)
 801a46c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801a470:	f7fe ff8e 	bl	8019390 <__assert_func>
 801a474:	3101      	adds	r1, #1
 801a476:	005b      	lsls	r3, r3, #1
 801a478:	e7ee      	b.n	801a458 <__lshift+0x1c>
 801a47a:	2300      	movs	r3, #0
 801a47c:	f100 0114 	add.w	r1, r0, #20
 801a480:	f100 0210 	add.w	r2, r0, #16
 801a484:	4618      	mov	r0, r3
 801a486:	4553      	cmp	r3, sl
 801a488:	db33      	blt.n	801a4f2 <__lshift+0xb6>
 801a48a:	6920      	ldr	r0, [r4, #16]
 801a48c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801a490:	f104 0314 	add.w	r3, r4, #20
 801a494:	f019 091f 	ands.w	r9, r9, #31
 801a498:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801a49c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801a4a0:	d02b      	beq.n	801a4fa <__lshift+0xbe>
 801a4a2:	f1c9 0e20 	rsb	lr, r9, #32
 801a4a6:	468a      	mov	sl, r1
 801a4a8:	2200      	movs	r2, #0
 801a4aa:	6818      	ldr	r0, [r3, #0]
 801a4ac:	fa00 f009 	lsl.w	r0, r0, r9
 801a4b0:	4310      	orrs	r0, r2
 801a4b2:	f84a 0b04 	str.w	r0, [sl], #4
 801a4b6:	f853 2b04 	ldr.w	r2, [r3], #4
 801a4ba:	459c      	cmp	ip, r3
 801a4bc:	fa22 f20e 	lsr.w	r2, r2, lr
 801a4c0:	d8f3      	bhi.n	801a4aa <__lshift+0x6e>
 801a4c2:	ebac 0304 	sub.w	r3, ip, r4
 801a4c6:	3b15      	subs	r3, #21
 801a4c8:	f023 0303 	bic.w	r3, r3, #3
 801a4cc:	3304      	adds	r3, #4
 801a4ce:	f104 0015 	add.w	r0, r4, #21
 801a4d2:	4560      	cmp	r0, ip
 801a4d4:	bf88      	it	hi
 801a4d6:	2304      	movhi	r3, #4
 801a4d8:	50ca      	str	r2, [r1, r3]
 801a4da:	b10a      	cbz	r2, 801a4e0 <__lshift+0xa4>
 801a4dc:	f108 0602 	add.w	r6, r8, #2
 801a4e0:	3e01      	subs	r6, #1
 801a4e2:	4638      	mov	r0, r7
 801a4e4:	612e      	str	r6, [r5, #16]
 801a4e6:	4621      	mov	r1, r4
 801a4e8:	f7ff fde2 	bl	801a0b0 <_Bfree>
 801a4ec:	4628      	mov	r0, r5
 801a4ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a4f2:	f842 0f04 	str.w	r0, [r2, #4]!
 801a4f6:	3301      	adds	r3, #1
 801a4f8:	e7c5      	b.n	801a486 <__lshift+0x4a>
 801a4fa:	3904      	subs	r1, #4
 801a4fc:	f853 2b04 	ldr.w	r2, [r3], #4
 801a500:	f841 2f04 	str.w	r2, [r1, #4]!
 801a504:	459c      	cmp	ip, r3
 801a506:	d8f9      	bhi.n	801a4fc <__lshift+0xc0>
 801a508:	e7ea      	b.n	801a4e0 <__lshift+0xa4>
 801a50a:	bf00      	nop
 801a50c:	0801b840 	.word	0x0801b840
 801a510:	0801b851 	.word	0x0801b851

0801a514 <__mcmp>:
 801a514:	690a      	ldr	r2, [r1, #16]
 801a516:	4603      	mov	r3, r0
 801a518:	6900      	ldr	r0, [r0, #16]
 801a51a:	1a80      	subs	r0, r0, r2
 801a51c:	b530      	push	{r4, r5, lr}
 801a51e:	d10e      	bne.n	801a53e <__mcmp+0x2a>
 801a520:	3314      	adds	r3, #20
 801a522:	3114      	adds	r1, #20
 801a524:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801a528:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801a52c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801a530:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801a534:	4295      	cmp	r5, r2
 801a536:	d003      	beq.n	801a540 <__mcmp+0x2c>
 801a538:	d205      	bcs.n	801a546 <__mcmp+0x32>
 801a53a:	f04f 30ff 	mov.w	r0, #4294967295
 801a53e:	bd30      	pop	{r4, r5, pc}
 801a540:	42a3      	cmp	r3, r4
 801a542:	d3f3      	bcc.n	801a52c <__mcmp+0x18>
 801a544:	e7fb      	b.n	801a53e <__mcmp+0x2a>
 801a546:	2001      	movs	r0, #1
 801a548:	e7f9      	b.n	801a53e <__mcmp+0x2a>
	...

0801a54c <__mdiff>:
 801a54c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a550:	4689      	mov	r9, r1
 801a552:	4606      	mov	r6, r0
 801a554:	4611      	mov	r1, r2
 801a556:	4648      	mov	r0, r9
 801a558:	4614      	mov	r4, r2
 801a55a:	f7ff ffdb 	bl	801a514 <__mcmp>
 801a55e:	1e05      	subs	r5, r0, #0
 801a560:	d112      	bne.n	801a588 <__mdiff+0x3c>
 801a562:	4629      	mov	r1, r5
 801a564:	4630      	mov	r0, r6
 801a566:	f7ff fd63 	bl	801a030 <_Balloc>
 801a56a:	4602      	mov	r2, r0
 801a56c:	b928      	cbnz	r0, 801a57a <__mdiff+0x2e>
 801a56e:	4b3f      	ldr	r3, [pc, #252]	@ (801a66c <__mdiff+0x120>)
 801a570:	f240 2137 	movw	r1, #567	@ 0x237
 801a574:	483e      	ldr	r0, [pc, #248]	@ (801a670 <__mdiff+0x124>)
 801a576:	f7fe ff0b 	bl	8019390 <__assert_func>
 801a57a:	2301      	movs	r3, #1
 801a57c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801a580:	4610      	mov	r0, r2
 801a582:	b003      	add	sp, #12
 801a584:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a588:	bfbc      	itt	lt
 801a58a:	464b      	movlt	r3, r9
 801a58c:	46a1      	movlt	r9, r4
 801a58e:	4630      	mov	r0, r6
 801a590:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801a594:	bfba      	itte	lt
 801a596:	461c      	movlt	r4, r3
 801a598:	2501      	movlt	r5, #1
 801a59a:	2500      	movge	r5, #0
 801a59c:	f7ff fd48 	bl	801a030 <_Balloc>
 801a5a0:	4602      	mov	r2, r0
 801a5a2:	b918      	cbnz	r0, 801a5ac <__mdiff+0x60>
 801a5a4:	4b31      	ldr	r3, [pc, #196]	@ (801a66c <__mdiff+0x120>)
 801a5a6:	f240 2145 	movw	r1, #581	@ 0x245
 801a5aa:	e7e3      	b.n	801a574 <__mdiff+0x28>
 801a5ac:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801a5b0:	6926      	ldr	r6, [r4, #16]
 801a5b2:	60c5      	str	r5, [r0, #12]
 801a5b4:	f109 0310 	add.w	r3, r9, #16
 801a5b8:	f109 0514 	add.w	r5, r9, #20
 801a5bc:	f104 0e14 	add.w	lr, r4, #20
 801a5c0:	f100 0b14 	add.w	fp, r0, #20
 801a5c4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801a5c8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801a5cc:	9301      	str	r3, [sp, #4]
 801a5ce:	46d9      	mov	r9, fp
 801a5d0:	f04f 0c00 	mov.w	ip, #0
 801a5d4:	9b01      	ldr	r3, [sp, #4]
 801a5d6:	f85e 0b04 	ldr.w	r0, [lr], #4
 801a5da:	f853 af04 	ldr.w	sl, [r3, #4]!
 801a5de:	9301      	str	r3, [sp, #4]
 801a5e0:	fa1f f38a 	uxth.w	r3, sl
 801a5e4:	4619      	mov	r1, r3
 801a5e6:	b283      	uxth	r3, r0
 801a5e8:	1acb      	subs	r3, r1, r3
 801a5ea:	0c00      	lsrs	r0, r0, #16
 801a5ec:	4463      	add	r3, ip
 801a5ee:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801a5f2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801a5f6:	b29b      	uxth	r3, r3
 801a5f8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801a5fc:	4576      	cmp	r6, lr
 801a5fe:	f849 3b04 	str.w	r3, [r9], #4
 801a602:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801a606:	d8e5      	bhi.n	801a5d4 <__mdiff+0x88>
 801a608:	1b33      	subs	r3, r6, r4
 801a60a:	3b15      	subs	r3, #21
 801a60c:	f023 0303 	bic.w	r3, r3, #3
 801a610:	3415      	adds	r4, #21
 801a612:	3304      	adds	r3, #4
 801a614:	42a6      	cmp	r6, r4
 801a616:	bf38      	it	cc
 801a618:	2304      	movcc	r3, #4
 801a61a:	441d      	add	r5, r3
 801a61c:	445b      	add	r3, fp
 801a61e:	461e      	mov	r6, r3
 801a620:	462c      	mov	r4, r5
 801a622:	4544      	cmp	r4, r8
 801a624:	d30e      	bcc.n	801a644 <__mdiff+0xf8>
 801a626:	f108 0103 	add.w	r1, r8, #3
 801a62a:	1b49      	subs	r1, r1, r5
 801a62c:	f021 0103 	bic.w	r1, r1, #3
 801a630:	3d03      	subs	r5, #3
 801a632:	45a8      	cmp	r8, r5
 801a634:	bf38      	it	cc
 801a636:	2100      	movcc	r1, #0
 801a638:	440b      	add	r3, r1
 801a63a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801a63e:	b191      	cbz	r1, 801a666 <__mdiff+0x11a>
 801a640:	6117      	str	r7, [r2, #16]
 801a642:	e79d      	b.n	801a580 <__mdiff+0x34>
 801a644:	f854 1b04 	ldr.w	r1, [r4], #4
 801a648:	46e6      	mov	lr, ip
 801a64a:	0c08      	lsrs	r0, r1, #16
 801a64c:	fa1c fc81 	uxtah	ip, ip, r1
 801a650:	4471      	add	r1, lr
 801a652:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801a656:	b289      	uxth	r1, r1
 801a658:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801a65c:	f846 1b04 	str.w	r1, [r6], #4
 801a660:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801a664:	e7dd      	b.n	801a622 <__mdiff+0xd6>
 801a666:	3f01      	subs	r7, #1
 801a668:	e7e7      	b.n	801a63a <__mdiff+0xee>
 801a66a:	bf00      	nop
 801a66c:	0801b840 	.word	0x0801b840
 801a670:	0801b851 	.word	0x0801b851

0801a674 <__d2b>:
 801a674:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801a678:	460f      	mov	r7, r1
 801a67a:	2101      	movs	r1, #1
 801a67c:	ec59 8b10 	vmov	r8, r9, d0
 801a680:	4616      	mov	r6, r2
 801a682:	f7ff fcd5 	bl	801a030 <_Balloc>
 801a686:	4604      	mov	r4, r0
 801a688:	b930      	cbnz	r0, 801a698 <__d2b+0x24>
 801a68a:	4602      	mov	r2, r0
 801a68c:	4b23      	ldr	r3, [pc, #140]	@ (801a71c <__d2b+0xa8>)
 801a68e:	4824      	ldr	r0, [pc, #144]	@ (801a720 <__d2b+0xac>)
 801a690:	f240 310f 	movw	r1, #783	@ 0x30f
 801a694:	f7fe fe7c 	bl	8019390 <__assert_func>
 801a698:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801a69c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801a6a0:	b10d      	cbz	r5, 801a6a6 <__d2b+0x32>
 801a6a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801a6a6:	9301      	str	r3, [sp, #4]
 801a6a8:	f1b8 0300 	subs.w	r3, r8, #0
 801a6ac:	d023      	beq.n	801a6f6 <__d2b+0x82>
 801a6ae:	4668      	mov	r0, sp
 801a6b0:	9300      	str	r3, [sp, #0]
 801a6b2:	f7ff fd84 	bl	801a1be <__lo0bits>
 801a6b6:	e9dd 1200 	ldrd	r1, r2, [sp]
 801a6ba:	b1d0      	cbz	r0, 801a6f2 <__d2b+0x7e>
 801a6bc:	f1c0 0320 	rsb	r3, r0, #32
 801a6c0:	fa02 f303 	lsl.w	r3, r2, r3
 801a6c4:	430b      	orrs	r3, r1
 801a6c6:	40c2      	lsrs	r2, r0
 801a6c8:	6163      	str	r3, [r4, #20]
 801a6ca:	9201      	str	r2, [sp, #4]
 801a6cc:	9b01      	ldr	r3, [sp, #4]
 801a6ce:	61a3      	str	r3, [r4, #24]
 801a6d0:	2b00      	cmp	r3, #0
 801a6d2:	bf0c      	ite	eq
 801a6d4:	2201      	moveq	r2, #1
 801a6d6:	2202      	movne	r2, #2
 801a6d8:	6122      	str	r2, [r4, #16]
 801a6da:	b1a5      	cbz	r5, 801a706 <__d2b+0x92>
 801a6dc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801a6e0:	4405      	add	r5, r0
 801a6e2:	603d      	str	r5, [r7, #0]
 801a6e4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801a6e8:	6030      	str	r0, [r6, #0]
 801a6ea:	4620      	mov	r0, r4
 801a6ec:	b003      	add	sp, #12
 801a6ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a6f2:	6161      	str	r1, [r4, #20]
 801a6f4:	e7ea      	b.n	801a6cc <__d2b+0x58>
 801a6f6:	a801      	add	r0, sp, #4
 801a6f8:	f7ff fd61 	bl	801a1be <__lo0bits>
 801a6fc:	9b01      	ldr	r3, [sp, #4]
 801a6fe:	6163      	str	r3, [r4, #20]
 801a700:	3020      	adds	r0, #32
 801a702:	2201      	movs	r2, #1
 801a704:	e7e8      	b.n	801a6d8 <__d2b+0x64>
 801a706:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801a70a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801a70e:	6038      	str	r0, [r7, #0]
 801a710:	6918      	ldr	r0, [r3, #16]
 801a712:	f7ff fd35 	bl	801a180 <__hi0bits>
 801a716:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801a71a:	e7e5      	b.n	801a6e8 <__d2b+0x74>
 801a71c:	0801b840 	.word	0x0801b840
 801a720:	0801b851 	.word	0x0801b851

0801a724 <__ssputs_r>:
 801a724:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a728:	688e      	ldr	r6, [r1, #8]
 801a72a:	461f      	mov	r7, r3
 801a72c:	42be      	cmp	r6, r7
 801a72e:	680b      	ldr	r3, [r1, #0]
 801a730:	4682      	mov	sl, r0
 801a732:	460c      	mov	r4, r1
 801a734:	4690      	mov	r8, r2
 801a736:	d82d      	bhi.n	801a794 <__ssputs_r+0x70>
 801a738:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801a73c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801a740:	d026      	beq.n	801a790 <__ssputs_r+0x6c>
 801a742:	6965      	ldr	r5, [r4, #20]
 801a744:	6909      	ldr	r1, [r1, #16]
 801a746:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a74a:	eba3 0901 	sub.w	r9, r3, r1
 801a74e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801a752:	1c7b      	adds	r3, r7, #1
 801a754:	444b      	add	r3, r9
 801a756:	106d      	asrs	r5, r5, #1
 801a758:	429d      	cmp	r5, r3
 801a75a:	bf38      	it	cc
 801a75c:	461d      	movcc	r5, r3
 801a75e:	0553      	lsls	r3, r2, #21
 801a760:	d527      	bpl.n	801a7b2 <__ssputs_r+0x8e>
 801a762:	4629      	mov	r1, r5
 801a764:	f7fd ff4e 	bl	8018604 <_malloc_r>
 801a768:	4606      	mov	r6, r0
 801a76a:	b360      	cbz	r0, 801a7c6 <__ssputs_r+0xa2>
 801a76c:	6921      	ldr	r1, [r4, #16]
 801a76e:	464a      	mov	r2, r9
 801a770:	f7fe fdff 	bl	8019372 <memcpy>
 801a774:	89a3      	ldrh	r3, [r4, #12]
 801a776:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801a77a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801a77e:	81a3      	strh	r3, [r4, #12]
 801a780:	6126      	str	r6, [r4, #16]
 801a782:	6165      	str	r5, [r4, #20]
 801a784:	444e      	add	r6, r9
 801a786:	eba5 0509 	sub.w	r5, r5, r9
 801a78a:	6026      	str	r6, [r4, #0]
 801a78c:	60a5      	str	r5, [r4, #8]
 801a78e:	463e      	mov	r6, r7
 801a790:	42be      	cmp	r6, r7
 801a792:	d900      	bls.n	801a796 <__ssputs_r+0x72>
 801a794:	463e      	mov	r6, r7
 801a796:	6820      	ldr	r0, [r4, #0]
 801a798:	4632      	mov	r2, r6
 801a79a:	4641      	mov	r1, r8
 801a79c:	f000 f9d8 	bl	801ab50 <memmove>
 801a7a0:	68a3      	ldr	r3, [r4, #8]
 801a7a2:	1b9b      	subs	r3, r3, r6
 801a7a4:	60a3      	str	r3, [r4, #8]
 801a7a6:	6823      	ldr	r3, [r4, #0]
 801a7a8:	4433      	add	r3, r6
 801a7aa:	6023      	str	r3, [r4, #0]
 801a7ac:	2000      	movs	r0, #0
 801a7ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a7b2:	462a      	mov	r2, r5
 801a7b4:	f000 fa13 	bl	801abde <_realloc_r>
 801a7b8:	4606      	mov	r6, r0
 801a7ba:	2800      	cmp	r0, #0
 801a7bc:	d1e0      	bne.n	801a780 <__ssputs_r+0x5c>
 801a7be:	6921      	ldr	r1, [r4, #16]
 801a7c0:	4650      	mov	r0, sl
 801a7c2:	f7ff fbeb 	bl	8019f9c <_free_r>
 801a7c6:	230c      	movs	r3, #12
 801a7c8:	f8ca 3000 	str.w	r3, [sl]
 801a7cc:	89a3      	ldrh	r3, [r4, #12]
 801a7ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a7d2:	81a3      	strh	r3, [r4, #12]
 801a7d4:	f04f 30ff 	mov.w	r0, #4294967295
 801a7d8:	e7e9      	b.n	801a7ae <__ssputs_r+0x8a>
	...

0801a7dc <_svfiprintf_r>:
 801a7dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a7e0:	4698      	mov	r8, r3
 801a7e2:	898b      	ldrh	r3, [r1, #12]
 801a7e4:	061b      	lsls	r3, r3, #24
 801a7e6:	b09d      	sub	sp, #116	@ 0x74
 801a7e8:	4607      	mov	r7, r0
 801a7ea:	460d      	mov	r5, r1
 801a7ec:	4614      	mov	r4, r2
 801a7ee:	d510      	bpl.n	801a812 <_svfiprintf_r+0x36>
 801a7f0:	690b      	ldr	r3, [r1, #16]
 801a7f2:	b973      	cbnz	r3, 801a812 <_svfiprintf_r+0x36>
 801a7f4:	2140      	movs	r1, #64	@ 0x40
 801a7f6:	f7fd ff05 	bl	8018604 <_malloc_r>
 801a7fa:	6028      	str	r0, [r5, #0]
 801a7fc:	6128      	str	r0, [r5, #16]
 801a7fe:	b930      	cbnz	r0, 801a80e <_svfiprintf_r+0x32>
 801a800:	230c      	movs	r3, #12
 801a802:	603b      	str	r3, [r7, #0]
 801a804:	f04f 30ff 	mov.w	r0, #4294967295
 801a808:	b01d      	add	sp, #116	@ 0x74
 801a80a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a80e:	2340      	movs	r3, #64	@ 0x40
 801a810:	616b      	str	r3, [r5, #20]
 801a812:	2300      	movs	r3, #0
 801a814:	9309      	str	r3, [sp, #36]	@ 0x24
 801a816:	2320      	movs	r3, #32
 801a818:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801a81c:	f8cd 800c 	str.w	r8, [sp, #12]
 801a820:	2330      	movs	r3, #48	@ 0x30
 801a822:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801a9c0 <_svfiprintf_r+0x1e4>
 801a826:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801a82a:	f04f 0901 	mov.w	r9, #1
 801a82e:	4623      	mov	r3, r4
 801a830:	469a      	mov	sl, r3
 801a832:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a836:	b10a      	cbz	r2, 801a83c <_svfiprintf_r+0x60>
 801a838:	2a25      	cmp	r2, #37	@ 0x25
 801a83a:	d1f9      	bne.n	801a830 <_svfiprintf_r+0x54>
 801a83c:	ebba 0b04 	subs.w	fp, sl, r4
 801a840:	d00b      	beq.n	801a85a <_svfiprintf_r+0x7e>
 801a842:	465b      	mov	r3, fp
 801a844:	4622      	mov	r2, r4
 801a846:	4629      	mov	r1, r5
 801a848:	4638      	mov	r0, r7
 801a84a:	f7ff ff6b 	bl	801a724 <__ssputs_r>
 801a84e:	3001      	adds	r0, #1
 801a850:	f000 80a7 	beq.w	801a9a2 <_svfiprintf_r+0x1c6>
 801a854:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801a856:	445a      	add	r2, fp
 801a858:	9209      	str	r2, [sp, #36]	@ 0x24
 801a85a:	f89a 3000 	ldrb.w	r3, [sl]
 801a85e:	2b00      	cmp	r3, #0
 801a860:	f000 809f 	beq.w	801a9a2 <_svfiprintf_r+0x1c6>
 801a864:	2300      	movs	r3, #0
 801a866:	f04f 32ff 	mov.w	r2, #4294967295
 801a86a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a86e:	f10a 0a01 	add.w	sl, sl, #1
 801a872:	9304      	str	r3, [sp, #16]
 801a874:	9307      	str	r3, [sp, #28]
 801a876:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801a87a:	931a      	str	r3, [sp, #104]	@ 0x68
 801a87c:	4654      	mov	r4, sl
 801a87e:	2205      	movs	r2, #5
 801a880:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a884:	484e      	ldr	r0, [pc, #312]	@ (801a9c0 <_svfiprintf_r+0x1e4>)
 801a886:	f7e5 fd2b 	bl	80002e0 <memchr>
 801a88a:	9a04      	ldr	r2, [sp, #16]
 801a88c:	b9d8      	cbnz	r0, 801a8c6 <_svfiprintf_r+0xea>
 801a88e:	06d0      	lsls	r0, r2, #27
 801a890:	bf44      	itt	mi
 801a892:	2320      	movmi	r3, #32
 801a894:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801a898:	0711      	lsls	r1, r2, #28
 801a89a:	bf44      	itt	mi
 801a89c:	232b      	movmi	r3, #43	@ 0x2b
 801a89e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801a8a2:	f89a 3000 	ldrb.w	r3, [sl]
 801a8a6:	2b2a      	cmp	r3, #42	@ 0x2a
 801a8a8:	d015      	beq.n	801a8d6 <_svfiprintf_r+0xfa>
 801a8aa:	9a07      	ldr	r2, [sp, #28]
 801a8ac:	4654      	mov	r4, sl
 801a8ae:	2000      	movs	r0, #0
 801a8b0:	f04f 0c0a 	mov.w	ip, #10
 801a8b4:	4621      	mov	r1, r4
 801a8b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a8ba:	3b30      	subs	r3, #48	@ 0x30
 801a8bc:	2b09      	cmp	r3, #9
 801a8be:	d94b      	bls.n	801a958 <_svfiprintf_r+0x17c>
 801a8c0:	b1b0      	cbz	r0, 801a8f0 <_svfiprintf_r+0x114>
 801a8c2:	9207      	str	r2, [sp, #28]
 801a8c4:	e014      	b.n	801a8f0 <_svfiprintf_r+0x114>
 801a8c6:	eba0 0308 	sub.w	r3, r0, r8
 801a8ca:	fa09 f303 	lsl.w	r3, r9, r3
 801a8ce:	4313      	orrs	r3, r2
 801a8d0:	9304      	str	r3, [sp, #16]
 801a8d2:	46a2      	mov	sl, r4
 801a8d4:	e7d2      	b.n	801a87c <_svfiprintf_r+0xa0>
 801a8d6:	9b03      	ldr	r3, [sp, #12]
 801a8d8:	1d19      	adds	r1, r3, #4
 801a8da:	681b      	ldr	r3, [r3, #0]
 801a8dc:	9103      	str	r1, [sp, #12]
 801a8de:	2b00      	cmp	r3, #0
 801a8e0:	bfbb      	ittet	lt
 801a8e2:	425b      	neglt	r3, r3
 801a8e4:	f042 0202 	orrlt.w	r2, r2, #2
 801a8e8:	9307      	strge	r3, [sp, #28]
 801a8ea:	9307      	strlt	r3, [sp, #28]
 801a8ec:	bfb8      	it	lt
 801a8ee:	9204      	strlt	r2, [sp, #16]
 801a8f0:	7823      	ldrb	r3, [r4, #0]
 801a8f2:	2b2e      	cmp	r3, #46	@ 0x2e
 801a8f4:	d10a      	bne.n	801a90c <_svfiprintf_r+0x130>
 801a8f6:	7863      	ldrb	r3, [r4, #1]
 801a8f8:	2b2a      	cmp	r3, #42	@ 0x2a
 801a8fa:	d132      	bne.n	801a962 <_svfiprintf_r+0x186>
 801a8fc:	9b03      	ldr	r3, [sp, #12]
 801a8fe:	1d1a      	adds	r2, r3, #4
 801a900:	681b      	ldr	r3, [r3, #0]
 801a902:	9203      	str	r2, [sp, #12]
 801a904:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801a908:	3402      	adds	r4, #2
 801a90a:	9305      	str	r3, [sp, #20]
 801a90c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801a9d0 <_svfiprintf_r+0x1f4>
 801a910:	7821      	ldrb	r1, [r4, #0]
 801a912:	2203      	movs	r2, #3
 801a914:	4650      	mov	r0, sl
 801a916:	f7e5 fce3 	bl	80002e0 <memchr>
 801a91a:	b138      	cbz	r0, 801a92c <_svfiprintf_r+0x150>
 801a91c:	9b04      	ldr	r3, [sp, #16]
 801a91e:	eba0 000a 	sub.w	r0, r0, sl
 801a922:	2240      	movs	r2, #64	@ 0x40
 801a924:	4082      	lsls	r2, r0
 801a926:	4313      	orrs	r3, r2
 801a928:	3401      	adds	r4, #1
 801a92a:	9304      	str	r3, [sp, #16]
 801a92c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a930:	4824      	ldr	r0, [pc, #144]	@ (801a9c4 <_svfiprintf_r+0x1e8>)
 801a932:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801a936:	2206      	movs	r2, #6
 801a938:	f7e5 fcd2 	bl	80002e0 <memchr>
 801a93c:	2800      	cmp	r0, #0
 801a93e:	d036      	beq.n	801a9ae <_svfiprintf_r+0x1d2>
 801a940:	4b21      	ldr	r3, [pc, #132]	@ (801a9c8 <_svfiprintf_r+0x1ec>)
 801a942:	bb1b      	cbnz	r3, 801a98c <_svfiprintf_r+0x1b0>
 801a944:	9b03      	ldr	r3, [sp, #12]
 801a946:	3307      	adds	r3, #7
 801a948:	f023 0307 	bic.w	r3, r3, #7
 801a94c:	3308      	adds	r3, #8
 801a94e:	9303      	str	r3, [sp, #12]
 801a950:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a952:	4433      	add	r3, r6
 801a954:	9309      	str	r3, [sp, #36]	@ 0x24
 801a956:	e76a      	b.n	801a82e <_svfiprintf_r+0x52>
 801a958:	fb0c 3202 	mla	r2, ip, r2, r3
 801a95c:	460c      	mov	r4, r1
 801a95e:	2001      	movs	r0, #1
 801a960:	e7a8      	b.n	801a8b4 <_svfiprintf_r+0xd8>
 801a962:	2300      	movs	r3, #0
 801a964:	3401      	adds	r4, #1
 801a966:	9305      	str	r3, [sp, #20]
 801a968:	4619      	mov	r1, r3
 801a96a:	f04f 0c0a 	mov.w	ip, #10
 801a96e:	4620      	mov	r0, r4
 801a970:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a974:	3a30      	subs	r2, #48	@ 0x30
 801a976:	2a09      	cmp	r2, #9
 801a978:	d903      	bls.n	801a982 <_svfiprintf_r+0x1a6>
 801a97a:	2b00      	cmp	r3, #0
 801a97c:	d0c6      	beq.n	801a90c <_svfiprintf_r+0x130>
 801a97e:	9105      	str	r1, [sp, #20]
 801a980:	e7c4      	b.n	801a90c <_svfiprintf_r+0x130>
 801a982:	fb0c 2101 	mla	r1, ip, r1, r2
 801a986:	4604      	mov	r4, r0
 801a988:	2301      	movs	r3, #1
 801a98a:	e7f0      	b.n	801a96e <_svfiprintf_r+0x192>
 801a98c:	ab03      	add	r3, sp, #12
 801a98e:	9300      	str	r3, [sp, #0]
 801a990:	462a      	mov	r2, r5
 801a992:	4b0e      	ldr	r3, [pc, #56]	@ (801a9cc <_svfiprintf_r+0x1f0>)
 801a994:	a904      	add	r1, sp, #16
 801a996:	4638      	mov	r0, r7
 801a998:	f7fd ff8e 	bl	80188b8 <_printf_float>
 801a99c:	1c42      	adds	r2, r0, #1
 801a99e:	4606      	mov	r6, r0
 801a9a0:	d1d6      	bne.n	801a950 <_svfiprintf_r+0x174>
 801a9a2:	89ab      	ldrh	r3, [r5, #12]
 801a9a4:	065b      	lsls	r3, r3, #25
 801a9a6:	f53f af2d 	bmi.w	801a804 <_svfiprintf_r+0x28>
 801a9aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801a9ac:	e72c      	b.n	801a808 <_svfiprintf_r+0x2c>
 801a9ae:	ab03      	add	r3, sp, #12
 801a9b0:	9300      	str	r3, [sp, #0]
 801a9b2:	462a      	mov	r2, r5
 801a9b4:	4b05      	ldr	r3, [pc, #20]	@ (801a9cc <_svfiprintf_r+0x1f0>)
 801a9b6:	a904      	add	r1, sp, #16
 801a9b8:	4638      	mov	r0, r7
 801a9ba:	f7fe fa05 	bl	8018dc8 <_printf_i>
 801a9be:	e7ed      	b.n	801a99c <_svfiprintf_r+0x1c0>
 801a9c0:	0801b8aa 	.word	0x0801b8aa
 801a9c4:	0801b8b4 	.word	0x0801b8b4
 801a9c8:	080188b9 	.word	0x080188b9
 801a9cc:	0801a725 	.word	0x0801a725
 801a9d0:	0801b8b0 	.word	0x0801b8b0

0801a9d4 <__sflush_r>:
 801a9d4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801a9d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a9dc:	0716      	lsls	r6, r2, #28
 801a9de:	4605      	mov	r5, r0
 801a9e0:	460c      	mov	r4, r1
 801a9e2:	d454      	bmi.n	801aa8e <__sflush_r+0xba>
 801a9e4:	684b      	ldr	r3, [r1, #4]
 801a9e6:	2b00      	cmp	r3, #0
 801a9e8:	dc02      	bgt.n	801a9f0 <__sflush_r+0x1c>
 801a9ea:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801a9ec:	2b00      	cmp	r3, #0
 801a9ee:	dd48      	ble.n	801aa82 <__sflush_r+0xae>
 801a9f0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801a9f2:	2e00      	cmp	r6, #0
 801a9f4:	d045      	beq.n	801aa82 <__sflush_r+0xae>
 801a9f6:	2300      	movs	r3, #0
 801a9f8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801a9fc:	682f      	ldr	r7, [r5, #0]
 801a9fe:	6a21      	ldr	r1, [r4, #32]
 801aa00:	602b      	str	r3, [r5, #0]
 801aa02:	d030      	beq.n	801aa66 <__sflush_r+0x92>
 801aa04:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801aa06:	89a3      	ldrh	r3, [r4, #12]
 801aa08:	0759      	lsls	r1, r3, #29
 801aa0a:	d505      	bpl.n	801aa18 <__sflush_r+0x44>
 801aa0c:	6863      	ldr	r3, [r4, #4]
 801aa0e:	1ad2      	subs	r2, r2, r3
 801aa10:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801aa12:	b10b      	cbz	r3, 801aa18 <__sflush_r+0x44>
 801aa14:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801aa16:	1ad2      	subs	r2, r2, r3
 801aa18:	2300      	movs	r3, #0
 801aa1a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801aa1c:	6a21      	ldr	r1, [r4, #32]
 801aa1e:	4628      	mov	r0, r5
 801aa20:	47b0      	blx	r6
 801aa22:	1c43      	adds	r3, r0, #1
 801aa24:	89a3      	ldrh	r3, [r4, #12]
 801aa26:	d106      	bne.n	801aa36 <__sflush_r+0x62>
 801aa28:	6829      	ldr	r1, [r5, #0]
 801aa2a:	291d      	cmp	r1, #29
 801aa2c:	d82b      	bhi.n	801aa86 <__sflush_r+0xb2>
 801aa2e:	4a2a      	ldr	r2, [pc, #168]	@ (801aad8 <__sflush_r+0x104>)
 801aa30:	40ca      	lsrs	r2, r1
 801aa32:	07d6      	lsls	r6, r2, #31
 801aa34:	d527      	bpl.n	801aa86 <__sflush_r+0xb2>
 801aa36:	2200      	movs	r2, #0
 801aa38:	6062      	str	r2, [r4, #4]
 801aa3a:	04d9      	lsls	r1, r3, #19
 801aa3c:	6922      	ldr	r2, [r4, #16]
 801aa3e:	6022      	str	r2, [r4, #0]
 801aa40:	d504      	bpl.n	801aa4c <__sflush_r+0x78>
 801aa42:	1c42      	adds	r2, r0, #1
 801aa44:	d101      	bne.n	801aa4a <__sflush_r+0x76>
 801aa46:	682b      	ldr	r3, [r5, #0]
 801aa48:	b903      	cbnz	r3, 801aa4c <__sflush_r+0x78>
 801aa4a:	6560      	str	r0, [r4, #84]	@ 0x54
 801aa4c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801aa4e:	602f      	str	r7, [r5, #0]
 801aa50:	b1b9      	cbz	r1, 801aa82 <__sflush_r+0xae>
 801aa52:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801aa56:	4299      	cmp	r1, r3
 801aa58:	d002      	beq.n	801aa60 <__sflush_r+0x8c>
 801aa5a:	4628      	mov	r0, r5
 801aa5c:	f7ff fa9e 	bl	8019f9c <_free_r>
 801aa60:	2300      	movs	r3, #0
 801aa62:	6363      	str	r3, [r4, #52]	@ 0x34
 801aa64:	e00d      	b.n	801aa82 <__sflush_r+0xae>
 801aa66:	2301      	movs	r3, #1
 801aa68:	4628      	mov	r0, r5
 801aa6a:	47b0      	blx	r6
 801aa6c:	4602      	mov	r2, r0
 801aa6e:	1c50      	adds	r0, r2, #1
 801aa70:	d1c9      	bne.n	801aa06 <__sflush_r+0x32>
 801aa72:	682b      	ldr	r3, [r5, #0]
 801aa74:	2b00      	cmp	r3, #0
 801aa76:	d0c6      	beq.n	801aa06 <__sflush_r+0x32>
 801aa78:	2b1d      	cmp	r3, #29
 801aa7a:	d001      	beq.n	801aa80 <__sflush_r+0xac>
 801aa7c:	2b16      	cmp	r3, #22
 801aa7e:	d11e      	bne.n	801aabe <__sflush_r+0xea>
 801aa80:	602f      	str	r7, [r5, #0]
 801aa82:	2000      	movs	r0, #0
 801aa84:	e022      	b.n	801aacc <__sflush_r+0xf8>
 801aa86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801aa8a:	b21b      	sxth	r3, r3
 801aa8c:	e01b      	b.n	801aac6 <__sflush_r+0xf2>
 801aa8e:	690f      	ldr	r7, [r1, #16]
 801aa90:	2f00      	cmp	r7, #0
 801aa92:	d0f6      	beq.n	801aa82 <__sflush_r+0xae>
 801aa94:	0793      	lsls	r3, r2, #30
 801aa96:	680e      	ldr	r6, [r1, #0]
 801aa98:	bf08      	it	eq
 801aa9a:	694b      	ldreq	r3, [r1, #20]
 801aa9c:	600f      	str	r7, [r1, #0]
 801aa9e:	bf18      	it	ne
 801aaa0:	2300      	movne	r3, #0
 801aaa2:	eba6 0807 	sub.w	r8, r6, r7
 801aaa6:	608b      	str	r3, [r1, #8]
 801aaa8:	f1b8 0f00 	cmp.w	r8, #0
 801aaac:	dde9      	ble.n	801aa82 <__sflush_r+0xae>
 801aaae:	6a21      	ldr	r1, [r4, #32]
 801aab0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801aab2:	4643      	mov	r3, r8
 801aab4:	463a      	mov	r2, r7
 801aab6:	4628      	mov	r0, r5
 801aab8:	47b0      	blx	r6
 801aaba:	2800      	cmp	r0, #0
 801aabc:	dc08      	bgt.n	801aad0 <__sflush_r+0xfc>
 801aabe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801aac2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801aac6:	81a3      	strh	r3, [r4, #12]
 801aac8:	f04f 30ff 	mov.w	r0, #4294967295
 801aacc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801aad0:	4407      	add	r7, r0
 801aad2:	eba8 0800 	sub.w	r8, r8, r0
 801aad6:	e7e7      	b.n	801aaa8 <__sflush_r+0xd4>
 801aad8:	20400001 	.word	0x20400001

0801aadc <_fflush_r>:
 801aadc:	b538      	push	{r3, r4, r5, lr}
 801aade:	690b      	ldr	r3, [r1, #16]
 801aae0:	4605      	mov	r5, r0
 801aae2:	460c      	mov	r4, r1
 801aae4:	b913      	cbnz	r3, 801aaec <_fflush_r+0x10>
 801aae6:	2500      	movs	r5, #0
 801aae8:	4628      	mov	r0, r5
 801aaea:	bd38      	pop	{r3, r4, r5, pc}
 801aaec:	b118      	cbz	r0, 801aaf6 <_fflush_r+0x1a>
 801aaee:	6a03      	ldr	r3, [r0, #32]
 801aaf0:	b90b      	cbnz	r3, 801aaf6 <_fflush_r+0x1a>
 801aaf2:	f7fe fb13 	bl	801911c <__sinit>
 801aaf6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801aafa:	2b00      	cmp	r3, #0
 801aafc:	d0f3      	beq.n	801aae6 <_fflush_r+0xa>
 801aafe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801ab00:	07d0      	lsls	r0, r2, #31
 801ab02:	d404      	bmi.n	801ab0e <_fflush_r+0x32>
 801ab04:	0599      	lsls	r1, r3, #22
 801ab06:	d402      	bmi.n	801ab0e <_fflush_r+0x32>
 801ab08:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801ab0a:	f7fe fc30 	bl	801936e <__retarget_lock_acquire_recursive>
 801ab0e:	4628      	mov	r0, r5
 801ab10:	4621      	mov	r1, r4
 801ab12:	f7ff ff5f 	bl	801a9d4 <__sflush_r>
 801ab16:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801ab18:	07da      	lsls	r2, r3, #31
 801ab1a:	4605      	mov	r5, r0
 801ab1c:	d4e4      	bmi.n	801aae8 <_fflush_r+0xc>
 801ab1e:	89a3      	ldrh	r3, [r4, #12]
 801ab20:	059b      	lsls	r3, r3, #22
 801ab22:	d4e1      	bmi.n	801aae8 <_fflush_r+0xc>
 801ab24:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801ab26:	f7fe fc23 	bl	8019370 <__retarget_lock_release_recursive>
 801ab2a:	e7dd      	b.n	801aae8 <_fflush_r+0xc>

0801ab2c <fiprintf>:
 801ab2c:	b40e      	push	{r1, r2, r3}
 801ab2e:	b503      	push	{r0, r1, lr}
 801ab30:	4601      	mov	r1, r0
 801ab32:	ab03      	add	r3, sp, #12
 801ab34:	4805      	ldr	r0, [pc, #20]	@ (801ab4c <fiprintf+0x20>)
 801ab36:	f853 2b04 	ldr.w	r2, [r3], #4
 801ab3a:	6800      	ldr	r0, [r0, #0]
 801ab3c:	9301      	str	r3, [sp, #4]
 801ab3e:	f000 f8b3 	bl	801aca8 <_vfiprintf_r>
 801ab42:	b002      	add	sp, #8
 801ab44:	f85d eb04 	ldr.w	lr, [sp], #4
 801ab48:	b003      	add	sp, #12
 801ab4a:	4770      	bx	lr
 801ab4c:	24000128 	.word	0x24000128

0801ab50 <memmove>:
 801ab50:	4288      	cmp	r0, r1
 801ab52:	b510      	push	{r4, lr}
 801ab54:	eb01 0402 	add.w	r4, r1, r2
 801ab58:	d902      	bls.n	801ab60 <memmove+0x10>
 801ab5a:	4284      	cmp	r4, r0
 801ab5c:	4623      	mov	r3, r4
 801ab5e:	d807      	bhi.n	801ab70 <memmove+0x20>
 801ab60:	1e43      	subs	r3, r0, #1
 801ab62:	42a1      	cmp	r1, r4
 801ab64:	d008      	beq.n	801ab78 <memmove+0x28>
 801ab66:	f811 2b01 	ldrb.w	r2, [r1], #1
 801ab6a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801ab6e:	e7f8      	b.n	801ab62 <memmove+0x12>
 801ab70:	4402      	add	r2, r0
 801ab72:	4601      	mov	r1, r0
 801ab74:	428a      	cmp	r2, r1
 801ab76:	d100      	bne.n	801ab7a <memmove+0x2a>
 801ab78:	bd10      	pop	{r4, pc}
 801ab7a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801ab7e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801ab82:	e7f7      	b.n	801ab74 <memmove+0x24>

0801ab84 <abort>:
 801ab84:	b508      	push	{r3, lr}
 801ab86:	2006      	movs	r0, #6
 801ab88:	f000 fa62 	bl	801b050 <raise>
 801ab8c:	2001      	movs	r0, #1
 801ab8e:	f7e8 f99f 	bl	8002ed0 <_exit>

0801ab92 <_calloc_r>:
 801ab92:	b570      	push	{r4, r5, r6, lr}
 801ab94:	fba1 5402 	umull	r5, r4, r1, r2
 801ab98:	b934      	cbnz	r4, 801aba8 <_calloc_r+0x16>
 801ab9a:	4629      	mov	r1, r5
 801ab9c:	f7fd fd32 	bl	8018604 <_malloc_r>
 801aba0:	4606      	mov	r6, r0
 801aba2:	b928      	cbnz	r0, 801abb0 <_calloc_r+0x1e>
 801aba4:	4630      	mov	r0, r6
 801aba6:	bd70      	pop	{r4, r5, r6, pc}
 801aba8:	220c      	movs	r2, #12
 801abaa:	6002      	str	r2, [r0, #0]
 801abac:	2600      	movs	r6, #0
 801abae:	e7f9      	b.n	801aba4 <_calloc_r+0x12>
 801abb0:	462a      	mov	r2, r5
 801abb2:	4621      	mov	r1, r4
 801abb4:	f7fe fb4d 	bl	8019252 <memset>
 801abb8:	e7f4      	b.n	801aba4 <_calloc_r+0x12>

0801abba <__ascii_mbtowc>:
 801abba:	b082      	sub	sp, #8
 801abbc:	b901      	cbnz	r1, 801abc0 <__ascii_mbtowc+0x6>
 801abbe:	a901      	add	r1, sp, #4
 801abc0:	b142      	cbz	r2, 801abd4 <__ascii_mbtowc+0x1a>
 801abc2:	b14b      	cbz	r3, 801abd8 <__ascii_mbtowc+0x1e>
 801abc4:	7813      	ldrb	r3, [r2, #0]
 801abc6:	600b      	str	r3, [r1, #0]
 801abc8:	7812      	ldrb	r2, [r2, #0]
 801abca:	1e10      	subs	r0, r2, #0
 801abcc:	bf18      	it	ne
 801abce:	2001      	movne	r0, #1
 801abd0:	b002      	add	sp, #8
 801abd2:	4770      	bx	lr
 801abd4:	4610      	mov	r0, r2
 801abd6:	e7fb      	b.n	801abd0 <__ascii_mbtowc+0x16>
 801abd8:	f06f 0001 	mvn.w	r0, #1
 801abdc:	e7f8      	b.n	801abd0 <__ascii_mbtowc+0x16>

0801abde <_realloc_r>:
 801abde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801abe2:	4607      	mov	r7, r0
 801abe4:	4614      	mov	r4, r2
 801abe6:	460d      	mov	r5, r1
 801abe8:	b921      	cbnz	r1, 801abf4 <_realloc_r+0x16>
 801abea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801abee:	4611      	mov	r1, r2
 801abf0:	f7fd bd08 	b.w	8018604 <_malloc_r>
 801abf4:	b92a      	cbnz	r2, 801ac02 <_realloc_r+0x24>
 801abf6:	f7ff f9d1 	bl	8019f9c <_free_r>
 801abfa:	4625      	mov	r5, r4
 801abfc:	4628      	mov	r0, r5
 801abfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ac02:	f000 fa41 	bl	801b088 <_malloc_usable_size_r>
 801ac06:	4284      	cmp	r4, r0
 801ac08:	4606      	mov	r6, r0
 801ac0a:	d802      	bhi.n	801ac12 <_realloc_r+0x34>
 801ac0c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801ac10:	d8f4      	bhi.n	801abfc <_realloc_r+0x1e>
 801ac12:	4621      	mov	r1, r4
 801ac14:	4638      	mov	r0, r7
 801ac16:	f7fd fcf5 	bl	8018604 <_malloc_r>
 801ac1a:	4680      	mov	r8, r0
 801ac1c:	b908      	cbnz	r0, 801ac22 <_realloc_r+0x44>
 801ac1e:	4645      	mov	r5, r8
 801ac20:	e7ec      	b.n	801abfc <_realloc_r+0x1e>
 801ac22:	42b4      	cmp	r4, r6
 801ac24:	4622      	mov	r2, r4
 801ac26:	4629      	mov	r1, r5
 801ac28:	bf28      	it	cs
 801ac2a:	4632      	movcs	r2, r6
 801ac2c:	f7fe fba1 	bl	8019372 <memcpy>
 801ac30:	4629      	mov	r1, r5
 801ac32:	4638      	mov	r0, r7
 801ac34:	f7ff f9b2 	bl	8019f9c <_free_r>
 801ac38:	e7f1      	b.n	801ac1e <_realloc_r+0x40>

0801ac3a <__ascii_wctomb>:
 801ac3a:	4603      	mov	r3, r0
 801ac3c:	4608      	mov	r0, r1
 801ac3e:	b141      	cbz	r1, 801ac52 <__ascii_wctomb+0x18>
 801ac40:	2aff      	cmp	r2, #255	@ 0xff
 801ac42:	d904      	bls.n	801ac4e <__ascii_wctomb+0x14>
 801ac44:	228a      	movs	r2, #138	@ 0x8a
 801ac46:	601a      	str	r2, [r3, #0]
 801ac48:	f04f 30ff 	mov.w	r0, #4294967295
 801ac4c:	4770      	bx	lr
 801ac4e:	700a      	strb	r2, [r1, #0]
 801ac50:	2001      	movs	r0, #1
 801ac52:	4770      	bx	lr

0801ac54 <__sfputc_r>:
 801ac54:	6893      	ldr	r3, [r2, #8]
 801ac56:	3b01      	subs	r3, #1
 801ac58:	2b00      	cmp	r3, #0
 801ac5a:	b410      	push	{r4}
 801ac5c:	6093      	str	r3, [r2, #8]
 801ac5e:	da08      	bge.n	801ac72 <__sfputc_r+0x1e>
 801ac60:	6994      	ldr	r4, [r2, #24]
 801ac62:	42a3      	cmp	r3, r4
 801ac64:	db01      	blt.n	801ac6a <__sfputc_r+0x16>
 801ac66:	290a      	cmp	r1, #10
 801ac68:	d103      	bne.n	801ac72 <__sfputc_r+0x1e>
 801ac6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ac6e:	f000 b933 	b.w	801aed8 <__swbuf_r>
 801ac72:	6813      	ldr	r3, [r2, #0]
 801ac74:	1c58      	adds	r0, r3, #1
 801ac76:	6010      	str	r0, [r2, #0]
 801ac78:	7019      	strb	r1, [r3, #0]
 801ac7a:	4608      	mov	r0, r1
 801ac7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ac80:	4770      	bx	lr

0801ac82 <__sfputs_r>:
 801ac82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ac84:	4606      	mov	r6, r0
 801ac86:	460f      	mov	r7, r1
 801ac88:	4614      	mov	r4, r2
 801ac8a:	18d5      	adds	r5, r2, r3
 801ac8c:	42ac      	cmp	r4, r5
 801ac8e:	d101      	bne.n	801ac94 <__sfputs_r+0x12>
 801ac90:	2000      	movs	r0, #0
 801ac92:	e007      	b.n	801aca4 <__sfputs_r+0x22>
 801ac94:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ac98:	463a      	mov	r2, r7
 801ac9a:	4630      	mov	r0, r6
 801ac9c:	f7ff ffda 	bl	801ac54 <__sfputc_r>
 801aca0:	1c43      	adds	r3, r0, #1
 801aca2:	d1f3      	bne.n	801ac8c <__sfputs_r+0xa>
 801aca4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801aca8 <_vfiprintf_r>:
 801aca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801acac:	460d      	mov	r5, r1
 801acae:	b09d      	sub	sp, #116	@ 0x74
 801acb0:	4614      	mov	r4, r2
 801acb2:	4698      	mov	r8, r3
 801acb4:	4606      	mov	r6, r0
 801acb6:	b118      	cbz	r0, 801acc0 <_vfiprintf_r+0x18>
 801acb8:	6a03      	ldr	r3, [r0, #32]
 801acba:	b90b      	cbnz	r3, 801acc0 <_vfiprintf_r+0x18>
 801acbc:	f7fe fa2e 	bl	801911c <__sinit>
 801acc0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801acc2:	07d9      	lsls	r1, r3, #31
 801acc4:	d405      	bmi.n	801acd2 <_vfiprintf_r+0x2a>
 801acc6:	89ab      	ldrh	r3, [r5, #12]
 801acc8:	059a      	lsls	r2, r3, #22
 801acca:	d402      	bmi.n	801acd2 <_vfiprintf_r+0x2a>
 801accc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801acce:	f7fe fb4e 	bl	801936e <__retarget_lock_acquire_recursive>
 801acd2:	89ab      	ldrh	r3, [r5, #12]
 801acd4:	071b      	lsls	r3, r3, #28
 801acd6:	d501      	bpl.n	801acdc <_vfiprintf_r+0x34>
 801acd8:	692b      	ldr	r3, [r5, #16]
 801acda:	b99b      	cbnz	r3, 801ad04 <_vfiprintf_r+0x5c>
 801acdc:	4629      	mov	r1, r5
 801acde:	4630      	mov	r0, r6
 801ace0:	f000 f938 	bl	801af54 <__swsetup_r>
 801ace4:	b170      	cbz	r0, 801ad04 <_vfiprintf_r+0x5c>
 801ace6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801ace8:	07dc      	lsls	r4, r3, #31
 801acea:	d504      	bpl.n	801acf6 <_vfiprintf_r+0x4e>
 801acec:	f04f 30ff 	mov.w	r0, #4294967295
 801acf0:	b01d      	add	sp, #116	@ 0x74
 801acf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801acf6:	89ab      	ldrh	r3, [r5, #12]
 801acf8:	0598      	lsls	r0, r3, #22
 801acfa:	d4f7      	bmi.n	801acec <_vfiprintf_r+0x44>
 801acfc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801acfe:	f7fe fb37 	bl	8019370 <__retarget_lock_release_recursive>
 801ad02:	e7f3      	b.n	801acec <_vfiprintf_r+0x44>
 801ad04:	2300      	movs	r3, #0
 801ad06:	9309      	str	r3, [sp, #36]	@ 0x24
 801ad08:	2320      	movs	r3, #32
 801ad0a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801ad0e:	f8cd 800c 	str.w	r8, [sp, #12]
 801ad12:	2330      	movs	r3, #48	@ 0x30
 801ad14:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801aec4 <_vfiprintf_r+0x21c>
 801ad18:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801ad1c:	f04f 0901 	mov.w	r9, #1
 801ad20:	4623      	mov	r3, r4
 801ad22:	469a      	mov	sl, r3
 801ad24:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ad28:	b10a      	cbz	r2, 801ad2e <_vfiprintf_r+0x86>
 801ad2a:	2a25      	cmp	r2, #37	@ 0x25
 801ad2c:	d1f9      	bne.n	801ad22 <_vfiprintf_r+0x7a>
 801ad2e:	ebba 0b04 	subs.w	fp, sl, r4
 801ad32:	d00b      	beq.n	801ad4c <_vfiprintf_r+0xa4>
 801ad34:	465b      	mov	r3, fp
 801ad36:	4622      	mov	r2, r4
 801ad38:	4629      	mov	r1, r5
 801ad3a:	4630      	mov	r0, r6
 801ad3c:	f7ff ffa1 	bl	801ac82 <__sfputs_r>
 801ad40:	3001      	adds	r0, #1
 801ad42:	f000 80a7 	beq.w	801ae94 <_vfiprintf_r+0x1ec>
 801ad46:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801ad48:	445a      	add	r2, fp
 801ad4a:	9209      	str	r2, [sp, #36]	@ 0x24
 801ad4c:	f89a 3000 	ldrb.w	r3, [sl]
 801ad50:	2b00      	cmp	r3, #0
 801ad52:	f000 809f 	beq.w	801ae94 <_vfiprintf_r+0x1ec>
 801ad56:	2300      	movs	r3, #0
 801ad58:	f04f 32ff 	mov.w	r2, #4294967295
 801ad5c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801ad60:	f10a 0a01 	add.w	sl, sl, #1
 801ad64:	9304      	str	r3, [sp, #16]
 801ad66:	9307      	str	r3, [sp, #28]
 801ad68:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801ad6c:	931a      	str	r3, [sp, #104]	@ 0x68
 801ad6e:	4654      	mov	r4, sl
 801ad70:	2205      	movs	r2, #5
 801ad72:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ad76:	4853      	ldr	r0, [pc, #332]	@ (801aec4 <_vfiprintf_r+0x21c>)
 801ad78:	f7e5 fab2 	bl	80002e0 <memchr>
 801ad7c:	9a04      	ldr	r2, [sp, #16]
 801ad7e:	b9d8      	cbnz	r0, 801adb8 <_vfiprintf_r+0x110>
 801ad80:	06d1      	lsls	r1, r2, #27
 801ad82:	bf44      	itt	mi
 801ad84:	2320      	movmi	r3, #32
 801ad86:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801ad8a:	0713      	lsls	r3, r2, #28
 801ad8c:	bf44      	itt	mi
 801ad8e:	232b      	movmi	r3, #43	@ 0x2b
 801ad90:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801ad94:	f89a 3000 	ldrb.w	r3, [sl]
 801ad98:	2b2a      	cmp	r3, #42	@ 0x2a
 801ad9a:	d015      	beq.n	801adc8 <_vfiprintf_r+0x120>
 801ad9c:	9a07      	ldr	r2, [sp, #28]
 801ad9e:	4654      	mov	r4, sl
 801ada0:	2000      	movs	r0, #0
 801ada2:	f04f 0c0a 	mov.w	ip, #10
 801ada6:	4621      	mov	r1, r4
 801ada8:	f811 3b01 	ldrb.w	r3, [r1], #1
 801adac:	3b30      	subs	r3, #48	@ 0x30
 801adae:	2b09      	cmp	r3, #9
 801adb0:	d94b      	bls.n	801ae4a <_vfiprintf_r+0x1a2>
 801adb2:	b1b0      	cbz	r0, 801ade2 <_vfiprintf_r+0x13a>
 801adb4:	9207      	str	r2, [sp, #28]
 801adb6:	e014      	b.n	801ade2 <_vfiprintf_r+0x13a>
 801adb8:	eba0 0308 	sub.w	r3, r0, r8
 801adbc:	fa09 f303 	lsl.w	r3, r9, r3
 801adc0:	4313      	orrs	r3, r2
 801adc2:	9304      	str	r3, [sp, #16]
 801adc4:	46a2      	mov	sl, r4
 801adc6:	e7d2      	b.n	801ad6e <_vfiprintf_r+0xc6>
 801adc8:	9b03      	ldr	r3, [sp, #12]
 801adca:	1d19      	adds	r1, r3, #4
 801adcc:	681b      	ldr	r3, [r3, #0]
 801adce:	9103      	str	r1, [sp, #12]
 801add0:	2b00      	cmp	r3, #0
 801add2:	bfbb      	ittet	lt
 801add4:	425b      	neglt	r3, r3
 801add6:	f042 0202 	orrlt.w	r2, r2, #2
 801adda:	9307      	strge	r3, [sp, #28]
 801addc:	9307      	strlt	r3, [sp, #28]
 801adde:	bfb8      	it	lt
 801ade0:	9204      	strlt	r2, [sp, #16]
 801ade2:	7823      	ldrb	r3, [r4, #0]
 801ade4:	2b2e      	cmp	r3, #46	@ 0x2e
 801ade6:	d10a      	bne.n	801adfe <_vfiprintf_r+0x156>
 801ade8:	7863      	ldrb	r3, [r4, #1]
 801adea:	2b2a      	cmp	r3, #42	@ 0x2a
 801adec:	d132      	bne.n	801ae54 <_vfiprintf_r+0x1ac>
 801adee:	9b03      	ldr	r3, [sp, #12]
 801adf0:	1d1a      	adds	r2, r3, #4
 801adf2:	681b      	ldr	r3, [r3, #0]
 801adf4:	9203      	str	r2, [sp, #12]
 801adf6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801adfa:	3402      	adds	r4, #2
 801adfc:	9305      	str	r3, [sp, #20]
 801adfe:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801aed4 <_vfiprintf_r+0x22c>
 801ae02:	7821      	ldrb	r1, [r4, #0]
 801ae04:	2203      	movs	r2, #3
 801ae06:	4650      	mov	r0, sl
 801ae08:	f7e5 fa6a 	bl	80002e0 <memchr>
 801ae0c:	b138      	cbz	r0, 801ae1e <_vfiprintf_r+0x176>
 801ae0e:	9b04      	ldr	r3, [sp, #16]
 801ae10:	eba0 000a 	sub.w	r0, r0, sl
 801ae14:	2240      	movs	r2, #64	@ 0x40
 801ae16:	4082      	lsls	r2, r0
 801ae18:	4313      	orrs	r3, r2
 801ae1a:	3401      	adds	r4, #1
 801ae1c:	9304      	str	r3, [sp, #16]
 801ae1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ae22:	4829      	ldr	r0, [pc, #164]	@ (801aec8 <_vfiprintf_r+0x220>)
 801ae24:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801ae28:	2206      	movs	r2, #6
 801ae2a:	f7e5 fa59 	bl	80002e0 <memchr>
 801ae2e:	2800      	cmp	r0, #0
 801ae30:	d03f      	beq.n	801aeb2 <_vfiprintf_r+0x20a>
 801ae32:	4b26      	ldr	r3, [pc, #152]	@ (801aecc <_vfiprintf_r+0x224>)
 801ae34:	bb1b      	cbnz	r3, 801ae7e <_vfiprintf_r+0x1d6>
 801ae36:	9b03      	ldr	r3, [sp, #12]
 801ae38:	3307      	adds	r3, #7
 801ae3a:	f023 0307 	bic.w	r3, r3, #7
 801ae3e:	3308      	adds	r3, #8
 801ae40:	9303      	str	r3, [sp, #12]
 801ae42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ae44:	443b      	add	r3, r7
 801ae46:	9309      	str	r3, [sp, #36]	@ 0x24
 801ae48:	e76a      	b.n	801ad20 <_vfiprintf_r+0x78>
 801ae4a:	fb0c 3202 	mla	r2, ip, r2, r3
 801ae4e:	460c      	mov	r4, r1
 801ae50:	2001      	movs	r0, #1
 801ae52:	e7a8      	b.n	801ada6 <_vfiprintf_r+0xfe>
 801ae54:	2300      	movs	r3, #0
 801ae56:	3401      	adds	r4, #1
 801ae58:	9305      	str	r3, [sp, #20]
 801ae5a:	4619      	mov	r1, r3
 801ae5c:	f04f 0c0a 	mov.w	ip, #10
 801ae60:	4620      	mov	r0, r4
 801ae62:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ae66:	3a30      	subs	r2, #48	@ 0x30
 801ae68:	2a09      	cmp	r2, #9
 801ae6a:	d903      	bls.n	801ae74 <_vfiprintf_r+0x1cc>
 801ae6c:	2b00      	cmp	r3, #0
 801ae6e:	d0c6      	beq.n	801adfe <_vfiprintf_r+0x156>
 801ae70:	9105      	str	r1, [sp, #20]
 801ae72:	e7c4      	b.n	801adfe <_vfiprintf_r+0x156>
 801ae74:	fb0c 2101 	mla	r1, ip, r1, r2
 801ae78:	4604      	mov	r4, r0
 801ae7a:	2301      	movs	r3, #1
 801ae7c:	e7f0      	b.n	801ae60 <_vfiprintf_r+0x1b8>
 801ae7e:	ab03      	add	r3, sp, #12
 801ae80:	9300      	str	r3, [sp, #0]
 801ae82:	462a      	mov	r2, r5
 801ae84:	4b12      	ldr	r3, [pc, #72]	@ (801aed0 <_vfiprintf_r+0x228>)
 801ae86:	a904      	add	r1, sp, #16
 801ae88:	4630      	mov	r0, r6
 801ae8a:	f7fd fd15 	bl	80188b8 <_printf_float>
 801ae8e:	4607      	mov	r7, r0
 801ae90:	1c78      	adds	r0, r7, #1
 801ae92:	d1d6      	bne.n	801ae42 <_vfiprintf_r+0x19a>
 801ae94:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801ae96:	07d9      	lsls	r1, r3, #31
 801ae98:	d405      	bmi.n	801aea6 <_vfiprintf_r+0x1fe>
 801ae9a:	89ab      	ldrh	r3, [r5, #12]
 801ae9c:	059a      	lsls	r2, r3, #22
 801ae9e:	d402      	bmi.n	801aea6 <_vfiprintf_r+0x1fe>
 801aea0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801aea2:	f7fe fa65 	bl	8019370 <__retarget_lock_release_recursive>
 801aea6:	89ab      	ldrh	r3, [r5, #12]
 801aea8:	065b      	lsls	r3, r3, #25
 801aeaa:	f53f af1f 	bmi.w	801acec <_vfiprintf_r+0x44>
 801aeae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801aeb0:	e71e      	b.n	801acf0 <_vfiprintf_r+0x48>
 801aeb2:	ab03      	add	r3, sp, #12
 801aeb4:	9300      	str	r3, [sp, #0]
 801aeb6:	462a      	mov	r2, r5
 801aeb8:	4b05      	ldr	r3, [pc, #20]	@ (801aed0 <_vfiprintf_r+0x228>)
 801aeba:	a904      	add	r1, sp, #16
 801aebc:	4630      	mov	r0, r6
 801aebe:	f7fd ff83 	bl	8018dc8 <_printf_i>
 801aec2:	e7e4      	b.n	801ae8e <_vfiprintf_r+0x1e6>
 801aec4:	0801b8aa 	.word	0x0801b8aa
 801aec8:	0801b8b4 	.word	0x0801b8b4
 801aecc:	080188b9 	.word	0x080188b9
 801aed0:	0801ac83 	.word	0x0801ac83
 801aed4:	0801b8b0 	.word	0x0801b8b0

0801aed8 <__swbuf_r>:
 801aed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801aeda:	460e      	mov	r6, r1
 801aedc:	4614      	mov	r4, r2
 801aede:	4605      	mov	r5, r0
 801aee0:	b118      	cbz	r0, 801aeea <__swbuf_r+0x12>
 801aee2:	6a03      	ldr	r3, [r0, #32]
 801aee4:	b90b      	cbnz	r3, 801aeea <__swbuf_r+0x12>
 801aee6:	f7fe f919 	bl	801911c <__sinit>
 801aeea:	69a3      	ldr	r3, [r4, #24]
 801aeec:	60a3      	str	r3, [r4, #8]
 801aeee:	89a3      	ldrh	r3, [r4, #12]
 801aef0:	071a      	lsls	r2, r3, #28
 801aef2:	d501      	bpl.n	801aef8 <__swbuf_r+0x20>
 801aef4:	6923      	ldr	r3, [r4, #16]
 801aef6:	b943      	cbnz	r3, 801af0a <__swbuf_r+0x32>
 801aef8:	4621      	mov	r1, r4
 801aefa:	4628      	mov	r0, r5
 801aefc:	f000 f82a 	bl	801af54 <__swsetup_r>
 801af00:	b118      	cbz	r0, 801af0a <__swbuf_r+0x32>
 801af02:	f04f 37ff 	mov.w	r7, #4294967295
 801af06:	4638      	mov	r0, r7
 801af08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801af0a:	6823      	ldr	r3, [r4, #0]
 801af0c:	6922      	ldr	r2, [r4, #16]
 801af0e:	1a98      	subs	r0, r3, r2
 801af10:	6963      	ldr	r3, [r4, #20]
 801af12:	b2f6      	uxtb	r6, r6
 801af14:	4283      	cmp	r3, r0
 801af16:	4637      	mov	r7, r6
 801af18:	dc05      	bgt.n	801af26 <__swbuf_r+0x4e>
 801af1a:	4621      	mov	r1, r4
 801af1c:	4628      	mov	r0, r5
 801af1e:	f7ff fddd 	bl	801aadc <_fflush_r>
 801af22:	2800      	cmp	r0, #0
 801af24:	d1ed      	bne.n	801af02 <__swbuf_r+0x2a>
 801af26:	68a3      	ldr	r3, [r4, #8]
 801af28:	3b01      	subs	r3, #1
 801af2a:	60a3      	str	r3, [r4, #8]
 801af2c:	6823      	ldr	r3, [r4, #0]
 801af2e:	1c5a      	adds	r2, r3, #1
 801af30:	6022      	str	r2, [r4, #0]
 801af32:	701e      	strb	r6, [r3, #0]
 801af34:	6962      	ldr	r2, [r4, #20]
 801af36:	1c43      	adds	r3, r0, #1
 801af38:	429a      	cmp	r2, r3
 801af3a:	d004      	beq.n	801af46 <__swbuf_r+0x6e>
 801af3c:	89a3      	ldrh	r3, [r4, #12]
 801af3e:	07db      	lsls	r3, r3, #31
 801af40:	d5e1      	bpl.n	801af06 <__swbuf_r+0x2e>
 801af42:	2e0a      	cmp	r6, #10
 801af44:	d1df      	bne.n	801af06 <__swbuf_r+0x2e>
 801af46:	4621      	mov	r1, r4
 801af48:	4628      	mov	r0, r5
 801af4a:	f7ff fdc7 	bl	801aadc <_fflush_r>
 801af4e:	2800      	cmp	r0, #0
 801af50:	d0d9      	beq.n	801af06 <__swbuf_r+0x2e>
 801af52:	e7d6      	b.n	801af02 <__swbuf_r+0x2a>

0801af54 <__swsetup_r>:
 801af54:	b538      	push	{r3, r4, r5, lr}
 801af56:	4b29      	ldr	r3, [pc, #164]	@ (801affc <__swsetup_r+0xa8>)
 801af58:	4605      	mov	r5, r0
 801af5a:	6818      	ldr	r0, [r3, #0]
 801af5c:	460c      	mov	r4, r1
 801af5e:	b118      	cbz	r0, 801af68 <__swsetup_r+0x14>
 801af60:	6a03      	ldr	r3, [r0, #32]
 801af62:	b90b      	cbnz	r3, 801af68 <__swsetup_r+0x14>
 801af64:	f7fe f8da 	bl	801911c <__sinit>
 801af68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801af6c:	0719      	lsls	r1, r3, #28
 801af6e:	d422      	bmi.n	801afb6 <__swsetup_r+0x62>
 801af70:	06da      	lsls	r2, r3, #27
 801af72:	d407      	bmi.n	801af84 <__swsetup_r+0x30>
 801af74:	2209      	movs	r2, #9
 801af76:	602a      	str	r2, [r5, #0]
 801af78:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801af7c:	81a3      	strh	r3, [r4, #12]
 801af7e:	f04f 30ff 	mov.w	r0, #4294967295
 801af82:	e033      	b.n	801afec <__swsetup_r+0x98>
 801af84:	0758      	lsls	r0, r3, #29
 801af86:	d512      	bpl.n	801afae <__swsetup_r+0x5a>
 801af88:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801af8a:	b141      	cbz	r1, 801af9e <__swsetup_r+0x4a>
 801af8c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801af90:	4299      	cmp	r1, r3
 801af92:	d002      	beq.n	801af9a <__swsetup_r+0x46>
 801af94:	4628      	mov	r0, r5
 801af96:	f7ff f801 	bl	8019f9c <_free_r>
 801af9a:	2300      	movs	r3, #0
 801af9c:	6363      	str	r3, [r4, #52]	@ 0x34
 801af9e:	89a3      	ldrh	r3, [r4, #12]
 801afa0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801afa4:	81a3      	strh	r3, [r4, #12]
 801afa6:	2300      	movs	r3, #0
 801afa8:	6063      	str	r3, [r4, #4]
 801afaa:	6923      	ldr	r3, [r4, #16]
 801afac:	6023      	str	r3, [r4, #0]
 801afae:	89a3      	ldrh	r3, [r4, #12]
 801afb0:	f043 0308 	orr.w	r3, r3, #8
 801afb4:	81a3      	strh	r3, [r4, #12]
 801afb6:	6923      	ldr	r3, [r4, #16]
 801afb8:	b94b      	cbnz	r3, 801afce <__swsetup_r+0x7a>
 801afba:	89a3      	ldrh	r3, [r4, #12]
 801afbc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801afc0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801afc4:	d003      	beq.n	801afce <__swsetup_r+0x7a>
 801afc6:	4621      	mov	r1, r4
 801afc8:	4628      	mov	r0, r5
 801afca:	f000 f88b 	bl	801b0e4 <__smakebuf_r>
 801afce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801afd2:	f013 0201 	ands.w	r2, r3, #1
 801afd6:	d00a      	beq.n	801afee <__swsetup_r+0x9a>
 801afd8:	2200      	movs	r2, #0
 801afda:	60a2      	str	r2, [r4, #8]
 801afdc:	6962      	ldr	r2, [r4, #20]
 801afde:	4252      	negs	r2, r2
 801afe0:	61a2      	str	r2, [r4, #24]
 801afe2:	6922      	ldr	r2, [r4, #16]
 801afe4:	b942      	cbnz	r2, 801aff8 <__swsetup_r+0xa4>
 801afe6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801afea:	d1c5      	bne.n	801af78 <__swsetup_r+0x24>
 801afec:	bd38      	pop	{r3, r4, r5, pc}
 801afee:	0799      	lsls	r1, r3, #30
 801aff0:	bf58      	it	pl
 801aff2:	6962      	ldrpl	r2, [r4, #20]
 801aff4:	60a2      	str	r2, [r4, #8]
 801aff6:	e7f4      	b.n	801afe2 <__swsetup_r+0x8e>
 801aff8:	2000      	movs	r0, #0
 801affa:	e7f7      	b.n	801afec <__swsetup_r+0x98>
 801affc:	24000128 	.word	0x24000128

0801b000 <_raise_r>:
 801b000:	291f      	cmp	r1, #31
 801b002:	b538      	push	{r3, r4, r5, lr}
 801b004:	4605      	mov	r5, r0
 801b006:	460c      	mov	r4, r1
 801b008:	d904      	bls.n	801b014 <_raise_r+0x14>
 801b00a:	2316      	movs	r3, #22
 801b00c:	6003      	str	r3, [r0, #0]
 801b00e:	f04f 30ff 	mov.w	r0, #4294967295
 801b012:	bd38      	pop	{r3, r4, r5, pc}
 801b014:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801b016:	b112      	cbz	r2, 801b01e <_raise_r+0x1e>
 801b018:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801b01c:	b94b      	cbnz	r3, 801b032 <_raise_r+0x32>
 801b01e:	4628      	mov	r0, r5
 801b020:	f000 f830 	bl	801b084 <_getpid_r>
 801b024:	4622      	mov	r2, r4
 801b026:	4601      	mov	r1, r0
 801b028:	4628      	mov	r0, r5
 801b02a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b02e:	f000 b817 	b.w	801b060 <_kill_r>
 801b032:	2b01      	cmp	r3, #1
 801b034:	d00a      	beq.n	801b04c <_raise_r+0x4c>
 801b036:	1c59      	adds	r1, r3, #1
 801b038:	d103      	bne.n	801b042 <_raise_r+0x42>
 801b03a:	2316      	movs	r3, #22
 801b03c:	6003      	str	r3, [r0, #0]
 801b03e:	2001      	movs	r0, #1
 801b040:	e7e7      	b.n	801b012 <_raise_r+0x12>
 801b042:	2100      	movs	r1, #0
 801b044:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801b048:	4620      	mov	r0, r4
 801b04a:	4798      	blx	r3
 801b04c:	2000      	movs	r0, #0
 801b04e:	e7e0      	b.n	801b012 <_raise_r+0x12>

0801b050 <raise>:
 801b050:	4b02      	ldr	r3, [pc, #8]	@ (801b05c <raise+0xc>)
 801b052:	4601      	mov	r1, r0
 801b054:	6818      	ldr	r0, [r3, #0]
 801b056:	f7ff bfd3 	b.w	801b000 <_raise_r>
 801b05a:	bf00      	nop
 801b05c:	24000128 	.word	0x24000128

0801b060 <_kill_r>:
 801b060:	b538      	push	{r3, r4, r5, lr}
 801b062:	4d07      	ldr	r5, [pc, #28]	@ (801b080 <_kill_r+0x20>)
 801b064:	2300      	movs	r3, #0
 801b066:	4604      	mov	r4, r0
 801b068:	4608      	mov	r0, r1
 801b06a:	4611      	mov	r1, r2
 801b06c:	602b      	str	r3, [r5, #0]
 801b06e:	f7e7 ff1f 	bl	8002eb0 <_kill>
 801b072:	1c43      	adds	r3, r0, #1
 801b074:	d102      	bne.n	801b07c <_kill_r+0x1c>
 801b076:	682b      	ldr	r3, [r5, #0]
 801b078:	b103      	cbz	r3, 801b07c <_kill_r+0x1c>
 801b07a:	6023      	str	r3, [r4, #0]
 801b07c:	bd38      	pop	{r3, r4, r5, pc}
 801b07e:	bf00      	nop
 801b080:	24027a94 	.word	0x24027a94

0801b084 <_getpid_r>:
 801b084:	f7e7 bf0c 	b.w	8002ea0 <_getpid>

0801b088 <_malloc_usable_size_r>:
 801b088:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b08c:	1f18      	subs	r0, r3, #4
 801b08e:	2b00      	cmp	r3, #0
 801b090:	bfbc      	itt	lt
 801b092:	580b      	ldrlt	r3, [r1, r0]
 801b094:	18c0      	addlt	r0, r0, r3
 801b096:	4770      	bx	lr

0801b098 <__swhatbuf_r>:
 801b098:	b570      	push	{r4, r5, r6, lr}
 801b09a:	460c      	mov	r4, r1
 801b09c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b0a0:	2900      	cmp	r1, #0
 801b0a2:	b096      	sub	sp, #88	@ 0x58
 801b0a4:	4615      	mov	r5, r2
 801b0a6:	461e      	mov	r6, r3
 801b0a8:	da0d      	bge.n	801b0c6 <__swhatbuf_r+0x2e>
 801b0aa:	89a3      	ldrh	r3, [r4, #12]
 801b0ac:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801b0b0:	f04f 0100 	mov.w	r1, #0
 801b0b4:	bf14      	ite	ne
 801b0b6:	2340      	movne	r3, #64	@ 0x40
 801b0b8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801b0bc:	2000      	movs	r0, #0
 801b0be:	6031      	str	r1, [r6, #0]
 801b0c0:	602b      	str	r3, [r5, #0]
 801b0c2:	b016      	add	sp, #88	@ 0x58
 801b0c4:	bd70      	pop	{r4, r5, r6, pc}
 801b0c6:	466a      	mov	r2, sp
 801b0c8:	f000 f848 	bl	801b15c <_fstat_r>
 801b0cc:	2800      	cmp	r0, #0
 801b0ce:	dbec      	blt.n	801b0aa <__swhatbuf_r+0x12>
 801b0d0:	9901      	ldr	r1, [sp, #4]
 801b0d2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801b0d6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801b0da:	4259      	negs	r1, r3
 801b0dc:	4159      	adcs	r1, r3
 801b0de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801b0e2:	e7eb      	b.n	801b0bc <__swhatbuf_r+0x24>

0801b0e4 <__smakebuf_r>:
 801b0e4:	898b      	ldrh	r3, [r1, #12]
 801b0e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801b0e8:	079d      	lsls	r5, r3, #30
 801b0ea:	4606      	mov	r6, r0
 801b0ec:	460c      	mov	r4, r1
 801b0ee:	d507      	bpl.n	801b100 <__smakebuf_r+0x1c>
 801b0f0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801b0f4:	6023      	str	r3, [r4, #0]
 801b0f6:	6123      	str	r3, [r4, #16]
 801b0f8:	2301      	movs	r3, #1
 801b0fa:	6163      	str	r3, [r4, #20]
 801b0fc:	b003      	add	sp, #12
 801b0fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b100:	ab01      	add	r3, sp, #4
 801b102:	466a      	mov	r2, sp
 801b104:	f7ff ffc8 	bl	801b098 <__swhatbuf_r>
 801b108:	9f00      	ldr	r7, [sp, #0]
 801b10a:	4605      	mov	r5, r0
 801b10c:	4639      	mov	r1, r7
 801b10e:	4630      	mov	r0, r6
 801b110:	f7fd fa78 	bl	8018604 <_malloc_r>
 801b114:	b948      	cbnz	r0, 801b12a <__smakebuf_r+0x46>
 801b116:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b11a:	059a      	lsls	r2, r3, #22
 801b11c:	d4ee      	bmi.n	801b0fc <__smakebuf_r+0x18>
 801b11e:	f023 0303 	bic.w	r3, r3, #3
 801b122:	f043 0302 	orr.w	r3, r3, #2
 801b126:	81a3      	strh	r3, [r4, #12]
 801b128:	e7e2      	b.n	801b0f0 <__smakebuf_r+0xc>
 801b12a:	89a3      	ldrh	r3, [r4, #12]
 801b12c:	6020      	str	r0, [r4, #0]
 801b12e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801b132:	81a3      	strh	r3, [r4, #12]
 801b134:	9b01      	ldr	r3, [sp, #4]
 801b136:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801b13a:	b15b      	cbz	r3, 801b154 <__smakebuf_r+0x70>
 801b13c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b140:	4630      	mov	r0, r6
 801b142:	f000 f81d 	bl	801b180 <_isatty_r>
 801b146:	b128      	cbz	r0, 801b154 <__smakebuf_r+0x70>
 801b148:	89a3      	ldrh	r3, [r4, #12]
 801b14a:	f023 0303 	bic.w	r3, r3, #3
 801b14e:	f043 0301 	orr.w	r3, r3, #1
 801b152:	81a3      	strh	r3, [r4, #12]
 801b154:	89a3      	ldrh	r3, [r4, #12]
 801b156:	431d      	orrs	r5, r3
 801b158:	81a5      	strh	r5, [r4, #12]
 801b15a:	e7cf      	b.n	801b0fc <__smakebuf_r+0x18>

0801b15c <_fstat_r>:
 801b15c:	b538      	push	{r3, r4, r5, lr}
 801b15e:	4d07      	ldr	r5, [pc, #28]	@ (801b17c <_fstat_r+0x20>)
 801b160:	2300      	movs	r3, #0
 801b162:	4604      	mov	r4, r0
 801b164:	4608      	mov	r0, r1
 801b166:	4611      	mov	r1, r2
 801b168:	602b      	str	r3, [r5, #0]
 801b16a:	f7e7 ff01 	bl	8002f70 <_fstat>
 801b16e:	1c43      	adds	r3, r0, #1
 801b170:	d102      	bne.n	801b178 <_fstat_r+0x1c>
 801b172:	682b      	ldr	r3, [r5, #0]
 801b174:	b103      	cbz	r3, 801b178 <_fstat_r+0x1c>
 801b176:	6023      	str	r3, [r4, #0]
 801b178:	bd38      	pop	{r3, r4, r5, pc}
 801b17a:	bf00      	nop
 801b17c:	24027a94 	.word	0x24027a94

0801b180 <_isatty_r>:
 801b180:	b538      	push	{r3, r4, r5, lr}
 801b182:	4d06      	ldr	r5, [pc, #24]	@ (801b19c <_isatty_r+0x1c>)
 801b184:	2300      	movs	r3, #0
 801b186:	4604      	mov	r4, r0
 801b188:	4608      	mov	r0, r1
 801b18a:	602b      	str	r3, [r5, #0]
 801b18c:	f7e7 ff00 	bl	8002f90 <_isatty>
 801b190:	1c43      	adds	r3, r0, #1
 801b192:	d102      	bne.n	801b19a <_isatty_r+0x1a>
 801b194:	682b      	ldr	r3, [r5, #0]
 801b196:	b103      	cbz	r3, 801b19a <_isatty_r+0x1a>
 801b198:	6023      	str	r3, [r4, #0]
 801b19a:	bd38      	pop	{r3, r4, r5, pc}
 801b19c:	24027a94 	.word	0x24027a94

0801b1a0 <_init>:
 801b1a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b1a2:	bf00      	nop
 801b1a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b1a6:	bc08      	pop	{r3}
 801b1a8:	469e      	mov	lr, r3
 801b1aa:	4770      	bx	lr

0801b1ac <_fini>:
 801b1ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b1ae:	bf00      	nop
 801b1b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b1b2:	bc08      	pop	{r3}
 801b1b4:	469e      	mov	lr, r3
 801b1b6:	4770      	bx	lr
