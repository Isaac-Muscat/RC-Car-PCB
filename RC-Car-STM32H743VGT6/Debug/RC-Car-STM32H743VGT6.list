
RC-Car-STM32H743VGT6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012e90  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000021c  08013130  08013130  00014130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801334c  0801334c  0001434c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08013354  08013354  00014354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08013358  08013358  00014358  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000154  24000000  0801335c  00015000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00002104  24000154  080134b0  00015154  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24002258  080134b0  00015258  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00015154  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002820e  00000000  00000000  00015182  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004d4b  00000000  00000000  0003d390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001e30  00000000  00000000  000420e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000177f  00000000  00000000  00043f10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003c41b  00000000  00000000  0004568f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002b918  00000000  00000000  00081aaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016eb3f  00000000  00000000  000ad3c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0021bf01  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00008684  00000000  00000000  0021bf44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000071  00000000  00000000  002245c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000154 	.word	0x24000154
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08013118 	.word	0x08013118

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000158 	.word	0x24000158
 80002dc:	08013118 	.word	0x08013118

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b988 	b.w	80006b8 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	468e      	mov	lr, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	4688      	mov	r8, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d962      	bls.n	800049c <__udivmoddi4+0xdc>
 80003d6:	fab2 f682 	clz	r6, r2
 80003da:	b14e      	cbz	r6, 80003f0 <__udivmoddi4+0x30>
 80003dc:	f1c6 0320 	rsb	r3, r6, #32
 80003e0:	fa01 f806 	lsl.w	r8, r1, r6
 80003e4:	fa20 f303 	lsr.w	r3, r0, r3
 80003e8:	40b7      	lsls	r7, r6
 80003ea:	ea43 0808 	orr.w	r8, r3, r8
 80003ee:	40b4      	lsls	r4, r6
 80003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f4:	fa1f fc87 	uxth.w	ip, r7
 80003f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003fc:	0c23      	lsrs	r3, r4, #16
 80003fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000402:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000406:	fb01 f20c 	mul.w	r2, r1, ip
 800040a:	429a      	cmp	r2, r3
 800040c:	d909      	bls.n	8000422 <__udivmoddi4+0x62>
 800040e:	18fb      	adds	r3, r7, r3
 8000410:	f101 30ff 	add.w	r0, r1, #4294967295
 8000414:	f080 80ea 	bcs.w	80005ec <__udivmoddi4+0x22c>
 8000418:	429a      	cmp	r2, r3
 800041a:	f240 80e7 	bls.w	80005ec <__udivmoddi4+0x22c>
 800041e:	3902      	subs	r1, #2
 8000420:	443b      	add	r3, r7
 8000422:	1a9a      	subs	r2, r3, r2
 8000424:	b2a3      	uxth	r3, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000432:	fb00 fc0c 	mul.w	ip, r0, ip
 8000436:	459c      	cmp	ip, r3
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x8e>
 800043a:	18fb      	adds	r3, r7, r3
 800043c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000440:	f080 80d6 	bcs.w	80005f0 <__udivmoddi4+0x230>
 8000444:	459c      	cmp	ip, r3
 8000446:	f240 80d3 	bls.w	80005f0 <__udivmoddi4+0x230>
 800044a:	443b      	add	r3, r7
 800044c:	3802      	subs	r0, #2
 800044e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000452:	eba3 030c 	sub.w	r3, r3, ip
 8000456:	2100      	movs	r1, #0
 8000458:	b11d      	cbz	r5, 8000462 <__udivmoddi4+0xa2>
 800045a:	40f3      	lsrs	r3, r6
 800045c:	2200      	movs	r2, #0
 800045e:	e9c5 3200 	strd	r3, r2, [r5]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d905      	bls.n	8000476 <__udivmoddi4+0xb6>
 800046a:	b10d      	cbz	r5, 8000470 <__udivmoddi4+0xb0>
 800046c:	e9c5 0100 	strd	r0, r1, [r5]
 8000470:	2100      	movs	r1, #0
 8000472:	4608      	mov	r0, r1
 8000474:	e7f5      	b.n	8000462 <__udivmoddi4+0xa2>
 8000476:	fab3 f183 	clz	r1, r3
 800047a:	2900      	cmp	r1, #0
 800047c:	d146      	bne.n	800050c <__udivmoddi4+0x14c>
 800047e:	4573      	cmp	r3, lr
 8000480:	d302      	bcc.n	8000488 <__udivmoddi4+0xc8>
 8000482:	4282      	cmp	r2, r0
 8000484:	f200 8105 	bhi.w	8000692 <__udivmoddi4+0x2d2>
 8000488:	1a84      	subs	r4, r0, r2
 800048a:	eb6e 0203 	sbc.w	r2, lr, r3
 800048e:	2001      	movs	r0, #1
 8000490:	4690      	mov	r8, r2
 8000492:	2d00      	cmp	r5, #0
 8000494:	d0e5      	beq.n	8000462 <__udivmoddi4+0xa2>
 8000496:	e9c5 4800 	strd	r4, r8, [r5]
 800049a:	e7e2      	b.n	8000462 <__udivmoddi4+0xa2>
 800049c:	2a00      	cmp	r2, #0
 800049e:	f000 8090 	beq.w	80005c2 <__udivmoddi4+0x202>
 80004a2:	fab2 f682 	clz	r6, r2
 80004a6:	2e00      	cmp	r6, #0
 80004a8:	f040 80a4 	bne.w	80005f4 <__udivmoddi4+0x234>
 80004ac:	1a8a      	subs	r2, r1, r2
 80004ae:	0c03      	lsrs	r3, r0, #16
 80004b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b4:	b280      	uxth	r0, r0
 80004b6:	b2bc      	uxth	r4, r7
 80004b8:	2101      	movs	r1, #1
 80004ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80004be:	fb0e 221c 	mls	r2, lr, ip, r2
 80004c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004c6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ca:	429a      	cmp	r2, r3
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x11e>
 80004ce:	18fb      	adds	r3, r7, r3
 80004d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004d4:	d202      	bcs.n	80004dc <__udivmoddi4+0x11c>
 80004d6:	429a      	cmp	r2, r3
 80004d8:	f200 80e0 	bhi.w	800069c <__udivmoddi4+0x2dc>
 80004dc:	46c4      	mov	ip, r8
 80004de:	1a9b      	subs	r3, r3, r2
 80004e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004ec:	fb02 f404 	mul.w	r4, r2, r4
 80004f0:	429c      	cmp	r4, r3
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x144>
 80004f4:	18fb      	adds	r3, r7, r3
 80004f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x142>
 80004fc:	429c      	cmp	r4, r3
 80004fe:	f200 80ca 	bhi.w	8000696 <__udivmoddi4+0x2d6>
 8000502:	4602      	mov	r2, r0
 8000504:	1b1b      	subs	r3, r3, r4
 8000506:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800050a:	e7a5      	b.n	8000458 <__udivmoddi4+0x98>
 800050c:	f1c1 0620 	rsb	r6, r1, #32
 8000510:	408b      	lsls	r3, r1
 8000512:	fa22 f706 	lsr.w	r7, r2, r6
 8000516:	431f      	orrs	r7, r3
 8000518:	fa0e f401 	lsl.w	r4, lr, r1
 800051c:	fa20 f306 	lsr.w	r3, r0, r6
 8000520:	fa2e fe06 	lsr.w	lr, lr, r6
 8000524:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000528:	4323      	orrs	r3, r4
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	fa1f fc87 	uxth.w	ip, r7
 8000532:	fbbe f0f9 	udiv	r0, lr, r9
 8000536:	0c1c      	lsrs	r4, r3, #16
 8000538:	fb09 ee10 	mls	lr, r9, r0, lr
 800053c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000540:	fb00 fe0c 	mul.w	lr, r0, ip
 8000544:	45a6      	cmp	lr, r4
 8000546:	fa02 f201 	lsl.w	r2, r2, r1
 800054a:	d909      	bls.n	8000560 <__udivmoddi4+0x1a0>
 800054c:	193c      	adds	r4, r7, r4
 800054e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000552:	f080 809c 	bcs.w	800068e <__udivmoddi4+0x2ce>
 8000556:	45a6      	cmp	lr, r4
 8000558:	f240 8099 	bls.w	800068e <__udivmoddi4+0x2ce>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	eba4 040e 	sub.w	r4, r4, lr
 8000564:	fa1f fe83 	uxth.w	lr, r3
 8000568:	fbb4 f3f9 	udiv	r3, r4, r9
 800056c:	fb09 4413 	mls	r4, r9, r3, r4
 8000570:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000574:	fb03 fc0c 	mul.w	ip, r3, ip
 8000578:	45a4      	cmp	ip, r4
 800057a:	d908      	bls.n	800058e <__udivmoddi4+0x1ce>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000582:	f080 8082 	bcs.w	800068a <__udivmoddi4+0x2ca>
 8000586:	45a4      	cmp	ip, r4
 8000588:	d97f      	bls.n	800068a <__udivmoddi4+0x2ca>
 800058a:	3b02      	subs	r3, #2
 800058c:	443c      	add	r4, r7
 800058e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000592:	eba4 040c 	sub.w	r4, r4, ip
 8000596:	fba0 ec02 	umull	lr, ip, r0, r2
 800059a:	4564      	cmp	r4, ip
 800059c:	4673      	mov	r3, lr
 800059e:	46e1      	mov	r9, ip
 80005a0:	d362      	bcc.n	8000668 <__udivmoddi4+0x2a8>
 80005a2:	d05f      	beq.n	8000664 <__udivmoddi4+0x2a4>
 80005a4:	b15d      	cbz	r5, 80005be <__udivmoddi4+0x1fe>
 80005a6:	ebb8 0203 	subs.w	r2, r8, r3
 80005aa:	eb64 0409 	sbc.w	r4, r4, r9
 80005ae:	fa04 f606 	lsl.w	r6, r4, r6
 80005b2:	fa22 f301 	lsr.w	r3, r2, r1
 80005b6:	431e      	orrs	r6, r3
 80005b8:	40cc      	lsrs	r4, r1
 80005ba:	e9c5 6400 	strd	r6, r4, [r5]
 80005be:	2100      	movs	r1, #0
 80005c0:	e74f      	b.n	8000462 <__udivmoddi4+0xa2>
 80005c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005c6:	0c01      	lsrs	r1, r0, #16
 80005c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005cc:	b280      	uxth	r0, r0
 80005ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005d2:	463b      	mov	r3, r7
 80005d4:	4638      	mov	r0, r7
 80005d6:	463c      	mov	r4, r7
 80005d8:	46b8      	mov	r8, r7
 80005da:	46be      	mov	lr, r7
 80005dc:	2620      	movs	r6, #32
 80005de:	fbb1 f1f7 	udiv	r1, r1, r7
 80005e2:	eba2 0208 	sub.w	r2, r2, r8
 80005e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005ea:	e766      	b.n	80004ba <__udivmoddi4+0xfa>
 80005ec:	4601      	mov	r1, r0
 80005ee:	e718      	b.n	8000422 <__udivmoddi4+0x62>
 80005f0:	4610      	mov	r0, r2
 80005f2:	e72c      	b.n	800044e <__udivmoddi4+0x8e>
 80005f4:	f1c6 0220 	rsb	r2, r6, #32
 80005f8:	fa2e f302 	lsr.w	r3, lr, r2
 80005fc:	40b7      	lsls	r7, r6
 80005fe:	40b1      	lsls	r1, r6
 8000600:	fa20 f202 	lsr.w	r2, r0, r2
 8000604:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000608:	430a      	orrs	r2, r1
 800060a:	fbb3 f8fe 	udiv	r8, r3, lr
 800060e:	b2bc      	uxth	r4, r7
 8000610:	fb0e 3318 	mls	r3, lr, r8, r3
 8000614:	0c11      	lsrs	r1, r2, #16
 8000616:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800061a:	fb08 f904 	mul.w	r9, r8, r4
 800061e:	40b0      	lsls	r0, r6
 8000620:	4589      	cmp	r9, r1
 8000622:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000626:	b280      	uxth	r0, r0
 8000628:	d93e      	bls.n	80006a8 <__udivmoddi4+0x2e8>
 800062a:	1879      	adds	r1, r7, r1
 800062c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000630:	d201      	bcs.n	8000636 <__udivmoddi4+0x276>
 8000632:	4589      	cmp	r9, r1
 8000634:	d81f      	bhi.n	8000676 <__udivmoddi4+0x2b6>
 8000636:	eba1 0109 	sub.w	r1, r1, r9
 800063a:	fbb1 f9fe 	udiv	r9, r1, lr
 800063e:	fb09 f804 	mul.w	r8, r9, r4
 8000642:	fb0e 1119 	mls	r1, lr, r9, r1
 8000646:	b292      	uxth	r2, r2
 8000648:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800064c:	4542      	cmp	r2, r8
 800064e:	d229      	bcs.n	80006a4 <__udivmoddi4+0x2e4>
 8000650:	18ba      	adds	r2, r7, r2
 8000652:	f109 31ff 	add.w	r1, r9, #4294967295
 8000656:	d2c4      	bcs.n	80005e2 <__udivmoddi4+0x222>
 8000658:	4542      	cmp	r2, r8
 800065a:	d2c2      	bcs.n	80005e2 <__udivmoddi4+0x222>
 800065c:	f1a9 0102 	sub.w	r1, r9, #2
 8000660:	443a      	add	r2, r7
 8000662:	e7be      	b.n	80005e2 <__udivmoddi4+0x222>
 8000664:	45f0      	cmp	r8, lr
 8000666:	d29d      	bcs.n	80005a4 <__udivmoddi4+0x1e4>
 8000668:	ebbe 0302 	subs.w	r3, lr, r2
 800066c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000670:	3801      	subs	r0, #1
 8000672:	46e1      	mov	r9, ip
 8000674:	e796      	b.n	80005a4 <__udivmoddi4+0x1e4>
 8000676:	eba7 0909 	sub.w	r9, r7, r9
 800067a:	4449      	add	r1, r9
 800067c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000680:	fbb1 f9fe 	udiv	r9, r1, lr
 8000684:	fb09 f804 	mul.w	r8, r9, r4
 8000688:	e7db      	b.n	8000642 <__udivmoddi4+0x282>
 800068a:	4673      	mov	r3, lr
 800068c:	e77f      	b.n	800058e <__udivmoddi4+0x1ce>
 800068e:	4650      	mov	r0, sl
 8000690:	e766      	b.n	8000560 <__udivmoddi4+0x1a0>
 8000692:	4608      	mov	r0, r1
 8000694:	e6fd      	b.n	8000492 <__udivmoddi4+0xd2>
 8000696:	443b      	add	r3, r7
 8000698:	3a02      	subs	r2, #2
 800069a:	e733      	b.n	8000504 <__udivmoddi4+0x144>
 800069c:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a0:	443b      	add	r3, r7
 80006a2:	e71c      	b.n	80004de <__udivmoddi4+0x11e>
 80006a4:	4649      	mov	r1, r9
 80006a6:	e79c      	b.n	80005e2 <__udivmoddi4+0x222>
 80006a8:	eba1 0109 	sub.w	r1, r1, r9
 80006ac:	46c4      	mov	ip, r8
 80006ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b2:	fb09 f804 	mul.w	r8, r9, r4
 80006b6:	e7c4      	b.n	8000642 <__udivmoddi4+0x282>

080006b8 <__aeabi_idiv0>:
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop

080006bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	f5ad 3d16 	sub.w	sp, sp, #153600	@ 0x25800
 80006c2:	b09e      	sub	sp, #120	@ 0x78
 80006c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80006c6:	f000 ff63 	bl	8001590 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ca:	f001 fd33 	bl	8002134 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ce:	f000 f9bf 	bl	8000a50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006d2:	f000 fd85 	bl	80011e0 <MX_GPIO_Init>
  MX_DMA_Init();
 80006d6:	f000 fd63 	bl	80011a0 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80006da:	f000 fd15 	bl	8001108 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 80006de:	f011 fb35 	bl	8011d4c <MX_USB_DEVICE_Init>
  MX_DCMI_Init();
 80006e2:	f000 fa31 	bl	8000b48 <MX_DCMI_Init>
  MX_I2C2_Init();
 80006e6:	f000 fa63 	bl	8000bb0 <MX_I2C2_Init>
  MX_TIM14_Init();
 80006ea:	f000 fcc1 	bl	8001070 <MX_TIM14_Init>
  MX_TIM2_Init();
 80006ee:	f000 fb83 	bl	8000df8 <MX_TIM2_Init>
  MX_TIM4_Init();
 80006f2:	f000 fc57 	bl	8000fa4 <MX_TIM4_Init>
  MX_TIM1_Init();
 80006f6:	f000 faf1 	bl	8000cdc <MX_TIM1_Init>
  MX_TIM3_Init();
 80006fa:	f000 fbed 	bl	8000ed8 <MX_TIM3_Init>
  MX_SPI2_Init();
 80006fe:	f000 fa97 	bl	8000c30 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */


  // SETUP CAMERA STREAM
  HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);
 8000702:	2100      	movs	r1, #0
 8000704:	48bf      	ldr	r0, [pc, #764]	@ (8000a04 <main+0x348>)
 8000706:	f00b fecf 	bl	800c4a8 <HAL_TIM_PWM_Start>
  uint8_t camera_mem[CAM_WIDTH * CAM_HEIGHT * CAM_BYTES_PER_PIXEL];
  uint8_t usb_msg[100] = {0};
 800070a:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 800070e:	f5a3 6307 	sub.w	r3, r3, #2160	@ 0x870
 8000712:	4618      	mov	r0, r3
 8000714:	2364      	movs	r3, #100	@ 0x64
 8000716:	461a      	mov	r2, r3
 8000718:	2100      	movs	r1, #0
 800071a:	f012 f87f 	bl	801281c <memset>
  //        COM7  [2] = 1 (RGB Selection 2)
  //        COM7  [4] = 1 (QVGA Resolution)
  // (0x15) COM10 [6] = 1 (Switch HREF to HSYNC)
  uint8_t cam_regCache;

  cam_regCache = 0x00;
 800071e:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 8000722:	f6a3 0371 	subw	r3, r3, #2161	@ 0x871
 8000726:	2200      	movs	r2, #0
 8000728:	701a      	strb	r2, [r3, #0]
  CAM_GetRegister(0x0C, &cam_regCache, 1);
 800072a:	4bb7      	ldr	r3, [pc, #732]	@ (8000a08 <main+0x34c>)
 800072c:	f503 3316 	add.w	r3, r3, #153600	@ 0x25800
 8000730:	f103 0378 	add.w	r3, r3, #120	@ 0x78
 8000734:	443b      	add	r3, r7
 8000736:	2201      	movs	r2, #1
 8000738:	4619      	mov	r1, r3
 800073a:	200c      	movs	r0, #12
 800073c:	f000 fe08 	bl	8001350 <CAM_GetRegister>
  cam_regCache |= 0b00001000;
 8000740:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 8000744:	f6a3 0371 	subw	r3, r3, #2161	@ 0x871
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	f043 0308 	orr.w	r3, r3, #8
 800074e:	b2da      	uxtb	r2, r3
 8000750:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 8000754:	f6a3 0371 	subw	r3, r3, #2161	@ 0x871
 8000758:	701a      	strb	r2, [r3, #0]
  CAM_SetRegister(0x0C, cam_regCache, 1);
 800075a:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 800075e:	f6a3 0371 	subw	r3, r3, #2161	@ 0x871
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	2201      	movs	r2, #1
 8000766:	4619      	mov	r1, r3
 8000768:	200c      	movs	r0, #12
 800076a:	f000 fe6b 	bl	8001444 <CAM_SetRegister>

  cam_regCache = 0x00;
 800076e:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 8000772:	f6a3 0371 	subw	r3, r3, #2161	@ 0x871
 8000776:	2200      	movs	r2, #0
 8000778:	701a      	strb	r2, [r3, #0]
  CAM_GetRegister(0x12, &cam_regCache, 1);
 800077a:	4ba3      	ldr	r3, [pc, #652]	@ (8000a08 <main+0x34c>)
 800077c:	f503 3316 	add.w	r3, r3, #153600	@ 0x25800
 8000780:	f103 0378 	add.w	r3, r3, #120	@ 0x78
 8000784:	443b      	add	r3, r7
 8000786:	2201      	movs	r2, #1
 8000788:	4619      	mov	r1, r3
 800078a:	2012      	movs	r0, #18
 800078c:	f000 fde0 	bl	8001350 <CAM_GetRegister>
  cam_regCache &= 0b11000000;
 8000790:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 8000794:	f6a3 0371 	subw	r3, r3, #2161	@ 0x871
 8000798:	781b      	ldrb	r3, [r3, #0]
 800079a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800079e:	b2da      	uxtb	r2, r3
 80007a0:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 80007a4:	f6a3 0371 	subw	r3, r3, #2161	@ 0x871
 80007a8:	701a      	strb	r2, [r3, #0]
  cam_regCache |= 0b00010100;
 80007aa:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 80007ae:	f6a3 0371 	subw	r3, r3, #2161	@ 0x871
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	f043 0314 	orr.w	r3, r3, #20
 80007b8:	b2da      	uxtb	r2, r3
 80007ba:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 80007be:	f6a3 0371 	subw	r3, r3, #2161	@ 0x871
 80007c2:	701a      	strb	r2, [r3, #0]
  CAM_SetRegister(0x12, cam_regCache, 1);
 80007c4:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 80007c8:	f6a3 0371 	subw	r3, r3, #2161	@ 0x871
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	2201      	movs	r2, #1
 80007d0:	4619      	mov	r1, r3
 80007d2:	2012      	movs	r0, #18
 80007d4:	f000 fe36 	bl	8001444 <CAM_SetRegister>

  cam_regCache = 0x00;
 80007d8:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 80007dc:	f6a3 0371 	subw	r3, r3, #2161	@ 0x871
 80007e0:	2200      	movs	r2, #0
 80007e2:	701a      	strb	r2, [r3, #0]
  CAM_GetRegister(0x15, &cam_regCache, 1);
 80007e4:	4b88      	ldr	r3, [pc, #544]	@ (8000a08 <main+0x34c>)
 80007e6:	f503 3316 	add.w	r3, r3, #153600	@ 0x25800
 80007ea:	f103 0378 	add.w	r3, r3, #120	@ 0x78
 80007ee:	443b      	add	r3, r7
 80007f0:	2201      	movs	r2, #1
 80007f2:	4619      	mov	r1, r3
 80007f4:	2015      	movs	r0, #21
 80007f6:	f000 fdab 	bl	8001350 <CAM_GetRegister>
  cam_regCache |= 0b01000000;
 80007fa:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 80007fe:	f6a3 0371 	subw	r3, r3, #2161	@ 0x871
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000808:	b2da      	uxtb	r2, r3
 800080a:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 800080e:	f6a3 0371 	subw	r3, r3, #2161	@ 0x871
 8000812:	701a      	strb	r2, [r3, #0]
  CAM_SetRegister(0x15, cam_regCache, 1);
 8000814:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 8000818:	f6a3 0371 	subw	r3, r3, #2161	@ 0x871
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	2201      	movs	r2, #1
 8000820:	4619      	mov	r1, r3
 8000822:	2015      	movs	r0, #21
 8000824:	f000 fe0e 	bl	8001444 <CAM_SetRegister>

  // Setup Motor
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET); //Motor_en
 8000828:	2200      	movs	r2, #0
 800082a:	2108      	movs	r1, #8
 800082c:	4877      	ldr	r0, [pc, #476]	@ (8000a0c <main+0x350>)
 800082e:	f005 fe6b 	bl	8006508 <HAL_GPIO_WritePin>
  TIM2->CCR1 = 400;
 8000832:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000836:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800083a:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2->CCR2 = 400;
 800083c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000840:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8000844:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM4->CCR3 = 400;
 8000846:	4b72      	ldr	r3, [pc, #456]	@ (8000a10 <main+0x354>)
 8000848:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800084c:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM4->CCR4 = 400;
 800084e:	4b70      	ldr	r3, [pc, #448]	@ (8000a10 <main+0x354>)
 8000850:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8000854:	641a      	str	r2, [r3, #64]	@ 0x40
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); // LEFT_PWM_1
 8000856:	2100      	movs	r1, #0
 8000858:	486e      	ldr	r0, [pc, #440]	@ (8000a14 <main+0x358>)
 800085a:	f00b fe25 	bl	800c4a8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2); // RIGHT_PWM_1
 800085e:	2104      	movs	r1, #4
 8000860:	486c      	ldr	r0, [pc, #432]	@ (8000a14 <main+0x358>)
 8000862:	f00b fe21 	bl	800c4a8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3); // RIGHT_PWM_2
 8000866:	2108      	movs	r1, #8
 8000868:	486b      	ldr	r0, [pc, #428]	@ (8000a18 <main+0x35c>)
 800086a:	f00b fe1d 	bl	800c4a8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4); // LEFT_PWM_2
 800086e:	210c      	movs	r1, #12
 8000870:	4869      	ldr	r0, [pc, #420]	@ (8000a18 <main+0x35c>)
 8000872:	f00b fe19 	bl	800c4a8 <HAL_TIM_PWM_Start>

  // Setup lights
  TIM1->CCR4 = 1000;
 8000876:	4b69      	ldr	r3, [pc, #420]	@ (8000a1c <main+0x360>)
 8000878:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800087c:	641a      	str	r2, [r3, #64]	@ 0x40
  TIM3->CCR4 = 1000;
 800087e:	4b68      	ldr	r3, [pc, #416]	@ (8000a20 <main+0x364>)
 8000880:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000884:	641a      	str	r2, [r3, #64]	@ 0x40
  TIM3->CCR3 = 1000;
 8000886:	4b66      	ldr	r3, [pc, #408]	@ (8000a20 <main+0x364>)
 8000888:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800088c:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2->CCR4 = 1000;
 800088e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000892:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000896:	641a      	str	r2, [r3, #64]	@ 0x40
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4); // LIGHTS_PWM_1
 8000898:	210c      	movs	r1, #12
 800089a:	4862      	ldr	r0, [pc, #392]	@ (8000a24 <main+0x368>)
 800089c:	f00b fe04 	bl	800c4a8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4); // LIGHTS_PWM_2
 80008a0:	210c      	movs	r1, #12
 80008a2:	4861      	ldr	r0, [pc, #388]	@ (8000a28 <main+0x36c>)
 80008a4:	f00b fe00 	bl	800c4a8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3); // LIGHTS_PWM_3
 80008a8:	2108      	movs	r1, #8
 80008aa:	485f      	ldr	r0, [pc, #380]	@ (8000a28 <main+0x36c>)
 80008ac:	f00b fdfc 	bl	800c4a8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3); // LIGHTS_PWM_4
 80008b0:	2108      	movs	r1, #8
 80008b2:	4858      	ldr	r0, [pc, #352]	@ (8000a14 <main+0x358>)
 80008b4:	f00b fdf8 	bl	800c4a8 <HAL_TIM_PWM_Start>
	  // I2C CMD example
	  // HAL_StatusTypeDef tx_result = HAL_I2C_Master_Transmit(&hi2c2, OV7670_ADDR_READ, &ov7670_CMD_PID, 1, 100);
	  // HAL_StatusTypeDef rx_result = HAL_I2C_Master_Receive(&hi2c2, OV7670_ADDR_READ, i2c_readback, 1, 100);

	  // TESTING
	  HAL_StatusTypeDef ovStat = HAL_DCMI_Start_DMA(&hdcmi, DCMI_MODE_SNAPSHOT, camera_mem, (CAM_WIDTH * CAM_HEIGHT * CAM_BYTES_PER_PIXEL) / 4);
 80008b8:	4a5c      	ldr	r2, [pc, #368]	@ (8000a2c <main+0x370>)
 80008ba:	4b5d      	ldr	r3, [pc, #372]	@ (8000a30 <main+0x374>)
 80008bc:	4413      	add	r3, r2
 80008be:	19da      	adds	r2, r3, r7
 80008c0:	f44f 4316 	mov.w	r3, #38400	@ 0x9600
 80008c4:	2102      	movs	r1, #2
 80008c6:	485b      	ldr	r0, [pc, #364]	@ (8000a34 <main+0x378>)
 80008c8:	f001 fef8 	bl	80026bc <HAL_DCMI_Start_DMA>
 80008cc:	4603      	mov	r3, r0
 80008ce:	4a5a      	ldr	r2, [pc, #360]	@ (8000a38 <main+0x37c>)
 80008d0:	443a      	add	r2, r7
 80008d2:	7013      	strb	r3, [r2, #0]
	  if (ovStat) {
 80008d4:	4b58      	ldr	r3, [pc, #352]	@ (8000a38 <main+0x37c>)
 80008d6:	443b      	add	r3, r7
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d020      	beq.n	8000920 <main+0x264>
		  // ERROR
		  sprintf(usb_msg, "DCMI/DMA ERROR - Code 0x%X\r\n", ovStat);
 80008de:	4b56      	ldr	r3, [pc, #344]	@ (8000a38 <main+0x37c>)
 80008e0:	443b      	add	r3, r7
 80008e2:	781a      	ldrb	r2, [r3, #0]
 80008e4:	4b55      	ldr	r3, [pc, #340]	@ (8000a3c <main+0x380>)
 80008e6:	f503 3316 	add.w	r3, r3, #153600	@ 0x25800
 80008ea:	f103 0378 	add.w	r3, r3, #120	@ 0x78
 80008ee:	443b      	add	r3, r7
 80008f0:	4953      	ldr	r1, [pc, #332]	@ (8000a40 <main+0x384>)
 80008f2:	4618      	mov	r0, r3
 80008f4:	f011 ff70 	bl	80127d8 <siprintf>
		  CDC_Transmit_FS(usb_msg, strlen(usb_msg));
 80008f8:	4b50      	ldr	r3, [pc, #320]	@ (8000a3c <main+0x380>)
 80008fa:	f503 3316 	add.w	r3, r3, #153600	@ 0x25800
 80008fe:	f103 0378 	add.w	r3, r3, #120	@ 0x78
 8000902:	443b      	add	r3, r7
 8000904:	4618      	mov	r0, r3
 8000906:	f7ff fceb 	bl	80002e0 <strlen>
 800090a:	4602      	mov	r2, r0
 800090c:	4b4b      	ldr	r3, [pc, #300]	@ (8000a3c <main+0x380>)
 800090e:	f503 3316 	add.w	r3, r3, #153600	@ 0x25800
 8000912:	f103 0378 	add.w	r3, r3, #120	@ 0x78
 8000916:	443b      	add	r3, r7
 8000918:	4611      	mov	r1, r2
 800091a:	4618      	mov	r0, r3
 800091c:	f011 fadc 	bl	8011ed8 <CDC_Transmit_FS>
	  }
	  HAL_Delay(2000);
 8000920:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000924:	f001 fc98 	bl	8002258 <HAL_Delay>

	  // Get the first byte of the DMA field
	  for (int i = 0; i < 32; i++) {
 8000928:	2300      	movs	r3, #0
 800092a:	4a46      	ldr	r2, [pc, #280]	@ (8000a44 <main+0x388>)
 800092c:	443a      	add	r2, r7
 800092e:	6013      	str	r3, [r2, #0]
 8000930:	e05a      	b.n	80009e8 <main+0x32c>
		  uint32_t pixbuf_0 = (camera_mem[i*4]<<24) | (camera_mem[i*4+1]<<16) | (camera_mem[i*4+2]<<8) | (camera_mem[i*4+3]);
 8000932:	4b44      	ldr	r3, [pc, #272]	@ (8000a44 <main+0x388>)
 8000934:	443b      	add	r3, r7
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	009b      	lsls	r3, r3, #2
 800093a:	f607 0278 	addw	r2, r7, #2168	@ 0x878
 800093e:	f6a2 020c 	subw	r2, r2, #2060	@ 0x80c
 8000942:	5cd3      	ldrb	r3, [r2, r3]
 8000944:	061a      	lsls	r2, r3, #24
 8000946:	4b3f      	ldr	r3, [pc, #252]	@ (8000a44 <main+0x388>)
 8000948:	443b      	add	r3, r7
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	009b      	lsls	r3, r3, #2
 800094e:	3301      	adds	r3, #1
 8000950:	f607 0178 	addw	r1, r7, #2168	@ 0x878
 8000954:	f6a1 010c 	subw	r1, r1, #2060	@ 0x80c
 8000958:	5ccb      	ldrb	r3, [r1, r3]
 800095a:	041b      	lsls	r3, r3, #16
 800095c:	431a      	orrs	r2, r3
 800095e:	4b39      	ldr	r3, [pc, #228]	@ (8000a44 <main+0x388>)
 8000960:	443b      	add	r3, r7
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	009b      	lsls	r3, r3, #2
 8000966:	3302      	adds	r3, #2
 8000968:	f607 0178 	addw	r1, r7, #2168	@ 0x878
 800096c:	f6a1 010c 	subw	r1, r1, #2060	@ 0x80c
 8000970:	5ccb      	ldrb	r3, [r1, r3]
 8000972:	021b      	lsls	r3, r3, #8
 8000974:	4313      	orrs	r3, r2
 8000976:	4a33      	ldr	r2, [pc, #204]	@ (8000a44 <main+0x388>)
 8000978:	443a      	add	r2, r7
 800097a:	6812      	ldr	r2, [r2, #0]
 800097c:	0092      	lsls	r2, r2, #2
 800097e:	3203      	adds	r2, #3
 8000980:	f607 0178 	addw	r1, r7, #2168	@ 0x878
 8000984:	f6a1 010c 	subw	r1, r1, #2060	@ 0x80c
 8000988:	5c8a      	ldrb	r2, [r1, r2]
 800098a:	4313      	orrs	r3, r2
 800098c:	4a2e      	ldr	r2, [pc, #184]	@ (8000a48 <main+0x38c>)
 800098e:	443a      	add	r2, r7
 8000990:	6013      	str	r3, [r2, #0]
		  sprintf(usb_msg, "%d - 0x%X\r\n", i, pixbuf_0);
 8000992:	482a      	ldr	r0, [pc, #168]	@ (8000a3c <main+0x380>)
 8000994:	4b26      	ldr	r3, [pc, #152]	@ (8000a30 <main+0x374>)
 8000996:	4403      	add	r3, r0
 8000998:	19d8      	adds	r0, r3, r7
 800099a:	4b2b      	ldr	r3, [pc, #172]	@ (8000a48 <main+0x38c>)
 800099c:	443b      	add	r3, r7
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a28      	ldr	r2, [pc, #160]	@ (8000a44 <main+0x388>)
 80009a2:	443a      	add	r2, r7
 80009a4:	6812      	ldr	r2, [r2, #0]
 80009a6:	4929      	ldr	r1, [pc, #164]	@ (8000a4c <main+0x390>)
 80009a8:	f011 ff16 	bl	80127d8 <siprintf>
		  CDC_Transmit_FS(usb_msg, strlen(usb_msg));
 80009ac:	4b23      	ldr	r3, [pc, #140]	@ (8000a3c <main+0x380>)
 80009ae:	f503 3316 	add.w	r3, r3, #153600	@ 0x25800
 80009b2:	f103 0378 	add.w	r3, r3, #120	@ 0x78
 80009b6:	443b      	add	r3, r7
 80009b8:	4618      	mov	r0, r3
 80009ba:	f7ff fc91 	bl	80002e0 <strlen>
 80009be:	4602      	mov	r2, r0
 80009c0:	4b1e      	ldr	r3, [pc, #120]	@ (8000a3c <main+0x380>)
 80009c2:	f503 3316 	add.w	r3, r3, #153600	@ 0x25800
 80009c6:	f103 0378 	add.w	r3, r3, #120	@ 0x78
 80009ca:	443b      	add	r3, r7
 80009cc:	4611      	mov	r1, r2
 80009ce:	4618      	mov	r0, r3
 80009d0:	f011 fa82 	bl	8011ed8 <CDC_Transmit_FS>
		  HAL_Delay(5);
 80009d4:	2005      	movs	r0, #5
 80009d6:	f001 fc3f 	bl	8002258 <HAL_Delay>
	  for (int i = 0; i < 32; i++) {
 80009da:	4b1a      	ldr	r3, [pc, #104]	@ (8000a44 <main+0x388>)
 80009dc:	443b      	add	r3, r7
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	3301      	adds	r3, #1
 80009e2:	4a18      	ldr	r2, [pc, #96]	@ (8000a44 <main+0x388>)
 80009e4:	443a      	add	r2, r7
 80009e6:	6013      	str	r3, [r2, #0]
 80009e8:	4b16      	ldr	r3, [pc, #88]	@ (8000a44 <main+0x388>)
 80009ea:	443b      	add	r3, r7
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	2b1f      	cmp	r3, #31
 80009f0:	dd9f      	ble.n	8000932 <main+0x276>
	  }
	  HAL_Delay(500);
 80009f2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80009f6:	f001 fc2f 	bl	8002258 <HAL_Delay>

	  HAL_DCMI_Stop(&hdcmi);
 80009fa:	480e      	ldr	r0, [pc, #56]	@ (8000a34 <main+0x378>)
 80009fc:	f001 ff20 	bl	8002840 <HAL_DCMI_Stop>
  {
 8000a00:	e75a      	b.n	80008b8 <main+0x1fc>
 8000a02:	bf00      	nop
 8000a04:	24000444 	.word	0x24000444
 8000a08:	fffda78f 	.word	0xfffda78f
 8000a0c:	58020000 	.word	0x58020000
 8000a10:	40000800 	.word	0x40000800
 8000a14:	24000360 	.word	0x24000360
 8000a18:	240003f8 	.word	0x240003f8
 8000a1c:	40010000 	.word	0x40010000
 8000a20:	40000400 	.word	0x40000400
 8000a24:	24000314 	.word	0x24000314
 8000a28:	240003ac 	.word	0x240003ac
 8000a2c:	fffda7f4 	.word	0xfffda7f4
 8000a30:	00025878 	.word	0x00025878
 8000a34:	24000170 	.word	0x24000170
 8000a38:	00025873 	.word	0x00025873
 8000a3c:	fffda790 	.word	0xfffda790
 8000a40:	08013130 	.word	0x08013130
 8000a44:	00025874 	.word	0x00025874
 8000a48:	0002586c 	.word	0x0002586c
 8000a4c:	08013150 	.word	0x08013150

08000a50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b09c      	sub	sp, #112	@ 0x70
 8000a54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a56:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a5a:	224c      	movs	r2, #76	@ 0x4c
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f011 fedc 	bl	801281c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a64:	1d3b      	adds	r3, r7, #4
 8000a66:	2220      	movs	r2, #32
 8000a68:	2100      	movs	r1, #0
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f011 fed6 	bl	801281c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000a70:	2002      	movs	r0, #2
 8000a72:	f008 fccf 	bl	8009414 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a76:	2300      	movs	r3, #0
 8000a78:	603b      	str	r3, [r7, #0]
 8000a7a:	4b31      	ldr	r3, [pc, #196]	@ (8000b40 <SystemClock_Config+0xf0>)
 8000a7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a7e:	4a30      	ldr	r2, [pc, #192]	@ (8000b40 <SystemClock_Config+0xf0>)
 8000a80:	f023 0301 	bic.w	r3, r3, #1
 8000a84:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000a86:	4b2e      	ldr	r3, [pc, #184]	@ (8000b40 <SystemClock_Config+0xf0>)
 8000a88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a8a:	f003 0301 	and.w	r3, r3, #1
 8000a8e:	603b      	str	r3, [r7, #0]
 8000a90:	4b2c      	ldr	r3, [pc, #176]	@ (8000b44 <SystemClock_Config+0xf4>)
 8000a92:	699b      	ldr	r3, [r3, #24]
 8000a94:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000a98:	4a2a      	ldr	r2, [pc, #168]	@ (8000b44 <SystemClock_Config+0xf4>)
 8000a9a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a9e:	6193      	str	r3, [r2, #24]
 8000aa0:	4b28      	ldr	r3, [pc, #160]	@ (8000b44 <SystemClock_Config+0xf4>)
 8000aa2:	699b      	ldr	r3, [r3, #24]
 8000aa4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000aa8:	603b      	str	r3, [r7, #0]
 8000aaa:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000aac:	bf00      	nop
 8000aae:	4b25      	ldr	r3, [pc, #148]	@ (8000b44 <SystemClock_Config+0xf4>)
 8000ab0:	699b      	ldr	r3, [r3, #24]
 8000ab2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000ab6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000aba:	d1f8      	bne.n	8000aae <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000abc:	2301      	movs	r3, #1
 8000abe:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ac0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ac4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ac6:	2302      	movs	r3, #2
 8000ac8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000aca:	2302      	movs	r3, #2
 8000acc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000ace:	2302      	movs	r3, #2
 8000ad0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 8000ad2:	230c      	movs	r3, #12
 8000ad4:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000ad6:	2302      	movs	r3, #2
 8000ad8:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000ada:	2303      	movs	r3, #3
 8000adc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ade:	2302      	movs	r3, #2
 8000ae0:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000ae2:	230c      	movs	r3, #12
 8000ae4:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000ae6:	2302      	movs	r3, #2
 8000ae8:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000aea:	2300      	movs	r3, #0
 8000aec:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000af2:	4618      	mov	r0, r3
 8000af4:	f008 fcd8 	bl	80094a8 <HAL_RCC_OscConfig>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000afe:	f000 fd73 	bl	80015e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b02:	233f      	movs	r3, #63	@ 0x3f
 8000b04:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b06:	2303      	movs	r3, #3
 8000b08:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000b12:	2300      	movs	r3, #0
 8000b14:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000b16:	2300      	movs	r3, #0
 8000b18:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV4;
 8000b1a:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 8000b1e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000b20:	2300      	movs	r3, #0
 8000b22:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000b24:	1d3b      	adds	r3, r7, #4
 8000b26:	2101      	movs	r1, #1
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f009 f917 	bl	8009d5c <HAL_RCC_ClockConfig>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8000b34:	f000 fd58 	bl	80015e8 <Error_Handler>
  }
}
 8000b38:	bf00      	nop
 8000b3a:	3770      	adds	r7, #112	@ 0x70
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	58000400 	.word	0x58000400
 8000b44:	58024800 	.word	0x58024800

08000b48 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8000b4c:	4b16      	ldr	r3, [pc, #88]	@ (8000ba8 <MX_DCMI_Init+0x60>)
 8000b4e:	4a17      	ldr	r2, [pc, #92]	@ (8000bac <MX_DCMI_Init+0x64>)
 8000b50:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8000b52:	4b15      	ldr	r3, [pc, #84]	@ (8000ba8 <MX_DCMI_Init+0x60>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 8000b58:	4b13      	ldr	r3, [pc, #76]	@ (8000ba8 <MX_DCMI_Init+0x60>)
 8000b5a:	2220      	movs	r2, #32
 8000b5c:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_HIGH;
 8000b5e:	4b12      	ldr	r3, [pc, #72]	@ (8000ba8 <MX_DCMI_Init+0x60>)
 8000b60:	2280      	movs	r2, #128	@ 0x80
 8000b62:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8000b64:	4b10      	ldr	r3, [pc, #64]	@ (8000ba8 <MX_DCMI_Init+0x60>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8000b6a:	4b0f      	ldr	r3, [pc, #60]	@ (8000ba8 <MX_DCMI_Init+0x60>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000b70:	4b0d      	ldr	r3, [pc, #52]	@ (8000ba8 <MX_DCMI_Init+0x60>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8000b76:	4b0c      	ldr	r3, [pc, #48]	@ (8000ba8 <MX_DCMI_Init+0x60>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8000b7c:	4b0a      	ldr	r3, [pc, #40]	@ (8000ba8 <MX_DCMI_Init+0x60>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	625a      	str	r2, [r3, #36]	@ 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8000b82:	4b09      	ldr	r3, [pc, #36]	@ (8000ba8 <MX_DCMI_Init+0x60>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	629a      	str	r2, [r3, #40]	@ 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8000b88:	4b07      	ldr	r3, [pc, #28]	@ (8000ba8 <MX_DCMI_Init+0x60>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8000b8e:	4b06      	ldr	r3, [pc, #24]	@ (8000ba8 <MX_DCMI_Init+0x60>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8000b94:	4804      	ldr	r0, [pc, #16]	@ (8000ba8 <MX_DCMI_Init+0x60>)
 8000b96:	f001 fd17 	bl	80025c8 <HAL_DCMI_Init>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8000ba0:	f000 fd22 	bl	80015e8 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8000ba4:	bf00      	nop
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	24000170 	.word	0x24000170
 8000bac:	48020000 	.word	0x48020000

08000bb0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000bb4:	4b1b      	ldr	r3, [pc, #108]	@ (8000c24 <MX_I2C2_Init+0x74>)
 8000bb6:	4a1c      	ldr	r2, [pc, #112]	@ (8000c28 <MX_I2C2_Init+0x78>)
 8000bb8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00C0EAFF;
 8000bba:	4b1a      	ldr	r3, [pc, #104]	@ (8000c24 <MX_I2C2_Init+0x74>)
 8000bbc:	4a1b      	ldr	r2, [pc, #108]	@ (8000c2c <MX_I2C2_Init+0x7c>)
 8000bbe:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000bc0:	4b18      	ldr	r3, [pc, #96]	@ (8000c24 <MX_I2C2_Init+0x74>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bc6:	4b17      	ldr	r3, [pc, #92]	@ (8000c24 <MX_I2C2_Init+0x74>)
 8000bc8:	2201      	movs	r2, #1
 8000bca:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bcc:	4b15      	ldr	r3, [pc, #84]	@ (8000c24 <MX_I2C2_Init+0x74>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000bd2:	4b14      	ldr	r3, [pc, #80]	@ (8000c24 <MX_I2C2_Init+0x74>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000bd8:	4b12      	ldr	r3, [pc, #72]	@ (8000c24 <MX_I2C2_Init+0x74>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bde:	4b11      	ldr	r3, [pc, #68]	@ (8000c24 <MX_I2C2_Init+0x74>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000be4:	4b0f      	ldr	r3, [pc, #60]	@ (8000c24 <MX_I2C2_Init+0x74>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000bea:	480e      	ldr	r0, [pc, #56]	@ (8000c24 <MX_I2C2_Init+0x74>)
 8000bec:	f005 fca6 	bl	800653c <HAL_I2C_Init>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000bf6:	f000 fcf7 	bl	80015e8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000bfa:	2100      	movs	r1, #0
 8000bfc:	4809      	ldr	r0, [pc, #36]	@ (8000c24 <MX_I2C2_Init+0x74>)
 8000bfe:	f007 f8d1 	bl	8007da4 <HAL_I2CEx_ConfigAnalogFilter>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000c08:	f000 fcee 	bl	80015e8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	4805      	ldr	r0, [pc, #20]	@ (8000c24 <MX_I2C2_Init+0x74>)
 8000c10:	f007 f913 	bl	8007e3a <HAL_I2CEx_ConfigDigitalFilter>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000c1a:	f000 fce5 	bl	80015e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000c1e:	bf00      	nop
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	24000238 	.word	0x24000238
 8000c28:	40005800 	.word	0x40005800
 8000c2c:	00c0eaff 	.word	0x00c0eaff

08000c30 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000c34:	4b27      	ldr	r3, [pc, #156]	@ (8000cd4 <MX_SPI2_Init+0xa4>)
 8000c36:	4a28      	ldr	r2, [pc, #160]	@ (8000cd8 <MX_SPI2_Init+0xa8>)
 8000c38:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000c3a:	4b26      	ldr	r3, [pc, #152]	@ (8000cd4 <MX_SPI2_Init+0xa4>)
 8000c3c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000c40:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000c42:	4b24      	ldr	r3, [pc, #144]	@ (8000cd4 <MX_SPI2_Init+0xa4>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000c48:	4b22      	ldr	r3, [pc, #136]	@ (8000cd4 <MX_SPI2_Init+0xa4>)
 8000c4a:	2203      	movs	r2, #3
 8000c4c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c4e:	4b21      	ldr	r3, [pc, #132]	@ (8000cd4 <MX_SPI2_Init+0xa4>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c54:	4b1f      	ldr	r3, [pc, #124]	@ (8000cd4 <MX_SPI2_Init+0xa4>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000c5a:	4b1e      	ldr	r3, [pc, #120]	@ (8000cd4 <MX_SPI2_Init+0xa4>)
 8000c5c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000c60:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c62:	4b1c      	ldr	r3, [pc, #112]	@ (8000cd4 <MX_SPI2_Init+0xa4>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c68:	4b1a      	ldr	r3, [pc, #104]	@ (8000cd4 <MX_SPI2_Init+0xa4>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c6e:	4b19      	ldr	r3, [pc, #100]	@ (8000cd4 <MX_SPI2_Init+0xa4>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c74:	4b17      	ldr	r3, [pc, #92]	@ (8000cd4 <MX_SPI2_Init+0xa4>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8000c7a:	4b16      	ldr	r3, [pc, #88]	@ (8000cd4 <MX_SPI2_Init+0xa4>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c80:	4b14      	ldr	r3, [pc, #80]	@ (8000cd4 <MX_SPI2_Init+0xa4>)
 8000c82:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c86:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000c88:	4b12      	ldr	r3, [pc, #72]	@ (8000cd4 <MX_SPI2_Init+0xa4>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000c8e:	4b11      	ldr	r3, [pc, #68]	@ (8000cd4 <MX_SPI2_Init+0xa4>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000c94:	4b0f      	ldr	r3, [pc, #60]	@ (8000cd4 <MX_SPI2_Init+0xa4>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000c9a:	4b0e      	ldr	r3, [pc, #56]	@ (8000cd4 <MX_SPI2_Init+0xa4>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000ca0:	4b0c      	ldr	r3, [pc, #48]	@ (8000cd4 <MX_SPI2_Init+0xa4>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000ca6:	4b0b      	ldr	r3, [pc, #44]	@ (8000cd4 <MX_SPI2_Init+0xa4>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000cac:	4b09      	ldr	r3, [pc, #36]	@ (8000cd4 <MX_SPI2_Init+0xa4>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000cb2:	4b08      	ldr	r3, [pc, #32]	@ (8000cd4 <MX_SPI2_Init+0xa4>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000cb8:	4b06      	ldr	r3, [pc, #24]	@ (8000cd4 <MX_SPI2_Init+0xa4>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000cbe:	4805      	ldr	r0, [pc, #20]	@ (8000cd4 <MX_SPI2_Init+0xa4>)
 8000cc0:	f00b fa04 	bl	800c0cc <HAL_SPI_Init>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 8000cca:	f000 fc8d 	bl	80015e8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000cce:	bf00      	nop
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	2400028c 	.word	0x2400028c
 8000cd8:	40003800 	.word	0x40003800

08000cdc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b096      	sub	sp, #88	@ 0x58
 8000ce0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ce2:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	601a      	str	r2, [r3, #0]
 8000cea:	605a      	str	r2, [r3, #4]
 8000cec:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cee:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	601a      	str	r2, [r3, #0]
 8000cf6:	605a      	str	r2, [r3, #4]
 8000cf8:	609a      	str	r2, [r3, #8]
 8000cfa:	60da      	str	r2, [r3, #12]
 8000cfc:	611a      	str	r2, [r3, #16]
 8000cfe:	615a      	str	r2, [r3, #20]
 8000d00:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000d02:	1d3b      	adds	r3, r7, #4
 8000d04:	222c      	movs	r2, #44	@ 0x2c
 8000d06:	2100      	movs	r1, #0
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f011 fd87 	bl	801281c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d0e:	4b38      	ldr	r3, [pc, #224]	@ (8000df0 <MX_TIM1_Init+0x114>)
 8000d10:	4a38      	ldr	r2, [pc, #224]	@ (8000df4 <MX_TIM1_Init+0x118>)
 8000d12:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000d14:	4b36      	ldr	r3, [pc, #216]	@ (8000df0 <MX_TIM1_Init+0x114>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d1a:	4b35      	ldr	r3, [pc, #212]	@ (8000df0 <MX_TIM1_Init+0x114>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000;
 8000d20:	4b33      	ldr	r3, [pc, #204]	@ (8000df0 <MX_TIM1_Init+0x114>)
 8000d22:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000d26:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d28:	4b31      	ldr	r3, [pc, #196]	@ (8000df0 <MX_TIM1_Init+0x114>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d2e:	4b30      	ldr	r3, [pc, #192]	@ (8000df0 <MX_TIM1_Init+0x114>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d34:	4b2e      	ldr	r3, [pc, #184]	@ (8000df0 <MX_TIM1_Init+0x114>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000d3a:	482d      	ldr	r0, [pc, #180]	@ (8000df0 <MX_TIM1_Init+0x114>)
 8000d3c:	f00b fb5c 	bl	800c3f8 <HAL_TIM_PWM_Init>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000d46:	f000 fc4f 	bl	80015e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d52:	2300      	movs	r3, #0
 8000d54:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d56:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	4824      	ldr	r0, [pc, #144]	@ (8000df0 <MX_TIM1_Init+0x114>)
 8000d5e:	f00c fa9b 	bl	800d298 <HAL_TIMEx_MasterConfigSynchronization>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d001      	beq.n	8000d6c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000d68:	f000 fc3e 	bl	80015e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d6c:	2360      	movs	r3, #96	@ 0x60
 8000d6e:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8000d70:	2300      	movs	r3, #0
 8000d72:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d74:	2300      	movs	r3, #0
 8000d76:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000d80:	2300      	movs	r3, #0
 8000d82:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000d84:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000d88:	220c      	movs	r2, #12
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	4818      	ldr	r0, [pc, #96]	@ (8000df0 <MX_TIM1_Init+0x114>)
 8000d8e:	f00b fda1 	bl	800c8d4 <HAL_TIM_PWM_ConfigChannel>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8000d98:	f000 fc26 	bl	80015e8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000da0:	2300      	movs	r3, #0
 8000da2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000da4:	2300      	movs	r3, #0
 8000da6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000da8:	2300      	movs	r3, #0
 8000daa:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000dac:	2300      	movs	r3, #0
 8000dae:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000db0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000db4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000db6:	2300      	movs	r3, #0
 8000db8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000dbe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000dc2:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000dcc:	1d3b      	adds	r3, r7, #4
 8000dce:	4619      	mov	r1, r3
 8000dd0:	4807      	ldr	r0, [pc, #28]	@ (8000df0 <MX_TIM1_Init+0x114>)
 8000dd2:	f00c faef 	bl	800d3b4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <MX_TIM1_Init+0x104>
  {
    Error_Handler();
 8000ddc:	f000 fc04 	bl	80015e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000de0:	4803      	ldr	r0, [pc, #12]	@ (8000df0 <MX_TIM1_Init+0x114>)
 8000de2:	f000 fedd 	bl	8001ba0 <HAL_TIM_MspPostInit>

}
 8000de6:	bf00      	nop
 8000de8:	3758      	adds	r7, #88	@ 0x58
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	24000314 	.word	0x24000314
 8000df4:	40010000 	.word	0x40010000

08000df8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b08a      	sub	sp, #40	@ 0x28
 8000dfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dfe:	f107 031c 	add.w	r3, r7, #28
 8000e02:	2200      	movs	r2, #0
 8000e04:	601a      	str	r2, [r3, #0]
 8000e06:	605a      	str	r2, [r3, #4]
 8000e08:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e0a:	463b      	mov	r3, r7
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	601a      	str	r2, [r3, #0]
 8000e10:	605a      	str	r2, [r3, #4]
 8000e12:	609a      	str	r2, [r3, #8]
 8000e14:	60da      	str	r2, [r3, #12]
 8000e16:	611a      	str	r2, [r3, #16]
 8000e18:	615a      	str	r2, [r3, #20]
 8000e1a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e1c:	4b2d      	ldr	r3, [pc, #180]	@ (8000ed4 <MX_TIM2_Init+0xdc>)
 8000e1e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000e22:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000e24:	4b2b      	ldr	r3, [pc, #172]	@ (8000ed4 <MX_TIM2_Init+0xdc>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e2a:	4b2a      	ldr	r3, [pc, #168]	@ (8000ed4 <MX_TIM2_Init+0xdc>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 8000e30:	4b28      	ldr	r3, [pc, #160]	@ (8000ed4 <MX_TIM2_Init+0xdc>)
 8000e32:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000e36:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e38:	4b26      	ldr	r3, [pc, #152]	@ (8000ed4 <MX_TIM2_Init+0xdc>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e3e:	4b25      	ldr	r3, [pc, #148]	@ (8000ed4 <MX_TIM2_Init+0xdc>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000e44:	4823      	ldr	r0, [pc, #140]	@ (8000ed4 <MX_TIM2_Init+0xdc>)
 8000e46:	f00b fad7 	bl	800c3f8 <HAL_TIM_PWM_Init>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000e50:	f000 fbca 	bl	80015e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e54:	2300      	movs	r3, #0
 8000e56:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e5c:	f107 031c 	add.w	r3, r7, #28
 8000e60:	4619      	mov	r1, r3
 8000e62:	481c      	ldr	r0, [pc, #112]	@ (8000ed4 <MX_TIM2_Init+0xdc>)
 8000e64:	f00c fa18 	bl	800d298 <HAL_TIMEx_MasterConfigSynchronization>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000e6e:	f000 fbbb 	bl	80015e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e72:	2360      	movs	r3, #96	@ 0x60
 8000e74:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000e76:	2300      	movs	r3, #0
 8000e78:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e82:	463b      	mov	r3, r7
 8000e84:	2200      	movs	r2, #0
 8000e86:	4619      	mov	r1, r3
 8000e88:	4812      	ldr	r0, [pc, #72]	@ (8000ed4 <MX_TIM2_Init+0xdc>)
 8000e8a:	f00b fd23 	bl	800c8d4 <HAL_TIM_PWM_ConfigChannel>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000e94:	f000 fba8 	bl	80015e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e98:	463b      	mov	r3, r7
 8000e9a:	2204      	movs	r2, #4
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	480d      	ldr	r0, [pc, #52]	@ (8000ed4 <MX_TIM2_Init+0xdc>)
 8000ea0:	f00b fd18 	bl	800c8d4 <HAL_TIM_PWM_ConfigChannel>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8000eaa:	f000 fb9d 	bl	80015e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000eae:	463b      	mov	r3, r7
 8000eb0:	2208      	movs	r2, #8
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	4807      	ldr	r0, [pc, #28]	@ (8000ed4 <MX_TIM2_Init+0xdc>)
 8000eb6:	f00b fd0d 	bl	800c8d4 <HAL_TIM_PWM_ConfigChannel>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <MX_TIM2_Init+0xcc>
  {
    Error_Handler();
 8000ec0:	f000 fb92 	bl	80015e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000ec4:	4803      	ldr	r0, [pc, #12]	@ (8000ed4 <MX_TIM2_Init+0xdc>)
 8000ec6:	f000 fe6b 	bl	8001ba0 <HAL_TIM_MspPostInit>

}
 8000eca:	bf00      	nop
 8000ecc:	3728      	adds	r7, #40	@ 0x28
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	24000360 	.word	0x24000360

08000ed8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b08a      	sub	sp, #40	@ 0x28
 8000edc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ede:	f107 031c 	add.w	r3, r7, #28
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	601a      	str	r2, [r3, #0]
 8000ee6:	605a      	str	r2, [r3, #4]
 8000ee8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000eea:	463b      	mov	r3, r7
 8000eec:	2200      	movs	r2, #0
 8000eee:	601a      	str	r2, [r3, #0]
 8000ef0:	605a      	str	r2, [r3, #4]
 8000ef2:	609a      	str	r2, [r3, #8]
 8000ef4:	60da      	str	r2, [r3, #12]
 8000ef6:	611a      	str	r2, [r3, #16]
 8000ef8:	615a      	str	r2, [r3, #20]
 8000efa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000efc:	4b27      	ldr	r3, [pc, #156]	@ (8000f9c <MX_TIM3_Init+0xc4>)
 8000efe:	4a28      	ldr	r2, [pc, #160]	@ (8000fa0 <MX_TIM3_Init+0xc8>)
 8000f00:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000f02:	4b26      	ldr	r3, [pc, #152]	@ (8000f9c <MX_TIM3_Init+0xc4>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f08:	4b24      	ldr	r3, [pc, #144]	@ (8000f9c <MX_TIM3_Init+0xc4>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000;
 8000f0e:	4b23      	ldr	r3, [pc, #140]	@ (8000f9c <MX_TIM3_Init+0xc4>)
 8000f10:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000f14:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f16:	4b21      	ldr	r3, [pc, #132]	@ (8000f9c <MX_TIM3_Init+0xc4>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f1c:	4b1f      	ldr	r3, [pc, #124]	@ (8000f9c <MX_TIM3_Init+0xc4>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000f22:	481e      	ldr	r0, [pc, #120]	@ (8000f9c <MX_TIM3_Init+0xc4>)
 8000f24:	f00b fa68 	bl	800c3f8 <HAL_TIM_PWM_Init>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000f2e:	f000 fb5b 	bl	80015e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f32:	2300      	movs	r3, #0
 8000f34:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f36:	2300      	movs	r3, #0
 8000f38:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f3a:	f107 031c 	add.w	r3, r7, #28
 8000f3e:	4619      	mov	r1, r3
 8000f40:	4816      	ldr	r0, [pc, #88]	@ (8000f9c <MX_TIM3_Init+0xc4>)
 8000f42:	f00c f9a9 	bl	800d298 <HAL_TIMEx_MasterConfigSynchronization>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000f4c:	f000 fb4c 	bl	80015e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f50:	2360      	movs	r3, #96	@ 0x60
 8000f52:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000f54:	2300      	movs	r3, #0
 8000f56:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000f60:	463b      	mov	r3, r7
 8000f62:	2208      	movs	r2, #8
 8000f64:	4619      	mov	r1, r3
 8000f66:	480d      	ldr	r0, [pc, #52]	@ (8000f9c <MX_TIM3_Init+0xc4>)
 8000f68:	f00b fcb4 	bl	800c8d4 <HAL_TIM_PWM_ConfigChannel>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8000f72:	f000 fb39 	bl	80015e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000f76:	463b      	mov	r3, r7
 8000f78:	220c      	movs	r2, #12
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	4807      	ldr	r0, [pc, #28]	@ (8000f9c <MX_TIM3_Init+0xc4>)
 8000f7e:	f00b fca9 	bl	800c8d4 <HAL_TIM_PWM_ConfigChannel>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000f88:	f000 fb2e 	bl	80015e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000f8c:	4803      	ldr	r0, [pc, #12]	@ (8000f9c <MX_TIM3_Init+0xc4>)
 8000f8e:	f000 fe07 	bl	8001ba0 <HAL_TIM_MspPostInit>

}
 8000f92:	bf00      	nop
 8000f94:	3728      	adds	r7, #40	@ 0x28
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	240003ac 	.word	0x240003ac
 8000fa0:	40000400 	.word	0x40000400

08000fa4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b08a      	sub	sp, #40	@ 0x28
 8000fa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000faa:	f107 031c 	add.w	r3, r7, #28
 8000fae:	2200      	movs	r2, #0
 8000fb0:	601a      	str	r2, [r3, #0]
 8000fb2:	605a      	str	r2, [r3, #4]
 8000fb4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fb6:	463b      	mov	r3, r7
 8000fb8:	2200      	movs	r2, #0
 8000fba:	601a      	str	r2, [r3, #0]
 8000fbc:	605a      	str	r2, [r3, #4]
 8000fbe:	609a      	str	r2, [r3, #8]
 8000fc0:	60da      	str	r2, [r3, #12]
 8000fc2:	611a      	str	r2, [r3, #16]
 8000fc4:	615a      	str	r2, [r3, #20]
 8000fc6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000fc8:	4b27      	ldr	r3, [pc, #156]	@ (8001068 <MX_TIM4_Init+0xc4>)
 8000fca:	4a28      	ldr	r2, [pc, #160]	@ (800106c <MX_TIM4_Init+0xc8>)
 8000fcc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000fce:	4b26      	ldr	r3, [pc, #152]	@ (8001068 <MX_TIM4_Init+0xc4>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fd4:	4b24      	ldr	r3, [pc, #144]	@ (8001068 <MX_TIM4_Init+0xc4>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2000;
 8000fda:	4b23      	ldr	r3, [pc, #140]	@ (8001068 <MX_TIM4_Init+0xc4>)
 8000fdc:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000fe0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fe2:	4b21      	ldr	r3, [pc, #132]	@ (8001068 <MX_TIM4_Init+0xc4>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fe8:	4b1f      	ldr	r3, [pc, #124]	@ (8001068 <MX_TIM4_Init+0xc4>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000fee:	481e      	ldr	r0, [pc, #120]	@ (8001068 <MX_TIM4_Init+0xc4>)
 8000ff0:	f00b fa02 	bl	800c3f8 <HAL_TIM_PWM_Init>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8000ffa:	f000 faf5 	bl	80015e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ffe:	2300      	movs	r3, #0
 8001000:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001002:	2300      	movs	r3, #0
 8001004:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001006:	f107 031c 	add.w	r3, r7, #28
 800100a:	4619      	mov	r1, r3
 800100c:	4816      	ldr	r0, [pc, #88]	@ (8001068 <MX_TIM4_Init+0xc4>)
 800100e:	f00c f943 	bl	800d298 <HAL_TIMEx_MasterConfigSynchronization>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8001018:	f000 fae6 	bl	80015e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800101c:	2360      	movs	r3, #96	@ 0x60
 800101e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001020:	2300      	movs	r3, #0
 8001022:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001024:	2300      	movs	r3, #0
 8001026:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001028:	2300      	movs	r3, #0
 800102a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800102c:	463b      	mov	r3, r7
 800102e:	2208      	movs	r2, #8
 8001030:	4619      	mov	r1, r3
 8001032:	480d      	ldr	r0, [pc, #52]	@ (8001068 <MX_TIM4_Init+0xc4>)
 8001034:	f00b fc4e 	bl	800c8d4 <HAL_TIM_PWM_ConfigChannel>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 800103e:	f000 fad3 	bl	80015e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001042:	463b      	mov	r3, r7
 8001044:	220c      	movs	r2, #12
 8001046:	4619      	mov	r1, r3
 8001048:	4807      	ldr	r0, [pc, #28]	@ (8001068 <MX_TIM4_Init+0xc4>)
 800104a:	f00b fc43 	bl	800c8d4 <HAL_TIM_PWM_ConfigChannel>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8001054:	f000 fac8 	bl	80015e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001058:	4803      	ldr	r0, [pc, #12]	@ (8001068 <MX_TIM4_Init+0xc4>)
 800105a:	f000 fda1 	bl	8001ba0 <HAL_TIM_MspPostInit>

}
 800105e:	bf00      	nop
 8001060:	3728      	adds	r7, #40	@ 0x28
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	240003f8 	.word	0x240003f8
 800106c:	40000800 	.word	0x40000800

08001070 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b088      	sub	sp, #32
 8001074:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001076:	1d3b      	adds	r3, r7, #4
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
 800107c:	605a      	str	r2, [r3, #4]
 800107e:	609a      	str	r2, [r3, #8]
 8001080:	60da      	str	r2, [r3, #12]
 8001082:	611a      	str	r2, [r3, #16]
 8001084:	615a      	str	r2, [r3, #20]
 8001086:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001088:	4b1d      	ldr	r3, [pc, #116]	@ (8001100 <MX_TIM14_Init+0x90>)
 800108a:	4a1e      	ldr	r2, [pc, #120]	@ (8001104 <MX_TIM14_Init+0x94>)
 800108c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 800108e:	4b1c      	ldr	r3, [pc, #112]	@ (8001100 <MX_TIM14_Init+0x90>)
 8001090:	2200      	movs	r2, #0
 8001092:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001094:	4b1a      	ldr	r3, [pc, #104]	@ (8001100 <MX_TIM14_Init+0x90>)
 8001096:	2200      	movs	r2, #0
 8001098:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 5;
 800109a:	4b19      	ldr	r3, [pc, #100]	@ (8001100 <MX_TIM14_Init+0x90>)
 800109c:	2205      	movs	r2, #5
 800109e:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010a0:	4b17      	ldr	r3, [pc, #92]	@ (8001100 <MX_TIM14_Init+0x90>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80010a6:	4b16      	ldr	r3, [pc, #88]	@ (8001100 <MX_TIM14_Init+0x90>)
 80010a8:	2280      	movs	r2, #128	@ 0x80
 80010aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80010ac:	4814      	ldr	r0, [pc, #80]	@ (8001100 <MX_TIM14_Init+0x90>)
 80010ae:	f00b f94c 	bl	800c34a <HAL_TIM_Base_Init>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <MX_TIM14_Init+0x4c>
  {
    Error_Handler();
 80010b8:	f000 fa96 	bl	80015e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 80010bc:	4810      	ldr	r0, [pc, #64]	@ (8001100 <MX_TIM14_Init+0x90>)
 80010be:	f00b f99b 	bl	800c3f8 <HAL_TIM_PWM_Init>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <MX_TIM14_Init+0x5c>
  {
    Error_Handler();
 80010c8:	f000 fa8e 	bl	80015e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010cc:	2360      	movs	r3, #96	@ 0x60
 80010ce:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 3;
 80010d0:	2303      	movs	r3, #3
 80010d2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010d4:	2300      	movs	r3, #0
 80010d6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010d8:	2300      	movs	r3, #0
 80010da:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010dc:	1d3b      	adds	r3, r7, #4
 80010de:	2200      	movs	r2, #0
 80010e0:	4619      	mov	r1, r3
 80010e2:	4807      	ldr	r0, [pc, #28]	@ (8001100 <MX_TIM14_Init+0x90>)
 80010e4:	f00b fbf6 	bl	800c8d4 <HAL_TIM_PWM_ConfigChannel>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <MX_TIM14_Init+0x82>
  {
    Error_Handler();
 80010ee:	f000 fa7b 	bl	80015e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 80010f2:	4803      	ldr	r0, [pc, #12]	@ (8001100 <MX_TIM14_Init+0x90>)
 80010f4:	f000 fd54 	bl	8001ba0 <HAL_TIM_MspPostInit>

}
 80010f8:	bf00      	nop
 80010fa:	3720      	adds	r7, #32
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	24000444 	.word	0x24000444
 8001104:	40002000 	.word	0x40002000

08001108 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800110c:	4b22      	ldr	r3, [pc, #136]	@ (8001198 <MX_USART1_UART_Init+0x90>)
 800110e:	4a23      	ldr	r2, [pc, #140]	@ (800119c <MX_USART1_UART_Init+0x94>)
 8001110:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001112:	4b21      	ldr	r3, [pc, #132]	@ (8001198 <MX_USART1_UART_Init+0x90>)
 8001114:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001118:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800111a:	4b1f      	ldr	r3, [pc, #124]	@ (8001198 <MX_USART1_UART_Init+0x90>)
 800111c:	2200      	movs	r2, #0
 800111e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001120:	4b1d      	ldr	r3, [pc, #116]	@ (8001198 <MX_USART1_UART_Init+0x90>)
 8001122:	2200      	movs	r2, #0
 8001124:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001126:	4b1c      	ldr	r3, [pc, #112]	@ (8001198 <MX_USART1_UART_Init+0x90>)
 8001128:	2200      	movs	r2, #0
 800112a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800112c:	4b1a      	ldr	r3, [pc, #104]	@ (8001198 <MX_USART1_UART_Init+0x90>)
 800112e:	220c      	movs	r2, #12
 8001130:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001132:	4b19      	ldr	r3, [pc, #100]	@ (8001198 <MX_USART1_UART_Init+0x90>)
 8001134:	2200      	movs	r2, #0
 8001136:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001138:	4b17      	ldr	r3, [pc, #92]	@ (8001198 <MX_USART1_UART_Init+0x90>)
 800113a:	2200      	movs	r2, #0
 800113c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800113e:	4b16      	ldr	r3, [pc, #88]	@ (8001198 <MX_USART1_UART_Init+0x90>)
 8001140:	2200      	movs	r2, #0
 8001142:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001144:	4b14      	ldr	r3, [pc, #80]	@ (8001198 <MX_USART1_UART_Init+0x90>)
 8001146:	2200      	movs	r2, #0
 8001148:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800114a:	4b13      	ldr	r3, [pc, #76]	@ (8001198 <MX_USART1_UART_Init+0x90>)
 800114c:	2200      	movs	r2, #0
 800114e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001150:	4811      	ldr	r0, [pc, #68]	@ (8001198 <MX_USART1_UART_Init+0x90>)
 8001152:	f00c f9cb 	bl	800d4ec <HAL_UART_Init>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800115c:	f000 fa44 	bl	80015e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001160:	2100      	movs	r1, #0
 8001162:	480d      	ldr	r0, [pc, #52]	@ (8001198 <MX_USART1_UART_Init+0x90>)
 8001164:	f00d f9d3 	bl	800e50e <HAL_UARTEx_SetTxFifoThreshold>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800116e:	f000 fa3b 	bl	80015e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001172:	2100      	movs	r1, #0
 8001174:	4808      	ldr	r0, [pc, #32]	@ (8001198 <MX_USART1_UART_Init+0x90>)
 8001176:	f00d fa08 	bl	800e58a <HAL_UARTEx_SetRxFifoThreshold>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001180:	f000 fa32 	bl	80015e8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001184:	4804      	ldr	r0, [pc, #16]	@ (8001198 <MX_USART1_UART_Init+0x90>)
 8001186:	f00d f989 	bl	800e49c <HAL_UARTEx_DisableFifoMode>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001190:	f000 fa2a 	bl	80015e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001194:	bf00      	nop
 8001196:	bd80      	pop	{r7, pc}
 8001198:	24000490 	.word	0x24000490
 800119c:	40011000 	.word	0x40011000

080011a0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011a6:	4b0d      	ldr	r3, [pc, #52]	@ (80011dc <MX_DMA_Init+0x3c>)
 80011a8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80011ac:	4a0b      	ldr	r2, [pc, #44]	@ (80011dc <MX_DMA_Init+0x3c>)
 80011ae:	f043 0301 	orr.w	r3, r3, #1
 80011b2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80011b6:	4b09      	ldr	r3, [pc, #36]	@ (80011dc <MX_DMA_Init+0x3c>)
 80011b8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80011bc:	f003 0301 	and.w	r3, r3, #1
 80011c0:	607b      	str	r3, [r7, #4]
 80011c2:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80011c4:	2200      	movs	r2, #0
 80011c6:	2100      	movs	r1, #0
 80011c8:	200b      	movs	r0, #11
 80011ca:	f001 f950 	bl	800246e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80011ce:	200b      	movs	r0, #11
 80011d0:	f001 f967 	bl	80024a2 <HAL_NVIC_EnableIRQ>

}
 80011d4:	bf00      	nop
 80011d6:	3708      	adds	r7, #8
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	58024400 	.word	0x58024400

080011e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b08c      	sub	sp, #48	@ 0x30
 80011e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e6:	f107 031c 	add.w	r3, r7, #28
 80011ea:	2200      	movs	r2, #0
 80011ec:	601a      	str	r2, [r3, #0]
 80011ee:	605a      	str	r2, [r3, #4]
 80011f0:	609a      	str	r2, [r3, #8]
 80011f2:	60da      	str	r2, [r3, #12]
 80011f4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80011f6:	4b52      	ldr	r3, [pc, #328]	@ (8001340 <MX_GPIO_Init+0x160>)
 80011f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011fc:	4a50      	ldr	r2, [pc, #320]	@ (8001340 <MX_GPIO_Init+0x160>)
 80011fe:	f043 0310 	orr.w	r3, r3, #16
 8001202:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001206:	4b4e      	ldr	r3, [pc, #312]	@ (8001340 <MX_GPIO_Init+0x160>)
 8001208:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800120c:	f003 0310 	and.w	r3, r3, #16
 8001210:	61bb      	str	r3, [r7, #24]
 8001212:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001214:	4b4a      	ldr	r3, [pc, #296]	@ (8001340 <MX_GPIO_Init+0x160>)
 8001216:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800121a:	4a49      	ldr	r2, [pc, #292]	@ (8001340 <MX_GPIO_Init+0x160>)
 800121c:	f043 0304 	orr.w	r3, r3, #4
 8001220:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001224:	4b46      	ldr	r3, [pc, #280]	@ (8001340 <MX_GPIO_Init+0x160>)
 8001226:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800122a:	f003 0304 	and.w	r3, r3, #4
 800122e:	617b      	str	r3, [r7, #20]
 8001230:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001232:	4b43      	ldr	r3, [pc, #268]	@ (8001340 <MX_GPIO_Init+0x160>)
 8001234:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001238:	4a41      	ldr	r2, [pc, #260]	@ (8001340 <MX_GPIO_Init+0x160>)
 800123a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800123e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001242:	4b3f      	ldr	r3, [pc, #252]	@ (8001340 <MX_GPIO_Init+0x160>)
 8001244:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001248:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800124c:	613b      	str	r3, [r7, #16]
 800124e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001250:	4b3b      	ldr	r3, [pc, #236]	@ (8001340 <MX_GPIO_Init+0x160>)
 8001252:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001256:	4a3a      	ldr	r2, [pc, #232]	@ (8001340 <MX_GPIO_Init+0x160>)
 8001258:	f043 0301 	orr.w	r3, r3, #1
 800125c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001260:	4b37      	ldr	r3, [pc, #220]	@ (8001340 <MX_GPIO_Init+0x160>)
 8001262:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001266:	f003 0301 	and.w	r3, r3, #1
 800126a:	60fb      	str	r3, [r7, #12]
 800126c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800126e:	4b34      	ldr	r3, [pc, #208]	@ (8001340 <MX_GPIO_Init+0x160>)
 8001270:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001274:	4a32      	ldr	r2, [pc, #200]	@ (8001340 <MX_GPIO_Init+0x160>)
 8001276:	f043 0302 	orr.w	r3, r3, #2
 800127a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800127e:	4b30      	ldr	r3, [pc, #192]	@ (8001340 <MX_GPIO_Init+0x160>)
 8001280:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001284:	f003 0302 	and.w	r3, r3, #2
 8001288:	60bb      	str	r3, [r7, #8]
 800128a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800128c:	4b2c      	ldr	r3, [pc, #176]	@ (8001340 <MX_GPIO_Init+0x160>)
 800128e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001292:	4a2b      	ldr	r2, [pc, #172]	@ (8001340 <MX_GPIO_Init+0x160>)
 8001294:	f043 0308 	orr.w	r3, r3, #8
 8001298:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800129c:	4b28      	ldr	r3, [pc, #160]	@ (8001340 <MX_GPIO_Init+0x160>)
 800129e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012a2:	f003 0308 	and.w	r3, r3, #8
 80012a6:	607b      	str	r3, [r7, #4]
 80012a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80012aa:	2200      	movs	r2, #0
 80012ac:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 80012b0:	4824      	ldr	r0, [pc, #144]	@ (8001344 <MX_GPIO_Init+0x164>)
 80012b2:	f005 f929 	bl	8006508 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 80012b6:	2200      	movs	r2, #0
 80012b8:	2108      	movs	r1, #8
 80012ba:	4823      	ldr	r0, [pc, #140]	@ (8001348 <MX_GPIO_Init+0x168>)
 80012bc:	f005 f924 	bl	8006508 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);
 80012c0:	2200      	movs	r2, #0
 80012c2:	2101      	movs	r1, #1
 80012c4:	4821      	ldr	r0, [pc, #132]	@ (800134c <MX_GPIO_Init+0x16c>)
 80012c6:	f005 f91f 	bl	8006508 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80012ca:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80012ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012d0:	2301      	movs	r3, #1
 80012d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d4:	2300      	movs	r3, #0
 80012d6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d8:	2300      	movs	r3, #0
 80012da:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012dc:	f107 031c 	add.w	r3, r7, #28
 80012e0:	4619      	mov	r1, r3
 80012e2:	4818      	ldr	r0, [pc, #96]	@ (8001344 <MX_GPIO_Init+0x164>)
 80012e4:	f004 ff60 	bl	80061a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80012e8:	2301      	movs	r3, #1
 80012ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012ec:	2300      	movs	r3, #0
 80012ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f0:	2300      	movs	r3, #0
 80012f2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012f4:	f107 031c 	add.w	r3, r7, #28
 80012f8:	4619      	mov	r1, r3
 80012fa:	4812      	ldr	r0, [pc, #72]	@ (8001344 <MX_GPIO_Init+0x164>)
 80012fc:	f004 ff54 	bl	80061a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001300:	2308      	movs	r3, #8
 8001302:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001304:	2301      	movs	r3, #1
 8001306:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001308:	2300      	movs	r3, #0
 800130a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800130c:	2300      	movs	r3, #0
 800130e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001310:	f107 031c 	add.w	r3, r7, #28
 8001314:	4619      	mov	r1, r3
 8001316:	480c      	ldr	r0, [pc, #48]	@ (8001348 <MX_GPIO_Init+0x168>)
 8001318:	f004 ff46 	bl	80061a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800131c:	2301      	movs	r3, #1
 800131e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001320:	2301      	movs	r3, #1
 8001322:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001324:	2300      	movs	r3, #0
 8001326:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001328:	2300      	movs	r3, #0
 800132a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800132c:	f107 031c 	add.w	r3, r7, #28
 8001330:	4619      	mov	r1, r3
 8001332:	4806      	ldr	r0, [pc, #24]	@ (800134c <MX_GPIO_Init+0x16c>)
 8001334:	f004 ff38 	bl	80061a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001338:	bf00      	nop
 800133a:	3730      	adds	r7, #48	@ 0x30
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	58024400 	.word	0x58024400
 8001344:	58020800 	.word	0x58020800
 8001348:	58020000 	.word	0x58020000
 800134c:	58020c00 	.word	0x58020c00

08001350 <CAM_GetRegister>:

/* USER CODE BEGIN 4 */

HAL_StatusTypeDef CAM_GetRegister(uint8_t addr, uint8_t* pData, uint8_t haltOnError) {
 8001350:	b580      	push	{r7, lr}
 8001352:	b09e      	sub	sp, #120	@ 0x78
 8001354:	af02      	add	r7, sp, #8
 8001356:	4603      	mov	r3, r0
 8001358:	6039      	str	r1, [r7, #0]
 800135a:	71fb      	strb	r3, [r7, #7]
 800135c:	4613      	mov	r3, r2
 800135e:	71bb      	strb	r3, [r7, #6]
	  HAL_StatusTypeDef ov_result;
	  uint8_t usb_msg[100] = {0};
 8001360:	f107 0308 	add.w	r3, r7, #8
 8001364:	2264      	movs	r2, #100	@ 0x64
 8001366:	2100      	movs	r1, #0
 8001368:	4618      	mov	r0, r3
 800136a:	f011 fa57 	bl	801281c <memset>

	  ov_result = HAL_I2C_Master_Transmit(&hi2c2, OV7670_ADDR_READ, &addr, 1, 100);
 800136e:	1dfa      	adds	r2, r7, #7
 8001370:	2364      	movs	r3, #100	@ 0x64
 8001372:	9300      	str	r3, [sp, #0]
 8001374:	2301      	movs	r3, #1
 8001376:	2143      	movs	r1, #67	@ 0x43
 8001378:	482f      	ldr	r0, [pc, #188]	@ (8001438 <CAM_GetRegister+0xe8>)
 800137a:	f005 f97b 	bl	8006674 <HAL_I2C_Master_Transmit>
 800137e:	4603      	mov	r3, r0
 8001380:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	  if (ov_result) {
 8001384:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001388:	2b00      	cmp	r3, #0
 800138a:	d020      	beq.n	80013ce <CAM_GetRegister+0x7e>
		  if (haltOnError) {
 800138c:	79bb      	ldrb	r3, [r7, #6]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d01a      	beq.n	80013c8 <CAM_GetRegister+0x78>
			  sprintf(usb_msg, "TX ERROR: Cannot read camera register 0x%X - Code 0x%X\r\n", addr, ov_result);
 8001392:	79fb      	ldrb	r3, [r7, #7]
 8001394:	461a      	mov	r2, r3
 8001396:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800139a:	f107 0008 	add.w	r0, r7, #8
 800139e:	4927      	ldr	r1, [pc, #156]	@ (800143c <CAM_GetRegister+0xec>)
 80013a0:	f011 fa1a 	bl	80127d8 <siprintf>
			  while (1) {
				  CDC_Transmit_FS(usb_msg, strlen(usb_msg));
 80013a4:	f107 0308 	add.w	r3, r7, #8
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7fe ff99 	bl	80002e0 <strlen>
 80013ae:	4602      	mov	r2, r0
 80013b0:	f107 0308 	add.w	r3, r7, #8
 80013b4:	4611      	mov	r1, r2
 80013b6:	4618      	mov	r0, r3
 80013b8:	f010 fd8e 	bl	8011ed8 <CDC_Transmit_FS>
				  HAL_Delay(1000);
 80013bc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80013c0:	f000 ff4a 	bl	8002258 <HAL_Delay>
			  while (1) {
 80013c4:	bf00      	nop
 80013c6:	e7ed      	b.n	80013a4 <CAM_GetRegister+0x54>
			  }
		  }
		  return ov_result;
 80013c8:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80013cc:	e030      	b.n	8001430 <CAM_GetRegister+0xe0>
	  }


	  ov_result = HAL_I2C_Master_Receive(&hi2c2, OV7670_ADDR_READ, pData, 1, 100);
 80013ce:	2364      	movs	r3, #100	@ 0x64
 80013d0:	9300      	str	r3, [sp, #0]
 80013d2:	2301      	movs	r3, #1
 80013d4:	683a      	ldr	r2, [r7, #0]
 80013d6:	2143      	movs	r1, #67	@ 0x43
 80013d8:	4817      	ldr	r0, [pc, #92]	@ (8001438 <CAM_GetRegister+0xe8>)
 80013da:	f005 fa63 	bl	80068a4 <HAL_I2C_Master_Receive>
 80013de:	4603      	mov	r3, r0
 80013e0:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	  if (ov_result) {
 80013e4:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d020      	beq.n	800142e <CAM_GetRegister+0xde>
		  if (haltOnError) {
 80013ec:	79bb      	ldrb	r3, [r7, #6]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d01a      	beq.n	8001428 <CAM_GetRegister+0xd8>
			  sprintf(usb_msg, "RX ERROR: Cannot read camera register 0x%X - Code 0x%X\r\n", addr, ov_result);
 80013f2:	79fb      	ldrb	r3, [r7, #7]
 80013f4:	461a      	mov	r2, r3
 80013f6:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80013fa:	f107 0008 	add.w	r0, r7, #8
 80013fe:	4910      	ldr	r1, [pc, #64]	@ (8001440 <CAM_GetRegister+0xf0>)
 8001400:	f011 f9ea 	bl	80127d8 <siprintf>
			  while (1) {
				  CDC_Transmit_FS(usb_msg, strlen(usb_msg));
 8001404:	f107 0308 	add.w	r3, r7, #8
 8001408:	4618      	mov	r0, r3
 800140a:	f7fe ff69 	bl	80002e0 <strlen>
 800140e:	4602      	mov	r2, r0
 8001410:	f107 0308 	add.w	r3, r7, #8
 8001414:	4611      	mov	r1, r2
 8001416:	4618      	mov	r0, r3
 8001418:	f010 fd5e 	bl	8011ed8 <CDC_Transmit_FS>
				  HAL_Delay(1000);
 800141c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001420:	f000 ff1a 	bl	8002258 <HAL_Delay>
			  while (1) {
 8001424:	bf00      	nop
 8001426:	e7ed      	b.n	8001404 <CAM_GetRegister+0xb4>
			  }
		  }
		  return ov_result;
 8001428:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800142c:	e000      	b.n	8001430 <CAM_GetRegister+0xe0>
	  }


	  return HAL_OK;
 800142e:	2300      	movs	r3, #0
}
 8001430:	4618      	mov	r0, r3
 8001432:	3770      	adds	r7, #112	@ 0x70
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	24000238 	.word	0x24000238
 800143c:	0801315c 	.word	0x0801315c
 8001440:	08013198 	.word	0x08013198

08001444 <CAM_SetRegister>:

HAL_StatusTypeDef CAM_SetRegister(uint8_t addr, uint8_t data, uint8_t haltOnError) {
 8001444:	b580      	push	{r7, lr}
 8001446:	b0a0      	sub	sp, #128	@ 0x80
 8001448:	af02      	add	r7, sp, #8
 800144a:	4603      	mov	r3, r0
 800144c:	71fb      	strb	r3, [r7, #7]
 800144e:	460b      	mov	r3, r1
 8001450:	71bb      	strb	r3, [r7, #6]
 8001452:	4613      	mov	r3, r2
 8001454:	717b      	strb	r3, [r7, #5]
	  HAL_StatusTypeDef ov_result;
	  uint8_t usb_msg[100] = {0};
 8001456:	f107 0310 	add.w	r3, r7, #16
 800145a:	2264      	movs	r2, #100	@ 0x64
 800145c:	2100      	movs	r1, #0
 800145e:	4618      	mov	r0, r3
 8001460:	f011 f9dc 	bl	801281c <memset>

	  uint8_t reg_set[2] = {addr, data};
 8001464:	79fb      	ldrb	r3, [r7, #7]
 8001466:	733b      	strb	r3, [r7, #12]
 8001468:	79bb      	ldrb	r3, [r7, #6]
 800146a:	737b      	strb	r3, [r7, #13]

	  ov_result = HAL_I2C_Master_Transmit(&hi2c2, OV7670_ADDR_WRITE, reg_set, 2, 100);
 800146c:	f107 020c 	add.w	r2, r7, #12
 8001470:	2364      	movs	r3, #100	@ 0x64
 8001472:	9300      	str	r3, [sp, #0]
 8001474:	2302      	movs	r3, #2
 8001476:	2142      	movs	r1, #66	@ 0x42
 8001478:	4841      	ldr	r0, [pc, #260]	@ (8001580 <CAM_SetRegister+0x13c>)
 800147a:	f005 f8fb 	bl	8006674 <HAL_I2C_Master_Transmit>
 800147e:	4603      	mov	r3, r0
 8001480:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
	  if (ov_result) {
 8001484:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8001488:	2b00      	cmp	r3, #0
 800148a:	d01f      	beq.n	80014cc <CAM_SetRegister+0x88>
		  if (haltOnError) {
 800148c:	797b      	ldrb	r3, [r7, #5]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d019      	beq.n	80014c6 <CAM_SetRegister+0x82>
			  sprintf(usb_msg, "TX ERROR: Cannot write camera register 0x%X - Code 0x%X\r\n", addr, ov_result);
 8001492:	79fa      	ldrb	r2, [r7, #7]
 8001494:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8001498:	f107 0010 	add.w	r0, r7, #16
 800149c:	4939      	ldr	r1, [pc, #228]	@ (8001584 <CAM_SetRegister+0x140>)
 800149e:	f011 f99b 	bl	80127d8 <siprintf>
			  while (1) {
				  CDC_Transmit_FS(usb_msg, strlen(usb_msg));
 80014a2:	f107 0310 	add.w	r3, r7, #16
 80014a6:	4618      	mov	r0, r3
 80014a8:	f7fe ff1a 	bl	80002e0 <strlen>
 80014ac:	4602      	mov	r2, r0
 80014ae:	f107 0310 	add.w	r3, r7, #16
 80014b2:	4611      	mov	r1, r2
 80014b4:	4618      	mov	r0, r3
 80014b6:	f010 fd0f 	bl	8011ed8 <CDC_Transmit_FS>
				  HAL_Delay(1000);
 80014ba:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80014be:	f000 fecb 	bl	8002258 <HAL_Delay>
			  while (1) {
 80014c2:	bf00      	nop
 80014c4:	e7ed      	b.n	80014a2 <CAM_SetRegister+0x5e>
			  }
		  }
		  return ov_result;
 80014c6:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80014ca:	e054      	b.n	8001576 <CAM_SetRegister+0x132>
	  }

	  // Confirm write
	  uint8_t reg_get = 0x00;
 80014cc:	2300      	movs	r3, #0
 80014ce:	72fb      	strb	r3, [r7, #11]
	  ov_result = CAM_GetRegister(addr, &reg_get, 1);
 80014d0:	f107 010b 	add.w	r1, r7, #11
 80014d4:	79fb      	ldrb	r3, [r7, #7]
 80014d6:	2201      	movs	r2, #1
 80014d8:	4618      	mov	r0, r3
 80014da:	f7ff ff39 	bl	8001350 <CAM_GetRegister>
 80014de:	4603      	mov	r3, r0
 80014e0:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
	  if (ov_result) {
 80014e4:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d01f      	beq.n	800152c <CAM_SetRegister+0xe8>
		  if (haltOnError) {
 80014ec:	797b      	ldrb	r3, [r7, #5]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d019      	beq.n	8001526 <CAM_SetRegister+0xe2>
			  sprintf(usb_msg, "CF ERROR: Cannot confirm camera register 0x%X - Code 0x%X\r\n", addr, ov_result);
 80014f2:	79fa      	ldrb	r2, [r7, #7]
 80014f4:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80014f8:	f107 0010 	add.w	r0, r7, #16
 80014fc:	4922      	ldr	r1, [pc, #136]	@ (8001588 <CAM_SetRegister+0x144>)
 80014fe:	f011 f96b 	bl	80127d8 <siprintf>
			  while (1) {
				  CDC_Transmit_FS(usb_msg, strlen(usb_msg));
 8001502:	f107 0310 	add.w	r3, r7, #16
 8001506:	4618      	mov	r0, r3
 8001508:	f7fe feea 	bl	80002e0 <strlen>
 800150c:	4602      	mov	r2, r0
 800150e:	f107 0310 	add.w	r3, r7, #16
 8001512:	4611      	mov	r1, r2
 8001514:	4618      	mov	r0, r3
 8001516:	f010 fcdf 	bl	8011ed8 <CDC_Transmit_FS>
				  HAL_Delay(1000);
 800151a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800151e:	f000 fe9b 	bl	8002258 <HAL_Delay>
			  while (1) {
 8001522:	bf00      	nop
 8001524:	e7ed      	b.n	8001502 <CAM_SetRegister+0xbe>
			  }
		  }
		  else {
			  return ov_result;
 8001526:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800152a:	e024      	b.n	8001576 <CAM_SetRegister+0x132>
		  }
	  }

	  if (reg_get != data) {
 800152c:	7afb      	ldrb	r3, [r7, #11]
 800152e:	79ba      	ldrb	r2, [r7, #6]
 8001530:	429a      	cmp	r2, r3
 8001532:	d01f      	beq.n	8001574 <CAM_SetRegister+0x130>
		  // Error, bad write
		  if (haltOnError) {
 8001534:	797b      	ldrb	r3, [r7, #5]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d01a      	beq.n	8001570 <CAM_SetRegister+0x12c>
			  sprintf(usb_msg, "CF ERROR: Bad write to register 0x%X - EXPECTED 0x%X, GOT 0x%X\r\n", addr, data, reg_get);
 800153a:	79fa      	ldrb	r2, [r7, #7]
 800153c:	79bb      	ldrb	r3, [r7, #6]
 800153e:	7af9      	ldrb	r1, [r7, #11]
 8001540:	f107 0010 	add.w	r0, r7, #16
 8001544:	9100      	str	r1, [sp, #0]
 8001546:	4911      	ldr	r1, [pc, #68]	@ (800158c <CAM_SetRegister+0x148>)
 8001548:	f011 f946 	bl	80127d8 <siprintf>
			  while (1) {
				  CDC_Transmit_FS(usb_msg, strlen(usb_msg));
 800154c:	f107 0310 	add.w	r3, r7, #16
 8001550:	4618      	mov	r0, r3
 8001552:	f7fe fec5 	bl	80002e0 <strlen>
 8001556:	4602      	mov	r2, r0
 8001558:	f107 0310 	add.w	r3, r7, #16
 800155c:	4611      	mov	r1, r2
 800155e:	4618      	mov	r0, r3
 8001560:	f010 fcba 	bl	8011ed8 <CDC_Transmit_FS>
				  HAL_Delay(1000);
 8001564:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001568:	f000 fe76 	bl	8002258 <HAL_Delay>
			  while (1) {
 800156c:	bf00      	nop
 800156e:	e7ed      	b.n	800154c <CAM_SetRegister+0x108>
			  }
		  }
		  return HAL_ERROR;
 8001570:	2301      	movs	r3, #1
 8001572:	e000      	b.n	8001576 <CAM_SetRegister+0x132>
	  }

	  return HAL_OK;
 8001574:	2300      	movs	r3, #0
}
 8001576:	4618      	mov	r0, r3
 8001578:	3778      	adds	r7, #120	@ 0x78
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	24000238 	.word	0x24000238
 8001584:	080131d4 	.word	0x080131d4
 8001588:	08013210 	.word	0x08013210
 800158c:	0801324c 	.word	0x0801324c

08001590 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b084      	sub	sp, #16
 8001594:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001596:	463b      	mov	r3, r7
 8001598:	2200      	movs	r2, #0
 800159a:	601a      	str	r2, [r3, #0]
 800159c:	605a      	str	r2, [r3, #4]
 800159e:	609a      	str	r2, [r3, #8]
 80015a0:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80015a2:	f000 ff99 	bl	80024d8 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80015a6:	2301      	movs	r3, #1
 80015a8:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80015aa:	2300      	movs	r3, #0
 80015ac:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80015ae:	2300      	movs	r3, #0
 80015b0:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80015b2:	231f      	movs	r3, #31
 80015b4:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80015b6:	2387      	movs	r3, #135	@ 0x87
 80015b8:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80015ba:	2300      	movs	r3, #0
 80015bc:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80015be:	2300      	movs	r3, #0
 80015c0:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80015c2:	2301      	movs	r3, #1
 80015c4:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80015c6:	2301      	movs	r3, #1
 80015c8:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80015ca:	2300      	movs	r3, #0
 80015cc:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80015ce:	2300      	movs	r3, #0
 80015d0:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80015d2:	463b      	mov	r3, r7
 80015d4:	4618      	mov	r0, r3
 80015d6:	f000 ffb7 	bl	8002548 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80015da:	2004      	movs	r0, #4
 80015dc:	f000 ff94 	bl	8002508 <HAL_MPU_Enable>

}
 80015e0:	bf00      	nop
 80015e2:	3710      	adds	r7, #16
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}

080015e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015ec:	b672      	cpsid	i
}
 80015ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015f0:	bf00      	nop
 80015f2:	e7fd      	b.n	80015f0 <Error_Handler+0x8>

080015f4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015fa:	4b0a      	ldr	r3, [pc, #40]	@ (8001624 <HAL_MspInit+0x30>)
 80015fc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001600:	4a08      	ldr	r2, [pc, #32]	@ (8001624 <HAL_MspInit+0x30>)
 8001602:	f043 0302 	orr.w	r3, r3, #2
 8001606:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800160a:	4b06      	ldr	r3, [pc, #24]	@ (8001624 <HAL_MspInit+0x30>)
 800160c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001610:	f003 0302 	and.w	r3, r3, #2
 8001614:	607b      	str	r3, [r7, #4]
 8001616:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001618:	bf00      	nop
 800161a:	370c      	adds	r7, #12
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr
 8001624:	58024400 	.word	0x58024400

08001628 <HAL_DCMI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdcmi: DCMI handle pointer
  * @retval None
  */
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b08e      	sub	sp, #56	@ 0x38
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001630:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001634:	2200      	movs	r2, #0
 8001636:	601a      	str	r2, [r3, #0]
 8001638:	605a      	str	r2, [r3, #4]
 800163a:	609a      	str	r2, [r3, #8]
 800163c:	60da      	str	r2, [r3, #12]
 800163e:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a79      	ldr	r2, [pc, #484]	@ (800182c <HAL_DCMI_MspInit+0x204>)
 8001646:	4293      	cmp	r3, r2
 8001648:	f040 80ec 	bne.w	8001824 <HAL_DCMI_MspInit+0x1fc>
  {
    /* USER CODE BEGIN DCMI_MspInit 0 */

    /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 800164c:	4b78      	ldr	r3, [pc, #480]	@ (8001830 <HAL_DCMI_MspInit+0x208>)
 800164e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8001652:	4a77      	ldr	r2, [pc, #476]	@ (8001830 <HAL_DCMI_MspInit+0x208>)
 8001654:	f043 0301 	orr.w	r3, r3, #1
 8001658:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800165c:	4b74      	ldr	r3, [pc, #464]	@ (8001830 <HAL_DCMI_MspInit+0x208>)
 800165e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8001662:	f003 0301 	and.w	r3, r3, #1
 8001666:	623b      	str	r3, [r7, #32]
 8001668:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800166a:	4b71      	ldr	r3, [pc, #452]	@ (8001830 <HAL_DCMI_MspInit+0x208>)
 800166c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001670:	4a6f      	ldr	r2, [pc, #444]	@ (8001830 <HAL_DCMI_MspInit+0x208>)
 8001672:	f043 0310 	orr.w	r3, r3, #16
 8001676:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800167a:	4b6d      	ldr	r3, [pc, #436]	@ (8001830 <HAL_DCMI_MspInit+0x208>)
 800167c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001680:	f003 0310 	and.w	r3, r3, #16
 8001684:	61fb      	str	r3, [r7, #28]
 8001686:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001688:	4b69      	ldr	r3, [pc, #420]	@ (8001830 <HAL_DCMI_MspInit+0x208>)
 800168a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800168e:	4a68      	ldr	r2, [pc, #416]	@ (8001830 <HAL_DCMI_MspInit+0x208>)
 8001690:	f043 0301 	orr.w	r3, r3, #1
 8001694:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001698:	4b65      	ldr	r3, [pc, #404]	@ (8001830 <HAL_DCMI_MspInit+0x208>)
 800169a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800169e:	f003 0301 	and.w	r3, r3, #1
 80016a2:	61bb      	str	r3, [r7, #24]
 80016a4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016a6:	4b62      	ldr	r3, [pc, #392]	@ (8001830 <HAL_DCMI_MspInit+0x208>)
 80016a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016ac:	4a60      	ldr	r2, [pc, #384]	@ (8001830 <HAL_DCMI_MspInit+0x208>)
 80016ae:	f043 0304 	orr.w	r3, r3, #4
 80016b2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016b6:	4b5e      	ldr	r3, [pc, #376]	@ (8001830 <HAL_DCMI_MspInit+0x208>)
 80016b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016bc:	f003 0304 	and.w	r3, r3, #4
 80016c0:	617b      	str	r3, [r7, #20]
 80016c2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016c4:	4b5a      	ldr	r3, [pc, #360]	@ (8001830 <HAL_DCMI_MspInit+0x208>)
 80016c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016ca:	4a59      	ldr	r2, [pc, #356]	@ (8001830 <HAL_DCMI_MspInit+0x208>)
 80016cc:	f043 0308 	orr.w	r3, r3, #8
 80016d0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016d4:	4b56      	ldr	r3, [pc, #344]	@ (8001830 <HAL_DCMI_MspInit+0x208>)
 80016d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016da:	f003 0308 	and.w	r3, r3, #8
 80016de:	613b      	str	r3, [r7, #16]
 80016e0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016e2:	4b53      	ldr	r3, [pc, #332]	@ (8001830 <HAL_DCMI_MspInit+0x208>)
 80016e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016e8:	4a51      	ldr	r2, [pc, #324]	@ (8001830 <HAL_DCMI_MspInit+0x208>)
 80016ea:	f043 0302 	orr.w	r3, r3, #2
 80016ee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016f2:	4b4f      	ldr	r3, [pc, #316]	@ (8001830 <HAL_DCMI_MspInit+0x208>)
 80016f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016f8:	f003 0302 	and.w	r3, r3, #2
 80016fc:	60fb      	str	r3, [r7, #12]
 80016fe:	68fb      	ldr	r3, [r7, #12]
    PD3     ------> DCMI_D5
    PB7     ------> DCMI_VSYNC
    PE0     ------> DCMI_D2
    PE1     ------> DCMI_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_0
 8001700:	2373      	movs	r3, #115	@ 0x73
 8001702:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001704:	2302      	movs	r3, #2
 8001706:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001708:	2300      	movs	r3, #0
 800170a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800170c:	2300      	movs	r3, #0
 800170e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001710:	230d      	movs	r3, #13
 8001712:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001714:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001718:	4619      	mov	r1, r3
 800171a:	4846      	ldr	r0, [pc, #280]	@ (8001834 <HAL_DCMI_MspInit+0x20c>)
 800171c:	f004 fd44 	bl	80061a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001720:	2350      	movs	r3, #80	@ 0x50
 8001722:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001724:	2302      	movs	r3, #2
 8001726:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001728:	2300      	movs	r3, #0
 800172a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800172c:	2300      	movs	r3, #0
 800172e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001730:	230d      	movs	r3, #13
 8001732:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001734:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001738:	4619      	mov	r1, r3
 800173a:	483f      	ldr	r0, [pc, #252]	@ (8001838 <HAL_DCMI_MspInit+0x210>)
 800173c:	f004 fd34 	bl	80061a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001740:	23c0      	movs	r3, #192	@ 0xc0
 8001742:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001744:	2302      	movs	r3, #2
 8001746:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001748:	2300      	movs	r3, #0
 800174a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800174c:	2300      	movs	r3, #0
 800174e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001750:	230d      	movs	r3, #13
 8001752:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001754:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001758:	4619      	mov	r1, r3
 800175a:	4838      	ldr	r0, [pc, #224]	@ (800183c <HAL_DCMI_MspInit+0x214>)
 800175c:	f004 fd24 	bl	80061a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001760:	2308      	movs	r3, #8
 8001762:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001764:	2302      	movs	r3, #2
 8001766:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001768:	2300      	movs	r3, #0
 800176a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800176c:	2300      	movs	r3, #0
 800176e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001770:	230d      	movs	r3, #13
 8001772:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001774:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001778:	4619      	mov	r1, r3
 800177a:	4831      	ldr	r0, [pc, #196]	@ (8001840 <HAL_DCMI_MspInit+0x218>)
 800177c:	f004 fd14 	bl	80061a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001780:	2380      	movs	r3, #128	@ 0x80
 8001782:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001784:	2302      	movs	r3, #2
 8001786:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001788:	2300      	movs	r3, #0
 800178a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800178c:	2300      	movs	r3, #0
 800178e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001790:	230d      	movs	r3, #13
 8001792:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001794:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001798:	4619      	mov	r1, r3
 800179a:	482a      	ldr	r0, [pc, #168]	@ (8001844 <HAL_DCMI_MspInit+0x21c>)
 800179c:	f004 fd04 	bl	80061a8 <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA1_Stream0;
 80017a0:	4b29      	ldr	r3, [pc, #164]	@ (8001848 <HAL_DCMI_MspInit+0x220>)
 80017a2:	4a2a      	ldr	r2, [pc, #168]	@ (800184c <HAL_DCMI_MspInit+0x224>)
 80017a4:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Request = DMA_REQUEST_DCMI;
 80017a6:	4b28      	ldr	r3, [pc, #160]	@ (8001848 <HAL_DCMI_MspInit+0x220>)
 80017a8:	224b      	movs	r2, #75	@ 0x4b
 80017aa:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017ac:	4b26      	ldr	r3, [pc, #152]	@ (8001848 <HAL_DCMI_MspInit+0x220>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 80017b2:	4b25      	ldr	r3, [pc, #148]	@ (8001848 <HAL_DCMI_MspInit+0x220>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 80017b8:	4b23      	ldr	r3, [pc, #140]	@ (8001848 <HAL_DCMI_MspInit+0x220>)
 80017ba:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80017be:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80017c0:	4b21      	ldr	r3, [pc, #132]	@ (8001848 <HAL_DCMI_MspInit+0x220>)
 80017c2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80017c6:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80017c8:	4b1f      	ldr	r3, [pc, #124]	@ (8001848 <HAL_DCMI_MspInit+0x220>)
 80017ca:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80017ce:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_CIRCULAR;
 80017d0:	4b1d      	ldr	r3, [pc, #116]	@ (8001848 <HAL_DCMI_MspInit+0x220>)
 80017d2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80017d6:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80017d8:	4b1b      	ldr	r3, [pc, #108]	@ (8001848 <HAL_DCMI_MspInit+0x220>)
 80017da:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80017de:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80017e0:	4b19      	ldr	r3, [pc, #100]	@ (8001848 <HAL_DCMI_MspInit+0x220>)
 80017e2:	2204      	movs	r2, #4
 80017e4:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_dcmi.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80017e6:	4b18      	ldr	r3, [pc, #96]	@ (8001848 <HAL_DCMI_MspInit+0x220>)
 80017e8:	2203      	movs	r2, #3
 80017ea:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_dcmi.Init.MemBurst = DMA_MBURST_SINGLE;
 80017ec:	4b16      	ldr	r3, [pc, #88]	@ (8001848 <HAL_DCMI_MspInit+0x220>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_dcmi.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80017f2:	4b15      	ldr	r3, [pc, #84]	@ (8001848 <HAL_DCMI_MspInit+0x220>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 80017f8:	4813      	ldr	r0, [pc, #76]	@ (8001848 <HAL_DCMI_MspInit+0x220>)
 80017fa:	f001 f9db 	bl	8002bb4 <HAL_DMA_Init>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <HAL_DCMI_MspInit+0x1e0>
    {
      Error_Handler();
 8001804:	f7ff fef0 	bl	80015e8 <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	4a0f      	ldr	r2, [pc, #60]	@ (8001848 <HAL_DCMI_MspInit+0x220>)
 800180c:	649a      	str	r2, [r3, #72]	@ 0x48
 800180e:	4a0e      	ldr	r2, [pc, #56]	@ (8001848 <HAL_DCMI_MspInit+0x220>)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6393      	str	r3, [r2, #56]	@ 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 0, 0);
 8001814:	2200      	movs	r2, #0
 8001816:	2100      	movs	r1, #0
 8001818:	204e      	movs	r0, #78	@ 0x4e
 800181a:	f000 fe28 	bl	800246e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 800181e:	204e      	movs	r0, #78	@ 0x4e
 8001820:	f000 fe3f 	bl	80024a2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END DCMI_MspInit 1 */

  }

}
 8001824:	bf00      	nop
 8001826:	3738      	adds	r7, #56	@ 0x38
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	48020000 	.word	0x48020000
 8001830:	58024400 	.word	0x58024400
 8001834:	58021000 	.word	0x58021000
 8001838:	58020000 	.word	0x58020000
 800183c:	58020800 	.word	0x58020800
 8001840:	58020c00 	.word	0x58020c00
 8001844:	58020400 	.word	0x58020400
 8001848:	240001c0 	.word	0x240001c0
 800184c:	40020010 	.word	0x40020010

08001850 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b0ba      	sub	sp, #232	@ 0xe8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001858:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800185c:	2200      	movs	r2, #0
 800185e:	601a      	str	r2, [r3, #0]
 8001860:	605a      	str	r2, [r3, #4]
 8001862:	609a      	str	r2, [r3, #8]
 8001864:	60da      	str	r2, [r3, #12]
 8001866:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001868:	f107 0310 	add.w	r3, r7, #16
 800186c:	22c0      	movs	r2, #192	@ 0xc0
 800186e:	2100      	movs	r1, #0
 8001870:	4618      	mov	r0, r3
 8001872:	f010 ffd3 	bl	801281c <memset>
  if(hi2c->Instance==I2C2)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a38      	ldr	r2, [pc, #224]	@ (800195c <HAL_I2C_MspInit+0x10c>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d169      	bne.n	8001954 <HAL_I2C_MspInit+0x104>

    /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001880:	f04f 0208 	mov.w	r2, #8
 8001884:	f04f 0300 	mov.w	r3, #0
 8001888:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 2;
 800188c:	2302      	movs	r3, #2
 800188e:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 12;
 8001890:	230c      	movs	r3, #12
 8001892:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8001894:	2302      	movs	r3, #2
 8001896:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8001898:	2302      	movs	r3, #2
 800189a:	647b      	str	r3, [r7, #68]	@ 0x44
    PeriphClkInitStruct.PLL3.PLL3R = 3;
 800189c:	2303      	movs	r3, #3
 800189e:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 80018a0:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80018a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 80018a6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80018aa:	653b      	str	r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 80018ac:	2300      	movs	r3, #0
 80018ae:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_PLL3;
 80018b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018b4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018b8:	f107 0310 	add.w	r3, r7, #16
 80018bc:	4618      	mov	r0, r3
 80018be:	f008 fdd9 	bl	800a474 <HAL_RCCEx_PeriphCLKConfig>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d001      	beq.n	80018cc <HAL_I2C_MspInit+0x7c>
    {
      Error_Handler();
 80018c8:	f7ff fe8e 	bl	80015e8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018cc:	4b24      	ldr	r3, [pc, #144]	@ (8001960 <HAL_I2C_MspInit+0x110>)
 80018ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018d2:	4a23      	ldr	r2, [pc, #140]	@ (8001960 <HAL_I2C_MspInit+0x110>)
 80018d4:	f043 0302 	orr.w	r3, r3, #2
 80018d8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80018dc:	4b20      	ldr	r3, [pc, #128]	@ (8001960 <HAL_I2C_MspInit+0x110>)
 80018de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018e2:	f003 0302 	and.w	r3, r3, #2
 80018e6:	60fb      	str	r3, [r7, #12]
 80018e8:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80018ea:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80018ee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018f2:	2312      	movs	r3, #18
 80018f4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018f8:	2301      	movs	r3, #1
 80018fa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018fe:	2303      	movs	r3, #3
 8001900:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001904:	2304      	movs	r3, #4
 8001906:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800190a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800190e:	4619      	mov	r1, r3
 8001910:	4814      	ldr	r0, [pc, #80]	@ (8001964 <HAL_I2C_MspInit+0x114>)
 8001912:	f004 fc49 	bl	80061a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001916:	4b12      	ldr	r3, [pc, #72]	@ (8001960 <HAL_I2C_MspInit+0x110>)
 8001918:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800191c:	4a10      	ldr	r2, [pc, #64]	@ (8001960 <HAL_I2C_MspInit+0x110>)
 800191e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001922:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001926:	4b0e      	ldr	r3, [pc, #56]	@ (8001960 <HAL_I2C_MspInit+0x110>)
 8001928:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800192c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001930:	60bb      	str	r3, [r7, #8]
 8001932:	68bb      	ldr	r3, [r7, #8]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8001934:	2200      	movs	r2, #0
 8001936:	2100      	movs	r1, #0
 8001938:	2021      	movs	r0, #33	@ 0x21
 800193a:	f000 fd98 	bl	800246e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 800193e:	2021      	movs	r0, #33	@ 0x21
 8001940:	f000 fdaf 	bl	80024a2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8001944:	2200      	movs	r2, #0
 8001946:	2100      	movs	r1, #0
 8001948:	2022      	movs	r0, #34	@ 0x22
 800194a:	f000 fd90 	bl	800246e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 800194e:	2022      	movs	r0, #34	@ 0x22
 8001950:	f000 fda7 	bl	80024a2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 8001954:	bf00      	nop
 8001956:	37e8      	adds	r7, #232	@ 0xe8
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	40005800 	.word	0x40005800
 8001960:	58024400 	.word	0x58024400
 8001964:	58020400 	.word	0x58020400

08001968 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b0bc      	sub	sp, #240	@ 0xf0
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001970:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001974:	2200      	movs	r2, #0
 8001976:	601a      	str	r2, [r3, #0]
 8001978:	605a      	str	r2, [r3, #4]
 800197a:	609a      	str	r2, [r3, #8]
 800197c:	60da      	str	r2, [r3, #12]
 800197e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001980:	f107 0318 	add.w	r3, r7, #24
 8001984:	22c0      	movs	r2, #192	@ 0xc0
 8001986:	2100      	movs	r1, #0
 8001988:	4618      	mov	r0, r3
 800198a:	f010 ff47 	bl	801281c <memset>
  if(hspi->Instance==SPI2)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a38      	ldr	r2, [pc, #224]	@ (8001a74 <HAL_SPI_MspInit+0x10c>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d169      	bne.n	8001a6c <HAL_SPI_MspInit+0x104>

    /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8001998:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800199c:	f04f 0300 	mov.w	r3, #0
 80019a0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80019a4:	2300      	movs	r3, #0
 80019a6:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019a8:	f107 0318 	add.w	r3, r7, #24
 80019ac:	4618      	mov	r0, r3
 80019ae:	f008 fd61 	bl	800a474 <HAL_RCCEx_PeriphCLKConfig>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 80019b8:	f7ff fe16 	bl	80015e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80019bc:	4b2e      	ldr	r3, [pc, #184]	@ (8001a78 <HAL_SPI_MspInit+0x110>)
 80019be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80019c2:	4a2d      	ldr	r2, [pc, #180]	@ (8001a78 <HAL_SPI_MspInit+0x110>)
 80019c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019c8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80019cc:	4b2a      	ldr	r3, [pc, #168]	@ (8001a78 <HAL_SPI_MspInit+0x110>)
 80019ce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80019d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019d6:	617b      	str	r3, [r7, #20]
 80019d8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019da:	4b27      	ldr	r3, [pc, #156]	@ (8001a78 <HAL_SPI_MspInit+0x110>)
 80019dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019e0:	4a25      	ldr	r2, [pc, #148]	@ (8001a78 <HAL_SPI_MspInit+0x110>)
 80019e2:	f043 0304 	orr.w	r3, r3, #4
 80019e6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80019ea:	4b23      	ldr	r3, [pc, #140]	@ (8001a78 <HAL_SPI_MspInit+0x110>)
 80019ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019f0:	f003 0304 	and.w	r3, r3, #4
 80019f4:	613b      	str	r3, [r7, #16]
 80019f6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019f8:	4b1f      	ldr	r3, [pc, #124]	@ (8001a78 <HAL_SPI_MspInit+0x110>)
 80019fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019fe:	4a1e      	ldr	r2, [pc, #120]	@ (8001a78 <HAL_SPI_MspInit+0x110>)
 8001a00:	f043 0302 	orr.w	r3, r3, #2
 8001a04:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a08:	4b1b      	ldr	r3, [pc, #108]	@ (8001a78 <HAL_SPI_MspInit+0x110>)
 8001a0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a0e:	f003 0302 	and.w	r3, r3, #2
 8001a12:	60fb      	str	r3, [r7, #12]
 8001a14:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PC2_C     ------> SPI2_MISO
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8001a16:	2306      	movs	r3, #6
 8001a18:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a1c:	2302      	movs	r3, #2
 8001a1e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a22:	2300      	movs	r3, #0
 8001a24:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001a2e:	2305      	movs	r3, #5
 8001a30:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a34:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001a38:	4619      	mov	r1, r3
 8001a3a:	4810      	ldr	r0, [pc, #64]	@ (8001a7c <HAL_SPI_MspInit+0x114>)
 8001a3c:	f004 fbb4 	bl	80061a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001a40:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a44:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a48:	2302      	movs	r3, #2
 8001a4a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a54:	2300      	movs	r3, #0
 8001a56:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001a5a:	2305      	movs	r3, #5
 8001a5c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a60:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001a64:	4619      	mov	r1, r3
 8001a66:	4806      	ldr	r0, [pc, #24]	@ (8001a80 <HAL_SPI_MspInit+0x118>)
 8001a68:	f004 fb9e 	bl	80061a8 <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8001a6c:	bf00      	nop
 8001a6e:	37f0      	adds	r7, #240	@ 0xf0
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	40003800 	.word	0x40003800
 8001a78:	58024400 	.word	0x58024400
 8001a7c:	58020800 	.word	0x58020800
 8001a80:	58020400 	.word	0x58020400

08001a84 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b087      	sub	sp, #28
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a2b      	ldr	r2, [pc, #172]	@ (8001b40 <HAL_TIM_PWM_MspInit+0xbc>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d10f      	bne.n	8001ab6 <HAL_TIM_PWM_MspInit+0x32>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a96:	4b2b      	ldr	r3, [pc, #172]	@ (8001b44 <HAL_TIM_PWM_MspInit+0xc0>)
 8001a98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001a9c:	4a29      	ldr	r2, [pc, #164]	@ (8001b44 <HAL_TIM_PWM_MspInit+0xc0>)
 8001a9e:	f043 0301 	orr.w	r3, r3, #1
 8001aa2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001aa6:	4b27      	ldr	r3, [pc, #156]	@ (8001b44 <HAL_TIM_PWM_MspInit+0xc0>)
 8001aa8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001aac:	f003 0301 	and.w	r3, r3, #1
 8001ab0:	617b      	str	r3, [r7, #20]
 8001ab2:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001ab4:	e03d      	b.n	8001b32 <HAL_TIM_PWM_MspInit+0xae>
  else if(htim_pwm->Instance==TIM2)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001abe:	d10f      	bne.n	8001ae0 <HAL_TIM_PWM_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ac0:	4b20      	ldr	r3, [pc, #128]	@ (8001b44 <HAL_TIM_PWM_MspInit+0xc0>)
 8001ac2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001ac6:	4a1f      	ldr	r2, [pc, #124]	@ (8001b44 <HAL_TIM_PWM_MspInit+0xc0>)
 8001ac8:	f043 0301 	orr.w	r3, r3, #1
 8001acc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001ad0:	4b1c      	ldr	r3, [pc, #112]	@ (8001b44 <HAL_TIM_PWM_MspInit+0xc0>)
 8001ad2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001ad6:	f003 0301 	and.w	r3, r3, #1
 8001ada:	613b      	str	r3, [r7, #16]
 8001adc:	693b      	ldr	r3, [r7, #16]
}
 8001ade:	e028      	b.n	8001b32 <HAL_TIM_PWM_MspInit+0xae>
  else if(htim_pwm->Instance==TIM3)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a18      	ldr	r2, [pc, #96]	@ (8001b48 <HAL_TIM_PWM_MspInit+0xc4>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d10f      	bne.n	8001b0a <HAL_TIM_PWM_MspInit+0x86>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001aea:	4b16      	ldr	r3, [pc, #88]	@ (8001b44 <HAL_TIM_PWM_MspInit+0xc0>)
 8001aec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001af0:	4a14      	ldr	r2, [pc, #80]	@ (8001b44 <HAL_TIM_PWM_MspInit+0xc0>)
 8001af2:	f043 0302 	orr.w	r3, r3, #2
 8001af6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001afa:	4b12      	ldr	r3, [pc, #72]	@ (8001b44 <HAL_TIM_PWM_MspInit+0xc0>)
 8001afc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001b00:	f003 0302 	and.w	r3, r3, #2
 8001b04:	60fb      	str	r3, [r7, #12]
 8001b06:	68fb      	ldr	r3, [r7, #12]
}
 8001b08:	e013      	b.n	8001b32 <HAL_TIM_PWM_MspInit+0xae>
  else if(htim_pwm->Instance==TIM4)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a0f      	ldr	r2, [pc, #60]	@ (8001b4c <HAL_TIM_PWM_MspInit+0xc8>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d10e      	bne.n	8001b32 <HAL_TIM_PWM_MspInit+0xae>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001b14:	4b0b      	ldr	r3, [pc, #44]	@ (8001b44 <HAL_TIM_PWM_MspInit+0xc0>)
 8001b16:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001b1a:	4a0a      	ldr	r2, [pc, #40]	@ (8001b44 <HAL_TIM_PWM_MspInit+0xc0>)
 8001b1c:	f043 0304 	orr.w	r3, r3, #4
 8001b20:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001b24:	4b07      	ldr	r3, [pc, #28]	@ (8001b44 <HAL_TIM_PWM_MspInit+0xc0>)
 8001b26:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001b2a:	f003 0304 	and.w	r3, r3, #4
 8001b2e:	60bb      	str	r3, [r7, #8]
 8001b30:	68bb      	ldr	r3, [r7, #8]
}
 8001b32:	bf00      	nop
 8001b34:	371c      	adds	r7, #28
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr
 8001b3e:	bf00      	nop
 8001b40:	40010000 	.word	0x40010000
 8001b44:	58024400 	.word	0x58024400
 8001b48:	40000400 	.word	0x40000400
 8001b4c:	40000800 	.word	0x40000800

08001b50 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b084      	sub	sp, #16
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a0e      	ldr	r2, [pc, #56]	@ (8001b98 <HAL_TIM_Base_MspInit+0x48>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d116      	bne.n	8001b90 <HAL_TIM_Base_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM14_MspInit 0 */

    /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001b62:	4b0e      	ldr	r3, [pc, #56]	@ (8001b9c <HAL_TIM_Base_MspInit+0x4c>)
 8001b64:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001b68:	4a0c      	ldr	r2, [pc, #48]	@ (8001b9c <HAL_TIM_Base_MspInit+0x4c>)
 8001b6a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b6e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001b72:	4b0a      	ldr	r3, [pc, #40]	@ (8001b9c <HAL_TIM_Base_MspInit+0x4c>)
 8001b74:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001b78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b7c:	60fb      	str	r3, [r7, #12]
 8001b7e:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8001b80:	2200      	movs	r2, #0
 8001b82:	2100      	movs	r1, #0
 8001b84:	202d      	movs	r0, #45	@ 0x2d
 8001b86:	f000 fc72 	bl	800246e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8001b8a:	202d      	movs	r0, #45	@ 0x2d
 8001b8c:	f000 fc89 	bl	80024a2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM14_MspInit 1 */

  }

}
 8001b90:	bf00      	nop
 8001b92:	3710      	adds	r7, #16
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	40002000 	.word	0x40002000
 8001b9c:	58024400 	.word	0x58024400

08001ba0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b08c      	sub	sp, #48	@ 0x30
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba8:	f107 031c 	add.w	r3, r7, #28
 8001bac:	2200      	movs	r2, #0
 8001bae:	601a      	str	r2, [r3, #0]
 8001bb0:	605a      	str	r2, [r3, #4]
 8001bb2:	609a      	str	r2, [r3, #8]
 8001bb4:	60da      	str	r2, [r3, #12]
 8001bb6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a5d      	ldr	r2, [pc, #372]	@ (8001d34 <HAL_TIM_MspPostInit+0x194>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d120      	bne.n	8001c04 <HAL_TIM_MspPostInit+0x64>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001bc2:	4b5d      	ldr	r3, [pc, #372]	@ (8001d38 <HAL_TIM_MspPostInit+0x198>)
 8001bc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001bc8:	4a5b      	ldr	r2, [pc, #364]	@ (8001d38 <HAL_TIM_MspPostInit+0x198>)
 8001bca:	f043 0310 	orr.w	r3, r3, #16
 8001bce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001bd2:	4b59      	ldr	r3, [pc, #356]	@ (8001d38 <HAL_TIM_MspPostInit+0x198>)
 8001bd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001bd8:	f003 0310 	and.w	r3, r3, #16
 8001bdc:	61bb      	str	r3, [r7, #24]
 8001bde:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001be0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001be4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be6:	2302      	movs	r3, #2
 8001be8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bea:	2300      	movs	r3, #0
 8001bec:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001bf6:	f107 031c 	add.w	r3, r7, #28
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	484f      	ldr	r0, [pc, #316]	@ (8001d3c <HAL_TIM_MspPostInit+0x19c>)
 8001bfe:	f004 fad3 	bl	80061a8 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM14_MspPostInit 1 */

    /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8001c02:	e093      	b.n	8001d2c <HAL_TIM_MspPostInit+0x18c>
  else if(htim->Instance==TIM2)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c0c:	d11f      	bne.n	8001c4e <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c0e:	4b4a      	ldr	r3, [pc, #296]	@ (8001d38 <HAL_TIM_MspPostInit+0x198>)
 8001c10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c14:	4a48      	ldr	r2, [pc, #288]	@ (8001d38 <HAL_TIM_MspPostInit+0x198>)
 8001c16:	f043 0301 	orr.w	r3, r3, #1
 8001c1a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001c1e:	4b46      	ldr	r3, [pc, #280]	@ (8001d38 <HAL_TIM_MspPostInit+0x198>)
 8001c20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c24:	f003 0301 	and.w	r3, r3, #1
 8001c28:	617b      	str	r3, [r7, #20]
 8001c2a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001c2c:	2307      	movs	r3, #7
 8001c2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c30:	2302      	movs	r3, #2
 8001c32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c34:	2300      	movs	r3, #0
 8001c36:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c40:	f107 031c 	add.w	r3, r7, #28
 8001c44:	4619      	mov	r1, r3
 8001c46:	483e      	ldr	r0, [pc, #248]	@ (8001d40 <HAL_TIM_MspPostInit+0x1a0>)
 8001c48:	f004 faae 	bl	80061a8 <HAL_GPIO_Init>
}
 8001c4c:	e06e      	b.n	8001d2c <HAL_TIM_MspPostInit+0x18c>
  else if(htim->Instance==TIM3)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a3c      	ldr	r2, [pc, #240]	@ (8001d44 <HAL_TIM_MspPostInit+0x1a4>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d11f      	bne.n	8001c98 <HAL_TIM_MspPostInit+0xf8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c58:	4b37      	ldr	r3, [pc, #220]	@ (8001d38 <HAL_TIM_MspPostInit+0x198>)
 8001c5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c5e:	4a36      	ldr	r2, [pc, #216]	@ (8001d38 <HAL_TIM_MspPostInit+0x198>)
 8001c60:	f043 0302 	orr.w	r3, r3, #2
 8001c64:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001c68:	4b33      	ldr	r3, [pc, #204]	@ (8001d38 <HAL_TIM_MspPostInit+0x198>)
 8001c6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c6e:	f003 0302 	and.w	r3, r3, #2
 8001c72:	613b      	str	r3, [r7, #16]
 8001c74:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001c76:	2303      	movs	r3, #3
 8001c78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c7a:	2302      	movs	r3, #2
 8001c7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c82:	2300      	movs	r3, #0
 8001c84:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001c86:	2302      	movs	r3, #2
 8001c88:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c8a:	f107 031c 	add.w	r3, r7, #28
 8001c8e:	4619      	mov	r1, r3
 8001c90:	482d      	ldr	r0, [pc, #180]	@ (8001d48 <HAL_TIM_MspPostInit+0x1a8>)
 8001c92:	f004 fa89 	bl	80061a8 <HAL_GPIO_Init>
}
 8001c96:	e049      	b.n	8001d2c <HAL_TIM_MspPostInit+0x18c>
  else if(htim->Instance==TIM4)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a2b      	ldr	r2, [pc, #172]	@ (8001d4c <HAL_TIM_MspPostInit+0x1ac>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d120      	bne.n	8001ce4 <HAL_TIM_MspPostInit+0x144>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ca2:	4b25      	ldr	r3, [pc, #148]	@ (8001d38 <HAL_TIM_MspPostInit+0x198>)
 8001ca4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ca8:	4a23      	ldr	r2, [pc, #140]	@ (8001d38 <HAL_TIM_MspPostInit+0x198>)
 8001caa:	f043 0302 	orr.w	r3, r3, #2
 8001cae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001cb2:	4b21      	ldr	r3, [pc, #132]	@ (8001d38 <HAL_TIM_MspPostInit+0x198>)
 8001cb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cb8:	f003 0302 	and.w	r3, r3, #2
 8001cbc:	60fb      	str	r3, [r7, #12]
 8001cbe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001cc0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001cc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc6:	2302      	movs	r3, #2
 8001cc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001cd2:	2302      	movs	r3, #2
 8001cd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cd6:	f107 031c 	add.w	r3, r7, #28
 8001cda:	4619      	mov	r1, r3
 8001cdc:	481a      	ldr	r0, [pc, #104]	@ (8001d48 <HAL_TIM_MspPostInit+0x1a8>)
 8001cde:	f004 fa63 	bl	80061a8 <HAL_GPIO_Init>
}
 8001ce2:	e023      	b.n	8001d2c <HAL_TIM_MspPostInit+0x18c>
  else if(htim->Instance==TIM14)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a19      	ldr	r2, [pc, #100]	@ (8001d50 <HAL_TIM_MspPostInit+0x1b0>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d11e      	bne.n	8001d2c <HAL_TIM_MspPostInit+0x18c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cee:	4b12      	ldr	r3, [pc, #72]	@ (8001d38 <HAL_TIM_MspPostInit+0x198>)
 8001cf0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cf4:	4a10      	ldr	r2, [pc, #64]	@ (8001d38 <HAL_TIM_MspPostInit+0x198>)
 8001cf6:	f043 0301 	orr.w	r3, r3, #1
 8001cfa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001cfe:	4b0e      	ldr	r3, [pc, #56]	@ (8001d38 <HAL_TIM_MspPostInit+0x198>)
 8001d00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d04:	f003 0301 	and.w	r3, r3, #1
 8001d08:	60bb      	str	r3, [r7, #8]
 8001d0a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001d0c:	2380      	movs	r3, #128	@ 0x80
 8001d0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d10:	2302      	movs	r3, #2
 8001d12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d14:	2300      	movs	r3, #0
 8001d16:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8001d1c:	2309      	movs	r3, #9
 8001d1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d20:	f107 031c 	add.w	r3, r7, #28
 8001d24:	4619      	mov	r1, r3
 8001d26:	4806      	ldr	r0, [pc, #24]	@ (8001d40 <HAL_TIM_MspPostInit+0x1a0>)
 8001d28:	f004 fa3e 	bl	80061a8 <HAL_GPIO_Init>
}
 8001d2c:	bf00      	nop
 8001d2e:	3730      	adds	r7, #48	@ 0x30
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	40010000 	.word	0x40010000
 8001d38:	58024400 	.word	0x58024400
 8001d3c:	58021000 	.word	0x58021000
 8001d40:	58020000 	.word	0x58020000
 8001d44:	40000400 	.word	0x40000400
 8001d48:	58020400 	.word	0x58020400
 8001d4c:	40000800 	.word	0x40000800
 8001d50:	40002000 	.word	0x40002000

08001d54 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b0ba      	sub	sp, #232	@ 0xe8
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d5c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001d60:	2200      	movs	r2, #0
 8001d62:	601a      	str	r2, [r3, #0]
 8001d64:	605a      	str	r2, [r3, #4]
 8001d66:	609a      	str	r2, [r3, #8]
 8001d68:	60da      	str	r2, [r3, #12]
 8001d6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d6c:	f107 0310 	add.w	r3, r7, #16
 8001d70:	22c0      	movs	r2, #192	@ 0xc0
 8001d72:	2100      	movs	r1, #0
 8001d74:	4618      	mov	r0, r3
 8001d76:	f010 fd51 	bl	801281c <memset>
  if(huart->Instance==USART1)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a27      	ldr	r2, [pc, #156]	@ (8001e1c <HAL_UART_MspInit+0xc8>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d146      	bne.n	8001e12 <HAL_UART_MspInit+0xbe>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001d84:	f04f 0201 	mov.w	r2, #1
 8001d88:	f04f 0300 	mov.w	r3, #0
 8001d8c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8001d90:	2300      	movs	r3, #0
 8001d92:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d96:	f107 0310 	add.w	r3, r7, #16
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f008 fb6a 	bl	800a474 <HAL_RCCEx_PeriphCLKConfig>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d001      	beq.n	8001daa <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001da6:	f7ff fc1f 	bl	80015e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001daa:	4b1d      	ldr	r3, [pc, #116]	@ (8001e20 <HAL_UART_MspInit+0xcc>)
 8001dac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001db0:	4a1b      	ldr	r2, [pc, #108]	@ (8001e20 <HAL_UART_MspInit+0xcc>)
 8001db2:	f043 0310 	orr.w	r3, r3, #16
 8001db6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001dba:	4b19      	ldr	r3, [pc, #100]	@ (8001e20 <HAL_UART_MspInit+0xcc>)
 8001dbc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001dc0:	f003 0310 	and.w	r3, r3, #16
 8001dc4:	60fb      	str	r3, [r7, #12]
 8001dc6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dc8:	4b15      	ldr	r3, [pc, #84]	@ (8001e20 <HAL_UART_MspInit+0xcc>)
 8001dca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dce:	4a14      	ldr	r2, [pc, #80]	@ (8001e20 <HAL_UART_MspInit+0xcc>)
 8001dd0:	f043 0302 	orr.w	r3, r3, #2
 8001dd4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001dd8:	4b11      	ldr	r3, [pc, #68]	@ (8001e20 <HAL_UART_MspInit+0xcc>)
 8001dda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dde:	f003 0302 	and.w	r3, r3, #2
 8001de2:	60bb      	str	r3, [r7, #8]
 8001de4:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001de6:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001dea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dee:	2302      	movs	r3, #2
 8001df0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df4:	2300      	movs	r3, #0
 8001df6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001e00:	2304      	movs	r3, #4
 8001e02:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e06:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	4805      	ldr	r0, [pc, #20]	@ (8001e24 <HAL_UART_MspInit+0xd0>)
 8001e0e:	f004 f9cb 	bl	80061a8 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001e12:	bf00      	nop
 8001e14:	37e8      	adds	r7, #232	@ 0xe8
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	40011000 	.word	0x40011000
 8001e20:	58024400 	.word	0x58024400
 8001e24:	58020400 	.word	0x58020400

08001e28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e2c:	bf00      	nop
 8001e2e:	e7fd      	b.n	8001e2c <NMI_Handler+0x4>

08001e30 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e34:	bf00      	nop
 8001e36:	e7fd      	b.n	8001e34 <HardFault_Handler+0x4>

08001e38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e3c:	bf00      	nop
 8001e3e:	e7fd      	b.n	8001e3c <MemManage_Handler+0x4>

08001e40 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e44:	bf00      	nop
 8001e46:	e7fd      	b.n	8001e44 <BusFault_Handler+0x4>

08001e48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e4c:	bf00      	nop
 8001e4e:	e7fd      	b.n	8001e4c <UsageFault_Handler+0x4>

08001e50 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e54:	bf00      	nop
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr

08001e5e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e5e:	b480      	push	{r7}
 8001e60:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e62:	bf00      	nop
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr

08001e6c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e70:	bf00      	nop
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr

08001e7a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e7a:	b580      	push	{r7, lr}
 8001e7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e7e:	f000 f9cb 	bl	8002218 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e82:	bf00      	nop
 8001e84:	bd80      	pop	{r7, pc}
	...

08001e88 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 8001e8c:	4802      	ldr	r0, [pc, #8]	@ (8001e98 <DMA1_Stream0_IRQHandler+0x10>)
 8001e8e:	f002 f9bb 	bl	8004208 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001e92:	bf00      	nop
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	240001c0 	.word	0x240001c0

08001e9c <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8001ea0:	4802      	ldr	r0, [pc, #8]	@ (8001eac <I2C2_EV_IRQHandler+0x10>)
 8001ea2:	f004 fdf5 	bl	8006a90 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8001ea6:	bf00      	nop
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	24000238 	.word	0x24000238

08001eb0 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8001eb4:	4802      	ldr	r0, [pc, #8]	@ (8001ec0 <I2C2_ER_IRQHandler+0x10>)
 8001eb6:	f004 fe05 	bl	8006ac4 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8001eba:	bf00      	nop
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	24000238 	.word	0x24000238

08001ec4 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001ec8:	4802      	ldr	r0, [pc, #8]	@ (8001ed4 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8001eca:	f00a fbfb 	bl	800c6c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8001ece:	bf00      	nop
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	24000444 	.word	0x24000444

08001ed8 <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 8001edc:	4802      	ldr	r0, [pc, #8]	@ (8001ee8 <DCMI_IRQHandler+0x10>)
 8001ede:	f000 fd0f 	bl	8002900 <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  /* USER CODE END DCMI_IRQn 1 */
}
 8001ee2:	bf00      	nop
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	24000170 	.word	0x24000170

08001eec <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001ef0:	4802      	ldr	r0, [pc, #8]	@ (8001efc <OTG_FS_IRQHandler+0x10>)
 8001ef2:	f006 f92f 	bl	8008154 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001ef6:	bf00      	nop
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	24001a0c 	.word	0x24001a0c

08001f00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b086      	sub	sp, #24
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f08:	4a14      	ldr	r2, [pc, #80]	@ (8001f5c <_sbrk+0x5c>)
 8001f0a:	4b15      	ldr	r3, [pc, #84]	@ (8001f60 <_sbrk+0x60>)
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f14:	4b13      	ldr	r3, [pc, #76]	@ (8001f64 <_sbrk+0x64>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d102      	bne.n	8001f22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f1c:	4b11      	ldr	r3, [pc, #68]	@ (8001f64 <_sbrk+0x64>)
 8001f1e:	4a12      	ldr	r2, [pc, #72]	@ (8001f68 <_sbrk+0x68>)
 8001f20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f22:	4b10      	ldr	r3, [pc, #64]	@ (8001f64 <_sbrk+0x64>)
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4413      	add	r3, r2
 8001f2a:	693a      	ldr	r2, [r7, #16]
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d207      	bcs.n	8001f40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f30:	f010 fc7c 	bl	801282c <__errno>
 8001f34:	4603      	mov	r3, r0
 8001f36:	220c      	movs	r2, #12
 8001f38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f3a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f3e:	e009      	b.n	8001f54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f40:	4b08      	ldr	r3, [pc, #32]	@ (8001f64 <_sbrk+0x64>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f46:	4b07      	ldr	r3, [pc, #28]	@ (8001f64 <_sbrk+0x64>)
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4413      	add	r3, r2
 8001f4e:	4a05      	ldr	r2, [pc, #20]	@ (8001f64 <_sbrk+0x64>)
 8001f50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f52:	68fb      	ldr	r3, [r7, #12]
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3718      	adds	r7, #24
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	24080000 	.word	0x24080000
 8001f60:	00000400 	.word	0x00000400
 8001f64:	24000524 	.word	0x24000524
 8001f68:	24002258 	.word	0x24002258

08001f6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001f70:	4b43      	ldr	r3, [pc, #268]	@ (8002080 <SystemInit+0x114>)
 8001f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f76:	4a42      	ldr	r2, [pc, #264]	@ (8002080 <SystemInit+0x114>)
 8001f78:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001f7c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001f80:	4b40      	ldr	r3, [pc, #256]	@ (8002084 <SystemInit+0x118>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 030f 	and.w	r3, r3, #15
 8001f88:	2b06      	cmp	r3, #6
 8001f8a:	d807      	bhi.n	8001f9c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001f8c:	4b3d      	ldr	r3, [pc, #244]	@ (8002084 <SystemInit+0x118>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f023 030f 	bic.w	r3, r3, #15
 8001f94:	4a3b      	ldr	r2, [pc, #236]	@ (8002084 <SystemInit+0x118>)
 8001f96:	f043 0307 	orr.w	r3, r3, #7
 8001f9a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001f9c:	4b3a      	ldr	r3, [pc, #232]	@ (8002088 <SystemInit+0x11c>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a39      	ldr	r2, [pc, #228]	@ (8002088 <SystemInit+0x11c>)
 8001fa2:	f043 0301 	orr.w	r3, r3, #1
 8001fa6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001fa8:	4b37      	ldr	r3, [pc, #220]	@ (8002088 <SystemInit+0x11c>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001fae:	4b36      	ldr	r3, [pc, #216]	@ (8002088 <SystemInit+0x11c>)
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	4935      	ldr	r1, [pc, #212]	@ (8002088 <SystemInit+0x11c>)
 8001fb4:	4b35      	ldr	r3, [pc, #212]	@ (800208c <SystemInit+0x120>)
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001fba:	4b32      	ldr	r3, [pc, #200]	@ (8002084 <SystemInit+0x118>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 0308 	and.w	r3, r3, #8
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d007      	beq.n	8001fd6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001fc6:	4b2f      	ldr	r3, [pc, #188]	@ (8002084 <SystemInit+0x118>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f023 030f 	bic.w	r3, r3, #15
 8001fce:	4a2d      	ldr	r2, [pc, #180]	@ (8002084 <SystemInit+0x118>)
 8001fd0:	f043 0307 	orr.w	r3, r3, #7
 8001fd4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001fd6:	4b2c      	ldr	r3, [pc, #176]	@ (8002088 <SystemInit+0x11c>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001fdc:	4b2a      	ldr	r3, [pc, #168]	@ (8002088 <SystemInit+0x11c>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001fe2:	4b29      	ldr	r3, [pc, #164]	@ (8002088 <SystemInit+0x11c>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001fe8:	4b27      	ldr	r3, [pc, #156]	@ (8002088 <SystemInit+0x11c>)
 8001fea:	4a29      	ldr	r2, [pc, #164]	@ (8002090 <SystemInit+0x124>)
 8001fec:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001fee:	4b26      	ldr	r3, [pc, #152]	@ (8002088 <SystemInit+0x11c>)
 8001ff0:	4a28      	ldr	r2, [pc, #160]	@ (8002094 <SystemInit+0x128>)
 8001ff2:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001ff4:	4b24      	ldr	r3, [pc, #144]	@ (8002088 <SystemInit+0x11c>)
 8001ff6:	4a28      	ldr	r2, [pc, #160]	@ (8002098 <SystemInit+0x12c>)
 8001ff8:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001ffa:	4b23      	ldr	r3, [pc, #140]	@ (8002088 <SystemInit+0x11c>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002000:	4b21      	ldr	r3, [pc, #132]	@ (8002088 <SystemInit+0x11c>)
 8002002:	4a25      	ldr	r2, [pc, #148]	@ (8002098 <SystemInit+0x12c>)
 8002004:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002006:	4b20      	ldr	r3, [pc, #128]	@ (8002088 <SystemInit+0x11c>)
 8002008:	2200      	movs	r2, #0
 800200a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800200c:	4b1e      	ldr	r3, [pc, #120]	@ (8002088 <SystemInit+0x11c>)
 800200e:	4a22      	ldr	r2, [pc, #136]	@ (8002098 <SystemInit+0x12c>)
 8002010:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002012:	4b1d      	ldr	r3, [pc, #116]	@ (8002088 <SystemInit+0x11c>)
 8002014:	2200      	movs	r2, #0
 8002016:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002018:	4b1b      	ldr	r3, [pc, #108]	@ (8002088 <SystemInit+0x11c>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a1a      	ldr	r2, [pc, #104]	@ (8002088 <SystemInit+0x11c>)
 800201e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002022:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002024:	4b18      	ldr	r3, [pc, #96]	@ (8002088 <SystemInit+0x11c>)
 8002026:	2200      	movs	r2, #0
 8002028:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800202a:	4b1c      	ldr	r3, [pc, #112]	@ (800209c <SystemInit+0x130>)
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	4b1c      	ldr	r3, [pc, #112]	@ (80020a0 <SystemInit+0x134>)
 8002030:	4013      	ands	r3, r2
 8002032:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002036:	d202      	bcs.n	800203e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002038:	4b1a      	ldr	r3, [pc, #104]	@ (80020a4 <SystemInit+0x138>)
 800203a:	2201      	movs	r2, #1
 800203c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 800203e:	4b12      	ldr	r3, [pc, #72]	@ (8002088 <SystemInit+0x11c>)
 8002040:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002044:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002048:	2b00      	cmp	r3, #0
 800204a:	d113      	bne.n	8002074 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 800204c:	4b0e      	ldr	r3, [pc, #56]	@ (8002088 <SystemInit+0x11c>)
 800204e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002052:	4a0d      	ldr	r2, [pc, #52]	@ (8002088 <SystemInit+0x11c>)
 8002054:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002058:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800205c:	4b12      	ldr	r3, [pc, #72]	@ (80020a8 <SystemInit+0x13c>)
 800205e:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002062:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8002064:	4b08      	ldr	r3, [pc, #32]	@ (8002088 <SystemInit+0x11c>)
 8002066:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800206a:	4a07      	ldr	r2, [pc, #28]	@ (8002088 <SystemInit+0x11c>)
 800206c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002070:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002074:	bf00      	nop
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr
 800207e:	bf00      	nop
 8002080:	e000ed00 	.word	0xe000ed00
 8002084:	52002000 	.word	0x52002000
 8002088:	58024400 	.word	0x58024400
 800208c:	eaf6ed7f 	.word	0xeaf6ed7f
 8002090:	02020200 	.word	0x02020200
 8002094:	01ff0000 	.word	0x01ff0000
 8002098:	01010280 	.word	0x01010280
 800209c:	5c001000 	.word	0x5c001000
 80020a0:	ffff0000 	.word	0xffff0000
 80020a4:	51008108 	.word	0x51008108
 80020a8:	52004000 	.word	0x52004000

080020ac <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 80020b0:	4b09      	ldr	r3, [pc, #36]	@ (80020d8 <ExitRun0Mode+0x2c>)
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	4a08      	ldr	r2, [pc, #32]	@ (80020d8 <ExitRun0Mode+0x2c>)
 80020b6:	f043 0302 	orr.w	r3, r3, #2
 80020ba:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 80020bc:	bf00      	nop
 80020be:	4b06      	ldr	r3, [pc, #24]	@ (80020d8 <ExitRun0Mode+0x2c>)
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d0f9      	beq.n	80020be <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 80020ca:	bf00      	nop
 80020cc:	bf00      	nop
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr
 80020d6:	bf00      	nop
 80020d8:	58024800 	.word	0x58024800

080020dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80020dc:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8002118 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 80020e0:	f7ff ffe4 	bl	80020ac <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80020e4:	f7ff ff42 	bl	8001f6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80020e8:	480c      	ldr	r0, [pc, #48]	@ (800211c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80020ea:	490d      	ldr	r1, [pc, #52]	@ (8002120 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80020ec:	4a0d      	ldr	r2, [pc, #52]	@ (8002124 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80020ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020f0:	e002      	b.n	80020f8 <LoopCopyDataInit>

080020f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020f6:	3304      	adds	r3, #4

080020f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020fc:	d3f9      	bcc.n	80020f2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020fe:	4a0a      	ldr	r2, [pc, #40]	@ (8002128 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002100:	4c0a      	ldr	r4, [pc, #40]	@ (800212c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002102:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002104:	e001      	b.n	800210a <LoopFillZerobss>

08002106 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002106:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002108:	3204      	adds	r2, #4

0800210a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800210a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800210c:	d3fb      	bcc.n	8002106 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800210e:	f010 fb93 	bl	8012838 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002112:	f7fe fad3 	bl	80006bc <main>
  bx  lr
 8002116:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002118:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800211c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002120:	24000154 	.word	0x24000154
  ldr r2, =_sidata
 8002124:	0801335c 	.word	0x0801335c
  ldr r2, =_sbss
 8002128:	24000154 	.word	0x24000154
  ldr r4, =_ebss
 800212c:	24002258 	.word	0x24002258

08002130 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002130:	e7fe      	b.n	8002130 <ADC3_IRQHandler>
	...

08002134 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800213a:	2003      	movs	r0, #3
 800213c:	f000 f98c 	bl	8002458 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002140:	f007 ffc2 	bl	800a0c8 <HAL_RCC_GetSysClockFreq>
 8002144:	4602      	mov	r2, r0
 8002146:	4b15      	ldr	r3, [pc, #84]	@ (800219c <HAL_Init+0x68>)
 8002148:	699b      	ldr	r3, [r3, #24]
 800214a:	0a1b      	lsrs	r3, r3, #8
 800214c:	f003 030f 	and.w	r3, r3, #15
 8002150:	4913      	ldr	r1, [pc, #76]	@ (80021a0 <HAL_Init+0x6c>)
 8002152:	5ccb      	ldrb	r3, [r1, r3]
 8002154:	f003 031f 	and.w	r3, r3, #31
 8002158:	fa22 f303 	lsr.w	r3, r2, r3
 800215c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800215e:	4b0f      	ldr	r3, [pc, #60]	@ (800219c <HAL_Init+0x68>)
 8002160:	699b      	ldr	r3, [r3, #24]
 8002162:	f003 030f 	and.w	r3, r3, #15
 8002166:	4a0e      	ldr	r2, [pc, #56]	@ (80021a0 <HAL_Init+0x6c>)
 8002168:	5cd3      	ldrb	r3, [r2, r3]
 800216a:	f003 031f 	and.w	r3, r3, #31
 800216e:	687a      	ldr	r2, [r7, #4]
 8002170:	fa22 f303 	lsr.w	r3, r2, r3
 8002174:	4a0b      	ldr	r2, [pc, #44]	@ (80021a4 <HAL_Init+0x70>)
 8002176:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002178:	4a0b      	ldr	r2, [pc, #44]	@ (80021a8 <HAL_Init+0x74>)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800217e:	200f      	movs	r0, #15
 8002180:	f000 f814 	bl	80021ac <HAL_InitTick>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d001      	beq.n	800218e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e002      	b.n	8002194 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800218e:	f7ff fa31 	bl	80015f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002192:	2300      	movs	r3, #0
}
 8002194:	4618      	mov	r0, r3
 8002196:	3708      	adds	r7, #8
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}
 800219c:	58024400 	.word	0x58024400
 80021a0:	080132d8 	.word	0x080132d8
 80021a4:	24000004 	.word	0x24000004
 80021a8:	24000000 	.word	0x24000000

080021ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80021b4:	4b15      	ldr	r3, [pc, #84]	@ (800220c <HAL_InitTick+0x60>)
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d101      	bne.n	80021c0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	e021      	b.n	8002204 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80021c0:	4b13      	ldr	r3, [pc, #76]	@ (8002210 <HAL_InitTick+0x64>)
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	4b11      	ldr	r3, [pc, #68]	@ (800220c <HAL_InitTick+0x60>)
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	4619      	mov	r1, r3
 80021ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80021ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80021d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80021d6:	4618      	mov	r0, r3
 80021d8:	f000 f971 	bl	80024be <HAL_SYSTICK_Config>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d001      	beq.n	80021e6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e00e      	b.n	8002204 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2b0f      	cmp	r3, #15
 80021ea:	d80a      	bhi.n	8002202 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021ec:	2200      	movs	r2, #0
 80021ee:	6879      	ldr	r1, [r7, #4]
 80021f0:	f04f 30ff 	mov.w	r0, #4294967295
 80021f4:	f000 f93b 	bl	800246e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021f8:	4a06      	ldr	r2, [pc, #24]	@ (8002214 <HAL_InitTick+0x68>)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021fe:	2300      	movs	r3, #0
 8002200:	e000      	b.n	8002204 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
}
 8002204:	4618      	mov	r0, r3
 8002206:	3708      	adds	r7, #8
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}
 800220c:	2400000c 	.word	0x2400000c
 8002210:	24000000 	.word	0x24000000
 8002214:	24000008 	.word	0x24000008

08002218 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800221c:	4b06      	ldr	r3, [pc, #24]	@ (8002238 <HAL_IncTick+0x20>)
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	461a      	mov	r2, r3
 8002222:	4b06      	ldr	r3, [pc, #24]	@ (800223c <HAL_IncTick+0x24>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4413      	add	r3, r2
 8002228:	4a04      	ldr	r2, [pc, #16]	@ (800223c <HAL_IncTick+0x24>)
 800222a:	6013      	str	r3, [r2, #0]
}
 800222c:	bf00      	nop
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr
 8002236:	bf00      	nop
 8002238:	2400000c 	.word	0x2400000c
 800223c:	24000528 	.word	0x24000528

08002240 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0
  return uwTick;
 8002244:	4b03      	ldr	r3, [pc, #12]	@ (8002254 <HAL_GetTick+0x14>)
 8002246:	681b      	ldr	r3, [r3, #0]
}
 8002248:	4618      	mov	r0, r3
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop
 8002254:	24000528 	.word	0x24000528

08002258 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b084      	sub	sp, #16
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002260:	f7ff ffee 	bl	8002240 <HAL_GetTick>
 8002264:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002270:	d005      	beq.n	800227e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002272:	4b0a      	ldr	r3, [pc, #40]	@ (800229c <HAL_Delay+0x44>)
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	461a      	mov	r2, r3
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	4413      	add	r3, r2
 800227c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800227e:	bf00      	nop
 8002280:	f7ff ffde 	bl	8002240 <HAL_GetTick>
 8002284:	4602      	mov	r2, r0
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	68fa      	ldr	r2, [r7, #12]
 800228c:	429a      	cmp	r2, r3
 800228e:	d8f7      	bhi.n	8002280 <HAL_Delay+0x28>
  {
  }
}
 8002290:	bf00      	nop
 8002292:	bf00      	nop
 8002294:	3710      	adds	r7, #16
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	2400000c 	.word	0x2400000c

080022a0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80022a0:	b480      	push	{r7}
 80022a2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80022a4:	4b03      	ldr	r3, [pc, #12]	@ (80022b4 <HAL_GetREVID+0x14>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	0c1b      	lsrs	r3, r3, #16
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr
 80022b4:	5c001000 	.word	0x5c001000

080022b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b085      	sub	sp, #20
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	f003 0307 	and.w	r3, r3, #7
 80022c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022c8:	4b0b      	ldr	r3, [pc, #44]	@ (80022f8 <__NVIC_SetPriorityGrouping+0x40>)
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022ce:	68ba      	ldr	r2, [r7, #8]
 80022d0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80022d4:	4013      	ands	r3, r2
 80022d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80022e0:	4b06      	ldr	r3, [pc, #24]	@ (80022fc <__NVIC_SetPriorityGrouping+0x44>)
 80022e2:	4313      	orrs	r3, r2
 80022e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022e6:	4a04      	ldr	r2, [pc, #16]	@ (80022f8 <__NVIC_SetPriorityGrouping+0x40>)
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	60d3      	str	r3, [r2, #12]
}
 80022ec:	bf00      	nop
 80022ee:	3714      	adds	r7, #20
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr
 80022f8:	e000ed00 	.word	0xe000ed00
 80022fc:	05fa0000 	.word	0x05fa0000

08002300 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002300:	b480      	push	{r7}
 8002302:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002304:	4b04      	ldr	r3, [pc, #16]	@ (8002318 <__NVIC_GetPriorityGrouping+0x18>)
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	0a1b      	lsrs	r3, r3, #8
 800230a:	f003 0307 	and.w	r3, r3, #7
}
 800230e:	4618      	mov	r0, r3
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr
 8002318:	e000ed00 	.word	0xe000ed00

0800231c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800231c:	b480      	push	{r7}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0
 8002322:	4603      	mov	r3, r0
 8002324:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002326:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800232a:	2b00      	cmp	r3, #0
 800232c:	db0b      	blt.n	8002346 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800232e:	88fb      	ldrh	r3, [r7, #6]
 8002330:	f003 021f 	and.w	r2, r3, #31
 8002334:	4907      	ldr	r1, [pc, #28]	@ (8002354 <__NVIC_EnableIRQ+0x38>)
 8002336:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800233a:	095b      	lsrs	r3, r3, #5
 800233c:	2001      	movs	r0, #1
 800233e:	fa00 f202 	lsl.w	r2, r0, r2
 8002342:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002346:	bf00      	nop
 8002348:	370c      	adds	r7, #12
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr
 8002352:	bf00      	nop
 8002354:	e000e100 	.word	0xe000e100

08002358 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	4603      	mov	r3, r0
 8002360:	6039      	str	r1, [r7, #0]
 8002362:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002364:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002368:	2b00      	cmp	r3, #0
 800236a:	db0a      	blt.n	8002382 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	b2da      	uxtb	r2, r3
 8002370:	490c      	ldr	r1, [pc, #48]	@ (80023a4 <__NVIC_SetPriority+0x4c>)
 8002372:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002376:	0112      	lsls	r2, r2, #4
 8002378:	b2d2      	uxtb	r2, r2
 800237a:	440b      	add	r3, r1
 800237c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002380:	e00a      	b.n	8002398 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	b2da      	uxtb	r2, r3
 8002386:	4908      	ldr	r1, [pc, #32]	@ (80023a8 <__NVIC_SetPriority+0x50>)
 8002388:	88fb      	ldrh	r3, [r7, #6]
 800238a:	f003 030f 	and.w	r3, r3, #15
 800238e:	3b04      	subs	r3, #4
 8002390:	0112      	lsls	r2, r2, #4
 8002392:	b2d2      	uxtb	r2, r2
 8002394:	440b      	add	r3, r1
 8002396:	761a      	strb	r2, [r3, #24]
}
 8002398:	bf00      	nop
 800239a:	370c      	adds	r7, #12
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr
 80023a4:	e000e100 	.word	0xe000e100
 80023a8:	e000ed00 	.word	0xe000ed00

080023ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b089      	sub	sp, #36	@ 0x24
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	60f8      	str	r0, [r7, #12]
 80023b4:	60b9      	str	r1, [r7, #8]
 80023b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	f003 0307 	and.w	r3, r3, #7
 80023be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023c0:	69fb      	ldr	r3, [r7, #28]
 80023c2:	f1c3 0307 	rsb	r3, r3, #7
 80023c6:	2b04      	cmp	r3, #4
 80023c8:	bf28      	it	cs
 80023ca:	2304      	movcs	r3, #4
 80023cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	3304      	adds	r3, #4
 80023d2:	2b06      	cmp	r3, #6
 80023d4:	d902      	bls.n	80023dc <NVIC_EncodePriority+0x30>
 80023d6:	69fb      	ldr	r3, [r7, #28]
 80023d8:	3b03      	subs	r3, #3
 80023da:	e000      	b.n	80023de <NVIC_EncodePriority+0x32>
 80023dc:	2300      	movs	r3, #0
 80023de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023e0:	f04f 32ff 	mov.w	r2, #4294967295
 80023e4:	69bb      	ldr	r3, [r7, #24]
 80023e6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ea:	43da      	mvns	r2, r3
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	401a      	ands	r2, r3
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023f4:	f04f 31ff 	mov.w	r1, #4294967295
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	fa01 f303 	lsl.w	r3, r1, r3
 80023fe:	43d9      	mvns	r1, r3
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002404:	4313      	orrs	r3, r2
         );
}
 8002406:	4618      	mov	r0, r3
 8002408:	3724      	adds	r7, #36	@ 0x24
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr
	...

08002414 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b082      	sub	sp, #8
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	3b01      	subs	r3, #1
 8002420:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002424:	d301      	bcc.n	800242a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002426:	2301      	movs	r3, #1
 8002428:	e00f      	b.n	800244a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800242a:	4a0a      	ldr	r2, [pc, #40]	@ (8002454 <SysTick_Config+0x40>)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	3b01      	subs	r3, #1
 8002430:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002432:	210f      	movs	r1, #15
 8002434:	f04f 30ff 	mov.w	r0, #4294967295
 8002438:	f7ff ff8e 	bl	8002358 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800243c:	4b05      	ldr	r3, [pc, #20]	@ (8002454 <SysTick_Config+0x40>)
 800243e:	2200      	movs	r2, #0
 8002440:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002442:	4b04      	ldr	r3, [pc, #16]	@ (8002454 <SysTick_Config+0x40>)
 8002444:	2207      	movs	r2, #7
 8002446:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002448:	2300      	movs	r3, #0
}
 800244a:	4618      	mov	r0, r3
 800244c:	3708      	adds	r7, #8
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	e000e010 	.word	0xe000e010

08002458 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b082      	sub	sp, #8
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002460:	6878      	ldr	r0, [r7, #4]
 8002462:	f7ff ff29 	bl	80022b8 <__NVIC_SetPriorityGrouping>
}
 8002466:	bf00      	nop
 8002468:	3708      	adds	r7, #8
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}

0800246e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800246e:	b580      	push	{r7, lr}
 8002470:	b086      	sub	sp, #24
 8002472:	af00      	add	r7, sp, #0
 8002474:	4603      	mov	r3, r0
 8002476:	60b9      	str	r1, [r7, #8]
 8002478:	607a      	str	r2, [r7, #4]
 800247a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800247c:	f7ff ff40 	bl	8002300 <__NVIC_GetPriorityGrouping>
 8002480:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002482:	687a      	ldr	r2, [r7, #4]
 8002484:	68b9      	ldr	r1, [r7, #8]
 8002486:	6978      	ldr	r0, [r7, #20]
 8002488:	f7ff ff90 	bl	80023ac <NVIC_EncodePriority>
 800248c:	4602      	mov	r2, r0
 800248e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002492:	4611      	mov	r1, r2
 8002494:	4618      	mov	r0, r3
 8002496:	f7ff ff5f 	bl	8002358 <__NVIC_SetPriority>
}
 800249a:	bf00      	nop
 800249c:	3718      	adds	r7, #24
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}

080024a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024a2:	b580      	push	{r7, lr}
 80024a4:	b082      	sub	sp, #8
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	4603      	mov	r3, r0
 80024aa:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80024b0:	4618      	mov	r0, r3
 80024b2:	f7ff ff33 	bl	800231c <__NVIC_EnableIRQ>
}
 80024b6:	bf00      	nop
 80024b8:	3708      	adds	r7, #8
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}

080024be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024be:	b580      	push	{r7, lr}
 80024c0:	b082      	sub	sp, #8
 80024c2:	af00      	add	r7, sp, #0
 80024c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024c6:	6878      	ldr	r0, [r7, #4]
 80024c8:	f7ff ffa4 	bl	8002414 <SysTick_Config>
 80024cc:	4603      	mov	r3, r0
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3708      	adds	r7, #8
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
	...

080024d8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80024d8:	b480      	push	{r7}
 80024da:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80024dc:	f3bf 8f5f 	dmb	sy
}
 80024e0:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80024e2:	4b07      	ldr	r3, [pc, #28]	@ (8002500 <HAL_MPU_Disable+0x28>)
 80024e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024e6:	4a06      	ldr	r2, [pc, #24]	@ (8002500 <HAL_MPU_Disable+0x28>)
 80024e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024ec:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80024ee:	4b05      	ldr	r3, [pc, #20]	@ (8002504 <HAL_MPU_Disable+0x2c>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	605a      	str	r2, [r3, #4]
}
 80024f4:	bf00      	nop
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr
 80024fe:	bf00      	nop
 8002500:	e000ed00 	.word	0xe000ed00
 8002504:	e000ed90 	.word	0xe000ed90

08002508 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002508:	b480      	push	{r7}
 800250a:	b083      	sub	sp, #12
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002510:	4a0b      	ldr	r2, [pc, #44]	@ (8002540 <HAL_MPU_Enable+0x38>)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	f043 0301 	orr.w	r3, r3, #1
 8002518:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800251a:	4b0a      	ldr	r3, [pc, #40]	@ (8002544 <HAL_MPU_Enable+0x3c>)
 800251c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800251e:	4a09      	ldr	r2, [pc, #36]	@ (8002544 <HAL_MPU_Enable+0x3c>)
 8002520:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002524:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002526:	f3bf 8f4f 	dsb	sy
}
 800252a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800252c:	f3bf 8f6f 	isb	sy
}
 8002530:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002532:	bf00      	nop
 8002534:	370c      	adds	r7, #12
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr
 800253e:	bf00      	nop
 8002540:	e000ed90 	.word	0xe000ed90
 8002544:	e000ed00 	.word	0xe000ed00

08002548 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8002548:	b480      	push	{r7}
 800254a:	b083      	sub	sp, #12
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	785a      	ldrb	r2, [r3, #1]
 8002554:	4b1b      	ldr	r3, [pc, #108]	@ (80025c4 <HAL_MPU_ConfigRegion+0x7c>)
 8002556:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8002558:	4b1a      	ldr	r3, [pc, #104]	@ (80025c4 <HAL_MPU_ConfigRegion+0x7c>)
 800255a:	691b      	ldr	r3, [r3, #16]
 800255c:	4a19      	ldr	r2, [pc, #100]	@ (80025c4 <HAL_MPU_ConfigRegion+0x7c>)
 800255e:	f023 0301 	bic.w	r3, r3, #1
 8002562:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8002564:	4a17      	ldr	r2, [pc, #92]	@ (80025c4 <HAL_MPU_ConfigRegion+0x7c>)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	7b1b      	ldrb	r3, [r3, #12]
 8002570:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	7adb      	ldrb	r3, [r3, #11]
 8002576:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002578:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	7a9b      	ldrb	r3, [r3, #10]
 800257e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002580:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	7b5b      	ldrb	r3, [r3, #13]
 8002586:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002588:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	7b9b      	ldrb	r3, [r3, #14]
 800258e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002590:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	7bdb      	ldrb	r3, [r3, #15]
 8002596:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002598:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	7a5b      	ldrb	r3, [r3, #9]
 800259e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80025a0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	7a1b      	ldrb	r3, [r3, #8]
 80025a6:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80025a8:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80025aa:	687a      	ldr	r2, [r7, #4]
 80025ac:	7812      	ldrb	r2, [r2, #0]
 80025ae:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80025b0:	4a04      	ldr	r2, [pc, #16]	@ (80025c4 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80025b2:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80025b4:	6113      	str	r3, [r2, #16]
}
 80025b6:	bf00      	nop
 80025b8:	370c      	adds	r7, #12
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr
 80025c2:	bf00      	nop
 80025c4:	e000ed90 	.word	0xe000ed90

080025c8 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b082      	sub	sp, #8
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d101      	bne.n	80025da <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e069      	b.n	80026ae <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d102      	bne.n	80025ec <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f7ff f81e 	bl	8001628 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2202      	movs	r2, #2
 80025f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	699b      	ldr	r3, [r3, #24]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d002      	beq.n	8002602 <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2200      	movs	r2, #0
 8002600:	625a      	str	r2, [r3, #36]	@ 0x24
  }
  /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	6819      	ldr	r1, [r3, #0]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	4b2a      	ldr	r3, [pc, #168]	@ (80026b8 <HAL_DCMI_Init+0xf0>)
 800260e:	400b      	ands	r3, r1
 8002610:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	6819      	ldr	r1, [r3, #0]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	685a      	ldr	r2, [r3, #4]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	695b      	ldr	r3, [r3, #20]
 8002620:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8002626:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	691b      	ldr	r3, [r3, #16]
 800262c:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8002632:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	699b      	ldr	r3, [r3, #24]
 8002638:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 800263e:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002644:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 800264a:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002650:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8002656:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	430a      	orrs	r2, r1
 800265e:	601a      	str	r2, [r3, #0]

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	2b10      	cmp	r3, #16
 8002666:	d112      	bne.n	800268e <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	7f1b      	ldrb	r3, [r3, #28]
 800266c:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	7f5b      	ldrb	r3, [r3, #29]
 8002672:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8002674:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	7f9b      	ldrb	r3, [r3, #30]
 800267a:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 800267c:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	7fdb      	ldrb	r3, [r3, #31]
 8002684:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 800268a:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 800268c:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	68da      	ldr	r2, [r3, #12]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f042 021e 	orr.w	r2, r2, #30
 800269c:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2200      	movs	r2, #0
 80026a2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2201      	movs	r2, #1
 80026a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80026ac:	2300      	movs	r3, #0
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3708      	adds	r7, #8
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	ffe0f007 	.word	0xffe0f007

080026bc <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef *hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b088      	sub	sp, #32
 80026c0:	af02      	add	r7, sp, #8
 80026c2:	60f8      	str	r0, [r7, #12]
 80026c4:	60b9      	str	r1, [r7, #8]
 80026c6:	607a      	str	r2, [r7, #4]
 80026c8:	603b      	str	r3, [r7, #0]

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d101      	bne.n	80026d8 <HAL_DCMI_Start_DMA+0x1c>
 80026d4:	2302      	movs	r3, #2
 80026d6:	e0ab      	b.n	8002830 <HAL_DCMI_Start_DMA+0x174>
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2201      	movs	r2, #1
 80026dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2202      	movs	r2, #2
 80026e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80026f6:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f022 0202 	bic.w	r2, r2, #2
 8002706:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |= (uint32_t)(DCMI_Mode);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	6819      	ldr	r1, [r3, #0]
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	68ba      	ldr	r2, [r7, #8]
 8002714:	430a      	orrs	r2, r1
 8002716:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800271c:	4a46      	ldr	r2, [pc, #280]	@ (8002838 <HAL_DCMI_Start_DMA+0x17c>)
 800271e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002724:	4a45      	ldr	r2, [pc, #276]	@ (800283c <HAL_DCMI_Start_DMA+0x180>)
 8002726:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800272c:	2200      	movs	r2, #0
 800272e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Reset transfer counters value */
  hdcmi->XferCount = 0;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2200      	movs	r2, #0
 8002734:	639a      	str	r2, [r3, #56]	@ 0x38
  hdcmi->XferTransferNumber = 0;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2200      	movs	r2, #0
 800273a:	641a      	str	r2, [r3, #64]	@ 0x40
  hdcmi->XferSize = 0;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2200      	movs	r2, #0
 8002740:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdcmi->pBuffPtr = 0;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2200      	movs	r2, #0
 8002746:	645a      	str	r2, [r3, #68]	@ 0x44

  if (Length <= 0xFFFFU)
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800274e:	d219      	bcs.n	8002784 <HAL_DCMI_Start_DMA+0xc8>
  {
    /* Enable the DMA Stream */
    if (HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length) != HAL_OK)
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	3328      	adds	r3, #40	@ 0x28
 800275a:	4619      	mov	r1, r3
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	687a      	ldr	r2, [r7, #4]
 8002760:	f000 fd84 	bl	800326c <HAL_DMA_Start_IT>
 8002764:	4603      	mov	r3, r0
 8002766:	2b00      	cmp	r3, #0
 8002768:	d055      	beq.n	8002816 <HAL_DCMI_Start_DMA+0x15a>
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2240      	movs	r2, #64	@ 0x40
 800276e:	64da      	str	r2, [r3, #76]	@ 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2201      	movs	r2, #1
 8002774:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	2200      	movs	r2, #0
 800277c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      /* Return function status */
      return HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	e055      	b.n	8002830 <HAL_DCMI_Start_DMA+0x174>
    }
  }
  else /* DCMI_DOUBLE_BUFFER Mode */
  {
    /* Set the DMA memory1 conversion complete callback */
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002788:	4a2b      	ldr	r2, [pc, #172]	@ (8002838 <HAL_DCMI_Start_DMA+0x17c>)
 800278a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	2201      	movs	r2, #1
 8002790:	639a      	str	r2, [r3, #56]	@ 0x38
    hdcmi->XferSize = Length;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	683a      	ldr	r2, [r7, #0]
 8002796:	63da      	str	r2, [r3, #60]	@ 0x3c
    hdcmi->pBuffPtr = pData;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Get the number of buffer */
    while (hdcmi->XferSize > 0xFFFFU)
 800279e:	e009      	b.n	80027b4 <HAL_DCMI_Start_DMA+0xf8>
    {
      hdcmi->XferSize = (hdcmi->XferSize / 2U);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027a4:	085a      	lsrs	r2, r3, #1
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	63da      	str	r2, [r3, #60]	@ 0x3c
      hdcmi->XferCount = hdcmi->XferCount * 2U;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027ae:	005a      	lsls	r2, r3, #1
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	639a      	str	r2, [r3, #56]	@ 0x38
    while (hdcmi->XferSize > 0xFFFFU)
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027bc:	d2f0      	bcs.n	80027a0 <HAL_DCMI_Start_DMA+0xe4>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027c2:	1e9a      	subs	r2, r3, #2
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	639a      	str	r2, [r3, #56]	@ 0x38
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Update second memory address */
    SecondMemAddress = (uint32_t)(pData + (4U * hdcmi->XferSize));
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027d4:	009b      	lsls	r3, r3, #2
 80027d6:	687a      	ldr	r2, [r7, #4]
 80027d8:	4413      	add	r3, r2
 80027da:	617b      	str	r3, [r7, #20]

    /* Start DMA multi buffer transfer */
    if (HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize) != HAL_OK)
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	3328      	adds	r3, #40	@ 0x28
 80027e6:	4619      	mov	r1, r3
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027ec:	9300      	str	r3, [sp, #0]
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	687a      	ldr	r2, [r7, #4]
 80027f2:	f003 f829 	bl	8005848 <HAL_DMAEx_MultiBufferStart_IT>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d00c      	beq.n	8002816 <HAL_DCMI_Start_DMA+0x15a>
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2240      	movs	r2, #64	@ 0x40
 8002800:	64da      	str	r2, [r3, #76]	@ 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	2201      	movs	r2, #1
 8002806:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	2200      	movs	r2, #0
 800280e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      /* Return function status */
      return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e00c      	b.n	8002830 <HAL_DCMI_Start_DMA+0x174>
    }
  }

  /* Enable Capture */
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f042 0201 	orr.w	r2, r2, #1
 8002824:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	2200      	movs	r2, #0
 800282a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Return function status */
  return HAL_OK;
 800282e:	2300      	movs	r3, #0
}
 8002830:	4618      	mov	r0, r3
 8002832:	3718      	adds	r7, #24
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}
 8002838:	08002a55 	.word	0x08002a55
 800283c:	08002b7b 	.word	0x08002b7b

08002840 <HAL_DCMI_Stop>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Stop(DCMI_HandleTypeDef *hdcmi)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b084      	sub	sp, #16
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 8002848:	4b2b      	ldr	r3, [pc, #172]	@ (80028f8 <HAL_DCMI_Stop+0xb8>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a2b      	ldr	r2, [pc, #172]	@ (80028fc <HAL_DCMI_Stop+0xbc>)
 800284e:	fba2 2303 	umull	r2, r3, r2, r3
 8002852:	0a5b      	lsrs	r3, r3, #9
 8002854:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002858:	fb02 f303 	mul.w	r3, r2, r3
 800285c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800285e:	2300      	movs	r3, #0
 8002860:	72fb      	strb	r3, [r7, #11]

  /* Process locked */
  __HAL_LOCK(hdcmi);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002868:	2b01      	cmp	r3, #1
 800286a:	d101      	bne.n	8002870 <HAL_DCMI_Stop+0x30>
 800286c:	2302      	movs	r3, #2
 800286e:	e03f      	b.n	80028f0 <HAL_DCMI_Stop+0xb0>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2201      	movs	r2, #1
 8002874:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2202      	movs	r2, #2
 800287c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Disable Capture */
  hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f022 0201 	bic.w	r2, r2, #1
 800288e:	601a      	str	r2, [r3, #0]

  /* Check if the DCMI capture effectively disabled */
  do
  {
    count-- ;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	3b01      	subs	r3, #1
 8002894:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d108      	bne.n	80028ae <HAL_DCMI_Stop+0x6e>
    {
      /* Update error code */
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028a0:	f043 0220 	orr.w	r2, r3, #32
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	64da      	str	r2, [r3, #76]	@ 0x4c

      status = HAL_TIMEOUT;
 80028a8:	2303      	movs	r3, #3
 80028aa:	72fb      	strb	r3, [r7, #11]
      break;
 80028ac:	e006      	b.n	80028bc <HAL_DCMI_Stop+0x7c>
    }
  }
  while ((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 0301 	and.w	r3, r3, #1
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d1e9      	bne.n	8002890 <HAL_DCMI_Stop+0x50>

  /* Disable the DCMI */
  __HAL_DCMI_DISABLE(hdcmi);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80028ca:	601a      	str	r2, [r3, #0]

  /* Disable the DMA */
  (void)HAL_DMA_Abort(hdcmi->DMA_Handle);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028d0:	4618      	mov	r0, r3
 80028d2:	f000 ff35 	bl	8003740 <HAL_DMA_Abort>

  /* Update error code */
  hdcmi->ErrorCode |= HAL_DCMI_ERROR_NONE;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Change DCMI state */
  hdcmi->State = HAL_DCMI_STATE_READY;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2201      	movs	r2, #1
 80028e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2200      	movs	r2, #0
 80028ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Return function status */
  return status;
 80028ee:	7afb      	ldrb	r3, [r7, #11]
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3710      	adds	r7, #16
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	24000000 	.word	0x24000000
 80028fc:	10624dd3 	.word	0x10624dd3

08002900 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b084      	sub	sp, #16
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	691b      	ldr	r3, [r3, #16]
 800290e:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if ((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	f003 0304 	and.w	r3, r3, #4
 8002916:	2b00      	cmp	r3, #0
 8002918:	d016      	beq.n	8002948 <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	2204      	movs	r2, #4
 8002920:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002926:	f043 0202 	orr.w	r2, r3, #2
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2204      	movs	r2, #4
 8002932:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800293a:	4a31      	ldr	r2, [pc, #196]	@ (8002a00 <HAL_DCMI_IRQHandler+0x100>)
 800293c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002942:	4618      	mov	r0, r3
 8002944:	f001 fa1a 	bl	8003d7c <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if ((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	f003 0302 	and.w	r3, r3, #2
 800294e:	2b00      	cmp	r3, #0
 8002950:	d016      	beq.n	8002980 <HAL_DCMI_IRQHandler+0x80>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	2202      	movs	r2, #2
 8002958:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800295e:	f043 0201 	orr.w	r2, r3, #1
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2204      	movs	r2, #4
 800296a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002972:	4a23      	ldr	r2, [pc, #140]	@ (8002a00 <HAL_DCMI_IRQHandler+0x100>)
 8002974:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800297a:	4618      	mov	r0, r3
 800297c:	f001 f9fe 	bl	8003d7c <HAL_DMA_Abort_IT>
  }
  /* Line Interrupt management ************************************************/
  if ((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	f003 0310 	and.w	r3, r3, #16
 8002986:	2b00      	cmp	r3, #0
 8002988:	d006      	beq.n	8002998 <HAL_DCMI_IRQHandler+0x98>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	2210      	movs	r2, #16
 8002990:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else
    HAL_DCMI_LineEventCallback(hdcmi);
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f000 f840 	bl	8002a18 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* VSYNC interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	f003 0308 	and.w	r3, r3, #8
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d006      	beq.n	80029b0 <HAL_DCMI_IRQHandler+0xb0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	2208      	movs	r2, #8
 80029a8:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else
    HAL_DCMI_VsyncEventCallback(hdcmi);
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f000 f83e 	bl	8002a2c <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* FRAME interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	f003 0301 	and.w	r3, r3, #1
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d01d      	beq.n	80029f6 <HAL_DCMI_IRQHandler+0xf6>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 0302 	and.w	r3, r3, #2
 80029c4:	2b02      	cmp	r3, #2
 80029c6:	d107      	bne.n	80029d8 <HAL_DCMI_IRQHandler+0xd8>
    {
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	68da      	ldr	r2, [r3, #12]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f022 021e 	bic.w	r2, r2, #30
 80029d6:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	68da      	ldr	r2, [r3, #12]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f022 0201 	bic.w	r2, r2, #1
 80029e6:	60da      	str	r2, [r3, #12]

    /* Clear the End of Frame flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	2201      	movs	r2, #1
 80029ee:	615a      	str	r2, [r3, #20]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else
    HAL_DCMI_FrameEventCallback(hdcmi);
 80029f0:	6878      	ldr	r0, [r7, #4]
 80029f2:	f000 f825 	bl	8002a40 <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
}
 80029f6:	bf00      	nop
 80029f8:	3710      	adds	r7, #16
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	08002b7b 	.word	0x08002b7b

08002a04 <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b083      	sub	sp, #12
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 8002a0c:	bf00      	nop
 8002a0e:	370c      	adds	r7, #12
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr

08002a18 <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b083      	sub	sp, #12
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 8002a20:	bf00      	nop
 8002a22:	370c      	adds	r7, #12
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr

08002a2c <HAL_DCMI_VsyncEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b083      	sub	sp, #12
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_VsyncEventCallback could be implemented in the user file
   */
}
 8002a34:	bf00      	nop
 8002a36:	370c      	adds	r7, #12
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr

08002a40 <HAL_DCMI_FrameEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b083      	sub	sp, #12
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_FrameEventCallback could be implemented in the user file
   */
}
 8002a48:	bf00      	nop
 8002a4a:	370c      	adds	r7, #12
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr

08002a54 <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b084      	sub	sp, #16
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  uint32_t tmp ;

  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a60:	60fb      	str	r3, [r7, #12]

  if (hdcmi->XferCount != 0U)
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d043      	beq.n	8002af2 <DCMI_DMAXferCplt+0x9e>
  {
    /* Update memory 0 address location */
    tmp = ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR) & DMA_SxCR_CT);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002a76:	60bb      	str	r3, [r7, #8]
    if (((hdcmi->XferCount % 2U) == 0U) && (tmp != 0U))
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a7c:	f003 0301 	and.w	r3, r3, #1
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d118      	bne.n	8002ab6 <DCMI_DMAXferCplt+0x62>
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d015      	beq.n	8002ab6 <DCMI_DMAXferCplt+0x62>
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	68db      	ldr	r3, [r3, #12]
 8002a92:	60bb      	str	r3, [r7, #8]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY0);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a9c:	00da      	lsls	r2, r3, #3
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	4413      	add	r3, r2
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	f003 fa2d 	bl	8005f04 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002aae:	1e5a      	subs	r2, r3, #1
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	639a      	str	r2, [r3, #56]	@ 0x38
 8002ab4:	e044      	b.n	8002b40 <DCMI_DMAXferCplt+0xec>
    }
    /* Update memory 1 address location */
    else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d13c      	bne.n	8002b40 <DCMI_DMAXferCplt+0xec>
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	691b      	ldr	r3, [r3, #16]
 8002ace:	60bb      	str	r3, [r7, #8]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY1);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ad8:	00da      	lsls	r2, r3, #3
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	4413      	add	r3, r2
 8002ade:	2201      	movs	r2, #1
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	f003 fa0f 	bl	8005f04 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002aea:	1e5a      	subs	r2, r3, #1
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	639a      	str	r2, [r3, #56]	@ 0x38
 8002af0:	e026      	b.n	8002b40 <DCMI_DMAXferCplt+0xec>
    {
      /* Nothing to do */
    }
  }
  /* Update memory 0 address location */
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) != 0U)
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d006      	beq.n	8002b10 <DCMI_DMAXferCplt+0xbc>
  {
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR = hdcmi->pBuffPtr;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	68fa      	ldr	r2, [r7, #12]
 8002b0a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002b0c:	60da      	str	r2, [r3, #12]
 8002b0e:	e017      	b.n	8002b40 <DCMI_DMAXferCplt+0xec>
  }
  /* Update memory 1 address location */
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d10f      	bne.n	8002b40 <DCMI_DMAXferCplt+0xec>
  {
    tmp = hdcmi->pBuffPtr;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b24:	60bb      	str	r3, [r7, #8]
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR = (tmp + (4U * hdcmi->XferSize));
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b2a:	0099      	lsls	r1, r3, #2
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	68ba      	ldr	r2, [r7, #8]
 8002b34:	440a      	add	r2, r1
 8002b36:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	639a      	str	r2, [r3, #56]	@ 0x38
  {
    /* Nothing to do */
  }

  /* Check if the frame is transferred */
  if (hdcmi->XferCount == hdcmi->XferTransferNumber)
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d112      	bne.n	8002b72 <DCMI_DMAXferCplt+0x11e>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	68da      	ldr	r2, [r3, #12]
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f042 0201 	orr.w	r2, r2, #1
 8002b5a:	60da      	str	r2, [r3, #12]

    /* When snapshot mode, set dcmi state to ready */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 0302 	and.w	r3, r3, #2
 8002b66:	2b02      	cmp	r3, #2
 8002b68:	d103      	bne.n	8002b72 <DCMI_DMAXferCplt+0x11e>
    {
      hdcmi->State = HAL_DCMI_STATE_READY;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    }
  }
}
 8002b72:	bf00      	nop
 8002b74:	3710      	adds	r7, #16
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}

08002b7a <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 8002b7a:	b580      	push	{r7, lr}
 8002b7c:	b084      	sub	sp, #16
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b86:	60fb      	str	r3, [r7, #12]

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b8e:	2b02      	cmp	r3, #2
 8002b90:	d009      	beq.n	8002ba6 <DCMI_DMAError+0x2c>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	2201      	movs	r2, #1
 8002b96:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b9e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 8002ba6:	68f8      	ldr	r0, [r7, #12]
 8002ba8:	f7ff ff2c 	bl	8002a04 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
}
 8002bac:	bf00      	nop
 8002bae:	3710      	adds	r7, #16
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}

08002bb4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b086      	sub	sp, #24
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002bbc:	f7ff fb40 	bl	8002240 <HAL_GetTick>
 8002bc0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d101      	bne.n	8002bcc <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e316      	b.n	80031fa <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a66      	ldr	r2, [pc, #408]	@ (8002d6c <HAL_DMA_Init+0x1b8>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d04a      	beq.n	8002c6c <HAL_DMA_Init+0xb8>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a65      	ldr	r2, [pc, #404]	@ (8002d70 <HAL_DMA_Init+0x1bc>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d045      	beq.n	8002c6c <HAL_DMA_Init+0xb8>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a63      	ldr	r2, [pc, #396]	@ (8002d74 <HAL_DMA_Init+0x1c0>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d040      	beq.n	8002c6c <HAL_DMA_Init+0xb8>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a62      	ldr	r2, [pc, #392]	@ (8002d78 <HAL_DMA_Init+0x1c4>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d03b      	beq.n	8002c6c <HAL_DMA_Init+0xb8>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a60      	ldr	r2, [pc, #384]	@ (8002d7c <HAL_DMA_Init+0x1c8>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d036      	beq.n	8002c6c <HAL_DMA_Init+0xb8>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a5f      	ldr	r2, [pc, #380]	@ (8002d80 <HAL_DMA_Init+0x1cc>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d031      	beq.n	8002c6c <HAL_DMA_Init+0xb8>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a5d      	ldr	r2, [pc, #372]	@ (8002d84 <HAL_DMA_Init+0x1d0>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d02c      	beq.n	8002c6c <HAL_DMA_Init+0xb8>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a5c      	ldr	r2, [pc, #368]	@ (8002d88 <HAL_DMA_Init+0x1d4>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d027      	beq.n	8002c6c <HAL_DMA_Init+0xb8>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a5a      	ldr	r2, [pc, #360]	@ (8002d8c <HAL_DMA_Init+0x1d8>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d022      	beq.n	8002c6c <HAL_DMA_Init+0xb8>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a59      	ldr	r2, [pc, #356]	@ (8002d90 <HAL_DMA_Init+0x1dc>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d01d      	beq.n	8002c6c <HAL_DMA_Init+0xb8>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a57      	ldr	r2, [pc, #348]	@ (8002d94 <HAL_DMA_Init+0x1e0>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d018      	beq.n	8002c6c <HAL_DMA_Init+0xb8>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a56      	ldr	r2, [pc, #344]	@ (8002d98 <HAL_DMA_Init+0x1e4>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d013      	beq.n	8002c6c <HAL_DMA_Init+0xb8>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a54      	ldr	r2, [pc, #336]	@ (8002d9c <HAL_DMA_Init+0x1e8>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d00e      	beq.n	8002c6c <HAL_DMA_Init+0xb8>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a53      	ldr	r2, [pc, #332]	@ (8002da0 <HAL_DMA_Init+0x1ec>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d009      	beq.n	8002c6c <HAL_DMA_Init+0xb8>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a51      	ldr	r2, [pc, #324]	@ (8002da4 <HAL_DMA_Init+0x1f0>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d004      	beq.n	8002c6c <HAL_DMA_Init+0xb8>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a50      	ldr	r2, [pc, #320]	@ (8002da8 <HAL_DMA_Init+0x1f4>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d101      	bne.n	8002c70 <HAL_DMA_Init+0xbc>
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	e000      	b.n	8002c72 <HAL_DMA_Init+0xbe>
 8002c70:	2300      	movs	r3, #0
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	f000 813b 	beq.w	8002eee <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2202      	movs	r2, #2
 8002c7c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2200      	movs	r2, #0
 8002c84:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a37      	ldr	r2, [pc, #220]	@ (8002d6c <HAL_DMA_Init+0x1b8>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d04a      	beq.n	8002d28 <HAL_DMA_Init+0x174>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a36      	ldr	r2, [pc, #216]	@ (8002d70 <HAL_DMA_Init+0x1bc>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d045      	beq.n	8002d28 <HAL_DMA_Init+0x174>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a34      	ldr	r2, [pc, #208]	@ (8002d74 <HAL_DMA_Init+0x1c0>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d040      	beq.n	8002d28 <HAL_DMA_Init+0x174>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a33      	ldr	r2, [pc, #204]	@ (8002d78 <HAL_DMA_Init+0x1c4>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d03b      	beq.n	8002d28 <HAL_DMA_Init+0x174>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a31      	ldr	r2, [pc, #196]	@ (8002d7c <HAL_DMA_Init+0x1c8>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d036      	beq.n	8002d28 <HAL_DMA_Init+0x174>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a30      	ldr	r2, [pc, #192]	@ (8002d80 <HAL_DMA_Init+0x1cc>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d031      	beq.n	8002d28 <HAL_DMA_Init+0x174>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a2e      	ldr	r2, [pc, #184]	@ (8002d84 <HAL_DMA_Init+0x1d0>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d02c      	beq.n	8002d28 <HAL_DMA_Init+0x174>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a2d      	ldr	r2, [pc, #180]	@ (8002d88 <HAL_DMA_Init+0x1d4>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d027      	beq.n	8002d28 <HAL_DMA_Init+0x174>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a2b      	ldr	r2, [pc, #172]	@ (8002d8c <HAL_DMA_Init+0x1d8>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d022      	beq.n	8002d28 <HAL_DMA_Init+0x174>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a2a      	ldr	r2, [pc, #168]	@ (8002d90 <HAL_DMA_Init+0x1dc>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d01d      	beq.n	8002d28 <HAL_DMA_Init+0x174>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a28      	ldr	r2, [pc, #160]	@ (8002d94 <HAL_DMA_Init+0x1e0>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d018      	beq.n	8002d28 <HAL_DMA_Init+0x174>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a27      	ldr	r2, [pc, #156]	@ (8002d98 <HAL_DMA_Init+0x1e4>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d013      	beq.n	8002d28 <HAL_DMA_Init+0x174>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a25      	ldr	r2, [pc, #148]	@ (8002d9c <HAL_DMA_Init+0x1e8>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d00e      	beq.n	8002d28 <HAL_DMA_Init+0x174>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a24      	ldr	r2, [pc, #144]	@ (8002da0 <HAL_DMA_Init+0x1ec>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d009      	beq.n	8002d28 <HAL_DMA_Init+0x174>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a22      	ldr	r2, [pc, #136]	@ (8002da4 <HAL_DMA_Init+0x1f0>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d004      	beq.n	8002d28 <HAL_DMA_Init+0x174>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a21      	ldr	r2, [pc, #132]	@ (8002da8 <HAL_DMA_Init+0x1f4>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d108      	bne.n	8002d3a <HAL_DMA_Init+0x186>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f022 0201 	bic.w	r2, r2, #1
 8002d36:	601a      	str	r2, [r3, #0]
 8002d38:	e007      	b.n	8002d4a <HAL_DMA_Init+0x196>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f022 0201 	bic.w	r2, r2, #1
 8002d48:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002d4a:	e02f      	b.n	8002dac <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d4c:	f7ff fa78 	bl	8002240 <HAL_GetTick>
 8002d50:	4602      	mov	r2, r0
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	1ad3      	subs	r3, r2, r3
 8002d56:	2b05      	cmp	r3, #5
 8002d58:	d928      	bls.n	8002dac <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2220      	movs	r2, #32
 8002d5e:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2203      	movs	r2, #3
 8002d64:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e246      	b.n	80031fa <HAL_DMA_Init+0x646>
 8002d6c:	40020010 	.word	0x40020010
 8002d70:	40020028 	.word	0x40020028
 8002d74:	40020040 	.word	0x40020040
 8002d78:	40020058 	.word	0x40020058
 8002d7c:	40020070 	.word	0x40020070
 8002d80:	40020088 	.word	0x40020088
 8002d84:	400200a0 	.word	0x400200a0
 8002d88:	400200b8 	.word	0x400200b8
 8002d8c:	40020410 	.word	0x40020410
 8002d90:	40020428 	.word	0x40020428
 8002d94:	40020440 	.word	0x40020440
 8002d98:	40020458 	.word	0x40020458
 8002d9c:	40020470 	.word	0x40020470
 8002da0:	40020488 	.word	0x40020488
 8002da4:	400204a0 	.word	0x400204a0
 8002da8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 0301 	and.w	r3, r3, #1
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d1c8      	bne.n	8002d4c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002dc2:	697a      	ldr	r2, [r7, #20]
 8002dc4:	4b83      	ldr	r3, [pc, #524]	@ (8002fd4 <HAL_DMA_Init+0x420>)
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002dd2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	691b      	ldr	r3, [r3, #16]
 8002dd8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002dde:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	699b      	ldr	r3, [r3, #24]
 8002de4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002dea:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6a1b      	ldr	r3, [r3, #32]
 8002df0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002df2:	697a      	ldr	r2, [r7, #20]
 8002df4:	4313      	orrs	r3, r2
 8002df6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dfc:	2b04      	cmp	r3, #4
 8002dfe:	d107      	bne.n	8002e10 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	697a      	ldr	r2, [r7, #20]
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002e10:	4b71      	ldr	r3, [pc, #452]	@ (8002fd8 <HAL_DMA_Init+0x424>)
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	4b71      	ldr	r3, [pc, #452]	@ (8002fdc <HAL_DMA_Init+0x428>)
 8002e16:	4013      	ands	r3, r2
 8002e18:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002e1c:	d328      	bcc.n	8002e70 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	2b28      	cmp	r3, #40	@ 0x28
 8002e24:	d903      	bls.n	8002e2e <HAL_DMA_Init+0x27a>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	2b2e      	cmp	r3, #46	@ 0x2e
 8002e2c:	d917      	bls.n	8002e5e <HAL_DMA_Init+0x2aa>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	2b3e      	cmp	r3, #62	@ 0x3e
 8002e34:	d903      	bls.n	8002e3e <HAL_DMA_Init+0x28a>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	2b42      	cmp	r3, #66	@ 0x42
 8002e3c:	d90f      	bls.n	8002e5e <HAL_DMA_Init+0x2aa>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	2b46      	cmp	r3, #70	@ 0x46
 8002e44:	d903      	bls.n	8002e4e <HAL_DMA_Init+0x29a>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	2b48      	cmp	r3, #72	@ 0x48
 8002e4c:	d907      	bls.n	8002e5e <HAL_DMA_Init+0x2aa>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	2b4e      	cmp	r3, #78	@ 0x4e
 8002e54:	d905      	bls.n	8002e62 <HAL_DMA_Init+0x2ae>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	2b52      	cmp	r3, #82	@ 0x52
 8002e5c:	d801      	bhi.n	8002e62 <HAL_DMA_Init+0x2ae>
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e000      	b.n	8002e64 <HAL_DMA_Init+0x2b0>
 8002e62:	2300      	movs	r3, #0
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d003      	beq.n	8002e70 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002e6e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	697a      	ldr	r2, [r7, #20]
 8002e76:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	695b      	ldr	r3, [r3, #20]
 8002e7e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	f023 0307 	bic.w	r3, r3, #7
 8002e86:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e8c:	697a      	ldr	r2, [r7, #20]
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e96:	2b04      	cmp	r3, #4
 8002e98:	d117      	bne.n	8002eca <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e9e:	697a      	ldr	r2, [r7, #20]
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d00e      	beq.n	8002eca <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002eac:	6878      	ldr	r0, [r7, #4]
 8002eae:	f002 fb41 	bl	8005534 <DMA_CheckFifoParam>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d008      	beq.n	8002eca <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2240      	movs	r2, #64	@ 0x40
 8002ebc:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e197      	b.n	80031fa <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	697a      	ldr	r2, [r7, #20]
 8002ed0:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f002 fa7c 	bl	80053d0 <DMA_CalcBaseAndBitshift>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ee0:	f003 031f 	and.w	r3, r3, #31
 8002ee4:	223f      	movs	r2, #63	@ 0x3f
 8002ee6:	409a      	lsls	r2, r3
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	609a      	str	r2, [r3, #8]
 8002eec:	e0cd      	b.n	800308a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a3b      	ldr	r2, [pc, #236]	@ (8002fe0 <HAL_DMA_Init+0x42c>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d022      	beq.n	8002f3e <HAL_DMA_Init+0x38a>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a39      	ldr	r2, [pc, #228]	@ (8002fe4 <HAL_DMA_Init+0x430>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d01d      	beq.n	8002f3e <HAL_DMA_Init+0x38a>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a38      	ldr	r2, [pc, #224]	@ (8002fe8 <HAL_DMA_Init+0x434>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d018      	beq.n	8002f3e <HAL_DMA_Init+0x38a>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a36      	ldr	r2, [pc, #216]	@ (8002fec <HAL_DMA_Init+0x438>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d013      	beq.n	8002f3e <HAL_DMA_Init+0x38a>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a35      	ldr	r2, [pc, #212]	@ (8002ff0 <HAL_DMA_Init+0x43c>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d00e      	beq.n	8002f3e <HAL_DMA_Init+0x38a>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a33      	ldr	r2, [pc, #204]	@ (8002ff4 <HAL_DMA_Init+0x440>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d009      	beq.n	8002f3e <HAL_DMA_Init+0x38a>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a32      	ldr	r2, [pc, #200]	@ (8002ff8 <HAL_DMA_Init+0x444>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d004      	beq.n	8002f3e <HAL_DMA_Init+0x38a>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a30      	ldr	r2, [pc, #192]	@ (8002ffc <HAL_DMA_Init+0x448>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d101      	bne.n	8002f42 <HAL_DMA_Init+0x38e>
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e000      	b.n	8002f44 <HAL_DMA_Init+0x390>
 8002f42:	2300      	movs	r3, #0
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	f000 8097 	beq.w	8003078 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a24      	ldr	r2, [pc, #144]	@ (8002fe0 <HAL_DMA_Init+0x42c>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d021      	beq.n	8002f98 <HAL_DMA_Init+0x3e4>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a22      	ldr	r2, [pc, #136]	@ (8002fe4 <HAL_DMA_Init+0x430>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d01c      	beq.n	8002f98 <HAL_DMA_Init+0x3e4>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a21      	ldr	r2, [pc, #132]	@ (8002fe8 <HAL_DMA_Init+0x434>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d017      	beq.n	8002f98 <HAL_DMA_Init+0x3e4>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a1f      	ldr	r2, [pc, #124]	@ (8002fec <HAL_DMA_Init+0x438>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d012      	beq.n	8002f98 <HAL_DMA_Init+0x3e4>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a1e      	ldr	r2, [pc, #120]	@ (8002ff0 <HAL_DMA_Init+0x43c>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d00d      	beq.n	8002f98 <HAL_DMA_Init+0x3e4>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a1c      	ldr	r2, [pc, #112]	@ (8002ff4 <HAL_DMA_Init+0x440>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d008      	beq.n	8002f98 <HAL_DMA_Init+0x3e4>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a1b      	ldr	r2, [pc, #108]	@ (8002ff8 <HAL_DMA_Init+0x444>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d003      	beq.n	8002f98 <HAL_DMA_Init+0x3e4>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a19      	ldr	r2, [pc, #100]	@ (8002ffc <HAL_DMA_Init+0x448>)
 8002f96:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2202      	movs	r2, #2
 8002f9c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002fb0:	697a      	ldr	r2, [r7, #20]
 8002fb2:	4b13      	ldr	r3, [pc, #76]	@ (8003000 <HAL_DMA_Init+0x44c>)
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	2b40      	cmp	r3, #64	@ 0x40
 8002fbe:	d021      	beq.n	8003004 <HAL_DMA_Init+0x450>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	2b80      	cmp	r3, #128	@ 0x80
 8002fc6:	d102      	bne.n	8002fce <HAL_DMA_Init+0x41a>
 8002fc8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002fcc:	e01b      	b.n	8003006 <HAL_DMA_Init+0x452>
 8002fce:	2300      	movs	r3, #0
 8002fd0:	e019      	b.n	8003006 <HAL_DMA_Init+0x452>
 8002fd2:	bf00      	nop
 8002fd4:	fe10803f 	.word	0xfe10803f
 8002fd8:	5c001000 	.word	0x5c001000
 8002fdc:	ffff0000 	.word	0xffff0000
 8002fe0:	58025408 	.word	0x58025408
 8002fe4:	5802541c 	.word	0x5802541c
 8002fe8:	58025430 	.word	0x58025430
 8002fec:	58025444 	.word	0x58025444
 8002ff0:	58025458 	.word	0x58025458
 8002ff4:	5802546c 	.word	0x5802546c
 8002ff8:	58025480 	.word	0x58025480
 8002ffc:	58025494 	.word	0x58025494
 8003000:	fffe000f 	.word	0xfffe000f
 8003004:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003006:	687a      	ldr	r2, [r7, #4]
 8003008:	68d2      	ldr	r2, [r2, #12]
 800300a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800300c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	691b      	ldr	r3, [r3, #16]
 8003012:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003014:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	695b      	ldr	r3, [r3, #20]
 800301a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800301c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	699b      	ldr	r3, [r3, #24]
 8003022:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003024:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	69db      	ldr	r3, [r3, #28]
 800302a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800302c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6a1b      	ldr	r3, [r3, #32]
 8003032:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003034:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003036:	697a      	ldr	r2, [r7, #20]
 8003038:	4313      	orrs	r3, r2
 800303a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	697a      	ldr	r2, [r7, #20]
 8003042:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	461a      	mov	r2, r3
 800304a:	4b6e      	ldr	r3, [pc, #440]	@ (8003204 <HAL_DMA_Init+0x650>)
 800304c:	4413      	add	r3, r2
 800304e:	4a6e      	ldr	r2, [pc, #440]	@ (8003208 <HAL_DMA_Init+0x654>)
 8003050:	fba2 2303 	umull	r2, r3, r2, r3
 8003054:	091b      	lsrs	r3, r3, #4
 8003056:	009a      	lsls	r2, r3, #2
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800305c:	6878      	ldr	r0, [r7, #4]
 800305e:	f002 f9b7 	bl	80053d0 <DMA_CalcBaseAndBitshift>
 8003062:	4603      	mov	r3, r0
 8003064:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800306a:	f003 031f 	and.w	r3, r3, #31
 800306e:	2201      	movs	r2, #1
 8003070:	409a      	lsls	r2, r3
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	605a      	str	r2, [r3, #4]
 8003076:	e008      	b.n	800308a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2240      	movs	r2, #64	@ 0x40
 800307c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2203      	movs	r2, #3
 8003082:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e0b7      	b.n	80031fa <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a5f      	ldr	r2, [pc, #380]	@ (800320c <HAL_DMA_Init+0x658>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d072      	beq.n	800317a <HAL_DMA_Init+0x5c6>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a5d      	ldr	r2, [pc, #372]	@ (8003210 <HAL_DMA_Init+0x65c>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d06d      	beq.n	800317a <HAL_DMA_Init+0x5c6>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a5c      	ldr	r2, [pc, #368]	@ (8003214 <HAL_DMA_Init+0x660>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d068      	beq.n	800317a <HAL_DMA_Init+0x5c6>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a5a      	ldr	r2, [pc, #360]	@ (8003218 <HAL_DMA_Init+0x664>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d063      	beq.n	800317a <HAL_DMA_Init+0x5c6>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a59      	ldr	r2, [pc, #356]	@ (800321c <HAL_DMA_Init+0x668>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d05e      	beq.n	800317a <HAL_DMA_Init+0x5c6>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a57      	ldr	r2, [pc, #348]	@ (8003220 <HAL_DMA_Init+0x66c>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d059      	beq.n	800317a <HAL_DMA_Init+0x5c6>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a56      	ldr	r2, [pc, #344]	@ (8003224 <HAL_DMA_Init+0x670>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d054      	beq.n	800317a <HAL_DMA_Init+0x5c6>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a54      	ldr	r2, [pc, #336]	@ (8003228 <HAL_DMA_Init+0x674>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d04f      	beq.n	800317a <HAL_DMA_Init+0x5c6>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a53      	ldr	r2, [pc, #332]	@ (800322c <HAL_DMA_Init+0x678>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d04a      	beq.n	800317a <HAL_DMA_Init+0x5c6>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a51      	ldr	r2, [pc, #324]	@ (8003230 <HAL_DMA_Init+0x67c>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d045      	beq.n	800317a <HAL_DMA_Init+0x5c6>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a50      	ldr	r2, [pc, #320]	@ (8003234 <HAL_DMA_Init+0x680>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d040      	beq.n	800317a <HAL_DMA_Init+0x5c6>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a4e      	ldr	r2, [pc, #312]	@ (8003238 <HAL_DMA_Init+0x684>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d03b      	beq.n	800317a <HAL_DMA_Init+0x5c6>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a4d      	ldr	r2, [pc, #308]	@ (800323c <HAL_DMA_Init+0x688>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d036      	beq.n	800317a <HAL_DMA_Init+0x5c6>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a4b      	ldr	r2, [pc, #300]	@ (8003240 <HAL_DMA_Init+0x68c>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d031      	beq.n	800317a <HAL_DMA_Init+0x5c6>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a4a      	ldr	r2, [pc, #296]	@ (8003244 <HAL_DMA_Init+0x690>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d02c      	beq.n	800317a <HAL_DMA_Init+0x5c6>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a48      	ldr	r2, [pc, #288]	@ (8003248 <HAL_DMA_Init+0x694>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d027      	beq.n	800317a <HAL_DMA_Init+0x5c6>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a47      	ldr	r2, [pc, #284]	@ (800324c <HAL_DMA_Init+0x698>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d022      	beq.n	800317a <HAL_DMA_Init+0x5c6>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a45      	ldr	r2, [pc, #276]	@ (8003250 <HAL_DMA_Init+0x69c>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d01d      	beq.n	800317a <HAL_DMA_Init+0x5c6>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a44      	ldr	r2, [pc, #272]	@ (8003254 <HAL_DMA_Init+0x6a0>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d018      	beq.n	800317a <HAL_DMA_Init+0x5c6>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a42      	ldr	r2, [pc, #264]	@ (8003258 <HAL_DMA_Init+0x6a4>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d013      	beq.n	800317a <HAL_DMA_Init+0x5c6>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a41      	ldr	r2, [pc, #260]	@ (800325c <HAL_DMA_Init+0x6a8>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d00e      	beq.n	800317a <HAL_DMA_Init+0x5c6>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a3f      	ldr	r2, [pc, #252]	@ (8003260 <HAL_DMA_Init+0x6ac>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d009      	beq.n	800317a <HAL_DMA_Init+0x5c6>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a3e      	ldr	r2, [pc, #248]	@ (8003264 <HAL_DMA_Init+0x6b0>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d004      	beq.n	800317a <HAL_DMA_Init+0x5c6>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a3c      	ldr	r2, [pc, #240]	@ (8003268 <HAL_DMA_Init+0x6b4>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d101      	bne.n	800317e <HAL_DMA_Init+0x5ca>
 800317a:	2301      	movs	r3, #1
 800317c:	e000      	b.n	8003180 <HAL_DMA_Init+0x5cc>
 800317e:	2300      	movs	r3, #0
 8003180:	2b00      	cmp	r3, #0
 8003182:	d032      	beq.n	80031ea <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003184:	6878      	ldr	r0, [r7, #4]
 8003186:	f002 fa51 	bl	800562c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	2b80      	cmp	r3, #128	@ 0x80
 8003190:	d102      	bne.n	8003198 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2200      	movs	r2, #0
 8003196:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	685a      	ldr	r2, [r3, #4]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031a0:	b2d2      	uxtb	r2, r2
 80031a2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80031a8:	687a      	ldr	r2, [r7, #4]
 80031aa:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80031ac:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d010      	beq.n	80031d8 <HAL_DMA_Init+0x624>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	2b08      	cmp	r3, #8
 80031bc:	d80c      	bhi.n	80031d8 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f002 face 	bl	8005760 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80031c8:	2200      	movs	r2, #0
 80031ca:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031d0:	687a      	ldr	r2, [r7, #4]
 80031d2:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80031d4:	605a      	str	r2, [r3, #4]
 80031d6:	e008      	b.n	80031ea <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2200      	movs	r2, #0
 80031dc:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2200      	movs	r2, #0
 80031e2:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2200      	movs	r2, #0
 80031e8:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2200      	movs	r2, #0
 80031ee:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2201      	movs	r2, #1
 80031f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80031f8:	2300      	movs	r3, #0
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3718      	adds	r7, #24
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop
 8003204:	a7fdabf8 	.word	0xa7fdabf8
 8003208:	cccccccd 	.word	0xcccccccd
 800320c:	40020010 	.word	0x40020010
 8003210:	40020028 	.word	0x40020028
 8003214:	40020040 	.word	0x40020040
 8003218:	40020058 	.word	0x40020058
 800321c:	40020070 	.word	0x40020070
 8003220:	40020088 	.word	0x40020088
 8003224:	400200a0 	.word	0x400200a0
 8003228:	400200b8 	.word	0x400200b8
 800322c:	40020410 	.word	0x40020410
 8003230:	40020428 	.word	0x40020428
 8003234:	40020440 	.word	0x40020440
 8003238:	40020458 	.word	0x40020458
 800323c:	40020470 	.word	0x40020470
 8003240:	40020488 	.word	0x40020488
 8003244:	400204a0 	.word	0x400204a0
 8003248:	400204b8 	.word	0x400204b8
 800324c:	58025408 	.word	0x58025408
 8003250:	5802541c 	.word	0x5802541c
 8003254:	58025430 	.word	0x58025430
 8003258:	58025444 	.word	0x58025444
 800325c:	58025458 	.word	0x58025458
 8003260:	5802546c 	.word	0x5802546c
 8003264:	58025480 	.word	0x58025480
 8003268:	58025494 	.word	0x58025494

0800326c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b086      	sub	sp, #24
 8003270:	af00      	add	r7, sp, #0
 8003272:	60f8      	str	r0, [r7, #12]
 8003274:	60b9      	str	r1, [r7, #8]
 8003276:	607a      	str	r2, [r7, #4]
 8003278:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800327a:	2300      	movs	r3, #0
 800327c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d101      	bne.n	8003288 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	e226      	b.n	80036d6 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800328e:	2b01      	cmp	r3, #1
 8003290:	d101      	bne.n	8003296 <HAL_DMA_Start_IT+0x2a>
 8003292:	2302      	movs	r3, #2
 8003294:	e21f      	b.n	80036d6 <HAL_DMA_Start_IT+0x46a>
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2201      	movs	r2, #1
 800329a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	f040 820a 	bne.w	80036c0 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2202      	movs	r2, #2
 80032b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2200      	movs	r2, #0
 80032b8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a68      	ldr	r2, [pc, #416]	@ (8003460 <HAL_DMA_Start_IT+0x1f4>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d04a      	beq.n	800335a <HAL_DMA_Start_IT+0xee>
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a66      	ldr	r2, [pc, #408]	@ (8003464 <HAL_DMA_Start_IT+0x1f8>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d045      	beq.n	800335a <HAL_DMA_Start_IT+0xee>
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a65      	ldr	r2, [pc, #404]	@ (8003468 <HAL_DMA_Start_IT+0x1fc>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d040      	beq.n	800335a <HAL_DMA_Start_IT+0xee>
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a63      	ldr	r2, [pc, #396]	@ (800346c <HAL_DMA_Start_IT+0x200>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d03b      	beq.n	800335a <HAL_DMA_Start_IT+0xee>
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a62      	ldr	r2, [pc, #392]	@ (8003470 <HAL_DMA_Start_IT+0x204>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d036      	beq.n	800335a <HAL_DMA_Start_IT+0xee>
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a60      	ldr	r2, [pc, #384]	@ (8003474 <HAL_DMA_Start_IT+0x208>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d031      	beq.n	800335a <HAL_DMA_Start_IT+0xee>
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a5f      	ldr	r2, [pc, #380]	@ (8003478 <HAL_DMA_Start_IT+0x20c>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d02c      	beq.n	800335a <HAL_DMA_Start_IT+0xee>
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a5d      	ldr	r2, [pc, #372]	@ (800347c <HAL_DMA_Start_IT+0x210>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d027      	beq.n	800335a <HAL_DMA_Start_IT+0xee>
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a5c      	ldr	r2, [pc, #368]	@ (8003480 <HAL_DMA_Start_IT+0x214>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d022      	beq.n	800335a <HAL_DMA_Start_IT+0xee>
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a5a      	ldr	r2, [pc, #360]	@ (8003484 <HAL_DMA_Start_IT+0x218>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d01d      	beq.n	800335a <HAL_DMA_Start_IT+0xee>
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a59      	ldr	r2, [pc, #356]	@ (8003488 <HAL_DMA_Start_IT+0x21c>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d018      	beq.n	800335a <HAL_DMA_Start_IT+0xee>
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a57      	ldr	r2, [pc, #348]	@ (800348c <HAL_DMA_Start_IT+0x220>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d013      	beq.n	800335a <HAL_DMA_Start_IT+0xee>
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a56      	ldr	r2, [pc, #344]	@ (8003490 <HAL_DMA_Start_IT+0x224>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d00e      	beq.n	800335a <HAL_DMA_Start_IT+0xee>
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a54      	ldr	r2, [pc, #336]	@ (8003494 <HAL_DMA_Start_IT+0x228>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d009      	beq.n	800335a <HAL_DMA_Start_IT+0xee>
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a53      	ldr	r2, [pc, #332]	@ (8003498 <HAL_DMA_Start_IT+0x22c>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d004      	beq.n	800335a <HAL_DMA_Start_IT+0xee>
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a51      	ldr	r2, [pc, #324]	@ (800349c <HAL_DMA_Start_IT+0x230>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d108      	bne.n	800336c <HAL_DMA_Start_IT+0x100>
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f022 0201 	bic.w	r2, r2, #1
 8003368:	601a      	str	r2, [r3, #0]
 800336a:	e007      	b.n	800337c <HAL_DMA_Start_IT+0x110>
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f022 0201 	bic.w	r2, r2, #1
 800337a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	687a      	ldr	r2, [r7, #4]
 8003380:	68b9      	ldr	r1, [r7, #8]
 8003382:	68f8      	ldr	r0, [r7, #12]
 8003384:	f001 fe78 	bl	8005078 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a34      	ldr	r2, [pc, #208]	@ (8003460 <HAL_DMA_Start_IT+0x1f4>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d04a      	beq.n	8003428 <HAL_DMA_Start_IT+0x1bc>
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a33      	ldr	r2, [pc, #204]	@ (8003464 <HAL_DMA_Start_IT+0x1f8>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d045      	beq.n	8003428 <HAL_DMA_Start_IT+0x1bc>
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a31      	ldr	r2, [pc, #196]	@ (8003468 <HAL_DMA_Start_IT+0x1fc>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d040      	beq.n	8003428 <HAL_DMA_Start_IT+0x1bc>
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a30      	ldr	r2, [pc, #192]	@ (800346c <HAL_DMA_Start_IT+0x200>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d03b      	beq.n	8003428 <HAL_DMA_Start_IT+0x1bc>
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a2e      	ldr	r2, [pc, #184]	@ (8003470 <HAL_DMA_Start_IT+0x204>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d036      	beq.n	8003428 <HAL_DMA_Start_IT+0x1bc>
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a2d      	ldr	r2, [pc, #180]	@ (8003474 <HAL_DMA_Start_IT+0x208>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d031      	beq.n	8003428 <HAL_DMA_Start_IT+0x1bc>
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a2b      	ldr	r2, [pc, #172]	@ (8003478 <HAL_DMA_Start_IT+0x20c>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d02c      	beq.n	8003428 <HAL_DMA_Start_IT+0x1bc>
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a2a      	ldr	r2, [pc, #168]	@ (800347c <HAL_DMA_Start_IT+0x210>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d027      	beq.n	8003428 <HAL_DMA_Start_IT+0x1bc>
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a28      	ldr	r2, [pc, #160]	@ (8003480 <HAL_DMA_Start_IT+0x214>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d022      	beq.n	8003428 <HAL_DMA_Start_IT+0x1bc>
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a27      	ldr	r2, [pc, #156]	@ (8003484 <HAL_DMA_Start_IT+0x218>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d01d      	beq.n	8003428 <HAL_DMA_Start_IT+0x1bc>
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a25      	ldr	r2, [pc, #148]	@ (8003488 <HAL_DMA_Start_IT+0x21c>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d018      	beq.n	8003428 <HAL_DMA_Start_IT+0x1bc>
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a24      	ldr	r2, [pc, #144]	@ (800348c <HAL_DMA_Start_IT+0x220>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d013      	beq.n	8003428 <HAL_DMA_Start_IT+0x1bc>
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a22      	ldr	r2, [pc, #136]	@ (8003490 <HAL_DMA_Start_IT+0x224>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d00e      	beq.n	8003428 <HAL_DMA_Start_IT+0x1bc>
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a21      	ldr	r2, [pc, #132]	@ (8003494 <HAL_DMA_Start_IT+0x228>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d009      	beq.n	8003428 <HAL_DMA_Start_IT+0x1bc>
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a1f      	ldr	r2, [pc, #124]	@ (8003498 <HAL_DMA_Start_IT+0x22c>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d004      	beq.n	8003428 <HAL_DMA_Start_IT+0x1bc>
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a1e      	ldr	r2, [pc, #120]	@ (800349c <HAL_DMA_Start_IT+0x230>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d101      	bne.n	800342c <HAL_DMA_Start_IT+0x1c0>
 8003428:	2301      	movs	r3, #1
 800342a:	e000      	b.n	800342e <HAL_DMA_Start_IT+0x1c2>
 800342c:	2300      	movs	r3, #0
 800342e:	2b00      	cmp	r3, #0
 8003430:	d036      	beq.n	80034a0 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f023 021e 	bic.w	r2, r3, #30
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f042 0216 	orr.w	r2, r2, #22
 8003444:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800344a:	2b00      	cmp	r3, #0
 800344c:	d03e      	beq.n	80034cc <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f042 0208 	orr.w	r2, r2, #8
 800345c:	601a      	str	r2, [r3, #0]
 800345e:	e035      	b.n	80034cc <HAL_DMA_Start_IT+0x260>
 8003460:	40020010 	.word	0x40020010
 8003464:	40020028 	.word	0x40020028
 8003468:	40020040 	.word	0x40020040
 800346c:	40020058 	.word	0x40020058
 8003470:	40020070 	.word	0x40020070
 8003474:	40020088 	.word	0x40020088
 8003478:	400200a0 	.word	0x400200a0
 800347c:	400200b8 	.word	0x400200b8
 8003480:	40020410 	.word	0x40020410
 8003484:	40020428 	.word	0x40020428
 8003488:	40020440 	.word	0x40020440
 800348c:	40020458 	.word	0x40020458
 8003490:	40020470 	.word	0x40020470
 8003494:	40020488 	.word	0x40020488
 8003498:	400204a0 	.word	0x400204a0
 800349c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f023 020e 	bic.w	r2, r3, #14
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f042 020a 	orr.w	r2, r2, #10
 80034b2:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d007      	beq.n	80034cc <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f042 0204 	orr.w	r2, r2, #4
 80034ca:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a83      	ldr	r2, [pc, #524]	@ (80036e0 <HAL_DMA_Start_IT+0x474>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d072      	beq.n	80035bc <HAL_DMA_Start_IT+0x350>
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a82      	ldr	r2, [pc, #520]	@ (80036e4 <HAL_DMA_Start_IT+0x478>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d06d      	beq.n	80035bc <HAL_DMA_Start_IT+0x350>
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a80      	ldr	r2, [pc, #512]	@ (80036e8 <HAL_DMA_Start_IT+0x47c>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d068      	beq.n	80035bc <HAL_DMA_Start_IT+0x350>
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a7f      	ldr	r2, [pc, #508]	@ (80036ec <HAL_DMA_Start_IT+0x480>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d063      	beq.n	80035bc <HAL_DMA_Start_IT+0x350>
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a7d      	ldr	r2, [pc, #500]	@ (80036f0 <HAL_DMA_Start_IT+0x484>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d05e      	beq.n	80035bc <HAL_DMA_Start_IT+0x350>
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a7c      	ldr	r2, [pc, #496]	@ (80036f4 <HAL_DMA_Start_IT+0x488>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d059      	beq.n	80035bc <HAL_DMA_Start_IT+0x350>
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a7a      	ldr	r2, [pc, #488]	@ (80036f8 <HAL_DMA_Start_IT+0x48c>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d054      	beq.n	80035bc <HAL_DMA_Start_IT+0x350>
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a79      	ldr	r2, [pc, #484]	@ (80036fc <HAL_DMA_Start_IT+0x490>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d04f      	beq.n	80035bc <HAL_DMA_Start_IT+0x350>
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a77      	ldr	r2, [pc, #476]	@ (8003700 <HAL_DMA_Start_IT+0x494>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d04a      	beq.n	80035bc <HAL_DMA_Start_IT+0x350>
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a76      	ldr	r2, [pc, #472]	@ (8003704 <HAL_DMA_Start_IT+0x498>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d045      	beq.n	80035bc <HAL_DMA_Start_IT+0x350>
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a74      	ldr	r2, [pc, #464]	@ (8003708 <HAL_DMA_Start_IT+0x49c>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d040      	beq.n	80035bc <HAL_DMA_Start_IT+0x350>
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a73      	ldr	r2, [pc, #460]	@ (800370c <HAL_DMA_Start_IT+0x4a0>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d03b      	beq.n	80035bc <HAL_DMA_Start_IT+0x350>
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a71      	ldr	r2, [pc, #452]	@ (8003710 <HAL_DMA_Start_IT+0x4a4>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d036      	beq.n	80035bc <HAL_DMA_Start_IT+0x350>
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a70      	ldr	r2, [pc, #448]	@ (8003714 <HAL_DMA_Start_IT+0x4a8>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d031      	beq.n	80035bc <HAL_DMA_Start_IT+0x350>
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a6e      	ldr	r2, [pc, #440]	@ (8003718 <HAL_DMA_Start_IT+0x4ac>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d02c      	beq.n	80035bc <HAL_DMA_Start_IT+0x350>
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a6d      	ldr	r2, [pc, #436]	@ (800371c <HAL_DMA_Start_IT+0x4b0>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d027      	beq.n	80035bc <HAL_DMA_Start_IT+0x350>
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a6b      	ldr	r2, [pc, #428]	@ (8003720 <HAL_DMA_Start_IT+0x4b4>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d022      	beq.n	80035bc <HAL_DMA_Start_IT+0x350>
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a6a      	ldr	r2, [pc, #424]	@ (8003724 <HAL_DMA_Start_IT+0x4b8>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d01d      	beq.n	80035bc <HAL_DMA_Start_IT+0x350>
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a68      	ldr	r2, [pc, #416]	@ (8003728 <HAL_DMA_Start_IT+0x4bc>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d018      	beq.n	80035bc <HAL_DMA_Start_IT+0x350>
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a67      	ldr	r2, [pc, #412]	@ (800372c <HAL_DMA_Start_IT+0x4c0>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d013      	beq.n	80035bc <HAL_DMA_Start_IT+0x350>
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a65      	ldr	r2, [pc, #404]	@ (8003730 <HAL_DMA_Start_IT+0x4c4>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d00e      	beq.n	80035bc <HAL_DMA_Start_IT+0x350>
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a64      	ldr	r2, [pc, #400]	@ (8003734 <HAL_DMA_Start_IT+0x4c8>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d009      	beq.n	80035bc <HAL_DMA_Start_IT+0x350>
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a62      	ldr	r2, [pc, #392]	@ (8003738 <HAL_DMA_Start_IT+0x4cc>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d004      	beq.n	80035bc <HAL_DMA_Start_IT+0x350>
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a61      	ldr	r2, [pc, #388]	@ (800373c <HAL_DMA_Start_IT+0x4d0>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d101      	bne.n	80035c0 <HAL_DMA_Start_IT+0x354>
 80035bc:	2301      	movs	r3, #1
 80035be:	e000      	b.n	80035c2 <HAL_DMA_Start_IT+0x356>
 80035c0:	2300      	movs	r3, #0
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d01a      	beq.n	80035fc <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d007      	beq.n	80035e4 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035de:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80035e2:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d007      	beq.n	80035fc <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80035f6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80035fa:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a37      	ldr	r2, [pc, #220]	@ (80036e0 <HAL_DMA_Start_IT+0x474>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d04a      	beq.n	800369c <HAL_DMA_Start_IT+0x430>
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a36      	ldr	r2, [pc, #216]	@ (80036e4 <HAL_DMA_Start_IT+0x478>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d045      	beq.n	800369c <HAL_DMA_Start_IT+0x430>
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a34      	ldr	r2, [pc, #208]	@ (80036e8 <HAL_DMA_Start_IT+0x47c>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d040      	beq.n	800369c <HAL_DMA_Start_IT+0x430>
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a33      	ldr	r2, [pc, #204]	@ (80036ec <HAL_DMA_Start_IT+0x480>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d03b      	beq.n	800369c <HAL_DMA_Start_IT+0x430>
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a31      	ldr	r2, [pc, #196]	@ (80036f0 <HAL_DMA_Start_IT+0x484>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d036      	beq.n	800369c <HAL_DMA_Start_IT+0x430>
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a30      	ldr	r2, [pc, #192]	@ (80036f4 <HAL_DMA_Start_IT+0x488>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d031      	beq.n	800369c <HAL_DMA_Start_IT+0x430>
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a2e      	ldr	r2, [pc, #184]	@ (80036f8 <HAL_DMA_Start_IT+0x48c>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d02c      	beq.n	800369c <HAL_DMA_Start_IT+0x430>
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a2d      	ldr	r2, [pc, #180]	@ (80036fc <HAL_DMA_Start_IT+0x490>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d027      	beq.n	800369c <HAL_DMA_Start_IT+0x430>
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a2b      	ldr	r2, [pc, #172]	@ (8003700 <HAL_DMA_Start_IT+0x494>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d022      	beq.n	800369c <HAL_DMA_Start_IT+0x430>
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a2a      	ldr	r2, [pc, #168]	@ (8003704 <HAL_DMA_Start_IT+0x498>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d01d      	beq.n	800369c <HAL_DMA_Start_IT+0x430>
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a28      	ldr	r2, [pc, #160]	@ (8003708 <HAL_DMA_Start_IT+0x49c>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d018      	beq.n	800369c <HAL_DMA_Start_IT+0x430>
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a27      	ldr	r2, [pc, #156]	@ (800370c <HAL_DMA_Start_IT+0x4a0>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d013      	beq.n	800369c <HAL_DMA_Start_IT+0x430>
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a25      	ldr	r2, [pc, #148]	@ (8003710 <HAL_DMA_Start_IT+0x4a4>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d00e      	beq.n	800369c <HAL_DMA_Start_IT+0x430>
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a24      	ldr	r2, [pc, #144]	@ (8003714 <HAL_DMA_Start_IT+0x4a8>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d009      	beq.n	800369c <HAL_DMA_Start_IT+0x430>
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a22      	ldr	r2, [pc, #136]	@ (8003718 <HAL_DMA_Start_IT+0x4ac>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d004      	beq.n	800369c <HAL_DMA_Start_IT+0x430>
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a21      	ldr	r2, [pc, #132]	@ (800371c <HAL_DMA_Start_IT+0x4b0>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d108      	bne.n	80036ae <HAL_DMA_Start_IT+0x442>
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f042 0201 	orr.w	r2, r2, #1
 80036aa:	601a      	str	r2, [r3, #0]
 80036ac:	e012      	b.n	80036d4 <HAL_DMA_Start_IT+0x468>
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f042 0201 	orr.w	r2, r2, #1
 80036bc:	601a      	str	r2, [r3, #0]
 80036be:	e009      	b.n	80036d4 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80036c6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2200      	movs	r2, #0
 80036cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80036d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3718      	adds	r7, #24
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	bf00      	nop
 80036e0:	40020010 	.word	0x40020010
 80036e4:	40020028 	.word	0x40020028
 80036e8:	40020040 	.word	0x40020040
 80036ec:	40020058 	.word	0x40020058
 80036f0:	40020070 	.word	0x40020070
 80036f4:	40020088 	.word	0x40020088
 80036f8:	400200a0 	.word	0x400200a0
 80036fc:	400200b8 	.word	0x400200b8
 8003700:	40020410 	.word	0x40020410
 8003704:	40020428 	.word	0x40020428
 8003708:	40020440 	.word	0x40020440
 800370c:	40020458 	.word	0x40020458
 8003710:	40020470 	.word	0x40020470
 8003714:	40020488 	.word	0x40020488
 8003718:	400204a0 	.word	0x400204a0
 800371c:	400204b8 	.word	0x400204b8
 8003720:	58025408 	.word	0x58025408
 8003724:	5802541c 	.word	0x5802541c
 8003728:	58025430 	.word	0x58025430
 800372c:	58025444 	.word	0x58025444
 8003730:	58025458 	.word	0x58025458
 8003734:	5802546c 	.word	0x5802546c
 8003738:	58025480 	.word	0x58025480
 800373c:	58025494 	.word	0x58025494

08003740 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b086      	sub	sp, #24
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8003748:	f7fe fd7a 	bl	8002240 <HAL_GetTick>
 800374c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d101      	bne.n	8003758 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	e2dc      	b.n	8003d12 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800375e:	b2db      	uxtb	r3, r3
 8003760:	2b02      	cmp	r3, #2
 8003762:	d008      	beq.n	8003776 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2280      	movs	r2, #128	@ 0x80
 8003768:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2200      	movs	r2, #0
 800376e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e2cd      	b.n	8003d12 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a76      	ldr	r2, [pc, #472]	@ (8003954 <HAL_DMA_Abort+0x214>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d04a      	beq.n	8003816 <HAL_DMA_Abort+0xd6>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a74      	ldr	r2, [pc, #464]	@ (8003958 <HAL_DMA_Abort+0x218>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d045      	beq.n	8003816 <HAL_DMA_Abort+0xd6>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a73      	ldr	r2, [pc, #460]	@ (800395c <HAL_DMA_Abort+0x21c>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d040      	beq.n	8003816 <HAL_DMA_Abort+0xd6>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a71      	ldr	r2, [pc, #452]	@ (8003960 <HAL_DMA_Abort+0x220>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d03b      	beq.n	8003816 <HAL_DMA_Abort+0xd6>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a70      	ldr	r2, [pc, #448]	@ (8003964 <HAL_DMA_Abort+0x224>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d036      	beq.n	8003816 <HAL_DMA_Abort+0xd6>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a6e      	ldr	r2, [pc, #440]	@ (8003968 <HAL_DMA_Abort+0x228>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d031      	beq.n	8003816 <HAL_DMA_Abort+0xd6>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a6d      	ldr	r2, [pc, #436]	@ (800396c <HAL_DMA_Abort+0x22c>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d02c      	beq.n	8003816 <HAL_DMA_Abort+0xd6>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a6b      	ldr	r2, [pc, #428]	@ (8003970 <HAL_DMA_Abort+0x230>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d027      	beq.n	8003816 <HAL_DMA_Abort+0xd6>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a6a      	ldr	r2, [pc, #424]	@ (8003974 <HAL_DMA_Abort+0x234>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d022      	beq.n	8003816 <HAL_DMA_Abort+0xd6>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a68      	ldr	r2, [pc, #416]	@ (8003978 <HAL_DMA_Abort+0x238>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d01d      	beq.n	8003816 <HAL_DMA_Abort+0xd6>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a67      	ldr	r2, [pc, #412]	@ (800397c <HAL_DMA_Abort+0x23c>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d018      	beq.n	8003816 <HAL_DMA_Abort+0xd6>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a65      	ldr	r2, [pc, #404]	@ (8003980 <HAL_DMA_Abort+0x240>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d013      	beq.n	8003816 <HAL_DMA_Abort+0xd6>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a64      	ldr	r2, [pc, #400]	@ (8003984 <HAL_DMA_Abort+0x244>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d00e      	beq.n	8003816 <HAL_DMA_Abort+0xd6>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a62      	ldr	r2, [pc, #392]	@ (8003988 <HAL_DMA_Abort+0x248>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d009      	beq.n	8003816 <HAL_DMA_Abort+0xd6>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a61      	ldr	r2, [pc, #388]	@ (800398c <HAL_DMA_Abort+0x24c>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d004      	beq.n	8003816 <HAL_DMA_Abort+0xd6>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a5f      	ldr	r2, [pc, #380]	@ (8003990 <HAL_DMA_Abort+0x250>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d101      	bne.n	800381a <HAL_DMA_Abort+0xda>
 8003816:	2301      	movs	r3, #1
 8003818:	e000      	b.n	800381c <HAL_DMA_Abort+0xdc>
 800381a:	2300      	movs	r3, #0
 800381c:	2b00      	cmp	r3, #0
 800381e:	d013      	beq.n	8003848 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f022 021e 	bic.w	r2, r2, #30
 800382e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	695a      	ldr	r2, [r3, #20]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800383e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	617b      	str	r3, [r7, #20]
 8003846:	e00a      	b.n	800385e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f022 020e 	bic.w	r2, r2, #14
 8003856:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a3c      	ldr	r2, [pc, #240]	@ (8003954 <HAL_DMA_Abort+0x214>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d072      	beq.n	800394e <HAL_DMA_Abort+0x20e>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a3a      	ldr	r2, [pc, #232]	@ (8003958 <HAL_DMA_Abort+0x218>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d06d      	beq.n	800394e <HAL_DMA_Abort+0x20e>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a39      	ldr	r2, [pc, #228]	@ (800395c <HAL_DMA_Abort+0x21c>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d068      	beq.n	800394e <HAL_DMA_Abort+0x20e>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a37      	ldr	r2, [pc, #220]	@ (8003960 <HAL_DMA_Abort+0x220>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d063      	beq.n	800394e <HAL_DMA_Abort+0x20e>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a36      	ldr	r2, [pc, #216]	@ (8003964 <HAL_DMA_Abort+0x224>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d05e      	beq.n	800394e <HAL_DMA_Abort+0x20e>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a34      	ldr	r2, [pc, #208]	@ (8003968 <HAL_DMA_Abort+0x228>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d059      	beq.n	800394e <HAL_DMA_Abort+0x20e>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a33      	ldr	r2, [pc, #204]	@ (800396c <HAL_DMA_Abort+0x22c>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d054      	beq.n	800394e <HAL_DMA_Abort+0x20e>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a31      	ldr	r2, [pc, #196]	@ (8003970 <HAL_DMA_Abort+0x230>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d04f      	beq.n	800394e <HAL_DMA_Abort+0x20e>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a30      	ldr	r2, [pc, #192]	@ (8003974 <HAL_DMA_Abort+0x234>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d04a      	beq.n	800394e <HAL_DMA_Abort+0x20e>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a2e      	ldr	r2, [pc, #184]	@ (8003978 <HAL_DMA_Abort+0x238>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d045      	beq.n	800394e <HAL_DMA_Abort+0x20e>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a2d      	ldr	r2, [pc, #180]	@ (800397c <HAL_DMA_Abort+0x23c>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d040      	beq.n	800394e <HAL_DMA_Abort+0x20e>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a2b      	ldr	r2, [pc, #172]	@ (8003980 <HAL_DMA_Abort+0x240>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d03b      	beq.n	800394e <HAL_DMA_Abort+0x20e>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a2a      	ldr	r2, [pc, #168]	@ (8003984 <HAL_DMA_Abort+0x244>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d036      	beq.n	800394e <HAL_DMA_Abort+0x20e>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a28      	ldr	r2, [pc, #160]	@ (8003988 <HAL_DMA_Abort+0x248>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d031      	beq.n	800394e <HAL_DMA_Abort+0x20e>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a27      	ldr	r2, [pc, #156]	@ (800398c <HAL_DMA_Abort+0x24c>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d02c      	beq.n	800394e <HAL_DMA_Abort+0x20e>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a25      	ldr	r2, [pc, #148]	@ (8003990 <HAL_DMA_Abort+0x250>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d027      	beq.n	800394e <HAL_DMA_Abort+0x20e>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a24      	ldr	r2, [pc, #144]	@ (8003994 <HAL_DMA_Abort+0x254>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d022      	beq.n	800394e <HAL_DMA_Abort+0x20e>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a22      	ldr	r2, [pc, #136]	@ (8003998 <HAL_DMA_Abort+0x258>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d01d      	beq.n	800394e <HAL_DMA_Abort+0x20e>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a21      	ldr	r2, [pc, #132]	@ (800399c <HAL_DMA_Abort+0x25c>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d018      	beq.n	800394e <HAL_DMA_Abort+0x20e>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a1f      	ldr	r2, [pc, #124]	@ (80039a0 <HAL_DMA_Abort+0x260>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d013      	beq.n	800394e <HAL_DMA_Abort+0x20e>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a1e      	ldr	r2, [pc, #120]	@ (80039a4 <HAL_DMA_Abort+0x264>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d00e      	beq.n	800394e <HAL_DMA_Abort+0x20e>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a1c      	ldr	r2, [pc, #112]	@ (80039a8 <HAL_DMA_Abort+0x268>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d009      	beq.n	800394e <HAL_DMA_Abort+0x20e>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a1b      	ldr	r2, [pc, #108]	@ (80039ac <HAL_DMA_Abort+0x26c>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d004      	beq.n	800394e <HAL_DMA_Abort+0x20e>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a19      	ldr	r2, [pc, #100]	@ (80039b0 <HAL_DMA_Abort+0x270>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d132      	bne.n	80039b4 <HAL_DMA_Abort+0x274>
 800394e:	2301      	movs	r3, #1
 8003950:	e031      	b.n	80039b6 <HAL_DMA_Abort+0x276>
 8003952:	bf00      	nop
 8003954:	40020010 	.word	0x40020010
 8003958:	40020028 	.word	0x40020028
 800395c:	40020040 	.word	0x40020040
 8003960:	40020058 	.word	0x40020058
 8003964:	40020070 	.word	0x40020070
 8003968:	40020088 	.word	0x40020088
 800396c:	400200a0 	.word	0x400200a0
 8003970:	400200b8 	.word	0x400200b8
 8003974:	40020410 	.word	0x40020410
 8003978:	40020428 	.word	0x40020428
 800397c:	40020440 	.word	0x40020440
 8003980:	40020458 	.word	0x40020458
 8003984:	40020470 	.word	0x40020470
 8003988:	40020488 	.word	0x40020488
 800398c:	400204a0 	.word	0x400204a0
 8003990:	400204b8 	.word	0x400204b8
 8003994:	58025408 	.word	0x58025408
 8003998:	5802541c 	.word	0x5802541c
 800399c:	58025430 	.word	0x58025430
 80039a0:	58025444 	.word	0x58025444
 80039a4:	58025458 	.word	0x58025458
 80039a8:	5802546c 	.word	0x5802546c
 80039ac:	58025480 	.word	0x58025480
 80039b0:	58025494 	.word	0x58025494
 80039b4:	2300      	movs	r3, #0
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d007      	beq.n	80039ca <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039c4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80039c8:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a6d      	ldr	r2, [pc, #436]	@ (8003b84 <HAL_DMA_Abort+0x444>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d04a      	beq.n	8003a6a <HAL_DMA_Abort+0x32a>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a6b      	ldr	r2, [pc, #428]	@ (8003b88 <HAL_DMA_Abort+0x448>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d045      	beq.n	8003a6a <HAL_DMA_Abort+0x32a>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a6a      	ldr	r2, [pc, #424]	@ (8003b8c <HAL_DMA_Abort+0x44c>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d040      	beq.n	8003a6a <HAL_DMA_Abort+0x32a>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a68      	ldr	r2, [pc, #416]	@ (8003b90 <HAL_DMA_Abort+0x450>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d03b      	beq.n	8003a6a <HAL_DMA_Abort+0x32a>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a67      	ldr	r2, [pc, #412]	@ (8003b94 <HAL_DMA_Abort+0x454>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d036      	beq.n	8003a6a <HAL_DMA_Abort+0x32a>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a65      	ldr	r2, [pc, #404]	@ (8003b98 <HAL_DMA_Abort+0x458>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d031      	beq.n	8003a6a <HAL_DMA_Abort+0x32a>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a64      	ldr	r2, [pc, #400]	@ (8003b9c <HAL_DMA_Abort+0x45c>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d02c      	beq.n	8003a6a <HAL_DMA_Abort+0x32a>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a62      	ldr	r2, [pc, #392]	@ (8003ba0 <HAL_DMA_Abort+0x460>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d027      	beq.n	8003a6a <HAL_DMA_Abort+0x32a>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a61      	ldr	r2, [pc, #388]	@ (8003ba4 <HAL_DMA_Abort+0x464>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d022      	beq.n	8003a6a <HAL_DMA_Abort+0x32a>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a5f      	ldr	r2, [pc, #380]	@ (8003ba8 <HAL_DMA_Abort+0x468>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d01d      	beq.n	8003a6a <HAL_DMA_Abort+0x32a>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a5e      	ldr	r2, [pc, #376]	@ (8003bac <HAL_DMA_Abort+0x46c>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d018      	beq.n	8003a6a <HAL_DMA_Abort+0x32a>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a5c      	ldr	r2, [pc, #368]	@ (8003bb0 <HAL_DMA_Abort+0x470>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d013      	beq.n	8003a6a <HAL_DMA_Abort+0x32a>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a5b      	ldr	r2, [pc, #364]	@ (8003bb4 <HAL_DMA_Abort+0x474>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d00e      	beq.n	8003a6a <HAL_DMA_Abort+0x32a>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a59      	ldr	r2, [pc, #356]	@ (8003bb8 <HAL_DMA_Abort+0x478>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d009      	beq.n	8003a6a <HAL_DMA_Abort+0x32a>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a58      	ldr	r2, [pc, #352]	@ (8003bbc <HAL_DMA_Abort+0x47c>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d004      	beq.n	8003a6a <HAL_DMA_Abort+0x32a>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a56      	ldr	r2, [pc, #344]	@ (8003bc0 <HAL_DMA_Abort+0x480>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d108      	bne.n	8003a7c <HAL_DMA_Abort+0x33c>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f022 0201 	bic.w	r2, r2, #1
 8003a78:	601a      	str	r2, [r3, #0]
 8003a7a:	e007      	b.n	8003a8c <HAL_DMA_Abort+0x34c>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	681a      	ldr	r2, [r3, #0]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f022 0201 	bic.w	r2, r2, #1
 8003a8a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003a8c:	e013      	b.n	8003ab6 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003a8e:	f7fe fbd7 	bl	8002240 <HAL_GetTick>
 8003a92:	4602      	mov	r2, r0
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	1ad3      	subs	r3, r2, r3
 8003a98:	2b05      	cmp	r3, #5
 8003a9a:	d90c      	bls.n	8003ab6 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2220      	movs	r2, #32
 8003aa0:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2203      	movs	r2, #3
 8003aa6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2200      	movs	r2, #0
 8003aae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e12d      	b.n	8003d12 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f003 0301 	and.w	r3, r3, #1
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d1e5      	bne.n	8003a8e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a2f      	ldr	r2, [pc, #188]	@ (8003b84 <HAL_DMA_Abort+0x444>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d04a      	beq.n	8003b62 <HAL_DMA_Abort+0x422>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a2d      	ldr	r2, [pc, #180]	@ (8003b88 <HAL_DMA_Abort+0x448>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d045      	beq.n	8003b62 <HAL_DMA_Abort+0x422>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a2c      	ldr	r2, [pc, #176]	@ (8003b8c <HAL_DMA_Abort+0x44c>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d040      	beq.n	8003b62 <HAL_DMA_Abort+0x422>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a2a      	ldr	r2, [pc, #168]	@ (8003b90 <HAL_DMA_Abort+0x450>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d03b      	beq.n	8003b62 <HAL_DMA_Abort+0x422>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a29      	ldr	r2, [pc, #164]	@ (8003b94 <HAL_DMA_Abort+0x454>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d036      	beq.n	8003b62 <HAL_DMA_Abort+0x422>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a27      	ldr	r2, [pc, #156]	@ (8003b98 <HAL_DMA_Abort+0x458>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d031      	beq.n	8003b62 <HAL_DMA_Abort+0x422>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a26      	ldr	r2, [pc, #152]	@ (8003b9c <HAL_DMA_Abort+0x45c>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d02c      	beq.n	8003b62 <HAL_DMA_Abort+0x422>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a24      	ldr	r2, [pc, #144]	@ (8003ba0 <HAL_DMA_Abort+0x460>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d027      	beq.n	8003b62 <HAL_DMA_Abort+0x422>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a23      	ldr	r2, [pc, #140]	@ (8003ba4 <HAL_DMA_Abort+0x464>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d022      	beq.n	8003b62 <HAL_DMA_Abort+0x422>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a21      	ldr	r2, [pc, #132]	@ (8003ba8 <HAL_DMA_Abort+0x468>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d01d      	beq.n	8003b62 <HAL_DMA_Abort+0x422>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a20      	ldr	r2, [pc, #128]	@ (8003bac <HAL_DMA_Abort+0x46c>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d018      	beq.n	8003b62 <HAL_DMA_Abort+0x422>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a1e      	ldr	r2, [pc, #120]	@ (8003bb0 <HAL_DMA_Abort+0x470>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d013      	beq.n	8003b62 <HAL_DMA_Abort+0x422>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a1d      	ldr	r2, [pc, #116]	@ (8003bb4 <HAL_DMA_Abort+0x474>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d00e      	beq.n	8003b62 <HAL_DMA_Abort+0x422>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a1b      	ldr	r2, [pc, #108]	@ (8003bb8 <HAL_DMA_Abort+0x478>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d009      	beq.n	8003b62 <HAL_DMA_Abort+0x422>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a1a      	ldr	r2, [pc, #104]	@ (8003bbc <HAL_DMA_Abort+0x47c>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d004      	beq.n	8003b62 <HAL_DMA_Abort+0x422>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a18      	ldr	r2, [pc, #96]	@ (8003bc0 <HAL_DMA_Abort+0x480>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d101      	bne.n	8003b66 <HAL_DMA_Abort+0x426>
 8003b62:	2301      	movs	r3, #1
 8003b64:	e000      	b.n	8003b68 <HAL_DMA_Abort+0x428>
 8003b66:	2300      	movs	r3, #0
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d02b      	beq.n	8003bc4 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b70:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b76:	f003 031f 	and.w	r3, r3, #31
 8003b7a:	223f      	movs	r2, #63	@ 0x3f
 8003b7c:	409a      	lsls	r2, r3
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	609a      	str	r2, [r3, #8]
 8003b82:	e02a      	b.n	8003bda <HAL_DMA_Abort+0x49a>
 8003b84:	40020010 	.word	0x40020010
 8003b88:	40020028 	.word	0x40020028
 8003b8c:	40020040 	.word	0x40020040
 8003b90:	40020058 	.word	0x40020058
 8003b94:	40020070 	.word	0x40020070
 8003b98:	40020088 	.word	0x40020088
 8003b9c:	400200a0 	.word	0x400200a0
 8003ba0:	400200b8 	.word	0x400200b8
 8003ba4:	40020410 	.word	0x40020410
 8003ba8:	40020428 	.word	0x40020428
 8003bac:	40020440 	.word	0x40020440
 8003bb0:	40020458 	.word	0x40020458
 8003bb4:	40020470 	.word	0x40020470
 8003bb8:	40020488 	.word	0x40020488
 8003bbc:	400204a0 	.word	0x400204a0
 8003bc0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bc8:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bce:	f003 031f 	and.w	r3, r3, #31
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	409a      	lsls	r2, r3
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a4f      	ldr	r2, [pc, #316]	@ (8003d1c <HAL_DMA_Abort+0x5dc>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d072      	beq.n	8003cca <HAL_DMA_Abort+0x58a>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a4d      	ldr	r2, [pc, #308]	@ (8003d20 <HAL_DMA_Abort+0x5e0>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d06d      	beq.n	8003cca <HAL_DMA_Abort+0x58a>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a4c      	ldr	r2, [pc, #304]	@ (8003d24 <HAL_DMA_Abort+0x5e4>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d068      	beq.n	8003cca <HAL_DMA_Abort+0x58a>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a4a      	ldr	r2, [pc, #296]	@ (8003d28 <HAL_DMA_Abort+0x5e8>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d063      	beq.n	8003cca <HAL_DMA_Abort+0x58a>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a49      	ldr	r2, [pc, #292]	@ (8003d2c <HAL_DMA_Abort+0x5ec>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d05e      	beq.n	8003cca <HAL_DMA_Abort+0x58a>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a47      	ldr	r2, [pc, #284]	@ (8003d30 <HAL_DMA_Abort+0x5f0>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d059      	beq.n	8003cca <HAL_DMA_Abort+0x58a>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a46      	ldr	r2, [pc, #280]	@ (8003d34 <HAL_DMA_Abort+0x5f4>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d054      	beq.n	8003cca <HAL_DMA_Abort+0x58a>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a44      	ldr	r2, [pc, #272]	@ (8003d38 <HAL_DMA_Abort+0x5f8>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d04f      	beq.n	8003cca <HAL_DMA_Abort+0x58a>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a43      	ldr	r2, [pc, #268]	@ (8003d3c <HAL_DMA_Abort+0x5fc>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d04a      	beq.n	8003cca <HAL_DMA_Abort+0x58a>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a41      	ldr	r2, [pc, #260]	@ (8003d40 <HAL_DMA_Abort+0x600>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d045      	beq.n	8003cca <HAL_DMA_Abort+0x58a>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a40      	ldr	r2, [pc, #256]	@ (8003d44 <HAL_DMA_Abort+0x604>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d040      	beq.n	8003cca <HAL_DMA_Abort+0x58a>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a3e      	ldr	r2, [pc, #248]	@ (8003d48 <HAL_DMA_Abort+0x608>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d03b      	beq.n	8003cca <HAL_DMA_Abort+0x58a>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a3d      	ldr	r2, [pc, #244]	@ (8003d4c <HAL_DMA_Abort+0x60c>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d036      	beq.n	8003cca <HAL_DMA_Abort+0x58a>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a3b      	ldr	r2, [pc, #236]	@ (8003d50 <HAL_DMA_Abort+0x610>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d031      	beq.n	8003cca <HAL_DMA_Abort+0x58a>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a3a      	ldr	r2, [pc, #232]	@ (8003d54 <HAL_DMA_Abort+0x614>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d02c      	beq.n	8003cca <HAL_DMA_Abort+0x58a>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a38      	ldr	r2, [pc, #224]	@ (8003d58 <HAL_DMA_Abort+0x618>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d027      	beq.n	8003cca <HAL_DMA_Abort+0x58a>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a37      	ldr	r2, [pc, #220]	@ (8003d5c <HAL_DMA_Abort+0x61c>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d022      	beq.n	8003cca <HAL_DMA_Abort+0x58a>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a35      	ldr	r2, [pc, #212]	@ (8003d60 <HAL_DMA_Abort+0x620>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d01d      	beq.n	8003cca <HAL_DMA_Abort+0x58a>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a34      	ldr	r2, [pc, #208]	@ (8003d64 <HAL_DMA_Abort+0x624>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d018      	beq.n	8003cca <HAL_DMA_Abort+0x58a>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a32      	ldr	r2, [pc, #200]	@ (8003d68 <HAL_DMA_Abort+0x628>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d013      	beq.n	8003cca <HAL_DMA_Abort+0x58a>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a31      	ldr	r2, [pc, #196]	@ (8003d6c <HAL_DMA_Abort+0x62c>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d00e      	beq.n	8003cca <HAL_DMA_Abort+0x58a>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a2f      	ldr	r2, [pc, #188]	@ (8003d70 <HAL_DMA_Abort+0x630>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d009      	beq.n	8003cca <HAL_DMA_Abort+0x58a>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a2e      	ldr	r2, [pc, #184]	@ (8003d74 <HAL_DMA_Abort+0x634>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d004      	beq.n	8003cca <HAL_DMA_Abort+0x58a>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a2c      	ldr	r2, [pc, #176]	@ (8003d78 <HAL_DMA_Abort+0x638>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d101      	bne.n	8003cce <HAL_DMA_Abort+0x58e>
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e000      	b.n	8003cd0 <HAL_DMA_Abort+0x590>
 8003cce:	2300      	movs	r3, #0
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d015      	beq.n	8003d00 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003cd8:	687a      	ldr	r2, [r7, #4]
 8003cda:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003cdc:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d00c      	beq.n	8003d00 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003cf0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003cf4:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cfa:	687a      	ldr	r2, [r7, #4]
 8003cfc:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003cfe:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2201      	movs	r2, #1
 8003d04:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8003d10:	2300      	movs	r3, #0
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3718      	adds	r7, #24
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}
 8003d1a:	bf00      	nop
 8003d1c:	40020010 	.word	0x40020010
 8003d20:	40020028 	.word	0x40020028
 8003d24:	40020040 	.word	0x40020040
 8003d28:	40020058 	.word	0x40020058
 8003d2c:	40020070 	.word	0x40020070
 8003d30:	40020088 	.word	0x40020088
 8003d34:	400200a0 	.word	0x400200a0
 8003d38:	400200b8 	.word	0x400200b8
 8003d3c:	40020410 	.word	0x40020410
 8003d40:	40020428 	.word	0x40020428
 8003d44:	40020440 	.word	0x40020440
 8003d48:	40020458 	.word	0x40020458
 8003d4c:	40020470 	.word	0x40020470
 8003d50:	40020488 	.word	0x40020488
 8003d54:	400204a0 	.word	0x400204a0
 8003d58:	400204b8 	.word	0x400204b8
 8003d5c:	58025408 	.word	0x58025408
 8003d60:	5802541c 	.word	0x5802541c
 8003d64:	58025430 	.word	0x58025430
 8003d68:	58025444 	.word	0x58025444
 8003d6c:	58025458 	.word	0x58025458
 8003d70:	5802546c 	.word	0x5802546c
 8003d74:	58025480 	.word	0x58025480
 8003d78:	58025494 	.word	0x58025494

08003d7c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b084      	sub	sp, #16
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d101      	bne.n	8003d8e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e237      	b.n	80041fe <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	2b02      	cmp	r3, #2
 8003d98:	d004      	beq.n	8003da4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2280      	movs	r2, #128	@ 0x80
 8003d9e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	e22c      	b.n	80041fe <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a5c      	ldr	r2, [pc, #368]	@ (8003f1c <HAL_DMA_Abort_IT+0x1a0>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d04a      	beq.n	8003e44 <HAL_DMA_Abort_IT+0xc8>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a5b      	ldr	r2, [pc, #364]	@ (8003f20 <HAL_DMA_Abort_IT+0x1a4>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d045      	beq.n	8003e44 <HAL_DMA_Abort_IT+0xc8>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a59      	ldr	r2, [pc, #356]	@ (8003f24 <HAL_DMA_Abort_IT+0x1a8>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d040      	beq.n	8003e44 <HAL_DMA_Abort_IT+0xc8>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a58      	ldr	r2, [pc, #352]	@ (8003f28 <HAL_DMA_Abort_IT+0x1ac>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d03b      	beq.n	8003e44 <HAL_DMA_Abort_IT+0xc8>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a56      	ldr	r2, [pc, #344]	@ (8003f2c <HAL_DMA_Abort_IT+0x1b0>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d036      	beq.n	8003e44 <HAL_DMA_Abort_IT+0xc8>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a55      	ldr	r2, [pc, #340]	@ (8003f30 <HAL_DMA_Abort_IT+0x1b4>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d031      	beq.n	8003e44 <HAL_DMA_Abort_IT+0xc8>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a53      	ldr	r2, [pc, #332]	@ (8003f34 <HAL_DMA_Abort_IT+0x1b8>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d02c      	beq.n	8003e44 <HAL_DMA_Abort_IT+0xc8>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a52      	ldr	r2, [pc, #328]	@ (8003f38 <HAL_DMA_Abort_IT+0x1bc>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d027      	beq.n	8003e44 <HAL_DMA_Abort_IT+0xc8>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a50      	ldr	r2, [pc, #320]	@ (8003f3c <HAL_DMA_Abort_IT+0x1c0>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d022      	beq.n	8003e44 <HAL_DMA_Abort_IT+0xc8>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a4f      	ldr	r2, [pc, #316]	@ (8003f40 <HAL_DMA_Abort_IT+0x1c4>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d01d      	beq.n	8003e44 <HAL_DMA_Abort_IT+0xc8>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a4d      	ldr	r2, [pc, #308]	@ (8003f44 <HAL_DMA_Abort_IT+0x1c8>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d018      	beq.n	8003e44 <HAL_DMA_Abort_IT+0xc8>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a4c      	ldr	r2, [pc, #304]	@ (8003f48 <HAL_DMA_Abort_IT+0x1cc>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d013      	beq.n	8003e44 <HAL_DMA_Abort_IT+0xc8>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a4a      	ldr	r2, [pc, #296]	@ (8003f4c <HAL_DMA_Abort_IT+0x1d0>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d00e      	beq.n	8003e44 <HAL_DMA_Abort_IT+0xc8>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a49      	ldr	r2, [pc, #292]	@ (8003f50 <HAL_DMA_Abort_IT+0x1d4>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d009      	beq.n	8003e44 <HAL_DMA_Abort_IT+0xc8>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a47      	ldr	r2, [pc, #284]	@ (8003f54 <HAL_DMA_Abort_IT+0x1d8>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d004      	beq.n	8003e44 <HAL_DMA_Abort_IT+0xc8>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a46      	ldr	r2, [pc, #280]	@ (8003f58 <HAL_DMA_Abort_IT+0x1dc>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d101      	bne.n	8003e48 <HAL_DMA_Abort_IT+0xcc>
 8003e44:	2301      	movs	r3, #1
 8003e46:	e000      	b.n	8003e4a <HAL_DMA_Abort_IT+0xce>
 8003e48:	2300      	movs	r3, #0
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	f000 8086 	beq.w	8003f5c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2204      	movs	r2, #4
 8003e54:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a2f      	ldr	r2, [pc, #188]	@ (8003f1c <HAL_DMA_Abort_IT+0x1a0>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d04a      	beq.n	8003ef8 <HAL_DMA_Abort_IT+0x17c>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a2e      	ldr	r2, [pc, #184]	@ (8003f20 <HAL_DMA_Abort_IT+0x1a4>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d045      	beq.n	8003ef8 <HAL_DMA_Abort_IT+0x17c>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a2c      	ldr	r2, [pc, #176]	@ (8003f24 <HAL_DMA_Abort_IT+0x1a8>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d040      	beq.n	8003ef8 <HAL_DMA_Abort_IT+0x17c>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a2b      	ldr	r2, [pc, #172]	@ (8003f28 <HAL_DMA_Abort_IT+0x1ac>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d03b      	beq.n	8003ef8 <HAL_DMA_Abort_IT+0x17c>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a29      	ldr	r2, [pc, #164]	@ (8003f2c <HAL_DMA_Abort_IT+0x1b0>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d036      	beq.n	8003ef8 <HAL_DMA_Abort_IT+0x17c>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a28      	ldr	r2, [pc, #160]	@ (8003f30 <HAL_DMA_Abort_IT+0x1b4>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d031      	beq.n	8003ef8 <HAL_DMA_Abort_IT+0x17c>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a26      	ldr	r2, [pc, #152]	@ (8003f34 <HAL_DMA_Abort_IT+0x1b8>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d02c      	beq.n	8003ef8 <HAL_DMA_Abort_IT+0x17c>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a25      	ldr	r2, [pc, #148]	@ (8003f38 <HAL_DMA_Abort_IT+0x1bc>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d027      	beq.n	8003ef8 <HAL_DMA_Abort_IT+0x17c>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a23      	ldr	r2, [pc, #140]	@ (8003f3c <HAL_DMA_Abort_IT+0x1c0>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d022      	beq.n	8003ef8 <HAL_DMA_Abort_IT+0x17c>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a22      	ldr	r2, [pc, #136]	@ (8003f40 <HAL_DMA_Abort_IT+0x1c4>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d01d      	beq.n	8003ef8 <HAL_DMA_Abort_IT+0x17c>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a20      	ldr	r2, [pc, #128]	@ (8003f44 <HAL_DMA_Abort_IT+0x1c8>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d018      	beq.n	8003ef8 <HAL_DMA_Abort_IT+0x17c>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a1f      	ldr	r2, [pc, #124]	@ (8003f48 <HAL_DMA_Abort_IT+0x1cc>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d013      	beq.n	8003ef8 <HAL_DMA_Abort_IT+0x17c>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a1d      	ldr	r2, [pc, #116]	@ (8003f4c <HAL_DMA_Abort_IT+0x1d0>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d00e      	beq.n	8003ef8 <HAL_DMA_Abort_IT+0x17c>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a1c      	ldr	r2, [pc, #112]	@ (8003f50 <HAL_DMA_Abort_IT+0x1d4>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d009      	beq.n	8003ef8 <HAL_DMA_Abort_IT+0x17c>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a1a      	ldr	r2, [pc, #104]	@ (8003f54 <HAL_DMA_Abort_IT+0x1d8>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d004      	beq.n	8003ef8 <HAL_DMA_Abort_IT+0x17c>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a19      	ldr	r2, [pc, #100]	@ (8003f58 <HAL_DMA_Abort_IT+0x1dc>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d108      	bne.n	8003f0a <HAL_DMA_Abort_IT+0x18e>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f022 0201 	bic.w	r2, r2, #1
 8003f06:	601a      	str	r2, [r3, #0]
 8003f08:	e178      	b.n	80041fc <HAL_DMA_Abort_IT+0x480>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f022 0201 	bic.w	r2, r2, #1
 8003f18:	601a      	str	r2, [r3, #0]
 8003f1a:	e16f      	b.n	80041fc <HAL_DMA_Abort_IT+0x480>
 8003f1c:	40020010 	.word	0x40020010
 8003f20:	40020028 	.word	0x40020028
 8003f24:	40020040 	.word	0x40020040
 8003f28:	40020058 	.word	0x40020058
 8003f2c:	40020070 	.word	0x40020070
 8003f30:	40020088 	.word	0x40020088
 8003f34:	400200a0 	.word	0x400200a0
 8003f38:	400200b8 	.word	0x400200b8
 8003f3c:	40020410 	.word	0x40020410
 8003f40:	40020428 	.word	0x40020428
 8003f44:	40020440 	.word	0x40020440
 8003f48:	40020458 	.word	0x40020458
 8003f4c:	40020470 	.word	0x40020470
 8003f50:	40020488 	.word	0x40020488
 8003f54:	400204a0 	.word	0x400204a0
 8003f58:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f022 020e 	bic.w	r2, r2, #14
 8003f6a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a6c      	ldr	r2, [pc, #432]	@ (8004124 <HAL_DMA_Abort_IT+0x3a8>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d04a      	beq.n	800400c <HAL_DMA_Abort_IT+0x290>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a6b      	ldr	r2, [pc, #428]	@ (8004128 <HAL_DMA_Abort_IT+0x3ac>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d045      	beq.n	800400c <HAL_DMA_Abort_IT+0x290>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a69      	ldr	r2, [pc, #420]	@ (800412c <HAL_DMA_Abort_IT+0x3b0>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d040      	beq.n	800400c <HAL_DMA_Abort_IT+0x290>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a68      	ldr	r2, [pc, #416]	@ (8004130 <HAL_DMA_Abort_IT+0x3b4>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d03b      	beq.n	800400c <HAL_DMA_Abort_IT+0x290>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a66      	ldr	r2, [pc, #408]	@ (8004134 <HAL_DMA_Abort_IT+0x3b8>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d036      	beq.n	800400c <HAL_DMA_Abort_IT+0x290>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a65      	ldr	r2, [pc, #404]	@ (8004138 <HAL_DMA_Abort_IT+0x3bc>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d031      	beq.n	800400c <HAL_DMA_Abort_IT+0x290>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a63      	ldr	r2, [pc, #396]	@ (800413c <HAL_DMA_Abort_IT+0x3c0>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d02c      	beq.n	800400c <HAL_DMA_Abort_IT+0x290>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a62      	ldr	r2, [pc, #392]	@ (8004140 <HAL_DMA_Abort_IT+0x3c4>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d027      	beq.n	800400c <HAL_DMA_Abort_IT+0x290>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a60      	ldr	r2, [pc, #384]	@ (8004144 <HAL_DMA_Abort_IT+0x3c8>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d022      	beq.n	800400c <HAL_DMA_Abort_IT+0x290>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a5f      	ldr	r2, [pc, #380]	@ (8004148 <HAL_DMA_Abort_IT+0x3cc>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d01d      	beq.n	800400c <HAL_DMA_Abort_IT+0x290>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a5d      	ldr	r2, [pc, #372]	@ (800414c <HAL_DMA_Abort_IT+0x3d0>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d018      	beq.n	800400c <HAL_DMA_Abort_IT+0x290>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a5c      	ldr	r2, [pc, #368]	@ (8004150 <HAL_DMA_Abort_IT+0x3d4>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d013      	beq.n	800400c <HAL_DMA_Abort_IT+0x290>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a5a      	ldr	r2, [pc, #360]	@ (8004154 <HAL_DMA_Abort_IT+0x3d8>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d00e      	beq.n	800400c <HAL_DMA_Abort_IT+0x290>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a59      	ldr	r2, [pc, #356]	@ (8004158 <HAL_DMA_Abort_IT+0x3dc>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d009      	beq.n	800400c <HAL_DMA_Abort_IT+0x290>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a57      	ldr	r2, [pc, #348]	@ (800415c <HAL_DMA_Abort_IT+0x3e0>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d004      	beq.n	800400c <HAL_DMA_Abort_IT+0x290>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a56      	ldr	r2, [pc, #344]	@ (8004160 <HAL_DMA_Abort_IT+0x3e4>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d108      	bne.n	800401e <HAL_DMA_Abort_IT+0x2a2>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f022 0201 	bic.w	r2, r2, #1
 800401a:	601a      	str	r2, [r3, #0]
 800401c:	e007      	b.n	800402e <HAL_DMA_Abort_IT+0x2b2>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f022 0201 	bic.w	r2, r2, #1
 800402c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a3c      	ldr	r2, [pc, #240]	@ (8004124 <HAL_DMA_Abort_IT+0x3a8>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d072      	beq.n	800411e <HAL_DMA_Abort_IT+0x3a2>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a3a      	ldr	r2, [pc, #232]	@ (8004128 <HAL_DMA_Abort_IT+0x3ac>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d06d      	beq.n	800411e <HAL_DMA_Abort_IT+0x3a2>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a39      	ldr	r2, [pc, #228]	@ (800412c <HAL_DMA_Abort_IT+0x3b0>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d068      	beq.n	800411e <HAL_DMA_Abort_IT+0x3a2>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a37      	ldr	r2, [pc, #220]	@ (8004130 <HAL_DMA_Abort_IT+0x3b4>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d063      	beq.n	800411e <HAL_DMA_Abort_IT+0x3a2>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a36      	ldr	r2, [pc, #216]	@ (8004134 <HAL_DMA_Abort_IT+0x3b8>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d05e      	beq.n	800411e <HAL_DMA_Abort_IT+0x3a2>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a34      	ldr	r2, [pc, #208]	@ (8004138 <HAL_DMA_Abort_IT+0x3bc>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d059      	beq.n	800411e <HAL_DMA_Abort_IT+0x3a2>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a33      	ldr	r2, [pc, #204]	@ (800413c <HAL_DMA_Abort_IT+0x3c0>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d054      	beq.n	800411e <HAL_DMA_Abort_IT+0x3a2>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a31      	ldr	r2, [pc, #196]	@ (8004140 <HAL_DMA_Abort_IT+0x3c4>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d04f      	beq.n	800411e <HAL_DMA_Abort_IT+0x3a2>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a30      	ldr	r2, [pc, #192]	@ (8004144 <HAL_DMA_Abort_IT+0x3c8>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d04a      	beq.n	800411e <HAL_DMA_Abort_IT+0x3a2>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a2e      	ldr	r2, [pc, #184]	@ (8004148 <HAL_DMA_Abort_IT+0x3cc>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d045      	beq.n	800411e <HAL_DMA_Abort_IT+0x3a2>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a2d      	ldr	r2, [pc, #180]	@ (800414c <HAL_DMA_Abort_IT+0x3d0>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d040      	beq.n	800411e <HAL_DMA_Abort_IT+0x3a2>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a2b      	ldr	r2, [pc, #172]	@ (8004150 <HAL_DMA_Abort_IT+0x3d4>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d03b      	beq.n	800411e <HAL_DMA_Abort_IT+0x3a2>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a2a      	ldr	r2, [pc, #168]	@ (8004154 <HAL_DMA_Abort_IT+0x3d8>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d036      	beq.n	800411e <HAL_DMA_Abort_IT+0x3a2>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a28      	ldr	r2, [pc, #160]	@ (8004158 <HAL_DMA_Abort_IT+0x3dc>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d031      	beq.n	800411e <HAL_DMA_Abort_IT+0x3a2>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a27      	ldr	r2, [pc, #156]	@ (800415c <HAL_DMA_Abort_IT+0x3e0>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d02c      	beq.n	800411e <HAL_DMA_Abort_IT+0x3a2>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a25      	ldr	r2, [pc, #148]	@ (8004160 <HAL_DMA_Abort_IT+0x3e4>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d027      	beq.n	800411e <HAL_DMA_Abort_IT+0x3a2>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a24      	ldr	r2, [pc, #144]	@ (8004164 <HAL_DMA_Abort_IT+0x3e8>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d022      	beq.n	800411e <HAL_DMA_Abort_IT+0x3a2>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a22      	ldr	r2, [pc, #136]	@ (8004168 <HAL_DMA_Abort_IT+0x3ec>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d01d      	beq.n	800411e <HAL_DMA_Abort_IT+0x3a2>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a21      	ldr	r2, [pc, #132]	@ (800416c <HAL_DMA_Abort_IT+0x3f0>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d018      	beq.n	800411e <HAL_DMA_Abort_IT+0x3a2>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a1f      	ldr	r2, [pc, #124]	@ (8004170 <HAL_DMA_Abort_IT+0x3f4>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d013      	beq.n	800411e <HAL_DMA_Abort_IT+0x3a2>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a1e      	ldr	r2, [pc, #120]	@ (8004174 <HAL_DMA_Abort_IT+0x3f8>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d00e      	beq.n	800411e <HAL_DMA_Abort_IT+0x3a2>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a1c      	ldr	r2, [pc, #112]	@ (8004178 <HAL_DMA_Abort_IT+0x3fc>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d009      	beq.n	800411e <HAL_DMA_Abort_IT+0x3a2>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a1b      	ldr	r2, [pc, #108]	@ (800417c <HAL_DMA_Abort_IT+0x400>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d004      	beq.n	800411e <HAL_DMA_Abort_IT+0x3a2>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a19      	ldr	r2, [pc, #100]	@ (8004180 <HAL_DMA_Abort_IT+0x404>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d132      	bne.n	8004184 <HAL_DMA_Abort_IT+0x408>
 800411e:	2301      	movs	r3, #1
 8004120:	e031      	b.n	8004186 <HAL_DMA_Abort_IT+0x40a>
 8004122:	bf00      	nop
 8004124:	40020010 	.word	0x40020010
 8004128:	40020028 	.word	0x40020028
 800412c:	40020040 	.word	0x40020040
 8004130:	40020058 	.word	0x40020058
 8004134:	40020070 	.word	0x40020070
 8004138:	40020088 	.word	0x40020088
 800413c:	400200a0 	.word	0x400200a0
 8004140:	400200b8 	.word	0x400200b8
 8004144:	40020410 	.word	0x40020410
 8004148:	40020428 	.word	0x40020428
 800414c:	40020440 	.word	0x40020440
 8004150:	40020458 	.word	0x40020458
 8004154:	40020470 	.word	0x40020470
 8004158:	40020488 	.word	0x40020488
 800415c:	400204a0 	.word	0x400204a0
 8004160:	400204b8 	.word	0x400204b8
 8004164:	58025408 	.word	0x58025408
 8004168:	5802541c 	.word	0x5802541c
 800416c:	58025430 	.word	0x58025430
 8004170:	58025444 	.word	0x58025444
 8004174:	58025458 	.word	0x58025458
 8004178:	5802546c 	.word	0x5802546c
 800417c:	58025480 	.word	0x58025480
 8004180:	58025494 	.word	0x58025494
 8004184:	2300      	movs	r3, #0
 8004186:	2b00      	cmp	r3, #0
 8004188:	d028      	beq.n	80041dc <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800418e:	681a      	ldr	r2, [r3, #0]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004194:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004198:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800419e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041a4:	f003 031f 	and.w	r3, r3, #31
 80041a8:	2201      	movs	r2, #1
 80041aa:	409a      	lsls	r2, r3
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80041b4:	687a      	ldr	r2, [r7, #4]
 80041b6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80041b8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d00c      	beq.n	80041dc <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80041cc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80041d0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041d6:	687a      	ldr	r2, [r7, #4]
 80041d8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80041da:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2201      	movs	r2, #1
 80041e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2200      	movs	r2, #0
 80041e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d003      	beq.n	80041fc <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041f8:	6878      	ldr	r0, [r7, #4]
 80041fa:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80041fc:	2300      	movs	r3, #0
}
 80041fe:	4618      	mov	r0, r3
 8004200:	3710      	adds	r7, #16
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}
 8004206:	bf00      	nop

08004208 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b08a      	sub	sp, #40	@ 0x28
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004210:	2300      	movs	r3, #0
 8004212:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004214:	4b67      	ldr	r3, [pc, #412]	@ (80043b4 <HAL_DMA_IRQHandler+0x1ac>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a67      	ldr	r2, [pc, #412]	@ (80043b8 <HAL_DMA_IRQHandler+0x1b0>)
 800421a:	fba2 2303 	umull	r2, r3, r2, r3
 800421e:	0a9b      	lsrs	r3, r3, #10
 8004220:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004226:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800422c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800422e:	6a3b      	ldr	r3, [r7, #32]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004234:	69fb      	ldr	r3, [r7, #28]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a5f      	ldr	r2, [pc, #380]	@ (80043bc <HAL_DMA_IRQHandler+0x1b4>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d04a      	beq.n	80042da <HAL_DMA_IRQHandler+0xd2>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a5d      	ldr	r2, [pc, #372]	@ (80043c0 <HAL_DMA_IRQHandler+0x1b8>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d045      	beq.n	80042da <HAL_DMA_IRQHandler+0xd2>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a5c      	ldr	r2, [pc, #368]	@ (80043c4 <HAL_DMA_IRQHandler+0x1bc>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d040      	beq.n	80042da <HAL_DMA_IRQHandler+0xd2>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a5a      	ldr	r2, [pc, #360]	@ (80043c8 <HAL_DMA_IRQHandler+0x1c0>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d03b      	beq.n	80042da <HAL_DMA_IRQHandler+0xd2>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a59      	ldr	r2, [pc, #356]	@ (80043cc <HAL_DMA_IRQHandler+0x1c4>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d036      	beq.n	80042da <HAL_DMA_IRQHandler+0xd2>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a57      	ldr	r2, [pc, #348]	@ (80043d0 <HAL_DMA_IRQHandler+0x1c8>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d031      	beq.n	80042da <HAL_DMA_IRQHandler+0xd2>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a56      	ldr	r2, [pc, #344]	@ (80043d4 <HAL_DMA_IRQHandler+0x1cc>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d02c      	beq.n	80042da <HAL_DMA_IRQHandler+0xd2>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a54      	ldr	r2, [pc, #336]	@ (80043d8 <HAL_DMA_IRQHandler+0x1d0>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d027      	beq.n	80042da <HAL_DMA_IRQHandler+0xd2>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a53      	ldr	r2, [pc, #332]	@ (80043dc <HAL_DMA_IRQHandler+0x1d4>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d022      	beq.n	80042da <HAL_DMA_IRQHandler+0xd2>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a51      	ldr	r2, [pc, #324]	@ (80043e0 <HAL_DMA_IRQHandler+0x1d8>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d01d      	beq.n	80042da <HAL_DMA_IRQHandler+0xd2>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a50      	ldr	r2, [pc, #320]	@ (80043e4 <HAL_DMA_IRQHandler+0x1dc>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d018      	beq.n	80042da <HAL_DMA_IRQHandler+0xd2>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a4e      	ldr	r2, [pc, #312]	@ (80043e8 <HAL_DMA_IRQHandler+0x1e0>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d013      	beq.n	80042da <HAL_DMA_IRQHandler+0xd2>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a4d      	ldr	r2, [pc, #308]	@ (80043ec <HAL_DMA_IRQHandler+0x1e4>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d00e      	beq.n	80042da <HAL_DMA_IRQHandler+0xd2>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a4b      	ldr	r2, [pc, #300]	@ (80043f0 <HAL_DMA_IRQHandler+0x1e8>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d009      	beq.n	80042da <HAL_DMA_IRQHandler+0xd2>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a4a      	ldr	r2, [pc, #296]	@ (80043f4 <HAL_DMA_IRQHandler+0x1ec>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d004      	beq.n	80042da <HAL_DMA_IRQHandler+0xd2>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a48      	ldr	r2, [pc, #288]	@ (80043f8 <HAL_DMA_IRQHandler+0x1f0>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d101      	bne.n	80042de <HAL_DMA_IRQHandler+0xd6>
 80042da:	2301      	movs	r3, #1
 80042dc:	e000      	b.n	80042e0 <HAL_DMA_IRQHandler+0xd8>
 80042de:	2300      	movs	r3, #0
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	f000 842b 	beq.w	8004b3c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042ea:	f003 031f 	and.w	r3, r3, #31
 80042ee:	2208      	movs	r2, #8
 80042f0:	409a      	lsls	r2, r3
 80042f2:	69bb      	ldr	r3, [r7, #24]
 80042f4:	4013      	ands	r3, r2
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	f000 80a2 	beq.w	8004440 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a2e      	ldr	r2, [pc, #184]	@ (80043bc <HAL_DMA_IRQHandler+0x1b4>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d04a      	beq.n	800439c <HAL_DMA_IRQHandler+0x194>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a2d      	ldr	r2, [pc, #180]	@ (80043c0 <HAL_DMA_IRQHandler+0x1b8>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d045      	beq.n	800439c <HAL_DMA_IRQHandler+0x194>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a2b      	ldr	r2, [pc, #172]	@ (80043c4 <HAL_DMA_IRQHandler+0x1bc>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d040      	beq.n	800439c <HAL_DMA_IRQHandler+0x194>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a2a      	ldr	r2, [pc, #168]	@ (80043c8 <HAL_DMA_IRQHandler+0x1c0>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d03b      	beq.n	800439c <HAL_DMA_IRQHandler+0x194>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a28      	ldr	r2, [pc, #160]	@ (80043cc <HAL_DMA_IRQHandler+0x1c4>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d036      	beq.n	800439c <HAL_DMA_IRQHandler+0x194>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a27      	ldr	r2, [pc, #156]	@ (80043d0 <HAL_DMA_IRQHandler+0x1c8>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d031      	beq.n	800439c <HAL_DMA_IRQHandler+0x194>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a25      	ldr	r2, [pc, #148]	@ (80043d4 <HAL_DMA_IRQHandler+0x1cc>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d02c      	beq.n	800439c <HAL_DMA_IRQHandler+0x194>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a24      	ldr	r2, [pc, #144]	@ (80043d8 <HAL_DMA_IRQHandler+0x1d0>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d027      	beq.n	800439c <HAL_DMA_IRQHandler+0x194>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a22      	ldr	r2, [pc, #136]	@ (80043dc <HAL_DMA_IRQHandler+0x1d4>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d022      	beq.n	800439c <HAL_DMA_IRQHandler+0x194>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a21      	ldr	r2, [pc, #132]	@ (80043e0 <HAL_DMA_IRQHandler+0x1d8>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d01d      	beq.n	800439c <HAL_DMA_IRQHandler+0x194>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a1f      	ldr	r2, [pc, #124]	@ (80043e4 <HAL_DMA_IRQHandler+0x1dc>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d018      	beq.n	800439c <HAL_DMA_IRQHandler+0x194>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a1e      	ldr	r2, [pc, #120]	@ (80043e8 <HAL_DMA_IRQHandler+0x1e0>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d013      	beq.n	800439c <HAL_DMA_IRQHandler+0x194>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a1c      	ldr	r2, [pc, #112]	@ (80043ec <HAL_DMA_IRQHandler+0x1e4>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d00e      	beq.n	800439c <HAL_DMA_IRQHandler+0x194>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a1b      	ldr	r2, [pc, #108]	@ (80043f0 <HAL_DMA_IRQHandler+0x1e8>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d009      	beq.n	800439c <HAL_DMA_IRQHandler+0x194>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a19      	ldr	r2, [pc, #100]	@ (80043f4 <HAL_DMA_IRQHandler+0x1ec>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d004      	beq.n	800439c <HAL_DMA_IRQHandler+0x194>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a18      	ldr	r2, [pc, #96]	@ (80043f8 <HAL_DMA_IRQHandler+0x1f0>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d12f      	bne.n	80043fc <HAL_DMA_IRQHandler+0x1f4>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 0304 	and.w	r3, r3, #4
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	bf14      	ite	ne
 80043aa:	2301      	movne	r3, #1
 80043ac:	2300      	moveq	r3, #0
 80043ae:	b2db      	uxtb	r3, r3
 80043b0:	e02e      	b.n	8004410 <HAL_DMA_IRQHandler+0x208>
 80043b2:	bf00      	nop
 80043b4:	24000000 	.word	0x24000000
 80043b8:	1b4e81b5 	.word	0x1b4e81b5
 80043bc:	40020010 	.word	0x40020010
 80043c0:	40020028 	.word	0x40020028
 80043c4:	40020040 	.word	0x40020040
 80043c8:	40020058 	.word	0x40020058
 80043cc:	40020070 	.word	0x40020070
 80043d0:	40020088 	.word	0x40020088
 80043d4:	400200a0 	.word	0x400200a0
 80043d8:	400200b8 	.word	0x400200b8
 80043dc:	40020410 	.word	0x40020410
 80043e0:	40020428 	.word	0x40020428
 80043e4:	40020440 	.word	0x40020440
 80043e8:	40020458 	.word	0x40020458
 80043ec:	40020470 	.word	0x40020470
 80043f0:	40020488 	.word	0x40020488
 80043f4:	400204a0 	.word	0x400204a0
 80043f8:	400204b8 	.word	0x400204b8
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f003 0308 	and.w	r3, r3, #8
 8004406:	2b00      	cmp	r3, #0
 8004408:	bf14      	ite	ne
 800440a:	2301      	movne	r3, #1
 800440c:	2300      	moveq	r3, #0
 800440e:	b2db      	uxtb	r3, r3
 8004410:	2b00      	cmp	r3, #0
 8004412:	d015      	beq.n	8004440 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f022 0204 	bic.w	r2, r2, #4
 8004422:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004428:	f003 031f 	and.w	r3, r3, #31
 800442c:	2208      	movs	r2, #8
 800442e:	409a      	lsls	r2, r3
 8004430:	6a3b      	ldr	r3, [r7, #32]
 8004432:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004438:	f043 0201 	orr.w	r2, r3, #1
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004444:	f003 031f 	and.w	r3, r3, #31
 8004448:	69ba      	ldr	r2, [r7, #24]
 800444a:	fa22 f303 	lsr.w	r3, r2, r3
 800444e:	f003 0301 	and.w	r3, r3, #1
 8004452:	2b00      	cmp	r3, #0
 8004454:	d06e      	beq.n	8004534 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a69      	ldr	r2, [pc, #420]	@ (8004600 <HAL_DMA_IRQHandler+0x3f8>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d04a      	beq.n	80044f6 <HAL_DMA_IRQHandler+0x2ee>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a67      	ldr	r2, [pc, #412]	@ (8004604 <HAL_DMA_IRQHandler+0x3fc>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d045      	beq.n	80044f6 <HAL_DMA_IRQHandler+0x2ee>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a66      	ldr	r2, [pc, #408]	@ (8004608 <HAL_DMA_IRQHandler+0x400>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d040      	beq.n	80044f6 <HAL_DMA_IRQHandler+0x2ee>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a64      	ldr	r2, [pc, #400]	@ (800460c <HAL_DMA_IRQHandler+0x404>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d03b      	beq.n	80044f6 <HAL_DMA_IRQHandler+0x2ee>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a63      	ldr	r2, [pc, #396]	@ (8004610 <HAL_DMA_IRQHandler+0x408>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d036      	beq.n	80044f6 <HAL_DMA_IRQHandler+0x2ee>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a61      	ldr	r2, [pc, #388]	@ (8004614 <HAL_DMA_IRQHandler+0x40c>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d031      	beq.n	80044f6 <HAL_DMA_IRQHandler+0x2ee>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a60      	ldr	r2, [pc, #384]	@ (8004618 <HAL_DMA_IRQHandler+0x410>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d02c      	beq.n	80044f6 <HAL_DMA_IRQHandler+0x2ee>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a5e      	ldr	r2, [pc, #376]	@ (800461c <HAL_DMA_IRQHandler+0x414>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d027      	beq.n	80044f6 <HAL_DMA_IRQHandler+0x2ee>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a5d      	ldr	r2, [pc, #372]	@ (8004620 <HAL_DMA_IRQHandler+0x418>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d022      	beq.n	80044f6 <HAL_DMA_IRQHandler+0x2ee>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a5b      	ldr	r2, [pc, #364]	@ (8004624 <HAL_DMA_IRQHandler+0x41c>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d01d      	beq.n	80044f6 <HAL_DMA_IRQHandler+0x2ee>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a5a      	ldr	r2, [pc, #360]	@ (8004628 <HAL_DMA_IRQHandler+0x420>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d018      	beq.n	80044f6 <HAL_DMA_IRQHandler+0x2ee>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a58      	ldr	r2, [pc, #352]	@ (800462c <HAL_DMA_IRQHandler+0x424>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d013      	beq.n	80044f6 <HAL_DMA_IRQHandler+0x2ee>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a57      	ldr	r2, [pc, #348]	@ (8004630 <HAL_DMA_IRQHandler+0x428>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d00e      	beq.n	80044f6 <HAL_DMA_IRQHandler+0x2ee>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a55      	ldr	r2, [pc, #340]	@ (8004634 <HAL_DMA_IRQHandler+0x42c>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d009      	beq.n	80044f6 <HAL_DMA_IRQHandler+0x2ee>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a54      	ldr	r2, [pc, #336]	@ (8004638 <HAL_DMA_IRQHandler+0x430>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d004      	beq.n	80044f6 <HAL_DMA_IRQHandler+0x2ee>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a52      	ldr	r2, [pc, #328]	@ (800463c <HAL_DMA_IRQHandler+0x434>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d10a      	bne.n	800450c <HAL_DMA_IRQHandler+0x304>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	695b      	ldr	r3, [r3, #20]
 80044fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004500:	2b00      	cmp	r3, #0
 8004502:	bf14      	ite	ne
 8004504:	2301      	movne	r3, #1
 8004506:	2300      	moveq	r3, #0
 8004508:	b2db      	uxtb	r3, r3
 800450a:	e003      	b.n	8004514 <HAL_DMA_IRQHandler+0x30c>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	2300      	movs	r3, #0
 8004514:	2b00      	cmp	r3, #0
 8004516:	d00d      	beq.n	8004534 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800451c:	f003 031f 	and.w	r3, r3, #31
 8004520:	2201      	movs	r2, #1
 8004522:	409a      	lsls	r2, r3
 8004524:	6a3b      	ldr	r3, [r7, #32]
 8004526:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800452c:	f043 0202 	orr.w	r2, r3, #2
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004538:	f003 031f 	and.w	r3, r3, #31
 800453c:	2204      	movs	r2, #4
 800453e:	409a      	lsls	r2, r3
 8004540:	69bb      	ldr	r3, [r7, #24]
 8004542:	4013      	ands	r3, r2
 8004544:	2b00      	cmp	r3, #0
 8004546:	f000 808f 	beq.w	8004668 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a2c      	ldr	r2, [pc, #176]	@ (8004600 <HAL_DMA_IRQHandler+0x3f8>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d04a      	beq.n	80045ea <HAL_DMA_IRQHandler+0x3e2>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a2a      	ldr	r2, [pc, #168]	@ (8004604 <HAL_DMA_IRQHandler+0x3fc>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d045      	beq.n	80045ea <HAL_DMA_IRQHandler+0x3e2>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a29      	ldr	r2, [pc, #164]	@ (8004608 <HAL_DMA_IRQHandler+0x400>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d040      	beq.n	80045ea <HAL_DMA_IRQHandler+0x3e2>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a27      	ldr	r2, [pc, #156]	@ (800460c <HAL_DMA_IRQHandler+0x404>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d03b      	beq.n	80045ea <HAL_DMA_IRQHandler+0x3e2>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a26      	ldr	r2, [pc, #152]	@ (8004610 <HAL_DMA_IRQHandler+0x408>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d036      	beq.n	80045ea <HAL_DMA_IRQHandler+0x3e2>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a24      	ldr	r2, [pc, #144]	@ (8004614 <HAL_DMA_IRQHandler+0x40c>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d031      	beq.n	80045ea <HAL_DMA_IRQHandler+0x3e2>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a23      	ldr	r2, [pc, #140]	@ (8004618 <HAL_DMA_IRQHandler+0x410>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d02c      	beq.n	80045ea <HAL_DMA_IRQHandler+0x3e2>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a21      	ldr	r2, [pc, #132]	@ (800461c <HAL_DMA_IRQHandler+0x414>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d027      	beq.n	80045ea <HAL_DMA_IRQHandler+0x3e2>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a20      	ldr	r2, [pc, #128]	@ (8004620 <HAL_DMA_IRQHandler+0x418>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d022      	beq.n	80045ea <HAL_DMA_IRQHandler+0x3e2>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a1e      	ldr	r2, [pc, #120]	@ (8004624 <HAL_DMA_IRQHandler+0x41c>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d01d      	beq.n	80045ea <HAL_DMA_IRQHandler+0x3e2>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a1d      	ldr	r2, [pc, #116]	@ (8004628 <HAL_DMA_IRQHandler+0x420>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d018      	beq.n	80045ea <HAL_DMA_IRQHandler+0x3e2>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a1b      	ldr	r2, [pc, #108]	@ (800462c <HAL_DMA_IRQHandler+0x424>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d013      	beq.n	80045ea <HAL_DMA_IRQHandler+0x3e2>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a1a      	ldr	r2, [pc, #104]	@ (8004630 <HAL_DMA_IRQHandler+0x428>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d00e      	beq.n	80045ea <HAL_DMA_IRQHandler+0x3e2>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a18      	ldr	r2, [pc, #96]	@ (8004634 <HAL_DMA_IRQHandler+0x42c>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d009      	beq.n	80045ea <HAL_DMA_IRQHandler+0x3e2>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a17      	ldr	r2, [pc, #92]	@ (8004638 <HAL_DMA_IRQHandler+0x430>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d004      	beq.n	80045ea <HAL_DMA_IRQHandler+0x3e2>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a15      	ldr	r2, [pc, #84]	@ (800463c <HAL_DMA_IRQHandler+0x434>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d12a      	bne.n	8004640 <HAL_DMA_IRQHandler+0x438>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f003 0302 	and.w	r3, r3, #2
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	bf14      	ite	ne
 80045f8:	2301      	movne	r3, #1
 80045fa:	2300      	moveq	r3, #0
 80045fc:	b2db      	uxtb	r3, r3
 80045fe:	e023      	b.n	8004648 <HAL_DMA_IRQHandler+0x440>
 8004600:	40020010 	.word	0x40020010
 8004604:	40020028 	.word	0x40020028
 8004608:	40020040 	.word	0x40020040
 800460c:	40020058 	.word	0x40020058
 8004610:	40020070 	.word	0x40020070
 8004614:	40020088 	.word	0x40020088
 8004618:	400200a0 	.word	0x400200a0
 800461c:	400200b8 	.word	0x400200b8
 8004620:	40020410 	.word	0x40020410
 8004624:	40020428 	.word	0x40020428
 8004628:	40020440 	.word	0x40020440
 800462c:	40020458 	.word	0x40020458
 8004630:	40020470 	.word	0x40020470
 8004634:	40020488 	.word	0x40020488
 8004638:	400204a0 	.word	0x400204a0
 800463c:	400204b8 	.word	0x400204b8
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	2300      	movs	r3, #0
 8004648:	2b00      	cmp	r3, #0
 800464a:	d00d      	beq.n	8004668 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004650:	f003 031f 	and.w	r3, r3, #31
 8004654:	2204      	movs	r2, #4
 8004656:	409a      	lsls	r2, r3
 8004658:	6a3b      	ldr	r3, [r7, #32]
 800465a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004660:	f043 0204 	orr.w	r2, r3, #4
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800466c:	f003 031f 	and.w	r3, r3, #31
 8004670:	2210      	movs	r2, #16
 8004672:	409a      	lsls	r2, r3
 8004674:	69bb      	ldr	r3, [r7, #24]
 8004676:	4013      	ands	r3, r2
 8004678:	2b00      	cmp	r3, #0
 800467a:	f000 80a6 	beq.w	80047ca <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a85      	ldr	r2, [pc, #532]	@ (8004898 <HAL_DMA_IRQHandler+0x690>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d04a      	beq.n	800471e <HAL_DMA_IRQHandler+0x516>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a83      	ldr	r2, [pc, #524]	@ (800489c <HAL_DMA_IRQHandler+0x694>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d045      	beq.n	800471e <HAL_DMA_IRQHandler+0x516>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a82      	ldr	r2, [pc, #520]	@ (80048a0 <HAL_DMA_IRQHandler+0x698>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d040      	beq.n	800471e <HAL_DMA_IRQHandler+0x516>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a80      	ldr	r2, [pc, #512]	@ (80048a4 <HAL_DMA_IRQHandler+0x69c>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d03b      	beq.n	800471e <HAL_DMA_IRQHandler+0x516>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a7f      	ldr	r2, [pc, #508]	@ (80048a8 <HAL_DMA_IRQHandler+0x6a0>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d036      	beq.n	800471e <HAL_DMA_IRQHandler+0x516>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a7d      	ldr	r2, [pc, #500]	@ (80048ac <HAL_DMA_IRQHandler+0x6a4>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d031      	beq.n	800471e <HAL_DMA_IRQHandler+0x516>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a7c      	ldr	r2, [pc, #496]	@ (80048b0 <HAL_DMA_IRQHandler+0x6a8>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d02c      	beq.n	800471e <HAL_DMA_IRQHandler+0x516>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a7a      	ldr	r2, [pc, #488]	@ (80048b4 <HAL_DMA_IRQHandler+0x6ac>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d027      	beq.n	800471e <HAL_DMA_IRQHandler+0x516>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a79      	ldr	r2, [pc, #484]	@ (80048b8 <HAL_DMA_IRQHandler+0x6b0>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d022      	beq.n	800471e <HAL_DMA_IRQHandler+0x516>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a77      	ldr	r2, [pc, #476]	@ (80048bc <HAL_DMA_IRQHandler+0x6b4>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d01d      	beq.n	800471e <HAL_DMA_IRQHandler+0x516>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a76      	ldr	r2, [pc, #472]	@ (80048c0 <HAL_DMA_IRQHandler+0x6b8>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d018      	beq.n	800471e <HAL_DMA_IRQHandler+0x516>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a74      	ldr	r2, [pc, #464]	@ (80048c4 <HAL_DMA_IRQHandler+0x6bc>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d013      	beq.n	800471e <HAL_DMA_IRQHandler+0x516>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a73      	ldr	r2, [pc, #460]	@ (80048c8 <HAL_DMA_IRQHandler+0x6c0>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d00e      	beq.n	800471e <HAL_DMA_IRQHandler+0x516>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a71      	ldr	r2, [pc, #452]	@ (80048cc <HAL_DMA_IRQHandler+0x6c4>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d009      	beq.n	800471e <HAL_DMA_IRQHandler+0x516>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a70      	ldr	r2, [pc, #448]	@ (80048d0 <HAL_DMA_IRQHandler+0x6c8>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d004      	beq.n	800471e <HAL_DMA_IRQHandler+0x516>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a6e      	ldr	r2, [pc, #440]	@ (80048d4 <HAL_DMA_IRQHandler+0x6cc>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d10a      	bne.n	8004734 <HAL_DMA_IRQHandler+0x52c>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f003 0308 	and.w	r3, r3, #8
 8004728:	2b00      	cmp	r3, #0
 800472a:	bf14      	ite	ne
 800472c:	2301      	movne	r3, #1
 800472e:	2300      	moveq	r3, #0
 8004730:	b2db      	uxtb	r3, r3
 8004732:	e009      	b.n	8004748 <HAL_DMA_IRQHandler+0x540>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f003 0304 	and.w	r3, r3, #4
 800473e:	2b00      	cmp	r3, #0
 8004740:	bf14      	ite	ne
 8004742:	2301      	movne	r3, #1
 8004744:	2300      	moveq	r3, #0
 8004746:	b2db      	uxtb	r3, r3
 8004748:	2b00      	cmp	r3, #0
 800474a:	d03e      	beq.n	80047ca <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004750:	f003 031f 	and.w	r3, r3, #31
 8004754:	2210      	movs	r2, #16
 8004756:	409a      	lsls	r2, r3
 8004758:	6a3b      	ldr	r3, [r7, #32]
 800475a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004766:	2b00      	cmp	r3, #0
 8004768:	d018      	beq.n	800479c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004774:	2b00      	cmp	r3, #0
 8004776:	d108      	bne.n	800478a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800477c:	2b00      	cmp	r3, #0
 800477e:	d024      	beq.n	80047ca <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004784:	6878      	ldr	r0, [r7, #4]
 8004786:	4798      	blx	r3
 8004788:	e01f      	b.n	80047ca <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800478e:	2b00      	cmp	r3, #0
 8004790:	d01b      	beq.n	80047ca <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	4798      	blx	r3
 800479a:	e016      	b.n	80047ca <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d107      	bne.n	80047ba <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f022 0208 	bic.w	r2, r2, #8
 80047b8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d003      	beq.n	80047ca <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047c6:	6878      	ldr	r0, [r7, #4]
 80047c8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047ce:	f003 031f 	and.w	r3, r3, #31
 80047d2:	2220      	movs	r2, #32
 80047d4:	409a      	lsls	r2, r3
 80047d6:	69bb      	ldr	r3, [r7, #24]
 80047d8:	4013      	ands	r3, r2
 80047da:	2b00      	cmp	r3, #0
 80047dc:	f000 8110 	beq.w	8004a00 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a2c      	ldr	r2, [pc, #176]	@ (8004898 <HAL_DMA_IRQHandler+0x690>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d04a      	beq.n	8004880 <HAL_DMA_IRQHandler+0x678>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a2b      	ldr	r2, [pc, #172]	@ (800489c <HAL_DMA_IRQHandler+0x694>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d045      	beq.n	8004880 <HAL_DMA_IRQHandler+0x678>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a29      	ldr	r2, [pc, #164]	@ (80048a0 <HAL_DMA_IRQHandler+0x698>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d040      	beq.n	8004880 <HAL_DMA_IRQHandler+0x678>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a28      	ldr	r2, [pc, #160]	@ (80048a4 <HAL_DMA_IRQHandler+0x69c>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d03b      	beq.n	8004880 <HAL_DMA_IRQHandler+0x678>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a26      	ldr	r2, [pc, #152]	@ (80048a8 <HAL_DMA_IRQHandler+0x6a0>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d036      	beq.n	8004880 <HAL_DMA_IRQHandler+0x678>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a25      	ldr	r2, [pc, #148]	@ (80048ac <HAL_DMA_IRQHandler+0x6a4>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d031      	beq.n	8004880 <HAL_DMA_IRQHandler+0x678>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a23      	ldr	r2, [pc, #140]	@ (80048b0 <HAL_DMA_IRQHandler+0x6a8>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d02c      	beq.n	8004880 <HAL_DMA_IRQHandler+0x678>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a22      	ldr	r2, [pc, #136]	@ (80048b4 <HAL_DMA_IRQHandler+0x6ac>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d027      	beq.n	8004880 <HAL_DMA_IRQHandler+0x678>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a20      	ldr	r2, [pc, #128]	@ (80048b8 <HAL_DMA_IRQHandler+0x6b0>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d022      	beq.n	8004880 <HAL_DMA_IRQHandler+0x678>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a1f      	ldr	r2, [pc, #124]	@ (80048bc <HAL_DMA_IRQHandler+0x6b4>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d01d      	beq.n	8004880 <HAL_DMA_IRQHandler+0x678>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a1d      	ldr	r2, [pc, #116]	@ (80048c0 <HAL_DMA_IRQHandler+0x6b8>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d018      	beq.n	8004880 <HAL_DMA_IRQHandler+0x678>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a1c      	ldr	r2, [pc, #112]	@ (80048c4 <HAL_DMA_IRQHandler+0x6bc>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d013      	beq.n	8004880 <HAL_DMA_IRQHandler+0x678>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a1a      	ldr	r2, [pc, #104]	@ (80048c8 <HAL_DMA_IRQHandler+0x6c0>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d00e      	beq.n	8004880 <HAL_DMA_IRQHandler+0x678>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a19      	ldr	r2, [pc, #100]	@ (80048cc <HAL_DMA_IRQHandler+0x6c4>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d009      	beq.n	8004880 <HAL_DMA_IRQHandler+0x678>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a17      	ldr	r2, [pc, #92]	@ (80048d0 <HAL_DMA_IRQHandler+0x6c8>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d004      	beq.n	8004880 <HAL_DMA_IRQHandler+0x678>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a16      	ldr	r2, [pc, #88]	@ (80048d4 <HAL_DMA_IRQHandler+0x6cc>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d12b      	bne.n	80048d8 <HAL_DMA_IRQHandler+0x6d0>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f003 0310 	and.w	r3, r3, #16
 800488a:	2b00      	cmp	r3, #0
 800488c:	bf14      	ite	ne
 800488e:	2301      	movne	r3, #1
 8004890:	2300      	moveq	r3, #0
 8004892:	b2db      	uxtb	r3, r3
 8004894:	e02a      	b.n	80048ec <HAL_DMA_IRQHandler+0x6e4>
 8004896:	bf00      	nop
 8004898:	40020010 	.word	0x40020010
 800489c:	40020028 	.word	0x40020028
 80048a0:	40020040 	.word	0x40020040
 80048a4:	40020058 	.word	0x40020058
 80048a8:	40020070 	.word	0x40020070
 80048ac:	40020088 	.word	0x40020088
 80048b0:	400200a0 	.word	0x400200a0
 80048b4:	400200b8 	.word	0x400200b8
 80048b8:	40020410 	.word	0x40020410
 80048bc:	40020428 	.word	0x40020428
 80048c0:	40020440 	.word	0x40020440
 80048c4:	40020458 	.word	0x40020458
 80048c8:	40020470 	.word	0x40020470
 80048cc:	40020488 	.word	0x40020488
 80048d0:	400204a0 	.word	0x400204a0
 80048d4:	400204b8 	.word	0x400204b8
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f003 0302 	and.w	r3, r3, #2
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	bf14      	ite	ne
 80048e6:	2301      	movne	r3, #1
 80048e8:	2300      	moveq	r3, #0
 80048ea:	b2db      	uxtb	r3, r3
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	f000 8087 	beq.w	8004a00 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048f6:	f003 031f 	and.w	r3, r3, #31
 80048fa:	2220      	movs	r2, #32
 80048fc:	409a      	lsls	r2, r3
 80048fe:	6a3b      	ldr	r3, [r7, #32]
 8004900:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004908:	b2db      	uxtb	r3, r3
 800490a:	2b04      	cmp	r3, #4
 800490c:	d139      	bne.n	8004982 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	681a      	ldr	r2, [r3, #0]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f022 0216 	bic.w	r2, r2, #22
 800491c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	695a      	ldr	r2, [r3, #20]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800492c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004932:	2b00      	cmp	r3, #0
 8004934:	d103      	bne.n	800493e <HAL_DMA_IRQHandler+0x736>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800493a:	2b00      	cmp	r3, #0
 800493c:	d007      	beq.n	800494e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f022 0208 	bic.w	r2, r2, #8
 800494c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004952:	f003 031f 	and.w	r3, r3, #31
 8004956:	223f      	movs	r2, #63	@ 0x3f
 8004958:	409a      	lsls	r2, r3
 800495a:	6a3b      	ldr	r3, [r7, #32]
 800495c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2201      	movs	r2, #1
 8004962:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2200      	movs	r2, #0
 800496a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004972:	2b00      	cmp	r3, #0
 8004974:	f000 834a 	beq.w	800500c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800497c:	6878      	ldr	r0, [r7, #4]
 800497e:	4798      	blx	r3
          }
          return;
 8004980:	e344      	b.n	800500c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800498c:	2b00      	cmp	r3, #0
 800498e:	d018      	beq.n	80049c2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800499a:	2b00      	cmp	r3, #0
 800499c:	d108      	bne.n	80049b0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d02c      	beq.n	8004a00 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	4798      	blx	r3
 80049ae:	e027      	b.n	8004a00 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d023      	beq.n	8004a00 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049bc:	6878      	ldr	r0, [r7, #4]
 80049be:	4798      	blx	r3
 80049c0:	e01e      	b.n	8004a00 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d10f      	bne.n	80049f0 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f022 0210 	bic.w	r2, r2, #16
 80049de:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2201      	movs	r2, #1
 80049e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2200      	movs	r2, #0
 80049ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d003      	beq.n	8004a00 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049fc:	6878      	ldr	r0, [r7, #4]
 80049fe:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	f000 8306 	beq.w	8005016 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a0e:	f003 0301 	and.w	r3, r3, #1
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	f000 8088 	beq.w	8004b28 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2204      	movs	r2, #4
 8004a1c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a7a      	ldr	r2, [pc, #488]	@ (8004c10 <HAL_DMA_IRQHandler+0xa08>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d04a      	beq.n	8004ac0 <HAL_DMA_IRQHandler+0x8b8>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a79      	ldr	r2, [pc, #484]	@ (8004c14 <HAL_DMA_IRQHandler+0xa0c>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d045      	beq.n	8004ac0 <HAL_DMA_IRQHandler+0x8b8>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a77      	ldr	r2, [pc, #476]	@ (8004c18 <HAL_DMA_IRQHandler+0xa10>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d040      	beq.n	8004ac0 <HAL_DMA_IRQHandler+0x8b8>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a76      	ldr	r2, [pc, #472]	@ (8004c1c <HAL_DMA_IRQHandler+0xa14>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d03b      	beq.n	8004ac0 <HAL_DMA_IRQHandler+0x8b8>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a74      	ldr	r2, [pc, #464]	@ (8004c20 <HAL_DMA_IRQHandler+0xa18>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d036      	beq.n	8004ac0 <HAL_DMA_IRQHandler+0x8b8>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a73      	ldr	r2, [pc, #460]	@ (8004c24 <HAL_DMA_IRQHandler+0xa1c>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d031      	beq.n	8004ac0 <HAL_DMA_IRQHandler+0x8b8>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a71      	ldr	r2, [pc, #452]	@ (8004c28 <HAL_DMA_IRQHandler+0xa20>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d02c      	beq.n	8004ac0 <HAL_DMA_IRQHandler+0x8b8>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a70      	ldr	r2, [pc, #448]	@ (8004c2c <HAL_DMA_IRQHandler+0xa24>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d027      	beq.n	8004ac0 <HAL_DMA_IRQHandler+0x8b8>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a6e      	ldr	r2, [pc, #440]	@ (8004c30 <HAL_DMA_IRQHandler+0xa28>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d022      	beq.n	8004ac0 <HAL_DMA_IRQHandler+0x8b8>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a6d      	ldr	r2, [pc, #436]	@ (8004c34 <HAL_DMA_IRQHandler+0xa2c>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d01d      	beq.n	8004ac0 <HAL_DMA_IRQHandler+0x8b8>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a6b      	ldr	r2, [pc, #428]	@ (8004c38 <HAL_DMA_IRQHandler+0xa30>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d018      	beq.n	8004ac0 <HAL_DMA_IRQHandler+0x8b8>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a6a      	ldr	r2, [pc, #424]	@ (8004c3c <HAL_DMA_IRQHandler+0xa34>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d013      	beq.n	8004ac0 <HAL_DMA_IRQHandler+0x8b8>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a68      	ldr	r2, [pc, #416]	@ (8004c40 <HAL_DMA_IRQHandler+0xa38>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d00e      	beq.n	8004ac0 <HAL_DMA_IRQHandler+0x8b8>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a67      	ldr	r2, [pc, #412]	@ (8004c44 <HAL_DMA_IRQHandler+0xa3c>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d009      	beq.n	8004ac0 <HAL_DMA_IRQHandler+0x8b8>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a65      	ldr	r2, [pc, #404]	@ (8004c48 <HAL_DMA_IRQHandler+0xa40>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d004      	beq.n	8004ac0 <HAL_DMA_IRQHandler+0x8b8>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a64      	ldr	r2, [pc, #400]	@ (8004c4c <HAL_DMA_IRQHandler+0xa44>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d108      	bne.n	8004ad2 <HAL_DMA_IRQHandler+0x8ca>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	681a      	ldr	r2, [r3, #0]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f022 0201 	bic.w	r2, r2, #1
 8004ace:	601a      	str	r2, [r3, #0]
 8004ad0:	e007      	b.n	8004ae2 <HAL_DMA_IRQHandler+0x8da>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f022 0201 	bic.w	r2, r2, #1
 8004ae0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	3301      	adds	r3, #1
 8004ae6:	60fb      	str	r3, [r7, #12]
 8004ae8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004aea:	429a      	cmp	r2, r3
 8004aec:	d307      	bcc.n	8004afe <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f003 0301 	and.w	r3, r3, #1
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d1f2      	bne.n	8004ae2 <HAL_DMA_IRQHandler+0x8da>
 8004afc:	e000      	b.n	8004b00 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004afe:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f003 0301 	and.w	r3, r3, #1
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d004      	beq.n	8004b18 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2203      	movs	r2, #3
 8004b12:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8004b16:	e003      	b.n	8004b20 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2200      	movs	r2, #0
 8004b24:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	f000 8272 	beq.w	8005016 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	4798      	blx	r3
 8004b3a:	e26c      	b.n	8005016 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a43      	ldr	r2, [pc, #268]	@ (8004c50 <HAL_DMA_IRQHandler+0xa48>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d022      	beq.n	8004b8c <HAL_DMA_IRQHandler+0x984>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a42      	ldr	r2, [pc, #264]	@ (8004c54 <HAL_DMA_IRQHandler+0xa4c>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d01d      	beq.n	8004b8c <HAL_DMA_IRQHandler+0x984>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a40      	ldr	r2, [pc, #256]	@ (8004c58 <HAL_DMA_IRQHandler+0xa50>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d018      	beq.n	8004b8c <HAL_DMA_IRQHandler+0x984>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a3f      	ldr	r2, [pc, #252]	@ (8004c5c <HAL_DMA_IRQHandler+0xa54>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d013      	beq.n	8004b8c <HAL_DMA_IRQHandler+0x984>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a3d      	ldr	r2, [pc, #244]	@ (8004c60 <HAL_DMA_IRQHandler+0xa58>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d00e      	beq.n	8004b8c <HAL_DMA_IRQHandler+0x984>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a3c      	ldr	r2, [pc, #240]	@ (8004c64 <HAL_DMA_IRQHandler+0xa5c>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d009      	beq.n	8004b8c <HAL_DMA_IRQHandler+0x984>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a3a      	ldr	r2, [pc, #232]	@ (8004c68 <HAL_DMA_IRQHandler+0xa60>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d004      	beq.n	8004b8c <HAL_DMA_IRQHandler+0x984>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a39      	ldr	r2, [pc, #228]	@ (8004c6c <HAL_DMA_IRQHandler+0xa64>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d101      	bne.n	8004b90 <HAL_DMA_IRQHandler+0x988>
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	e000      	b.n	8004b92 <HAL_DMA_IRQHandler+0x98a>
 8004b90:	2300      	movs	r3, #0
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	f000 823f 	beq.w	8005016 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ba4:	f003 031f 	and.w	r3, r3, #31
 8004ba8:	2204      	movs	r2, #4
 8004baa:	409a      	lsls	r2, r3
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	4013      	ands	r3, r2
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	f000 80cd 	beq.w	8004d50 <HAL_DMA_IRQHandler+0xb48>
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	f003 0304 	and.w	r3, r3, #4
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	f000 80c7 	beq.w	8004d50 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bc6:	f003 031f 	and.w	r3, r3, #31
 8004bca:	2204      	movs	r2, #4
 8004bcc:	409a      	lsls	r2, r3
 8004bce:	69fb      	ldr	r3, [r7, #28]
 8004bd0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d049      	beq.n	8004c70 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004bdc:	693b      	ldr	r3, [r7, #16]
 8004bde:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d109      	bne.n	8004bfa <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	f000 8210 	beq.w	8005010 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004bf4:	6878      	ldr	r0, [r7, #4]
 8004bf6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004bf8:	e20a      	b.n	8005010 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	f000 8206 	beq.w	8005010 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c08:	6878      	ldr	r0, [r7, #4]
 8004c0a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004c0c:	e200      	b.n	8005010 <HAL_DMA_IRQHandler+0xe08>
 8004c0e:	bf00      	nop
 8004c10:	40020010 	.word	0x40020010
 8004c14:	40020028 	.word	0x40020028
 8004c18:	40020040 	.word	0x40020040
 8004c1c:	40020058 	.word	0x40020058
 8004c20:	40020070 	.word	0x40020070
 8004c24:	40020088 	.word	0x40020088
 8004c28:	400200a0 	.word	0x400200a0
 8004c2c:	400200b8 	.word	0x400200b8
 8004c30:	40020410 	.word	0x40020410
 8004c34:	40020428 	.word	0x40020428
 8004c38:	40020440 	.word	0x40020440
 8004c3c:	40020458 	.word	0x40020458
 8004c40:	40020470 	.word	0x40020470
 8004c44:	40020488 	.word	0x40020488
 8004c48:	400204a0 	.word	0x400204a0
 8004c4c:	400204b8 	.word	0x400204b8
 8004c50:	58025408 	.word	0x58025408
 8004c54:	5802541c 	.word	0x5802541c
 8004c58:	58025430 	.word	0x58025430
 8004c5c:	58025444 	.word	0x58025444
 8004c60:	58025458 	.word	0x58025458
 8004c64:	5802546c 	.word	0x5802546c
 8004c68:	58025480 	.word	0x58025480
 8004c6c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	f003 0320 	and.w	r3, r3, #32
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d160      	bne.n	8004d3c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a7f      	ldr	r2, [pc, #508]	@ (8004e7c <HAL_DMA_IRQHandler+0xc74>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d04a      	beq.n	8004d1a <HAL_DMA_IRQHandler+0xb12>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a7d      	ldr	r2, [pc, #500]	@ (8004e80 <HAL_DMA_IRQHandler+0xc78>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d045      	beq.n	8004d1a <HAL_DMA_IRQHandler+0xb12>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a7c      	ldr	r2, [pc, #496]	@ (8004e84 <HAL_DMA_IRQHandler+0xc7c>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d040      	beq.n	8004d1a <HAL_DMA_IRQHandler+0xb12>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a7a      	ldr	r2, [pc, #488]	@ (8004e88 <HAL_DMA_IRQHandler+0xc80>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d03b      	beq.n	8004d1a <HAL_DMA_IRQHandler+0xb12>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a79      	ldr	r2, [pc, #484]	@ (8004e8c <HAL_DMA_IRQHandler+0xc84>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d036      	beq.n	8004d1a <HAL_DMA_IRQHandler+0xb12>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a77      	ldr	r2, [pc, #476]	@ (8004e90 <HAL_DMA_IRQHandler+0xc88>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d031      	beq.n	8004d1a <HAL_DMA_IRQHandler+0xb12>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a76      	ldr	r2, [pc, #472]	@ (8004e94 <HAL_DMA_IRQHandler+0xc8c>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d02c      	beq.n	8004d1a <HAL_DMA_IRQHandler+0xb12>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a74      	ldr	r2, [pc, #464]	@ (8004e98 <HAL_DMA_IRQHandler+0xc90>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d027      	beq.n	8004d1a <HAL_DMA_IRQHandler+0xb12>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a73      	ldr	r2, [pc, #460]	@ (8004e9c <HAL_DMA_IRQHandler+0xc94>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d022      	beq.n	8004d1a <HAL_DMA_IRQHandler+0xb12>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a71      	ldr	r2, [pc, #452]	@ (8004ea0 <HAL_DMA_IRQHandler+0xc98>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d01d      	beq.n	8004d1a <HAL_DMA_IRQHandler+0xb12>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a70      	ldr	r2, [pc, #448]	@ (8004ea4 <HAL_DMA_IRQHandler+0xc9c>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d018      	beq.n	8004d1a <HAL_DMA_IRQHandler+0xb12>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a6e      	ldr	r2, [pc, #440]	@ (8004ea8 <HAL_DMA_IRQHandler+0xca0>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d013      	beq.n	8004d1a <HAL_DMA_IRQHandler+0xb12>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a6d      	ldr	r2, [pc, #436]	@ (8004eac <HAL_DMA_IRQHandler+0xca4>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d00e      	beq.n	8004d1a <HAL_DMA_IRQHandler+0xb12>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a6b      	ldr	r2, [pc, #428]	@ (8004eb0 <HAL_DMA_IRQHandler+0xca8>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d009      	beq.n	8004d1a <HAL_DMA_IRQHandler+0xb12>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a6a      	ldr	r2, [pc, #424]	@ (8004eb4 <HAL_DMA_IRQHandler+0xcac>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d004      	beq.n	8004d1a <HAL_DMA_IRQHandler+0xb12>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a68      	ldr	r2, [pc, #416]	@ (8004eb8 <HAL_DMA_IRQHandler+0xcb0>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d108      	bne.n	8004d2c <HAL_DMA_IRQHandler+0xb24>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	681a      	ldr	r2, [r3, #0]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f022 0208 	bic.w	r2, r2, #8
 8004d28:	601a      	str	r2, [r3, #0]
 8004d2a:	e007      	b.n	8004d3c <HAL_DMA_IRQHandler+0xb34>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	681a      	ldr	r2, [r3, #0]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f022 0204 	bic.w	r2, r2, #4
 8004d3a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	f000 8165 	beq.w	8005010 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004d4e:	e15f      	b.n	8005010 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d54:	f003 031f 	and.w	r3, r3, #31
 8004d58:	2202      	movs	r2, #2
 8004d5a:	409a      	lsls	r2, r3
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	4013      	ands	r3, r2
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	f000 80c5 	beq.w	8004ef0 <HAL_DMA_IRQHandler+0xce8>
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	f003 0302 	and.w	r3, r3, #2
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	f000 80bf 	beq.w	8004ef0 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d76:	f003 031f 	and.w	r3, r3, #31
 8004d7a:	2202      	movs	r2, #2
 8004d7c:	409a      	lsls	r2, r3
 8004d7e:	69fb      	ldr	r3, [r7, #28]
 8004d80:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d018      	beq.n	8004dbe <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d109      	bne.n	8004daa <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	f000 813a 	beq.w	8005014 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004da4:	6878      	ldr	r0, [r7, #4]
 8004da6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004da8:	e134      	b.n	8005014 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	f000 8130 	beq.w	8005014 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004db8:	6878      	ldr	r0, [r7, #4]
 8004dba:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004dbc:	e12a      	b.n	8005014 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004dbe:	693b      	ldr	r3, [r7, #16]
 8004dc0:	f003 0320 	and.w	r3, r3, #32
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	f040 8089 	bne.w	8004edc <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a2b      	ldr	r2, [pc, #172]	@ (8004e7c <HAL_DMA_IRQHandler+0xc74>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d04a      	beq.n	8004e6a <HAL_DMA_IRQHandler+0xc62>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a29      	ldr	r2, [pc, #164]	@ (8004e80 <HAL_DMA_IRQHandler+0xc78>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d045      	beq.n	8004e6a <HAL_DMA_IRQHandler+0xc62>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a28      	ldr	r2, [pc, #160]	@ (8004e84 <HAL_DMA_IRQHandler+0xc7c>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d040      	beq.n	8004e6a <HAL_DMA_IRQHandler+0xc62>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a26      	ldr	r2, [pc, #152]	@ (8004e88 <HAL_DMA_IRQHandler+0xc80>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d03b      	beq.n	8004e6a <HAL_DMA_IRQHandler+0xc62>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a25      	ldr	r2, [pc, #148]	@ (8004e8c <HAL_DMA_IRQHandler+0xc84>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d036      	beq.n	8004e6a <HAL_DMA_IRQHandler+0xc62>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a23      	ldr	r2, [pc, #140]	@ (8004e90 <HAL_DMA_IRQHandler+0xc88>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d031      	beq.n	8004e6a <HAL_DMA_IRQHandler+0xc62>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a22      	ldr	r2, [pc, #136]	@ (8004e94 <HAL_DMA_IRQHandler+0xc8c>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d02c      	beq.n	8004e6a <HAL_DMA_IRQHandler+0xc62>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a20      	ldr	r2, [pc, #128]	@ (8004e98 <HAL_DMA_IRQHandler+0xc90>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d027      	beq.n	8004e6a <HAL_DMA_IRQHandler+0xc62>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a1f      	ldr	r2, [pc, #124]	@ (8004e9c <HAL_DMA_IRQHandler+0xc94>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d022      	beq.n	8004e6a <HAL_DMA_IRQHandler+0xc62>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a1d      	ldr	r2, [pc, #116]	@ (8004ea0 <HAL_DMA_IRQHandler+0xc98>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d01d      	beq.n	8004e6a <HAL_DMA_IRQHandler+0xc62>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a1c      	ldr	r2, [pc, #112]	@ (8004ea4 <HAL_DMA_IRQHandler+0xc9c>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d018      	beq.n	8004e6a <HAL_DMA_IRQHandler+0xc62>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a1a      	ldr	r2, [pc, #104]	@ (8004ea8 <HAL_DMA_IRQHandler+0xca0>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d013      	beq.n	8004e6a <HAL_DMA_IRQHandler+0xc62>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a19      	ldr	r2, [pc, #100]	@ (8004eac <HAL_DMA_IRQHandler+0xca4>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d00e      	beq.n	8004e6a <HAL_DMA_IRQHandler+0xc62>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a17      	ldr	r2, [pc, #92]	@ (8004eb0 <HAL_DMA_IRQHandler+0xca8>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d009      	beq.n	8004e6a <HAL_DMA_IRQHandler+0xc62>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a16      	ldr	r2, [pc, #88]	@ (8004eb4 <HAL_DMA_IRQHandler+0xcac>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d004      	beq.n	8004e6a <HAL_DMA_IRQHandler+0xc62>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a14      	ldr	r2, [pc, #80]	@ (8004eb8 <HAL_DMA_IRQHandler+0xcb0>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d128      	bne.n	8004ebc <HAL_DMA_IRQHandler+0xcb4>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	681a      	ldr	r2, [r3, #0]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f022 0214 	bic.w	r2, r2, #20
 8004e78:	601a      	str	r2, [r3, #0]
 8004e7a:	e027      	b.n	8004ecc <HAL_DMA_IRQHandler+0xcc4>
 8004e7c:	40020010 	.word	0x40020010
 8004e80:	40020028 	.word	0x40020028
 8004e84:	40020040 	.word	0x40020040
 8004e88:	40020058 	.word	0x40020058
 8004e8c:	40020070 	.word	0x40020070
 8004e90:	40020088 	.word	0x40020088
 8004e94:	400200a0 	.word	0x400200a0
 8004e98:	400200b8 	.word	0x400200b8
 8004e9c:	40020410 	.word	0x40020410
 8004ea0:	40020428 	.word	0x40020428
 8004ea4:	40020440 	.word	0x40020440
 8004ea8:	40020458 	.word	0x40020458
 8004eac:	40020470 	.word	0x40020470
 8004eb0:	40020488 	.word	0x40020488
 8004eb4:	400204a0 	.word	0x400204a0
 8004eb8:	400204b8 	.word	0x400204b8
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f022 020a 	bic.w	r2, r2, #10
 8004eca:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2201      	movs	r2, #1
 8004ed0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	f000 8097 	beq.w	8005014 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004eee:	e091      	b.n	8005014 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ef4:	f003 031f 	and.w	r3, r3, #31
 8004ef8:	2208      	movs	r2, #8
 8004efa:	409a      	lsls	r2, r3
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	4013      	ands	r3, r2
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	f000 8088 	beq.w	8005016 <HAL_DMA_IRQHandler+0xe0e>
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	f003 0308 	and.w	r3, r3, #8
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	f000 8082 	beq.w	8005016 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a41      	ldr	r2, [pc, #260]	@ (800501c <HAL_DMA_IRQHandler+0xe14>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d04a      	beq.n	8004fb2 <HAL_DMA_IRQHandler+0xdaa>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a3f      	ldr	r2, [pc, #252]	@ (8005020 <HAL_DMA_IRQHandler+0xe18>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d045      	beq.n	8004fb2 <HAL_DMA_IRQHandler+0xdaa>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a3e      	ldr	r2, [pc, #248]	@ (8005024 <HAL_DMA_IRQHandler+0xe1c>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d040      	beq.n	8004fb2 <HAL_DMA_IRQHandler+0xdaa>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a3c      	ldr	r2, [pc, #240]	@ (8005028 <HAL_DMA_IRQHandler+0xe20>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d03b      	beq.n	8004fb2 <HAL_DMA_IRQHandler+0xdaa>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a3b      	ldr	r2, [pc, #236]	@ (800502c <HAL_DMA_IRQHandler+0xe24>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d036      	beq.n	8004fb2 <HAL_DMA_IRQHandler+0xdaa>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a39      	ldr	r2, [pc, #228]	@ (8005030 <HAL_DMA_IRQHandler+0xe28>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d031      	beq.n	8004fb2 <HAL_DMA_IRQHandler+0xdaa>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a38      	ldr	r2, [pc, #224]	@ (8005034 <HAL_DMA_IRQHandler+0xe2c>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d02c      	beq.n	8004fb2 <HAL_DMA_IRQHandler+0xdaa>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a36      	ldr	r2, [pc, #216]	@ (8005038 <HAL_DMA_IRQHandler+0xe30>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d027      	beq.n	8004fb2 <HAL_DMA_IRQHandler+0xdaa>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a35      	ldr	r2, [pc, #212]	@ (800503c <HAL_DMA_IRQHandler+0xe34>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d022      	beq.n	8004fb2 <HAL_DMA_IRQHandler+0xdaa>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a33      	ldr	r2, [pc, #204]	@ (8005040 <HAL_DMA_IRQHandler+0xe38>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d01d      	beq.n	8004fb2 <HAL_DMA_IRQHandler+0xdaa>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a32      	ldr	r2, [pc, #200]	@ (8005044 <HAL_DMA_IRQHandler+0xe3c>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d018      	beq.n	8004fb2 <HAL_DMA_IRQHandler+0xdaa>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a30      	ldr	r2, [pc, #192]	@ (8005048 <HAL_DMA_IRQHandler+0xe40>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d013      	beq.n	8004fb2 <HAL_DMA_IRQHandler+0xdaa>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a2f      	ldr	r2, [pc, #188]	@ (800504c <HAL_DMA_IRQHandler+0xe44>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d00e      	beq.n	8004fb2 <HAL_DMA_IRQHandler+0xdaa>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a2d      	ldr	r2, [pc, #180]	@ (8005050 <HAL_DMA_IRQHandler+0xe48>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d009      	beq.n	8004fb2 <HAL_DMA_IRQHandler+0xdaa>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a2c      	ldr	r2, [pc, #176]	@ (8005054 <HAL_DMA_IRQHandler+0xe4c>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d004      	beq.n	8004fb2 <HAL_DMA_IRQHandler+0xdaa>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a2a      	ldr	r2, [pc, #168]	@ (8005058 <HAL_DMA_IRQHandler+0xe50>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d108      	bne.n	8004fc4 <HAL_DMA_IRQHandler+0xdbc>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	681a      	ldr	r2, [r3, #0]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f022 021c 	bic.w	r2, r2, #28
 8004fc0:	601a      	str	r2, [r3, #0]
 8004fc2:	e007      	b.n	8004fd4 <HAL_DMA_IRQHandler+0xdcc>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	681a      	ldr	r2, [r3, #0]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f022 020e 	bic.w	r2, r2, #14
 8004fd2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fd8:	f003 031f 	and.w	r3, r3, #31
 8004fdc:	2201      	movs	r2, #1
 8004fde:	409a      	lsls	r2, r3
 8004fe0:	69fb      	ldr	r3, [r7, #28]
 8004fe2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2201      	movs	r2, #1
 8004fee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d009      	beq.n	8005016 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	4798      	blx	r3
 800500a:	e004      	b.n	8005016 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800500c:	bf00      	nop
 800500e:	e002      	b.n	8005016 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005010:	bf00      	nop
 8005012:	e000      	b.n	8005016 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005014:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005016:	3728      	adds	r7, #40	@ 0x28
 8005018:	46bd      	mov	sp, r7
 800501a:	bd80      	pop	{r7, pc}
 800501c:	40020010 	.word	0x40020010
 8005020:	40020028 	.word	0x40020028
 8005024:	40020040 	.word	0x40020040
 8005028:	40020058 	.word	0x40020058
 800502c:	40020070 	.word	0x40020070
 8005030:	40020088 	.word	0x40020088
 8005034:	400200a0 	.word	0x400200a0
 8005038:	400200b8 	.word	0x400200b8
 800503c:	40020410 	.word	0x40020410
 8005040:	40020428 	.word	0x40020428
 8005044:	40020440 	.word	0x40020440
 8005048:	40020458 	.word	0x40020458
 800504c:	40020470 	.word	0x40020470
 8005050:	40020488 	.word	0x40020488
 8005054:	400204a0 	.word	0x400204a0
 8005058:	400204b8 	.word	0x400204b8

0800505c <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(const DMA_HandleTypeDef *hdma)
{
 800505c:	b480      	push	{r7}
 800505e:	b083      	sub	sp, #12
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800506a:	b2db      	uxtb	r3, r3
}
 800506c:	4618      	mov	r0, r3
 800506e:	370c      	adds	r7, #12
 8005070:	46bd      	mov	sp, r7
 8005072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005076:	4770      	bx	lr

08005078 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005078:	b480      	push	{r7}
 800507a:	b087      	sub	sp, #28
 800507c:	af00      	add	r7, sp, #0
 800507e:	60f8      	str	r0, [r7, #12]
 8005080:	60b9      	str	r1, [r7, #8]
 8005082:	607a      	str	r2, [r7, #4]
 8005084:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800508a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005090:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a7f      	ldr	r2, [pc, #508]	@ (8005294 <DMA_SetConfig+0x21c>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d072      	beq.n	8005182 <DMA_SetConfig+0x10a>
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a7d      	ldr	r2, [pc, #500]	@ (8005298 <DMA_SetConfig+0x220>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d06d      	beq.n	8005182 <DMA_SetConfig+0x10a>
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a7c      	ldr	r2, [pc, #496]	@ (800529c <DMA_SetConfig+0x224>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d068      	beq.n	8005182 <DMA_SetConfig+0x10a>
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a7a      	ldr	r2, [pc, #488]	@ (80052a0 <DMA_SetConfig+0x228>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d063      	beq.n	8005182 <DMA_SetConfig+0x10a>
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a79      	ldr	r2, [pc, #484]	@ (80052a4 <DMA_SetConfig+0x22c>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d05e      	beq.n	8005182 <DMA_SetConfig+0x10a>
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a77      	ldr	r2, [pc, #476]	@ (80052a8 <DMA_SetConfig+0x230>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d059      	beq.n	8005182 <DMA_SetConfig+0x10a>
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a76      	ldr	r2, [pc, #472]	@ (80052ac <DMA_SetConfig+0x234>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d054      	beq.n	8005182 <DMA_SetConfig+0x10a>
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a74      	ldr	r2, [pc, #464]	@ (80052b0 <DMA_SetConfig+0x238>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d04f      	beq.n	8005182 <DMA_SetConfig+0x10a>
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a73      	ldr	r2, [pc, #460]	@ (80052b4 <DMA_SetConfig+0x23c>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d04a      	beq.n	8005182 <DMA_SetConfig+0x10a>
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a71      	ldr	r2, [pc, #452]	@ (80052b8 <DMA_SetConfig+0x240>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d045      	beq.n	8005182 <DMA_SetConfig+0x10a>
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a70      	ldr	r2, [pc, #448]	@ (80052bc <DMA_SetConfig+0x244>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d040      	beq.n	8005182 <DMA_SetConfig+0x10a>
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a6e      	ldr	r2, [pc, #440]	@ (80052c0 <DMA_SetConfig+0x248>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d03b      	beq.n	8005182 <DMA_SetConfig+0x10a>
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a6d      	ldr	r2, [pc, #436]	@ (80052c4 <DMA_SetConfig+0x24c>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d036      	beq.n	8005182 <DMA_SetConfig+0x10a>
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a6b      	ldr	r2, [pc, #428]	@ (80052c8 <DMA_SetConfig+0x250>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d031      	beq.n	8005182 <DMA_SetConfig+0x10a>
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a6a      	ldr	r2, [pc, #424]	@ (80052cc <DMA_SetConfig+0x254>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d02c      	beq.n	8005182 <DMA_SetConfig+0x10a>
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a68      	ldr	r2, [pc, #416]	@ (80052d0 <DMA_SetConfig+0x258>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d027      	beq.n	8005182 <DMA_SetConfig+0x10a>
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a67      	ldr	r2, [pc, #412]	@ (80052d4 <DMA_SetConfig+0x25c>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d022      	beq.n	8005182 <DMA_SetConfig+0x10a>
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a65      	ldr	r2, [pc, #404]	@ (80052d8 <DMA_SetConfig+0x260>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d01d      	beq.n	8005182 <DMA_SetConfig+0x10a>
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a64      	ldr	r2, [pc, #400]	@ (80052dc <DMA_SetConfig+0x264>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d018      	beq.n	8005182 <DMA_SetConfig+0x10a>
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a62      	ldr	r2, [pc, #392]	@ (80052e0 <DMA_SetConfig+0x268>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d013      	beq.n	8005182 <DMA_SetConfig+0x10a>
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a61      	ldr	r2, [pc, #388]	@ (80052e4 <DMA_SetConfig+0x26c>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d00e      	beq.n	8005182 <DMA_SetConfig+0x10a>
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a5f      	ldr	r2, [pc, #380]	@ (80052e8 <DMA_SetConfig+0x270>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d009      	beq.n	8005182 <DMA_SetConfig+0x10a>
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a5e      	ldr	r2, [pc, #376]	@ (80052ec <DMA_SetConfig+0x274>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d004      	beq.n	8005182 <DMA_SetConfig+0x10a>
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a5c      	ldr	r2, [pc, #368]	@ (80052f0 <DMA_SetConfig+0x278>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d101      	bne.n	8005186 <DMA_SetConfig+0x10e>
 8005182:	2301      	movs	r3, #1
 8005184:	e000      	b.n	8005188 <DMA_SetConfig+0x110>
 8005186:	2300      	movs	r3, #0
 8005188:	2b00      	cmp	r3, #0
 800518a:	d00d      	beq.n	80051a8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005190:	68fa      	ldr	r2, [r7, #12]
 8005192:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005194:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800519a:	2b00      	cmp	r3, #0
 800519c:	d004      	beq.n	80051a8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051a2:	68fa      	ldr	r2, [r7, #12]
 80051a4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80051a6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a39      	ldr	r2, [pc, #228]	@ (8005294 <DMA_SetConfig+0x21c>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d04a      	beq.n	8005248 <DMA_SetConfig+0x1d0>
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a38      	ldr	r2, [pc, #224]	@ (8005298 <DMA_SetConfig+0x220>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d045      	beq.n	8005248 <DMA_SetConfig+0x1d0>
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a36      	ldr	r2, [pc, #216]	@ (800529c <DMA_SetConfig+0x224>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d040      	beq.n	8005248 <DMA_SetConfig+0x1d0>
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a35      	ldr	r2, [pc, #212]	@ (80052a0 <DMA_SetConfig+0x228>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d03b      	beq.n	8005248 <DMA_SetConfig+0x1d0>
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a33      	ldr	r2, [pc, #204]	@ (80052a4 <DMA_SetConfig+0x22c>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d036      	beq.n	8005248 <DMA_SetConfig+0x1d0>
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a32      	ldr	r2, [pc, #200]	@ (80052a8 <DMA_SetConfig+0x230>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d031      	beq.n	8005248 <DMA_SetConfig+0x1d0>
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a30      	ldr	r2, [pc, #192]	@ (80052ac <DMA_SetConfig+0x234>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d02c      	beq.n	8005248 <DMA_SetConfig+0x1d0>
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a2f      	ldr	r2, [pc, #188]	@ (80052b0 <DMA_SetConfig+0x238>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d027      	beq.n	8005248 <DMA_SetConfig+0x1d0>
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a2d      	ldr	r2, [pc, #180]	@ (80052b4 <DMA_SetConfig+0x23c>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d022      	beq.n	8005248 <DMA_SetConfig+0x1d0>
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a2c      	ldr	r2, [pc, #176]	@ (80052b8 <DMA_SetConfig+0x240>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d01d      	beq.n	8005248 <DMA_SetConfig+0x1d0>
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a2a      	ldr	r2, [pc, #168]	@ (80052bc <DMA_SetConfig+0x244>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d018      	beq.n	8005248 <DMA_SetConfig+0x1d0>
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a29      	ldr	r2, [pc, #164]	@ (80052c0 <DMA_SetConfig+0x248>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d013      	beq.n	8005248 <DMA_SetConfig+0x1d0>
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a27      	ldr	r2, [pc, #156]	@ (80052c4 <DMA_SetConfig+0x24c>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d00e      	beq.n	8005248 <DMA_SetConfig+0x1d0>
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a26      	ldr	r2, [pc, #152]	@ (80052c8 <DMA_SetConfig+0x250>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d009      	beq.n	8005248 <DMA_SetConfig+0x1d0>
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a24      	ldr	r2, [pc, #144]	@ (80052cc <DMA_SetConfig+0x254>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d004      	beq.n	8005248 <DMA_SetConfig+0x1d0>
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a23      	ldr	r2, [pc, #140]	@ (80052d0 <DMA_SetConfig+0x258>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d101      	bne.n	800524c <DMA_SetConfig+0x1d4>
 8005248:	2301      	movs	r3, #1
 800524a:	e000      	b.n	800524e <DMA_SetConfig+0x1d6>
 800524c:	2300      	movs	r3, #0
 800524e:	2b00      	cmp	r3, #0
 8005250:	d059      	beq.n	8005306 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005256:	f003 031f 	and.w	r3, r3, #31
 800525a:	223f      	movs	r2, #63	@ 0x3f
 800525c:	409a      	lsls	r2, r3
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	681a      	ldr	r2, [r3, #0]
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005270:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	683a      	ldr	r2, [r7, #0]
 8005278:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	689b      	ldr	r3, [r3, #8]
 800527e:	2b40      	cmp	r3, #64	@ 0x40
 8005280:	d138      	bne.n	80052f4 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	687a      	ldr	r2, [r7, #4]
 8005288:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	68ba      	ldr	r2, [r7, #8]
 8005290:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005292:	e086      	b.n	80053a2 <DMA_SetConfig+0x32a>
 8005294:	40020010 	.word	0x40020010
 8005298:	40020028 	.word	0x40020028
 800529c:	40020040 	.word	0x40020040
 80052a0:	40020058 	.word	0x40020058
 80052a4:	40020070 	.word	0x40020070
 80052a8:	40020088 	.word	0x40020088
 80052ac:	400200a0 	.word	0x400200a0
 80052b0:	400200b8 	.word	0x400200b8
 80052b4:	40020410 	.word	0x40020410
 80052b8:	40020428 	.word	0x40020428
 80052bc:	40020440 	.word	0x40020440
 80052c0:	40020458 	.word	0x40020458
 80052c4:	40020470 	.word	0x40020470
 80052c8:	40020488 	.word	0x40020488
 80052cc:	400204a0 	.word	0x400204a0
 80052d0:	400204b8 	.word	0x400204b8
 80052d4:	58025408 	.word	0x58025408
 80052d8:	5802541c 	.word	0x5802541c
 80052dc:	58025430 	.word	0x58025430
 80052e0:	58025444 	.word	0x58025444
 80052e4:	58025458 	.word	0x58025458
 80052e8:	5802546c 	.word	0x5802546c
 80052ec:	58025480 	.word	0x58025480
 80052f0:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	68ba      	ldr	r2, [r7, #8]
 80052fa:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	687a      	ldr	r2, [r7, #4]
 8005302:	60da      	str	r2, [r3, #12]
}
 8005304:	e04d      	b.n	80053a2 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a29      	ldr	r2, [pc, #164]	@ (80053b0 <DMA_SetConfig+0x338>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d022      	beq.n	8005356 <DMA_SetConfig+0x2de>
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a27      	ldr	r2, [pc, #156]	@ (80053b4 <DMA_SetConfig+0x33c>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d01d      	beq.n	8005356 <DMA_SetConfig+0x2de>
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a26      	ldr	r2, [pc, #152]	@ (80053b8 <DMA_SetConfig+0x340>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d018      	beq.n	8005356 <DMA_SetConfig+0x2de>
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a24      	ldr	r2, [pc, #144]	@ (80053bc <DMA_SetConfig+0x344>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d013      	beq.n	8005356 <DMA_SetConfig+0x2de>
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4a23      	ldr	r2, [pc, #140]	@ (80053c0 <DMA_SetConfig+0x348>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d00e      	beq.n	8005356 <DMA_SetConfig+0x2de>
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a21      	ldr	r2, [pc, #132]	@ (80053c4 <DMA_SetConfig+0x34c>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d009      	beq.n	8005356 <DMA_SetConfig+0x2de>
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a20      	ldr	r2, [pc, #128]	@ (80053c8 <DMA_SetConfig+0x350>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d004      	beq.n	8005356 <DMA_SetConfig+0x2de>
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a1e      	ldr	r2, [pc, #120]	@ (80053cc <DMA_SetConfig+0x354>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d101      	bne.n	800535a <DMA_SetConfig+0x2e2>
 8005356:	2301      	movs	r3, #1
 8005358:	e000      	b.n	800535c <DMA_SetConfig+0x2e4>
 800535a:	2300      	movs	r3, #0
 800535c:	2b00      	cmp	r3, #0
 800535e:	d020      	beq.n	80053a2 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005364:	f003 031f 	and.w	r3, r3, #31
 8005368:	2201      	movs	r2, #1
 800536a:	409a      	lsls	r2, r3
 800536c:	693b      	ldr	r3, [r7, #16]
 800536e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	683a      	ldr	r2, [r7, #0]
 8005376:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	689b      	ldr	r3, [r3, #8]
 800537c:	2b40      	cmp	r3, #64	@ 0x40
 800537e:	d108      	bne.n	8005392 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	687a      	ldr	r2, [r7, #4]
 8005386:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	68ba      	ldr	r2, [r7, #8]
 800538e:	60da      	str	r2, [r3, #12]
}
 8005390:	e007      	b.n	80053a2 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	68ba      	ldr	r2, [r7, #8]
 8005398:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	687a      	ldr	r2, [r7, #4]
 80053a0:	60da      	str	r2, [r3, #12]
}
 80053a2:	bf00      	nop
 80053a4:	371c      	adds	r7, #28
 80053a6:	46bd      	mov	sp, r7
 80053a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ac:	4770      	bx	lr
 80053ae:	bf00      	nop
 80053b0:	58025408 	.word	0x58025408
 80053b4:	5802541c 	.word	0x5802541c
 80053b8:	58025430 	.word	0x58025430
 80053bc:	58025444 	.word	0x58025444
 80053c0:	58025458 	.word	0x58025458
 80053c4:	5802546c 	.word	0x5802546c
 80053c8:	58025480 	.word	0x58025480
 80053cc:	58025494 	.word	0x58025494

080053d0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80053d0:	b480      	push	{r7}
 80053d2:	b085      	sub	sp, #20
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a42      	ldr	r2, [pc, #264]	@ (80054e8 <DMA_CalcBaseAndBitshift+0x118>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d04a      	beq.n	8005478 <DMA_CalcBaseAndBitshift+0xa8>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a41      	ldr	r2, [pc, #260]	@ (80054ec <DMA_CalcBaseAndBitshift+0x11c>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d045      	beq.n	8005478 <DMA_CalcBaseAndBitshift+0xa8>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a3f      	ldr	r2, [pc, #252]	@ (80054f0 <DMA_CalcBaseAndBitshift+0x120>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d040      	beq.n	8005478 <DMA_CalcBaseAndBitshift+0xa8>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a3e      	ldr	r2, [pc, #248]	@ (80054f4 <DMA_CalcBaseAndBitshift+0x124>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d03b      	beq.n	8005478 <DMA_CalcBaseAndBitshift+0xa8>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a3c      	ldr	r2, [pc, #240]	@ (80054f8 <DMA_CalcBaseAndBitshift+0x128>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d036      	beq.n	8005478 <DMA_CalcBaseAndBitshift+0xa8>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a3b      	ldr	r2, [pc, #236]	@ (80054fc <DMA_CalcBaseAndBitshift+0x12c>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d031      	beq.n	8005478 <DMA_CalcBaseAndBitshift+0xa8>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a39      	ldr	r2, [pc, #228]	@ (8005500 <DMA_CalcBaseAndBitshift+0x130>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d02c      	beq.n	8005478 <DMA_CalcBaseAndBitshift+0xa8>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a38      	ldr	r2, [pc, #224]	@ (8005504 <DMA_CalcBaseAndBitshift+0x134>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d027      	beq.n	8005478 <DMA_CalcBaseAndBitshift+0xa8>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a36      	ldr	r2, [pc, #216]	@ (8005508 <DMA_CalcBaseAndBitshift+0x138>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d022      	beq.n	8005478 <DMA_CalcBaseAndBitshift+0xa8>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a35      	ldr	r2, [pc, #212]	@ (800550c <DMA_CalcBaseAndBitshift+0x13c>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d01d      	beq.n	8005478 <DMA_CalcBaseAndBitshift+0xa8>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a33      	ldr	r2, [pc, #204]	@ (8005510 <DMA_CalcBaseAndBitshift+0x140>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d018      	beq.n	8005478 <DMA_CalcBaseAndBitshift+0xa8>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a32      	ldr	r2, [pc, #200]	@ (8005514 <DMA_CalcBaseAndBitshift+0x144>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d013      	beq.n	8005478 <DMA_CalcBaseAndBitshift+0xa8>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a30      	ldr	r2, [pc, #192]	@ (8005518 <DMA_CalcBaseAndBitshift+0x148>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d00e      	beq.n	8005478 <DMA_CalcBaseAndBitshift+0xa8>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a2f      	ldr	r2, [pc, #188]	@ (800551c <DMA_CalcBaseAndBitshift+0x14c>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d009      	beq.n	8005478 <DMA_CalcBaseAndBitshift+0xa8>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a2d      	ldr	r2, [pc, #180]	@ (8005520 <DMA_CalcBaseAndBitshift+0x150>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d004      	beq.n	8005478 <DMA_CalcBaseAndBitshift+0xa8>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a2c      	ldr	r2, [pc, #176]	@ (8005524 <DMA_CalcBaseAndBitshift+0x154>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d101      	bne.n	800547c <DMA_CalcBaseAndBitshift+0xac>
 8005478:	2301      	movs	r3, #1
 800547a:	e000      	b.n	800547e <DMA_CalcBaseAndBitshift+0xae>
 800547c:	2300      	movs	r3, #0
 800547e:	2b00      	cmp	r3, #0
 8005480:	d024      	beq.n	80054cc <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	b2db      	uxtb	r3, r3
 8005488:	3b10      	subs	r3, #16
 800548a:	4a27      	ldr	r2, [pc, #156]	@ (8005528 <DMA_CalcBaseAndBitshift+0x158>)
 800548c:	fba2 2303 	umull	r2, r3, r2, r3
 8005490:	091b      	lsrs	r3, r3, #4
 8005492:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	f003 0307 	and.w	r3, r3, #7
 800549a:	4a24      	ldr	r2, [pc, #144]	@ (800552c <DMA_CalcBaseAndBitshift+0x15c>)
 800549c:	5cd3      	ldrb	r3, [r2, r3]
 800549e:	461a      	mov	r2, r3
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	2b03      	cmp	r3, #3
 80054a8:	d908      	bls.n	80054bc <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	461a      	mov	r2, r3
 80054b0:	4b1f      	ldr	r3, [pc, #124]	@ (8005530 <DMA_CalcBaseAndBitshift+0x160>)
 80054b2:	4013      	ands	r3, r2
 80054b4:	1d1a      	adds	r2, r3, #4
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	659a      	str	r2, [r3, #88]	@ 0x58
 80054ba:	e00d      	b.n	80054d8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	461a      	mov	r2, r3
 80054c2:	4b1b      	ldr	r3, [pc, #108]	@ (8005530 <DMA_CalcBaseAndBitshift+0x160>)
 80054c4:	4013      	ands	r3, r2
 80054c6:	687a      	ldr	r2, [r7, #4]
 80054c8:	6593      	str	r3, [r2, #88]	@ 0x58
 80054ca:	e005      	b.n	80054d8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80054dc:	4618      	mov	r0, r3
 80054de:	3714      	adds	r7, #20
 80054e0:	46bd      	mov	sp, r7
 80054e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e6:	4770      	bx	lr
 80054e8:	40020010 	.word	0x40020010
 80054ec:	40020028 	.word	0x40020028
 80054f0:	40020040 	.word	0x40020040
 80054f4:	40020058 	.word	0x40020058
 80054f8:	40020070 	.word	0x40020070
 80054fc:	40020088 	.word	0x40020088
 8005500:	400200a0 	.word	0x400200a0
 8005504:	400200b8 	.word	0x400200b8
 8005508:	40020410 	.word	0x40020410
 800550c:	40020428 	.word	0x40020428
 8005510:	40020440 	.word	0x40020440
 8005514:	40020458 	.word	0x40020458
 8005518:	40020470 	.word	0x40020470
 800551c:	40020488 	.word	0x40020488
 8005520:	400204a0 	.word	0x400204a0
 8005524:	400204b8 	.word	0x400204b8
 8005528:	aaaaaaab 	.word	0xaaaaaaab
 800552c:	080132e8 	.word	0x080132e8
 8005530:	fffffc00 	.word	0xfffffc00

08005534 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 8005534:	b480      	push	{r7}
 8005536:	b085      	sub	sp, #20
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800553c:	2300      	movs	r3, #0
 800553e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	699b      	ldr	r3, [r3, #24]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d120      	bne.n	800558a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800554c:	2b03      	cmp	r3, #3
 800554e:	d858      	bhi.n	8005602 <DMA_CheckFifoParam+0xce>
 8005550:	a201      	add	r2, pc, #4	@ (adr r2, 8005558 <DMA_CheckFifoParam+0x24>)
 8005552:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005556:	bf00      	nop
 8005558:	08005569 	.word	0x08005569
 800555c:	0800557b 	.word	0x0800557b
 8005560:	08005569 	.word	0x08005569
 8005564:	08005603 	.word	0x08005603
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800556c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005570:	2b00      	cmp	r3, #0
 8005572:	d048      	beq.n	8005606 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005574:	2301      	movs	r3, #1
 8005576:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005578:	e045      	b.n	8005606 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800557e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005582:	d142      	bne.n	800560a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005584:	2301      	movs	r3, #1
 8005586:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005588:	e03f      	b.n	800560a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	699b      	ldr	r3, [r3, #24]
 800558e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005592:	d123      	bne.n	80055dc <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005598:	2b03      	cmp	r3, #3
 800559a:	d838      	bhi.n	800560e <DMA_CheckFifoParam+0xda>
 800559c:	a201      	add	r2, pc, #4	@ (adr r2, 80055a4 <DMA_CheckFifoParam+0x70>)
 800559e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055a2:	bf00      	nop
 80055a4:	080055b5 	.word	0x080055b5
 80055a8:	080055bb 	.word	0x080055bb
 80055ac:	080055b5 	.word	0x080055b5
 80055b0:	080055cd 	.word	0x080055cd
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80055b4:	2301      	movs	r3, #1
 80055b6:	73fb      	strb	r3, [r7, #15]
        break;
 80055b8:	e030      	b.n	800561c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055be:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d025      	beq.n	8005612 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80055c6:	2301      	movs	r3, #1
 80055c8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80055ca:	e022      	b.n	8005612 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055d0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80055d4:	d11f      	bne.n	8005616 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80055d6:	2301      	movs	r3, #1
 80055d8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80055da:	e01c      	b.n	8005616 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055e0:	2b02      	cmp	r3, #2
 80055e2:	d902      	bls.n	80055ea <DMA_CheckFifoParam+0xb6>
 80055e4:	2b03      	cmp	r3, #3
 80055e6:	d003      	beq.n	80055f0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80055e8:	e018      	b.n	800561c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80055ea:	2301      	movs	r3, #1
 80055ec:	73fb      	strb	r3, [r7, #15]
        break;
 80055ee:	e015      	b.n	800561c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055f4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d00e      	beq.n	800561a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80055fc:	2301      	movs	r3, #1
 80055fe:	73fb      	strb	r3, [r7, #15]
    break;
 8005600:	e00b      	b.n	800561a <DMA_CheckFifoParam+0xe6>
        break;
 8005602:	bf00      	nop
 8005604:	e00a      	b.n	800561c <DMA_CheckFifoParam+0xe8>
        break;
 8005606:	bf00      	nop
 8005608:	e008      	b.n	800561c <DMA_CheckFifoParam+0xe8>
        break;
 800560a:	bf00      	nop
 800560c:	e006      	b.n	800561c <DMA_CheckFifoParam+0xe8>
        break;
 800560e:	bf00      	nop
 8005610:	e004      	b.n	800561c <DMA_CheckFifoParam+0xe8>
        break;
 8005612:	bf00      	nop
 8005614:	e002      	b.n	800561c <DMA_CheckFifoParam+0xe8>
        break;
 8005616:	bf00      	nop
 8005618:	e000      	b.n	800561c <DMA_CheckFifoParam+0xe8>
    break;
 800561a:	bf00      	nop
    }
  }

  return status;
 800561c:	7bfb      	ldrb	r3, [r7, #15]
}
 800561e:	4618      	mov	r0, r3
 8005620:	3714      	adds	r7, #20
 8005622:	46bd      	mov	sp, r7
 8005624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005628:	4770      	bx	lr
 800562a:	bf00      	nop

0800562c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800562c:	b480      	push	{r7}
 800562e:	b085      	sub	sp, #20
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a38      	ldr	r2, [pc, #224]	@ (8005720 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d022      	beq.n	800568a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a36      	ldr	r2, [pc, #216]	@ (8005724 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d01d      	beq.n	800568a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a35      	ldr	r2, [pc, #212]	@ (8005728 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d018      	beq.n	800568a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a33      	ldr	r2, [pc, #204]	@ (800572c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d013      	beq.n	800568a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4a32      	ldr	r2, [pc, #200]	@ (8005730 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d00e      	beq.n	800568a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a30      	ldr	r2, [pc, #192]	@ (8005734 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d009      	beq.n	800568a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a2f      	ldr	r2, [pc, #188]	@ (8005738 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d004      	beq.n	800568a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a2d      	ldr	r2, [pc, #180]	@ (800573c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d101      	bne.n	800568e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800568a:	2301      	movs	r3, #1
 800568c:	e000      	b.n	8005690 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800568e:	2300      	movs	r3, #0
 8005690:	2b00      	cmp	r3, #0
 8005692:	d01a      	beq.n	80056ca <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	b2db      	uxtb	r3, r3
 800569a:	3b08      	subs	r3, #8
 800569c:	4a28      	ldr	r2, [pc, #160]	@ (8005740 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800569e:	fba2 2303 	umull	r2, r3, r2, r3
 80056a2:	091b      	lsrs	r3, r3, #4
 80056a4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80056a6:	68fa      	ldr	r2, [r7, #12]
 80056a8:	4b26      	ldr	r3, [pc, #152]	@ (8005744 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80056aa:	4413      	add	r3, r2
 80056ac:	009b      	lsls	r3, r3, #2
 80056ae:	461a      	mov	r2, r3
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	4a24      	ldr	r2, [pc, #144]	@ (8005748 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80056b8:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	f003 031f 	and.w	r3, r3, #31
 80056c0:	2201      	movs	r2, #1
 80056c2:	409a      	lsls	r2, r3
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80056c8:	e024      	b.n	8005714 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	b2db      	uxtb	r3, r3
 80056d0:	3b10      	subs	r3, #16
 80056d2:	4a1e      	ldr	r2, [pc, #120]	@ (800574c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80056d4:	fba2 2303 	umull	r2, r3, r2, r3
 80056d8:	091b      	lsrs	r3, r3, #4
 80056da:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	4a1c      	ldr	r2, [pc, #112]	@ (8005750 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d806      	bhi.n	80056f2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	4a1b      	ldr	r2, [pc, #108]	@ (8005754 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d902      	bls.n	80056f2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	3308      	adds	r3, #8
 80056f0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80056f2:	68fa      	ldr	r2, [r7, #12]
 80056f4:	4b18      	ldr	r3, [pc, #96]	@ (8005758 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80056f6:	4413      	add	r3, r2
 80056f8:	009b      	lsls	r3, r3, #2
 80056fa:	461a      	mov	r2, r3
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	4a16      	ldr	r2, [pc, #88]	@ (800575c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005704:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	f003 031f 	and.w	r3, r3, #31
 800570c:	2201      	movs	r2, #1
 800570e:	409a      	lsls	r2, r3
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005714:	bf00      	nop
 8005716:	3714      	adds	r7, #20
 8005718:	46bd      	mov	sp, r7
 800571a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571e:	4770      	bx	lr
 8005720:	58025408 	.word	0x58025408
 8005724:	5802541c 	.word	0x5802541c
 8005728:	58025430 	.word	0x58025430
 800572c:	58025444 	.word	0x58025444
 8005730:	58025458 	.word	0x58025458
 8005734:	5802546c 	.word	0x5802546c
 8005738:	58025480 	.word	0x58025480
 800573c:	58025494 	.word	0x58025494
 8005740:	cccccccd 	.word	0xcccccccd
 8005744:	16009600 	.word	0x16009600
 8005748:	58025880 	.word	0x58025880
 800574c:	aaaaaaab 	.word	0xaaaaaaab
 8005750:	400204b8 	.word	0x400204b8
 8005754:	4002040f 	.word	0x4002040f
 8005758:	10008200 	.word	0x10008200
 800575c:	40020880 	.word	0x40020880

08005760 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005760:	b480      	push	{r7}
 8005762:	b085      	sub	sp, #20
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	685b      	ldr	r3, [r3, #4]
 800576c:	b2db      	uxtb	r3, r3
 800576e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d04a      	beq.n	800580c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	2b08      	cmp	r3, #8
 800577a:	d847      	bhi.n	800580c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4a25      	ldr	r2, [pc, #148]	@ (8005818 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d022      	beq.n	80057cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4a24      	ldr	r2, [pc, #144]	@ (800581c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d01d      	beq.n	80057cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4a22      	ldr	r2, [pc, #136]	@ (8005820 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d018      	beq.n	80057cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4a21      	ldr	r2, [pc, #132]	@ (8005824 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d013      	beq.n	80057cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4a1f      	ldr	r2, [pc, #124]	@ (8005828 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d00e      	beq.n	80057cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4a1e      	ldr	r2, [pc, #120]	@ (800582c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d009      	beq.n	80057cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a1c      	ldr	r2, [pc, #112]	@ (8005830 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d004      	beq.n	80057cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4a1b      	ldr	r2, [pc, #108]	@ (8005834 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d101      	bne.n	80057d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80057cc:	2301      	movs	r3, #1
 80057ce:	e000      	b.n	80057d2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80057d0:	2300      	movs	r3, #0
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d00a      	beq.n	80057ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80057d6:	68fa      	ldr	r2, [r7, #12]
 80057d8:	4b17      	ldr	r3, [pc, #92]	@ (8005838 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80057da:	4413      	add	r3, r2
 80057dc:	009b      	lsls	r3, r3, #2
 80057de:	461a      	mov	r2, r3
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	4a15      	ldr	r2, [pc, #84]	@ (800583c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80057e8:	671a      	str	r2, [r3, #112]	@ 0x70
 80057ea:	e009      	b.n	8005800 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80057ec:	68fa      	ldr	r2, [r7, #12]
 80057ee:	4b14      	ldr	r3, [pc, #80]	@ (8005840 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80057f0:	4413      	add	r3, r2
 80057f2:	009b      	lsls	r3, r3, #2
 80057f4:	461a      	mov	r2, r3
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	4a11      	ldr	r2, [pc, #68]	@ (8005844 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80057fe:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	3b01      	subs	r3, #1
 8005804:	2201      	movs	r2, #1
 8005806:	409a      	lsls	r2, r3
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 800580c:	bf00      	nop
 800580e:	3714      	adds	r7, #20
 8005810:	46bd      	mov	sp, r7
 8005812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005816:	4770      	bx	lr
 8005818:	58025408 	.word	0x58025408
 800581c:	5802541c 	.word	0x5802541c
 8005820:	58025430 	.word	0x58025430
 8005824:	58025444 	.word	0x58025444
 8005828:	58025458 	.word	0x58025458
 800582c:	5802546c 	.word	0x5802546c
 8005830:	58025480 	.word	0x58025480
 8005834:	58025494 	.word	0x58025494
 8005838:	1600963f 	.word	0x1600963f
 800583c:	58025940 	.word	0x58025940
 8005840:	1000823f 	.word	0x1000823f
 8005844:	40020940 	.word	0x40020940

08005848 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress: The second memory Buffer address in case of multi buffer Transfer
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b086      	sub	sp, #24
 800584c:	af00      	add	r7, sp, #0
 800584e:	60f8      	str	r0, [r7, #12]
 8005850:	60b9      	str	r1, [r7, #8]
 8005852:	607a      	str	r2, [r7, #4]
 8005854:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005856:	2300      	movs	r3, #0
 8005858:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Memory-to-memory transfer not supported in double buffering mode */
  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	689b      	ldr	r3, [r3, #8]
 800585e:	2b80      	cmp	r3, #128	@ 0x80
 8005860:	d105      	bne.n	800586e <HAL_DMAEx_MultiBufferStart_IT+0x26>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005868:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800586a:	2301      	movs	r3, #1
 800586c:	e315      	b.n	8005e9a <HAL_DMAEx_MultiBufferStart_IT+0x652>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005874:	2b01      	cmp	r3, #1
 8005876:	d101      	bne.n	800587c <HAL_DMAEx_MultiBufferStart_IT+0x34>
 8005878:	2302      	movs	r3, #2
 800587a:	e30e      	b.n	8005e9a <HAL_DMAEx_MultiBufferStart_IT+0x652>
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	2201      	movs	r2, #1
 8005880:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800588a:	b2db      	uxtb	r3, r3
 800588c:	2b01      	cmp	r3, #1
 800588e:	f040 82fd 	bne.w	8005e8c <HAL_DMAEx_MultiBufferStart_IT+0x644>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	2202      	movs	r2, #2
 8005896:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	2200      	movs	r2, #0
 800589e:	655a      	str	r2, [r3, #84]	@ 0x54

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4a82      	ldr	r2, [pc, #520]	@ (8005ab0 <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d04a      	beq.n	8005940 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4a81      	ldr	r2, [pc, #516]	@ (8005ab4 <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d045      	beq.n	8005940 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a7f      	ldr	r2, [pc, #508]	@ (8005ab8 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d040      	beq.n	8005940 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4a7e      	ldr	r2, [pc, #504]	@ (8005abc <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d03b      	beq.n	8005940 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4a7c      	ldr	r2, [pc, #496]	@ (8005ac0 <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d036      	beq.n	8005940 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4a7b      	ldr	r2, [pc, #492]	@ (8005ac4 <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d031      	beq.n	8005940 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a79      	ldr	r2, [pc, #484]	@ (8005ac8 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d02c      	beq.n	8005940 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4a78      	ldr	r2, [pc, #480]	@ (8005acc <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d027      	beq.n	8005940 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a76      	ldr	r2, [pc, #472]	@ (8005ad0 <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d022      	beq.n	8005940 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4a75      	ldr	r2, [pc, #468]	@ (8005ad4 <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d01d      	beq.n	8005940 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a73      	ldr	r2, [pc, #460]	@ (8005ad8 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d018      	beq.n	8005940 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	4a72      	ldr	r2, [pc, #456]	@ (8005adc <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d013      	beq.n	8005940 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a70      	ldr	r2, [pc, #448]	@ (8005ae0 <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d00e      	beq.n	8005940 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4a6f      	ldr	r2, [pc, #444]	@ (8005ae4 <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d009      	beq.n	8005940 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a6d      	ldr	r2, [pc, #436]	@ (8005ae8 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d004      	beq.n	8005940 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4a6c      	ldr	r2, [pc, #432]	@ (8005aec <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d101      	bne.n	8005944 <HAL_DMAEx_MultiBufferStart_IT+0xfc>
 8005940:	2301      	movs	r3, #1
 8005942:	e000      	b.n	8005946 <HAL_DMAEx_MultiBufferStart_IT+0xfe>
 8005944:	2300      	movs	r3, #0
 8005946:	2b00      	cmp	r3, #0
 8005948:	d018      	beq.n	800597c <HAL_DMAEx_MultiBufferStart_IT+0x134>
    {
      /* Enable the Double buffer mode */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR |= DMA_SxCR_DBM;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	681a      	ldr	r2, [r3, #0]
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8005958:	601a      	str	r2, [r3, #0]

      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = SecondMemAddress;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	683a      	ldr	r2, [r7, #0]
 8005960:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 8U));
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005966:	3308      	adds	r3, #8
 8005968:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800596e:	f003 031f 	and.w	r3, r3, #31
 8005972:	223f      	movs	r2, #63	@ 0x3f
 8005974:	409a      	lsls	r2, r3
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	601a      	str	r2, [r3, #0]
 800597a:	e018      	b.n	80059ae <HAL_DMAEx_MultiBufferStart_IT+0x166>
    }
    else /* BDMA instance(s) */
    {
      /* Enable the Double buffer mode */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR |= (BDMA_CCR_DBM | BDMA_CCR_CIRC);
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	6819      	ldr	r1, [r3, #0]
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681a      	ldr	r2, [r3, #0]
 8005986:	f248 0320 	movw	r3, #32800	@ 0x8020
 800598a:	430b      	orrs	r3, r1
 800598c:	6013      	str	r3, [r2, #0]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = SecondMemAddress;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	683a      	ldr	r2, [r7, #0]
 8005994:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 4U));
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800599a:	3304      	adds	r3, #4
 800599c:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059a2:	f003 031f 	and.w	r3, r3, #31
 80059a6:	2201      	movs	r2, #1
 80059a8:	409a      	lsls	r2, r3
 80059aa:	693b      	ldr	r3, [r7, #16]
 80059ac:	601a      	str	r2, [r3, #0]
    }

    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80059ae:	6a3b      	ldr	r3, [r7, #32]
 80059b0:	687a      	ldr	r2, [r7, #4]
 80059b2:	68b9      	ldr	r1, [r7, #8]
 80059b4:	68f8      	ldr	r0, [r7, #12]
 80059b6:	f000 fb41 	bl	800603c <DMA_MultiBufferSetConfig>

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4a3c      	ldr	r2, [pc, #240]	@ (8005ab0 <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d072      	beq.n	8005aaa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a3a      	ldr	r2, [pc, #232]	@ (8005ab4 <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d06d      	beq.n	8005aaa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4a39      	ldr	r2, [pc, #228]	@ (8005ab8 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d068      	beq.n	8005aaa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a37      	ldr	r2, [pc, #220]	@ (8005abc <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d063      	beq.n	8005aaa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a36      	ldr	r2, [pc, #216]	@ (8005ac0 <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d05e      	beq.n	8005aaa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a34      	ldr	r2, [pc, #208]	@ (8005ac4 <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d059      	beq.n	8005aaa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a33      	ldr	r2, [pc, #204]	@ (8005ac8 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d054      	beq.n	8005aaa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a31      	ldr	r2, [pc, #196]	@ (8005acc <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d04f      	beq.n	8005aaa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a30      	ldr	r2, [pc, #192]	@ (8005ad0 <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d04a      	beq.n	8005aaa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4a2e      	ldr	r2, [pc, #184]	@ (8005ad4 <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d045      	beq.n	8005aaa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a2d      	ldr	r2, [pc, #180]	@ (8005ad8 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d040      	beq.n	8005aaa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a2b      	ldr	r2, [pc, #172]	@ (8005adc <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d03b      	beq.n	8005aaa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a2a      	ldr	r2, [pc, #168]	@ (8005ae0 <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d036      	beq.n	8005aaa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a28      	ldr	r2, [pc, #160]	@ (8005ae4 <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d031      	beq.n	8005aaa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a27      	ldr	r2, [pc, #156]	@ (8005ae8 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d02c      	beq.n	8005aaa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a25      	ldr	r2, [pc, #148]	@ (8005aec <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d027      	beq.n	8005aaa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a24      	ldr	r2, [pc, #144]	@ (8005af0 <HAL_DMAEx_MultiBufferStart_IT+0x2a8>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d022      	beq.n	8005aaa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a22      	ldr	r2, [pc, #136]	@ (8005af4 <HAL_DMAEx_MultiBufferStart_IT+0x2ac>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d01d      	beq.n	8005aaa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a21      	ldr	r2, [pc, #132]	@ (8005af8 <HAL_DMAEx_MultiBufferStart_IT+0x2b0>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d018      	beq.n	8005aaa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a1f      	ldr	r2, [pc, #124]	@ (8005afc <HAL_DMAEx_MultiBufferStart_IT+0x2b4>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d013      	beq.n	8005aaa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a1e      	ldr	r2, [pc, #120]	@ (8005b00 <HAL_DMAEx_MultiBufferStart_IT+0x2b8>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d00e      	beq.n	8005aaa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a1c      	ldr	r2, [pc, #112]	@ (8005b04 <HAL_DMAEx_MultiBufferStart_IT+0x2bc>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d009      	beq.n	8005aaa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a1b      	ldr	r2, [pc, #108]	@ (8005b08 <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d004      	beq.n	8005aaa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a19      	ldr	r2, [pc, #100]	@ (8005b0c <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d132      	bne.n	8005b10 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>
 8005aaa:	2301      	movs	r3, #1
 8005aac:	e031      	b.n	8005b12 <HAL_DMAEx_MultiBufferStart_IT+0x2ca>
 8005aae:	bf00      	nop
 8005ab0:	40020010 	.word	0x40020010
 8005ab4:	40020028 	.word	0x40020028
 8005ab8:	40020040 	.word	0x40020040
 8005abc:	40020058 	.word	0x40020058
 8005ac0:	40020070 	.word	0x40020070
 8005ac4:	40020088 	.word	0x40020088
 8005ac8:	400200a0 	.word	0x400200a0
 8005acc:	400200b8 	.word	0x400200b8
 8005ad0:	40020410 	.word	0x40020410
 8005ad4:	40020428 	.word	0x40020428
 8005ad8:	40020440 	.word	0x40020440
 8005adc:	40020458 	.word	0x40020458
 8005ae0:	40020470 	.word	0x40020470
 8005ae4:	40020488 	.word	0x40020488
 8005ae8:	400204a0 	.word	0x400204a0
 8005aec:	400204b8 	.word	0x400204b8
 8005af0:	58025408 	.word	0x58025408
 8005af4:	5802541c 	.word	0x5802541c
 8005af8:	58025430 	.word	0x58025430
 8005afc:	58025444 	.word	0x58025444
 8005b00:	58025458 	.word	0x58025458
 8005b04:	5802546c 	.word	0x5802546c
 8005b08:	58025480 	.word	0x58025480
 8005b0c:	58025494 	.word	0x58025494
 8005b10:	2300      	movs	r3, #0
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d00d      	beq.n	8005b32 <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b1a:	68fa      	ldr	r2, [r7, #12]
 8005b1c:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005b1e:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d004      	beq.n	8005b32 <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
      {
        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b2c:	68fa      	ldr	r2, [r7, #12]
 8005b2e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005b30:	605a      	str	r2, [r3, #4]
      }
    }

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4a3b      	ldr	r2, [pc, #236]	@ (8005c24 <HAL_DMAEx_MultiBufferStart_IT+0x3dc>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d04a      	beq.n	8005bd2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4a39      	ldr	r2, [pc, #228]	@ (8005c28 <HAL_DMAEx_MultiBufferStart_IT+0x3e0>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d045      	beq.n	8005bd2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4a38      	ldr	r2, [pc, #224]	@ (8005c2c <HAL_DMAEx_MultiBufferStart_IT+0x3e4>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d040      	beq.n	8005bd2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a36      	ldr	r2, [pc, #216]	@ (8005c30 <HAL_DMAEx_MultiBufferStart_IT+0x3e8>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d03b      	beq.n	8005bd2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a35      	ldr	r2, [pc, #212]	@ (8005c34 <HAL_DMAEx_MultiBufferStart_IT+0x3ec>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d036      	beq.n	8005bd2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a33      	ldr	r2, [pc, #204]	@ (8005c38 <HAL_DMAEx_MultiBufferStart_IT+0x3f0>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d031      	beq.n	8005bd2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a32      	ldr	r2, [pc, #200]	@ (8005c3c <HAL_DMAEx_MultiBufferStart_IT+0x3f4>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d02c      	beq.n	8005bd2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4a30      	ldr	r2, [pc, #192]	@ (8005c40 <HAL_DMAEx_MultiBufferStart_IT+0x3f8>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d027      	beq.n	8005bd2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a2f      	ldr	r2, [pc, #188]	@ (8005c44 <HAL_DMAEx_MultiBufferStart_IT+0x3fc>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d022      	beq.n	8005bd2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a2d      	ldr	r2, [pc, #180]	@ (8005c48 <HAL_DMAEx_MultiBufferStart_IT+0x400>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d01d      	beq.n	8005bd2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a2c      	ldr	r2, [pc, #176]	@ (8005c4c <HAL_DMAEx_MultiBufferStart_IT+0x404>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d018      	beq.n	8005bd2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a2a      	ldr	r2, [pc, #168]	@ (8005c50 <HAL_DMAEx_MultiBufferStart_IT+0x408>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d013      	beq.n	8005bd2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4a29      	ldr	r2, [pc, #164]	@ (8005c54 <HAL_DMAEx_MultiBufferStart_IT+0x40c>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d00e      	beq.n	8005bd2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a27      	ldr	r2, [pc, #156]	@ (8005c58 <HAL_DMAEx_MultiBufferStart_IT+0x410>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d009      	beq.n	8005bd2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4a26      	ldr	r2, [pc, #152]	@ (8005c5c <HAL_DMAEx_MultiBufferStart_IT+0x414>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d004      	beq.n	8005bd2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a24      	ldr	r2, [pc, #144]	@ (8005c60 <HAL_DMAEx_MultiBufferStart_IT+0x418>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d101      	bne.n	8005bd6 <HAL_DMAEx_MultiBufferStart_IT+0x38e>
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	e000      	b.n	8005bd8 <HAL_DMAEx_MultiBufferStart_IT+0x390>
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d043      	beq.n	8005c64 <HAL_DMAEx_MultiBufferStart_IT+0x41c>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f023 021e 	bic.w	r2, r3, #30
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f042 0216 	orr.w	r2, r2, #22
 8005bee:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR |= DMA_IT_FE;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	695a      	ldr	r2, [r3, #20]
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005bfe:	615a      	str	r2, [r3, #20]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d103      	bne.n	8005c10 <HAL_DMAEx_MultiBufferStart_IT+0x3c8>
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d043      	beq.n	8005c98 <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	681a      	ldr	r2, [r3, #0]
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f042 0208 	orr.w	r2, r2, #8
 8005c1e:	601a      	str	r2, [r3, #0]
 8005c20:	e03a      	b.n	8005c98 <HAL_DMAEx_MultiBufferStart_IT+0x450>
 8005c22:	bf00      	nop
 8005c24:	40020010 	.word	0x40020010
 8005c28:	40020028 	.word	0x40020028
 8005c2c:	40020040 	.word	0x40020040
 8005c30:	40020058 	.word	0x40020058
 8005c34:	40020070 	.word	0x40020070
 8005c38:	40020088 	.word	0x40020088
 8005c3c:	400200a0 	.word	0x400200a0
 8005c40:	400200b8 	.word	0x400200b8
 8005c44:	40020410 	.word	0x40020410
 8005c48:	40020428 	.word	0x40020428
 8005c4c:	40020440 	.word	0x40020440
 8005c50:	40020458 	.word	0x40020458
 8005c54:	40020470 	.word	0x40020470
 8005c58:	40020488 	.word	0x40020488
 8005c5c:	400204a0 	.word	0x400204a0
 8005c60:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA instance(s) */
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f023 020e 	bic.w	r2, r3, #14
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f042 020a 	orr.w	r2, r2, #10
 8005c76:	601a      	str	r2, [r3, #0]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d103      	bne.n	8005c88 <HAL_DMAEx_MultiBufferStart_IT+0x440>
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d007      	beq.n	8005c98 <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	681a      	ldr	r2, [r3, #0]
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f042 0204 	orr.w	r2, r2, #4
 8005c96:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4a81      	ldr	r2, [pc, #516]	@ (8005ea4 <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d072      	beq.n	8005d88 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4a80      	ldr	r2, [pc, #512]	@ (8005ea8 <HAL_DMAEx_MultiBufferStart_IT+0x660>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d06d      	beq.n	8005d88 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4a7e      	ldr	r2, [pc, #504]	@ (8005eac <HAL_DMAEx_MultiBufferStart_IT+0x664>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d068      	beq.n	8005d88 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a7d      	ldr	r2, [pc, #500]	@ (8005eb0 <HAL_DMAEx_MultiBufferStart_IT+0x668>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d063      	beq.n	8005d88 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4a7b      	ldr	r2, [pc, #492]	@ (8005eb4 <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d05e      	beq.n	8005d88 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a7a      	ldr	r2, [pc, #488]	@ (8005eb8 <HAL_DMAEx_MultiBufferStart_IT+0x670>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d059      	beq.n	8005d88 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a78      	ldr	r2, [pc, #480]	@ (8005ebc <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d054      	beq.n	8005d88 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4a77      	ldr	r2, [pc, #476]	@ (8005ec0 <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d04f      	beq.n	8005d88 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a75      	ldr	r2, [pc, #468]	@ (8005ec4 <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d04a      	beq.n	8005d88 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4a74      	ldr	r2, [pc, #464]	@ (8005ec8 <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d045      	beq.n	8005d88 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a72      	ldr	r2, [pc, #456]	@ (8005ecc <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d040      	beq.n	8005d88 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a71      	ldr	r2, [pc, #452]	@ (8005ed0 <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d03b      	beq.n	8005d88 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a6f      	ldr	r2, [pc, #444]	@ (8005ed4 <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d036      	beq.n	8005d88 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a6e      	ldr	r2, [pc, #440]	@ (8005ed8 <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d031      	beq.n	8005d88 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a6c      	ldr	r2, [pc, #432]	@ (8005edc <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d02c      	beq.n	8005d88 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4a6b      	ldr	r2, [pc, #428]	@ (8005ee0 <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d027      	beq.n	8005d88 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a69      	ldr	r2, [pc, #420]	@ (8005ee4 <HAL_DMAEx_MultiBufferStart_IT+0x69c>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d022      	beq.n	8005d88 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a68      	ldr	r2, [pc, #416]	@ (8005ee8 <HAL_DMAEx_MultiBufferStart_IT+0x6a0>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d01d      	beq.n	8005d88 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a66      	ldr	r2, [pc, #408]	@ (8005eec <HAL_DMAEx_MultiBufferStart_IT+0x6a4>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d018      	beq.n	8005d88 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a65      	ldr	r2, [pc, #404]	@ (8005ef0 <HAL_DMAEx_MultiBufferStart_IT+0x6a8>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d013      	beq.n	8005d88 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a63      	ldr	r2, [pc, #396]	@ (8005ef4 <HAL_DMAEx_MultiBufferStart_IT+0x6ac>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d00e      	beq.n	8005d88 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4a62      	ldr	r2, [pc, #392]	@ (8005ef8 <HAL_DMAEx_MultiBufferStart_IT+0x6b0>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d009      	beq.n	8005d88 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a60      	ldr	r2, [pc, #384]	@ (8005efc <HAL_DMAEx_MultiBufferStart_IT+0x6b4>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d004      	beq.n	8005d88 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4a5f      	ldr	r2, [pc, #380]	@ (8005f00 <HAL_DMAEx_MultiBufferStart_IT+0x6b8>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d101      	bne.n	8005d8c <HAL_DMAEx_MultiBufferStart_IT+0x544>
 8005d88:	2301      	movs	r3, #1
 8005d8a:	e000      	b.n	8005d8e <HAL_DMAEx_MultiBufferStart_IT+0x546>
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d01a      	beq.n	8005dc8 <HAL_DMAEx_MultiBufferStart_IT+0x580>
    {
      /* Check if DMAMUX Synchronization is enabled*/
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d007      	beq.n	8005db0 <HAL_DMAEx_MultiBufferStart_IT+0x568>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005da4:	681a      	ldr	r2, [r3, #0]
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005daa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005dae:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d007      	beq.n	8005dc8 <HAL_DMAEx_MultiBufferStart_IT+0x580>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT*/
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005dbc:	681a      	ldr	r2, [r3, #0]
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005dc2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005dc6:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a35      	ldr	r2, [pc, #212]	@ (8005ea4 <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d04a      	beq.n	8005e68 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a34      	ldr	r2, [pc, #208]	@ (8005ea8 <HAL_DMAEx_MultiBufferStart_IT+0x660>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d045      	beq.n	8005e68 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a32      	ldr	r2, [pc, #200]	@ (8005eac <HAL_DMAEx_MultiBufferStart_IT+0x664>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d040      	beq.n	8005e68 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4a31      	ldr	r2, [pc, #196]	@ (8005eb0 <HAL_DMAEx_MultiBufferStart_IT+0x668>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d03b      	beq.n	8005e68 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4a2f      	ldr	r2, [pc, #188]	@ (8005eb4 <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d036      	beq.n	8005e68 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4a2e      	ldr	r2, [pc, #184]	@ (8005eb8 <HAL_DMAEx_MultiBufferStart_IT+0x670>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d031      	beq.n	8005e68 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4a2c      	ldr	r2, [pc, #176]	@ (8005ebc <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d02c      	beq.n	8005e68 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a2b      	ldr	r2, [pc, #172]	@ (8005ec0 <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d027      	beq.n	8005e68 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a29      	ldr	r2, [pc, #164]	@ (8005ec4 <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d022      	beq.n	8005e68 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4a28      	ldr	r2, [pc, #160]	@ (8005ec8 <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d01d      	beq.n	8005e68 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a26      	ldr	r2, [pc, #152]	@ (8005ecc <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d018      	beq.n	8005e68 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a25      	ldr	r2, [pc, #148]	@ (8005ed0 <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d013      	beq.n	8005e68 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a23      	ldr	r2, [pc, #140]	@ (8005ed4 <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d00e      	beq.n	8005e68 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4a22      	ldr	r2, [pc, #136]	@ (8005ed8 <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d009      	beq.n	8005e68 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a20      	ldr	r2, [pc, #128]	@ (8005edc <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d004      	beq.n	8005e68 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4a1f      	ldr	r2, [pc, #124]	@ (8005ee0 <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d108      	bne.n	8005e7a <HAL_DMAEx_MultiBufferStart_IT+0x632>
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	681a      	ldr	r2, [r3, #0]
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f042 0201 	orr.w	r2, r2, #1
 8005e76:	601a      	str	r2, [r3, #0]
 8005e78:	e00e      	b.n	8005e98 <HAL_DMAEx_MultiBufferStart_IT+0x650>
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	681a      	ldr	r2, [r3, #0]
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f042 0201 	orr.w	r2, r2, #1
 8005e88:	601a      	str	r2, [r3, #0]
 8005e8a:	e005      	b.n	8005e98 <HAL_DMAEx_MultiBufferStart_IT+0x650>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005e92:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return error status */
    status = HAL_ERROR;
 8005e94:	2301      	movs	r3, #1
 8005e96:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005e98:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	3718      	adds	r7, #24
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bd80      	pop	{r7, pc}
 8005ea2:	bf00      	nop
 8005ea4:	40020010 	.word	0x40020010
 8005ea8:	40020028 	.word	0x40020028
 8005eac:	40020040 	.word	0x40020040
 8005eb0:	40020058 	.word	0x40020058
 8005eb4:	40020070 	.word	0x40020070
 8005eb8:	40020088 	.word	0x40020088
 8005ebc:	400200a0 	.word	0x400200a0
 8005ec0:	400200b8 	.word	0x400200b8
 8005ec4:	40020410 	.word	0x40020410
 8005ec8:	40020428 	.word	0x40020428
 8005ecc:	40020440 	.word	0x40020440
 8005ed0:	40020458 	.word	0x40020458
 8005ed4:	40020470 	.word	0x40020470
 8005ed8:	40020488 	.word	0x40020488
 8005edc:	400204a0 	.word	0x400204a0
 8005ee0:	400204b8 	.word	0x400204b8
 8005ee4:	58025408 	.word	0x58025408
 8005ee8:	5802541c 	.word	0x5802541c
 8005eec:	58025430 	.word	0x58025430
 8005ef0:	58025444 	.word	0x58025444
 8005ef4:	58025458 	.word	0x58025458
 8005ef8:	5802546c 	.word	0x5802546c
 8005efc:	58025480 	.word	0x58025480
 8005f00:	58025494 	.word	0x58025494

08005f04 <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 8005f04:	b480      	push	{r7}
 8005f06:	b085      	sub	sp, #20
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	60f8      	str	r0, [r7, #12]
 8005f0c:	60b9      	str	r1, [r7, #8]
 8005f0e:	4613      	mov	r3, r2
 8005f10:	71fb      	strb	r3, [r7, #7]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4a39      	ldr	r2, [pc, #228]	@ (8005ffc <HAL_DMAEx_ChangeMemory+0xf8>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d04a      	beq.n	8005fb2 <HAL_DMAEx_ChangeMemory+0xae>
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4a37      	ldr	r2, [pc, #220]	@ (8006000 <HAL_DMAEx_ChangeMemory+0xfc>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d045      	beq.n	8005fb2 <HAL_DMAEx_ChangeMemory+0xae>
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4a36      	ldr	r2, [pc, #216]	@ (8006004 <HAL_DMAEx_ChangeMemory+0x100>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d040      	beq.n	8005fb2 <HAL_DMAEx_ChangeMemory+0xae>
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a34      	ldr	r2, [pc, #208]	@ (8006008 <HAL_DMAEx_ChangeMemory+0x104>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d03b      	beq.n	8005fb2 <HAL_DMAEx_ChangeMemory+0xae>
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4a33      	ldr	r2, [pc, #204]	@ (800600c <HAL_DMAEx_ChangeMemory+0x108>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d036      	beq.n	8005fb2 <HAL_DMAEx_ChangeMemory+0xae>
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4a31      	ldr	r2, [pc, #196]	@ (8006010 <HAL_DMAEx_ChangeMemory+0x10c>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d031      	beq.n	8005fb2 <HAL_DMAEx_ChangeMemory+0xae>
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4a30      	ldr	r2, [pc, #192]	@ (8006014 <HAL_DMAEx_ChangeMemory+0x110>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d02c      	beq.n	8005fb2 <HAL_DMAEx_ChangeMemory+0xae>
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4a2e      	ldr	r2, [pc, #184]	@ (8006018 <HAL_DMAEx_ChangeMemory+0x114>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d027      	beq.n	8005fb2 <HAL_DMAEx_ChangeMemory+0xae>
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4a2d      	ldr	r2, [pc, #180]	@ (800601c <HAL_DMAEx_ChangeMemory+0x118>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d022      	beq.n	8005fb2 <HAL_DMAEx_ChangeMemory+0xae>
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a2b      	ldr	r2, [pc, #172]	@ (8006020 <HAL_DMAEx_ChangeMemory+0x11c>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d01d      	beq.n	8005fb2 <HAL_DMAEx_ChangeMemory+0xae>
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4a2a      	ldr	r2, [pc, #168]	@ (8006024 <HAL_DMAEx_ChangeMemory+0x120>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d018      	beq.n	8005fb2 <HAL_DMAEx_ChangeMemory+0xae>
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4a28      	ldr	r2, [pc, #160]	@ (8006028 <HAL_DMAEx_ChangeMemory+0x124>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d013      	beq.n	8005fb2 <HAL_DMAEx_ChangeMemory+0xae>
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4a27      	ldr	r2, [pc, #156]	@ (800602c <HAL_DMAEx_ChangeMemory+0x128>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d00e      	beq.n	8005fb2 <HAL_DMAEx_ChangeMemory+0xae>
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a25      	ldr	r2, [pc, #148]	@ (8006030 <HAL_DMAEx_ChangeMemory+0x12c>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d009      	beq.n	8005fb2 <HAL_DMAEx_ChangeMemory+0xae>
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a24      	ldr	r2, [pc, #144]	@ (8006034 <HAL_DMAEx_ChangeMemory+0x130>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d004      	beq.n	8005fb2 <HAL_DMAEx_ChangeMemory+0xae>
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a22      	ldr	r2, [pc, #136]	@ (8006038 <HAL_DMAEx_ChangeMemory+0x134>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d101      	bne.n	8005fb6 <HAL_DMAEx_ChangeMemory+0xb2>
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	e000      	b.n	8005fb8 <HAL_DMAEx_ChangeMemory+0xb4>
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d00c      	beq.n	8005fd6 <HAL_DMAEx_ChangeMemory+0xd2>
  {
    if(memory == MEMORY0)
 8005fbc:	79fb      	ldrb	r3, [r7, #7]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d104      	bne.n	8005fcc <HAL_DMAEx_ChangeMemory+0xc8>
    {
      /* change the memory0 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = Address;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	68ba      	ldr	r2, [r7, #8]
 8005fc8:	60da      	str	r2, [r3, #12]
 8005fca:	e010      	b.n	8005fee <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = Address;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	68ba      	ldr	r2, [r7, #8]
 8005fd2:	611a      	str	r2, [r3, #16]
 8005fd4:	e00b      	b.n	8005fee <HAL_DMAEx_ChangeMemory+0xea>
    }
  }
  else /* BDMA instance(s) */
  {
    if(memory == MEMORY0)
 8005fd6:	79fb      	ldrb	r3, [r7, #7]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d104      	bne.n	8005fe6 <HAL_DMAEx_ChangeMemory+0xe2>
    {
      /* change the memory0 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = Address;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	68ba      	ldr	r2, [r7, #8]
 8005fe2:	60da      	str	r2, [r3, #12]
 8005fe4:	e003      	b.n	8005fee <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = Address;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	68ba      	ldr	r2, [r7, #8]
 8005fec:	611a      	str	r2, [r3, #16]
    }
  }

  return HAL_OK;
 8005fee:	2300      	movs	r3, #0
}
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	3714      	adds	r7, #20
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffa:	4770      	bx	lr
 8005ffc:	40020010 	.word	0x40020010
 8006000:	40020028 	.word	0x40020028
 8006004:	40020040 	.word	0x40020040
 8006008:	40020058 	.word	0x40020058
 800600c:	40020070 	.word	0x40020070
 8006010:	40020088 	.word	0x40020088
 8006014:	400200a0 	.word	0x400200a0
 8006018:	400200b8 	.word	0x400200b8
 800601c:	40020410 	.word	0x40020410
 8006020:	40020428 	.word	0x40020428
 8006024:	40020440 	.word	0x40020440
 8006028:	40020458 	.word	0x40020458
 800602c:	40020470 	.word	0x40020470
 8006030:	40020488 	.word	0x40020488
 8006034:	400204a0 	.word	0x400204a0
 8006038:	400204b8 	.word	0x400204b8

0800603c <DMA_MultiBufferSetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800603c:	b480      	push	{r7}
 800603e:	b085      	sub	sp, #20
 8006040:	af00      	add	r7, sp, #0
 8006042:	60f8      	str	r0, [r7, #12]
 8006044:	60b9      	str	r1, [r7, #8]
 8006046:	607a      	str	r2, [r7, #4]
 8006048:	603b      	str	r3, [r7, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4a46      	ldr	r2, [pc, #280]	@ (8006168 <DMA_MultiBufferSetConfig+0x12c>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d04a      	beq.n	80060ea <DMA_MultiBufferSetConfig+0xae>
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4a44      	ldr	r2, [pc, #272]	@ (800616c <DMA_MultiBufferSetConfig+0x130>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d045      	beq.n	80060ea <DMA_MultiBufferSetConfig+0xae>
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4a43      	ldr	r2, [pc, #268]	@ (8006170 <DMA_MultiBufferSetConfig+0x134>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d040      	beq.n	80060ea <DMA_MultiBufferSetConfig+0xae>
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4a41      	ldr	r2, [pc, #260]	@ (8006174 <DMA_MultiBufferSetConfig+0x138>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d03b      	beq.n	80060ea <DMA_MultiBufferSetConfig+0xae>
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4a40      	ldr	r2, [pc, #256]	@ (8006178 <DMA_MultiBufferSetConfig+0x13c>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d036      	beq.n	80060ea <DMA_MultiBufferSetConfig+0xae>
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4a3e      	ldr	r2, [pc, #248]	@ (800617c <DMA_MultiBufferSetConfig+0x140>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d031      	beq.n	80060ea <DMA_MultiBufferSetConfig+0xae>
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4a3d      	ldr	r2, [pc, #244]	@ (8006180 <DMA_MultiBufferSetConfig+0x144>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d02c      	beq.n	80060ea <DMA_MultiBufferSetConfig+0xae>
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4a3b      	ldr	r2, [pc, #236]	@ (8006184 <DMA_MultiBufferSetConfig+0x148>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d027      	beq.n	80060ea <DMA_MultiBufferSetConfig+0xae>
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4a3a      	ldr	r2, [pc, #232]	@ (8006188 <DMA_MultiBufferSetConfig+0x14c>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d022      	beq.n	80060ea <DMA_MultiBufferSetConfig+0xae>
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4a38      	ldr	r2, [pc, #224]	@ (800618c <DMA_MultiBufferSetConfig+0x150>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d01d      	beq.n	80060ea <DMA_MultiBufferSetConfig+0xae>
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	4a37      	ldr	r2, [pc, #220]	@ (8006190 <DMA_MultiBufferSetConfig+0x154>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d018      	beq.n	80060ea <DMA_MultiBufferSetConfig+0xae>
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4a35      	ldr	r2, [pc, #212]	@ (8006194 <DMA_MultiBufferSetConfig+0x158>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d013      	beq.n	80060ea <DMA_MultiBufferSetConfig+0xae>
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	4a34      	ldr	r2, [pc, #208]	@ (8006198 <DMA_MultiBufferSetConfig+0x15c>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d00e      	beq.n	80060ea <DMA_MultiBufferSetConfig+0xae>
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4a32      	ldr	r2, [pc, #200]	@ (800619c <DMA_MultiBufferSetConfig+0x160>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d009      	beq.n	80060ea <DMA_MultiBufferSetConfig+0xae>
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4a31      	ldr	r2, [pc, #196]	@ (80061a0 <DMA_MultiBufferSetConfig+0x164>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d004      	beq.n	80060ea <DMA_MultiBufferSetConfig+0xae>
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4a2f      	ldr	r2, [pc, #188]	@ (80061a4 <DMA_MultiBufferSetConfig+0x168>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d101      	bne.n	80060ee <DMA_MultiBufferSetConfig+0xb2>
 80060ea:	2301      	movs	r3, #1
 80060ec:	e000      	b.n	80060f0 <DMA_MultiBufferSetConfig+0xb4>
 80060ee:	2300      	movs	r3, #0
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d019      	beq.n	8006128 <DMA_MultiBufferSetConfig+0xec>
  {
    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = DataLength;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	683a      	ldr	r2, [r7, #0]
 80060fa:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	689b      	ldr	r3, [r3, #8]
 8006100:	2b40      	cmp	r3, #64	@ 0x40
 8006102:	d108      	bne.n	8006116 <DMA_MultiBufferSetConfig+0xda>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = DstAddress;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	687a      	ldr	r2, [r7, #4]
 800610a:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = SrcAddress;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	68ba      	ldr	r2, [r7, #8]
 8006112:	60da      	str	r2, [r3, #12]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
    }
  }
}
 8006114:	e021      	b.n	800615a <DMA_MultiBufferSetConfig+0x11e>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = SrcAddress;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	68ba      	ldr	r2, [r7, #8]
 800611c:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = DstAddress;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	687a      	ldr	r2, [r7, #4]
 8006124:	60da      	str	r2, [r3, #12]
}
 8006126:	e018      	b.n	800615a <DMA_MultiBufferSetConfig+0x11e>
    ((BDMA_Channel_TypeDef   *)hdma->Instance)->CNDTR = DataLength;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	683a      	ldr	r2, [r7, #0]
 800612e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	689b      	ldr	r3, [r3, #8]
 8006134:	2b40      	cmp	r3, #64	@ 0x40
 8006136:	d108      	bne.n	800614a <DMA_MultiBufferSetConfig+0x10e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = DstAddress;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	687a      	ldr	r2, [r7, #4]
 800613e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = SrcAddress;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	68ba      	ldr	r2, [r7, #8]
 8006146:	60da      	str	r2, [r3, #12]
}
 8006148:	e007      	b.n	800615a <DMA_MultiBufferSetConfig+0x11e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = SrcAddress;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	68ba      	ldr	r2, [r7, #8]
 8006150:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	687a      	ldr	r2, [r7, #4]
 8006158:	60da      	str	r2, [r3, #12]
}
 800615a:	bf00      	nop
 800615c:	3714      	adds	r7, #20
 800615e:	46bd      	mov	sp, r7
 8006160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006164:	4770      	bx	lr
 8006166:	bf00      	nop
 8006168:	40020010 	.word	0x40020010
 800616c:	40020028 	.word	0x40020028
 8006170:	40020040 	.word	0x40020040
 8006174:	40020058 	.word	0x40020058
 8006178:	40020070 	.word	0x40020070
 800617c:	40020088 	.word	0x40020088
 8006180:	400200a0 	.word	0x400200a0
 8006184:	400200b8 	.word	0x400200b8
 8006188:	40020410 	.word	0x40020410
 800618c:	40020428 	.word	0x40020428
 8006190:	40020440 	.word	0x40020440
 8006194:	40020458 	.word	0x40020458
 8006198:	40020470 	.word	0x40020470
 800619c:	40020488 	.word	0x40020488
 80061a0:	400204a0 	.word	0x400204a0
 80061a4:	400204b8 	.word	0x400204b8

080061a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80061a8:	b480      	push	{r7}
 80061aa:	b089      	sub	sp, #36	@ 0x24
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
 80061b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80061b2:	2300      	movs	r3, #0
 80061b4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80061b6:	4b89      	ldr	r3, [pc, #548]	@ (80063dc <HAL_GPIO_Init+0x234>)
 80061b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80061ba:	e194      	b.n	80064e6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	681a      	ldr	r2, [r3, #0]
 80061c0:	2101      	movs	r1, #1
 80061c2:	69fb      	ldr	r3, [r7, #28]
 80061c4:	fa01 f303 	lsl.w	r3, r1, r3
 80061c8:	4013      	ands	r3, r2
 80061ca:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80061cc:	693b      	ldr	r3, [r7, #16]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	f000 8186 	beq.w	80064e0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	685b      	ldr	r3, [r3, #4]
 80061d8:	f003 0303 	and.w	r3, r3, #3
 80061dc:	2b01      	cmp	r3, #1
 80061de:	d005      	beq.n	80061ec <HAL_GPIO_Init+0x44>
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	f003 0303 	and.w	r3, r3, #3
 80061e8:	2b02      	cmp	r3, #2
 80061ea:	d130      	bne.n	800624e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	689b      	ldr	r3, [r3, #8]
 80061f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80061f2:	69fb      	ldr	r3, [r7, #28]
 80061f4:	005b      	lsls	r3, r3, #1
 80061f6:	2203      	movs	r2, #3
 80061f8:	fa02 f303 	lsl.w	r3, r2, r3
 80061fc:	43db      	mvns	r3, r3
 80061fe:	69ba      	ldr	r2, [r7, #24]
 8006200:	4013      	ands	r3, r2
 8006202:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	68da      	ldr	r2, [r3, #12]
 8006208:	69fb      	ldr	r3, [r7, #28]
 800620a:	005b      	lsls	r3, r3, #1
 800620c:	fa02 f303 	lsl.w	r3, r2, r3
 8006210:	69ba      	ldr	r2, [r7, #24]
 8006212:	4313      	orrs	r3, r2
 8006214:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	69ba      	ldr	r2, [r7, #24]
 800621a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	685b      	ldr	r3, [r3, #4]
 8006220:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006222:	2201      	movs	r2, #1
 8006224:	69fb      	ldr	r3, [r7, #28]
 8006226:	fa02 f303 	lsl.w	r3, r2, r3
 800622a:	43db      	mvns	r3, r3
 800622c:	69ba      	ldr	r2, [r7, #24]
 800622e:	4013      	ands	r3, r2
 8006230:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	685b      	ldr	r3, [r3, #4]
 8006236:	091b      	lsrs	r3, r3, #4
 8006238:	f003 0201 	and.w	r2, r3, #1
 800623c:	69fb      	ldr	r3, [r7, #28]
 800623e:	fa02 f303 	lsl.w	r3, r2, r3
 8006242:	69ba      	ldr	r2, [r7, #24]
 8006244:	4313      	orrs	r3, r2
 8006246:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	69ba      	ldr	r2, [r7, #24]
 800624c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	685b      	ldr	r3, [r3, #4]
 8006252:	f003 0303 	and.w	r3, r3, #3
 8006256:	2b03      	cmp	r3, #3
 8006258:	d017      	beq.n	800628a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	68db      	ldr	r3, [r3, #12]
 800625e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006260:	69fb      	ldr	r3, [r7, #28]
 8006262:	005b      	lsls	r3, r3, #1
 8006264:	2203      	movs	r2, #3
 8006266:	fa02 f303 	lsl.w	r3, r2, r3
 800626a:	43db      	mvns	r3, r3
 800626c:	69ba      	ldr	r2, [r7, #24]
 800626e:	4013      	ands	r3, r2
 8006270:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	689a      	ldr	r2, [r3, #8]
 8006276:	69fb      	ldr	r3, [r7, #28]
 8006278:	005b      	lsls	r3, r3, #1
 800627a:	fa02 f303 	lsl.w	r3, r2, r3
 800627e:	69ba      	ldr	r2, [r7, #24]
 8006280:	4313      	orrs	r3, r2
 8006282:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	69ba      	ldr	r2, [r7, #24]
 8006288:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	685b      	ldr	r3, [r3, #4]
 800628e:	f003 0303 	and.w	r3, r3, #3
 8006292:	2b02      	cmp	r3, #2
 8006294:	d123      	bne.n	80062de <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006296:	69fb      	ldr	r3, [r7, #28]
 8006298:	08da      	lsrs	r2, r3, #3
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	3208      	adds	r2, #8
 800629e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80062a4:	69fb      	ldr	r3, [r7, #28]
 80062a6:	f003 0307 	and.w	r3, r3, #7
 80062aa:	009b      	lsls	r3, r3, #2
 80062ac:	220f      	movs	r2, #15
 80062ae:	fa02 f303 	lsl.w	r3, r2, r3
 80062b2:	43db      	mvns	r3, r3
 80062b4:	69ba      	ldr	r2, [r7, #24]
 80062b6:	4013      	ands	r3, r2
 80062b8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	691a      	ldr	r2, [r3, #16]
 80062be:	69fb      	ldr	r3, [r7, #28]
 80062c0:	f003 0307 	and.w	r3, r3, #7
 80062c4:	009b      	lsls	r3, r3, #2
 80062c6:	fa02 f303 	lsl.w	r3, r2, r3
 80062ca:	69ba      	ldr	r2, [r7, #24]
 80062cc:	4313      	orrs	r3, r2
 80062ce:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80062d0:	69fb      	ldr	r3, [r7, #28]
 80062d2:	08da      	lsrs	r2, r3, #3
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	3208      	adds	r2, #8
 80062d8:	69b9      	ldr	r1, [r7, #24]
 80062da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80062e4:	69fb      	ldr	r3, [r7, #28]
 80062e6:	005b      	lsls	r3, r3, #1
 80062e8:	2203      	movs	r2, #3
 80062ea:	fa02 f303 	lsl.w	r3, r2, r3
 80062ee:	43db      	mvns	r3, r3
 80062f0:	69ba      	ldr	r2, [r7, #24]
 80062f2:	4013      	ands	r3, r2
 80062f4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	685b      	ldr	r3, [r3, #4]
 80062fa:	f003 0203 	and.w	r2, r3, #3
 80062fe:	69fb      	ldr	r3, [r7, #28]
 8006300:	005b      	lsls	r3, r3, #1
 8006302:	fa02 f303 	lsl.w	r3, r2, r3
 8006306:	69ba      	ldr	r2, [r7, #24]
 8006308:	4313      	orrs	r3, r2
 800630a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	69ba      	ldr	r2, [r7, #24]
 8006310:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	685b      	ldr	r3, [r3, #4]
 8006316:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800631a:	2b00      	cmp	r3, #0
 800631c:	f000 80e0 	beq.w	80064e0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006320:	4b2f      	ldr	r3, [pc, #188]	@ (80063e0 <HAL_GPIO_Init+0x238>)
 8006322:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006326:	4a2e      	ldr	r2, [pc, #184]	@ (80063e0 <HAL_GPIO_Init+0x238>)
 8006328:	f043 0302 	orr.w	r3, r3, #2
 800632c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8006330:	4b2b      	ldr	r3, [pc, #172]	@ (80063e0 <HAL_GPIO_Init+0x238>)
 8006332:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006336:	f003 0302 	and.w	r3, r3, #2
 800633a:	60fb      	str	r3, [r7, #12]
 800633c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800633e:	4a29      	ldr	r2, [pc, #164]	@ (80063e4 <HAL_GPIO_Init+0x23c>)
 8006340:	69fb      	ldr	r3, [r7, #28]
 8006342:	089b      	lsrs	r3, r3, #2
 8006344:	3302      	adds	r3, #2
 8006346:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800634a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800634c:	69fb      	ldr	r3, [r7, #28]
 800634e:	f003 0303 	and.w	r3, r3, #3
 8006352:	009b      	lsls	r3, r3, #2
 8006354:	220f      	movs	r2, #15
 8006356:	fa02 f303 	lsl.w	r3, r2, r3
 800635a:	43db      	mvns	r3, r3
 800635c:	69ba      	ldr	r2, [r7, #24]
 800635e:	4013      	ands	r3, r2
 8006360:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	4a20      	ldr	r2, [pc, #128]	@ (80063e8 <HAL_GPIO_Init+0x240>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d052      	beq.n	8006410 <HAL_GPIO_Init+0x268>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	4a1f      	ldr	r2, [pc, #124]	@ (80063ec <HAL_GPIO_Init+0x244>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d031      	beq.n	80063d6 <HAL_GPIO_Init+0x22e>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	4a1e      	ldr	r2, [pc, #120]	@ (80063f0 <HAL_GPIO_Init+0x248>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d02b      	beq.n	80063d2 <HAL_GPIO_Init+0x22a>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	4a1d      	ldr	r2, [pc, #116]	@ (80063f4 <HAL_GPIO_Init+0x24c>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d025      	beq.n	80063ce <HAL_GPIO_Init+0x226>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	4a1c      	ldr	r2, [pc, #112]	@ (80063f8 <HAL_GPIO_Init+0x250>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d01f      	beq.n	80063ca <HAL_GPIO_Init+0x222>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	4a1b      	ldr	r2, [pc, #108]	@ (80063fc <HAL_GPIO_Init+0x254>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d019      	beq.n	80063c6 <HAL_GPIO_Init+0x21e>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	4a1a      	ldr	r2, [pc, #104]	@ (8006400 <HAL_GPIO_Init+0x258>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d013      	beq.n	80063c2 <HAL_GPIO_Init+0x21a>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	4a19      	ldr	r2, [pc, #100]	@ (8006404 <HAL_GPIO_Init+0x25c>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d00d      	beq.n	80063be <HAL_GPIO_Init+0x216>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	4a18      	ldr	r2, [pc, #96]	@ (8006408 <HAL_GPIO_Init+0x260>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d007      	beq.n	80063ba <HAL_GPIO_Init+0x212>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	4a17      	ldr	r2, [pc, #92]	@ (800640c <HAL_GPIO_Init+0x264>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d101      	bne.n	80063b6 <HAL_GPIO_Init+0x20e>
 80063b2:	2309      	movs	r3, #9
 80063b4:	e02d      	b.n	8006412 <HAL_GPIO_Init+0x26a>
 80063b6:	230a      	movs	r3, #10
 80063b8:	e02b      	b.n	8006412 <HAL_GPIO_Init+0x26a>
 80063ba:	2308      	movs	r3, #8
 80063bc:	e029      	b.n	8006412 <HAL_GPIO_Init+0x26a>
 80063be:	2307      	movs	r3, #7
 80063c0:	e027      	b.n	8006412 <HAL_GPIO_Init+0x26a>
 80063c2:	2306      	movs	r3, #6
 80063c4:	e025      	b.n	8006412 <HAL_GPIO_Init+0x26a>
 80063c6:	2305      	movs	r3, #5
 80063c8:	e023      	b.n	8006412 <HAL_GPIO_Init+0x26a>
 80063ca:	2304      	movs	r3, #4
 80063cc:	e021      	b.n	8006412 <HAL_GPIO_Init+0x26a>
 80063ce:	2303      	movs	r3, #3
 80063d0:	e01f      	b.n	8006412 <HAL_GPIO_Init+0x26a>
 80063d2:	2302      	movs	r3, #2
 80063d4:	e01d      	b.n	8006412 <HAL_GPIO_Init+0x26a>
 80063d6:	2301      	movs	r3, #1
 80063d8:	e01b      	b.n	8006412 <HAL_GPIO_Init+0x26a>
 80063da:	bf00      	nop
 80063dc:	58000080 	.word	0x58000080
 80063e0:	58024400 	.word	0x58024400
 80063e4:	58000400 	.word	0x58000400
 80063e8:	58020000 	.word	0x58020000
 80063ec:	58020400 	.word	0x58020400
 80063f0:	58020800 	.word	0x58020800
 80063f4:	58020c00 	.word	0x58020c00
 80063f8:	58021000 	.word	0x58021000
 80063fc:	58021400 	.word	0x58021400
 8006400:	58021800 	.word	0x58021800
 8006404:	58021c00 	.word	0x58021c00
 8006408:	58022000 	.word	0x58022000
 800640c:	58022400 	.word	0x58022400
 8006410:	2300      	movs	r3, #0
 8006412:	69fa      	ldr	r2, [r7, #28]
 8006414:	f002 0203 	and.w	r2, r2, #3
 8006418:	0092      	lsls	r2, r2, #2
 800641a:	4093      	lsls	r3, r2
 800641c:	69ba      	ldr	r2, [r7, #24]
 800641e:	4313      	orrs	r3, r2
 8006420:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006422:	4938      	ldr	r1, [pc, #224]	@ (8006504 <HAL_GPIO_Init+0x35c>)
 8006424:	69fb      	ldr	r3, [r7, #28]
 8006426:	089b      	lsrs	r3, r3, #2
 8006428:	3302      	adds	r3, #2
 800642a:	69ba      	ldr	r2, [r7, #24]
 800642c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006430:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006438:	693b      	ldr	r3, [r7, #16]
 800643a:	43db      	mvns	r3, r3
 800643c:	69ba      	ldr	r2, [r7, #24]
 800643e:	4013      	ands	r3, r2
 8006440:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	685b      	ldr	r3, [r3, #4]
 8006446:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800644a:	2b00      	cmp	r3, #0
 800644c:	d003      	beq.n	8006456 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800644e:	69ba      	ldr	r2, [r7, #24]
 8006450:	693b      	ldr	r3, [r7, #16]
 8006452:	4313      	orrs	r3, r2
 8006454:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006456:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800645a:	69bb      	ldr	r3, [r7, #24]
 800645c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800645e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006462:	685b      	ldr	r3, [r3, #4]
 8006464:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006466:	693b      	ldr	r3, [r7, #16]
 8006468:	43db      	mvns	r3, r3
 800646a:	69ba      	ldr	r2, [r7, #24]
 800646c:	4013      	ands	r3, r2
 800646e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	685b      	ldr	r3, [r3, #4]
 8006474:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006478:	2b00      	cmp	r3, #0
 800647a:	d003      	beq.n	8006484 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800647c:	69ba      	ldr	r2, [r7, #24]
 800647e:	693b      	ldr	r3, [r7, #16]
 8006480:	4313      	orrs	r3, r2
 8006482:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006484:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006488:	69bb      	ldr	r3, [r7, #24]
 800648a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800648c:	697b      	ldr	r3, [r7, #20]
 800648e:	685b      	ldr	r3, [r3, #4]
 8006490:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006492:	693b      	ldr	r3, [r7, #16]
 8006494:	43db      	mvns	r3, r3
 8006496:	69ba      	ldr	r2, [r7, #24]
 8006498:	4013      	ands	r3, r2
 800649a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	685b      	ldr	r3, [r3, #4]
 80064a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d003      	beq.n	80064b0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80064a8:	69ba      	ldr	r2, [r7, #24]
 80064aa:	693b      	ldr	r3, [r7, #16]
 80064ac:	4313      	orrs	r3, r2
 80064ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80064b0:	697b      	ldr	r3, [r7, #20]
 80064b2:	69ba      	ldr	r2, [r7, #24]
 80064b4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80064bc:	693b      	ldr	r3, [r7, #16]
 80064be:	43db      	mvns	r3, r3
 80064c0:	69ba      	ldr	r2, [r7, #24]
 80064c2:	4013      	ands	r3, r2
 80064c4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	685b      	ldr	r3, [r3, #4]
 80064ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d003      	beq.n	80064da <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80064d2:	69ba      	ldr	r2, [r7, #24]
 80064d4:	693b      	ldr	r3, [r7, #16]
 80064d6:	4313      	orrs	r3, r2
 80064d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	69ba      	ldr	r2, [r7, #24]
 80064de:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80064e0:	69fb      	ldr	r3, [r7, #28]
 80064e2:	3301      	adds	r3, #1
 80064e4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	681a      	ldr	r2, [r3, #0]
 80064ea:	69fb      	ldr	r3, [r7, #28]
 80064ec:	fa22 f303 	lsr.w	r3, r2, r3
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	f47f ae63 	bne.w	80061bc <HAL_GPIO_Init+0x14>
  }
}
 80064f6:	bf00      	nop
 80064f8:	bf00      	nop
 80064fa:	3724      	adds	r7, #36	@ 0x24
 80064fc:	46bd      	mov	sp, r7
 80064fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006502:	4770      	bx	lr
 8006504:	58000400 	.word	0x58000400

08006508 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006508:	b480      	push	{r7}
 800650a:	b083      	sub	sp, #12
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
 8006510:	460b      	mov	r3, r1
 8006512:	807b      	strh	r3, [r7, #2]
 8006514:	4613      	mov	r3, r2
 8006516:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006518:	787b      	ldrb	r3, [r7, #1]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d003      	beq.n	8006526 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800651e:	887a      	ldrh	r2, [r7, #2]
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006524:	e003      	b.n	800652e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006526:	887b      	ldrh	r3, [r7, #2]
 8006528:	041a      	lsls	r2, r3, #16
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	619a      	str	r2, [r3, #24]
}
 800652e:	bf00      	nop
 8006530:	370c      	adds	r7, #12
 8006532:	46bd      	mov	sp, r7
 8006534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006538:	4770      	bx	lr
	...

0800653c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b082      	sub	sp, #8
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d101      	bne.n	800654e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800654a:	2301      	movs	r3, #1
 800654c:	e08b      	b.n	8006666 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006554:	b2db      	uxtb	r3, r3
 8006556:	2b00      	cmp	r3, #0
 8006558:	d106      	bne.n	8006568 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2200      	movs	r2, #0
 800655e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	f7fb f974 	bl	8001850 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2224      	movs	r2, #36	@ 0x24
 800656c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	681a      	ldr	r2, [r3, #0]
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f022 0201 	bic.w	r2, r2, #1
 800657e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	685a      	ldr	r2, [r3, #4]
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800658c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	689a      	ldr	r2, [r3, #8]
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800659c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	68db      	ldr	r3, [r3, #12]
 80065a2:	2b01      	cmp	r3, #1
 80065a4:	d107      	bne.n	80065b6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	689a      	ldr	r2, [r3, #8]
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80065b2:	609a      	str	r2, [r3, #8]
 80065b4:	e006      	b.n	80065c4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	689a      	ldr	r2, [r3, #8]
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80065c2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	68db      	ldr	r3, [r3, #12]
 80065c8:	2b02      	cmp	r3, #2
 80065ca:	d108      	bne.n	80065de <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	685a      	ldr	r2, [r3, #4]
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80065da:	605a      	str	r2, [r3, #4]
 80065dc:	e007      	b.n	80065ee <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	685a      	ldr	r2, [r3, #4]
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80065ec:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	6859      	ldr	r1, [r3, #4]
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681a      	ldr	r2, [r3, #0]
 80065f8:	4b1d      	ldr	r3, [pc, #116]	@ (8006670 <HAL_I2C_Init+0x134>)
 80065fa:	430b      	orrs	r3, r1
 80065fc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	68da      	ldr	r2, [r3, #12]
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800660c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	691a      	ldr	r2, [r3, #16]
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	695b      	ldr	r3, [r3, #20]
 8006616:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	699b      	ldr	r3, [r3, #24]
 800661e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	430a      	orrs	r2, r1
 8006626:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	69d9      	ldr	r1, [r3, #28]
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6a1a      	ldr	r2, [r3, #32]
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	430a      	orrs	r2, r1
 8006636:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	681a      	ldr	r2, [r3, #0]
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f042 0201 	orr.w	r2, r2, #1
 8006646:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2200      	movs	r2, #0
 800664c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2220      	movs	r2, #32
 8006652:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2200      	movs	r2, #0
 800665a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2200      	movs	r2, #0
 8006660:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8006664:	2300      	movs	r3, #0
}
 8006666:	4618      	mov	r0, r3
 8006668:	3708      	adds	r7, #8
 800666a:	46bd      	mov	sp, r7
 800666c:	bd80      	pop	{r7, pc}
 800666e:	bf00      	nop
 8006670:	02008000 	.word	0x02008000

08006674 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b088      	sub	sp, #32
 8006678:	af02      	add	r7, sp, #8
 800667a:	60f8      	str	r0, [r7, #12]
 800667c:	607a      	str	r2, [r7, #4]
 800667e:	461a      	mov	r2, r3
 8006680:	460b      	mov	r3, r1
 8006682:	817b      	strh	r3, [r7, #10]
 8006684:	4613      	mov	r3, r2
 8006686:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800668e:	b2db      	uxtb	r3, r3
 8006690:	2b20      	cmp	r3, #32
 8006692:	f040 80fd 	bne.w	8006890 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800669c:	2b01      	cmp	r3, #1
 800669e:	d101      	bne.n	80066a4 <HAL_I2C_Master_Transmit+0x30>
 80066a0:	2302      	movs	r3, #2
 80066a2:	e0f6      	b.n	8006892 <HAL_I2C_Master_Transmit+0x21e>
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	2201      	movs	r2, #1
 80066a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80066ac:	f7fb fdc8 	bl	8002240 <HAL_GetTick>
 80066b0:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80066b2:	693b      	ldr	r3, [r7, #16]
 80066b4:	9300      	str	r3, [sp, #0]
 80066b6:	2319      	movs	r3, #25
 80066b8:	2201      	movs	r2, #1
 80066ba:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80066be:	68f8      	ldr	r0, [r7, #12]
 80066c0:	f001 f891 	bl	80077e6 <I2C_WaitOnFlagUntilTimeout>
 80066c4:	4603      	mov	r3, r0
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d001      	beq.n	80066ce <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80066ca:	2301      	movs	r3, #1
 80066cc:	e0e1      	b.n	8006892 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	2221      	movs	r2, #33	@ 0x21
 80066d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	2210      	movs	r2, #16
 80066da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	2200      	movs	r2, #0
 80066e2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	687a      	ldr	r2, [r7, #4]
 80066e8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	893a      	ldrh	r2, [r7, #8]
 80066ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	2200      	movs	r2, #0
 80066f4:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80066fa:	b29b      	uxth	r3, r3
 80066fc:	2bff      	cmp	r3, #255	@ 0xff
 80066fe:	d906      	bls.n	800670e <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	22ff      	movs	r2, #255	@ 0xff
 8006704:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8006706:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800670a:	617b      	str	r3, [r7, #20]
 800670c:	e007      	b.n	800671e <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006712:	b29a      	uxth	r2, r3
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8006718:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800671c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006722:	2b00      	cmp	r3, #0
 8006724:	d024      	beq.n	8006770 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800672a:	781a      	ldrb	r2, [r3, #0]
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006736:	1c5a      	adds	r2, r3, #1
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006740:	b29b      	uxth	r3, r3
 8006742:	3b01      	subs	r3, #1
 8006744:	b29a      	uxth	r2, r3
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800674e:	3b01      	subs	r3, #1
 8006750:	b29a      	uxth	r2, r3
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800675a:	b2db      	uxtb	r3, r3
 800675c:	3301      	adds	r3, #1
 800675e:	b2da      	uxtb	r2, r3
 8006760:	8979      	ldrh	r1, [r7, #10]
 8006762:	4b4e      	ldr	r3, [pc, #312]	@ (800689c <HAL_I2C_Master_Transmit+0x228>)
 8006764:	9300      	str	r3, [sp, #0]
 8006766:	697b      	ldr	r3, [r7, #20]
 8006768:	68f8      	ldr	r0, [r7, #12]
 800676a:	f001 fa8b 	bl	8007c84 <I2C_TransferConfig>
 800676e:	e066      	b.n	800683e <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006774:	b2da      	uxtb	r2, r3
 8006776:	8979      	ldrh	r1, [r7, #10]
 8006778:	4b48      	ldr	r3, [pc, #288]	@ (800689c <HAL_I2C_Master_Transmit+0x228>)
 800677a:	9300      	str	r3, [sp, #0]
 800677c:	697b      	ldr	r3, [r7, #20]
 800677e:	68f8      	ldr	r0, [r7, #12]
 8006780:	f001 fa80 	bl	8007c84 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8006784:	e05b      	b.n	800683e <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006786:	693a      	ldr	r2, [r7, #16]
 8006788:	6a39      	ldr	r1, [r7, #32]
 800678a:	68f8      	ldr	r0, [r7, #12]
 800678c:	f001 f884 	bl	8007898 <I2C_WaitOnTXISFlagUntilTimeout>
 8006790:	4603      	mov	r3, r0
 8006792:	2b00      	cmp	r3, #0
 8006794:	d001      	beq.n	800679a <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8006796:	2301      	movs	r3, #1
 8006798:	e07b      	b.n	8006892 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800679e:	781a      	ldrb	r2, [r3, #0]
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067aa:	1c5a      	adds	r2, r3, #1
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80067b4:	b29b      	uxth	r3, r3
 80067b6:	3b01      	subs	r3, #1
 80067b8:	b29a      	uxth	r2, r3
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80067c2:	3b01      	subs	r3, #1
 80067c4:	b29a      	uxth	r2, r3
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80067ce:	b29b      	uxth	r3, r3
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d034      	beq.n	800683e <HAL_I2C_Master_Transmit+0x1ca>
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d130      	bne.n	800683e <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80067dc:	693b      	ldr	r3, [r7, #16]
 80067de:	9300      	str	r3, [sp, #0]
 80067e0:	6a3b      	ldr	r3, [r7, #32]
 80067e2:	2200      	movs	r2, #0
 80067e4:	2180      	movs	r1, #128	@ 0x80
 80067e6:	68f8      	ldr	r0, [r7, #12]
 80067e8:	f000 fffd 	bl	80077e6 <I2C_WaitOnFlagUntilTimeout>
 80067ec:	4603      	mov	r3, r0
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d001      	beq.n	80067f6 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80067f2:	2301      	movs	r3, #1
 80067f4:	e04d      	b.n	8006892 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80067fa:	b29b      	uxth	r3, r3
 80067fc:	2bff      	cmp	r3, #255	@ 0xff
 80067fe:	d90e      	bls.n	800681e <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	22ff      	movs	r2, #255	@ 0xff
 8006804:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800680a:	b2da      	uxtb	r2, r3
 800680c:	8979      	ldrh	r1, [r7, #10]
 800680e:	2300      	movs	r3, #0
 8006810:	9300      	str	r3, [sp, #0]
 8006812:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006816:	68f8      	ldr	r0, [r7, #12]
 8006818:	f001 fa34 	bl	8007c84 <I2C_TransferConfig>
 800681c:	e00f      	b.n	800683e <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006822:	b29a      	uxth	r2, r3
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800682c:	b2da      	uxtb	r2, r3
 800682e:	8979      	ldrh	r1, [r7, #10]
 8006830:	2300      	movs	r3, #0
 8006832:	9300      	str	r3, [sp, #0]
 8006834:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006838:	68f8      	ldr	r0, [r7, #12]
 800683a:	f001 fa23 	bl	8007c84 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006842:	b29b      	uxth	r3, r3
 8006844:	2b00      	cmp	r3, #0
 8006846:	d19e      	bne.n	8006786 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006848:	693a      	ldr	r2, [r7, #16]
 800684a:	6a39      	ldr	r1, [r7, #32]
 800684c:	68f8      	ldr	r0, [r7, #12]
 800684e:	f001 f86a 	bl	8007926 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006852:	4603      	mov	r3, r0
 8006854:	2b00      	cmp	r3, #0
 8006856:	d001      	beq.n	800685c <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8006858:	2301      	movs	r3, #1
 800685a:	e01a      	b.n	8006892 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	2220      	movs	r2, #32
 8006862:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	6859      	ldr	r1, [r3, #4]
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681a      	ldr	r2, [r3, #0]
 800686e:	4b0c      	ldr	r3, [pc, #48]	@ (80068a0 <HAL_I2C_Master_Transmit+0x22c>)
 8006870:	400b      	ands	r3, r1
 8006872:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	2220      	movs	r2, #32
 8006878:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	2200      	movs	r2, #0
 8006880:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	2200      	movs	r2, #0
 8006888:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800688c:	2300      	movs	r3, #0
 800688e:	e000      	b.n	8006892 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8006890:	2302      	movs	r3, #2
  }
}
 8006892:	4618      	mov	r0, r3
 8006894:	3718      	adds	r7, #24
 8006896:	46bd      	mov	sp, r7
 8006898:	bd80      	pop	{r7, pc}
 800689a:	bf00      	nop
 800689c:	80002000 	.word	0x80002000
 80068a0:	fe00e800 	.word	0xfe00e800

080068a4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b088      	sub	sp, #32
 80068a8:	af02      	add	r7, sp, #8
 80068aa:	60f8      	str	r0, [r7, #12]
 80068ac:	607a      	str	r2, [r7, #4]
 80068ae:	461a      	mov	r2, r3
 80068b0:	460b      	mov	r3, r1
 80068b2:	817b      	strh	r3, [r7, #10]
 80068b4:	4613      	mov	r3, r2
 80068b6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80068be:	b2db      	uxtb	r3, r3
 80068c0:	2b20      	cmp	r3, #32
 80068c2:	f040 80db 	bne.w	8006a7c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80068cc:	2b01      	cmp	r3, #1
 80068ce:	d101      	bne.n	80068d4 <HAL_I2C_Master_Receive+0x30>
 80068d0:	2302      	movs	r3, #2
 80068d2:	e0d4      	b.n	8006a7e <HAL_I2C_Master_Receive+0x1da>
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	2201      	movs	r2, #1
 80068d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80068dc:	f7fb fcb0 	bl	8002240 <HAL_GetTick>
 80068e0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80068e2:	697b      	ldr	r3, [r7, #20]
 80068e4:	9300      	str	r3, [sp, #0]
 80068e6:	2319      	movs	r3, #25
 80068e8:	2201      	movs	r2, #1
 80068ea:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80068ee:	68f8      	ldr	r0, [r7, #12]
 80068f0:	f000 ff79 	bl	80077e6 <I2C_WaitOnFlagUntilTimeout>
 80068f4:	4603      	mov	r3, r0
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d001      	beq.n	80068fe <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80068fa:	2301      	movs	r3, #1
 80068fc:	e0bf      	b.n	8006a7e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	2222      	movs	r2, #34	@ 0x22
 8006902:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	2210      	movs	r2, #16
 800690a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	2200      	movs	r2, #0
 8006912:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	687a      	ldr	r2, [r7, #4]
 8006918:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	893a      	ldrh	r2, [r7, #8]
 800691e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	2200      	movs	r2, #0
 8006924:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800692a:	b29b      	uxth	r3, r3
 800692c:	2bff      	cmp	r3, #255	@ 0xff
 800692e:	d90e      	bls.n	800694e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	22ff      	movs	r2, #255	@ 0xff
 8006934:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800693a:	b2da      	uxtb	r2, r3
 800693c:	8979      	ldrh	r1, [r7, #10]
 800693e:	4b52      	ldr	r3, [pc, #328]	@ (8006a88 <HAL_I2C_Master_Receive+0x1e4>)
 8006940:	9300      	str	r3, [sp, #0]
 8006942:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006946:	68f8      	ldr	r0, [r7, #12]
 8006948:	f001 f99c 	bl	8007c84 <I2C_TransferConfig>
 800694c:	e06d      	b.n	8006a2a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006952:	b29a      	uxth	r2, r3
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800695c:	b2da      	uxtb	r2, r3
 800695e:	8979      	ldrh	r1, [r7, #10]
 8006960:	4b49      	ldr	r3, [pc, #292]	@ (8006a88 <HAL_I2C_Master_Receive+0x1e4>)
 8006962:	9300      	str	r3, [sp, #0]
 8006964:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006968:	68f8      	ldr	r0, [r7, #12]
 800696a:	f001 f98b 	bl	8007c84 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800696e:	e05c      	b.n	8006a2a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006970:	697a      	ldr	r2, [r7, #20]
 8006972:	6a39      	ldr	r1, [r7, #32]
 8006974:	68f8      	ldr	r0, [r7, #12]
 8006976:	f001 f819 	bl	80079ac <I2C_WaitOnRXNEFlagUntilTimeout>
 800697a:	4603      	mov	r3, r0
 800697c:	2b00      	cmp	r3, #0
 800697e:	d001      	beq.n	8006984 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8006980:	2301      	movs	r3, #1
 8006982:	e07c      	b.n	8006a7e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800698e:	b2d2      	uxtb	r2, r2
 8006990:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006996:	1c5a      	adds	r2, r3, #1
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069a0:	3b01      	subs	r3, #1
 80069a2:	b29a      	uxth	r2, r3
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069ac:	b29b      	uxth	r3, r3
 80069ae:	3b01      	subs	r3, #1
 80069b0:	b29a      	uxth	r2, r3
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069ba:	b29b      	uxth	r3, r3
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d034      	beq.n	8006a2a <HAL_I2C_Master_Receive+0x186>
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d130      	bne.n	8006a2a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80069c8:	697b      	ldr	r3, [r7, #20]
 80069ca:	9300      	str	r3, [sp, #0]
 80069cc:	6a3b      	ldr	r3, [r7, #32]
 80069ce:	2200      	movs	r2, #0
 80069d0:	2180      	movs	r1, #128	@ 0x80
 80069d2:	68f8      	ldr	r0, [r7, #12]
 80069d4:	f000 ff07 	bl	80077e6 <I2C_WaitOnFlagUntilTimeout>
 80069d8:	4603      	mov	r3, r0
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d001      	beq.n	80069e2 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80069de:	2301      	movs	r3, #1
 80069e0:	e04d      	b.n	8006a7e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069e6:	b29b      	uxth	r3, r3
 80069e8:	2bff      	cmp	r3, #255	@ 0xff
 80069ea:	d90e      	bls.n	8006a0a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	22ff      	movs	r2, #255	@ 0xff
 80069f0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069f6:	b2da      	uxtb	r2, r3
 80069f8:	8979      	ldrh	r1, [r7, #10]
 80069fa:	2300      	movs	r3, #0
 80069fc:	9300      	str	r3, [sp, #0]
 80069fe:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006a02:	68f8      	ldr	r0, [r7, #12]
 8006a04:	f001 f93e 	bl	8007c84 <I2C_TransferConfig>
 8006a08:	e00f      	b.n	8006a2a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a0e:	b29a      	uxth	r2, r3
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a18:	b2da      	uxtb	r2, r3
 8006a1a:	8979      	ldrh	r1, [r7, #10]
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	9300      	str	r3, [sp, #0]
 8006a20:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006a24:	68f8      	ldr	r0, [r7, #12]
 8006a26:	f001 f92d 	bl	8007c84 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a2e:	b29b      	uxth	r3, r3
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d19d      	bne.n	8006970 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006a34:	697a      	ldr	r2, [r7, #20]
 8006a36:	6a39      	ldr	r1, [r7, #32]
 8006a38:	68f8      	ldr	r0, [r7, #12]
 8006a3a:	f000 ff74 	bl	8007926 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006a3e:	4603      	mov	r3, r0
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d001      	beq.n	8006a48 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8006a44:	2301      	movs	r3, #1
 8006a46:	e01a      	b.n	8006a7e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	2220      	movs	r2, #32
 8006a4e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	6859      	ldr	r1, [r3, #4]
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681a      	ldr	r2, [r3, #0]
 8006a5a:	4b0c      	ldr	r3, [pc, #48]	@ (8006a8c <HAL_I2C_Master_Receive+0x1e8>)
 8006a5c:	400b      	ands	r3, r1
 8006a5e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	2220      	movs	r2, #32
 8006a64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	2200      	movs	r2, #0
 8006a74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006a78:	2300      	movs	r3, #0
 8006a7a:	e000      	b.n	8006a7e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8006a7c:	2302      	movs	r3, #2
  }
}
 8006a7e:	4618      	mov	r0, r3
 8006a80:	3718      	adds	r7, #24
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bd80      	pop	{r7, pc}
 8006a86:	bf00      	nop
 8006a88:	80002400 	.word	0x80002400
 8006a8c:	fe00e800 	.word	0xfe00e800

08006a90 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b084      	sub	sp, #16
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	699b      	ldr	r3, [r3, #24]
 8006a9e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d005      	beq.n	8006abc <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ab4:	68ba      	ldr	r2, [r7, #8]
 8006ab6:	68f9      	ldr	r1, [r7, #12]
 8006ab8:	6878      	ldr	r0, [r7, #4]
 8006aba:	4798      	blx	r3
  }
}
 8006abc:	bf00      	nop
 8006abe:	3710      	adds	r7, #16
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	bd80      	pop	{r7, pc}

08006ac4 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b086      	sub	sp, #24
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	699b      	ldr	r3, [r3, #24]
 8006ad2:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8006adc:	697b      	ldr	r3, [r7, #20]
 8006ade:	0a1b      	lsrs	r3, r3, #8
 8006ae0:	f003 0301 	and.w	r3, r3, #1
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d010      	beq.n	8006b0a <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8006ae8:	693b      	ldr	r3, [r7, #16]
 8006aea:	09db      	lsrs	r3, r3, #7
 8006aec:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d00a      	beq.n	8006b0a <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006af8:	f043 0201 	orr.w	r2, r3, #1
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006b08:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8006b0a:	697b      	ldr	r3, [r7, #20]
 8006b0c:	0a9b      	lsrs	r3, r3, #10
 8006b0e:	f003 0301 	and.w	r3, r3, #1
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d010      	beq.n	8006b38 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8006b16:	693b      	ldr	r3, [r7, #16]
 8006b18:	09db      	lsrs	r3, r3, #7
 8006b1a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d00a      	beq.n	8006b38 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b26:	f043 0208 	orr.w	r2, r3, #8
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006b36:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8006b38:	697b      	ldr	r3, [r7, #20]
 8006b3a:	0a5b      	lsrs	r3, r3, #9
 8006b3c:	f003 0301 	and.w	r3, r3, #1
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d010      	beq.n	8006b66 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8006b44:	693b      	ldr	r3, [r7, #16]
 8006b46:	09db      	lsrs	r3, r3, #7
 8006b48:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d00a      	beq.n	8006b66 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b54:	f043 0202 	orr.w	r2, r3, #2
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006b64:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b6a:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	f003 030b 	and.w	r3, r3, #11
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d003      	beq.n	8006b7e <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8006b76:	68f9      	ldr	r1, [r7, #12]
 8006b78:	6878      	ldr	r0, [r7, #4]
 8006b7a:	f000 fcdb 	bl	8007534 <I2C_ITError>
  }
}
 8006b7e:	bf00      	nop
 8006b80:	3718      	adds	r7, #24
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bd80      	pop	{r7, pc}

08006b86 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006b86:	b480      	push	{r7}
 8006b88:	b083      	sub	sp, #12
 8006b8a:	af00      	add	r7, sp, #0
 8006b8c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8006b8e:	bf00      	nop
 8006b90:	370c      	adds	r7, #12
 8006b92:	46bd      	mov	sp, r7
 8006b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b98:	4770      	bx	lr

08006b9a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006b9a:	b480      	push	{r7}
 8006b9c:	b083      	sub	sp, #12
 8006b9e:	af00      	add	r7, sp, #0
 8006ba0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8006ba2:	bf00      	nop
 8006ba4:	370c      	adds	r7, #12
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bac:	4770      	bx	lr

08006bae <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8006bae:	b480      	push	{r7}
 8006bb0:	b083      	sub	sp, #12
 8006bb2:	af00      	add	r7, sp, #0
 8006bb4:	6078      	str	r0, [r7, #4]
 8006bb6:	460b      	mov	r3, r1
 8006bb8:	70fb      	strb	r3, [r7, #3]
 8006bba:	4613      	mov	r3, r2
 8006bbc:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8006bbe:	bf00      	nop
 8006bc0:	370c      	adds	r7, #12
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc8:	4770      	bx	lr

08006bca <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006bca:	b480      	push	{r7}
 8006bcc:	b083      	sub	sp, #12
 8006bce:	af00      	add	r7, sp, #0
 8006bd0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8006bd2:	bf00      	nop
 8006bd4:	370c      	adds	r7, #12
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bdc:	4770      	bx	lr

08006bde <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006bde:	b480      	push	{r7}
 8006be0:	b083      	sub	sp, #12
 8006be2:	af00      	add	r7, sp, #0
 8006be4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8006be6:	bf00      	nop
 8006be8:	370c      	adds	r7, #12
 8006bea:	46bd      	mov	sp, r7
 8006bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf0:	4770      	bx	lr

08006bf2 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006bf2:	b480      	push	{r7}
 8006bf4:	b083      	sub	sp, #12
 8006bf6:	af00      	add	r7, sp, #0
 8006bf8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8006bfa:	bf00      	nop
 8006bfc:	370c      	adds	r7, #12
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c04:	4770      	bx	lr

08006c06 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8006c06:	b580      	push	{r7, lr}
 8006c08:	b086      	sub	sp, #24
 8006c0a:	af00      	add	r7, sp, #0
 8006c0c:	60f8      	str	r0, [r7, #12]
 8006c0e:	60b9      	str	r1, [r7, #8]
 8006c10:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c16:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006c22:	2b01      	cmp	r3, #1
 8006c24:	d101      	bne.n	8006c2a <I2C_Slave_ISR_IT+0x24>
 8006c26:	2302      	movs	r3, #2
 8006c28:	e0ed      	b.n	8006e06 <I2C_Slave_ISR_IT+0x200>
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	2201      	movs	r2, #1
 8006c2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006c32:	693b      	ldr	r3, [r7, #16]
 8006c34:	095b      	lsrs	r3, r3, #5
 8006c36:	f003 0301 	and.w	r3, r3, #1
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d00a      	beq.n	8006c54 <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	095b      	lsrs	r3, r3, #5
 8006c42:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d004      	beq.n	8006c54 <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8006c4a:	6939      	ldr	r1, [r7, #16]
 8006c4c:	68f8      	ldr	r0, [r7, #12]
 8006c4e:	f000 f9c1 	bl	8006fd4 <I2C_ITSlaveCplt>
 8006c52:	e0d3      	b.n	8006dfc <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006c54:	693b      	ldr	r3, [r7, #16]
 8006c56:	091b      	lsrs	r3, r3, #4
 8006c58:	f003 0301 	and.w	r3, r3, #1
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d04d      	beq.n	8006cfc <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	091b      	lsrs	r3, r3, #4
 8006c64:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d047      	beq.n	8006cfc <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c70:	b29b      	uxth	r3, r3
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d128      	bne.n	8006cc8 <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c7c:	b2db      	uxtb	r3, r3
 8006c7e:	2b28      	cmp	r3, #40	@ 0x28
 8006c80:	d108      	bne.n	8006c94 <I2C_Slave_ISR_IT+0x8e>
 8006c82:	697b      	ldr	r3, [r7, #20]
 8006c84:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006c88:	d104      	bne.n	8006c94 <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8006c8a:	6939      	ldr	r1, [r7, #16]
 8006c8c:	68f8      	ldr	r0, [r7, #12]
 8006c8e:	f000 fbfb 	bl	8007488 <I2C_ITListenCplt>
 8006c92:	e032      	b.n	8006cfa <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c9a:	b2db      	uxtb	r3, r3
 8006c9c:	2b29      	cmp	r3, #41	@ 0x29
 8006c9e:	d10e      	bne.n	8006cbe <I2C_Slave_ISR_IT+0xb8>
 8006ca0:	697b      	ldr	r3, [r7, #20]
 8006ca2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006ca6:	d00a      	beq.n	8006cbe <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	2210      	movs	r2, #16
 8006cae:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8006cb0:	68f8      	ldr	r0, [r7, #12]
 8006cb2:	f000 fd56 	bl	8007762 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006cb6:	68f8      	ldr	r0, [r7, #12]
 8006cb8:	f000 f92d 	bl	8006f16 <I2C_ITSlaveSeqCplt>
 8006cbc:	e01d      	b.n	8006cfa <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	2210      	movs	r2, #16
 8006cc4:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8006cc6:	e096      	b.n	8006df6 <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	2210      	movs	r2, #16
 8006cce:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006cd4:	f043 0204 	orr.w	r2, r3, #4
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006cdc:	697b      	ldr	r3, [r7, #20]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d004      	beq.n	8006cec <I2C_Slave_ISR_IT+0xe6>
 8006ce2:	697b      	ldr	r3, [r7, #20]
 8006ce4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006ce8:	f040 8085 	bne.w	8006df6 <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006cf0:	4619      	mov	r1, r3
 8006cf2:	68f8      	ldr	r0, [r7, #12]
 8006cf4:	f000 fc1e 	bl	8007534 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8006cf8:	e07d      	b.n	8006df6 <I2C_Slave_ISR_IT+0x1f0>
 8006cfa:	e07c      	b.n	8006df6 <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006cfc:	693b      	ldr	r3, [r7, #16]
 8006cfe:	089b      	lsrs	r3, r3, #2
 8006d00:	f003 0301 	and.w	r3, r3, #1
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d030      	beq.n	8006d6a <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	089b      	lsrs	r3, r3, #2
 8006d0c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d02a      	beq.n	8006d6a <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d18:	b29b      	uxth	r3, r3
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d018      	beq.n	8006d50 <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d28:	b2d2      	uxtb	r2, r2
 8006d2a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d30:	1c5a      	adds	r2, r3, #1
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d3a:	3b01      	subs	r3, #1
 8006d3c:	b29a      	uxth	r2, r3
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d46:	b29b      	uxth	r3, r3
 8006d48:	3b01      	subs	r3, #1
 8006d4a:	b29a      	uxth	r2, r3
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d54:	b29b      	uxth	r3, r3
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d14f      	bne.n	8006dfa <I2C_Slave_ISR_IT+0x1f4>
 8006d5a:	697b      	ldr	r3, [r7, #20]
 8006d5c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006d60:	d04b      	beq.n	8006dfa <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8006d62:	68f8      	ldr	r0, [r7, #12]
 8006d64:	f000 f8d7 	bl	8006f16 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8006d68:	e047      	b.n	8006dfa <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006d6a:	693b      	ldr	r3, [r7, #16]
 8006d6c:	08db      	lsrs	r3, r3, #3
 8006d6e:	f003 0301 	and.w	r3, r3, #1
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d00a      	beq.n	8006d8c <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	08db      	lsrs	r3, r3, #3
 8006d7a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d004      	beq.n	8006d8c <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8006d82:	6939      	ldr	r1, [r7, #16]
 8006d84:	68f8      	ldr	r0, [r7, #12]
 8006d86:	f000 f842 	bl	8006e0e <I2C_ITAddrCplt>
 8006d8a:	e037      	b.n	8006dfc <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006d8c:	693b      	ldr	r3, [r7, #16]
 8006d8e:	085b      	lsrs	r3, r3, #1
 8006d90:	f003 0301 	and.w	r3, r3, #1
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d031      	beq.n	8006dfc <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	085b      	lsrs	r3, r3, #1
 8006d9c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d02b      	beq.n	8006dfc <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006da8:	b29b      	uxth	r3, r3
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d018      	beq.n	8006de0 <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006db2:	781a      	ldrb	r2, [r3, #0]
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dbe:	1c5a      	adds	r2, r3, #1
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006dc8:	b29b      	uxth	r3, r3
 8006dca:	3b01      	subs	r3, #1
 8006dcc:	b29a      	uxth	r2, r3
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006dd6:	3b01      	subs	r3, #1
 8006dd8:	b29a      	uxth	r2, r3
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	851a      	strh	r2, [r3, #40]	@ 0x28
 8006dde:	e00d      	b.n	8006dfc <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8006de0:	697b      	ldr	r3, [r7, #20]
 8006de2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006de6:	d002      	beq.n	8006dee <I2C_Slave_ISR_IT+0x1e8>
 8006de8:	697b      	ldr	r3, [r7, #20]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d106      	bne.n	8006dfc <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006dee:	68f8      	ldr	r0, [r7, #12]
 8006df0:	f000 f891 	bl	8006f16 <I2C_ITSlaveSeqCplt>
 8006df4:	e002      	b.n	8006dfc <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 8006df6:	bf00      	nop
 8006df8:	e000      	b.n	8006dfc <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 8006dfa:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006e04:	2300      	movs	r3, #0
}
 8006e06:	4618      	mov	r0, r3
 8006e08:	3718      	adds	r7, #24
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	bd80      	pop	{r7, pc}

08006e0e <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006e0e:	b580      	push	{r7, lr}
 8006e10:	b084      	sub	sp, #16
 8006e12:	af00      	add	r7, sp, #0
 8006e14:	6078      	str	r0, [r7, #4]
 8006e16:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e1e:	b2db      	uxtb	r3, r3
 8006e20:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006e24:	2b28      	cmp	r3, #40	@ 0x28
 8006e26:	d16a      	bne.n	8006efe <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	699b      	ldr	r3, [r3, #24]
 8006e2e:	0c1b      	lsrs	r3, r3, #16
 8006e30:	b2db      	uxtb	r3, r3
 8006e32:	f003 0301 	and.w	r3, r3, #1
 8006e36:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	699b      	ldr	r3, [r3, #24]
 8006e3e:	0c1b      	lsrs	r3, r3, #16
 8006e40:	b29b      	uxth	r3, r3
 8006e42:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8006e46:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	689b      	ldr	r3, [r3, #8]
 8006e4e:	b29b      	uxth	r3, r3
 8006e50:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006e54:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	68db      	ldr	r3, [r3, #12]
 8006e5c:	b29b      	uxth	r3, r3
 8006e5e:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8006e62:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	68db      	ldr	r3, [r3, #12]
 8006e68:	2b02      	cmp	r3, #2
 8006e6a:	d138      	bne.n	8006ede <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8006e6c:	897b      	ldrh	r3, [r7, #10]
 8006e6e:	09db      	lsrs	r3, r3, #7
 8006e70:	b29a      	uxth	r2, r3
 8006e72:	89bb      	ldrh	r3, [r7, #12]
 8006e74:	4053      	eors	r3, r2
 8006e76:	b29b      	uxth	r3, r3
 8006e78:	f003 0306 	and.w	r3, r3, #6
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d11c      	bne.n	8006eba <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8006e80:	897b      	ldrh	r3, [r7, #10]
 8006e82:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006e88:	1c5a      	adds	r2, r3, #1
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006e92:	2b02      	cmp	r3, #2
 8006e94:	d13b      	bne.n	8006f0e <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2200      	movs	r2, #0
 8006e9a:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	2208      	movs	r2, #8
 8006ea2:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006eac:	89ba      	ldrh	r2, [r7, #12]
 8006eae:	7bfb      	ldrb	r3, [r7, #15]
 8006eb0:	4619      	mov	r1, r3
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	f7ff fe7b 	bl	8006bae <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006eb8:	e029      	b.n	8006f0e <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8006eba:	893b      	ldrh	r3, [r7, #8]
 8006ebc:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006ebe:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	f000 ff10 	bl	8007ce8 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2200      	movs	r2, #0
 8006ecc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006ed0:	89ba      	ldrh	r2, [r7, #12]
 8006ed2:	7bfb      	ldrb	r3, [r7, #15]
 8006ed4:	4619      	mov	r1, r3
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	f7ff fe69 	bl	8006bae <HAL_I2C_AddrCallback>
}
 8006edc:	e017      	b.n	8006f0e <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006ede:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f000 ff00 	bl	8007ce8 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2200      	movs	r2, #0
 8006eec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006ef0:	89ba      	ldrh	r2, [r7, #12]
 8006ef2:	7bfb      	ldrb	r3, [r7, #15]
 8006ef4:	4619      	mov	r1, r3
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	f7ff fe59 	bl	8006bae <HAL_I2C_AddrCallback>
}
 8006efc:	e007      	b.n	8006f0e <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	2208      	movs	r2, #8
 8006f04:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2200      	movs	r2, #0
 8006f0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8006f0e:	bf00      	nop
 8006f10:	3710      	adds	r7, #16
 8006f12:	46bd      	mov	sp, r7
 8006f14:	bd80      	pop	{r7, pc}

08006f16 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8006f16:	b580      	push	{r7, lr}
 8006f18:	b084      	sub	sp, #16
 8006f1a:	af00      	add	r7, sp, #0
 8006f1c:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	0b9b      	lsrs	r3, r3, #14
 8006f32:	f003 0301 	and.w	r3, r3, #1
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d008      	beq.n	8006f4c <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	681a      	ldr	r2, [r3, #0]
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006f48:	601a      	str	r2, [r3, #0]
 8006f4a:	e00d      	b.n	8006f68 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	0bdb      	lsrs	r3, r3, #15
 8006f50:	f003 0301 	and.w	r3, r3, #1
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d007      	beq.n	8006f68 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	681a      	ldr	r2, [r3, #0]
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006f66:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f6e:	b2db      	uxtb	r3, r3
 8006f70:	2b29      	cmp	r3, #41	@ 0x29
 8006f72:	d112      	bne.n	8006f9a <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2228      	movs	r2, #40	@ 0x28
 8006f78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2221      	movs	r2, #33	@ 0x21
 8006f80:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006f82:	2101      	movs	r1, #1
 8006f84:	6878      	ldr	r0, [r7, #4]
 8006f86:	f000 feaf 	bl	8007ce8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	f7ff fdf7 	bl	8006b86 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006f98:	e017      	b.n	8006fca <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006fa0:	b2db      	uxtb	r3, r3
 8006fa2:	2b2a      	cmp	r3, #42	@ 0x2a
 8006fa4:	d111      	bne.n	8006fca <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2228      	movs	r2, #40	@ 0x28
 8006faa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2222      	movs	r2, #34	@ 0x22
 8006fb2:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006fb4:	2102      	movs	r1, #2
 8006fb6:	6878      	ldr	r0, [r7, #4]
 8006fb8:	f000 fe96 	bl	8007ce8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006fc4:	6878      	ldr	r0, [r7, #4]
 8006fc6:	f7ff fde8 	bl	8006b9a <HAL_I2C_SlaveRxCpltCallback>
}
 8006fca:	bf00      	nop
 8006fcc:	3710      	adds	r7, #16
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	bd80      	pop	{r7, pc}
	...

08006fd4 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b086      	sub	sp, #24
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
 8006fdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fee:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ff6:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	2220      	movs	r2, #32
 8006ffe:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007000:	7afb      	ldrb	r3, [r7, #11]
 8007002:	2b21      	cmp	r3, #33	@ 0x21
 8007004:	d002      	beq.n	800700c <I2C_ITSlaveCplt+0x38>
 8007006:	7afb      	ldrb	r3, [r7, #11]
 8007008:	2b29      	cmp	r3, #41	@ 0x29
 800700a:	d108      	bne.n	800701e <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800700c:	f248 0101 	movw	r1, #32769	@ 0x8001
 8007010:	6878      	ldr	r0, [r7, #4]
 8007012:	f000 fe69 	bl	8007ce8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2221      	movs	r2, #33	@ 0x21
 800701a:	631a      	str	r2, [r3, #48]	@ 0x30
 800701c:	e019      	b.n	8007052 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800701e:	7afb      	ldrb	r3, [r7, #11]
 8007020:	2b22      	cmp	r3, #34	@ 0x22
 8007022:	d002      	beq.n	800702a <I2C_ITSlaveCplt+0x56>
 8007024:	7afb      	ldrb	r3, [r7, #11]
 8007026:	2b2a      	cmp	r3, #42	@ 0x2a
 8007028:	d108      	bne.n	800703c <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800702a:	f248 0102 	movw	r1, #32770	@ 0x8002
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	f000 fe5a 	bl	8007ce8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2222      	movs	r2, #34	@ 0x22
 8007038:	631a      	str	r2, [r3, #48]	@ 0x30
 800703a:	e00a      	b.n	8007052 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 800703c:	7afb      	ldrb	r3, [r7, #11]
 800703e:	2b28      	cmp	r3, #40	@ 0x28
 8007040:	d107      	bne.n	8007052 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8007042:	f248 0103 	movw	r1, #32771	@ 0x8003
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f000 fe4e 	bl	8007ce8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2200      	movs	r2, #0
 8007050:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	685a      	ldr	r2, [r3, #4]
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007060:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	6859      	ldr	r1, [r3, #4]
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681a      	ldr	r2, [r3, #0]
 800706c:	4b80      	ldr	r3, [pc, #512]	@ (8007270 <I2C_ITSlaveCplt+0x29c>)
 800706e:	400b      	ands	r3, r1
 8007070:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	f000 fb75 	bl	8007762 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8007078:	693b      	ldr	r3, [r7, #16]
 800707a:	0b9b      	lsrs	r3, r3, #14
 800707c:	f003 0301 	and.w	r3, r3, #1
 8007080:	2b00      	cmp	r3, #0
 8007082:	d07a      	beq.n	800717a <I2C_ITSlaveCplt+0x1a6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	681a      	ldr	r2, [r3, #0]
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007092:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007098:	2b00      	cmp	r3, #0
 800709a:	f000 8112 	beq.w	80072c2 <I2C_ITSlaveCplt+0x2ee>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	4a73      	ldr	r2, [pc, #460]	@ (8007274 <I2C_ITSlaveCplt+0x2a0>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d059      	beq.n	800715e <I2C_ITSlaveCplt+0x18a>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	4a71      	ldr	r2, [pc, #452]	@ (8007278 <I2C_ITSlaveCplt+0x2a4>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d053      	beq.n	800715e <I2C_ITSlaveCplt+0x18a>
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	4a6f      	ldr	r2, [pc, #444]	@ (800727c <I2C_ITSlaveCplt+0x2a8>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	d04d      	beq.n	800715e <I2C_ITSlaveCplt+0x18a>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	4a6d      	ldr	r2, [pc, #436]	@ (8007280 <I2C_ITSlaveCplt+0x2ac>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d047      	beq.n	800715e <I2C_ITSlaveCplt+0x18a>
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	4a6b      	ldr	r2, [pc, #428]	@ (8007284 <I2C_ITSlaveCplt+0x2b0>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d041      	beq.n	800715e <I2C_ITSlaveCplt+0x18a>
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	4a69      	ldr	r2, [pc, #420]	@ (8007288 <I2C_ITSlaveCplt+0x2b4>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d03b      	beq.n	800715e <I2C_ITSlaveCplt+0x18a>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	4a67      	ldr	r2, [pc, #412]	@ (800728c <I2C_ITSlaveCplt+0x2b8>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d035      	beq.n	800715e <I2C_ITSlaveCplt+0x18a>
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	4a65      	ldr	r2, [pc, #404]	@ (8007290 <I2C_ITSlaveCplt+0x2bc>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d02f      	beq.n	800715e <I2C_ITSlaveCplt+0x18a>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	4a63      	ldr	r2, [pc, #396]	@ (8007294 <I2C_ITSlaveCplt+0x2c0>)
 8007106:	4293      	cmp	r3, r2
 8007108:	d029      	beq.n	800715e <I2C_ITSlaveCplt+0x18a>
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	4a61      	ldr	r2, [pc, #388]	@ (8007298 <I2C_ITSlaveCplt+0x2c4>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d023      	beq.n	800715e <I2C_ITSlaveCplt+0x18a>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	4a5f      	ldr	r2, [pc, #380]	@ (800729c <I2C_ITSlaveCplt+0x2c8>)
 800711e:	4293      	cmp	r3, r2
 8007120:	d01d      	beq.n	800715e <I2C_ITSlaveCplt+0x18a>
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	4a5d      	ldr	r2, [pc, #372]	@ (80072a0 <I2C_ITSlaveCplt+0x2cc>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d017      	beq.n	800715e <I2C_ITSlaveCplt+0x18a>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	4a5b      	ldr	r2, [pc, #364]	@ (80072a4 <I2C_ITSlaveCplt+0x2d0>)
 8007136:	4293      	cmp	r3, r2
 8007138:	d011      	beq.n	800715e <I2C_ITSlaveCplt+0x18a>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	4a59      	ldr	r2, [pc, #356]	@ (80072a8 <I2C_ITSlaveCplt+0x2d4>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d00b      	beq.n	800715e <I2C_ITSlaveCplt+0x18a>
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	4a57      	ldr	r2, [pc, #348]	@ (80072ac <I2C_ITSlaveCplt+0x2d8>)
 800714e:	4293      	cmp	r3, r2
 8007150:	d005      	beq.n	800715e <I2C_ITSlaveCplt+0x18a>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	4a55      	ldr	r2, [pc, #340]	@ (80072b0 <I2C_ITSlaveCplt+0x2dc>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d105      	bne.n	800716a <I2C_ITSlaveCplt+0x196>
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	685b      	ldr	r3, [r3, #4]
 8007166:	b29b      	uxth	r3, r3
 8007168:	e004      	b.n	8007174 <I2C_ITSlaveCplt+0x1a0>
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	685b      	ldr	r3, [r3, #4]
 8007172:	b29b      	uxth	r3, r3
 8007174:	687a      	ldr	r2, [r7, #4]
 8007176:	8553      	strh	r3, [r2, #42]	@ 0x2a
 8007178:	e0a3      	b.n	80072c2 <I2C_ITSlaveCplt+0x2ee>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800717a:	693b      	ldr	r3, [r7, #16]
 800717c:	0bdb      	lsrs	r3, r3, #15
 800717e:	f003 0301 	and.w	r3, r3, #1
 8007182:	2b00      	cmp	r3, #0
 8007184:	f000 809d 	beq.w	80072c2 <I2C_ITSlaveCplt+0x2ee>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	681a      	ldr	r2, [r3, #0]
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007196:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800719c:	2b00      	cmp	r3, #0
 800719e:	f000 8090 	beq.w	80072c2 <I2C_ITSlaveCplt+0x2ee>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	4a32      	ldr	r2, [pc, #200]	@ (8007274 <I2C_ITSlaveCplt+0x2a0>)
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d059      	beq.n	8007262 <I2C_ITSlaveCplt+0x28e>
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	4a30      	ldr	r2, [pc, #192]	@ (8007278 <I2C_ITSlaveCplt+0x2a4>)
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d053      	beq.n	8007262 <I2C_ITSlaveCplt+0x28e>
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	4a2e      	ldr	r2, [pc, #184]	@ (800727c <I2C_ITSlaveCplt+0x2a8>)
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d04d      	beq.n	8007262 <I2C_ITSlaveCplt+0x28e>
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	4a2c      	ldr	r2, [pc, #176]	@ (8007280 <I2C_ITSlaveCplt+0x2ac>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d047      	beq.n	8007262 <I2C_ITSlaveCplt+0x28e>
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	4a2a      	ldr	r2, [pc, #168]	@ (8007284 <I2C_ITSlaveCplt+0x2b0>)
 80071da:	4293      	cmp	r3, r2
 80071dc:	d041      	beq.n	8007262 <I2C_ITSlaveCplt+0x28e>
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	4a28      	ldr	r2, [pc, #160]	@ (8007288 <I2C_ITSlaveCplt+0x2b4>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d03b      	beq.n	8007262 <I2C_ITSlaveCplt+0x28e>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4a26      	ldr	r2, [pc, #152]	@ (800728c <I2C_ITSlaveCplt+0x2b8>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d035      	beq.n	8007262 <I2C_ITSlaveCplt+0x28e>
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	4a24      	ldr	r2, [pc, #144]	@ (8007290 <I2C_ITSlaveCplt+0x2bc>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d02f      	beq.n	8007262 <I2C_ITSlaveCplt+0x28e>
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	4a22      	ldr	r2, [pc, #136]	@ (8007294 <I2C_ITSlaveCplt+0x2c0>)
 800720a:	4293      	cmp	r3, r2
 800720c:	d029      	beq.n	8007262 <I2C_ITSlaveCplt+0x28e>
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	4a20      	ldr	r2, [pc, #128]	@ (8007298 <I2C_ITSlaveCplt+0x2c4>)
 8007216:	4293      	cmp	r3, r2
 8007218:	d023      	beq.n	8007262 <I2C_ITSlaveCplt+0x28e>
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	4a1e      	ldr	r2, [pc, #120]	@ (800729c <I2C_ITSlaveCplt+0x2c8>)
 8007222:	4293      	cmp	r3, r2
 8007224:	d01d      	beq.n	8007262 <I2C_ITSlaveCplt+0x28e>
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4a1c      	ldr	r2, [pc, #112]	@ (80072a0 <I2C_ITSlaveCplt+0x2cc>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d017      	beq.n	8007262 <I2C_ITSlaveCplt+0x28e>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	4a1a      	ldr	r2, [pc, #104]	@ (80072a4 <I2C_ITSlaveCplt+0x2d0>)
 800723a:	4293      	cmp	r3, r2
 800723c:	d011      	beq.n	8007262 <I2C_ITSlaveCplt+0x28e>
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	4a18      	ldr	r2, [pc, #96]	@ (80072a8 <I2C_ITSlaveCplt+0x2d4>)
 8007246:	4293      	cmp	r3, r2
 8007248:	d00b      	beq.n	8007262 <I2C_ITSlaveCplt+0x28e>
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	4a16      	ldr	r2, [pc, #88]	@ (80072ac <I2C_ITSlaveCplt+0x2d8>)
 8007252:	4293      	cmp	r3, r2
 8007254:	d005      	beq.n	8007262 <I2C_ITSlaveCplt+0x28e>
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	4a14      	ldr	r2, [pc, #80]	@ (80072b0 <I2C_ITSlaveCplt+0x2dc>)
 800725e:	4293      	cmp	r3, r2
 8007260:	d128      	bne.n	80072b4 <I2C_ITSlaveCplt+0x2e0>
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	685b      	ldr	r3, [r3, #4]
 800726a:	b29b      	uxth	r3, r3
 800726c:	e027      	b.n	80072be <I2C_ITSlaveCplt+0x2ea>
 800726e:	bf00      	nop
 8007270:	fe00e800 	.word	0xfe00e800
 8007274:	40020010 	.word	0x40020010
 8007278:	40020028 	.word	0x40020028
 800727c:	40020040 	.word	0x40020040
 8007280:	40020058 	.word	0x40020058
 8007284:	40020070 	.word	0x40020070
 8007288:	40020088 	.word	0x40020088
 800728c:	400200a0 	.word	0x400200a0
 8007290:	400200b8 	.word	0x400200b8
 8007294:	40020410 	.word	0x40020410
 8007298:	40020428 	.word	0x40020428
 800729c:	40020440 	.word	0x40020440
 80072a0:	40020458 	.word	0x40020458
 80072a4:	40020470 	.word	0x40020470
 80072a8:	40020488 	.word	0x40020488
 80072ac:	400204a0 	.word	0x400204a0
 80072b0:	400204b8 	.word	0x400204b8
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	685b      	ldr	r3, [r3, #4]
 80072bc:	b29b      	uxth	r3, r3
 80072be:	687a      	ldr	r2, [r7, #4]
 80072c0:	8553      	strh	r3, [r2, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80072c2:	697b      	ldr	r3, [r7, #20]
 80072c4:	089b      	lsrs	r3, r3, #2
 80072c6:	f003 0301 	and.w	r3, r3, #1
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d020      	beq.n	8007310 <I2C_ITSlaveCplt+0x33c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80072ce:	697b      	ldr	r3, [r7, #20]
 80072d0:	f023 0304 	bic.w	r3, r3, #4
 80072d4:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072e0:	b2d2      	uxtb	r2, r2
 80072e2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072e8:	1c5a      	adds	r2, r3, #1
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d00c      	beq.n	8007310 <I2C_ITSlaveCplt+0x33c>
    {
      hi2c->XferSize--;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80072fa:	3b01      	subs	r3, #1
 80072fc:	b29a      	uxth	r2, r3
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007306:	b29b      	uxth	r3, r3
 8007308:	3b01      	subs	r3, #1
 800730a:	b29a      	uxth	r2, r3
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007314:	b29b      	uxth	r3, r3
 8007316:	2b00      	cmp	r3, #0
 8007318:	d005      	beq.n	8007326 <I2C_ITSlaveCplt+0x352>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800731e:	f043 0204 	orr.w	r2, r3, #4
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007326:	697b      	ldr	r3, [r7, #20]
 8007328:	091b      	lsrs	r3, r3, #4
 800732a:	f003 0301 	and.w	r3, r3, #1
 800732e:	2b00      	cmp	r3, #0
 8007330:	d04a      	beq.n	80073c8 <I2C_ITSlaveCplt+0x3f4>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8007332:	693b      	ldr	r3, [r7, #16]
 8007334:	091b      	lsrs	r3, r3, #4
 8007336:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800733a:	2b00      	cmp	r3, #0
 800733c:	d044      	beq.n	80073c8 <I2C_ITSlaveCplt+0x3f4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007342:	b29b      	uxth	r3, r3
 8007344:	2b00      	cmp	r3, #0
 8007346:	d128      	bne.n	800739a <I2C_ITSlaveCplt+0x3c6>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800734e:	b2db      	uxtb	r3, r3
 8007350:	2b28      	cmp	r3, #40	@ 0x28
 8007352:	d108      	bne.n	8007366 <I2C_ITSlaveCplt+0x392>
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800735a:	d104      	bne.n	8007366 <I2C_ITSlaveCplt+0x392>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800735c:	6979      	ldr	r1, [r7, #20]
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	f000 f892 	bl	8007488 <I2C_ITListenCplt>
 8007364:	e030      	b.n	80073c8 <I2C_ITSlaveCplt+0x3f4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800736c:	b2db      	uxtb	r3, r3
 800736e:	2b29      	cmp	r3, #41	@ 0x29
 8007370:	d10e      	bne.n	8007390 <I2C_ITSlaveCplt+0x3bc>
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007378:	d00a      	beq.n	8007390 <I2C_ITSlaveCplt+0x3bc>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	2210      	movs	r2, #16
 8007380:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	f000 f9ed 	bl	8007762 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8007388:	6878      	ldr	r0, [r7, #4]
 800738a:	f7ff fdc4 	bl	8006f16 <I2C_ITSlaveSeqCplt>
 800738e:	e01b      	b.n	80073c8 <I2C_ITSlaveCplt+0x3f4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	2210      	movs	r2, #16
 8007396:	61da      	str	r2, [r3, #28]
 8007398:	e016      	b.n	80073c8 <I2C_ITSlaveCplt+0x3f4>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	2210      	movs	r2, #16
 80073a0:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073a6:	f043 0204 	orr.w	r2, r3, #4
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d003      	beq.n	80073bc <I2C_ITSlaveCplt+0x3e8>
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80073ba:	d105      	bne.n	80073c8 <I2C_ITSlaveCplt+0x3f4>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073c0:	4619      	mov	r1, r3
 80073c2:	6878      	ldr	r0, [r7, #4]
 80073c4:	f000 f8b6 	bl	8007534 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2200      	movs	r2, #0
 80073cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2200      	movs	r2, #0
 80073d4:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d010      	beq.n	8007400 <I2C_ITSlaveCplt+0x42c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073e2:	4619      	mov	r1, r3
 80073e4:	6878      	ldr	r0, [r7, #4]
 80073e6:	f000 f8a5 	bl	8007534 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80073f0:	b2db      	uxtb	r3, r3
 80073f2:	2b28      	cmp	r3, #40	@ 0x28
 80073f4:	d141      	bne.n	800747a <I2C_ITSlaveCplt+0x4a6>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80073f6:	6979      	ldr	r1, [r7, #20]
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	f000 f845 	bl	8007488 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80073fe:	e03c      	b.n	800747a <I2C_ITSlaveCplt+0x4a6>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007404:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007408:	d014      	beq.n	8007434 <I2C_ITSlaveCplt+0x460>
    I2C_ITSlaveSeqCplt(hi2c);
 800740a:	6878      	ldr	r0, [r7, #4]
 800740c:	f7ff fd83 	bl	8006f16 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	4a1c      	ldr	r2, [pc, #112]	@ (8007484 <I2C_ITSlaveCplt+0x4b0>)
 8007414:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2220      	movs	r2, #32
 800741a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2200      	movs	r2, #0
 8007422:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2200      	movs	r2, #0
 8007428:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800742c:	6878      	ldr	r0, [r7, #4]
 800742e:	f7ff fbcc 	bl	8006bca <HAL_I2C_ListenCpltCallback>
}
 8007432:	e022      	b.n	800747a <I2C_ITSlaveCplt+0x4a6>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800743a:	b2db      	uxtb	r3, r3
 800743c:	2b22      	cmp	r3, #34	@ 0x22
 800743e:	d10e      	bne.n	800745e <I2C_ITSlaveCplt+0x48a>
    hi2c->State = HAL_I2C_STATE_READY;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2220      	movs	r2, #32
 8007444:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2200      	movs	r2, #0
 800744c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2200      	movs	r2, #0
 8007452:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	f7ff fb9f 	bl	8006b9a <HAL_I2C_SlaveRxCpltCallback>
}
 800745c:	e00d      	b.n	800747a <I2C_ITSlaveCplt+0x4a6>
    hi2c->State = HAL_I2C_STATE_READY;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2220      	movs	r2, #32
 8007462:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2200      	movs	r2, #0
 800746a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2200      	movs	r2, #0
 8007470:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007474:	6878      	ldr	r0, [r7, #4]
 8007476:	f7ff fb86 	bl	8006b86 <HAL_I2C_SlaveTxCpltCallback>
}
 800747a:	bf00      	nop
 800747c:	3718      	adds	r7, #24
 800747e:	46bd      	mov	sp, r7
 8007480:	bd80      	pop	{r7, pc}
 8007482:	bf00      	nop
 8007484:	ffff0000 	.word	0xffff0000

08007488 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b082      	sub	sp, #8
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
 8007490:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	4a26      	ldr	r2, [pc, #152]	@ (8007530 <I2C_ITListenCplt+0xa8>)
 8007496:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2200      	movs	r2, #0
 800749c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2220      	movs	r2, #32
 80074a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2200      	movs	r2, #0
 80074aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2200      	movs	r2, #0
 80074b2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	089b      	lsrs	r3, r3, #2
 80074b8:	f003 0301 	and.w	r3, r3, #1
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d022      	beq.n	8007506 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074ca:	b2d2      	uxtb	r2, r2
 80074cc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074d2:	1c5a      	adds	r2, r3, #1
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d012      	beq.n	8007506 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80074e4:	3b01      	subs	r3, #1
 80074e6:	b29a      	uxth	r2, r3
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80074f0:	b29b      	uxth	r3, r3
 80074f2:	3b01      	subs	r3, #1
 80074f4:	b29a      	uxth	r2, r3
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074fe:	f043 0204 	orr.w	r2, r3, #4
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007506:	f248 0103 	movw	r1, #32771	@ 0x8003
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	f000 fbec 	bl	8007ce8 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	2210      	movs	r2, #16
 8007516:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2200      	movs	r2, #0
 800751c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8007520:	6878      	ldr	r0, [r7, #4]
 8007522:	f7ff fb52 	bl	8006bca <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8007526:	bf00      	nop
 8007528:	3708      	adds	r7, #8
 800752a:	46bd      	mov	sp, r7
 800752c:	bd80      	pop	{r7, pc}
 800752e:	bf00      	nop
 8007530:	ffff0000 	.word	0xffff0000

08007534 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8007534:	b580      	push	{r7, lr}
 8007536:	b084      	sub	sp, #16
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
 800753c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007544:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2200      	movs	r2, #0
 800754a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	4a6d      	ldr	r2, [pc, #436]	@ (8007708 <I2C_ITError+0x1d4>)
 8007552:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2200      	movs	r2, #0
 8007558:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	431a      	orrs	r2, r3
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8007566:	7bfb      	ldrb	r3, [r7, #15]
 8007568:	2b28      	cmp	r3, #40	@ 0x28
 800756a:	d005      	beq.n	8007578 <I2C_ITError+0x44>
 800756c:	7bfb      	ldrb	r3, [r7, #15]
 800756e:	2b29      	cmp	r3, #41	@ 0x29
 8007570:	d002      	beq.n	8007578 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8007572:	7bfb      	ldrb	r3, [r7, #15]
 8007574:	2b2a      	cmp	r3, #42	@ 0x2a
 8007576:	d10b      	bne.n	8007590 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007578:	2103      	movs	r1, #3
 800757a:	6878      	ldr	r0, [r7, #4]
 800757c:	f000 fbb4 	bl	8007ce8 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2228      	movs	r2, #40	@ 0x28
 8007584:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	4a60      	ldr	r2, [pc, #384]	@ (800770c <I2C_ITError+0x1d8>)
 800758c:	635a      	str	r2, [r3, #52]	@ 0x34
 800758e:	e030      	b.n	80075f2 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007590:	f248 0103 	movw	r1, #32771	@ 0x8003
 8007594:	6878      	ldr	r0, [r7, #4]
 8007596:	f000 fba7 	bl	8007ce8 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800759a:	6878      	ldr	r0, [r7, #4]
 800759c:	f000 f8e1 	bl	8007762 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80075a6:	b2db      	uxtb	r3, r3
 80075a8:	2b60      	cmp	r3, #96	@ 0x60
 80075aa:	d01f      	beq.n	80075ec <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2220      	movs	r2, #32
 80075b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	699b      	ldr	r3, [r3, #24]
 80075ba:	f003 0320 	and.w	r3, r3, #32
 80075be:	2b20      	cmp	r3, #32
 80075c0:	d114      	bne.n	80075ec <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	699b      	ldr	r3, [r3, #24]
 80075c8:	f003 0310 	and.w	r3, r3, #16
 80075cc:	2b10      	cmp	r3, #16
 80075ce:	d109      	bne.n	80075e4 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	2210      	movs	r2, #16
 80075d6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075dc:	f043 0204 	orr.w	r2, r3, #4
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	2220      	movs	r2, #32
 80075ea:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2200      	movs	r2, #0
 80075f0:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075f6:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d039      	beq.n	8007674 <I2C_ITError+0x140>
 8007600:	68bb      	ldr	r3, [r7, #8]
 8007602:	2b11      	cmp	r3, #17
 8007604:	d002      	beq.n	800760c <I2C_ITError+0xd8>
 8007606:	68bb      	ldr	r3, [r7, #8]
 8007608:	2b21      	cmp	r3, #33	@ 0x21
 800760a:	d133      	bne.n	8007674 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007616:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800761a:	d107      	bne.n	800762c <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	681a      	ldr	r2, [r3, #0]
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800762a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007630:	4618      	mov	r0, r3
 8007632:	f7fd fd13 	bl	800505c <HAL_DMA_GetState>
 8007636:	4603      	mov	r3, r0
 8007638:	2b01      	cmp	r3, #1
 800763a:	d017      	beq.n	800766c <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007640:	4a33      	ldr	r2, [pc, #204]	@ (8007710 <I2C_ITError+0x1dc>)
 8007642:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2200      	movs	r2, #0
 8007648:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007650:	4618      	mov	r0, r3
 8007652:	f7fc fb93 	bl	8003d7c <HAL_DMA_Abort_IT>
 8007656:	4603      	mov	r3, r0
 8007658:	2b00      	cmp	r3, #0
 800765a:	d04d      	beq.n	80076f8 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007660:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007662:	687a      	ldr	r2, [r7, #4]
 8007664:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8007666:	4610      	mov	r0, r2
 8007668:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800766a:	e045      	b.n	80076f8 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800766c:	6878      	ldr	r0, [r7, #4]
 800766e:	f000 f851 	bl	8007714 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007672:	e041      	b.n	80076f8 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007678:	2b00      	cmp	r3, #0
 800767a:	d039      	beq.n	80076f0 <I2C_ITError+0x1bc>
 800767c:	68bb      	ldr	r3, [r7, #8]
 800767e:	2b12      	cmp	r3, #18
 8007680:	d002      	beq.n	8007688 <I2C_ITError+0x154>
 8007682:	68bb      	ldr	r3, [r7, #8]
 8007684:	2b22      	cmp	r3, #34	@ 0x22
 8007686:	d133      	bne.n	80076f0 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007692:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007696:	d107      	bne.n	80076a8 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	681a      	ldr	r2, [r3, #0]
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80076a6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076ac:	4618      	mov	r0, r3
 80076ae:	f7fd fcd5 	bl	800505c <HAL_DMA_GetState>
 80076b2:	4603      	mov	r3, r0
 80076b4:	2b01      	cmp	r3, #1
 80076b6:	d017      	beq.n	80076e8 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076bc:	4a14      	ldr	r2, [pc, #80]	@ (8007710 <I2C_ITError+0x1dc>)
 80076be:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2200      	movs	r2, #0
 80076c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076cc:	4618      	mov	r0, r3
 80076ce:	f7fc fb55 	bl	8003d7c <HAL_DMA_Abort_IT>
 80076d2:	4603      	mov	r3, r0
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d011      	beq.n	80076fc <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80076de:	687a      	ldr	r2, [r7, #4]
 80076e0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80076e2:	4610      	mov	r0, r2
 80076e4:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80076e6:	e009      	b.n	80076fc <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80076e8:	6878      	ldr	r0, [r7, #4]
 80076ea:	f000 f813 	bl	8007714 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80076ee:	e005      	b.n	80076fc <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80076f0:	6878      	ldr	r0, [r7, #4]
 80076f2:	f000 f80f 	bl	8007714 <I2C_TreatErrorCallback>
  }
}
 80076f6:	e002      	b.n	80076fe <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80076f8:	bf00      	nop
 80076fa:	e000      	b.n	80076fe <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80076fc:	bf00      	nop
}
 80076fe:	bf00      	nop
 8007700:	3710      	adds	r7, #16
 8007702:	46bd      	mov	sp, r7
 8007704:	bd80      	pop	{r7, pc}
 8007706:	bf00      	nop
 8007708:	ffff0000 	.word	0xffff0000
 800770c:	08006c07 	.word	0x08006c07
 8007710:	080077ab 	.word	0x080077ab

08007714 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b082      	sub	sp, #8
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007722:	b2db      	uxtb	r3, r3
 8007724:	2b60      	cmp	r3, #96	@ 0x60
 8007726:	d10e      	bne.n	8007746 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2220      	movs	r2, #32
 800772c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2200      	movs	r2, #0
 8007734:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2200      	movs	r2, #0
 800773a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	f7ff fa57 	bl	8006bf2 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007744:	e009      	b.n	800775a <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2200      	movs	r2, #0
 800774a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2200      	movs	r2, #0
 8007750:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8007754:	6878      	ldr	r0, [r7, #4]
 8007756:	f7ff fa42 	bl	8006bde <HAL_I2C_ErrorCallback>
}
 800775a:	bf00      	nop
 800775c:	3708      	adds	r7, #8
 800775e:	46bd      	mov	sp, r7
 8007760:	bd80      	pop	{r7, pc}

08007762 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007762:	b480      	push	{r7}
 8007764:	b083      	sub	sp, #12
 8007766:	af00      	add	r7, sp, #0
 8007768:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	699b      	ldr	r3, [r3, #24]
 8007770:	f003 0302 	and.w	r3, r3, #2
 8007774:	2b02      	cmp	r3, #2
 8007776:	d103      	bne.n	8007780 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	2200      	movs	r2, #0
 800777e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	699b      	ldr	r3, [r3, #24]
 8007786:	f003 0301 	and.w	r3, r3, #1
 800778a:	2b01      	cmp	r3, #1
 800778c:	d007      	beq.n	800779e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	699a      	ldr	r2, [r3, #24]
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f042 0201 	orr.w	r2, r2, #1
 800779c:	619a      	str	r2, [r3, #24]
  }
}
 800779e:	bf00      	nop
 80077a0:	370c      	adds	r7, #12
 80077a2:	46bd      	mov	sp, r7
 80077a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a8:	4770      	bx	lr

080077aa <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80077aa:	b580      	push	{r7, lr}
 80077ac:	b084      	sub	sp, #16
 80077ae:	af00      	add	r7, sp, #0
 80077b0:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077b6:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d003      	beq.n	80077c8 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077c4:	2200      	movs	r2, #0
 80077c6:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d003      	beq.n	80077d8 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077d4:	2200      	movs	r2, #0
 80077d6:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 80077d8:	68f8      	ldr	r0, [r7, #12]
 80077da:	f7ff ff9b 	bl	8007714 <I2C_TreatErrorCallback>
}
 80077de:	bf00      	nop
 80077e0:	3710      	adds	r7, #16
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bd80      	pop	{r7, pc}

080077e6 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80077e6:	b580      	push	{r7, lr}
 80077e8:	b084      	sub	sp, #16
 80077ea:	af00      	add	r7, sp, #0
 80077ec:	60f8      	str	r0, [r7, #12]
 80077ee:	60b9      	str	r1, [r7, #8]
 80077f0:	603b      	str	r3, [r7, #0]
 80077f2:	4613      	mov	r3, r2
 80077f4:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80077f6:	e03b      	b.n	8007870 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80077f8:	69ba      	ldr	r2, [r7, #24]
 80077fa:	6839      	ldr	r1, [r7, #0]
 80077fc:	68f8      	ldr	r0, [r7, #12]
 80077fe:	f000 f961 	bl	8007ac4 <I2C_IsErrorOccurred>
 8007802:	4603      	mov	r3, r0
 8007804:	2b00      	cmp	r3, #0
 8007806:	d001      	beq.n	800780c <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8007808:	2301      	movs	r3, #1
 800780a:	e041      	b.n	8007890 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007812:	d02d      	beq.n	8007870 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007814:	f7fa fd14 	bl	8002240 <HAL_GetTick>
 8007818:	4602      	mov	r2, r0
 800781a:	69bb      	ldr	r3, [r7, #24]
 800781c:	1ad3      	subs	r3, r2, r3
 800781e:	683a      	ldr	r2, [r7, #0]
 8007820:	429a      	cmp	r2, r3
 8007822:	d302      	bcc.n	800782a <I2C_WaitOnFlagUntilTimeout+0x44>
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d122      	bne.n	8007870 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	699a      	ldr	r2, [r3, #24]
 8007830:	68bb      	ldr	r3, [r7, #8]
 8007832:	4013      	ands	r3, r2
 8007834:	68ba      	ldr	r2, [r7, #8]
 8007836:	429a      	cmp	r2, r3
 8007838:	bf0c      	ite	eq
 800783a:	2301      	moveq	r3, #1
 800783c:	2300      	movne	r3, #0
 800783e:	b2db      	uxtb	r3, r3
 8007840:	461a      	mov	r2, r3
 8007842:	79fb      	ldrb	r3, [r7, #7]
 8007844:	429a      	cmp	r2, r3
 8007846:	d113      	bne.n	8007870 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800784c:	f043 0220 	orr.w	r2, r3, #32
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	2220      	movs	r2, #32
 8007858:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	2200      	movs	r2, #0
 8007860:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	2200      	movs	r2, #0
 8007868:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800786c:	2301      	movs	r3, #1
 800786e:	e00f      	b.n	8007890 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	699a      	ldr	r2, [r3, #24]
 8007876:	68bb      	ldr	r3, [r7, #8]
 8007878:	4013      	ands	r3, r2
 800787a:	68ba      	ldr	r2, [r7, #8]
 800787c:	429a      	cmp	r2, r3
 800787e:	bf0c      	ite	eq
 8007880:	2301      	moveq	r3, #1
 8007882:	2300      	movne	r3, #0
 8007884:	b2db      	uxtb	r3, r3
 8007886:	461a      	mov	r2, r3
 8007888:	79fb      	ldrb	r3, [r7, #7]
 800788a:	429a      	cmp	r2, r3
 800788c:	d0b4      	beq.n	80077f8 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800788e:	2300      	movs	r3, #0
}
 8007890:	4618      	mov	r0, r3
 8007892:	3710      	adds	r7, #16
 8007894:	46bd      	mov	sp, r7
 8007896:	bd80      	pop	{r7, pc}

08007898 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b084      	sub	sp, #16
 800789c:	af00      	add	r7, sp, #0
 800789e:	60f8      	str	r0, [r7, #12]
 80078a0:	60b9      	str	r1, [r7, #8]
 80078a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80078a4:	e033      	b.n	800790e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80078a6:	687a      	ldr	r2, [r7, #4]
 80078a8:	68b9      	ldr	r1, [r7, #8]
 80078aa:	68f8      	ldr	r0, [r7, #12]
 80078ac:	f000 f90a 	bl	8007ac4 <I2C_IsErrorOccurred>
 80078b0:	4603      	mov	r3, r0
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d001      	beq.n	80078ba <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80078b6:	2301      	movs	r3, #1
 80078b8:	e031      	b.n	800791e <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80078ba:	68bb      	ldr	r3, [r7, #8]
 80078bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078c0:	d025      	beq.n	800790e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80078c2:	f7fa fcbd 	bl	8002240 <HAL_GetTick>
 80078c6:	4602      	mov	r2, r0
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	1ad3      	subs	r3, r2, r3
 80078cc:	68ba      	ldr	r2, [r7, #8]
 80078ce:	429a      	cmp	r2, r3
 80078d0:	d302      	bcc.n	80078d8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80078d2:	68bb      	ldr	r3, [r7, #8]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d11a      	bne.n	800790e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	699b      	ldr	r3, [r3, #24]
 80078de:	f003 0302 	and.w	r3, r3, #2
 80078e2:	2b02      	cmp	r3, #2
 80078e4:	d013      	beq.n	800790e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078ea:	f043 0220 	orr.w	r2, r3, #32
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	2220      	movs	r2, #32
 80078f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	2200      	movs	r2, #0
 80078fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	2200      	movs	r2, #0
 8007906:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800790a:	2301      	movs	r3, #1
 800790c:	e007      	b.n	800791e <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	699b      	ldr	r3, [r3, #24]
 8007914:	f003 0302 	and.w	r3, r3, #2
 8007918:	2b02      	cmp	r3, #2
 800791a:	d1c4      	bne.n	80078a6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800791c:	2300      	movs	r3, #0
}
 800791e:	4618      	mov	r0, r3
 8007920:	3710      	adds	r7, #16
 8007922:	46bd      	mov	sp, r7
 8007924:	bd80      	pop	{r7, pc}

08007926 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007926:	b580      	push	{r7, lr}
 8007928:	b084      	sub	sp, #16
 800792a:	af00      	add	r7, sp, #0
 800792c:	60f8      	str	r0, [r7, #12]
 800792e:	60b9      	str	r1, [r7, #8]
 8007930:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007932:	e02f      	b.n	8007994 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007934:	687a      	ldr	r2, [r7, #4]
 8007936:	68b9      	ldr	r1, [r7, #8]
 8007938:	68f8      	ldr	r0, [r7, #12]
 800793a:	f000 f8c3 	bl	8007ac4 <I2C_IsErrorOccurred>
 800793e:	4603      	mov	r3, r0
 8007940:	2b00      	cmp	r3, #0
 8007942:	d001      	beq.n	8007948 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007944:	2301      	movs	r3, #1
 8007946:	e02d      	b.n	80079a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007948:	f7fa fc7a 	bl	8002240 <HAL_GetTick>
 800794c:	4602      	mov	r2, r0
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	1ad3      	subs	r3, r2, r3
 8007952:	68ba      	ldr	r2, [r7, #8]
 8007954:	429a      	cmp	r2, r3
 8007956:	d302      	bcc.n	800795e <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007958:	68bb      	ldr	r3, [r7, #8]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d11a      	bne.n	8007994 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	699b      	ldr	r3, [r3, #24]
 8007964:	f003 0320 	and.w	r3, r3, #32
 8007968:	2b20      	cmp	r3, #32
 800796a:	d013      	beq.n	8007994 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007970:	f043 0220 	orr.w	r2, r3, #32
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	2220      	movs	r2, #32
 800797c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	2200      	movs	r2, #0
 8007984:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	2200      	movs	r2, #0
 800798c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8007990:	2301      	movs	r3, #1
 8007992:	e007      	b.n	80079a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	699b      	ldr	r3, [r3, #24]
 800799a:	f003 0320 	and.w	r3, r3, #32
 800799e:	2b20      	cmp	r3, #32
 80079a0:	d1c8      	bne.n	8007934 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80079a2:	2300      	movs	r3, #0
}
 80079a4:	4618      	mov	r0, r3
 80079a6:	3710      	adds	r7, #16
 80079a8:	46bd      	mov	sp, r7
 80079aa:	bd80      	pop	{r7, pc}

080079ac <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b086      	sub	sp, #24
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	60f8      	str	r0, [r7, #12]
 80079b4:	60b9      	str	r1, [r7, #8]
 80079b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80079b8:	2300      	movs	r3, #0
 80079ba:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80079bc:	e071      	b.n	8007aa2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80079be:	687a      	ldr	r2, [r7, #4]
 80079c0:	68b9      	ldr	r1, [r7, #8]
 80079c2:	68f8      	ldr	r0, [r7, #12]
 80079c4:	f000 f87e 	bl	8007ac4 <I2C_IsErrorOccurred>
 80079c8:	4603      	mov	r3, r0
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d001      	beq.n	80079d2 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 80079ce:	2301      	movs	r3, #1
 80079d0:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	699b      	ldr	r3, [r3, #24]
 80079d8:	f003 0320 	and.w	r3, r3, #32
 80079dc:	2b20      	cmp	r3, #32
 80079de:	d13b      	bne.n	8007a58 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 80079e0:	7dfb      	ldrb	r3, [r7, #23]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d138      	bne.n	8007a58 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	699b      	ldr	r3, [r3, #24]
 80079ec:	f003 0304 	and.w	r3, r3, #4
 80079f0:	2b04      	cmp	r3, #4
 80079f2:	d105      	bne.n	8007a00 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d001      	beq.n	8007a00 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 80079fc:	2300      	movs	r3, #0
 80079fe:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	699b      	ldr	r3, [r3, #24]
 8007a06:	f003 0310 	and.w	r3, r3, #16
 8007a0a:	2b10      	cmp	r3, #16
 8007a0c:	d121      	bne.n	8007a52 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	2210      	movs	r2, #16
 8007a14:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	2204      	movs	r2, #4
 8007a1a:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	2220      	movs	r2, #32
 8007a22:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	6859      	ldr	r1, [r3, #4]
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	681a      	ldr	r2, [r3, #0]
 8007a2e:	4b24      	ldr	r3, [pc, #144]	@ (8007ac0 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8007a30:	400b      	ands	r3, r1
 8007a32:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	2220      	movs	r2, #32
 8007a38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	2200      	movs	r2, #0
 8007a40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	2200      	movs	r2, #0
 8007a48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8007a4c:	2301      	movs	r3, #1
 8007a4e:	75fb      	strb	r3, [r7, #23]
 8007a50:	e002      	b.n	8007a58 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	2200      	movs	r2, #0
 8007a56:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8007a58:	f7fa fbf2 	bl	8002240 <HAL_GetTick>
 8007a5c:	4602      	mov	r2, r0
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	1ad3      	subs	r3, r2, r3
 8007a62:	68ba      	ldr	r2, [r7, #8]
 8007a64:	429a      	cmp	r2, r3
 8007a66:	d302      	bcc.n	8007a6e <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8007a68:	68bb      	ldr	r3, [r7, #8]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d119      	bne.n	8007aa2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8007a6e:	7dfb      	ldrb	r3, [r7, #23]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d116      	bne.n	8007aa2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	699b      	ldr	r3, [r3, #24]
 8007a7a:	f003 0304 	and.w	r3, r3, #4
 8007a7e:	2b04      	cmp	r3, #4
 8007a80:	d00f      	beq.n	8007aa2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a86:	f043 0220 	orr.w	r2, r3, #32
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	2220      	movs	r2, #32
 8007a92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	2200      	movs	r2, #0
 8007a9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8007a9e:	2301      	movs	r3, #1
 8007aa0:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	699b      	ldr	r3, [r3, #24]
 8007aa8:	f003 0304 	and.w	r3, r3, #4
 8007aac:	2b04      	cmp	r3, #4
 8007aae:	d002      	beq.n	8007ab6 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8007ab0:	7dfb      	ldrb	r3, [r7, #23]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d083      	beq.n	80079be <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8007ab6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ab8:	4618      	mov	r0, r3
 8007aba:	3718      	adds	r7, #24
 8007abc:	46bd      	mov	sp, r7
 8007abe:	bd80      	pop	{r7, pc}
 8007ac0:	fe00e800 	.word	0xfe00e800

08007ac4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b08a      	sub	sp, #40	@ 0x28
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	60f8      	str	r0, [r7, #12]
 8007acc:	60b9      	str	r1, [r7, #8]
 8007ace:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	699b      	ldr	r3, [r3, #24]
 8007adc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8007ade:	2300      	movs	r3, #0
 8007ae0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007ae6:	69bb      	ldr	r3, [r7, #24]
 8007ae8:	f003 0310 	and.w	r3, r3, #16
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d068      	beq.n	8007bc2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	2210      	movs	r2, #16
 8007af6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007af8:	e049      	b.n	8007b8e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007afa:	68bb      	ldr	r3, [r7, #8]
 8007afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b00:	d045      	beq.n	8007b8e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007b02:	f7fa fb9d 	bl	8002240 <HAL_GetTick>
 8007b06:	4602      	mov	r2, r0
 8007b08:	69fb      	ldr	r3, [r7, #28]
 8007b0a:	1ad3      	subs	r3, r2, r3
 8007b0c:	68ba      	ldr	r2, [r7, #8]
 8007b0e:	429a      	cmp	r2, r3
 8007b10:	d302      	bcc.n	8007b18 <I2C_IsErrorOccurred+0x54>
 8007b12:	68bb      	ldr	r3, [r7, #8]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d13a      	bne.n	8007b8e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	685b      	ldr	r3, [r3, #4]
 8007b1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007b22:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007b2a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	699b      	ldr	r3, [r3, #24]
 8007b32:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007b36:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007b3a:	d121      	bne.n	8007b80 <I2C_IsErrorOccurred+0xbc>
 8007b3c:	697b      	ldr	r3, [r7, #20]
 8007b3e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007b42:	d01d      	beq.n	8007b80 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8007b44:	7cfb      	ldrb	r3, [r7, #19]
 8007b46:	2b20      	cmp	r3, #32
 8007b48:	d01a      	beq.n	8007b80 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	685a      	ldr	r2, [r3, #4]
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007b58:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8007b5a:	f7fa fb71 	bl	8002240 <HAL_GetTick>
 8007b5e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007b60:	e00e      	b.n	8007b80 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007b62:	f7fa fb6d 	bl	8002240 <HAL_GetTick>
 8007b66:	4602      	mov	r2, r0
 8007b68:	69fb      	ldr	r3, [r7, #28]
 8007b6a:	1ad3      	subs	r3, r2, r3
 8007b6c:	2b19      	cmp	r3, #25
 8007b6e:	d907      	bls.n	8007b80 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8007b70:	6a3b      	ldr	r3, [r7, #32]
 8007b72:	f043 0320 	orr.w	r3, r3, #32
 8007b76:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8007b78:	2301      	movs	r3, #1
 8007b7a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8007b7e:	e006      	b.n	8007b8e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	699b      	ldr	r3, [r3, #24]
 8007b86:	f003 0320 	and.w	r3, r3, #32
 8007b8a:	2b20      	cmp	r3, #32
 8007b8c:	d1e9      	bne.n	8007b62 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	699b      	ldr	r3, [r3, #24]
 8007b94:	f003 0320 	and.w	r3, r3, #32
 8007b98:	2b20      	cmp	r3, #32
 8007b9a:	d003      	beq.n	8007ba4 <I2C_IsErrorOccurred+0xe0>
 8007b9c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d0aa      	beq.n	8007afa <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007ba4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d103      	bne.n	8007bb4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	2220      	movs	r2, #32
 8007bb2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007bb4:	6a3b      	ldr	r3, [r7, #32]
 8007bb6:	f043 0304 	orr.w	r3, r3, #4
 8007bba:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8007bbc:	2301      	movs	r3, #1
 8007bbe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	699b      	ldr	r3, [r3, #24]
 8007bc8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8007bca:	69bb      	ldr	r3, [r7, #24]
 8007bcc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d00b      	beq.n	8007bec <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8007bd4:	6a3b      	ldr	r3, [r7, #32]
 8007bd6:	f043 0301 	orr.w	r3, r3, #1
 8007bda:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007be4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007be6:	2301      	movs	r3, #1
 8007be8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007bec:	69bb      	ldr	r3, [r7, #24]
 8007bee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d00b      	beq.n	8007c0e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8007bf6:	6a3b      	ldr	r3, [r7, #32]
 8007bf8:	f043 0308 	orr.w	r3, r3, #8
 8007bfc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007c06:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007c08:	2301      	movs	r3, #1
 8007c0a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8007c0e:	69bb      	ldr	r3, [r7, #24]
 8007c10:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d00b      	beq.n	8007c30 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8007c18:	6a3b      	ldr	r3, [r7, #32]
 8007c1a:	f043 0302 	orr.w	r3, r3, #2
 8007c1e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007c28:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007c2a:	2301      	movs	r3, #1
 8007c2c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8007c30:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d01c      	beq.n	8007c72 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007c38:	68f8      	ldr	r0, [r7, #12]
 8007c3a:	f7ff fd92 	bl	8007762 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	6859      	ldr	r1, [r3, #4]
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	681a      	ldr	r2, [r3, #0]
 8007c48:	4b0d      	ldr	r3, [pc, #52]	@ (8007c80 <I2C_IsErrorOccurred+0x1bc>)
 8007c4a:	400b      	ands	r3, r1
 8007c4c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007c52:	6a3b      	ldr	r3, [r7, #32]
 8007c54:	431a      	orrs	r2, r3
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	2220      	movs	r2, #32
 8007c5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	2200      	movs	r2, #0
 8007c66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8007c72:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8007c76:	4618      	mov	r0, r3
 8007c78:	3728      	adds	r7, #40	@ 0x28
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	bd80      	pop	{r7, pc}
 8007c7e:	bf00      	nop
 8007c80:	fe00e800 	.word	0xfe00e800

08007c84 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007c84:	b480      	push	{r7}
 8007c86:	b087      	sub	sp, #28
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	60f8      	str	r0, [r7, #12]
 8007c8c:	607b      	str	r3, [r7, #4]
 8007c8e:	460b      	mov	r3, r1
 8007c90:	817b      	strh	r3, [r7, #10]
 8007c92:	4613      	mov	r3, r2
 8007c94:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007c96:	897b      	ldrh	r3, [r7, #10]
 8007c98:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007c9c:	7a7b      	ldrb	r3, [r7, #9]
 8007c9e:	041b      	lsls	r3, r3, #16
 8007ca0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007ca4:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007caa:	6a3b      	ldr	r3, [r7, #32]
 8007cac:	4313      	orrs	r3, r2
 8007cae:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007cb2:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	685a      	ldr	r2, [r3, #4]
 8007cba:	6a3b      	ldr	r3, [r7, #32]
 8007cbc:	0d5b      	lsrs	r3, r3, #21
 8007cbe:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8007cc2:	4b08      	ldr	r3, [pc, #32]	@ (8007ce4 <I2C_TransferConfig+0x60>)
 8007cc4:	430b      	orrs	r3, r1
 8007cc6:	43db      	mvns	r3, r3
 8007cc8:	ea02 0103 	and.w	r1, r2, r3
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	697a      	ldr	r2, [r7, #20]
 8007cd2:	430a      	orrs	r2, r1
 8007cd4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007cd6:	bf00      	nop
 8007cd8:	371c      	adds	r7, #28
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce0:	4770      	bx	lr
 8007ce2:	bf00      	nop
 8007ce4:	03ff63ff 	.word	0x03ff63ff

08007ce8 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8007ce8:	b480      	push	{r7}
 8007cea:	b085      	sub	sp, #20
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
 8007cf0:	460b      	mov	r3, r1
 8007cf2:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8007cf8:	887b      	ldrh	r3, [r7, #2]
 8007cfa:	f003 0301 	and.w	r3, r3, #1
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d00f      	beq.n	8007d22 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8007d08:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007d10:	b2db      	uxtb	r3, r3
 8007d12:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007d16:	2b28      	cmp	r3, #40	@ 0x28
 8007d18:	d003      	beq.n	8007d22 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8007d20:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8007d22:	887b      	ldrh	r3, [r7, #2]
 8007d24:	f003 0302 	and.w	r3, r3, #2
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d00f      	beq.n	8007d4c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8007d32:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007d3a:	b2db      	uxtb	r3, r3
 8007d3c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007d40:	2b28      	cmp	r3, #40	@ 0x28
 8007d42:	d003      	beq.n	8007d4c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8007d4a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007d4c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	da03      	bge.n	8007d5c <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8007d5a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8007d5c:	887b      	ldrh	r3, [r7, #2]
 8007d5e:	2b10      	cmp	r3, #16
 8007d60:	d103      	bne.n	8007d6a <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8007d68:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007d6a:	887b      	ldrh	r3, [r7, #2]
 8007d6c:	2b20      	cmp	r3, #32
 8007d6e:	d103      	bne.n	8007d78 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	f043 0320 	orr.w	r3, r3, #32
 8007d76:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8007d78:	887b      	ldrh	r3, [r7, #2]
 8007d7a:	2b40      	cmp	r3, #64	@ 0x40
 8007d7c:	d103      	bne.n	8007d86 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007d84:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	6819      	ldr	r1, [r3, #0]
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	43da      	mvns	r2, r3
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	400a      	ands	r2, r1
 8007d96:	601a      	str	r2, [r3, #0]
}
 8007d98:	bf00      	nop
 8007d9a:	3714      	adds	r7, #20
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da2:	4770      	bx	lr

08007da4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007da4:	b480      	push	{r7}
 8007da6:	b083      	sub	sp, #12
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
 8007dac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007db4:	b2db      	uxtb	r3, r3
 8007db6:	2b20      	cmp	r3, #32
 8007db8:	d138      	bne.n	8007e2c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007dc0:	2b01      	cmp	r3, #1
 8007dc2:	d101      	bne.n	8007dc8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007dc4:	2302      	movs	r3, #2
 8007dc6:	e032      	b.n	8007e2e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2201      	movs	r2, #1
 8007dcc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2224      	movs	r2, #36	@ 0x24
 8007dd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	681a      	ldr	r2, [r3, #0]
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f022 0201 	bic.w	r2, r2, #1
 8007de6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	681a      	ldr	r2, [r3, #0]
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007df6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	6819      	ldr	r1, [r3, #0]
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	683a      	ldr	r2, [r7, #0]
 8007e04:	430a      	orrs	r2, r1
 8007e06:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	681a      	ldr	r2, [r3, #0]
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	f042 0201 	orr.w	r2, r2, #1
 8007e16:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2220      	movs	r2, #32
 8007e1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2200      	movs	r2, #0
 8007e24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007e28:	2300      	movs	r3, #0
 8007e2a:	e000      	b.n	8007e2e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007e2c:	2302      	movs	r3, #2
  }
}
 8007e2e:	4618      	mov	r0, r3
 8007e30:	370c      	adds	r7, #12
 8007e32:	46bd      	mov	sp, r7
 8007e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e38:	4770      	bx	lr

08007e3a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007e3a:	b480      	push	{r7}
 8007e3c:	b085      	sub	sp, #20
 8007e3e:	af00      	add	r7, sp, #0
 8007e40:	6078      	str	r0, [r7, #4]
 8007e42:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007e4a:	b2db      	uxtb	r3, r3
 8007e4c:	2b20      	cmp	r3, #32
 8007e4e:	d139      	bne.n	8007ec4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007e56:	2b01      	cmp	r3, #1
 8007e58:	d101      	bne.n	8007e5e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007e5a:	2302      	movs	r3, #2
 8007e5c:	e033      	b.n	8007ec6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	2201      	movs	r2, #1
 8007e62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	2224      	movs	r2, #36	@ 0x24
 8007e6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	681a      	ldr	r2, [r3, #0]
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f022 0201 	bic.w	r2, r2, #1
 8007e7c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007e8c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	021b      	lsls	r3, r3, #8
 8007e92:	68fa      	ldr	r2, [r7, #12]
 8007e94:	4313      	orrs	r3, r2
 8007e96:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	68fa      	ldr	r2, [r7, #12]
 8007e9e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	681a      	ldr	r2, [r3, #0]
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	f042 0201 	orr.w	r2, r2, #1
 8007eae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2220      	movs	r2, #32
 8007eb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2200      	movs	r2, #0
 8007ebc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	e000      	b.n	8007ec6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007ec4:	2302      	movs	r3, #2
  }
}
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	3714      	adds	r7, #20
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed0:	4770      	bx	lr

08007ed2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007ed2:	b580      	push	{r7, lr}
 8007ed4:	b086      	sub	sp, #24
 8007ed6:	af02      	add	r7, sp, #8
 8007ed8:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d101      	bne.n	8007ee4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8007ee0:	2301      	movs	r3, #1
 8007ee2:	e0fe      	b.n	80080e2 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8007eea:	b2db      	uxtb	r3, r3
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d106      	bne.n	8007efe <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8007ef8:	6878      	ldr	r0, [r7, #4]
 8007efa:	f00a f935 	bl	8012168 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	2203      	movs	r2, #3
 8007f02:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	f006 fcef 	bl	800e8ee <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	6818      	ldr	r0, [r3, #0]
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	7c1a      	ldrb	r2, [r3, #16]
 8007f18:	f88d 2000 	strb.w	r2, [sp]
 8007f1c:	3304      	adds	r3, #4
 8007f1e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007f20:	f006 fbc0 	bl	800e6a4 <USB_CoreInit>
 8007f24:	4603      	mov	r3, r0
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d005      	beq.n	8007f36 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2202      	movs	r2, #2
 8007f2e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8007f32:	2301      	movs	r3, #1
 8007f34:	e0d5      	b.n	80080e2 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	2100      	movs	r1, #0
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	f006 fce7 	bl	800e910 <USB_SetCurrentMode>
 8007f42:	4603      	mov	r3, r0
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d005      	beq.n	8007f54 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2202      	movs	r2, #2
 8007f4c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8007f50:	2301      	movs	r3, #1
 8007f52:	e0c6      	b.n	80080e2 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007f54:	2300      	movs	r3, #0
 8007f56:	73fb      	strb	r3, [r7, #15]
 8007f58:	e04a      	b.n	8007ff0 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8007f5a:	7bfa      	ldrb	r2, [r7, #15]
 8007f5c:	6879      	ldr	r1, [r7, #4]
 8007f5e:	4613      	mov	r3, r2
 8007f60:	00db      	lsls	r3, r3, #3
 8007f62:	4413      	add	r3, r2
 8007f64:	009b      	lsls	r3, r3, #2
 8007f66:	440b      	add	r3, r1
 8007f68:	3315      	adds	r3, #21
 8007f6a:	2201      	movs	r2, #1
 8007f6c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007f6e:	7bfa      	ldrb	r2, [r7, #15]
 8007f70:	6879      	ldr	r1, [r7, #4]
 8007f72:	4613      	mov	r3, r2
 8007f74:	00db      	lsls	r3, r3, #3
 8007f76:	4413      	add	r3, r2
 8007f78:	009b      	lsls	r3, r3, #2
 8007f7a:	440b      	add	r3, r1
 8007f7c:	3314      	adds	r3, #20
 8007f7e:	7bfa      	ldrb	r2, [r7, #15]
 8007f80:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8007f82:	7bfa      	ldrb	r2, [r7, #15]
 8007f84:	7bfb      	ldrb	r3, [r7, #15]
 8007f86:	b298      	uxth	r0, r3
 8007f88:	6879      	ldr	r1, [r7, #4]
 8007f8a:	4613      	mov	r3, r2
 8007f8c:	00db      	lsls	r3, r3, #3
 8007f8e:	4413      	add	r3, r2
 8007f90:	009b      	lsls	r3, r3, #2
 8007f92:	440b      	add	r3, r1
 8007f94:	332e      	adds	r3, #46	@ 0x2e
 8007f96:	4602      	mov	r2, r0
 8007f98:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007f9a:	7bfa      	ldrb	r2, [r7, #15]
 8007f9c:	6879      	ldr	r1, [r7, #4]
 8007f9e:	4613      	mov	r3, r2
 8007fa0:	00db      	lsls	r3, r3, #3
 8007fa2:	4413      	add	r3, r2
 8007fa4:	009b      	lsls	r3, r3, #2
 8007fa6:	440b      	add	r3, r1
 8007fa8:	3318      	adds	r3, #24
 8007faa:	2200      	movs	r2, #0
 8007fac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007fae:	7bfa      	ldrb	r2, [r7, #15]
 8007fb0:	6879      	ldr	r1, [r7, #4]
 8007fb2:	4613      	mov	r3, r2
 8007fb4:	00db      	lsls	r3, r3, #3
 8007fb6:	4413      	add	r3, r2
 8007fb8:	009b      	lsls	r3, r3, #2
 8007fba:	440b      	add	r3, r1
 8007fbc:	331c      	adds	r3, #28
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8007fc2:	7bfa      	ldrb	r2, [r7, #15]
 8007fc4:	6879      	ldr	r1, [r7, #4]
 8007fc6:	4613      	mov	r3, r2
 8007fc8:	00db      	lsls	r3, r3, #3
 8007fca:	4413      	add	r3, r2
 8007fcc:	009b      	lsls	r3, r3, #2
 8007fce:	440b      	add	r3, r1
 8007fd0:	3320      	adds	r3, #32
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8007fd6:	7bfa      	ldrb	r2, [r7, #15]
 8007fd8:	6879      	ldr	r1, [r7, #4]
 8007fda:	4613      	mov	r3, r2
 8007fdc:	00db      	lsls	r3, r3, #3
 8007fde:	4413      	add	r3, r2
 8007fe0:	009b      	lsls	r3, r3, #2
 8007fe2:	440b      	add	r3, r1
 8007fe4:	3324      	adds	r3, #36	@ 0x24
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007fea:	7bfb      	ldrb	r3, [r7, #15]
 8007fec:	3301      	adds	r3, #1
 8007fee:	73fb      	strb	r3, [r7, #15]
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	791b      	ldrb	r3, [r3, #4]
 8007ff4:	7bfa      	ldrb	r2, [r7, #15]
 8007ff6:	429a      	cmp	r2, r3
 8007ff8:	d3af      	bcc.n	8007f5a <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	73fb      	strb	r3, [r7, #15]
 8007ffe:	e044      	b.n	800808a <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8008000:	7bfa      	ldrb	r2, [r7, #15]
 8008002:	6879      	ldr	r1, [r7, #4]
 8008004:	4613      	mov	r3, r2
 8008006:	00db      	lsls	r3, r3, #3
 8008008:	4413      	add	r3, r2
 800800a:	009b      	lsls	r3, r3, #2
 800800c:	440b      	add	r3, r1
 800800e:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8008012:	2200      	movs	r2, #0
 8008014:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8008016:	7bfa      	ldrb	r2, [r7, #15]
 8008018:	6879      	ldr	r1, [r7, #4]
 800801a:	4613      	mov	r3, r2
 800801c:	00db      	lsls	r3, r3, #3
 800801e:	4413      	add	r3, r2
 8008020:	009b      	lsls	r3, r3, #2
 8008022:	440b      	add	r3, r1
 8008024:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8008028:	7bfa      	ldrb	r2, [r7, #15]
 800802a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800802c:	7bfa      	ldrb	r2, [r7, #15]
 800802e:	6879      	ldr	r1, [r7, #4]
 8008030:	4613      	mov	r3, r2
 8008032:	00db      	lsls	r3, r3, #3
 8008034:	4413      	add	r3, r2
 8008036:	009b      	lsls	r3, r3, #2
 8008038:	440b      	add	r3, r1
 800803a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800803e:	2200      	movs	r2, #0
 8008040:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8008042:	7bfa      	ldrb	r2, [r7, #15]
 8008044:	6879      	ldr	r1, [r7, #4]
 8008046:	4613      	mov	r3, r2
 8008048:	00db      	lsls	r3, r3, #3
 800804a:	4413      	add	r3, r2
 800804c:	009b      	lsls	r3, r3, #2
 800804e:	440b      	add	r3, r1
 8008050:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8008054:	2200      	movs	r2, #0
 8008056:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8008058:	7bfa      	ldrb	r2, [r7, #15]
 800805a:	6879      	ldr	r1, [r7, #4]
 800805c:	4613      	mov	r3, r2
 800805e:	00db      	lsls	r3, r3, #3
 8008060:	4413      	add	r3, r2
 8008062:	009b      	lsls	r3, r3, #2
 8008064:	440b      	add	r3, r1
 8008066:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800806a:	2200      	movs	r2, #0
 800806c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800806e:	7bfa      	ldrb	r2, [r7, #15]
 8008070:	6879      	ldr	r1, [r7, #4]
 8008072:	4613      	mov	r3, r2
 8008074:	00db      	lsls	r3, r3, #3
 8008076:	4413      	add	r3, r2
 8008078:	009b      	lsls	r3, r3, #2
 800807a:	440b      	add	r3, r1
 800807c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8008080:	2200      	movs	r2, #0
 8008082:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008084:	7bfb      	ldrb	r3, [r7, #15]
 8008086:	3301      	adds	r3, #1
 8008088:	73fb      	strb	r3, [r7, #15]
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	791b      	ldrb	r3, [r3, #4]
 800808e:	7bfa      	ldrb	r2, [r7, #15]
 8008090:	429a      	cmp	r2, r3
 8008092:	d3b5      	bcc.n	8008000 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	6818      	ldr	r0, [r3, #0]
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	7c1a      	ldrb	r2, [r3, #16]
 800809c:	f88d 2000 	strb.w	r2, [sp]
 80080a0:	3304      	adds	r3, #4
 80080a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80080a4:	f006 fc80 	bl	800e9a8 <USB_DevInit>
 80080a8:	4603      	mov	r3, r0
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d005      	beq.n	80080ba <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	2202      	movs	r2, #2
 80080b2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80080b6:	2301      	movs	r3, #1
 80080b8:	e013      	b.n	80080e2 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2200      	movs	r2, #0
 80080be:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2201      	movs	r2, #1
 80080c4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	7b1b      	ldrb	r3, [r3, #12]
 80080cc:	2b01      	cmp	r3, #1
 80080ce:	d102      	bne.n	80080d6 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80080d0:	6878      	ldr	r0, [r7, #4]
 80080d2:	f001 f96f 	bl	80093b4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	4618      	mov	r0, r3
 80080dc:	f007 fcc3 	bl	800fa66 <USB_DevDisconnect>

  return HAL_OK;
 80080e0:	2300      	movs	r3, #0
}
 80080e2:	4618      	mov	r0, r3
 80080e4:	3710      	adds	r7, #16
 80080e6:	46bd      	mov	sp, r7
 80080e8:	bd80      	pop	{r7, pc}

080080ea <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80080ea:	b580      	push	{r7, lr}
 80080ec:	b084      	sub	sp, #16
 80080ee:	af00      	add	r7, sp, #0
 80080f0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80080fe:	2b01      	cmp	r3, #1
 8008100:	d101      	bne.n	8008106 <HAL_PCD_Start+0x1c>
 8008102:	2302      	movs	r3, #2
 8008104:	e022      	b.n	800814c <HAL_PCD_Start+0x62>
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	2201      	movs	r2, #1
 800810a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	68db      	ldr	r3, [r3, #12]
 8008112:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008116:	2b00      	cmp	r3, #0
 8008118:	d009      	beq.n	800812e <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800811e:	2b01      	cmp	r3, #1
 8008120:	d105      	bne.n	800812e <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008126:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	4618      	mov	r0, r3
 8008134:	f006 fbca 	bl	800e8cc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	4618      	mov	r0, r3
 800813e:	f007 fc71 	bl	800fa24 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	2200      	movs	r2, #0
 8008146:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800814a:	2300      	movs	r3, #0
}
 800814c:	4618      	mov	r0, r3
 800814e:	3710      	adds	r7, #16
 8008150:	46bd      	mov	sp, r7
 8008152:	bd80      	pop	{r7, pc}

08008154 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8008154:	b590      	push	{r4, r7, lr}
 8008156:	b08d      	sub	sp, #52	@ 0x34
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008162:	6a3b      	ldr	r3, [r7, #32]
 8008164:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	4618      	mov	r0, r3
 800816c:	f007 fd2f 	bl	800fbce <USB_GetMode>
 8008170:	4603      	mov	r3, r0
 8008172:	2b00      	cmp	r3, #0
 8008174:	f040 84b9 	bne.w	8008aea <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	4618      	mov	r0, r3
 800817e:	f007 fc93 	bl	800faa8 <USB_ReadInterrupts>
 8008182:	4603      	mov	r3, r0
 8008184:	2b00      	cmp	r3, #0
 8008186:	f000 84af 	beq.w	8008ae8 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800818a:	69fb      	ldr	r3, [r7, #28]
 800818c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008190:	689b      	ldr	r3, [r3, #8]
 8008192:	0a1b      	lsrs	r3, r3, #8
 8008194:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	4618      	mov	r0, r3
 80081a4:	f007 fc80 	bl	800faa8 <USB_ReadInterrupts>
 80081a8:	4603      	mov	r3, r0
 80081aa:	f003 0302 	and.w	r3, r3, #2
 80081ae:	2b02      	cmp	r3, #2
 80081b0:	d107      	bne.n	80081c2 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	695a      	ldr	r2, [r3, #20]
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	f002 0202 	and.w	r2, r2, #2
 80081c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	4618      	mov	r0, r3
 80081c8:	f007 fc6e 	bl	800faa8 <USB_ReadInterrupts>
 80081cc:	4603      	mov	r3, r0
 80081ce:	f003 0310 	and.w	r3, r3, #16
 80081d2:	2b10      	cmp	r3, #16
 80081d4:	d161      	bne.n	800829a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	699a      	ldr	r2, [r3, #24]
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f022 0210 	bic.w	r2, r2, #16
 80081e4:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80081e6:	6a3b      	ldr	r3, [r7, #32]
 80081e8:	6a1b      	ldr	r3, [r3, #32]
 80081ea:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80081ec:	69bb      	ldr	r3, [r7, #24]
 80081ee:	f003 020f 	and.w	r2, r3, #15
 80081f2:	4613      	mov	r3, r2
 80081f4:	00db      	lsls	r3, r3, #3
 80081f6:	4413      	add	r3, r2
 80081f8:	009b      	lsls	r3, r3, #2
 80081fa:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80081fe:	687a      	ldr	r2, [r7, #4]
 8008200:	4413      	add	r3, r2
 8008202:	3304      	adds	r3, #4
 8008204:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8008206:	69bb      	ldr	r3, [r7, #24]
 8008208:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800820c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008210:	d124      	bne.n	800825c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8008212:	69ba      	ldr	r2, [r7, #24]
 8008214:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8008218:	4013      	ands	r3, r2
 800821a:	2b00      	cmp	r3, #0
 800821c:	d035      	beq.n	800828a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800821e:	697b      	ldr	r3, [r7, #20]
 8008220:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8008222:	69bb      	ldr	r3, [r7, #24]
 8008224:	091b      	lsrs	r3, r3, #4
 8008226:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008228:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800822c:	b29b      	uxth	r3, r3
 800822e:	461a      	mov	r2, r3
 8008230:	6a38      	ldr	r0, [r7, #32]
 8008232:	f007 faa5 	bl	800f780 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008236:	697b      	ldr	r3, [r7, #20]
 8008238:	68da      	ldr	r2, [r3, #12]
 800823a:	69bb      	ldr	r3, [r7, #24]
 800823c:	091b      	lsrs	r3, r3, #4
 800823e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008242:	441a      	add	r2, r3
 8008244:	697b      	ldr	r3, [r7, #20]
 8008246:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008248:	697b      	ldr	r3, [r7, #20]
 800824a:	695a      	ldr	r2, [r3, #20]
 800824c:	69bb      	ldr	r3, [r7, #24]
 800824e:	091b      	lsrs	r3, r3, #4
 8008250:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008254:	441a      	add	r2, r3
 8008256:	697b      	ldr	r3, [r7, #20]
 8008258:	615a      	str	r2, [r3, #20]
 800825a:	e016      	b.n	800828a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800825c:	69bb      	ldr	r3, [r7, #24]
 800825e:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8008262:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8008266:	d110      	bne.n	800828a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800826e:	2208      	movs	r2, #8
 8008270:	4619      	mov	r1, r3
 8008272:	6a38      	ldr	r0, [r7, #32]
 8008274:	f007 fa84 	bl	800f780 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008278:	697b      	ldr	r3, [r7, #20]
 800827a:	695a      	ldr	r2, [r3, #20]
 800827c:	69bb      	ldr	r3, [r7, #24]
 800827e:	091b      	lsrs	r3, r3, #4
 8008280:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008284:	441a      	add	r2, r3
 8008286:	697b      	ldr	r3, [r7, #20]
 8008288:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	699a      	ldr	r2, [r3, #24]
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	f042 0210 	orr.w	r2, r2, #16
 8008298:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	4618      	mov	r0, r3
 80082a0:	f007 fc02 	bl	800faa8 <USB_ReadInterrupts>
 80082a4:	4603      	mov	r3, r0
 80082a6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80082aa:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80082ae:	f040 80a7 	bne.w	8008400 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80082b2:	2300      	movs	r3, #0
 80082b4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	4618      	mov	r0, r3
 80082bc:	f007 fc07 	bl	800face <USB_ReadDevAllOutEpInterrupt>
 80082c0:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80082c2:	e099      	b.n	80083f8 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80082c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082c6:	f003 0301 	and.w	r3, r3, #1
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	f000 808e 	beq.w	80083ec <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80082d6:	b2d2      	uxtb	r2, r2
 80082d8:	4611      	mov	r1, r2
 80082da:	4618      	mov	r0, r3
 80082dc:	f007 fc2b 	bl	800fb36 <USB_ReadDevOutEPInterrupt>
 80082e0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80082e2:	693b      	ldr	r3, [r7, #16]
 80082e4:	f003 0301 	and.w	r3, r3, #1
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d00c      	beq.n	8008306 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80082ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082ee:	015a      	lsls	r2, r3, #5
 80082f0:	69fb      	ldr	r3, [r7, #28]
 80082f2:	4413      	add	r3, r2
 80082f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80082f8:	461a      	mov	r2, r3
 80082fa:	2301      	movs	r3, #1
 80082fc:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80082fe:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008300:	6878      	ldr	r0, [r7, #4]
 8008302:	f000 fed1 	bl	80090a8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8008306:	693b      	ldr	r3, [r7, #16]
 8008308:	f003 0308 	and.w	r3, r3, #8
 800830c:	2b00      	cmp	r3, #0
 800830e:	d00c      	beq.n	800832a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8008310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008312:	015a      	lsls	r2, r3, #5
 8008314:	69fb      	ldr	r3, [r7, #28]
 8008316:	4413      	add	r3, r2
 8008318:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800831c:	461a      	mov	r2, r3
 800831e:	2308      	movs	r3, #8
 8008320:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8008322:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008324:	6878      	ldr	r0, [r7, #4]
 8008326:	f000 ffa7 	bl	8009278 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800832a:	693b      	ldr	r3, [r7, #16]
 800832c:	f003 0310 	and.w	r3, r3, #16
 8008330:	2b00      	cmp	r3, #0
 8008332:	d008      	beq.n	8008346 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8008334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008336:	015a      	lsls	r2, r3, #5
 8008338:	69fb      	ldr	r3, [r7, #28]
 800833a:	4413      	add	r3, r2
 800833c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008340:	461a      	mov	r2, r3
 8008342:	2310      	movs	r3, #16
 8008344:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8008346:	693b      	ldr	r3, [r7, #16]
 8008348:	f003 0302 	and.w	r3, r3, #2
 800834c:	2b00      	cmp	r3, #0
 800834e:	d030      	beq.n	80083b2 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8008350:	6a3b      	ldr	r3, [r7, #32]
 8008352:	695b      	ldr	r3, [r3, #20]
 8008354:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008358:	2b80      	cmp	r3, #128	@ 0x80
 800835a:	d109      	bne.n	8008370 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800835c:	69fb      	ldr	r3, [r7, #28]
 800835e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008362:	685b      	ldr	r3, [r3, #4]
 8008364:	69fa      	ldr	r2, [r7, #28]
 8008366:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800836a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800836e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8008370:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008372:	4613      	mov	r3, r2
 8008374:	00db      	lsls	r3, r3, #3
 8008376:	4413      	add	r3, r2
 8008378:	009b      	lsls	r3, r3, #2
 800837a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800837e:	687a      	ldr	r2, [r7, #4]
 8008380:	4413      	add	r3, r2
 8008382:	3304      	adds	r3, #4
 8008384:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8008386:	697b      	ldr	r3, [r7, #20]
 8008388:	78db      	ldrb	r3, [r3, #3]
 800838a:	2b01      	cmp	r3, #1
 800838c:	d108      	bne.n	80083a0 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800838e:	697b      	ldr	r3, [r7, #20]
 8008390:	2200      	movs	r2, #0
 8008392:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8008394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008396:	b2db      	uxtb	r3, r3
 8008398:	4619      	mov	r1, r3
 800839a:	6878      	ldr	r0, [r7, #4]
 800839c:	f00a f80a 	bl	80123b4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80083a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083a2:	015a      	lsls	r2, r3, #5
 80083a4:	69fb      	ldr	r3, [r7, #28]
 80083a6:	4413      	add	r3, r2
 80083a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80083ac:	461a      	mov	r2, r3
 80083ae:	2302      	movs	r3, #2
 80083b0:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80083b2:	693b      	ldr	r3, [r7, #16]
 80083b4:	f003 0320 	and.w	r3, r3, #32
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d008      	beq.n	80083ce <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80083bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083be:	015a      	lsls	r2, r3, #5
 80083c0:	69fb      	ldr	r3, [r7, #28]
 80083c2:	4413      	add	r3, r2
 80083c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80083c8:	461a      	mov	r2, r3
 80083ca:	2320      	movs	r3, #32
 80083cc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80083ce:	693b      	ldr	r3, [r7, #16]
 80083d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d009      	beq.n	80083ec <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80083d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083da:	015a      	lsls	r2, r3, #5
 80083dc:	69fb      	ldr	r3, [r7, #28]
 80083de:	4413      	add	r3, r2
 80083e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80083e4:	461a      	mov	r2, r3
 80083e6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80083ea:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80083ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083ee:	3301      	adds	r3, #1
 80083f0:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80083f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083f4:	085b      	lsrs	r3, r3, #1
 80083f6:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80083f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	f47f af62 	bne.w	80082c4 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	4618      	mov	r0, r3
 8008406:	f007 fb4f 	bl	800faa8 <USB_ReadInterrupts>
 800840a:	4603      	mov	r3, r0
 800840c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008410:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008414:	f040 80db 	bne.w	80085ce <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	4618      	mov	r0, r3
 800841e:	f007 fb70 	bl	800fb02 <USB_ReadDevAllInEpInterrupt>
 8008422:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8008424:	2300      	movs	r3, #0
 8008426:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8008428:	e0cd      	b.n	80085c6 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800842a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800842c:	f003 0301 	and.w	r3, r3, #1
 8008430:	2b00      	cmp	r3, #0
 8008432:	f000 80c2 	beq.w	80085ba <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800843c:	b2d2      	uxtb	r2, r2
 800843e:	4611      	mov	r1, r2
 8008440:	4618      	mov	r0, r3
 8008442:	f007 fb96 	bl	800fb72 <USB_ReadDevInEPInterrupt>
 8008446:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8008448:	693b      	ldr	r3, [r7, #16]
 800844a:	f003 0301 	and.w	r3, r3, #1
 800844e:	2b00      	cmp	r3, #0
 8008450:	d057      	beq.n	8008502 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008454:	f003 030f 	and.w	r3, r3, #15
 8008458:	2201      	movs	r2, #1
 800845a:	fa02 f303 	lsl.w	r3, r2, r3
 800845e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008460:	69fb      	ldr	r3, [r7, #28]
 8008462:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008466:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	43db      	mvns	r3, r3
 800846c:	69f9      	ldr	r1, [r7, #28]
 800846e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008472:	4013      	ands	r3, r2
 8008474:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8008476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008478:	015a      	lsls	r2, r3, #5
 800847a:	69fb      	ldr	r3, [r7, #28]
 800847c:	4413      	add	r3, r2
 800847e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008482:	461a      	mov	r2, r3
 8008484:	2301      	movs	r3, #1
 8008486:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	799b      	ldrb	r3, [r3, #6]
 800848c:	2b01      	cmp	r3, #1
 800848e:	d132      	bne.n	80084f6 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8008490:	6879      	ldr	r1, [r7, #4]
 8008492:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008494:	4613      	mov	r3, r2
 8008496:	00db      	lsls	r3, r3, #3
 8008498:	4413      	add	r3, r2
 800849a:	009b      	lsls	r3, r3, #2
 800849c:	440b      	add	r3, r1
 800849e:	3320      	adds	r3, #32
 80084a0:	6819      	ldr	r1, [r3, #0]
 80084a2:	6878      	ldr	r0, [r7, #4]
 80084a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80084a6:	4613      	mov	r3, r2
 80084a8:	00db      	lsls	r3, r3, #3
 80084aa:	4413      	add	r3, r2
 80084ac:	009b      	lsls	r3, r3, #2
 80084ae:	4403      	add	r3, r0
 80084b0:	331c      	adds	r3, #28
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	4419      	add	r1, r3
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80084ba:	4613      	mov	r3, r2
 80084bc:	00db      	lsls	r3, r3, #3
 80084be:	4413      	add	r3, r2
 80084c0:	009b      	lsls	r3, r3, #2
 80084c2:	4403      	add	r3, r0
 80084c4:	3320      	adds	r3, #32
 80084c6:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80084c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d113      	bne.n	80084f6 <HAL_PCD_IRQHandler+0x3a2>
 80084ce:	6879      	ldr	r1, [r7, #4]
 80084d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80084d2:	4613      	mov	r3, r2
 80084d4:	00db      	lsls	r3, r3, #3
 80084d6:	4413      	add	r3, r2
 80084d8:	009b      	lsls	r3, r3, #2
 80084da:	440b      	add	r3, r1
 80084dc:	3324      	adds	r3, #36	@ 0x24
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d108      	bne.n	80084f6 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	6818      	ldr	r0, [r3, #0]
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80084ee:	461a      	mov	r2, r3
 80084f0:	2101      	movs	r1, #1
 80084f2:	f007 fb9f 	bl	800fc34 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80084f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084f8:	b2db      	uxtb	r3, r3
 80084fa:	4619      	mov	r1, r3
 80084fc:	6878      	ldr	r0, [r7, #4]
 80084fe:	f009 fed4 	bl	80122aa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8008502:	693b      	ldr	r3, [r7, #16]
 8008504:	f003 0308 	and.w	r3, r3, #8
 8008508:	2b00      	cmp	r3, #0
 800850a:	d008      	beq.n	800851e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800850c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800850e:	015a      	lsls	r2, r3, #5
 8008510:	69fb      	ldr	r3, [r7, #28]
 8008512:	4413      	add	r3, r2
 8008514:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008518:	461a      	mov	r2, r3
 800851a:	2308      	movs	r3, #8
 800851c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800851e:	693b      	ldr	r3, [r7, #16]
 8008520:	f003 0310 	and.w	r3, r3, #16
 8008524:	2b00      	cmp	r3, #0
 8008526:	d008      	beq.n	800853a <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8008528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800852a:	015a      	lsls	r2, r3, #5
 800852c:	69fb      	ldr	r3, [r7, #28]
 800852e:	4413      	add	r3, r2
 8008530:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008534:	461a      	mov	r2, r3
 8008536:	2310      	movs	r3, #16
 8008538:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800853a:	693b      	ldr	r3, [r7, #16]
 800853c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008540:	2b00      	cmp	r3, #0
 8008542:	d008      	beq.n	8008556 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8008544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008546:	015a      	lsls	r2, r3, #5
 8008548:	69fb      	ldr	r3, [r7, #28]
 800854a:	4413      	add	r3, r2
 800854c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008550:	461a      	mov	r2, r3
 8008552:	2340      	movs	r3, #64	@ 0x40
 8008554:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8008556:	693b      	ldr	r3, [r7, #16]
 8008558:	f003 0302 	and.w	r3, r3, #2
 800855c:	2b00      	cmp	r3, #0
 800855e:	d023      	beq.n	80085a8 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8008560:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008562:	6a38      	ldr	r0, [r7, #32]
 8008564:	f006 fb7e 	bl	800ec64 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8008568:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800856a:	4613      	mov	r3, r2
 800856c:	00db      	lsls	r3, r3, #3
 800856e:	4413      	add	r3, r2
 8008570:	009b      	lsls	r3, r3, #2
 8008572:	3310      	adds	r3, #16
 8008574:	687a      	ldr	r2, [r7, #4]
 8008576:	4413      	add	r3, r2
 8008578:	3304      	adds	r3, #4
 800857a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800857c:	697b      	ldr	r3, [r7, #20]
 800857e:	78db      	ldrb	r3, [r3, #3]
 8008580:	2b01      	cmp	r3, #1
 8008582:	d108      	bne.n	8008596 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8008584:	697b      	ldr	r3, [r7, #20]
 8008586:	2200      	movs	r2, #0
 8008588:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800858a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800858c:	b2db      	uxtb	r3, r3
 800858e:	4619      	mov	r1, r3
 8008590:	6878      	ldr	r0, [r7, #4]
 8008592:	f009 ff21 	bl	80123d8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8008596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008598:	015a      	lsls	r2, r3, #5
 800859a:	69fb      	ldr	r3, [r7, #28]
 800859c:	4413      	add	r3, r2
 800859e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80085a2:	461a      	mov	r2, r3
 80085a4:	2302      	movs	r3, #2
 80085a6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80085a8:	693b      	ldr	r3, [r7, #16]
 80085aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d003      	beq.n	80085ba <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80085b2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80085b4:	6878      	ldr	r0, [r7, #4]
 80085b6:	f000 fcea 	bl	8008f8e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80085ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085bc:	3301      	adds	r3, #1
 80085be:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80085c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085c2:	085b      	lsrs	r3, r3, #1
 80085c4:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80085c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	f47f af2e 	bne.w	800842a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	4618      	mov	r0, r3
 80085d4:	f007 fa68 	bl	800faa8 <USB_ReadInterrupts>
 80085d8:	4603      	mov	r3, r0
 80085da:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80085de:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80085e2:	d122      	bne.n	800862a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80085e4:	69fb      	ldr	r3, [r7, #28]
 80085e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80085ea:	685b      	ldr	r3, [r3, #4]
 80085ec:	69fa      	ldr	r2, [r7, #28]
 80085ee:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80085f2:	f023 0301 	bic.w	r3, r3, #1
 80085f6:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80085fe:	2b01      	cmp	r3, #1
 8008600:	d108      	bne.n	8008614 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2200      	movs	r2, #0
 8008606:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800860a:	2100      	movs	r1, #0
 800860c:	6878      	ldr	r0, [r7, #4]
 800860e:	f000 fef5 	bl	80093fc <HAL_PCDEx_LPM_Callback>
 8008612:	e002      	b.n	800861a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8008614:	6878      	ldr	r0, [r7, #4]
 8008616:	f009 febf 	bl	8012398 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	695a      	ldr	r2, [r3, #20]
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8008628:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	4618      	mov	r0, r3
 8008630:	f007 fa3a 	bl	800faa8 <USB_ReadInterrupts>
 8008634:	4603      	mov	r3, r0
 8008636:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800863a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800863e:	d112      	bne.n	8008666 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8008640:	69fb      	ldr	r3, [r7, #28]
 8008642:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008646:	689b      	ldr	r3, [r3, #8]
 8008648:	f003 0301 	and.w	r3, r3, #1
 800864c:	2b01      	cmp	r3, #1
 800864e:	d102      	bne.n	8008656 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8008650:	6878      	ldr	r0, [r7, #4]
 8008652:	f009 fe7b 	bl	801234c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	695a      	ldr	r2, [r3, #20]
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8008664:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	4618      	mov	r0, r3
 800866c:	f007 fa1c 	bl	800faa8 <USB_ReadInterrupts>
 8008670:	4603      	mov	r3, r0
 8008672:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008676:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800867a:	d121      	bne.n	80086c0 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	695a      	ldr	r2, [r3, #20]
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 800868a:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8008692:	2b00      	cmp	r3, #0
 8008694:	d111      	bne.n	80086ba <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	2201      	movs	r2, #1
 800869a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80086a4:	089b      	lsrs	r3, r3, #2
 80086a6:	f003 020f 	and.w	r2, r3, #15
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80086b0:	2101      	movs	r1, #1
 80086b2:	6878      	ldr	r0, [r7, #4]
 80086b4:	f000 fea2 	bl	80093fc <HAL_PCDEx_LPM_Callback>
 80086b8:	e002      	b.n	80086c0 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80086ba:	6878      	ldr	r0, [r7, #4]
 80086bc:	f009 fe46 	bl	801234c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	4618      	mov	r0, r3
 80086c6:	f007 f9ef 	bl	800faa8 <USB_ReadInterrupts>
 80086ca:	4603      	mov	r3, r0
 80086cc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80086d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80086d4:	f040 80b7 	bne.w	8008846 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80086d8:	69fb      	ldr	r3, [r7, #28]
 80086da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80086de:	685b      	ldr	r3, [r3, #4]
 80086e0:	69fa      	ldr	r2, [r7, #28]
 80086e2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80086e6:	f023 0301 	bic.w	r3, r3, #1
 80086ea:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	2110      	movs	r1, #16
 80086f2:	4618      	mov	r0, r3
 80086f4:	f006 fab6 	bl	800ec64 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80086f8:	2300      	movs	r3, #0
 80086fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80086fc:	e046      	b.n	800878c <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80086fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008700:	015a      	lsls	r2, r3, #5
 8008702:	69fb      	ldr	r3, [r7, #28]
 8008704:	4413      	add	r3, r2
 8008706:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800870a:	461a      	mov	r2, r3
 800870c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008710:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008712:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008714:	015a      	lsls	r2, r3, #5
 8008716:	69fb      	ldr	r3, [r7, #28]
 8008718:	4413      	add	r3, r2
 800871a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008722:	0151      	lsls	r1, r2, #5
 8008724:	69fa      	ldr	r2, [r7, #28]
 8008726:	440a      	add	r2, r1
 8008728:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800872c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008730:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8008732:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008734:	015a      	lsls	r2, r3, #5
 8008736:	69fb      	ldr	r3, [r7, #28]
 8008738:	4413      	add	r3, r2
 800873a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800873e:	461a      	mov	r2, r3
 8008740:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008744:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008746:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008748:	015a      	lsls	r2, r3, #5
 800874a:	69fb      	ldr	r3, [r7, #28]
 800874c:	4413      	add	r3, r2
 800874e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008756:	0151      	lsls	r1, r2, #5
 8008758:	69fa      	ldr	r2, [r7, #28]
 800875a:	440a      	add	r2, r1
 800875c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008760:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008764:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008766:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008768:	015a      	lsls	r2, r3, #5
 800876a:	69fb      	ldr	r3, [r7, #28]
 800876c:	4413      	add	r3, r2
 800876e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008776:	0151      	lsls	r1, r2, #5
 8008778:	69fa      	ldr	r2, [r7, #28]
 800877a:	440a      	add	r2, r1
 800877c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008780:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008784:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008786:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008788:	3301      	adds	r3, #1
 800878a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	791b      	ldrb	r3, [r3, #4]
 8008790:	461a      	mov	r2, r3
 8008792:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008794:	4293      	cmp	r3, r2
 8008796:	d3b2      	bcc.n	80086fe <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8008798:	69fb      	ldr	r3, [r7, #28]
 800879a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800879e:	69db      	ldr	r3, [r3, #28]
 80087a0:	69fa      	ldr	r2, [r7, #28]
 80087a2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80087a6:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80087aa:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	7bdb      	ldrb	r3, [r3, #15]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d016      	beq.n	80087e2 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80087b4:	69fb      	ldr	r3, [r7, #28]
 80087b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80087ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80087be:	69fa      	ldr	r2, [r7, #28]
 80087c0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80087c4:	f043 030b 	orr.w	r3, r3, #11
 80087c8:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80087cc:	69fb      	ldr	r3, [r7, #28]
 80087ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80087d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80087d4:	69fa      	ldr	r2, [r7, #28]
 80087d6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80087da:	f043 030b 	orr.w	r3, r3, #11
 80087de:	6453      	str	r3, [r2, #68]	@ 0x44
 80087e0:	e015      	b.n	800880e <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80087e2:	69fb      	ldr	r3, [r7, #28]
 80087e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80087e8:	695a      	ldr	r2, [r3, #20]
 80087ea:	69fb      	ldr	r3, [r7, #28]
 80087ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80087f0:	4619      	mov	r1, r3
 80087f2:	f242 032b 	movw	r3, #8235	@ 0x202b
 80087f6:	4313      	orrs	r3, r2
 80087f8:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80087fa:	69fb      	ldr	r3, [r7, #28]
 80087fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008800:	691b      	ldr	r3, [r3, #16]
 8008802:	69fa      	ldr	r2, [r7, #28]
 8008804:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008808:	f043 030b 	orr.w	r3, r3, #11
 800880c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800880e:	69fb      	ldr	r3, [r7, #28]
 8008810:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	69fa      	ldr	r2, [r7, #28]
 8008818:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800881c:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8008820:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	6818      	ldr	r0, [r3, #0]
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008830:	461a      	mov	r2, r3
 8008832:	f007 f9ff 	bl	800fc34 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	695a      	ldr	r2, [r3, #20]
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8008844:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	4618      	mov	r0, r3
 800884c:	f007 f92c 	bl	800faa8 <USB_ReadInterrupts>
 8008850:	4603      	mov	r3, r0
 8008852:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008856:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800885a:	d123      	bne.n	80088a4 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	4618      	mov	r0, r3
 8008862:	f007 f9c3 	bl	800fbec <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	4618      	mov	r0, r3
 800886c:	f006 fa73 	bl	800ed56 <USB_GetDevSpeed>
 8008870:	4603      	mov	r3, r0
 8008872:	461a      	mov	r2, r3
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681c      	ldr	r4, [r3, #0]
 800887c:	f001 fd9e 	bl	800a3bc <HAL_RCC_GetHCLKFreq>
 8008880:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008886:	461a      	mov	r2, r3
 8008888:	4620      	mov	r0, r4
 800888a:	f005 ff7d 	bl	800e788 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800888e:	6878      	ldr	r0, [r7, #4]
 8008890:	f009 fd33 	bl	80122fa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	695a      	ldr	r2, [r3, #20]
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80088a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	4618      	mov	r0, r3
 80088aa:	f007 f8fd 	bl	800faa8 <USB_ReadInterrupts>
 80088ae:	4603      	mov	r3, r0
 80088b0:	f003 0308 	and.w	r3, r3, #8
 80088b4:	2b08      	cmp	r3, #8
 80088b6:	d10a      	bne.n	80088ce <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80088b8:	6878      	ldr	r0, [r7, #4]
 80088ba:	f009 fd10 	bl	80122de <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	695a      	ldr	r2, [r3, #20]
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	f002 0208 	and.w	r2, r2, #8
 80088cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	4618      	mov	r0, r3
 80088d4:	f007 f8e8 	bl	800faa8 <USB_ReadInterrupts>
 80088d8:	4603      	mov	r3, r0
 80088da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80088de:	2b80      	cmp	r3, #128	@ 0x80
 80088e0:	d123      	bne.n	800892a <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80088e2:	6a3b      	ldr	r3, [r7, #32]
 80088e4:	699b      	ldr	r3, [r3, #24]
 80088e6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80088ea:	6a3b      	ldr	r3, [r7, #32]
 80088ec:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80088ee:	2301      	movs	r3, #1
 80088f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80088f2:	e014      	b.n	800891e <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80088f4:	6879      	ldr	r1, [r7, #4]
 80088f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80088f8:	4613      	mov	r3, r2
 80088fa:	00db      	lsls	r3, r3, #3
 80088fc:	4413      	add	r3, r2
 80088fe:	009b      	lsls	r3, r3, #2
 8008900:	440b      	add	r3, r1
 8008902:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8008906:	781b      	ldrb	r3, [r3, #0]
 8008908:	2b01      	cmp	r3, #1
 800890a:	d105      	bne.n	8008918 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800890c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800890e:	b2db      	uxtb	r3, r3
 8008910:	4619      	mov	r1, r3
 8008912:	6878      	ldr	r0, [r7, #4]
 8008914:	f000 fb0a 	bl	8008f2c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800891a:	3301      	adds	r3, #1
 800891c:	627b      	str	r3, [r7, #36]	@ 0x24
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	791b      	ldrb	r3, [r3, #4]
 8008922:	461a      	mov	r2, r3
 8008924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008926:	4293      	cmp	r3, r2
 8008928:	d3e4      	bcc.n	80088f4 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	4618      	mov	r0, r3
 8008930:	f007 f8ba 	bl	800faa8 <USB_ReadInterrupts>
 8008934:	4603      	mov	r3, r0
 8008936:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800893a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800893e:	d13c      	bne.n	80089ba <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008940:	2301      	movs	r3, #1
 8008942:	627b      	str	r3, [r7, #36]	@ 0x24
 8008944:	e02b      	b.n	800899e <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8008946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008948:	015a      	lsls	r2, r3, #5
 800894a:	69fb      	ldr	r3, [r7, #28]
 800894c:	4413      	add	r3, r2
 800894e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8008956:	6879      	ldr	r1, [r7, #4]
 8008958:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800895a:	4613      	mov	r3, r2
 800895c:	00db      	lsls	r3, r3, #3
 800895e:	4413      	add	r3, r2
 8008960:	009b      	lsls	r3, r3, #2
 8008962:	440b      	add	r3, r1
 8008964:	3318      	adds	r3, #24
 8008966:	781b      	ldrb	r3, [r3, #0]
 8008968:	2b01      	cmp	r3, #1
 800896a:	d115      	bne.n	8008998 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800896c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800896e:	2b00      	cmp	r3, #0
 8008970:	da12      	bge.n	8008998 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8008972:	6879      	ldr	r1, [r7, #4]
 8008974:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008976:	4613      	mov	r3, r2
 8008978:	00db      	lsls	r3, r3, #3
 800897a:	4413      	add	r3, r2
 800897c:	009b      	lsls	r3, r3, #2
 800897e:	440b      	add	r3, r1
 8008980:	3317      	adds	r3, #23
 8008982:	2201      	movs	r2, #1
 8008984:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8008986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008988:	b2db      	uxtb	r3, r3
 800898a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800898e:	b2db      	uxtb	r3, r3
 8008990:	4619      	mov	r1, r3
 8008992:	6878      	ldr	r0, [r7, #4]
 8008994:	f000 faca 	bl	8008f2c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800899a:	3301      	adds	r3, #1
 800899c:	627b      	str	r3, [r7, #36]	@ 0x24
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	791b      	ldrb	r3, [r3, #4]
 80089a2:	461a      	mov	r2, r3
 80089a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089a6:	4293      	cmp	r3, r2
 80089a8:	d3cd      	bcc.n	8008946 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	695a      	ldr	r2, [r3, #20]
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80089b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	4618      	mov	r0, r3
 80089c0:	f007 f872 	bl	800faa8 <USB_ReadInterrupts>
 80089c4:	4603      	mov	r3, r0
 80089c6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80089ca:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80089ce:	d156      	bne.n	8008a7e <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80089d0:	2301      	movs	r3, #1
 80089d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80089d4:	e045      	b.n	8008a62 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80089d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089d8:	015a      	lsls	r2, r3, #5
 80089da:	69fb      	ldr	r3, [r7, #28]
 80089dc:	4413      	add	r3, r2
 80089de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80089e6:	6879      	ldr	r1, [r7, #4]
 80089e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80089ea:	4613      	mov	r3, r2
 80089ec:	00db      	lsls	r3, r3, #3
 80089ee:	4413      	add	r3, r2
 80089f0:	009b      	lsls	r3, r3, #2
 80089f2:	440b      	add	r3, r1
 80089f4:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80089f8:	781b      	ldrb	r3, [r3, #0]
 80089fa:	2b01      	cmp	r3, #1
 80089fc:	d12e      	bne.n	8008a5c <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80089fe:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	da2b      	bge.n	8008a5c <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8008a04:	69bb      	ldr	r3, [r7, #24]
 8008a06:	0c1a      	lsrs	r2, r3, #16
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8008a0e:	4053      	eors	r3, r2
 8008a10:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d121      	bne.n	8008a5c <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8008a18:	6879      	ldr	r1, [r7, #4]
 8008a1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008a1c:	4613      	mov	r3, r2
 8008a1e:	00db      	lsls	r3, r3, #3
 8008a20:	4413      	add	r3, r2
 8008a22:	009b      	lsls	r3, r3, #2
 8008a24:	440b      	add	r3, r1
 8008a26:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8008a2a:	2201      	movs	r2, #1
 8008a2c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8008a2e:	6a3b      	ldr	r3, [r7, #32]
 8008a30:	699b      	ldr	r3, [r3, #24]
 8008a32:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008a36:	6a3b      	ldr	r3, [r7, #32]
 8008a38:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8008a3a:	6a3b      	ldr	r3, [r7, #32]
 8008a3c:	695b      	ldr	r3, [r3, #20]
 8008a3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d10a      	bne.n	8008a5c <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8008a46:	69fb      	ldr	r3, [r7, #28]
 8008a48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008a4c:	685b      	ldr	r3, [r3, #4]
 8008a4e:	69fa      	ldr	r2, [r7, #28]
 8008a50:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008a54:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008a58:	6053      	str	r3, [r2, #4]
            break;
 8008a5a:	e008      	b.n	8008a6e <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008a5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a5e:	3301      	adds	r3, #1
 8008a60:	627b      	str	r3, [r7, #36]	@ 0x24
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	791b      	ldrb	r3, [r3, #4]
 8008a66:	461a      	mov	r2, r3
 8008a68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a6a:	4293      	cmp	r3, r2
 8008a6c:	d3b3      	bcc.n	80089d6 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	695a      	ldr	r2, [r3, #20]
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8008a7c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	4618      	mov	r0, r3
 8008a84:	f007 f810 	bl	800faa8 <USB_ReadInterrupts>
 8008a88:	4603      	mov	r3, r0
 8008a8a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008a8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a92:	d10a      	bne.n	8008aaa <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8008a94:	6878      	ldr	r0, [r7, #4]
 8008a96:	f009 fcb1 	bl	80123fc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	695a      	ldr	r2, [r3, #20]
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8008aa8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	4618      	mov	r0, r3
 8008ab0:	f006 fffa 	bl	800faa8 <USB_ReadInterrupts>
 8008ab4:	4603      	mov	r3, r0
 8008ab6:	f003 0304 	and.w	r3, r3, #4
 8008aba:	2b04      	cmp	r3, #4
 8008abc:	d115      	bne.n	8008aea <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	685b      	ldr	r3, [r3, #4]
 8008ac4:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8008ac6:	69bb      	ldr	r3, [r7, #24]
 8008ac8:	f003 0304 	and.w	r3, r3, #4
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d002      	beq.n	8008ad6 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8008ad0:	6878      	ldr	r0, [r7, #4]
 8008ad2:	f009 fca1 	bl	8012418 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	6859      	ldr	r1, [r3, #4]
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	69ba      	ldr	r2, [r7, #24]
 8008ae2:	430a      	orrs	r2, r1
 8008ae4:	605a      	str	r2, [r3, #4]
 8008ae6:	e000      	b.n	8008aea <HAL_PCD_IRQHandler+0x996>
      return;
 8008ae8:	bf00      	nop
    }
  }
}
 8008aea:	3734      	adds	r7, #52	@ 0x34
 8008aec:	46bd      	mov	sp, r7
 8008aee:	bd90      	pop	{r4, r7, pc}

08008af0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8008af0:	b580      	push	{r7, lr}
 8008af2:	b082      	sub	sp, #8
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
 8008af8:	460b      	mov	r3, r1
 8008afa:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8008b02:	2b01      	cmp	r3, #1
 8008b04:	d101      	bne.n	8008b0a <HAL_PCD_SetAddress+0x1a>
 8008b06:	2302      	movs	r3, #2
 8008b08:	e012      	b.n	8008b30 <HAL_PCD_SetAddress+0x40>
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	2201      	movs	r2, #1
 8008b0e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	78fa      	ldrb	r2, [r7, #3]
 8008b16:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	78fa      	ldrb	r2, [r7, #3]
 8008b1e:	4611      	mov	r1, r2
 8008b20:	4618      	mov	r0, r3
 8008b22:	f006 ff59 	bl	800f9d8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	2200      	movs	r2, #0
 8008b2a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8008b2e:	2300      	movs	r3, #0
}
 8008b30:	4618      	mov	r0, r3
 8008b32:	3708      	adds	r7, #8
 8008b34:	46bd      	mov	sp, r7
 8008b36:	bd80      	pop	{r7, pc}

08008b38 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b084      	sub	sp, #16
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
 8008b40:	4608      	mov	r0, r1
 8008b42:	4611      	mov	r1, r2
 8008b44:	461a      	mov	r2, r3
 8008b46:	4603      	mov	r3, r0
 8008b48:	70fb      	strb	r3, [r7, #3]
 8008b4a:	460b      	mov	r3, r1
 8008b4c:	803b      	strh	r3, [r7, #0]
 8008b4e:	4613      	mov	r3, r2
 8008b50:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8008b52:	2300      	movs	r3, #0
 8008b54:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008b56:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	da0f      	bge.n	8008b7e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008b5e:	78fb      	ldrb	r3, [r7, #3]
 8008b60:	f003 020f 	and.w	r2, r3, #15
 8008b64:	4613      	mov	r3, r2
 8008b66:	00db      	lsls	r3, r3, #3
 8008b68:	4413      	add	r3, r2
 8008b6a:	009b      	lsls	r3, r3, #2
 8008b6c:	3310      	adds	r3, #16
 8008b6e:	687a      	ldr	r2, [r7, #4]
 8008b70:	4413      	add	r3, r2
 8008b72:	3304      	adds	r3, #4
 8008b74:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	2201      	movs	r2, #1
 8008b7a:	705a      	strb	r2, [r3, #1]
 8008b7c:	e00f      	b.n	8008b9e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008b7e:	78fb      	ldrb	r3, [r7, #3]
 8008b80:	f003 020f 	and.w	r2, r3, #15
 8008b84:	4613      	mov	r3, r2
 8008b86:	00db      	lsls	r3, r3, #3
 8008b88:	4413      	add	r3, r2
 8008b8a:	009b      	lsls	r3, r3, #2
 8008b8c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008b90:	687a      	ldr	r2, [r7, #4]
 8008b92:	4413      	add	r3, r2
 8008b94:	3304      	adds	r3, #4
 8008b96:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8008b9e:	78fb      	ldrb	r3, [r7, #3]
 8008ba0:	f003 030f 	and.w	r3, r3, #15
 8008ba4:	b2da      	uxtb	r2, r3
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8008baa:	883b      	ldrh	r3, [r7, #0]
 8008bac:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	78ba      	ldrb	r2, [r7, #2]
 8008bb8:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	785b      	ldrb	r3, [r3, #1]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d004      	beq.n	8008bcc <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	781b      	ldrb	r3, [r3, #0]
 8008bc6:	461a      	mov	r2, r3
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8008bcc:	78bb      	ldrb	r3, [r7, #2]
 8008bce:	2b02      	cmp	r3, #2
 8008bd0:	d102      	bne.n	8008bd8 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8008bde:	2b01      	cmp	r3, #1
 8008be0:	d101      	bne.n	8008be6 <HAL_PCD_EP_Open+0xae>
 8008be2:	2302      	movs	r3, #2
 8008be4:	e00e      	b.n	8008c04 <HAL_PCD_EP_Open+0xcc>
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	2201      	movs	r2, #1
 8008bea:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	68f9      	ldr	r1, [r7, #12]
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	f006 f8d3 	bl	800eda0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8008c02:	7afb      	ldrb	r3, [r7, #11]
}
 8008c04:	4618      	mov	r0, r3
 8008c06:	3710      	adds	r7, #16
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	bd80      	pop	{r7, pc}

08008c0c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b084      	sub	sp, #16
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
 8008c14:	460b      	mov	r3, r1
 8008c16:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008c18:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	da0f      	bge.n	8008c40 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008c20:	78fb      	ldrb	r3, [r7, #3]
 8008c22:	f003 020f 	and.w	r2, r3, #15
 8008c26:	4613      	mov	r3, r2
 8008c28:	00db      	lsls	r3, r3, #3
 8008c2a:	4413      	add	r3, r2
 8008c2c:	009b      	lsls	r3, r3, #2
 8008c2e:	3310      	adds	r3, #16
 8008c30:	687a      	ldr	r2, [r7, #4]
 8008c32:	4413      	add	r3, r2
 8008c34:	3304      	adds	r3, #4
 8008c36:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	2201      	movs	r2, #1
 8008c3c:	705a      	strb	r2, [r3, #1]
 8008c3e:	e00f      	b.n	8008c60 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008c40:	78fb      	ldrb	r3, [r7, #3]
 8008c42:	f003 020f 	and.w	r2, r3, #15
 8008c46:	4613      	mov	r3, r2
 8008c48:	00db      	lsls	r3, r3, #3
 8008c4a:	4413      	add	r3, r2
 8008c4c:	009b      	lsls	r3, r3, #2
 8008c4e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008c52:	687a      	ldr	r2, [r7, #4]
 8008c54:	4413      	add	r3, r2
 8008c56:	3304      	adds	r3, #4
 8008c58:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8008c60:	78fb      	ldrb	r3, [r7, #3]
 8008c62:	f003 030f 	and.w	r3, r3, #15
 8008c66:	b2da      	uxtb	r2, r3
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8008c72:	2b01      	cmp	r3, #1
 8008c74:	d101      	bne.n	8008c7a <HAL_PCD_EP_Close+0x6e>
 8008c76:	2302      	movs	r3, #2
 8008c78:	e00e      	b.n	8008c98 <HAL_PCD_EP_Close+0x8c>
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	2201      	movs	r2, #1
 8008c7e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	68f9      	ldr	r1, [r7, #12]
 8008c88:	4618      	mov	r0, r3
 8008c8a:	f006 f911 	bl	800eeb0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	2200      	movs	r2, #0
 8008c92:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8008c96:	2300      	movs	r3, #0
}
 8008c98:	4618      	mov	r0, r3
 8008c9a:	3710      	adds	r7, #16
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	bd80      	pop	{r7, pc}

08008ca0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b086      	sub	sp, #24
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	60f8      	str	r0, [r7, #12]
 8008ca8:	607a      	str	r2, [r7, #4]
 8008caa:	603b      	str	r3, [r7, #0]
 8008cac:	460b      	mov	r3, r1
 8008cae:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008cb0:	7afb      	ldrb	r3, [r7, #11]
 8008cb2:	f003 020f 	and.w	r2, r3, #15
 8008cb6:	4613      	mov	r3, r2
 8008cb8:	00db      	lsls	r3, r3, #3
 8008cba:	4413      	add	r3, r2
 8008cbc:	009b      	lsls	r3, r3, #2
 8008cbe:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008cc2:	68fa      	ldr	r2, [r7, #12]
 8008cc4:	4413      	add	r3, r2
 8008cc6:	3304      	adds	r3, #4
 8008cc8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008cca:	697b      	ldr	r3, [r7, #20]
 8008ccc:	687a      	ldr	r2, [r7, #4]
 8008cce:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8008cd0:	697b      	ldr	r3, [r7, #20]
 8008cd2:	683a      	ldr	r2, [r7, #0]
 8008cd4:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8008cd6:	697b      	ldr	r3, [r7, #20]
 8008cd8:	2200      	movs	r2, #0
 8008cda:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8008cdc:	697b      	ldr	r3, [r7, #20]
 8008cde:	2200      	movs	r2, #0
 8008ce0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008ce2:	7afb      	ldrb	r3, [r7, #11]
 8008ce4:	f003 030f 	and.w	r3, r3, #15
 8008ce8:	b2da      	uxtb	r2, r3
 8008cea:	697b      	ldr	r3, [r7, #20]
 8008cec:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	799b      	ldrb	r3, [r3, #6]
 8008cf2:	2b01      	cmp	r3, #1
 8008cf4:	d102      	bne.n	8008cfc <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8008cf6:	687a      	ldr	r2, [r7, #4]
 8008cf8:	697b      	ldr	r3, [r7, #20]
 8008cfa:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	6818      	ldr	r0, [r3, #0]
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	799b      	ldrb	r3, [r3, #6]
 8008d04:	461a      	mov	r2, r3
 8008d06:	6979      	ldr	r1, [r7, #20]
 8008d08:	f006 f9ae 	bl	800f068 <USB_EPStartXfer>

  return HAL_OK;
 8008d0c:	2300      	movs	r3, #0
}
 8008d0e:	4618      	mov	r0, r3
 8008d10:	3718      	adds	r7, #24
 8008d12:	46bd      	mov	sp, r7
 8008d14:	bd80      	pop	{r7, pc}

08008d16 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8008d16:	b480      	push	{r7}
 8008d18:	b083      	sub	sp, #12
 8008d1a:	af00      	add	r7, sp, #0
 8008d1c:	6078      	str	r0, [r7, #4]
 8008d1e:	460b      	mov	r3, r1
 8008d20:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8008d22:	78fb      	ldrb	r3, [r7, #3]
 8008d24:	f003 020f 	and.w	r2, r3, #15
 8008d28:	6879      	ldr	r1, [r7, #4]
 8008d2a:	4613      	mov	r3, r2
 8008d2c:	00db      	lsls	r3, r3, #3
 8008d2e:	4413      	add	r3, r2
 8008d30:	009b      	lsls	r3, r3, #2
 8008d32:	440b      	add	r3, r1
 8008d34:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8008d38:	681b      	ldr	r3, [r3, #0]
}
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	370c      	adds	r7, #12
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d44:	4770      	bx	lr

08008d46 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008d46:	b580      	push	{r7, lr}
 8008d48:	b086      	sub	sp, #24
 8008d4a:	af00      	add	r7, sp, #0
 8008d4c:	60f8      	str	r0, [r7, #12]
 8008d4e:	607a      	str	r2, [r7, #4]
 8008d50:	603b      	str	r3, [r7, #0]
 8008d52:	460b      	mov	r3, r1
 8008d54:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008d56:	7afb      	ldrb	r3, [r7, #11]
 8008d58:	f003 020f 	and.w	r2, r3, #15
 8008d5c:	4613      	mov	r3, r2
 8008d5e:	00db      	lsls	r3, r3, #3
 8008d60:	4413      	add	r3, r2
 8008d62:	009b      	lsls	r3, r3, #2
 8008d64:	3310      	adds	r3, #16
 8008d66:	68fa      	ldr	r2, [r7, #12]
 8008d68:	4413      	add	r3, r2
 8008d6a:	3304      	adds	r3, #4
 8008d6c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008d6e:	697b      	ldr	r3, [r7, #20]
 8008d70:	687a      	ldr	r2, [r7, #4]
 8008d72:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8008d74:	697b      	ldr	r3, [r7, #20]
 8008d76:	683a      	ldr	r2, [r7, #0]
 8008d78:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8008d7a:	697b      	ldr	r3, [r7, #20]
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8008d80:	697b      	ldr	r3, [r7, #20]
 8008d82:	2201      	movs	r2, #1
 8008d84:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008d86:	7afb      	ldrb	r3, [r7, #11]
 8008d88:	f003 030f 	and.w	r3, r3, #15
 8008d8c:	b2da      	uxtb	r2, r3
 8008d8e:	697b      	ldr	r3, [r7, #20]
 8008d90:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	799b      	ldrb	r3, [r3, #6]
 8008d96:	2b01      	cmp	r3, #1
 8008d98:	d102      	bne.n	8008da0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8008d9a:	687a      	ldr	r2, [r7, #4]
 8008d9c:	697b      	ldr	r3, [r7, #20]
 8008d9e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	6818      	ldr	r0, [r3, #0]
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	799b      	ldrb	r3, [r3, #6]
 8008da8:	461a      	mov	r2, r3
 8008daa:	6979      	ldr	r1, [r7, #20]
 8008dac:	f006 f95c 	bl	800f068 <USB_EPStartXfer>

  return HAL_OK;
 8008db0:	2300      	movs	r3, #0
}
 8008db2:	4618      	mov	r0, r3
 8008db4:	3718      	adds	r7, #24
 8008db6:	46bd      	mov	sp, r7
 8008db8:	bd80      	pop	{r7, pc}

08008dba <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008dba:	b580      	push	{r7, lr}
 8008dbc:	b084      	sub	sp, #16
 8008dbe:	af00      	add	r7, sp, #0
 8008dc0:	6078      	str	r0, [r7, #4]
 8008dc2:	460b      	mov	r3, r1
 8008dc4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8008dc6:	78fb      	ldrb	r3, [r7, #3]
 8008dc8:	f003 030f 	and.w	r3, r3, #15
 8008dcc:	687a      	ldr	r2, [r7, #4]
 8008dce:	7912      	ldrb	r2, [r2, #4]
 8008dd0:	4293      	cmp	r3, r2
 8008dd2:	d901      	bls.n	8008dd8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8008dd4:	2301      	movs	r3, #1
 8008dd6:	e04f      	b.n	8008e78 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008dd8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	da0f      	bge.n	8008e00 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008de0:	78fb      	ldrb	r3, [r7, #3]
 8008de2:	f003 020f 	and.w	r2, r3, #15
 8008de6:	4613      	mov	r3, r2
 8008de8:	00db      	lsls	r3, r3, #3
 8008dea:	4413      	add	r3, r2
 8008dec:	009b      	lsls	r3, r3, #2
 8008dee:	3310      	adds	r3, #16
 8008df0:	687a      	ldr	r2, [r7, #4]
 8008df2:	4413      	add	r3, r2
 8008df4:	3304      	adds	r3, #4
 8008df6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	2201      	movs	r2, #1
 8008dfc:	705a      	strb	r2, [r3, #1]
 8008dfe:	e00d      	b.n	8008e1c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8008e00:	78fa      	ldrb	r2, [r7, #3]
 8008e02:	4613      	mov	r3, r2
 8008e04:	00db      	lsls	r3, r3, #3
 8008e06:	4413      	add	r3, r2
 8008e08:	009b      	lsls	r3, r3, #2
 8008e0a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008e0e:	687a      	ldr	r2, [r7, #4]
 8008e10:	4413      	add	r3, r2
 8008e12:	3304      	adds	r3, #4
 8008e14:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	2200      	movs	r2, #0
 8008e1a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	2201      	movs	r2, #1
 8008e20:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008e22:	78fb      	ldrb	r3, [r7, #3]
 8008e24:	f003 030f 	and.w	r3, r3, #15
 8008e28:	b2da      	uxtb	r2, r3
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8008e34:	2b01      	cmp	r3, #1
 8008e36:	d101      	bne.n	8008e3c <HAL_PCD_EP_SetStall+0x82>
 8008e38:	2302      	movs	r3, #2
 8008e3a:	e01d      	b.n	8008e78 <HAL_PCD_EP_SetStall+0xbe>
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2201      	movs	r2, #1
 8008e40:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	68f9      	ldr	r1, [r7, #12]
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	f006 fcf0 	bl	800f830 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008e50:	78fb      	ldrb	r3, [r7, #3]
 8008e52:	f003 030f 	and.w	r3, r3, #15
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d109      	bne.n	8008e6e <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	6818      	ldr	r0, [r3, #0]
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	7999      	ldrb	r1, [r3, #6]
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008e68:	461a      	mov	r2, r3
 8008e6a:	f006 fee3 	bl	800fc34 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	2200      	movs	r2, #0
 8008e72:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8008e76:	2300      	movs	r3, #0
}
 8008e78:	4618      	mov	r0, r3
 8008e7a:	3710      	adds	r7, #16
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	bd80      	pop	{r7, pc}

08008e80 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b084      	sub	sp, #16
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
 8008e88:	460b      	mov	r3, r1
 8008e8a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8008e8c:	78fb      	ldrb	r3, [r7, #3]
 8008e8e:	f003 030f 	and.w	r3, r3, #15
 8008e92:	687a      	ldr	r2, [r7, #4]
 8008e94:	7912      	ldrb	r2, [r2, #4]
 8008e96:	4293      	cmp	r3, r2
 8008e98:	d901      	bls.n	8008e9e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8008e9a:	2301      	movs	r3, #1
 8008e9c:	e042      	b.n	8008f24 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008e9e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	da0f      	bge.n	8008ec6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008ea6:	78fb      	ldrb	r3, [r7, #3]
 8008ea8:	f003 020f 	and.w	r2, r3, #15
 8008eac:	4613      	mov	r3, r2
 8008eae:	00db      	lsls	r3, r3, #3
 8008eb0:	4413      	add	r3, r2
 8008eb2:	009b      	lsls	r3, r3, #2
 8008eb4:	3310      	adds	r3, #16
 8008eb6:	687a      	ldr	r2, [r7, #4]
 8008eb8:	4413      	add	r3, r2
 8008eba:	3304      	adds	r3, #4
 8008ebc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	2201      	movs	r2, #1
 8008ec2:	705a      	strb	r2, [r3, #1]
 8008ec4:	e00f      	b.n	8008ee6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008ec6:	78fb      	ldrb	r3, [r7, #3]
 8008ec8:	f003 020f 	and.w	r2, r3, #15
 8008ecc:	4613      	mov	r3, r2
 8008ece:	00db      	lsls	r3, r3, #3
 8008ed0:	4413      	add	r3, r2
 8008ed2:	009b      	lsls	r3, r3, #2
 8008ed4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008ed8:	687a      	ldr	r2, [r7, #4]
 8008eda:	4413      	add	r3, r2
 8008edc:	3304      	adds	r3, #4
 8008ede:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	2200      	movs	r2, #0
 8008eea:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008eec:	78fb      	ldrb	r3, [r7, #3]
 8008eee:	f003 030f 	and.w	r3, r3, #15
 8008ef2:	b2da      	uxtb	r2, r3
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8008efe:	2b01      	cmp	r3, #1
 8008f00:	d101      	bne.n	8008f06 <HAL_PCD_EP_ClrStall+0x86>
 8008f02:	2302      	movs	r3, #2
 8008f04:	e00e      	b.n	8008f24 <HAL_PCD_EP_ClrStall+0xa4>
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	2201      	movs	r2, #1
 8008f0a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	68f9      	ldr	r1, [r7, #12]
 8008f14:	4618      	mov	r0, r3
 8008f16:	f006 fcf9 	bl	800f90c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	2200      	movs	r2, #0
 8008f1e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8008f22:	2300      	movs	r3, #0
}
 8008f24:	4618      	mov	r0, r3
 8008f26:	3710      	adds	r7, #16
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	bd80      	pop	{r7, pc}

08008f2c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b084      	sub	sp, #16
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
 8008f34:	460b      	mov	r3, r1
 8008f36:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8008f38:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	da0c      	bge.n	8008f5a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008f40:	78fb      	ldrb	r3, [r7, #3]
 8008f42:	f003 020f 	and.w	r2, r3, #15
 8008f46:	4613      	mov	r3, r2
 8008f48:	00db      	lsls	r3, r3, #3
 8008f4a:	4413      	add	r3, r2
 8008f4c:	009b      	lsls	r3, r3, #2
 8008f4e:	3310      	adds	r3, #16
 8008f50:	687a      	ldr	r2, [r7, #4]
 8008f52:	4413      	add	r3, r2
 8008f54:	3304      	adds	r3, #4
 8008f56:	60fb      	str	r3, [r7, #12]
 8008f58:	e00c      	b.n	8008f74 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008f5a:	78fb      	ldrb	r3, [r7, #3]
 8008f5c:	f003 020f 	and.w	r2, r3, #15
 8008f60:	4613      	mov	r3, r2
 8008f62:	00db      	lsls	r3, r3, #3
 8008f64:	4413      	add	r3, r2
 8008f66:	009b      	lsls	r3, r3, #2
 8008f68:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008f6c:	687a      	ldr	r2, [r7, #4]
 8008f6e:	4413      	add	r3, r2
 8008f70:	3304      	adds	r3, #4
 8008f72:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	68f9      	ldr	r1, [r7, #12]
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	f006 fb18 	bl	800f5b0 <USB_EPStopXfer>
 8008f80:	4603      	mov	r3, r0
 8008f82:	72fb      	strb	r3, [r7, #11]

  return ret;
 8008f84:	7afb      	ldrb	r3, [r7, #11]
}
 8008f86:	4618      	mov	r0, r3
 8008f88:	3710      	adds	r7, #16
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	bd80      	pop	{r7, pc}

08008f8e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008f8e:	b580      	push	{r7, lr}
 8008f90:	b08a      	sub	sp, #40	@ 0x28
 8008f92:	af02      	add	r7, sp, #8
 8008f94:	6078      	str	r0, [r7, #4]
 8008f96:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f9e:	697b      	ldr	r3, [r7, #20]
 8008fa0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8008fa2:	683a      	ldr	r2, [r7, #0]
 8008fa4:	4613      	mov	r3, r2
 8008fa6:	00db      	lsls	r3, r3, #3
 8008fa8:	4413      	add	r3, r2
 8008faa:	009b      	lsls	r3, r3, #2
 8008fac:	3310      	adds	r3, #16
 8008fae:	687a      	ldr	r2, [r7, #4]
 8008fb0:	4413      	add	r3, r2
 8008fb2:	3304      	adds	r3, #4
 8008fb4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	695a      	ldr	r2, [r3, #20]
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	691b      	ldr	r3, [r3, #16]
 8008fbe:	429a      	cmp	r2, r3
 8008fc0:	d901      	bls.n	8008fc6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8008fc2:	2301      	movs	r3, #1
 8008fc4:	e06b      	b.n	800909e <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	691a      	ldr	r2, [r3, #16]
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	695b      	ldr	r3, [r3, #20]
 8008fce:	1ad3      	subs	r3, r2, r3
 8008fd0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	689b      	ldr	r3, [r3, #8]
 8008fd6:	69fa      	ldr	r2, [r7, #28]
 8008fd8:	429a      	cmp	r2, r3
 8008fda:	d902      	bls.n	8008fe2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	689b      	ldr	r3, [r3, #8]
 8008fe0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8008fe2:	69fb      	ldr	r3, [r7, #28]
 8008fe4:	3303      	adds	r3, #3
 8008fe6:	089b      	lsrs	r3, r3, #2
 8008fe8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008fea:	e02a      	b.n	8009042 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	691a      	ldr	r2, [r3, #16]
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	695b      	ldr	r3, [r3, #20]
 8008ff4:	1ad3      	subs	r3, r2, r3
 8008ff6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	689b      	ldr	r3, [r3, #8]
 8008ffc:	69fa      	ldr	r2, [r7, #28]
 8008ffe:	429a      	cmp	r2, r3
 8009000:	d902      	bls.n	8009008 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	689b      	ldr	r3, [r3, #8]
 8009006:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8009008:	69fb      	ldr	r3, [r7, #28]
 800900a:	3303      	adds	r3, #3
 800900c:	089b      	lsrs	r3, r3, #2
 800900e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	68d9      	ldr	r1, [r3, #12]
 8009014:	683b      	ldr	r3, [r7, #0]
 8009016:	b2da      	uxtb	r2, r3
 8009018:	69fb      	ldr	r3, [r7, #28]
 800901a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8009020:	9300      	str	r3, [sp, #0]
 8009022:	4603      	mov	r3, r0
 8009024:	6978      	ldr	r0, [r7, #20]
 8009026:	f006 fb6d 	bl	800f704 <USB_WritePacket>

    ep->xfer_buff  += len;
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	68da      	ldr	r2, [r3, #12]
 800902e:	69fb      	ldr	r3, [r7, #28]
 8009030:	441a      	add	r2, r3
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	695a      	ldr	r2, [r3, #20]
 800903a:	69fb      	ldr	r3, [r7, #28]
 800903c:	441a      	add	r2, r3
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009042:	683b      	ldr	r3, [r7, #0]
 8009044:	015a      	lsls	r2, r3, #5
 8009046:	693b      	ldr	r3, [r7, #16]
 8009048:	4413      	add	r3, r2
 800904a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800904e:	699b      	ldr	r3, [r3, #24]
 8009050:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8009052:	69ba      	ldr	r2, [r7, #24]
 8009054:	429a      	cmp	r2, r3
 8009056:	d809      	bhi.n	800906c <PCD_WriteEmptyTxFifo+0xde>
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	695a      	ldr	r2, [r3, #20]
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009060:	429a      	cmp	r2, r3
 8009062:	d203      	bcs.n	800906c <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	691b      	ldr	r3, [r3, #16]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d1bf      	bne.n	8008fec <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	691a      	ldr	r2, [r3, #16]
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	695b      	ldr	r3, [r3, #20]
 8009074:	429a      	cmp	r2, r3
 8009076:	d811      	bhi.n	800909c <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8009078:	683b      	ldr	r3, [r7, #0]
 800907a:	f003 030f 	and.w	r3, r3, #15
 800907e:	2201      	movs	r2, #1
 8009080:	fa02 f303 	lsl.w	r3, r2, r3
 8009084:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8009086:	693b      	ldr	r3, [r7, #16]
 8009088:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800908c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800908e:	68bb      	ldr	r3, [r7, #8]
 8009090:	43db      	mvns	r3, r3
 8009092:	6939      	ldr	r1, [r7, #16]
 8009094:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009098:	4013      	ands	r3, r2
 800909a:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800909c:	2300      	movs	r3, #0
}
 800909e:	4618      	mov	r0, r3
 80090a0:	3720      	adds	r7, #32
 80090a2:	46bd      	mov	sp, r7
 80090a4:	bd80      	pop	{r7, pc}
	...

080090a8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80090a8:	b580      	push	{r7, lr}
 80090aa:	b088      	sub	sp, #32
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
 80090b0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090b8:	69fb      	ldr	r3, [r7, #28]
 80090ba:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80090bc:	69fb      	ldr	r3, [r7, #28]
 80090be:	333c      	adds	r3, #60	@ 0x3c
 80090c0:	3304      	adds	r3, #4
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80090c6:	683b      	ldr	r3, [r7, #0]
 80090c8:	015a      	lsls	r2, r3, #5
 80090ca:	69bb      	ldr	r3, [r7, #24]
 80090cc:	4413      	add	r3, r2
 80090ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80090d2:	689b      	ldr	r3, [r3, #8]
 80090d4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	799b      	ldrb	r3, [r3, #6]
 80090da:	2b01      	cmp	r3, #1
 80090dc:	d17b      	bne.n	80091d6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80090de:	693b      	ldr	r3, [r7, #16]
 80090e0:	f003 0308 	and.w	r3, r3, #8
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d015      	beq.n	8009114 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80090e8:	697b      	ldr	r3, [r7, #20]
 80090ea:	4a61      	ldr	r2, [pc, #388]	@ (8009270 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80090ec:	4293      	cmp	r3, r2
 80090ee:	f240 80b9 	bls.w	8009264 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80090f2:	693b      	ldr	r3, [r7, #16]
 80090f4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	f000 80b3 	beq.w	8009264 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80090fe:	683b      	ldr	r3, [r7, #0]
 8009100:	015a      	lsls	r2, r3, #5
 8009102:	69bb      	ldr	r3, [r7, #24]
 8009104:	4413      	add	r3, r2
 8009106:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800910a:	461a      	mov	r2, r3
 800910c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009110:	6093      	str	r3, [r2, #8]
 8009112:	e0a7      	b.n	8009264 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8009114:	693b      	ldr	r3, [r7, #16]
 8009116:	f003 0320 	and.w	r3, r3, #32
 800911a:	2b00      	cmp	r3, #0
 800911c:	d009      	beq.n	8009132 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800911e:	683b      	ldr	r3, [r7, #0]
 8009120:	015a      	lsls	r2, r3, #5
 8009122:	69bb      	ldr	r3, [r7, #24]
 8009124:	4413      	add	r3, r2
 8009126:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800912a:	461a      	mov	r2, r3
 800912c:	2320      	movs	r3, #32
 800912e:	6093      	str	r3, [r2, #8]
 8009130:	e098      	b.n	8009264 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8009132:	693b      	ldr	r3, [r7, #16]
 8009134:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8009138:	2b00      	cmp	r3, #0
 800913a:	f040 8093 	bne.w	8009264 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800913e:	697b      	ldr	r3, [r7, #20]
 8009140:	4a4b      	ldr	r2, [pc, #300]	@ (8009270 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8009142:	4293      	cmp	r3, r2
 8009144:	d90f      	bls.n	8009166 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009146:	693b      	ldr	r3, [r7, #16]
 8009148:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800914c:	2b00      	cmp	r3, #0
 800914e:	d00a      	beq.n	8009166 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009150:	683b      	ldr	r3, [r7, #0]
 8009152:	015a      	lsls	r2, r3, #5
 8009154:	69bb      	ldr	r3, [r7, #24]
 8009156:	4413      	add	r3, r2
 8009158:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800915c:	461a      	mov	r2, r3
 800915e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009162:	6093      	str	r3, [r2, #8]
 8009164:	e07e      	b.n	8009264 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8009166:	683a      	ldr	r2, [r7, #0]
 8009168:	4613      	mov	r3, r2
 800916a:	00db      	lsls	r3, r3, #3
 800916c:	4413      	add	r3, r2
 800916e:	009b      	lsls	r3, r3, #2
 8009170:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8009174:	687a      	ldr	r2, [r7, #4]
 8009176:	4413      	add	r3, r2
 8009178:	3304      	adds	r3, #4
 800917a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	6a1a      	ldr	r2, [r3, #32]
 8009180:	683b      	ldr	r3, [r7, #0]
 8009182:	0159      	lsls	r1, r3, #5
 8009184:	69bb      	ldr	r3, [r7, #24]
 8009186:	440b      	add	r3, r1
 8009188:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800918c:	691b      	ldr	r3, [r3, #16]
 800918e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009192:	1ad2      	subs	r2, r2, r3
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8009198:	683b      	ldr	r3, [r7, #0]
 800919a:	2b00      	cmp	r3, #0
 800919c:	d114      	bne.n	80091c8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	691b      	ldr	r3, [r3, #16]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d109      	bne.n	80091ba <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	6818      	ldr	r0, [r3, #0]
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80091b0:	461a      	mov	r2, r3
 80091b2:	2101      	movs	r1, #1
 80091b4:	f006 fd3e 	bl	800fc34 <USB_EP0_OutStart>
 80091b8:	e006      	b.n	80091c8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	68da      	ldr	r2, [r3, #12]
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	695b      	ldr	r3, [r3, #20]
 80091c2:	441a      	add	r2, r3
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80091c8:	683b      	ldr	r3, [r7, #0]
 80091ca:	b2db      	uxtb	r3, r3
 80091cc:	4619      	mov	r1, r3
 80091ce:	6878      	ldr	r0, [r7, #4]
 80091d0:	f009 f850 	bl	8012274 <HAL_PCD_DataOutStageCallback>
 80091d4:	e046      	b.n	8009264 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80091d6:	697b      	ldr	r3, [r7, #20]
 80091d8:	4a26      	ldr	r2, [pc, #152]	@ (8009274 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80091da:	4293      	cmp	r3, r2
 80091dc:	d124      	bne.n	8009228 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80091de:	693b      	ldr	r3, [r7, #16]
 80091e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d00a      	beq.n	80091fe <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80091e8:	683b      	ldr	r3, [r7, #0]
 80091ea:	015a      	lsls	r2, r3, #5
 80091ec:	69bb      	ldr	r3, [r7, #24]
 80091ee:	4413      	add	r3, r2
 80091f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80091f4:	461a      	mov	r2, r3
 80091f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80091fa:	6093      	str	r3, [r2, #8]
 80091fc:	e032      	b.n	8009264 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80091fe:	693b      	ldr	r3, [r7, #16]
 8009200:	f003 0320 	and.w	r3, r3, #32
 8009204:	2b00      	cmp	r3, #0
 8009206:	d008      	beq.n	800921a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009208:	683b      	ldr	r3, [r7, #0]
 800920a:	015a      	lsls	r2, r3, #5
 800920c:	69bb      	ldr	r3, [r7, #24]
 800920e:	4413      	add	r3, r2
 8009210:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009214:	461a      	mov	r2, r3
 8009216:	2320      	movs	r3, #32
 8009218:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800921a:	683b      	ldr	r3, [r7, #0]
 800921c:	b2db      	uxtb	r3, r3
 800921e:	4619      	mov	r1, r3
 8009220:	6878      	ldr	r0, [r7, #4]
 8009222:	f009 f827 	bl	8012274 <HAL_PCD_DataOutStageCallback>
 8009226:	e01d      	b.n	8009264 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8009228:	683b      	ldr	r3, [r7, #0]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d114      	bne.n	8009258 <PCD_EP_OutXfrComplete_int+0x1b0>
 800922e:	6879      	ldr	r1, [r7, #4]
 8009230:	683a      	ldr	r2, [r7, #0]
 8009232:	4613      	mov	r3, r2
 8009234:	00db      	lsls	r3, r3, #3
 8009236:	4413      	add	r3, r2
 8009238:	009b      	lsls	r3, r3, #2
 800923a:	440b      	add	r3, r1
 800923c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	2b00      	cmp	r3, #0
 8009244:	d108      	bne.n	8009258 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	6818      	ldr	r0, [r3, #0]
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8009250:	461a      	mov	r2, r3
 8009252:	2100      	movs	r1, #0
 8009254:	f006 fcee 	bl	800fc34 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009258:	683b      	ldr	r3, [r7, #0]
 800925a:	b2db      	uxtb	r3, r3
 800925c:	4619      	mov	r1, r3
 800925e:	6878      	ldr	r0, [r7, #4]
 8009260:	f009 f808 	bl	8012274 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8009264:	2300      	movs	r3, #0
}
 8009266:	4618      	mov	r0, r3
 8009268:	3720      	adds	r7, #32
 800926a:	46bd      	mov	sp, r7
 800926c:	bd80      	pop	{r7, pc}
 800926e:	bf00      	nop
 8009270:	4f54300a 	.word	0x4f54300a
 8009274:	4f54310a 	.word	0x4f54310a

08009278 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009278:	b580      	push	{r7, lr}
 800927a:	b086      	sub	sp, #24
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
 8009280:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009288:	697b      	ldr	r3, [r7, #20]
 800928a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800928c:	697b      	ldr	r3, [r7, #20]
 800928e:	333c      	adds	r3, #60	@ 0x3c
 8009290:	3304      	adds	r3, #4
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009296:	683b      	ldr	r3, [r7, #0]
 8009298:	015a      	lsls	r2, r3, #5
 800929a:	693b      	ldr	r3, [r7, #16]
 800929c:	4413      	add	r3, r2
 800929e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80092a2:	689b      	ldr	r3, [r3, #8]
 80092a4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	4a15      	ldr	r2, [pc, #84]	@ (8009300 <PCD_EP_OutSetupPacket_int+0x88>)
 80092aa:	4293      	cmp	r3, r2
 80092ac:	d90e      	bls.n	80092cc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80092ae:	68bb      	ldr	r3, [r7, #8]
 80092b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d009      	beq.n	80092cc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80092b8:	683b      	ldr	r3, [r7, #0]
 80092ba:	015a      	lsls	r2, r3, #5
 80092bc:	693b      	ldr	r3, [r7, #16]
 80092be:	4413      	add	r3, r2
 80092c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80092c4:	461a      	mov	r2, r3
 80092c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80092ca:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80092cc:	6878      	ldr	r0, [r7, #4]
 80092ce:	f008 ffbf 	bl	8012250 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	4a0a      	ldr	r2, [pc, #40]	@ (8009300 <PCD_EP_OutSetupPacket_int+0x88>)
 80092d6:	4293      	cmp	r3, r2
 80092d8:	d90c      	bls.n	80092f4 <PCD_EP_OutSetupPacket_int+0x7c>
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	799b      	ldrb	r3, [r3, #6]
 80092de:	2b01      	cmp	r3, #1
 80092e0:	d108      	bne.n	80092f4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	6818      	ldr	r0, [r3, #0]
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80092ec:	461a      	mov	r2, r3
 80092ee:	2101      	movs	r1, #1
 80092f0:	f006 fca0 	bl	800fc34 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80092f4:	2300      	movs	r3, #0
}
 80092f6:	4618      	mov	r0, r3
 80092f8:	3718      	adds	r7, #24
 80092fa:	46bd      	mov	sp, r7
 80092fc:	bd80      	pop	{r7, pc}
 80092fe:	bf00      	nop
 8009300:	4f54300a 	.word	0x4f54300a

08009304 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8009304:	b480      	push	{r7}
 8009306:	b085      	sub	sp, #20
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
 800930c:	460b      	mov	r3, r1
 800930e:	70fb      	strb	r3, [r7, #3]
 8009310:	4613      	mov	r3, r2
 8009312:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800931a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800931c:	78fb      	ldrb	r3, [r7, #3]
 800931e:	2b00      	cmp	r3, #0
 8009320:	d107      	bne.n	8009332 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8009322:	883b      	ldrh	r3, [r7, #0]
 8009324:	0419      	lsls	r1, r3, #16
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	68ba      	ldr	r2, [r7, #8]
 800932c:	430a      	orrs	r2, r1
 800932e:	629a      	str	r2, [r3, #40]	@ 0x28
 8009330:	e028      	b.n	8009384 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009338:	0c1b      	lsrs	r3, r3, #16
 800933a:	68ba      	ldr	r2, [r7, #8]
 800933c:	4413      	add	r3, r2
 800933e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009340:	2300      	movs	r3, #0
 8009342:	73fb      	strb	r3, [r7, #15]
 8009344:	e00d      	b.n	8009362 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681a      	ldr	r2, [r3, #0]
 800934a:	7bfb      	ldrb	r3, [r7, #15]
 800934c:	3340      	adds	r3, #64	@ 0x40
 800934e:	009b      	lsls	r3, r3, #2
 8009350:	4413      	add	r3, r2
 8009352:	685b      	ldr	r3, [r3, #4]
 8009354:	0c1b      	lsrs	r3, r3, #16
 8009356:	68ba      	ldr	r2, [r7, #8]
 8009358:	4413      	add	r3, r2
 800935a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800935c:	7bfb      	ldrb	r3, [r7, #15]
 800935e:	3301      	adds	r3, #1
 8009360:	73fb      	strb	r3, [r7, #15]
 8009362:	7bfa      	ldrb	r2, [r7, #15]
 8009364:	78fb      	ldrb	r3, [r7, #3]
 8009366:	3b01      	subs	r3, #1
 8009368:	429a      	cmp	r2, r3
 800936a:	d3ec      	bcc.n	8009346 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800936c:	883b      	ldrh	r3, [r7, #0]
 800936e:	0418      	lsls	r0, r3, #16
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	6819      	ldr	r1, [r3, #0]
 8009374:	78fb      	ldrb	r3, [r7, #3]
 8009376:	3b01      	subs	r3, #1
 8009378:	68ba      	ldr	r2, [r7, #8]
 800937a:	4302      	orrs	r2, r0
 800937c:	3340      	adds	r3, #64	@ 0x40
 800937e:	009b      	lsls	r3, r3, #2
 8009380:	440b      	add	r3, r1
 8009382:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8009384:	2300      	movs	r3, #0
}
 8009386:	4618      	mov	r0, r3
 8009388:	3714      	adds	r7, #20
 800938a:	46bd      	mov	sp, r7
 800938c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009390:	4770      	bx	lr

08009392 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8009392:	b480      	push	{r7}
 8009394:	b083      	sub	sp, #12
 8009396:	af00      	add	r7, sp, #0
 8009398:	6078      	str	r0, [r7, #4]
 800939a:	460b      	mov	r3, r1
 800939c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	887a      	ldrh	r2, [r7, #2]
 80093a4:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80093a6:	2300      	movs	r3, #0
}
 80093a8:	4618      	mov	r0, r3
 80093aa:	370c      	adds	r7, #12
 80093ac:	46bd      	mov	sp, r7
 80093ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b2:	4770      	bx	lr

080093b4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80093b4:	b480      	push	{r7}
 80093b6:	b085      	sub	sp, #20
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	2201      	movs	r2, #1
 80093c6:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	2200      	movs	r2, #0
 80093ce:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	699b      	ldr	r3, [r3, #24]
 80093d6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80093e2:	4b05      	ldr	r3, [pc, #20]	@ (80093f8 <HAL_PCDEx_ActivateLPM+0x44>)
 80093e4:	4313      	orrs	r3, r2
 80093e6:	68fa      	ldr	r2, [r7, #12]
 80093e8:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80093ea:	2300      	movs	r3, #0
}
 80093ec:	4618      	mov	r0, r3
 80093ee:	3714      	adds	r7, #20
 80093f0:	46bd      	mov	sp, r7
 80093f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f6:	4770      	bx	lr
 80093f8:	10000003 	.word	0x10000003

080093fc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80093fc:	b480      	push	{r7}
 80093fe:	b083      	sub	sp, #12
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
 8009404:	460b      	mov	r3, r1
 8009406:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8009408:	bf00      	nop
 800940a:	370c      	adds	r7, #12
 800940c:	46bd      	mov	sp, r7
 800940e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009412:	4770      	bx	lr

08009414 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b084      	sub	sp, #16
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800941c:	4b19      	ldr	r3, [pc, #100]	@ (8009484 <HAL_PWREx_ConfigSupply+0x70>)
 800941e:	68db      	ldr	r3, [r3, #12]
 8009420:	f003 0304 	and.w	r3, r3, #4
 8009424:	2b04      	cmp	r3, #4
 8009426:	d00a      	beq.n	800943e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8009428:	4b16      	ldr	r3, [pc, #88]	@ (8009484 <HAL_PWREx_ConfigSupply+0x70>)
 800942a:	68db      	ldr	r3, [r3, #12]
 800942c:	f003 0307 	and.w	r3, r3, #7
 8009430:	687a      	ldr	r2, [r7, #4]
 8009432:	429a      	cmp	r2, r3
 8009434:	d001      	beq.n	800943a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8009436:	2301      	movs	r3, #1
 8009438:	e01f      	b.n	800947a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800943a:	2300      	movs	r3, #0
 800943c:	e01d      	b.n	800947a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800943e:	4b11      	ldr	r3, [pc, #68]	@ (8009484 <HAL_PWREx_ConfigSupply+0x70>)
 8009440:	68db      	ldr	r3, [r3, #12]
 8009442:	f023 0207 	bic.w	r2, r3, #7
 8009446:	490f      	ldr	r1, [pc, #60]	@ (8009484 <HAL_PWREx_ConfigSupply+0x70>)
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	4313      	orrs	r3, r2
 800944c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800944e:	f7f8 fef7 	bl	8002240 <HAL_GetTick>
 8009452:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009454:	e009      	b.n	800946a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8009456:	f7f8 fef3 	bl	8002240 <HAL_GetTick>
 800945a:	4602      	mov	r2, r0
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	1ad3      	subs	r3, r2, r3
 8009460:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009464:	d901      	bls.n	800946a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8009466:	2301      	movs	r3, #1
 8009468:	e007      	b.n	800947a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800946a:	4b06      	ldr	r3, [pc, #24]	@ (8009484 <HAL_PWREx_ConfigSupply+0x70>)
 800946c:	685b      	ldr	r3, [r3, #4]
 800946e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009472:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009476:	d1ee      	bne.n	8009456 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8009478:	2300      	movs	r3, #0
}
 800947a:	4618      	mov	r0, r3
 800947c:	3710      	adds	r7, #16
 800947e:	46bd      	mov	sp, r7
 8009480:	bd80      	pop	{r7, pc}
 8009482:	bf00      	nop
 8009484:	58024800 	.word	0x58024800

08009488 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8009488:	b480      	push	{r7}
 800948a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800948c:	4b05      	ldr	r3, [pc, #20]	@ (80094a4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800948e:	68db      	ldr	r3, [r3, #12]
 8009490:	4a04      	ldr	r2, [pc, #16]	@ (80094a4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8009492:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009496:	60d3      	str	r3, [r2, #12]
}
 8009498:	bf00      	nop
 800949a:	46bd      	mov	sp, r7
 800949c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a0:	4770      	bx	lr
 80094a2:	bf00      	nop
 80094a4:	58024800 	.word	0x58024800

080094a8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80094a8:	b580      	push	{r7, lr}
 80094aa:	b08c      	sub	sp, #48	@ 0x30
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d102      	bne.n	80094bc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80094b6:	2301      	movs	r3, #1
 80094b8:	f000 bc48 	b.w	8009d4c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	f003 0301 	and.w	r3, r3, #1
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	f000 8088 	beq.w	80095da <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80094ca:	4b99      	ldr	r3, [pc, #612]	@ (8009730 <HAL_RCC_OscConfig+0x288>)
 80094cc:	691b      	ldr	r3, [r3, #16]
 80094ce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80094d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80094d4:	4b96      	ldr	r3, [pc, #600]	@ (8009730 <HAL_RCC_OscConfig+0x288>)
 80094d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094d8:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80094da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094dc:	2b10      	cmp	r3, #16
 80094de:	d007      	beq.n	80094f0 <HAL_RCC_OscConfig+0x48>
 80094e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094e2:	2b18      	cmp	r3, #24
 80094e4:	d111      	bne.n	800950a <HAL_RCC_OscConfig+0x62>
 80094e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094e8:	f003 0303 	and.w	r3, r3, #3
 80094ec:	2b02      	cmp	r3, #2
 80094ee:	d10c      	bne.n	800950a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80094f0:	4b8f      	ldr	r3, [pc, #572]	@ (8009730 <HAL_RCC_OscConfig+0x288>)
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d06d      	beq.n	80095d8 <HAL_RCC_OscConfig+0x130>
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	685b      	ldr	r3, [r3, #4]
 8009500:	2b00      	cmp	r3, #0
 8009502:	d169      	bne.n	80095d8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8009504:	2301      	movs	r3, #1
 8009506:	f000 bc21 	b.w	8009d4c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	685b      	ldr	r3, [r3, #4]
 800950e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009512:	d106      	bne.n	8009522 <HAL_RCC_OscConfig+0x7a>
 8009514:	4b86      	ldr	r3, [pc, #536]	@ (8009730 <HAL_RCC_OscConfig+0x288>)
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	4a85      	ldr	r2, [pc, #532]	@ (8009730 <HAL_RCC_OscConfig+0x288>)
 800951a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800951e:	6013      	str	r3, [r2, #0]
 8009520:	e02e      	b.n	8009580 <HAL_RCC_OscConfig+0xd8>
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	685b      	ldr	r3, [r3, #4]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d10c      	bne.n	8009544 <HAL_RCC_OscConfig+0x9c>
 800952a:	4b81      	ldr	r3, [pc, #516]	@ (8009730 <HAL_RCC_OscConfig+0x288>)
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	4a80      	ldr	r2, [pc, #512]	@ (8009730 <HAL_RCC_OscConfig+0x288>)
 8009530:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009534:	6013      	str	r3, [r2, #0]
 8009536:	4b7e      	ldr	r3, [pc, #504]	@ (8009730 <HAL_RCC_OscConfig+0x288>)
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	4a7d      	ldr	r2, [pc, #500]	@ (8009730 <HAL_RCC_OscConfig+0x288>)
 800953c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009540:	6013      	str	r3, [r2, #0]
 8009542:	e01d      	b.n	8009580 <HAL_RCC_OscConfig+0xd8>
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	685b      	ldr	r3, [r3, #4]
 8009548:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800954c:	d10c      	bne.n	8009568 <HAL_RCC_OscConfig+0xc0>
 800954e:	4b78      	ldr	r3, [pc, #480]	@ (8009730 <HAL_RCC_OscConfig+0x288>)
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	4a77      	ldr	r2, [pc, #476]	@ (8009730 <HAL_RCC_OscConfig+0x288>)
 8009554:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009558:	6013      	str	r3, [r2, #0]
 800955a:	4b75      	ldr	r3, [pc, #468]	@ (8009730 <HAL_RCC_OscConfig+0x288>)
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	4a74      	ldr	r2, [pc, #464]	@ (8009730 <HAL_RCC_OscConfig+0x288>)
 8009560:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009564:	6013      	str	r3, [r2, #0]
 8009566:	e00b      	b.n	8009580 <HAL_RCC_OscConfig+0xd8>
 8009568:	4b71      	ldr	r3, [pc, #452]	@ (8009730 <HAL_RCC_OscConfig+0x288>)
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	4a70      	ldr	r2, [pc, #448]	@ (8009730 <HAL_RCC_OscConfig+0x288>)
 800956e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009572:	6013      	str	r3, [r2, #0]
 8009574:	4b6e      	ldr	r3, [pc, #440]	@ (8009730 <HAL_RCC_OscConfig+0x288>)
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	4a6d      	ldr	r2, [pc, #436]	@ (8009730 <HAL_RCC_OscConfig+0x288>)
 800957a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800957e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	685b      	ldr	r3, [r3, #4]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d013      	beq.n	80095b0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009588:	f7f8 fe5a 	bl	8002240 <HAL_GetTick>
 800958c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800958e:	e008      	b.n	80095a2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009590:	f7f8 fe56 	bl	8002240 <HAL_GetTick>
 8009594:	4602      	mov	r2, r0
 8009596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009598:	1ad3      	subs	r3, r2, r3
 800959a:	2b64      	cmp	r3, #100	@ 0x64
 800959c:	d901      	bls.n	80095a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800959e:	2303      	movs	r3, #3
 80095a0:	e3d4      	b.n	8009d4c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80095a2:	4b63      	ldr	r3, [pc, #396]	@ (8009730 <HAL_RCC_OscConfig+0x288>)
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d0f0      	beq.n	8009590 <HAL_RCC_OscConfig+0xe8>
 80095ae:	e014      	b.n	80095da <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80095b0:	f7f8 fe46 	bl	8002240 <HAL_GetTick>
 80095b4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80095b6:	e008      	b.n	80095ca <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80095b8:	f7f8 fe42 	bl	8002240 <HAL_GetTick>
 80095bc:	4602      	mov	r2, r0
 80095be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095c0:	1ad3      	subs	r3, r2, r3
 80095c2:	2b64      	cmp	r3, #100	@ 0x64
 80095c4:	d901      	bls.n	80095ca <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80095c6:	2303      	movs	r3, #3
 80095c8:	e3c0      	b.n	8009d4c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80095ca:	4b59      	ldr	r3, [pc, #356]	@ (8009730 <HAL_RCC_OscConfig+0x288>)
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d1f0      	bne.n	80095b8 <HAL_RCC_OscConfig+0x110>
 80095d6:	e000      	b.n	80095da <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80095d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	f003 0302 	and.w	r3, r3, #2
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	f000 80ca 	beq.w	800977c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80095e8:	4b51      	ldr	r3, [pc, #324]	@ (8009730 <HAL_RCC_OscConfig+0x288>)
 80095ea:	691b      	ldr	r3, [r3, #16]
 80095ec:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80095f0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80095f2:	4b4f      	ldr	r3, [pc, #316]	@ (8009730 <HAL_RCC_OscConfig+0x288>)
 80095f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095f6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80095f8:	6a3b      	ldr	r3, [r7, #32]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d007      	beq.n	800960e <HAL_RCC_OscConfig+0x166>
 80095fe:	6a3b      	ldr	r3, [r7, #32]
 8009600:	2b18      	cmp	r3, #24
 8009602:	d156      	bne.n	80096b2 <HAL_RCC_OscConfig+0x20a>
 8009604:	69fb      	ldr	r3, [r7, #28]
 8009606:	f003 0303 	and.w	r3, r3, #3
 800960a:	2b00      	cmp	r3, #0
 800960c:	d151      	bne.n	80096b2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800960e:	4b48      	ldr	r3, [pc, #288]	@ (8009730 <HAL_RCC_OscConfig+0x288>)
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	f003 0304 	and.w	r3, r3, #4
 8009616:	2b00      	cmp	r3, #0
 8009618:	d005      	beq.n	8009626 <HAL_RCC_OscConfig+0x17e>
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	68db      	ldr	r3, [r3, #12]
 800961e:	2b00      	cmp	r3, #0
 8009620:	d101      	bne.n	8009626 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8009622:	2301      	movs	r3, #1
 8009624:	e392      	b.n	8009d4c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009626:	4b42      	ldr	r3, [pc, #264]	@ (8009730 <HAL_RCC_OscConfig+0x288>)
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	f023 0219 	bic.w	r2, r3, #25
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	68db      	ldr	r3, [r3, #12]
 8009632:	493f      	ldr	r1, [pc, #252]	@ (8009730 <HAL_RCC_OscConfig+0x288>)
 8009634:	4313      	orrs	r3, r2
 8009636:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009638:	f7f8 fe02 	bl	8002240 <HAL_GetTick>
 800963c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800963e:	e008      	b.n	8009652 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009640:	f7f8 fdfe 	bl	8002240 <HAL_GetTick>
 8009644:	4602      	mov	r2, r0
 8009646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009648:	1ad3      	subs	r3, r2, r3
 800964a:	2b02      	cmp	r3, #2
 800964c:	d901      	bls.n	8009652 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800964e:	2303      	movs	r3, #3
 8009650:	e37c      	b.n	8009d4c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009652:	4b37      	ldr	r3, [pc, #220]	@ (8009730 <HAL_RCC_OscConfig+0x288>)
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	f003 0304 	and.w	r3, r3, #4
 800965a:	2b00      	cmp	r3, #0
 800965c:	d0f0      	beq.n	8009640 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800965e:	f7f8 fe1f 	bl	80022a0 <HAL_GetREVID>
 8009662:	4603      	mov	r3, r0
 8009664:	f241 0203 	movw	r2, #4099	@ 0x1003
 8009668:	4293      	cmp	r3, r2
 800966a:	d817      	bhi.n	800969c <HAL_RCC_OscConfig+0x1f4>
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	691b      	ldr	r3, [r3, #16]
 8009670:	2b40      	cmp	r3, #64	@ 0x40
 8009672:	d108      	bne.n	8009686 <HAL_RCC_OscConfig+0x1de>
 8009674:	4b2e      	ldr	r3, [pc, #184]	@ (8009730 <HAL_RCC_OscConfig+0x288>)
 8009676:	685b      	ldr	r3, [r3, #4]
 8009678:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800967c:	4a2c      	ldr	r2, [pc, #176]	@ (8009730 <HAL_RCC_OscConfig+0x288>)
 800967e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009682:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009684:	e07a      	b.n	800977c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009686:	4b2a      	ldr	r3, [pc, #168]	@ (8009730 <HAL_RCC_OscConfig+0x288>)
 8009688:	685b      	ldr	r3, [r3, #4]
 800968a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	691b      	ldr	r3, [r3, #16]
 8009692:	031b      	lsls	r3, r3, #12
 8009694:	4926      	ldr	r1, [pc, #152]	@ (8009730 <HAL_RCC_OscConfig+0x288>)
 8009696:	4313      	orrs	r3, r2
 8009698:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800969a:	e06f      	b.n	800977c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800969c:	4b24      	ldr	r3, [pc, #144]	@ (8009730 <HAL_RCC_OscConfig+0x288>)
 800969e:	685b      	ldr	r3, [r3, #4]
 80096a0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	691b      	ldr	r3, [r3, #16]
 80096a8:	061b      	lsls	r3, r3, #24
 80096aa:	4921      	ldr	r1, [pc, #132]	@ (8009730 <HAL_RCC_OscConfig+0x288>)
 80096ac:	4313      	orrs	r3, r2
 80096ae:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80096b0:	e064      	b.n	800977c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	68db      	ldr	r3, [r3, #12]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d047      	beq.n	800974a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80096ba:	4b1d      	ldr	r3, [pc, #116]	@ (8009730 <HAL_RCC_OscConfig+0x288>)
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	f023 0219 	bic.w	r2, r3, #25
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	68db      	ldr	r3, [r3, #12]
 80096c6:	491a      	ldr	r1, [pc, #104]	@ (8009730 <HAL_RCC_OscConfig+0x288>)
 80096c8:	4313      	orrs	r3, r2
 80096ca:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80096cc:	f7f8 fdb8 	bl	8002240 <HAL_GetTick>
 80096d0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80096d2:	e008      	b.n	80096e6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80096d4:	f7f8 fdb4 	bl	8002240 <HAL_GetTick>
 80096d8:	4602      	mov	r2, r0
 80096da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096dc:	1ad3      	subs	r3, r2, r3
 80096de:	2b02      	cmp	r3, #2
 80096e0:	d901      	bls.n	80096e6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80096e2:	2303      	movs	r3, #3
 80096e4:	e332      	b.n	8009d4c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80096e6:	4b12      	ldr	r3, [pc, #72]	@ (8009730 <HAL_RCC_OscConfig+0x288>)
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	f003 0304 	and.w	r3, r3, #4
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d0f0      	beq.n	80096d4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80096f2:	f7f8 fdd5 	bl	80022a0 <HAL_GetREVID>
 80096f6:	4603      	mov	r3, r0
 80096f8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80096fc:	4293      	cmp	r3, r2
 80096fe:	d819      	bhi.n	8009734 <HAL_RCC_OscConfig+0x28c>
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	691b      	ldr	r3, [r3, #16]
 8009704:	2b40      	cmp	r3, #64	@ 0x40
 8009706:	d108      	bne.n	800971a <HAL_RCC_OscConfig+0x272>
 8009708:	4b09      	ldr	r3, [pc, #36]	@ (8009730 <HAL_RCC_OscConfig+0x288>)
 800970a:	685b      	ldr	r3, [r3, #4]
 800970c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8009710:	4a07      	ldr	r2, [pc, #28]	@ (8009730 <HAL_RCC_OscConfig+0x288>)
 8009712:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009716:	6053      	str	r3, [r2, #4]
 8009718:	e030      	b.n	800977c <HAL_RCC_OscConfig+0x2d4>
 800971a:	4b05      	ldr	r3, [pc, #20]	@ (8009730 <HAL_RCC_OscConfig+0x288>)
 800971c:	685b      	ldr	r3, [r3, #4]
 800971e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	691b      	ldr	r3, [r3, #16]
 8009726:	031b      	lsls	r3, r3, #12
 8009728:	4901      	ldr	r1, [pc, #4]	@ (8009730 <HAL_RCC_OscConfig+0x288>)
 800972a:	4313      	orrs	r3, r2
 800972c:	604b      	str	r3, [r1, #4]
 800972e:	e025      	b.n	800977c <HAL_RCC_OscConfig+0x2d4>
 8009730:	58024400 	.word	0x58024400
 8009734:	4b9a      	ldr	r3, [pc, #616]	@ (80099a0 <HAL_RCC_OscConfig+0x4f8>)
 8009736:	685b      	ldr	r3, [r3, #4]
 8009738:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	691b      	ldr	r3, [r3, #16]
 8009740:	061b      	lsls	r3, r3, #24
 8009742:	4997      	ldr	r1, [pc, #604]	@ (80099a0 <HAL_RCC_OscConfig+0x4f8>)
 8009744:	4313      	orrs	r3, r2
 8009746:	604b      	str	r3, [r1, #4]
 8009748:	e018      	b.n	800977c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800974a:	4b95      	ldr	r3, [pc, #596]	@ (80099a0 <HAL_RCC_OscConfig+0x4f8>)
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	4a94      	ldr	r2, [pc, #592]	@ (80099a0 <HAL_RCC_OscConfig+0x4f8>)
 8009750:	f023 0301 	bic.w	r3, r3, #1
 8009754:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009756:	f7f8 fd73 	bl	8002240 <HAL_GetTick>
 800975a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800975c:	e008      	b.n	8009770 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800975e:	f7f8 fd6f 	bl	8002240 <HAL_GetTick>
 8009762:	4602      	mov	r2, r0
 8009764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009766:	1ad3      	subs	r3, r2, r3
 8009768:	2b02      	cmp	r3, #2
 800976a:	d901      	bls.n	8009770 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800976c:	2303      	movs	r3, #3
 800976e:	e2ed      	b.n	8009d4c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009770:	4b8b      	ldr	r3, [pc, #556]	@ (80099a0 <HAL_RCC_OscConfig+0x4f8>)
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	f003 0304 	and.w	r3, r3, #4
 8009778:	2b00      	cmp	r3, #0
 800977a:	d1f0      	bne.n	800975e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	f003 0310 	and.w	r3, r3, #16
 8009784:	2b00      	cmp	r3, #0
 8009786:	f000 80a9 	beq.w	80098dc <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800978a:	4b85      	ldr	r3, [pc, #532]	@ (80099a0 <HAL_RCC_OscConfig+0x4f8>)
 800978c:	691b      	ldr	r3, [r3, #16]
 800978e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009792:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009794:	4b82      	ldr	r3, [pc, #520]	@ (80099a0 <HAL_RCC_OscConfig+0x4f8>)
 8009796:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009798:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800979a:	69bb      	ldr	r3, [r7, #24]
 800979c:	2b08      	cmp	r3, #8
 800979e:	d007      	beq.n	80097b0 <HAL_RCC_OscConfig+0x308>
 80097a0:	69bb      	ldr	r3, [r7, #24]
 80097a2:	2b18      	cmp	r3, #24
 80097a4:	d13a      	bne.n	800981c <HAL_RCC_OscConfig+0x374>
 80097a6:	697b      	ldr	r3, [r7, #20]
 80097a8:	f003 0303 	and.w	r3, r3, #3
 80097ac:	2b01      	cmp	r3, #1
 80097ae:	d135      	bne.n	800981c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80097b0:	4b7b      	ldr	r3, [pc, #492]	@ (80099a0 <HAL_RCC_OscConfig+0x4f8>)
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d005      	beq.n	80097c8 <HAL_RCC_OscConfig+0x320>
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	69db      	ldr	r3, [r3, #28]
 80097c0:	2b80      	cmp	r3, #128	@ 0x80
 80097c2:	d001      	beq.n	80097c8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80097c4:	2301      	movs	r3, #1
 80097c6:	e2c1      	b.n	8009d4c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80097c8:	f7f8 fd6a 	bl	80022a0 <HAL_GetREVID>
 80097cc:	4603      	mov	r3, r0
 80097ce:	f241 0203 	movw	r2, #4099	@ 0x1003
 80097d2:	4293      	cmp	r3, r2
 80097d4:	d817      	bhi.n	8009806 <HAL_RCC_OscConfig+0x35e>
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	6a1b      	ldr	r3, [r3, #32]
 80097da:	2b20      	cmp	r3, #32
 80097dc:	d108      	bne.n	80097f0 <HAL_RCC_OscConfig+0x348>
 80097de:	4b70      	ldr	r3, [pc, #448]	@ (80099a0 <HAL_RCC_OscConfig+0x4f8>)
 80097e0:	685b      	ldr	r3, [r3, #4]
 80097e2:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80097e6:	4a6e      	ldr	r2, [pc, #440]	@ (80099a0 <HAL_RCC_OscConfig+0x4f8>)
 80097e8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80097ec:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80097ee:	e075      	b.n	80098dc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80097f0:	4b6b      	ldr	r3, [pc, #428]	@ (80099a0 <HAL_RCC_OscConfig+0x4f8>)
 80097f2:	685b      	ldr	r3, [r3, #4]
 80097f4:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	6a1b      	ldr	r3, [r3, #32]
 80097fc:	069b      	lsls	r3, r3, #26
 80097fe:	4968      	ldr	r1, [pc, #416]	@ (80099a0 <HAL_RCC_OscConfig+0x4f8>)
 8009800:	4313      	orrs	r3, r2
 8009802:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009804:	e06a      	b.n	80098dc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009806:	4b66      	ldr	r3, [pc, #408]	@ (80099a0 <HAL_RCC_OscConfig+0x4f8>)
 8009808:	68db      	ldr	r3, [r3, #12]
 800980a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	6a1b      	ldr	r3, [r3, #32]
 8009812:	061b      	lsls	r3, r3, #24
 8009814:	4962      	ldr	r1, [pc, #392]	@ (80099a0 <HAL_RCC_OscConfig+0x4f8>)
 8009816:	4313      	orrs	r3, r2
 8009818:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800981a:	e05f      	b.n	80098dc <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	69db      	ldr	r3, [r3, #28]
 8009820:	2b00      	cmp	r3, #0
 8009822:	d042      	beq.n	80098aa <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8009824:	4b5e      	ldr	r3, [pc, #376]	@ (80099a0 <HAL_RCC_OscConfig+0x4f8>)
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	4a5d      	ldr	r2, [pc, #372]	@ (80099a0 <HAL_RCC_OscConfig+0x4f8>)
 800982a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800982e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009830:	f7f8 fd06 	bl	8002240 <HAL_GetTick>
 8009834:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009836:	e008      	b.n	800984a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009838:	f7f8 fd02 	bl	8002240 <HAL_GetTick>
 800983c:	4602      	mov	r2, r0
 800983e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009840:	1ad3      	subs	r3, r2, r3
 8009842:	2b02      	cmp	r3, #2
 8009844:	d901      	bls.n	800984a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8009846:	2303      	movs	r3, #3
 8009848:	e280      	b.n	8009d4c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800984a:	4b55      	ldr	r3, [pc, #340]	@ (80099a0 <HAL_RCC_OscConfig+0x4f8>)
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009852:	2b00      	cmp	r3, #0
 8009854:	d0f0      	beq.n	8009838 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009856:	f7f8 fd23 	bl	80022a0 <HAL_GetREVID>
 800985a:	4603      	mov	r3, r0
 800985c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8009860:	4293      	cmp	r3, r2
 8009862:	d817      	bhi.n	8009894 <HAL_RCC_OscConfig+0x3ec>
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	6a1b      	ldr	r3, [r3, #32]
 8009868:	2b20      	cmp	r3, #32
 800986a:	d108      	bne.n	800987e <HAL_RCC_OscConfig+0x3d6>
 800986c:	4b4c      	ldr	r3, [pc, #304]	@ (80099a0 <HAL_RCC_OscConfig+0x4f8>)
 800986e:	685b      	ldr	r3, [r3, #4]
 8009870:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8009874:	4a4a      	ldr	r2, [pc, #296]	@ (80099a0 <HAL_RCC_OscConfig+0x4f8>)
 8009876:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800987a:	6053      	str	r3, [r2, #4]
 800987c:	e02e      	b.n	80098dc <HAL_RCC_OscConfig+0x434>
 800987e:	4b48      	ldr	r3, [pc, #288]	@ (80099a0 <HAL_RCC_OscConfig+0x4f8>)
 8009880:	685b      	ldr	r3, [r3, #4]
 8009882:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	6a1b      	ldr	r3, [r3, #32]
 800988a:	069b      	lsls	r3, r3, #26
 800988c:	4944      	ldr	r1, [pc, #272]	@ (80099a0 <HAL_RCC_OscConfig+0x4f8>)
 800988e:	4313      	orrs	r3, r2
 8009890:	604b      	str	r3, [r1, #4]
 8009892:	e023      	b.n	80098dc <HAL_RCC_OscConfig+0x434>
 8009894:	4b42      	ldr	r3, [pc, #264]	@ (80099a0 <HAL_RCC_OscConfig+0x4f8>)
 8009896:	68db      	ldr	r3, [r3, #12]
 8009898:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	6a1b      	ldr	r3, [r3, #32]
 80098a0:	061b      	lsls	r3, r3, #24
 80098a2:	493f      	ldr	r1, [pc, #252]	@ (80099a0 <HAL_RCC_OscConfig+0x4f8>)
 80098a4:	4313      	orrs	r3, r2
 80098a6:	60cb      	str	r3, [r1, #12]
 80098a8:	e018      	b.n	80098dc <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80098aa:	4b3d      	ldr	r3, [pc, #244]	@ (80099a0 <HAL_RCC_OscConfig+0x4f8>)
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	4a3c      	ldr	r2, [pc, #240]	@ (80099a0 <HAL_RCC_OscConfig+0x4f8>)
 80098b0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80098b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80098b6:	f7f8 fcc3 	bl	8002240 <HAL_GetTick>
 80098ba:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80098bc:	e008      	b.n	80098d0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80098be:	f7f8 fcbf 	bl	8002240 <HAL_GetTick>
 80098c2:	4602      	mov	r2, r0
 80098c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098c6:	1ad3      	subs	r3, r2, r3
 80098c8:	2b02      	cmp	r3, #2
 80098ca:	d901      	bls.n	80098d0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80098cc:	2303      	movs	r3, #3
 80098ce:	e23d      	b.n	8009d4c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80098d0:	4b33      	ldr	r3, [pc, #204]	@ (80099a0 <HAL_RCC_OscConfig+0x4f8>)
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d1f0      	bne.n	80098be <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	f003 0308 	and.w	r3, r3, #8
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d036      	beq.n	8009956 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	695b      	ldr	r3, [r3, #20]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d019      	beq.n	8009924 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80098f0:	4b2b      	ldr	r3, [pc, #172]	@ (80099a0 <HAL_RCC_OscConfig+0x4f8>)
 80098f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80098f4:	4a2a      	ldr	r2, [pc, #168]	@ (80099a0 <HAL_RCC_OscConfig+0x4f8>)
 80098f6:	f043 0301 	orr.w	r3, r3, #1
 80098fa:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80098fc:	f7f8 fca0 	bl	8002240 <HAL_GetTick>
 8009900:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009902:	e008      	b.n	8009916 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009904:	f7f8 fc9c 	bl	8002240 <HAL_GetTick>
 8009908:	4602      	mov	r2, r0
 800990a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800990c:	1ad3      	subs	r3, r2, r3
 800990e:	2b02      	cmp	r3, #2
 8009910:	d901      	bls.n	8009916 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8009912:	2303      	movs	r3, #3
 8009914:	e21a      	b.n	8009d4c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009916:	4b22      	ldr	r3, [pc, #136]	@ (80099a0 <HAL_RCC_OscConfig+0x4f8>)
 8009918:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800991a:	f003 0302 	and.w	r3, r3, #2
 800991e:	2b00      	cmp	r3, #0
 8009920:	d0f0      	beq.n	8009904 <HAL_RCC_OscConfig+0x45c>
 8009922:	e018      	b.n	8009956 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009924:	4b1e      	ldr	r3, [pc, #120]	@ (80099a0 <HAL_RCC_OscConfig+0x4f8>)
 8009926:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009928:	4a1d      	ldr	r2, [pc, #116]	@ (80099a0 <HAL_RCC_OscConfig+0x4f8>)
 800992a:	f023 0301 	bic.w	r3, r3, #1
 800992e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009930:	f7f8 fc86 	bl	8002240 <HAL_GetTick>
 8009934:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009936:	e008      	b.n	800994a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009938:	f7f8 fc82 	bl	8002240 <HAL_GetTick>
 800993c:	4602      	mov	r2, r0
 800993e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009940:	1ad3      	subs	r3, r2, r3
 8009942:	2b02      	cmp	r3, #2
 8009944:	d901      	bls.n	800994a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8009946:	2303      	movs	r3, #3
 8009948:	e200      	b.n	8009d4c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800994a:	4b15      	ldr	r3, [pc, #84]	@ (80099a0 <HAL_RCC_OscConfig+0x4f8>)
 800994c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800994e:	f003 0302 	and.w	r3, r3, #2
 8009952:	2b00      	cmp	r3, #0
 8009954:	d1f0      	bne.n	8009938 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	f003 0320 	and.w	r3, r3, #32
 800995e:	2b00      	cmp	r3, #0
 8009960:	d039      	beq.n	80099d6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	699b      	ldr	r3, [r3, #24]
 8009966:	2b00      	cmp	r3, #0
 8009968:	d01c      	beq.n	80099a4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800996a:	4b0d      	ldr	r3, [pc, #52]	@ (80099a0 <HAL_RCC_OscConfig+0x4f8>)
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	4a0c      	ldr	r2, [pc, #48]	@ (80099a0 <HAL_RCC_OscConfig+0x4f8>)
 8009970:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8009974:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009976:	f7f8 fc63 	bl	8002240 <HAL_GetTick>
 800997a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800997c:	e008      	b.n	8009990 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800997e:	f7f8 fc5f 	bl	8002240 <HAL_GetTick>
 8009982:	4602      	mov	r2, r0
 8009984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009986:	1ad3      	subs	r3, r2, r3
 8009988:	2b02      	cmp	r3, #2
 800998a:	d901      	bls.n	8009990 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800998c:	2303      	movs	r3, #3
 800998e:	e1dd      	b.n	8009d4c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009990:	4b03      	ldr	r3, [pc, #12]	@ (80099a0 <HAL_RCC_OscConfig+0x4f8>)
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009998:	2b00      	cmp	r3, #0
 800999a:	d0f0      	beq.n	800997e <HAL_RCC_OscConfig+0x4d6>
 800999c:	e01b      	b.n	80099d6 <HAL_RCC_OscConfig+0x52e>
 800999e:	bf00      	nop
 80099a0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80099a4:	4b9b      	ldr	r3, [pc, #620]	@ (8009c14 <HAL_RCC_OscConfig+0x76c>)
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	4a9a      	ldr	r2, [pc, #616]	@ (8009c14 <HAL_RCC_OscConfig+0x76c>)
 80099aa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80099ae:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80099b0:	f7f8 fc46 	bl	8002240 <HAL_GetTick>
 80099b4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80099b6:	e008      	b.n	80099ca <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80099b8:	f7f8 fc42 	bl	8002240 <HAL_GetTick>
 80099bc:	4602      	mov	r2, r0
 80099be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099c0:	1ad3      	subs	r3, r2, r3
 80099c2:	2b02      	cmp	r3, #2
 80099c4:	d901      	bls.n	80099ca <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80099c6:	2303      	movs	r3, #3
 80099c8:	e1c0      	b.n	8009d4c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80099ca:	4b92      	ldr	r3, [pc, #584]	@ (8009c14 <HAL_RCC_OscConfig+0x76c>)
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d1f0      	bne.n	80099b8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	f003 0304 	and.w	r3, r3, #4
 80099de:	2b00      	cmp	r3, #0
 80099e0:	f000 8081 	beq.w	8009ae6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80099e4:	4b8c      	ldr	r3, [pc, #560]	@ (8009c18 <HAL_RCC_OscConfig+0x770>)
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	4a8b      	ldr	r2, [pc, #556]	@ (8009c18 <HAL_RCC_OscConfig+0x770>)
 80099ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80099ee:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80099f0:	f7f8 fc26 	bl	8002240 <HAL_GetTick>
 80099f4:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80099f6:	e008      	b.n	8009a0a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80099f8:	f7f8 fc22 	bl	8002240 <HAL_GetTick>
 80099fc:	4602      	mov	r2, r0
 80099fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a00:	1ad3      	subs	r3, r2, r3
 8009a02:	2b64      	cmp	r3, #100	@ 0x64
 8009a04:	d901      	bls.n	8009a0a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8009a06:	2303      	movs	r3, #3
 8009a08:	e1a0      	b.n	8009d4c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009a0a:	4b83      	ldr	r3, [pc, #524]	@ (8009c18 <HAL_RCC_OscConfig+0x770>)
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d0f0      	beq.n	80099f8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	689b      	ldr	r3, [r3, #8]
 8009a1a:	2b01      	cmp	r3, #1
 8009a1c:	d106      	bne.n	8009a2c <HAL_RCC_OscConfig+0x584>
 8009a1e:	4b7d      	ldr	r3, [pc, #500]	@ (8009c14 <HAL_RCC_OscConfig+0x76c>)
 8009a20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a22:	4a7c      	ldr	r2, [pc, #496]	@ (8009c14 <HAL_RCC_OscConfig+0x76c>)
 8009a24:	f043 0301 	orr.w	r3, r3, #1
 8009a28:	6713      	str	r3, [r2, #112]	@ 0x70
 8009a2a:	e02d      	b.n	8009a88 <HAL_RCC_OscConfig+0x5e0>
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	689b      	ldr	r3, [r3, #8]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d10c      	bne.n	8009a4e <HAL_RCC_OscConfig+0x5a6>
 8009a34:	4b77      	ldr	r3, [pc, #476]	@ (8009c14 <HAL_RCC_OscConfig+0x76c>)
 8009a36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a38:	4a76      	ldr	r2, [pc, #472]	@ (8009c14 <HAL_RCC_OscConfig+0x76c>)
 8009a3a:	f023 0301 	bic.w	r3, r3, #1
 8009a3e:	6713      	str	r3, [r2, #112]	@ 0x70
 8009a40:	4b74      	ldr	r3, [pc, #464]	@ (8009c14 <HAL_RCC_OscConfig+0x76c>)
 8009a42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a44:	4a73      	ldr	r2, [pc, #460]	@ (8009c14 <HAL_RCC_OscConfig+0x76c>)
 8009a46:	f023 0304 	bic.w	r3, r3, #4
 8009a4a:	6713      	str	r3, [r2, #112]	@ 0x70
 8009a4c:	e01c      	b.n	8009a88 <HAL_RCC_OscConfig+0x5e0>
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	689b      	ldr	r3, [r3, #8]
 8009a52:	2b05      	cmp	r3, #5
 8009a54:	d10c      	bne.n	8009a70 <HAL_RCC_OscConfig+0x5c8>
 8009a56:	4b6f      	ldr	r3, [pc, #444]	@ (8009c14 <HAL_RCC_OscConfig+0x76c>)
 8009a58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a5a:	4a6e      	ldr	r2, [pc, #440]	@ (8009c14 <HAL_RCC_OscConfig+0x76c>)
 8009a5c:	f043 0304 	orr.w	r3, r3, #4
 8009a60:	6713      	str	r3, [r2, #112]	@ 0x70
 8009a62:	4b6c      	ldr	r3, [pc, #432]	@ (8009c14 <HAL_RCC_OscConfig+0x76c>)
 8009a64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a66:	4a6b      	ldr	r2, [pc, #428]	@ (8009c14 <HAL_RCC_OscConfig+0x76c>)
 8009a68:	f043 0301 	orr.w	r3, r3, #1
 8009a6c:	6713      	str	r3, [r2, #112]	@ 0x70
 8009a6e:	e00b      	b.n	8009a88 <HAL_RCC_OscConfig+0x5e0>
 8009a70:	4b68      	ldr	r3, [pc, #416]	@ (8009c14 <HAL_RCC_OscConfig+0x76c>)
 8009a72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a74:	4a67      	ldr	r2, [pc, #412]	@ (8009c14 <HAL_RCC_OscConfig+0x76c>)
 8009a76:	f023 0301 	bic.w	r3, r3, #1
 8009a7a:	6713      	str	r3, [r2, #112]	@ 0x70
 8009a7c:	4b65      	ldr	r3, [pc, #404]	@ (8009c14 <HAL_RCC_OscConfig+0x76c>)
 8009a7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a80:	4a64      	ldr	r2, [pc, #400]	@ (8009c14 <HAL_RCC_OscConfig+0x76c>)
 8009a82:	f023 0304 	bic.w	r3, r3, #4
 8009a86:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	689b      	ldr	r3, [r3, #8]
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d015      	beq.n	8009abc <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009a90:	f7f8 fbd6 	bl	8002240 <HAL_GetTick>
 8009a94:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009a96:	e00a      	b.n	8009aae <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009a98:	f7f8 fbd2 	bl	8002240 <HAL_GetTick>
 8009a9c:	4602      	mov	r2, r0
 8009a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009aa0:	1ad3      	subs	r3, r2, r3
 8009aa2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009aa6:	4293      	cmp	r3, r2
 8009aa8:	d901      	bls.n	8009aae <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8009aaa:	2303      	movs	r3, #3
 8009aac:	e14e      	b.n	8009d4c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009aae:	4b59      	ldr	r3, [pc, #356]	@ (8009c14 <HAL_RCC_OscConfig+0x76c>)
 8009ab0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009ab2:	f003 0302 	and.w	r3, r3, #2
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d0ee      	beq.n	8009a98 <HAL_RCC_OscConfig+0x5f0>
 8009aba:	e014      	b.n	8009ae6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009abc:	f7f8 fbc0 	bl	8002240 <HAL_GetTick>
 8009ac0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009ac2:	e00a      	b.n	8009ada <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009ac4:	f7f8 fbbc 	bl	8002240 <HAL_GetTick>
 8009ac8:	4602      	mov	r2, r0
 8009aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009acc:	1ad3      	subs	r3, r2, r3
 8009ace:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009ad2:	4293      	cmp	r3, r2
 8009ad4:	d901      	bls.n	8009ada <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8009ad6:	2303      	movs	r3, #3
 8009ad8:	e138      	b.n	8009d4c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009ada:	4b4e      	ldr	r3, [pc, #312]	@ (8009c14 <HAL_RCC_OscConfig+0x76c>)
 8009adc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009ade:	f003 0302 	and.w	r3, r3, #2
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d1ee      	bne.n	8009ac4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	f000 812d 	beq.w	8009d4a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8009af0:	4b48      	ldr	r3, [pc, #288]	@ (8009c14 <HAL_RCC_OscConfig+0x76c>)
 8009af2:	691b      	ldr	r3, [r3, #16]
 8009af4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009af8:	2b18      	cmp	r3, #24
 8009afa:	f000 80bd 	beq.w	8009c78 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b02:	2b02      	cmp	r3, #2
 8009b04:	f040 809e 	bne.w	8009c44 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009b08:	4b42      	ldr	r3, [pc, #264]	@ (8009c14 <HAL_RCC_OscConfig+0x76c>)
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	4a41      	ldr	r2, [pc, #260]	@ (8009c14 <HAL_RCC_OscConfig+0x76c>)
 8009b0e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009b12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b14:	f7f8 fb94 	bl	8002240 <HAL_GetTick>
 8009b18:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009b1a:	e008      	b.n	8009b2e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009b1c:	f7f8 fb90 	bl	8002240 <HAL_GetTick>
 8009b20:	4602      	mov	r2, r0
 8009b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b24:	1ad3      	subs	r3, r2, r3
 8009b26:	2b02      	cmp	r3, #2
 8009b28:	d901      	bls.n	8009b2e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8009b2a:	2303      	movs	r3, #3
 8009b2c:	e10e      	b.n	8009d4c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009b2e:	4b39      	ldr	r3, [pc, #228]	@ (8009c14 <HAL_RCC_OscConfig+0x76c>)
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d1f0      	bne.n	8009b1c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009b3a:	4b36      	ldr	r3, [pc, #216]	@ (8009c14 <HAL_RCC_OscConfig+0x76c>)
 8009b3c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009b3e:	4b37      	ldr	r3, [pc, #220]	@ (8009c1c <HAL_RCC_OscConfig+0x774>)
 8009b40:	4013      	ands	r3, r2
 8009b42:	687a      	ldr	r2, [r7, #4]
 8009b44:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8009b46:	687a      	ldr	r2, [r7, #4]
 8009b48:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8009b4a:	0112      	lsls	r2, r2, #4
 8009b4c:	430a      	orrs	r2, r1
 8009b4e:	4931      	ldr	r1, [pc, #196]	@ (8009c14 <HAL_RCC_OscConfig+0x76c>)
 8009b50:	4313      	orrs	r3, r2
 8009b52:	628b      	str	r3, [r1, #40]	@ 0x28
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b58:	3b01      	subs	r3, #1
 8009b5a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009b62:	3b01      	subs	r3, #1
 8009b64:	025b      	lsls	r3, r3, #9
 8009b66:	b29b      	uxth	r3, r3
 8009b68:	431a      	orrs	r2, r3
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b6e:	3b01      	subs	r3, #1
 8009b70:	041b      	lsls	r3, r3, #16
 8009b72:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009b76:	431a      	orrs	r2, r3
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009b7c:	3b01      	subs	r3, #1
 8009b7e:	061b      	lsls	r3, r3, #24
 8009b80:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009b84:	4923      	ldr	r1, [pc, #140]	@ (8009c14 <HAL_RCC_OscConfig+0x76c>)
 8009b86:	4313      	orrs	r3, r2
 8009b88:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8009b8a:	4b22      	ldr	r3, [pc, #136]	@ (8009c14 <HAL_RCC_OscConfig+0x76c>)
 8009b8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b8e:	4a21      	ldr	r2, [pc, #132]	@ (8009c14 <HAL_RCC_OscConfig+0x76c>)
 8009b90:	f023 0301 	bic.w	r3, r3, #1
 8009b94:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009b96:	4b1f      	ldr	r3, [pc, #124]	@ (8009c14 <HAL_RCC_OscConfig+0x76c>)
 8009b98:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009b9a:	4b21      	ldr	r3, [pc, #132]	@ (8009c20 <HAL_RCC_OscConfig+0x778>)
 8009b9c:	4013      	ands	r3, r2
 8009b9e:	687a      	ldr	r2, [r7, #4]
 8009ba0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8009ba2:	00d2      	lsls	r2, r2, #3
 8009ba4:	491b      	ldr	r1, [pc, #108]	@ (8009c14 <HAL_RCC_OscConfig+0x76c>)
 8009ba6:	4313      	orrs	r3, r2
 8009ba8:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8009baa:	4b1a      	ldr	r3, [pc, #104]	@ (8009c14 <HAL_RCC_OscConfig+0x76c>)
 8009bac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bae:	f023 020c 	bic.w	r2, r3, #12
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009bb6:	4917      	ldr	r1, [pc, #92]	@ (8009c14 <HAL_RCC_OscConfig+0x76c>)
 8009bb8:	4313      	orrs	r3, r2
 8009bba:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8009bbc:	4b15      	ldr	r3, [pc, #84]	@ (8009c14 <HAL_RCC_OscConfig+0x76c>)
 8009bbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bc0:	f023 0202 	bic.w	r2, r3, #2
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009bc8:	4912      	ldr	r1, [pc, #72]	@ (8009c14 <HAL_RCC_OscConfig+0x76c>)
 8009bca:	4313      	orrs	r3, r2
 8009bcc:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009bce:	4b11      	ldr	r3, [pc, #68]	@ (8009c14 <HAL_RCC_OscConfig+0x76c>)
 8009bd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bd2:	4a10      	ldr	r2, [pc, #64]	@ (8009c14 <HAL_RCC_OscConfig+0x76c>)
 8009bd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009bd8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009bda:	4b0e      	ldr	r3, [pc, #56]	@ (8009c14 <HAL_RCC_OscConfig+0x76c>)
 8009bdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bde:	4a0d      	ldr	r2, [pc, #52]	@ (8009c14 <HAL_RCC_OscConfig+0x76c>)
 8009be0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009be4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8009be6:	4b0b      	ldr	r3, [pc, #44]	@ (8009c14 <HAL_RCC_OscConfig+0x76c>)
 8009be8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bea:	4a0a      	ldr	r2, [pc, #40]	@ (8009c14 <HAL_RCC_OscConfig+0x76c>)
 8009bec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009bf0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8009bf2:	4b08      	ldr	r3, [pc, #32]	@ (8009c14 <HAL_RCC_OscConfig+0x76c>)
 8009bf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bf6:	4a07      	ldr	r2, [pc, #28]	@ (8009c14 <HAL_RCC_OscConfig+0x76c>)
 8009bf8:	f043 0301 	orr.w	r3, r3, #1
 8009bfc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009bfe:	4b05      	ldr	r3, [pc, #20]	@ (8009c14 <HAL_RCC_OscConfig+0x76c>)
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	4a04      	ldr	r2, [pc, #16]	@ (8009c14 <HAL_RCC_OscConfig+0x76c>)
 8009c04:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009c08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c0a:	f7f8 fb19 	bl	8002240 <HAL_GetTick>
 8009c0e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009c10:	e011      	b.n	8009c36 <HAL_RCC_OscConfig+0x78e>
 8009c12:	bf00      	nop
 8009c14:	58024400 	.word	0x58024400
 8009c18:	58024800 	.word	0x58024800
 8009c1c:	fffffc0c 	.word	0xfffffc0c
 8009c20:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009c24:	f7f8 fb0c 	bl	8002240 <HAL_GetTick>
 8009c28:	4602      	mov	r2, r0
 8009c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c2c:	1ad3      	subs	r3, r2, r3
 8009c2e:	2b02      	cmp	r3, #2
 8009c30:	d901      	bls.n	8009c36 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8009c32:	2303      	movs	r3, #3
 8009c34:	e08a      	b.n	8009d4c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009c36:	4b47      	ldr	r3, [pc, #284]	@ (8009d54 <HAL_RCC_OscConfig+0x8ac>)
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d0f0      	beq.n	8009c24 <HAL_RCC_OscConfig+0x77c>
 8009c42:	e082      	b.n	8009d4a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009c44:	4b43      	ldr	r3, [pc, #268]	@ (8009d54 <HAL_RCC_OscConfig+0x8ac>)
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	4a42      	ldr	r2, [pc, #264]	@ (8009d54 <HAL_RCC_OscConfig+0x8ac>)
 8009c4a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009c4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c50:	f7f8 faf6 	bl	8002240 <HAL_GetTick>
 8009c54:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009c56:	e008      	b.n	8009c6a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009c58:	f7f8 faf2 	bl	8002240 <HAL_GetTick>
 8009c5c:	4602      	mov	r2, r0
 8009c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c60:	1ad3      	subs	r3, r2, r3
 8009c62:	2b02      	cmp	r3, #2
 8009c64:	d901      	bls.n	8009c6a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8009c66:	2303      	movs	r3, #3
 8009c68:	e070      	b.n	8009d4c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009c6a:	4b3a      	ldr	r3, [pc, #232]	@ (8009d54 <HAL_RCC_OscConfig+0x8ac>)
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d1f0      	bne.n	8009c58 <HAL_RCC_OscConfig+0x7b0>
 8009c76:	e068      	b.n	8009d4a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8009c78:	4b36      	ldr	r3, [pc, #216]	@ (8009d54 <HAL_RCC_OscConfig+0x8ac>)
 8009c7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c7c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8009c7e:	4b35      	ldr	r3, [pc, #212]	@ (8009d54 <HAL_RCC_OscConfig+0x8ac>)
 8009c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c82:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c88:	2b01      	cmp	r3, #1
 8009c8a:	d031      	beq.n	8009cf0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009c8c:	693b      	ldr	r3, [r7, #16]
 8009c8e:	f003 0203 	and.w	r2, r3, #3
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009c96:	429a      	cmp	r2, r3
 8009c98:	d12a      	bne.n	8009cf0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009c9a:	693b      	ldr	r3, [r7, #16]
 8009c9c:	091b      	lsrs	r3, r3, #4
 8009c9e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009ca6:	429a      	cmp	r2, r3
 8009ca8:	d122      	bne.n	8009cf0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009cb4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009cb6:	429a      	cmp	r2, r3
 8009cb8:	d11a      	bne.n	8009cf0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	0a5b      	lsrs	r3, r3, #9
 8009cbe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009cc6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009cc8:	429a      	cmp	r2, r3
 8009cca:	d111      	bne.n	8009cf0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	0c1b      	lsrs	r3, r3, #16
 8009cd0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cd8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009cda:	429a      	cmp	r2, r3
 8009cdc:	d108      	bne.n	8009cf0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	0e1b      	lsrs	r3, r3, #24
 8009ce2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009cea:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009cec:	429a      	cmp	r2, r3
 8009cee:	d001      	beq.n	8009cf4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8009cf0:	2301      	movs	r3, #1
 8009cf2:	e02b      	b.n	8009d4c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8009cf4:	4b17      	ldr	r3, [pc, #92]	@ (8009d54 <HAL_RCC_OscConfig+0x8ac>)
 8009cf6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009cf8:	08db      	lsrs	r3, r3, #3
 8009cfa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009cfe:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009d04:	693a      	ldr	r2, [r7, #16]
 8009d06:	429a      	cmp	r2, r3
 8009d08:	d01f      	beq.n	8009d4a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8009d0a:	4b12      	ldr	r3, [pc, #72]	@ (8009d54 <HAL_RCC_OscConfig+0x8ac>)
 8009d0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d0e:	4a11      	ldr	r2, [pc, #68]	@ (8009d54 <HAL_RCC_OscConfig+0x8ac>)
 8009d10:	f023 0301 	bic.w	r3, r3, #1
 8009d14:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009d16:	f7f8 fa93 	bl	8002240 <HAL_GetTick>
 8009d1a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8009d1c:	bf00      	nop
 8009d1e:	f7f8 fa8f 	bl	8002240 <HAL_GetTick>
 8009d22:	4602      	mov	r2, r0
 8009d24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d26:	4293      	cmp	r3, r2
 8009d28:	d0f9      	beq.n	8009d1e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009d2a:	4b0a      	ldr	r3, [pc, #40]	@ (8009d54 <HAL_RCC_OscConfig+0x8ac>)
 8009d2c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009d2e:	4b0a      	ldr	r3, [pc, #40]	@ (8009d58 <HAL_RCC_OscConfig+0x8b0>)
 8009d30:	4013      	ands	r3, r2
 8009d32:	687a      	ldr	r2, [r7, #4]
 8009d34:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8009d36:	00d2      	lsls	r2, r2, #3
 8009d38:	4906      	ldr	r1, [pc, #24]	@ (8009d54 <HAL_RCC_OscConfig+0x8ac>)
 8009d3a:	4313      	orrs	r3, r2
 8009d3c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8009d3e:	4b05      	ldr	r3, [pc, #20]	@ (8009d54 <HAL_RCC_OscConfig+0x8ac>)
 8009d40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d42:	4a04      	ldr	r2, [pc, #16]	@ (8009d54 <HAL_RCC_OscConfig+0x8ac>)
 8009d44:	f043 0301 	orr.w	r3, r3, #1
 8009d48:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8009d4a:	2300      	movs	r3, #0
}
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	3730      	adds	r7, #48	@ 0x30
 8009d50:	46bd      	mov	sp, r7
 8009d52:	bd80      	pop	{r7, pc}
 8009d54:	58024400 	.word	0x58024400
 8009d58:	ffff0007 	.word	0xffff0007

08009d5c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	b086      	sub	sp, #24
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
 8009d64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d101      	bne.n	8009d70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009d6c:	2301      	movs	r3, #1
 8009d6e:	e19c      	b.n	800a0aa <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009d70:	4b8a      	ldr	r3, [pc, #552]	@ (8009f9c <HAL_RCC_ClockConfig+0x240>)
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	f003 030f 	and.w	r3, r3, #15
 8009d78:	683a      	ldr	r2, [r7, #0]
 8009d7a:	429a      	cmp	r2, r3
 8009d7c:	d910      	bls.n	8009da0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009d7e:	4b87      	ldr	r3, [pc, #540]	@ (8009f9c <HAL_RCC_ClockConfig+0x240>)
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	f023 020f 	bic.w	r2, r3, #15
 8009d86:	4985      	ldr	r1, [pc, #532]	@ (8009f9c <HAL_RCC_ClockConfig+0x240>)
 8009d88:	683b      	ldr	r3, [r7, #0]
 8009d8a:	4313      	orrs	r3, r2
 8009d8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009d8e:	4b83      	ldr	r3, [pc, #524]	@ (8009f9c <HAL_RCC_ClockConfig+0x240>)
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	f003 030f 	and.w	r3, r3, #15
 8009d96:	683a      	ldr	r2, [r7, #0]
 8009d98:	429a      	cmp	r2, r3
 8009d9a:	d001      	beq.n	8009da0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009d9c:	2301      	movs	r3, #1
 8009d9e:	e184      	b.n	800a0aa <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	f003 0304 	and.w	r3, r3, #4
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d010      	beq.n	8009dce <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	691a      	ldr	r2, [r3, #16]
 8009db0:	4b7b      	ldr	r3, [pc, #492]	@ (8009fa0 <HAL_RCC_ClockConfig+0x244>)
 8009db2:	699b      	ldr	r3, [r3, #24]
 8009db4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009db8:	429a      	cmp	r2, r3
 8009dba:	d908      	bls.n	8009dce <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009dbc:	4b78      	ldr	r3, [pc, #480]	@ (8009fa0 <HAL_RCC_ClockConfig+0x244>)
 8009dbe:	699b      	ldr	r3, [r3, #24]
 8009dc0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	691b      	ldr	r3, [r3, #16]
 8009dc8:	4975      	ldr	r1, [pc, #468]	@ (8009fa0 <HAL_RCC_ClockConfig+0x244>)
 8009dca:	4313      	orrs	r3, r2
 8009dcc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	f003 0308 	and.w	r3, r3, #8
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d010      	beq.n	8009dfc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	695a      	ldr	r2, [r3, #20]
 8009dde:	4b70      	ldr	r3, [pc, #448]	@ (8009fa0 <HAL_RCC_ClockConfig+0x244>)
 8009de0:	69db      	ldr	r3, [r3, #28]
 8009de2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009de6:	429a      	cmp	r2, r3
 8009de8:	d908      	bls.n	8009dfc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009dea:	4b6d      	ldr	r3, [pc, #436]	@ (8009fa0 <HAL_RCC_ClockConfig+0x244>)
 8009dec:	69db      	ldr	r3, [r3, #28]
 8009dee:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	695b      	ldr	r3, [r3, #20]
 8009df6:	496a      	ldr	r1, [pc, #424]	@ (8009fa0 <HAL_RCC_ClockConfig+0x244>)
 8009df8:	4313      	orrs	r3, r2
 8009dfa:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	f003 0310 	and.w	r3, r3, #16
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d010      	beq.n	8009e2a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	699a      	ldr	r2, [r3, #24]
 8009e0c:	4b64      	ldr	r3, [pc, #400]	@ (8009fa0 <HAL_RCC_ClockConfig+0x244>)
 8009e0e:	69db      	ldr	r3, [r3, #28]
 8009e10:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009e14:	429a      	cmp	r2, r3
 8009e16:	d908      	bls.n	8009e2a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009e18:	4b61      	ldr	r3, [pc, #388]	@ (8009fa0 <HAL_RCC_ClockConfig+0x244>)
 8009e1a:	69db      	ldr	r3, [r3, #28]
 8009e1c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	699b      	ldr	r3, [r3, #24]
 8009e24:	495e      	ldr	r1, [pc, #376]	@ (8009fa0 <HAL_RCC_ClockConfig+0x244>)
 8009e26:	4313      	orrs	r3, r2
 8009e28:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	f003 0320 	and.w	r3, r3, #32
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d010      	beq.n	8009e58 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	69da      	ldr	r2, [r3, #28]
 8009e3a:	4b59      	ldr	r3, [pc, #356]	@ (8009fa0 <HAL_RCC_ClockConfig+0x244>)
 8009e3c:	6a1b      	ldr	r3, [r3, #32]
 8009e3e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009e42:	429a      	cmp	r2, r3
 8009e44:	d908      	bls.n	8009e58 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8009e46:	4b56      	ldr	r3, [pc, #344]	@ (8009fa0 <HAL_RCC_ClockConfig+0x244>)
 8009e48:	6a1b      	ldr	r3, [r3, #32]
 8009e4a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	69db      	ldr	r3, [r3, #28]
 8009e52:	4953      	ldr	r1, [pc, #332]	@ (8009fa0 <HAL_RCC_ClockConfig+0x244>)
 8009e54:	4313      	orrs	r3, r2
 8009e56:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	f003 0302 	and.w	r3, r3, #2
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d010      	beq.n	8009e86 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	68da      	ldr	r2, [r3, #12]
 8009e68:	4b4d      	ldr	r3, [pc, #308]	@ (8009fa0 <HAL_RCC_ClockConfig+0x244>)
 8009e6a:	699b      	ldr	r3, [r3, #24]
 8009e6c:	f003 030f 	and.w	r3, r3, #15
 8009e70:	429a      	cmp	r2, r3
 8009e72:	d908      	bls.n	8009e86 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009e74:	4b4a      	ldr	r3, [pc, #296]	@ (8009fa0 <HAL_RCC_ClockConfig+0x244>)
 8009e76:	699b      	ldr	r3, [r3, #24]
 8009e78:	f023 020f 	bic.w	r2, r3, #15
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	68db      	ldr	r3, [r3, #12]
 8009e80:	4947      	ldr	r1, [pc, #284]	@ (8009fa0 <HAL_RCC_ClockConfig+0x244>)
 8009e82:	4313      	orrs	r3, r2
 8009e84:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	f003 0301 	and.w	r3, r3, #1
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d055      	beq.n	8009f3e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8009e92:	4b43      	ldr	r3, [pc, #268]	@ (8009fa0 <HAL_RCC_ClockConfig+0x244>)
 8009e94:	699b      	ldr	r3, [r3, #24]
 8009e96:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	689b      	ldr	r3, [r3, #8]
 8009e9e:	4940      	ldr	r1, [pc, #256]	@ (8009fa0 <HAL_RCC_ClockConfig+0x244>)
 8009ea0:	4313      	orrs	r3, r2
 8009ea2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	685b      	ldr	r3, [r3, #4]
 8009ea8:	2b02      	cmp	r3, #2
 8009eaa:	d107      	bne.n	8009ebc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009eac:	4b3c      	ldr	r3, [pc, #240]	@ (8009fa0 <HAL_RCC_ClockConfig+0x244>)
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d121      	bne.n	8009efc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009eb8:	2301      	movs	r3, #1
 8009eba:	e0f6      	b.n	800a0aa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	685b      	ldr	r3, [r3, #4]
 8009ec0:	2b03      	cmp	r3, #3
 8009ec2:	d107      	bne.n	8009ed4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009ec4:	4b36      	ldr	r3, [pc, #216]	@ (8009fa0 <HAL_RCC_ClockConfig+0x244>)
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d115      	bne.n	8009efc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009ed0:	2301      	movs	r3, #1
 8009ed2:	e0ea      	b.n	800a0aa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	685b      	ldr	r3, [r3, #4]
 8009ed8:	2b01      	cmp	r3, #1
 8009eda:	d107      	bne.n	8009eec <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009edc:	4b30      	ldr	r3, [pc, #192]	@ (8009fa0 <HAL_RCC_ClockConfig+0x244>)
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d109      	bne.n	8009efc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009ee8:	2301      	movs	r3, #1
 8009eea:	e0de      	b.n	800a0aa <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009eec:	4b2c      	ldr	r3, [pc, #176]	@ (8009fa0 <HAL_RCC_ClockConfig+0x244>)
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	f003 0304 	and.w	r3, r3, #4
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d101      	bne.n	8009efc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009ef8:	2301      	movs	r3, #1
 8009efa:	e0d6      	b.n	800a0aa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009efc:	4b28      	ldr	r3, [pc, #160]	@ (8009fa0 <HAL_RCC_ClockConfig+0x244>)
 8009efe:	691b      	ldr	r3, [r3, #16]
 8009f00:	f023 0207 	bic.w	r2, r3, #7
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	685b      	ldr	r3, [r3, #4]
 8009f08:	4925      	ldr	r1, [pc, #148]	@ (8009fa0 <HAL_RCC_ClockConfig+0x244>)
 8009f0a:	4313      	orrs	r3, r2
 8009f0c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009f0e:	f7f8 f997 	bl	8002240 <HAL_GetTick>
 8009f12:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009f14:	e00a      	b.n	8009f2c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009f16:	f7f8 f993 	bl	8002240 <HAL_GetTick>
 8009f1a:	4602      	mov	r2, r0
 8009f1c:	697b      	ldr	r3, [r7, #20]
 8009f1e:	1ad3      	subs	r3, r2, r3
 8009f20:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009f24:	4293      	cmp	r3, r2
 8009f26:	d901      	bls.n	8009f2c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8009f28:	2303      	movs	r3, #3
 8009f2a:	e0be      	b.n	800a0aa <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009f2c:	4b1c      	ldr	r3, [pc, #112]	@ (8009fa0 <HAL_RCC_ClockConfig+0x244>)
 8009f2e:	691b      	ldr	r3, [r3, #16]
 8009f30:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	685b      	ldr	r3, [r3, #4]
 8009f38:	00db      	lsls	r3, r3, #3
 8009f3a:	429a      	cmp	r2, r3
 8009f3c:	d1eb      	bne.n	8009f16 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	f003 0302 	and.w	r3, r3, #2
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d010      	beq.n	8009f6c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	68da      	ldr	r2, [r3, #12]
 8009f4e:	4b14      	ldr	r3, [pc, #80]	@ (8009fa0 <HAL_RCC_ClockConfig+0x244>)
 8009f50:	699b      	ldr	r3, [r3, #24]
 8009f52:	f003 030f 	and.w	r3, r3, #15
 8009f56:	429a      	cmp	r2, r3
 8009f58:	d208      	bcs.n	8009f6c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009f5a:	4b11      	ldr	r3, [pc, #68]	@ (8009fa0 <HAL_RCC_ClockConfig+0x244>)
 8009f5c:	699b      	ldr	r3, [r3, #24]
 8009f5e:	f023 020f 	bic.w	r2, r3, #15
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	68db      	ldr	r3, [r3, #12]
 8009f66:	490e      	ldr	r1, [pc, #56]	@ (8009fa0 <HAL_RCC_ClockConfig+0x244>)
 8009f68:	4313      	orrs	r3, r2
 8009f6a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009f6c:	4b0b      	ldr	r3, [pc, #44]	@ (8009f9c <HAL_RCC_ClockConfig+0x240>)
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	f003 030f 	and.w	r3, r3, #15
 8009f74:	683a      	ldr	r2, [r7, #0]
 8009f76:	429a      	cmp	r2, r3
 8009f78:	d214      	bcs.n	8009fa4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009f7a:	4b08      	ldr	r3, [pc, #32]	@ (8009f9c <HAL_RCC_ClockConfig+0x240>)
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	f023 020f 	bic.w	r2, r3, #15
 8009f82:	4906      	ldr	r1, [pc, #24]	@ (8009f9c <HAL_RCC_ClockConfig+0x240>)
 8009f84:	683b      	ldr	r3, [r7, #0]
 8009f86:	4313      	orrs	r3, r2
 8009f88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009f8a:	4b04      	ldr	r3, [pc, #16]	@ (8009f9c <HAL_RCC_ClockConfig+0x240>)
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	f003 030f 	and.w	r3, r3, #15
 8009f92:	683a      	ldr	r2, [r7, #0]
 8009f94:	429a      	cmp	r2, r3
 8009f96:	d005      	beq.n	8009fa4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8009f98:	2301      	movs	r3, #1
 8009f9a:	e086      	b.n	800a0aa <HAL_RCC_ClockConfig+0x34e>
 8009f9c:	52002000 	.word	0x52002000
 8009fa0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	f003 0304 	and.w	r3, r3, #4
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d010      	beq.n	8009fd2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	691a      	ldr	r2, [r3, #16]
 8009fb4:	4b3f      	ldr	r3, [pc, #252]	@ (800a0b4 <HAL_RCC_ClockConfig+0x358>)
 8009fb6:	699b      	ldr	r3, [r3, #24]
 8009fb8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009fbc:	429a      	cmp	r2, r3
 8009fbe:	d208      	bcs.n	8009fd2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009fc0:	4b3c      	ldr	r3, [pc, #240]	@ (800a0b4 <HAL_RCC_ClockConfig+0x358>)
 8009fc2:	699b      	ldr	r3, [r3, #24]
 8009fc4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	691b      	ldr	r3, [r3, #16]
 8009fcc:	4939      	ldr	r1, [pc, #228]	@ (800a0b4 <HAL_RCC_ClockConfig+0x358>)
 8009fce:	4313      	orrs	r3, r2
 8009fd0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	f003 0308 	and.w	r3, r3, #8
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d010      	beq.n	800a000 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	695a      	ldr	r2, [r3, #20]
 8009fe2:	4b34      	ldr	r3, [pc, #208]	@ (800a0b4 <HAL_RCC_ClockConfig+0x358>)
 8009fe4:	69db      	ldr	r3, [r3, #28]
 8009fe6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009fea:	429a      	cmp	r2, r3
 8009fec:	d208      	bcs.n	800a000 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009fee:	4b31      	ldr	r3, [pc, #196]	@ (800a0b4 <HAL_RCC_ClockConfig+0x358>)
 8009ff0:	69db      	ldr	r3, [r3, #28]
 8009ff2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	695b      	ldr	r3, [r3, #20]
 8009ffa:	492e      	ldr	r1, [pc, #184]	@ (800a0b4 <HAL_RCC_ClockConfig+0x358>)
 8009ffc:	4313      	orrs	r3, r2
 8009ffe:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	f003 0310 	and.w	r3, r3, #16
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d010      	beq.n	800a02e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	699a      	ldr	r2, [r3, #24]
 800a010:	4b28      	ldr	r3, [pc, #160]	@ (800a0b4 <HAL_RCC_ClockConfig+0x358>)
 800a012:	69db      	ldr	r3, [r3, #28]
 800a014:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a018:	429a      	cmp	r2, r3
 800a01a:	d208      	bcs.n	800a02e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a01c:	4b25      	ldr	r3, [pc, #148]	@ (800a0b4 <HAL_RCC_ClockConfig+0x358>)
 800a01e:	69db      	ldr	r3, [r3, #28]
 800a020:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	699b      	ldr	r3, [r3, #24]
 800a028:	4922      	ldr	r1, [pc, #136]	@ (800a0b4 <HAL_RCC_ClockConfig+0x358>)
 800a02a:	4313      	orrs	r3, r2
 800a02c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	f003 0320 	and.w	r3, r3, #32
 800a036:	2b00      	cmp	r3, #0
 800a038:	d010      	beq.n	800a05c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	69da      	ldr	r2, [r3, #28]
 800a03e:	4b1d      	ldr	r3, [pc, #116]	@ (800a0b4 <HAL_RCC_ClockConfig+0x358>)
 800a040:	6a1b      	ldr	r3, [r3, #32]
 800a042:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a046:	429a      	cmp	r2, r3
 800a048:	d208      	bcs.n	800a05c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a04a:	4b1a      	ldr	r3, [pc, #104]	@ (800a0b4 <HAL_RCC_ClockConfig+0x358>)
 800a04c:	6a1b      	ldr	r3, [r3, #32]
 800a04e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	69db      	ldr	r3, [r3, #28]
 800a056:	4917      	ldr	r1, [pc, #92]	@ (800a0b4 <HAL_RCC_ClockConfig+0x358>)
 800a058:	4313      	orrs	r3, r2
 800a05a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a05c:	f000 f834 	bl	800a0c8 <HAL_RCC_GetSysClockFreq>
 800a060:	4602      	mov	r2, r0
 800a062:	4b14      	ldr	r3, [pc, #80]	@ (800a0b4 <HAL_RCC_ClockConfig+0x358>)
 800a064:	699b      	ldr	r3, [r3, #24]
 800a066:	0a1b      	lsrs	r3, r3, #8
 800a068:	f003 030f 	and.w	r3, r3, #15
 800a06c:	4912      	ldr	r1, [pc, #72]	@ (800a0b8 <HAL_RCC_ClockConfig+0x35c>)
 800a06e:	5ccb      	ldrb	r3, [r1, r3]
 800a070:	f003 031f 	and.w	r3, r3, #31
 800a074:	fa22 f303 	lsr.w	r3, r2, r3
 800a078:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a07a:	4b0e      	ldr	r3, [pc, #56]	@ (800a0b4 <HAL_RCC_ClockConfig+0x358>)
 800a07c:	699b      	ldr	r3, [r3, #24]
 800a07e:	f003 030f 	and.w	r3, r3, #15
 800a082:	4a0d      	ldr	r2, [pc, #52]	@ (800a0b8 <HAL_RCC_ClockConfig+0x35c>)
 800a084:	5cd3      	ldrb	r3, [r2, r3]
 800a086:	f003 031f 	and.w	r3, r3, #31
 800a08a:	693a      	ldr	r2, [r7, #16]
 800a08c:	fa22 f303 	lsr.w	r3, r2, r3
 800a090:	4a0a      	ldr	r2, [pc, #40]	@ (800a0bc <HAL_RCC_ClockConfig+0x360>)
 800a092:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a094:	4a0a      	ldr	r2, [pc, #40]	@ (800a0c0 <HAL_RCC_ClockConfig+0x364>)
 800a096:	693b      	ldr	r3, [r7, #16]
 800a098:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800a09a:	4b0a      	ldr	r3, [pc, #40]	@ (800a0c4 <HAL_RCC_ClockConfig+0x368>)
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	4618      	mov	r0, r3
 800a0a0:	f7f8 f884 	bl	80021ac <HAL_InitTick>
 800a0a4:	4603      	mov	r3, r0
 800a0a6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800a0a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	3718      	adds	r7, #24
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	bd80      	pop	{r7, pc}
 800a0b2:	bf00      	nop
 800a0b4:	58024400 	.word	0x58024400
 800a0b8:	080132d8 	.word	0x080132d8
 800a0bc:	24000004 	.word	0x24000004
 800a0c0:	24000000 	.word	0x24000000
 800a0c4:	24000008 	.word	0x24000008

0800a0c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a0c8:	b480      	push	{r7}
 800a0ca:	b089      	sub	sp, #36	@ 0x24
 800a0cc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a0ce:	4bb3      	ldr	r3, [pc, #716]	@ (800a39c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a0d0:	691b      	ldr	r3, [r3, #16]
 800a0d2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a0d6:	2b18      	cmp	r3, #24
 800a0d8:	f200 8155 	bhi.w	800a386 <HAL_RCC_GetSysClockFreq+0x2be>
 800a0dc:	a201      	add	r2, pc, #4	@ (adr r2, 800a0e4 <HAL_RCC_GetSysClockFreq+0x1c>)
 800a0de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0e2:	bf00      	nop
 800a0e4:	0800a149 	.word	0x0800a149
 800a0e8:	0800a387 	.word	0x0800a387
 800a0ec:	0800a387 	.word	0x0800a387
 800a0f0:	0800a387 	.word	0x0800a387
 800a0f4:	0800a387 	.word	0x0800a387
 800a0f8:	0800a387 	.word	0x0800a387
 800a0fc:	0800a387 	.word	0x0800a387
 800a100:	0800a387 	.word	0x0800a387
 800a104:	0800a16f 	.word	0x0800a16f
 800a108:	0800a387 	.word	0x0800a387
 800a10c:	0800a387 	.word	0x0800a387
 800a110:	0800a387 	.word	0x0800a387
 800a114:	0800a387 	.word	0x0800a387
 800a118:	0800a387 	.word	0x0800a387
 800a11c:	0800a387 	.word	0x0800a387
 800a120:	0800a387 	.word	0x0800a387
 800a124:	0800a175 	.word	0x0800a175
 800a128:	0800a387 	.word	0x0800a387
 800a12c:	0800a387 	.word	0x0800a387
 800a130:	0800a387 	.word	0x0800a387
 800a134:	0800a387 	.word	0x0800a387
 800a138:	0800a387 	.word	0x0800a387
 800a13c:	0800a387 	.word	0x0800a387
 800a140:	0800a387 	.word	0x0800a387
 800a144:	0800a17b 	.word	0x0800a17b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a148:	4b94      	ldr	r3, [pc, #592]	@ (800a39c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	f003 0320 	and.w	r3, r3, #32
 800a150:	2b00      	cmp	r3, #0
 800a152:	d009      	beq.n	800a168 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a154:	4b91      	ldr	r3, [pc, #580]	@ (800a39c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	08db      	lsrs	r3, r3, #3
 800a15a:	f003 0303 	and.w	r3, r3, #3
 800a15e:	4a90      	ldr	r2, [pc, #576]	@ (800a3a0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a160:	fa22 f303 	lsr.w	r3, r2, r3
 800a164:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800a166:	e111      	b.n	800a38c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800a168:	4b8d      	ldr	r3, [pc, #564]	@ (800a3a0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a16a:	61bb      	str	r3, [r7, #24]
      break;
 800a16c:	e10e      	b.n	800a38c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800a16e:	4b8d      	ldr	r3, [pc, #564]	@ (800a3a4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a170:	61bb      	str	r3, [r7, #24]
      break;
 800a172:	e10b      	b.n	800a38c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800a174:	4b8c      	ldr	r3, [pc, #560]	@ (800a3a8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800a176:	61bb      	str	r3, [r7, #24]
      break;
 800a178:	e108      	b.n	800a38c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a17a:	4b88      	ldr	r3, [pc, #544]	@ (800a39c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a17c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a17e:	f003 0303 	and.w	r3, r3, #3
 800a182:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800a184:	4b85      	ldr	r3, [pc, #532]	@ (800a39c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a186:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a188:	091b      	lsrs	r3, r3, #4
 800a18a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a18e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a190:	4b82      	ldr	r3, [pc, #520]	@ (800a39c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a192:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a194:	f003 0301 	and.w	r3, r3, #1
 800a198:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a19a:	4b80      	ldr	r3, [pc, #512]	@ (800a39c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a19c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a19e:	08db      	lsrs	r3, r3, #3
 800a1a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a1a4:	68fa      	ldr	r2, [r7, #12]
 800a1a6:	fb02 f303 	mul.w	r3, r2, r3
 800a1aa:	ee07 3a90 	vmov	s15, r3
 800a1ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1b2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800a1b6:	693b      	ldr	r3, [r7, #16]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	f000 80e1 	beq.w	800a380 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 800a1be:	697b      	ldr	r3, [r7, #20]
 800a1c0:	2b02      	cmp	r3, #2
 800a1c2:	f000 8083 	beq.w	800a2cc <HAL_RCC_GetSysClockFreq+0x204>
 800a1c6:	697b      	ldr	r3, [r7, #20]
 800a1c8:	2b02      	cmp	r3, #2
 800a1ca:	f200 80a1 	bhi.w	800a310 <HAL_RCC_GetSysClockFreq+0x248>
 800a1ce:	697b      	ldr	r3, [r7, #20]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d003      	beq.n	800a1dc <HAL_RCC_GetSysClockFreq+0x114>
 800a1d4:	697b      	ldr	r3, [r7, #20]
 800a1d6:	2b01      	cmp	r3, #1
 800a1d8:	d056      	beq.n	800a288 <HAL_RCC_GetSysClockFreq+0x1c0>
 800a1da:	e099      	b.n	800a310 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a1dc:	4b6f      	ldr	r3, [pc, #444]	@ (800a39c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	f003 0320 	and.w	r3, r3, #32
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d02d      	beq.n	800a244 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a1e8:	4b6c      	ldr	r3, [pc, #432]	@ (800a39c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	08db      	lsrs	r3, r3, #3
 800a1ee:	f003 0303 	and.w	r3, r3, #3
 800a1f2:	4a6b      	ldr	r2, [pc, #428]	@ (800a3a0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a1f4:	fa22 f303 	lsr.w	r3, r2, r3
 800a1f8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	ee07 3a90 	vmov	s15, r3
 800a200:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a204:	693b      	ldr	r3, [r7, #16]
 800a206:	ee07 3a90 	vmov	s15, r3
 800a20a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a20e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a212:	4b62      	ldr	r3, [pc, #392]	@ (800a39c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a216:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a21a:	ee07 3a90 	vmov	s15, r3
 800a21e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a222:	ed97 6a02 	vldr	s12, [r7, #8]
 800a226:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800a3ac <HAL_RCC_GetSysClockFreq+0x2e4>
 800a22a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a22e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a232:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a236:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a23a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a23e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800a242:	e087      	b.n	800a354 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a244:	693b      	ldr	r3, [r7, #16]
 800a246:	ee07 3a90 	vmov	s15, r3
 800a24a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a24e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800a3b0 <HAL_RCC_GetSysClockFreq+0x2e8>
 800a252:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a256:	4b51      	ldr	r3, [pc, #324]	@ (800a39c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a25a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a25e:	ee07 3a90 	vmov	s15, r3
 800a262:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a266:	ed97 6a02 	vldr	s12, [r7, #8]
 800a26a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800a3ac <HAL_RCC_GetSysClockFreq+0x2e4>
 800a26e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a272:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a276:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a27a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a27e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a282:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a286:	e065      	b.n	800a354 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a288:	693b      	ldr	r3, [r7, #16]
 800a28a:	ee07 3a90 	vmov	s15, r3
 800a28e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a292:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800a3b4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a296:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a29a:	4b40      	ldr	r3, [pc, #256]	@ (800a39c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a29c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a29e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2a2:	ee07 3a90 	vmov	s15, r3
 800a2a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a2aa:	ed97 6a02 	vldr	s12, [r7, #8]
 800a2ae:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800a3ac <HAL_RCC_GetSysClockFreq+0x2e4>
 800a2b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a2b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a2ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a2be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a2c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a2c6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a2ca:	e043      	b.n	800a354 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a2cc:	693b      	ldr	r3, [r7, #16]
 800a2ce:	ee07 3a90 	vmov	s15, r3
 800a2d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2d6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800a3b8 <HAL_RCC_GetSysClockFreq+0x2f0>
 800a2da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a2de:	4b2f      	ldr	r3, [pc, #188]	@ (800a39c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a2e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a2e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2e6:	ee07 3a90 	vmov	s15, r3
 800a2ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a2ee:	ed97 6a02 	vldr	s12, [r7, #8]
 800a2f2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800a3ac <HAL_RCC_GetSysClockFreq+0x2e4>
 800a2f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a2fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a2fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a302:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a306:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a30a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a30e:	e021      	b.n	800a354 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a310:	693b      	ldr	r3, [r7, #16]
 800a312:	ee07 3a90 	vmov	s15, r3
 800a316:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a31a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800a3b4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a31e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a322:	4b1e      	ldr	r3, [pc, #120]	@ (800a39c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a326:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a32a:	ee07 3a90 	vmov	s15, r3
 800a32e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a332:	ed97 6a02 	vldr	s12, [r7, #8]
 800a336:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800a3ac <HAL_RCC_GetSysClockFreq+0x2e4>
 800a33a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a33e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a342:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a346:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a34a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a34e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a352:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800a354:	4b11      	ldr	r3, [pc, #68]	@ (800a39c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a356:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a358:	0a5b      	lsrs	r3, r3, #9
 800a35a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a35e:	3301      	adds	r3, #1
 800a360:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800a362:	683b      	ldr	r3, [r7, #0]
 800a364:	ee07 3a90 	vmov	s15, r3
 800a368:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a36c:	edd7 6a07 	vldr	s13, [r7, #28]
 800a370:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a374:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a378:	ee17 3a90 	vmov	r3, s15
 800a37c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800a37e:	e005      	b.n	800a38c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800a380:	2300      	movs	r3, #0
 800a382:	61bb      	str	r3, [r7, #24]
      break;
 800a384:	e002      	b.n	800a38c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800a386:	4b07      	ldr	r3, [pc, #28]	@ (800a3a4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a388:	61bb      	str	r3, [r7, #24]
      break;
 800a38a:	bf00      	nop
  }

  return sysclockfreq;
 800a38c:	69bb      	ldr	r3, [r7, #24]
}
 800a38e:	4618      	mov	r0, r3
 800a390:	3724      	adds	r7, #36	@ 0x24
 800a392:	46bd      	mov	sp, r7
 800a394:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a398:	4770      	bx	lr
 800a39a:	bf00      	nop
 800a39c:	58024400 	.word	0x58024400
 800a3a0:	03d09000 	.word	0x03d09000
 800a3a4:	003d0900 	.word	0x003d0900
 800a3a8:	017d7840 	.word	0x017d7840
 800a3ac:	46000000 	.word	0x46000000
 800a3b0:	4c742400 	.word	0x4c742400
 800a3b4:	4a742400 	.word	0x4a742400
 800a3b8:	4bbebc20 	.word	0x4bbebc20

0800a3bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a3bc:	b580      	push	{r7, lr}
 800a3be:	b082      	sub	sp, #8
 800a3c0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800a3c2:	f7ff fe81 	bl	800a0c8 <HAL_RCC_GetSysClockFreq>
 800a3c6:	4602      	mov	r2, r0
 800a3c8:	4b10      	ldr	r3, [pc, #64]	@ (800a40c <HAL_RCC_GetHCLKFreq+0x50>)
 800a3ca:	699b      	ldr	r3, [r3, #24]
 800a3cc:	0a1b      	lsrs	r3, r3, #8
 800a3ce:	f003 030f 	and.w	r3, r3, #15
 800a3d2:	490f      	ldr	r1, [pc, #60]	@ (800a410 <HAL_RCC_GetHCLKFreq+0x54>)
 800a3d4:	5ccb      	ldrb	r3, [r1, r3]
 800a3d6:	f003 031f 	and.w	r3, r3, #31
 800a3da:	fa22 f303 	lsr.w	r3, r2, r3
 800a3de:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a3e0:	4b0a      	ldr	r3, [pc, #40]	@ (800a40c <HAL_RCC_GetHCLKFreq+0x50>)
 800a3e2:	699b      	ldr	r3, [r3, #24]
 800a3e4:	f003 030f 	and.w	r3, r3, #15
 800a3e8:	4a09      	ldr	r2, [pc, #36]	@ (800a410 <HAL_RCC_GetHCLKFreq+0x54>)
 800a3ea:	5cd3      	ldrb	r3, [r2, r3]
 800a3ec:	f003 031f 	and.w	r3, r3, #31
 800a3f0:	687a      	ldr	r2, [r7, #4]
 800a3f2:	fa22 f303 	lsr.w	r3, r2, r3
 800a3f6:	4a07      	ldr	r2, [pc, #28]	@ (800a414 <HAL_RCC_GetHCLKFreq+0x58>)
 800a3f8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a3fa:	4a07      	ldr	r2, [pc, #28]	@ (800a418 <HAL_RCC_GetHCLKFreq+0x5c>)
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800a400:	4b04      	ldr	r3, [pc, #16]	@ (800a414 <HAL_RCC_GetHCLKFreq+0x58>)
 800a402:	681b      	ldr	r3, [r3, #0]
}
 800a404:	4618      	mov	r0, r3
 800a406:	3708      	adds	r7, #8
 800a408:	46bd      	mov	sp, r7
 800a40a:	bd80      	pop	{r7, pc}
 800a40c:	58024400 	.word	0x58024400
 800a410:	080132d8 	.word	0x080132d8
 800a414:	24000004 	.word	0x24000004
 800a418:	24000000 	.word	0x24000000

0800a41c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a41c:	b580      	push	{r7, lr}
 800a41e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800a420:	f7ff ffcc 	bl	800a3bc <HAL_RCC_GetHCLKFreq>
 800a424:	4602      	mov	r2, r0
 800a426:	4b06      	ldr	r3, [pc, #24]	@ (800a440 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a428:	69db      	ldr	r3, [r3, #28]
 800a42a:	091b      	lsrs	r3, r3, #4
 800a42c:	f003 0307 	and.w	r3, r3, #7
 800a430:	4904      	ldr	r1, [pc, #16]	@ (800a444 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a432:	5ccb      	ldrb	r3, [r1, r3]
 800a434:	f003 031f 	and.w	r3, r3, #31
 800a438:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800a43c:	4618      	mov	r0, r3
 800a43e:	bd80      	pop	{r7, pc}
 800a440:	58024400 	.word	0x58024400
 800a444:	080132d8 	.word	0x080132d8

0800a448 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a448:	b580      	push	{r7, lr}
 800a44a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800a44c:	f7ff ffb6 	bl	800a3bc <HAL_RCC_GetHCLKFreq>
 800a450:	4602      	mov	r2, r0
 800a452:	4b06      	ldr	r3, [pc, #24]	@ (800a46c <HAL_RCC_GetPCLK2Freq+0x24>)
 800a454:	69db      	ldr	r3, [r3, #28]
 800a456:	0a1b      	lsrs	r3, r3, #8
 800a458:	f003 0307 	and.w	r3, r3, #7
 800a45c:	4904      	ldr	r1, [pc, #16]	@ (800a470 <HAL_RCC_GetPCLK2Freq+0x28>)
 800a45e:	5ccb      	ldrb	r3, [r1, r3]
 800a460:	f003 031f 	and.w	r3, r3, #31
 800a464:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800a468:	4618      	mov	r0, r3
 800a46a:	bd80      	pop	{r7, pc}
 800a46c:	58024400 	.word	0x58024400
 800a470:	080132d8 	.word	0x080132d8

0800a474 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a474:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a478:	b0ca      	sub	sp, #296	@ 0x128
 800a47a:	af00      	add	r7, sp, #0
 800a47c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a480:	2300      	movs	r3, #0
 800a482:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a486:	2300      	movs	r3, #0
 800a488:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a48c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a490:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a494:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800a498:	2500      	movs	r5, #0
 800a49a:	ea54 0305 	orrs.w	r3, r4, r5
 800a49e:	d049      	beq.n	800a534 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800a4a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a4a4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a4a6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a4aa:	d02f      	beq.n	800a50c <HAL_RCCEx_PeriphCLKConfig+0x98>
 800a4ac:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a4b0:	d828      	bhi.n	800a504 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800a4b2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a4b6:	d01a      	beq.n	800a4ee <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800a4b8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a4bc:	d822      	bhi.n	800a504 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d003      	beq.n	800a4ca <HAL_RCCEx_PeriphCLKConfig+0x56>
 800a4c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a4c6:	d007      	beq.n	800a4d8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800a4c8:	e01c      	b.n	800a504 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a4ca:	4bb8      	ldr	r3, [pc, #736]	@ (800a7ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a4cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4ce:	4ab7      	ldr	r2, [pc, #732]	@ (800a7ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a4d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a4d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a4d6:	e01a      	b.n	800a50e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a4d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a4dc:	3308      	adds	r3, #8
 800a4de:	2102      	movs	r1, #2
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	f001 fc8f 	bl	800be04 <RCCEx_PLL2_Config>
 800a4e6:	4603      	mov	r3, r0
 800a4e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a4ec:	e00f      	b.n	800a50e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a4ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a4f2:	3328      	adds	r3, #40	@ 0x28
 800a4f4:	2102      	movs	r1, #2
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	f001 fd36 	bl	800bf68 <RCCEx_PLL3_Config>
 800a4fc:	4603      	mov	r3, r0
 800a4fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a502:	e004      	b.n	800a50e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a504:	2301      	movs	r3, #1
 800a506:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a50a:	e000      	b.n	800a50e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800a50c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a50e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a512:	2b00      	cmp	r3, #0
 800a514:	d10a      	bne.n	800a52c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800a516:	4ba5      	ldr	r3, [pc, #660]	@ (800a7ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a518:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a51a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800a51e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a522:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a524:	4aa1      	ldr	r2, [pc, #644]	@ (800a7ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a526:	430b      	orrs	r3, r1
 800a528:	6513      	str	r3, [r2, #80]	@ 0x50
 800a52a:	e003      	b.n	800a534 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a52c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a530:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a534:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a53c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800a540:	f04f 0900 	mov.w	r9, #0
 800a544:	ea58 0309 	orrs.w	r3, r8, r9
 800a548:	d047      	beq.n	800a5da <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800a54a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a54e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a550:	2b04      	cmp	r3, #4
 800a552:	d82a      	bhi.n	800a5aa <HAL_RCCEx_PeriphCLKConfig+0x136>
 800a554:	a201      	add	r2, pc, #4	@ (adr r2, 800a55c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800a556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a55a:	bf00      	nop
 800a55c:	0800a571 	.word	0x0800a571
 800a560:	0800a57f 	.word	0x0800a57f
 800a564:	0800a595 	.word	0x0800a595
 800a568:	0800a5b3 	.word	0x0800a5b3
 800a56c:	0800a5b3 	.word	0x0800a5b3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a570:	4b8e      	ldr	r3, [pc, #568]	@ (800a7ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a572:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a574:	4a8d      	ldr	r2, [pc, #564]	@ (800a7ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a576:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a57a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a57c:	e01a      	b.n	800a5b4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a57e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a582:	3308      	adds	r3, #8
 800a584:	2100      	movs	r1, #0
 800a586:	4618      	mov	r0, r3
 800a588:	f001 fc3c 	bl	800be04 <RCCEx_PLL2_Config>
 800a58c:	4603      	mov	r3, r0
 800a58e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a592:	e00f      	b.n	800a5b4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a594:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a598:	3328      	adds	r3, #40	@ 0x28
 800a59a:	2100      	movs	r1, #0
 800a59c:	4618      	mov	r0, r3
 800a59e:	f001 fce3 	bl	800bf68 <RCCEx_PLL3_Config>
 800a5a2:	4603      	mov	r3, r0
 800a5a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a5a8:	e004      	b.n	800a5b4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a5aa:	2301      	movs	r3, #1
 800a5ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a5b0:	e000      	b.n	800a5b4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800a5b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a5b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d10a      	bne.n	800a5d2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a5bc:	4b7b      	ldr	r3, [pc, #492]	@ (800a7ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a5be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a5c0:	f023 0107 	bic.w	r1, r3, #7
 800a5c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a5c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a5ca:	4a78      	ldr	r2, [pc, #480]	@ (800a7ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a5cc:	430b      	orrs	r3, r1
 800a5ce:	6513      	str	r3, [r2, #80]	@ 0x50
 800a5d0:	e003      	b.n	800a5da <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a5d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a5d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800a5da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a5de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5e2:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800a5e6:	f04f 0b00 	mov.w	fp, #0
 800a5ea:	ea5a 030b 	orrs.w	r3, sl, fp
 800a5ee:	d04c      	beq.n	800a68a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800a5f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a5f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a5f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a5fa:	d030      	beq.n	800a65e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800a5fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a600:	d829      	bhi.n	800a656 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800a602:	2bc0      	cmp	r3, #192	@ 0xc0
 800a604:	d02d      	beq.n	800a662 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800a606:	2bc0      	cmp	r3, #192	@ 0xc0
 800a608:	d825      	bhi.n	800a656 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800a60a:	2b80      	cmp	r3, #128	@ 0x80
 800a60c:	d018      	beq.n	800a640 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800a60e:	2b80      	cmp	r3, #128	@ 0x80
 800a610:	d821      	bhi.n	800a656 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800a612:	2b00      	cmp	r3, #0
 800a614:	d002      	beq.n	800a61c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800a616:	2b40      	cmp	r3, #64	@ 0x40
 800a618:	d007      	beq.n	800a62a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800a61a:	e01c      	b.n	800a656 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a61c:	4b63      	ldr	r3, [pc, #396]	@ (800a7ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a61e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a620:	4a62      	ldr	r2, [pc, #392]	@ (800a7ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a622:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a626:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800a628:	e01c      	b.n	800a664 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a62a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a62e:	3308      	adds	r3, #8
 800a630:	2100      	movs	r1, #0
 800a632:	4618      	mov	r0, r3
 800a634:	f001 fbe6 	bl	800be04 <RCCEx_PLL2_Config>
 800a638:	4603      	mov	r3, r0
 800a63a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800a63e:	e011      	b.n	800a664 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a640:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a644:	3328      	adds	r3, #40	@ 0x28
 800a646:	2100      	movs	r1, #0
 800a648:	4618      	mov	r0, r3
 800a64a:	f001 fc8d 	bl	800bf68 <RCCEx_PLL3_Config>
 800a64e:	4603      	mov	r3, r0
 800a650:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800a654:	e006      	b.n	800a664 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a656:	2301      	movs	r3, #1
 800a658:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a65c:	e002      	b.n	800a664 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800a65e:	bf00      	nop
 800a660:	e000      	b.n	800a664 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800a662:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a664:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d10a      	bne.n	800a682 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800a66c:	4b4f      	ldr	r3, [pc, #316]	@ (800a7ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a66e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a670:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800a674:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a678:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a67a:	4a4c      	ldr	r2, [pc, #304]	@ (800a7ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a67c:	430b      	orrs	r3, r1
 800a67e:	6513      	str	r3, [r2, #80]	@ 0x50
 800a680:	e003      	b.n	800a68a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a682:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a686:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800a68a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a68e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a692:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800a696:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800a69a:	2300      	movs	r3, #0
 800a69c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800a6a0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800a6a4:	460b      	mov	r3, r1
 800a6a6:	4313      	orrs	r3, r2
 800a6a8:	d053      	beq.n	800a752 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800a6aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a6ae:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800a6b2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a6b6:	d035      	beq.n	800a724 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800a6b8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a6bc:	d82e      	bhi.n	800a71c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800a6be:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a6c2:	d031      	beq.n	800a728 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800a6c4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a6c8:	d828      	bhi.n	800a71c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800a6ca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a6ce:	d01a      	beq.n	800a706 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800a6d0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a6d4:	d822      	bhi.n	800a71c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d003      	beq.n	800a6e2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800a6da:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a6de:	d007      	beq.n	800a6f0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800a6e0:	e01c      	b.n	800a71c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a6e2:	4b32      	ldr	r3, [pc, #200]	@ (800a7ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a6e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6e6:	4a31      	ldr	r2, [pc, #196]	@ (800a7ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a6e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a6ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a6ee:	e01c      	b.n	800a72a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a6f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a6f4:	3308      	adds	r3, #8
 800a6f6:	2100      	movs	r1, #0
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	f001 fb83 	bl	800be04 <RCCEx_PLL2_Config>
 800a6fe:	4603      	mov	r3, r0
 800a700:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800a704:	e011      	b.n	800a72a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a706:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a70a:	3328      	adds	r3, #40	@ 0x28
 800a70c:	2100      	movs	r1, #0
 800a70e:	4618      	mov	r0, r3
 800a710:	f001 fc2a 	bl	800bf68 <RCCEx_PLL3_Config>
 800a714:	4603      	mov	r3, r0
 800a716:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a71a:	e006      	b.n	800a72a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800a71c:	2301      	movs	r3, #1
 800a71e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a722:	e002      	b.n	800a72a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800a724:	bf00      	nop
 800a726:	e000      	b.n	800a72a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800a728:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a72a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d10b      	bne.n	800a74a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800a732:	4b1e      	ldr	r3, [pc, #120]	@ (800a7ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a734:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a736:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800a73a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a73e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800a742:	4a1a      	ldr	r2, [pc, #104]	@ (800a7ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a744:	430b      	orrs	r3, r1
 800a746:	6593      	str	r3, [r2, #88]	@ 0x58
 800a748:	e003      	b.n	800a752 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a74a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a74e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800a752:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a75a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800a75e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800a762:	2300      	movs	r3, #0
 800a764:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800a768:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800a76c:	460b      	mov	r3, r1
 800a76e:	4313      	orrs	r3, r2
 800a770:	d056      	beq.n	800a820 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800a772:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a776:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800a77a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a77e:	d038      	beq.n	800a7f2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800a780:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a784:	d831      	bhi.n	800a7ea <HAL_RCCEx_PeriphCLKConfig+0x376>
 800a786:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a78a:	d034      	beq.n	800a7f6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800a78c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a790:	d82b      	bhi.n	800a7ea <HAL_RCCEx_PeriphCLKConfig+0x376>
 800a792:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a796:	d01d      	beq.n	800a7d4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800a798:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a79c:	d825      	bhi.n	800a7ea <HAL_RCCEx_PeriphCLKConfig+0x376>
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d006      	beq.n	800a7b0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800a7a2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a7a6:	d00a      	beq.n	800a7be <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800a7a8:	e01f      	b.n	800a7ea <HAL_RCCEx_PeriphCLKConfig+0x376>
 800a7aa:	bf00      	nop
 800a7ac:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a7b0:	4ba2      	ldr	r3, [pc, #648]	@ (800aa3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a7b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a7b4:	4aa1      	ldr	r2, [pc, #644]	@ (800aa3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a7b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a7ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a7bc:	e01c      	b.n	800a7f8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a7be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a7c2:	3308      	adds	r3, #8
 800a7c4:	2100      	movs	r1, #0
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	f001 fb1c 	bl	800be04 <RCCEx_PLL2_Config>
 800a7cc:	4603      	mov	r3, r0
 800a7ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800a7d2:	e011      	b.n	800a7f8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a7d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a7d8:	3328      	adds	r3, #40	@ 0x28
 800a7da:	2100      	movs	r1, #0
 800a7dc:	4618      	mov	r0, r3
 800a7de:	f001 fbc3 	bl	800bf68 <RCCEx_PLL3_Config>
 800a7e2:	4603      	mov	r3, r0
 800a7e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a7e8:	e006      	b.n	800a7f8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800a7ea:	2301      	movs	r3, #1
 800a7ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a7f0:	e002      	b.n	800a7f8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800a7f2:	bf00      	nop
 800a7f4:	e000      	b.n	800a7f8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800a7f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a7f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d10b      	bne.n	800a818 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800a800:	4b8e      	ldr	r3, [pc, #568]	@ (800aa3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a802:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a804:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800a808:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a80c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800a810:	4a8a      	ldr	r2, [pc, #552]	@ (800aa3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a812:	430b      	orrs	r3, r1
 800a814:	6593      	str	r3, [r2, #88]	@ 0x58
 800a816:	e003      	b.n	800a820 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a818:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a81c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800a820:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a824:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a828:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800a82c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800a830:	2300      	movs	r3, #0
 800a832:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800a836:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800a83a:	460b      	mov	r3, r1
 800a83c:	4313      	orrs	r3, r2
 800a83e:	d03a      	beq.n	800a8b6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800a840:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a844:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a846:	2b30      	cmp	r3, #48	@ 0x30
 800a848:	d01f      	beq.n	800a88a <HAL_RCCEx_PeriphCLKConfig+0x416>
 800a84a:	2b30      	cmp	r3, #48	@ 0x30
 800a84c:	d819      	bhi.n	800a882 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800a84e:	2b20      	cmp	r3, #32
 800a850:	d00c      	beq.n	800a86c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800a852:	2b20      	cmp	r3, #32
 800a854:	d815      	bhi.n	800a882 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800a856:	2b00      	cmp	r3, #0
 800a858:	d019      	beq.n	800a88e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800a85a:	2b10      	cmp	r3, #16
 800a85c:	d111      	bne.n	800a882 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a85e:	4b77      	ldr	r3, [pc, #476]	@ (800aa3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a860:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a862:	4a76      	ldr	r2, [pc, #472]	@ (800aa3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a864:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a868:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800a86a:	e011      	b.n	800a890 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a86c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a870:	3308      	adds	r3, #8
 800a872:	2102      	movs	r1, #2
 800a874:	4618      	mov	r0, r3
 800a876:	f001 fac5 	bl	800be04 <RCCEx_PLL2_Config>
 800a87a:	4603      	mov	r3, r0
 800a87c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800a880:	e006      	b.n	800a890 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800a882:	2301      	movs	r3, #1
 800a884:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a888:	e002      	b.n	800a890 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800a88a:	bf00      	nop
 800a88c:	e000      	b.n	800a890 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800a88e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a890:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a894:	2b00      	cmp	r3, #0
 800a896:	d10a      	bne.n	800a8ae <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800a898:	4b68      	ldr	r3, [pc, #416]	@ (800aa3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a89a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a89c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800a8a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a8a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a8a6:	4a65      	ldr	r2, [pc, #404]	@ (800aa3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a8a8:	430b      	orrs	r3, r1
 800a8aa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a8ac:	e003      	b.n	800a8b6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a8ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a8b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800a8b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a8ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8be:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800a8c2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800a8c6:	2300      	movs	r3, #0
 800a8c8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800a8cc:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800a8d0:	460b      	mov	r3, r1
 800a8d2:	4313      	orrs	r3, r2
 800a8d4:	d051      	beq.n	800a97a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800a8d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a8da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a8dc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a8e0:	d035      	beq.n	800a94e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800a8e2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a8e6:	d82e      	bhi.n	800a946 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800a8e8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a8ec:	d031      	beq.n	800a952 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800a8ee:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a8f2:	d828      	bhi.n	800a946 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800a8f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a8f8:	d01a      	beq.n	800a930 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800a8fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a8fe:	d822      	bhi.n	800a946 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800a900:	2b00      	cmp	r3, #0
 800a902:	d003      	beq.n	800a90c <HAL_RCCEx_PeriphCLKConfig+0x498>
 800a904:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a908:	d007      	beq.n	800a91a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800a90a:	e01c      	b.n	800a946 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a90c:	4b4b      	ldr	r3, [pc, #300]	@ (800aa3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a90e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a910:	4a4a      	ldr	r2, [pc, #296]	@ (800aa3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a912:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a916:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a918:	e01c      	b.n	800a954 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a91a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a91e:	3308      	adds	r3, #8
 800a920:	2100      	movs	r1, #0
 800a922:	4618      	mov	r0, r3
 800a924:	f001 fa6e 	bl	800be04 <RCCEx_PLL2_Config>
 800a928:	4603      	mov	r3, r0
 800a92a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a92e:	e011      	b.n	800a954 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a930:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a934:	3328      	adds	r3, #40	@ 0x28
 800a936:	2100      	movs	r1, #0
 800a938:	4618      	mov	r0, r3
 800a93a:	f001 fb15 	bl	800bf68 <RCCEx_PLL3_Config>
 800a93e:	4603      	mov	r3, r0
 800a940:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a944:	e006      	b.n	800a954 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a946:	2301      	movs	r3, #1
 800a948:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a94c:	e002      	b.n	800a954 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800a94e:	bf00      	nop
 800a950:	e000      	b.n	800a954 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800a952:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a954:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d10a      	bne.n	800a972 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800a95c:	4b37      	ldr	r3, [pc, #220]	@ (800aa3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a95e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a960:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800a964:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a968:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a96a:	4a34      	ldr	r2, [pc, #208]	@ (800aa3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a96c:	430b      	orrs	r3, r1
 800a96e:	6513      	str	r3, [r2, #80]	@ 0x50
 800a970:	e003      	b.n	800a97a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a972:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a976:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800a97a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a97e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a982:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800a986:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a98a:	2300      	movs	r3, #0
 800a98c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800a990:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800a994:	460b      	mov	r3, r1
 800a996:	4313      	orrs	r3, r2
 800a998:	d056      	beq.n	800aa48 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800a99a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a99e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a9a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a9a4:	d033      	beq.n	800aa0e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800a9a6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a9aa:	d82c      	bhi.n	800aa06 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800a9ac:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a9b0:	d02f      	beq.n	800aa12 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800a9b2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a9b6:	d826      	bhi.n	800aa06 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800a9b8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a9bc:	d02b      	beq.n	800aa16 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800a9be:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a9c2:	d820      	bhi.n	800aa06 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800a9c4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a9c8:	d012      	beq.n	800a9f0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800a9ca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a9ce:	d81a      	bhi.n	800aa06 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d022      	beq.n	800aa1a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800a9d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a9d8:	d115      	bne.n	800aa06 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a9da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a9de:	3308      	adds	r3, #8
 800a9e0:	2101      	movs	r1, #1
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	f001 fa0e 	bl	800be04 <RCCEx_PLL2_Config>
 800a9e8:	4603      	mov	r3, r0
 800a9ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800a9ee:	e015      	b.n	800aa1c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a9f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a9f4:	3328      	adds	r3, #40	@ 0x28
 800a9f6:	2101      	movs	r1, #1
 800a9f8:	4618      	mov	r0, r3
 800a9fa:	f001 fab5 	bl	800bf68 <RCCEx_PLL3_Config>
 800a9fe:	4603      	mov	r3, r0
 800aa00:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800aa04:	e00a      	b.n	800aa1c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aa06:	2301      	movs	r3, #1
 800aa08:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800aa0c:	e006      	b.n	800aa1c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800aa0e:	bf00      	nop
 800aa10:	e004      	b.n	800aa1c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800aa12:	bf00      	nop
 800aa14:	e002      	b.n	800aa1c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800aa16:	bf00      	nop
 800aa18:	e000      	b.n	800aa1c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800aa1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aa1c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d10d      	bne.n	800aa40 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800aa24:	4b05      	ldr	r3, [pc, #20]	@ (800aa3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800aa26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aa28:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800aa2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aa30:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aa32:	4a02      	ldr	r2, [pc, #8]	@ (800aa3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800aa34:	430b      	orrs	r3, r1
 800aa36:	6513      	str	r3, [r2, #80]	@ 0x50
 800aa38:	e006      	b.n	800aa48 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800aa3a:	bf00      	nop
 800aa3c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa40:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800aa44:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800aa48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aa4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa50:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800aa54:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800aa58:	2300      	movs	r3, #0
 800aa5a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800aa5e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800aa62:	460b      	mov	r3, r1
 800aa64:	4313      	orrs	r3, r2
 800aa66:	d055      	beq.n	800ab14 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800aa68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aa6c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800aa70:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800aa74:	d033      	beq.n	800aade <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800aa76:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800aa7a:	d82c      	bhi.n	800aad6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800aa7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aa80:	d02f      	beq.n	800aae2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800aa82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aa86:	d826      	bhi.n	800aad6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800aa88:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800aa8c:	d02b      	beq.n	800aae6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800aa8e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800aa92:	d820      	bhi.n	800aad6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800aa94:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aa98:	d012      	beq.n	800aac0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800aa9a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aa9e:	d81a      	bhi.n	800aad6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d022      	beq.n	800aaea <HAL_RCCEx_PeriphCLKConfig+0x676>
 800aaa4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800aaa8:	d115      	bne.n	800aad6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800aaaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aaae:	3308      	adds	r3, #8
 800aab0:	2101      	movs	r1, #1
 800aab2:	4618      	mov	r0, r3
 800aab4:	f001 f9a6 	bl	800be04 <RCCEx_PLL2_Config>
 800aab8:	4603      	mov	r3, r0
 800aaba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800aabe:	e015      	b.n	800aaec <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800aac0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aac4:	3328      	adds	r3, #40	@ 0x28
 800aac6:	2101      	movs	r1, #1
 800aac8:	4618      	mov	r0, r3
 800aaca:	f001 fa4d 	bl	800bf68 <RCCEx_PLL3_Config>
 800aace:	4603      	mov	r3, r0
 800aad0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800aad4:	e00a      	b.n	800aaec <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800aad6:	2301      	movs	r3, #1
 800aad8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800aadc:	e006      	b.n	800aaec <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800aade:	bf00      	nop
 800aae0:	e004      	b.n	800aaec <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800aae2:	bf00      	nop
 800aae4:	e002      	b.n	800aaec <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800aae6:	bf00      	nop
 800aae8:	e000      	b.n	800aaec <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800aaea:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aaec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d10b      	bne.n	800ab0c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800aaf4:	4ba3      	ldr	r3, [pc, #652]	@ (800ad84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800aaf6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aaf8:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800aafc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ab00:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800ab04:	4a9f      	ldr	r2, [pc, #636]	@ (800ad84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ab06:	430b      	orrs	r3, r1
 800ab08:	6593      	str	r3, [r2, #88]	@ 0x58
 800ab0a:	e003      	b.n	800ab14 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab0c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ab10:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800ab14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ab18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab1c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800ab20:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800ab24:	2300      	movs	r3, #0
 800ab26:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800ab2a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800ab2e:	460b      	mov	r3, r1
 800ab30:	4313      	orrs	r3, r2
 800ab32:	d037      	beq.n	800aba4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800ab34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ab38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ab3a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ab3e:	d00e      	beq.n	800ab5e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800ab40:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ab44:	d816      	bhi.n	800ab74 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d018      	beq.n	800ab7c <HAL_RCCEx_PeriphCLKConfig+0x708>
 800ab4a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ab4e:	d111      	bne.n	800ab74 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ab50:	4b8c      	ldr	r3, [pc, #560]	@ (800ad84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ab52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab54:	4a8b      	ldr	r2, [pc, #556]	@ (800ad84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ab56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ab5a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800ab5c:	e00f      	b.n	800ab7e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ab5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ab62:	3308      	adds	r3, #8
 800ab64:	2101      	movs	r1, #1
 800ab66:	4618      	mov	r0, r3
 800ab68:	f001 f94c 	bl	800be04 <RCCEx_PLL2_Config>
 800ab6c:	4603      	mov	r3, r0
 800ab6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800ab72:	e004      	b.n	800ab7e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ab74:	2301      	movs	r3, #1
 800ab76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800ab7a:	e000      	b.n	800ab7e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800ab7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ab7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d10a      	bne.n	800ab9c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800ab86:	4b7f      	ldr	r3, [pc, #508]	@ (800ad84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ab88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ab8a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800ab8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ab92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ab94:	4a7b      	ldr	r2, [pc, #492]	@ (800ad84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ab96:	430b      	orrs	r3, r1
 800ab98:	6513      	str	r3, [r2, #80]	@ 0x50
 800ab9a:	e003      	b.n	800aba4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab9c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800aba0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800aba4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abac:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800abb0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800abb4:	2300      	movs	r3, #0
 800abb6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800abba:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800abbe:	460b      	mov	r3, r1
 800abc0:	4313      	orrs	r3, r2
 800abc2:	d039      	beq.n	800ac38 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800abc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800abc8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800abca:	2b03      	cmp	r3, #3
 800abcc:	d81c      	bhi.n	800ac08 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800abce:	a201      	add	r2, pc, #4	@ (adr r2, 800abd4 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800abd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abd4:	0800ac11 	.word	0x0800ac11
 800abd8:	0800abe5 	.word	0x0800abe5
 800abdc:	0800abf3 	.word	0x0800abf3
 800abe0:	0800ac11 	.word	0x0800ac11
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800abe4:	4b67      	ldr	r3, [pc, #412]	@ (800ad84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800abe6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800abe8:	4a66      	ldr	r2, [pc, #408]	@ (800ad84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800abea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800abee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800abf0:	e00f      	b.n	800ac12 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800abf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800abf6:	3308      	adds	r3, #8
 800abf8:	2102      	movs	r1, #2
 800abfa:	4618      	mov	r0, r3
 800abfc:	f001 f902 	bl	800be04 <RCCEx_PLL2_Config>
 800ac00:	4603      	mov	r3, r0
 800ac02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800ac06:	e004      	b.n	800ac12 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800ac08:	2301      	movs	r3, #1
 800ac0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800ac0e:	e000      	b.n	800ac12 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800ac10:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ac12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d10a      	bne.n	800ac30 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800ac1a:	4b5a      	ldr	r3, [pc, #360]	@ (800ad84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ac1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ac1e:	f023 0103 	bic.w	r1, r3, #3
 800ac22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ac26:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ac28:	4a56      	ldr	r2, [pc, #344]	@ (800ad84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ac2a:	430b      	orrs	r3, r1
 800ac2c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800ac2e:	e003      	b.n	800ac38 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac30:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ac34:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800ac38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ac3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac40:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800ac44:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800ac48:	2300      	movs	r3, #0
 800ac4a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800ac4e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800ac52:	460b      	mov	r3, r1
 800ac54:	4313      	orrs	r3, r2
 800ac56:	f000 809f 	beq.w	800ad98 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ac5a:	4b4b      	ldr	r3, [pc, #300]	@ (800ad88 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	4a4a      	ldr	r2, [pc, #296]	@ (800ad88 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800ac60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ac64:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800ac66:	f7f7 faeb 	bl	8002240 <HAL_GetTick>
 800ac6a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ac6e:	e00b      	b.n	800ac88 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ac70:	f7f7 fae6 	bl	8002240 <HAL_GetTick>
 800ac74:	4602      	mov	r2, r0
 800ac76:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800ac7a:	1ad3      	subs	r3, r2, r3
 800ac7c:	2b64      	cmp	r3, #100	@ 0x64
 800ac7e:	d903      	bls.n	800ac88 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800ac80:	2303      	movs	r3, #3
 800ac82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800ac86:	e005      	b.n	800ac94 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ac88:	4b3f      	ldr	r3, [pc, #252]	@ (800ad88 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d0ed      	beq.n	800ac70 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800ac94:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d179      	bne.n	800ad90 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800ac9c:	4b39      	ldr	r3, [pc, #228]	@ (800ad84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ac9e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800aca0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aca4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800aca8:	4053      	eors	r3, r2
 800acaa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d015      	beq.n	800acde <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800acb2:	4b34      	ldr	r3, [pc, #208]	@ (800ad84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800acb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800acb6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800acba:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800acbe:	4b31      	ldr	r3, [pc, #196]	@ (800ad84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800acc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800acc2:	4a30      	ldr	r2, [pc, #192]	@ (800ad84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800acc4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800acc8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800acca:	4b2e      	ldr	r3, [pc, #184]	@ (800ad84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800accc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800acce:	4a2d      	ldr	r2, [pc, #180]	@ (800ad84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800acd0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800acd4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800acd6:	4a2b      	ldr	r2, [pc, #172]	@ (800ad84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800acd8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800acdc:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800acde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ace2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800ace6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800acea:	d118      	bne.n	800ad1e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800acec:	f7f7 faa8 	bl	8002240 <HAL_GetTick>
 800acf0:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800acf4:	e00d      	b.n	800ad12 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800acf6:	f7f7 faa3 	bl	8002240 <HAL_GetTick>
 800acfa:	4602      	mov	r2, r0
 800acfc:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800ad00:	1ad2      	subs	r2, r2, r3
 800ad02:	f241 3388 	movw	r3, #5000	@ 0x1388
 800ad06:	429a      	cmp	r2, r3
 800ad08:	d903      	bls.n	800ad12 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800ad0a:	2303      	movs	r3, #3
 800ad0c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 800ad10:	e005      	b.n	800ad1e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ad12:	4b1c      	ldr	r3, [pc, #112]	@ (800ad84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ad14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ad16:	f003 0302 	and.w	r3, r3, #2
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d0eb      	beq.n	800acf6 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800ad1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d129      	bne.n	800ad7a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800ad26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ad2a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800ad2e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ad32:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ad36:	d10e      	bne.n	800ad56 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800ad38:	4b12      	ldr	r3, [pc, #72]	@ (800ad84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ad3a:	691b      	ldr	r3, [r3, #16]
 800ad3c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800ad40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ad44:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800ad48:	091a      	lsrs	r2, r3, #4
 800ad4a:	4b10      	ldr	r3, [pc, #64]	@ (800ad8c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800ad4c:	4013      	ands	r3, r2
 800ad4e:	4a0d      	ldr	r2, [pc, #52]	@ (800ad84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ad50:	430b      	orrs	r3, r1
 800ad52:	6113      	str	r3, [r2, #16]
 800ad54:	e005      	b.n	800ad62 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800ad56:	4b0b      	ldr	r3, [pc, #44]	@ (800ad84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ad58:	691b      	ldr	r3, [r3, #16]
 800ad5a:	4a0a      	ldr	r2, [pc, #40]	@ (800ad84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ad5c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800ad60:	6113      	str	r3, [r2, #16]
 800ad62:	4b08      	ldr	r3, [pc, #32]	@ (800ad84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ad64:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800ad66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ad6a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800ad6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ad72:	4a04      	ldr	r2, [pc, #16]	@ (800ad84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ad74:	430b      	orrs	r3, r1
 800ad76:	6713      	str	r3, [r2, #112]	@ 0x70
 800ad78:	e00e      	b.n	800ad98 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800ad7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ad7e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800ad82:	e009      	b.n	800ad98 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800ad84:	58024400 	.word	0x58024400
 800ad88:	58024800 	.word	0x58024800
 800ad8c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad90:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ad94:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800ad98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ad9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ada0:	f002 0301 	and.w	r3, r2, #1
 800ada4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800ada8:	2300      	movs	r3, #0
 800adaa:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800adae:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800adb2:	460b      	mov	r3, r1
 800adb4:	4313      	orrs	r3, r2
 800adb6:	f000 8089 	beq.w	800aecc <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800adba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800adbe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800adc0:	2b28      	cmp	r3, #40	@ 0x28
 800adc2:	d86b      	bhi.n	800ae9c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800adc4:	a201      	add	r2, pc, #4	@ (adr r2, 800adcc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800adc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adca:	bf00      	nop
 800adcc:	0800aea5 	.word	0x0800aea5
 800add0:	0800ae9d 	.word	0x0800ae9d
 800add4:	0800ae9d 	.word	0x0800ae9d
 800add8:	0800ae9d 	.word	0x0800ae9d
 800addc:	0800ae9d 	.word	0x0800ae9d
 800ade0:	0800ae9d 	.word	0x0800ae9d
 800ade4:	0800ae9d 	.word	0x0800ae9d
 800ade8:	0800ae9d 	.word	0x0800ae9d
 800adec:	0800ae71 	.word	0x0800ae71
 800adf0:	0800ae9d 	.word	0x0800ae9d
 800adf4:	0800ae9d 	.word	0x0800ae9d
 800adf8:	0800ae9d 	.word	0x0800ae9d
 800adfc:	0800ae9d 	.word	0x0800ae9d
 800ae00:	0800ae9d 	.word	0x0800ae9d
 800ae04:	0800ae9d 	.word	0x0800ae9d
 800ae08:	0800ae9d 	.word	0x0800ae9d
 800ae0c:	0800ae87 	.word	0x0800ae87
 800ae10:	0800ae9d 	.word	0x0800ae9d
 800ae14:	0800ae9d 	.word	0x0800ae9d
 800ae18:	0800ae9d 	.word	0x0800ae9d
 800ae1c:	0800ae9d 	.word	0x0800ae9d
 800ae20:	0800ae9d 	.word	0x0800ae9d
 800ae24:	0800ae9d 	.word	0x0800ae9d
 800ae28:	0800ae9d 	.word	0x0800ae9d
 800ae2c:	0800aea5 	.word	0x0800aea5
 800ae30:	0800ae9d 	.word	0x0800ae9d
 800ae34:	0800ae9d 	.word	0x0800ae9d
 800ae38:	0800ae9d 	.word	0x0800ae9d
 800ae3c:	0800ae9d 	.word	0x0800ae9d
 800ae40:	0800ae9d 	.word	0x0800ae9d
 800ae44:	0800ae9d 	.word	0x0800ae9d
 800ae48:	0800ae9d 	.word	0x0800ae9d
 800ae4c:	0800aea5 	.word	0x0800aea5
 800ae50:	0800ae9d 	.word	0x0800ae9d
 800ae54:	0800ae9d 	.word	0x0800ae9d
 800ae58:	0800ae9d 	.word	0x0800ae9d
 800ae5c:	0800ae9d 	.word	0x0800ae9d
 800ae60:	0800ae9d 	.word	0x0800ae9d
 800ae64:	0800ae9d 	.word	0x0800ae9d
 800ae68:	0800ae9d 	.word	0x0800ae9d
 800ae6c:	0800aea5 	.word	0x0800aea5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ae70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ae74:	3308      	adds	r3, #8
 800ae76:	2101      	movs	r1, #1
 800ae78:	4618      	mov	r0, r3
 800ae7a:	f000 ffc3 	bl	800be04 <RCCEx_PLL2_Config>
 800ae7e:	4603      	mov	r3, r0
 800ae80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800ae84:	e00f      	b.n	800aea6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ae86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ae8a:	3328      	adds	r3, #40	@ 0x28
 800ae8c:	2101      	movs	r1, #1
 800ae8e:	4618      	mov	r0, r3
 800ae90:	f001 f86a 	bl	800bf68 <RCCEx_PLL3_Config>
 800ae94:	4603      	mov	r3, r0
 800ae96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800ae9a:	e004      	b.n	800aea6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ae9c:	2301      	movs	r3, #1
 800ae9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800aea2:	e000      	b.n	800aea6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800aea4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aea6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d10a      	bne.n	800aec4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800aeae:	4bbf      	ldr	r3, [pc, #764]	@ (800b1ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800aeb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aeb2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800aeb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aeba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800aebc:	4abb      	ldr	r2, [pc, #748]	@ (800b1ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800aebe:	430b      	orrs	r3, r1
 800aec0:	6553      	str	r3, [r2, #84]	@ 0x54
 800aec2:	e003      	b.n	800aecc <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aec4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800aec8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800aecc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aed4:	f002 0302 	and.w	r3, r2, #2
 800aed8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800aedc:	2300      	movs	r3, #0
 800aede:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800aee2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800aee6:	460b      	mov	r3, r1
 800aee8:	4313      	orrs	r3, r2
 800aeea:	d041      	beq.n	800af70 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800aeec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aef0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800aef2:	2b05      	cmp	r3, #5
 800aef4:	d824      	bhi.n	800af40 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800aef6:	a201      	add	r2, pc, #4	@ (adr r2, 800aefc <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800aef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aefc:	0800af49 	.word	0x0800af49
 800af00:	0800af15 	.word	0x0800af15
 800af04:	0800af2b 	.word	0x0800af2b
 800af08:	0800af49 	.word	0x0800af49
 800af0c:	0800af49 	.word	0x0800af49
 800af10:	0800af49 	.word	0x0800af49
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800af14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800af18:	3308      	adds	r3, #8
 800af1a:	2101      	movs	r1, #1
 800af1c:	4618      	mov	r0, r3
 800af1e:	f000 ff71 	bl	800be04 <RCCEx_PLL2_Config>
 800af22:	4603      	mov	r3, r0
 800af24:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800af28:	e00f      	b.n	800af4a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800af2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800af2e:	3328      	adds	r3, #40	@ 0x28
 800af30:	2101      	movs	r1, #1
 800af32:	4618      	mov	r0, r3
 800af34:	f001 f818 	bl	800bf68 <RCCEx_PLL3_Config>
 800af38:	4603      	mov	r3, r0
 800af3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800af3e:	e004      	b.n	800af4a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800af40:	2301      	movs	r3, #1
 800af42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800af46:	e000      	b.n	800af4a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800af48:	bf00      	nop
    }

    if (ret == HAL_OK)
 800af4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d10a      	bne.n	800af68 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800af52:	4b96      	ldr	r3, [pc, #600]	@ (800b1ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800af54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800af56:	f023 0107 	bic.w	r1, r3, #7
 800af5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800af5e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800af60:	4a92      	ldr	r2, [pc, #584]	@ (800b1ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800af62:	430b      	orrs	r3, r1
 800af64:	6553      	str	r3, [r2, #84]	@ 0x54
 800af66:	e003      	b.n	800af70 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af68:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800af6c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800af70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800af74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af78:	f002 0304 	and.w	r3, r2, #4
 800af7c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800af80:	2300      	movs	r3, #0
 800af82:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800af86:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800af8a:	460b      	mov	r3, r1
 800af8c:	4313      	orrs	r3, r2
 800af8e:	d044      	beq.n	800b01a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800af90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800af94:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800af98:	2b05      	cmp	r3, #5
 800af9a:	d825      	bhi.n	800afe8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800af9c:	a201      	add	r2, pc, #4	@ (adr r2, 800afa4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800af9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afa2:	bf00      	nop
 800afa4:	0800aff1 	.word	0x0800aff1
 800afa8:	0800afbd 	.word	0x0800afbd
 800afac:	0800afd3 	.word	0x0800afd3
 800afb0:	0800aff1 	.word	0x0800aff1
 800afb4:	0800aff1 	.word	0x0800aff1
 800afb8:	0800aff1 	.word	0x0800aff1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800afbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800afc0:	3308      	adds	r3, #8
 800afc2:	2101      	movs	r1, #1
 800afc4:	4618      	mov	r0, r3
 800afc6:	f000 ff1d 	bl	800be04 <RCCEx_PLL2_Config>
 800afca:	4603      	mov	r3, r0
 800afcc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800afd0:	e00f      	b.n	800aff2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800afd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800afd6:	3328      	adds	r3, #40	@ 0x28
 800afd8:	2101      	movs	r1, #1
 800afda:	4618      	mov	r0, r3
 800afdc:	f000 ffc4 	bl	800bf68 <RCCEx_PLL3_Config>
 800afe0:	4603      	mov	r3, r0
 800afe2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800afe6:	e004      	b.n	800aff2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800afe8:	2301      	movs	r3, #1
 800afea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800afee:	e000      	b.n	800aff2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800aff0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aff2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d10b      	bne.n	800b012 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800affa:	4b6c      	ldr	r3, [pc, #432]	@ (800b1ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800affc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800affe:	f023 0107 	bic.w	r1, r3, #7
 800b002:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b006:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b00a:	4a68      	ldr	r2, [pc, #416]	@ (800b1ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b00c:	430b      	orrs	r3, r1
 800b00e:	6593      	str	r3, [r2, #88]	@ 0x58
 800b010:	e003      	b.n	800b01a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b012:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b016:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b01a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b01e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b022:	f002 0320 	and.w	r3, r2, #32
 800b026:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800b02a:	2300      	movs	r3, #0
 800b02c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b030:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800b034:	460b      	mov	r3, r1
 800b036:	4313      	orrs	r3, r2
 800b038:	d055      	beq.n	800b0e6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800b03a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b03e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b042:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b046:	d033      	beq.n	800b0b0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800b048:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b04c:	d82c      	bhi.n	800b0a8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800b04e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b052:	d02f      	beq.n	800b0b4 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800b054:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b058:	d826      	bhi.n	800b0a8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800b05a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b05e:	d02b      	beq.n	800b0b8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800b060:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b064:	d820      	bhi.n	800b0a8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800b066:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b06a:	d012      	beq.n	800b092 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800b06c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b070:	d81a      	bhi.n	800b0a8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800b072:	2b00      	cmp	r3, #0
 800b074:	d022      	beq.n	800b0bc <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800b076:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b07a:	d115      	bne.n	800b0a8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b07c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b080:	3308      	adds	r3, #8
 800b082:	2100      	movs	r1, #0
 800b084:	4618      	mov	r0, r3
 800b086:	f000 febd 	bl	800be04 <RCCEx_PLL2_Config>
 800b08a:	4603      	mov	r3, r0
 800b08c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b090:	e015      	b.n	800b0be <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b092:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b096:	3328      	adds	r3, #40	@ 0x28
 800b098:	2102      	movs	r1, #2
 800b09a:	4618      	mov	r0, r3
 800b09c:	f000 ff64 	bl	800bf68 <RCCEx_PLL3_Config>
 800b0a0:	4603      	mov	r3, r0
 800b0a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b0a6:	e00a      	b.n	800b0be <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b0a8:	2301      	movs	r3, #1
 800b0aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800b0ae:	e006      	b.n	800b0be <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800b0b0:	bf00      	nop
 800b0b2:	e004      	b.n	800b0be <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800b0b4:	bf00      	nop
 800b0b6:	e002      	b.n	800b0be <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800b0b8:	bf00      	nop
 800b0ba:	e000      	b.n	800b0be <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800b0bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b0be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d10b      	bne.n	800b0de <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b0c6:	4b39      	ldr	r3, [pc, #228]	@ (800b1ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b0c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b0ca:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800b0ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b0d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b0d6:	4a35      	ldr	r2, [pc, #212]	@ (800b1ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b0d8:	430b      	orrs	r3, r1
 800b0da:	6553      	str	r3, [r2, #84]	@ 0x54
 800b0dc:	e003      	b.n	800b0e6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b0de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b0e2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800b0e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b0ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0ee:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800b0f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800b0fc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800b100:	460b      	mov	r3, r1
 800b102:	4313      	orrs	r3, r2
 800b104:	d058      	beq.n	800b1b8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800b106:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b10a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b10e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800b112:	d033      	beq.n	800b17c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800b114:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800b118:	d82c      	bhi.n	800b174 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800b11a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b11e:	d02f      	beq.n	800b180 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800b120:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b124:	d826      	bhi.n	800b174 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800b126:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b12a:	d02b      	beq.n	800b184 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800b12c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b130:	d820      	bhi.n	800b174 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800b132:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b136:	d012      	beq.n	800b15e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800b138:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b13c:	d81a      	bhi.n	800b174 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d022      	beq.n	800b188 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800b142:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b146:	d115      	bne.n	800b174 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b148:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b14c:	3308      	adds	r3, #8
 800b14e:	2100      	movs	r1, #0
 800b150:	4618      	mov	r0, r3
 800b152:	f000 fe57 	bl	800be04 <RCCEx_PLL2_Config>
 800b156:	4603      	mov	r3, r0
 800b158:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b15c:	e015      	b.n	800b18a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b15e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b162:	3328      	adds	r3, #40	@ 0x28
 800b164:	2102      	movs	r1, #2
 800b166:	4618      	mov	r0, r3
 800b168:	f000 fefe 	bl	800bf68 <RCCEx_PLL3_Config>
 800b16c:	4603      	mov	r3, r0
 800b16e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b172:	e00a      	b.n	800b18a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b174:	2301      	movs	r3, #1
 800b176:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800b17a:	e006      	b.n	800b18a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800b17c:	bf00      	nop
 800b17e:	e004      	b.n	800b18a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800b180:	bf00      	nop
 800b182:	e002      	b.n	800b18a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800b184:	bf00      	nop
 800b186:	e000      	b.n	800b18a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800b188:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b18a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d10e      	bne.n	800b1b0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b192:	4b06      	ldr	r3, [pc, #24]	@ (800b1ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b194:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b196:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800b19a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b19e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b1a2:	4a02      	ldr	r2, [pc, #8]	@ (800b1ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b1a4:	430b      	orrs	r3, r1
 800b1a6:	6593      	str	r3, [r2, #88]	@ 0x58
 800b1a8:	e006      	b.n	800b1b8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800b1aa:	bf00      	nop
 800b1ac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b1b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b1b4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800b1b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b1bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1c0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800b1c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b1c8:	2300      	movs	r3, #0
 800b1ca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800b1ce:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800b1d2:	460b      	mov	r3, r1
 800b1d4:	4313      	orrs	r3, r2
 800b1d6:	d055      	beq.n	800b284 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800b1d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b1dc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b1e0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800b1e4:	d033      	beq.n	800b24e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800b1e6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800b1ea:	d82c      	bhi.n	800b246 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800b1ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b1f0:	d02f      	beq.n	800b252 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800b1f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b1f6:	d826      	bhi.n	800b246 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800b1f8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800b1fc:	d02b      	beq.n	800b256 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800b1fe:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800b202:	d820      	bhi.n	800b246 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800b204:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b208:	d012      	beq.n	800b230 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800b20a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b20e:	d81a      	bhi.n	800b246 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800b210:	2b00      	cmp	r3, #0
 800b212:	d022      	beq.n	800b25a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800b214:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b218:	d115      	bne.n	800b246 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b21a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b21e:	3308      	adds	r3, #8
 800b220:	2100      	movs	r1, #0
 800b222:	4618      	mov	r0, r3
 800b224:	f000 fdee 	bl	800be04 <RCCEx_PLL2_Config>
 800b228:	4603      	mov	r3, r0
 800b22a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b22e:	e015      	b.n	800b25c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b230:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b234:	3328      	adds	r3, #40	@ 0x28
 800b236:	2102      	movs	r1, #2
 800b238:	4618      	mov	r0, r3
 800b23a:	f000 fe95 	bl	800bf68 <RCCEx_PLL3_Config>
 800b23e:	4603      	mov	r3, r0
 800b240:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b244:	e00a      	b.n	800b25c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b246:	2301      	movs	r3, #1
 800b248:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800b24c:	e006      	b.n	800b25c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800b24e:	bf00      	nop
 800b250:	e004      	b.n	800b25c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800b252:	bf00      	nop
 800b254:	e002      	b.n	800b25c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800b256:	bf00      	nop
 800b258:	e000      	b.n	800b25c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800b25a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b25c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b260:	2b00      	cmp	r3, #0
 800b262:	d10b      	bne.n	800b27c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800b264:	4ba1      	ldr	r3, [pc, #644]	@ (800b4ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b266:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b268:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800b26c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b270:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b274:	4a9d      	ldr	r2, [pc, #628]	@ (800b4ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b276:	430b      	orrs	r3, r1
 800b278:	6593      	str	r3, [r2, #88]	@ 0x58
 800b27a:	e003      	b.n	800b284 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b27c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b280:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800b284:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b28c:	f002 0308 	and.w	r3, r2, #8
 800b290:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b294:	2300      	movs	r3, #0
 800b296:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b29a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800b29e:	460b      	mov	r3, r1
 800b2a0:	4313      	orrs	r3, r2
 800b2a2:	d01e      	beq.n	800b2e2 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800b2a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b2a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b2ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b2b0:	d10c      	bne.n	800b2cc <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b2b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b2b6:	3328      	adds	r3, #40	@ 0x28
 800b2b8:	2102      	movs	r1, #2
 800b2ba:	4618      	mov	r0, r3
 800b2bc:	f000 fe54 	bl	800bf68 <RCCEx_PLL3_Config>
 800b2c0:	4603      	mov	r3, r0
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d002      	beq.n	800b2cc <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800b2c6:	2301      	movs	r3, #1
 800b2c8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800b2cc:	4b87      	ldr	r3, [pc, #540]	@ (800b4ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b2ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b2d0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b2d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b2d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b2dc:	4a83      	ldr	r2, [pc, #524]	@ (800b4ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b2de:	430b      	orrs	r3, r1
 800b2e0:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b2e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b2e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2ea:	f002 0310 	and.w	r3, r2, #16
 800b2ee:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b2f2:	2300      	movs	r3, #0
 800b2f4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800b2f8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800b2fc:	460b      	mov	r3, r1
 800b2fe:	4313      	orrs	r3, r2
 800b300:	d01e      	beq.n	800b340 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800b302:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b306:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b30a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b30e:	d10c      	bne.n	800b32a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b310:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b314:	3328      	adds	r3, #40	@ 0x28
 800b316:	2102      	movs	r1, #2
 800b318:	4618      	mov	r0, r3
 800b31a:	f000 fe25 	bl	800bf68 <RCCEx_PLL3_Config>
 800b31e:	4603      	mov	r3, r0
 800b320:	2b00      	cmp	r3, #0
 800b322:	d002      	beq.n	800b32a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800b324:	2301      	movs	r3, #1
 800b326:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b32a:	4b70      	ldr	r3, [pc, #448]	@ (800b4ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b32c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b32e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800b332:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b336:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b33a:	4a6c      	ldr	r2, [pc, #432]	@ (800b4ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b33c:	430b      	orrs	r3, r1
 800b33e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b340:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b344:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b348:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800b34c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b350:	2300      	movs	r3, #0
 800b352:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b356:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800b35a:	460b      	mov	r3, r1
 800b35c:	4313      	orrs	r3, r2
 800b35e:	d03e      	beq.n	800b3de <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800b360:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b364:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b368:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b36c:	d022      	beq.n	800b3b4 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800b36e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b372:	d81b      	bhi.n	800b3ac <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800b374:	2b00      	cmp	r3, #0
 800b376:	d003      	beq.n	800b380 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800b378:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b37c:	d00b      	beq.n	800b396 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800b37e:	e015      	b.n	800b3ac <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b380:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b384:	3308      	adds	r3, #8
 800b386:	2100      	movs	r1, #0
 800b388:	4618      	mov	r0, r3
 800b38a:	f000 fd3b 	bl	800be04 <RCCEx_PLL2_Config>
 800b38e:	4603      	mov	r3, r0
 800b390:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b394:	e00f      	b.n	800b3b6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b396:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b39a:	3328      	adds	r3, #40	@ 0x28
 800b39c:	2102      	movs	r1, #2
 800b39e:	4618      	mov	r0, r3
 800b3a0:	f000 fde2 	bl	800bf68 <RCCEx_PLL3_Config>
 800b3a4:	4603      	mov	r3, r0
 800b3a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b3aa:	e004      	b.n	800b3b6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b3ac:	2301      	movs	r3, #1
 800b3ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800b3b2:	e000      	b.n	800b3b6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800b3b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b3b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d10b      	bne.n	800b3d6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b3be:	4b4b      	ldr	r3, [pc, #300]	@ (800b4ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b3c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b3c2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800b3c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b3ca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b3ce:	4a47      	ldr	r2, [pc, #284]	@ (800b4ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b3d0:	430b      	orrs	r3, r1
 800b3d2:	6593      	str	r3, [r2, #88]	@ 0x58
 800b3d4:	e003      	b.n	800b3de <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b3d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b3da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b3de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b3e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3e6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800b3ea:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b3ec:	2300      	movs	r3, #0
 800b3ee:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b3f0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800b3f4:	460b      	mov	r3, r1
 800b3f6:	4313      	orrs	r3, r2
 800b3f8:	d03b      	beq.n	800b472 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800b3fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b3fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b402:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b406:	d01f      	beq.n	800b448 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800b408:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b40c:	d818      	bhi.n	800b440 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800b40e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b412:	d003      	beq.n	800b41c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800b414:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b418:	d007      	beq.n	800b42a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800b41a:	e011      	b.n	800b440 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b41c:	4b33      	ldr	r3, [pc, #204]	@ (800b4ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b41e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b420:	4a32      	ldr	r2, [pc, #200]	@ (800b4ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b422:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b426:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800b428:	e00f      	b.n	800b44a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b42a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b42e:	3328      	adds	r3, #40	@ 0x28
 800b430:	2101      	movs	r1, #1
 800b432:	4618      	mov	r0, r3
 800b434:	f000 fd98 	bl	800bf68 <RCCEx_PLL3_Config>
 800b438:	4603      	mov	r3, r0
 800b43a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800b43e:	e004      	b.n	800b44a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b440:	2301      	movs	r3, #1
 800b442:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800b446:	e000      	b.n	800b44a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800b448:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b44a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d10b      	bne.n	800b46a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b452:	4b26      	ldr	r3, [pc, #152]	@ (800b4ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b454:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b456:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800b45a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b45e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b462:	4a22      	ldr	r2, [pc, #136]	@ (800b4ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b464:	430b      	orrs	r3, r1
 800b466:	6553      	str	r3, [r2, #84]	@ 0x54
 800b468:	e003      	b.n	800b472 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b46a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b46e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800b472:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b47a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800b47e:	673b      	str	r3, [r7, #112]	@ 0x70
 800b480:	2300      	movs	r3, #0
 800b482:	677b      	str	r3, [r7, #116]	@ 0x74
 800b484:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800b488:	460b      	mov	r3, r1
 800b48a:	4313      	orrs	r3, r2
 800b48c:	d034      	beq.n	800b4f8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800b48e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b492:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b494:	2b00      	cmp	r3, #0
 800b496:	d003      	beq.n	800b4a0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800b498:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b49c:	d007      	beq.n	800b4ae <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800b49e:	e011      	b.n	800b4c4 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b4a0:	4b12      	ldr	r3, [pc, #72]	@ (800b4ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b4a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4a4:	4a11      	ldr	r2, [pc, #68]	@ (800b4ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b4a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b4aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800b4ac:	e00e      	b.n	800b4cc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b4ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b4b2:	3308      	adds	r3, #8
 800b4b4:	2102      	movs	r1, #2
 800b4b6:	4618      	mov	r0, r3
 800b4b8:	f000 fca4 	bl	800be04 <RCCEx_PLL2_Config>
 800b4bc:	4603      	mov	r3, r0
 800b4be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800b4c2:	e003      	b.n	800b4cc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800b4c4:	2301      	movs	r3, #1
 800b4c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800b4ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b4cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d10d      	bne.n	800b4f0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800b4d4:	4b05      	ldr	r3, [pc, #20]	@ (800b4ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b4d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b4d8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b4dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b4e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b4e2:	4a02      	ldr	r2, [pc, #8]	@ (800b4ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b4e4:	430b      	orrs	r3, r1
 800b4e6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800b4e8:	e006      	b.n	800b4f8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800b4ea:	bf00      	nop
 800b4ec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b4f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b4f4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b4f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b4fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b500:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800b504:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b506:	2300      	movs	r3, #0
 800b508:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800b50a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800b50e:	460b      	mov	r3, r1
 800b510:	4313      	orrs	r3, r2
 800b512:	d00c      	beq.n	800b52e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b514:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b518:	3328      	adds	r3, #40	@ 0x28
 800b51a:	2102      	movs	r1, #2
 800b51c:	4618      	mov	r0, r3
 800b51e:	f000 fd23 	bl	800bf68 <RCCEx_PLL3_Config>
 800b522:	4603      	mov	r3, r0
 800b524:	2b00      	cmp	r3, #0
 800b526:	d002      	beq.n	800b52e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800b528:	2301      	movs	r3, #1
 800b52a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800b52e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b532:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b536:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800b53a:	663b      	str	r3, [r7, #96]	@ 0x60
 800b53c:	2300      	movs	r3, #0
 800b53e:	667b      	str	r3, [r7, #100]	@ 0x64
 800b540:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800b544:	460b      	mov	r3, r1
 800b546:	4313      	orrs	r3, r2
 800b548:	d038      	beq.n	800b5bc <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800b54a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b54e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b552:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b556:	d018      	beq.n	800b58a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800b558:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b55c:	d811      	bhi.n	800b582 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800b55e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b562:	d014      	beq.n	800b58e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800b564:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b568:	d80b      	bhi.n	800b582 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d011      	beq.n	800b592 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800b56e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b572:	d106      	bne.n	800b582 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b574:	4bc3      	ldr	r3, [pc, #780]	@ (800b884 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b576:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b578:	4ac2      	ldr	r2, [pc, #776]	@ (800b884 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b57a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b57e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800b580:	e008      	b.n	800b594 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b582:	2301      	movs	r3, #1
 800b584:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800b588:	e004      	b.n	800b594 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800b58a:	bf00      	nop
 800b58c:	e002      	b.n	800b594 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800b58e:	bf00      	nop
 800b590:	e000      	b.n	800b594 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800b592:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b594:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d10b      	bne.n	800b5b4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b59c:	4bb9      	ldr	r3, [pc, #740]	@ (800b884 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b59e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b5a0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800b5a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b5a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b5ac:	4ab5      	ldr	r2, [pc, #724]	@ (800b884 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b5ae:	430b      	orrs	r3, r1
 800b5b0:	6553      	str	r3, [r2, #84]	@ 0x54
 800b5b2:	e003      	b.n	800b5bc <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b5b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b5b8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800b5bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b5c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5c4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800b5c8:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b5ca:	2300      	movs	r3, #0
 800b5cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b5ce:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800b5d2:	460b      	mov	r3, r1
 800b5d4:	4313      	orrs	r3, r2
 800b5d6:	d009      	beq.n	800b5ec <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800b5d8:	4baa      	ldr	r3, [pc, #680]	@ (800b884 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b5da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b5dc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800b5e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b5e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b5e6:	4aa7      	ldr	r2, [pc, #668]	@ (800b884 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b5e8:	430b      	orrs	r3, r1
 800b5ea:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800b5ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b5f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5f4:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800b5f8:	653b      	str	r3, [r7, #80]	@ 0x50
 800b5fa:	2300      	movs	r3, #0
 800b5fc:	657b      	str	r3, [r7, #84]	@ 0x54
 800b5fe:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800b602:	460b      	mov	r3, r1
 800b604:	4313      	orrs	r3, r2
 800b606:	d00a      	beq.n	800b61e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800b608:	4b9e      	ldr	r3, [pc, #632]	@ (800b884 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b60a:	691b      	ldr	r3, [r3, #16]
 800b60c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800b610:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b614:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800b618:	4a9a      	ldr	r2, [pc, #616]	@ (800b884 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b61a:	430b      	orrs	r3, r1
 800b61c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800b61e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b622:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b626:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800b62a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b62c:	2300      	movs	r3, #0
 800b62e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b630:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800b634:	460b      	mov	r3, r1
 800b636:	4313      	orrs	r3, r2
 800b638:	d009      	beq.n	800b64e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800b63a:	4b92      	ldr	r3, [pc, #584]	@ (800b884 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b63c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b63e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800b642:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b646:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b648:	4a8e      	ldr	r2, [pc, #568]	@ (800b884 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b64a:	430b      	orrs	r3, r1
 800b64c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800b64e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b652:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b656:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800b65a:	643b      	str	r3, [r7, #64]	@ 0x40
 800b65c:	2300      	movs	r3, #0
 800b65e:	647b      	str	r3, [r7, #68]	@ 0x44
 800b660:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800b664:	460b      	mov	r3, r1
 800b666:	4313      	orrs	r3, r2
 800b668:	d00e      	beq.n	800b688 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b66a:	4b86      	ldr	r3, [pc, #536]	@ (800b884 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b66c:	691b      	ldr	r3, [r3, #16]
 800b66e:	4a85      	ldr	r2, [pc, #532]	@ (800b884 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b670:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800b674:	6113      	str	r3, [r2, #16]
 800b676:	4b83      	ldr	r3, [pc, #524]	@ (800b884 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b678:	6919      	ldr	r1, [r3, #16]
 800b67a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b67e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800b682:	4a80      	ldr	r2, [pc, #512]	@ (800b884 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b684:	430b      	orrs	r3, r1
 800b686:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800b688:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b68c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b690:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800b694:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b696:	2300      	movs	r3, #0
 800b698:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b69a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800b69e:	460b      	mov	r3, r1
 800b6a0:	4313      	orrs	r3, r2
 800b6a2:	d009      	beq.n	800b6b8 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800b6a4:	4b77      	ldr	r3, [pc, #476]	@ (800b884 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b6a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b6a8:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800b6ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b6b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b6b2:	4a74      	ldr	r2, [pc, #464]	@ (800b884 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b6b4:	430b      	orrs	r3, r1
 800b6b6:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800b6b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b6bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6c0:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800b6c4:	633b      	str	r3, [r7, #48]	@ 0x30
 800b6c6:	2300      	movs	r3, #0
 800b6c8:	637b      	str	r3, [r7, #52]	@ 0x34
 800b6ca:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800b6ce:	460b      	mov	r3, r1
 800b6d0:	4313      	orrs	r3, r2
 800b6d2:	d00a      	beq.n	800b6ea <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800b6d4:	4b6b      	ldr	r3, [pc, #428]	@ (800b884 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b6d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b6d8:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800b6dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b6e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b6e4:	4a67      	ldr	r2, [pc, #412]	@ (800b884 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b6e6:	430b      	orrs	r3, r1
 800b6e8:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800b6ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b6ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6f2:	2100      	movs	r1, #0
 800b6f4:	62b9      	str	r1, [r7, #40]	@ 0x28
 800b6f6:	f003 0301 	and.w	r3, r3, #1
 800b6fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b6fc:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800b700:	460b      	mov	r3, r1
 800b702:	4313      	orrs	r3, r2
 800b704:	d011      	beq.n	800b72a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b706:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b70a:	3308      	adds	r3, #8
 800b70c:	2100      	movs	r1, #0
 800b70e:	4618      	mov	r0, r3
 800b710:	f000 fb78 	bl	800be04 <RCCEx_PLL2_Config>
 800b714:	4603      	mov	r3, r0
 800b716:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800b71a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d003      	beq.n	800b72a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b722:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b726:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800b72a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b72e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b732:	2100      	movs	r1, #0
 800b734:	6239      	str	r1, [r7, #32]
 800b736:	f003 0302 	and.w	r3, r3, #2
 800b73a:	627b      	str	r3, [r7, #36]	@ 0x24
 800b73c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800b740:	460b      	mov	r3, r1
 800b742:	4313      	orrs	r3, r2
 800b744:	d011      	beq.n	800b76a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b746:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b74a:	3308      	adds	r3, #8
 800b74c:	2101      	movs	r1, #1
 800b74e:	4618      	mov	r0, r3
 800b750:	f000 fb58 	bl	800be04 <RCCEx_PLL2_Config>
 800b754:	4603      	mov	r3, r0
 800b756:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800b75a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d003      	beq.n	800b76a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b762:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b766:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800b76a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b76e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b772:	2100      	movs	r1, #0
 800b774:	61b9      	str	r1, [r7, #24]
 800b776:	f003 0304 	and.w	r3, r3, #4
 800b77a:	61fb      	str	r3, [r7, #28]
 800b77c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800b780:	460b      	mov	r3, r1
 800b782:	4313      	orrs	r3, r2
 800b784:	d011      	beq.n	800b7aa <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b786:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b78a:	3308      	adds	r3, #8
 800b78c:	2102      	movs	r1, #2
 800b78e:	4618      	mov	r0, r3
 800b790:	f000 fb38 	bl	800be04 <RCCEx_PLL2_Config>
 800b794:	4603      	mov	r3, r0
 800b796:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800b79a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d003      	beq.n	800b7aa <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b7a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b7a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800b7aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b7ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7b2:	2100      	movs	r1, #0
 800b7b4:	6139      	str	r1, [r7, #16]
 800b7b6:	f003 0308 	and.w	r3, r3, #8
 800b7ba:	617b      	str	r3, [r7, #20]
 800b7bc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800b7c0:	460b      	mov	r3, r1
 800b7c2:	4313      	orrs	r3, r2
 800b7c4:	d011      	beq.n	800b7ea <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b7c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b7ca:	3328      	adds	r3, #40	@ 0x28
 800b7cc:	2100      	movs	r1, #0
 800b7ce:	4618      	mov	r0, r3
 800b7d0:	f000 fbca 	bl	800bf68 <RCCEx_PLL3_Config>
 800b7d4:	4603      	mov	r3, r0
 800b7d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800b7da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d003      	beq.n	800b7ea <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b7e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b7e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800b7ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b7ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7f2:	2100      	movs	r1, #0
 800b7f4:	60b9      	str	r1, [r7, #8]
 800b7f6:	f003 0310 	and.w	r3, r3, #16
 800b7fa:	60fb      	str	r3, [r7, #12]
 800b7fc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800b800:	460b      	mov	r3, r1
 800b802:	4313      	orrs	r3, r2
 800b804:	d011      	beq.n	800b82a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b806:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b80a:	3328      	adds	r3, #40	@ 0x28
 800b80c:	2101      	movs	r1, #1
 800b80e:	4618      	mov	r0, r3
 800b810:	f000 fbaa 	bl	800bf68 <RCCEx_PLL3_Config>
 800b814:	4603      	mov	r3, r0
 800b816:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800b81a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d003      	beq.n	800b82a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b822:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b826:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800b82a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b82e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b832:	2100      	movs	r1, #0
 800b834:	6039      	str	r1, [r7, #0]
 800b836:	f003 0320 	and.w	r3, r3, #32
 800b83a:	607b      	str	r3, [r7, #4]
 800b83c:	e9d7 1200 	ldrd	r1, r2, [r7]
 800b840:	460b      	mov	r3, r1
 800b842:	4313      	orrs	r3, r2
 800b844:	d011      	beq.n	800b86a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b846:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b84a:	3328      	adds	r3, #40	@ 0x28
 800b84c:	2102      	movs	r1, #2
 800b84e:	4618      	mov	r0, r3
 800b850:	f000 fb8a 	bl	800bf68 <RCCEx_PLL3_Config>
 800b854:	4603      	mov	r3, r0
 800b856:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800b85a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d003      	beq.n	800b86a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b862:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b866:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800b86a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d101      	bne.n	800b876 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800b872:	2300      	movs	r3, #0
 800b874:	e000      	b.n	800b878 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800b876:	2301      	movs	r3, #1
}
 800b878:	4618      	mov	r0, r3
 800b87a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800b87e:	46bd      	mov	sp, r7
 800b880:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b884:	58024400 	.word	0x58024400

0800b888 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800b888:	b580      	push	{r7, lr}
 800b88a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800b88c:	f7fe fd96 	bl	800a3bc <HAL_RCC_GetHCLKFreq>
 800b890:	4602      	mov	r2, r0
 800b892:	4b06      	ldr	r3, [pc, #24]	@ (800b8ac <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800b894:	6a1b      	ldr	r3, [r3, #32]
 800b896:	091b      	lsrs	r3, r3, #4
 800b898:	f003 0307 	and.w	r3, r3, #7
 800b89c:	4904      	ldr	r1, [pc, #16]	@ (800b8b0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800b89e:	5ccb      	ldrb	r3, [r1, r3]
 800b8a0:	f003 031f 	and.w	r3, r3, #31
 800b8a4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800b8a8:	4618      	mov	r0, r3
 800b8aa:	bd80      	pop	{r7, pc}
 800b8ac:	58024400 	.word	0x58024400
 800b8b0:	080132d8 	.word	0x080132d8

0800b8b4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800b8b4:	b480      	push	{r7}
 800b8b6:	b089      	sub	sp, #36	@ 0x24
 800b8b8:	af00      	add	r7, sp, #0
 800b8ba:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b8bc:	4ba1      	ldr	r3, [pc, #644]	@ (800bb44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b8be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b8c0:	f003 0303 	and.w	r3, r3, #3
 800b8c4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800b8c6:	4b9f      	ldr	r3, [pc, #636]	@ (800bb44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b8c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b8ca:	0b1b      	lsrs	r3, r3, #12
 800b8cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b8d0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800b8d2:	4b9c      	ldr	r3, [pc, #624]	@ (800bb44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b8d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8d6:	091b      	lsrs	r3, r3, #4
 800b8d8:	f003 0301 	and.w	r3, r3, #1
 800b8dc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800b8de:	4b99      	ldr	r3, [pc, #612]	@ (800bb44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b8e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b8e2:	08db      	lsrs	r3, r3, #3
 800b8e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b8e8:	693a      	ldr	r2, [r7, #16]
 800b8ea:	fb02 f303 	mul.w	r3, r2, r3
 800b8ee:	ee07 3a90 	vmov	s15, r3
 800b8f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8f6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800b8fa:	697b      	ldr	r3, [r7, #20]
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	f000 8111 	beq.w	800bb24 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800b902:	69bb      	ldr	r3, [r7, #24]
 800b904:	2b02      	cmp	r3, #2
 800b906:	f000 8083 	beq.w	800ba10 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800b90a:	69bb      	ldr	r3, [r7, #24]
 800b90c:	2b02      	cmp	r3, #2
 800b90e:	f200 80a1 	bhi.w	800ba54 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800b912:	69bb      	ldr	r3, [r7, #24]
 800b914:	2b00      	cmp	r3, #0
 800b916:	d003      	beq.n	800b920 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800b918:	69bb      	ldr	r3, [r7, #24]
 800b91a:	2b01      	cmp	r3, #1
 800b91c:	d056      	beq.n	800b9cc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800b91e:	e099      	b.n	800ba54 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b920:	4b88      	ldr	r3, [pc, #544]	@ (800bb44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	f003 0320 	and.w	r3, r3, #32
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d02d      	beq.n	800b988 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b92c:	4b85      	ldr	r3, [pc, #532]	@ (800bb44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	08db      	lsrs	r3, r3, #3
 800b932:	f003 0303 	and.w	r3, r3, #3
 800b936:	4a84      	ldr	r2, [pc, #528]	@ (800bb48 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800b938:	fa22 f303 	lsr.w	r3, r2, r3
 800b93c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b93e:	68bb      	ldr	r3, [r7, #8]
 800b940:	ee07 3a90 	vmov	s15, r3
 800b944:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b948:	697b      	ldr	r3, [r7, #20]
 800b94a:	ee07 3a90 	vmov	s15, r3
 800b94e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b952:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b956:	4b7b      	ldr	r3, [pc, #492]	@ (800bb44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b958:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b95a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b95e:	ee07 3a90 	vmov	s15, r3
 800b962:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b966:	ed97 6a03 	vldr	s12, [r7, #12]
 800b96a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800bb4c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b96e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b972:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b976:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b97a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b97e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b982:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b986:	e087      	b.n	800ba98 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b988:	697b      	ldr	r3, [r7, #20]
 800b98a:	ee07 3a90 	vmov	s15, r3
 800b98e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b992:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800bb50 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800b996:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b99a:	4b6a      	ldr	r3, [pc, #424]	@ (800bb44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b99c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b99e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b9a2:	ee07 3a90 	vmov	s15, r3
 800b9a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b9aa:	ed97 6a03 	vldr	s12, [r7, #12]
 800b9ae:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800bb4c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b9b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b9b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b9ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b9be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b9c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b9c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b9ca:	e065      	b.n	800ba98 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b9cc:	697b      	ldr	r3, [r7, #20]
 800b9ce:	ee07 3a90 	vmov	s15, r3
 800b9d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b9d6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800bb54 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b9da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b9de:	4b59      	ldr	r3, [pc, #356]	@ (800bb44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b9e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b9e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b9e6:	ee07 3a90 	vmov	s15, r3
 800b9ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b9ee:	ed97 6a03 	vldr	s12, [r7, #12]
 800b9f2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800bb4c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b9f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b9fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b9fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ba02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ba06:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ba0e:	e043      	b.n	800ba98 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ba10:	697b      	ldr	r3, [r7, #20]
 800ba12:	ee07 3a90 	vmov	s15, r3
 800ba16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba1a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800bb58 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800ba1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ba22:	4b48      	ldr	r3, [pc, #288]	@ (800bb44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ba24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba2a:	ee07 3a90 	vmov	s15, r3
 800ba2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba32:	ed97 6a03 	vldr	s12, [r7, #12]
 800ba36:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800bb4c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ba3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ba3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ba42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ba46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ba4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba4e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ba52:	e021      	b.n	800ba98 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ba54:	697b      	ldr	r3, [r7, #20]
 800ba56:	ee07 3a90 	vmov	s15, r3
 800ba5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba5e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800bb54 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ba62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ba66:	4b37      	ldr	r3, [pc, #220]	@ (800bb44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ba68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba6e:	ee07 3a90 	vmov	s15, r3
 800ba72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba76:	ed97 6a03 	vldr	s12, [r7, #12]
 800ba7a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800bb4c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ba7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ba82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ba86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ba8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ba8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba92:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ba96:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800ba98:	4b2a      	ldr	r3, [pc, #168]	@ (800bb44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ba9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba9c:	0a5b      	lsrs	r3, r3, #9
 800ba9e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800baa2:	ee07 3a90 	vmov	s15, r3
 800baa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800baaa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800baae:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bab2:	edd7 6a07 	vldr	s13, [r7, #28]
 800bab6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800baba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800babe:	ee17 2a90 	vmov	r2, s15
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800bac6:	4b1f      	ldr	r3, [pc, #124]	@ (800bb44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bac8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800baca:	0c1b      	lsrs	r3, r3, #16
 800bacc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bad0:	ee07 3a90 	vmov	s15, r3
 800bad4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bad8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800badc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bae0:	edd7 6a07 	vldr	s13, [r7, #28]
 800bae4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bae8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800baec:	ee17 2a90 	vmov	r2, s15
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800baf4:	4b13      	ldr	r3, [pc, #76]	@ (800bb44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800baf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800baf8:	0e1b      	lsrs	r3, r3, #24
 800bafa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bafe:	ee07 3a90 	vmov	s15, r3
 800bb02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb06:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bb0a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bb0e:	edd7 6a07 	vldr	s13, [r7, #28]
 800bb12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bb16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bb1a:	ee17 2a90 	vmov	r2, s15
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800bb22:	e008      	b.n	800bb36 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	2200      	movs	r2, #0
 800bb28:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	2200      	movs	r2, #0
 800bb2e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	2200      	movs	r2, #0
 800bb34:	609a      	str	r2, [r3, #8]
}
 800bb36:	bf00      	nop
 800bb38:	3724      	adds	r7, #36	@ 0x24
 800bb3a:	46bd      	mov	sp, r7
 800bb3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb40:	4770      	bx	lr
 800bb42:	bf00      	nop
 800bb44:	58024400 	.word	0x58024400
 800bb48:	03d09000 	.word	0x03d09000
 800bb4c:	46000000 	.word	0x46000000
 800bb50:	4c742400 	.word	0x4c742400
 800bb54:	4a742400 	.word	0x4a742400
 800bb58:	4bbebc20 	.word	0x4bbebc20

0800bb5c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800bb5c:	b480      	push	{r7}
 800bb5e:	b089      	sub	sp, #36	@ 0x24
 800bb60:	af00      	add	r7, sp, #0
 800bb62:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bb64:	4ba1      	ldr	r3, [pc, #644]	@ (800bdec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bb66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bb68:	f003 0303 	and.w	r3, r3, #3
 800bb6c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800bb6e:	4b9f      	ldr	r3, [pc, #636]	@ (800bdec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bb70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bb72:	0d1b      	lsrs	r3, r3, #20
 800bb74:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bb78:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800bb7a:	4b9c      	ldr	r3, [pc, #624]	@ (800bdec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bb7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb7e:	0a1b      	lsrs	r3, r3, #8
 800bb80:	f003 0301 	and.w	r3, r3, #1
 800bb84:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800bb86:	4b99      	ldr	r3, [pc, #612]	@ (800bdec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bb88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bb8a:	08db      	lsrs	r3, r3, #3
 800bb8c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bb90:	693a      	ldr	r2, [r7, #16]
 800bb92:	fb02 f303 	mul.w	r3, r2, r3
 800bb96:	ee07 3a90 	vmov	s15, r3
 800bb9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb9e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800bba2:	697b      	ldr	r3, [r7, #20]
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	f000 8111 	beq.w	800bdcc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800bbaa:	69bb      	ldr	r3, [r7, #24]
 800bbac:	2b02      	cmp	r3, #2
 800bbae:	f000 8083 	beq.w	800bcb8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800bbb2:	69bb      	ldr	r3, [r7, #24]
 800bbb4:	2b02      	cmp	r3, #2
 800bbb6:	f200 80a1 	bhi.w	800bcfc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800bbba:	69bb      	ldr	r3, [r7, #24]
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d003      	beq.n	800bbc8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800bbc0:	69bb      	ldr	r3, [r7, #24]
 800bbc2:	2b01      	cmp	r3, #1
 800bbc4:	d056      	beq.n	800bc74 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800bbc6:	e099      	b.n	800bcfc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bbc8:	4b88      	ldr	r3, [pc, #544]	@ (800bdec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	f003 0320 	and.w	r3, r3, #32
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d02d      	beq.n	800bc30 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bbd4:	4b85      	ldr	r3, [pc, #532]	@ (800bdec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	08db      	lsrs	r3, r3, #3
 800bbda:	f003 0303 	and.w	r3, r3, #3
 800bbde:	4a84      	ldr	r2, [pc, #528]	@ (800bdf0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800bbe0:	fa22 f303 	lsr.w	r3, r2, r3
 800bbe4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bbe6:	68bb      	ldr	r3, [r7, #8]
 800bbe8:	ee07 3a90 	vmov	s15, r3
 800bbec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bbf0:	697b      	ldr	r3, [r7, #20]
 800bbf2:	ee07 3a90 	vmov	s15, r3
 800bbf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bbfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bbfe:	4b7b      	ldr	r3, [pc, #492]	@ (800bdec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bc00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bc02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc06:	ee07 3a90 	vmov	s15, r3
 800bc0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc0e:	ed97 6a03 	vldr	s12, [r7, #12]
 800bc12:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800bdf4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bc16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bc1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bc1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bc22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bc26:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc2a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800bc2e:	e087      	b.n	800bd40 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bc30:	697b      	ldr	r3, [r7, #20]
 800bc32:	ee07 3a90 	vmov	s15, r3
 800bc36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc3a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800bdf8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800bc3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bc42:	4b6a      	ldr	r3, [pc, #424]	@ (800bdec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bc44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bc46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc4a:	ee07 3a90 	vmov	s15, r3
 800bc4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc52:	ed97 6a03 	vldr	s12, [r7, #12]
 800bc56:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800bdf4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bc5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bc5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bc62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bc66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bc6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bc72:	e065      	b.n	800bd40 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bc74:	697b      	ldr	r3, [r7, #20]
 800bc76:	ee07 3a90 	vmov	s15, r3
 800bc7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc7e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800bdfc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800bc82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bc86:	4b59      	ldr	r3, [pc, #356]	@ (800bdec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bc88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bc8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc8e:	ee07 3a90 	vmov	s15, r3
 800bc92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc96:	ed97 6a03 	vldr	s12, [r7, #12]
 800bc9a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800bdf4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bc9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bca2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bca6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bcaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bcae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bcb2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bcb6:	e043      	b.n	800bd40 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bcb8:	697b      	ldr	r3, [r7, #20]
 800bcba:	ee07 3a90 	vmov	s15, r3
 800bcbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bcc2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800be00 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800bcc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bcca:	4b48      	ldr	r3, [pc, #288]	@ (800bdec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bcce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bcd2:	ee07 3a90 	vmov	s15, r3
 800bcd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bcda:	ed97 6a03 	vldr	s12, [r7, #12]
 800bcde:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800bdf4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bce2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bce6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bcea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bcee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bcf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bcf6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bcfa:	e021      	b.n	800bd40 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bcfc:	697b      	ldr	r3, [r7, #20]
 800bcfe:	ee07 3a90 	vmov	s15, r3
 800bd02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd06:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800bdfc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800bd0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bd0e:	4b37      	ldr	r3, [pc, #220]	@ (800bdec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bd10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bd12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd16:	ee07 3a90 	vmov	s15, r3
 800bd1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd1e:	ed97 6a03 	vldr	s12, [r7, #12]
 800bd22:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800bdf4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bd26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bd2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bd32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bd36:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bd3e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800bd40:	4b2a      	ldr	r3, [pc, #168]	@ (800bdec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bd42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bd44:	0a5b      	lsrs	r3, r3, #9
 800bd46:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bd4a:	ee07 3a90 	vmov	s15, r3
 800bd4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd52:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bd56:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bd5a:	edd7 6a07 	vldr	s13, [r7, #28]
 800bd5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bd62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bd66:	ee17 2a90 	vmov	r2, s15
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800bd6e:	4b1f      	ldr	r3, [pc, #124]	@ (800bdec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bd70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bd72:	0c1b      	lsrs	r3, r3, #16
 800bd74:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bd78:	ee07 3a90 	vmov	s15, r3
 800bd7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd80:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bd84:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bd88:	edd7 6a07 	vldr	s13, [r7, #28]
 800bd8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bd90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bd94:	ee17 2a90 	vmov	r2, s15
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800bd9c:	4b13      	ldr	r3, [pc, #76]	@ (800bdec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bd9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bda0:	0e1b      	lsrs	r3, r3, #24
 800bda2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bda6:	ee07 3a90 	vmov	s15, r3
 800bdaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bdae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bdb2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bdb6:	edd7 6a07 	vldr	s13, [r7, #28]
 800bdba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bdbe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bdc2:	ee17 2a90 	vmov	r2, s15
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800bdca:	e008      	b.n	800bdde <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	2200      	movs	r2, #0
 800bdd0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	2200      	movs	r2, #0
 800bdd6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	2200      	movs	r2, #0
 800bddc:	609a      	str	r2, [r3, #8]
}
 800bdde:	bf00      	nop
 800bde0:	3724      	adds	r7, #36	@ 0x24
 800bde2:	46bd      	mov	sp, r7
 800bde4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde8:	4770      	bx	lr
 800bdea:	bf00      	nop
 800bdec:	58024400 	.word	0x58024400
 800bdf0:	03d09000 	.word	0x03d09000
 800bdf4:	46000000 	.word	0x46000000
 800bdf8:	4c742400 	.word	0x4c742400
 800bdfc:	4a742400 	.word	0x4a742400
 800be00:	4bbebc20 	.word	0x4bbebc20

0800be04 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800be04:	b580      	push	{r7, lr}
 800be06:	b084      	sub	sp, #16
 800be08:	af00      	add	r7, sp, #0
 800be0a:	6078      	str	r0, [r7, #4]
 800be0c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800be0e:	2300      	movs	r3, #0
 800be10:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800be12:	4b53      	ldr	r3, [pc, #332]	@ (800bf60 <RCCEx_PLL2_Config+0x15c>)
 800be14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be16:	f003 0303 	and.w	r3, r3, #3
 800be1a:	2b03      	cmp	r3, #3
 800be1c:	d101      	bne.n	800be22 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800be1e:	2301      	movs	r3, #1
 800be20:	e099      	b.n	800bf56 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800be22:	4b4f      	ldr	r3, [pc, #316]	@ (800bf60 <RCCEx_PLL2_Config+0x15c>)
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	4a4e      	ldr	r2, [pc, #312]	@ (800bf60 <RCCEx_PLL2_Config+0x15c>)
 800be28:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800be2c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800be2e:	f7f6 fa07 	bl	8002240 <HAL_GetTick>
 800be32:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800be34:	e008      	b.n	800be48 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800be36:	f7f6 fa03 	bl	8002240 <HAL_GetTick>
 800be3a:	4602      	mov	r2, r0
 800be3c:	68bb      	ldr	r3, [r7, #8]
 800be3e:	1ad3      	subs	r3, r2, r3
 800be40:	2b02      	cmp	r3, #2
 800be42:	d901      	bls.n	800be48 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800be44:	2303      	movs	r3, #3
 800be46:	e086      	b.n	800bf56 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800be48:	4b45      	ldr	r3, [pc, #276]	@ (800bf60 <RCCEx_PLL2_Config+0x15c>)
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800be50:	2b00      	cmp	r3, #0
 800be52:	d1f0      	bne.n	800be36 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800be54:	4b42      	ldr	r3, [pc, #264]	@ (800bf60 <RCCEx_PLL2_Config+0x15c>)
 800be56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be58:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	031b      	lsls	r3, r3, #12
 800be62:	493f      	ldr	r1, [pc, #252]	@ (800bf60 <RCCEx_PLL2_Config+0x15c>)
 800be64:	4313      	orrs	r3, r2
 800be66:	628b      	str	r3, [r1, #40]	@ 0x28
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	685b      	ldr	r3, [r3, #4]
 800be6c:	3b01      	subs	r3, #1
 800be6e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	689b      	ldr	r3, [r3, #8]
 800be76:	3b01      	subs	r3, #1
 800be78:	025b      	lsls	r3, r3, #9
 800be7a:	b29b      	uxth	r3, r3
 800be7c:	431a      	orrs	r2, r3
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	68db      	ldr	r3, [r3, #12]
 800be82:	3b01      	subs	r3, #1
 800be84:	041b      	lsls	r3, r3, #16
 800be86:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800be8a:	431a      	orrs	r2, r3
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	691b      	ldr	r3, [r3, #16]
 800be90:	3b01      	subs	r3, #1
 800be92:	061b      	lsls	r3, r3, #24
 800be94:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800be98:	4931      	ldr	r1, [pc, #196]	@ (800bf60 <RCCEx_PLL2_Config+0x15c>)
 800be9a:	4313      	orrs	r3, r2
 800be9c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800be9e:	4b30      	ldr	r3, [pc, #192]	@ (800bf60 <RCCEx_PLL2_Config+0x15c>)
 800bea0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bea2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	695b      	ldr	r3, [r3, #20]
 800beaa:	492d      	ldr	r1, [pc, #180]	@ (800bf60 <RCCEx_PLL2_Config+0x15c>)
 800beac:	4313      	orrs	r3, r2
 800beae:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800beb0:	4b2b      	ldr	r3, [pc, #172]	@ (800bf60 <RCCEx_PLL2_Config+0x15c>)
 800beb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800beb4:	f023 0220 	bic.w	r2, r3, #32
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	699b      	ldr	r3, [r3, #24]
 800bebc:	4928      	ldr	r1, [pc, #160]	@ (800bf60 <RCCEx_PLL2_Config+0x15c>)
 800bebe:	4313      	orrs	r3, r2
 800bec0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800bec2:	4b27      	ldr	r3, [pc, #156]	@ (800bf60 <RCCEx_PLL2_Config+0x15c>)
 800bec4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bec6:	4a26      	ldr	r2, [pc, #152]	@ (800bf60 <RCCEx_PLL2_Config+0x15c>)
 800bec8:	f023 0310 	bic.w	r3, r3, #16
 800becc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800bece:	4b24      	ldr	r3, [pc, #144]	@ (800bf60 <RCCEx_PLL2_Config+0x15c>)
 800bed0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800bed2:	4b24      	ldr	r3, [pc, #144]	@ (800bf64 <RCCEx_PLL2_Config+0x160>)
 800bed4:	4013      	ands	r3, r2
 800bed6:	687a      	ldr	r2, [r7, #4]
 800bed8:	69d2      	ldr	r2, [r2, #28]
 800beda:	00d2      	lsls	r2, r2, #3
 800bedc:	4920      	ldr	r1, [pc, #128]	@ (800bf60 <RCCEx_PLL2_Config+0x15c>)
 800bede:	4313      	orrs	r3, r2
 800bee0:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800bee2:	4b1f      	ldr	r3, [pc, #124]	@ (800bf60 <RCCEx_PLL2_Config+0x15c>)
 800bee4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bee6:	4a1e      	ldr	r2, [pc, #120]	@ (800bf60 <RCCEx_PLL2_Config+0x15c>)
 800bee8:	f043 0310 	orr.w	r3, r3, #16
 800beec:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800beee:	683b      	ldr	r3, [r7, #0]
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d106      	bne.n	800bf02 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800bef4:	4b1a      	ldr	r3, [pc, #104]	@ (800bf60 <RCCEx_PLL2_Config+0x15c>)
 800bef6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bef8:	4a19      	ldr	r2, [pc, #100]	@ (800bf60 <RCCEx_PLL2_Config+0x15c>)
 800befa:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800befe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800bf00:	e00f      	b.n	800bf22 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800bf02:	683b      	ldr	r3, [r7, #0]
 800bf04:	2b01      	cmp	r3, #1
 800bf06:	d106      	bne.n	800bf16 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800bf08:	4b15      	ldr	r3, [pc, #84]	@ (800bf60 <RCCEx_PLL2_Config+0x15c>)
 800bf0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf0c:	4a14      	ldr	r2, [pc, #80]	@ (800bf60 <RCCEx_PLL2_Config+0x15c>)
 800bf0e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bf12:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800bf14:	e005      	b.n	800bf22 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800bf16:	4b12      	ldr	r3, [pc, #72]	@ (800bf60 <RCCEx_PLL2_Config+0x15c>)
 800bf18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf1a:	4a11      	ldr	r2, [pc, #68]	@ (800bf60 <RCCEx_PLL2_Config+0x15c>)
 800bf1c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800bf20:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800bf22:	4b0f      	ldr	r3, [pc, #60]	@ (800bf60 <RCCEx_PLL2_Config+0x15c>)
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	4a0e      	ldr	r2, [pc, #56]	@ (800bf60 <RCCEx_PLL2_Config+0x15c>)
 800bf28:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800bf2c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bf2e:	f7f6 f987 	bl	8002240 <HAL_GetTick>
 800bf32:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800bf34:	e008      	b.n	800bf48 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800bf36:	f7f6 f983 	bl	8002240 <HAL_GetTick>
 800bf3a:	4602      	mov	r2, r0
 800bf3c:	68bb      	ldr	r3, [r7, #8]
 800bf3e:	1ad3      	subs	r3, r2, r3
 800bf40:	2b02      	cmp	r3, #2
 800bf42:	d901      	bls.n	800bf48 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800bf44:	2303      	movs	r3, #3
 800bf46:	e006      	b.n	800bf56 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800bf48:	4b05      	ldr	r3, [pc, #20]	@ (800bf60 <RCCEx_PLL2_Config+0x15c>)
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d0f0      	beq.n	800bf36 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800bf54:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf56:	4618      	mov	r0, r3
 800bf58:	3710      	adds	r7, #16
 800bf5a:	46bd      	mov	sp, r7
 800bf5c:	bd80      	pop	{r7, pc}
 800bf5e:	bf00      	nop
 800bf60:	58024400 	.word	0x58024400
 800bf64:	ffff0007 	.word	0xffff0007

0800bf68 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800bf68:	b580      	push	{r7, lr}
 800bf6a:	b084      	sub	sp, #16
 800bf6c:	af00      	add	r7, sp, #0
 800bf6e:	6078      	str	r0, [r7, #4]
 800bf70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800bf72:	2300      	movs	r3, #0
 800bf74:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bf76:	4b53      	ldr	r3, [pc, #332]	@ (800c0c4 <RCCEx_PLL3_Config+0x15c>)
 800bf78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf7a:	f003 0303 	and.w	r3, r3, #3
 800bf7e:	2b03      	cmp	r3, #3
 800bf80:	d101      	bne.n	800bf86 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800bf82:	2301      	movs	r3, #1
 800bf84:	e099      	b.n	800c0ba <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800bf86:	4b4f      	ldr	r3, [pc, #316]	@ (800c0c4 <RCCEx_PLL3_Config+0x15c>)
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	4a4e      	ldr	r2, [pc, #312]	@ (800c0c4 <RCCEx_PLL3_Config+0x15c>)
 800bf8c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800bf90:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bf92:	f7f6 f955 	bl	8002240 <HAL_GetTick>
 800bf96:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800bf98:	e008      	b.n	800bfac <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800bf9a:	f7f6 f951 	bl	8002240 <HAL_GetTick>
 800bf9e:	4602      	mov	r2, r0
 800bfa0:	68bb      	ldr	r3, [r7, #8]
 800bfa2:	1ad3      	subs	r3, r2, r3
 800bfa4:	2b02      	cmp	r3, #2
 800bfa6:	d901      	bls.n	800bfac <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800bfa8:	2303      	movs	r3, #3
 800bfaa:	e086      	b.n	800c0ba <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800bfac:	4b45      	ldr	r3, [pc, #276]	@ (800c0c4 <RCCEx_PLL3_Config+0x15c>)
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d1f0      	bne.n	800bf9a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800bfb8:	4b42      	ldr	r3, [pc, #264]	@ (800c0c4 <RCCEx_PLL3_Config+0x15c>)
 800bfba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bfbc:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	051b      	lsls	r3, r3, #20
 800bfc6:	493f      	ldr	r1, [pc, #252]	@ (800c0c4 <RCCEx_PLL3_Config+0x15c>)
 800bfc8:	4313      	orrs	r3, r2
 800bfca:	628b      	str	r3, [r1, #40]	@ 0x28
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	685b      	ldr	r3, [r3, #4]
 800bfd0:	3b01      	subs	r3, #1
 800bfd2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	689b      	ldr	r3, [r3, #8]
 800bfda:	3b01      	subs	r3, #1
 800bfdc:	025b      	lsls	r3, r3, #9
 800bfde:	b29b      	uxth	r3, r3
 800bfe0:	431a      	orrs	r2, r3
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	68db      	ldr	r3, [r3, #12]
 800bfe6:	3b01      	subs	r3, #1
 800bfe8:	041b      	lsls	r3, r3, #16
 800bfea:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800bfee:	431a      	orrs	r2, r3
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	691b      	ldr	r3, [r3, #16]
 800bff4:	3b01      	subs	r3, #1
 800bff6:	061b      	lsls	r3, r3, #24
 800bff8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800bffc:	4931      	ldr	r1, [pc, #196]	@ (800c0c4 <RCCEx_PLL3_Config+0x15c>)
 800bffe:	4313      	orrs	r3, r2
 800c000:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800c002:	4b30      	ldr	r3, [pc, #192]	@ (800c0c4 <RCCEx_PLL3_Config+0x15c>)
 800c004:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c006:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	695b      	ldr	r3, [r3, #20]
 800c00e:	492d      	ldr	r1, [pc, #180]	@ (800c0c4 <RCCEx_PLL3_Config+0x15c>)
 800c010:	4313      	orrs	r3, r2
 800c012:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800c014:	4b2b      	ldr	r3, [pc, #172]	@ (800c0c4 <RCCEx_PLL3_Config+0x15c>)
 800c016:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c018:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	699b      	ldr	r3, [r3, #24]
 800c020:	4928      	ldr	r1, [pc, #160]	@ (800c0c4 <RCCEx_PLL3_Config+0x15c>)
 800c022:	4313      	orrs	r3, r2
 800c024:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800c026:	4b27      	ldr	r3, [pc, #156]	@ (800c0c4 <RCCEx_PLL3_Config+0x15c>)
 800c028:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c02a:	4a26      	ldr	r2, [pc, #152]	@ (800c0c4 <RCCEx_PLL3_Config+0x15c>)
 800c02c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c030:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800c032:	4b24      	ldr	r3, [pc, #144]	@ (800c0c4 <RCCEx_PLL3_Config+0x15c>)
 800c034:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c036:	4b24      	ldr	r3, [pc, #144]	@ (800c0c8 <RCCEx_PLL3_Config+0x160>)
 800c038:	4013      	ands	r3, r2
 800c03a:	687a      	ldr	r2, [r7, #4]
 800c03c:	69d2      	ldr	r2, [r2, #28]
 800c03e:	00d2      	lsls	r2, r2, #3
 800c040:	4920      	ldr	r1, [pc, #128]	@ (800c0c4 <RCCEx_PLL3_Config+0x15c>)
 800c042:	4313      	orrs	r3, r2
 800c044:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800c046:	4b1f      	ldr	r3, [pc, #124]	@ (800c0c4 <RCCEx_PLL3_Config+0x15c>)
 800c048:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c04a:	4a1e      	ldr	r2, [pc, #120]	@ (800c0c4 <RCCEx_PLL3_Config+0x15c>)
 800c04c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c050:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800c052:	683b      	ldr	r3, [r7, #0]
 800c054:	2b00      	cmp	r3, #0
 800c056:	d106      	bne.n	800c066 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800c058:	4b1a      	ldr	r3, [pc, #104]	@ (800c0c4 <RCCEx_PLL3_Config+0x15c>)
 800c05a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c05c:	4a19      	ldr	r2, [pc, #100]	@ (800c0c4 <RCCEx_PLL3_Config+0x15c>)
 800c05e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800c062:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800c064:	e00f      	b.n	800c086 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800c066:	683b      	ldr	r3, [r7, #0]
 800c068:	2b01      	cmp	r3, #1
 800c06a:	d106      	bne.n	800c07a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800c06c:	4b15      	ldr	r3, [pc, #84]	@ (800c0c4 <RCCEx_PLL3_Config+0x15c>)
 800c06e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c070:	4a14      	ldr	r2, [pc, #80]	@ (800c0c4 <RCCEx_PLL3_Config+0x15c>)
 800c072:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800c076:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800c078:	e005      	b.n	800c086 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800c07a:	4b12      	ldr	r3, [pc, #72]	@ (800c0c4 <RCCEx_PLL3_Config+0x15c>)
 800c07c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c07e:	4a11      	ldr	r2, [pc, #68]	@ (800c0c4 <RCCEx_PLL3_Config+0x15c>)
 800c080:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c084:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800c086:	4b0f      	ldr	r3, [pc, #60]	@ (800c0c4 <RCCEx_PLL3_Config+0x15c>)
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	4a0e      	ldr	r2, [pc, #56]	@ (800c0c4 <RCCEx_PLL3_Config+0x15c>)
 800c08c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c090:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c092:	f7f6 f8d5 	bl	8002240 <HAL_GetTick>
 800c096:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c098:	e008      	b.n	800c0ac <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c09a:	f7f6 f8d1 	bl	8002240 <HAL_GetTick>
 800c09e:	4602      	mov	r2, r0
 800c0a0:	68bb      	ldr	r3, [r7, #8]
 800c0a2:	1ad3      	subs	r3, r2, r3
 800c0a4:	2b02      	cmp	r3, #2
 800c0a6:	d901      	bls.n	800c0ac <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c0a8:	2303      	movs	r3, #3
 800c0aa:	e006      	b.n	800c0ba <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c0ac:	4b05      	ldr	r3, [pc, #20]	@ (800c0c4 <RCCEx_PLL3_Config+0x15c>)
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d0f0      	beq.n	800c09a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800c0b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0ba:	4618      	mov	r0, r3
 800c0bc:	3710      	adds	r7, #16
 800c0be:	46bd      	mov	sp, r7
 800c0c0:	bd80      	pop	{r7, pc}
 800c0c2:	bf00      	nop
 800c0c4:	58024400 	.word	0x58024400
 800c0c8:	ffff0007 	.word	0xffff0007

0800c0cc <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c0cc:	b580      	push	{r7, lr}
 800c0ce:	b084      	sub	sp, #16
 800c0d0:	af00      	add	r7, sp, #0
 800c0d2:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d101      	bne.n	800c0de <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c0da:	2301      	movs	r3, #1
 800c0dc:	e10f      	b.n	800c2fe <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	2200      	movs	r2, #0
 800c0e2:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	4a87      	ldr	r2, [pc, #540]	@ (800c308 <HAL_SPI_Init+0x23c>)
 800c0ea:	4293      	cmp	r3, r2
 800c0ec:	d00f      	beq.n	800c10e <HAL_SPI_Init+0x42>
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	4a86      	ldr	r2, [pc, #536]	@ (800c30c <HAL_SPI_Init+0x240>)
 800c0f4:	4293      	cmp	r3, r2
 800c0f6:	d00a      	beq.n	800c10e <HAL_SPI_Init+0x42>
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	4a84      	ldr	r2, [pc, #528]	@ (800c310 <HAL_SPI_Init+0x244>)
 800c0fe:	4293      	cmp	r3, r2
 800c100:	d005      	beq.n	800c10e <HAL_SPI_Init+0x42>
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	68db      	ldr	r3, [r3, #12]
 800c106:	2b0f      	cmp	r3, #15
 800c108:	d901      	bls.n	800c10e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800c10a:	2301      	movs	r3, #1
 800c10c:	e0f7      	b.n	800c2fe <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800c10e:	6878      	ldr	r0, [r7, #4]
 800c110:	f000 f900 	bl	800c314 <SPI_GetPacketSize>
 800c114:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	4a7b      	ldr	r2, [pc, #492]	@ (800c308 <HAL_SPI_Init+0x23c>)
 800c11c:	4293      	cmp	r3, r2
 800c11e:	d00c      	beq.n	800c13a <HAL_SPI_Init+0x6e>
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	4a79      	ldr	r2, [pc, #484]	@ (800c30c <HAL_SPI_Init+0x240>)
 800c126:	4293      	cmp	r3, r2
 800c128:	d007      	beq.n	800c13a <HAL_SPI_Init+0x6e>
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	4a78      	ldr	r2, [pc, #480]	@ (800c310 <HAL_SPI_Init+0x244>)
 800c130:	4293      	cmp	r3, r2
 800c132:	d002      	beq.n	800c13a <HAL_SPI_Init+0x6e>
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	2b08      	cmp	r3, #8
 800c138:	d811      	bhi.n	800c15e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c13e:	4a72      	ldr	r2, [pc, #456]	@ (800c308 <HAL_SPI_Init+0x23c>)
 800c140:	4293      	cmp	r3, r2
 800c142:	d009      	beq.n	800c158 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	4a70      	ldr	r2, [pc, #448]	@ (800c30c <HAL_SPI_Init+0x240>)
 800c14a:	4293      	cmp	r3, r2
 800c14c:	d004      	beq.n	800c158 <HAL_SPI_Init+0x8c>
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	4a6f      	ldr	r2, [pc, #444]	@ (800c310 <HAL_SPI_Init+0x244>)
 800c154:	4293      	cmp	r3, r2
 800c156:	d104      	bne.n	800c162 <HAL_SPI_Init+0x96>
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	2b10      	cmp	r3, #16
 800c15c:	d901      	bls.n	800c162 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800c15e:	2301      	movs	r3, #1
 800c160:	e0cd      	b.n	800c2fe <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800c168:	b2db      	uxtb	r3, r3
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d106      	bne.n	800c17c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	2200      	movs	r2, #0
 800c172:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c176:	6878      	ldr	r0, [r7, #4]
 800c178:	f7f5 fbf6 	bl	8001968 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	2202      	movs	r2, #2
 800c180:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	681a      	ldr	r2, [r3, #0]
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	f022 0201 	bic.w	r2, r2, #1
 800c192:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	689b      	ldr	r3, [r3, #8]
 800c19a:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800c19e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	699b      	ldr	r3, [r3, #24]
 800c1a4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c1a8:	d119      	bne.n	800c1de <HAL_SPI_Init+0x112>
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	685b      	ldr	r3, [r3, #4]
 800c1ae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c1b2:	d103      	bne.n	800c1bc <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d008      	beq.n	800c1ce <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d10c      	bne.n	800c1de <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800c1c8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c1cc:	d107      	bne.n	800c1de <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	681a      	ldr	r2, [r3, #0]
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800c1dc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	685b      	ldr	r3, [r3, #4]
 800c1e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d00f      	beq.n	800c20a <HAL_SPI_Init+0x13e>
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	68db      	ldr	r3, [r3, #12]
 800c1ee:	2b06      	cmp	r3, #6
 800c1f0:	d90b      	bls.n	800c20a <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	430a      	orrs	r2, r1
 800c206:	601a      	str	r2, [r3, #0]
 800c208:	e007      	b.n	800c21a <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	681a      	ldr	r2, [r3, #0]
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c218:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	69da      	ldr	r2, [r3, #28]
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c222:	431a      	orrs	r2, r3
 800c224:	68bb      	ldr	r3, [r7, #8]
 800c226:	431a      	orrs	r2, r3
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c22c:	ea42 0103 	orr.w	r1, r2, r3
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	68da      	ldr	r2, [r3, #12]
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	430a      	orrs	r2, r1
 800c23a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c244:	431a      	orrs	r2, r3
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c24a:	431a      	orrs	r2, r3
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	699b      	ldr	r3, [r3, #24]
 800c250:	431a      	orrs	r2, r3
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	691b      	ldr	r3, [r3, #16]
 800c256:	431a      	orrs	r2, r3
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	695b      	ldr	r3, [r3, #20]
 800c25c:	431a      	orrs	r2, r3
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	6a1b      	ldr	r3, [r3, #32]
 800c262:	431a      	orrs	r2, r3
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	685b      	ldr	r3, [r3, #4]
 800c268:	431a      	orrs	r2, r3
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c26e:	431a      	orrs	r2, r3
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	689b      	ldr	r3, [r3, #8]
 800c274:	431a      	orrs	r2, r3
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c27a:	ea42 0103 	orr.w	r1, r2, r3
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	430a      	orrs	r2, r1
 800c288:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	685b      	ldr	r3, [r3, #4]
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d113      	bne.n	800c2ba <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	689b      	ldr	r3, [r3, #8]
 800c298:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c2a4:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	689b      	ldr	r3, [r3, #8]
 800c2ac:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800c2b8:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	f022 0201 	bic.w	r2, r2, #1
 800c2c8:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	685b      	ldr	r3, [r3, #4]
 800c2ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d00a      	beq.n	800c2ec <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	68db      	ldr	r3, [r3, #12]
 800c2dc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	430a      	orrs	r2, r1
 800c2ea:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	2200      	movs	r2, #0
 800c2f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	2201      	movs	r2, #1
 800c2f8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800c2fc:	2300      	movs	r3, #0
}
 800c2fe:	4618      	mov	r0, r3
 800c300:	3710      	adds	r7, #16
 800c302:	46bd      	mov	sp, r7
 800c304:	bd80      	pop	{r7, pc}
 800c306:	bf00      	nop
 800c308:	40013000 	.word	0x40013000
 800c30c:	40003800 	.word	0x40003800
 800c310:	40003c00 	.word	0x40003c00

0800c314 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800c314:	b480      	push	{r7}
 800c316:	b085      	sub	sp, #20
 800c318:	af00      	add	r7, sp, #0
 800c31a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c320:	095b      	lsrs	r3, r3, #5
 800c322:	3301      	adds	r3, #1
 800c324:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	68db      	ldr	r3, [r3, #12]
 800c32a:	3301      	adds	r3, #1
 800c32c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800c32e:	68bb      	ldr	r3, [r7, #8]
 800c330:	3307      	adds	r3, #7
 800c332:	08db      	lsrs	r3, r3, #3
 800c334:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800c336:	68bb      	ldr	r3, [r7, #8]
 800c338:	68fa      	ldr	r2, [r7, #12]
 800c33a:	fb02 f303 	mul.w	r3, r2, r3
}
 800c33e:	4618      	mov	r0, r3
 800c340:	3714      	adds	r7, #20
 800c342:	46bd      	mov	sp, r7
 800c344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c348:	4770      	bx	lr

0800c34a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c34a:	b580      	push	{r7, lr}
 800c34c:	b082      	sub	sp, #8
 800c34e:	af00      	add	r7, sp, #0
 800c350:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	2b00      	cmp	r3, #0
 800c356:	d101      	bne.n	800c35c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c358:	2301      	movs	r3, #1
 800c35a:	e049      	b.n	800c3f0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c362:	b2db      	uxtb	r3, r3
 800c364:	2b00      	cmp	r3, #0
 800c366:	d106      	bne.n	800c376 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	2200      	movs	r2, #0
 800c36c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c370:	6878      	ldr	r0, [r7, #4]
 800c372:	f7f5 fbed 	bl	8001b50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	2202      	movs	r2, #2
 800c37a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	681a      	ldr	r2, [r3, #0]
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	3304      	adds	r3, #4
 800c386:	4619      	mov	r1, r3
 800c388:	4610      	mov	r0, r2
 800c38a:	f000 fbe9 	bl	800cb60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	2201      	movs	r2, #1
 800c392:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	2201      	movs	r2, #1
 800c39a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	2201      	movs	r2, #1
 800c3a2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	2201      	movs	r2, #1
 800c3aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	2201      	movs	r2, #1
 800c3b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	2201      	movs	r2, #1
 800c3ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	2201      	movs	r2, #1
 800c3c2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	2201      	movs	r2, #1
 800c3ca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	2201      	movs	r2, #1
 800c3d2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	2201      	movs	r2, #1
 800c3da:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	2201      	movs	r2, #1
 800c3e2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	2201      	movs	r2, #1
 800c3ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c3ee:	2300      	movs	r3, #0
}
 800c3f0:	4618      	mov	r0, r3
 800c3f2:	3708      	adds	r7, #8
 800c3f4:	46bd      	mov	sp, r7
 800c3f6:	bd80      	pop	{r7, pc}

0800c3f8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c3f8:	b580      	push	{r7, lr}
 800c3fa:	b082      	sub	sp, #8
 800c3fc:	af00      	add	r7, sp, #0
 800c3fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	2b00      	cmp	r3, #0
 800c404:	d101      	bne.n	800c40a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c406:	2301      	movs	r3, #1
 800c408:	e049      	b.n	800c49e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c410:	b2db      	uxtb	r3, r3
 800c412:	2b00      	cmp	r3, #0
 800c414:	d106      	bne.n	800c424 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	2200      	movs	r2, #0
 800c41a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c41e:	6878      	ldr	r0, [r7, #4]
 800c420:	f7f5 fb30 	bl	8001a84 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	2202      	movs	r2, #2
 800c428:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	681a      	ldr	r2, [r3, #0]
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	3304      	adds	r3, #4
 800c434:	4619      	mov	r1, r3
 800c436:	4610      	mov	r0, r2
 800c438:	f000 fb92 	bl	800cb60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	2201      	movs	r2, #1
 800c440:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	2201      	movs	r2, #1
 800c448:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	2201      	movs	r2, #1
 800c450:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	2201      	movs	r2, #1
 800c458:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	2201      	movs	r2, #1
 800c460:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	2201      	movs	r2, #1
 800c468:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	2201      	movs	r2, #1
 800c470:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	2201      	movs	r2, #1
 800c478:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	2201      	movs	r2, #1
 800c480:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	2201      	movs	r2, #1
 800c488:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	2201      	movs	r2, #1
 800c490:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	2201      	movs	r2, #1
 800c498:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c49c:	2300      	movs	r3, #0
}
 800c49e:	4618      	mov	r0, r3
 800c4a0:	3708      	adds	r7, #8
 800c4a2:	46bd      	mov	sp, r7
 800c4a4:	bd80      	pop	{r7, pc}
	...

0800c4a8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c4a8:	b580      	push	{r7, lr}
 800c4aa:	b084      	sub	sp, #16
 800c4ac:	af00      	add	r7, sp, #0
 800c4ae:	6078      	str	r0, [r7, #4]
 800c4b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c4b2:	683b      	ldr	r3, [r7, #0]
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d109      	bne.n	800c4cc <HAL_TIM_PWM_Start+0x24>
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800c4be:	b2db      	uxtb	r3, r3
 800c4c0:	2b01      	cmp	r3, #1
 800c4c2:	bf14      	ite	ne
 800c4c4:	2301      	movne	r3, #1
 800c4c6:	2300      	moveq	r3, #0
 800c4c8:	b2db      	uxtb	r3, r3
 800c4ca:	e03c      	b.n	800c546 <HAL_TIM_PWM_Start+0x9e>
 800c4cc:	683b      	ldr	r3, [r7, #0]
 800c4ce:	2b04      	cmp	r3, #4
 800c4d0:	d109      	bne.n	800c4e6 <HAL_TIM_PWM_Start+0x3e>
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800c4d8:	b2db      	uxtb	r3, r3
 800c4da:	2b01      	cmp	r3, #1
 800c4dc:	bf14      	ite	ne
 800c4de:	2301      	movne	r3, #1
 800c4e0:	2300      	moveq	r3, #0
 800c4e2:	b2db      	uxtb	r3, r3
 800c4e4:	e02f      	b.n	800c546 <HAL_TIM_PWM_Start+0x9e>
 800c4e6:	683b      	ldr	r3, [r7, #0]
 800c4e8:	2b08      	cmp	r3, #8
 800c4ea:	d109      	bne.n	800c500 <HAL_TIM_PWM_Start+0x58>
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800c4f2:	b2db      	uxtb	r3, r3
 800c4f4:	2b01      	cmp	r3, #1
 800c4f6:	bf14      	ite	ne
 800c4f8:	2301      	movne	r3, #1
 800c4fa:	2300      	moveq	r3, #0
 800c4fc:	b2db      	uxtb	r3, r3
 800c4fe:	e022      	b.n	800c546 <HAL_TIM_PWM_Start+0x9e>
 800c500:	683b      	ldr	r3, [r7, #0]
 800c502:	2b0c      	cmp	r3, #12
 800c504:	d109      	bne.n	800c51a <HAL_TIM_PWM_Start+0x72>
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c50c:	b2db      	uxtb	r3, r3
 800c50e:	2b01      	cmp	r3, #1
 800c510:	bf14      	ite	ne
 800c512:	2301      	movne	r3, #1
 800c514:	2300      	moveq	r3, #0
 800c516:	b2db      	uxtb	r3, r3
 800c518:	e015      	b.n	800c546 <HAL_TIM_PWM_Start+0x9e>
 800c51a:	683b      	ldr	r3, [r7, #0]
 800c51c:	2b10      	cmp	r3, #16
 800c51e:	d109      	bne.n	800c534 <HAL_TIM_PWM_Start+0x8c>
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c526:	b2db      	uxtb	r3, r3
 800c528:	2b01      	cmp	r3, #1
 800c52a:	bf14      	ite	ne
 800c52c:	2301      	movne	r3, #1
 800c52e:	2300      	moveq	r3, #0
 800c530:	b2db      	uxtb	r3, r3
 800c532:	e008      	b.n	800c546 <HAL_TIM_PWM_Start+0x9e>
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800c53a:	b2db      	uxtb	r3, r3
 800c53c:	2b01      	cmp	r3, #1
 800c53e:	bf14      	ite	ne
 800c540:	2301      	movne	r3, #1
 800c542:	2300      	moveq	r3, #0
 800c544:	b2db      	uxtb	r3, r3
 800c546:	2b00      	cmp	r3, #0
 800c548:	d001      	beq.n	800c54e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800c54a:	2301      	movs	r3, #1
 800c54c:	e0a1      	b.n	800c692 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c54e:	683b      	ldr	r3, [r7, #0]
 800c550:	2b00      	cmp	r3, #0
 800c552:	d104      	bne.n	800c55e <HAL_TIM_PWM_Start+0xb6>
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	2202      	movs	r2, #2
 800c558:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c55c:	e023      	b.n	800c5a6 <HAL_TIM_PWM_Start+0xfe>
 800c55e:	683b      	ldr	r3, [r7, #0]
 800c560:	2b04      	cmp	r3, #4
 800c562:	d104      	bne.n	800c56e <HAL_TIM_PWM_Start+0xc6>
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	2202      	movs	r2, #2
 800c568:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c56c:	e01b      	b.n	800c5a6 <HAL_TIM_PWM_Start+0xfe>
 800c56e:	683b      	ldr	r3, [r7, #0]
 800c570:	2b08      	cmp	r3, #8
 800c572:	d104      	bne.n	800c57e <HAL_TIM_PWM_Start+0xd6>
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	2202      	movs	r2, #2
 800c578:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c57c:	e013      	b.n	800c5a6 <HAL_TIM_PWM_Start+0xfe>
 800c57e:	683b      	ldr	r3, [r7, #0]
 800c580:	2b0c      	cmp	r3, #12
 800c582:	d104      	bne.n	800c58e <HAL_TIM_PWM_Start+0xe6>
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	2202      	movs	r2, #2
 800c588:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c58c:	e00b      	b.n	800c5a6 <HAL_TIM_PWM_Start+0xfe>
 800c58e:	683b      	ldr	r3, [r7, #0]
 800c590:	2b10      	cmp	r3, #16
 800c592:	d104      	bne.n	800c59e <HAL_TIM_PWM_Start+0xf6>
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	2202      	movs	r2, #2
 800c598:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c59c:	e003      	b.n	800c5a6 <HAL_TIM_PWM_Start+0xfe>
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	2202      	movs	r2, #2
 800c5a2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	2201      	movs	r2, #1
 800c5ac:	6839      	ldr	r1, [r7, #0]
 800c5ae:	4618      	mov	r0, r3
 800c5b0:	f000 fe4c 	bl	800d24c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	4a38      	ldr	r2, [pc, #224]	@ (800c69c <HAL_TIM_PWM_Start+0x1f4>)
 800c5ba:	4293      	cmp	r3, r2
 800c5bc:	d013      	beq.n	800c5e6 <HAL_TIM_PWM_Start+0x13e>
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	4a37      	ldr	r2, [pc, #220]	@ (800c6a0 <HAL_TIM_PWM_Start+0x1f8>)
 800c5c4:	4293      	cmp	r3, r2
 800c5c6:	d00e      	beq.n	800c5e6 <HAL_TIM_PWM_Start+0x13e>
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	4a35      	ldr	r2, [pc, #212]	@ (800c6a4 <HAL_TIM_PWM_Start+0x1fc>)
 800c5ce:	4293      	cmp	r3, r2
 800c5d0:	d009      	beq.n	800c5e6 <HAL_TIM_PWM_Start+0x13e>
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	4a34      	ldr	r2, [pc, #208]	@ (800c6a8 <HAL_TIM_PWM_Start+0x200>)
 800c5d8:	4293      	cmp	r3, r2
 800c5da:	d004      	beq.n	800c5e6 <HAL_TIM_PWM_Start+0x13e>
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	4a32      	ldr	r2, [pc, #200]	@ (800c6ac <HAL_TIM_PWM_Start+0x204>)
 800c5e2:	4293      	cmp	r3, r2
 800c5e4:	d101      	bne.n	800c5ea <HAL_TIM_PWM_Start+0x142>
 800c5e6:	2301      	movs	r3, #1
 800c5e8:	e000      	b.n	800c5ec <HAL_TIM_PWM_Start+0x144>
 800c5ea:	2300      	movs	r3, #0
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d007      	beq.n	800c600 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800c5fe:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	4a25      	ldr	r2, [pc, #148]	@ (800c69c <HAL_TIM_PWM_Start+0x1f4>)
 800c606:	4293      	cmp	r3, r2
 800c608:	d022      	beq.n	800c650 <HAL_TIM_PWM_Start+0x1a8>
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c612:	d01d      	beq.n	800c650 <HAL_TIM_PWM_Start+0x1a8>
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	4a25      	ldr	r2, [pc, #148]	@ (800c6b0 <HAL_TIM_PWM_Start+0x208>)
 800c61a:	4293      	cmp	r3, r2
 800c61c:	d018      	beq.n	800c650 <HAL_TIM_PWM_Start+0x1a8>
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	4a24      	ldr	r2, [pc, #144]	@ (800c6b4 <HAL_TIM_PWM_Start+0x20c>)
 800c624:	4293      	cmp	r3, r2
 800c626:	d013      	beq.n	800c650 <HAL_TIM_PWM_Start+0x1a8>
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	4a22      	ldr	r2, [pc, #136]	@ (800c6b8 <HAL_TIM_PWM_Start+0x210>)
 800c62e:	4293      	cmp	r3, r2
 800c630:	d00e      	beq.n	800c650 <HAL_TIM_PWM_Start+0x1a8>
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	4a1a      	ldr	r2, [pc, #104]	@ (800c6a0 <HAL_TIM_PWM_Start+0x1f8>)
 800c638:	4293      	cmp	r3, r2
 800c63a:	d009      	beq.n	800c650 <HAL_TIM_PWM_Start+0x1a8>
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	4a1e      	ldr	r2, [pc, #120]	@ (800c6bc <HAL_TIM_PWM_Start+0x214>)
 800c642:	4293      	cmp	r3, r2
 800c644:	d004      	beq.n	800c650 <HAL_TIM_PWM_Start+0x1a8>
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	4a16      	ldr	r2, [pc, #88]	@ (800c6a4 <HAL_TIM_PWM_Start+0x1fc>)
 800c64c:	4293      	cmp	r3, r2
 800c64e:	d115      	bne.n	800c67c <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	689a      	ldr	r2, [r3, #8]
 800c656:	4b1a      	ldr	r3, [pc, #104]	@ (800c6c0 <HAL_TIM_PWM_Start+0x218>)
 800c658:	4013      	ands	r3, r2
 800c65a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	2b06      	cmp	r3, #6
 800c660:	d015      	beq.n	800c68e <HAL_TIM_PWM_Start+0x1e6>
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c668:	d011      	beq.n	800c68e <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	681a      	ldr	r2, [r3, #0]
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	f042 0201 	orr.w	r2, r2, #1
 800c678:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c67a:	e008      	b.n	800c68e <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	681a      	ldr	r2, [r3, #0]
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	f042 0201 	orr.w	r2, r2, #1
 800c68a:	601a      	str	r2, [r3, #0]
 800c68c:	e000      	b.n	800c690 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c68e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c690:	2300      	movs	r3, #0
}
 800c692:	4618      	mov	r0, r3
 800c694:	3710      	adds	r7, #16
 800c696:	46bd      	mov	sp, r7
 800c698:	bd80      	pop	{r7, pc}
 800c69a:	bf00      	nop
 800c69c:	40010000 	.word	0x40010000
 800c6a0:	40010400 	.word	0x40010400
 800c6a4:	40014000 	.word	0x40014000
 800c6a8:	40014400 	.word	0x40014400
 800c6ac:	40014800 	.word	0x40014800
 800c6b0:	40000400 	.word	0x40000400
 800c6b4:	40000800 	.word	0x40000800
 800c6b8:	40000c00 	.word	0x40000c00
 800c6bc:	40001800 	.word	0x40001800
 800c6c0:	00010007 	.word	0x00010007

0800c6c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c6c4:	b580      	push	{r7, lr}
 800c6c6:	b084      	sub	sp, #16
 800c6c8:	af00      	add	r7, sp, #0
 800c6ca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	68db      	ldr	r3, [r3, #12]
 800c6d2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	691b      	ldr	r3, [r3, #16]
 800c6da:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800c6dc:	68bb      	ldr	r3, [r7, #8]
 800c6de:	f003 0302 	and.w	r3, r3, #2
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d020      	beq.n	800c728 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	f003 0302 	and.w	r3, r3, #2
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d01b      	beq.n	800c728 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	f06f 0202 	mvn.w	r2, #2
 800c6f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	2201      	movs	r2, #1
 800c6fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	699b      	ldr	r3, [r3, #24]
 800c706:	f003 0303 	and.w	r3, r3, #3
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d003      	beq.n	800c716 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c70e:	6878      	ldr	r0, [r7, #4]
 800c710:	f000 fa08 	bl	800cb24 <HAL_TIM_IC_CaptureCallback>
 800c714:	e005      	b.n	800c722 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c716:	6878      	ldr	r0, [r7, #4]
 800c718:	f000 f9fa 	bl	800cb10 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c71c:	6878      	ldr	r0, [r7, #4]
 800c71e:	f000 fa0b 	bl	800cb38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	2200      	movs	r2, #0
 800c726:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800c728:	68bb      	ldr	r3, [r7, #8]
 800c72a:	f003 0304 	and.w	r3, r3, #4
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d020      	beq.n	800c774 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	f003 0304 	and.w	r3, r3, #4
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d01b      	beq.n	800c774 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	f06f 0204 	mvn.w	r2, #4
 800c744:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	2202      	movs	r2, #2
 800c74a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	699b      	ldr	r3, [r3, #24]
 800c752:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c756:	2b00      	cmp	r3, #0
 800c758:	d003      	beq.n	800c762 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c75a:	6878      	ldr	r0, [r7, #4]
 800c75c:	f000 f9e2 	bl	800cb24 <HAL_TIM_IC_CaptureCallback>
 800c760:	e005      	b.n	800c76e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c762:	6878      	ldr	r0, [r7, #4]
 800c764:	f000 f9d4 	bl	800cb10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c768:	6878      	ldr	r0, [r7, #4]
 800c76a:	f000 f9e5 	bl	800cb38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	2200      	movs	r2, #0
 800c772:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800c774:	68bb      	ldr	r3, [r7, #8]
 800c776:	f003 0308 	and.w	r3, r3, #8
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d020      	beq.n	800c7c0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	f003 0308 	and.w	r3, r3, #8
 800c784:	2b00      	cmp	r3, #0
 800c786:	d01b      	beq.n	800c7c0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	f06f 0208 	mvn.w	r2, #8
 800c790:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	2204      	movs	r2, #4
 800c796:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	69db      	ldr	r3, [r3, #28]
 800c79e:	f003 0303 	and.w	r3, r3, #3
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d003      	beq.n	800c7ae <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c7a6:	6878      	ldr	r0, [r7, #4]
 800c7a8:	f000 f9bc 	bl	800cb24 <HAL_TIM_IC_CaptureCallback>
 800c7ac:	e005      	b.n	800c7ba <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c7ae:	6878      	ldr	r0, [r7, #4]
 800c7b0:	f000 f9ae 	bl	800cb10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c7b4:	6878      	ldr	r0, [r7, #4]
 800c7b6:	f000 f9bf 	bl	800cb38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	2200      	movs	r2, #0
 800c7be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800c7c0:	68bb      	ldr	r3, [r7, #8]
 800c7c2:	f003 0310 	and.w	r3, r3, #16
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d020      	beq.n	800c80c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	f003 0310 	and.w	r3, r3, #16
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d01b      	beq.n	800c80c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	f06f 0210 	mvn.w	r2, #16
 800c7dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	2208      	movs	r2, #8
 800c7e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	69db      	ldr	r3, [r3, #28]
 800c7ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d003      	beq.n	800c7fa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c7f2:	6878      	ldr	r0, [r7, #4]
 800c7f4:	f000 f996 	bl	800cb24 <HAL_TIM_IC_CaptureCallback>
 800c7f8:	e005      	b.n	800c806 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c7fa:	6878      	ldr	r0, [r7, #4]
 800c7fc:	f000 f988 	bl	800cb10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c800:	6878      	ldr	r0, [r7, #4]
 800c802:	f000 f999 	bl	800cb38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	2200      	movs	r2, #0
 800c80a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800c80c:	68bb      	ldr	r3, [r7, #8]
 800c80e:	f003 0301 	and.w	r3, r3, #1
 800c812:	2b00      	cmp	r3, #0
 800c814:	d00c      	beq.n	800c830 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	f003 0301 	and.w	r3, r3, #1
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d007      	beq.n	800c830 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	f06f 0201 	mvn.w	r2, #1
 800c828:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c82a:	6878      	ldr	r0, [r7, #4]
 800c82c:	f000 f966 	bl	800cafc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800c830:	68bb      	ldr	r3, [r7, #8]
 800c832:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c836:	2b00      	cmp	r3, #0
 800c838:	d104      	bne.n	800c844 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800c83a:	68bb      	ldr	r3, [r7, #8]
 800c83c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800c840:	2b00      	cmp	r3, #0
 800c842:	d00c      	beq.n	800c85e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d007      	beq.n	800c85e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800c856:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c858:	6878      	ldr	r0, [r7, #4]
 800c85a:	f000 fe33 	bl	800d4c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800c85e:	68bb      	ldr	r3, [r7, #8]
 800c860:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c864:	2b00      	cmp	r3, #0
 800c866:	d00c      	beq.n	800c882 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d007      	beq.n	800c882 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800c87a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c87c:	6878      	ldr	r0, [r7, #4]
 800c87e:	f000 fe2b 	bl	800d4d8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800c882:	68bb      	ldr	r3, [r7, #8]
 800c884:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d00c      	beq.n	800c8a6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c892:	2b00      	cmp	r3, #0
 800c894:	d007      	beq.n	800c8a6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800c89e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c8a0:	6878      	ldr	r0, [r7, #4]
 800c8a2:	f000 f953 	bl	800cb4c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800c8a6:	68bb      	ldr	r3, [r7, #8]
 800c8a8:	f003 0320 	and.w	r3, r3, #32
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d00c      	beq.n	800c8ca <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	f003 0320 	and.w	r3, r3, #32
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d007      	beq.n	800c8ca <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	f06f 0220 	mvn.w	r2, #32
 800c8c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c8c4:	6878      	ldr	r0, [r7, #4]
 800c8c6:	f000 fdf3 	bl	800d4b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c8ca:	bf00      	nop
 800c8cc:	3710      	adds	r7, #16
 800c8ce:	46bd      	mov	sp, r7
 800c8d0:	bd80      	pop	{r7, pc}
	...

0800c8d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c8d4:	b580      	push	{r7, lr}
 800c8d6:	b086      	sub	sp, #24
 800c8d8:	af00      	add	r7, sp, #0
 800c8da:	60f8      	str	r0, [r7, #12]
 800c8dc:	60b9      	str	r1, [r7, #8]
 800c8de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c8e0:	2300      	movs	r3, #0
 800c8e2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c8ea:	2b01      	cmp	r3, #1
 800c8ec:	d101      	bne.n	800c8f2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800c8ee:	2302      	movs	r3, #2
 800c8f0:	e0ff      	b.n	800caf2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	2201      	movs	r2, #1
 800c8f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	2b14      	cmp	r3, #20
 800c8fe:	f200 80f0 	bhi.w	800cae2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800c902:	a201      	add	r2, pc, #4	@ (adr r2, 800c908 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800c904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c908:	0800c95d 	.word	0x0800c95d
 800c90c:	0800cae3 	.word	0x0800cae3
 800c910:	0800cae3 	.word	0x0800cae3
 800c914:	0800cae3 	.word	0x0800cae3
 800c918:	0800c99d 	.word	0x0800c99d
 800c91c:	0800cae3 	.word	0x0800cae3
 800c920:	0800cae3 	.word	0x0800cae3
 800c924:	0800cae3 	.word	0x0800cae3
 800c928:	0800c9df 	.word	0x0800c9df
 800c92c:	0800cae3 	.word	0x0800cae3
 800c930:	0800cae3 	.word	0x0800cae3
 800c934:	0800cae3 	.word	0x0800cae3
 800c938:	0800ca1f 	.word	0x0800ca1f
 800c93c:	0800cae3 	.word	0x0800cae3
 800c940:	0800cae3 	.word	0x0800cae3
 800c944:	0800cae3 	.word	0x0800cae3
 800c948:	0800ca61 	.word	0x0800ca61
 800c94c:	0800cae3 	.word	0x0800cae3
 800c950:	0800cae3 	.word	0x0800cae3
 800c954:	0800cae3 	.word	0x0800cae3
 800c958:	0800caa1 	.word	0x0800caa1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	68b9      	ldr	r1, [r7, #8]
 800c962:	4618      	mov	r0, r3
 800c964:	f000 f99c 	bl	800cca0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	699a      	ldr	r2, [r3, #24]
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	f042 0208 	orr.w	r2, r2, #8
 800c976:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	699a      	ldr	r2, [r3, #24]
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	f022 0204 	bic.w	r2, r2, #4
 800c986:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	6999      	ldr	r1, [r3, #24]
 800c98e:	68bb      	ldr	r3, [r7, #8]
 800c990:	691a      	ldr	r2, [r3, #16]
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	430a      	orrs	r2, r1
 800c998:	619a      	str	r2, [r3, #24]
      break;
 800c99a:	e0a5      	b.n	800cae8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	68b9      	ldr	r1, [r7, #8]
 800c9a2:	4618      	mov	r0, r3
 800c9a4:	f000 fa0c 	bl	800cdc0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	699a      	ldr	r2, [r3, #24]
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c9b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	699a      	ldr	r2, [r3, #24]
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c9c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	6999      	ldr	r1, [r3, #24]
 800c9ce:	68bb      	ldr	r3, [r7, #8]
 800c9d0:	691b      	ldr	r3, [r3, #16]
 800c9d2:	021a      	lsls	r2, r3, #8
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	430a      	orrs	r2, r1
 800c9da:	619a      	str	r2, [r3, #24]
      break;
 800c9dc:	e084      	b.n	800cae8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	68b9      	ldr	r1, [r7, #8]
 800c9e4:	4618      	mov	r0, r3
 800c9e6:	f000 fa75 	bl	800ced4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	69da      	ldr	r2, [r3, #28]
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	f042 0208 	orr.w	r2, r2, #8
 800c9f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	69da      	ldr	r2, [r3, #28]
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	f022 0204 	bic.w	r2, r2, #4
 800ca08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	69d9      	ldr	r1, [r3, #28]
 800ca10:	68bb      	ldr	r3, [r7, #8]
 800ca12:	691a      	ldr	r2, [r3, #16]
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	430a      	orrs	r2, r1
 800ca1a:	61da      	str	r2, [r3, #28]
      break;
 800ca1c:	e064      	b.n	800cae8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	68b9      	ldr	r1, [r7, #8]
 800ca24:	4618      	mov	r0, r3
 800ca26:	f000 fadd 	bl	800cfe4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	69da      	ldr	r2, [r3, #28]
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ca38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	69da      	ldr	r2, [r3, #28]
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ca48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	69d9      	ldr	r1, [r3, #28]
 800ca50:	68bb      	ldr	r3, [r7, #8]
 800ca52:	691b      	ldr	r3, [r3, #16]
 800ca54:	021a      	lsls	r2, r3, #8
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	430a      	orrs	r2, r1
 800ca5c:	61da      	str	r2, [r3, #28]
      break;
 800ca5e:	e043      	b.n	800cae8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	68b9      	ldr	r1, [r7, #8]
 800ca66:	4618      	mov	r0, r3
 800ca68:	f000 fb26 	bl	800d0b8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	f042 0208 	orr.w	r2, r2, #8
 800ca7a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	f022 0204 	bic.w	r2, r2, #4
 800ca8a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800ca92:	68bb      	ldr	r3, [r7, #8]
 800ca94:	691a      	ldr	r2, [r3, #16]
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	430a      	orrs	r2, r1
 800ca9c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800ca9e:	e023      	b.n	800cae8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	68b9      	ldr	r1, [r7, #8]
 800caa6:	4618      	mov	r0, r3
 800caa8:	f000 fb6a 	bl	800d180 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800caba:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800caca:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800cad2:	68bb      	ldr	r3, [r7, #8]
 800cad4:	691b      	ldr	r3, [r3, #16]
 800cad6:	021a      	lsls	r2, r3, #8
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	430a      	orrs	r2, r1
 800cade:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800cae0:	e002      	b.n	800cae8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800cae2:	2301      	movs	r3, #1
 800cae4:	75fb      	strb	r3, [r7, #23]
      break;
 800cae6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	2200      	movs	r2, #0
 800caec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800caf0:	7dfb      	ldrb	r3, [r7, #23]
}
 800caf2:	4618      	mov	r0, r3
 800caf4:	3718      	adds	r7, #24
 800caf6:	46bd      	mov	sp, r7
 800caf8:	bd80      	pop	{r7, pc}
 800cafa:	bf00      	nop

0800cafc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800cafc:	b480      	push	{r7}
 800cafe:	b083      	sub	sp, #12
 800cb00:	af00      	add	r7, sp, #0
 800cb02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800cb04:	bf00      	nop
 800cb06:	370c      	adds	r7, #12
 800cb08:	46bd      	mov	sp, r7
 800cb0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb0e:	4770      	bx	lr

0800cb10 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800cb10:	b480      	push	{r7}
 800cb12:	b083      	sub	sp, #12
 800cb14:	af00      	add	r7, sp, #0
 800cb16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800cb18:	bf00      	nop
 800cb1a:	370c      	adds	r7, #12
 800cb1c:	46bd      	mov	sp, r7
 800cb1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb22:	4770      	bx	lr

0800cb24 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800cb24:	b480      	push	{r7}
 800cb26:	b083      	sub	sp, #12
 800cb28:	af00      	add	r7, sp, #0
 800cb2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800cb2c:	bf00      	nop
 800cb2e:	370c      	adds	r7, #12
 800cb30:	46bd      	mov	sp, r7
 800cb32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb36:	4770      	bx	lr

0800cb38 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800cb38:	b480      	push	{r7}
 800cb3a:	b083      	sub	sp, #12
 800cb3c:	af00      	add	r7, sp, #0
 800cb3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800cb40:	bf00      	nop
 800cb42:	370c      	adds	r7, #12
 800cb44:	46bd      	mov	sp, r7
 800cb46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb4a:	4770      	bx	lr

0800cb4c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800cb4c:	b480      	push	{r7}
 800cb4e:	b083      	sub	sp, #12
 800cb50:	af00      	add	r7, sp, #0
 800cb52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800cb54:	bf00      	nop
 800cb56:	370c      	adds	r7, #12
 800cb58:	46bd      	mov	sp, r7
 800cb5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb5e:	4770      	bx	lr

0800cb60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800cb60:	b480      	push	{r7}
 800cb62:	b085      	sub	sp, #20
 800cb64:	af00      	add	r7, sp, #0
 800cb66:	6078      	str	r0, [r7, #4]
 800cb68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	4a43      	ldr	r2, [pc, #268]	@ (800cc80 <TIM_Base_SetConfig+0x120>)
 800cb74:	4293      	cmp	r3, r2
 800cb76:	d013      	beq.n	800cba0 <TIM_Base_SetConfig+0x40>
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cb7e:	d00f      	beq.n	800cba0 <TIM_Base_SetConfig+0x40>
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	4a40      	ldr	r2, [pc, #256]	@ (800cc84 <TIM_Base_SetConfig+0x124>)
 800cb84:	4293      	cmp	r3, r2
 800cb86:	d00b      	beq.n	800cba0 <TIM_Base_SetConfig+0x40>
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	4a3f      	ldr	r2, [pc, #252]	@ (800cc88 <TIM_Base_SetConfig+0x128>)
 800cb8c:	4293      	cmp	r3, r2
 800cb8e:	d007      	beq.n	800cba0 <TIM_Base_SetConfig+0x40>
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	4a3e      	ldr	r2, [pc, #248]	@ (800cc8c <TIM_Base_SetConfig+0x12c>)
 800cb94:	4293      	cmp	r3, r2
 800cb96:	d003      	beq.n	800cba0 <TIM_Base_SetConfig+0x40>
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	4a3d      	ldr	r2, [pc, #244]	@ (800cc90 <TIM_Base_SetConfig+0x130>)
 800cb9c:	4293      	cmp	r3, r2
 800cb9e:	d108      	bne.n	800cbb2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cba6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800cba8:	683b      	ldr	r3, [r7, #0]
 800cbaa:	685b      	ldr	r3, [r3, #4]
 800cbac:	68fa      	ldr	r2, [r7, #12]
 800cbae:	4313      	orrs	r3, r2
 800cbb0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	4a32      	ldr	r2, [pc, #200]	@ (800cc80 <TIM_Base_SetConfig+0x120>)
 800cbb6:	4293      	cmp	r3, r2
 800cbb8:	d01f      	beq.n	800cbfa <TIM_Base_SetConfig+0x9a>
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cbc0:	d01b      	beq.n	800cbfa <TIM_Base_SetConfig+0x9a>
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	4a2f      	ldr	r2, [pc, #188]	@ (800cc84 <TIM_Base_SetConfig+0x124>)
 800cbc6:	4293      	cmp	r3, r2
 800cbc8:	d017      	beq.n	800cbfa <TIM_Base_SetConfig+0x9a>
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	4a2e      	ldr	r2, [pc, #184]	@ (800cc88 <TIM_Base_SetConfig+0x128>)
 800cbce:	4293      	cmp	r3, r2
 800cbd0:	d013      	beq.n	800cbfa <TIM_Base_SetConfig+0x9a>
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	4a2d      	ldr	r2, [pc, #180]	@ (800cc8c <TIM_Base_SetConfig+0x12c>)
 800cbd6:	4293      	cmp	r3, r2
 800cbd8:	d00f      	beq.n	800cbfa <TIM_Base_SetConfig+0x9a>
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	4a2c      	ldr	r2, [pc, #176]	@ (800cc90 <TIM_Base_SetConfig+0x130>)
 800cbde:	4293      	cmp	r3, r2
 800cbe0:	d00b      	beq.n	800cbfa <TIM_Base_SetConfig+0x9a>
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	4a2b      	ldr	r2, [pc, #172]	@ (800cc94 <TIM_Base_SetConfig+0x134>)
 800cbe6:	4293      	cmp	r3, r2
 800cbe8:	d007      	beq.n	800cbfa <TIM_Base_SetConfig+0x9a>
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	4a2a      	ldr	r2, [pc, #168]	@ (800cc98 <TIM_Base_SetConfig+0x138>)
 800cbee:	4293      	cmp	r3, r2
 800cbf0:	d003      	beq.n	800cbfa <TIM_Base_SetConfig+0x9a>
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	4a29      	ldr	r2, [pc, #164]	@ (800cc9c <TIM_Base_SetConfig+0x13c>)
 800cbf6:	4293      	cmp	r3, r2
 800cbf8:	d108      	bne.n	800cc0c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800cbfa:	68fb      	ldr	r3, [r7, #12]
 800cbfc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800cc00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cc02:	683b      	ldr	r3, [r7, #0]
 800cc04:	68db      	ldr	r3, [r3, #12]
 800cc06:	68fa      	ldr	r2, [r7, #12]
 800cc08:	4313      	orrs	r3, r2
 800cc0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800cc12:	683b      	ldr	r3, [r7, #0]
 800cc14:	695b      	ldr	r3, [r3, #20]
 800cc16:	4313      	orrs	r3, r2
 800cc18:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cc1a:	683b      	ldr	r3, [r7, #0]
 800cc1c:	689a      	ldr	r2, [r3, #8]
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800cc22:	683b      	ldr	r3, [r7, #0]
 800cc24:	681a      	ldr	r2, [r3, #0]
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	4a14      	ldr	r2, [pc, #80]	@ (800cc80 <TIM_Base_SetConfig+0x120>)
 800cc2e:	4293      	cmp	r3, r2
 800cc30:	d00f      	beq.n	800cc52 <TIM_Base_SetConfig+0xf2>
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	4a16      	ldr	r2, [pc, #88]	@ (800cc90 <TIM_Base_SetConfig+0x130>)
 800cc36:	4293      	cmp	r3, r2
 800cc38:	d00b      	beq.n	800cc52 <TIM_Base_SetConfig+0xf2>
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	4a15      	ldr	r2, [pc, #84]	@ (800cc94 <TIM_Base_SetConfig+0x134>)
 800cc3e:	4293      	cmp	r3, r2
 800cc40:	d007      	beq.n	800cc52 <TIM_Base_SetConfig+0xf2>
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	4a14      	ldr	r2, [pc, #80]	@ (800cc98 <TIM_Base_SetConfig+0x138>)
 800cc46:	4293      	cmp	r3, r2
 800cc48:	d003      	beq.n	800cc52 <TIM_Base_SetConfig+0xf2>
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	4a13      	ldr	r2, [pc, #76]	@ (800cc9c <TIM_Base_SetConfig+0x13c>)
 800cc4e:	4293      	cmp	r3, r2
 800cc50:	d103      	bne.n	800cc5a <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800cc52:	683b      	ldr	r3, [r7, #0]
 800cc54:	691a      	ldr	r2, [r3, #16]
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	f043 0204 	orr.w	r2, r3, #4
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	2201      	movs	r2, #1
 800cc6a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	68fa      	ldr	r2, [r7, #12]
 800cc70:	601a      	str	r2, [r3, #0]
}
 800cc72:	bf00      	nop
 800cc74:	3714      	adds	r7, #20
 800cc76:	46bd      	mov	sp, r7
 800cc78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc7c:	4770      	bx	lr
 800cc7e:	bf00      	nop
 800cc80:	40010000 	.word	0x40010000
 800cc84:	40000400 	.word	0x40000400
 800cc88:	40000800 	.word	0x40000800
 800cc8c:	40000c00 	.word	0x40000c00
 800cc90:	40010400 	.word	0x40010400
 800cc94:	40014000 	.word	0x40014000
 800cc98:	40014400 	.word	0x40014400
 800cc9c:	40014800 	.word	0x40014800

0800cca0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800cca0:	b480      	push	{r7}
 800cca2:	b087      	sub	sp, #28
 800cca4:	af00      	add	r7, sp, #0
 800cca6:	6078      	str	r0, [r7, #4]
 800cca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	6a1b      	ldr	r3, [r3, #32]
 800ccae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	6a1b      	ldr	r3, [r3, #32]
 800ccb4:	f023 0201 	bic.w	r2, r3, #1
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	685b      	ldr	r3, [r3, #4]
 800ccc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	699b      	ldr	r3, [r3, #24]
 800ccc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ccc8:	68fa      	ldr	r2, [r7, #12]
 800ccca:	4b37      	ldr	r3, [pc, #220]	@ (800cda8 <TIM_OC1_SetConfig+0x108>)
 800cccc:	4013      	ands	r3, r2
 800ccce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	f023 0303 	bic.w	r3, r3, #3
 800ccd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ccd8:	683b      	ldr	r3, [r7, #0]
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	68fa      	ldr	r2, [r7, #12]
 800ccde:	4313      	orrs	r3, r2
 800cce0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800cce2:	697b      	ldr	r3, [r7, #20]
 800cce4:	f023 0302 	bic.w	r3, r3, #2
 800cce8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ccea:	683b      	ldr	r3, [r7, #0]
 800ccec:	689b      	ldr	r3, [r3, #8]
 800ccee:	697a      	ldr	r2, [r7, #20]
 800ccf0:	4313      	orrs	r3, r2
 800ccf2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	4a2d      	ldr	r2, [pc, #180]	@ (800cdac <TIM_OC1_SetConfig+0x10c>)
 800ccf8:	4293      	cmp	r3, r2
 800ccfa:	d00f      	beq.n	800cd1c <TIM_OC1_SetConfig+0x7c>
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	4a2c      	ldr	r2, [pc, #176]	@ (800cdb0 <TIM_OC1_SetConfig+0x110>)
 800cd00:	4293      	cmp	r3, r2
 800cd02:	d00b      	beq.n	800cd1c <TIM_OC1_SetConfig+0x7c>
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	4a2b      	ldr	r2, [pc, #172]	@ (800cdb4 <TIM_OC1_SetConfig+0x114>)
 800cd08:	4293      	cmp	r3, r2
 800cd0a:	d007      	beq.n	800cd1c <TIM_OC1_SetConfig+0x7c>
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	4a2a      	ldr	r2, [pc, #168]	@ (800cdb8 <TIM_OC1_SetConfig+0x118>)
 800cd10:	4293      	cmp	r3, r2
 800cd12:	d003      	beq.n	800cd1c <TIM_OC1_SetConfig+0x7c>
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	4a29      	ldr	r2, [pc, #164]	@ (800cdbc <TIM_OC1_SetConfig+0x11c>)
 800cd18:	4293      	cmp	r3, r2
 800cd1a:	d10c      	bne.n	800cd36 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800cd1c:	697b      	ldr	r3, [r7, #20]
 800cd1e:	f023 0308 	bic.w	r3, r3, #8
 800cd22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800cd24:	683b      	ldr	r3, [r7, #0]
 800cd26:	68db      	ldr	r3, [r3, #12]
 800cd28:	697a      	ldr	r2, [r7, #20]
 800cd2a:	4313      	orrs	r3, r2
 800cd2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800cd2e:	697b      	ldr	r3, [r7, #20]
 800cd30:	f023 0304 	bic.w	r3, r3, #4
 800cd34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	4a1c      	ldr	r2, [pc, #112]	@ (800cdac <TIM_OC1_SetConfig+0x10c>)
 800cd3a:	4293      	cmp	r3, r2
 800cd3c:	d00f      	beq.n	800cd5e <TIM_OC1_SetConfig+0xbe>
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	4a1b      	ldr	r2, [pc, #108]	@ (800cdb0 <TIM_OC1_SetConfig+0x110>)
 800cd42:	4293      	cmp	r3, r2
 800cd44:	d00b      	beq.n	800cd5e <TIM_OC1_SetConfig+0xbe>
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	4a1a      	ldr	r2, [pc, #104]	@ (800cdb4 <TIM_OC1_SetConfig+0x114>)
 800cd4a:	4293      	cmp	r3, r2
 800cd4c:	d007      	beq.n	800cd5e <TIM_OC1_SetConfig+0xbe>
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	4a19      	ldr	r2, [pc, #100]	@ (800cdb8 <TIM_OC1_SetConfig+0x118>)
 800cd52:	4293      	cmp	r3, r2
 800cd54:	d003      	beq.n	800cd5e <TIM_OC1_SetConfig+0xbe>
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	4a18      	ldr	r2, [pc, #96]	@ (800cdbc <TIM_OC1_SetConfig+0x11c>)
 800cd5a:	4293      	cmp	r3, r2
 800cd5c:	d111      	bne.n	800cd82 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800cd5e:	693b      	ldr	r3, [r7, #16]
 800cd60:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800cd64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800cd66:	693b      	ldr	r3, [r7, #16]
 800cd68:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800cd6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800cd6e:	683b      	ldr	r3, [r7, #0]
 800cd70:	695b      	ldr	r3, [r3, #20]
 800cd72:	693a      	ldr	r2, [r7, #16]
 800cd74:	4313      	orrs	r3, r2
 800cd76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800cd78:	683b      	ldr	r3, [r7, #0]
 800cd7a:	699b      	ldr	r3, [r3, #24]
 800cd7c:	693a      	ldr	r2, [r7, #16]
 800cd7e:	4313      	orrs	r3, r2
 800cd80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	693a      	ldr	r2, [r7, #16]
 800cd86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	68fa      	ldr	r2, [r7, #12]
 800cd8c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800cd8e:	683b      	ldr	r3, [r7, #0]
 800cd90:	685a      	ldr	r2, [r3, #4]
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	697a      	ldr	r2, [r7, #20]
 800cd9a:	621a      	str	r2, [r3, #32]
}
 800cd9c:	bf00      	nop
 800cd9e:	371c      	adds	r7, #28
 800cda0:	46bd      	mov	sp, r7
 800cda2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cda6:	4770      	bx	lr
 800cda8:	fffeff8f 	.word	0xfffeff8f
 800cdac:	40010000 	.word	0x40010000
 800cdb0:	40010400 	.word	0x40010400
 800cdb4:	40014000 	.word	0x40014000
 800cdb8:	40014400 	.word	0x40014400
 800cdbc:	40014800 	.word	0x40014800

0800cdc0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800cdc0:	b480      	push	{r7}
 800cdc2:	b087      	sub	sp, #28
 800cdc4:	af00      	add	r7, sp, #0
 800cdc6:	6078      	str	r0, [r7, #4]
 800cdc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	6a1b      	ldr	r3, [r3, #32]
 800cdce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	6a1b      	ldr	r3, [r3, #32]
 800cdd4:	f023 0210 	bic.w	r2, r3, #16
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	685b      	ldr	r3, [r3, #4]
 800cde0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	699b      	ldr	r3, [r3, #24]
 800cde6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800cde8:	68fa      	ldr	r2, [r7, #12]
 800cdea:	4b34      	ldr	r3, [pc, #208]	@ (800cebc <TIM_OC2_SetConfig+0xfc>)
 800cdec:	4013      	ands	r3, r2
 800cdee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800cdf6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cdf8:	683b      	ldr	r3, [r7, #0]
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	021b      	lsls	r3, r3, #8
 800cdfe:	68fa      	ldr	r2, [r7, #12]
 800ce00:	4313      	orrs	r3, r2
 800ce02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ce04:	697b      	ldr	r3, [r7, #20]
 800ce06:	f023 0320 	bic.w	r3, r3, #32
 800ce0a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ce0c:	683b      	ldr	r3, [r7, #0]
 800ce0e:	689b      	ldr	r3, [r3, #8]
 800ce10:	011b      	lsls	r3, r3, #4
 800ce12:	697a      	ldr	r2, [r7, #20]
 800ce14:	4313      	orrs	r3, r2
 800ce16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	4a29      	ldr	r2, [pc, #164]	@ (800cec0 <TIM_OC2_SetConfig+0x100>)
 800ce1c:	4293      	cmp	r3, r2
 800ce1e:	d003      	beq.n	800ce28 <TIM_OC2_SetConfig+0x68>
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	4a28      	ldr	r2, [pc, #160]	@ (800cec4 <TIM_OC2_SetConfig+0x104>)
 800ce24:	4293      	cmp	r3, r2
 800ce26:	d10d      	bne.n	800ce44 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ce28:	697b      	ldr	r3, [r7, #20]
 800ce2a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ce2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ce30:	683b      	ldr	r3, [r7, #0]
 800ce32:	68db      	ldr	r3, [r3, #12]
 800ce34:	011b      	lsls	r3, r3, #4
 800ce36:	697a      	ldr	r2, [r7, #20]
 800ce38:	4313      	orrs	r3, r2
 800ce3a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ce3c:	697b      	ldr	r3, [r7, #20]
 800ce3e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ce42:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	4a1e      	ldr	r2, [pc, #120]	@ (800cec0 <TIM_OC2_SetConfig+0x100>)
 800ce48:	4293      	cmp	r3, r2
 800ce4a:	d00f      	beq.n	800ce6c <TIM_OC2_SetConfig+0xac>
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	4a1d      	ldr	r2, [pc, #116]	@ (800cec4 <TIM_OC2_SetConfig+0x104>)
 800ce50:	4293      	cmp	r3, r2
 800ce52:	d00b      	beq.n	800ce6c <TIM_OC2_SetConfig+0xac>
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	4a1c      	ldr	r2, [pc, #112]	@ (800cec8 <TIM_OC2_SetConfig+0x108>)
 800ce58:	4293      	cmp	r3, r2
 800ce5a:	d007      	beq.n	800ce6c <TIM_OC2_SetConfig+0xac>
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	4a1b      	ldr	r2, [pc, #108]	@ (800cecc <TIM_OC2_SetConfig+0x10c>)
 800ce60:	4293      	cmp	r3, r2
 800ce62:	d003      	beq.n	800ce6c <TIM_OC2_SetConfig+0xac>
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	4a1a      	ldr	r2, [pc, #104]	@ (800ced0 <TIM_OC2_SetConfig+0x110>)
 800ce68:	4293      	cmp	r3, r2
 800ce6a:	d113      	bne.n	800ce94 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ce6c:	693b      	ldr	r3, [r7, #16]
 800ce6e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ce72:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ce74:	693b      	ldr	r3, [r7, #16]
 800ce76:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ce7a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ce7c:	683b      	ldr	r3, [r7, #0]
 800ce7e:	695b      	ldr	r3, [r3, #20]
 800ce80:	009b      	lsls	r3, r3, #2
 800ce82:	693a      	ldr	r2, [r7, #16]
 800ce84:	4313      	orrs	r3, r2
 800ce86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ce88:	683b      	ldr	r3, [r7, #0]
 800ce8a:	699b      	ldr	r3, [r3, #24]
 800ce8c:	009b      	lsls	r3, r3, #2
 800ce8e:	693a      	ldr	r2, [r7, #16]
 800ce90:	4313      	orrs	r3, r2
 800ce92:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	693a      	ldr	r2, [r7, #16]
 800ce98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	68fa      	ldr	r2, [r7, #12]
 800ce9e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800cea0:	683b      	ldr	r3, [r7, #0]
 800cea2:	685a      	ldr	r2, [r3, #4]
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	697a      	ldr	r2, [r7, #20]
 800ceac:	621a      	str	r2, [r3, #32]
}
 800ceae:	bf00      	nop
 800ceb0:	371c      	adds	r7, #28
 800ceb2:	46bd      	mov	sp, r7
 800ceb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceb8:	4770      	bx	lr
 800ceba:	bf00      	nop
 800cebc:	feff8fff 	.word	0xfeff8fff
 800cec0:	40010000 	.word	0x40010000
 800cec4:	40010400 	.word	0x40010400
 800cec8:	40014000 	.word	0x40014000
 800cecc:	40014400 	.word	0x40014400
 800ced0:	40014800 	.word	0x40014800

0800ced4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ced4:	b480      	push	{r7}
 800ced6:	b087      	sub	sp, #28
 800ced8:	af00      	add	r7, sp, #0
 800ceda:	6078      	str	r0, [r7, #4]
 800cedc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	6a1b      	ldr	r3, [r3, #32]
 800cee2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	6a1b      	ldr	r3, [r3, #32]
 800cee8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	685b      	ldr	r3, [r3, #4]
 800cef4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	69db      	ldr	r3, [r3, #28]
 800cefa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800cefc:	68fa      	ldr	r2, [r7, #12]
 800cefe:	4b33      	ldr	r3, [pc, #204]	@ (800cfcc <TIM_OC3_SetConfig+0xf8>)
 800cf00:	4013      	ands	r3, r2
 800cf02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	f023 0303 	bic.w	r3, r3, #3
 800cf0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cf0c:	683b      	ldr	r3, [r7, #0]
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	68fa      	ldr	r2, [r7, #12]
 800cf12:	4313      	orrs	r3, r2
 800cf14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800cf16:	697b      	ldr	r3, [r7, #20]
 800cf18:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800cf1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800cf1e:	683b      	ldr	r3, [r7, #0]
 800cf20:	689b      	ldr	r3, [r3, #8]
 800cf22:	021b      	lsls	r3, r3, #8
 800cf24:	697a      	ldr	r2, [r7, #20]
 800cf26:	4313      	orrs	r3, r2
 800cf28:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	4a28      	ldr	r2, [pc, #160]	@ (800cfd0 <TIM_OC3_SetConfig+0xfc>)
 800cf2e:	4293      	cmp	r3, r2
 800cf30:	d003      	beq.n	800cf3a <TIM_OC3_SetConfig+0x66>
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	4a27      	ldr	r2, [pc, #156]	@ (800cfd4 <TIM_OC3_SetConfig+0x100>)
 800cf36:	4293      	cmp	r3, r2
 800cf38:	d10d      	bne.n	800cf56 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800cf3a:	697b      	ldr	r3, [r7, #20]
 800cf3c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800cf40:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800cf42:	683b      	ldr	r3, [r7, #0]
 800cf44:	68db      	ldr	r3, [r3, #12]
 800cf46:	021b      	lsls	r3, r3, #8
 800cf48:	697a      	ldr	r2, [r7, #20]
 800cf4a:	4313      	orrs	r3, r2
 800cf4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800cf4e:	697b      	ldr	r3, [r7, #20]
 800cf50:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800cf54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	4a1d      	ldr	r2, [pc, #116]	@ (800cfd0 <TIM_OC3_SetConfig+0xfc>)
 800cf5a:	4293      	cmp	r3, r2
 800cf5c:	d00f      	beq.n	800cf7e <TIM_OC3_SetConfig+0xaa>
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	4a1c      	ldr	r2, [pc, #112]	@ (800cfd4 <TIM_OC3_SetConfig+0x100>)
 800cf62:	4293      	cmp	r3, r2
 800cf64:	d00b      	beq.n	800cf7e <TIM_OC3_SetConfig+0xaa>
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	4a1b      	ldr	r2, [pc, #108]	@ (800cfd8 <TIM_OC3_SetConfig+0x104>)
 800cf6a:	4293      	cmp	r3, r2
 800cf6c:	d007      	beq.n	800cf7e <TIM_OC3_SetConfig+0xaa>
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	4a1a      	ldr	r2, [pc, #104]	@ (800cfdc <TIM_OC3_SetConfig+0x108>)
 800cf72:	4293      	cmp	r3, r2
 800cf74:	d003      	beq.n	800cf7e <TIM_OC3_SetConfig+0xaa>
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	4a19      	ldr	r2, [pc, #100]	@ (800cfe0 <TIM_OC3_SetConfig+0x10c>)
 800cf7a:	4293      	cmp	r3, r2
 800cf7c:	d113      	bne.n	800cfa6 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800cf7e:	693b      	ldr	r3, [r7, #16]
 800cf80:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800cf84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800cf86:	693b      	ldr	r3, [r7, #16]
 800cf88:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800cf8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800cf8e:	683b      	ldr	r3, [r7, #0]
 800cf90:	695b      	ldr	r3, [r3, #20]
 800cf92:	011b      	lsls	r3, r3, #4
 800cf94:	693a      	ldr	r2, [r7, #16]
 800cf96:	4313      	orrs	r3, r2
 800cf98:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800cf9a:	683b      	ldr	r3, [r7, #0]
 800cf9c:	699b      	ldr	r3, [r3, #24]
 800cf9e:	011b      	lsls	r3, r3, #4
 800cfa0:	693a      	ldr	r2, [r7, #16]
 800cfa2:	4313      	orrs	r3, r2
 800cfa4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	693a      	ldr	r2, [r7, #16]
 800cfaa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	68fa      	ldr	r2, [r7, #12]
 800cfb0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800cfb2:	683b      	ldr	r3, [r7, #0]
 800cfb4:	685a      	ldr	r2, [r3, #4]
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	697a      	ldr	r2, [r7, #20]
 800cfbe:	621a      	str	r2, [r3, #32]
}
 800cfc0:	bf00      	nop
 800cfc2:	371c      	adds	r7, #28
 800cfc4:	46bd      	mov	sp, r7
 800cfc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfca:	4770      	bx	lr
 800cfcc:	fffeff8f 	.word	0xfffeff8f
 800cfd0:	40010000 	.word	0x40010000
 800cfd4:	40010400 	.word	0x40010400
 800cfd8:	40014000 	.word	0x40014000
 800cfdc:	40014400 	.word	0x40014400
 800cfe0:	40014800 	.word	0x40014800

0800cfe4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800cfe4:	b480      	push	{r7}
 800cfe6:	b087      	sub	sp, #28
 800cfe8:	af00      	add	r7, sp, #0
 800cfea:	6078      	str	r0, [r7, #4]
 800cfec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	6a1b      	ldr	r3, [r3, #32]
 800cff2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	6a1b      	ldr	r3, [r3, #32]
 800cff8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	685b      	ldr	r3, [r3, #4]
 800d004:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	69db      	ldr	r3, [r3, #28]
 800d00a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d00c:	68fa      	ldr	r2, [r7, #12]
 800d00e:	4b24      	ldr	r3, [pc, #144]	@ (800d0a0 <TIM_OC4_SetConfig+0xbc>)
 800d010:	4013      	ands	r3, r2
 800d012:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d01a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d01c:	683b      	ldr	r3, [r7, #0]
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	021b      	lsls	r3, r3, #8
 800d022:	68fa      	ldr	r2, [r7, #12]
 800d024:	4313      	orrs	r3, r2
 800d026:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d028:	693b      	ldr	r3, [r7, #16]
 800d02a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800d02e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d030:	683b      	ldr	r3, [r7, #0]
 800d032:	689b      	ldr	r3, [r3, #8]
 800d034:	031b      	lsls	r3, r3, #12
 800d036:	693a      	ldr	r2, [r7, #16]
 800d038:	4313      	orrs	r3, r2
 800d03a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	4a19      	ldr	r2, [pc, #100]	@ (800d0a4 <TIM_OC4_SetConfig+0xc0>)
 800d040:	4293      	cmp	r3, r2
 800d042:	d00f      	beq.n	800d064 <TIM_OC4_SetConfig+0x80>
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	4a18      	ldr	r2, [pc, #96]	@ (800d0a8 <TIM_OC4_SetConfig+0xc4>)
 800d048:	4293      	cmp	r3, r2
 800d04a:	d00b      	beq.n	800d064 <TIM_OC4_SetConfig+0x80>
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	4a17      	ldr	r2, [pc, #92]	@ (800d0ac <TIM_OC4_SetConfig+0xc8>)
 800d050:	4293      	cmp	r3, r2
 800d052:	d007      	beq.n	800d064 <TIM_OC4_SetConfig+0x80>
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	4a16      	ldr	r2, [pc, #88]	@ (800d0b0 <TIM_OC4_SetConfig+0xcc>)
 800d058:	4293      	cmp	r3, r2
 800d05a:	d003      	beq.n	800d064 <TIM_OC4_SetConfig+0x80>
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	4a15      	ldr	r2, [pc, #84]	@ (800d0b4 <TIM_OC4_SetConfig+0xd0>)
 800d060:	4293      	cmp	r3, r2
 800d062:	d109      	bne.n	800d078 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d064:	697b      	ldr	r3, [r7, #20]
 800d066:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d06a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d06c:	683b      	ldr	r3, [r7, #0]
 800d06e:	695b      	ldr	r3, [r3, #20]
 800d070:	019b      	lsls	r3, r3, #6
 800d072:	697a      	ldr	r2, [r7, #20]
 800d074:	4313      	orrs	r3, r2
 800d076:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	697a      	ldr	r2, [r7, #20]
 800d07c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	68fa      	ldr	r2, [r7, #12]
 800d082:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d084:	683b      	ldr	r3, [r7, #0]
 800d086:	685a      	ldr	r2, [r3, #4]
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	693a      	ldr	r2, [r7, #16]
 800d090:	621a      	str	r2, [r3, #32]
}
 800d092:	bf00      	nop
 800d094:	371c      	adds	r7, #28
 800d096:	46bd      	mov	sp, r7
 800d098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d09c:	4770      	bx	lr
 800d09e:	bf00      	nop
 800d0a0:	feff8fff 	.word	0xfeff8fff
 800d0a4:	40010000 	.word	0x40010000
 800d0a8:	40010400 	.word	0x40010400
 800d0ac:	40014000 	.word	0x40014000
 800d0b0:	40014400 	.word	0x40014400
 800d0b4:	40014800 	.word	0x40014800

0800d0b8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800d0b8:	b480      	push	{r7}
 800d0ba:	b087      	sub	sp, #28
 800d0bc:	af00      	add	r7, sp, #0
 800d0be:	6078      	str	r0, [r7, #4]
 800d0c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	6a1b      	ldr	r3, [r3, #32]
 800d0c6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	6a1b      	ldr	r3, [r3, #32]
 800d0cc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	685b      	ldr	r3, [r3, #4]
 800d0d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d0de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800d0e0:	68fa      	ldr	r2, [r7, #12]
 800d0e2:	4b21      	ldr	r3, [pc, #132]	@ (800d168 <TIM_OC5_SetConfig+0xb0>)
 800d0e4:	4013      	ands	r3, r2
 800d0e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d0e8:	683b      	ldr	r3, [r7, #0]
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	68fa      	ldr	r2, [r7, #12]
 800d0ee:	4313      	orrs	r3, r2
 800d0f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800d0f2:	693b      	ldr	r3, [r7, #16]
 800d0f4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800d0f8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800d0fa:	683b      	ldr	r3, [r7, #0]
 800d0fc:	689b      	ldr	r3, [r3, #8]
 800d0fe:	041b      	lsls	r3, r3, #16
 800d100:	693a      	ldr	r2, [r7, #16]
 800d102:	4313      	orrs	r3, r2
 800d104:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	4a18      	ldr	r2, [pc, #96]	@ (800d16c <TIM_OC5_SetConfig+0xb4>)
 800d10a:	4293      	cmp	r3, r2
 800d10c:	d00f      	beq.n	800d12e <TIM_OC5_SetConfig+0x76>
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	4a17      	ldr	r2, [pc, #92]	@ (800d170 <TIM_OC5_SetConfig+0xb8>)
 800d112:	4293      	cmp	r3, r2
 800d114:	d00b      	beq.n	800d12e <TIM_OC5_SetConfig+0x76>
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	4a16      	ldr	r2, [pc, #88]	@ (800d174 <TIM_OC5_SetConfig+0xbc>)
 800d11a:	4293      	cmp	r3, r2
 800d11c:	d007      	beq.n	800d12e <TIM_OC5_SetConfig+0x76>
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	4a15      	ldr	r2, [pc, #84]	@ (800d178 <TIM_OC5_SetConfig+0xc0>)
 800d122:	4293      	cmp	r3, r2
 800d124:	d003      	beq.n	800d12e <TIM_OC5_SetConfig+0x76>
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	4a14      	ldr	r2, [pc, #80]	@ (800d17c <TIM_OC5_SetConfig+0xc4>)
 800d12a:	4293      	cmp	r3, r2
 800d12c:	d109      	bne.n	800d142 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800d12e:	697b      	ldr	r3, [r7, #20]
 800d130:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d134:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800d136:	683b      	ldr	r3, [r7, #0]
 800d138:	695b      	ldr	r3, [r3, #20]
 800d13a:	021b      	lsls	r3, r3, #8
 800d13c:	697a      	ldr	r2, [r7, #20]
 800d13e:	4313      	orrs	r3, r2
 800d140:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	697a      	ldr	r2, [r7, #20]
 800d146:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	68fa      	ldr	r2, [r7, #12]
 800d14c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800d14e:	683b      	ldr	r3, [r7, #0]
 800d150:	685a      	ldr	r2, [r3, #4]
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	693a      	ldr	r2, [r7, #16]
 800d15a:	621a      	str	r2, [r3, #32]
}
 800d15c:	bf00      	nop
 800d15e:	371c      	adds	r7, #28
 800d160:	46bd      	mov	sp, r7
 800d162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d166:	4770      	bx	lr
 800d168:	fffeff8f 	.word	0xfffeff8f
 800d16c:	40010000 	.word	0x40010000
 800d170:	40010400 	.word	0x40010400
 800d174:	40014000 	.word	0x40014000
 800d178:	40014400 	.word	0x40014400
 800d17c:	40014800 	.word	0x40014800

0800d180 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800d180:	b480      	push	{r7}
 800d182:	b087      	sub	sp, #28
 800d184:	af00      	add	r7, sp, #0
 800d186:	6078      	str	r0, [r7, #4]
 800d188:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	6a1b      	ldr	r3, [r3, #32]
 800d18e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	6a1b      	ldr	r3, [r3, #32]
 800d194:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	685b      	ldr	r3, [r3, #4]
 800d1a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d1a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800d1a8:	68fa      	ldr	r2, [r7, #12]
 800d1aa:	4b22      	ldr	r3, [pc, #136]	@ (800d234 <TIM_OC6_SetConfig+0xb4>)
 800d1ac:	4013      	ands	r3, r2
 800d1ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d1b0:	683b      	ldr	r3, [r7, #0]
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	021b      	lsls	r3, r3, #8
 800d1b6:	68fa      	ldr	r2, [r7, #12]
 800d1b8:	4313      	orrs	r3, r2
 800d1ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800d1bc:	693b      	ldr	r3, [r7, #16]
 800d1be:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800d1c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800d1c4:	683b      	ldr	r3, [r7, #0]
 800d1c6:	689b      	ldr	r3, [r3, #8]
 800d1c8:	051b      	lsls	r3, r3, #20
 800d1ca:	693a      	ldr	r2, [r7, #16]
 800d1cc:	4313      	orrs	r3, r2
 800d1ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	4a19      	ldr	r2, [pc, #100]	@ (800d238 <TIM_OC6_SetConfig+0xb8>)
 800d1d4:	4293      	cmp	r3, r2
 800d1d6:	d00f      	beq.n	800d1f8 <TIM_OC6_SetConfig+0x78>
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	4a18      	ldr	r2, [pc, #96]	@ (800d23c <TIM_OC6_SetConfig+0xbc>)
 800d1dc:	4293      	cmp	r3, r2
 800d1de:	d00b      	beq.n	800d1f8 <TIM_OC6_SetConfig+0x78>
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	4a17      	ldr	r2, [pc, #92]	@ (800d240 <TIM_OC6_SetConfig+0xc0>)
 800d1e4:	4293      	cmp	r3, r2
 800d1e6:	d007      	beq.n	800d1f8 <TIM_OC6_SetConfig+0x78>
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	4a16      	ldr	r2, [pc, #88]	@ (800d244 <TIM_OC6_SetConfig+0xc4>)
 800d1ec:	4293      	cmp	r3, r2
 800d1ee:	d003      	beq.n	800d1f8 <TIM_OC6_SetConfig+0x78>
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	4a15      	ldr	r2, [pc, #84]	@ (800d248 <TIM_OC6_SetConfig+0xc8>)
 800d1f4:	4293      	cmp	r3, r2
 800d1f6:	d109      	bne.n	800d20c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800d1f8:	697b      	ldr	r3, [r7, #20]
 800d1fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800d1fe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800d200:	683b      	ldr	r3, [r7, #0]
 800d202:	695b      	ldr	r3, [r3, #20]
 800d204:	029b      	lsls	r3, r3, #10
 800d206:	697a      	ldr	r2, [r7, #20]
 800d208:	4313      	orrs	r3, r2
 800d20a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	697a      	ldr	r2, [r7, #20]
 800d210:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	68fa      	ldr	r2, [r7, #12]
 800d216:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800d218:	683b      	ldr	r3, [r7, #0]
 800d21a:	685a      	ldr	r2, [r3, #4]
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	693a      	ldr	r2, [r7, #16]
 800d224:	621a      	str	r2, [r3, #32]
}
 800d226:	bf00      	nop
 800d228:	371c      	adds	r7, #28
 800d22a:	46bd      	mov	sp, r7
 800d22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d230:	4770      	bx	lr
 800d232:	bf00      	nop
 800d234:	feff8fff 	.word	0xfeff8fff
 800d238:	40010000 	.word	0x40010000
 800d23c:	40010400 	.word	0x40010400
 800d240:	40014000 	.word	0x40014000
 800d244:	40014400 	.word	0x40014400
 800d248:	40014800 	.word	0x40014800

0800d24c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800d24c:	b480      	push	{r7}
 800d24e:	b087      	sub	sp, #28
 800d250:	af00      	add	r7, sp, #0
 800d252:	60f8      	str	r0, [r7, #12]
 800d254:	60b9      	str	r1, [r7, #8]
 800d256:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d258:	68bb      	ldr	r3, [r7, #8]
 800d25a:	f003 031f 	and.w	r3, r3, #31
 800d25e:	2201      	movs	r2, #1
 800d260:	fa02 f303 	lsl.w	r3, r2, r3
 800d264:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d266:	68fb      	ldr	r3, [r7, #12]
 800d268:	6a1a      	ldr	r2, [r3, #32]
 800d26a:	697b      	ldr	r3, [r7, #20]
 800d26c:	43db      	mvns	r3, r3
 800d26e:	401a      	ands	r2, r3
 800d270:	68fb      	ldr	r3, [r7, #12]
 800d272:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	6a1a      	ldr	r2, [r3, #32]
 800d278:	68bb      	ldr	r3, [r7, #8]
 800d27a:	f003 031f 	and.w	r3, r3, #31
 800d27e:	6879      	ldr	r1, [r7, #4]
 800d280:	fa01 f303 	lsl.w	r3, r1, r3
 800d284:	431a      	orrs	r2, r3
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	621a      	str	r2, [r3, #32]
}
 800d28a:	bf00      	nop
 800d28c:	371c      	adds	r7, #28
 800d28e:	46bd      	mov	sp, r7
 800d290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d294:	4770      	bx	lr
	...

0800d298 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d298:	b480      	push	{r7}
 800d29a:	b085      	sub	sp, #20
 800d29c:	af00      	add	r7, sp, #0
 800d29e:	6078      	str	r0, [r7, #4]
 800d2a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d2a8:	2b01      	cmp	r3, #1
 800d2aa:	d101      	bne.n	800d2b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d2ac:	2302      	movs	r3, #2
 800d2ae:	e06d      	b.n	800d38c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	2201      	movs	r2, #1
 800d2b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	2202      	movs	r2, #2
 800d2bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	685b      	ldr	r3, [r3, #4]
 800d2c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	689b      	ldr	r3, [r3, #8]
 800d2ce:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	4a30      	ldr	r2, [pc, #192]	@ (800d398 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d2d6:	4293      	cmp	r3, r2
 800d2d8:	d004      	beq.n	800d2e4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	4a2f      	ldr	r2, [pc, #188]	@ (800d39c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d2e0:	4293      	cmp	r3, r2
 800d2e2:	d108      	bne.n	800d2f6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800d2ea:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d2ec:	683b      	ldr	r3, [r7, #0]
 800d2ee:	685b      	ldr	r3, [r3, #4]
 800d2f0:	68fa      	ldr	r2, [r7, #12]
 800d2f2:	4313      	orrs	r3, r2
 800d2f4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d2fc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d2fe:	683b      	ldr	r3, [r7, #0]
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	68fa      	ldr	r2, [r7, #12]
 800d304:	4313      	orrs	r3, r2
 800d306:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	68fa      	ldr	r2, [r7, #12]
 800d30e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	4a20      	ldr	r2, [pc, #128]	@ (800d398 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d316:	4293      	cmp	r3, r2
 800d318:	d022      	beq.n	800d360 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d322:	d01d      	beq.n	800d360 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	4a1d      	ldr	r2, [pc, #116]	@ (800d3a0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800d32a:	4293      	cmp	r3, r2
 800d32c:	d018      	beq.n	800d360 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	4a1c      	ldr	r2, [pc, #112]	@ (800d3a4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800d334:	4293      	cmp	r3, r2
 800d336:	d013      	beq.n	800d360 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	4a1a      	ldr	r2, [pc, #104]	@ (800d3a8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800d33e:	4293      	cmp	r3, r2
 800d340:	d00e      	beq.n	800d360 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	4a15      	ldr	r2, [pc, #84]	@ (800d39c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d348:	4293      	cmp	r3, r2
 800d34a:	d009      	beq.n	800d360 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	4a16      	ldr	r2, [pc, #88]	@ (800d3ac <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800d352:	4293      	cmp	r3, r2
 800d354:	d004      	beq.n	800d360 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	4a15      	ldr	r2, [pc, #84]	@ (800d3b0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800d35c:	4293      	cmp	r3, r2
 800d35e:	d10c      	bne.n	800d37a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d360:	68bb      	ldr	r3, [r7, #8]
 800d362:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d366:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d368:	683b      	ldr	r3, [r7, #0]
 800d36a:	689b      	ldr	r3, [r3, #8]
 800d36c:	68ba      	ldr	r2, [r7, #8]
 800d36e:	4313      	orrs	r3, r2
 800d370:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	68ba      	ldr	r2, [r7, #8]
 800d378:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	2201      	movs	r2, #1
 800d37e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	2200      	movs	r2, #0
 800d386:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800d38a:	2300      	movs	r3, #0
}
 800d38c:	4618      	mov	r0, r3
 800d38e:	3714      	adds	r7, #20
 800d390:	46bd      	mov	sp, r7
 800d392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d396:	4770      	bx	lr
 800d398:	40010000 	.word	0x40010000
 800d39c:	40010400 	.word	0x40010400
 800d3a0:	40000400 	.word	0x40000400
 800d3a4:	40000800 	.word	0x40000800
 800d3a8:	40000c00 	.word	0x40000c00
 800d3ac:	40001800 	.word	0x40001800
 800d3b0:	40014000 	.word	0x40014000

0800d3b4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800d3b4:	b480      	push	{r7}
 800d3b6:	b085      	sub	sp, #20
 800d3b8:	af00      	add	r7, sp, #0
 800d3ba:	6078      	str	r0, [r7, #4]
 800d3bc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800d3be:	2300      	movs	r3, #0
 800d3c0:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d3c8:	2b01      	cmp	r3, #1
 800d3ca:	d101      	bne.n	800d3d0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800d3cc:	2302      	movs	r3, #2
 800d3ce:	e065      	b.n	800d49c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	2201      	movs	r2, #1
 800d3d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800d3de:	683b      	ldr	r3, [r7, #0]
 800d3e0:	68db      	ldr	r3, [r3, #12]
 800d3e2:	4313      	orrs	r3, r2
 800d3e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800d3ec:	683b      	ldr	r3, [r7, #0]
 800d3ee:	689b      	ldr	r3, [r3, #8]
 800d3f0:	4313      	orrs	r3, r2
 800d3f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800d3f4:	68fb      	ldr	r3, [r7, #12]
 800d3f6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800d3fa:	683b      	ldr	r3, [r7, #0]
 800d3fc:	685b      	ldr	r3, [r3, #4]
 800d3fe:	4313      	orrs	r3, r2
 800d400:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800d408:	683b      	ldr	r3, [r7, #0]
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	4313      	orrs	r3, r2
 800d40e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800d416:	683b      	ldr	r3, [r7, #0]
 800d418:	691b      	ldr	r3, [r3, #16]
 800d41a:	4313      	orrs	r3, r2
 800d41c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800d41e:	68fb      	ldr	r3, [r7, #12]
 800d420:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800d424:	683b      	ldr	r3, [r7, #0]
 800d426:	695b      	ldr	r3, [r3, #20]
 800d428:	4313      	orrs	r3, r2
 800d42a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800d42c:	68fb      	ldr	r3, [r7, #12]
 800d42e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800d432:	683b      	ldr	r3, [r7, #0]
 800d434:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d436:	4313      	orrs	r3, r2
 800d438:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800d440:	683b      	ldr	r3, [r7, #0]
 800d442:	699b      	ldr	r3, [r3, #24]
 800d444:	041b      	lsls	r3, r3, #16
 800d446:	4313      	orrs	r3, r2
 800d448:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	4a16      	ldr	r2, [pc, #88]	@ (800d4a8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800d450:	4293      	cmp	r3, r2
 800d452:	d004      	beq.n	800d45e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	4a14      	ldr	r2, [pc, #80]	@ (800d4ac <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800d45a:	4293      	cmp	r3, r2
 800d45c:	d115      	bne.n	800d48a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800d464:	683b      	ldr	r3, [r7, #0]
 800d466:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d468:	051b      	lsls	r3, r3, #20
 800d46a:	4313      	orrs	r3, r2
 800d46c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800d474:	683b      	ldr	r3, [r7, #0]
 800d476:	69db      	ldr	r3, [r3, #28]
 800d478:	4313      	orrs	r3, r2
 800d47a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800d47c:	68fb      	ldr	r3, [r7, #12]
 800d47e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800d482:	683b      	ldr	r3, [r7, #0]
 800d484:	6a1b      	ldr	r3, [r3, #32]
 800d486:	4313      	orrs	r3, r2
 800d488:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	68fa      	ldr	r2, [r7, #12]
 800d490:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	2200      	movs	r2, #0
 800d496:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800d49a:	2300      	movs	r3, #0
}
 800d49c:	4618      	mov	r0, r3
 800d49e:	3714      	adds	r7, #20
 800d4a0:	46bd      	mov	sp, r7
 800d4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4a6:	4770      	bx	lr
 800d4a8:	40010000 	.word	0x40010000
 800d4ac:	40010400 	.word	0x40010400

0800d4b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d4b0:	b480      	push	{r7}
 800d4b2:	b083      	sub	sp, #12
 800d4b4:	af00      	add	r7, sp, #0
 800d4b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d4b8:	bf00      	nop
 800d4ba:	370c      	adds	r7, #12
 800d4bc:	46bd      	mov	sp, r7
 800d4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4c2:	4770      	bx	lr

0800d4c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d4c4:	b480      	push	{r7}
 800d4c6:	b083      	sub	sp, #12
 800d4c8:	af00      	add	r7, sp, #0
 800d4ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d4cc:	bf00      	nop
 800d4ce:	370c      	adds	r7, #12
 800d4d0:	46bd      	mov	sp, r7
 800d4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4d6:	4770      	bx	lr

0800d4d8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d4d8:	b480      	push	{r7}
 800d4da:	b083      	sub	sp, #12
 800d4dc:	af00      	add	r7, sp, #0
 800d4de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d4e0:	bf00      	nop
 800d4e2:	370c      	adds	r7, #12
 800d4e4:	46bd      	mov	sp, r7
 800d4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ea:	4770      	bx	lr

0800d4ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d4ec:	b580      	push	{r7, lr}
 800d4ee:	b082      	sub	sp, #8
 800d4f0:	af00      	add	r7, sp, #0
 800d4f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d101      	bne.n	800d4fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d4fa:	2301      	movs	r3, #1
 800d4fc:	e042      	b.n	800d584 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d504:	2b00      	cmp	r3, #0
 800d506:	d106      	bne.n	800d516 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	2200      	movs	r2, #0
 800d50c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d510:	6878      	ldr	r0, [r7, #4]
 800d512:	f7f4 fc1f 	bl	8001d54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	2224      	movs	r2, #36	@ 0x24
 800d51a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	681a      	ldr	r2, [r3, #0]
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	f022 0201 	bic.w	r2, r2, #1
 800d52c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d532:	2b00      	cmp	r3, #0
 800d534:	d002      	beq.n	800d53c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800d536:	6878      	ldr	r0, [r7, #4]
 800d538:	f000 fd90 	bl	800e05c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d53c:	6878      	ldr	r0, [r7, #4]
 800d53e:	f000 f825 	bl	800d58c <UART_SetConfig>
 800d542:	4603      	mov	r3, r0
 800d544:	2b01      	cmp	r3, #1
 800d546:	d101      	bne.n	800d54c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800d548:	2301      	movs	r3, #1
 800d54a:	e01b      	b.n	800d584 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	685a      	ldr	r2, [r3, #4]
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800d55a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	689a      	ldr	r2, [r3, #8]
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800d56a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	681a      	ldr	r2, [r3, #0]
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	f042 0201 	orr.w	r2, r2, #1
 800d57a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d57c:	6878      	ldr	r0, [r7, #4]
 800d57e:	f000 fe0f 	bl	800e1a0 <UART_CheckIdleState>
 800d582:	4603      	mov	r3, r0
}
 800d584:	4618      	mov	r0, r3
 800d586:	3708      	adds	r7, #8
 800d588:	46bd      	mov	sp, r7
 800d58a:	bd80      	pop	{r7, pc}

0800d58c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d58c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d590:	b092      	sub	sp, #72	@ 0x48
 800d592:	af00      	add	r7, sp, #0
 800d594:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d596:	2300      	movs	r3, #0
 800d598:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d59c:	697b      	ldr	r3, [r7, #20]
 800d59e:	689a      	ldr	r2, [r3, #8]
 800d5a0:	697b      	ldr	r3, [r7, #20]
 800d5a2:	691b      	ldr	r3, [r3, #16]
 800d5a4:	431a      	orrs	r2, r3
 800d5a6:	697b      	ldr	r3, [r7, #20]
 800d5a8:	695b      	ldr	r3, [r3, #20]
 800d5aa:	431a      	orrs	r2, r3
 800d5ac:	697b      	ldr	r3, [r7, #20]
 800d5ae:	69db      	ldr	r3, [r3, #28]
 800d5b0:	4313      	orrs	r3, r2
 800d5b2:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d5b4:	697b      	ldr	r3, [r7, #20]
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	681a      	ldr	r2, [r3, #0]
 800d5ba:	4bbe      	ldr	r3, [pc, #760]	@ (800d8b4 <UART_SetConfig+0x328>)
 800d5bc:	4013      	ands	r3, r2
 800d5be:	697a      	ldr	r2, [r7, #20]
 800d5c0:	6812      	ldr	r2, [r2, #0]
 800d5c2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d5c4:	430b      	orrs	r3, r1
 800d5c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d5c8:	697b      	ldr	r3, [r7, #20]
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	685b      	ldr	r3, [r3, #4]
 800d5ce:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800d5d2:	697b      	ldr	r3, [r7, #20]
 800d5d4:	68da      	ldr	r2, [r3, #12]
 800d5d6:	697b      	ldr	r3, [r7, #20]
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	430a      	orrs	r2, r1
 800d5dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d5de:	697b      	ldr	r3, [r7, #20]
 800d5e0:	699b      	ldr	r3, [r3, #24]
 800d5e2:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d5e4:	697b      	ldr	r3, [r7, #20]
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	4ab3      	ldr	r2, [pc, #716]	@ (800d8b8 <UART_SetConfig+0x32c>)
 800d5ea:	4293      	cmp	r3, r2
 800d5ec:	d004      	beq.n	800d5f8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d5ee:	697b      	ldr	r3, [r7, #20]
 800d5f0:	6a1b      	ldr	r3, [r3, #32]
 800d5f2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d5f4:	4313      	orrs	r3, r2
 800d5f6:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d5f8:	697b      	ldr	r3, [r7, #20]
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	689a      	ldr	r2, [r3, #8]
 800d5fe:	4baf      	ldr	r3, [pc, #700]	@ (800d8bc <UART_SetConfig+0x330>)
 800d600:	4013      	ands	r3, r2
 800d602:	697a      	ldr	r2, [r7, #20]
 800d604:	6812      	ldr	r2, [r2, #0]
 800d606:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d608:	430b      	orrs	r3, r1
 800d60a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d60c:	697b      	ldr	r3, [r7, #20]
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d612:	f023 010f 	bic.w	r1, r3, #15
 800d616:	697b      	ldr	r3, [r7, #20]
 800d618:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d61a:	697b      	ldr	r3, [r7, #20]
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	430a      	orrs	r2, r1
 800d620:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d622:	697b      	ldr	r3, [r7, #20]
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	4aa6      	ldr	r2, [pc, #664]	@ (800d8c0 <UART_SetConfig+0x334>)
 800d628:	4293      	cmp	r3, r2
 800d62a:	d177      	bne.n	800d71c <UART_SetConfig+0x190>
 800d62c:	4ba5      	ldr	r3, [pc, #660]	@ (800d8c4 <UART_SetConfig+0x338>)
 800d62e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d630:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d634:	2b28      	cmp	r3, #40	@ 0x28
 800d636:	d86d      	bhi.n	800d714 <UART_SetConfig+0x188>
 800d638:	a201      	add	r2, pc, #4	@ (adr r2, 800d640 <UART_SetConfig+0xb4>)
 800d63a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d63e:	bf00      	nop
 800d640:	0800d6e5 	.word	0x0800d6e5
 800d644:	0800d715 	.word	0x0800d715
 800d648:	0800d715 	.word	0x0800d715
 800d64c:	0800d715 	.word	0x0800d715
 800d650:	0800d715 	.word	0x0800d715
 800d654:	0800d715 	.word	0x0800d715
 800d658:	0800d715 	.word	0x0800d715
 800d65c:	0800d715 	.word	0x0800d715
 800d660:	0800d6ed 	.word	0x0800d6ed
 800d664:	0800d715 	.word	0x0800d715
 800d668:	0800d715 	.word	0x0800d715
 800d66c:	0800d715 	.word	0x0800d715
 800d670:	0800d715 	.word	0x0800d715
 800d674:	0800d715 	.word	0x0800d715
 800d678:	0800d715 	.word	0x0800d715
 800d67c:	0800d715 	.word	0x0800d715
 800d680:	0800d6f5 	.word	0x0800d6f5
 800d684:	0800d715 	.word	0x0800d715
 800d688:	0800d715 	.word	0x0800d715
 800d68c:	0800d715 	.word	0x0800d715
 800d690:	0800d715 	.word	0x0800d715
 800d694:	0800d715 	.word	0x0800d715
 800d698:	0800d715 	.word	0x0800d715
 800d69c:	0800d715 	.word	0x0800d715
 800d6a0:	0800d6fd 	.word	0x0800d6fd
 800d6a4:	0800d715 	.word	0x0800d715
 800d6a8:	0800d715 	.word	0x0800d715
 800d6ac:	0800d715 	.word	0x0800d715
 800d6b0:	0800d715 	.word	0x0800d715
 800d6b4:	0800d715 	.word	0x0800d715
 800d6b8:	0800d715 	.word	0x0800d715
 800d6bc:	0800d715 	.word	0x0800d715
 800d6c0:	0800d705 	.word	0x0800d705
 800d6c4:	0800d715 	.word	0x0800d715
 800d6c8:	0800d715 	.word	0x0800d715
 800d6cc:	0800d715 	.word	0x0800d715
 800d6d0:	0800d715 	.word	0x0800d715
 800d6d4:	0800d715 	.word	0x0800d715
 800d6d8:	0800d715 	.word	0x0800d715
 800d6dc:	0800d715 	.word	0x0800d715
 800d6e0:	0800d70d 	.word	0x0800d70d
 800d6e4:	2301      	movs	r3, #1
 800d6e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d6ea:	e222      	b.n	800db32 <UART_SetConfig+0x5a6>
 800d6ec:	2304      	movs	r3, #4
 800d6ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d6f2:	e21e      	b.n	800db32 <UART_SetConfig+0x5a6>
 800d6f4:	2308      	movs	r3, #8
 800d6f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d6fa:	e21a      	b.n	800db32 <UART_SetConfig+0x5a6>
 800d6fc:	2310      	movs	r3, #16
 800d6fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d702:	e216      	b.n	800db32 <UART_SetConfig+0x5a6>
 800d704:	2320      	movs	r3, #32
 800d706:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d70a:	e212      	b.n	800db32 <UART_SetConfig+0x5a6>
 800d70c:	2340      	movs	r3, #64	@ 0x40
 800d70e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d712:	e20e      	b.n	800db32 <UART_SetConfig+0x5a6>
 800d714:	2380      	movs	r3, #128	@ 0x80
 800d716:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d71a:	e20a      	b.n	800db32 <UART_SetConfig+0x5a6>
 800d71c:	697b      	ldr	r3, [r7, #20]
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	4a69      	ldr	r2, [pc, #420]	@ (800d8c8 <UART_SetConfig+0x33c>)
 800d722:	4293      	cmp	r3, r2
 800d724:	d130      	bne.n	800d788 <UART_SetConfig+0x1fc>
 800d726:	4b67      	ldr	r3, [pc, #412]	@ (800d8c4 <UART_SetConfig+0x338>)
 800d728:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d72a:	f003 0307 	and.w	r3, r3, #7
 800d72e:	2b05      	cmp	r3, #5
 800d730:	d826      	bhi.n	800d780 <UART_SetConfig+0x1f4>
 800d732:	a201      	add	r2, pc, #4	@ (adr r2, 800d738 <UART_SetConfig+0x1ac>)
 800d734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d738:	0800d751 	.word	0x0800d751
 800d73c:	0800d759 	.word	0x0800d759
 800d740:	0800d761 	.word	0x0800d761
 800d744:	0800d769 	.word	0x0800d769
 800d748:	0800d771 	.word	0x0800d771
 800d74c:	0800d779 	.word	0x0800d779
 800d750:	2300      	movs	r3, #0
 800d752:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d756:	e1ec      	b.n	800db32 <UART_SetConfig+0x5a6>
 800d758:	2304      	movs	r3, #4
 800d75a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d75e:	e1e8      	b.n	800db32 <UART_SetConfig+0x5a6>
 800d760:	2308      	movs	r3, #8
 800d762:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d766:	e1e4      	b.n	800db32 <UART_SetConfig+0x5a6>
 800d768:	2310      	movs	r3, #16
 800d76a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d76e:	e1e0      	b.n	800db32 <UART_SetConfig+0x5a6>
 800d770:	2320      	movs	r3, #32
 800d772:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d776:	e1dc      	b.n	800db32 <UART_SetConfig+0x5a6>
 800d778:	2340      	movs	r3, #64	@ 0x40
 800d77a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d77e:	e1d8      	b.n	800db32 <UART_SetConfig+0x5a6>
 800d780:	2380      	movs	r3, #128	@ 0x80
 800d782:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d786:	e1d4      	b.n	800db32 <UART_SetConfig+0x5a6>
 800d788:	697b      	ldr	r3, [r7, #20]
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	4a4f      	ldr	r2, [pc, #316]	@ (800d8cc <UART_SetConfig+0x340>)
 800d78e:	4293      	cmp	r3, r2
 800d790:	d130      	bne.n	800d7f4 <UART_SetConfig+0x268>
 800d792:	4b4c      	ldr	r3, [pc, #304]	@ (800d8c4 <UART_SetConfig+0x338>)
 800d794:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d796:	f003 0307 	and.w	r3, r3, #7
 800d79a:	2b05      	cmp	r3, #5
 800d79c:	d826      	bhi.n	800d7ec <UART_SetConfig+0x260>
 800d79e:	a201      	add	r2, pc, #4	@ (adr r2, 800d7a4 <UART_SetConfig+0x218>)
 800d7a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7a4:	0800d7bd 	.word	0x0800d7bd
 800d7a8:	0800d7c5 	.word	0x0800d7c5
 800d7ac:	0800d7cd 	.word	0x0800d7cd
 800d7b0:	0800d7d5 	.word	0x0800d7d5
 800d7b4:	0800d7dd 	.word	0x0800d7dd
 800d7b8:	0800d7e5 	.word	0x0800d7e5
 800d7bc:	2300      	movs	r3, #0
 800d7be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d7c2:	e1b6      	b.n	800db32 <UART_SetConfig+0x5a6>
 800d7c4:	2304      	movs	r3, #4
 800d7c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d7ca:	e1b2      	b.n	800db32 <UART_SetConfig+0x5a6>
 800d7cc:	2308      	movs	r3, #8
 800d7ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d7d2:	e1ae      	b.n	800db32 <UART_SetConfig+0x5a6>
 800d7d4:	2310      	movs	r3, #16
 800d7d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d7da:	e1aa      	b.n	800db32 <UART_SetConfig+0x5a6>
 800d7dc:	2320      	movs	r3, #32
 800d7de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d7e2:	e1a6      	b.n	800db32 <UART_SetConfig+0x5a6>
 800d7e4:	2340      	movs	r3, #64	@ 0x40
 800d7e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d7ea:	e1a2      	b.n	800db32 <UART_SetConfig+0x5a6>
 800d7ec:	2380      	movs	r3, #128	@ 0x80
 800d7ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d7f2:	e19e      	b.n	800db32 <UART_SetConfig+0x5a6>
 800d7f4:	697b      	ldr	r3, [r7, #20]
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	4a35      	ldr	r2, [pc, #212]	@ (800d8d0 <UART_SetConfig+0x344>)
 800d7fa:	4293      	cmp	r3, r2
 800d7fc:	d130      	bne.n	800d860 <UART_SetConfig+0x2d4>
 800d7fe:	4b31      	ldr	r3, [pc, #196]	@ (800d8c4 <UART_SetConfig+0x338>)
 800d800:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d802:	f003 0307 	and.w	r3, r3, #7
 800d806:	2b05      	cmp	r3, #5
 800d808:	d826      	bhi.n	800d858 <UART_SetConfig+0x2cc>
 800d80a:	a201      	add	r2, pc, #4	@ (adr r2, 800d810 <UART_SetConfig+0x284>)
 800d80c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d810:	0800d829 	.word	0x0800d829
 800d814:	0800d831 	.word	0x0800d831
 800d818:	0800d839 	.word	0x0800d839
 800d81c:	0800d841 	.word	0x0800d841
 800d820:	0800d849 	.word	0x0800d849
 800d824:	0800d851 	.word	0x0800d851
 800d828:	2300      	movs	r3, #0
 800d82a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d82e:	e180      	b.n	800db32 <UART_SetConfig+0x5a6>
 800d830:	2304      	movs	r3, #4
 800d832:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d836:	e17c      	b.n	800db32 <UART_SetConfig+0x5a6>
 800d838:	2308      	movs	r3, #8
 800d83a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d83e:	e178      	b.n	800db32 <UART_SetConfig+0x5a6>
 800d840:	2310      	movs	r3, #16
 800d842:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d846:	e174      	b.n	800db32 <UART_SetConfig+0x5a6>
 800d848:	2320      	movs	r3, #32
 800d84a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d84e:	e170      	b.n	800db32 <UART_SetConfig+0x5a6>
 800d850:	2340      	movs	r3, #64	@ 0x40
 800d852:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d856:	e16c      	b.n	800db32 <UART_SetConfig+0x5a6>
 800d858:	2380      	movs	r3, #128	@ 0x80
 800d85a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d85e:	e168      	b.n	800db32 <UART_SetConfig+0x5a6>
 800d860:	697b      	ldr	r3, [r7, #20]
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	4a1b      	ldr	r2, [pc, #108]	@ (800d8d4 <UART_SetConfig+0x348>)
 800d866:	4293      	cmp	r3, r2
 800d868:	d142      	bne.n	800d8f0 <UART_SetConfig+0x364>
 800d86a:	4b16      	ldr	r3, [pc, #88]	@ (800d8c4 <UART_SetConfig+0x338>)
 800d86c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d86e:	f003 0307 	and.w	r3, r3, #7
 800d872:	2b05      	cmp	r3, #5
 800d874:	d838      	bhi.n	800d8e8 <UART_SetConfig+0x35c>
 800d876:	a201      	add	r2, pc, #4	@ (adr r2, 800d87c <UART_SetConfig+0x2f0>)
 800d878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d87c:	0800d895 	.word	0x0800d895
 800d880:	0800d89d 	.word	0x0800d89d
 800d884:	0800d8a5 	.word	0x0800d8a5
 800d888:	0800d8ad 	.word	0x0800d8ad
 800d88c:	0800d8d9 	.word	0x0800d8d9
 800d890:	0800d8e1 	.word	0x0800d8e1
 800d894:	2300      	movs	r3, #0
 800d896:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d89a:	e14a      	b.n	800db32 <UART_SetConfig+0x5a6>
 800d89c:	2304      	movs	r3, #4
 800d89e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d8a2:	e146      	b.n	800db32 <UART_SetConfig+0x5a6>
 800d8a4:	2308      	movs	r3, #8
 800d8a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d8aa:	e142      	b.n	800db32 <UART_SetConfig+0x5a6>
 800d8ac:	2310      	movs	r3, #16
 800d8ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d8b2:	e13e      	b.n	800db32 <UART_SetConfig+0x5a6>
 800d8b4:	cfff69f3 	.word	0xcfff69f3
 800d8b8:	58000c00 	.word	0x58000c00
 800d8bc:	11fff4ff 	.word	0x11fff4ff
 800d8c0:	40011000 	.word	0x40011000
 800d8c4:	58024400 	.word	0x58024400
 800d8c8:	40004400 	.word	0x40004400
 800d8cc:	40004800 	.word	0x40004800
 800d8d0:	40004c00 	.word	0x40004c00
 800d8d4:	40005000 	.word	0x40005000
 800d8d8:	2320      	movs	r3, #32
 800d8da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d8de:	e128      	b.n	800db32 <UART_SetConfig+0x5a6>
 800d8e0:	2340      	movs	r3, #64	@ 0x40
 800d8e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d8e6:	e124      	b.n	800db32 <UART_SetConfig+0x5a6>
 800d8e8:	2380      	movs	r3, #128	@ 0x80
 800d8ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d8ee:	e120      	b.n	800db32 <UART_SetConfig+0x5a6>
 800d8f0:	697b      	ldr	r3, [r7, #20]
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	4acb      	ldr	r2, [pc, #812]	@ (800dc24 <UART_SetConfig+0x698>)
 800d8f6:	4293      	cmp	r3, r2
 800d8f8:	d176      	bne.n	800d9e8 <UART_SetConfig+0x45c>
 800d8fa:	4bcb      	ldr	r3, [pc, #812]	@ (800dc28 <UART_SetConfig+0x69c>)
 800d8fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d8fe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d902:	2b28      	cmp	r3, #40	@ 0x28
 800d904:	d86c      	bhi.n	800d9e0 <UART_SetConfig+0x454>
 800d906:	a201      	add	r2, pc, #4	@ (adr r2, 800d90c <UART_SetConfig+0x380>)
 800d908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d90c:	0800d9b1 	.word	0x0800d9b1
 800d910:	0800d9e1 	.word	0x0800d9e1
 800d914:	0800d9e1 	.word	0x0800d9e1
 800d918:	0800d9e1 	.word	0x0800d9e1
 800d91c:	0800d9e1 	.word	0x0800d9e1
 800d920:	0800d9e1 	.word	0x0800d9e1
 800d924:	0800d9e1 	.word	0x0800d9e1
 800d928:	0800d9e1 	.word	0x0800d9e1
 800d92c:	0800d9b9 	.word	0x0800d9b9
 800d930:	0800d9e1 	.word	0x0800d9e1
 800d934:	0800d9e1 	.word	0x0800d9e1
 800d938:	0800d9e1 	.word	0x0800d9e1
 800d93c:	0800d9e1 	.word	0x0800d9e1
 800d940:	0800d9e1 	.word	0x0800d9e1
 800d944:	0800d9e1 	.word	0x0800d9e1
 800d948:	0800d9e1 	.word	0x0800d9e1
 800d94c:	0800d9c1 	.word	0x0800d9c1
 800d950:	0800d9e1 	.word	0x0800d9e1
 800d954:	0800d9e1 	.word	0x0800d9e1
 800d958:	0800d9e1 	.word	0x0800d9e1
 800d95c:	0800d9e1 	.word	0x0800d9e1
 800d960:	0800d9e1 	.word	0x0800d9e1
 800d964:	0800d9e1 	.word	0x0800d9e1
 800d968:	0800d9e1 	.word	0x0800d9e1
 800d96c:	0800d9c9 	.word	0x0800d9c9
 800d970:	0800d9e1 	.word	0x0800d9e1
 800d974:	0800d9e1 	.word	0x0800d9e1
 800d978:	0800d9e1 	.word	0x0800d9e1
 800d97c:	0800d9e1 	.word	0x0800d9e1
 800d980:	0800d9e1 	.word	0x0800d9e1
 800d984:	0800d9e1 	.word	0x0800d9e1
 800d988:	0800d9e1 	.word	0x0800d9e1
 800d98c:	0800d9d1 	.word	0x0800d9d1
 800d990:	0800d9e1 	.word	0x0800d9e1
 800d994:	0800d9e1 	.word	0x0800d9e1
 800d998:	0800d9e1 	.word	0x0800d9e1
 800d99c:	0800d9e1 	.word	0x0800d9e1
 800d9a0:	0800d9e1 	.word	0x0800d9e1
 800d9a4:	0800d9e1 	.word	0x0800d9e1
 800d9a8:	0800d9e1 	.word	0x0800d9e1
 800d9ac:	0800d9d9 	.word	0x0800d9d9
 800d9b0:	2301      	movs	r3, #1
 800d9b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d9b6:	e0bc      	b.n	800db32 <UART_SetConfig+0x5a6>
 800d9b8:	2304      	movs	r3, #4
 800d9ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d9be:	e0b8      	b.n	800db32 <UART_SetConfig+0x5a6>
 800d9c0:	2308      	movs	r3, #8
 800d9c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d9c6:	e0b4      	b.n	800db32 <UART_SetConfig+0x5a6>
 800d9c8:	2310      	movs	r3, #16
 800d9ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d9ce:	e0b0      	b.n	800db32 <UART_SetConfig+0x5a6>
 800d9d0:	2320      	movs	r3, #32
 800d9d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d9d6:	e0ac      	b.n	800db32 <UART_SetConfig+0x5a6>
 800d9d8:	2340      	movs	r3, #64	@ 0x40
 800d9da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d9de:	e0a8      	b.n	800db32 <UART_SetConfig+0x5a6>
 800d9e0:	2380      	movs	r3, #128	@ 0x80
 800d9e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d9e6:	e0a4      	b.n	800db32 <UART_SetConfig+0x5a6>
 800d9e8:	697b      	ldr	r3, [r7, #20]
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	4a8f      	ldr	r2, [pc, #572]	@ (800dc2c <UART_SetConfig+0x6a0>)
 800d9ee:	4293      	cmp	r3, r2
 800d9f0:	d130      	bne.n	800da54 <UART_SetConfig+0x4c8>
 800d9f2:	4b8d      	ldr	r3, [pc, #564]	@ (800dc28 <UART_SetConfig+0x69c>)
 800d9f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d9f6:	f003 0307 	and.w	r3, r3, #7
 800d9fa:	2b05      	cmp	r3, #5
 800d9fc:	d826      	bhi.n	800da4c <UART_SetConfig+0x4c0>
 800d9fe:	a201      	add	r2, pc, #4	@ (adr r2, 800da04 <UART_SetConfig+0x478>)
 800da00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da04:	0800da1d 	.word	0x0800da1d
 800da08:	0800da25 	.word	0x0800da25
 800da0c:	0800da2d 	.word	0x0800da2d
 800da10:	0800da35 	.word	0x0800da35
 800da14:	0800da3d 	.word	0x0800da3d
 800da18:	0800da45 	.word	0x0800da45
 800da1c:	2300      	movs	r3, #0
 800da1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da22:	e086      	b.n	800db32 <UART_SetConfig+0x5a6>
 800da24:	2304      	movs	r3, #4
 800da26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da2a:	e082      	b.n	800db32 <UART_SetConfig+0x5a6>
 800da2c:	2308      	movs	r3, #8
 800da2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da32:	e07e      	b.n	800db32 <UART_SetConfig+0x5a6>
 800da34:	2310      	movs	r3, #16
 800da36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da3a:	e07a      	b.n	800db32 <UART_SetConfig+0x5a6>
 800da3c:	2320      	movs	r3, #32
 800da3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da42:	e076      	b.n	800db32 <UART_SetConfig+0x5a6>
 800da44:	2340      	movs	r3, #64	@ 0x40
 800da46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da4a:	e072      	b.n	800db32 <UART_SetConfig+0x5a6>
 800da4c:	2380      	movs	r3, #128	@ 0x80
 800da4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da52:	e06e      	b.n	800db32 <UART_SetConfig+0x5a6>
 800da54:	697b      	ldr	r3, [r7, #20]
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	4a75      	ldr	r2, [pc, #468]	@ (800dc30 <UART_SetConfig+0x6a4>)
 800da5a:	4293      	cmp	r3, r2
 800da5c:	d130      	bne.n	800dac0 <UART_SetConfig+0x534>
 800da5e:	4b72      	ldr	r3, [pc, #456]	@ (800dc28 <UART_SetConfig+0x69c>)
 800da60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800da62:	f003 0307 	and.w	r3, r3, #7
 800da66:	2b05      	cmp	r3, #5
 800da68:	d826      	bhi.n	800dab8 <UART_SetConfig+0x52c>
 800da6a:	a201      	add	r2, pc, #4	@ (adr r2, 800da70 <UART_SetConfig+0x4e4>)
 800da6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da70:	0800da89 	.word	0x0800da89
 800da74:	0800da91 	.word	0x0800da91
 800da78:	0800da99 	.word	0x0800da99
 800da7c:	0800daa1 	.word	0x0800daa1
 800da80:	0800daa9 	.word	0x0800daa9
 800da84:	0800dab1 	.word	0x0800dab1
 800da88:	2300      	movs	r3, #0
 800da8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da8e:	e050      	b.n	800db32 <UART_SetConfig+0x5a6>
 800da90:	2304      	movs	r3, #4
 800da92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da96:	e04c      	b.n	800db32 <UART_SetConfig+0x5a6>
 800da98:	2308      	movs	r3, #8
 800da9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da9e:	e048      	b.n	800db32 <UART_SetConfig+0x5a6>
 800daa0:	2310      	movs	r3, #16
 800daa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800daa6:	e044      	b.n	800db32 <UART_SetConfig+0x5a6>
 800daa8:	2320      	movs	r3, #32
 800daaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800daae:	e040      	b.n	800db32 <UART_SetConfig+0x5a6>
 800dab0:	2340      	movs	r3, #64	@ 0x40
 800dab2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dab6:	e03c      	b.n	800db32 <UART_SetConfig+0x5a6>
 800dab8:	2380      	movs	r3, #128	@ 0x80
 800daba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dabe:	e038      	b.n	800db32 <UART_SetConfig+0x5a6>
 800dac0:	697b      	ldr	r3, [r7, #20]
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	4a5b      	ldr	r2, [pc, #364]	@ (800dc34 <UART_SetConfig+0x6a8>)
 800dac6:	4293      	cmp	r3, r2
 800dac8:	d130      	bne.n	800db2c <UART_SetConfig+0x5a0>
 800daca:	4b57      	ldr	r3, [pc, #348]	@ (800dc28 <UART_SetConfig+0x69c>)
 800dacc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dace:	f003 0307 	and.w	r3, r3, #7
 800dad2:	2b05      	cmp	r3, #5
 800dad4:	d826      	bhi.n	800db24 <UART_SetConfig+0x598>
 800dad6:	a201      	add	r2, pc, #4	@ (adr r2, 800dadc <UART_SetConfig+0x550>)
 800dad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dadc:	0800daf5 	.word	0x0800daf5
 800dae0:	0800dafd 	.word	0x0800dafd
 800dae4:	0800db05 	.word	0x0800db05
 800dae8:	0800db0d 	.word	0x0800db0d
 800daec:	0800db15 	.word	0x0800db15
 800daf0:	0800db1d 	.word	0x0800db1d
 800daf4:	2302      	movs	r3, #2
 800daf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dafa:	e01a      	b.n	800db32 <UART_SetConfig+0x5a6>
 800dafc:	2304      	movs	r3, #4
 800dafe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800db02:	e016      	b.n	800db32 <UART_SetConfig+0x5a6>
 800db04:	2308      	movs	r3, #8
 800db06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800db0a:	e012      	b.n	800db32 <UART_SetConfig+0x5a6>
 800db0c:	2310      	movs	r3, #16
 800db0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800db12:	e00e      	b.n	800db32 <UART_SetConfig+0x5a6>
 800db14:	2320      	movs	r3, #32
 800db16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800db1a:	e00a      	b.n	800db32 <UART_SetConfig+0x5a6>
 800db1c:	2340      	movs	r3, #64	@ 0x40
 800db1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800db22:	e006      	b.n	800db32 <UART_SetConfig+0x5a6>
 800db24:	2380      	movs	r3, #128	@ 0x80
 800db26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800db2a:	e002      	b.n	800db32 <UART_SetConfig+0x5a6>
 800db2c:	2380      	movs	r3, #128	@ 0x80
 800db2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800db32:	697b      	ldr	r3, [r7, #20]
 800db34:	681b      	ldr	r3, [r3, #0]
 800db36:	4a3f      	ldr	r2, [pc, #252]	@ (800dc34 <UART_SetConfig+0x6a8>)
 800db38:	4293      	cmp	r3, r2
 800db3a:	f040 80f8 	bne.w	800dd2e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800db3e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800db42:	2b20      	cmp	r3, #32
 800db44:	dc46      	bgt.n	800dbd4 <UART_SetConfig+0x648>
 800db46:	2b02      	cmp	r3, #2
 800db48:	f2c0 8082 	blt.w	800dc50 <UART_SetConfig+0x6c4>
 800db4c:	3b02      	subs	r3, #2
 800db4e:	2b1e      	cmp	r3, #30
 800db50:	d87e      	bhi.n	800dc50 <UART_SetConfig+0x6c4>
 800db52:	a201      	add	r2, pc, #4	@ (adr r2, 800db58 <UART_SetConfig+0x5cc>)
 800db54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db58:	0800dbdb 	.word	0x0800dbdb
 800db5c:	0800dc51 	.word	0x0800dc51
 800db60:	0800dbe3 	.word	0x0800dbe3
 800db64:	0800dc51 	.word	0x0800dc51
 800db68:	0800dc51 	.word	0x0800dc51
 800db6c:	0800dc51 	.word	0x0800dc51
 800db70:	0800dbf3 	.word	0x0800dbf3
 800db74:	0800dc51 	.word	0x0800dc51
 800db78:	0800dc51 	.word	0x0800dc51
 800db7c:	0800dc51 	.word	0x0800dc51
 800db80:	0800dc51 	.word	0x0800dc51
 800db84:	0800dc51 	.word	0x0800dc51
 800db88:	0800dc51 	.word	0x0800dc51
 800db8c:	0800dc51 	.word	0x0800dc51
 800db90:	0800dc03 	.word	0x0800dc03
 800db94:	0800dc51 	.word	0x0800dc51
 800db98:	0800dc51 	.word	0x0800dc51
 800db9c:	0800dc51 	.word	0x0800dc51
 800dba0:	0800dc51 	.word	0x0800dc51
 800dba4:	0800dc51 	.word	0x0800dc51
 800dba8:	0800dc51 	.word	0x0800dc51
 800dbac:	0800dc51 	.word	0x0800dc51
 800dbb0:	0800dc51 	.word	0x0800dc51
 800dbb4:	0800dc51 	.word	0x0800dc51
 800dbb8:	0800dc51 	.word	0x0800dc51
 800dbbc:	0800dc51 	.word	0x0800dc51
 800dbc0:	0800dc51 	.word	0x0800dc51
 800dbc4:	0800dc51 	.word	0x0800dc51
 800dbc8:	0800dc51 	.word	0x0800dc51
 800dbcc:	0800dc51 	.word	0x0800dc51
 800dbd0:	0800dc43 	.word	0x0800dc43
 800dbd4:	2b40      	cmp	r3, #64	@ 0x40
 800dbd6:	d037      	beq.n	800dc48 <UART_SetConfig+0x6bc>
 800dbd8:	e03a      	b.n	800dc50 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800dbda:	f7fd fe55 	bl	800b888 <HAL_RCCEx_GetD3PCLK1Freq>
 800dbde:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800dbe0:	e03c      	b.n	800dc5c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800dbe2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800dbe6:	4618      	mov	r0, r3
 800dbe8:	f7fd fe64 	bl	800b8b4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800dbec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dbee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dbf0:	e034      	b.n	800dc5c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800dbf2:	f107 0318 	add.w	r3, r7, #24
 800dbf6:	4618      	mov	r0, r3
 800dbf8:	f7fd ffb0 	bl	800bb5c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800dbfc:	69fb      	ldr	r3, [r7, #28]
 800dbfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dc00:	e02c      	b.n	800dc5c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800dc02:	4b09      	ldr	r3, [pc, #36]	@ (800dc28 <UART_SetConfig+0x69c>)
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	f003 0320 	and.w	r3, r3, #32
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d016      	beq.n	800dc3c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800dc0e:	4b06      	ldr	r3, [pc, #24]	@ (800dc28 <UART_SetConfig+0x69c>)
 800dc10:	681b      	ldr	r3, [r3, #0]
 800dc12:	08db      	lsrs	r3, r3, #3
 800dc14:	f003 0303 	and.w	r3, r3, #3
 800dc18:	4a07      	ldr	r2, [pc, #28]	@ (800dc38 <UART_SetConfig+0x6ac>)
 800dc1a:	fa22 f303 	lsr.w	r3, r2, r3
 800dc1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800dc20:	e01c      	b.n	800dc5c <UART_SetConfig+0x6d0>
 800dc22:	bf00      	nop
 800dc24:	40011400 	.word	0x40011400
 800dc28:	58024400 	.word	0x58024400
 800dc2c:	40007800 	.word	0x40007800
 800dc30:	40007c00 	.word	0x40007c00
 800dc34:	58000c00 	.word	0x58000c00
 800dc38:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800dc3c:	4b9d      	ldr	r3, [pc, #628]	@ (800deb4 <UART_SetConfig+0x928>)
 800dc3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dc40:	e00c      	b.n	800dc5c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800dc42:	4b9d      	ldr	r3, [pc, #628]	@ (800deb8 <UART_SetConfig+0x92c>)
 800dc44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dc46:	e009      	b.n	800dc5c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800dc48:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800dc4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dc4e:	e005      	b.n	800dc5c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800dc50:	2300      	movs	r3, #0
 800dc52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800dc54:	2301      	movs	r3, #1
 800dc56:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800dc5a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800dc5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	f000 81de 	beq.w	800e020 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800dc64:	697b      	ldr	r3, [r7, #20]
 800dc66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dc68:	4a94      	ldr	r2, [pc, #592]	@ (800debc <UART_SetConfig+0x930>)
 800dc6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dc6e:	461a      	mov	r2, r3
 800dc70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dc72:	fbb3 f3f2 	udiv	r3, r3, r2
 800dc76:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800dc78:	697b      	ldr	r3, [r7, #20]
 800dc7a:	685a      	ldr	r2, [r3, #4]
 800dc7c:	4613      	mov	r3, r2
 800dc7e:	005b      	lsls	r3, r3, #1
 800dc80:	4413      	add	r3, r2
 800dc82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dc84:	429a      	cmp	r2, r3
 800dc86:	d305      	bcc.n	800dc94 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800dc88:	697b      	ldr	r3, [r7, #20]
 800dc8a:	685b      	ldr	r3, [r3, #4]
 800dc8c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800dc8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dc90:	429a      	cmp	r2, r3
 800dc92:	d903      	bls.n	800dc9c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800dc94:	2301      	movs	r3, #1
 800dc96:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800dc9a:	e1c1      	b.n	800e020 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dc9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dc9e:	2200      	movs	r2, #0
 800dca0:	60bb      	str	r3, [r7, #8]
 800dca2:	60fa      	str	r2, [r7, #12]
 800dca4:	697b      	ldr	r3, [r7, #20]
 800dca6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dca8:	4a84      	ldr	r2, [pc, #528]	@ (800debc <UART_SetConfig+0x930>)
 800dcaa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dcae:	b29b      	uxth	r3, r3
 800dcb0:	2200      	movs	r2, #0
 800dcb2:	603b      	str	r3, [r7, #0]
 800dcb4:	607a      	str	r2, [r7, #4]
 800dcb6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dcba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800dcbe:	f7f2 fb67 	bl	8000390 <__aeabi_uldivmod>
 800dcc2:	4602      	mov	r2, r0
 800dcc4:	460b      	mov	r3, r1
 800dcc6:	4610      	mov	r0, r2
 800dcc8:	4619      	mov	r1, r3
 800dcca:	f04f 0200 	mov.w	r2, #0
 800dcce:	f04f 0300 	mov.w	r3, #0
 800dcd2:	020b      	lsls	r3, r1, #8
 800dcd4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800dcd8:	0202      	lsls	r2, r0, #8
 800dcda:	6979      	ldr	r1, [r7, #20]
 800dcdc:	6849      	ldr	r1, [r1, #4]
 800dcde:	0849      	lsrs	r1, r1, #1
 800dce0:	2000      	movs	r0, #0
 800dce2:	460c      	mov	r4, r1
 800dce4:	4605      	mov	r5, r0
 800dce6:	eb12 0804 	adds.w	r8, r2, r4
 800dcea:	eb43 0905 	adc.w	r9, r3, r5
 800dcee:	697b      	ldr	r3, [r7, #20]
 800dcf0:	685b      	ldr	r3, [r3, #4]
 800dcf2:	2200      	movs	r2, #0
 800dcf4:	469a      	mov	sl, r3
 800dcf6:	4693      	mov	fp, r2
 800dcf8:	4652      	mov	r2, sl
 800dcfa:	465b      	mov	r3, fp
 800dcfc:	4640      	mov	r0, r8
 800dcfe:	4649      	mov	r1, r9
 800dd00:	f7f2 fb46 	bl	8000390 <__aeabi_uldivmod>
 800dd04:	4602      	mov	r2, r0
 800dd06:	460b      	mov	r3, r1
 800dd08:	4613      	mov	r3, r2
 800dd0a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800dd0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd0e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800dd12:	d308      	bcc.n	800dd26 <UART_SetConfig+0x79a>
 800dd14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd16:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800dd1a:	d204      	bcs.n	800dd26 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800dd1c:	697b      	ldr	r3, [r7, #20]
 800dd1e:	681b      	ldr	r3, [r3, #0]
 800dd20:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800dd22:	60da      	str	r2, [r3, #12]
 800dd24:	e17c      	b.n	800e020 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800dd26:	2301      	movs	r3, #1
 800dd28:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800dd2c:	e178      	b.n	800e020 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800dd2e:	697b      	ldr	r3, [r7, #20]
 800dd30:	69db      	ldr	r3, [r3, #28]
 800dd32:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800dd36:	f040 80c5 	bne.w	800dec4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800dd3a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800dd3e:	2b20      	cmp	r3, #32
 800dd40:	dc48      	bgt.n	800ddd4 <UART_SetConfig+0x848>
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	db7b      	blt.n	800de3e <UART_SetConfig+0x8b2>
 800dd46:	2b20      	cmp	r3, #32
 800dd48:	d879      	bhi.n	800de3e <UART_SetConfig+0x8b2>
 800dd4a:	a201      	add	r2, pc, #4	@ (adr r2, 800dd50 <UART_SetConfig+0x7c4>)
 800dd4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd50:	0800dddb 	.word	0x0800dddb
 800dd54:	0800dde3 	.word	0x0800dde3
 800dd58:	0800de3f 	.word	0x0800de3f
 800dd5c:	0800de3f 	.word	0x0800de3f
 800dd60:	0800ddeb 	.word	0x0800ddeb
 800dd64:	0800de3f 	.word	0x0800de3f
 800dd68:	0800de3f 	.word	0x0800de3f
 800dd6c:	0800de3f 	.word	0x0800de3f
 800dd70:	0800ddfb 	.word	0x0800ddfb
 800dd74:	0800de3f 	.word	0x0800de3f
 800dd78:	0800de3f 	.word	0x0800de3f
 800dd7c:	0800de3f 	.word	0x0800de3f
 800dd80:	0800de3f 	.word	0x0800de3f
 800dd84:	0800de3f 	.word	0x0800de3f
 800dd88:	0800de3f 	.word	0x0800de3f
 800dd8c:	0800de3f 	.word	0x0800de3f
 800dd90:	0800de0b 	.word	0x0800de0b
 800dd94:	0800de3f 	.word	0x0800de3f
 800dd98:	0800de3f 	.word	0x0800de3f
 800dd9c:	0800de3f 	.word	0x0800de3f
 800dda0:	0800de3f 	.word	0x0800de3f
 800dda4:	0800de3f 	.word	0x0800de3f
 800dda8:	0800de3f 	.word	0x0800de3f
 800ddac:	0800de3f 	.word	0x0800de3f
 800ddb0:	0800de3f 	.word	0x0800de3f
 800ddb4:	0800de3f 	.word	0x0800de3f
 800ddb8:	0800de3f 	.word	0x0800de3f
 800ddbc:	0800de3f 	.word	0x0800de3f
 800ddc0:	0800de3f 	.word	0x0800de3f
 800ddc4:	0800de3f 	.word	0x0800de3f
 800ddc8:	0800de3f 	.word	0x0800de3f
 800ddcc:	0800de3f 	.word	0x0800de3f
 800ddd0:	0800de31 	.word	0x0800de31
 800ddd4:	2b40      	cmp	r3, #64	@ 0x40
 800ddd6:	d02e      	beq.n	800de36 <UART_SetConfig+0x8aa>
 800ddd8:	e031      	b.n	800de3e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ddda:	f7fc fb1f 	bl	800a41c <HAL_RCC_GetPCLK1Freq>
 800ddde:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800dde0:	e033      	b.n	800de4a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800dde2:	f7fc fb31 	bl	800a448 <HAL_RCC_GetPCLK2Freq>
 800dde6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800dde8:	e02f      	b.n	800de4a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ddea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ddee:	4618      	mov	r0, r3
 800ddf0:	f7fd fd60 	bl	800b8b4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ddf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ddf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ddf8:	e027      	b.n	800de4a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ddfa:	f107 0318 	add.w	r3, r7, #24
 800ddfe:	4618      	mov	r0, r3
 800de00:	f7fd feac 	bl	800bb5c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800de04:	69fb      	ldr	r3, [r7, #28]
 800de06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800de08:	e01f      	b.n	800de4a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800de0a:	4b2d      	ldr	r3, [pc, #180]	@ (800dec0 <UART_SetConfig+0x934>)
 800de0c:	681b      	ldr	r3, [r3, #0]
 800de0e:	f003 0320 	and.w	r3, r3, #32
 800de12:	2b00      	cmp	r3, #0
 800de14:	d009      	beq.n	800de2a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800de16:	4b2a      	ldr	r3, [pc, #168]	@ (800dec0 <UART_SetConfig+0x934>)
 800de18:	681b      	ldr	r3, [r3, #0]
 800de1a:	08db      	lsrs	r3, r3, #3
 800de1c:	f003 0303 	and.w	r3, r3, #3
 800de20:	4a24      	ldr	r2, [pc, #144]	@ (800deb4 <UART_SetConfig+0x928>)
 800de22:	fa22 f303 	lsr.w	r3, r2, r3
 800de26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800de28:	e00f      	b.n	800de4a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800de2a:	4b22      	ldr	r3, [pc, #136]	@ (800deb4 <UART_SetConfig+0x928>)
 800de2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800de2e:	e00c      	b.n	800de4a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800de30:	4b21      	ldr	r3, [pc, #132]	@ (800deb8 <UART_SetConfig+0x92c>)
 800de32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800de34:	e009      	b.n	800de4a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800de36:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800de3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800de3c:	e005      	b.n	800de4a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800de3e:	2300      	movs	r3, #0
 800de40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800de42:	2301      	movs	r3, #1
 800de44:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800de48:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800de4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	f000 80e7 	beq.w	800e020 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800de52:	697b      	ldr	r3, [r7, #20]
 800de54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800de56:	4a19      	ldr	r2, [pc, #100]	@ (800debc <UART_SetConfig+0x930>)
 800de58:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800de5c:	461a      	mov	r2, r3
 800de5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800de60:	fbb3 f3f2 	udiv	r3, r3, r2
 800de64:	005a      	lsls	r2, r3, #1
 800de66:	697b      	ldr	r3, [r7, #20]
 800de68:	685b      	ldr	r3, [r3, #4]
 800de6a:	085b      	lsrs	r3, r3, #1
 800de6c:	441a      	add	r2, r3
 800de6e:	697b      	ldr	r3, [r7, #20]
 800de70:	685b      	ldr	r3, [r3, #4]
 800de72:	fbb2 f3f3 	udiv	r3, r2, r3
 800de76:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800de78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de7a:	2b0f      	cmp	r3, #15
 800de7c:	d916      	bls.n	800deac <UART_SetConfig+0x920>
 800de7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800de84:	d212      	bcs.n	800deac <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800de86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de88:	b29b      	uxth	r3, r3
 800de8a:	f023 030f 	bic.w	r3, r3, #15
 800de8e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800de90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de92:	085b      	lsrs	r3, r3, #1
 800de94:	b29b      	uxth	r3, r3
 800de96:	f003 0307 	and.w	r3, r3, #7
 800de9a:	b29a      	uxth	r2, r3
 800de9c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800de9e:	4313      	orrs	r3, r2
 800dea0:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800dea2:	697b      	ldr	r3, [r7, #20]
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800dea8:	60da      	str	r2, [r3, #12]
 800deaa:	e0b9      	b.n	800e020 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800deac:	2301      	movs	r3, #1
 800deae:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800deb2:	e0b5      	b.n	800e020 <UART_SetConfig+0xa94>
 800deb4:	03d09000 	.word	0x03d09000
 800deb8:	003d0900 	.word	0x003d0900
 800debc:	080132f0 	.word	0x080132f0
 800dec0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800dec4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800dec8:	2b20      	cmp	r3, #32
 800deca:	dc49      	bgt.n	800df60 <UART_SetConfig+0x9d4>
 800decc:	2b00      	cmp	r3, #0
 800dece:	db7c      	blt.n	800dfca <UART_SetConfig+0xa3e>
 800ded0:	2b20      	cmp	r3, #32
 800ded2:	d87a      	bhi.n	800dfca <UART_SetConfig+0xa3e>
 800ded4:	a201      	add	r2, pc, #4	@ (adr r2, 800dedc <UART_SetConfig+0x950>)
 800ded6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800deda:	bf00      	nop
 800dedc:	0800df67 	.word	0x0800df67
 800dee0:	0800df6f 	.word	0x0800df6f
 800dee4:	0800dfcb 	.word	0x0800dfcb
 800dee8:	0800dfcb 	.word	0x0800dfcb
 800deec:	0800df77 	.word	0x0800df77
 800def0:	0800dfcb 	.word	0x0800dfcb
 800def4:	0800dfcb 	.word	0x0800dfcb
 800def8:	0800dfcb 	.word	0x0800dfcb
 800defc:	0800df87 	.word	0x0800df87
 800df00:	0800dfcb 	.word	0x0800dfcb
 800df04:	0800dfcb 	.word	0x0800dfcb
 800df08:	0800dfcb 	.word	0x0800dfcb
 800df0c:	0800dfcb 	.word	0x0800dfcb
 800df10:	0800dfcb 	.word	0x0800dfcb
 800df14:	0800dfcb 	.word	0x0800dfcb
 800df18:	0800dfcb 	.word	0x0800dfcb
 800df1c:	0800df97 	.word	0x0800df97
 800df20:	0800dfcb 	.word	0x0800dfcb
 800df24:	0800dfcb 	.word	0x0800dfcb
 800df28:	0800dfcb 	.word	0x0800dfcb
 800df2c:	0800dfcb 	.word	0x0800dfcb
 800df30:	0800dfcb 	.word	0x0800dfcb
 800df34:	0800dfcb 	.word	0x0800dfcb
 800df38:	0800dfcb 	.word	0x0800dfcb
 800df3c:	0800dfcb 	.word	0x0800dfcb
 800df40:	0800dfcb 	.word	0x0800dfcb
 800df44:	0800dfcb 	.word	0x0800dfcb
 800df48:	0800dfcb 	.word	0x0800dfcb
 800df4c:	0800dfcb 	.word	0x0800dfcb
 800df50:	0800dfcb 	.word	0x0800dfcb
 800df54:	0800dfcb 	.word	0x0800dfcb
 800df58:	0800dfcb 	.word	0x0800dfcb
 800df5c:	0800dfbd 	.word	0x0800dfbd
 800df60:	2b40      	cmp	r3, #64	@ 0x40
 800df62:	d02e      	beq.n	800dfc2 <UART_SetConfig+0xa36>
 800df64:	e031      	b.n	800dfca <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800df66:	f7fc fa59 	bl	800a41c <HAL_RCC_GetPCLK1Freq>
 800df6a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800df6c:	e033      	b.n	800dfd6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800df6e:	f7fc fa6b 	bl	800a448 <HAL_RCC_GetPCLK2Freq>
 800df72:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800df74:	e02f      	b.n	800dfd6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800df76:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800df7a:	4618      	mov	r0, r3
 800df7c:	f7fd fc9a 	bl	800b8b4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800df80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800df84:	e027      	b.n	800dfd6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800df86:	f107 0318 	add.w	r3, r7, #24
 800df8a:	4618      	mov	r0, r3
 800df8c:	f7fd fde6 	bl	800bb5c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800df90:	69fb      	ldr	r3, [r7, #28]
 800df92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800df94:	e01f      	b.n	800dfd6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800df96:	4b2d      	ldr	r3, [pc, #180]	@ (800e04c <UART_SetConfig+0xac0>)
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	f003 0320 	and.w	r3, r3, #32
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d009      	beq.n	800dfb6 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800dfa2:	4b2a      	ldr	r3, [pc, #168]	@ (800e04c <UART_SetConfig+0xac0>)
 800dfa4:	681b      	ldr	r3, [r3, #0]
 800dfa6:	08db      	lsrs	r3, r3, #3
 800dfa8:	f003 0303 	and.w	r3, r3, #3
 800dfac:	4a28      	ldr	r2, [pc, #160]	@ (800e050 <UART_SetConfig+0xac4>)
 800dfae:	fa22 f303 	lsr.w	r3, r2, r3
 800dfb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800dfb4:	e00f      	b.n	800dfd6 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800dfb6:	4b26      	ldr	r3, [pc, #152]	@ (800e050 <UART_SetConfig+0xac4>)
 800dfb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dfba:	e00c      	b.n	800dfd6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800dfbc:	4b25      	ldr	r3, [pc, #148]	@ (800e054 <UART_SetConfig+0xac8>)
 800dfbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dfc0:	e009      	b.n	800dfd6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800dfc2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800dfc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dfc8:	e005      	b.n	800dfd6 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800dfca:	2300      	movs	r3, #0
 800dfcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800dfce:	2301      	movs	r3, #1
 800dfd0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800dfd4:	bf00      	nop
    }

    if (pclk != 0U)
 800dfd6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dfd8:	2b00      	cmp	r3, #0
 800dfda:	d021      	beq.n	800e020 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dfdc:	697b      	ldr	r3, [r7, #20]
 800dfde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dfe0:	4a1d      	ldr	r2, [pc, #116]	@ (800e058 <UART_SetConfig+0xacc>)
 800dfe2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dfe6:	461a      	mov	r2, r3
 800dfe8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dfea:	fbb3 f2f2 	udiv	r2, r3, r2
 800dfee:	697b      	ldr	r3, [r7, #20]
 800dff0:	685b      	ldr	r3, [r3, #4]
 800dff2:	085b      	lsrs	r3, r3, #1
 800dff4:	441a      	add	r2, r3
 800dff6:	697b      	ldr	r3, [r7, #20]
 800dff8:	685b      	ldr	r3, [r3, #4]
 800dffa:	fbb2 f3f3 	udiv	r3, r2, r3
 800dffe:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e000:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e002:	2b0f      	cmp	r3, #15
 800e004:	d909      	bls.n	800e01a <UART_SetConfig+0xa8e>
 800e006:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e008:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e00c:	d205      	bcs.n	800e01a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e00e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e010:	b29a      	uxth	r2, r3
 800e012:	697b      	ldr	r3, [r7, #20]
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	60da      	str	r2, [r3, #12]
 800e018:	e002      	b.n	800e020 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800e01a:	2301      	movs	r3, #1
 800e01c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800e020:	697b      	ldr	r3, [r7, #20]
 800e022:	2201      	movs	r2, #1
 800e024:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800e028:	697b      	ldr	r3, [r7, #20]
 800e02a:	2201      	movs	r2, #1
 800e02c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e030:	697b      	ldr	r3, [r7, #20]
 800e032:	2200      	movs	r2, #0
 800e034:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800e036:	697b      	ldr	r3, [r7, #20]
 800e038:	2200      	movs	r2, #0
 800e03a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800e03c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800e040:	4618      	mov	r0, r3
 800e042:	3748      	adds	r7, #72	@ 0x48
 800e044:	46bd      	mov	sp, r7
 800e046:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e04a:	bf00      	nop
 800e04c:	58024400 	.word	0x58024400
 800e050:	03d09000 	.word	0x03d09000
 800e054:	003d0900 	.word	0x003d0900
 800e058:	080132f0 	.word	0x080132f0

0800e05c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e05c:	b480      	push	{r7}
 800e05e:	b083      	sub	sp, #12
 800e060:	af00      	add	r7, sp, #0
 800e062:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e068:	f003 0308 	and.w	r3, r3, #8
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	d00a      	beq.n	800e086 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	685b      	ldr	r3, [r3, #4]
 800e076:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	430a      	orrs	r2, r1
 800e084:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e08a:	f003 0301 	and.w	r3, r3, #1
 800e08e:	2b00      	cmp	r3, #0
 800e090:	d00a      	beq.n	800e0a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	681b      	ldr	r3, [r3, #0]
 800e096:	685b      	ldr	r3, [r3, #4]
 800e098:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	430a      	orrs	r2, r1
 800e0a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e0ac:	f003 0302 	and.w	r3, r3, #2
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d00a      	beq.n	800e0ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	681b      	ldr	r3, [r3, #0]
 800e0b8:	685b      	ldr	r3, [r3, #4]
 800e0ba:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	430a      	orrs	r2, r1
 800e0c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e0ce:	f003 0304 	and.w	r3, r3, #4
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d00a      	beq.n	800e0ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	681b      	ldr	r3, [r3, #0]
 800e0da:	685b      	ldr	r3, [r3, #4]
 800e0dc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	430a      	orrs	r2, r1
 800e0ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e0f0:	f003 0310 	and.w	r3, r3, #16
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	d00a      	beq.n	800e10e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	681b      	ldr	r3, [r3, #0]
 800e0fc:	689b      	ldr	r3, [r3, #8]
 800e0fe:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	681b      	ldr	r3, [r3, #0]
 800e10a:	430a      	orrs	r2, r1
 800e10c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e112:	f003 0320 	and.w	r3, r3, #32
 800e116:	2b00      	cmp	r3, #0
 800e118:	d00a      	beq.n	800e130 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	689b      	ldr	r3, [r3, #8]
 800e120:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	681b      	ldr	r3, [r3, #0]
 800e12c:	430a      	orrs	r2, r1
 800e12e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e134:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d01a      	beq.n	800e172 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	685b      	ldr	r3, [r3, #4]
 800e142:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	430a      	orrs	r2, r1
 800e150:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e156:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e15a:	d10a      	bne.n	800e172 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	685b      	ldr	r3, [r3, #4]
 800e162:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	681b      	ldr	r3, [r3, #0]
 800e16e:	430a      	orrs	r2, r1
 800e170:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e176:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	d00a      	beq.n	800e194 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	681b      	ldr	r3, [r3, #0]
 800e182:	685b      	ldr	r3, [r3, #4]
 800e184:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	430a      	orrs	r2, r1
 800e192:	605a      	str	r2, [r3, #4]
  }
}
 800e194:	bf00      	nop
 800e196:	370c      	adds	r7, #12
 800e198:	46bd      	mov	sp, r7
 800e19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e19e:	4770      	bx	lr

0800e1a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e1a0:	b580      	push	{r7, lr}
 800e1a2:	b098      	sub	sp, #96	@ 0x60
 800e1a4:	af02      	add	r7, sp, #8
 800e1a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	2200      	movs	r2, #0
 800e1ac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e1b0:	f7f4 f846 	bl	8002240 <HAL_GetTick>
 800e1b4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	681b      	ldr	r3, [r3, #0]
 800e1ba:	681b      	ldr	r3, [r3, #0]
 800e1bc:	f003 0308 	and.w	r3, r3, #8
 800e1c0:	2b08      	cmp	r3, #8
 800e1c2:	d12f      	bne.n	800e224 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e1c4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800e1c8:	9300      	str	r3, [sp, #0]
 800e1ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e1cc:	2200      	movs	r2, #0
 800e1ce:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800e1d2:	6878      	ldr	r0, [r7, #4]
 800e1d4:	f000 f88e 	bl	800e2f4 <UART_WaitOnFlagUntilTimeout>
 800e1d8:	4603      	mov	r3, r0
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d022      	beq.n	800e224 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e1e6:	e853 3f00 	ldrex	r3, [r3]
 800e1ea:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e1ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e1ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e1f2:	653b      	str	r3, [r7, #80]	@ 0x50
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	681b      	ldr	r3, [r3, #0]
 800e1f8:	461a      	mov	r2, r3
 800e1fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e1fc:	647b      	str	r3, [r7, #68]	@ 0x44
 800e1fe:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e200:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e202:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e204:	e841 2300 	strex	r3, r2, [r1]
 800e208:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e20a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	d1e6      	bne.n	800e1de <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	2220      	movs	r2, #32
 800e214:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	2200      	movs	r2, #0
 800e21c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e220:	2303      	movs	r3, #3
 800e222:	e063      	b.n	800e2ec <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	681b      	ldr	r3, [r3, #0]
 800e228:	681b      	ldr	r3, [r3, #0]
 800e22a:	f003 0304 	and.w	r3, r3, #4
 800e22e:	2b04      	cmp	r3, #4
 800e230:	d149      	bne.n	800e2c6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e232:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800e236:	9300      	str	r3, [sp, #0]
 800e238:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e23a:	2200      	movs	r2, #0
 800e23c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800e240:	6878      	ldr	r0, [r7, #4]
 800e242:	f000 f857 	bl	800e2f4 <UART_WaitOnFlagUntilTimeout>
 800e246:	4603      	mov	r3, r0
 800e248:	2b00      	cmp	r3, #0
 800e24a:	d03c      	beq.n	800e2c6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	681b      	ldr	r3, [r3, #0]
 800e250:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e254:	e853 3f00 	ldrex	r3, [r3]
 800e258:	623b      	str	r3, [r7, #32]
   return(result);
 800e25a:	6a3b      	ldr	r3, [r7, #32]
 800e25c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e260:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	681b      	ldr	r3, [r3, #0]
 800e266:	461a      	mov	r2, r3
 800e268:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e26a:	633b      	str	r3, [r7, #48]	@ 0x30
 800e26c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e26e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e270:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e272:	e841 2300 	strex	r3, r2, [r1]
 800e276:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e278:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d1e6      	bne.n	800e24c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	681b      	ldr	r3, [r3, #0]
 800e282:	3308      	adds	r3, #8
 800e284:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e286:	693b      	ldr	r3, [r7, #16]
 800e288:	e853 3f00 	ldrex	r3, [r3]
 800e28c:	60fb      	str	r3, [r7, #12]
   return(result);
 800e28e:	68fb      	ldr	r3, [r7, #12]
 800e290:	f023 0301 	bic.w	r3, r3, #1
 800e294:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	681b      	ldr	r3, [r3, #0]
 800e29a:	3308      	adds	r3, #8
 800e29c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e29e:	61fa      	str	r2, [r7, #28]
 800e2a0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e2a2:	69b9      	ldr	r1, [r7, #24]
 800e2a4:	69fa      	ldr	r2, [r7, #28]
 800e2a6:	e841 2300 	strex	r3, r2, [r1]
 800e2aa:	617b      	str	r3, [r7, #20]
   return(result);
 800e2ac:	697b      	ldr	r3, [r7, #20]
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d1e5      	bne.n	800e27e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	2220      	movs	r2, #32
 800e2b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	2200      	movs	r2, #0
 800e2be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e2c2:	2303      	movs	r3, #3
 800e2c4:	e012      	b.n	800e2ec <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	2220      	movs	r2, #32
 800e2ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	2220      	movs	r2, #32
 800e2d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	2200      	movs	r2, #0
 800e2da:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	2200      	movs	r2, #0
 800e2e0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	2200      	movs	r2, #0
 800e2e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e2ea:	2300      	movs	r3, #0
}
 800e2ec:	4618      	mov	r0, r3
 800e2ee:	3758      	adds	r7, #88	@ 0x58
 800e2f0:	46bd      	mov	sp, r7
 800e2f2:	bd80      	pop	{r7, pc}

0800e2f4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e2f4:	b580      	push	{r7, lr}
 800e2f6:	b084      	sub	sp, #16
 800e2f8:	af00      	add	r7, sp, #0
 800e2fa:	60f8      	str	r0, [r7, #12]
 800e2fc:	60b9      	str	r1, [r7, #8]
 800e2fe:	603b      	str	r3, [r7, #0]
 800e300:	4613      	mov	r3, r2
 800e302:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e304:	e04f      	b.n	800e3a6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e306:	69bb      	ldr	r3, [r7, #24]
 800e308:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e30c:	d04b      	beq.n	800e3a6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e30e:	f7f3 ff97 	bl	8002240 <HAL_GetTick>
 800e312:	4602      	mov	r2, r0
 800e314:	683b      	ldr	r3, [r7, #0]
 800e316:	1ad3      	subs	r3, r2, r3
 800e318:	69ba      	ldr	r2, [r7, #24]
 800e31a:	429a      	cmp	r2, r3
 800e31c:	d302      	bcc.n	800e324 <UART_WaitOnFlagUntilTimeout+0x30>
 800e31e:	69bb      	ldr	r3, [r7, #24]
 800e320:	2b00      	cmp	r3, #0
 800e322:	d101      	bne.n	800e328 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800e324:	2303      	movs	r3, #3
 800e326:	e04e      	b.n	800e3c6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	681b      	ldr	r3, [r3, #0]
 800e32c:	681b      	ldr	r3, [r3, #0]
 800e32e:	f003 0304 	and.w	r3, r3, #4
 800e332:	2b00      	cmp	r3, #0
 800e334:	d037      	beq.n	800e3a6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800e336:	68bb      	ldr	r3, [r7, #8]
 800e338:	2b80      	cmp	r3, #128	@ 0x80
 800e33a:	d034      	beq.n	800e3a6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800e33c:	68bb      	ldr	r3, [r7, #8]
 800e33e:	2b40      	cmp	r3, #64	@ 0x40
 800e340:	d031      	beq.n	800e3a6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800e342:	68fb      	ldr	r3, [r7, #12]
 800e344:	681b      	ldr	r3, [r3, #0]
 800e346:	69db      	ldr	r3, [r3, #28]
 800e348:	f003 0308 	and.w	r3, r3, #8
 800e34c:	2b08      	cmp	r3, #8
 800e34e:	d110      	bne.n	800e372 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e350:	68fb      	ldr	r3, [r7, #12]
 800e352:	681b      	ldr	r3, [r3, #0]
 800e354:	2208      	movs	r2, #8
 800e356:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e358:	68f8      	ldr	r0, [r7, #12]
 800e35a:	f000 f839 	bl	800e3d0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800e35e:	68fb      	ldr	r3, [r7, #12]
 800e360:	2208      	movs	r2, #8
 800e362:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e366:	68fb      	ldr	r3, [r7, #12]
 800e368:	2200      	movs	r2, #0
 800e36a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800e36e:	2301      	movs	r3, #1
 800e370:	e029      	b.n	800e3c6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e372:	68fb      	ldr	r3, [r7, #12]
 800e374:	681b      	ldr	r3, [r3, #0]
 800e376:	69db      	ldr	r3, [r3, #28]
 800e378:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800e37c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e380:	d111      	bne.n	800e3a6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e382:	68fb      	ldr	r3, [r7, #12]
 800e384:	681b      	ldr	r3, [r3, #0]
 800e386:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800e38a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e38c:	68f8      	ldr	r0, [r7, #12]
 800e38e:	f000 f81f 	bl	800e3d0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e392:	68fb      	ldr	r3, [r7, #12]
 800e394:	2220      	movs	r2, #32
 800e396:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e39a:	68fb      	ldr	r3, [r7, #12]
 800e39c:	2200      	movs	r2, #0
 800e39e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800e3a2:	2303      	movs	r3, #3
 800e3a4:	e00f      	b.n	800e3c6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e3a6:	68fb      	ldr	r3, [r7, #12]
 800e3a8:	681b      	ldr	r3, [r3, #0]
 800e3aa:	69da      	ldr	r2, [r3, #28]
 800e3ac:	68bb      	ldr	r3, [r7, #8]
 800e3ae:	4013      	ands	r3, r2
 800e3b0:	68ba      	ldr	r2, [r7, #8]
 800e3b2:	429a      	cmp	r2, r3
 800e3b4:	bf0c      	ite	eq
 800e3b6:	2301      	moveq	r3, #1
 800e3b8:	2300      	movne	r3, #0
 800e3ba:	b2db      	uxtb	r3, r3
 800e3bc:	461a      	mov	r2, r3
 800e3be:	79fb      	ldrb	r3, [r7, #7]
 800e3c0:	429a      	cmp	r2, r3
 800e3c2:	d0a0      	beq.n	800e306 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e3c4:	2300      	movs	r3, #0
}
 800e3c6:	4618      	mov	r0, r3
 800e3c8:	3710      	adds	r7, #16
 800e3ca:	46bd      	mov	sp, r7
 800e3cc:	bd80      	pop	{r7, pc}
	...

0800e3d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e3d0:	b480      	push	{r7}
 800e3d2:	b095      	sub	sp, #84	@ 0x54
 800e3d4:	af00      	add	r7, sp, #0
 800e3d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e3de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e3e0:	e853 3f00 	ldrex	r3, [r3]
 800e3e4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800e3e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3e8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e3ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	681b      	ldr	r3, [r3, #0]
 800e3f2:	461a      	mov	r2, r3
 800e3f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e3f6:	643b      	str	r3, [r7, #64]	@ 0x40
 800e3f8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e3fa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800e3fc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e3fe:	e841 2300 	strex	r3, r2, [r1]
 800e402:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800e404:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e406:	2b00      	cmp	r3, #0
 800e408:	d1e6      	bne.n	800e3d8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	681b      	ldr	r3, [r3, #0]
 800e40e:	3308      	adds	r3, #8
 800e410:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e412:	6a3b      	ldr	r3, [r7, #32]
 800e414:	e853 3f00 	ldrex	r3, [r3]
 800e418:	61fb      	str	r3, [r7, #28]
   return(result);
 800e41a:	69fa      	ldr	r2, [r7, #28]
 800e41c:	4b1e      	ldr	r3, [pc, #120]	@ (800e498 <UART_EndRxTransfer+0xc8>)
 800e41e:	4013      	ands	r3, r2
 800e420:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	3308      	adds	r3, #8
 800e428:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e42a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800e42c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e42e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e430:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e432:	e841 2300 	strex	r3, r2, [r1]
 800e436:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	d1e5      	bne.n	800e40a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e442:	2b01      	cmp	r3, #1
 800e444:	d118      	bne.n	800e478 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	681b      	ldr	r3, [r3, #0]
 800e44a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e44c:	68fb      	ldr	r3, [r7, #12]
 800e44e:	e853 3f00 	ldrex	r3, [r3]
 800e452:	60bb      	str	r3, [r7, #8]
   return(result);
 800e454:	68bb      	ldr	r3, [r7, #8]
 800e456:	f023 0310 	bic.w	r3, r3, #16
 800e45a:	647b      	str	r3, [r7, #68]	@ 0x44
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	461a      	mov	r2, r3
 800e462:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e464:	61bb      	str	r3, [r7, #24]
 800e466:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e468:	6979      	ldr	r1, [r7, #20]
 800e46a:	69ba      	ldr	r2, [r7, #24]
 800e46c:	e841 2300 	strex	r3, r2, [r1]
 800e470:	613b      	str	r3, [r7, #16]
   return(result);
 800e472:	693b      	ldr	r3, [r7, #16]
 800e474:	2b00      	cmp	r3, #0
 800e476:	d1e6      	bne.n	800e446 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	2220      	movs	r2, #32
 800e47c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	2200      	movs	r2, #0
 800e484:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	2200      	movs	r2, #0
 800e48a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800e48c:	bf00      	nop
 800e48e:	3754      	adds	r7, #84	@ 0x54
 800e490:	46bd      	mov	sp, r7
 800e492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e496:	4770      	bx	lr
 800e498:	effffffe 	.word	0xeffffffe

0800e49c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800e49c:	b480      	push	{r7}
 800e49e:	b085      	sub	sp, #20
 800e4a0:	af00      	add	r7, sp, #0
 800e4a2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e4aa:	2b01      	cmp	r3, #1
 800e4ac:	d101      	bne.n	800e4b2 <HAL_UARTEx_DisableFifoMode+0x16>
 800e4ae:	2302      	movs	r3, #2
 800e4b0:	e027      	b.n	800e502 <HAL_UARTEx_DisableFifoMode+0x66>
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	2201      	movs	r2, #1
 800e4b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	2224      	movs	r2, #36	@ 0x24
 800e4be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	681b      	ldr	r3, [r3, #0]
 800e4c6:	681b      	ldr	r3, [r3, #0]
 800e4c8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	681b      	ldr	r3, [r3, #0]
 800e4ce:	681a      	ldr	r2, [r3, #0]
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	681b      	ldr	r3, [r3, #0]
 800e4d4:	f022 0201 	bic.w	r2, r2, #1
 800e4d8:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800e4da:	68fb      	ldr	r3, [r7, #12]
 800e4dc:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800e4e0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	2200      	movs	r2, #0
 800e4e6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	68fa      	ldr	r2, [r7, #12]
 800e4ee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	2220      	movs	r2, #32
 800e4f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	2200      	movs	r2, #0
 800e4fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e500:	2300      	movs	r3, #0
}
 800e502:	4618      	mov	r0, r3
 800e504:	3714      	adds	r7, #20
 800e506:	46bd      	mov	sp, r7
 800e508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e50c:	4770      	bx	lr

0800e50e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e50e:	b580      	push	{r7, lr}
 800e510:	b084      	sub	sp, #16
 800e512:	af00      	add	r7, sp, #0
 800e514:	6078      	str	r0, [r7, #4]
 800e516:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e51e:	2b01      	cmp	r3, #1
 800e520:	d101      	bne.n	800e526 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800e522:	2302      	movs	r3, #2
 800e524:	e02d      	b.n	800e582 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	2201      	movs	r2, #1
 800e52a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	2224      	movs	r2, #36	@ 0x24
 800e532:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	681b      	ldr	r3, [r3, #0]
 800e53a:	681b      	ldr	r3, [r3, #0]
 800e53c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	681b      	ldr	r3, [r3, #0]
 800e542:	681a      	ldr	r2, [r3, #0]
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	681b      	ldr	r3, [r3, #0]
 800e548:	f022 0201 	bic.w	r2, r2, #1
 800e54c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	689b      	ldr	r3, [r3, #8]
 800e554:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	683a      	ldr	r2, [r7, #0]
 800e55e:	430a      	orrs	r2, r1
 800e560:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e562:	6878      	ldr	r0, [r7, #4]
 800e564:	f000 f850 	bl	800e608 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	68fa      	ldr	r2, [r7, #12]
 800e56e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	2220      	movs	r2, #32
 800e574:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	2200      	movs	r2, #0
 800e57c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e580:	2300      	movs	r3, #0
}
 800e582:	4618      	mov	r0, r3
 800e584:	3710      	adds	r7, #16
 800e586:	46bd      	mov	sp, r7
 800e588:	bd80      	pop	{r7, pc}

0800e58a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e58a:	b580      	push	{r7, lr}
 800e58c:	b084      	sub	sp, #16
 800e58e:	af00      	add	r7, sp, #0
 800e590:	6078      	str	r0, [r7, #4]
 800e592:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e59a:	2b01      	cmp	r3, #1
 800e59c:	d101      	bne.n	800e5a2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800e59e:	2302      	movs	r3, #2
 800e5a0:	e02d      	b.n	800e5fe <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	2201      	movs	r2, #1
 800e5a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	2224      	movs	r2, #36	@ 0x24
 800e5ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	681b      	ldr	r3, [r3, #0]
 800e5b6:	681b      	ldr	r3, [r3, #0]
 800e5b8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	681b      	ldr	r3, [r3, #0]
 800e5be:	681a      	ldr	r2, [r3, #0]
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	f022 0201 	bic.w	r2, r2, #1
 800e5c8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	681b      	ldr	r3, [r3, #0]
 800e5ce:	689b      	ldr	r3, [r3, #8]
 800e5d0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	683a      	ldr	r2, [r7, #0]
 800e5da:	430a      	orrs	r2, r1
 800e5dc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e5de:	6878      	ldr	r0, [r7, #4]
 800e5e0:	f000 f812 	bl	800e608 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	681b      	ldr	r3, [r3, #0]
 800e5e8:	68fa      	ldr	r2, [r7, #12]
 800e5ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	2220      	movs	r2, #32
 800e5f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	2200      	movs	r2, #0
 800e5f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e5fc:	2300      	movs	r3, #0
}
 800e5fe:	4618      	mov	r0, r3
 800e600:	3710      	adds	r7, #16
 800e602:	46bd      	mov	sp, r7
 800e604:	bd80      	pop	{r7, pc}
	...

0800e608 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800e608:	b480      	push	{r7}
 800e60a:	b085      	sub	sp, #20
 800e60c:	af00      	add	r7, sp, #0
 800e60e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e614:	2b00      	cmp	r3, #0
 800e616:	d108      	bne.n	800e62a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	2201      	movs	r2, #1
 800e61c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	2201      	movs	r2, #1
 800e624:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800e628:	e031      	b.n	800e68e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800e62a:	2310      	movs	r3, #16
 800e62c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800e62e:	2310      	movs	r3, #16
 800e630:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	681b      	ldr	r3, [r3, #0]
 800e636:	689b      	ldr	r3, [r3, #8]
 800e638:	0e5b      	lsrs	r3, r3, #25
 800e63a:	b2db      	uxtb	r3, r3
 800e63c:	f003 0307 	and.w	r3, r3, #7
 800e640:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	681b      	ldr	r3, [r3, #0]
 800e646:	689b      	ldr	r3, [r3, #8]
 800e648:	0f5b      	lsrs	r3, r3, #29
 800e64a:	b2db      	uxtb	r3, r3
 800e64c:	f003 0307 	and.w	r3, r3, #7
 800e650:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e652:	7bbb      	ldrb	r3, [r7, #14]
 800e654:	7b3a      	ldrb	r2, [r7, #12]
 800e656:	4911      	ldr	r1, [pc, #68]	@ (800e69c <UARTEx_SetNbDataToProcess+0x94>)
 800e658:	5c8a      	ldrb	r2, [r1, r2]
 800e65a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800e65e:	7b3a      	ldrb	r2, [r7, #12]
 800e660:	490f      	ldr	r1, [pc, #60]	@ (800e6a0 <UARTEx_SetNbDataToProcess+0x98>)
 800e662:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e664:	fb93 f3f2 	sdiv	r3, r3, r2
 800e668:	b29a      	uxth	r2, r3
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e670:	7bfb      	ldrb	r3, [r7, #15]
 800e672:	7b7a      	ldrb	r2, [r7, #13]
 800e674:	4909      	ldr	r1, [pc, #36]	@ (800e69c <UARTEx_SetNbDataToProcess+0x94>)
 800e676:	5c8a      	ldrb	r2, [r1, r2]
 800e678:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800e67c:	7b7a      	ldrb	r2, [r7, #13]
 800e67e:	4908      	ldr	r1, [pc, #32]	@ (800e6a0 <UARTEx_SetNbDataToProcess+0x98>)
 800e680:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e682:	fb93 f3f2 	sdiv	r3, r3, r2
 800e686:	b29a      	uxth	r2, r3
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800e68e:	bf00      	nop
 800e690:	3714      	adds	r7, #20
 800e692:	46bd      	mov	sp, r7
 800e694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e698:	4770      	bx	lr
 800e69a:	bf00      	nop
 800e69c:	08013308 	.word	0x08013308
 800e6a0:	08013310 	.word	0x08013310

0800e6a4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e6a4:	b084      	sub	sp, #16
 800e6a6:	b580      	push	{r7, lr}
 800e6a8:	b084      	sub	sp, #16
 800e6aa:	af00      	add	r7, sp, #0
 800e6ac:	6078      	str	r0, [r7, #4]
 800e6ae:	f107 001c 	add.w	r0, r7, #28
 800e6b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800e6b6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800e6ba:	2b01      	cmp	r3, #1
 800e6bc:	d121      	bne.n	800e702 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e6c2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	68da      	ldr	r2, [r3, #12]
 800e6ce:	4b2c      	ldr	r3, [pc, #176]	@ (800e780 <USB_CoreInit+0xdc>)
 800e6d0:	4013      	ands	r3, r2
 800e6d2:	687a      	ldr	r2, [r7, #4]
 800e6d4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	68db      	ldr	r3, [r3, #12]
 800e6da:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800e6e2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800e6e6:	2b01      	cmp	r3, #1
 800e6e8:	d105      	bne.n	800e6f6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	68db      	ldr	r3, [r3, #12]
 800e6ee:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800e6f6:	6878      	ldr	r0, [r7, #4]
 800e6f8:	f001 fafa 	bl	800fcf0 <USB_CoreReset>
 800e6fc:	4603      	mov	r3, r0
 800e6fe:	73fb      	strb	r3, [r7, #15]
 800e700:	e01b      	b.n	800e73a <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	68db      	ldr	r3, [r3, #12]
 800e706:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800e70e:	6878      	ldr	r0, [r7, #4]
 800e710:	f001 faee 	bl	800fcf0 <USB_CoreReset>
 800e714:	4603      	mov	r3, r0
 800e716:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800e718:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d106      	bne.n	800e72e <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e724:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	639a      	str	r2, [r3, #56]	@ 0x38
 800e72c:	e005      	b.n	800e73a <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e732:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800e73a:	7fbb      	ldrb	r3, [r7, #30]
 800e73c:	2b01      	cmp	r3, #1
 800e73e:	d116      	bne.n	800e76e <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e744:	b29a      	uxth	r2, r3
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800e74e:	4b0d      	ldr	r3, [pc, #52]	@ (800e784 <USB_CoreInit+0xe0>)
 800e750:	4313      	orrs	r3, r2
 800e752:	687a      	ldr	r2, [r7, #4]
 800e754:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	689b      	ldr	r3, [r3, #8]
 800e75a:	f043 0206 	orr.w	r2, r3, #6
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	689b      	ldr	r3, [r3, #8]
 800e766:	f043 0220 	orr.w	r2, r3, #32
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800e76e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e770:	4618      	mov	r0, r3
 800e772:	3710      	adds	r7, #16
 800e774:	46bd      	mov	sp, r7
 800e776:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e77a:	b004      	add	sp, #16
 800e77c:	4770      	bx	lr
 800e77e:	bf00      	nop
 800e780:	ffbdffbf 	.word	0xffbdffbf
 800e784:	03ee0000 	.word	0x03ee0000

0800e788 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800e788:	b480      	push	{r7}
 800e78a:	b087      	sub	sp, #28
 800e78c:	af00      	add	r7, sp, #0
 800e78e:	60f8      	str	r0, [r7, #12]
 800e790:	60b9      	str	r1, [r7, #8]
 800e792:	4613      	mov	r3, r2
 800e794:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800e796:	79fb      	ldrb	r3, [r7, #7]
 800e798:	2b02      	cmp	r3, #2
 800e79a:	d165      	bne.n	800e868 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800e79c:	68bb      	ldr	r3, [r7, #8]
 800e79e:	4a41      	ldr	r2, [pc, #260]	@ (800e8a4 <USB_SetTurnaroundTime+0x11c>)
 800e7a0:	4293      	cmp	r3, r2
 800e7a2:	d906      	bls.n	800e7b2 <USB_SetTurnaroundTime+0x2a>
 800e7a4:	68bb      	ldr	r3, [r7, #8]
 800e7a6:	4a40      	ldr	r2, [pc, #256]	@ (800e8a8 <USB_SetTurnaroundTime+0x120>)
 800e7a8:	4293      	cmp	r3, r2
 800e7aa:	d202      	bcs.n	800e7b2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800e7ac:	230f      	movs	r3, #15
 800e7ae:	617b      	str	r3, [r7, #20]
 800e7b0:	e062      	b.n	800e878 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800e7b2:	68bb      	ldr	r3, [r7, #8]
 800e7b4:	4a3c      	ldr	r2, [pc, #240]	@ (800e8a8 <USB_SetTurnaroundTime+0x120>)
 800e7b6:	4293      	cmp	r3, r2
 800e7b8:	d306      	bcc.n	800e7c8 <USB_SetTurnaroundTime+0x40>
 800e7ba:	68bb      	ldr	r3, [r7, #8]
 800e7bc:	4a3b      	ldr	r2, [pc, #236]	@ (800e8ac <USB_SetTurnaroundTime+0x124>)
 800e7be:	4293      	cmp	r3, r2
 800e7c0:	d202      	bcs.n	800e7c8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800e7c2:	230e      	movs	r3, #14
 800e7c4:	617b      	str	r3, [r7, #20]
 800e7c6:	e057      	b.n	800e878 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800e7c8:	68bb      	ldr	r3, [r7, #8]
 800e7ca:	4a38      	ldr	r2, [pc, #224]	@ (800e8ac <USB_SetTurnaroundTime+0x124>)
 800e7cc:	4293      	cmp	r3, r2
 800e7ce:	d306      	bcc.n	800e7de <USB_SetTurnaroundTime+0x56>
 800e7d0:	68bb      	ldr	r3, [r7, #8]
 800e7d2:	4a37      	ldr	r2, [pc, #220]	@ (800e8b0 <USB_SetTurnaroundTime+0x128>)
 800e7d4:	4293      	cmp	r3, r2
 800e7d6:	d202      	bcs.n	800e7de <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800e7d8:	230d      	movs	r3, #13
 800e7da:	617b      	str	r3, [r7, #20]
 800e7dc:	e04c      	b.n	800e878 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800e7de:	68bb      	ldr	r3, [r7, #8]
 800e7e0:	4a33      	ldr	r2, [pc, #204]	@ (800e8b0 <USB_SetTurnaroundTime+0x128>)
 800e7e2:	4293      	cmp	r3, r2
 800e7e4:	d306      	bcc.n	800e7f4 <USB_SetTurnaroundTime+0x6c>
 800e7e6:	68bb      	ldr	r3, [r7, #8]
 800e7e8:	4a32      	ldr	r2, [pc, #200]	@ (800e8b4 <USB_SetTurnaroundTime+0x12c>)
 800e7ea:	4293      	cmp	r3, r2
 800e7ec:	d802      	bhi.n	800e7f4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800e7ee:	230c      	movs	r3, #12
 800e7f0:	617b      	str	r3, [r7, #20]
 800e7f2:	e041      	b.n	800e878 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800e7f4:	68bb      	ldr	r3, [r7, #8]
 800e7f6:	4a2f      	ldr	r2, [pc, #188]	@ (800e8b4 <USB_SetTurnaroundTime+0x12c>)
 800e7f8:	4293      	cmp	r3, r2
 800e7fa:	d906      	bls.n	800e80a <USB_SetTurnaroundTime+0x82>
 800e7fc:	68bb      	ldr	r3, [r7, #8]
 800e7fe:	4a2e      	ldr	r2, [pc, #184]	@ (800e8b8 <USB_SetTurnaroundTime+0x130>)
 800e800:	4293      	cmp	r3, r2
 800e802:	d802      	bhi.n	800e80a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800e804:	230b      	movs	r3, #11
 800e806:	617b      	str	r3, [r7, #20]
 800e808:	e036      	b.n	800e878 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800e80a:	68bb      	ldr	r3, [r7, #8]
 800e80c:	4a2a      	ldr	r2, [pc, #168]	@ (800e8b8 <USB_SetTurnaroundTime+0x130>)
 800e80e:	4293      	cmp	r3, r2
 800e810:	d906      	bls.n	800e820 <USB_SetTurnaroundTime+0x98>
 800e812:	68bb      	ldr	r3, [r7, #8]
 800e814:	4a29      	ldr	r2, [pc, #164]	@ (800e8bc <USB_SetTurnaroundTime+0x134>)
 800e816:	4293      	cmp	r3, r2
 800e818:	d802      	bhi.n	800e820 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800e81a:	230a      	movs	r3, #10
 800e81c:	617b      	str	r3, [r7, #20]
 800e81e:	e02b      	b.n	800e878 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800e820:	68bb      	ldr	r3, [r7, #8]
 800e822:	4a26      	ldr	r2, [pc, #152]	@ (800e8bc <USB_SetTurnaroundTime+0x134>)
 800e824:	4293      	cmp	r3, r2
 800e826:	d906      	bls.n	800e836 <USB_SetTurnaroundTime+0xae>
 800e828:	68bb      	ldr	r3, [r7, #8]
 800e82a:	4a25      	ldr	r2, [pc, #148]	@ (800e8c0 <USB_SetTurnaroundTime+0x138>)
 800e82c:	4293      	cmp	r3, r2
 800e82e:	d202      	bcs.n	800e836 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800e830:	2309      	movs	r3, #9
 800e832:	617b      	str	r3, [r7, #20]
 800e834:	e020      	b.n	800e878 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800e836:	68bb      	ldr	r3, [r7, #8]
 800e838:	4a21      	ldr	r2, [pc, #132]	@ (800e8c0 <USB_SetTurnaroundTime+0x138>)
 800e83a:	4293      	cmp	r3, r2
 800e83c:	d306      	bcc.n	800e84c <USB_SetTurnaroundTime+0xc4>
 800e83e:	68bb      	ldr	r3, [r7, #8]
 800e840:	4a20      	ldr	r2, [pc, #128]	@ (800e8c4 <USB_SetTurnaroundTime+0x13c>)
 800e842:	4293      	cmp	r3, r2
 800e844:	d802      	bhi.n	800e84c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800e846:	2308      	movs	r3, #8
 800e848:	617b      	str	r3, [r7, #20]
 800e84a:	e015      	b.n	800e878 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800e84c:	68bb      	ldr	r3, [r7, #8]
 800e84e:	4a1d      	ldr	r2, [pc, #116]	@ (800e8c4 <USB_SetTurnaroundTime+0x13c>)
 800e850:	4293      	cmp	r3, r2
 800e852:	d906      	bls.n	800e862 <USB_SetTurnaroundTime+0xda>
 800e854:	68bb      	ldr	r3, [r7, #8]
 800e856:	4a1c      	ldr	r2, [pc, #112]	@ (800e8c8 <USB_SetTurnaroundTime+0x140>)
 800e858:	4293      	cmp	r3, r2
 800e85a:	d202      	bcs.n	800e862 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800e85c:	2307      	movs	r3, #7
 800e85e:	617b      	str	r3, [r7, #20]
 800e860:	e00a      	b.n	800e878 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800e862:	2306      	movs	r3, #6
 800e864:	617b      	str	r3, [r7, #20]
 800e866:	e007      	b.n	800e878 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800e868:	79fb      	ldrb	r3, [r7, #7]
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d102      	bne.n	800e874 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800e86e:	2309      	movs	r3, #9
 800e870:	617b      	str	r3, [r7, #20]
 800e872:	e001      	b.n	800e878 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800e874:	2309      	movs	r3, #9
 800e876:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800e878:	68fb      	ldr	r3, [r7, #12]
 800e87a:	68db      	ldr	r3, [r3, #12]
 800e87c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800e880:	68fb      	ldr	r3, [r7, #12]
 800e882:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800e884:	68fb      	ldr	r3, [r7, #12]
 800e886:	68da      	ldr	r2, [r3, #12]
 800e888:	697b      	ldr	r3, [r7, #20]
 800e88a:	029b      	lsls	r3, r3, #10
 800e88c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800e890:	431a      	orrs	r2, r3
 800e892:	68fb      	ldr	r3, [r7, #12]
 800e894:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800e896:	2300      	movs	r3, #0
}
 800e898:	4618      	mov	r0, r3
 800e89a:	371c      	adds	r7, #28
 800e89c:	46bd      	mov	sp, r7
 800e89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8a2:	4770      	bx	lr
 800e8a4:	00d8acbf 	.word	0x00d8acbf
 800e8a8:	00e4e1c0 	.word	0x00e4e1c0
 800e8ac:	00f42400 	.word	0x00f42400
 800e8b0:	01067380 	.word	0x01067380
 800e8b4:	011a499f 	.word	0x011a499f
 800e8b8:	01312cff 	.word	0x01312cff
 800e8bc:	014ca43f 	.word	0x014ca43f
 800e8c0:	016e3600 	.word	0x016e3600
 800e8c4:	01a6ab1f 	.word	0x01a6ab1f
 800e8c8:	01e84800 	.word	0x01e84800

0800e8cc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800e8cc:	b480      	push	{r7}
 800e8ce:	b083      	sub	sp, #12
 800e8d0:	af00      	add	r7, sp, #0
 800e8d2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	689b      	ldr	r3, [r3, #8]
 800e8d8:	f043 0201 	orr.w	r2, r3, #1
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800e8e0:	2300      	movs	r3, #0
}
 800e8e2:	4618      	mov	r0, r3
 800e8e4:	370c      	adds	r7, #12
 800e8e6:	46bd      	mov	sp, r7
 800e8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ec:	4770      	bx	lr

0800e8ee <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800e8ee:	b480      	push	{r7}
 800e8f0:	b083      	sub	sp, #12
 800e8f2:	af00      	add	r7, sp, #0
 800e8f4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	689b      	ldr	r3, [r3, #8]
 800e8fa:	f023 0201 	bic.w	r2, r3, #1
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800e902:	2300      	movs	r3, #0
}
 800e904:	4618      	mov	r0, r3
 800e906:	370c      	adds	r7, #12
 800e908:	46bd      	mov	sp, r7
 800e90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e90e:	4770      	bx	lr

0800e910 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800e910:	b580      	push	{r7, lr}
 800e912:	b084      	sub	sp, #16
 800e914:	af00      	add	r7, sp, #0
 800e916:	6078      	str	r0, [r7, #4]
 800e918:	460b      	mov	r3, r1
 800e91a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800e91c:	2300      	movs	r3, #0
 800e91e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	68db      	ldr	r3, [r3, #12]
 800e924:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800e92c:	78fb      	ldrb	r3, [r7, #3]
 800e92e:	2b01      	cmp	r3, #1
 800e930:	d115      	bne.n	800e95e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	68db      	ldr	r3, [r3, #12]
 800e936:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800e93e:	200a      	movs	r0, #10
 800e940:	f7f3 fc8a 	bl	8002258 <HAL_Delay>
      ms += 10U;
 800e944:	68fb      	ldr	r3, [r7, #12]
 800e946:	330a      	adds	r3, #10
 800e948:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800e94a:	6878      	ldr	r0, [r7, #4]
 800e94c:	f001 f93f 	bl	800fbce <USB_GetMode>
 800e950:	4603      	mov	r3, r0
 800e952:	2b01      	cmp	r3, #1
 800e954:	d01e      	beq.n	800e994 <USB_SetCurrentMode+0x84>
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	2bc7      	cmp	r3, #199	@ 0xc7
 800e95a:	d9f0      	bls.n	800e93e <USB_SetCurrentMode+0x2e>
 800e95c:	e01a      	b.n	800e994 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800e95e:	78fb      	ldrb	r3, [r7, #3]
 800e960:	2b00      	cmp	r3, #0
 800e962:	d115      	bne.n	800e990 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	68db      	ldr	r3, [r3, #12]
 800e968:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800e970:	200a      	movs	r0, #10
 800e972:	f7f3 fc71 	bl	8002258 <HAL_Delay>
      ms += 10U;
 800e976:	68fb      	ldr	r3, [r7, #12]
 800e978:	330a      	adds	r3, #10
 800e97a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800e97c:	6878      	ldr	r0, [r7, #4]
 800e97e:	f001 f926 	bl	800fbce <USB_GetMode>
 800e982:	4603      	mov	r3, r0
 800e984:	2b00      	cmp	r3, #0
 800e986:	d005      	beq.n	800e994 <USB_SetCurrentMode+0x84>
 800e988:	68fb      	ldr	r3, [r7, #12]
 800e98a:	2bc7      	cmp	r3, #199	@ 0xc7
 800e98c:	d9f0      	bls.n	800e970 <USB_SetCurrentMode+0x60>
 800e98e:	e001      	b.n	800e994 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800e990:	2301      	movs	r3, #1
 800e992:	e005      	b.n	800e9a0 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800e994:	68fb      	ldr	r3, [r7, #12]
 800e996:	2bc8      	cmp	r3, #200	@ 0xc8
 800e998:	d101      	bne.n	800e99e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800e99a:	2301      	movs	r3, #1
 800e99c:	e000      	b.n	800e9a0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800e99e:	2300      	movs	r3, #0
}
 800e9a0:	4618      	mov	r0, r3
 800e9a2:	3710      	adds	r7, #16
 800e9a4:	46bd      	mov	sp, r7
 800e9a6:	bd80      	pop	{r7, pc}

0800e9a8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e9a8:	b084      	sub	sp, #16
 800e9aa:	b580      	push	{r7, lr}
 800e9ac:	b086      	sub	sp, #24
 800e9ae:	af00      	add	r7, sp, #0
 800e9b0:	6078      	str	r0, [r7, #4]
 800e9b2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800e9b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800e9ba:	2300      	movs	r3, #0
 800e9bc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800e9c2:	2300      	movs	r3, #0
 800e9c4:	613b      	str	r3, [r7, #16]
 800e9c6:	e009      	b.n	800e9dc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800e9c8:	687a      	ldr	r2, [r7, #4]
 800e9ca:	693b      	ldr	r3, [r7, #16]
 800e9cc:	3340      	adds	r3, #64	@ 0x40
 800e9ce:	009b      	lsls	r3, r3, #2
 800e9d0:	4413      	add	r3, r2
 800e9d2:	2200      	movs	r2, #0
 800e9d4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800e9d6:	693b      	ldr	r3, [r7, #16]
 800e9d8:	3301      	adds	r3, #1
 800e9da:	613b      	str	r3, [r7, #16]
 800e9dc:	693b      	ldr	r3, [r7, #16]
 800e9de:	2b0e      	cmp	r3, #14
 800e9e0:	d9f2      	bls.n	800e9c8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800e9e2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d11c      	bne.n	800ea24 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e9ea:	68fb      	ldr	r3, [r7, #12]
 800e9ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e9f0:	685b      	ldr	r3, [r3, #4]
 800e9f2:	68fa      	ldr	r2, [r7, #12]
 800e9f4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800e9f8:	f043 0302 	orr.w	r3, r3, #2
 800e9fc:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ea02:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	681b      	ldr	r3, [r3, #0]
 800ea0e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	681b      	ldr	r3, [r3, #0]
 800ea1a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	601a      	str	r2, [r3, #0]
 800ea22:	e005      	b.n	800ea30 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ea28:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800ea30:	68fb      	ldr	r3, [r7, #12]
 800ea32:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ea36:	461a      	mov	r2, r3
 800ea38:	2300      	movs	r3, #0
 800ea3a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ea3c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800ea40:	2b01      	cmp	r3, #1
 800ea42:	d10d      	bne.n	800ea60 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800ea44:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	d104      	bne.n	800ea56 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800ea4c:	2100      	movs	r1, #0
 800ea4e:	6878      	ldr	r0, [r7, #4]
 800ea50:	f000 f968 	bl	800ed24 <USB_SetDevSpeed>
 800ea54:	e008      	b.n	800ea68 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800ea56:	2101      	movs	r1, #1
 800ea58:	6878      	ldr	r0, [r7, #4]
 800ea5a:	f000 f963 	bl	800ed24 <USB_SetDevSpeed>
 800ea5e:	e003      	b.n	800ea68 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800ea60:	2103      	movs	r1, #3
 800ea62:	6878      	ldr	r0, [r7, #4]
 800ea64:	f000 f95e 	bl	800ed24 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800ea68:	2110      	movs	r1, #16
 800ea6a:	6878      	ldr	r0, [r7, #4]
 800ea6c:	f000 f8fa 	bl	800ec64 <USB_FlushTxFifo>
 800ea70:	4603      	mov	r3, r0
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	d001      	beq.n	800ea7a <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800ea76:	2301      	movs	r3, #1
 800ea78:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800ea7a:	6878      	ldr	r0, [r7, #4]
 800ea7c:	f000 f924 	bl	800ecc8 <USB_FlushRxFifo>
 800ea80:	4603      	mov	r3, r0
 800ea82:	2b00      	cmp	r3, #0
 800ea84:	d001      	beq.n	800ea8a <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800ea86:	2301      	movs	r3, #1
 800ea88:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800ea8a:	68fb      	ldr	r3, [r7, #12]
 800ea8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ea90:	461a      	mov	r2, r3
 800ea92:	2300      	movs	r3, #0
 800ea94:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800ea96:	68fb      	ldr	r3, [r7, #12]
 800ea98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ea9c:	461a      	mov	r2, r3
 800ea9e:	2300      	movs	r3, #0
 800eaa0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800eaa2:	68fb      	ldr	r3, [r7, #12]
 800eaa4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800eaa8:	461a      	mov	r2, r3
 800eaaa:	2300      	movs	r3, #0
 800eaac:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800eaae:	2300      	movs	r3, #0
 800eab0:	613b      	str	r3, [r7, #16]
 800eab2:	e043      	b.n	800eb3c <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800eab4:	693b      	ldr	r3, [r7, #16]
 800eab6:	015a      	lsls	r2, r3, #5
 800eab8:	68fb      	ldr	r3, [r7, #12]
 800eaba:	4413      	add	r3, r2
 800eabc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800eac0:	681b      	ldr	r3, [r3, #0]
 800eac2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800eac6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800eaca:	d118      	bne.n	800eafe <USB_DevInit+0x156>
    {
      if (i == 0U)
 800eacc:	693b      	ldr	r3, [r7, #16]
 800eace:	2b00      	cmp	r3, #0
 800ead0:	d10a      	bne.n	800eae8 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800ead2:	693b      	ldr	r3, [r7, #16]
 800ead4:	015a      	lsls	r2, r3, #5
 800ead6:	68fb      	ldr	r3, [r7, #12]
 800ead8:	4413      	add	r3, r2
 800eada:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800eade:	461a      	mov	r2, r3
 800eae0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800eae4:	6013      	str	r3, [r2, #0]
 800eae6:	e013      	b.n	800eb10 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800eae8:	693b      	ldr	r3, [r7, #16]
 800eaea:	015a      	lsls	r2, r3, #5
 800eaec:	68fb      	ldr	r3, [r7, #12]
 800eaee:	4413      	add	r3, r2
 800eaf0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800eaf4:	461a      	mov	r2, r3
 800eaf6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800eafa:	6013      	str	r3, [r2, #0]
 800eafc:	e008      	b.n	800eb10 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800eafe:	693b      	ldr	r3, [r7, #16]
 800eb00:	015a      	lsls	r2, r3, #5
 800eb02:	68fb      	ldr	r3, [r7, #12]
 800eb04:	4413      	add	r3, r2
 800eb06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800eb0a:	461a      	mov	r2, r3
 800eb0c:	2300      	movs	r3, #0
 800eb0e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800eb10:	693b      	ldr	r3, [r7, #16]
 800eb12:	015a      	lsls	r2, r3, #5
 800eb14:	68fb      	ldr	r3, [r7, #12]
 800eb16:	4413      	add	r3, r2
 800eb18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800eb1c:	461a      	mov	r2, r3
 800eb1e:	2300      	movs	r3, #0
 800eb20:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800eb22:	693b      	ldr	r3, [r7, #16]
 800eb24:	015a      	lsls	r2, r3, #5
 800eb26:	68fb      	ldr	r3, [r7, #12]
 800eb28:	4413      	add	r3, r2
 800eb2a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800eb2e:	461a      	mov	r2, r3
 800eb30:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800eb34:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800eb36:	693b      	ldr	r3, [r7, #16]
 800eb38:	3301      	adds	r3, #1
 800eb3a:	613b      	str	r3, [r7, #16]
 800eb3c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800eb40:	461a      	mov	r2, r3
 800eb42:	693b      	ldr	r3, [r7, #16]
 800eb44:	4293      	cmp	r3, r2
 800eb46:	d3b5      	bcc.n	800eab4 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800eb48:	2300      	movs	r3, #0
 800eb4a:	613b      	str	r3, [r7, #16]
 800eb4c:	e043      	b.n	800ebd6 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800eb4e:	693b      	ldr	r3, [r7, #16]
 800eb50:	015a      	lsls	r2, r3, #5
 800eb52:	68fb      	ldr	r3, [r7, #12]
 800eb54:	4413      	add	r3, r2
 800eb56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eb5a:	681b      	ldr	r3, [r3, #0]
 800eb5c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800eb60:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800eb64:	d118      	bne.n	800eb98 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800eb66:	693b      	ldr	r3, [r7, #16]
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	d10a      	bne.n	800eb82 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800eb6c:	693b      	ldr	r3, [r7, #16]
 800eb6e:	015a      	lsls	r2, r3, #5
 800eb70:	68fb      	ldr	r3, [r7, #12]
 800eb72:	4413      	add	r3, r2
 800eb74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eb78:	461a      	mov	r2, r3
 800eb7a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800eb7e:	6013      	str	r3, [r2, #0]
 800eb80:	e013      	b.n	800ebaa <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800eb82:	693b      	ldr	r3, [r7, #16]
 800eb84:	015a      	lsls	r2, r3, #5
 800eb86:	68fb      	ldr	r3, [r7, #12]
 800eb88:	4413      	add	r3, r2
 800eb8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eb8e:	461a      	mov	r2, r3
 800eb90:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800eb94:	6013      	str	r3, [r2, #0]
 800eb96:	e008      	b.n	800ebaa <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800eb98:	693b      	ldr	r3, [r7, #16]
 800eb9a:	015a      	lsls	r2, r3, #5
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	4413      	add	r3, r2
 800eba0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eba4:	461a      	mov	r2, r3
 800eba6:	2300      	movs	r3, #0
 800eba8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800ebaa:	693b      	ldr	r3, [r7, #16]
 800ebac:	015a      	lsls	r2, r3, #5
 800ebae:	68fb      	ldr	r3, [r7, #12]
 800ebb0:	4413      	add	r3, r2
 800ebb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ebb6:	461a      	mov	r2, r3
 800ebb8:	2300      	movs	r3, #0
 800ebba:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800ebbc:	693b      	ldr	r3, [r7, #16]
 800ebbe:	015a      	lsls	r2, r3, #5
 800ebc0:	68fb      	ldr	r3, [r7, #12]
 800ebc2:	4413      	add	r3, r2
 800ebc4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ebc8:	461a      	mov	r2, r3
 800ebca:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800ebce:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ebd0:	693b      	ldr	r3, [r7, #16]
 800ebd2:	3301      	adds	r3, #1
 800ebd4:	613b      	str	r3, [r7, #16]
 800ebd6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800ebda:	461a      	mov	r2, r3
 800ebdc:	693b      	ldr	r3, [r7, #16]
 800ebde:	4293      	cmp	r3, r2
 800ebe0:	d3b5      	bcc.n	800eb4e <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800ebe2:	68fb      	ldr	r3, [r7, #12]
 800ebe4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ebe8:	691b      	ldr	r3, [r3, #16]
 800ebea:	68fa      	ldr	r2, [r7, #12]
 800ebec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ebf0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ebf4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	2200      	movs	r2, #0
 800ebfa:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800ec02:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800ec04:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	d105      	bne.n	800ec18 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	699b      	ldr	r3, [r3, #24]
 800ec10:	f043 0210 	orr.w	r2, r3, #16
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	699a      	ldr	r2, [r3, #24]
 800ec1c:	4b0f      	ldr	r3, [pc, #60]	@ (800ec5c <USB_DevInit+0x2b4>)
 800ec1e:	4313      	orrs	r3, r2
 800ec20:	687a      	ldr	r2, [r7, #4]
 800ec22:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800ec24:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	d005      	beq.n	800ec38 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	699b      	ldr	r3, [r3, #24]
 800ec30:	f043 0208 	orr.w	r2, r3, #8
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800ec38:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800ec3c:	2b01      	cmp	r3, #1
 800ec3e:	d105      	bne.n	800ec4c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	699a      	ldr	r2, [r3, #24]
 800ec44:	4b06      	ldr	r3, [pc, #24]	@ (800ec60 <USB_DevInit+0x2b8>)
 800ec46:	4313      	orrs	r3, r2
 800ec48:	687a      	ldr	r2, [r7, #4]
 800ec4a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800ec4c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ec4e:	4618      	mov	r0, r3
 800ec50:	3718      	adds	r7, #24
 800ec52:	46bd      	mov	sp, r7
 800ec54:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ec58:	b004      	add	sp, #16
 800ec5a:	4770      	bx	lr
 800ec5c:	803c3800 	.word	0x803c3800
 800ec60:	40000004 	.word	0x40000004

0800ec64 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800ec64:	b480      	push	{r7}
 800ec66:	b085      	sub	sp, #20
 800ec68:	af00      	add	r7, sp, #0
 800ec6a:	6078      	str	r0, [r7, #4]
 800ec6c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800ec6e:	2300      	movs	r3, #0
 800ec70:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ec72:	68fb      	ldr	r3, [r7, #12]
 800ec74:	3301      	adds	r3, #1
 800ec76:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ec78:	68fb      	ldr	r3, [r7, #12]
 800ec7a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ec7e:	d901      	bls.n	800ec84 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800ec80:	2303      	movs	r3, #3
 800ec82:	e01b      	b.n	800ecbc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	691b      	ldr	r3, [r3, #16]
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	daf2      	bge.n	800ec72 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800ec8c:	2300      	movs	r3, #0
 800ec8e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ec90:	683b      	ldr	r3, [r7, #0]
 800ec92:	019b      	lsls	r3, r3, #6
 800ec94:	f043 0220 	orr.w	r2, r3, #32
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ec9c:	68fb      	ldr	r3, [r7, #12]
 800ec9e:	3301      	adds	r3, #1
 800eca0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800eca2:	68fb      	ldr	r3, [r7, #12]
 800eca4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800eca8:	d901      	bls.n	800ecae <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800ecaa:	2303      	movs	r3, #3
 800ecac:	e006      	b.n	800ecbc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	691b      	ldr	r3, [r3, #16]
 800ecb2:	f003 0320 	and.w	r3, r3, #32
 800ecb6:	2b20      	cmp	r3, #32
 800ecb8:	d0f0      	beq.n	800ec9c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800ecba:	2300      	movs	r3, #0
}
 800ecbc:	4618      	mov	r0, r3
 800ecbe:	3714      	adds	r7, #20
 800ecc0:	46bd      	mov	sp, r7
 800ecc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecc6:	4770      	bx	lr

0800ecc8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800ecc8:	b480      	push	{r7}
 800ecca:	b085      	sub	sp, #20
 800eccc:	af00      	add	r7, sp, #0
 800ecce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ecd0:	2300      	movs	r3, #0
 800ecd2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ecd4:	68fb      	ldr	r3, [r7, #12]
 800ecd6:	3301      	adds	r3, #1
 800ecd8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ecda:	68fb      	ldr	r3, [r7, #12]
 800ecdc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ece0:	d901      	bls.n	800ece6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800ece2:	2303      	movs	r3, #3
 800ece4:	e018      	b.n	800ed18 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	691b      	ldr	r3, [r3, #16]
 800ecea:	2b00      	cmp	r3, #0
 800ecec:	daf2      	bge.n	800ecd4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800ecee:	2300      	movs	r3, #0
 800ecf0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	2210      	movs	r2, #16
 800ecf6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ecf8:	68fb      	ldr	r3, [r7, #12]
 800ecfa:	3301      	adds	r3, #1
 800ecfc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ecfe:	68fb      	ldr	r3, [r7, #12]
 800ed00:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ed04:	d901      	bls.n	800ed0a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800ed06:	2303      	movs	r3, #3
 800ed08:	e006      	b.n	800ed18 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	691b      	ldr	r3, [r3, #16]
 800ed0e:	f003 0310 	and.w	r3, r3, #16
 800ed12:	2b10      	cmp	r3, #16
 800ed14:	d0f0      	beq.n	800ecf8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800ed16:	2300      	movs	r3, #0
}
 800ed18:	4618      	mov	r0, r3
 800ed1a:	3714      	adds	r7, #20
 800ed1c:	46bd      	mov	sp, r7
 800ed1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed22:	4770      	bx	lr

0800ed24 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800ed24:	b480      	push	{r7}
 800ed26:	b085      	sub	sp, #20
 800ed28:	af00      	add	r7, sp, #0
 800ed2a:	6078      	str	r0, [r7, #4]
 800ed2c:	460b      	mov	r3, r1
 800ed2e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800ed34:	68fb      	ldr	r3, [r7, #12]
 800ed36:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ed3a:	681a      	ldr	r2, [r3, #0]
 800ed3c:	78fb      	ldrb	r3, [r7, #3]
 800ed3e:	68f9      	ldr	r1, [r7, #12]
 800ed40:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ed44:	4313      	orrs	r3, r2
 800ed46:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800ed48:	2300      	movs	r3, #0
}
 800ed4a:	4618      	mov	r0, r3
 800ed4c:	3714      	adds	r7, #20
 800ed4e:	46bd      	mov	sp, r7
 800ed50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed54:	4770      	bx	lr

0800ed56 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800ed56:	b480      	push	{r7}
 800ed58:	b087      	sub	sp, #28
 800ed5a:	af00      	add	r7, sp, #0
 800ed5c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800ed62:	693b      	ldr	r3, [r7, #16]
 800ed64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ed68:	689b      	ldr	r3, [r3, #8]
 800ed6a:	f003 0306 	and.w	r3, r3, #6
 800ed6e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800ed70:	68fb      	ldr	r3, [r7, #12]
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	d102      	bne.n	800ed7c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800ed76:	2300      	movs	r3, #0
 800ed78:	75fb      	strb	r3, [r7, #23]
 800ed7a:	e00a      	b.n	800ed92 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800ed7c:	68fb      	ldr	r3, [r7, #12]
 800ed7e:	2b02      	cmp	r3, #2
 800ed80:	d002      	beq.n	800ed88 <USB_GetDevSpeed+0x32>
 800ed82:	68fb      	ldr	r3, [r7, #12]
 800ed84:	2b06      	cmp	r3, #6
 800ed86:	d102      	bne.n	800ed8e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800ed88:	2302      	movs	r3, #2
 800ed8a:	75fb      	strb	r3, [r7, #23]
 800ed8c:	e001      	b.n	800ed92 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800ed8e:	230f      	movs	r3, #15
 800ed90:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800ed92:	7dfb      	ldrb	r3, [r7, #23]
}
 800ed94:	4618      	mov	r0, r3
 800ed96:	371c      	adds	r7, #28
 800ed98:	46bd      	mov	sp, r7
 800ed9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed9e:	4770      	bx	lr

0800eda0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800eda0:	b480      	push	{r7}
 800eda2:	b085      	sub	sp, #20
 800eda4:	af00      	add	r7, sp, #0
 800eda6:	6078      	str	r0, [r7, #4]
 800eda8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800edae:	683b      	ldr	r3, [r7, #0]
 800edb0:	781b      	ldrb	r3, [r3, #0]
 800edb2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800edb4:	683b      	ldr	r3, [r7, #0]
 800edb6:	785b      	ldrb	r3, [r3, #1]
 800edb8:	2b01      	cmp	r3, #1
 800edba:	d139      	bne.n	800ee30 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800edbc:	68fb      	ldr	r3, [r7, #12]
 800edbe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800edc2:	69da      	ldr	r2, [r3, #28]
 800edc4:	683b      	ldr	r3, [r7, #0]
 800edc6:	781b      	ldrb	r3, [r3, #0]
 800edc8:	f003 030f 	and.w	r3, r3, #15
 800edcc:	2101      	movs	r1, #1
 800edce:	fa01 f303 	lsl.w	r3, r1, r3
 800edd2:	b29b      	uxth	r3, r3
 800edd4:	68f9      	ldr	r1, [r7, #12]
 800edd6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800edda:	4313      	orrs	r3, r2
 800eddc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800edde:	68bb      	ldr	r3, [r7, #8]
 800ede0:	015a      	lsls	r2, r3, #5
 800ede2:	68fb      	ldr	r3, [r7, #12]
 800ede4:	4413      	add	r3, r2
 800ede6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800edea:	681b      	ldr	r3, [r3, #0]
 800edec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800edf0:	2b00      	cmp	r3, #0
 800edf2:	d153      	bne.n	800ee9c <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800edf4:	68bb      	ldr	r3, [r7, #8]
 800edf6:	015a      	lsls	r2, r3, #5
 800edf8:	68fb      	ldr	r3, [r7, #12]
 800edfa:	4413      	add	r3, r2
 800edfc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ee00:	681a      	ldr	r2, [r3, #0]
 800ee02:	683b      	ldr	r3, [r7, #0]
 800ee04:	689b      	ldr	r3, [r3, #8]
 800ee06:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ee0a:	683b      	ldr	r3, [r7, #0]
 800ee0c:	791b      	ldrb	r3, [r3, #4]
 800ee0e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ee10:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ee12:	68bb      	ldr	r3, [r7, #8]
 800ee14:	059b      	lsls	r3, r3, #22
 800ee16:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ee18:	431a      	orrs	r2, r3
 800ee1a:	68bb      	ldr	r3, [r7, #8]
 800ee1c:	0159      	lsls	r1, r3, #5
 800ee1e:	68fb      	ldr	r3, [r7, #12]
 800ee20:	440b      	add	r3, r1
 800ee22:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ee26:	4619      	mov	r1, r3
 800ee28:	4b20      	ldr	r3, [pc, #128]	@ (800eeac <USB_ActivateEndpoint+0x10c>)
 800ee2a:	4313      	orrs	r3, r2
 800ee2c:	600b      	str	r3, [r1, #0]
 800ee2e:	e035      	b.n	800ee9c <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800ee30:	68fb      	ldr	r3, [r7, #12]
 800ee32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ee36:	69da      	ldr	r2, [r3, #28]
 800ee38:	683b      	ldr	r3, [r7, #0]
 800ee3a:	781b      	ldrb	r3, [r3, #0]
 800ee3c:	f003 030f 	and.w	r3, r3, #15
 800ee40:	2101      	movs	r1, #1
 800ee42:	fa01 f303 	lsl.w	r3, r1, r3
 800ee46:	041b      	lsls	r3, r3, #16
 800ee48:	68f9      	ldr	r1, [r7, #12]
 800ee4a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ee4e:	4313      	orrs	r3, r2
 800ee50:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800ee52:	68bb      	ldr	r3, [r7, #8]
 800ee54:	015a      	lsls	r2, r3, #5
 800ee56:	68fb      	ldr	r3, [r7, #12]
 800ee58:	4413      	add	r3, r2
 800ee5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ee5e:	681b      	ldr	r3, [r3, #0]
 800ee60:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	d119      	bne.n	800ee9c <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800ee68:	68bb      	ldr	r3, [r7, #8]
 800ee6a:	015a      	lsls	r2, r3, #5
 800ee6c:	68fb      	ldr	r3, [r7, #12]
 800ee6e:	4413      	add	r3, r2
 800ee70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ee74:	681a      	ldr	r2, [r3, #0]
 800ee76:	683b      	ldr	r3, [r7, #0]
 800ee78:	689b      	ldr	r3, [r3, #8]
 800ee7a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800ee7e:	683b      	ldr	r3, [r7, #0]
 800ee80:	791b      	ldrb	r3, [r3, #4]
 800ee82:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800ee84:	430b      	orrs	r3, r1
 800ee86:	431a      	orrs	r2, r3
 800ee88:	68bb      	ldr	r3, [r7, #8]
 800ee8a:	0159      	lsls	r1, r3, #5
 800ee8c:	68fb      	ldr	r3, [r7, #12]
 800ee8e:	440b      	add	r3, r1
 800ee90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ee94:	4619      	mov	r1, r3
 800ee96:	4b05      	ldr	r3, [pc, #20]	@ (800eeac <USB_ActivateEndpoint+0x10c>)
 800ee98:	4313      	orrs	r3, r2
 800ee9a:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800ee9c:	2300      	movs	r3, #0
}
 800ee9e:	4618      	mov	r0, r3
 800eea0:	3714      	adds	r7, #20
 800eea2:	46bd      	mov	sp, r7
 800eea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eea8:	4770      	bx	lr
 800eeaa:	bf00      	nop
 800eeac:	10008000 	.word	0x10008000

0800eeb0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800eeb0:	b480      	push	{r7}
 800eeb2:	b085      	sub	sp, #20
 800eeb4:	af00      	add	r7, sp, #0
 800eeb6:	6078      	str	r0, [r7, #4]
 800eeb8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800eebe:	683b      	ldr	r3, [r7, #0]
 800eec0:	781b      	ldrb	r3, [r3, #0]
 800eec2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800eec4:	683b      	ldr	r3, [r7, #0]
 800eec6:	785b      	ldrb	r3, [r3, #1]
 800eec8:	2b01      	cmp	r3, #1
 800eeca:	d161      	bne.n	800ef90 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800eecc:	68bb      	ldr	r3, [r7, #8]
 800eece:	015a      	lsls	r2, r3, #5
 800eed0:	68fb      	ldr	r3, [r7, #12]
 800eed2:	4413      	add	r3, r2
 800eed4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800eed8:	681b      	ldr	r3, [r3, #0]
 800eeda:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800eede:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800eee2:	d11f      	bne.n	800ef24 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800eee4:	68bb      	ldr	r3, [r7, #8]
 800eee6:	015a      	lsls	r2, r3, #5
 800eee8:	68fb      	ldr	r3, [r7, #12]
 800eeea:	4413      	add	r3, r2
 800eeec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800eef0:	681b      	ldr	r3, [r3, #0]
 800eef2:	68ba      	ldr	r2, [r7, #8]
 800eef4:	0151      	lsls	r1, r2, #5
 800eef6:	68fa      	ldr	r2, [r7, #12]
 800eef8:	440a      	add	r2, r1
 800eefa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800eefe:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800ef02:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800ef04:	68bb      	ldr	r3, [r7, #8]
 800ef06:	015a      	lsls	r2, r3, #5
 800ef08:	68fb      	ldr	r3, [r7, #12]
 800ef0a:	4413      	add	r3, r2
 800ef0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ef10:	681b      	ldr	r3, [r3, #0]
 800ef12:	68ba      	ldr	r2, [r7, #8]
 800ef14:	0151      	lsls	r1, r2, #5
 800ef16:	68fa      	ldr	r2, [r7, #12]
 800ef18:	440a      	add	r2, r1
 800ef1a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ef1e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ef22:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ef24:	68fb      	ldr	r3, [r7, #12]
 800ef26:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ef2a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ef2c:	683b      	ldr	r3, [r7, #0]
 800ef2e:	781b      	ldrb	r3, [r3, #0]
 800ef30:	f003 030f 	and.w	r3, r3, #15
 800ef34:	2101      	movs	r1, #1
 800ef36:	fa01 f303 	lsl.w	r3, r1, r3
 800ef3a:	b29b      	uxth	r3, r3
 800ef3c:	43db      	mvns	r3, r3
 800ef3e:	68f9      	ldr	r1, [r7, #12]
 800ef40:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ef44:	4013      	ands	r3, r2
 800ef46:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ef48:	68fb      	ldr	r3, [r7, #12]
 800ef4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ef4e:	69da      	ldr	r2, [r3, #28]
 800ef50:	683b      	ldr	r3, [r7, #0]
 800ef52:	781b      	ldrb	r3, [r3, #0]
 800ef54:	f003 030f 	and.w	r3, r3, #15
 800ef58:	2101      	movs	r1, #1
 800ef5a:	fa01 f303 	lsl.w	r3, r1, r3
 800ef5e:	b29b      	uxth	r3, r3
 800ef60:	43db      	mvns	r3, r3
 800ef62:	68f9      	ldr	r1, [r7, #12]
 800ef64:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ef68:	4013      	ands	r3, r2
 800ef6a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800ef6c:	68bb      	ldr	r3, [r7, #8]
 800ef6e:	015a      	lsls	r2, r3, #5
 800ef70:	68fb      	ldr	r3, [r7, #12]
 800ef72:	4413      	add	r3, r2
 800ef74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ef78:	681a      	ldr	r2, [r3, #0]
 800ef7a:	68bb      	ldr	r3, [r7, #8]
 800ef7c:	0159      	lsls	r1, r3, #5
 800ef7e:	68fb      	ldr	r3, [r7, #12]
 800ef80:	440b      	add	r3, r1
 800ef82:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ef86:	4619      	mov	r1, r3
 800ef88:	4b35      	ldr	r3, [pc, #212]	@ (800f060 <USB_DeactivateEndpoint+0x1b0>)
 800ef8a:	4013      	ands	r3, r2
 800ef8c:	600b      	str	r3, [r1, #0]
 800ef8e:	e060      	b.n	800f052 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ef90:	68bb      	ldr	r3, [r7, #8]
 800ef92:	015a      	lsls	r2, r3, #5
 800ef94:	68fb      	ldr	r3, [r7, #12]
 800ef96:	4413      	add	r3, r2
 800ef98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ef9c:	681b      	ldr	r3, [r3, #0]
 800ef9e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800efa2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800efa6:	d11f      	bne.n	800efe8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800efa8:	68bb      	ldr	r3, [r7, #8]
 800efaa:	015a      	lsls	r2, r3, #5
 800efac:	68fb      	ldr	r3, [r7, #12]
 800efae:	4413      	add	r3, r2
 800efb0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800efb4:	681b      	ldr	r3, [r3, #0]
 800efb6:	68ba      	ldr	r2, [r7, #8]
 800efb8:	0151      	lsls	r1, r2, #5
 800efba:	68fa      	ldr	r2, [r7, #12]
 800efbc:	440a      	add	r2, r1
 800efbe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800efc2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800efc6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800efc8:	68bb      	ldr	r3, [r7, #8]
 800efca:	015a      	lsls	r2, r3, #5
 800efcc:	68fb      	ldr	r3, [r7, #12]
 800efce:	4413      	add	r3, r2
 800efd0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800efd4:	681b      	ldr	r3, [r3, #0]
 800efd6:	68ba      	ldr	r2, [r7, #8]
 800efd8:	0151      	lsls	r1, r2, #5
 800efda:	68fa      	ldr	r2, [r7, #12]
 800efdc:	440a      	add	r2, r1
 800efde:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800efe2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800efe6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800efe8:	68fb      	ldr	r3, [r7, #12]
 800efea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800efee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800eff0:	683b      	ldr	r3, [r7, #0]
 800eff2:	781b      	ldrb	r3, [r3, #0]
 800eff4:	f003 030f 	and.w	r3, r3, #15
 800eff8:	2101      	movs	r1, #1
 800effa:	fa01 f303 	lsl.w	r3, r1, r3
 800effe:	041b      	lsls	r3, r3, #16
 800f000:	43db      	mvns	r3, r3
 800f002:	68f9      	ldr	r1, [r7, #12]
 800f004:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800f008:	4013      	ands	r3, r2
 800f00a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800f00c:	68fb      	ldr	r3, [r7, #12]
 800f00e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f012:	69da      	ldr	r2, [r3, #28]
 800f014:	683b      	ldr	r3, [r7, #0]
 800f016:	781b      	ldrb	r3, [r3, #0]
 800f018:	f003 030f 	and.w	r3, r3, #15
 800f01c:	2101      	movs	r1, #1
 800f01e:	fa01 f303 	lsl.w	r3, r1, r3
 800f022:	041b      	lsls	r3, r3, #16
 800f024:	43db      	mvns	r3, r3
 800f026:	68f9      	ldr	r1, [r7, #12]
 800f028:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800f02c:	4013      	ands	r3, r2
 800f02e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800f030:	68bb      	ldr	r3, [r7, #8]
 800f032:	015a      	lsls	r2, r3, #5
 800f034:	68fb      	ldr	r3, [r7, #12]
 800f036:	4413      	add	r3, r2
 800f038:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f03c:	681a      	ldr	r2, [r3, #0]
 800f03e:	68bb      	ldr	r3, [r7, #8]
 800f040:	0159      	lsls	r1, r3, #5
 800f042:	68fb      	ldr	r3, [r7, #12]
 800f044:	440b      	add	r3, r1
 800f046:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f04a:	4619      	mov	r1, r3
 800f04c:	4b05      	ldr	r3, [pc, #20]	@ (800f064 <USB_DeactivateEndpoint+0x1b4>)
 800f04e:	4013      	ands	r3, r2
 800f050:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800f052:	2300      	movs	r3, #0
}
 800f054:	4618      	mov	r0, r3
 800f056:	3714      	adds	r7, #20
 800f058:	46bd      	mov	sp, r7
 800f05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f05e:	4770      	bx	lr
 800f060:	ec337800 	.word	0xec337800
 800f064:	eff37800 	.word	0xeff37800

0800f068 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800f068:	b580      	push	{r7, lr}
 800f06a:	b08a      	sub	sp, #40	@ 0x28
 800f06c:	af02      	add	r7, sp, #8
 800f06e:	60f8      	str	r0, [r7, #12]
 800f070:	60b9      	str	r1, [r7, #8]
 800f072:	4613      	mov	r3, r2
 800f074:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f076:	68fb      	ldr	r3, [r7, #12]
 800f078:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800f07a:	68bb      	ldr	r3, [r7, #8]
 800f07c:	781b      	ldrb	r3, [r3, #0]
 800f07e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800f080:	68bb      	ldr	r3, [r7, #8]
 800f082:	785b      	ldrb	r3, [r3, #1]
 800f084:	2b01      	cmp	r3, #1
 800f086:	f040 8185 	bne.w	800f394 <USB_EPStartXfer+0x32c>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800f08a:	68bb      	ldr	r3, [r7, #8]
 800f08c:	691b      	ldr	r3, [r3, #16]
 800f08e:	2b00      	cmp	r3, #0
 800f090:	d132      	bne.n	800f0f8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f092:	69bb      	ldr	r3, [r7, #24]
 800f094:	015a      	lsls	r2, r3, #5
 800f096:	69fb      	ldr	r3, [r7, #28]
 800f098:	4413      	add	r3, r2
 800f09a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f09e:	691a      	ldr	r2, [r3, #16]
 800f0a0:	69bb      	ldr	r3, [r7, #24]
 800f0a2:	0159      	lsls	r1, r3, #5
 800f0a4:	69fb      	ldr	r3, [r7, #28]
 800f0a6:	440b      	add	r3, r1
 800f0a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f0ac:	4619      	mov	r1, r3
 800f0ae:	4ba7      	ldr	r3, [pc, #668]	@ (800f34c <USB_EPStartXfer+0x2e4>)
 800f0b0:	4013      	ands	r3, r2
 800f0b2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800f0b4:	69bb      	ldr	r3, [r7, #24]
 800f0b6:	015a      	lsls	r2, r3, #5
 800f0b8:	69fb      	ldr	r3, [r7, #28]
 800f0ba:	4413      	add	r3, r2
 800f0bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f0c0:	691b      	ldr	r3, [r3, #16]
 800f0c2:	69ba      	ldr	r2, [r7, #24]
 800f0c4:	0151      	lsls	r1, r2, #5
 800f0c6:	69fa      	ldr	r2, [r7, #28]
 800f0c8:	440a      	add	r2, r1
 800f0ca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f0ce:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800f0d2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f0d4:	69bb      	ldr	r3, [r7, #24]
 800f0d6:	015a      	lsls	r2, r3, #5
 800f0d8:	69fb      	ldr	r3, [r7, #28]
 800f0da:	4413      	add	r3, r2
 800f0dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f0e0:	691a      	ldr	r2, [r3, #16]
 800f0e2:	69bb      	ldr	r3, [r7, #24]
 800f0e4:	0159      	lsls	r1, r3, #5
 800f0e6:	69fb      	ldr	r3, [r7, #28]
 800f0e8:	440b      	add	r3, r1
 800f0ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f0ee:	4619      	mov	r1, r3
 800f0f0:	4b97      	ldr	r3, [pc, #604]	@ (800f350 <USB_EPStartXfer+0x2e8>)
 800f0f2:	4013      	ands	r3, r2
 800f0f4:	610b      	str	r3, [r1, #16]
 800f0f6:	e097      	b.n	800f228 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f0f8:	69bb      	ldr	r3, [r7, #24]
 800f0fa:	015a      	lsls	r2, r3, #5
 800f0fc:	69fb      	ldr	r3, [r7, #28]
 800f0fe:	4413      	add	r3, r2
 800f100:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f104:	691a      	ldr	r2, [r3, #16]
 800f106:	69bb      	ldr	r3, [r7, #24]
 800f108:	0159      	lsls	r1, r3, #5
 800f10a:	69fb      	ldr	r3, [r7, #28]
 800f10c:	440b      	add	r3, r1
 800f10e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f112:	4619      	mov	r1, r3
 800f114:	4b8e      	ldr	r3, [pc, #568]	@ (800f350 <USB_EPStartXfer+0x2e8>)
 800f116:	4013      	ands	r3, r2
 800f118:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f11a:	69bb      	ldr	r3, [r7, #24]
 800f11c:	015a      	lsls	r2, r3, #5
 800f11e:	69fb      	ldr	r3, [r7, #28]
 800f120:	4413      	add	r3, r2
 800f122:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f126:	691a      	ldr	r2, [r3, #16]
 800f128:	69bb      	ldr	r3, [r7, #24]
 800f12a:	0159      	lsls	r1, r3, #5
 800f12c:	69fb      	ldr	r3, [r7, #28]
 800f12e:	440b      	add	r3, r1
 800f130:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f134:	4619      	mov	r1, r3
 800f136:	4b85      	ldr	r3, [pc, #532]	@ (800f34c <USB_EPStartXfer+0x2e4>)
 800f138:	4013      	ands	r3, r2
 800f13a:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 800f13c:	69bb      	ldr	r3, [r7, #24]
 800f13e:	2b00      	cmp	r3, #0
 800f140:	d11a      	bne.n	800f178 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800f142:	68bb      	ldr	r3, [r7, #8]
 800f144:	691a      	ldr	r2, [r3, #16]
 800f146:	68bb      	ldr	r3, [r7, #8]
 800f148:	689b      	ldr	r3, [r3, #8]
 800f14a:	429a      	cmp	r2, r3
 800f14c:	d903      	bls.n	800f156 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800f14e:	68bb      	ldr	r3, [r7, #8]
 800f150:	689a      	ldr	r2, [r3, #8]
 800f152:	68bb      	ldr	r3, [r7, #8]
 800f154:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800f156:	69bb      	ldr	r3, [r7, #24]
 800f158:	015a      	lsls	r2, r3, #5
 800f15a:	69fb      	ldr	r3, [r7, #28]
 800f15c:	4413      	add	r3, r2
 800f15e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f162:	691b      	ldr	r3, [r3, #16]
 800f164:	69ba      	ldr	r2, [r7, #24]
 800f166:	0151      	lsls	r1, r2, #5
 800f168:	69fa      	ldr	r2, [r7, #28]
 800f16a:	440a      	add	r2, r1
 800f16c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f170:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800f174:	6113      	str	r3, [r2, #16]
 800f176:	e044      	b.n	800f202 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800f178:	68bb      	ldr	r3, [r7, #8]
 800f17a:	691a      	ldr	r2, [r3, #16]
 800f17c:	68bb      	ldr	r3, [r7, #8]
 800f17e:	689b      	ldr	r3, [r3, #8]
 800f180:	4413      	add	r3, r2
 800f182:	1e5a      	subs	r2, r3, #1
 800f184:	68bb      	ldr	r3, [r7, #8]
 800f186:	689b      	ldr	r3, [r3, #8]
 800f188:	fbb2 f3f3 	udiv	r3, r2, r3
 800f18c:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 800f18e:	69bb      	ldr	r3, [r7, #24]
 800f190:	015a      	lsls	r2, r3, #5
 800f192:	69fb      	ldr	r3, [r7, #28]
 800f194:	4413      	add	r3, r2
 800f196:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f19a:	691a      	ldr	r2, [r3, #16]
 800f19c:	8afb      	ldrh	r3, [r7, #22]
 800f19e:	04d9      	lsls	r1, r3, #19
 800f1a0:	4b6c      	ldr	r3, [pc, #432]	@ (800f354 <USB_EPStartXfer+0x2ec>)
 800f1a2:	400b      	ands	r3, r1
 800f1a4:	69b9      	ldr	r1, [r7, #24]
 800f1a6:	0148      	lsls	r0, r1, #5
 800f1a8:	69f9      	ldr	r1, [r7, #28]
 800f1aa:	4401      	add	r1, r0
 800f1ac:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800f1b0:	4313      	orrs	r3, r2
 800f1b2:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800f1b4:	68bb      	ldr	r3, [r7, #8]
 800f1b6:	791b      	ldrb	r3, [r3, #4]
 800f1b8:	2b01      	cmp	r3, #1
 800f1ba:	d122      	bne.n	800f202 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800f1bc:	69bb      	ldr	r3, [r7, #24]
 800f1be:	015a      	lsls	r2, r3, #5
 800f1c0:	69fb      	ldr	r3, [r7, #28]
 800f1c2:	4413      	add	r3, r2
 800f1c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f1c8:	691b      	ldr	r3, [r3, #16]
 800f1ca:	69ba      	ldr	r2, [r7, #24]
 800f1cc:	0151      	lsls	r1, r2, #5
 800f1ce:	69fa      	ldr	r2, [r7, #28]
 800f1d0:	440a      	add	r2, r1
 800f1d2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f1d6:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800f1da:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 800f1dc:	69bb      	ldr	r3, [r7, #24]
 800f1de:	015a      	lsls	r2, r3, #5
 800f1e0:	69fb      	ldr	r3, [r7, #28]
 800f1e2:	4413      	add	r3, r2
 800f1e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f1e8:	691a      	ldr	r2, [r3, #16]
 800f1ea:	8afb      	ldrh	r3, [r7, #22]
 800f1ec:	075b      	lsls	r3, r3, #29
 800f1ee:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800f1f2:	69b9      	ldr	r1, [r7, #24]
 800f1f4:	0148      	lsls	r0, r1, #5
 800f1f6:	69f9      	ldr	r1, [r7, #28]
 800f1f8:	4401      	add	r1, r0
 800f1fa:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800f1fe:	4313      	orrs	r3, r2
 800f200:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800f202:	69bb      	ldr	r3, [r7, #24]
 800f204:	015a      	lsls	r2, r3, #5
 800f206:	69fb      	ldr	r3, [r7, #28]
 800f208:	4413      	add	r3, r2
 800f20a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f20e:	691a      	ldr	r2, [r3, #16]
 800f210:	68bb      	ldr	r3, [r7, #8]
 800f212:	691b      	ldr	r3, [r3, #16]
 800f214:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f218:	69b9      	ldr	r1, [r7, #24]
 800f21a:	0148      	lsls	r0, r1, #5
 800f21c:	69f9      	ldr	r1, [r7, #28]
 800f21e:	4401      	add	r1, r0
 800f220:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800f224:	4313      	orrs	r3, r2
 800f226:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800f228:	79fb      	ldrb	r3, [r7, #7]
 800f22a:	2b01      	cmp	r3, #1
 800f22c:	d14b      	bne.n	800f2c6 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800f22e:	68bb      	ldr	r3, [r7, #8]
 800f230:	69db      	ldr	r3, [r3, #28]
 800f232:	2b00      	cmp	r3, #0
 800f234:	d009      	beq.n	800f24a <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800f236:	69bb      	ldr	r3, [r7, #24]
 800f238:	015a      	lsls	r2, r3, #5
 800f23a:	69fb      	ldr	r3, [r7, #28]
 800f23c:	4413      	add	r3, r2
 800f23e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f242:	461a      	mov	r2, r3
 800f244:	68bb      	ldr	r3, [r7, #8]
 800f246:	69db      	ldr	r3, [r3, #28]
 800f248:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800f24a:	68bb      	ldr	r3, [r7, #8]
 800f24c:	791b      	ldrb	r3, [r3, #4]
 800f24e:	2b01      	cmp	r3, #1
 800f250:	d128      	bne.n	800f2a4 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f252:	69fb      	ldr	r3, [r7, #28]
 800f254:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f258:	689b      	ldr	r3, [r3, #8]
 800f25a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f25e:	2b00      	cmp	r3, #0
 800f260:	d110      	bne.n	800f284 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800f262:	69bb      	ldr	r3, [r7, #24]
 800f264:	015a      	lsls	r2, r3, #5
 800f266:	69fb      	ldr	r3, [r7, #28]
 800f268:	4413      	add	r3, r2
 800f26a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f26e:	681b      	ldr	r3, [r3, #0]
 800f270:	69ba      	ldr	r2, [r7, #24]
 800f272:	0151      	lsls	r1, r2, #5
 800f274:	69fa      	ldr	r2, [r7, #28]
 800f276:	440a      	add	r2, r1
 800f278:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f27c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800f280:	6013      	str	r3, [r2, #0]
 800f282:	e00f      	b.n	800f2a4 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800f284:	69bb      	ldr	r3, [r7, #24]
 800f286:	015a      	lsls	r2, r3, #5
 800f288:	69fb      	ldr	r3, [r7, #28]
 800f28a:	4413      	add	r3, r2
 800f28c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f290:	681b      	ldr	r3, [r3, #0]
 800f292:	69ba      	ldr	r2, [r7, #24]
 800f294:	0151      	lsls	r1, r2, #5
 800f296:	69fa      	ldr	r2, [r7, #28]
 800f298:	440a      	add	r2, r1
 800f29a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f29e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800f2a2:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f2a4:	69bb      	ldr	r3, [r7, #24]
 800f2a6:	015a      	lsls	r2, r3, #5
 800f2a8:	69fb      	ldr	r3, [r7, #28]
 800f2aa:	4413      	add	r3, r2
 800f2ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f2b0:	681b      	ldr	r3, [r3, #0]
 800f2b2:	69ba      	ldr	r2, [r7, #24]
 800f2b4:	0151      	lsls	r1, r2, #5
 800f2b6:	69fa      	ldr	r2, [r7, #28]
 800f2b8:	440a      	add	r2, r1
 800f2ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f2be:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800f2c2:	6013      	str	r3, [r2, #0]
 800f2c4:	e169      	b.n	800f59a <USB_EPStartXfer+0x532>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f2c6:	69bb      	ldr	r3, [r7, #24]
 800f2c8:	015a      	lsls	r2, r3, #5
 800f2ca:	69fb      	ldr	r3, [r7, #28]
 800f2cc:	4413      	add	r3, r2
 800f2ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f2d2:	681b      	ldr	r3, [r3, #0]
 800f2d4:	69ba      	ldr	r2, [r7, #24]
 800f2d6:	0151      	lsls	r1, r2, #5
 800f2d8:	69fa      	ldr	r2, [r7, #28]
 800f2da:	440a      	add	r2, r1
 800f2dc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f2e0:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800f2e4:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800f2e6:	68bb      	ldr	r3, [r7, #8]
 800f2e8:	791b      	ldrb	r3, [r3, #4]
 800f2ea:	2b01      	cmp	r3, #1
 800f2ec:	d015      	beq.n	800f31a <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800f2ee:	68bb      	ldr	r3, [r7, #8]
 800f2f0:	691b      	ldr	r3, [r3, #16]
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	f000 8151 	beq.w	800f59a <USB_EPStartXfer+0x532>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800f2f8:	69fb      	ldr	r3, [r7, #28]
 800f2fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f2fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f300:	68bb      	ldr	r3, [r7, #8]
 800f302:	781b      	ldrb	r3, [r3, #0]
 800f304:	f003 030f 	and.w	r3, r3, #15
 800f308:	2101      	movs	r1, #1
 800f30a:	fa01 f303 	lsl.w	r3, r1, r3
 800f30e:	69f9      	ldr	r1, [r7, #28]
 800f310:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800f314:	4313      	orrs	r3, r2
 800f316:	634b      	str	r3, [r1, #52]	@ 0x34
 800f318:	e13f      	b.n	800f59a <USB_EPStartXfer+0x532>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f31a:	69fb      	ldr	r3, [r7, #28]
 800f31c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f320:	689b      	ldr	r3, [r3, #8]
 800f322:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f326:	2b00      	cmp	r3, #0
 800f328:	d116      	bne.n	800f358 <USB_EPStartXfer+0x2f0>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800f32a:	69bb      	ldr	r3, [r7, #24]
 800f32c:	015a      	lsls	r2, r3, #5
 800f32e:	69fb      	ldr	r3, [r7, #28]
 800f330:	4413      	add	r3, r2
 800f332:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f336:	681b      	ldr	r3, [r3, #0]
 800f338:	69ba      	ldr	r2, [r7, #24]
 800f33a:	0151      	lsls	r1, r2, #5
 800f33c:	69fa      	ldr	r2, [r7, #28]
 800f33e:	440a      	add	r2, r1
 800f340:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f344:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800f348:	6013      	str	r3, [r2, #0]
 800f34a:	e015      	b.n	800f378 <USB_EPStartXfer+0x310>
 800f34c:	e007ffff 	.word	0xe007ffff
 800f350:	fff80000 	.word	0xfff80000
 800f354:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800f358:	69bb      	ldr	r3, [r7, #24]
 800f35a:	015a      	lsls	r2, r3, #5
 800f35c:	69fb      	ldr	r3, [r7, #28]
 800f35e:	4413      	add	r3, r2
 800f360:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f364:	681b      	ldr	r3, [r3, #0]
 800f366:	69ba      	ldr	r2, [r7, #24]
 800f368:	0151      	lsls	r1, r2, #5
 800f36a:	69fa      	ldr	r2, [r7, #28]
 800f36c:	440a      	add	r2, r1
 800f36e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f372:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800f376:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800f378:	68bb      	ldr	r3, [r7, #8]
 800f37a:	68d9      	ldr	r1, [r3, #12]
 800f37c:	68bb      	ldr	r3, [r7, #8]
 800f37e:	781a      	ldrb	r2, [r3, #0]
 800f380:	68bb      	ldr	r3, [r7, #8]
 800f382:	691b      	ldr	r3, [r3, #16]
 800f384:	b298      	uxth	r0, r3
 800f386:	79fb      	ldrb	r3, [r7, #7]
 800f388:	9300      	str	r3, [sp, #0]
 800f38a:	4603      	mov	r3, r0
 800f38c:	68f8      	ldr	r0, [r7, #12]
 800f38e:	f000 f9b9 	bl	800f704 <USB_WritePacket>
 800f392:	e102      	b.n	800f59a <USB_EPStartXfer+0x532>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800f394:	69bb      	ldr	r3, [r7, #24]
 800f396:	015a      	lsls	r2, r3, #5
 800f398:	69fb      	ldr	r3, [r7, #28]
 800f39a:	4413      	add	r3, r2
 800f39c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f3a0:	691a      	ldr	r2, [r3, #16]
 800f3a2:	69bb      	ldr	r3, [r7, #24]
 800f3a4:	0159      	lsls	r1, r3, #5
 800f3a6:	69fb      	ldr	r3, [r7, #28]
 800f3a8:	440b      	add	r3, r1
 800f3aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f3ae:	4619      	mov	r1, r3
 800f3b0:	4b7c      	ldr	r3, [pc, #496]	@ (800f5a4 <USB_EPStartXfer+0x53c>)
 800f3b2:	4013      	ands	r3, r2
 800f3b4:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800f3b6:	69bb      	ldr	r3, [r7, #24]
 800f3b8:	015a      	lsls	r2, r3, #5
 800f3ba:	69fb      	ldr	r3, [r7, #28]
 800f3bc:	4413      	add	r3, r2
 800f3be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f3c2:	691a      	ldr	r2, [r3, #16]
 800f3c4:	69bb      	ldr	r3, [r7, #24]
 800f3c6:	0159      	lsls	r1, r3, #5
 800f3c8:	69fb      	ldr	r3, [r7, #28]
 800f3ca:	440b      	add	r3, r1
 800f3cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f3d0:	4619      	mov	r1, r3
 800f3d2:	4b75      	ldr	r3, [pc, #468]	@ (800f5a8 <USB_EPStartXfer+0x540>)
 800f3d4:	4013      	ands	r3, r2
 800f3d6:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 800f3d8:	69bb      	ldr	r3, [r7, #24]
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	d12f      	bne.n	800f43e <USB_EPStartXfer+0x3d6>
    {
      if (ep->xfer_len > 0U)
 800f3de:	68bb      	ldr	r3, [r7, #8]
 800f3e0:	691b      	ldr	r3, [r3, #16]
 800f3e2:	2b00      	cmp	r3, #0
 800f3e4:	d003      	beq.n	800f3ee <USB_EPStartXfer+0x386>
      {
        ep->xfer_len = ep->maxpacket;
 800f3e6:	68bb      	ldr	r3, [r7, #8]
 800f3e8:	689a      	ldr	r2, [r3, #8]
 800f3ea:	68bb      	ldr	r3, [r7, #8]
 800f3ec:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800f3ee:	68bb      	ldr	r3, [r7, #8]
 800f3f0:	689a      	ldr	r2, [r3, #8]
 800f3f2:	68bb      	ldr	r3, [r7, #8]
 800f3f4:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800f3f6:	69bb      	ldr	r3, [r7, #24]
 800f3f8:	015a      	lsls	r2, r3, #5
 800f3fa:	69fb      	ldr	r3, [r7, #28]
 800f3fc:	4413      	add	r3, r2
 800f3fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f402:	691a      	ldr	r2, [r3, #16]
 800f404:	68bb      	ldr	r3, [r7, #8]
 800f406:	6a1b      	ldr	r3, [r3, #32]
 800f408:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f40c:	69b9      	ldr	r1, [r7, #24]
 800f40e:	0148      	lsls	r0, r1, #5
 800f410:	69f9      	ldr	r1, [r7, #28]
 800f412:	4401      	add	r1, r0
 800f414:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800f418:	4313      	orrs	r3, r2
 800f41a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f41c:	69bb      	ldr	r3, [r7, #24]
 800f41e:	015a      	lsls	r2, r3, #5
 800f420:	69fb      	ldr	r3, [r7, #28]
 800f422:	4413      	add	r3, r2
 800f424:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f428:	691b      	ldr	r3, [r3, #16]
 800f42a:	69ba      	ldr	r2, [r7, #24]
 800f42c:	0151      	lsls	r1, r2, #5
 800f42e:	69fa      	ldr	r2, [r7, #28]
 800f430:	440a      	add	r2, r1
 800f432:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f436:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800f43a:	6113      	str	r3, [r2, #16]
 800f43c:	e05f      	b.n	800f4fe <USB_EPStartXfer+0x496>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800f43e:	68bb      	ldr	r3, [r7, #8]
 800f440:	691b      	ldr	r3, [r3, #16]
 800f442:	2b00      	cmp	r3, #0
 800f444:	d123      	bne.n	800f48e <USB_EPStartXfer+0x426>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800f446:	69bb      	ldr	r3, [r7, #24]
 800f448:	015a      	lsls	r2, r3, #5
 800f44a:	69fb      	ldr	r3, [r7, #28]
 800f44c:	4413      	add	r3, r2
 800f44e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f452:	691a      	ldr	r2, [r3, #16]
 800f454:	68bb      	ldr	r3, [r7, #8]
 800f456:	689b      	ldr	r3, [r3, #8]
 800f458:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f45c:	69b9      	ldr	r1, [r7, #24]
 800f45e:	0148      	lsls	r0, r1, #5
 800f460:	69f9      	ldr	r1, [r7, #28]
 800f462:	4401      	add	r1, r0
 800f464:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800f468:	4313      	orrs	r3, r2
 800f46a:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f46c:	69bb      	ldr	r3, [r7, #24]
 800f46e:	015a      	lsls	r2, r3, #5
 800f470:	69fb      	ldr	r3, [r7, #28]
 800f472:	4413      	add	r3, r2
 800f474:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f478:	691b      	ldr	r3, [r3, #16]
 800f47a:	69ba      	ldr	r2, [r7, #24]
 800f47c:	0151      	lsls	r1, r2, #5
 800f47e:	69fa      	ldr	r2, [r7, #28]
 800f480:	440a      	add	r2, r1
 800f482:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f486:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800f48a:	6113      	str	r3, [r2, #16]
 800f48c:	e037      	b.n	800f4fe <USB_EPStartXfer+0x496>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800f48e:	68bb      	ldr	r3, [r7, #8]
 800f490:	691a      	ldr	r2, [r3, #16]
 800f492:	68bb      	ldr	r3, [r7, #8]
 800f494:	689b      	ldr	r3, [r3, #8]
 800f496:	4413      	add	r3, r2
 800f498:	1e5a      	subs	r2, r3, #1
 800f49a:	68bb      	ldr	r3, [r7, #8]
 800f49c:	689b      	ldr	r3, [r3, #8]
 800f49e:	fbb2 f3f3 	udiv	r3, r2, r3
 800f4a2:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800f4a4:	68bb      	ldr	r3, [r7, #8]
 800f4a6:	689b      	ldr	r3, [r3, #8]
 800f4a8:	8afa      	ldrh	r2, [r7, #22]
 800f4aa:	fb03 f202 	mul.w	r2, r3, r2
 800f4ae:	68bb      	ldr	r3, [r7, #8]
 800f4b0:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800f4b2:	69bb      	ldr	r3, [r7, #24]
 800f4b4:	015a      	lsls	r2, r3, #5
 800f4b6:	69fb      	ldr	r3, [r7, #28]
 800f4b8:	4413      	add	r3, r2
 800f4ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f4be:	691a      	ldr	r2, [r3, #16]
 800f4c0:	8afb      	ldrh	r3, [r7, #22]
 800f4c2:	04d9      	lsls	r1, r3, #19
 800f4c4:	4b39      	ldr	r3, [pc, #228]	@ (800f5ac <USB_EPStartXfer+0x544>)
 800f4c6:	400b      	ands	r3, r1
 800f4c8:	69b9      	ldr	r1, [r7, #24]
 800f4ca:	0148      	lsls	r0, r1, #5
 800f4cc:	69f9      	ldr	r1, [r7, #28]
 800f4ce:	4401      	add	r1, r0
 800f4d0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800f4d4:	4313      	orrs	r3, r2
 800f4d6:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800f4d8:	69bb      	ldr	r3, [r7, #24]
 800f4da:	015a      	lsls	r2, r3, #5
 800f4dc:	69fb      	ldr	r3, [r7, #28]
 800f4de:	4413      	add	r3, r2
 800f4e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f4e4:	691a      	ldr	r2, [r3, #16]
 800f4e6:	68bb      	ldr	r3, [r7, #8]
 800f4e8:	6a1b      	ldr	r3, [r3, #32]
 800f4ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f4ee:	69b9      	ldr	r1, [r7, #24]
 800f4f0:	0148      	lsls	r0, r1, #5
 800f4f2:	69f9      	ldr	r1, [r7, #28]
 800f4f4:	4401      	add	r1, r0
 800f4f6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800f4fa:	4313      	orrs	r3, r2
 800f4fc:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800f4fe:	79fb      	ldrb	r3, [r7, #7]
 800f500:	2b01      	cmp	r3, #1
 800f502:	d10d      	bne.n	800f520 <USB_EPStartXfer+0x4b8>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800f504:	68bb      	ldr	r3, [r7, #8]
 800f506:	68db      	ldr	r3, [r3, #12]
 800f508:	2b00      	cmp	r3, #0
 800f50a:	d009      	beq.n	800f520 <USB_EPStartXfer+0x4b8>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800f50c:	68bb      	ldr	r3, [r7, #8]
 800f50e:	68d9      	ldr	r1, [r3, #12]
 800f510:	69bb      	ldr	r3, [r7, #24]
 800f512:	015a      	lsls	r2, r3, #5
 800f514:	69fb      	ldr	r3, [r7, #28]
 800f516:	4413      	add	r3, r2
 800f518:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f51c:	460a      	mov	r2, r1
 800f51e:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800f520:	68bb      	ldr	r3, [r7, #8]
 800f522:	791b      	ldrb	r3, [r3, #4]
 800f524:	2b01      	cmp	r3, #1
 800f526:	d128      	bne.n	800f57a <USB_EPStartXfer+0x512>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f528:	69fb      	ldr	r3, [r7, #28]
 800f52a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f52e:	689b      	ldr	r3, [r3, #8]
 800f530:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f534:	2b00      	cmp	r3, #0
 800f536:	d110      	bne.n	800f55a <USB_EPStartXfer+0x4f2>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800f538:	69bb      	ldr	r3, [r7, #24]
 800f53a:	015a      	lsls	r2, r3, #5
 800f53c:	69fb      	ldr	r3, [r7, #28]
 800f53e:	4413      	add	r3, r2
 800f540:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f544:	681b      	ldr	r3, [r3, #0]
 800f546:	69ba      	ldr	r2, [r7, #24]
 800f548:	0151      	lsls	r1, r2, #5
 800f54a:	69fa      	ldr	r2, [r7, #28]
 800f54c:	440a      	add	r2, r1
 800f54e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f552:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800f556:	6013      	str	r3, [r2, #0]
 800f558:	e00f      	b.n	800f57a <USB_EPStartXfer+0x512>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800f55a:	69bb      	ldr	r3, [r7, #24]
 800f55c:	015a      	lsls	r2, r3, #5
 800f55e:	69fb      	ldr	r3, [r7, #28]
 800f560:	4413      	add	r3, r2
 800f562:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f566:	681b      	ldr	r3, [r3, #0]
 800f568:	69ba      	ldr	r2, [r7, #24]
 800f56a:	0151      	lsls	r1, r2, #5
 800f56c:	69fa      	ldr	r2, [r7, #28]
 800f56e:	440a      	add	r2, r1
 800f570:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f574:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800f578:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800f57a:	69bb      	ldr	r3, [r7, #24]
 800f57c:	015a      	lsls	r2, r3, #5
 800f57e:	69fb      	ldr	r3, [r7, #28]
 800f580:	4413      	add	r3, r2
 800f582:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f586:	681b      	ldr	r3, [r3, #0]
 800f588:	69ba      	ldr	r2, [r7, #24]
 800f58a:	0151      	lsls	r1, r2, #5
 800f58c:	69fa      	ldr	r2, [r7, #28]
 800f58e:	440a      	add	r2, r1
 800f590:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f594:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800f598:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f59a:	2300      	movs	r3, #0
}
 800f59c:	4618      	mov	r0, r3
 800f59e:	3720      	adds	r7, #32
 800f5a0:	46bd      	mov	sp, r7
 800f5a2:	bd80      	pop	{r7, pc}
 800f5a4:	fff80000 	.word	0xfff80000
 800f5a8:	e007ffff 	.word	0xe007ffff
 800f5ac:	1ff80000 	.word	0x1ff80000

0800f5b0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f5b0:	b480      	push	{r7}
 800f5b2:	b087      	sub	sp, #28
 800f5b4:	af00      	add	r7, sp, #0
 800f5b6:	6078      	str	r0, [r7, #4]
 800f5b8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800f5ba:	2300      	movs	r3, #0
 800f5bc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800f5be:	2300      	movs	r3, #0
 800f5c0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800f5c6:	683b      	ldr	r3, [r7, #0]
 800f5c8:	785b      	ldrb	r3, [r3, #1]
 800f5ca:	2b01      	cmp	r3, #1
 800f5cc:	d14a      	bne.n	800f664 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800f5ce:	683b      	ldr	r3, [r7, #0]
 800f5d0:	781b      	ldrb	r3, [r3, #0]
 800f5d2:	015a      	lsls	r2, r3, #5
 800f5d4:	693b      	ldr	r3, [r7, #16]
 800f5d6:	4413      	add	r3, r2
 800f5d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f5dc:	681b      	ldr	r3, [r3, #0]
 800f5de:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800f5e2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800f5e6:	f040 8086 	bne.w	800f6f6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800f5ea:	683b      	ldr	r3, [r7, #0]
 800f5ec:	781b      	ldrb	r3, [r3, #0]
 800f5ee:	015a      	lsls	r2, r3, #5
 800f5f0:	693b      	ldr	r3, [r7, #16]
 800f5f2:	4413      	add	r3, r2
 800f5f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f5f8:	681b      	ldr	r3, [r3, #0]
 800f5fa:	683a      	ldr	r2, [r7, #0]
 800f5fc:	7812      	ldrb	r2, [r2, #0]
 800f5fe:	0151      	lsls	r1, r2, #5
 800f600:	693a      	ldr	r2, [r7, #16]
 800f602:	440a      	add	r2, r1
 800f604:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f608:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800f60c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800f60e:	683b      	ldr	r3, [r7, #0]
 800f610:	781b      	ldrb	r3, [r3, #0]
 800f612:	015a      	lsls	r2, r3, #5
 800f614:	693b      	ldr	r3, [r7, #16]
 800f616:	4413      	add	r3, r2
 800f618:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f61c:	681b      	ldr	r3, [r3, #0]
 800f61e:	683a      	ldr	r2, [r7, #0]
 800f620:	7812      	ldrb	r2, [r2, #0]
 800f622:	0151      	lsls	r1, r2, #5
 800f624:	693a      	ldr	r2, [r7, #16]
 800f626:	440a      	add	r2, r1
 800f628:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f62c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800f630:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800f632:	68fb      	ldr	r3, [r7, #12]
 800f634:	3301      	adds	r3, #1
 800f636:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800f638:	68fb      	ldr	r3, [r7, #12]
 800f63a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800f63e:	4293      	cmp	r3, r2
 800f640:	d902      	bls.n	800f648 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800f642:	2301      	movs	r3, #1
 800f644:	75fb      	strb	r3, [r7, #23]
          break;
 800f646:	e056      	b.n	800f6f6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800f648:	683b      	ldr	r3, [r7, #0]
 800f64a:	781b      	ldrb	r3, [r3, #0]
 800f64c:	015a      	lsls	r2, r3, #5
 800f64e:	693b      	ldr	r3, [r7, #16]
 800f650:	4413      	add	r3, r2
 800f652:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f656:	681b      	ldr	r3, [r3, #0]
 800f658:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800f65c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800f660:	d0e7      	beq.n	800f632 <USB_EPStopXfer+0x82>
 800f662:	e048      	b.n	800f6f6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f664:	683b      	ldr	r3, [r7, #0]
 800f666:	781b      	ldrb	r3, [r3, #0]
 800f668:	015a      	lsls	r2, r3, #5
 800f66a:	693b      	ldr	r3, [r7, #16]
 800f66c:	4413      	add	r3, r2
 800f66e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f672:	681b      	ldr	r3, [r3, #0]
 800f674:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800f678:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800f67c:	d13b      	bne.n	800f6f6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800f67e:	683b      	ldr	r3, [r7, #0]
 800f680:	781b      	ldrb	r3, [r3, #0]
 800f682:	015a      	lsls	r2, r3, #5
 800f684:	693b      	ldr	r3, [r7, #16]
 800f686:	4413      	add	r3, r2
 800f688:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f68c:	681b      	ldr	r3, [r3, #0]
 800f68e:	683a      	ldr	r2, [r7, #0]
 800f690:	7812      	ldrb	r2, [r2, #0]
 800f692:	0151      	lsls	r1, r2, #5
 800f694:	693a      	ldr	r2, [r7, #16]
 800f696:	440a      	add	r2, r1
 800f698:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f69c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800f6a0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800f6a2:	683b      	ldr	r3, [r7, #0]
 800f6a4:	781b      	ldrb	r3, [r3, #0]
 800f6a6:	015a      	lsls	r2, r3, #5
 800f6a8:	693b      	ldr	r3, [r7, #16]
 800f6aa:	4413      	add	r3, r2
 800f6ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f6b0:	681b      	ldr	r3, [r3, #0]
 800f6b2:	683a      	ldr	r2, [r7, #0]
 800f6b4:	7812      	ldrb	r2, [r2, #0]
 800f6b6:	0151      	lsls	r1, r2, #5
 800f6b8:	693a      	ldr	r2, [r7, #16]
 800f6ba:	440a      	add	r2, r1
 800f6bc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f6c0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800f6c4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800f6c6:	68fb      	ldr	r3, [r7, #12]
 800f6c8:	3301      	adds	r3, #1
 800f6ca:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800f6cc:	68fb      	ldr	r3, [r7, #12]
 800f6ce:	f242 7210 	movw	r2, #10000	@ 0x2710
 800f6d2:	4293      	cmp	r3, r2
 800f6d4:	d902      	bls.n	800f6dc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800f6d6:	2301      	movs	r3, #1
 800f6d8:	75fb      	strb	r3, [r7, #23]
          break;
 800f6da:	e00c      	b.n	800f6f6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800f6dc:	683b      	ldr	r3, [r7, #0]
 800f6de:	781b      	ldrb	r3, [r3, #0]
 800f6e0:	015a      	lsls	r2, r3, #5
 800f6e2:	693b      	ldr	r3, [r7, #16]
 800f6e4:	4413      	add	r3, r2
 800f6e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f6ea:	681b      	ldr	r3, [r3, #0]
 800f6ec:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800f6f0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800f6f4:	d0e7      	beq.n	800f6c6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800f6f6:	7dfb      	ldrb	r3, [r7, #23]
}
 800f6f8:	4618      	mov	r0, r3
 800f6fa:	371c      	adds	r7, #28
 800f6fc:	46bd      	mov	sp, r7
 800f6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f702:	4770      	bx	lr

0800f704 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800f704:	b480      	push	{r7}
 800f706:	b089      	sub	sp, #36	@ 0x24
 800f708:	af00      	add	r7, sp, #0
 800f70a:	60f8      	str	r0, [r7, #12]
 800f70c:	60b9      	str	r1, [r7, #8]
 800f70e:	4611      	mov	r1, r2
 800f710:	461a      	mov	r2, r3
 800f712:	460b      	mov	r3, r1
 800f714:	71fb      	strb	r3, [r7, #7]
 800f716:	4613      	mov	r3, r2
 800f718:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f71a:	68fb      	ldr	r3, [r7, #12]
 800f71c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800f71e:	68bb      	ldr	r3, [r7, #8]
 800f720:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800f722:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800f726:	2b00      	cmp	r3, #0
 800f728:	d123      	bne.n	800f772 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800f72a:	88bb      	ldrh	r3, [r7, #4]
 800f72c:	3303      	adds	r3, #3
 800f72e:	089b      	lsrs	r3, r3, #2
 800f730:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800f732:	2300      	movs	r3, #0
 800f734:	61bb      	str	r3, [r7, #24]
 800f736:	e018      	b.n	800f76a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800f738:	79fb      	ldrb	r3, [r7, #7]
 800f73a:	031a      	lsls	r2, r3, #12
 800f73c:	697b      	ldr	r3, [r7, #20]
 800f73e:	4413      	add	r3, r2
 800f740:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800f744:	461a      	mov	r2, r3
 800f746:	69fb      	ldr	r3, [r7, #28]
 800f748:	681b      	ldr	r3, [r3, #0]
 800f74a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800f74c:	69fb      	ldr	r3, [r7, #28]
 800f74e:	3301      	adds	r3, #1
 800f750:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800f752:	69fb      	ldr	r3, [r7, #28]
 800f754:	3301      	adds	r3, #1
 800f756:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800f758:	69fb      	ldr	r3, [r7, #28]
 800f75a:	3301      	adds	r3, #1
 800f75c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800f75e:	69fb      	ldr	r3, [r7, #28]
 800f760:	3301      	adds	r3, #1
 800f762:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800f764:	69bb      	ldr	r3, [r7, #24]
 800f766:	3301      	adds	r3, #1
 800f768:	61bb      	str	r3, [r7, #24]
 800f76a:	69ba      	ldr	r2, [r7, #24]
 800f76c:	693b      	ldr	r3, [r7, #16]
 800f76e:	429a      	cmp	r2, r3
 800f770:	d3e2      	bcc.n	800f738 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800f772:	2300      	movs	r3, #0
}
 800f774:	4618      	mov	r0, r3
 800f776:	3724      	adds	r7, #36	@ 0x24
 800f778:	46bd      	mov	sp, r7
 800f77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f77e:	4770      	bx	lr

0800f780 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800f780:	b480      	push	{r7}
 800f782:	b08b      	sub	sp, #44	@ 0x2c
 800f784:	af00      	add	r7, sp, #0
 800f786:	60f8      	str	r0, [r7, #12]
 800f788:	60b9      	str	r1, [r7, #8]
 800f78a:	4613      	mov	r3, r2
 800f78c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f78e:	68fb      	ldr	r3, [r7, #12]
 800f790:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800f792:	68bb      	ldr	r3, [r7, #8]
 800f794:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800f796:	88fb      	ldrh	r3, [r7, #6]
 800f798:	089b      	lsrs	r3, r3, #2
 800f79a:	b29b      	uxth	r3, r3
 800f79c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800f79e:	88fb      	ldrh	r3, [r7, #6]
 800f7a0:	f003 0303 	and.w	r3, r3, #3
 800f7a4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800f7a6:	2300      	movs	r3, #0
 800f7a8:	623b      	str	r3, [r7, #32]
 800f7aa:	e014      	b.n	800f7d6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800f7ac:	69bb      	ldr	r3, [r7, #24]
 800f7ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800f7b2:	681a      	ldr	r2, [r3, #0]
 800f7b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7b6:	601a      	str	r2, [r3, #0]
    pDest++;
 800f7b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7ba:	3301      	adds	r3, #1
 800f7bc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800f7be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7c0:	3301      	adds	r3, #1
 800f7c2:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800f7c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7c6:	3301      	adds	r3, #1
 800f7c8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800f7ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7cc:	3301      	adds	r3, #1
 800f7ce:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800f7d0:	6a3b      	ldr	r3, [r7, #32]
 800f7d2:	3301      	adds	r3, #1
 800f7d4:	623b      	str	r3, [r7, #32]
 800f7d6:	6a3a      	ldr	r2, [r7, #32]
 800f7d8:	697b      	ldr	r3, [r7, #20]
 800f7da:	429a      	cmp	r2, r3
 800f7dc:	d3e6      	bcc.n	800f7ac <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800f7de:	8bfb      	ldrh	r3, [r7, #30]
 800f7e0:	2b00      	cmp	r3, #0
 800f7e2:	d01e      	beq.n	800f822 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800f7e4:	2300      	movs	r3, #0
 800f7e6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800f7e8:	69bb      	ldr	r3, [r7, #24]
 800f7ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800f7ee:	461a      	mov	r2, r3
 800f7f0:	f107 0310 	add.w	r3, r7, #16
 800f7f4:	6812      	ldr	r2, [r2, #0]
 800f7f6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800f7f8:	693a      	ldr	r2, [r7, #16]
 800f7fa:	6a3b      	ldr	r3, [r7, #32]
 800f7fc:	b2db      	uxtb	r3, r3
 800f7fe:	00db      	lsls	r3, r3, #3
 800f800:	fa22 f303 	lsr.w	r3, r2, r3
 800f804:	b2da      	uxtb	r2, r3
 800f806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f808:	701a      	strb	r2, [r3, #0]
      i++;
 800f80a:	6a3b      	ldr	r3, [r7, #32]
 800f80c:	3301      	adds	r3, #1
 800f80e:	623b      	str	r3, [r7, #32]
      pDest++;
 800f810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f812:	3301      	adds	r3, #1
 800f814:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800f816:	8bfb      	ldrh	r3, [r7, #30]
 800f818:	3b01      	subs	r3, #1
 800f81a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800f81c:	8bfb      	ldrh	r3, [r7, #30]
 800f81e:	2b00      	cmp	r3, #0
 800f820:	d1ea      	bne.n	800f7f8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800f822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800f824:	4618      	mov	r0, r3
 800f826:	372c      	adds	r7, #44	@ 0x2c
 800f828:	46bd      	mov	sp, r7
 800f82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f82e:	4770      	bx	lr

0800f830 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800f830:	b480      	push	{r7}
 800f832:	b085      	sub	sp, #20
 800f834:	af00      	add	r7, sp, #0
 800f836:	6078      	str	r0, [r7, #4]
 800f838:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f83e:	683b      	ldr	r3, [r7, #0]
 800f840:	781b      	ldrb	r3, [r3, #0]
 800f842:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800f844:	683b      	ldr	r3, [r7, #0]
 800f846:	785b      	ldrb	r3, [r3, #1]
 800f848:	2b01      	cmp	r3, #1
 800f84a:	d12c      	bne.n	800f8a6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800f84c:	68bb      	ldr	r3, [r7, #8]
 800f84e:	015a      	lsls	r2, r3, #5
 800f850:	68fb      	ldr	r3, [r7, #12]
 800f852:	4413      	add	r3, r2
 800f854:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f858:	681b      	ldr	r3, [r3, #0]
 800f85a:	2b00      	cmp	r3, #0
 800f85c:	db12      	blt.n	800f884 <USB_EPSetStall+0x54>
 800f85e:	68bb      	ldr	r3, [r7, #8]
 800f860:	2b00      	cmp	r3, #0
 800f862:	d00f      	beq.n	800f884 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800f864:	68bb      	ldr	r3, [r7, #8]
 800f866:	015a      	lsls	r2, r3, #5
 800f868:	68fb      	ldr	r3, [r7, #12]
 800f86a:	4413      	add	r3, r2
 800f86c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f870:	681b      	ldr	r3, [r3, #0]
 800f872:	68ba      	ldr	r2, [r7, #8]
 800f874:	0151      	lsls	r1, r2, #5
 800f876:	68fa      	ldr	r2, [r7, #12]
 800f878:	440a      	add	r2, r1
 800f87a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f87e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800f882:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800f884:	68bb      	ldr	r3, [r7, #8]
 800f886:	015a      	lsls	r2, r3, #5
 800f888:	68fb      	ldr	r3, [r7, #12]
 800f88a:	4413      	add	r3, r2
 800f88c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f890:	681b      	ldr	r3, [r3, #0]
 800f892:	68ba      	ldr	r2, [r7, #8]
 800f894:	0151      	lsls	r1, r2, #5
 800f896:	68fa      	ldr	r2, [r7, #12]
 800f898:	440a      	add	r2, r1
 800f89a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f89e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800f8a2:	6013      	str	r3, [r2, #0]
 800f8a4:	e02b      	b.n	800f8fe <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800f8a6:	68bb      	ldr	r3, [r7, #8]
 800f8a8:	015a      	lsls	r2, r3, #5
 800f8aa:	68fb      	ldr	r3, [r7, #12]
 800f8ac:	4413      	add	r3, r2
 800f8ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f8b2:	681b      	ldr	r3, [r3, #0]
 800f8b4:	2b00      	cmp	r3, #0
 800f8b6:	db12      	blt.n	800f8de <USB_EPSetStall+0xae>
 800f8b8:	68bb      	ldr	r3, [r7, #8]
 800f8ba:	2b00      	cmp	r3, #0
 800f8bc:	d00f      	beq.n	800f8de <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800f8be:	68bb      	ldr	r3, [r7, #8]
 800f8c0:	015a      	lsls	r2, r3, #5
 800f8c2:	68fb      	ldr	r3, [r7, #12]
 800f8c4:	4413      	add	r3, r2
 800f8c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f8ca:	681b      	ldr	r3, [r3, #0]
 800f8cc:	68ba      	ldr	r2, [r7, #8]
 800f8ce:	0151      	lsls	r1, r2, #5
 800f8d0:	68fa      	ldr	r2, [r7, #12]
 800f8d2:	440a      	add	r2, r1
 800f8d4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f8d8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800f8dc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800f8de:	68bb      	ldr	r3, [r7, #8]
 800f8e0:	015a      	lsls	r2, r3, #5
 800f8e2:	68fb      	ldr	r3, [r7, #12]
 800f8e4:	4413      	add	r3, r2
 800f8e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f8ea:	681b      	ldr	r3, [r3, #0]
 800f8ec:	68ba      	ldr	r2, [r7, #8]
 800f8ee:	0151      	lsls	r1, r2, #5
 800f8f0:	68fa      	ldr	r2, [r7, #12]
 800f8f2:	440a      	add	r2, r1
 800f8f4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f8f8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800f8fc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f8fe:	2300      	movs	r3, #0
}
 800f900:	4618      	mov	r0, r3
 800f902:	3714      	adds	r7, #20
 800f904:	46bd      	mov	sp, r7
 800f906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f90a:	4770      	bx	lr

0800f90c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800f90c:	b480      	push	{r7}
 800f90e:	b085      	sub	sp, #20
 800f910:	af00      	add	r7, sp, #0
 800f912:	6078      	str	r0, [r7, #4]
 800f914:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f91a:	683b      	ldr	r3, [r7, #0]
 800f91c:	781b      	ldrb	r3, [r3, #0]
 800f91e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800f920:	683b      	ldr	r3, [r7, #0]
 800f922:	785b      	ldrb	r3, [r3, #1]
 800f924:	2b01      	cmp	r3, #1
 800f926:	d128      	bne.n	800f97a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800f928:	68bb      	ldr	r3, [r7, #8]
 800f92a:	015a      	lsls	r2, r3, #5
 800f92c:	68fb      	ldr	r3, [r7, #12]
 800f92e:	4413      	add	r3, r2
 800f930:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f934:	681b      	ldr	r3, [r3, #0]
 800f936:	68ba      	ldr	r2, [r7, #8]
 800f938:	0151      	lsls	r1, r2, #5
 800f93a:	68fa      	ldr	r2, [r7, #12]
 800f93c:	440a      	add	r2, r1
 800f93e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f942:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800f946:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800f948:	683b      	ldr	r3, [r7, #0]
 800f94a:	791b      	ldrb	r3, [r3, #4]
 800f94c:	2b03      	cmp	r3, #3
 800f94e:	d003      	beq.n	800f958 <USB_EPClearStall+0x4c>
 800f950:	683b      	ldr	r3, [r7, #0]
 800f952:	791b      	ldrb	r3, [r3, #4]
 800f954:	2b02      	cmp	r3, #2
 800f956:	d138      	bne.n	800f9ca <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800f958:	68bb      	ldr	r3, [r7, #8]
 800f95a:	015a      	lsls	r2, r3, #5
 800f95c:	68fb      	ldr	r3, [r7, #12]
 800f95e:	4413      	add	r3, r2
 800f960:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f964:	681b      	ldr	r3, [r3, #0]
 800f966:	68ba      	ldr	r2, [r7, #8]
 800f968:	0151      	lsls	r1, r2, #5
 800f96a:	68fa      	ldr	r2, [r7, #12]
 800f96c:	440a      	add	r2, r1
 800f96e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f972:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800f976:	6013      	str	r3, [r2, #0]
 800f978:	e027      	b.n	800f9ca <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800f97a:	68bb      	ldr	r3, [r7, #8]
 800f97c:	015a      	lsls	r2, r3, #5
 800f97e:	68fb      	ldr	r3, [r7, #12]
 800f980:	4413      	add	r3, r2
 800f982:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f986:	681b      	ldr	r3, [r3, #0]
 800f988:	68ba      	ldr	r2, [r7, #8]
 800f98a:	0151      	lsls	r1, r2, #5
 800f98c:	68fa      	ldr	r2, [r7, #12]
 800f98e:	440a      	add	r2, r1
 800f990:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f994:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800f998:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800f99a:	683b      	ldr	r3, [r7, #0]
 800f99c:	791b      	ldrb	r3, [r3, #4]
 800f99e:	2b03      	cmp	r3, #3
 800f9a0:	d003      	beq.n	800f9aa <USB_EPClearStall+0x9e>
 800f9a2:	683b      	ldr	r3, [r7, #0]
 800f9a4:	791b      	ldrb	r3, [r3, #4]
 800f9a6:	2b02      	cmp	r3, #2
 800f9a8:	d10f      	bne.n	800f9ca <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800f9aa:	68bb      	ldr	r3, [r7, #8]
 800f9ac:	015a      	lsls	r2, r3, #5
 800f9ae:	68fb      	ldr	r3, [r7, #12]
 800f9b0:	4413      	add	r3, r2
 800f9b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f9b6:	681b      	ldr	r3, [r3, #0]
 800f9b8:	68ba      	ldr	r2, [r7, #8]
 800f9ba:	0151      	lsls	r1, r2, #5
 800f9bc:	68fa      	ldr	r2, [r7, #12]
 800f9be:	440a      	add	r2, r1
 800f9c0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f9c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800f9c8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800f9ca:	2300      	movs	r3, #0
}
 800f9cc:	4618      	mov	r0, r3
 800f9ce:	3714      	adds	r7, #20
 800f9d0:	46bd      	mov	sp, r7
 800f9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9d6:	4770      	bx	lr

0800f9d8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800f9d8:	b480      	push	{r7}
 800f9da:	b085      	sub	sp, #20
 800f9dc:	af00      	add	r7, sp, #0
 800f9de:	6078      	str	r0, [r7, #4]
 800f9e0:	460b      	mov	r3, r1
 800f9e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800f9e8:	68fb      	ldr	r3, [r7, #12]
 800f9ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f9ee:	681b      	ldr	r3, [r3, #0]
 800f9f0:	68fa      	ldr	r2, [r7, #12]
 800f9f2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800f9f6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800f9fa:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800f9fc:	68fb      	ldr	r3, [r7, #12]
 800f9fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fa02:	681a      	ldr	r2, [r3, #0]
 800fa04:	78fb      	ldrb	r3, [r7, #3]
 800fa06:	011b      	lsls	r3, r3, #4
 800fa08:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800fa0c:	68f9      	ldr	r1, [r7, #12]
 800fa0e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800fa12:	4313      	orrs	r3, r2
 800fa14:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800fa16:	2300      	movs	r3, #0
}
 800fa18:	4618      	mov	r0, r3
 800fa1a:	3714      	adds	r7, #20
 800fa1c:	46bd      	mov	sp, r7
 800fa1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa22:	4770      	bx	lr

0800fa24 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800fa24:	b480      	push	{r7}
 800fa26:	b085      	sub	sp, #20
 800fa28:	af00      	add	r7, sp, #0
 800fa2a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800fa30:	68fb      	ldr	r3, [r7, #12]
 800fa32:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800fa36:	681b      	ldr	r3, [r3, #0]
 800fa38:	68fa      	ldr	r2, [r7, #12]
 800fa3a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800fa3e:	f023 0303 	bic.w	r3, r3, #3
 800fa42:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800fa44:	68fb      	ldr	r3, [r7, #12]
 800fa46:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fa4a:	685b      	ldr	r3, [r3, #4]
 800fa4c:	68fa      	ldr	r2, [r7, #12]
 800fa4e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800fa52:	f023 0302 	bic.w	r3, r3, #2
 800fa56:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800fa58:	2300      	movs	r3, #0
}
 800fa5a:	4618      	mov	r0, r3
 800fa5c:	3714      	adds	r7, #20
 800fa5e:	46bd      	mov	sp, r7
 800fa60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa64:	4770      	bx	lr

0800fa66 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800fa66:	b480      	push	{r7}
 800fa68:	b085      	sub	sp, #20
 800fa6a:	af00      	add	r7, sp, #0
 800fa6c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800fa72:	68fb      	ldr	r3, [r7, #12]
 800fa74:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800fa78:	681b      	ldr	r3, [r3, #0]
 800fa7a:	68fa      	ldr	r2, [r7, #12]
 800fa7c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800fa80:	f023 0303 	bic.w	r3, r3, #3
 800fa84:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800fa86:	68fb      	ldr	r3, [r7, #12]
 800fa88:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fa8c:	685b      	ldr	r3, [r3, #4]
 800fa8e:	68fa      	ldr	r2, [r7, #12]
 800fa90:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800fa94:	f043 0302 	orr.w	r3, r3, #2
 800fa98:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800fa9a:	2300      	movs	r3, #0
}
 800fa9c:	4618      	mov	r0, r3
 800fa9e:	3714      	adds	r7, #20
 800faa0:	46bd      	mov	sp, r7
 800faa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faa6:	4770      	bx	lr

0800faa8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800faa8:	b480      	push	{r7}
 800faaa:	b085      	sub	sp, #20
 800faac:	af00      	add	r7, sp, #0
 800faae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	695b      	ldr	r3, [r3, #20]
 800fab4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	699b      	ldr	r3, [r3, #24]
 800faba:	68fa      	ldr	r2, [r7, #12]
 800fabc:	4013      	ands	r3, r2
 800fabe:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800fac0:	68fb      	ldr	r3, [r7, #12]
}
 800fac2:	4618      	mov	r0, r3
 800fac4:	3714      	adds	r7, #20
 800fac6:	46bd      	mov	sp, r7
 800fac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800facc:	4770      	bx	lr

0800face <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800face:	b480      	push	{r7}
 800fad0:	b085      	sub	sp, #20
 800fad2:	af00      	add	r7, sp, #0
 800fad4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800fada:	68fb      	ldr	r3, [r7, #12]
 800fadc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fae0:	699b      	ldr	r3, [r3, #24]
 800fae2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800fae4:	68fb      	ldr	r3, [r7, #12]
 800fae6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800faea:	69db      	ldr	r3, [r3, #28]
 800faec:	68ba      	ldr	r2, [r7, #8]
 800faee:	4013      	ands	r3, r2
 800faf0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800faf2:	68bb      	ldr	r3, [r7, #8]
 800faf4:	0c1b      	lsrs	r3, r3, #16
}
 800faf6:	4618      	mov	r0, r3
 800faf8:	3714      	adds	r7, #20
 800fafa:	46bd      	mov	sp, r7
 800fafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb00:	4770      	bx	lr

0800fb02 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800fb02:	b480      	push	{r7}
 800fb04:	b085      	sub	sp, #20
 800fb06:	af00      	add	r7, sp, #0
 800fb08:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800fb0e:	68fb      	ldr	r3, [r7, #12]
 800fb10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fb14:	699b      	ldr	r3, [r3, #24]
 800fb16:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800fb18:	68fb      	ldr	r3, [r7, #12]
 800fb1a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fb1e:	69db      	ldr	r3, [r3, #28]
 800fb20:	68ba      	ldr	r2, [r7, #8]
 800fb22:	4013      	ands	r3, r2
 800fb24:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800fb26:	68bb      	ldr	r3, [r7, #8]
 800fb28:	b29b      	uxth	r3, r3
}
 800fb2a:	4618      	mov	r0, r3
 800fb2c:	3714      	adds	r7, #20
 800fb2e:	46bd      	mov	sp, r7
 800fb30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb34:	4770      	bx	lr

0800fb36 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800fb36:	b480      	push	{r7}
 800fb38:	b085      	sub	sp, #20
 800fb3a:	af00      	add	r7, sp, #0
 800fb3c:	6078      	str	r0, [r7, #4]
 800fb3e:	460b      	mov	r3, r1
 800fb40:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800fb46:	78fb      	ldrb	r3, [r7, #3]
 800fb48:	015a      	lsls	r2, r3, #5
 800fb4a:	68fb      	ldr	r3, [r7, #12]
 800fb4c:	4413      	add	r3, r2
 800fb4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fb52:	689b      	ldr	r3, [r3, #8]
 800fb54:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800fb56:	68fb      	ldr	r3, [r7, #12]
 800fb58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fb5c:	695b      	ldr	r3, [r3, #20]
 800fb5e:	68ba      	ldr	r2, [r7, #8]
 800fb60:	4013      	ands	r3, r2
 800fb62:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800fb64:	68bb      	ldr	r3, [r7, #8]
}
 800fb66:	4618      	mov	r0, r3
 800fb68:	3714      	adds	r7, #20
 800fb6a:	46bd      	mov	sp, r7
 800fb6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb70:	4770      	bx	lr

0800fb72 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800fb72:	b480      	push	{r7}
 800fb74:	b087      	sub	sp, #28
 800fb76:	af00      	add	r7, sp, #0
 800fb78:	6078      	str	r0, [r7, #4]
 800fb7a:	460b      	mov	r3, r1
 800fb7c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800fb82:	697b      	ldr	r3, [r7, #20]
 800fb84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fb88:	691b      	ldr	r3, [r3, #16]
 800fb8a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800fb8c:	697b      	ldr	r3, [r7, #20]
 800fb8e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fb92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fb94:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800fb96:	78fb      	ldrb	r3, [r7, #3]
 800fb98:	f003 030f 	and.w	r3, r3, #15
 800fb9c:	68fa      	ldr	r2, [r7, #12]
 800fb9e:	fa22 f303 	lsr.w	r3, r2, r3
 800fba2:	01db      	lsls	r3, r3, #7
 800fba4:	b2db      	uxtb	r3, r3
 800fba6:	693a      	ldr	r2, [r7, #16]
 800fba8:	4313      	orrs	r3, r2
 800fbaa:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800fbac:	78fb      	ldrb	r3, [r7, #3]
 800fbae:	015a      	lsls	r2, r3, #5
 800fbb0:	697b      	ldr	r3, [r7, #20]
 800fbb2:	4413      	add	r3, r2
 800fbb4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fbb8:	689b      	ldr	r3, [r3, #8]
 800fbba:	693a      	ldr	r2, [r7, #16]
 800fbbc:	4013      	ands	r3, r2
 800fbbe:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800fbc0:	68bb      	ldr	r3, [r7, #8]
}
 800fbc2:	4618      	mov	r0, r3
 800fbc4:	371c      	adds	r7, #28
 800fbc6:	46bd      	mov	sp, r7
 800fbc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbcc:	4770      	bx	lr

0800fbce <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800fbce:	b480      	push	{r7}
 800fbd0:	b083      	sub	sp, #12
 800fbd2:	af00      	add	r7, sp, #0
 800fbd4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	695b      	ldr	r3, [r3, #20]
 800fbda:	f003 0301 	and.w	r3, r3, #1
}
 800fbde:	4618      	mov	r0, r3
 800fbe0:	370c      	adds	r7, #12
 800fbe2:	46bd      	mov	sp, r7
 800fbe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbe8:	4770      	bx	lr
	...

0800fbec <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800fbec:	b480      	push	{r7}
 800fbee:	b085      	sub	sp, #20
 800fbf0:	af00      	add	r7, sp, #0
 800fbf2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800fbf8:	68fb      	ldr	r3, [r7, #12]
 800fbfa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fbfe:	681a      	ldr	r2, [r3, #0]
 800fc00:	68fb      	ldr	r3, [r7, #12]
 800fc02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fc06:	4619      	mov	r1, r3
 800fc08:	4b09      	ldr	r3, [pc, #36]	@ (800fc30 <USB_ActivateSetup+0x44>)
 800fc0a:	4013      	ands	r3, r2
 800fc0c:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800fc0e:	68fb      	ldr	r3, [r7, #12]
 800fc10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fc14:	685b      	ldr	r3, [r3, #4]
 800fc16:	68fa      	ldr	r2, [r7, #12]
 800fc18:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800fc1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800fc20:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800fc22:	2300      	movs	r3, #0
}
 800fc24:	4618      	mov	r0, r3
 800fc26:	3714      	adds	r7, #20
 800fc28:	46bd      	mov	sp, r7
 800fc2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc2e:	4770      	bx	lr
 800fc30:	fffff800 	.word	0xfffff800

0800fc34 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800fc34:	b480      	push	{r7}
 800fc36:	b087      	sub	sp, #28
 800fc38:	af00      	add	r7, sp, #0
 800fc3a:	60f8      	str	r0, [r7, #12]
 800fc3c:	460b      	mov	r3, r1
 800fc3e:	607a      	str	r2, [r7, #4]
 800fc40:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fc42:	68fb      	ldr	r3, [r7, #12]
 800fc44:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800fc46:	68fb      	ldr	r3, [r7, #12]
 800fc48:	333c      	adds	r3, #60	@ 0x3c
 800fc4a:	3304      	adds	r3, #4
 800fc4c:	681b      	ldr	r3, [r3, #0]
 800fc4e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800fc50:	693b      	ldr	r3, [r7, #16]
 800fc52:	4a26      	ldr	r2, [pc, #152]	@ (800fcec <USB_EP0_OutStart+0xb8>)
 800fc54:	4293      	cmp	r3, r2
 800fc56:	d90a      	bls.n	800fc6e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800fc58:	697b      	ldr	r3, [r7, #20]
 800fc5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fc5e:	681b      	ldr	r3, [r3, #0]
 800fc60:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800fc64:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800fc68:	d101      	bne.n	800fc6e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800fc6a:	2300      	movs	r3, #0
 800fc6c:	e037      	b.n	800fcde <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800fc6e:	697b      	ldr	r3, [r7, #20]
 800fc70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fc74:	461a      	mov	r2, r3
 800fc76:	2300      	movs	r3, #0
 800fc78:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800fc7a:	697b      	ldr	r3, [r7, #20]
 800fc7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fc80:	691b      	ldr	r3, [r3, #16]
 800fc82:	697a      	ldr	r2, [r7, #20]
 800fc84:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800fc88:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800fc8c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800fc8e:	697b      	ldr	r3, [r7, #20]
 800fc90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fc94:	691b      	ldr	r3, [r3, #16]
 800fc96:	697a      	ldr	r2, [r7, #20]
 800fc98:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800fc9c:	f043 0318 	orr.w	r3, r3, #24
 800fca0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800fca2:	697b      	ldr	r3, [r7, #20]
 800fca4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fca8:	691b      	ldr	r3, [r3, #16]
 800fcaa:	697a      	ldr	r2, [r7, #20]
 800fcac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800fcb0:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800fcb4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800fcb6:	7afb      	ldrb	r3, [r7, #11]
 800fcb8:	2b01      	cmp	r3, #1
 800fcba:	d10f      	bne.n	800fcdc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800fcbc:	697b      	ldr	r3, [r7, #20]
 800fcbe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fcc2:	461a      	mov	r2, r3
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800fcc8:	697b      	ldr	r3, [r7, #20]
 800fcca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fcce:	681b      	ldr	r3, [r3, #0]
 800fcd0:	697a      	ldr	r2, [r7, #20]
 800fcd2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800fcd6:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800fcda:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800fcdc:	2300      	movs	r3, #0
}
 800fcde:	4618      	mov	r0, r3
 800fce0:	371c      	adds	r7, #28
 800fce2:	46bd      	mov	sp, r7
 800fce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fce8:	4770      	bx	lr
 800fcea:	bf00      	nop
 800fcec:	4f54300a 	.word	0x4f54300a

0800fcf0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800fcf0:	b480      	push	{r7}
 800fcf2:	b085      	sub	sp, #20
 800fcf4:	af00      	add	r7, sp, #0
 800fcf6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800fcf8:	2300      	movs	r3, #0
 800fcfa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800fcfc:	68fb      	ldr	r3, [r7, #12]
 800fcfe:	3301      	adds	r3, #1
 800fd00:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800fd02:	68fb      	ldr	r3, [r7, #12]
 800fd04:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800fd08:	d901      	bls.n	800fd0e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800fd0a:	2303      	movs	r3, #3
 800fd0c:	e01b      	b.n	800fd46 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	691b      	ldr	r3, [r3, #16]
 800fd12:	2b00      	cmp	r3, #0
 800fd14:	daf2      	bge.n	800fcfc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800fd16:	2300      	movs	r3, #0
 800fd18:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	691b      	ldr	r3, [r3, #16]
 800fd1e:	f043 0201 	orr.w	r2, r3, #1
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800fd26:	68fb      	ldr	r3, [r7, #12]
 800fd28:	3301      	adds	r3, #1
 800fd2a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800fd2c:	68fb      	ldr	r3, [r7, #12]
 800fd2e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800fd32:	d901      	bls.n	800fd38 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800fd34:	2303      	movs	r3, #3
 800fd36:	e006      	b.n	800fd46 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	691b      	ldr	r3, [r3, #16]
 800fd3c:	f003 0301 	and.w	r3, r3, #1
 800fd40:	2b01      	cmp	r3, #1
 800fd42:	d0f0      	beq.n	800fd26 <USB_CoreReset+0x36>

  return HAL_OK;
 800fd44:	2300      	movs	r3, #0
}
 800fd46:	4618      	mov	r0, r3
 800fd48:	3714      	adds	r7, #20
 800fd4a:	46bd      	mov	sp, r7
 800fd4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd50:	4770      	bx	lr
	...

0800fd54 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800fd54:	b580      	push	{r7, lr}
 800fd56:	b084      	sub	sp, #16
 800fd58:	af00      	add	r7, sp, #0
 800fd5a:	6078      	str	r0, [r7, #4]
 800fd5c:	460b      	mov	r3, r1
 800fd5e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800fd60:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800fd64:	f002 fcf4 	bl	8012750 <USBD_static_malloc>
 800fd68:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800fd6a:	68fb      	ldr	r3, [r7, #12]
 800fd6c:	2b00      	cmp	r3, #0
 800fd6e:	d109      	bne.n	800fd84 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	32b0      	adds	r2, #176	@ 0xb0
 800fd7a:	2100      	movs	r1, #0
 800fd7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800fd80:	2302      	movs	r3, #2
 800fd82:	e0d4      	b.n	800ff2e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800fd84:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800fd88:	2100      	movs	r1, #0
 800fd8a:	68f8      	ldr	r0, [r7, #12]
 800fd8c:	f002 fd46 	bl	801281c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	32b0      	adds	r2, #176	@ 0xb0
 800fd9a:	68f9      	ldr	r1, [r7, #12]
 800fd9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	32b0      	adds	r2, #176	@ 0xb0
 800fdaa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	7c1b      	ldrb	r3, [r3, #16]
 800fdb8:	2b00      	cmp	r3, #0
 800fdba:	d138      	bne.n	800fe2e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800fdbc:	4b5e      	ldr	r3, [pc, #376]	@ (800ff38 <USBD_CDC_Init+0x1e4>)
 800fdbe:	7819      	ldrb	r1, [r3, #0]
 800fdc0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800fdc4:	2202      	movs	r2, #2
 800fdc6:	6878      	ldr	r0, [r7, #4]
 800fdc8:	f002 fb9f 	bl	801250a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800fdcc:	4b5a      	ldr	r3, [pc, #360]	@ (800ff38 <USBD_CDC_Init+0x1e4>)
 800fdce:	781b      	ldrb	r3, [r3, #0]
 800fdd0:	f003 020f 	and.w	r2, r3, #15
 800fdd4:	6879      	ldr	r1, [r7, #4]
 800fdd6:	4613      	mov	r3, r2
 800fdd8:	009b      	lsls	r3, r3, #2
 800fdda:	4413      	add	r3, r2
 800fddc:	009b      	lsls	r3, r3, #2
 800fdde:	440b      	add	r3, r1
 800fde0:	3324      	adds	r3, #36	@ 0x24
 800fde2:	2201      	movs	r2, #1
 800fde4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800fde6:	4b55      	ldr	r3, [pc, #340]	@ (800ff3c <USBD_CDC_Init+0x1e8>)
 800fde8:	7819      	ldrb	r1, [r3, #0]
 800fdea:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800fdee:	2202      	movs	r2, #2
 800fdf0:	6878      	ldr	r0, [r7, #4]
 800fdf2:	f002 fb8a 	bl	801250a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800fdf6:	4b51      	ldr	r3, [pc, #324]	@ (800ff3c <USBD_CDC_Init+0x1e8>)
 800fdf8:	781b      	ldrb	r3, [r3, #0]
 800fdfa:	f003 020f 	and.w	r2, r3, #15
 800fdfe:	6879      	ldr	r1, [r7, #4]
 800fe00:	4613      	mov	r3, r2
 800fe02:	009b      	lsls	r3, r3, #2
 800fe04:	4413      	add	r3, r2
 800fe06:	009b      	lsls	r3, r3, #2
 800fe08:	440b      	add	r3, r1
 800fe0a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800fe0e:	2201      	movs	r2, #1
 800fe10:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800fe12:	4b4b      	ldr	r3, [pc, #300]	@ (800ff40 <USBD_CDC_Init+0x1ec>)
 800fe14:	781b      	ldrb	r3, [r3, #0]
 800fe16:	f003 020f 	and.w	r2, r3, #15
 800fe1a:	6879      	ldr	r1, [r7, #4]
 800fe1c:	4613      	mov	r3, r2
 800fe1e:	009b      	lsls	r3, r3, #2
 800fe20:	4413      	add	r3, r2
 800fe22:	009b      	lsls	r3, r3, #2
 800fe24:	440b      	add	r3, r1
 800fe26:	3326      	adds	r3, #38	@ 0x26
 800fe28:	2210      	movs	r2, #16
 800fe2a:	801a      	strh	r2, [r3, #0]
 800fe2c:	e035      	b.n	800fe9a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800fe2e:	4b42      	ldr	r3, [pc, #264]	@ (800ff38 <USBD_CDC_Init+0x1e4>)
 800fe30:	7819      	ldrb	r1, [r3, #0]
 800fe32:	2340      	movs	r3, #64	@ 0x40
 800fe34:	2202      	movs	r2, #2
 800fe36:	6878      	ldr	r0, [r7, #4]
 800fe38:	f002 fb67 	bl	801250a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800fe3c:	4b3e      	ldr	r3, [pc, #248]	@ (800ff38 <USBD_CDC_Init+0x1e4>)
 800fe3e:	781b      	ldrb	r3, [r3, #0]
 800fe40:	f003 020f 	and.w	r2, r3, #15
 800fe44:	6879      	ldr	r1, [r7, #4]
 800fe46:	4613      	mov	r3, r2
 800fe48:	009b      	lsls	r3, r3, #2
 800fe4a:	4413      	add	r3, r2
 800fe4c:	009b      	lsls	r3, r3, #2
 800fe4e:	440b      	add	r3, r1
 800fe50:	3324      	adds	r3, #36	@ 0x24
 800fe52:	2201      	movs	r2, #1
 800fe54:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800fe56:	4b39      	ldr	r3, [pc, #228]	@ (800ff3c <USBD_CDC_Init+0x1e8>)
 800fe58:	7819      	ldrb	r1, [r3, #0]
 800fe5a:	2340      	movs	r3, #64	@ 0x40
 800fe5c:	2202      	movs	r2, #2
 800fe5e:	6878      	ldr	r0, [r7, #4]
 800fe60:	f002 fb53 	bl	801250a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800fe64:	4b35      	ldr	r3, [pc, #212]	@ (800ff3c <USBD_CDC_Init+0x1e8>)
 800fe66:	781b      	ldrb	r3, [r3, #0]
 800fe68:	f003 020f 	and.w	r2, r3, #15
 800fe6c:	6879      	ldr	r1, [r7, #4]
 800fe6e:	4613      	mov	r3, r2
 800fe70:	009b      	lsls	r3, r3, #2
 800fe72:	4413      	add	r3, r2
 800fe74:	009b      	lsls	r3, r3, #2
 800fe76:	440b      	add	r3, r1
 800fe78:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800fe7c:	2201      	movs	r2, #1
 800fe7e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800fe80:	4b2f      	ldr	r3, [pc, #188]	@ (800ff40 <USBD_CDC_Init+0x1ec>)
 800fe82:	781b      	ldrb	r3, [r3, #0]
 800fe84:	f003 020f 	and.w	r2, r3, #15
 800fe88:	6879      	ldr	r1, [r7, #4]
 800fe8a:	4613      	mov	r3, r2
 800fe8c:	009b      	lsls	r3, r3, #2
 800fe8e:	4413      	add	r3, r2
 800fe90:	009b      	lsls	r3, r3, #2
 800fe92:	440b      	add	r3, r1
 800fe94:	3326      	adds	r3, #38	@ 0x26
 800fe96:	2210      	movs	r2, #16
 800fe98:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800fe9a:	4b29      	ldr	r3, [pc, #164]	@ (800ff40 <USBD_CDC_Init+0x1ec>)
 800fe9c:	7819      	ldrb	r1, [r3, #0]
 800fe9e:	2308      	movs	r3, #8
 800fea0:	2203      	movs	r2, #3
 800fea2:	6878      	ldr	r0, [r7, #4]
 800fea4:	f002 fb31 	bl	801250a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800fea8:	4b25      	ldr	r3, [pc, #148]	@ (800ff40 <USBD_CDC_Init+0x1ec>)
 800feaa:	781b      	ldrb	r3, [r3, #0]
 800feac:	f003 020f 	and.w	r2, r3, #15
 800feb0:	6879      	ldr	r1, [r7, #4]
 800feb2:	4613      	mov	r3, r2
 800feb4:	009b      	lsls	r3, r3, #2
 800feb6:	4413      	add	r3, r2
 800feb8:	009b      	lsls	r3, r3, #2
 800feba:	440b      	add	r3, r1
 800febc:	3324      	adds	r3, #36	@ 0x24
 800febe:	2201      	movs	r2, #1
 800fec0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800fec2:	68fb      	ldr	r3, [r7, #12]
 800fec4:	2200      	movs	r2, #0
 800fec6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800fed0:	687a      	ldr	r2, [r7, #4]
 800fed2:	33b0      	adds	r3, #176	@ 0xb0
 800fed4:	009b      	lsls	r3, r3, #2
 800fed6:	4413      	add	r3, r2
 800fed8:	685b      	ldr	r3, [r3, #4]
 800feda:	681b      	ldr	r3, [r3, #0]
 800fedc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800fede:	68fb      	ldr	r3, [r7, #12]
 800fee0:	2200      	movs	r2, #0
 800fee2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800fee6:	68fb      	ldr	r3, [r7, #12]
 800fee8:	2200      	movs	r2, #0
 800feea:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800feee:	68fb      	ldr	r3, [r7, #12]
 800fef0:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800fef4:	2b00      	cmp	r3, #0
 800fef6:	d101      	bne.n	800fefc <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800fef8:	2302      	movs	r3, #2
 800fefa:	e018      	b.n	800ff2e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	7c1b      	ldrb	r3, [r3, #16]
 800ff00:	2b00      	cmp	r3, #0
 800ff02:	d10a      	bne.n	800ff1a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ff04:	4b0d      	ldr	r3, [pc, #52]	@ (800ff3c <USBD_CDC_Init+0x1e8>)
 800ff06:	7819      	ldrb	r1, [r3, #0]
 800ff08:	68fb      	ldr	r3, [r7, #12]
 800ff0a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ff0e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ff12:	6878      	ldr	r0, [r7, #4]
 800ff14:	f002 fbe8 	bl	80126e8 <USBD_LL_PrepareReceive>
 800ff18:	e008      	b.n	800ff2c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ff1a:	4b08      	ldr	r3, [pc, #32]	@ (800ff3c <USBD_CDC_Init+0x1e8>)
 800ff1c:	7819      	ldrb	r1, [r3, #0]
 800ff1e:	68fb      	ldr	r3, [r7, #12]
 800ff20:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ff24:	2340      	movs	r3, #64	@ 0x40
 800ff26:	6878      	ldr	r0, [r7, #4]
 800ff28:	f002 fbde 	bl	80126e8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ff2c:	2300      	movs	r3, #0
}
 800ff2e:	4618      	mov	r0, r3
 800ff30:	3710      	adds	r7, #16
 800ff32:	46bd      	mov	sp, r7
 800ff34:	bd80      	pop	{r7, pc}
 800ff36:	bf00      	nop
 800ff38:	24000097 	.word	0x24000097
 800ff3c:	24000098 	.word	0x24000098
 800ff40:	24000099 	.word	0x24000099

0800ff44 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ff44:	b580      	push	{r7, lr}
 800ff46:	b082      	sub	sp, #8
 800ff48:	af00      	add	r7, sp, #0
 800ff4a:	6078      	str	r0, [r7, #4]
 800ff4c:	460b      	mov	r3, r1
 800ff4e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800ff50:	4b3a      	ldr	r3, [pc, #232]	@ (801003c <USBD_CDC_DeInit+0xf8>)
 800ff52:	781b      	ldrb	r3, [r3, #0]
 800ff54:	4619      	mov	r1, r3
 800ff56:	6878      	ldr	r0, [r7, #4]
 800ff58:	f002 fafd 	bl	8012556 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800ff5c:	4b37      	ldr	r3, [pc, #220]	@ (801003c <USBD_CDC_DeInit+0xf8>)
 800ff5e:	781b      	ldrb	r3, [r3, #0]
 800ff60:	f003 020f 	and.w	r2, r3, #15
 800ff64:	6879      	ldr	r1, [r7, #4]
 800ff66:	4613      	mov	r3, r2
 800ff68:	009b      	lsls	r3, r3, #2
 800ff6a:	4413      	add	r3, r2
 800ff6c:	009b      	lsls	r3, r3, #2
 800ff6e:	440b      	add	r3, r1
 800ff70:	3324      	adds	r3, #36	@ 0x24
 800ff72:	2200      	movs	r2, #0
 800ff74:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800ff76:	4b32      	ldr	r3, [pc, #200]	@ (8010040 <USBD_CDC_DeInit+0xfc>)
 800ff78:	781b      	ldrb	r3, [r3, #0]
 800ff7a:	4619      	mov	r1, r3
 800ff7c:	6878      	ldr	r0, [r7, #4]
 800ff7e:	f002 faea 	bl	8012556 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800ff82:	4b2f      	ldr	r3, [pc, #188]	@ (8010040 <USBD_CDC_DeInit+0xfc>)
 800ff84:	781b      	ldrb	r3, [r3, #0]
 800ff86:	f003 020f 	and.w	r2, r3, #15
 800ff8a:	6879      	ldr	r1, [r7, #4]
 800ff8c:	4613      	mov	r3, r2
 800ff8e:	009b      	lsls	r3, r3, #2
 800ff90:	4413      	add	r3, r2
 800ff92:	009b      	lsls	r3, r3, #2
 800ff94:	440b      	add	r3, r1
 800ff96:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ff9a:	2200      	movs	r2, #0
 800ff9c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800ff9e:	4b29      	ldr	r3, [pc, #164]	@ (8010044 <USBD_CDC_DeInit+0x100>)
 800ffa0:	781b      	ldrb	r3, [r3, #0]
 800ffa2:	4619      	mov	r1, r3
 800ffa4:	6878      	ldr	r0, [r7, #4]
 800ffa6:	f002 fad6 	bl	8012556 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800ffaa:	4b26      	ldr	r3, [pc, #152]	@ (8010044 <USBD_CDC_DeInit+0x100>)
 800ffac:	781b      	ldrb	r3, [r3, #0]
 800ffae:	f003 020f 	and.w	r2, r3, #15
 800ffb2:	6879      	ldr	r1, [r7, #4]
 800ffb4:	4613      	mov	r3, r2
 800ffb6:	009b      	lsls	r3, r3, #2
 800ffb8:	4413      	add	r3, r2
 800ffba:	009b      	lsls	r3, r3, #2
 800ffbc:	440b      	add	r3, r1
 800ffbe:	3324      	adds	r3, #36	@ 0x24
 800ffc0:	2200      	movs	r2, #0
 800ffc2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800ffc4:	4b1f      	ldr	r3, [pc, #124]	@ (8010044 <USBD_CDC_DeInit+0x100>)
 800ffc6:	781b      	ldrb	r3, [r3, #0]
 800ffc8:	f003 020f 	and.w	r2, r3, #15
 800ffcc:	6879      	ldr	r1, [r7, #4]
 800ffce:	4613      	mov	r3, r2
 800ffd0:	009b      	lsls	r3, r3, #2
 800ffd2:	4413      	add	r3, r2
 800ffd4:	009b      	lsls	r3, r3, #2
 800ffd6:	440b      	add	r3, r1
 800ffd8:	3326      	adds	r3, #38	@ 0x26
 800ffda:	2200      	movs	r2, #0
 800ffdc:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	32b0      	adds	r2, #176	@ 0xb0
 800ffe8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ffec:	2b00      	cmp	r3, #0
 800ffee:	d01f      	beq.n	8010030 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800fff6:	687a      	ldr	r2, [r7, #4]
 800fff8:	33b0      	adds	r3, #176	@ 0xb0
 800fffa:	009b      	lsls	r3, r3, #2
 800fffc:	4413      	add	r3, r2
 800fffe:	685b      	ldr	r3, [r3, #4]
 8010000:	685b      	ldr	r3, [r3, #4]
 8010002:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	32b0      	adds	r2, #176	@ 0xb0
 801000e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010012:	4618      	mov	r0, r3
 8010014:	f002 fbaa 	bl	801276c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	32b0      	adds	r2, #176	@ 0xb0
 8010022:	2100      	movs	r1, #0
 8010024:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	2200      	movs	r2, #0
 801002c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8010030:	2300      	movs	r3, #0
}
 8010032:	4618      	mov	r0, r3
 8010034:	3708      	adds	r7, #8
 8010036:	46bd      	mov	sp, r7
 8010038:	bd80      	pop	{r7, pc}
 801003a:	bf00      	nop
 801003c:	24000097 	.word	0x24000097
 8010040:	24000098 	.word	0x24000098
 8010044:	24000099 	.word	0x24000099

08010048 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8010048:	b580      	push	{r7, lr}
 801004a:	b086      	sub	sp, #24
 801004c:	af00      	add	r7, sp, #0
 801004e:	6078      	str	r0, [r7, #4]
 8010050:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	32b0      	adds	r2, #176	@ 0xb0
 801005c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010060:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8010062:	2300      	movs	r3, #0
 8010064:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8010066:	2300      	movs	r3, #0
 8010068:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 801006a:	2300      	movs	r3, #0
 801006c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 801006e:	693b      	ldr	r3, [r7, #16]
 8010070:	2b00      	cmp	r3, #0
 8010072:	d101      	bne.n	8010078 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8010074:	2303      	movs	r3, #3
 8010076:	e0bf      	b.n	80101f8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010078:	683b      	ldr	r3, [r7, #0]
 801007a:	781b      	ldrb	r3, [r3, #0]
 801007c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8010080:	2b00      	cmp	r3, #0
 8010082:	d050      	beq.n	8010126 <USBD_CDC_Setup+0xde>
 8010084:	2b20      	cmp	r3, #32
 8010086:	f040 80af 	bne.w	80101e8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 801008a:	683b      	ldr	r3, [r7, #0]
 801008c:	88db      	ldrh	r3, [r3, #6]
 801008e:	2b00      	cmp	r3, #0
 8010090:	d03a      	beq.n	8010108 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8010092:	683b      	ldr	r3, [r7, #0]
 8010094:	781b      	ldrb	r3, [r3, #0]
 8010096:	b25b      	sxtb	r3, r3
 8010098:	2b00      	cmp	r3, #0
 801009a:	da1b      	bge.n	80100d4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80100a2:	687a      	ldr	r2, [r7, #4]
 80100a4:	33b0      	adds	r3, #176	@ 0xb0
 80100a6:	009b      	lsls	r3, r3, #2
 80100a8:	4413      	add	r3, r2
 80100aa:	685b      	ldr	r3, [r3, #4]
 80100ac:	689b      	ldr	r3, [r3, #8]
 80100ae:	683a      	ldr	r2, [r7, #0]
 80100b0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80100b2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80100b4:	683a      	ldr	r2, [r7, #0]
 80100b6:	88d2      	ldrh	r2, [r2, #6]
 80100b8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80100ba:	683b      	ldr	r3, [r7, #0]
 80100bc:	88db      	ldrh	r3, [r3, #6]
 80100be:	2b07      	cmp	r3, #7
 80100c0:	bf28      	it	cs
 80100c2:	2307      	movcs	r3, #7
 80100c4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80100c6:	693b      	ldr	r3, [r7, #16]
 80100c8:	89fa      	ldrh	r2, [r7, #14]
 80100ca:	4619      	mov	r1, r3
 80100cc:	6878      	ldr	r0, [r7, #4]
 80100ce:	f001 fdbd 	bl	8011c4c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80100d2:	e090      	b.n	80101f6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80100d4:	683b      	ldr	r3, [r7, #0]
 80100d6:	785a      	ldrb	r2, [r3, #1]
 80100d8:	693b      	ldr	r3, [r7, #16]
 80100da:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80100de:	683b      	ldr	r3, [r7, #0]
 80100e0:	88db      	ldrh	r3, [r3, #6]
 80100e2:	2b3f      	cmp	r3, #63	@ 0x3f
 80100e4:	d803      	bhi.n	80100ee <USBD_CDC_Setup+0xa6>
 80100e6:	683b      	ldr	r3, [r7, #0]
 80100e8:	88db      	ldrh	r3, [r3, #6]
 80100ea:	b2da      	uxtb	r2, r3
 80100ec:	e000      	b.n	80100f0 <USBD_CDC_Setup+0xa8>
 80100ee:	2240      	movs	r2, #64	@ 0x40
 80100f0:	693b      	ldr	r3, [r7, #16]
 80100f2:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80100f6:	6939      	ldr	r1, [r7, #16]
 80100f8:	693b      	ldr	r3, [r7, #16]
 80100fa:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80100fe:	461a      	mov	r2, r3
 8010100:	6878      	ldr	r0, [r7, #4]
 8010102:	f001 fdcf 	bl	8011ca4 <USBD_CtlPrepareRx>
      break;
 8010106:	e076      	b.n	80101f6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801010e:	687a      	ldr	r2, [r7, #4]
 8010110:	33b0      	adds	r3, #176	@ 0xb0
 8010112:	009b      	lsls	r3, r3, #2
 8010114:	4413      	add	r3, r2
 8010116:	685b      	ldr	r3, [r3, #4]
 8010118:	689b      	ldr	r3, [r3, #8]
 801011a:	683a      	ldr	r2, [r7, #0]
 801011c:	7850      	ldrb	r0, [r2, #1]
 801011e:	2200      	movs	r2, #0
 8010120:	6839      	ldr	r1, [r7, #0]
 8010122:	4798      	blx	r3
      break;
 8010124:	e067      	b.n	80101f6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8010126:	683b      	ldr	r3, [r7, #0]
 8010128:	785b      	ldrb	r3, [r3, #1]
 801012a:	2b0b      	cmp	r3, #11
 801012c:	d851      	bhi.n	80101d2 <USBD_CDC_Setup+0x18a>
 801012e:	a201      	add	r2, pc, #4	@ (adr r2, 8010134 <USBD_CDC_Setup+0xec>)
 8010130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010134:	08010165 	.word	0x08010165
 8010138:	080101e1 	.word	0x080101e1
 801013c:	080101d3 	.word	0x080101d3
 8010140:	080101d3 	.word	0x080101d3
 8010144:	080101d3 	.word	0x080101d3
 8010148:	080101d3 	.word	0x080101d3
 801014c:	080101d3 	.word	0x080101d3
 8010150:	080101d3 	.word	0x080101d3
 8010154:	080101d3 	.word	0x080101d3
 8010158:	080101d3 	.word	0x080101d3
 801015c:	0801018f 	.word	0x0801018f
 8010160:	080101b9 	.word	0x080101b9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801016a:	b2db      	uxtb	r3, r3
 801016c:	2b03      	cmp	r3, #3
 801016e:	d107      	bne.n	8010180 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8010170:	f107 030a 	add.w	r3, r7, #10
 8010174:	2202      	movs	r2, #2
 8010176:	4619      	mov	r1, r3
 8010178:	6878      	ldr	r0, [r7, #4]
 801017a:	f001 fd67 	bl	8011c4c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801017e:	e032      	b.n	80101e6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8010180:	6839      	ldr	r1, [r7, #0]
 8010182:	6878      	ldr	r0, [r7, #4]
 8010184:	f001 fce5 	bl	8011b52 <USBD_CtlError>
            ret = USBD_FAIL;
 8010188:	2303      	movs	r3, #3
 801018a:	75fb      	strb	r3, [r7, #23]
          break;
 801018c:	e02b      	b.n	80101e6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010194:	b2db      	uxtb	r3, r3
 8010196:	2b03      	cmp	r3, #3
 8010198:	d107      	bne.n	80101aa <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 801019a:	f107 030d 	add.w	r3, r7, #13
 801019e:	2201      	movs	r2, #1
 80101a0:	4619      	mov	r1, r3
 80101a2:	6878      	ldr	r0, [r7, #4]
 80101a4:	f001 fd52 	bl	8011c4c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80101a8:	e01d      	b.n	80101e6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80101aa:	6839      	ldr	r1, [r7, #0]
 80101ac:	6878      	ldr	r0, [r7, #4]
 80101ae:	f001 fcd0 	bl	8011b52 <USBD_CtlError>
            ret = USBD_FAIL;
 80101b2:	2303      	movs	r3, #3
 80101b4:	75fb      	strb	r3, [r7, #23]
          break;
 80101b6:	e016      	b.n	80101e6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80101be:	b2db      	uxtb	r3, r3
 80101c0:	2b03      	cmp	r3, #3
 80101c2:	d00f      	beq.n	80101e4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80101c4:	6839      	ldr	r1, [r7, #0]
 80101c6:	6878      	ldr	r0, [r7, #4]
 80101c8:	f001 fcc3 	bl	8011b52 <USBD_CtlError>
            ret = USBD_FAIL;
 80101cc:	2303      	movs	r3, #3
 80101ce:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80101d0:	e008      	b.n	80101e4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80101d2:	6839      	ldr	r1, [r7, #0]
 80101d4:	6878      	ldr	r0, [r7, #4]
 80101d6:	f001 fcbc 	bl	8011b52 <USBD_CtlError>
          ret = USBD_FAIL;
 80101da:	2303      	movs	r3, #3
 80101dc:	75fb      	strb	r3, [r7, #23]
          break;
 80101de:	e002      	b.n	80101e6 <USBD_CDC_Setup+0x19e>
          break;
 80101e0:	bf00      	nop
 80101e2:	e008      	b.n	80101f6 <USBD_CDC_Setup+0x1ae>
          break;
 80101e4:	bf00      	nop
      }
      break;
 80101e6:	e006      	b.n	80101f6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80101e8:	6839      	ldr	r1, [r7, #0]
 80101ea:	6878      	ldr	r0, [r7, #4]
 80101ec:	f001 fcb1 	bl	8011b52 <USBD_CtlError>
      ret = USBD_FAIL;
 80101f0:	2303      	movs	r3, #3
 80101f2:	75fb      	strb	r3, [r7, #23]
      break;
 80101f4:	bf00      	nop
  }

  return (uint8_t)ret;
 80101f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80101f8:	4618      	mov	r0, r3
 80101fa:	3718      	adds	r7, #24
 80101fc:	46bd      	mov	sp, r7
 80101fe:	bd80      	pop	{r7, pc}

08010200 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010200:	b580      	push	{r7, lr}
 8010202:	b084      	sub	sp, #16
 8010204:	af00      	add	r7, sp, #0
 8010206:	6078      	str	r0, [r7, #4]
 8010208:	460b      	mov	r3, r1
 801020a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010212:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	32b0      	adds	r2, #176	@ 0xb0
 801021e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010222:	2b00      	cmp	r3, #0
 8010224:	d101      	bne.n	801022a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8010226:	2303      	movs	r3, #3
 8010228:	e065      	b.n	80102f6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	32b0      	adds	r2, #176	@ 0xb0
 8010234:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010238:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 801023a:	78fb      	ldrb	r3, [r7, #3]
 801023c:	f003 020f 	and.w	r2, r3, #15
 8010240:	6879      	ldr	r1, [r7, #4]
 8010242:	4613      	mov	r3, r2
 8010244:	009b      	lsls	r3, r3, #2
 8010246:	4413      	add	r3, r2
 8010248:	009b      	lsls	r3, r3, #2
 801024a:	440b      	add	r3, r1
 801024c:	3318      	adds	r3, #24
 801024e:	681b      	ldr	r3, [r3, #0]
 8010250:	2b00      	cmp	r3, #0
 8010252:	d02f      	beq.n	80102b4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8010254:	78fb      	ldrb	r3, [r7, #3]
 8010256:	f003 020f 	and.w	r2, r3, #15
 801025a:	6879      	ldr	r1, [r7, #4]
 801025c:	4613      	mov	r3, r2
 801025e:	009b      	lsls	r3, r3, #2
 8010260:	4413      	add	r3, r2
 8010262:	009b      	lsls	r3, r3, #2
 8010264:	440b      	add	r3, r1
 8010266:	3318      	adds	r3, #24
 8010268:	681a      	ldr	r2, [r3, #0]
 801026a:	78fb      	ldrb	r3, [r7, #3]
 801026c:	f003 010f 	and.w	r1, r3, #15
 8010270:	68f8      	ldr	r0, [r7, #12]
 8010272:	460b      	mov	r3, r1
 8010274:	00db      	lsls	r3, r3, #3
 8010276:	440b      	add	r3, r1
 8010278:	009b      	lsls	r3, r3, #2
 801027a:	4403      	add	r3, r0
 801027c:	331c      	adds	r3, #28
 801027e:	681b      	ldr	r3, [r3, #0]
 8010280:	fbb2 f1f3 	udiv	r1, r2, r3
 8010284:	fb01 f303 	mul.w	r3, r1, r3
 8010288:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 801028a:	2b00      	cmp	r3, #0
 801028c:	d112      	bne.n	80102b4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 801028e:	78fb      	ldrb	r3, [r7, #3]
 8010290:	f003 020f 	and.w	r2, r3, #15
 8010294:	6879      	ldr	r1, [r7, #4]
 8010296:	4613      	mov	r3, r2
 8010298:	009b      	lsls	r3, r3, #2
 801029a:	4413      	add	r3, r2
 801029c:	009b      	lsls	r3, r3, #2
 801029e:	440b      	add	r3, r1
 80102a0:	3318      	adds	r3, #24
 80102a2:	2200      	movs	r2, #0
 80102a4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80102a6:	78f9      	ldrb	r1, [r7, #3]
 80102a8:	2300      	movs	r3, #0
 80102aa:	2200      	movs	r2, #0
 80102ac:	6878      	ldr	r0, [r7, #4]
 80102ae:	f002 f9fa 	bl	80126a6 <USBD_LL_Transmit>
 80102b2:	e01f      	b.n	80102f4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80102b4:	68bb      	ldr	r3, [r7, #8]
 80102b6:	2200      	movs	r2, #0
 80102b8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80102c2:	687a      	ldr	r2, [r7, #4]
 80102c4:	33b0      	adds	r3, #176	@ 0xb0
 80102c6:	009b      	lsls	r3, r3, #2
 80102c8:	4413      	add	r3, r2
 80102ca:	685b      	ldr	r3, [r3, #4]
 80102cc:	691b      	ldr	r3, [r3, #16]
 80102ce:	2b00      	cmp	r3, #0
 80102d0:	d010      	beq.n	80102f4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80102d8:	687a      	ldr	r2, [r7, #4]
 80102da:	33b0      	adds	r3, #176	@ 0xb0
 80102dc:	009b      	lsls	r3, r3, #2
 80102de:	4413      	add	r3, r2
 80102e0:	685b      	ldr	r3, [r3, #4]
 80102e2:	691b      	ldr	r3, [r3, #16]
 80102e4:	68ba      	ldr	r2, [r7, #8]
 80102e6:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80102ea:	68ba      	ldr	r2, [r7, #8]
 80102ec:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80102f0:	78fa      	ldrb	r2, [r7, #3]
 80102f2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80102f4:	2300      	movs	r3, #0
}
 80102f6:	4618      	mov	r0, r3
 80102f8:	3710      	adds	r7, #16
 80102fa:	46bd      	mov	sp, r7
 80102fc:	bd80      	pop	{r7, pc}

080102fe <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80102fe:	b580      	push	{r7, lr}
 8010300:	b084      	sub	sp, #16
 8010302:	af00      	add	r7, sp, #0
 8010304:	6078      	str	r0, [r7, #4]
 8010306:	460b      	mov	r3, r1
 8010308:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	32b0      	adds	r2, #176	@ 0xb0
 8010314:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010318:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	32b0      	adds	r2, #176	@ 0xb0
 8010324:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010328:	2b00      	cmp	r3, #0
 801032a:	d101      	bne.n	8010330 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 801032c:	2303      	movs	r3, #3
 801032e:	e01a      	b.n	8010366 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8010330:	78fb      	ldrb	r3, [r7, #3]
 8010332:	4619      	mov	r1, r3
 8010334:	6878      	ldr	r0, [r7, #4]
 8010336:	f002 f9f8 	bl	801272a <USBD_LL_GetRxDataSize>
 801033a:	4602      	mov	r2, r0
 801033c:	68fb      	ldr	r3, [r7, #12]
 801033e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010348:	687a      	ldr	r2, [r7, #4]
 801034a:	33b0      	adds	r3, #176	@ 0xb0
 801034c:	009b      	lsls	r3, r3, #2
 801034e:	4413      	add	r3, r2
 8010350:	685b      	ldr	r3, [r3, #4]
 8010352:	68db      	ldr	r3, [r3, #12]
 8010354:	68fa      	ldr	r2, [r7, #12]
 8010356:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 801035a:	68fa      	ldr	r2, [r7, #12]
 801035c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8010360:	4611      	mov	r1, r2
 8010362:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8010364:	2300      	movs	r3, #0
}
 8010366:	4618      	mov	r0, r3
 8010368:	3710      	adds	r7, #16
 801036a:	46bd      	mov	sp, r7
 801036c:	bd80      	pop	{r7, pc}

0801036e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 801036e:	b580      	push	{r7, lr}
 8010370:	b084      	sub	sp, #16
 8010372:	af00      	add	r7, sp, #0
 8010374:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010376:	687b      	ldr	r3, [r7, #4]
 8010378:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	32b0      	adds	r2, #176	@ 0xb0
 8010380:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010384:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8010386:	68fb      	ldr	r3, [r7, #12]
 8010388:	2b00      	cmp	r3, #0
 801038a:	d101      	bne.n	8010390 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 801038c:	2303      	movs	r3, #3
 801038e:	e024      	b.n	80103da <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010396:	687a      	ldr	r2, [r7, #4]
 8010398:	33b0      	adds	r3, #176	@ 0xb0
 801039a:	009b      	lsls	r3, r3, #2
 801039c:	4413      	add	r3, r2
 801039e:	685b      	ldr	r3, [r3, #4]
 80103a0:	2b00      	cmp	r3, #0
 80103a2:	d019      	beq.n	80103d8 <USBD_CDC_EP0_RxReady+0x6a>
 80103a4:	68fb      	ldr	r3, [r7, #12]
 80103a6:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80103aa:	2bff      	cmp	r3, #255	@ 0xff
 80103ac:	d014      	beq.n	80103d8 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80103b4:	687a      	ldr	r2, [r7, #4]
 80103b6:	33b0      	adds	r3, #176	@ 0xb0
 80103b8:	009b      	lsls	r3, r3, #2
 80103ba:	4413      	add	r3, r2
 80103bc:	685b      	ldr	r3, [r3, #4]
 80103be:	689b      	ldr	r3, [r3, #8]
 80103c0:	68fa      	ldr	r2, [r7, #12]
 80103c2:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 80103c6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80103c8:	68fa      	ldr	r2, [r7, #12]
 80103ca:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80103ce:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80103d0:	68fb      	ldr	r3, [r7, #12]
 80103d2:	22ff      	movs	r2, #255	@ 0xff
 80103d4:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80103d8:	2300      	movs	r3, #0
}
 80103da:	4618      	mov	r0, r3
 80103dc:	3710      	adds	r7, #16
 80103de:	46bd      	mov	sp, r7
 80103e0:	bd80      	pop	{r7, pc}
	...

080103e4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80103e4:	b580      	push	{r7, lr}
 80103e6:	b086      	sub	sp, #24
 80103e8:	af00      	add	r7, sp, #0
 80103ea:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80103ec:	2182      	movs	r1, #130	@ 0x82
 80103ee:	4818      	ldr	r0, [pc, #96]	@ (8010450 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80103f0:	f000 fd4f 	bl	8010e92 <USBD_GetEpDesc>
 80103f4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80103f6:	2101      	movs	r1, #1
 80103f8:	4815      	ldr	r0, [pc, #84]	@ (8010450 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80103fa:	f000 fd4a 	bl	8010e92 <USBD_GetEpDesc>
 80103fe:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8010400:	2181      	movs	r1, #129	@ 0x81
 8010402:	4813      	ldr	r0, [pc, #76]	@ (8010450 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8010404:	f000 fd45 	bl	8010e92 <USBD_GetEpDesc>
 8010408:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801040a:	697b      	ldr	r3, [r7, #20]
 801040c:	2b00      	cmp	r3, #0
 801040e:	d002      	beq.n	8010416 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8010410:	697b      	ldr	r3, [r7, #20]
 8010412:	2210      	movs	r2, #16
 8010414:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8010416:	693b      	ldr	r3, [r7, #16]
 8010418:	2b00      	cmp	r3, #0
 801041a:	d006      	beq.n	801042a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 801041c:	693b      	ldr	r3, [r7, #16]
 801041e:	2200      	movs	r2, #0
 8010420:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8010424:	711a      	strb	r2, [r3, #4]
 8010426:	2200      	movs	r2, #0
 8010428:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801042a:	68fb      	ldr	r3, [r7, #12]
 801042c:	2b00      	cmp	r3, #0
 801042e:	d006      	beq.n	801043e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8010430:	68fb      	ldr	r3, [r7, #12]
 8010432:	2200      	movs	r2, #0
 8010434:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8010438:	711a      	strb	r2, [r3, #4]
 801043a:	2200      	movs	r2, #0
 801043c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	2243      	movs	r2, #67	@ 0x43
 8010442:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8010444:	4b02      	ldr	r3, [pc, #8]	@ (8010450 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8010446:	4618      	mov	r0, r3
 8010448:	3718      	adds	r7, #24
 801044a:	46bd      	mov	sp, r7
 801044c:	bd80      	pop	{r7, pc}
 801044e:	bf00      	nop
 8010450:	24000054 	.word	0x24000054

08010454 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8010454:	b580      	push	{r7, lr}
 8010456:	b086      	sub	sp, #24
 8010458:	af00      	add	r7, sp, #0
 801045a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 801045c:	2182      	movs	r1, #130	@ 0x82
 801045e:	4818      	ldr	r0, [pc, #96]	@ (80104c0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8010460:	f000 fd17 	bl	8010e92 <USBD_GetEpDesc>
 8010464:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8010466:	2101      	movs	r1, #1
 8010468:	4815      	ldr	r0, [pc, #84]	@ (80104c0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 801046a:	f000 fd12 	bl	8010e92 <USBD_GetEpDesc>
 801046e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8010470:	2181      	movs	r1, #129	@ 0x81
 8010472:	4813      	ldr	r0, [pc, #76]	@ (80104c0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8010474:	f000 fd0d 	bl	8010e92 <USBD_GetEpDesc>
 8010478:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801047a:	697b      	ldr	r3, [r7, #20]
 801047c:	2b00      	cmp	r3, #0
 801047e:	d002      	beq.n	8010486 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8010480:	697b      	ldr	r3, [r7, #20]
 8010482:	2210      	movs	r2, #16
 8010484:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8010486:	693b      	ldr	r3, [r7, #16]
 8010488:	2b00      	cmp	r3, #0
 801048a:	d006      	beq.n	801049a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 801048c:	693b      	ldr	r3, [r7, #16]
 801048e:	2200      	movs	r2, #0
 8010490:	711a      	strb	r2, [r3, #4]
 8010492:	2200      	movs	r2, #0
 8010494:	f042 0202 	orr.w	r2, r2, #2
 8010498:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801049a:	68fb      	ldr	r3, [r7, #12]
 801049c:	2b00      	cmp	r3, #0
 801049e:	d006      	beq.n	80104ae <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80104a0:	68fb      	ldr	r3, [r7, #12]
 80104a2:	2200      	movs	r2, #0
 80104a4:	711a      	strb	r2, [r3, #4]
 80104a6:	2200      	movs	r2, #0
 80104a8:	f042 0202 	orr.w	r2, r2, #2
 80104ac:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	2243      	movs	r2, #67	@ 0x43
 80104b2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80104b4:	4b02      	ldr	r3, [pc, #8]	@ (80104c0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80104b6:	4618      	mov	r0, r3
 80104b8:	3718      	adds	r7, #24
 80104ba:	46bd      	mov	sp, r7
 80104bc:	bd80      	pop	{r7, pc}
 80104be:	bf00      	nop
 80104c0:	24000054 	.word	0x24000054

080104c4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80104c4:	b580      	push	{r7, lr}
 80104c6:	b086      	sub	sp, #24
 80104c8:	af00      	add	r7, sp, #0
 80104ca:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80104cc:	2182      	movs	r1, #130	@ 0x82
 80104ce:	4818      	ldr	r0, [pc, #96]	@ (8010530 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80104d0:	f000 fcdf 	bl	8010e92 <USBD_GetEpDesc>
 80104d4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80104d6:	2101      	movs	r1, #1
 80104d8:	4815      	ldr	r0, [pc, #84]	@ (8010530 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80104da:	f000 fcda 	bl	8010e92 <USBD_GetEpDesc>
 80104de:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80104e0:	2181      	movs	r1, #129	@ 0x81
 80104e2:	4813      	ldr	r0, [pc, #76]	@ (8010530 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80104e4:	f000 fcd5 	bl	8010e92 <USBD_GetEpDesc>
 80104e8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80104ea:	697b      	ldr	r3, [r7, #20]
 80104ec:	2b00      	cmp	r3, #0
 80104ee:	d002      	beq.n	80104f6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80104f0:	697b      	ldr	r3, [r7, #20]
 80104f2:	2210      	movs	r2, #16
 80104f4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80104f6:	693b      	ldr	r3, [r7, #16]
 80104f8:	2b00      	cmp	r3, #0
 80104fa:	d006      	beq.n	801050a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80104fc:	693b      	ldr	r3, [r7, #16]
 80104fe:	2200      	movs	r2, #0
 8010500:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8010504:	711a      	strb	r2, [r3, #4]
 8010506:	2200      	movs	r2, #0
 8010508:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801050a:	68fb      	ldr	r3, [r7, #12]
 801050c:	2b00      	cmp	r3, #0
 801050e:	d006      	beq.n	801051e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8010510:	68fb      	ldr	r3, [r7, #12]
 8010512:	2200      	movs	r2, #0
 8010514:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8010518:	711a      	strb	r2, [r3, #4]
 801051a:	2200      	movs	r2, #0
 801051c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	2243      	movs	r2, #67	@ 0x43
 8010522:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8010524:	4b02      	ldr	r3, [pc, #8]	@ (8010530 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8010526:	4618      	mov	r0, r3
 8010528:	3718      	adds	r7, #24
 801052a:	46bd      	mov	sp, r7
 801052c:	bd80      	pop	{r7, pc}
 801052e:	bf00      	nop
 8010530:	24000054 	.word	0x24000054

08010534 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8010534:	b480      	push	{r7}
 8010536:	b083      	sub	sp, #12
 8010538:	af00      	add	r7, sp, #0
 801053a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	220a      	movs	r2, #10
 8010540:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8010542:	4b03      	ldr	r3, [pc, #12]	@ (8010550 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8010544:	4618      	mov	r0, r3
 8010546:	370c      	adds	r7, #12
 8010548:	46bd      	mov	sp, r7
 801054a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801054e:	4770      	bx	lr
 8010550:	24000010 	.word	0x24000010

08010554 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8010554:	b480      	push	{r7}
 8010556:	b083      	sub	sp, #12
 8010558:	af00      	add	r7, sp, #0
 801055a:	6078      	str	r0, [r7, #4]
 801055c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 801055e:	683b      	ldr	r3, [r7, #0]
 8010560:	2b00      	cmp	r3, #0
 8010562:	d101      	bne.n	8010568 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8010564:	2303      	movs	r3, #3
 8010566:	e009      	b.n	801057c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801056e:	687a      	ldr	r2, [r7, #4]
 8010570:	33b0      	adds	r3, #176	@ 0xb0
 8010572:	009b      	lsls	r3, r3, #2
 8010574:	4413      	add	r3, r2
 8010576:	683a      	ldr	r2, [r7, #0]
 8010578:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 801057a:	2300      	movs	r3, #0
}
 801057c:	4618      	mov	r0, r3
 801057e:	370c      	adds	r7, #12
 8010580:	46bd      	mov	sp, r7
 8010582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010586:	4770      	bx	lr

08010588 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8010588:	b480      	push	{r7}
 801058a:	b087      	sub	sp, #28
 801058c:	af00      	add	r7, sp, #0
 801058e:	60f8      	str	r0, [r7, #12]
 8010590:	60b9      	str	r1, [r7, #8]
 8010592:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010594:	68fb      	ldr	r3, [r7, #12]
 8010596:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801059a:	68fb      	ldr	r3, [r7, #12]
 801059c:	32b0      	adds	r2, #176	@ 0xb0
 801059e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80105a2:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80105a4:	697b      	ldr	r3, [r7, #20]
 80105a6:	2b00      	cmp	r3, #0
 80105a8:	d101      	bne.n	80105ae <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80105aa:	2303      	movs	r3, #3
 80105ac:	e008      	b.n	80105c0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80105ae:	697b      	ldr	r3, [r7, #20]
 80105b0:	68ba      	ldr	r2, [r7, #8]
 80105b2:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80105b6:	697b      	ldr	r3, [r7, #20]
 80105b8:	687a      	ldr	r2, [r7, #4]
 80105ba:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80105be:	2300      	movs	r3, #0
}
 80105c0:	4618      	mov	r0, r3
 80105c2:	371c      	adds	r7, #28
 80105c4:	46bd      	mov	sp, r7
 80105c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105ca:	4770      	bx	lr

080105cc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80105cc:	b480      	push	{r7}
 80105ce:	b085      	sub	sp, #20
 80105d0:	af00      	add	r7, sp, #0
 80105d2:	6078      	str	r0, [r7, #4]
 80105d4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	32b0      	adds	r2, #176	@ 0xb0
 80105e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80105e4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80105e6:	68fb      	ldr	r3, [r7, #12]
 80105e8:	2b00      	cmp	r3, #0
 80105ea:	d101      	bne.n	80105f0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80105ec:	2303      	movs	r3, #3
 80105ee:	e004      	b.n	80105fa <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80105f0:	68fb      	ldr	r3, [r7, #12]
 80105f2:	683a      	ldr	r2, [r7, #0]
 80105f4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80105f8:	2300      	movs	r3, #0
}
 80105fa:	4618      	mov	r0, r3
 80105fc:	3714      	adds	r7, #20
 80105fe:	46bd      	mov	sp, r7
 8010600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010604:	4770      	bx	lr
	...

08010608 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8010608:	b580      	push	{r7, lr}
 801060a:	b084      	sub	sp, #16
 801060c:	af00      	add	r7, sp, #0
 801060e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	32b0      	adds	r2, #176	@ 0xb0
 801061a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801061e:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8010620:	2301      	movs	r3, #1
 8010622:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8010624:	68bb      	ldr	r3, [r7, #8]
 8010626:	2b00      	cmp	r3, #0
 8010628:	d101      	bne.n	801062e <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 801062a:	2303      	movs	r3, #3
 801062c:	e025      	b.n	801067a <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 801062e:	68bb      	ldr	r3, [r7, #8]
 8010630:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8010634:	2b00      	cmp	r3, #0
 8010636:	d11f      	bne.n	8010678 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8010638:	68bb      	ldr	r3, [r7, #8]
 801063a:	2201      	movs	r2, #1
 801063c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8010640:	4b10      	ldr	r3, [pc, #64]	@ (8010684 <USBD_CDC_TransmitPacket+0x7c>)
 8010642:	781b      	ldrb	r3, [r3, #0]
 8010644:	f003 020f 	and.w	r2, r3, #15
 8010648:	68bb      	ldr	r3, [r7, #8]
 801064a:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 801064e:	6878      	ldr	r0, [r7, #4]
 8010650:	4613      	mov	r3, r2
 8010652:	009b      	lsls	r3, r3, #2
 8010654:	4413      	add	r3, r2
 8010656:	009b      	lsls	r3, r3, #2
 8010658:	4403      	add	r3, r0
 801065a:	3318      	adds	r3, #24
 801065c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 801065e:	4b09      	ldr	r3, [pc, #36]	@ (8010684 <USBD_CDC_TransmitPacket+0x7c>)
 8010660:	7819      	ldrb	r1, [r3, #0]
 8010662:	68bb      	ldr	r3, [r7, #8]
 8010664:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8010668:	68bb      	ldr	r3, [r7, #8]
 801066a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 801066e:	6878      	ldr	r0, [r7, #4]
 8010670:	f002 f819 	bl	80126a6 <USBD_LL_Transmit>

    ret = USBD_OK;
 8010674:	2300      	movs	r3, #0
 8010676:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8010678:	7bfb      	ldrb	r3, [r7, #15]
}
 801067a:	4618      	mov	r0, r3
 801067c:	3710      	adds	r7, #16
 801067e:	46bd      	mov	sp, r7
 8010680:	bd80      	pop	{r7, pc}
 8010682:	bf00      	nop
 8010684:	24000097 	.word	0x24000097

08010688 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8010688:	b580      	push	{r7, lr}
 801068a:	b084      	sub	sp, #16
 801068c:	af00      	add	r7, sp, #0
 801068e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	32b0      	adds	r2, #176	@ 0xb0
 801069a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801069e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	32b0      	adds	r2, #176	@ 0xb0
 80106aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80106ae:	2b00      	cmp	r3, #0
 80106b0:	d101      	bne.n	80106b6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80106b2:	2303      	movs	r3, #3
 80106b4:	e018      	b.n	80106e8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	7c1b      	ldrb	r3, [r3, #16]
 80106ba:	2b00      	cmp	r3, #0
 80106bc:	d10a      	bne.n	80106d4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80106be:	4b0c      	ldr	r3, [pc, #48]	@ (80106f0 <USBD_CDC_ReceivePacket+0x68>)
 80106c0:	7819      	ldrb	r1, [r3, #0]
 80106c2:	68fb      	ldr	r3, [r7, #12]
 80106c4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80106c8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80106cc:	6878      	ldr	r0, [r7, #4]
 80106ce:	f002 f80b 	bl	80126e8 <USBD_LL_PrepareReceive>
 80106d2:	e008      	b.n	80106e6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80106d4:	4b06      	ldr	r3, [pc, #24]	@ (80106f0 <USBD_CDC_ReceivePacket+0x68>)
 80106d6:	7819      	ldrb	r1, [r3, #0]
 80106d8:	68fb      	ldr	r3, [r7, #12]
 80106da:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80106de:	2340      	movs	r3, #64	@ 0x40
 80106e0:	6878      	ldr	r0, [r7, #4]
 80106e2:	f002 f801 	bl	80126e8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80106e6:	2300      	movs	r3, #0
}
 80106e8:	4618      	mov	r0, r3
 80106ea:	3710      	adds	r7, #16
 80106ec:	46bd      	mov	sp, r7
 80106ee:	bd80      	pop	{r7, pc}
 80106f0:	24000098 	.word	0x24000098

080106f4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80106f4:	b580      	push	{r7, lr}
 80106f6:	b086      	sub	sp, #24
 80106f8:	af00      	add	r7, sp, #0
 80106fa:	60f8      	str	r0, [r7, #12]
 80106fc:	60b9      	str	r1, [r7, #8]
 80106fe:	4613      	mov	r3, r2
 8010700:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8010702:	68fb      	ldr	r3, [r7, #12]
 8010704:	2b00      	cmp	r3, #0
 8010706:	d101      	bne.n	801070c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8010708:	2303      	movs	r3, #3
 801070a:	e01f      	b.n	801074c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 801070c:	68fb      	ldr	r3, [r7, #12]
 801070e:	2200      	movs	r2, #0
 8010710:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8010714:	68fb      	ldr	r3, [r7, #12]
 8010716:	2200      	movs	r2, #0
 8010718:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 801071c:	68fb      	ldr	r3, [r7, #12]
 801071e:	2200      	movs	r2, #0
 8010720:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8010724:	68bb      	ldr	r3, [r7, #8]
 8010726:	2b00      	cmp	r3, #0
 8010728:	d003      	beq.n	8010732 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 801072a:	68fb      	ldr	r3, [r7, #12]
 801072c:	68ba      	ldr	r2, [r7, #8]
 801072e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010732:	68fb      	ldr	r3, [r7, #12]
 8010734:	2201      	movs	r2, #1
 8010736:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 801073a:	68fb      	ldr	r3, [r7, #12]
 801073c:	79fa      	ldrb	r2, [r7, #7]
 801073e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8010740:	68f8      	ldr	r0, [r7, #12]
 8010742:	f001 fe77 	bl	8012434 <USBD_LL_Init>
 8010746:	4603      	mov	r3, r0
 8010748:	75fb      	strb	r3, [r7, #23]

  return ret;
 801074a:	7dfb      	ldrb	r3, [r7, #23]
}
 801074c:	4618      	mov	r0, r3
 801074e:	3718      	adds	r7, #24
 8010750:	46bd      	mov	sp, r7
 8010752:	bd80      	pop	{r7, pc}

08010754 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8010754:	b580      	push	{r7, lr}
 8010756:	b084      	sub	sp, #16
 8010758:	af00      	add	r7, sp, #0
 801075a:	6078      	str	r0, [r7, #4]
 801075c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801075e:	2300      	movs	r3, #0
 8010760:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8010762:	683b      	ldr	r3, [r7, #0]
 8010764:	2b00      	cmp	r3, #0
 8010766:	d101      	bne.n	801076c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8010768:	2303      	movs	r3, #3
 801076a:	e025      	b.n	80107b8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	683a      	ldr	r2, [r7, #0]
 8010770:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801077a:	687b      	ldr	r3, [r7, #4]
 801077c:	32ae      	adds	r2, #174	@ 0xae
 801077e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010782:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010784:	2b00      	cmp	r3, #0
 8010786:	d00f      	beq.n	80107a8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	32ae      	adds	r2, #174	@ 0xae
 8010792:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010796:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010798:	f107 020e 	add.w	r2, r7, #14
 801079c:	4610      	mov	r0, r2
 801079e:	4798      	blx	r3
 80107a0:	4602      	mov	r2, r0
 80107a2:	687b      	ldr	r3, [r7, #4]
 80107a4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80107ae:	1c5a      	adds	r2, r3, #1
 80107b0:	687b      	ldr	r3, [r7, #4]
 80107b2:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80107b6:	2300      	movs	r3, #0
}
 80107b8:	4618      	mov	r0, r3
 80107ba:	3710      	adds	r7, #16
 80107bc:	46bd      	mov	sp, r7
 80107be:	bd80      	pop	{r7, pc}

080107c0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80107c0:	b580      	push	{r7, lr}
 80107c2:	b082      	sub	sp, #8
 80107c4:	af00      	add	r7, sp, #0
 80107c6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80107c8:	6878      	ldr	r0, [r7, #4]
 80107ca:	f001 fe83 	bl	80124d4 <USBD_LL_Start>
 80107ce:	4603      	mov	r3, r0
}
 80107d0:	4618      	mov	r0, r3
 80107d2:	3708      	adds	r7, #8
 80107d4:	46bd      	mov	sp, r7
 80107d6:	bd80      	pop	{r7, pc}

080107d8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80107d8:	b480      	push	{r7}
 80107da:	b083      	sub	sp, #12
 80107dc:	af00      	add	r7, sp, #0
 80107de:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80107e0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80107e2:	4618      	mov	r0, r3
 80107e4:	370c      	adds	r7, #12
 80107e6:	46bd      	mov	sp, r7
 80107e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107ec:	4770      	bx	lr

080107ee <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80107ee:	b580      	push	{r7, lr}
 80107f0:	b084      	sub	sp, #16
 80107f2:	af00      	add	r7, sp, #0
 80107f4:	6078      	str	r0, [r7, #4]
 80107f6:	460b      	mov	r3, r1
 80107f8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80107fa:	2300      	movs	r3, #0
 80107fc:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010804:	2b00      	cmp	r3, #0
 8010806:	d009      	beq.n	801081c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801080e:	681b      	ldr	r3, [r3, #0]
 8010810:	78fa      	ldrb	r2, [r7, #3]
 8010812:	4611      	mov	r1, r2
 8010814:	6878      	ldr	r0, [r7, #4]
 8010816:	4798      	blx	r3
 8010818:	4603      	mov	r3, r0
 801081a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 801081c:	7bfb      	ldrb	r3, [r7, #15]
}
 801081e:	4618      	mov	r0, r3
 8010820:	3710      	adds	r7, #16
 8010822:	46bd      	mov	sp, r7
 8010824:	bd80      	pop	{r7, pc}

08010826 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010826:	b580      	push	{r7, lr}
 8010828:	b084      	sub	sp, #16
 801082a:	af00      	add	r7, sp, #0
 801082c:	6078      	str	r0, [r7, #4]
 801082e:	460b      	mov	r3, r1
 8010830:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8010832:	2300      	movs	r3, #0
 8010834:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801083c:	685b      	ldr	r3, [r3, #4]
 801083e:	78fa      	ldrb	r2, [r7, #3]
 8010840:	4611      	mov	r1, r2
 8010842:	6878      	ldr	r0, [r7, #4]
 8010844:	4798      	blx	r3
 8010846:	4603      	mov	r3, r0
 8010848:	2b00      	cmp	r3, #0
 801084a:	d001      	beq.n	8010850 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 801084c:	2303      	movs	r3, #3
 801084e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8010850:	7bfb      	ldrb	r3, [r7, #15]
}
 8010852:	4618      	mov	r0, r3
 8010854:	3710      	adds	r7, #16
 8010856:	46bd      	mov	sp, r7
 8010858:	bd80      	pop	{r7, pc}

0801085a <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801085a:	b580      	push	{r7, lr}
 801085c:	b084      	sub	sp, #16
 801085e:	af00      	add	r7, sp, #0
 8010860:	6078      	str	r0, [r7, #4]
 8010862:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 801086a:	6839      	ldr	r1, [r7, #0]
 801086c:	4618      	mov	r0, r3
 801086e:	f001 f936 	bl	8011ade <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	2201      	movs	r2, #1
 8010876:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8010880:	461a      	mov	r2, r3
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 801088e:	f003 031f 	and.w	r3, r3, #31
 8010892:	2b02      	cmp	r3, #2
 8010894:	d01a      	beq.n	80108cc <USBD_LL_SetupStage+0x72>
 8010896:	2b02      	cmp	r3, #2
 8010898:	d822      	bhi.n	80108e0 <USBD_LL_SetupStage+0x86>
 801089a:	2b00      	cmp	r3, #0
 801089c:	d002      	beq.n	80108a4 <USBD_LL_SetupStage+0x4a>
 801089e:	2b01      	cmp	r3, #1
 80108a0:	d00a      	beq.n	80108b8 <USBD_LL_SetupStage+0x5e>
 80108a2:	e01d      	b.n	80108e0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80108a4:	687b      	ldr	r3, [r7, #4]
 80108a6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80108aa:	4619      	mov	r1, r3
 80108ac:	6878      	ldr	r0, [r7, #4]
 80108ae:	f000 fb63 	bl	8010f78 <USBD_StdDevReq>
 80108b2:	4603      	mov	r3, r0
 80108b4:	73fb      	strb	r3, [r7, #15]
      break;
 80108b6:	e020      	b.n	80108fa <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80108be:	4619      	mov	r1, r3
 80108c0:	6878      	ldr	r0, [r7, #4]
 80108c2:	f000 fbcb 	bl	801105c <USBD_StdItfReq>
 80108c6:	4603      	mov	r3, r0
 80108c8:	73fb      	strb	r3, [r7, #15]
      break;
 80108ca:	e016      	b.n	80108fa <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80108d2:	4619      	mov	r1, r3
 80108d4:	6878      	ldr	r0, [r7, #4]
 80108d6:	f000 fc2d 	bl	8011134 <USBD_StdEPReq>
 80108da:	4603      	mov	r3, r0
 80108dc:	73fb      	strb	r3, [r7, #15]
      break;
 80108de:	e00c      	b.n	80108fa <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80108e6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80108ea:	b2db      	uxtb	r3, r3
 80108ec:	4619      	mov	r1, r3
 80108ee:	6878      	ldr	r0, [r7, #4]
 80108f0:	f001 fe50 	bl	8012594 <USBD_LL_StallEP>
 80108f4:	4603      	mov	r3, r0
 80108f6:	73fb      	strb	r3, [r7, #15]
      break;
 80108f8:	bf00      	nop
  }

  return ret;
 80108fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80108fc:	4618      	mov	r0, r3
 80108fe:	3710      	adds	r7, #16
 8010900:	46bd      	mov	sp, r7
 8010902:	bd80      	pop	{r7, pc}

08010904 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8010904:	b580      	push	{r7, lr}
 8010906:	b086      	sub	sp, #24
 8010908:	af00      	add	r7, sp, #0
 801090a:	60f8      	str	r0, [r7, #12]
 801090c:	460b      	mov	r3, r1
 801090e:	607a      	str	r2, [r7, #4]
 8010910:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8010912:	2300      	movs	r3, #0
 8010914:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8010916:	7afb      	ldrb	r3, [r7, #11]
 8010918:	2b00      	cmp	r3, #0
 801091a:	d16e      	bne.n	80109fa <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 801091c:	68fb      	ldr	r3, [r7, #12]
 801091e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8010922:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8010924:	68fb      	ldr	r3, [r7, #12]
 8010926:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 801092a:	2b03      	cmp	r3, #3
 801092c:	f040 8098 	bne.w	8010a60 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8010930:	693b      	ldr	r3, [r7, #16]
 8010932:	689a      	ldr	r2, [r3, #8]
 8010934:	693b      	ldr	r3, [r7, #16]
 8010936:	68db      	ldr	r3, [r3, #12]
 8010938:	429a      	cmp	r2, r3
 801093a:	d913      	bls.n	8010964 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 801093c:	693b      	ldr	r3, [r7, #16]
 801093e:	689a      	ldr	r2, [r3, #8]
 8010940:	693b      	ldr	r3, [r7, #16]
 8010942:	68db      	ldr	r3, [r3, #12]
 8010944:	1ad2      	subs	r2, r2, r3
 8010946:	693b      	ldr	r3, [r7, #16]
 8010948:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 801094a:	693b      	ldr	r3, [r7, #16]
 801094c:	68da      	ldr	r2, [r3, #12]
 801094e:	693b      	ldr	r3, [r7, #16]
 8010950:	689b      	ldr	r3, [r3, #8]
 8010952:	4293      	cmp	r3, r2
 8010954:	bf28      	it	cs
 8010956:	4613      	movcs	r3, r2
 8010958:	461a      	mov	r2, r3
 801095a:	6879      	ldr	r1, [r7, #4]
 801095c:	68f8      	ldr	r0, [r7, #12]
 801095e:	f001 f9be 	bl	8011cde <USBD_CtlContinueRx>
 8010962:	e07d      	b.n	8010a60 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8010964:	68fb      	ldr	r3, [r7, #12]
 8010966:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 801096a:	f003 031f 	and.w	r3, r3, #31
 801096e:	2b02      	cmp	r3, #2
 8010970:	d014      	beq.n	801099c <USBD_LL_DataOutStage+0x98>
 8010972:	2b02      	cmp	r3, #2
 8010974:	d81d      	bhi.n	80109b2 <USBD_LL_DataOutStage+0xae>
 8010976:	2b00      	cmp	r3, #0
 8010978:	d002      	beq.n	8010980 <USBD_LL_DataOutStage+0x7c>
 801097a:	2b01      	cmp	r3, #1
 801097c:	d003      	beq.n	8010986 <USBD_LL_DataOutStage+0x82>
 801097e:	e018      	b.n	80109b2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8010980:	2300      	movs	r3, #0
 8010982:	75bb      	strb	r3, [r7, #22]
            break;
 8010984:	e018      	b.n	80109b8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8010986:	68fb      	ldr	r3, [r7, #12]
 8010988:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 801098c:	b2db      	uxtb	r3, r3
 801098e:	4619      	mov	r1, r3
 8010990:	68f8      	ldr	r0, [r7, #12]
 8010992:	f000 fa64 	bl	8010e5e <USBD_CoreFindIF>
 8010996:	4603      	mov	r3, r0
 8010998:	75bb      	strb	r3, [r7, #22]
            break;
 801099a:	e00d      	b.n	80109b8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 801099c:	68fb      	ldr	r3, [r7, #12]
 801099e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80109a2:	b2db      	uxtb	r3, r3
 80109a4:	4619      	mov	r1, r3
 80109a6:	68f8      	ldr	r0, [r7, #12]
 80109a8:	f000 fa66 	bl	8010e78 <USBD_CoreFindEP>
 80109ac:	4603      	mov	r3, r0
 80109ae:	75bb      	strb	r3, [r7, #22]
            break;
 80109b0:	e002      	b.n	80109b8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80109b2:	2300      	movs	r3, #0
 80109b4:	75bb      	strb	r3, [r7, #22]
            break;
 80109b6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80109b8:	7dbb      	ldrb	r3, [r7, #22]
 80109ba:	2b00      	cmp	r3, #0
 80109bc:	d119      	bne.n	80109f2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80109be:	68fb      	ldr	r3, [r7, #12]
 80109c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80109c4:	b2db      	uxtb	r3, r3
 80109c6:	2b03      	cmp	r3, #3
 80109c8:	d113      	bne.n	80109f2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80109ca:	7dba      	ldrb	r2, [r7, #22]
 80109cc:	68fb      	ldr	r3, [r7, #12]
 80109ce:	32ae      	adds	r2, #174	@ 0xae
 80109d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80109d4:	691b      	ldr	r3, [r3, #16]
 80109d6:	2b00      	cmp	r3, #0
 80109d8:	d00b      	beq.n	80109f2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80109da:	7dba      	ldrb	r2, [r7, #22]
 80109dc:	68fb      	ldr	r3, [r7, #12]
 80109de:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80109e2:	7dba      	ldrb	r2, [r7, #22]
 80109e4:	68fb      	ldr	r3, [r7, #12]
 80109e6:	32ae      	adds	r2, #174	@ 0xae
 80109e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80109ec:	691b      	ldr	r3, [r3, #16]
 80109ee:	68f8      	ldr	r0, [r7, #12]
 80109f0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80109f2:	68f8      	ldr	r0, [r7, #12]
 80109f4:	f001 f984 	bl	8011d00 <USBD_CtlSendStatus>
 80109f8:	e032      	b.n	8010a60 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80109fa:	7afb      	ldrb	r3, [r7, #11]
 80109fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010a00:	b2db      	uxtb	r3, r3
 8010a02:	4619      	mov	r1, r3
 8010a04:	68f8      	ldr	r0, [r7, #12]
 8010a06:	f000 fa37 	bl	8010e78 <USBD_CoreFindEP>
 8010a0a:	4603      	mov	r3, r0
 8010a0c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8010a0e:	7dbb      	ldrb	r3, [r7, #22]
 8010a10:	2bff      	cmp	r3, #255	@ 0xff
 8010a12:	d025      	beq.n	8010a60 <USBD_LL_DataOutStage+0x15c>
 8010a14:	7dbb      	ldrb	r3, [r7, #22]
 8010a16:	2b00      	cmp	r3, #0
 8010a18:	d122      	bne.n	8010a60 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010a1a:	68fb      	ldr	r3, [r7, #12]
 8010a1c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010a20:	b2db      	uxtb	r3, r3
 8010a22:	2b03      	cmp	r3, #3
 8010a24:	d117      	bne.n	8010a56 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8010a26:	7dba      	ldrb	r2, [r7, #22]
 8010a28:	68fb      	ldr	r3, [r7, #12]
 8010a2a:	32ae      	adds	r2, #174	@ 0xae
 8010a2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010a30:	699b      	ldr	r3, [r3, #24]
 8010a32:	2b00      	cmp	r3, #0
 8010a34:	d00f      	beq.n	8010a56 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8010a36:	7dba      	ldrb	r2, [r7, #22]
 8010a38:	68fb      	ldr	r3, [r7, #12]
 8010a3a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8010a3e:	7dba      	ldrb	r2, [r7, #22]
 8010a40:	68fb      	ldr	r3, [r7, #12]
 8010a42:	32ae      	adds	r2, #174	@ 0xae
 8010a44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010a48:	699b      	ldr	r3, [r3, #24]
 8010a4a:	7afa      	ldrb	r2, [r7, #11]
 8010a4c:	4611      	mov	r1, r2
 8010a4e:	68f8      	ldr	r0, [r7, #12]
 8010a50:	4798      	blx	r3
 8010a52:	4603      	mov	r3, r0
 8010a54:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8010a56:	7dfb      	ldrb	r3, [r7, #23]
 8010a58:	2b00      	cmp	r3, #0
 8010a5a:	d001      	beq.n	8010a60 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8010a5c:	7dfb      	ldrb	r3, [r7, #23]
 8010a5e:	e000      	b.n	8010a62 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8010a60:	2300      	movs	r3, #0
}
 8010a62:	4618      	mov	r0, r3
 8010a64:	3718      	adds	r7, #24
 8010a66:	46bd      	mov	sp, r7
 8010a68:	bd80      	pop	{r7, pc}

08010a6a <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8010a6a:	b580      	push	{r7, lr}
 8010a6c:	b086      	sub	sp, #24
 8010a6e:	af00      	add	r7, sp, #0
 8010a70:	60f8      	str	r0, [r7, #12]
 8010a72:	460b      	mov	r3, r1
 8010a74:	607a      	str	r2, [r7, #4]
 8010a76:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8010a78:	7afb      	ldrb	r3, [r7, #11]
 8010a7a:	2b00      	cmp	r3, #0
 8010a7c:	d16f      	bne.n	8010b5e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8010a7e:	68fb      	ldr	r3, [r7, #12]
 8010a80:	3314      	adds	r3, #20
 8010a82:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8010a84:	68fb      	ldr	r3, [r7, #12]
 8010a86:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8010a8a:	2b02      	cmp	r3, #2
 8010a8c:	d15a      	bne.n	8010b44 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8010a8e:	693b      	ldr	r3, [r7, #16]
 8010a90:	689a      	ldr	r2, [r3, #8]
 8010a92:	693b      	ldr	r3, [r7, #16]
 8010a94:	68db      	ldr	r3, [r3, #12]
 8010a96:	429a      	cmp	r2, r3
 8010a98:	d914      	bls.n	8010ac4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8010a9a:	693b      	ldr	r3, [r7, #16]
 8010a9c:	689a      	ldr	r2, [r3, #8]
 8010a9e:	693b      	ldr	r3, [r7, #16]
 8010aa0:	68db      	ldr	r3, [r3, #12]
 8010aa2:	1ad2      	subs	r2, r2, r3
 8010aa4:	693b      	ldr	r3, [r7, #16]
 8010aa6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8010aa8:	693b      	ldr	r3, [r7, #16]
 8010aaa:	689b      	ldr	r3, [r3, #8]
 8010aac:	461a      	mov	r2, r3
 8010aae:	6879      	ldr	r1, [r7, #4]
 8010ab0:	68f8      	ldr	r0, [r7, #12]
 8010ab2:	f001 f8e6 	bl	8011c82 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010ab6:	2300      	movs	r3, #0
 8010ab8:	2200      	movs	r2, #0
 8010aba:	2100      	movs	r1, #0
 8010abc:	68f8      	ldr	r0, [r7, #12]
 8010abe:	f001 fe13 	bl	80126e8 <USBD_LL_PrepareReceive>
 8010ac2:	e03f      	b.n	8010b44 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8010ac4:	693b      	ldr	r3, [r7, #16]
 8010ac6:	68da      	ldr	r2, [r3, #12]
 8010ac8:	693b      	ldr	r3, [r7, #16]
 8010aca:	689b      	ldr	r3, [r3, #8]
 8010acc:	429a      	cmp	r2, r3
 8010ace:	d11c      	bne.n	8010b0a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8010ad0:	693b      	ldr	r3, [r7, #16]
 8010ad2:	685a      	ldr	r2, [r3, #4]
 8010ad4:	693b      	ldr	r3, [r7, #16]
 8010ad6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8010ad8:	429a      	cmp	r2, r3
 8010ada:	d316      	bcc.n	8010b0a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8010adc:	693b      	ldr	r3, [r7, #16]
 8010ade:	685a      	ldr	r2, [r3, #4]
 8010ae0:	68fb      	ldr	r3, [r7, #12]
 8010ae2:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8010ae6:	429a      	cmp	r2, r3
 8010ae8:	d20f      	bcs.n	8010b0a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8010aea:	2200      	movs	r2, #0
 8010aec:	2100      	movs	r1, #0
 8010aee:	68f8      	ldr	r0, [r7, #12]
 8010af0:	f001 f8c7 	bl	8011c82 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8010af4:	68fb      	ldr	r3, [r7, #12]
 8010af6:	2200      	movs	r2, #0
 8010af8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010afc:	2300      	movs	r3, #0
 8010afe:	2200      	movs	r2, #0
 8010b00:	2100      	movs	r1, #0
 8010b02:	68f8      	ldr	r0, [r7, #12]
 8010b04:	f001 fdf0 	bl	80126e8 <USBD_LL_PrepareReceive>
 8010b08:	e01c      	b.n	8010b44 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010b0a:	68fb      	ldr	r3, [r7, #12]
 8010b0c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010b10:	b2db      	uxtb	r3, r3
 8010b12:	2b03      	cmp	r3, #3
 8010b14:	d10f      	bne.n	8010b36 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8010b16:	68fb      	ldr	r3, [r7, #12]
 8010b18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010b1c:	68db      	ldr	r3, [r3, #12]
 8010b1e:	2b00      	cmp	r3, #0
 8010b20:	d009      	beq.n	8010b36 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8010b22:	68fb      	ldr	r3, [r7, #12]
 8010b24:	2200      	movs	r2, #0
 8010b26:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8010b2a:	68fb      	ldr	r3, [r7, #12]
 8010b2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010b30:	68db      	ldr	r3, [r3, #12]
 8010b32:	68f8      	ldr	r0, [r7, #12]
 8010b34:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8010b36:	2180      	movs	r1, #128	@ 0x80
 8010b38:	68f8      	ldr	r0, [r7, #12]
 8010b3a:	f001 fd2b 	bl	8012594 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8010b3e:	68f8      	ldr	r0, [r7, #12]
 8010b40:	f001 f8f1 	bl	8011d26 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8010b44:	68fb      	ldr	r3, [r7, #12]
 8010b46:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8010b4a:	2b00      	cmp	r3, #0
 8010b4c:	d03a      	beq.n	8010bc4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8010b4e:	68f8      	ldr	r0, [r7, #12]
 8010b50:	f7ff fe42 	bl	80107d8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8010b54:	68fb      	ldr	r3, [r7, #12]
 8010b56:	2200      	movs	r2, #0
 8010b58:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8010b5c:	e032      	b.n	8010bc4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8010b5e:	7afb      	ldrb	r3, [r7, #11]
 8010b60:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8010b64:	b2db      	uxtb	r3, r3
 8010b66:	4619      	mov	r1, r3
 8010b68:	68f8      	ldr	r0, [r7, #12]
 8010b6a:	f000 f985 	bl	8010e78 <USBD_CoreFindEP>
 8010b6e:	4603      	mov	r3, r0
 8010b70:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8010b72:	7dfb      	ldrb	r3, [r7, #23]
 8010b74:	2bff      	cmp	r3, #255	@ 0xff
 8010b76:	d025      	beq.n	8010bc4 <USBD_LL_DataInStage+0x15a>
 8010b78:	7dfb      	ldrb	r3, [r7, #23]
 8010b7a:	2b00      	cmp	r3, #0
 8010b7c:	d122      	bne.n	8010bc4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010b7e:	68fb      	ldr	r3, [r7, #12]
 8010b80:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010b84:	b2db      	uxtb	r3, r3
 8010b86:	2b03      	cmp	r3, #3
 8010b88:	d11c      	bne.n	8010bc4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8010b8a:	7dfa      	ldrb	r2, [r7, #23]
 8010b8c:	68fb      	ldr	r3, [r7, #12]
 8010b8e:	32ae      	adds	r2, #174	@ 0xae
 8010b90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010b94:	695b      	ldr	r3, [r3, #20]
 8010b96:	2b00      	cmp	r3, #0
 8010b98:	d014      	beq.n	8010bc4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8010b9a:	7dfa      	ldrb	r2, [r7, #23]
 8010b9c:	68fb      	ldr	r3, [r7, #12]
 8010b9e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8010ba2:	7dfa      	ldrb	r2, [r7, #23]
 8010ba4:	68fb      	ldr	r3, [r7, #12]
 8010ba6:	32ae      	adds	r2, #174	@ 0xae
 8010ba8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010bac:	695b      	ldr	r3, [r3, #20]
 8010bae:	7afa      	ldrb	r2, [r7, #11]
 8010bb0:	4611      	mov	r1, r2
 8010bb2:	68f8      	ldr	r0, [r7, #12]
 8010bb4:	4798      	blx	r3
 8010bb6:	4603      	mov	r3, r0
 8010bb8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8010bba:	7dbb      	ldrb	r3, [r7, #22]
 8010bbc:	2b00      	cmp	r3, #0
 8010bbe:	d001      	beq.n	8010bc4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8010bc0:	7dbb      	ldrb	r3, [r7, #22]
 8010bc2:	e000      	b.n	8010bc6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8010bc4:	2300      	movs	r3, #0
}
 8010bc6:	4618      	mov	r0, r3
 8010bc8:	3718      	adds	r7, #24
 8010bca:	46bd      	mov	sp, r7
 8010bcc:	bd80      	pop	{r7, pc}

08010bce <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8010bce:	b580      	push	{r7, lr}
 8010bd0:	b084      	sub	sp, #16
 8010bd2:	af00      	add	r7, sp, #0
 8010bd4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8010bd6:	2300      	movs	r3, #0
 8010bd8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	2201      	movs	r2, #1
 8010bde:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	2200      	movs	r2, #0
 8010be6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	2200      	movs	r2, #0
 8010bee:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	2200      	movs	r2, #0
 8010bf4:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	2200      	movs	r2, #0
 8010bfc:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8010c00:	687b      	ldr	r3, [r7, #4]
 8010c02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010c06:	2b00      	cmp	r3, #0
 8010c08:	d014      	beq.n	8010c34 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010c10:	685b      	ldr	r3, [r3, #4]
 8010c12:	2b00      	cmp	r3, #0
 8010c14:	d00e      	beq.n	8010c34 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010c1c:	685b      	ldr	r3, [r3, #4]
 8010c1e:	687a      	ldr	r2, [r7, #4]
 8010c20:	6852      	ldr	r2, [r2, #4]
 8010c22:	b2d2      	uxtb	r2, r2
 8010c24:	4611      	mov	r1, r2
 8010c26:	6878      	ldr	r0, [r7, #4]
 8010c28:	4798      	blx	r3
 8010c2a:	4603      	mov	r3, r0
 8010c2c:	2b00      	cmp	r3, #0
 8010c2e:	d001      	beq.n	8010c34 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8010c30:	2303      	movs	r3, #3
 8010c32:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8010c34:	2340      	movs	r3, #64	@ 0x40
 8010c36:	2200      	movs	r2, #0
 8010c38:	2100      	movs	r1, #0
 8010c3a:	6878      	ldr	r0, [r7, #4]
 8010c3c:	f001 fc65 	bl	801250a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	2201      	movs	r2, #1
 8010c44:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	2240      	movs	r2, #64	@ 0x40
 8010c4c:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8010c50:	2340      	movs	r3, #64	@ 0x40
 8010c52:	2200      	movs	r2, #0
 8010c54:	2180      	movs	r1, #128	@ 0x80
 8010c56:	6878      	ldr	r0, [r7, #4]
 8010c58:	f001 fc57 	bl	801250a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	2201      	movs	r2, #1
 8010c60:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8010c62:	687b      	ldr	r3, [r7, #4]
 8010c64:	2240      	movs	r2, #64	@ 0x40
 8010c66:	621a      	str	r2, [r3, #32]

  return ret;
 8010c68:	7bfb      	ldrb	r3, [r7, #15]
}
 8010c6a:	4618      	mov	r0, r3
 8010c6c:	3710      	adds	r7, #16
 8010c6e:	46bd      	mov	sp, r7
 8010c70:	bd80      	pop	{r7, pc}

08010c72 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8010c72:	b480      	push	{r7}
 8010c74:	b083      	sub	sp, #12
 8010c76:	af00      	add	r7, sp, #0
 8010c78:	6078      	str	r0, [r7, #4]
 8010c7a:	460b      	mov	r3, r1
 8010c7c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	78fa      	ldrb	r2, [r7, #3]
 8010c82:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8010c84:	2300      	movs	r3, #0
}
 8010c86:	4618      	mov	r0, r3
 8010c88:	370c      	adds	r7, #12
 8010c8a:	46bd      	mov	sp, r7
 8010c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c90:	4770      	bx	lr

08010c92 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8010c92:	b480      	push	{r7}
 8010c94:	b083      	sub	sp, #12
 8010c96:	af00      	add	r7, sp, #0
 8010c98:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010ca0:	b2db      	uxtb	r3, r3
 8010ca2:	2b04      	cmp	r3, #4
 8010ca4:	d006      	beq.n	8010cb4 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8010ca6:	687b      	ldr	r3, [r7, #4]
 8010ca8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010cac:	b2da      	uxtb	r2, r3
 8010cae:	687b      	ldr	r3, [r7, #4]
 8010cb0:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	2204      	movs	r2, #4
 8010cb8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8010cbc:	2300      	movs	r3, #0
}
 8010cbe:	4618      	mov	r0, r3
 8010cc0:	370c      	adds	r7, #12
 8010cc2:	46bd      	mov	sp, r7
 8010cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cc8:	4770      	bx	lr

08010cca <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8010cca:	b480      	push	{r7}
 8010ccc:	b083      	sub	sp, #12
 8010cce:	af00      	add	r7, sp, #0
 8010cd0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010cd8:	b2db      	uxtb	r3, r3
 8010cda:	2b04      	cmp	r3, #4
 8010cdc:	d106      	bne.n	8010cec <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8010cde:	687b      	ldr	r3, [r7, #4]
 8010ce0:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8010ce4:	b2da      	uxtb	r2, r3
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8010cec:	2300      	movs	r3, #0
}
 8010cee:	4618      	mov	r0, r3
 8010cf0:	370c      	adds	r7, #12
 8010cf2:	46bd      	mov	sp, r7
 8010cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cf8:	4770      	bx	lr

08010cfa <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8010cfa:	b580      	push	{r7, lr}
 8010cfc:	b082      	sub	sp, #8
 8010cfe:	af00      	add	r7, sp, #0
 8010d00:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010d08:	b2db      	uxtb	r3, r3
 8010d0a:	2b03      	cmp	r3, #3
 8010d0c:	d110      	bne.n	8010d30 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010d14:	2b00      	cmp	r3, #0
 8010d16:	d00b      	beq.n	8010d30 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010d1e:	69db      	ldr	r3, [r3, #28]
 8010d20:	2b00      	cmp	r3, #0
 8010d22:	d005      	beq.n	8010d30 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010d2a:	69db      	ldr	r3, [r3, #28]
 8010d2c:	6878      	ldr	r0, [r7, #4]
 8010d2e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8010d30:	2300      	movs	r3, #0
}
 8010d32:	4618      	mov	r0, r3
 8010d34:	3708      	adds	r7, #8
 8010d36:	46bd      	mov	sp, r7
 8010d38:	bd80      	pop	{r7, pc}

08010d3a <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8010d3a:	b580      	push	{r7, lr}
 8010d3c:	b082      	sub	sp, #8
 8010d3e:	af00      	add	r7, sp, #0
 8010d40:	6078      	str	r0, [r7, #4]
 8010d42:	460b      	mov	r3, r1
 8010d44:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	32ae      	adds	r2, #174	@ 0xae
 8010d50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010d54:	2b00      	cmp	r3, #0
 8010d56:	d101      	bne.n	8010d5c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8010d58:	2303      	movs	r3, #3
 8010d5a:	e01c      	b.n	8010d96 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010d62:	b2db      	uxtb	r3, r3
 8010d64:	2b03      	cmp	r3, #3
 8010d66:	d115      	bne.n	8010d94 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	32ae      	adds	r2, #174	@ 0xae
 8010d72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010d76:	6a1b      	ldr	r3, [r3, #32]
 8010d78:	2b00      	cmp	r3, #0
 8010d7a:	d00b      	beq.n	8010d94 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010d82:	687b      	ldr	r3, [r7, #4]
 8010d84:	32ae      	adds	r2, #174	@ 0xae
 8010d86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010d8a:	6a1b      	ldr	r3, [r3, #32]
 8010d8c:	78fa      	ldrb	r2, [r7, #3]
 8010d8e:	4611      	mov	r1, r2
 8010d90:	6878      	ldr	r0, [r7, #4]
 8010d92:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8010d94:	2300      	movs	r3, #0
}
 8010d96:	4618      	mov	r0, r3
 8010d98:	3708      	adds	r7, #8
 8010d9a:	46bd      	mov	sp, r7
 8010d9c:	bd80      	pop	{r7, pc}

08010d9e <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8010d9e:	b580      	push	{r7, lr}
 8010da0:	b082      	sub	sp, #8
 8010da2:	af00      	add	r7, sp, #0
 8010da4:	6078      	str	r0, [r7, #4]
 8010da6:	460b      	mov	r3, r1
 8010da8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	32ae      	adds	r2, #174	@ 0xae
 8010db4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010db8:	2b00      	cmp	r3, #0
 8010dba:	d101      	bne.n	8010dc0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8010dbc:	2303      	movs	r3, #3
 8010dbe:	e01c      	b.n	8010dfa <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010dc6:	b2db      	uxtb	r3, r3
 8010dc8:	2b03      	cmp	r3, #3
 8010dca:	d115      	bne.n	8010df8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	32ae      	adds	r2, #174	@ 0xae
 8010dd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010dda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010ddc:	2b00      	cmp	r3, #0
 8010dde:	d00b      	beq.n	8010df8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	32ae      	adds	r2, #174	@ 0xae
 8010dea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010dee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010df0:	78fa      	ldrb	r2, [r7, #3]
 8010df2:	4611      	mov	r1, r2
 8010df4:	6878      	ldr	r0, [r7, #4]
 8010df6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8010df8:	2300      	movs	r3, #0
}
 8010dfa:	4618      	mov	r0, r3
 8010dfc:	3708      	adds	r7, #8
 8010dfe:	46bd      	mov	sp, r7
 8010e00:	bd80      	pop	{r7, pc}

08010e02 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8010e02:	b480      	push	{r7}
 8010e04:	b083      	sub	sp, #12
 8010e06:	af00      	add	r7, sp, #0
 8010e08:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8010e0a:	2300      	movs	r3, #0
}
 8010e0c:	4618      	mov	r0, r3
 8010e0e:	370c      	adds	r7, #12
 8010e10:	46bd      	mov	sp, r7
 8010e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e16:	4770      	bx	lr

08010e18 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8010e18:	b580      	push	{r7, lr}
 8010e1a:	b084      	sub	sp, #16
 8010e1c:	af00      	add	r7, sp, #0
 8010e1e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8010e20:	2300      	movs	r3, #0
 8010e22:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010e24:	687b      	ldr	r3, [r7, #4]
 8010e26:	2201      	movs	r2, #1
 8010e28:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010e32:	2b00      	cmp	r3, #0
 8010e34:	d00e      	beq.n	8010e54 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8010e36:	687b      	ldr	r3, [r7, #4]
 8010e38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010e3c:	685b      	ldr	r3, [r3, #4]
 8010e3e:	687a      	ldr	r2, [r7, #4]
 8010e40:	6852      	ldr	r2, [r2, #4]
 8010e42:	b2d2      	uxtb	r2, r2
 8010e44:	4611      	mov	r1, r2
 8010e46:	6878      	ldr	r0, [r7, #4]
 8010e48:	4798      	blx	r3
 8010e4a:	4603      	mov	r3, r0
 8010e4c:	2b00      	cmp	r3, #0
 8010e4e:	d001      	beq.n	8010e54 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8010e50:	2303      	movs	r3, #3
 8010e52:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8010e54:	7bfb      	ldrb	r3, [r7, #15]
}
 8010e56:	4618      	mov	r0, r3
 8010e58:	3710      	adds	r7, #16
 8010e5a:	46bd      	mov	sp, r7
 8010e5c:	bd80      	pop	{r7, pc}

08010e5e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8010e5e:	b480      	push	{r7}
 8010e60:	b083      	sub	sp, #12
 8010e62:	af00      	add	r7, sp, #0
 8010e64:	6078      	str	r0, [r7, #4]
 8010e66:	460b      	mov	r3, r1
 8010e68:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8010e6a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8010e6c:	4618      	mov	r0, r3
 8010e6e:	370c      	adds	r7, #12
 8010e70:	46bd      	mov	sp, r7
 8010e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e76:	4770      	bx	lr

08010e78 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8010e78:	b480      	push	{r7}
 8010e7a:	b083      	sub	sp, #12
 8010e7c:	af00      	add	r7, sp, #0
 8010e7e:	6078      	str	r0, [r7, #4]
 8010e80:	460b      	mov	r3, r1
 8010e82:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8010e84:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8010e86:	4618      	mov	r0, r3
 8010e88:	370c      	adds	r7, #12
 8010e8a:	46bd      	mov	sp, r7
 8010e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e90:	4770      	bx	lr

08010e92 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8010e92:	b580      	push	{r7, lr}
 8010e94:	b086      	sub	sp, #24
 8010e96:	af00      	add	r7, sp, #0
 8010e98:	6078      	str	r0, [r7, #4]
 8010e9a:	460b      	mov	r3, r1
 8010e9c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8010ea2:	687b      	ldr	r3, [r7, #4]
 8010ea4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8010ea6:	2300      	movs	r3, #0
 8010ea8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8010eaa:	68fb      	ldr	r3, [r7, #12]
 8010eac:	885b      	ldrh	r3, [r3, #2]
 8010eae:	b29b      	uxth	r3, r3
 8010eb0:	68fa      	ldr	r2, [r7, #12]
 8010eb2:	7812      	ldrb	r2, [r2, #0]
 8010eb4:	4293      	cmp	r3, r2
 8010eb6:	d91f      	bls.n	8010ef8 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8010eb8:	68fb      	ldr	r3, [r7, #12]
 8010eba:	781b      	ldrb	r3, [r3, #0]
 8010ebc:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8010ebe:	e013      	b.n	8010ee8 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8010ec0:	f107 030a 	add.w	r3, r7, #10
 8010ec4:	4619      	mov	r1, r3
 8010ec6:	6978      	ldr	r0, [r7, #20]
 8010ec8:	f000 f81b 	bl	8010f02 <USBD_GetNextDesc>
 8010ecc:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8010ece:	697b      	ldr	r3, [r7, #20]
 8010ed0:	785b      	ldrb	r3, [r3, #1]
 8010ed2:	2b05      	cmp	r3, #5
 8010ed4:	d108      	bne.n	8010ee8 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8010ed6:	697b      	ldr	r3, [r7, #20]
 8010ed8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8010eda:	693b      	ldr	r3, [r7, #16]
 8010edc:	789b      	ldrb	r3, [r3, #2]
 8010ede:	78fa      	ldrb	r2, [r7, #3]
 8010ee0:	429a      	cmp	r2, r3
 8010ee2:	d008      	beq.n	8010ef6 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8010ee4:	2300      	movs	r3, #0
 8010ee6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8010ee8:	68fb      	ldr	r3, [r7, #12]
 8010eea:	885b      	ldrh	r3, [r3, #2]
 8010eec:	b29a      	uxth	r2, r3
 8010eee:	897b      	ldrh	r3, [r7, #10]
 8010ef0:	429a      	cmp	r2, r3
 8010ef2:	d8e5      	bhi.n	8010ec0 <USBD_GetEpDesc+0x2e>
 8010ef4:	e000      	b.n	8010ef8 <USBD_GetEpDesc+0x66>
          break;
 8010ef6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8010ef8:	693b      	ldr	r3, [r7, #16]
}
 8010efa:	4618      	mov	r0, r3
 8010efc:	3718      	adds	r7, #24
 8010efe:	46bd      	mov	sp, r7
 8010f00:	bd80      	pop	{r7, pc}

08010f02 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8010f02:	b480      	push	{r7}
 8010f04:	b085      	sub	sp, #20
 8010f06:	af00      	add	r7, sp, #0
 8010f08:	6078      	str	r0, [r7, #4]
 8010f0a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8010f0c:	687b      	ldr	r3, [r7, #4]
 8010f0e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8010f10:	683b      	ldr	r3, [r7, #0]
 8010f12:	881b      	ldrh	r3, [r3, #0]
 8010f14:	68fa      	ldr	r2, [r7, #12]
 8010f16:	7812      	ldrb	r2, [r2, #0]
 8010f18:	4413      	add	r3, r2
 8010f1a:	b29a      	uxth	r2, r3
 8010f1c:	683b      	ldr	r3, [r7, #0]
 8010f1e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8010f20:	68fb      	ldr	r3, [r7, #12]
 8010f22:	781b      	ldrb	r3, [r3, #0]
 8010f24:	461a      	mov	r2, r3
 8010f26:	687b      	ldr	r3, [r7, #4]
 8010f28:	4413      	add	r3, r2
 8010f2a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8010f2c:	68fb      	ldr	r3, [r7, #12]
}
 8010f2e:	4618      	mov	r0, r3
 8010f30:	3714      	adds	r7, #20
 8010f32:	46bd      	mov	sp, r7
 8010f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f38:	4770      	bx	lr

08010f3a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8010f3a:	b480      	push	{r7}
 8010f3c:	b087      	sub	sp, #28
 8010f3e:	af00      	add	r7, sp, #0
 8010f40:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8010f42:	687b      	ldr	r3, [r7, #4]
 8010f44:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8010f46:	697b      	ldr	r3, [r7, #20]
 8010f48:	781b      	ldrb	r3, [r3, #0]
 8010f4a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8010f4c:	697b      	ldr	r3, [r7, #20]
 8010f4e:	3301      	adds	r3, #1
 8010f50:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8010f52:	697b      	ldr	r3, [r7, #20]
 8010f54:	781b      	ldrb	r3, [r3, #0]
 8010f56:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8010f58:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8010f5c:	021b      	lsls	r3, r3, #8
 8010f5e:	b21a      	sxth	r2, r3
 8010f60:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8010f64:	4313      	orrs	r3, r2
 8010f66:	b21b      	sxth	r3, r3
 8010f68:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8010f6a:	89fb      	ldrh	r3, [r7, #14]
}
 8010f6c:	4618      	mov	r0, r3
 8010f6e:	371c      	adds	r7, #28
 8010f70:	46bd      	mov	sp, r7
 8010f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f76:	4770      	bx	lr

08010f78 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010f78:	b580      	push	{r7, lr}
 8010f7a:	b084      	sub	sp, #16
 8010f7c:	af00      	add	r7, sp, #0
 8010f7e:	6078      	str	r0, [r7, #4]
 8010f80:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010f82:	2300      	movs	r3, #0
 8010f84:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010f86:	683b      	ldr	r3, [r7, #0]
 8010f88:	781b      	ldrb	r3, [r3, #0]
 8010f8a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8010f8e:	2b40      	cmp	r3, #64	@ 0x40
 8010f90:	d005      	beq.n	8010f9e <USBD_StdDevReq+0x26>
 8010f92:	2b40      	cmp	r3, #64	@ 0x40
 8010f94:	d857      	bhi.n	8011046 <USBD_StdDevReq+0xce>
 8010f96:	2b00      	cmp	r3, #0
 8010f98:	d00f      	beq.n	8010fba <USBD_StdDevReq+0x42>
 8010f9a:	2b20      	cmp	r3, #32
 8010f9c:	d153      	bne.n	8011046 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	32ae      	adds	r2, #174	@ 0xae
 8010fa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010fac:	689b      	ldr	r3, [r3, #8]
 8010fae:	6839      	ldr	r1, [r7, #0]
 8010fb0:	6878      	ldr	r0, [r7, #4]
 8010fb2:	4798      	blx	r3
 8010fb4:	4603      	mov	r3, r0
 8010fb6:	73fb      	strb	r3, [r7, #15]
      break;
 8010fb8:	e04a      	b.n	8011050 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8010fba:	683b      	ldr	r3, [r7, #0]
 8010fbc:	785b      	ldrb	r3, [r3, #1]
 8010fbe:	2b09      	cmp	r3, #9
 8010fc0:	d83b      	bhi.n	801103a <USBD_StdDevReq+0xc2>
 8010fc2:	a201      	add	r2, pc, #4	@ (adr r2, 8010fc8 <USBD_StdDevReq+0x50>)
 8010fc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010fc8:	0801101d 	.word	0x0801101d
 8010fcc:	08011031 	.word	0x08011031
 8010fd0:	0801103b 	.word	0x0801103b
 8010fd4:	08011027 	.word	0x08011027
 8010fd8:	0801103b 	.word	0x0801103b
 8010fdc:	08010ffb 	.word	0x08010ffb
 8010fe0:	08010ff1 	.word	0x08010ff1
 8010fe4:	0801103b 	.word	0x0801103b
 8010fe8:	08011013 	.word	0x08011013
 8010fec:	08011005 	.word	0x08011005
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8010ff0:	6839      	ldr	r1, [r7, #0]
 8010ff2:	6878      	ldr	r0, [r7, #4]
 8010ff4:	f000 fa3c 	bl	8011470 <USBD_GetDescriptor>
          break;
 8010ff8:	e024      	b.n	8011044 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8010ffa:	6839      	ldr	r1, [r7, #0]
 8010ffc:	6878      	ldr	r0, [r7, #4]
 8010ffe:	f000 fbcb 	bl	8011798 <USBD_SetAddress>
          break;
 8011002:	e01f      	b.n	8011044 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8011004:	6839      	ldr	r1, [r7, #0]
 8011006:	6878      	ldr	r0, [r7, #4]
 8011008:	f000 fc0a 	bl	8011820 <USBD_SetConfig>
 801100c:	4603      	mov	r3, r0
 801100e:	73fb      	strb	r3, [r7, #15]
          break;
 8011010:	e018      	b.n	8011044 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8011012:	6839      	ldr	r1, [r7, #0]
 8011014:	6878      	ldr	r0, [r7, #4]
 8011016:	f000 fcad 	bl	8011974 <USBD_GetConfig>
          break;
 801101a:	e013      	b.n	8011044 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 801101c:	6839      	ldr	r1, [r7, #0]
 801101e:	6878      	ldr	r0, [r7, #4]
 8011020:	f000 fcde 	bl	80119e0 <USBD_GetStatus>
          break;
 8011024:	e00e      	b.n	8011044 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8011026:	6839      	ldr	r1, [r7, #0]
 8011028:	6878      	ldr	r0, [r7, #4]
 801102a:	f000 fd0d 	bl	8011a48 <USBD_SetFeature>
          break;
 801102e:	e009      	b.n	8011044 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8011030:	6839      	ldr	r1, [r7, #0]
 8011032:	6878      	ldr	r0, [r7, #4]
 8011034:	f000 fd31 	bl	8011a9a <USBD_ClrFeature>
          break;
 8011038:	e004      	b.n	8011044 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 801103a:	6839      	ldr	r1, [r7, #0]
 801103c:	6878      	ldr	r0, [r7, #4]
 801103e:	f000 fd88 	bl	8011b52 <USBD_CtlError>
          break;
 8011042:	bf00      	nop
      }
      break;
 8011044:	e004      	b.n	8011050 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8011046:	6839      	ldr	r1, [r7, #0]
 8011048:	6878      	ldr	r0, [r7, #4]
 801104a:	f000 fd82 	bl	8011b52 <USBD_CtlError>
      break;
 801104e:	bf00      	nop
  }

  return ret;
 8011050:	7bfb      	ldrb	r3, [r7, #15]
}
 8011052:	4618      	mov	r0, r3
 8011054:	3710      	adds	r7, #16
 8011056:	46bd      	mov	sp, r7
 8011058:	bd80      	pop	{r7, pc}
 801105a:	bf00      	nop

0801105c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801105c:	b580      	push	{r7, lr}
 801105e:	b084      	sub	sp, #16
 8011060:	af00      	add	r7, sp, #0
 8011062:	6078      	str	r0, [r7, #4]
 8011064:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011066:	2300      	movs	r3, #0
 8011068:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801106a:	683b      	ldr	r3, [r7, #0]
 801106c:	781b      	ldrb	r3, [r3, #0]
 801106e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8011072:	2b40      	cmp	r3, #64	@ 0x40
 8011074:	d005      	beq.n	8011082 <USBD_StdItfReq+0x26>
 8011076:	2b40      	cmp	r3, #64	@ 0x40
 8011078:	d852      	bhi.n	8011120 <USBD_StdItfReq+0xc4>
 801107a:	2b00      	cmp	r3, #0
 801107c:	d001      	beq.n	8011082 <USBD_StdItfReq+0x26>
 801107e:	2b20      	cmp	r3, #32
 8011080:	d14e      	bne.n	8011120 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8011082:	687b      	ldr	r3, [r7, #4]
 8011084:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011088:	b2db      	uxtb	r3, r3
 801108a:	3b01      	subs	r3, #1
 801108c:	2b02      	cmp	r3, #2
 801108e:	d840      	bhi.n	8011112 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8011090:	683b      	ldr	r3, [r7, #0]
 8011092:	889b      	ldrh	r3, [r3, #4]
 8011094:	b2db      	uxtb	r3, r3
 8011096:	2b01      	cmp	r3, #1
 8011098:	d836      	bhi.n	8011108 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 801109a:	683b      	ldr	r3, [r7, #0]
 801109c:	889b      	ldrh	r3, [r3, #4]
 801109e:	b2db      	uxtb	r3, r3
 80110a0:	4619      	mov	r1, r3
 80110a2:	6878      	ldr	r0, [r7, #4]
 80110a4:	f7ff fedb 	bl	8010e5e <USBD_CoreFindIF>
 80110a8:	4603      	mov	r3, r0
 80110aa:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80110ac:	7bbb      	ldrb	r3, [r7, #14]
 80110ae:	2bff      	cmp	r3, #255	@ 0xff
 80110b0:	d01d      	beq.n	80110ee <USBD_StdItfReq+0x92>
 80110b2:	7bbb      	ldrb	r3, [r7, #14]
 80110b4:	2b00      	cmp	r3, #0
 80110b6:	d11a      	bne.n	80110ee <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80110b8:	7bba      	ldrb	r2, [r7, #14]
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	32ae      	adds	r2, #174	@ 0xae
 80110be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80110c2:	689b      	ldr	r3, [r3, #8]
 80110c4:	2b00      	cmp	r3, #0
 80110c6:	d00f      	beq.n	80110e8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80110c8:	7bba      	ldrb	r2, [r7, #14]
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80110d0:	7bba      	ldrb	r2, [r7, #14]
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	32ae      	adds	r2, #174	@ 0xae
 80110d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80110da:	689b      	ldr	r3, [r3, #8]
 80110dc:	6839      	ldr	r1, [r7, #0]
 80110de:	6878      	ldr	r0, [r7, #4]
 80110e0:	4798      	blx	r3
 80110e2:	4603      	mov	r3, r0
 80110e4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80110e6:	e004      	b.n	80110f2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80110e8:	2303      	movs	r3, #3
 80110ea:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80110ec:	e001      	b.n	80110f2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80110ee:	2303      	movs	r3, #3
 80110f0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80110f2:	683b      	ldr	r3, [r7, #0]
 80110f4:	88db      	ldrh	r3, [r3, #6]
 80110f6:	2b00      	cmp	r3, #0
 80110f8:	d110      	bne.n	801111c <USBD_StdItfReq+0xc0>
 80110fa:	7bfb      	ldrb	r3, [r7, #15]
 80110fc:	2b00      	cmp	r3, #0
 80110fe:	d10d      	bne.n	801111c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8011100:	6878      	ldr	r0, [r7, #4]
 8011102:	f000 fdfd 	bl	8011d00 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8011106:	e009      	b.n	801111c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8011108:	6839      	ldr	r1, [r7, #0]
 801110a:	6878      	ldr	r0, [r7, #4]
 801110c:	f000 fd21 	bl	8011b52 <USBD_CtlError>
          break;
 8011110:	e004      	b.n	801111c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8011112:	6839      	ldr	r1, [r7, #0]
 8011114:	6878      	ldr	r0, [r7, #4]
 8011116:	f000 fd1c 	bl	8011b52 <USBD_CtlError>
          break;
 801111a:	e000      	b.n	801111e <USBD_StdItfReq+0xc2>
          break;
 801111c:	bf00      	nop
      }
      break;
 801111e:	e004      	b.n	801112a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8011120:	6839      	ldr	r1, [r7, #0]
 8011122:	6878      	ldr	r0, [r7, #4]
 8011124:	f000 fd15 	bl	8011b52 <USBD_CtlError>
      break;
 8011128:	bf00      	nop
  }

  return ret;
 801112a:	7bfb      	ldrb	r3, [r7, #15]
}
 801112c:	4618      	mov	r0, r3
 801112e:	3710      	adds	r7, #16
 8011130:	46bd      	mov	sp, r7
 8011132:	bd80      	pop	{r7, pc}

08011134 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011134:	b580      	push	{r7, lr}
 8011136:	b084      	sub	sp, #16
 8011138:	af00      	add	r7, sp, #0
 801113a:	6078      	str	r0, [r7, #4]
 801113c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 801113e:	2300      	movs	r3, #0
 8011140:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8011142:	683b      	ldr	r3, [r7, #0]
 8011144:	889b      	ldrh	r3, [r3, #4]
 8011146:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011148:	683b      	ldr	r3, [r7, #0]
 801114a:	781b      	ldrb	r3, [r3, #0]
 801114c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8011150:	2b40      	cmp	r3, #64	@ 0x40
 8011152:	d007      	beq.n	8011164 <USBD_StdEPReq+0x30>
 8011154:	2b40      	cmp	r3, #64	@ 0x40
 8011156:	f200 817f 	bhi.w	8011458 <USBD_StdEPReq+0x324>
 801115a:	2b00      	cmp	r3, #0
 801115c:	d02a      	beq.n	80111b4 <USBD_StdEPReq+0x80>
 801115e:	2b20      	cmp	r3, #32
 8011160:	f040 817a 	bne.w	8011458 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8011164:	7bbb      	ldrb	r3, [r7, #14]
 8011166:	4619      	mov	r1, r3
 8011168:	6878      	ldr	r0, [r7, #4]
 801116a:	f7ff fe85 	bl	8010e78 <USBD_CoreFindEP>
 801116e:	4603      	mov	r3, r0
 8011170:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8011172:	7b7b      	ldrb	r3, [r7, #13]
 8011174:	2bff      	cmp	r3, #255	@ 0xff
 8011176:	f000 8174 	beq.w	8011462 <USBD_StdEPReq+0x32e>
 801117a:	7b7b      	ldrb	r3, [r7, #13]
 801117c:	2b00      	cmp	r3, #0
 801117e:	f040 8170 	bne.w	8011462 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8011182:	7b7a      	ldrb	r2, [r7, #13]
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 801118a:	7b7a      	ldrb	r2, [r7, #13]
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	32ae      	adds	r2, #174	@ 0xae
 8011190:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011194:	689b      	ldr	r3, [r3, #8]
 8011196:	2b00      	cmp	r3, #0
 8011198:	f000 8163 	beq.w	8011462 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 801119c:	7b7a      	ldrb	r2, [r7, #13]
 801119e:	687b      	ldr	r3, [r7, #4]
 80111a0:	32ae      	adds	r2, #174	@ 0xae
 80111a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80111a6:	689b      	ldr	r3, [r3, #8]
 80111a8:	6839      	ldr	r1, [r7, #0]
 80111aa:	6878      	ldr	r0, [r7, #4]
 80111ac:	4798      	blx	r3
 80111ae:	4603      	mov	r3, r0
 80111b0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80111b2:	e156      	b.n	8011462 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80111b4:	683b      	ldr	r3, [r7, #0]
 80111b6:	785b      	ldrb	r3, [r3, #1]
 80111b8:	2b03      	cmp	r3, #3
 80111ba:	d008      	beq.n	80111ce <USBD_StdEPReq+0x9a>
 80111bc:	2b03      	cmp	r3, #3
 80111be:	f300 8145 	bgt.w	801144c <USBD_StdEPReq+0x318>
 80111c2:	2b00      	cmp	r3, #0
 80111c4:	f000 809b 	beq.w	80112fe <USBD_StdEPReq+0x1ca>
 80111c8:	2b01      	cmp	r3, #1
 80111ca:	d03c      	beq.n	8011246 <USBD_StdEPReq+0x112>
 80111cc:	e13e      	b.n	801144c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80111ce:	687b      	ldr	r3, [r7, #4]
 80111d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80111d4:	b2db      	uxtb	r3, r3
 80111d6:	2b02      	cmp	r3, #2
 80111d8:	d002      	beq.n	80111e0 <USBD_StdEPReq+0xac>
 80111da:	2b03      	cmp	r3, #3
 80111dc:	d016      	beq.n	801120c <USBD_StdEPReq+0xd8>
 80111de:	e02c      	b.n	801123a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80111e0:	7bbb      	ldrb	r3, [r7, #14]
 80111e2:	2b00      	cmp	r3, #0
 80111e4:	d00d      	beq.n	8011202 <USBD_StdEPReq+0xce>
 80111e6:	7bbb      	ldrb	r3, [r7, #14]
 80111e8:	2b80      	cmp	r3, #128	@ 0x80
 80111ea:	d00a      	beq.n	8011202 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80111ec:	7bbb      	ldrb	r3, [r7, #14]
 80111ee:	4619      	mov	r1, r3
 80111f0:	6878      	ldr	r0, [r7, #4]
 80111f2:	f001 f9cf 	bl	8012594 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80111f6:	2180      	movs	r1, #128	@ 0x80
 80111f8:	6878      	ldr	r0, [r7, #4]
 80111fa:	f001 f9cb 	bl	8012594 <USBD_LL_StallEP>
 80111fe:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8011200:	e020      	b.n	8011244 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8011202:	6839      	ldr	r1, [r7, #0]
 8011204:	6878      	ldr	r0, [r7, #4]
 8011206:	f000 fca4 	bl	8011b52 <USBD_CtlError>
              break;
 801120a:	e01b      	b.n	8011244 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801120c:	683b      	ldr	r3, [r7, #0]
 801120e:	885b      	ldrh	r3, [r3, #2]
 8011210:	2b00      	cmp	r3, #0
 8011212:	d10e      	bne.n	8011232 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8011214:	7bbb      	ldrb	r3, [r7, #14]
 8011216:	2b00      	cmp	r3, #0
 8011218:	d00b      	beq.n	8011232 <USBD_StdEPReq+0xfe>
 801121a:	7bbb      	ldrb	r3, [r7, #14]
 801121c:	2b80      	cmp	r3, #128	@ 0x80
 801121e:	d008      	beq.n	8011232 <USBD_StdEPReq+0xfe>
 8011220:	683b      	ldr	r3, [r7, #0]
 8011222:	88db      	ldrh	r3, [r3, #6]
 8011224:	2b00      	cmp	r3, #0
 8011226:	d104      	bne.n	8011232 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8011228:	7bbb      	ldrb	r3, [r7, #14]
 801122a:	4619      	mov	r1, r3
 801122c:	6878      	ldr	r0, [r7, #4]
 801122e:	f001 f9b1 	bl	8012594 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8011232:	6878      	ldr	r0, [r7, #4]
 8011234:	f000 fd64 	bl	8011d00 <USBD_CtlSendStatus>

              break;
 8011238:	e004      	b.n	8011244 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 801123a:	6839      	ldr	r1, [r7, #0]
 801123c:	6878      	ldr	r0, [r7, #4]
 801123e:	f000 fc88 	bl	8011b52 <USBD_CtlError>
              break;
 8011242:	bf00      	nop
          }
          break;
 8011244:	e107      	b.n	8011456 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8011246:	687b      	ldr	r3, [r7, #4]
 8011248:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801124c:	b2db      	uxtb	r3, r3
 801124e:	2b02      	cmp	r3, #2
 8011250:	d002      	beq.n	8011258 <USBD_StdEPReq+0x124>
 8011252:	2b03      	cmp	r3, #3
 8011254:	d016      	beq.n	8011284 <USBD_StdEPReq+0x150>
 8011256:	e04b      	b.n	80112f0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011258:	7bbb      	ldrb	r3, [r7, #14]
 801125a:	2b00      	cmp	r3, #0
 801125c:	d00d      	beq.n	801127a <USBD_StdEPReq+0x146>
 801125e:	7bbb      	ldrb	r3, [r7, #14]
 8011260:	2b80      	cmp	r3, #128	@ 0x80
 8011262:	d00a      	beq.n	801127a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8011264:	7bbb      	ldrb	r3, [r7, #14]
 8011266:	4619      	mov	r1, r3
 8011268:	6878      	ldr	r0, [r7, #4]
 801126a:	f001 f993 	bl	8012594 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801126e:	2180      	movs	r1, #128	@ 0x80
 8011270:	6878      	ldr	r0, [r7, #4]
 8011272:	f001 f98f 	bl	8012594 <USBD_LL_StallEP>
 8011276:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8011278:	e040      	b.n	80112fc <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 801127a:	6839      	ldr	r1, [r7, #0]
 801127c:	6878      	ldr	r0, [r7, #4]
 801127e:	f000 fc68 	bl	8011b52 <USBD_CtlError>
              break;
 8011282:	e03b      	b.n	80112fc <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8011284:	683b      	ldr	r3, [r7, #0]
 8011286:	885b      	ldrh	r3, [r3, #2]
 8011288:	2b00      	cmp	r3, #0
 801128a:	d136      	bne.n	80112fa <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 801128c:	7bbb      	ldrb	r3, [r7, #14]
 801128e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011292:	2b00      	cmp	r3, #0
 8011294:	d004      	beq.n	80112a0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8011296:	7bbb      	ldrb	r3, [r7, #14]
 8011298:	4619      	mov	r1, r3
 801129a:	6878      	ldr	r0, [r7, #4]
 801129c:	f001 f999 	bl	80125d2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80112a0:	6878      	ldr	r0, [r7, #4]
 80112a2:	f000 fd2d 	bl	8011d00 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80112a6:	7bbb      	ldrb	r3, [r7, #14]
 80112a8:	4619      	mov	r1, r3
 80112aa:	6878      	ldr	r0, [r7, #4]
 80112ac:	f7ff fde4 	bl	8010e78 <USBD_CoreFindEP>
 80112b0:	4603      	mov	r3, r0
 80112b2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80112b4:	7b7b      	ldrb	r3, [r7, #13]
 80112b6:	2bff      	cmp	r3, #255	@ 0xff
 80112b8:	d01f      	beq.n	80112fa <USBD_StdEPReq+0x1c6>
 80112ba:	7b7b      	ldrb	r3, [r7, #13]
 80112bc:	2b00      	cmp	r3, #0
 80112be:	d11c      	bne.n	80112fa <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80112c0:	7b7a      	ldrb	r2, [r7, #13]
 80112c2:	687b      	ldr	r3, [r7, #4]
 80112c4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80112c8:	7b7a      	ldrb	r2, [r7, #13]
 80112ca:	687b      	ldr	r3, [r7, #4]
 80112cc:	32ae      	adds	r2, #174	@ 0xae
 80112ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80112d2:	689b      	ldr	r3, [r3, #8]
 80112d4:	2b00      	cmp	r3, #0
 80112d6:	d010      	beq.n	80112fa <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80112d8:	7b7a      	ldrb	r2, [r7, #13]
 80112da:	687b      	ldr	r3, [r7, #4]
 80112dc:	32ae      	adds	r2, #174	@ 0xae
 80112de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80112e2:	689b      	ldr	r3, [r3, #8]
 80112e4:	6839      	ldr	r1, [r7, #0]
 80112e6:	6878      	ldr	r0, [r7, #4]
 80112e8:	4798      	blx	r3
 80112ea:	4603      	mov	r3, r0
 80112ec:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80112ee:	e004      	b.n	80112fa <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80112f0:	6839      	ldr	r1, [r7, #0]
 80112f2:	6878      	ldr	r0, [r7, #4]
 80112f4:	f000 fc2d 	bl	8011b52 <USBD_CtlError>
              break;
 80112f8:	e000      	b.n	80112fc <USBD_StdEPReq+0x1c8>
              break;
 80112fa:	bf00      	nop
          }
          break;
 80112fc:	e0ab      	b.n	8011456 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80112fe:	687b      	ldr	r3, [r7, #4]
 8011300:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011304:	b2db      	uxtb	r3, r3
 8011306:	2b02      	cmp	r3, #2
 8011308:	d002      	beq.n	8011310 <USBD_StdEPReq+0x1dc>
 801130a:	2b03      	cmp	r3, #3
 801130c:	d032      	beq.n	8011374 <USBD_StdEPReq+0x240>
 801130e:	e097      	b.n	8011440 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011310:	7bbb      	ldrb	r3, [r7, #14]
 8011312:	2b00      	cmp	r3, #0
 8011314:	d007      	beq.n	8011326 <USBD_StdEPReq+0x1f2>
 8011316:	7bbb      	ldrb	r3, [r7, #14]
 8011318:	2b80      	cmp	r3, #128	@ 0x80
 801131a:	d004      	beq.n	8011326 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 801131c:	6839      	ldr	r1, [r7, #0]
 801131e:	6878      	ldr	r0, [r7, #4]
 8011320:	f000 fc17 	bl	8011b52 <USBD_CtlError>
                break;
 8011324:	e091      	b.n	801144a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011326:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801132a:	2b00      	cmp	r3, #0
 801132c:	da0b      	bge.n	8011346 <USBD_StdEPReq+0x212>
 801132e:	7bbb      	ldrb	r3, [r7, #14]
 8011330:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8011334:	4613      	mov	r3, r2
 8011336:	009b      	lsls	r3, r3, #2
 8011338:	4413      	add	r3, r2
 801133a:	009b      	lsls	r3, r3, #2
 801133c:	3310      	adds	r3, #16
 801133e:	687a      	ldr	r2, [r7, #4]
 8011340:	4413      	add	r3, r2
 8011342:	3304      	adds	r3, #4
 8011344:	e00b      	b.n	801135e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8011346:	7bbb      	ldrb	r3, [r7, #14]
 8011348:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801134c:	4613      	mov	r3, r2
 801134e:	009b      	lsls	r3, r3, #2
 8011350:	4413      	add	r3, r2
 8011352:	009b      	lsls	r3, r3, #2
 8011354:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8011358:	687a      	ldr	r2, [r7, #4]
 801135a:	4413      	add	r3, r2
 801135c:	3304      	adds	r3, #4
 801135e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8011360:	68bb      	ldr	r3, [r7, #8]
 8011362:	2200      	movs	r2, #0
 8011364:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8011366:	68bb      	ldr	r3, [r7, #8]
 8011368:	2202      	movs	r2, #2
 801136a:	4619      	mov	r1, r3
 801136c:	6878      	ldr	r0, [r7, #4]
 801136e:	f000 fc6d 	bl	8011c4c <USBD_CtlSendData>
              break;
 8011372:	e06a      	b.n	801144a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8011374:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011378:	2b00      	cmp	r3, #0
 801137a:	da11      	bge.n	80113a0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801137c:	7bbb      	ldrb	r3, [r7, #14]
 801137e:	f003 020f 	and.w	r2, r3, #15
 8011382:	6879      	ldr	r1, [r7, #4]
 8011384:	4613      	mov	r3, r2
 8011386:	009b      	lsls	r3, r3, #2
 8011388:	4413      	add	r3, r2
 801138a:	009b      	lsls	r3, r3, #2
 801138c:	440b      	add	r3, r1
 801138e:	3324      	adds	r3, #36	@ 0x24
 8011390:	881b      	ldrh	r3, [r3, #0]
 8011392:	2b00      	cmp	r3, #0
 8011394:	d117      	bne.n	80113c6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8011396:	6839      	ldr	r1, [r7, #0]
 8011398:	6878      	ldr	r0, [r7, #4]
 801139a:	f000 fbda 	bl	8011b52 <USBD_CtlError>
                  break;
 801139e:	e054      	b.n	801144a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80113a0:	7bbb      	ldrb	r3, [r7, #14]
 80113a2:	f003 020f 	and.w	r2, r3, #15
 80113a6:	6879      	ldr	r1, [r7, #4]
 80113a8:	4613      	mov	r3, r2
 80113aa:	009b      	lsls	r3, r3, #2
 80113ac:	4413      	add	r3, r2
 80113ae:	009b      	lsls	r3, r3, #2
 80113b0:	440b      	add	r3, r1
 80113b2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80113b6:	881b      	ldrh	r3, [r3, #0]
 80113b8:	2b00      	cmp	r3, #0
 80113ba:	d104      	bne.n	80113c6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80113bc:	6839      	ldr	r1, [r7, #0]
 80113be:	6878      	ldr	r0, [r7, #4]
 80113c0:	f000 fbc7 	bl	8011b52 <USBD_CtlError>
                  break;
 80113c4:	e041      	b.n	801144a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80113c6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80113ca:	2b00      	cmp	r3, #0
 80113cc:	da0b      	bge.n	80113e6 <USBD_StdEPReq+0x2b2>
 80113ce:	7bbb      	ldrb	r3, [r7, #14]
 80113d0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80113d4:	4613      	mov	r3, r2
 80113d6:	009b      	lsls	r3, r3, #2
 80113d8:	4413      	add	r3, r2
 80113da:	009b      	lsls	r3, r3, #2
 80113dc:	3310      	adds	r3, #16
 80113de:	687a      	ldr	r2, [r7, #4]
 80113e0:	4413      	add	r3, r2
 80113e2:	3304      	adds	r3, #4
 80113e4:	e00b      	b.n	80113fe <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80113e6:	7bbb      	ldrb	r3, [r7, #14]
 80113e8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80113ec:	4613      	mov	r3, r2
 80113ee:	009b      	lsls	r3, r3, #2
 80113f0:	4413      	add	r3, r2
 80113f2:	009b      	lsls	r3, r3, #2
 80113f4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80113f8:	687a      	ldr	r2, [r7, #4]
 80113fa:	4413      	add	r3, r2
 80113fc:	3304      	adds	r3, #4
 80113fe:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8011400:	7bbb      	ldrb	r3, [r7, #14]
 8011402:	2b00      	cmp	r3, #0
 8011404:	d002      	beq.n	801140c <USBD_StdEPReq+0x2d8>
 8011406:	7bbb      	ldrb	r3, [r7, #14]
 8011408:	2b80      	cmp	r3, #128	@ 0x80
 801140a:	d103      	bne.n	8011414 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 801140c:	68bb      	ldr	r3, [r7, #8]
 801140e:	2200      	movs	r2, #0
 8011410:	601a      	str	r2, [r3, #0]
 8011412:	e00e      	b.n	8011432 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8011414:	7bbb      	ldrb	r3, [r7, #14]
 8011416:	4619      	mov	r1, r3
 8011418:	6878      	ldr	r0, [r7, #4]
 801141a:	f001 f8f9 	bl	8012610 <USBD_LL_IsStallEP>
 801141e:	4603      	mov	r3, r0
 8011420:	2b00      	cmp	r3, #0
 8011422:	d003      	beq.n	801142c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8011424:	68bb      	ldr	r3, [r7, #8]
 8011426:	2201      	movs	r2, #1
 8011428:	601a      	str	r2, [r3, #0]
 801142a:	e002      	b.n	8011432 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 801142c:	68bb      	ldr	r3, [r7, #8]
 801142e:	2200      	movs	r2, #0
 8011430:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8011432:	68bb      	ldr	r3, [r7, #8]
 8011434:	2202      	movs	r2, #2
 8011436:	4619      	mov	r1, r3
 8011438:	6878      	ldr	r0, [r7, #4]
 801143a:	f000 fc07 	bl	8011c4c <USBD_CtlSendData>
              break;
 801143e:	e004      	b.n	801144a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8011440:	6839      	ldr	r1, [r7, #0]
 8011442:	6878      	ldr	r0, [r7, #4]
 8011444:	f000 fb85 	bl	8011b52 <USBD_CtlError>
              break;
 8011448:	bf00      	nop
          }
          break;
 801144a:	e004      	b.n	8011456 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 801144c:	6839      	ldr	r1, [r7, #0]
 801144e:	6878      	ldr	r0, [r7, #4]
 8011450:	f000 fb7f 	bl	8011b52 <USBD_CtlError>
          break;
 8011454:	bf00      	nop
      }
      break;
 8011456:	e005      	b.n	8011464 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8011458:	6839      	ldr	r1, [r7, #0]
 801145a:	6878      	ldr	r0, [r7, #4]
 801145c:	f000 fb79 	bl	8011b52 <USBD_CtlError>
      break;
 8011460:	e000      	b.n	8011464 <USBD_StdEPReq+0x330>
      break;
 8011462:	bf00      	nop
  }

  return ret;
 8011464:	7bfb      	ldrb	r3, [r7, #15]
}
 8011466:	4618      	mov	r0, r3
 8011468:	3710      	adds	r7, #16
 801146a:	46bd      	mov	sp, r7
 801146c:	bd80      	pop	{r7, pc}
	...

08011470 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011470:	b580      	push	{r7, lr}
 8011472:	b084      	sub	sp, #16
 8011474:	af00      	add	r7, sp, #0
 8011476:	6078      	str	r0, [r7, #4]
 8011478:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801147a:	2300      	movs	r3, #0
 801147c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 801147e:	2300      	movs	r3, #0
 8011480:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8011482:	2300      	movs	r3, #0
 8011484:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8011486:	683b      	ldr	r3, [r7, #0]
 8011488:	885b      	ldrh	r3, [r3, #2]
 801148a:	0a1b      	lsrs	r3, r3, #8
 801148c:	b29b      	uxth	r3, r3
 801148e:	3b01      	subs	r3, #1
 8011490:	2b0e      	cmp	r3, #14
 8011492:	f200 8152 	bhi.w	801173a <USBD_GetDescriptor+0x2ca>
 8011496:	a201      	add	r2, pc, #4	@ (adr r2, 801149c <USBD_GetDescriptor+0x2c>)
 8011498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801149c:	0801150d 	.word	0x0801150d
 80114a0:	08011525 	.word	0x08011525
 80114a4:	08011565 	.word	0x08011565
 80114a8:	0801173b 	.word	0x0801173b
 80114ac:	0801173b 	.word	0x0801173b
 80114b0:	080116db 	.word	0x080116db
 80114b4:	08011707 	.word	0x08011707
 80114b8:	0801173b 	.word	0x0801173b
 80114bc:	0801173b 	.word	0x0801173b
 80114c0:	0801173b 	.word	0x0801173b
 80114c4:	0801173b 	.word	0x0801173b
 80114c8:	0801173b 	.word	0x0801173b
 80114cc:	0801173b 	.word	0x0801173b
 80114d0:	0801173b 	.word	0x0801173b
 80114d4:	080114d9 	.word	0x080114d9
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80114d8:	687b      	ldr	r3, [r7, #4]
 80114da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80114de:	69db      	ldr	r3, [r3, #28]
 80114e0:	2b00      	cmp	r3, #0
 80114e2:	d00b      	beq.n	80114fc <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80114ea:	69db      	ldr	r3, [r3, #28]
 80114ec:	687a      	ldr	r2, [r7, #4]
 80114ee:	7c12      	ldrb	r2, [r2, #16]
 80114f0:	f107 0108 	add.w	r1, r7, #8
 80114f4:	4610      	mov	r0, r2
 80114f6:	4798      	blx	r3
 80114f8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80114fa:	e126      	b.n	801174a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80114fc:	6839      	ldr	r1, [r7, #0]
 80114fe:	6878      	ldr	r0, [r7, #4]
 8011500:	f000 fb27 	bl	8011b52 <USBD_CtlError>
        err++;
 8011504:	7afb      	ldrb	r3, [r7, #11]
 8011506:	3301      	adds	r3, #1
 8011508:	72fb      	strb	r3, [r7, #11]
      break;
 801150a:	e11e      	b.n	801174a <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 801150c:	687b      	ldr	r3, [r7, #4]
 801150e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011512:	681b      	ldr	r3, [r3, #0]
 8011514:	687a      	ldr	r2, [r7, #4]
 8011516:	7c12      	ldrb	r2, [r2, #16]
 8011518:	f107 0108 	add.w	r1, r7, #8
 801151c:	4610      	mov	r0, r2
 801151e:	4798      	blx	r3
 8011520:	60f8      	str	r0, [r7, #12]
      break;
 8011522:	e112      	b.n	801174a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011524:	687b      	ldr	r3, [r7, #4]
 8011526:	7c1b      	ldrb	r3, [r3, #16]
 8011528:	2b00      	cmp	r3, #0
 801152a:	d10d      	bne.n	8011548 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011532:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011534:	f107 0208 	add.w	r2, r7, #8
 8011538:	4610      	mov	r0, r2
 801153a:	4798      	blx	r3
 801153c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801153e:	68fb      	ldr	r3, [r7, #12]
 8011540:	3301      	adds	r3, #1
 8011542:	2202      	movs	r2, #2
 8011544:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8011546:	e100      	b.n	801174a <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801154e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011550:	f107 0208 	add.w	r2, r7, #8
 8011554:	4610      	mov	r0, r2
 8011556:	4798      	blx	r3
 8011558:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801155a:	68fb      	ldr	r3, [r7, #12]
 801155c:	3301      	adds	r3, #1
 801155e:	2202      	movs	r2, #2
 8011560:	701a      	strb	r2, [r3, #0]
      break;
 8011562:	e0f2      	b.n	801174a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8011564:	683b      	ldr	r3, [r7, #0]
 8011566:	885b      	ldrh	r3, [r3, #2]
 8011568:	b2db      	uxtb	r3, r3
 801156a:	2b05      	cmp	r3, #5
 801156c:	f200 80ac 	bhi.w	80116c8 <USBD_GetDescriptor+0x258>
 8011570:	a201      	add	r2, pc, #4	@ (adr r2, 8011578 <USBD_GetDescriptor+0x108>)
 8011572:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011576:	bf00      	nop
 8011578:	08011591 	.word	0x08011591
 801157c:	080115c5 	.word	0x080115c5
 8011580:	080115f9 	.word	0x080115f9
 8011584:	0801162d 	.word	0x0801162d
 8011588:	08011661 	.word	0x08011661
 801158c:	08011695 	.word	0x08011695
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011596:	685b      	ldr	r3, [r3, #4]
 8011598:	2b00      	cmp	r3, #0
 801159a:	d00b      	beq.n	80115b4 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 801159c:	687b      	ldr	r3, [r7, #4]
 801159e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80115a2:	685b      	ldr	r3, [r3, #4]
 80115a4:	687a      	ldr	r2, [r7, #4]
 80115a6:	7c12      	ldrb	r2, [r2, #16]
 80115a8:	f107 0108 	add.w	r1, r7, #8
 80115ac:	4610      	mov	r0, r2
 80115ae:	4798      	blx	r3
 80115b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80115b2:	e091      	b.n	80116d8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80115b4:	6839      	ldr	r1, [r7, #0]
 80115b6:	6878      	ldr	r0, [r7, #4]
 80115b8:	f000 facb 	bl	8011b52 <USBD_CtlError>
            err++;
 80115bc:	7afb      	ldrb	r3, [r7, #11]
 80115be:	3301      	adds	r3, #1
 80115c0:	72fb      	strb	r3, [r7, #11]
          break;
 80115c2:	e089      	b.n	80116d8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80115c4:	687b      	ldr	r3, [r7, #4]
 80115c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80115ca:	689b      	ldr	r3, [r3, #8]
 80115cc:	2b00      	cmp	r3, #0
 80115ce:	d00b      	beq.n	80115e8 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80115d0:	687b      	ldr	r3, [r7, #4]
 80115d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80115d6:	689b      	ldr	r3, [r3, #8]
 80115d8:	687a      	ldr	r2, [r7, #4]
 80115da:	7c12      	ldrb	r2, [r2, #16]
 80115dc:	f107 0108 	add.w	r1, r7, #8
 80115e0:	4610      	mov	r0, r2
 80115e2:	4798      	blx	r3
 80115e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80115e6:	e077      	b.n	80116d8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80115e8:	6839      	ldr	r1, [r7, #0]
 80115ea:	6878      	ldr	r0, [r7, #4]
 80115ec:	f000 fab1 	bl	8011b52 <USBD_CtlError>
            err++;
 80115f0:	7afb      	ldrb	r3, [r7, #11]
 80115f2:	3301      	adds	r3, #1
 80115f4:	72fb      	strb	r3, [r7, #11]
          break;
 80115f6:	e06f      	b.n	80116d8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80115f8:	687b      	ldr	r3, [r7, #4]
 80115fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80115fe:	68db      	ldr	r3, [r3, #12]
 8011600:	2b00      	cmp	r3, #0
 8011602:	d00b      	beq.n	801161c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801160a:	68db      	ldr	r3, [r3, #12]
 801160c:	687a      	ldr	r2, [r7, #4]
 801160e:	7c12      	ldrb	r2, [r2, #16]
 8011610:	f107 0108 	add.w	r1, r7, #8
 8011614:	4610      	mov	r0, r2
 8011616:	4798      	blx	r3
 8011618:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801161a:	e05d      	b.n	80116d8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801161c:	6839      	ldr	r1, [r7, #0]
 801161e:	6878      	ldr	r0, [r7, #4]
 8011620:	f000 fa97 	bl	8011b52 <USBD_CtlError>
            err++;
 8011624:	7afb      	ldrb	r3, [r7, #11]
 8011626:	3301      	adds	r3, #1
 8011628:	72fb      	strb	r3, [r7, #11]
          break;
 801162a:	e055      	b.n	80116d8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 801162c:	687b      	ldr	r3, [r7, #4]
 801162e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011632:	691b      	ldr	r3, [r3, #16]
 8011634:	2b00      	cmp	r3, #0
 8011636:	d00b      	beq.n	8011650 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8011638:	687b      	ldr	r3, [r7, #4]
 801163a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801163e:	691b      	ldr	r3, [r3, #16]
 8011640:	687a      	ldr	r2, [r7, #4]
 8011642:	7c12      	ldrb	r2, [r2, #16]
 8011644:	f107 0108 	add.w	r1, r7, #8
 8011648:	4610      	mov	r0, r2
 801164a:	4798      	blx	r3
 801164c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801164e:	e043      	b.n	80116d8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8011650:	6839      	ldr	r1, [r7, #0]
 8011652:	6878      	ldr	r0, [r7, #4]
 8011654:	f000 fa7d 	bl	8011b52 <USBD_CtlError>
            err++;
 8011658:	7afb      	ldrb	r3, [r7, #11]
 801165a:	3301      	adds	r3, #1
 801165c:	72fb      	strb	r3, [r7, #11]
          break;
 801165e:	e03b      	b.n	80116d8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8011660:	687b      	ldr	r3, [r7, #4]
 8011662:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011666:	695b      	ldr	r3, [r3, #20]
 8011668:	2b00      	cmp	r3, #0
 801166a:	d00b      	beq.n	8011684 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011672:	695b      	ldr	r3, [r3, #20]
 8011674:	687a      	ldr	r2, [r7, #4]
 8011676:	7c12      	ldrb	r2, [r2, #16]
 8011678:	f107 0108 	add.w	r1, r7, #8
 801167c:	4610      	mov	r0, r2
 801167e:	4798      	blx	r3
 8011680:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011682:	e029      	b.n	80116d8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8011684:	6839      	ldr	r1, [r7, #0]
 8011686:	6878      	ldr	r0, [r7, #4]
 8011688:	f000 fa63 	bl	8011b52 <USBD_CtlError>
            err++;
 801168c:	7afb      	ldrb	r3, [r7, #11]
 801168e:	3301      	adds	r3, #1
 8011690:	72fb      	strb	r3, [r7, #11]
          break;
 8011692:	e021      	b.n	80116d8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8011694:	687b      	ldr	r3, [r7, #4]
 8011696:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801169a:	699b      	ldr	r3, [r3, #24]
 801169c:	2b00      	cmp	r3, #0
 801169e:	d00b      	beq.n	80116b8 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80116a6:	699b      	ldr	r3, [r3, #24]
 80116a8:	687a      	ldr	r2, [r7, #4]
 80116aa:	7c12      	ldrb	r2, [r2, #16]
 80116ac:	f107 0108 	add.w	r1, r7, #8
 80116b0:	4610      	mov	r0, r2
 80116b2:	4798      	blx	r3
 80116b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80116b6:	e00f      	b.n	80116d8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80116b8:	6839      	ldr	r1, [r7, #0]
 80116ba:	6878      	ldr	r0, [r7, #4]
 80116bc:	f000 fa49 	bl	8011b52 <USBD_CtlError>
            err++;
 80116c0:	7afb      	ldrb	r3, [r7, #11]
 80116c2:	3301      	adds	r3, #1
 80116c4:	72fb      	strb	r3, [r7, #11]
          break;
 80116c6:	e007      	b.n	80116d8 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80116c8:	6839      	ldr	r1, [r7, #0]
 80116ca:	6878      	ldr	r0, [r7, #4]
 80116cc:	f000 fa41 	bl	8011b52 <USBD_CtlError>
          err++;
 80116d0:	7afb      	ldrb	r3, [r7, #11]
 80116d2:	3301      	adds	r3, #1
 80116d4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80116d6:	bf00      	nop
      }
      break;
 80116d8:	e037      	b.n	801174a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80116da:	687b      	ldr	r3, [r7, #4]
 80116dc:	7c1b      	ldrb	r3, [r3, #16]
 80116de:	2b00      	cmp	r3, #0
 80116e0:	d109      	bne.n	80116f6 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80116e2:	687b      	ldr	r3, [r7, #4]
 80116e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80116e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80116ea:	f107 0208 	add.w	r2, r7, #8
 80116ee:	4610      	mov	r0, r2
 80116f0:	4798      	blx	r3
 80116f2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80116f4:	e029      	b.n	801174a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80116f6:	6839      	ldr	r1, [r7, #0]
 80116f8:	6878      	ldr	r0, [r7, #4]
 80116fa:	f000 fa2a 	bl	8011b52 <USBD_CtlError>
        err++;
 80116fe:	7afb      	ldrb	r3, [r7, #11]
 8011700:	3301      	adds	r3, #1
 8011702:	72fb      	strb	r3, [r7, #11]
      break;
 8011704:	e021      	b.n	801174a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	7c1b      	ldrb	r3, [r3, #16]
 801170a:	2b00      	cmp	r3, #0
 801170c:	d10d      	bne.n	801172a <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 801170e:	687b      	ldr	r3, [r7, #4]
 8011710:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011716:	f107 0208 	add.w	r2, r7, #8
 801171a:	4610      	mov	r0, r2
 801171c:	4798      	blx	r3
 801171e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8011720:	68fb      	ldr	r3, [r7, #12]
 8011722:	3301      	adds	r3, #1
 8011724:	2207      	movs	r2, #7
 8011726:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011728:	e00f      	b.n	801174a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 801172a:	6839      	ldr	r1, [r7, #0]
 801172c:	6878      	ldr	r0, [r7, #4]
 801172e:	f000 fa10 	bl	8011b52 <USBD_CtlError>
        err++;
 8011732:	7afb      	ldrb	r3, [r7, #11]
 8011734:	3301      	adds	r3, #1
 8011736:	72fb      	strb	r3, [r7, #11]
      break;
 8011738:	e007      	b.n	801174a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 801173a:	6839      	ldr	r1, [r7, #0]
 801173c:	6878      	ldr	r0, [r7, #4]
 801173e:	f000 fa08 	bl	8011b52 <USBD_CtlError>
      err++;
 8011742:	7afb      	ldrb	r3, [r7, #11]
 8011744:	3301      	adds	r3, #1
 8011746:	72fb      	strb	r3, [r7, #11]
      break;
 8011748:	bf00      	nop
  }

  if (err != 0U)
 801174a:	7afb      	ldrb	r3, [r7, #11]
 801174c:	2b00      	cmp	r3, #0
 801174e:	d11e      	bne.n	801178e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8011750:	683b      	ldr	r3, [r7, #0]
 8011752:	88db      	ldrh	r3, [r3, #6]
 8011754:	2b00      	cmp	r3, #0
 8011756:	d016      	beq.n	8011786 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8011758:	893b      	ldrh	r3, [r7, #8]
 801175a:	2b00      	cmp	r3, #0
 801175c:	d00e      	beq.n	801177c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 801175e:	683b      	ldr	r3, [r7, #0]
 8011760:	88da      	ldrh	r2, [r3, #6]
 8011762:	893b      	ldrh	r3, [r7, #8]
 8011764:	4293      	cmp	r3, r2
 8011766:	bf28      	it	cs
 8011768:	4613      	movcs	r3, r2
 801176a:	b29b      	uxth	r3, r3
 801176c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801176e:	893b      	ldrh	r3, [r7, #8]
 8011770:	461a      	mov	r2, r3
 8011772:	68f9      	ldr	r1, [r7, #12]
 8011774:	6878      	ldr	r0, [r7, #4]
 8011776:	f000 fa69 	bl	8011c4c <USBD_CtlSendData>
 801177a:	e009      	b.n	8011790 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 801177c:	6839      	ldr	r1, [r7, #0]
 801177e:	6878      	ldr	r0, [r7, #4]
 8011780:	f000 f9e7 	bl	8011b52 <USBD_CtlError>
 8011784:	e004      	b.n	8011790 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8011786:	6878      	ldr	r0, [r7, #4]
 8011788:	f000 faba 	bl	8011d00 <USBD_CtlSendStatus>
 801178c:	e000      	b.n	8011790 <USBD_GetDescriptor+0x320>
    return;
 801178e:	bf00      	nop
  }
}
 8011790:	3710      	adds	r7, #16
 8011792:	46bd      	mov	sp, r7
 8011794:	bd80      	pop	{r7, pc}
 8011796:	bf00      	nop

08011798 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011798:	b580      	push	{r7, lr}
 801179a:	b084      	sub	sp, #16
 801179c:	af00      	add	r7, sp, #0
 801179e:	6078      	str	r0, [r7, #4]
 80117a0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80117a2:	683b      	ldr	r3, [r7, #0]
 80117a4:	889b      	ldrh	r3, [r3, #4]
 80117a6:	2b00      	cmp	r3, #0
 80117a8:	d131      	bne.n	801180e <USBD_SetAddress+0x76>
 80117aa:	683b      	ldr	r3, [r7, #0]
 80117ac:	88db      	ldrh	r3, [r3, #6]
 80117ae:	2b00      	cmp	r3, #0
 80117b0:	d12d      	bne.n	801180e <USBD_SetAddress+0x76>
 80117b2:	683b      	ldr	r3, [r7, #0]
 80117b4:	885b      	ldrh	r3, [r3, #2]
 80117b6:	2b7f      	cmp	r3, #127	@ 0x7f
 80117b8:	d829      	bhi.n	801180e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80117ba:	683b      	ldr	r3, [r7, #0]
 80117bc:	885b      	ldrh	r3, [r3, #2]
 80117be:	b2db      	uxtb	r3, r3
 80117c0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80117c4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80117c6:	687b      	ldr	r3, [r7, #4]
 80117c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80117cc:	b2db      	uxtb	r3, r3
 80117ce:	2b03      	cmp	r3, #3
 80117d0:	d104      	bne.n	80117dc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80117d2:	6839      	ldr	r1, [r7, #0]
 80117d4:	6878      	ldr	r0, [r7, #4]
 80117d6:	f000 f9bc 	bl	8011b52 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80117da:	e01d      	b.n	8011818 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80117dc:	687b      	ldr	r3, [r7, #4]
 80117de:	7bfa      	ldrb	r2, [r7, #15]
 80117e0:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80117e4:	7bfb      	ldrb	r3, [r7, #15]
 80117e6:	4619      	mov	r1, r3
 80117e8:	6878      	ldr	r0, [r7, #4]
 80117ea:	f000 ff3d 	bl	8012668 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80117ee:	6878      	ldr	r0, [r7, #4]
 80117f0:	f000 fa86 	bl	8011d00 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80117f4:	7bfb      	ldrb	r3, [r7, #15]
 80117f6:	2b00      	cmp	r3, #0
 80117f8:	d004      	beq.n	8011804 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80117fa:	687b      	ldr	r3, [r7, #4]
 80117fc:	2202      	movs	r2, #2
 80117fe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011802:	e009      	b.n	8011818 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	2201      	movs	r2, #1
 8011808:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801180c:	e004      	b.n	8011818 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801180e:	6839      	ldr	r1, [r7, #0]
 8011810:	6878      	ldr	r0, [r7, #4]
 8011812:	f000 f99e 	bl	8011b52 <USBD_CtlError>
  }
}
 8011816:	bf00      	nop
 8011818:	bf00      	nop
 801181a:	3710      	adds	r7, #16
 801181c:	46bd      	mov	sp, r7
 801181e:	bd80      	pop	{r7, pc}

08011820 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011820:	b580      	push	{r7, lr}
 8011822:	b084      	sub	sp, #16
 8011824:	af00      	add	r7, sp, #0
 8011826:	6078      	str	r0, [r7, #4]
 8011828:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801182a:	2300      	movs	r3, #0
 801182c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801182e:	683b      	ldr	r3, [r7, #0]
 8011830:	885b      	ldrh	r3, [r3, #2]
 8011832:	b2da      	uxtb	r2, r3
 8011834:	4b4e      	ldr	r3, [pc, #312]	@ (8011970 <USBD_SetConfig+0x150>)
 8011836:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8011838:	4b4d      	ldr	r3, [pc, #308]	@ (8011970 <USBD_SetConfig+0x150>)
 801183a:	781b      	ldrb	r3, [r3, #0]
 801183c:	2b01      	cmp	r3, #1
 801183e:	d905      	bls.n	801184c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8011840:	6839      	ldr	r1, [r7, #0]
 8011842:	6878      	ldr	r0, [r7, #4]
 8011844:	f000 f985 	bl	8011b52 <USBD_CtlError>
    return USBD_FAIL;
 8011848:	2303      	movs	r3, #3
 801184a:	e08c      	b.n	8011966 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011852:	b2db      	uxtb	r3, r3
 8011854:	2b02      	cmp	r3, #2
 8011856:	d002      	beq.n	801185e <USBD_SetConfig+0x3e>
 8011858:	2b03      	cmp	r3, #3
 801185a:	d029      	beq.n	80118b0 <USBD_SetConfig+0x90>
 801185c:	e075      	b.n	801194a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 801185e:	4b44      	ldr	r3, [pc, #272]	@ (8011970 <USBD_SetConfig+0x150>)
 8011860:	781b      	ldrb	r3, [r3, #0]
 8011862:	2b00      	cmp	r3, #0
 8011864:	d020      	beq.n	80118a8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8011866:	4b42      	ldr	r3, [pc, #264]	@ (8011970 <USBD_SetConfig+0x150>)
 8011868:	781b      	ldrb	r3, [r3, #0]
 801186a:	461a      	mov	r2, r3
 801186c:	687b      	ldr	r3, [r7, #4]
 801186e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8011870:	4b3f      	ldr	r3, [pc, #252]	@ (8011970 <USBD_SetConfig+0x150>)
 8011872:	781b      	ldrb	r3, [r3, #0]
 8011874:	4619      	mov	r1, r3
 8011876:	6878      	ldr	r0, [r7, #4]
 8011878:	f7fe ffb9 	bl	80107ee <USBD_SetClassConfig>
 801187c:	4603      	mov	r3, r0
 801187e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8011880:	7bfb      	ldrb	r3, [r7, #15]
 8011882:	2b00      	cmp	r3, #0
 8011884:	d008      	beq.n	8011898 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8011886:	6839      	ldr	r1, [r7, #0]
 8011888:	6878      	ldr	r0, [r7, #4]
 801188a:	f000 f962 	bl	8011b52 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801188e:	687b      	ldr	r3, [r7, #4]
 8011890:	2202      	movs	r2, #2
 8011892:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8011896:	e065      	b.n	8011964 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8011898:	6878      	ldr	r0, [r7, #4]
 801189a:	f000 fa31 	bl	8011d00 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	2203      	movs	r2, #3
 80118a2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80118a6:	e05d      	b.n	8011964 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80118a8:	6878      	ldr	r0, [r7, #4]
 80118aa:	f000 fa29 	bl	8011d00 <USBD_CtlSendStatus>
      break;
 80118ae:	e059      	b.n	8011964 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80118b0:	4b2f      	ldr	r3, [pc, #188]	@ (8011970 <USBD_SetConfig+0x150>)
 80118b2:	781b      	ldrb	r3, [r3, #0]
 80118b4:	2b00      	cmp	r3, #0
 80118b6:	d112      	bne.n	80118de <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80118b8:	687b      	ldr	r3, [r7, #4]
 80118ba:	2202      	movs	r2, #2
 80118bc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80118c0:	4b2b      	ldr	r3, [pc, #172]	@ (8011970 <USBD_SetConfig+0x150>)
 80118c2:	781b      	ldrb	r3, [r3, #0]
 80118c4:	461a      	mov	r2, r3
 80118c6:	687b      	ldr	r3, [r7, #4]
 80118c8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80118ca:	4b29      	ldr	r3, [pc, #164]	@ (8011970 <USBD_SetConfig+0x150>)
 80118cc:	781b      	ldrb	r3, [r3, #0]
 80118ce:	4619      	mov	r1, r3
 80118d0:	6878      	ldr	r0, [r7, #4]
 80118d2:	f7fe ffa8 	bl	8010826 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80118d6:	6878      	ldr	r0, [r7, #4]
 80118d8:	f000 fa12 	bl	8011d00 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80118dc:	e042      	b.n	8011964 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80118de:	4b24      	ldr	r3, [pc, #144]	@ (8011970 <USBD_SetConfig+0x150>)
 80118e0:	781b      	ldrb	r3, [r3, #0]
 80118e2:	461a      	mov	r2, r3
 80118e4:	687b      	ldr	r3, [r7, #4]
 80118e6:	685b      	ldr	r3, [r3, #4]
 80118e8:	429a      	cmp	r2, r3
 80118ea:	d02a      	beq.n	8011942 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80118ec:	687b      	ldr	r3, [r7, #4]
 80118ee:	685b      	ldr	r3, [r3, #4]
 80118f0:	b2db      	uxtb	r3, r3
 80118f2:	4619      	mov	r1, r3
 80118f4:	6878      	ldr	r0, [r7, #4]
 80118f6:	f7fe ff96 	bl	8010826 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80118fa:	4b1d      	ldr	r3, [pc, #116]	@ (8011970 <USBD_SetConfig+0x150>)
 80118fc:	781b      	ldrb	r3, [r3, #0]
 80118fe:	461a      	mov	r2, r3
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8011904:	4b1a      	ldr	r3, [pc, #104]	@ (8011970 <USBD_SetConfig+0x150>)
 8011906:	781b      	ldrb	r3, [r3, #0]
 8011908:	4619      	mov	r1, r3
 801190a:	6878      	ldr	r0, [r7, #4]
 801190c:	f7fe ff6f 	bl	80107ee <USBD_SetClassConfig>
 8011910:	4603      	mov	r3, r0
 8011912:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8011914:	7bfb      	ldrb	r3, [r7, #15]
 8011916:	2b00      	cmp	r3, #0
 8011918:	d00f      	beq.n	801193a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 801191a:	6839      	ldr	r1, [r7, #0]
 801191c:	6878      	ldr	r0, [r7, #4]
 801191e:	f000 f918 	bl	8011b52 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	685b      	ldr	r3, [r3, #4]
 8011926:	b2db      	uxtb	r3, r3
 8011928:	4619      	mov	r1, r3
 801192a:	6878      	ldr	r0, [r7, #4]
 801192c:	f7fe ff7b 	bl	8010826 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8011930:	687b      	ldr	r3, [r7, #4]
 8011932:	2202      	movs	r2, #2
 8011934:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8011938:	e014      	b.n	8011964 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 801193a:	6878      	ldr	r0, [r7, #4]
 801193c:	f000 f9e0 	bl	8011d00 <USBD_CtlSendStatus>
      break;
 8011940:	e010      	b.n	8011964 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8011942:	6878      	ldr	r0, [r7, #4]
 8011944:	f000 f9dc 	bl	8011d00 <USBD_CtlSendStatus>
      break;
 8011948:	e00c      	b.n	8011964 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 801194a:	6839      	ldr	r1, [r7, #0]
 801194c:	6878      	ldr	r0, [r7, #4]
 801194e:	f000 f900 	bl	8011b52 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8011952:	4b07      	ldr	r3, [pc, #28]	@ (8011970 <USBD_SetConfig+0x150>)
 8011954:	781b      	ldrb	r3, [r3, #0]
 8011956:	4619      	mov	r1, r3
 8011958:	6878      	ldr	r0, [r7, #4]
 801195a:	f7fe ff64 	bl	8010826 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 801195e:	2303      	movs	r3, #3
 8011960:	73fb      	strb	r3, [r7, #15]
      break;
 8011962:	bf00      	nop
  }

  return ret;
 8011964:	7bfb      	ldrb	r3, [r7, #15]
}
 8011966:	4618      	mov	r0, r3
 8011968:	3710      	adds	r7, #16
 801196a:	46bd      	mov	sp, r7
 801196c:	bd80      	pop	{r7, pc}
 801196e:	bf00      	nop
 8011970:	2400052c 	.word	0x2400052c

08011974 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011974:	b580      	push	{r7, lr}
 8011976:	b082      	sub	sp, #8
 8011978:	af00      	add	r7, sp, #0
 801197a:	6078      	str	r0, [r7, #4]
 801197c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801197e:	683b      	ldr	r3, [r7, #0]
 8011980:	88db      	ldrh	r3, [r3, #6]
 8011982:	2b01      	cmp	r3, #1
 8011984:	d004      	beq.n	8011990 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8011986:	6839      	ldr	r1, [r7, #0]
 8011988:	6878      	ldr	r0, [r7, #4]
 801198a:	f000 f8e2 	bl	8011b52 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801198e:	e023      	b.n	80119d8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8011990:	687b      	ldr	r3, [r7, #4]
 8011992:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011996:	b2db      	uxtb	r3, r3
 8011998:	2b02      	cmp	r3, #2
 801199a:	dc02      	bgt.n	80119a2 <USBD_GetConfig+0x2e>
 801199c:	2b00      	cmp	r3, #0
 801199e:	dc03      	bgt.n	80119a8 <USBD_GetConfig+0x34>
 80119a0:	e015      	b.n	80119ce <USBD_GetConfig+0x5a>
 80119a2:	2b03      	cmp	r3, #3
 80119a4:	d00b      	beq.n	80119be <USBD_GetConfig+0x4a>
 80119a6:	e012      	b.n	80119ce <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	2200      	movs	r2, #0
 80119ac:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80119ae:	687b      	ldr	r3, [r7, #4]
 80119b0:	3308      	adds	r3, #8
 80119b2:	2201      	movs	r2, #1
 80119b4:	4619      	mov	r1, r3
 80119b6:	6878      	ldr	r0, [r7, #4]
 80119b8:	f000 f948 	bl	8011c4c <USBD_CtlSendData>
        break;
 80119bc:	e00c      	b.n	80119d8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	3304      	adds	r3, #4
 80119c2:	2201      	movs	r2, #1
 80119c4:	4619      	mov	r1, r3
 80119c6:	6878      	ldr	r0, [r7, #4]
 80119c8:	f000 f940 	bl	8011c4c <USBD_CtlSendData>
        break;
 80119cc:	e004      	b.n	80119d8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80119ce:	6839      	ldr	r1, [r7, #0]
 80119d0:	6878      	ldr	r0, [r7, #4]
 80119d2:	f000 f8be 	bl	8011b52 <USBD_CtlError>
        break;
 80119d6:	bf00      	nop
}
 80119d8:	bf00      	nop
 80119da:	3708      	adds	r7, #8
 80119dc:	46bd      	mov	sp, r7
 80119de:	bd80      	pop	{r7, pc}

080119e0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80119e0:	b580      	push	{r7, lr}
 80119e2:	b082      	sub	sp, #8
 80119e4:	af00      	add	r7, sp, #0
 80119e6:	6078      	str	r0, [r7, #4]
 80119e8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80119ea:	687b      	ldr	r3, [r7, #4]
 80119ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80119f0:	b2db      	uxtb	r3, r3
 80119f2:	3b01      	subs	r3, #1
 80119f4:	2b02      	cmp	r3, #2
 80119f6:	d81e      	bhi.n	8011a36 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80119f8:	683b      	ldr	r3, [r7, #0]
 80119fa:	88db      	ldrh	r3, [r3, #6]
 80119fc:	2b02      	cmp	r3, #2
 80119fe:	d004      	beq.n	8011a0a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8011a00:	6839      	ldr	r1, [r7, #0]
 8011a02:	6878      	ldr	r0, [r7, #4]
 8011a04:	f000 f8a5 	bl	8011b52 <USBD_CtlError>
        break;
 8011a08:	e01a      	b.n	8011a40 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8011a0a:	687b      	ldr	r3, [r7, #4]
 8011a0c:	2201      	movs	r2, #1
 8011a0e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8011a10:	687b      	ldr	r3, [r7, #4]
 8011a12:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8011a16:	2b00      	cmp	r3, #0
 8011a18:	d005      	beq.n	8011a26 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8011a1a:	687b      	ldr	r3, [r7, #4]
 8011a1c:	68db      	ldr	r3, [r3, #12]
 8011a1e:	f043 0202 	orr.w	r2, r3, #2
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8011a26:	687b      	ldr	r3, [r7, #4]
 8011a28:	330c      	adds	r3, #12
 8011a2a:	2202      	movs	r2, #2
 8011a2c:	4619      	mov	r1, r3
 8011a2e:	6878      	ldr	r0, [r7, #4]
 8011a30:	f000 f90c 	bl	8011c4c <USBD_CtlSendData>
      break;
 8011a34:	e004      	b.n	8011a40 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8011a36:	6839      	ldr	r1, [r7, #0]
 8011a38:	6878      	ldr	r0, [r7, #4]
 8011a3a:	f000 f88a 	bl	8011b52 <USBD_CtlError>
      break;
 8011a3e:	bf00      	nop
  }
}
 8011a40:	bf00      	nop
 8011a42:	3708      	adds	r7, #8
 8011a44:	46bd      	mov	sp, r7
 8011a46:	bd80      	pop	{r7, pc}

08011a48 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011a48:	b580      	push	{r7, lr}
 8011a4a:	b082      	sub	sp, #8
 8011a4c:	af00      	add	r7, sp, #0
 8011a4e:	6078      	str	r0, [r7, #4]
 8011a50:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8011a52:	683b      	ldr	r3, [r7, #0]
 8011a54:	885b      	ldrh	r3, [r3, #2]
 8011a56:	2b01      	cmp	r3, #1
 8011a58:	d107      	bne.n	8011a6a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8011a5a:	687b      	ldr	r3, [r7, #4]
 8011a5c:	2201      	movs	r2, #1
 8011a5e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8011a62:	6878      	ldr	r0, [r7, #4]
 8011a64:	f000 f94c 	bl	8011d00 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8011a68:	e013      	b.n	8011a92 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8011a6a:	683b      	ldr	r3, [r7, #0]
 8011a6c:	885b      	ldrh	r3, [r3, #2]
 8011a6e:	2b02      	cmp	r3, #2
 8011a70:	d10b      	bne.n	8011a8a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8011a72:	683b      	ldr	r3, [r7, #0]
 8011a74:	889b      	ldrh	r3, [r3, #4]
 8011a76:	0a1b      	lsrs	r3, r3, #8
 8011a78:	b29b      	uxth	r3, r3
 8011a7a:	b2da      	uxtb	r2, r3
 8011a7c:	687b      	ldr	r3, [r7, #4]
 8011a7e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8011a82:	6878      	ldr	r0, [r7, #4]
 8011a84:	f000 f93c 	bl	8011d00 <USBD_CtlSendStatus>
}
 8011a88:	e003      	b.n	8011a92 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8011a8a:	6839      	ldr	r1, [r7, #0]
 8011a8c:	6878      	ldr	r0, [r7, #4]
 8011a8e:	f000 f860 	bl	8011b52 <USBD_CtlError>
}
 8011a92:	bf00      	nop
 8011a94:	3708      	adds	r7, #8
 8011a96:	46bd      	mov	sp, r7
 8011a98:	bd80      	pop	{r7, pc}

08011a9a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011a9a:	b580      	push	{r7, lr}
 8011a9c:	b082      	sub	sp, #8
 8011a9e:	af00      	add	r7, sp, #0
 8011aa0:	6078      	str	r0, [r7, #4]
 8011aa2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8011aa4:	687b      	ldr	r3, [r7, #4]
 8011aa6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011aaa:	b2db      	uxtb	r3, r3
 8011aac:	3b01      	subs	r3, #1
 8011aae:	2b02      	cmp	r3, #2
 8011ab0:	d80b      	bhi.n	8011aca <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8011ab2:	683b      	ldr	r3, [r7, #0]
 8011ab4:	885b      	ldrh	r3, [r3, #2]
 8011ab6:	2b01      	cmp	r3, #1
 8011ab8:	d10c      	bne.n	8011ad4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8011aba:	687b      	ldr	r3, [r7, #4]
 8011abc:	2200      	movs	r2, #0
 8011abe:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8011ac2:	6878      	ldr	r0, [r7, #4]
 8011ac4:	f000 f91c 	bl	8011d00 <USBD_CtlSendStatus>
      }
      break;
 8011ac8:	e004      	b.n	8011ad4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8011aca:	6839      	ldr	r1, [r7, #0]
 8011acc:	6878      	ldr	r0, [r7, #4]
 8011ace:	f000 f840 	bl	8011b52 <USBD_CtlError>
      break;
 8011ad2:	e000      	b.n	8011ad6 <USBD_ClrFeature+0x3c>
      break;
 8011ad4:	bf00      	nop
  }
}
 8011ad6:	bf00      	nop
 8011ad8:	3708      	adds	r7, #8
 8011ada:	46bd      	mov	sp, r7
 8011adc:	bd80      	pop	{r7, pc}

08011ade <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8011ade:	b580      	push	{r7, lr}
 8011ae0:	b084      	sub	sp, #16
 8011ae2:	af00      	add	r7, sp, #0
 8011ae4:	6078      	str	r0, [r7, #4]
 8011ae6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8011ae8:	683b      	ldr	r3, [r7, #0]
 8011aea:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8011aec:	68fb      	ldr	r3, [r7, #12]
 8011aee:	781a      	ldrb	r2, [r3, #0]
 8011af0:	687b      	ldr	r3, [r7, #4]
 8011af2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8011af4:	68fb      	ldr	r3, [r7, #12]
 8011af6:	3301      	adds	r3, #1
 8011af8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8011afa:	68fb      	ldr	r3, [r7, #12]
 8011afc:	781a      	ldrb	r2, [r3, #0]
 8011afe:	687b      	ldr	r3, [r7, #4]
 8011b00:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8011b02:	68fb      	ldr	r3, [r7, #12]
 8011b04:	3301      	adds	r3, #1
 8011b06:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8011b08:	68f8      	ldr	r0, [r7, #12]
 8011b0a:	f7ff fa16 	bl	8010f3a <SWAPBYTE>
 8011b0e:	4603      	mov	r3, r0
 8011b10:	461a      	mov	r2, r3
 8011b12:	687b      	ldr	r3, [r7, #4]
 8011b14:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8011b16:	68fb      	ldr	r3, [r7, #12]
 8011b18:	3301      	adds	r3, #1
 8011b1a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8011b1c:	68fb      	ldr	r3, [r7, #12]
 8011b1e:	3301      	adds	r3, #1
 8011b20:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8011b22:	68f8      	ldr	r0, [r7, #12]
 8011b24:	f7ff fa09 	bl	8010f3a <SWAPBYTE>
 8011b28:	4603      	mov	r3, r0
 8011b2a:	461a      	mov	r2, r3
 8011b2c:	687b      	ldr	r3, [r7, #4]
 8011b2e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8011b30:	68fb      	ldr	r3, [r7, #12]
 8011b32:	3301      	adds	r3, #1
 8011b34:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8011b36:	68fb      	ldr	r3, [r7, #12]
 8011b38:	3301      	adds	r3, #1
 8011b3a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8011b3c:	68f8      	ldr	r0, [r7, #12]
 8011b3e:	f7ff f9fc 	bl	8010f3a <SWAPBYTE>
 8011b42:	4603      	mov	r3, r0
 8011b44:	461a      	mov	r2, r3
 8011b46:	687b      	ldr	r3, [r7, #4]
 8011b48:	80da      	strh	r2, [r3, #6]
}
 8011b4a:	bf00      	nop
 8011b4c:	3710      	adds	r7, #16
 8011b4e:	46bd      	mov	sp, r7
 8011b50:	bd80      	pop	{r7, pc}

08011b52 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011b52:	b580      	push	{r7, lr}
 8011b54:	b082      	sub	sp, #8
 8011b56:	af00      	add	r7, sp, #0
 8011b58:	6078      	str	r0, [r7, #4]
 8011b5a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8011b5c:	2180      	movs	r1, #128	@ 0x80
 8011b5e:	6878      	ldr	r0, [r7, #4]
 8011b60:	f000 fd18 	bl	8012594 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8011b64:	2100      	movs	r1, #0
 8011b66:	6878      	ldr	r0, [r7, #4]
 8011b68:	f000 fd14 	bl	8012594 <USBD_LL_StallEP>
}
 8011b6c:	bf00      	nop
 8011b6e:	3708      	adds	r7, #8
 8011b70:	46bd      	mov	sp, r7
 8011b72:	bd80      	pop	{r7, pc}

08011b74 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8011b74:	b580      	push	{r7, lr}
 8011b76:	b086      	sub	sp, #24
 8011b78:	af00      	add	r7, sp, #0
 8011b7a:	60f8      	str	r0, [r7, #12]
 8011b7c:	60b9      	str	r1, [r7, #8]
 8011b7e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8011b80:	2300      	movs	r3, #0
 8011b82:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8011b84:	68fb      	ldr	r3, [r7, #12]
 8011b86:	2b00      	cmp	r3, #0
 8011b88:	d042      	beq.n	8011c10 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8011b8a:	68fb      	ldr	r3, [r7, #12]
 8011b8c:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8011b8e:	6938      	ldr	r0, [r7, #16]
 8011b90:	f000 f842 	bl	8011c18 <USBD_GetLen>
 8011b94:	4603      	mov	r3, r0
 8011b96:	3301      	adds	r3, #1
 8011b98:	005b      	lsls	r3, r3, #1
 8011b9a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011b9e:	d808      	bhi.n	8011bb2 <USBD_GetString+0x3e>
 8011ba0:	6938      	ldr	r0, [r7, #16]
 8011ba2:	f000 f839 	bl	8011c18 <USBD_GetLen>
 8011ba6:	4603      	mov	r3, r0
 8011ba8:	3301      	adds	r3, #1
 8011baa:	b29b      	uxth	r3, r3
 8011bac:	005b      	lsls	r3, r3, #1
 8011bae:	b29a      	uxth	r2, r3
 8011bb0:	e001      	b.n	8011bb6 <USBD_GetString+0x42>
 8011bb2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011bb6:	687b      	ldr	r3, [r7, #4]
 8011bb8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8011bba:	7dfb      	ldrb	r3, [r7, #23]
 8011bbc:	68ba      	ldr	r2, [r7, #8]
 8011bbe:	4413      	add	r3, r2
 8011bc0:	687a      	ldr	r2, [r7, #4]
 8011bc2:	7812      	ldrb	r2, [r2, #0]
 8011bc4:	701a      	strb	r2, [r3, #0]
  idx++;
 8011bc6:	7dfb      	ldrb	r3, [r7, #23]
 8011bc8:	3301      	adds	r3, #1
 8011bca:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8011bcc:	7dfb      	ldrb	r3, [r7, #23]
 8011bce:	68ba      	ldr	r2, [r7, #8]
 8011bd0:	4413      	add	r3, r2
 8011bd2:	2203      	movs	r2, #3
 8011bd4:	701a      	strb	r2, [r3, #0]
  idx++;
 8011bd6:	7dfb      	ldrb	r3, [r7, #23]
 8011bd8:	3301      	adds	r3, #1
 8011bda:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8011bdc:	e013      	b.n	8011c06 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8011bde:	7dfb      	ldrb	r3, [r7, #23]
 8011be0:	68ba      	ldr	r2, [r7, #8]
 8011be2:	4413      	add	r3, r2
 8011be4:	693a      	ldr	r2, [r7, #16]
 8011be6:	7812      	ldrb	r2, [r2, #0]
 8011be8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8011bea:	693b      	ldr	r3, [r7, #16]
 8011bec:	3301      	adds	r3, #1
 8011bee:	613b      	str	r3, [r7, #16]
    idx++;
 8011bf0:	7dfb      	ldrb	r3, [r7, #23]
 8011bf2:	3301      	adds	r3, #1
 8011bf4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8011bf6:	7dfb      	ldrb	r3, [r7, #23]
 8011bf8:	68ba      	ldr	r2, [r7, #8]
 8011bfa:	4413      	add	r3, r2
 8011bfc:	2200      	movs	r2, #0
 8011bfe:	701a      	strb	r2, [r3, #0]
    idx++;
 8011c00:	7dfb      	ldrb	r3, [r7, #23]
 8011c02:	3301      	adds	r3, #1
 8011c04:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8011c06:	693b      	ldr	r3, [r7, #16]
 8011c08:	781b      	ldrb	r3, [r3, #0]
 8011c0a:	2b00      	cmp	r3, #0
 8011c0c:	d1e7      	bne.n	8011bde <USBD_GetString+0x6a>
 8011c0e:	e000      	b.n	8011c12 <USBD_GetString+0x9e>
    return;
 8011c10:	bf00      	nop
  }
}
 8011c12:	3718      	adds	r7, #24
 8011c14:	46bd      	mov	sp, r7
 8011c16:	bd80      	pop	{r7, pc}

08011c18 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8011c18:	b480      	push	{r7}
 8011c1a:	b085      	sub	sp, #20
 8011c1c:	af00      	add	r7, sp, #0
 8011c1e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8011c20:	2300      	movs	r3, #0
 8011c22:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8011c24:	687b      	ldr	r3, [r7, #4]
 8011c26:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8011c28:	e005      	b.n	8011c36 <USBD_GetLen+0x1e>
  {
    len++;
 8011c2a:	7bfb      	ldrb	r3, [r7, #15]
 8011c2c:	3301      	adds	r3, #1
 8011c2e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8011c30:	68bb      	ldr	r3, [r7, #8]
 8011c32:	3301      	adds	r3, #1
 8011c34:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8011c36:	68bb      	ldr	r3, [r7, #8]
 8011c38:	781b      	ldrb	r3, [r3, #0]
 8011c3a:	2b00      	cmp	r3, #0
 8011c3c:	d1f5      	bne.n	8011c2a <USBD_GetLen+0x12>
  }

  return len;
 8011c3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011c40:	4618      	mov	r0, r3
 8011c42:	3714      	adds	r7, #20
 8011c44:	46bd      	mov	sp, r7
 8011c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c4a:	4770      	bx	lr

08011c4c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8011c4c:	b580      	push	{r7, lr}
 8011c4e:	b084      	sub	sp, #16
 8011c50:	af00      	add	r7, sp, #0
 8011c52:	60f8      	str	r0, [r7, #12]
 8011c54:	60b9      	str	r1, [r7, #8]
 8011c56:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8011c58:	68fb      	ldr	r3, [r7, #12]
 8011c5a:	2202      	movs	r2, #2
 8011c5c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8011c60:	68fb      	ldr	r3, [r7, #12]
 8011c62:	687a      	ldr	r2, [r7, #4]
 8011c64:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8011c66:	68fb      	ldr	r3, [r7, #12]
 8011c68:	687a      	ldr	r2, [r7, #4]
 8011c6a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8011c6c:	687b      	ldr	r3, [r7, #4]
 8011c6e:	68ba      	ldr	r2, [r7, #8]
 8011c70:	2100      	movs	r1, #0
 8011c72:	68f8      	ldr	r0, [r7, #12]
 8011c74:	f000 fd17 	bl	80126a6 <USBD_LL_Transmit>

  return USBD_OK;
 8011c78:	2300      	movs	r3, #0
}
 8011c7a:	4618      	mov	r0, r3
 8011c7c:	3710      	adds	r7, #16
 8011c7e:	46bd      	mov	sp, r7
 8011c80:	bd80      	pop	{r7, pc}

08011c82 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8011c82:	b580      	push	{r7, lr}
 8011c84:	b084      	sub	sp, #16
 8011c86:	af00      	add	r7, sp, #0
 8011c88:	60f8      	str	r0, [r7, #12]
 8011c8a:	60b9      	str	r1, [r7, #8]
 8011c8c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	68ba      	ldr	r2, [r7, #8]
 8011c92:	2100      	movs	r1, #0
 8011c94:	68f8      	ldr	r0, [r7, #12]
 8011c96:	f000 fd06 	bl	80126a6 <USBD_LL_Transmit>

  return USBD_OK;
 8011c9a:	2300      	movs	r3, #0
}
 8011c9c:	4618      	mov	r0, r3
 8011c9e:	3710      	adds	r7, #16
 8011ca0:	46bd      	mov	sp, r7
 8011ca2:	bd80      	pop	{r7, pc}

08011ca4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8011ca4:	b580      	push	{r7, lr}
 8011ca6:	b084      	sub	sp, #16
 8011ca8:	af00      	add	r7, sp, #0
 8011caa:	60f8      	str	r0, [r7, #12]
 8011cac:	60b9      	str	r1, [r7, #8]
 8011cae:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8011cb0:	68fb      	ldr	r3, [r7, #12]
 8011cb2:	2203      	movs	r2, #3
 8011cb4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8011cb8:	68fb      	ldr	r3, [r7, #12]
 8011cba:	687a      	ldr	r2, [r7, #4]
 8011cbc:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8011cc0:	68fb      	ldr	r3, [r7, #12]
 8011cc2:	687a      	ldr	r2, [r7, #4]
 8011cc4:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8011cc8:	687b      	ldr	r3, [r7, #4]
 8011cca:	68ba      	ldr	r2, [r7, #8]
 8011ccc:	2100      	movs	r1, #0
 8011cce:	68f8      	ldr	r0, [r7, #12]
 8011cd0:	f000 fd0a 	bl	80126e8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011cd4:	2300      	movs	r3, #0
}
 8011cd6:	4618      	mov	r0, r3
 8011cd8:	3710      	adds	r7, #16
 8011cda:	46bd      	mov	sp, r7
 8011cdc:	bd80      	pop	{r7, pc}

08011cde <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8011cde:	b580      	push	{r7, lr}
 8011ce0:	b084      	sub	sp, #16
 8011ce2:	af00      	add	r7, sp, #0
 8011ce4:	60f8      	str	r0, [r7, #12]
 8011ce6:	60b9      	str	r1, [r7, #8]
 8011ce8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8011cea:	687b      	ldr	r3, [r7, #4]
 8011cec:	68ba      	ldr	r2, [r7, #8]
 8011cee:	2100      	movs	r1, #0
 8011cf0:	68f8      	ldr	r0, [r7, #12]
 8011cf2:	f000 fcf9 	bl	80126e8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011cf6:	2300      	movs	r3, #0
}
 8011cf8:	4618      	mov	r0, r3
 8011cfa:	3710      	adds	r7, #16
 8011cfc:	46bd      	mov	sp, r7
 8011cfe:	bd80      	pop	{r7, pc}

08011d00 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8011d00:	b580      	push	{r7, lr}
 8011d02:	b082      	sub	sp, #8
 8011d04:	af00      	add	r7, sp, #0
 8011d06:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8011d08:	687b      	ldr	r3, [r7, #4]
 8011d0a:	2204      	movs	r2, #4
 8011d0c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8011d10:	2300      	movs	r3, #0
 8011d12:	2200      	movs	r2, #0
 8011d14:	2100      	movs	r1, #0
 8011d16:	6878      	ldr	r0, [r7, #4]
 8011d18:	f000 fcc5 	bl	80126a6 <USBD_LL_Transmit>

  return USBD_OK;
 8011d1c:	2300      	movs	r3, #0
}
 8011d1e:	4618      	mov	r0, r3
 8011d20:	3708      	adds	r7, #8
 8011d22:	46bd      	mov	sp, r7
 8011d24:	bd80      	pop	{r7, pc}

08011d26 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8011d26:	b580      	push	{r7, lr}
 8011d28:	b082      	sub	sp, #8
 8011d2a:	af00      	add	r7, sp, #0
 8011d2c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8011d2e:	687b      	ldr	r3, [r7, #4]
 8011d30:	2205      	movs	r2, #5
 8011d32:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011d36:	2300      	movs	r3, #0
 8011d38:	2200      	movs	r2, #0
 8011d3a:	2100      	movs	r1, #0
 8011d3c:	6878      	ldr	r0, [r7, #4]
 8011d3e:	f000 fcd3 	bl	80126e8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011d42:	2300      	movs	r3, #0
}
 8011d44:	4618      	mov	r0, r3
 8011d46:	3708      	adds	r7, #8
 8011d48:	46bd      	mov	sp, r7
 8011d4a:	bd80      	pop	{r7, pc}

08011d4c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8011d4c:	b580      	push	{r7, lr}
 8011d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8011d50:	2200      	movs	r2, #0
 8011d52:	4913      	ldr	r1, [pc, #76]	@ (8011da0 <MX_USB_DEVICE_Init+0x54>)
 8011d54:	4813      	ldr	r0, [pc, #76]	@ (8011da4 <MX_USB_DEVICE_Init+0x58>)
 8011d56:	f7fe fccd 	bl	80106f4 <USBD_Init>
 8011d5a:	4603      	mov	r3, r0
 8011d5c:	2b00      	cmp	r3, #0
 8011d5e:	d001      	beq.n	8011d64 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8011d60:	f7ef fc42 	bl	80015e8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8011d64:	4910      	ldr	r1, [pc, #64]	@ (8011da8 <MX_USB_DEVICE_Init+0x5c>)
 8011d66:	480f      	ldr	r0, [pc, #60]	@ (8011da4 <MX_USB_DEVICE_Init+0x58>)
 8011d68:	f7fe fcf4 	bl	8010754 <USBD_RegisterClass>
 8011d6c:	4603      	mov	r3, r0
 8011d6e:	2b00      	cmp	r3, #0
 8011d70:	d001      	beq.n	8011d76 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8011d72:	f7ef fc39 	bl	80015e8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8011d76:	490d      	ldr	r1, [pc, #52]	@ (8011dac <MX_USB_DEVICE_Init+0x60>)
 8011d78:	480a      	ldr	r0, [pc, #40]	@ (8011da4 <MX_USB_DEVICE_Init+0x58>)
 8011d7a:	f7fe fbeb 	bl	8010554 <USBD_CDC_RegisterInterface>
 8011d7e:	4603      	mov	r3, r0
 8011d80:	2b00      	cmp	r3, #0
 8011d82:	d001      	beq.n	8011d88 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8011d84:	f7ef fc30 	bl	80015e8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8011d88:	4806      	ldr	r0, [pc, #24]	@ (8011da4 <MX_USB_DEVICE_Init+0x58>)
 8011d8a:	f7fe fd19 	bl	80107c0 <USBD_Start>
 8011d8e:	4603      	mov	r3, r0
 8011d90:	2b00      	cmp	r3, #0
 8011d92:	d001      	beq.n	8011d98 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8011d94:	f7ef fc28 	bl	80015e8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8011d98:	f7f7 fb76 	bl	8009488 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8011d9c:	bf00      	nop
 8011d9e:	bd80      	pop	{r7, pc}
 8011da0:	240000b0 	.word	0x240000b0
 8011da4:	24000530 	.word	0x24000530
 8011da8:	2400001c 	.word	0x2400001c
 8011dac:	2400009c 	.word	0x2400009c

08011db0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8011db0:	b580      	push	{r7, lr}
 8011db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8011db4:	2200      	movs	r2, #0
 8011db6:	4905      	ldr	r1, [pc, #20]	@ (8011dcc <CDC_Init_FS+0x1c>)
 8011db8:	4805      	ldr	r0, [pc, #20]	@ (8011dd0 <CDC_Init_FS+0x20>)
 8011dba:	f7fe fbe5 	bl	8010588 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8011dbe:	4905      	ldr	r1, [pc, #20]	@ (8011dd4 <CDC_Init_FS+0x24>)
 8011dc0:	4803      	ldr	r0, [pc, #12]	@ (8011dd0 <CDC_Init_FS+0x20>)
 8011dc2:	f7fe fc03 	bl	80105cc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8011dc6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8011dc8:	4618      	mov	r0, r3
 8011dca:	bd80      	pop	{r7, pc}
 8011dcc:	2400100c 	.word	0x2400100c
 8011dd0:	24000530 	.word	0x24000530
 8011dd4:	2400080c 	.word	0x2400080c

08011dd8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8011dd8:	b480      	push	{r7}
 8011dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8011ddc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8011dde:	4618      	mov	r0, r3
 8011de0:	46bd      	mov	sp, r7
 8011de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011de6:	4770      	bx	lr

08011de8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8011de8:	b480      	push	{r7}
 8011dea:	b083      	sub	sp, #12
 8011dec:	af00      	add	r7, sp, #0
 8011dee:	4603      	mov	r3, r0
 8011df0:	6039      	str	r1, [r7, #0]
 8011df2:	71fb      	strb	r3, [r7, #7]
 8011df4:	4613      	mov	r3, r2
 8011df6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8011df8:	79fb      	ldrb	r3, [r7, #7]
 8011dfa:	2b23      	cmp	r3, #35	@ 0x23
 8011dfc:	d84a      	bhi.n	8011e94 <CDC_Control_FS+0xac>
 8011dfe:	a201      	add	r2, pc, #4	@ (adr r2, 8011e04 <CDC_Control_FS+0x1c>)
 8011e00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011e04:	08011e95 	.word	0x08011e95
 8011e08:	08011e95 	.word	0x08011e95
 8011e0c:	08011e95 	.word	0x08011e95
 8011e10:	08011e95 	.word	0x08011e95
 8011e14:	08011e95 	.word	0x08011e95
 8011e18:	08011e95 	.word	0x08011e95
 8011e1c:	08011e95 	.word	0x08011e95
 8011e20:	08011e95 	.word	0x08011e95
 8011e24:	08011e95 	.word	0x08011e95
 8011e28:	08011e95 	.word	0x08011e95
 8011e2c:	08011e95 	.word	0x08011e95
 8011e30:	08011e95 	.word	0x08011e95
 8011e34:	08011e95 	.word	0x08011e95
 8011e38:	08011e95 	.word	0x08011e95
 8011e3c:	08011e95 	.word	0x08011e95
 8011e40:	08011e95 	.word	0x08011e95
 8011e44:	08011e95 	.word	0x08011e95
 8011e48:	08011e95 	.word	0x08011e95
 8011e4c:	08011e95 	.word	0x08011e95
 8011e50:	08011e95 	.word	0x08011e95
 8011e54:	08011e95 	.word	0x08011e95
 8011e58:	08011e95 	.word	0x08011e95
 8011e5c:	08011e95 	.word	0x08011e95
 8011e60:	08011e95 	.word	0x08011e95
 8011e64:	08011e95 	.word	0x08011e95
 8011e68:	08011e95 	.word	0x08011e95
 8011e6c:	08011e95 	.word	0x08011e95
 8011e70:	08011e95 	.word	0x08011e95
 8011e74:	08011e95 	.word	0x08011e95
 8011e78:	08011e95 	.word	0x08011e95
 8011e7c:	08011e95 	.word	0x08011e95
 8011e80:	08011e95 	.word	0x08011e95
 8011e84:	08011e95 	.word	0x08011e95
 8011e88:	08011e95 	.word	0x08011e95
 8011e8c:	08011e95 	.word	0x08011e95
 8011e90:	08011e95 	.word	0x08011e95
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8011e94:	bf00      	nop
  }

  return (USBD_OK);
 8011e96:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8011e98:	4618      	mov	r0, r3
 8011e9a:	370c      	adds	r7, #12
 8011e9c:	46bd      	mov	sp, r7
 8011e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ea2:	4770      	bx	lr

08011ea4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8011ea4:	b580      	push	{r7, lr}
 8011ea6:	b082      	sub	sp, #8
 8011ea8:	af00      	add	r7, sp, #0
 8011eaa:	6078      	str	r0, [r7, #4]
 8011eac:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8011eae:	6879      	ldr	r1, [r7, #4]
 8011eb0:	4808      	ldr	r0, [pc, #32]	@ (8011ed4 <CDC_Receive_FS+0x30>)
 8011eb2:	f7fe fb8b 	bl	80105cc <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8011eb6:	4807      	ldr	r0, [pc, #28]	@ (8011ed4 <CDC_Receive_FS+0x30>)
 8011eb8:	f7fe fbe6 	bl	8010688 <USBD_CDC_ReceivePacket>
	CDC_Transmit_FS(Buf,*Len);
 8011ebc:	683b      	ldr	r3, [r7, #0]
 8011ebe:	681b      	ldr	r3, [r3, #0]
 8011ec0:	b29b      	uxth	r3, r3
 8011ec2:	4619      	mov	r1, r3
 8011ec4:	6878      	ldr	r0, [r7, #4]
 8011ec6:	f000 f807 	bl	8011ed8 <CDC_Transmit_FS>
	return (USBD_OK);
 8011eca:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8011ecc:	4618      	mov	r0, r3
 8011ece:	3708      	adds	r7, #8
 8011ed0:	46bd      	mov	sp, r7
 8011ed2:	bd80      	pop	{r7, pc}
 8011ed4:	24000530 	.word	0x24000530

08011ed8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8011ed8:	b580      	push	{r7, lr}
 8011eda:	b084      	sub	sp, #16
 8011edc:	af00      	add	r7, sp, #0
 8011ede:	6078      	str	r0, [r7, #4]
 8011ee0:	460b      	mov	r3, r1
 8011ee2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8011ee4:	2300      	movs	r3, #0
 8011ee6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8011ee8:	4b0d      	ldr	r3, [pc, #52]	@ (8011f20 <CDC_Transmit_FS+0x48>)
 8011eea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8011eee:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8011ef0:	68bb      	ldr	r3, [r7, #8]
 8011ef2:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8011ef6:	2b00      	cmp	r3, #0
 8011ef8:	d001      	beq.n	8011efe <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8011efa:	2301      	movs	r3, #1
 8011efc:	e00b      	b.n	8011f16 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8011efe:	887b      	ldrh	r3, [r7, #2]
 8011f00:	461a      	mov	r2, r3
 8011f02:	6879      	ldr	r1, [r7, #4]
 8011f04:	4806      	ldr	r0, [pc, #24]	@ (8011f20 <CDC_Transmit_FS+0x48>)
 8011f06:	f7fe fb3f 	bl	8010588 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8011f0a:	4805      	ldr	r0, [pc, #20]	@ (8011f20 <CDC_Transmit_FS+0x48>)
 8011f0c:	f7fe fb7c 	bl	8010608 <USBD_CDC_TransmitPacket>
 8011f10:	4603      	mov	r3, r0
 8011f12:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8011f14:	7bfb      	ldrb	r3, [r7, #15]
}
 8011f16:	4618      	mov	r0, r3
 8011f18:	3710      	adds	r7, #16
 8011f1a:	46bd      	mov	sp, r7
 8011f1c:	bd80      	pop	{r7, pc}
 8011f1e:	bf00      	nop
 8011f20:	24000530 	.word	0x24000530

08011f24 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8011f24:	b480      	push	{r7}
 8011f26:	b087      	sub	sp, #28
 8011f28:	af00      	add	r7, sp, #0
 8011f2a:	60f8      	str	r0, [r7, #12]
 8011f2c:	60b9      	str	r1, [r7, #8]
 8011f2e:	4613      	mov	r3, r2
 8011f30:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8011f32:	2300      	movs	r3, #0
 8011f34:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8011f36:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011f3a:	4618      	mov	r0, r3
 8011f3c:	371c      	adds	r7, #28
 8011f3e:	46bd      	mov	sp, r7
 8011f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f44:	4770      	bx	lr
	...

08011f48 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011f48:	b480      	push	{r7}
 8011f4a:	b083      	sub	sp, #12
 8011f4c:	af00      	add	r7, sp, #0
 8011f4e:	4603      	mov	r3, r0
 8011f50:	6039      	str	r1, [r7, #0]
 8011f52:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8011f54:	683b      	ldr	r3, [r7, #0]
 8011f56:	2212      	movs	r2, #18
 8011f58:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8011f5a:	4b03      	ldr	r3, [pc, #12]	@ (8011f68 <USBD_FS_DeviceDescriptor+0x20>)
}
 8011f5c:	4618      	mov	r0, r3
 8011f5e:	370c      	adds	r7, #12
 8011f60:	46bd      	mov	sp, r7
 8011f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f66:	4770      	bx	lr
 8011f68:	240000d0 	.word	0x240000d0

08011f6c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011f6c:	b480      	push	{r7}
 8011f6e:	b083      	sub	sp, #12
 8011f70:	af00      	add	r7, sp, #0
 8011f72:	4603      	mov	r3, r0
 8011f74:	6039      	str	r1, [r7, #0]
 8011f76:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8011f78:	683b      	ldr	r3, [r7, #0]
 8011f7a:	2204      	movs	r2, #4
 8011f7c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8011f7e:	4b03      	ldr	r3, [pc, #12]	@ (8011f8c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8011f80:	4618      	mov	r0, r3
 8011f82:	370c      	adds	r7, #12
 8011f84:	46bd      	mov	sp, r7
 8011f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f8a:	4770      	bx	lr
 8011f8c:	240000e4 	.word	0x240000e4

08011f90 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011f90:	b580      	push	{r7, lr}
 8011f92:	b082      	sub	sp, #8
 8011f94:	af00      	add	r7, sp, #0
 8011f96:	4603      	mov	r3, r0
 8011f98:	6039      	str	r1, [r7, #0]
 8011f9a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011f9c:	79fb      	ldrb	r3, [r7, #7]
 8011f9e:	2b00      	cmp	r3, #0
 8011fa0:	d105      	bne.n	8011fae <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8011fa2:	683a      	ldr	r2, [r7, #0]
 8011fa4:	4907      	ldr	r1, [pc, #28]	@ (8011fc4 <USBD_FS_ProductStrDescriptor+0x34>)
 8011fa6:	4808      	ldr	r0, [pc, #32]	@ (8011fc8 <USBD_FS_ProductStrDescriptor+0x38>)
 8011fa8:	f7ff fde4 	bl	8011b74 <USBD_GetString>
 8011fac:	e004      	b.n	8011fb8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8011fae:	683a      	ldr	r2, [r7, #0]
 8011fb0:	4904      	ldr	r1, [pc, #16]	@ (8011fc4 <USBD_FS_ProductStrDescriptor+0x34>)
 8011fb2:	4805      	ldr	r0, [pc, #20]	@ (8011fc8 <USBD_FS_ProductStrDescriptor+0x38>)
 8011fb4:	f7ff fdde 	bl	8011b74 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011fb8:	4b02      	ldr	r3, [pc, #8]	@ (8011fc4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8011fba:	4618      	mov	r0, r3
 8011fbc:	3708      	adds	r7, #8
 8011fbe:	46bd      	mov	sp, r7
 8011fc0:	bd80      	pop	{r7, pc}
 8011fc2:	bf00      	nop
 8011fc4:	2400180c 	.word	0x2400180c
 8011fc8:	08013290 	.word	0x08013290

08011fcc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011fcc:	b580      	push	{r7, lr}
 8011fce:	b082      	sub	sp, #8
 8011fd0:	af00      	add	r7, sp, #0
 8011fd2:	4603      	mov	r3, r0
 8011fd4:	6039      	str	r1, [r7, #0]
 8011fd6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8011fd8:	683a      	ldr	r2, [r7, #0]
 8011fda:	4904      	ldr	r1, [pc, #16]	@ (8011fec <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8011fdc:	4804      	ldr	r0, [pc, #16]	@ (8011ff0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8011fde:	f7ff fdc9 	bl	8011b74 <USBD_GetString>
  return USBD_StrDesc;
 8011fe2:	4b02      	ldr	r3, [pc, #8]	@ (8011fec <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8011fe4:	4618      	mov	r0, r3
 8011fe6:	3708      	adds	r7, #8
 8011fe8:	46bd      	mov	sp, r7
 8011fea:	bd80      	pop	{r7, pc}
 8011fec:	2400180c 	.word	0x2400180c
 8011ff0:	080132a8 	.word	0x080132a8

08011ff4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011ff4:	b580      	push	{r7, lr}
 8011ff6:	b082      	sub	sp, #8
 8011ff8:	af00      	add	r7, sp, #0
 8011ffa:	4603      	mov	r3, r0
 8011ffc:	6039      	str	r1, [r7, #0]
 8011ffe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8012000:	683b      	ldr	r3, [r7, #0]
 8012002:	221a      	movs	r2, #26
 8012004:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8012006:	f000 f843 	bl	8012090 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801200a:	4b02      	ldr	r3, [pc, #8]	@ (8012014 <USBD_FS_SerialStrDescriptor+0x20>)
}
 801200c:	4618      	mov	r0, r3
 801200e:	3708      	adds	r7, #8
 8012010:	46bd      	mov	sp, r7
 8012012:	bd80      	pop	{r7, pc}
 8012014:	240000e8 	.word	0x240000e8

08012018 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012018:	b580      	push	{r7, lr}
 801201a:	b082      	sub	sp, #8
 801201c:	af00      	add	r7, sp, #0
 801201e:	4603      	mov	r3, r0
 8012020:	6039      	str	r1, [r7, #0]
 8012022:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8012024:	79fb      	ldrb	r3, [r7, #7]
 8012026:	2b00      	cmp	r3, #0
 8012028:	d105      	bne.n	8012036 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801202a:	683a      	ldr	r2, [r7, #0]
 801202c:	4907      	ldr	r1, [pc, #28]	@ (801204c <USBD_FS_ConfigStrDescriptor+0x34>)
 801202e:	4808      	ldr	r0, [pc, #32]	@ (8012050 <USBD_FS_ConfigStrDescriptor+0x38>)
 8012030:	f7ff fda0 	bl	8011b74 <USBD_GetString>
 8012034:	e004      	b.n	8012040 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8012036:	683a      	ldr	r2, [r7, #0]
 8012038:	4904      	ldr	r1, [pc, #16]	@ (801204c <USBD_FS_ConfigStrDescriptor+0x34>)
 801203a:	4805      	ldr	r0, [pc, #20]	@ (8012050 <USBD_FS_ConfigStrDescriptor+0x38>)
 801203c:	f7ff fd9a 	bl	8011b74 <USBD_GetString>
  }
  return USBD_StrDesc;
 8012040:	4b02      	ldr	r3, [pc, #8]	@ (801204c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8012042:	4618      	mov	r0, r3
 8012044:	3708      	adds	r7, #8
 8012046:	46bd      	mov	sp, r7
 8012048:	bd80      	pop	{r7, pc}
 801204a:	bf00      	nop
 801204c:	2400180c 	.word	0x2400180c
 8012050:	080132bc 	.word	0x080132bc

08012054 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012054:	b580      	push	{r7, lr}
 8012056:	b082      	sub	sp, #8
 8012058:	af00      	add	r7, sp, #0
 801205a:	4603      	mov	r3, r0
 801205c:	6039      	str	r1, [r7, #0]
 801205e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8012060:	79fb      	ldrb	r3, [r7, #7]
 8012062:	2b00      	cmp	r3, #0
 8012064:	d105      	bne.n	8012072 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8012066:	683a      	ldr	r2, [r7, #0]
 8012068:	4907      	ldr	r1, [pc, #28]	@ (8012088 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801206a:	4808      	ldr	r0, [pc, #32]	@ (801208c <USBD_FS_InterfaceStrDescriptor+0x38>)
 801206c:	f7ff fd82 	bl	8011b74 <USBD_GetString>
 8012070:	e004      	b.n	801207c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8012072:	683a      	ldr	r2, [r7, #0]
 8012074:	4904      	ldr	r1, [pc, #16]	@ (8012088 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8012076:	4805      	ldr	r0, [pc, #20]	@ (801208c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8012078:	f7ff fd7c 	bl	8011b74 <USBD_GetString>
  }
  return USBD_StrDesc;
 801207c:	4b02      	ldr	r3, [pc, #8]	@ (8012088 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801207e:	4618      	mov	r0, r3
 8012080:	3708      	adds	r7, #8
 8012082:	46bd      	mov	sp, r7
 8012084:	bd80      	pop	{r7, pc}
 8012086:	bf00      	nop
 8012088:	2400180c 	.word	0x2400180c
 801208c:	080132c8 	.word	0x080132c8

08012090 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8012090:	b580      	push	{r7, lr}
 8012092:	b084      	sub	sp, #16
 8012094:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8012096:	4b0f      	ldr	r3, [pc, #60]	@ (80120d4 <Get_SerialNum+0x44>)
 8012098:	681b      	ldr	r3, [r3, #0]
 801209a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801209c:	4b0e      	ldr	r3, [pc, #56]	@ (80120d8 <Get_SerialNum+0x48>)
 801209e:	681b      	ldr	r3, [r3, #0]
 80120a0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80120a2:	4b0e      	ldr	r3, [pc, #56]	@ (80120dc <Get_SerialNum+0x4c>)
 80120a4:	681b      	ldr	r3, [r3, #0]
 80120a6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80120a8:	68fa      	ldr	r2, [r7, #12]
 80120aa:	687b      	ldr	r3, [r7, #4]
 80120ac:	4413      	add	r3, r2
 80120ae:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80120b0:	68fb      	ldr	r3, [r7, #12]
 80120b2:	2b00      	cmp	r3, #0
 80120b4:	d009      	beq.n	80120ca <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80120b6:	2208      	movs	r2, #8
 80120b8:	4909      	ldr	r1, [pc, #36]	@ (80120e0 <Get_SerialNum+0x50>)
 80120ba:	68f8      	ldr	r0, [r7, #12]
 80120bc:	f000 f814 	bl	80120e8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80120c0:	2204      	movs	r2, #4
 80120c2:	4908      	ldr	r1, [pc, #32]	@ (80120e4 <Get_SerialNum+0x54>)
 80120c4:	68b8      	ldr	r0, [r7, #8]
 80120c6:	f000 f80f 	bl	80120e8 <IntToUnicode>
  }
}
 80120ca:	bf00      	nop
 80120cc:	3710      	adds	r7, #16
 80120ce:	46bd      	mov	sp, r7
 80120d0:	bd80      	pop	{r7, pc}
 80120d2:	bf00      	nop
 80120d4:	1ff1e800 	.word	0x1ff1e800
 80120d8:	1ff1e804 	.word	0x1ff1e804
 80120dc:	1ff1e808 	.word	0x1ff1e808
 80120e0:	240000ea 	.word	0x240000ea
 80120e4:	240000fa 	.word	0x240000fa

080120e8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80120e8:	b480      	push	{r7}
 80120ea:	b087      	sub	sp, #28
 80120ec:	af00      	add	r7, sp, #0
 80120ee:	60f8      	str	r0, [r7, #12]
 80120f0:	60b9      	str	r1, [r7, #8]
 80120f2:	4613      	mov	r3, r2
 80120f4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80120f6:	2300      	movs	r3, #0
 80120f8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80120fa:	2300      	movs	r3, #0
 80120fc:	75fb      	strb	r3, [r7, #23]
 80120fe:	e027      	b.n	8012150 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8012100:	68fb      	ldr	r3, [r7, #12]
 8012102:	0f1b      	lsrs	r3, r3, #28
 8012104:	2b09      	cmp	r3, #9
 8012106:	d80b      	bhi.n	8012120 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8012108:	68fb      	ldr	r3, [r7, #12]
 801210a:	0f1b      	lsrs	r3, r3, #28
 801210c:	b2da      	uxtb	r2, r3
 801210e:	7dfb      	ldrb	r3, [r7, #23]
 8012110:	005b      	lsls	r3, r3, #1
 8012112:	4619      	mov	r1, r3
 8012114:	68bb      	ldr	r3, [r7, #8]
 8012116:	440b      	add	r3, r1
 8012118:	3230      	adds	r2, #48	@ 0x30
 801211a:	b2d2      	uxtb	r2, r2
 801211c:	701a      	strb	r2, [r3, #0]
 801211e:	e00a      	b.n	8012136 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8012120:	68fb      	ldr	r3, [r7, #12]
 8012122:	0f1b      	lsrs	r3, r3, #28
 8012124:	b2da      	uxtb	r2, r3
 8012126:	7dfb      	ldrb	r3, [r7, #23]
 8012128:	005b      	lsls	r3, r3, #1
 801212a:	4619      	mov	r1, r3
 801212c:	68bb      	ldr	r3, [r7, #8]
 801212e:	440b      	add	r3, r1
 8012130:	3237      	adds	r2, #55	@ 0x37
 8012132:	b2d2      	uxtb	r2, r2
 8012134:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8012136:	68fb      	ldr	r3, [r7, #12]
 8012138:	011b      	lsls	r3, r3, #4
 801213a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801213c:	7dfb      	ldrb	r3, [r7, #23]
 801213e:	005b      	lsls	r3, r3, #1
 8012140:	3301      	adds	r3, #1
 8012142:	68ba      	ldr	r2, [r7, #8]
 8012144:	4413      	add	r3, r2
 8012146:	2200      	movs	r2, #0
 8012148:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801214a:	7dfb      	ldrb	r3, [r7, #23]
 801214c:	3301      	adds	r3, #1
 801214e:	75fb      	strb	r3, [r7, #23]
 8012150:	7dfa      	ldrb	r2, [r7, #23]
 8012152:	79fb      	ldrb	r3, [r7, #7]
 8012154:	429a      	cmp	r2, r3
 8012156:	d3d3      	bcc.n	8012100 <IntToUnicode+0x18>
  }
}
 8012158:	bf00      	nop
 801215a:	bf00      	nop
 801215c:	371c      	adds	r7, #28
 801215e:	46bd      	mov	sp, r7
 8012160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012164:	4770      	bx	lr
	...

08012168 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8012168:	b580      	push	{r7, lr}
 801216a:	b0ba      	sub	sp, #232	@ 0xe8
 801216c:	af00      	add	r7, sp, #0
 801216e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012170:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8012174:	2200      	movs	r2, #0
 8012176:	601a      	str	r2, [r3, #0]
 8012178:	605a      	str	r2, [r3, #4]
 801217a:	609a      	str	r2, [r3, #8]
 801217c:	60da      	str	r2, [r3, #12]
 801217e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8012180:	f107 0310 	add.w	r3, r7, #16
 8012184:	22c0      	movs	r2, #192	@ 0xc0
 8012186:	2100      	movs	r1, #0
 8012188:	4618      	mov	r0, r3
 801218a:	f000 fb47 	bl	801281c <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 801218e:	687b      	ldr	r3, [r7, #4]
 8012190:	681b      	ldr	r3, [r3, #0]
 8012192:	4a2c      	ldr	r2, [pc, #176]	@ (8012244 <HAL_PCD_MspInit+0xdc>)
 8012194:	4293      	cmp	r3, r2
 8012196:	d151      	bne.n	801223c <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8012198:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 801219c:	f04f 0300 	mov.w	r3, #0
 80121a0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80121a4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80121a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80121ac:	f107 0310 	add.w	r3, r7, #16
 80121b0:	4618      	mov	r0, r3
 80121b2:	f7f8 f95f 	bl	800a474 <HAL_RCCEx_PeriphCLKConfig>
 80121b6:	4603      	mov	r3, r0
 80121b8:	2b00      	cmp	r3, #0
 80121ba:	d001      	beq.n	80121c0 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 80121bc:	f7ef fa14 	bl	80015e8 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80121c0:	f7f7 f962 	bl	8009488 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80121c4:	4b20      	ldr	r3, [pc, #128]	@ (8012248 <HAL_PCD_MspInit+0xe0>)
 80121c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80121ca:	4a1f      	ldr	r2, [pc, #124]	@ (8012248 <HAL_PCD_MspInit+0xe0>)
 80121cc:	f043 0301 	orr.w	r3, r3, #1
 80121d0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80121d4:	4b1c      	ldr	r3, [pc, #112]	@ (8012248 <HAL_PCD_MspInit+0xe0>)
 80121d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80121da:	f003 0301 	and.w	r3, r3, #1
 80121de:	60fb      	str	r3, [r7, #12]
 80121e0:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80121e2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80121e6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80121ea:	2302      	movs	r3, #2
 80121ec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80121f0:	2300      	movs	r3, #0
 80121f2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80121f6:	2300      	movs	r3, #0
 80121f8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80121fc:	230a      	movs	r3, #10
 80121fe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012202:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8012206:	4619      	mov	r1, r3
 8012208:	4810      	ldr	r0, [pc, #64]	@ (801224c <HAL_PCD_MspInit+0xe4>)
 801220a:	f7f3 ffcd 	bl	80061a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801220e:	4b0e      	ldr	r3, [pc, #56]	@ (8012248 <HAL_PCD_MspInit+0xe0>)
 8012210:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8012214:	4a0c      	ldr	r2, [pc, #48]	@ (8012248 <HAL_PCD_MspInit+0xe0>)
 8012216:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 801221a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 801221e:	4b0a      	ldr	r3, [pc, #40]	@ (8012248 <HAL_PCD_MspInit+0xe0>)
 8012220:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8012224:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8012228:	60bb      	str	r3, [r7, #8]
 801222a:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 801222c:	2200      	movs	r2, #0
 801222e:	2100      	movs	r1, #0
 8012230:	2065      	movs	r0, #101	@ 0x65
 8012232:	f7f0 f91c 	bl	800246e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8012236:	2065      	movs	r0, #101	@ 0x65
 8012238:	f7f0 f933 	bl	80024a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801223c:	bf00      	nop
 801223e:	37e8      	adds	r7, #232	@ 0xe8
 8012240:	46bd      	mov	sp, r7
 8012242:	bd80      	pop	{r7, pc}
 8012244:	40080000 	.word	0x40080000
 8012248:	58024400 	.word	0x58024400
 801224c:	58020000 	.word	0x58020000

08012250 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012250:	b580      	push	{r7, lr}
 8012252:	b082      	sub	sp, #8
 8012254:	af00      	add	r7, sp, #0
 8012256:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8012258:	687b      	ldr	r3, [r7, #4]
 801225a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 801225e:	687b      	ldr	r3, [r7, #4]
 8012260:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8012264:	4619      	mov	r1, r3
 8012266:	4610      	mov	r0, r2
 8012268:	f7fe faf7 	bl	801085a <USBD_LL_SetupStage>
}
 801226c:	bf00      	nop
 801226e:	3708      	adds	r7, #8
 8012270:	46bd      	mov	sp, r7
 8012272:	bd80      	pop	{r7, pc}

08012274 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012274:	b580      	push	{r7, lr}
 8012276:	b082      	sub	sp, #8
 8012278:	af00      	add	r7, sp, #0
 801227a:	6078      	str	r0, [r7, #4]
 801227c:	460b      	mov	r3, r1
 801227e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8012280:	687b      	ldr	r3, [r7, #4]
 8012282:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8012286:	78fa      	ldrb	r2, [r7, #3]
 8012288:	6879      	ldr	r1, [r7, #4]
 801228a:	4613      	mov	r3, r2
 801228c:	00db      	lsls	r3, r3, #3
 801228e:	4413      	add	r3, r2
 8012290:	009b      	lsls	r3, r3, #2
 8012292:	440b      	add	r3, r1
 8012294:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8012298:	681a      	ldr	r2, [r3, #0]
 801229a:	78fb      	ldrb	r3, [r7, #3]
 801229c:	4619      	mov	r1, r3
 801229e:	f7fe fb31 	bl	8010904 <USBD_LL_DataOutStage>
}
 80122a2:	bf00      	nop
 80122a4:	3708      	adds	r7, #8
 80122a6:	46bd      	mov	sp, r7
 80122a8:	bd80      	pop	{r7, pc}

080122aa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80122aa:	b580      	push	{r7, lr}
 80122ac:	b082      	sub	sp, #8
 80122ae:	af00      	add	r7, sp, #0
 80122b0:	6078      	str	r0, [r7, #4]
 80122b2:	460b      	mov	r3, r1
 80122b4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80122b6:	687b      	ldr	r3, [r7, #4]
 80122b8:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80122bc:	78fa      	ldrb	r2, [r7, #3]
 80122be:	6879      	ldr	r1, [r7, #4]
 80122c0:	4613      	mov	r3, r2
 80122c2:	00db      	lsls	r3, r3, #3
 80122c4:	4413      	add	r3, r2
 80122c6:	009b      	lsls	r3, r3, #2
 80122c8:	440b      	add	r3, r1
 80122ca:	3320      	adds	r3, #32
 80122cc:	681a      	ldr	r2, [r3, #0]
 80122ce:	78fb      	ldrb	r3, [r7, #3]
 80122d0:	4619      	mov	r1, r3
 80122d2:	f7fe fbca 	bl	8010a6a <USBD_LL_DataInStage>
}
 80122d6:	bf00      	nop
 80122d8:	3708      	adds	r7, #8
 80122da:	46bd      	mov	sp, r7
 80122dc:	bd80      	pop	{r7, pc}

080122de <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80122de:	b580      	push	{r7, lr}
 80122e0:	b082      	sub	sp, #8
 80122e2:	af00      	add	r7, sp, #0
 80122e4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80122e6:	687b      	ldr	r3, [r7, #4]
 80122e8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80122ec:	4618      	mov	r0, r3
 80122ee:	f7fe fd04 	bl	8010cfa <USBD_LL_SOF>
}
 80122f2:	bf00      	nop
 80122f4:	3708      	adds	r7, #8
 80122f6:	46bd      	mov	sp, r7
 80122f8:	bd80      	pop	{r7, pc}

080122fa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80122fa:	b580      	push	{r7, lr}
 80122fc:	b084      	sub	sp, #16
 80122fe:	af00      	add	r7, sp, #0
 8012300:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8012302:	2301      	movs	r3, #1
 8012304:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8012306:	687b      	ldr	r3, [r7, #4]
 8012308:	79db      	ldrb	r3, [r3, #7]
 801230a:	2b00      	cmp	r3, #0
 801230c:	d102      	bne.n	8012314 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801230e:	2300      	movs	r3, #0
 8012310:	73fb      	strb	r3, [r7, #15]
 8012312:	e008      	b.n	8012326 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8012314:	687b      	ldr	r3, [r7, #4]
 8012316:	79db      	ldrb	r3, [r3, #7]
 8012318:	2b02      	cmp	r3, #2
 801231a:	d102      	bne.n	8012322 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801231c:	2301      	movs	r3, #1
 801231e:	73fb      	strb	r3, [r7, #15]
 8012320:	e001      	b.n	8012326 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8012322:	f7ef f961 	bl	80015e8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8012326:	687b      	ldr	r3, [r7, #4]
 8012328:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801232c:	7bfa      	ldrb	r2, [r7, #15]
 801232e:	4611      	mov	r1, r2
 8012330:	4618      	mov	r0, r3
 8012332:	f7fe fc9e 	bl	8010c72 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8012336:	687b      	ldr	r3, [r7, #4]
 8012338:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801233c:	4618      	mov	r0, r3
 801233e:	f7fe fc46 	bl	8010bce <USBD_LL_Reset>
}
 8012342:	bf00      	nop
 8012344:	3710      	adds	r7, #16
 8012346:	46bd      	mov	sp, r7
 8012348:	bd80      	pop	{r7, pc}
	...

0801234c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801234c:	b580      	push	{r7, lr}
 801234e:	b082      	sub	sp, #8
 8012350:	af00      	add	r7, sp, #0
 8012352:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801235a:	4618      	mov	r0, r3
 801235c:	f7fe fc99 	bl	8010c92 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8012360:	687b      	ldr	r3, [r7, #4]
 8012362:	681b      	ldr	r3, [r3, #0]
 8012364:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8012368:	681b      	ldr	r3, [r3, #0]
 801236a:	687a      	ldr	r2, [r7, #4]
 801236c:	6812      	ldr	r2, [r2, #0]
 801236e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8012372:	f043 0301 	orr.w	r3, r3, #1
 8012376:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8012378:	687b      	ldr	r3, [r7, #4]
 801237a:	7adb      	ldrb	r3, [r3, #11]
 801237c:	2b00      	cmp	r3, #0
 801237e:	d005      	beq.n	801238c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8012380:	4b04      	ldr	r3, [pc, #16]	@ (8012394 <HAL_PCD_SuspendCallback+0x48>)
 8012382:	691b      	ldr	r3, [r3, #16]
 8012384:	4a03      	ldr	r2, [pc, #12]	@ (8012394 <HAL_PCD_SuspendCallback+0x48>)
 8012386:	f043 0306 	orr.w	r3, r3, #6
 801238a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801238c:	bf00      	nop
 801238e:	3708      	adds	r7, #8
 8012390:	46bd      	mov	sp, r7
 8012392:	bd80      	pop	{r7, pc}
 8012394:	e000ed00 	.word	0xe000ed00

08012398 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012398:	b580      	push	{r7, lr}
 801239a:	b082      	sub	sp, #8
 801239c:	af00      	add	r7, sp, #0
 801239e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80123a0:	687b      	ldr	r3, [r7, #4]
 80123a2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80123a6:	4618      	mov	r0, r3
 80123a8:	f7fe fc8f 	bl	8010cca <USBD_LL_Resume>
}
 80123ac:	bf00      	nop
 80123ae:	3708      	adds	r7, #8
 80123b0:	46bd      	mov	sp, r7
 80123b2:	bd80      	pop	{r7, pc}

080123b4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80123b4:	b580      	push	{r7, lr}
 80123b6:	b082      	sub	sp, #8
 80123b8:	af00      	add	r7, sp, #0
 80123ba:	6078      	str	r0, [r7, #4]
 80123bc:	460b      	mov	r3, r1
 80123be:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80123c0:	687b      	ldr	r3, [r7, #4]
 80123c2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80123c6:	78fa      	ldrb	r2, [r7, #3]
 80123c8:	4611      	mov	r1, r2
 80123ca:	4618      	mov	r0, r3
 80123cc:	f7fe fce7 	bl	8010d9e <USBD_LL_IsoOUTIncomplete>
}
 80123d0:	bf00      	nop
 80123d2:	3708      	adds	r7, #8
 80123d4:	46bd      	mov	sp, r7
 80123d6:	bd80      	pop	{r7, pc}

080123d8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80123d8:	b580      	push	{r7, lr}
 80123da:	b082      	sub	sp, #8
 80123dc:	af00      	add	r7, sp, #0
 80123de:	6078      	str	r0, [r7, #4]
 80123e0:	460b      	mov	r3, r1
 80123e2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80123e4:	687b      	ldr	r3, [r7, #4]
 80123e6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80123ea:	78fa      	ldrb	r2, [r7, #3]
 80123ec:	4611      	mov	r1, r2
 80123ee:	4618      	mov	r0, r3
 80123f0:	f7fe fca3 	bl	8010d3a <USBD_LL_IsoINIncomplete>
}
 80123f4:	bf00      	nop
 80123f6:	3708      	adds	r7, #8
 80123f8:	46bd      	mov	sp, r7
 80123fa:	bd80      	pop	{r7, pc}

080123fc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80123fc:	b580      	push	{r7, lr}
 80123fe:	b082      	sub	sp, #8
 8012400:	af00      	add	r7, sp, #0
 8012402:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8012404:	687b      	ldr	r3, [r7, #4]
 8012406:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801240a:	4618      	mov	r0, r3
 801240c:	f7fe fcf9 	bl	8010e02 <USBD_LL_DevConnected>
}
 8012410:	bf00      	nop
 8012412:	3708      	adds	r7, #8
 8012414:	46bd      	mov	sp, r7
 8012416:	bd80      	pop	{r7, pc}

08012418 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012418:	b580      	push	{r7, lr}
 801241a:	b082      	sub	sp, #8
 801241c:	af00      	add	r7, sp, #0
 801241e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8012420:	687b      	ldr	r3, [r7, #4]
 8012422:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8012426:	4618      	mov	r0, r3
 8012428:	f7fe fcf6 	bl	8010e18 <USBD_LL_DevDisconnected>
}
 801242c:	bf00      	nop
 801242e:	3708      	adds	r7, #8
 8012430:	46bd      	mov	sp, r7
 8012432:	bd80      	pop	{r7, pc}

08012434 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8012434:	b580      	push	{r7, lr}
 8012436:	b082      	sub	sp, #8
 8012438:	af00      	add	r7, sp, #0
 801243a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801243c:	687b      	ldr	r3, [r7, #4]
 801243e:	781b      	ldrb	r3, [r3, #0]
 8012440:	2b00      	cmp	r3, #0
 8012442:	d13e      	bne.n	80124c2 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8012444:	4a21      	ldr	r2, [pc, #132]	@ (80124cc <USBD_LL_Init+0x98>)
 8012446:	687b      	ldr	r3, [r7, #4]
 8012448:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 801244c:	687b      	ldr	r3, [r7, #4]
 801244e:	4a1f      	ldr	r2, [pc, #124]	@ (80124cc <USBD_LL_Init+0x98>)
 8012450:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8012454:	4b1d      	ldr	r3, [pc, #116]	@ (80124cc <USBD_LL_Init+0x98>)
 8012456:	4a1e      	ldr	r2, [pc, #120]	@ (80124d0 <USBD_LL_Init+0x9c>)
 8012458:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 801245a:	4b1c      	ldr	r3, [pc, #112]	@ (80124cc <USBD_LL_Init+0x98>)
 801245c:	2209      	movs	r2, #9
 801245e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8012460:	4b1a      	ldr	r3, [pc, #104]	@ (80124cc <USBD_LL_Init+0x98>)
 8012462:	2202      	movs	r2, #2
 8012464:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8012466:	4b19      	ldr	r3, [pc, #100]	@ (80124cc <USBD_LL_Init+0x98>)
 8012468:	2200      	movs	r2, #0
 801246a:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801246c:	4b17      	ldr	r3, [pc, #92]	@ (80124cc <USBD_LL_Init+0x98>)
 801246e:	2202      	movs	r2, #2
 8012470:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8012472:	4b16      	ldr	r3, [pc, #88]	@ (80124cc <USBD_LL_Init+0x98>)
 8012474:	2200      	movs	r2, #0
 8012476:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8012478:	4b14      	ldr	r3, [pc, #80]	@ (80124cc <USBD_LL_Init+0x98>)
 801247a:	2200      	movs	r2, #0
 801247c:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801247e:	4b13      	ldr	r3, [pc, #76]	@ (80124cc <USBD_LL_Init+0x98>)
 8012480:	2200      	movs	r2, #0
 8012482:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8012484:	4b11      	ldr	r3, [pc, #68]	@ (80124cc <USBD_LL_Init+0x98>)
 8012486:	2200      	movs	r2, #0
 8012488:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801248a:	4b10      	ldr	r3, [pc, #64]	@ (80124cc <USBD_LL_Init+0x98>)
 801248c:	2200      	movs	r2, #0
 801248e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8012490:	4b0e      	ldr	r3, [pc, #56]	@ (80124cc <USBD_LL_Init+0x98>)
 8012492:	2200      	movs	r2, #0
 8012494:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8012496:	480d      	ldr	r0, [pc, #52]	@ (80124cc <USBD_LL_Init+0x98>)
 8012498:	f7f5 fd1b 	bl	8007ed2 <HAL_PCD_Init>
 801249c:	4603      	mov	r3, r0
 801249e:	2b00      	cmp	r3, #0
 80124a0:	d001      	beq.n	80124a6 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 80124a2:	f7ef f8a1 	bl	80015e8 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80124a6:	2180      	movs	r1, #128	@ 0x80
 80124a8:	4808      	ldr	r0, [pc, #32]	@ (80124cc <USBD_LL_Init+0x98>)
 80124aa:	f7f6 ff72 	bl	8009392 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80124ae:	2240      	movs	r2, #64	@ 0x40
 80124b0:	2100      	movs	r1, #0
 80124b2:	4806      	ldr	r0, [pc, #24]	@ (80124cc <USBD_LL_Init+0x98>)
 80124b4:	f7f6 ff26 	bl	8009304 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80124b8:	2280      	movs	r2, #128	@ 0x80
 80124ba:	2101      	movs	r1, #1
 80124bc:	4803      	ldr	r0, [pc, #12]	@ (80124cc <USBD_LL_Init+0x98>)
 80124be:	f7f6 ff21 	bl	8009304 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 80124c2:	2300      	movs	r3, #0
}
 80124c4:	4618      	mov	r0, r3
 80124c6:	3708      	adds	r7, #8
 80124c8:	46bd      	mov	sp, r7
 80124ca:	bd80      	pop	{r7, pc}
 80124cc:	24001a0c 	.word	0x24001a0c
 80124d0:	40080000 	.word	0x40080000

080124d4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80124d4:	b580      	push	{r7, lr}
 80124d6:	b084      	sub	sp, #16
 80124d8:	af00      	add	r7, sp, #0
 80124da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80124dc:	2300      	movs	r3, #0
 80124de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80124e0:	2300      	movs	r3, #0
 80124e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80124e4:	687b      	ldr	r3, [r7, #4]
 80124e6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80124ea:	4618      	mov	r0, r3
 80124ec:	f7f5 fdfd 	bl	80080ea <HAL_PCD_Start>
 80124f0:	4603      	mov	r3, r0
 80124f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80124f4:	7bfb      	ldrb	r3, [r7, #15]
 80124f6:	4618      	mov	r0, r3
 80124f8:	f000 f942 	bl	8012780 <USBD_Get_USB_Status>
 80124fc:	4603      	mov	r3, r0
 80124fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012500:	7bbb      	ldrb	r3, [r7, #14]
}
 8012502:	4618      	mov	r0, r3
 8012504:	3710      	adds	r7, #16
 8012506:	46bd      	mov	sp, r7
 8012508:	bd80      	pop	{r7, pc}

0801250a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801250a:	b580      	push	{r7, lr}
 801250c:	b084      	sub	sp, #16
 801250e:	af00      	add	r7, sp, #0
 8012510:	6078      	str	r0, [r7, #4]
 8012512:	4608      	mov	r0, r1
 8012514:	4611      	mov	r1, r2
 8012516:	461a      	mov	r2, r3
 8012518:	4603      	mov	r3, r0
 801251a:	70fb      	strb	r3, [r7, #3]
 801251c:	460b      	mov	r3, r1
 801251e:	70bb      	strb	r3, [r7, #2]
 8012520:	4613      	mov	r3, r2
 8012522:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012524:	2300      	movs	r3, #0
 8012526:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012528:	2300      	movs	r3, #0
 801252a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801252c:	687b      	ldr	r3, [r7, #4]
 801252e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8012532:	78bb      	ldrb	r3, [r7, #2]
 8012534:	883a      	ldrh	r2, [r7, #0]
 8012536:	78f9      	ldrb	r1, [r7, #3]
 8012538:	f7f6 fafe 	bl	8008b38 <HAL_PCD_EP_Open>
 801253c:	4603      	mov	r3, r0
 801253e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012540:	7bfb      	ldrb	r3, [r7, #15]
 8012542:	4618      	mov	r0, r3
 8012544:	f000 f91c 	bl	8012780 <USBD_Get_USB_Status>
 8012548:	4603      	mov	r3, r0
 801254a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801254c:	7bbb      	ldrb	r3, [r7, #14]
}
 801254e:	4618      	mov	r0, r3
 8012550:	3710      	adds	r7, #16
 8012552:	46bd      	mov	sp, r7
 8012554:	bd80      	pop	{r7, pc}

08012556 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012556:	b580      	push	{r7, lr}
 8012558:	b084      	sub	sp, #16
 801255a:	af00      	add	r7, sp, #0
 801255c:	6078      	str	r0, [r7, #4]
 801255e:	460b      	mov	r3, r1
 8012560:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012562:	2300      	movs	r3, #0
 8012564:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012566:	2300      	movs	r3, #0
 8012568:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801256a:	687b      	ldr	r3, [r7, #4]
 801256c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8012570:	78fa      	ldrb	r2, [r7, #3]
 8012572:	4611      	mov	r1, r2
 8012574:	4618      	mov	r0, r3
 8012576:	f7f6 fb49 	bl	8008c0c <HAL_PCD_EP_Close>
 801257a:	4603      	mov	r3, r0
 801257c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801257e:	7bfb      	ldrb	r3, [r7, #15]
 8012580:	4618      	mov	r0, r3
 8012582:	f000 f8fd 	bl	8012780 <USBD_Get_USB_Status>
 8012586:	4603      	mov	r3, r0
 8012588:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801258a:	7bbb      	ldrb	r3, [r7, #14]
}
 801258c:	4618      	mov	r0, r3
 801258e:	3710      	adds	r7, #16
 8012590:	46bd      	mov	sp, r7
 8012592:	bd80      	pop	{r7, pc}

08012594 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012594:	b580      	push	{r7, lr}
 8012596:	b084      	sub	sp, #16
 8012598:	af00      	add	r7, sp, #0
 801259a:	6078      	str	r0, [r7, #4]
 801259c:	460b      	mov	r3, r1
 801259e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80125a0:	2300      	movs	r3, #0
 80125a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80125a4:	2300      	movs	r3, #0
 80125a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80125a8:	687b      	ldr	r3, [r7, #4]
 80125aa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80125ae:	78fa      	ldrb	r2, [r7, #3]
 80125b0:	4611      	mov	r1, r2
 80125b2:	4618      	mov	r0, r3
 80125b4:	f7f6 fc01 	bl	8008dba <HAL_PCD_EP_SetStall>
 80125b8:	4603      	mov	r3, r0
 80125ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80125bc:	7bfb      	ldrb	r3, [r7, #15]
 80125be:	4618      	mov	r0, r3
 80125c0:	f000 f8de 	bl	8012780 <USBD_Get_USB_Status>
 80125c4:	4603      	mov	r3, r0
 80125c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80125c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80125ca:	4618      	mov	r0, r3
 80125cc:	3710      	adds	r7, #16
 80125ce:	46bd      	mov	sp, r7
 80125d0:	bd80      	pop	{r7, pc}

080125d2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80125d2:	b580      	push	{r7, lr}
 80125d4:	b084      	sub	sp, #16
 80125d6:	af00      	add	r7, sp, #0
 80125d8:	6078      	str	r0, [r7, #4]
 80125da:	460b      	mov	r3, r1
 80125dc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80125de:	2300      	movs	r3, #0
 80125e0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80125e2:	2300      	movs	r3, #0
 80125e4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80125ec:	78fa      	ldrb	r2, [r7, #3]
 80125ee:	4611      	mov	r1, r2
 80125f0:	4618      	mov	r0, r3
 80125f2:	f7f6 fc45 	bl	8008e80 <HAL_PCD_EP_ClrStall>
 80125f6:	4603      	mov	r3, r0
 80125f8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80125fa:	7bfb      	ldrb	r3, [r7, #15]
 80125fc:	4618      	mov	r0, r3
 80125fe:	f000 f8bf 	bl	8012780 <USBD_Get_USB_Status>
 8012602:	4603      	mov	r3, r0
 8012604:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012606:	7bbb      	ldrb	r3, [r7, #14]
}
 8012608:	4618      	mov	r0, r3
 801260a:	3710      	adds	r7, #16
 801260c:	46bd      	mov	sp, r7
 801260e:	bd80      	pop	{r7, pc}

08012610 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012610:	b480      	push	{r7}
 8012612:	b085      	sub	sp, #20
 8012614:	af00      	add	r7, sp, #0
 8012616:	6078      	str	r0, [r7, #4]
 8012618:	460b      	mov	r3, r1
 801261a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801261c:	687b      	ldr	r3, [r7, #4]
 801261e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8012622:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8012624:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8012628:	2b00      	cmp	r3, #0
 801262a:	da0b      	bge.n	8012644 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801262c:	78fb      	ldrb	r3, [r7, #3]
 801262e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8012632:	68f9      	ldr	r1, [r7, #12]
 8012634:	4613      	mov	r3, r2
 8012636:	00db      	lsls	r3, r3, #3
 8012638:	4413      	add	r3, r2
 801263a:	009b      	lsls	r3, r3, #2
 801263c:	440b      	add	r3, r1
 801263e:	3316      	adds	r3, #22
 8012640:	781b      	ldrb	r3, [r3, #0]
 8012642:	e00b      	b.n	801265c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8012644:	78fb      	ldrb	r3, [r7, #3]
 8012646:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801264a:	68f9      	ldr	r1, [r7, #12]
 801264c:	4613      	mov	r3, r2
 801264e:	00db      	lsls	r3, r3, #3
 8012650:	4413      	add	r3, r2
 8012652:	009b      	lsls	r3, r3, #2
 8012654:	440b      	add	r3, r1
 8012656:	f203 2356 	addw	r3, r3, #598	@ 0x256
 801265a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801265c:	4618      	mov	r0, r3
 801265e:	3714      	adds	r7, #20
 8012660:	46bd      	mov	sp, r7
 8012662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012666:	4770      	bx	lr

08012668 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8012668:	b580      	push	{r7, lr}
 801266a:	b084      	sub	sp, #16
 801266c:	af00      	add	r7, sp, #0
 801266e:	6078      	str	r0, [r7, #4]
 8012670:	460b      	mov	r3, r1
 8012672:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012674:	2300      	movs	r3, #0
 8012676:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012678:	2300      	movs	r3, #0
 801267a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801267c:	687b      	ldr	r3, [r7, #4]
 801267e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8012682:	78fa      	ldrb	r2, [r7, #3]
 8012684:	4611      	mov	r1, r2
 8012686:	4618      	mov	r0, r3
 8012688:	f7f6 fa32 	bl	8008af0 <HAL_PCD_SetAddress>
 801268c:	4603      	mov	r3, r0
 801268e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012690:	7bfb      	ldrb	r3, [r7, #15]
 8012692:	4618      	mov	r0, r3
 8012694:	f000 f874 	bl	8012780 <USBD_Get_USB_Status>
 8012698:	4603      	mov	r3, r0
 801269a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801269c:	7bbb      	ldrb	r3, [r7, #14]
}
 801269e:	4618      	mov	r0, r3
 80126a0:	3710      	adds	r7, #16
 80126a2:	46bd      	mov	sp, r7
 80126a4:	bd80      	pop	{r7, pc}

080126a6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80126a6:	b580      	push	{r7, lr}
 80126a8:	b086      	sub	sp, #24
 80126aa:	af00      	add	r7, sp, #0
 80126ac:	60f8      	str	r0, [r7, #12]
 80126ae:	607a      	str	r2, [r7, #4]
 80126b0:	603b      	str	r3, [r7, #0]
 80126b2:	460b      	mov	r3, r1
 80126b4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80126b6:	2300      	movs	r3, #0
 80126b8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80126ba:	2300      	movs	r3, #0
 80126bc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80126be:	68fb      	ldr	r3, [r7, #12]
 80126c0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80126c4:	7af9      	ldrb	r1, [r7, #11]
 80126c6:	683b      	ldr	r3, [r7, #0]
 80126c8:	687a      	ldr	r2, [r7, #4]
 80126ca:	f7f6 fb3c 	bl	8008d46 <HAL_PCD_EP_Transmit>
 80126ce:	4603      	mov	r3, r0
 80126d0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80126d2:	7dfb      	ldrb	r3, [r7, #23]
 80126d4:	4618      	mov	r0, r3
 80126d6:	f000 f853 	bl	8012780 <USBD_Get_USB_Status>
 80126da:	4603      	mov	r3, r0
 80126dc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80126de:	7dbb      	ldrb	r3, [r7, #22]
}
 80126e0:	4618      	mov	r0, r3
 80126e2:	3718      	adds	r7, #24
 80126e4:	46bd      	mov	sp, r7
 80126e6:	bd80      	pop	{r7, pc}

080126e8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80126e8:	b580      	push	{r7, lr}
 80126ea:	b086      	sub	sp, #24
 80126ec:	af00      	add	r7, sp, #0
 80126ee:	60f8      	str	r0, [r7, #12]
 80126f0:	607a      	str	r2, [r7, #4]
 80126f2:	603b      	str	r3, [r7, #0]
 80126f4:	460b      	mov	r3, r1
 80126f6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80126f8:	2300      	movs	r3, #0
 80126fa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80126fc:	2300      	movs	r3, #0
 80126fe:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8012700:	68fb      	ldr	r3, [r7, #12]
 8012702:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8012706:	7af9      	ldrb	r1, [r7, #11]
 8012708:	683b      	ldr	r3, [r7, #0]
 801270a:	687a      	ldr	r2, [r7, #4]
 801270c:	f7f6 fac8 	bl	8008ca0 <HAL_PCD_EP_Receive>
 8012710:	4603      	mov	r3, r0
 8012712:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012714:	7dfb      	ldrb	r3, [r7, #23]
 8012716:	4618      	mov	r0, r3
 8012718:	f000 f832 	bl	8012780 <USBD_Get_USB_Status>
 801271c:	4603      	mov	r3, r0
 801271e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8012720:	7dbb      	ldrb	r3, [r7, #22]
}
 8012722:	4618      	mov	r0, r3
 8012724:	3718      	adds	r7, #24
 8012726:	46bd      	mov	sp, r7
 8012728:	bd80      	pop	{r7, pc}

0801272a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801272a:	b580      	push	{r7, lr}
 801272c:	b082      	sub	sp, #8
 801272e:	af00      	add	r7, sp, #0
 8012730:	6078      	str	r0, [r7, #4]
 8012732:	460b      	mov	r3, r1
 8012734:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8012736:	687b      	ldr	r3, [r7, #4]
 8012738:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801273c:	78fa      	ldrb	r2, [r7, #3]
 801273e:	4611      	mov	r1, r2
 8012740:	4618      	mov	r0, r3
 8012742:	f7f6 fae8 	bl	8008d16 <HAL_PCD_EP_GetRxCount>
 8012746:	4603      	mov	r3, r0
}
 8012748:	4618      	mov	r0, r3
 801274a:	3708      	adds	r7, #8
 801274c:	46bd      	mov	sp, r7
 801274e:	bd80      	pop	{r7, pc}

08012750 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8012750:	b480      	push	{r7}
 8012752:	b083      	sub	sp, #12
 8012754:	af00      	add	r7, sp, #0
 8012756:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8012758:	4b03      	ldr	r3, [pc, #12]	@ (8012768 <USBD_static_malloc+0x18>)
}
 801275a:	4618      	mov	r0, r3
 801275c:	370c      	adds	r7, #12
 801275e:	46bd      	mov	sp, r7
 8012760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012764:	4770      	bx	lr
 8012766:	bf00      	nop
 8012768:	24001ef0 	.word	0x24001ef0

0801276c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801276c:	b480      	push	{r7}
 801276e:	b083      	sub	sp, #12
 8012770:	af00      	add	r7, sp, #0
 8012772:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8012774:	bf00      	nop
 8012776:	370c      	adds	r7, #12
 8012778:	46bd      	mov	sp, r7
 801277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801277e:	4770      	bx	lr

08012780 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8012780:	b480      	push	{r7}
 8012782:	b085      	sub	sp, #20
 8012784:	af00      	add	r7, sp, #0
 8012786:	4603      	mov	r3, r0
 8012788:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801278a:	2300      	movs	r3, #0
 801278c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801278e:	79fb      	ldrb	r3, [r7, #7]
 8012790:	2b03      	cmp	r3, #3
 8012792:	d817      	bhi.n	80127c4 <USBD_Get_USB_Status+0x44>
 8012794:	a201      	add	r2, pc, #4	@ (adr r2, 801279c <USBD_Get_USB_Status+0x1c>)
 8012796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801279a:	bf00      	nop
 801279c:	080127ad 	.word	0x080127ad
 80127a0:	080127b3 	.word	0x080127b3
 80127a4:	080127b9 	.word	0x080127b9
 80127a8:	080127bf 	.word	0x080127bf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80127ac:	2300      	movs	r3, #0
 80127ae:	73fb      	strb	r3, [r7, #15]
    break;
 80127b0:	e00b      	b.n	80127ca <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80127b2:	2303      	movs	r3, #3
 80127b4:	73fb      	strb	r3, [r7, #15]
    break;
 80127b6:	e008      	b.n	80127ca <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80127b8:	2301      	movs	r3, #1
 80127ba:	73fb      	strb	r3, [r7, #15]
    break;
 80127bc:	e005      	b.n	80127ca <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80127be:	2303      	movs	r3, #3
 80127c0:	73fb      	strb	r3, [r7, #15]
    break;
 80127c2:	e002      	b.n	80127ca <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80127c4:	2303      	movs	r3, #3
 80127c6:	73fb      	strb	r3, [r7, #15]
    break;
 80127c8:	bf00      	nop
  }
  return usb_status;
 80127ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80127cc:	4618      	mov	r0, r3
 80127ce:	3714      	adds	r7, #20
 80127d0:	46bd      	mov	sp, r7
 80127d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127d6:	4770      	bx	lr

080127d8 <siprintf>:
 80127d8:	b40e      	push	{r1, r2, r3}
 80127da:	b510      	push	{r4, lr}
 80127dc:	b09d      	sub	sp, #116	@ 0x74
 80127de:	ab1f      	add	r3, sp, #124	@ 0x7c
 80127e0:	9002      	str	r0, [sp, #8]
 80127e2:	9006      	str	r0, [sp, #24]
 80127e4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80127e8:	480a      	ldr	r0, [pc, #40]	@ (8012814 <siprintf+0x3c>)
 80127ea:	9107      	str	r1, [sp, #28]
 80127ec:	9104      	str	r1, [sp, #16]
 80127ee:	490a      	ldr	r1, [pc, #40]	@ (8012818 <siprintf+0x40>)
 80127f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80127f4:	9105      	str	r1, [sp, #20]
 80127f6:	2400      	movs	r4, #0
 80127f8:	a902      	add	r1, sp, #8
 80127fa:	6800      	ldr	r0, [r0, #0]
 80127fc:	9301      	str	r3, [sp, #4]
 80127fe:	941b      	str	r4, [sp, #108]	@ 0x6c
 8012800:	f000 f994 	bl	8012b2c <_svfiprintf_r>
 8012804:	9b02      	ldr	r3, [sp, #8]
 8012806:	701c      	strb	r4, [r3, #0]
 8012808:	b01d      	add	sp, #116	@ 0x74
 801280a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801280e:	b003      	add	sp, #12
 8012810:	4770      	bx	lr
 8012812:	bf00      	nop
 8012814:	24000104 	.word	0x24000104
 8012818:	ffff0208 	.word	0xffff0208

0801281c <memset>:
 801281c:	4402      	add	r2, r0
 801281e:	4603      	mov	r3, r0
 8012820:	4293      	cmp	r3, r2
 8012822:	d100      	bne.n	8012826 <memset+0xa>
 8012824:	4770      	bx	lr
 8012826:	f803 1b01 	strb.w	r1, [r3], #1
 801282a:	e7f9      	b.n	8012820 <memset+0x4>

0801282c <__errno>:
 801282c:	4b01      	ldr	r3, [pc, #4]	@ (8012834 <__errno+0x8>)
 801282e:	6818      	ldr	r0, [r3, #0]
 8012830:	4770      	bx	lr
 8012832:	bf00      	nop
 8012834:	24000104 	.word	0x24000104

08012838 <__libc_init_array>:
 8012838:	b570      	push	{r4, r5, r6, lr}
 801283a:	4d0d      	ldr	r5, [pc, #52]	@ (8012870 <__libc_init_array+0x38>)
 801283c:	4c0d      	ldr	r4, [pc, #52]	@ (8012874 <__libc_init_array+0x3c>)
 801283e:	1b64      	subs	r4, r4, r5
 8012840:	10a4      	asrs	r4, r4, #2
 8012842:	2600      	movs	r6, #0
 8012844:	42a6      	cmp	r6, r4
 8012846:	d109      	bne.n	801285c <__libc_init_array+0x24>
 8012848:	4d0b      	ldr	r5, [pc, #44]	@ (8012878 <__libc_init_array+0x40>)
 801284a:	4c0c      	ldr	r4, [pc, #48]	@ (801287c <__libc_init_array+0x44>)
 801284c:	f000 fc64 	bl	8013118 <_init>
 8012850:	1b64      	subs	r4, r4, r5
 8012852:	10a4      	asrs	r4, r4, #2
 8012854:	2600      	movs	r6, #0
 8012856:	42a6      	cmp	r6, r4
 8012858:	d105      	bne.n	8012866 <__libc_init_array+0x2e>
 801285a:	bd70      	pop	{r4, r5, r6, pc}
 801285c:	f855 3b04 	ldr.w	r3, [r5], #4
 8012860:	4798      	blx	r3
 8012862:	3601      	adds	r6, #1
 8012864:	e7ee      	b.n	8012844 <__libc_init_array+0xc>
 8012866:	f855 3b04 	ldr.w	r3, [r5], #4
 801286a:	4798      	blx	r3
 801286c:	3601      	adds	r6, #1
 801286e:	e7f2      	b.n	8012856 <__libc_init_array+0x1e>
 8012870:	08013354 	.word	0x08013354
 8012874:	08013354 	.word	0x08013354
 8012878:	08013354 	.word	0x08013354
 801287c:	08013358 	.word	0x08013358

08012880 <__retarget_lock_acquire_recursive>:
 8012880:	4770      	bx	lr

08012882 <__retarget_lock_release_recursive>:
 8012882:	4770      	bx	lr

08012884 <_free_r>:
 8012884:	b538      	push	{r3, r4, r5, lr}
 8012886:	4605      	mov	r5, r0
 8012888:	2900      	cmp	r1, #0
 801288a:	d041      	beq.n	8012910 <_free_r+0x8c>
 801288c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012890:	1f0c      	subs	r4, r1, #4
 8012892:	2b00      	cmp	r3, #0
 8012894:	bfb8      	it	lt
 8012896:	18e4      	addlt	r4, r4, r3
 8012898:	f000 f8e0 	bl	8012a5c <__malloc_lock>
 801289c:	4a1d      	ldr	r2, [pc, #116]	@ (8012914 <_free_r+0x90>)
 801289e:	6813      	ldr	r3, [r2, #0]
 80128a0:	b933      	cbnz	r3, 80128b0 <_free_r+0x2c>
 80128a2:	6063      	str	r3, [r4, #4]
 80128a4:	6014      	str	r4, [r2, #0]
 80128a6:	4628      	mov	r0, r5
 80128a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80128ac:	f000 b8dc 	b.w	8012a68 <__malloc_unlock>
 80128b0:	42a3      	cmp	r3, r4
 80128b2:	d908      	bls.n	80128c6 <_free_r+0x42>
 80128b4:	6820      	ldr	r0, [r4, #0]
 80128b6:	1821      	adds	r1, r4, r0
 80128b8:	428b      	cmp	r3, r1
 80128ba:	bf01      	itttt	eq
 80128bc:	6819      	ldreq	r1, [r3, #0]
 80128be:	685b      	ldreq	r3, [r3, #4]
 80128c0:	1809      	addeq	r1, r1, r0
 80128c2:	6021      	streq	r1, [r4, #0]
 80128c4:	e7ed      	b.n	80128a2 <_free_r+0x1e>
 80128c6:	461a      	mov	r2, r3
 80128c8:	685b      	ldr	r3, [r3, #4]
 80128ca:	b10b      	cbz	r3, 80128d0 <_free_r+0x4c>
 80128cc:	42a3      	cmp	r3, r4
 80128ce:	d9fa      	bls.n	80128c6 <_free_r+0x42>
 80128d0:	6811      	ldr	r1, [r2, #0]
 80128d2:	1850      	adds	r0, r2, r1
 80128d4:	42a0      	cmp	r0, r4
 80128d6:	d10b      	bne.n	80128f0 <_free_r+0x6c>
 80128d8:	6820      	ldr	r0, [r4, #0]
 80128da:	4401      	add	r1, r0
 80128dc:	1850      	adds	r0, r2, r1
 80128de:	4283      	cmp	r3, r0
 80128e0:	6011      	str	r1, [r2, #0]
 80128e2:	d1e0      	bne.n	80128a6 <_free_r+0x22>
 80128e4:	6818      	ldr	r0, [r3, #0]
 80128e6:	685b      	ldr	r3, [r3, #4]
 80128e8:	6053      	str	r3, [r2, #4]
 80128ea:	4408      	add	r0, r1
 80128ec:	6010      	str	r0, [r2, #0]
 80128ee:	e7da      	b.n	80128a6 <_free_r+0x22>
 80128f0:	d902      	bls.n	80128f8 <_free_r+0x74>
 80128f2:	230c      	movs	r3, #12
 80128f4:	602b      	str	r3, [r5, #0]
 80128f6:	e7d6      	b.n	80128a6 <_free_r+0x22>
 80128f8:	6820      	ldr	r0, [r4, #0]
 80128fa:	1821      	adds	r1, r4, r0
 80128fc:	428b      	cmp	r3, r1
 80128fe:	bf04      	itt	eq
 8012900:	6819      	ldreq	r1, [r3, #0]
 8012902:	685b      	ldreq	r3, [r3, #4]
 8012904:	6063      	str	r3, [r4, #4]
 8012906:	bf04      	itt	eq
 8012908:	1809      	addeq	r1, r1, r0
 801290a:	6021      	streq	r1, [r4, #0]
 801290c:	6054      	str	r4, [r2, #4]
 801290e:	e7ca      	b.n	80128a6 <_free_r+0x22>
 8012910:	bd38      	pop	{r3, r4, r5, pc}
 8012912:	bf00      	nop
 8012914:	24002254 	.word	0x24002254

08012918 <sbrk_aligned>:
 8012918:	b570      	push	{r4, r5, r6, lr}
 801291a:	4e0f      	ldr	r6, [pc, #60]	@ (8012958 <sbrk_aligned+0x40>)
 801291c:	460c      	mov	r4, r1
 801291e:	6831      	ldr	r1, [r6, #0]
 8012920:	4605      	mov	r5, r0
 8012922:	b911      	cbnz	r1, 801292a <sbrk_aligned+0x12>
 8012924:	f000 fba4 	bl	8013070 <_sbrk_r>
 8012928:	6030      	str	r0, [r6, #0]
 801292a:	4621      	mov	r1, r4
 801292c:	4628      	mov	r0, r5
 801292e:	f000 fb9f 	bl	8013070 <_sbrk_r>
 8012932:	1c43      	adds	r3, r0, #1
 8012934:	d103      	bne.n	801293e <sbrk_aligned+0x26>
 8012936:	f04f 34ff 	mov.w	r4, #4294967295
 801293a:	4620      	mov	r0, r4
 801293c:	bd70      	pop	{r4, r5, r6, pc}
 801293e:	1cc4      	adds	r4, r0, #3
 8012940:	f024 0403 	bic.w	r4, r4, #3
 8012944:	42a0      	cmp	r0, r4
 8012946:	d0f8      	beq.n	801293a <sbrk_aligned+0x22>
 8012948:	1a21      	subs	r1, r4, r0
 801294a:	4628      	mov	r0, r5
 801294c:	f000 fb90 	bl	8013070 <_sbrk_r>
 8012950:	3001      	adds	r0, #1
 8012952:	d1f2      	bne.n	801293a <sbrk_aligned+0x22>
 8012954:	e7ef      	b.n	8012936 <sbrk_aligned+0x1e>
 8012956:	bf00      	nop
 8012958:	24002250 	.word	0x24002250

0801295c <_malloc_r>:
 801295c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012960:	1ccd      	adds	r5, r1, #3
 8012962:	f025 0503 	bic.w	r5, r5, #3
 8012966:	3508      	adds	r5, #8
 8012968:	2d0c      	cmp	r5, #12
 801296a:	bf38      	it	cc
 801296c:	250c      	movcc	r5, #12
 801296e:	2d00      	cmp	r5, #0
 8012970:	4606      	mov	r6, r0
 8012972:	db01      	blt.n	8012978 <_malloc_r+0x1c>
 8012974:	42a9      	cmp	r1, r5
 8012976:	d904      	bls.n	8012982 <_malloc_r+0x26>
 8012978:	230c      	movs	r3, #12
 801297a:	6033      	str	r3, [r6, #0]
 801297c:	2000      	movs	r0, #0
 801297e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012982:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8012a58 <_malloc_r+0xfc>
 8012986:	f000 f869 	bl	8012a5c <__malloc_lock>
 801298a:	f8d8 3000 	ldr.w	r3, [r8]
 801298e:	461c      	mov	r4, r3
 8012990:	bb44      	cbnz	r4, 80129e4 <_malloc_r+0x88>
 8012992:	4629      	mov	r1, r5
 8012994:	4630      	mov	r0, r6
 8012996:	f7ff ffbf 	bl	8012918 <sbrk_aligned>
 801299a:	1c43      	adds	r3, r0, #1
 801299c:	4604      	mov	r4, r0
 801299e:	d158      	bne.n	8012a52 <_malloc_r+0xf6>
 80129a0:	f8d8 4000 	ldr.w	r4, [r8]
 80129a4:	4627      	mov	r7, r4
 80129a6:	2f00      	cmp	r7, #0
 80129a8:	d143      	bne.n	8012a32 <_malloc_r+0xd6>
 80129aa:	2c00      	cmp	r4, #0
 80129ac:	d04b      	beq.n	8012a46 <_malloc_r+0xea>
 80129ae:	6823      	ldr	r3, [r4, #0]
 80129b0:	4639      	mov	r1, r7
 80129b2:	4630      	mov	r0, r6
 80129b4:	eb04 0903 	add.w	r9, r4, r3
 80129b8:	f000 fb5a 	bl	8013070 <_sbrk_r>
 80129bc:	4581      	cmp	r9, r0
 80129be:	d142      	bne.n	8012a46 <_malloc_r+0xea>
 80129c0:	6821      	ldr	r1, [r4, #0]
 80129c2:	1a6d      	subs	r5, r5, r1
 80129c4:	4629      	mov	r1, r5
 80129c6:	4630      	mov	r0, r6
 80129c8:	f7ff ffa6 	bl	8012918 <sbrk_aligned>
 80129cc:	3001      	adds	r0, #1
 80129ce:	d03a      	beq.n	8012a46 <_malloc_r+0xea>
 80129d0:	6823      	ldr	r3, [r4, #0]
 80129d2:	442b      	add	r3, r5
 80129d4:	6023      	str	r3, [r4, #0]
 80129d6:	f8d8 3000 	ldr.w	r3, [r8]
 80129da:	685a      	ldr	r2, [r3, #4]
 80129dc:	bb62      	cbnz	r2, 8012a38 <_malloc_r+0xdc>
 80129de:	f8c8 7000 	str.w	r7, [r8]
 80129e2:	e00f      	b.n	8012a04 <_malloc_r+0xa8>
 80129e4:	6822      	ldr	r2, [r4, #0]
 80129e6:	1b52      	subs	r2, r2, r5
 80129e8:	d420      	bmi.n	8012a2c <_malloc_r+0xd0>
 80129ea:	2a0b      	cmp	r2, #11
 80129ec:	d917      	bls.n	8012a1e <_malloc_r+0xc2>
 80129ee:	1961      	adds	r1, r4, r5
 80129f0:	42a3      	cmp	r3, r4
 80129f2:	6025      	str	r5, [r4, #0]
 80129f4:	bf18      	it	ne
 80129f6:	6059      	strne	r1, [r3, #4]
 80129f8:	6863      	ldr	r3, [r4, #4]
 80129fa:	bf08      	it	eq
 80129fc:	f8c8 1000 	streq.w	r1, [r8]
 8012a00:	5162      	str	r2, [r4, r5]
 8012a02:	604b      	str	r3, [r1, #4]
 8012a04:	4630      	mov	r0, r6
 8012a06:	f000 f82f 	bl	8012a68 <__malloc_unlock>
 8012a0a:	f104 000b 	add.w	r0, r4, #11
 8012a0e:	1d23      	adds	r3, r4, #4
 8012a10:	f020 0007 	bic.w	r0, r0, #7
 8012a14:	1ac2      	subs	r2, r0, r3
 8012a16:	bf1c      	itt	ne
 8012a18:	1a1b      	subne	r3, r3, r0
 8012a1a:	50a3      	strne	r3, [r4, r2]
 8012a1c:	e7af      	b.n	801297e <_malloc_r+0x22>
 8012a1e:	6862      	ldr	r2, [r4, #4]
 8012a20:	42a3      	cmp	r3, r4
 8012a22:	bf0c      	ite	eq
 8012a24:	f8c8 2000 	streq.w	r2, [r8]
 8012a28:	605a      	strne	r2, [r3, #4]
 8012a2a:	e7eb      	b.n	8012a04 <_malloc_r+0xa8>
 8012a2c:	4623      	mov	r3, r4
 8012a2e:	6864      	ldr	r4, [r4, #4]
 8012a30:	e7ae      	b.n	8012990 <_malloc_r+0x34>
 8012a32:	463c      	mov	r4, r7
 8012a34:	687f      	ldr	r7, [r7, #4]
 8012a36:	e7b6      	b.n	80129a6 <_malloc_r+0x4a>
 8012a38:	461a      	mov	r2, r3
 8012a3a:	685b      	ldr	r3, [r3, #4]
 8012a3c:	42a3      	cmp	r3, r4
 8012a3e:	d1fb      	bne.n	8012a38 <_malloc_r+0xdc>
 8012a40:	2300      	movs	r3, #0
 8012a42:	6053      	str	r3, [r2, #4]
 8012a44:	e7de      	b.n	8012a04 <_malloc_r+0xa8>
 8012a46:	230c      	movs	r3, #12
 8012a48:	6033      	str	r3, [r6, #0]
 8012a4a:	4630      	mov	r0, r6
 8012a4c:	f000 f80c 	bl	8012a68 <__malloc_unlock>
 8012a50:	e794      	b.n	801297c <_malloc_r+0x20>
 8012a52:	6005      	str	r5, [r0, #0]
 8012a54:	e7d6      	b.n	8012a04 <_malloc_r+0xa8>
 8012a56:	bf00      	nop
 8012a58:	24002254 	.word	0x24002254

08012a5c <__malloc_lock>:
 8012a5c:	4801      	ldr	r0, [pc, #4]	@ (8012a64 <__malloc_lock+0x8>)
 8012a5e:	f7ff bf0f 	b.w	8012880 <__retarget_lock_acquire_recursive>
 8012a62:	bf00      	nop
 8012a64:	2400224c 	.word	0x2400224c

08012a68 <__malloc_unlock>:
 8012a68:	4801      	ldr	r0, [pc, #4]	@ (8012a70 <__malloc_unlock+0x8>)
 8012a6a:	f7ff bf0a 	b.w	8012882 <__retarget_lock_release_recursive>
 8012a6e:	bf00      	nop
 8012a70:	2400224c 	.word	0x2400224c

08012a74 <__ssputs_r>:
 8012a74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012a78:	688e      	ldr	r6, [r1, #8]
 8012a7a:	461f      	mov	r7, r3
 8012a7c:	42be      	cmp	r6, r7
 8012a7e:	680b      	ldr	r3, [r1, #0]
 8012a80:	4682      	mov	sl, r0
 8012a82:	460c      	mov	r4, r1
 8012a84:	4690      	mov	r8, r2
 8012a86:	d82d      	bhi.n	8012ae4 <__ssputs_r+0x70>
 8012a88:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012a8c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8012a90:	d026      	beq.n	8012ae0 <__ssputs_r+0x6c>
 8012a92:	6965      	ldr	r5, [r4, #20]
 8012a94:	6909      	ldr	r1, [r1, #16]
 8012a96:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012a9a:	eba3 0901 	sub.w	r9, r3, r1
 8012a9e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012aa2:	1c7b      	adds	r3, r7, #1
 8012aa4:	444b      	add	r3, r9
 8012aa6:	106d      	asrs	r5, r5, #1
 8012aa8:	429d      	cmp	r5, r3
 8012aaa:	bf38      	it	cc
 8012aac:	461d      	movcc	r5, r3
 8012aae:	0553      	lsls	r3, r2, #21
 8012ab0:	d527      	bpl.n	8012b02 <__ssputs_r+0x8e>
 8012ab2:	4629      	mov	r1, r5
 8012ab4:	f7ff ff52 	bl	801295c <_malloc_r>
 8012ab8:	4606      	mov	r6, r0
 8012aba:	b360      	cbz	r0, 8012b16 <__ssputs_r+0xa2>
 8012abc:	6921      	ldr	r1, [r4, #16]
 8012abe:	464a      	mov	r2, r9
 8012ac0:	f000 fae6 	bl	8013090 <memcpy>
 8012ac4:	89a3      	ldrh	r3, [r4, #12]
 8012ac6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8012aca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012ace:	81a3      	strh	r3, [r4, #12]
 8012ad0:	6126      	str	r6, [r4, #16]
 8012ad2:	6165      	str	r5, [r4, #20]
 8012ad4:	444e      	add	r6, r9
 8012ad6:	eba5 0509 	sub.w	r5, r5, r9
 8012ada:	6026      	str	r6, [r4, #0]
 8012adc:	60a5      	str	r5, [r4, #8]
 8012ade:	463e      	mov	r6, r7
 8012ae0:	42be      	cmp	r6, r7
 8012ae2:	d900      	bls.n	8012ae6 <__ssputs_r+0x72>
 8012ae4:	463e      	mov	r6, r7
 8012ae6:	6820      	ldr	r0, [r4, #0]
 8012ae8:	4632      	mov	r2, r6
 8012aea:	4641      	mov	r1, r8
 8012aec:	f000 faa6 	bl	801303c <memmove>
 8012af0:	68a3      	ldr	r3, [r4, #8]
 8012af2:	1b9b      	subs	r3, r3, r6
 8012af4:	60a3      	str	r3, [r4, #8]
 8012af6:	6823      	ldr	r3, [r4, #0]
 8012af8:	4433      	add	r3, r6
 8012afa:	6023      	str	r3, [r4, #0]
 8012afc:	2000      	movs	r0, #0
 8012afe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012b02:	462a      	mov	r2, r5
 8012b04:	f000 fad2 	bl	80130ac <_realloc_r>
 8012b08:	4606      	mov	r6, r0
 8012b0a:	2800      	cmp	r0, #0
 8012b0c:	d1e0      	bne.n	8012ad0 <__ssputs_r+0x5c>
 8012b0e:	6921      	ldr	r1, [r4, #16]
 8012b10:	4650      	mov	r0, sl
 8012b12:	f7ff feb7 	bl	8012884 <_free_r>
 8012b16:	230c      	movs	r3, #12
 8012b18:	f8ca 3000 	str.w	r3, [sl]
 8012b1c:	89a3      	ldrh	r3, [r4, #12]
 8012b1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012b22:	81a3      	strh	r3, [r4, #12]
 8012b24:	f04f 30ff 	mov.w	r0, #4294967295
 8012b28:	e7e9      	b.n	8012afe <__ssputs_r+0x8a>
	...

08012b2c <_svfiprintf_r>:
 8012b2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b30:	4698      	mov	r8, r3
 8012b32:	898b      	ldrh	r3, [r1, #12]
 8012b34:	061b      	lsls	r3, r3, #24
 8012b36:	b09d      	sub	sp, #116	@ 0x74
 8012b38:	4607      	mov	r7, r0
 8012b3a:	460d      	mov	r5, r1
 8012b3c:	4614      	mov	r4, r2
 8012b3e:	d510      	bpl.n	8012b62 <_svfiprintf_r+0x36>
 8012b40:	690b      	ldr	r3, [r1, #16]
 8012b42:	b973      	cbnz	r3, 8012b62 <_svfiprintf_r+0x36>
 8012b44:	2140      	movs	r1, #64	@ 0x40
 8012b46:	f7ff ff09 	bl	801295c <_malloc_r>
 8012b4a:	6028      	str	r0, [r5, #0]
 8012b4c:	6128      	str	r0, [r5, #16]
 8012b4e:	b930      	cbnz	r0, 8012b5e <_svfiprintf_r+0x32>
 8012b50:	230c      	movs	r3, #12
 8012b52:	603b      	str	r3, [r7, #0]
 8012b54:	f04f 30ff 	mov.w	r0, #4294967295
 8012b58:	b01d      	add	sp, #116	@ 0x74
 8012b5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b5e:	2340      	movs	r3, #64	@ 0x40
 8012b60:	616b      	str	r3, [r5, #20]
 8012b62:	2300      	movs	r3, #0
 8012b64:	9309      	str	r3, [sp, #36]	@ 0x24
 8012b66:	2320      	movs	r3, #32
 8012b68:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012b6c:	f8cd 800c 	str.w	r8, [sp, #12]
 8012b70:	2330      	movs	r3, #48	@ 0x30
 8012b72:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8012d10 <_svfiprintf_r+0x1e4>
 8012b76:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012b7a:	f04f 0901 	mov.w	r9, #1
 8012b7e:	4623      	mov	r3, r4
 8012b80:	469a      	mov	sl, r3
 8012b82:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012b86:	b10a      	cbz	r2, 8012b8c <_svfiprintf_r+0x60>
 8012b88:	2a25      	cmp	r2, #37	@ 0x25
 8012b8a:	d1f9      	bne.n	8012b80 <_svfiprintf_r+0x54>
 8012b8c:	ebba 0b04 	subs.w	fp, sl, r4
 8012b90:	d00b      	beq.n	8012baa <_svfiprintf_r+0x7e>
 8012b92:	465b      	mov	r3, fp
 8012b94:	4622      	mov	r2, r4
 8012b96:	4629      	mov	r1, r5
 8012b98:	4638      	mov	r0, r7
 8012b9a:	f7ff ff6b 	bl	8012a74 <__ssputs_r>
 8012b9e:	3001      	adds	r0, #1
 8012ba0:	f000 80a7 	beq.w	8012cf2 <_svfiprintf_r+0x1c6>
 8012ba4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012ba6:	445a      	add	r2, fp
 8012ba8:	9209      	str	r2, [sp, #36]	@ 0x24
 8012baa:	f89a 3000 	ldrb.w	r3, [sl]
 8012bae:	2b00      	cmp	r3, #0
 8012bb0:	f000 809f 	beq.w	8012cf2 <_svfiprintf_r+0x1c6>
 8012bb4:	2300      	movs	r3, #0
 8012bb6:	f04f 32ff 	mov.w	r2, #4294967295
 8012bba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012bbe:	f10a 0a01 	add.w	sl, sl, #1
 8012bc2:	9304      	str	r3, [sp, #16]
 8012bc4:	9307      	str	r3, [sp, #28]
 8012bc6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012bca:	931a      	str	r3, [sp, #104]	@ 0x68
 8012bcc:	4654      	mov	r4, sl
 8012bce:	2205      	movs	r2, #5
 8012bd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012bd4:	484e      	ldr	r0, [pc, #312]	@ (8012d10 <_svfiprintf_r+0x1e4>)
 8012bd6:	f7ed fb8b 	bl	80002f0 <memchr>
 8012bda:	9a04      	ldr	r2, [sp, #16]
 8012bdc:	b9d8      	cbnz	r0, 8012c16 <_svfiprintf_r+0xea>
 8012bde:	06d0      	lsls	r0, r2, #27
 8012be0:	bf44      	itt	mi
 8012be2:	2320      	movmi	r3, #32
 8012be4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012be8:	0711      	lsls	r1, r2, #28
 8012bea:	bf44      	itt	mi
 8012bec:	232b      	movmi	r3, #43	@ 0x2b
 8012bee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012bf2:	f89a 3000 	ldrb.w	r3, [sl]
 8012bf6:	2b2a      	cmp	r3, #42	@ 0x2a
 8012bf8:	d015      	beq.n	8012c26 <_svfiprintf_r+0xfa>
 8012bfa:	9a07      	ldr	r2, [sp, #28]
 8012bfc:	4654      	mov	r4, sl
 8012bfe:	2000      	movs	r0, #0
 8012c00:	f04f 0c0a 	mov.w	ip, #10
 8012c04:	4621      	mov	r1, r4
 8012c06:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012c0a:	3b30      	subs	r3, #48	@ 0x30
 8012c0c:	2b09      	cmp	r3, #9
 8012c0e:	d94b      	bls.n	8012ca8 <_svfiprintf_r+0x17c>
 8012c10:	b1b0      	cbz	r0, 8012c40 <_svfiprintf_r+0x114>
 8012c12:	9207      	str	r2, [sp, #28]
 8012c14:	e014      	b.n	8012c40 <_svfiprintf_r+0x114>
 8012c16:	eba0 0308 	sub.w	r3, r0, r8
 8012c1a:	fa09 f303 	lsl.w	r3, r9, r3
 8012c1e:	4313      	orrs	r3, r2
 8012c20:	9304      	str	r3, [sp, #16]
 8012c22:	46a2      	mov	sl, r4
 8012c24:	e7d2      	b.n	8012bcc <_svfiprintf_r+0xa0>
 8012c26:	9b03      	ldr	r3, [sp, #12]
 8012c28:	1d19      	adds	r1, r3, #4
 8012c2a:	681b      	ldr	r3, [r3, #0]
 8012c2c:	9103      	str	r1, [sp, #12]
 8012c2e:	2b00      	cmp	r3, #0
 8012c30:	bfbb      	ittet	lt
 8012c32:	425b      	neglt	r3, r3
 8012c34:	f042 0202 	orrlt.w	r2, r2, #2
 8012c38:	9307      	strge	r3, [sp, #28]
 8012c3a:	9307      	strlt	r3, [sp, #28]
 8012c3c:	bfb8      	it	lt
 8012c3e:	9204      	strlt	r2, [sp, #16]
 8012c40:	7823      	ldrb	r3, [r4, #0]
 8012c42:	2b2e      	cmp	r3, #46	@ 0x2e
 8012c44:	d10a      	bne.n	8012c5c <_svfiprintf_r+0x130>
 8012c46:	7863      	ldrb	r3, [r4, #1]
 8012c48:	2b2a      	cmp	r3, #42	@ 0x2a
 8012c4a:	d132      	bne.n	8012cb2 <_svfiprintf_r+0x186>
 8012c4c:	9b03      	ldr	r3, [sp, #12]
 8012c4e:	1d1a      	adds	r2, r3, #4
 8012c50:	681b      	ldr	r3, [r3, #0]
 8012c52:	9203      	str	r2, [sp, #12]
 8012c54:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012c58:	3402      	adds	r4, #2
 8012c5a:	9305      	str	r3, [sp, #20]
 8012c5c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8012d20 <_svfiprintf_r+0x1f4>
 8012c60:	7821      	ldrb	r1, [r4, #0]
 8012c62:	2203      	movs	r2, #3
 8012c64:	4650      	mov	r0, sl
 8012c66:	f7ed fb43 	bl	80002f0 <memchr>
 8012c6a:	b138      	cbz	r0, 8012c7c <_svfiprintf_r+0x150>
 8012c6c:	9b04      	ldr	r3, [sp, #16]
 8012c6e:	eba0 000a 	sub.w	r0, r0, sl
 8012c72:	2240      	movs	r2, #64	@ 0x40
 8012c74:	4082      	lsls	r2, r0
 8012c76:	4313      	orrs	r3, r2
 8012c78:	3401      	adds	r4, #1
 8012c7a:	9304      	str	r3, [sp, #16]
 8012c7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012c80:	4824      	ldr	r0, [pc, #144]	@ (8012d14 <_svfiprintf_r+0x1e8>)
 8012c82:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012c86:	2206      	movs	r2, #6
 8012c88:	f7ed fb32 	bl	80002f0 <memchr>
 8012c8c:	2800      	cmp	r0, #0
 8012c8e:	d036      	beq.n	8012cfe <_svfiprintf_r+0x1d2>
 8012c90:	4b21      	ldr	r3, [pc, #132]	@ (8012d18 <_svfiprintf_r+0x1ec>)
 8012c92:	bb1b      	cbnz	r3, 8012cdc <_svfiprintf_r+0x1b0>
 8012c94:	9b03      	ldr	r3, [sp, #12]
 8012c96:	3307      	adds	r3, #7
 8012c98:	f023 0307 	bic.w	r3, r3, #7
 8012c9c:	3308      	adds	r3, #8
 8012c9e:	9303      	str	r3, [sp, #12]
 8012ca0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012ca2:	4433      	add	r3, r6
 8012ca4:	9309      	str	r3, [sp, #36]	@ 0x24
 8012ca6:	e76a      	b.n	8012b7e <_svfiprintf_r+0x52>
 8012ca8:	fb0c 3202 	mla	r2, ip, r2, r3
 8012cac:	460c      	mov	r4, r1
 8012cae:	2001      	movs	r0, #1
 8012cb0:	e7a8      	b.n	8012c04 <_svfiprintf_r+0xd8>
 8012cb2:	2300      	movs	r3, #0
 8012cb4:	3401      	adds	r4, #1
 8012cb6:	9305      	str	r3, [sp, #20]
 8012cb8:	4619      	mov	r1, r3
 8012cba:	f04f 0c0a 	mov.w	ip, #10
 8012cbe:	4620      	mov	r0, r4
 8012cc0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012cc4:	3a30      	subs	r2, #48	@ 0x30
 8012cc6:	2a09      	cmp	r2, #9
 8012cc8:	d903      	bls.n	8012cd2 <_svfiprintf_r+0x1a6>
 8012cca:	2b00      	cmp	r3, #0
 8012ccc:	d0c6      	beq.n	8012c5c <_svfiprintf_r+0x130>
 8012cce:	9105      	str	r1, [sp, #20]
 8012cd0:	e7c4      	b.n	8012c5c <_svfiprintf_r+0x130>
 8012cd2:	fb0c 2101 	mla	r1, ip, r1, r2
 8012cd6:	4604      	mov	r4, r0
 8012cd8:	2301      	movs	r3, #1
 8012cda:	e7f0      	b.n	8012cbe <_svfiprintf_r+0x192>
 8012cdc:	ab03      	add	r3, sp, #12
 8012cde:	9300      	str	r3, [sp, #0]
 8012ce0:	462a      	mov	r2, r5
 8012ce2:	4b0e      	ldr	r3, [pc, #56]	@ (8012d1c <_svfiprintf_r+0x1f0>)
 8012ce4:	a904      	add	r1, sp, #16
 8012ce6:	4638      	mov	r0, r7
 8012ce8:	f3af 8000 	nop.w
 8012cec:	1c42      	adds	r2, r0, #1
 8012cee:	4606      	mov	r6, r0
 8012cf0:	d1d6      	bne.n	8012ca0 <_svfiprintf_r+0x174>
 8012cf2:	89ab      	ldrh	r3, [r5, #12]
 8012cf4:	065b      	lsls	r3, r3, #25
 8012cf6:	f53f af2d 	bmi.w	8012b54 <_svfiprintf_r+0x28>
 8012cfa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012cfc:	e72c      	b.n	8012b58 <_svfiprintf_r+0x2c>
 8012cfe:	ab03      	add	r3, sp, #12
 8012d00:	9300      	str	r3, [sp, #0]
 8012d02:	462a      	mov	r2, r5
 8012d04:	4b05      	ldr	r3, [pc, #20]	@ (8012d1c <_svfiprintf_r+0x1f0>)
 8012d06:	a904      	add	r1, sp, #16
 8012d08:	4638      	mov	r0, r7
 8012d0a:	f000 f879 	bl	8012e00 <_printf_i>
 8012d0e:	e7ed      	b.n	8012cec <_svfiprintf_r+0x1c0>
 8012d10:	08013318 	.word	0x08013318
 8012d14:	08013322 	.word	0x08013322
 8012d18:	00000000 	.word	0x00000000
 8012d1c:	08012a75 	.word	0x08012a75
 8012d20:	0801331e 	.word	0x0801331e

08012d24 <_printf_common>:
 8012d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012d28:	4616      	mov	r6, r2
 8012d2a:	4698      	mov	r8, r3
 8012d2c:	688a      	ldr	r2, [r1, #8]
 8012d2e:	690b      	ldr	r3, [r1, #16]
 8012d30:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8012d34:	4293      	cmp	r3, r2
 8012d36:	bfb8      	it	lt
 8012d38:	4613      	movlt	r3, r2
 8012d3a:	6033      	str	r3, [r6, #0]
 8012d3c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8012d40:	4607      	mov	r7, r0
 8012d42:	460c      	mov	r4, r1
 8012d44:	b10a      	cbz	r2, 8012d4a <_printf_common+0x26>
 8012d46:	3301      	adds	r3, #1
 8012d48:	6033      	str	r3, [r6, #0]
 8012d4a:	6823      	ldr	r3, [r4, #0]
 8012d4c:	0699      	lsls	r1, r3, #26
 8012d4e:	bf42      	ittt	mi
 8012d50:	6833      	ldrmi	r3, [r6, #0]
 8012d52:	3302      	addmi	r3, #2
 8012d54:	6033      	strmi	r3, [r6, #0]
 8012d56:	6825      	ldr	r5, [r4, #0]
 8012d58:	f015 0506 	ands.w	r5, r5, #6
 8012d5c:	d106      	bne.n	8012d6c <_printf_common+0x48>
 8012d5e:	f104 0a19 	add.w	sl, r4, #25
 8012d62:	68e3      	ldr	r3, [r4, #12]
 8012d64:	6832      	ldr	r2, [r6, #0]
 8012d66:	1a9b      	subs	r3, r3, r2
 8012d68:	42ab      	cmp	r3, r5
 8012d6a:	dc26      	bgt.n	8012dba <_printf_common+0x96>
 8012d6c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8012d70:	6822      	ldr	r2, [r4, #0]
 8012d72:	3b00      	subs	r3, #0
 8012d74:	bf18      	it	ne
 8012d76:	2301      	movne	r3, #1
 8012d78:	0692      	lsls	r2, r2, #26
 8012d7a:	d42b      	bmi.n	8012dd4 <_printf_common+0xb0>
 8012d7c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8012d80:	4641      	mov	r1, r8
 8012d82:	4638      	mov	r0, r7
 8012d84:	47c8      	blx	r9
 8012d86:	3001      	adds	r0, #1
 8012d88:	d01e      	beq.n	8012dc8 <_printf_common+0xa4>
 8012d8a:	6823      	ldr	r3, [r4, #0]
 8012d8c:	6922      	ldr	r2, [r4, #16]
 8012d8e:	f003 0306 	and.w	r3, r3, #6
 8012d92:	2b04      	cmp	r3, #4
 8012d94:	bf02      	ittt	eq
 8012d96:	68e5      	ldreq	r5, [r4, #12]
 8012d98:	6833      	ldreq	r3, [r6, #0]
 8012d9a:	1aed      	subeq	r5, r5, r3
 8012d9c:	68a3      	ldr	r3, [r4, #8]
 8012d9e:	bf0c      	ite	eq
 8012da0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012da4:	2500      	movne	r5, #0
 8012da6:	4293      	cmp	r3, r2
 8012da8:	bfc4      	itt	gt
 8012daa:	1a9b      	subgt	r3, r3, r2
 8012dac:	18ed      	addgt	r5, r5, r3
 8012dae:	2600      	movs	r6, #0
 8012db0:	341a      	adds	r4, #26
 8012db2:	42b5      	cmp	r5, r6
 8012db4:	d11a      	bne.n	8012dec <_printf_common+0xc8>
 8012db6:	2000      	movs	r0, #0
 8012db8:	e008      	b.n	8012dcc <_printf_common+0xa8>
 8012dba:	2301      	movs	r3, #1
 8012dbc:	4652      	mov	r2, sl
 8012dbe:	4641      	mov	r1, r8
 8012dc0:	4638      	mov	r0, r7
 8012dc2:	47c8      	blx	r9
 8012dc4:	3001      	adds	r0, #1
 8012dc6:	d103      	bne.n	8012dd0 <_printf_common+0xac>
 8012dc8:	f04f 30ff 	mov.w	r0, #4294967295
 8012dcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012dd0:	3501      	adds	r5, #1
 8012dd2:	e7c6      	b.n	8012d62 <_printf_common+0x3e>
 8012dd4:	18e1      	adds	r1, r4, r3
 8012dd6:	1c5a      	adds	r2, r3, #1
 8012dd8:	2030      	movs	r0, #48	@ 0x30
 8012dda:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8012dde:	4422      	add	r2, r4
 8012de0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8012de4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8012de8:	3302      	adds	r3, #2
 8012dea:	e7c7      	b.n	8012d7c <_printf_common+0x58>
 8012dec:	2301      	movs	r3, #1
 8012dee:	4622      	mov	r2, r4
 8012df0:	4641      	mov	r1, r8
 8012df2:	4638      	mov	r0, r7
 8012df4:	47c8      	blx	r9
 8012df6:	3001      	adds	r0, #1
 8012df8:	d0e6      	beq.n	8012dc8 <_printf_common+0xa4>
 8012dfa:	3601      	adds	r6, #1
 8012dfc:	e7d9      	b.n	8012db2 <_printf_common+0x8e>
	...

08012e00 <_printf_i>:
 8012e00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012e04:	7e0f      	ldrb	r7, [r1, #24]
 8012e06:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8012e08:	2f78      	cmp	r7, #120	@ 0x78
 8012e0a:	4691      	mov	r9, r2
 8012e0c:	4680      	mov	r8, r0
 8012e0e:	460c      	mov	r4, r1
 8012e10:	469a      	mov	sl, r3
 8012e12:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8012e16:	d807      	bhi.n	8012e28 <_printf_i+0x28>
 8012e18:	2f62      	cmp	r7, #98	@ 0x62
 8012e1a:	d80a      	bhi.n	8012e32 <_printf_i+0x32>
 8012e1c:	2f00      	cmp	r7, #0
 8012e1e:	f000 80d1 	beq.w	8012fc4 <_printf_i+0x1c4>
 8012e22:	2f58      	cmp	r7, #88	@ 0x58
 8012e24:	f000 80b8 	beq.w	8012f98 <_printf_i+0x198>
 8012e28:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012e2c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8012e30:	e03a      	b.n	8012ea8 <_printf_i+0xa8>
 8012e32:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8012e36:	2b15      	cmp	r3, #21
 8012e38:	d8f6      	bhi.n	8012e28 <_printf_i+0x28>
 8012e3a:	a101      	add	r1, pc, #4	@ (adr r1, 8012e40 <_printf_i+0x40>)
 8012e3c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012e40:	08012e99 	.word	0x08012e99
 8012e44:	08012ead 	.word	0x08012ead
 8012e48:	08012e29 	.word	0x08012e29
 8012e4c:	08012e29 	.word	0x08012e29
 8012e50:	08012e29 	.word	0x08012e29
 8012e54:	08012e29 	.word	0x08012e29
 8012e58:	08012ead 	.word	0x08012ead
 8012e5c:	08012e29 	.word	0x08012e29
 8012e60:	08012e29 	.word	0x08012e29
 8012e64:	08012e29 	.word	0x08012e29
 8012e68:	08012e29 	.word	0x08012e29
 8012e6c:	08012fab 	.word	0x08012fab
 8012e70:	08012ed7 	.word	0x08012ed7
 8012e74:	08012f65 	.word	0x08012f65
 8012e78:	08012e29 	.word	0x08012e29
 8012e7c:	08012e29 	.word	0x08012e29
 8012e80:	08012fcd 	.word	0x08012fcd
 8012e84:	08012e29 	.word	0x08012e29
 8012e88:	08012ed7 	.word	0x08012ed7
 8012e8c:	08012e29 	.word	0x08012e29
 8012e90:	08012e29 	.word	0x08012e29
 8012e94:	08012f6d 	.word	0x08012f6d
 8012e98:	6833      	ldr	r3, [r6, #0]
 8012e9a:	1d1a      	adds	r2, r3, #4
 8012e9c:	681b      	ldr	r3, [r3, #0]
 8012e9e:	6032      	str	r2, [r6, #0]
 8012ea0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012ea4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8012ea8:	2301      	movs	r3, #1
 8012eaa:	e09c      	b.n	8012fe6 <_printf_i+0x1e6>
 8012eac:	6833      	ldr	r3, [r6, #0]
 8012eae:	6820      	ldr	r0, [r4, #0]
 8012eb0:	1d19      	adds	r1, r3, #4
 8012eb2:	6031      	str	r1, [r6, #0]
 8012eb4:	0606      	lsls	r6, r0, #24
 8012eb6:	d501      	bpl.n	8012ebc <_printf_i+0xbc>
 8012eb8:	681d      	ldr	r5, [r3, #0]
 8012eba:	e003      	b.n	8012ec4 <_printf_i+0xc4>
 8012ebc:	0645      	lsls	r5, r0, #25
 8012ebe:	d5fb      	bpl.n	8012eb8 <_printf_i+0xb8>
 8012ec0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8012ec4:	2d00      	cmp	r5, #0
 8012ec6:	da03      	bge.n	8012ed0 <_printf_i+0xd0>
 8012ec8:	232d      	movs	r3, #45	@ 0x2d
 8012eca:	426d      	negs	r5, r5
 8012ecc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012ed0:	4858      	ldr	r0, [pc, #352]	@ (8013034 <_printf_i+0x234>)
 8012ed2:	230a      	movs	r3, #10
 8012ed4:	e011      	b.n	8012efa <_printf_i+0xfa>
 8012ed6:	6821      	ldr	r1, [r4, #0]
 8012ed8:	6833      	ldr	r3, [r6, #0]
 8012eda:	0608      	lsls	r0, r1, #24
 8012edc:	f853 5b04 	ldr.w	r5, [r3], #4
 8012ee0:	d402      	bmi.n	8012ee8 <_printf_i+0xe8>
 8012ee2:	0649      	lsls	r1, r1, #25
 8012ee4:	bf48      	it	mi
 8012ee6:	b2ad      	uxthmi	r5, r5
 8012ee8:	2f6f      	cmp	r7, #111	@ 0x6f
 8012eea:	4852      	ldr	r0, [pc, #328]	@ (8013034 <_printf_i+0x234>)
 8012eec:	6033      	str	r3, [r6, #0]
 8012eee:	bf14      	ite	ne
 8012ef0:	230a      	movne	r3, #10
 8012ef2:	2308      	moveq	r3, #8
 8012ef4:	2100      	movs	r1, #0
 8012ef6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8012efa:	6866      	ldr	r6, [r4, #4]
 8012efc:	60a6      	str	r6, [r4, #8]
 8012efe:	2e00      	cmp	r6, #0
 8012f00:	db05      	blt.n	8012f0e <_printf_i+0x10e>
 8012f02:	6821      	ldr	r1, [r4, #0]
 8012f04:	432e      	orrs	r6, r5
 8012f06:	f021 0104 	bic.w	r1, r1, #4
 8012f0a:	6021      	str	r1, [r4, #0]
 8012f0c:	d04b      	beq.n	8012fa6 <_printf_i+0x1a6>
 8012f0e:	4616      	mov	r6, r2
 8012f10:	fbb5 f1f3 	udiv	r1, r5, r3
 8012f14:	fb03 5711 	mls	r7, r3, r1, r5
 8012f18:	5dc7      	ldrb	r7, [r0, r7]
 8012f1a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8012f1e:	462f      	mov	r7, r5
 8012f20:	42bb      	cmp	r3, r7
 8012f22:	460d      	mov	r5, r1
 8012f24:	d9f4      	bls.n	8012f10 <_printf_i+0x110>
 8012f26:	2b08      	cmp	r3, #8
 8012f28:	d10b      	bne.n	8012f42 <_printf_i+0x142>
 8012f2a:	6823      	ldr	r3, [r4, #0]
 8012f2c:	07df      	lsls	r7, r3, #31
 8012f2e:	d508      	bpl.n	8012f42 <_printf_i+0x142>
 8012f30:	6923      	ldr	r3, [r4, #16]
 8012f32:	6861      	ldr	r1, [r4, #4]
 8012f34:	4299      	cmp	r1, r3
 8012f36:	bfde      	ittt	le
 8012f38:	2330      	movle	r3, #48	@ 0x30
 8012f3a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8012f3e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8012f42:	1b92      	subs	r2, r2, r6
 8012f44:	6122      	str	r2, [r4, #16]
 8012f46:	f8cd a000 	str.w	sl, [sp]
 8012f4a:	464b      	mov	r3, r9
 8012f4c:	aa03      	add	r2, sp, #12
 8012f4e:	4621      	mov	r1, r4
 8012f50:	4640      	mov	r0, r8
 8012f52:	f7ff fee7 	bl	8012d24 <_printf_common>
 8012f56:	3001      	adds	r0, #1
 8012f58:	d14a      	bne.n	8012ff0 <_printf_i+0x1f0>
 8012f5a:	f04f 30ff 	mov.w	r0, #4294967295
 8012f5e:	b004      	add	sp, #16
 8012f60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012f64:	6823      	ldr	r3, [r4, #0]
 8012f66:	f043 0320 	orr.w	r3, r3, #32
 8012f6a:	6023      	str	r3, [r4, #0]
 8012f6c:	4832      	ldr	r0, [pc, #200]	@ (8013038 <_printf_i+0x238>)
 8012f6e:	2778      	movs	r7, #120	@ 0x78
 8012f70:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8012f74:	6823      	ldr	r3, [r4, #0]
 8012f76:	6831      	ldr	r1, [r6, #0]
 8012f78:	061f      	lsls	r7, r3, #24
 8012f7a:	f851 5b04 	ldr.w	r5, [r1], #4
 8012f7e:	d402      	bmi.n	8012f86 <_printf_i+0x186>
 8012f80:	065f      	lsls	r7, r3, #25
 8012f82:	bf48      	it	mi
 8012f84:	b2ad      	uxthmi	r5, r5
 8012f86:	6031      	str	r1, [r6, #0]
 8012f88:	07d9      	lsls	r1, r3, #31
 8012f8a:	bf44      	itt	mi
 8012f8c:	f043 0320 	orrmi.w	r3, r3, #32
 8012f90:	6023      	strmi	r3, [r4, #0]
 8012f92:	b11d      	cbz	r5, 8012f9c <_printf_i+0x19c>
 8012f94:	2310      	movs	r3, #16
 8012f96:	e7ad      	b.n	8012ef4 <_printf_i+0xf4>
 8012f98:	4826      	ldr	r0, [pc, #152]	@ (8013034 <_printf_i+0x234>)
 8012f9a:	e7e9      	b.n	8012f70 <_printf_i+0x170>
 8012f9c:	6823      	ldr	r3, [r4, #0]
 8012f9e:	f023 0320 	bic.w	r3, r3, #32
 8012fa2:	6023      	str	r3, [r4, #0]
 8012fa4:	e7f6      	b.n	8012f94 <_printf_i+0x194>
 8012fa6:	4616      	mov	r6, r2
 8012fa8:	e7bd      	b.n	8012f26 <_printf_i+0x126>
 8012faa:	6833      	ldr	r3, [r6, #0]
 8012fac:	6825      	ldr	r5, [r4, #0]
 8012fae:	6961      	ldr	r1, [r4, #20]
 8012fb0:	1d18      	adds	r0, r3, #4
 8012fb2:	6030      	str	r0, [r6, #0]
 8012fb4:	062e      	lsls	r6, r5, #24
 8012fb6:	681b      	ldr	r3, [r3, #0]
 8012fb8:	d501      	bpl.n	8012fbe <_printf_i+0x1be>
 8012fba:	6019      	str	r1, [r3, #0]
 8012fbc:	e002      	b.n	8012fc4 <_printf_i+0x1c4>
 8012fbe:	0668      	lsls	r0, r5, #25
 8012fc0:	d5fb      	bpl.n	8012fba <_printf_i+0x1ba>
 8012fc2:	8019      	strh	r1, [r3, #0]
 8012fc4:	2300      	movs	r3, #0
 8012fc6:	6123      	str	r3, [r4, #16]
 8012fc8:	4616      	mov	r6, r2
 8012fca:	e7bc      	b.n	8012f46 <_printf_i+0x146>
 8012fcc:	6833      	ldr	r3, [r6, #0]
 8012fce:	1d1a      	adds	r2, r3, #4
 8012fd0:	6032      	str	r2, [r6, #0]
 8012fd2:	681e      	ldr	r6, [r3, #0]
 8012fd4:	6862      	ldr	r2, [r4, #4]
 8012fd6:	2100      	movs	r1, #0
 8012fd8:	4630      	mov	r0, r6
 8012fda:	f7ed f989 	bl	80002f0 <memchr>
 8012fde:	b108      	cbz	r0, 8012fe4 <_printf_i+0x1e4>
 8012fe0:	1b80      	subs	r0, r0, r6
 8012fe2:	6060      	str	r0, [r4, #4]
 8012fe4:	6863      	ldr	r3, [r4, #4]
 8012fe6:	6123      	str	r3, [r4, #16]
 8012fe8:	2300      	movs	r3, #0
 8012fea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012fee:	e7aa      	b.n	8012f46 <_printf_i+0x146>
 8012ff0:	6923      	ldr	r3, [r4, #16]
 8012ff2:	4632      	mov	r2, r6
 8012ff4:	4649      	mov	r1, r9
 8012ff6:	4640      	mov	r0, r8
 8012ff8:	47d0      	blx	sl
 8012ffa:	3001      	adds	r0, #1
 8012ffc:	d0ad      	beq.n	8012f5a <_printf_i+0x15a>
 8012ffe:	6823      	ldr	r3, [r4, #0]
 8013000:	079b      	lsls	r3, r3, #30
 8013002:	d413      	bmi.n	801302c <_printf_i+0x22c>
 8013004:	68e0      	ldr	r0, [r4, #12]
 8013006:	9b03      	ldr	r3, [sp, #12]
 8013008:	4298      	cmp	r0, r3
 801300a:	bfb8      	it	lt
 801300c:	4618      	movlt	r0, r3
 801300e:	e7a6      	b.n	8012f5e <_printf_i+0x15e>
 8013010:	2301      	movs	r3, #1
 8013012:	4632      	mov	r2, r6
 8013014:	4649      	mov	r1, r9
 8013016:	4640      	mov	r0, r8
 8013018:	47d0      	blx	sl
 801301a:	3001      	adds	r0, #1
 801301c:	d09d      	beq.n	8012f5a <_printf_i+0x15a>
 801301e:	3501      	adds	r5, #1
 8013020:	68e3      	ldr	r3, [r4, #12]
 8013022:	9903      	ldr	r1, [sp, #12]
 8013024:	1a5b      	subs	r3, r3, r1
 8013026:	42ab      	cmp	r3, r5
 8013028:	dcf2      	bgt.n	8013010 <_printf_i+0x210>
 801302a:	e7eb      	b.n	8013004 <_printf_i+0x204>
 801302c:	2500      	movs	r5, #0
 801302e:	f104 0619 	add.w	r6, r4, #25
 8013032:	e7f5      	b.n	8013020 <_printf_i+0x220>
 8013034:	08013329 	.word	0x08013329
 8013038:	0801333a 	.word	0x0801333a

0801303c <memmove>:
 801303c:	4288      	cmp	r0, r1
 801303e:	b510      	push	{r4, lr}
 8013040:	eb01 0402 	add.w	r4, r1, r2
 8013044:	d902      	bls.n	801304c <memmove+0x10>
 8013046:	4284      	cmp	r4, r0
 8013048:	4623      	mov	r3, r4
 801304a:	d807      	bhi.n	801305c <memmove+0x20>
 801304c:	1e43      	subs	r3, r0, #1
 801304e:	42a1      	cmp	r1, r4
 8013050:	d008      	beq.n	8013064 <memmove+0x28>
 8013052:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013056:	f803 2f01 	strb.w	r2, [r3, #1]!
 801305a:	e7f8      	b.n	801304e <memmove+0x12>
 801305c:	4402      	add	r2, r0
 801305e:	4601      	mov	r1, r0
 8013060:	428a      	cmp	r2, r1
 8013062:	d100      	bne.n	8013066 <memmove+0x2a>
 8013064:	bd10      	pop	{r4, pc}
 8013066:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801306a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801306e:	e7f7      	b.n	8013060 <memmove+0x24>

08013070 <_sbrk_r>:
 8013070:	b538      	push	{r3, r4, r5, lr}
 8013072:	4d06      	ldr	r5, [pc, #24]	@ (801308c <_sbrk_r+0x1c>)
 8013074:	2300      	movs	r3, #0
 8013076:	4604      	mov	r4, r0
 8013078:	4608      	mov	r0, r1
 801307a:	602b      	str	r3, [r5, #0]
 801307c:	f7ee ff40 	bl	8001f00 <_sbrk>
 8013080:	1c43      	adds	r3, r0, #1
 8013082:	d102      	bne.n	801308a <_sbrk_r+0x1a>
 8013084:	682b      	ldr	r3, [r5, #0]
 8013086:	b103      	cbz	r3, 801308a <_sbrk_r+0x1a>
 8013088:	6023      	str	r3, [r4, #0]
 801308a:	bd38      	pop	{r3, r4, r5, pc}
 801308c:	24002248 	.word	0x24002248

08013090 <memcpy>:
 8013090:	440a      	add	r2, r1
 8013092:	4291      	cmp	r1, r2
 8013094:	f100 33ff 	add.w	r3, r0, #4294967295
 8013098:	d100      	bne.n	801309c <memcpy+0xc>
 801309a:	4770      	bx	lr
 801309c:	b510      	push	{r4, lr}
 801309e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80130a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80130a6:	4291      	cmp	r1, r2
 80130a8:	d1f9      	bne.n	801309e <memcpy+0xe>
 80130aa:	bd10      	pop	{r4, pc}

080130ac <_realloc_r>:
 80130ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80130b0:	4607      	mov	r7, r0
 80130b2:	4614      	mov	r4, r2
 80130b4:	460d      	mov	r5, r1
 80130b6:	b921      	cbnz	r1, 80130c2 <_realloc_r+0x16>
 80130b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80130bc:	4611      	mov	r1, r2
 80130be:	f7ff bc4d 	b.w	801295c <_malloc_r>
 80130c2:	b92a      	cbnz	r2, 80130d0 <_realloc_r+0x24>
 80130c4:	f7ff fbde 	bl	8012884 <_free_r>
 80130c8:	4625      	mov	r5, r4
 80130ca:	4628      	mov	r0, r5
 80130cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80130d0:	f000 f81a 	bl	8013108 <_malloc_usable_size_r>
 80130d4:	4284      	cmp	r4, r0
 80130d6:	4606      	mov	r6, r0
 80130d8:	d802      	bhi.n	80130e0 <_realloc_r+0x34>
 80130da:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80130de:	d8f4      	bhi.n	80130ca <_realloc_r+0x1e>
 80130e0:	4621      	mov	r1, r4
 80130e2:	4638      	mov	r0, r7
 80130e4:	f7ff fc3a 	bl	801295c <_malloc_r>
 80130e8:	4680      	mov	r8, r0
 80130ea:	b908      	cbnz	r0, 80130f0 <_realloc_r+0x44>
 80130ec:	4645      	mov	r5, r8
 80130ee:	e7ec      	b.n	80130ca <_realloc_r+0x1e>
 80130f0:	42b4      	cmp	r4, r6
 80130f2:	4622      	mov	r2, r4
 80130f4:	4629      	mov	r1, r5
 80130f6:	bf28      	it	cs
 80130f8:	4632      	movcs	r2, r6
 80130fa:	f7ff ffc9 	bl	8013090 <memcpy>
 80130fe:	4629      	mov	r1, r5
 8013100:	4638      	mov	r0, r7
 8013102:	f7ff fbbf 	bl	8012884 <_free_r>
 8013106:	e7f1      	b.n	80130ec <_realloc_r+0x40>

08013108 <_malloc_usable_size_r>:
 8013108:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801310c:	1f18      	subs	r0, r3, #4
 801310e:	2b00      	cmp	r3, #0
 8013110:	bfbc      	itt	lt
 8013112:	580b      	ldrlt	r3, [r1, r0]
 8013114:	18c0      	addlt	r0, r0, r3
 8013116:	4770      	bx	lr

08013118 <_init>:
 8013118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801311a:	bf00      	nop
 801311c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801311e:	bc08      	pop	{r3}
 8013120:	469e      	mov	lr, r3
 8013122:	4770      	bx	lr

08013124 <_fini>:
 8013124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013126:	bf00      	nop
 8013128:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801312a:	bc08      	pop	{r3}
 801312c:	469e      	mov	lr, r3
 801312e:	4770      	bx	lr
